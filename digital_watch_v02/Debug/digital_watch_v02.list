
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101d4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08010484  08010484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010810  08010810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010818  08010818  00011818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801081c  0801081c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08010820  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000ac9c4  24000070  0801088c  00012070  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  240aca34  0801088c  00012a34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00044258  00000000  00000000  0001209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c1f  00000000  00000000  000562f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00029a94  00000000  00000000  0005cf11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a78  00000000  00000000  000869a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000046c0  00000000  00000000  00088420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a689  00000000  00000000  0008cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004851a  00000000  00000000  000c7169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00163b6a  00000000  00000000  0010f683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002731ed  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000057d8  00000000  00000000  00273230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006c  00000000  00000000  00278a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801046c 	.word	0x0801046c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0801046c 	.word	0x0801046c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	461d      	mov	r5, r3
 8000398:	460e      	mov	r6, r1
 800039a:	4604      	mov	r4, r0
 800039c:	9b08      	ldr	r3, [sp, #32]
  uint32_t readSize= 0;
 800039e:	2100      	movs	r1, #0
  
  pavi->pVideoBuffer = pVideoBuffer;
 80003a0:	6342      	str	r2, [r0, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;

  pavi->pAudioBuffer = pAudioBuffer;
 80003a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
{
 80003a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  pavi->VideoBufferSize = VideoBufferSize;
 80003a6:	6385      	str	r5, [r0, #56]	@ 0x38
  pavi->AudioBufferSize = AudioBufferSize;
 80003a8:	6403      	str	r3, [r0, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80003aa:	4630      	mov	r0, r6
  uint32_t readSize= 0;
 80003ac:	9101      	str	r1, [sp, #4]
  f_lseek(file, 0 );
 80003ae:	f00f f9cb 	bl	800f748 <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80003b2:	ab01      	add	r3, sp, #4
 80003b4:	462a      	mov	r2, r5
 80003b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80003b8:	4630      	mov	r0, r6
 80003ba:	f00f f80b 	bl	800f3d4 <f_read>
  if(readSize != VideoBufferSize)
 80003be:	9b01      	ldr	r3, [sp, #4]
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d104      	bne.n	80003ce <AVI_ParserInit+0x3e>
  {
    return 1;
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 80003c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  if(aviheader->RiffID != AVI_RIFF_ID)
 80003c6:	4a86      	ldr	r2, [pc, #536]	@ (80005e0 <AVI_ParserInit+0x250>)
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	4291      	cmp	r1, r2
 80003cc:	d003      	beq.n	80003d6 <AVI_ParserInit+0x46>
    return 1;
 80003ce:	2001      	movs	r0, #1

  pavi->FileSize= f_size(file);
  pavi->CurrentImage=0;
  
  return  0;
}
 80003d0:	b002      	add	sp, #8
 80003d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(aviheader->AviID != AVI_AVI_ID)
 80003d6:	4a83      	ldr	r2, [pc, #524]	@ (80005e4 <AVI_ParserInit+0x254>)
 80003d8:	6899      	ldr	r1, [r3, #8]
 80003da:	4291      	cmp	r1, r2
 80003dc:	d1f7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListID != AVI_LIST_ID)
 80003de:	4982      	ldr	r1, [pc, #520]	@ (80005e8 <AVI_ParserInit+0x258>)
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	428a      	cmp	r2, r1
 80003e4:	d1f3      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_HDRL_ID)
 80003e6:	4981      	ldr	r1, [pc, #516]	@ (80005ec <AVI_ParserInit+0x25c>)
 80003e8:	6958      	ldr	r0, [r3, #20]
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d1ef      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(avihheader->BlockID != AVI_AVIH_ID)
 80003ee:	f1a1 6181 	sub.w	r1, r1, #67633152	@ 0x4080000
 80003f2:	6998      	ldr	r0, [r3, #24]
 80003f4:	f5a1 416e 	sub.w	r1, r1, #60928	@ 0xee00
 80003f8:	3907      	subs	r1, #7
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d1e7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 80003fe:	6a18      	ldr	r0, [r3, #32]
 8000400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000402:	e9c4 0100 	strd	r0, r1, [r4]
  buf+=avihheader->BlockSize+8;            
 8000406:	69d9      	ldr	r1, [r3, #28]
 8000408:	3120      	adds	r1, #32
  if(listheader->ListID != AVI_LIST_ID)
 800040a:	5858      	ldr	r0, [r3, r1]
  buf+=avihheader->BlockSize+8;            
 800040c:	4419      	add	r1, r3
  if(listheader->ListID != AVI_LIST_ID)
 800040e:	4290      	cmp	r0, r2
 8000410:	d1dd      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_STRL_ID)
 8000412:	4a77      	ldr	r2, [pc, #476]	@ (80005f0 <AVI_ParserInit+0x260>)
 8000414:	6888      	ldr	r0, [r1, #8]
 8000416:	4290      	cmp	r0, r2
 8000418:	d1d9      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->BlockID != AVI_STRH_ID)
 800041a:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
 800041e:	68c8      	ldr	r0, [r1, #12]
 8000420:	4290      	cmp	r0, r2
 8000422:	d1d4      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 8000424:	694a      	ldr	r2, [r1, #20]
 8000426:	4873      	ldr	r0, [pc, #460]	@ (80005f4 <AVI_ParserInit+0x264>)
 8000428:	4282      	cmp	r2, r0
 800042a:	d02a      	beq.n	8000482 <AVI_ParserInit+0xf2>
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800042c:	4872      	ldr	r0, [pc, #456]	@ (80005f8 <AVI_ParserInit+0x268>)
 800042e:	4282      	cmp	r2, r0
 8000430:	d047      	beq.n	80004c2 <AVI_ParserInit+0x132>
  for(i=0;i<size;i++)
 8000432:	3d04      	subs	r5, #4
 8000434:	d0cb      	beq.n	80003ce <AVI_ParserInit+0x3e>
 8000436:	2200      	movs	r2, #0
 8000438:	4611      	mov	r1, r2
 800043a:	e002      	b.n	8000442 <AVI_ParserInit+0xb2>
 800043c:	4295      	cmp	r5, r2
 800043e:	4611      	mov	r1, r2
 8000440:	d9c5      	bls.n	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 8000442:	5c58      	ldrb	r0, [r3, r1]
  for(i=0;i<size;i++)
 8000444:	3201      	adds	r2, #1
    if(buf[i] == id[0])
 8000446:	eb03 0c01 	add.w	ip, r3, r1
 800044a:	286d      	cmp	r0, #109	@ 0x6d
  for(i=0;i<size;i++)
 800044c:	b292      	uxth	r2, r2
    if(buf[i] == id[0])
 800044e:	d1f5      	bne.n	800043c <AVI_ParserInit+0xac>
      if(buf[i+1] == id[1])
 8000450:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8000454:	286f      	cmp	r0, #111	@ 0x6f
 8000456:	d1f1      	bne.n	800043c <AVI_ParserInit+0xac>
        if(buf[i+2] == id[2])  
 8000458:	f89c 0002 	ldrb.w	r0, [ip, #2]
 800045c:	2876      	cmp	r0, #118	@ 0x76
 800045e:	d1ed      	bne.n	800043c <AVI_ParserInit+0xac>
          if(buf[i+3] == id[3])
 8000460:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8000464:	2869      	cmp	r0, #105	@ 0x69
 8000466:	d1e9      	bne.n	800043c <AVI_ParserInit+0xac>
  if(offset == 0)
 8000468:	2900      	cmp	r1, #0
 800046a:	d0b0      	beq.n	80003ce <AVI_ParserInit+0x3e>
  if(pavi->aviInfo.SampleRate)
 800046c:	6963      	ldr	r3, [r4, #20]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d169      	bne.n	8000546 <AVI_ParserInit+0x1b6>
  pavi->CurrentImage=0;
 8000472:	2300      	movs	r3, #0
  pavi->FileSize= f_size(file);
 8000474:	68f2      	ldr	r2, [r6, #12]
  return  0;
 8000476:	4618      	mov	r0, r3
  pavi->FileSize= f_size(file);
 8000478:	6462      	str	r2, [r4, #68]	@ 0x44
  pavi->CurrentImage=0;
 800047a:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800047c:	b002      	add	sp, #8
 800047e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000482:	4a5e      	ldr	r2, [pc, #376]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000484:	6988      	ldr	r0, [r1, #24]
 8000486:	4290      	cmp	r0, r2
 8000488:	d1a1      	bne.n	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048a:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800048c:	485c      	ldr	r0, [pc, #368]	@ (8000600 <AVI_ParserInit+0x270>)
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048e:	3214      	adds	r2, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000490:	4f5c      	ldr	r7, [pc, #368]	@ (8000604 <AVI_ParserInit+0x274>)
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000492:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 8000494:	485c      	ldr	r0, [pc, #368]	@ (8000608 <AVI_ParserInit+0x278>)
 8000496:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000498:	5888      	ldr	r0, [r1, r2]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800049a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800049c:	42b8      	cmp	r0, r7
 800049e:	d196      	bne.n	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80004a0:	e9d2 7203 	ldrd	r7, r2, [r2, #12]
 80004a4:	e9c4 7203 	strd	r7, r2, [r4, #12]
    buf+=listheader->BlockSize+8;          
 80004a8:	684a      	ldr	r2, [r1, #4]
    if(listheader->ListID != AVI_LIST_ID)
 80004aa:	4f4f      	ldr	r7, [pc, #316]	@ (80005e8 <AVI_ParserInit+0x258>)
    buf+=listheader->BlockSize+8;          
 80004ac:	3208      	adds	r2, #8
    if(listheader->ListID != AVI_LIST_ID)
 80004ae:	f851 c002 	ldr.w	ip, [r1, r2]
    buf+=listheader->BlockSize+8;          
 80004b2:	440a      	add	r2, r1
    if(listheader->ListID != AVI_LIST_ID)
 80004b4:	45bc      	cmp	ip, r7
 80004b6:	d070      	beq.n	800059a <AVI_ParserInit+0x20a>
      pavi->aviInfo.SampleRate=0;          
 80004b8:	2200      	movs	r2, #0
 80004ba:	6162      	str	r2, [r4, #20]
      pavi->aviInfo.Channels=0;          
 80004bc:	8322      	strh	r2, [r4, #24]
      pavi->aviInfo.AudioType=0;          
 80004be:	83a2      	strh	r2, [r4, #28]
 80004c0:	e7b7      	b.n	8000432 <AVI_ParserInit+0xa2>
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c2:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c4:	4851      	ldr	r0, [pc, #324]	@ (800060c <AVI_ParserInit+0x27c>)
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c6:	3214      	adds	r2, #20
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c8:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004ca:	4851      	ldr	r0, [pc, #324]	@ (8000610 <AVI_ParserInit+0x280>)
    if(wavheader->BlockID != AVI_STRF_ID)
 80004cc:	f851 c002 	ldr.w	ip, [r1, r2]
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004d0:	440a      	add	r2, r1
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004d2:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(wavheader->BlockID != AVI_STRF_ID)
 80004d4:	484b      	ldr	r0, [pc, #300]	@ (8000604 <AVI_ParserInit+0x274>)
 80004d6:	4584      	cmp	ip, r0
 80004d8:	f47f af79 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004dc:	68d7      	ldr	r7, [r2, #12]
    buf+=listheader->BlockSize+8;          
 80004de:	6848      	ldr	r0, [r1, #4]
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004e0:	6167      	str	r7, [r4, #20]
    buf+=listheader->BlockSize+8;          
 80004e2:	3008      	adds	r0, #8
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004e4:	8957      	ldrh	r7, [r2, #10]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004e6:	8912      	ldrh	r2, [r2, #8]
    if(listheader->ListID != AVI_LIST_ID)
 80004e8:	f851 e000 	ldr.w	lr, [r1, r0]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004ec:	8327      	strh	r7, [r4, #24]
    if(listheader->ListID != AVI_LIST_ID)
 80004ee:	4f3e      	ldr	r7, [pc, #248]	@ (80005e8 <AVI_ParserInit+0x258>)
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004f0:	83a2      	strh	r2, [r4, #28]
    buf+=listheader->BlockSize+8;          
 80004f2:	180a      	adds	r2, r1, r0
    if(listheader->ListID != AVI_LIST_ID)
 80004f4:	45be      	cmp	lr, r7
 80004f6:	f47f af6a 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(listheader->ListType != AVI_STRL_ID)
 80004fa:	493d      	ldr	r1, [pc, #244]	@ (80005f0 <AVI_ParserInit+0x260>)
 80004fc:	6890      	ldr	r0, [r2, #8]
 80004fe:	4288      	cmp	r0, r1
 8000500:	f47f af65 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->BlockID != AVI_STRH_ID)
 8000504:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 8000508:	68d0      	ldr	r0, [r2, #12]
 800050a:	4288      	cmp	r0, r1
 800050c:	f47f af5f 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000510:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 8000514:	6950      	ldr	r0, [r2, #20]
 8000516:	f501 31fa 	add.w	r1, r1, #128000	@ 0x1f400
 800051a:	f201 1103 	addw	r1, r1, #259	@ 0x103
 800051e:	4288      	cmp	r0, r1
 8000520:	f47f af55 	bne.w	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000524:	6911      	ldr	r1, [r2, #16]
 8000526:	3114      	adds	r1, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000528:	5850      	ldr	r0, [r2, r1]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800052a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800052c:	4560      	cmp	r0, ip
 800052e:	f47f af4e 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000532:	4932      	ldr	r1, [pc, #200]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000534:	6990      	ldr	r0, [r2, #24]
 8000536:	4288      	cmp	r0, r1
 8000538:	f47f af49 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800053c:	e9d2 1203 	ldrd	r1, r2, [r2, #12]
 8000540:	e9c4 1203 	strd	r1, r2, [r4, #12]
 8000544:	e775      	b.n	8000432 <AVI_ParserInit+0xa2>
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000546:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
  for(i=0;i<size;i++)
 800054a:	2300      	movs	r3, #0
    if(buf[i] == id[0])
 800054c:	f898 0000 	ldrb.w	r0, [r8]
  for(i=0;i<size;i++)
 8000550:	4619      	mov	r1, r3
 8000552:	e003      	b.n	800055c <AVI_ParserInit+0x1cc>
 8000554:	429d      	cmp	r5, r3
 8000556:	4619      	mov	r1, r3
 8000558:	f67f af39 	bls.w	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 800055c:	f81c 2001 	ldrb.w	r2, [ip, r1]
  for(i=0;i<size;i++)
 8000560:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 8000562:	4282      	cmp	r2, r0
  for(i=0;i<size;i++)
 8000564:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000566:	d1f5      	bne.n	8000554 <AVI_ParserInit+0x1c4>
      if(buf[i+1] == id[1])
 8000568:	eb0c 0201 	add.w	r2, ip, r1
 800056c:	f898 e001 	ldrb.w	lr, [r8, #1]
 8000570:	7857      	ldrb	r7, [r2, #1]
 8000572:	4577      	cmp	r7, lr
 8000574:	d1ee      	bne.n	8000554 <AVI_ParserInit+0x1c4>
        if(buf[i+2] == id[2])  
 8000576:	f892 e002 	ldrb.w	lr, [r2, #2]
 800057a:	f898 7002 	ldrb.w	r7, [r8, #2]
 800057e:	45be      	cmp	lr, r7
 8000580:	d1e8      	bne.n	8000554 <AVI_ParserInit+0x1c4>
          if(buf[i+3] == id[3])
 8000582:	f892 e003 	ldrb.w	lr, [r2, #3]
 8000586:	f898 7003 	ldrb.w	r7, [r8, #3]
 800058a:	45be      	cmp	lr, r7
 800058c:	d1e2      	bne.n	8000554 <AVI_ParserInit+0x1c4>
    if(offset == 0)
 800058e:	2900      	cmp	r1, #0
 8000590:	f43f af1d 	beq.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000594:	8893      	ldrh	r3, [r2, #4]
 8000596:	8363      	strh	r3, [r4, #26]
 8000598:	e76b      	b.n	8000472 <AVI_ParserInit+0xe2>
      if(listheader->ListType != AVI_STRL_ID)
 800059a:	4915      	ldr	r1, [pc, #84]	@ (80005f0 <AVI_ParserInit+0x260>)
 800059c:	6897      	ldr	r7, [r2, #8]
 800059e:	428f      	cmp	r7, r1
 80005a0:	f47f af15 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->BlockID != AVI_STRH_ID)
 80005a4:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 80005a8:	68d7      	ldr	r7, [r2, #12]
 80005aa:	428f      	cmp	r7, r1
 80005ac:	f47f af0f 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 80005b0:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 80005b4:	6957      	ldr	r7, [r2, #20]
 80005b6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 80005ba:	31ee      	adds	r1, #238	@ 0xee
 80005bc:	428f      	cmp	r7, r1
 80005be:	f47f af06 	bne.w	80003ce <AVI_ParserInit+0x3e>
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c2:	6911      	ldr	r1, [r2, #16]
 80005c4:	3114      	adds	r1, #20
      if(wavheader->BlockID != AVI_STRF_ID)
 80005c6:	5857      	ldr	r7, [r2, r1]
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c8:	440a      	add	r2, r1
      if(wavheader->BlockID != AVI_STRF_ID)
 80005ca:	4287      	cmp	r7, r0
 80005cc:	f47f aeff 	bne.w	80003ce <AVI_ParserInit+0x3e>
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 80005d0:	68d1      	ldr	r1, [r2, #12]
 80005d2:	6161      	str	r1, [r4, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d4:	8951      	ldrh	r1, [r2, #10]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005d6:	8912      	ldrh	r2, [r2, #8]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d8:	8321      	strh	r1, [r4, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005da:	83a2      	strh	r2, [r4, #28]
 80005dc:	e729      	b.n	8000432 <AVI_ParserInit+0xa2>
 80005de:	bf00      	nop
 80005e0:	46464952 	.word	0x46464952
 80005e4:	20495641 	.word	0x20495641
 80005e8:	5453494c 	.word	0x5453494c
 80005ec:	6c726468 	.word	0x6c726468
 80005f0:	6c727473 	.word	0x6c727473
 80005f4:	73646976 	.word	0x73646976
 80005f8:	73647561 	.word	0x73647561
 80005fc:	47504a4d 	.word	0x47504a4d
 8000600:	08010484 	.word	0x08010484
 8000604:	66727473 	.word	0x66727473
 8000608:	0801048c 	.word	0x0801048c
 800060c:	08010494 	.word	0x08010494
 8000610:	0801049c 	.word	0x0801049c

08000614 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000616:	2300      	movs	r3, #0
{
 8000618:	b083      	sub	sp, #12
  
  if(pavi->CurrentImage== 0 )
 800061a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
{
 800061c:	4605      	mov	r5, r0
 800061e:	460e      	mov	r6, r1
 8000620:	4617      	mov	r7, r2
  uint32_t readSize = 0;
 8000622:	9301      	str	r3, [sp, #4]
  if(pavi->CurrentImage== 0 )
 8000624:	b164      	cbz	r4, 8000640 <AVI_GetFrame+0x2c>
    f_lseek(file, offset + 12 );
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000626:	8beb      	ldrh	r3, [r5, #30]
 8000628:	f246 4263 	movw	r2, #25699	@ 0x6463
 800062c:	4293      	cmp	r3, r2
 800062e:	d046      	beq.n	80006be <AVI_GetFrame+0xaa>

	}
    
    return AVI_VIDEO_FRAME;
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000630:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000634:	4293      	cmp	r3, r2
 8000636:	f000 808c 	beq.w	8000752 <AVI_GetFrame+0x13e>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
    
  }
  
  return 0;
 800063a:	2000      	movs	r0, #0
}
 800063c:	b003      	add	sp, #12
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(file, 0 ); /* Go to the file start */
 8000640:	4621      	mov	r1, r4
 8000642:	4630      	mov	r0, r6
 8000644:	f00f f880 	bl	800f748 <f_lseek>
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 8000648:	ab01      	add	r3, sp, #4
 800064a:	4630      	mov	r0, r6
 800064c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	@ 0x34
 8000650:	f00e fec0 	bl	800f3d4 <f_read>
  size-=4;
 8000654:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	@ 0x34
  for(i=0;i<size;i++)
 8000658:	3904      	subs	r1, #4
 800065a:	d01d      	beq.n	8000698 <AVI_GetFrame+0x84>
 800065c:	4623      	mov	r3, r4
 800065e:	e002      	b.n	8000666 <AVI_GetFrame+0x52>
 8000660:	4299      	cmp	r1, r3
 8000662:	461c      	mov	r4, r3
 8000664:	d918      	bls.n	8000698 <AVI_GetFrame+0x84>
    if(buf[i] == id[0])
 8000666:	f812 c004 	ldrb.w	ip, [r2, r4]
  for(i=0;i<size;i++)
 800066a:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 800066c:	f1bc 0f6d 	cmp.w	ip, #109	@ 0x6d
  for(i=0;i<size;i++)
 8000670:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000672:	d1f5      	bne.n	8000660 <AVI_GetFrame+0x4c>
      if(buf[i+1] == id[1])
 8000674:	1910      	adds	r0, r2, r4
 8000676:	f890 c001 	ldrb.w	ip, [r0, #1]
 800067a:	f1bc 0f6f 	cmp.w	ip, #111	@ 0x6f
 800067e:	d1ef      	bne.n	8000660 <AVI_GetFrame+0x4c>
        if(buf[i+2] == id[2])  
 8000680:	f890 c002 	ldrb.w	ip, [r0, #2]
 8000684:	f1bc 0f76 	cmp.w	ip, #118	@ 0x76
 8000688:	d1ea      	bne.n	8000660 <AVI_GetFrame+0x4c>
          if(buf[i+3] == id[3])
 800068a:	78c0      	ldrb	r0, [r0, #3]
 800068c:	2869      	cmp	r0, #105	@ 0x69
 800068e:	d1e7      	bne.n	8000660 <AVI_GetFrame+0x4c>
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000690:	1d23      	adds	r3, r4, #4
    f_lseek(file, offset + 12 );
 8000692:	f104 010c 	add.w	r1, r4, #12
 8000696:	e001      	b.n	800069c <AVI_GetFrame+0x88>
  for(i=0;i<size;i++)
 8000698:	210c      	movs	r1, #12
 800069a:	2304      	movs	r3, #4
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800069c:	441a      	add	r2, r3
    f_lseek(file, offset + 12 );
 800069e:	4630      	mov	r0, r6
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006a0:	8853      	ldrh	r3, [r2, #2]
 80006a2:	ba5b      	rev16	r3, r3
 80006a4:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006a6:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006a8:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 80006aa:	bf48      	it	mi
 80006ac:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006ae:	622b      	str	r3, [r5, #32]
    f_lseek(file, offset + 12 );
 80006b0:	f00f f84a 	bl	800f748 <f_lseek>
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80006b4:	8beb      	ldrh	r3, [r5, #30]
 80006b6:	f246 4263 	movw	r2, #25699	@ 0x6463
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d1b8      	bne.n	8000630 <AVI_GetFrame+0x1c>
	if(skipFlag == 1)
 80006be:	2f01      	cmp	r7, #1
 80006c0:	d018      	beq.n	80006f4 <AVI_GetFrame+0xe0>
	else if(skipFlag == 2)
 80006c2:	2f02      	cmp	r7, #2
 80006c4:	d02d      	beq.n	8000722 <AVI_GetFrame+0x10e>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006c6:	6a29      	ldr	r1, [r5, #32]
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006c8:	ab01      	add	r3, sp, #4
 80006ca:	4630      	mov	r0, r6
 80006cc:	f101 0208 	add.w	r2, r1, #8
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006d0:	6329      	str	r1, [r5, #48]	@ 0x30
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006d2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80006d4:	f00e fe7e 	bl	800f3d4 <f_read>
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 80006d8:	6a2a      	ldr	r2, [r5, #32]
 80006da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80006dc:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006de:	885a      	ldrh	r2, [r3, #2]
 80006e0:	ba52      	rev16	r2, r2
 80006e2:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006e4:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006e6:	07d9      	lsls	r1, r3, #31
 80006e8:	461a      	mov	r2, r3
 80006ea:	d518      	bpl.n	800071e <AVI_GetFrame+0x10a>
    pavi->aviInfo.StreamSize++;
 80006ec:	3301      	adds	r3, #1
 80006ee:	622b      	str	r3, [r5, #32]
    return AVI_VIDEO_FRAME;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7a3      	b.n	800063c <AVI_GetFrame+0x28>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006f4:	6a2b      	ldr	r3, [r5, #32]
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006f6:	4630      	mov	r0, r6
 80006f8:	69b1      	ldr	r1, [r6, #24]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006fa:	632b      	str	r3, [r5, #48]	@ 0x30
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006fc:	4419      	add	r1, r3
 80006fe:	f00f f823 	bl	800f748 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000702:	ab01      	add	r3, sp, #4
 8000704:	2208      	movs	r2, #8
 8000706:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000708:	4630      	mov	r0, r6
 800070a:	f00e fe63 	bl	800f3d4 <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800070e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000710:	8853      	ldrh	r3, [r2, #2]
 8000712:	ba5b      	rev16	r3, r3
 8000714:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000716:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000718:	07dc      	lsls	r4, r3, #31
 800071a:	461a      	mov	r2, r3
 800071c:	d4e6      	bmi.n	80006ec <AVI_GetFrame+0xd8>
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800071e:	622a      	str	r2, [r5, #32]
 8000720:	e7e6      	b.n	80006f0 <AVI_GetFrame+0xdc>
		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 8000722:	69b3      	ldr	r3, [r6, #24]
 8000724:	4630      	mov	r0, r6
 8000726:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8000728:	3b10      	subs	r3, #16
 800072a:	1a59      	subs	r1, r3, r1
 800072c:	f00f f80c 	bl	800f748 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000730:	ab01      	add	r3, sp, #4
 8000732:	2208      	movs	r2, #8
 8000734:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000736:	4630      	mov	r0, r6
 8000738:	f00e fe4c 	bl	800f3d4 <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800073c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800073e:	8853      	ldrh	r3, [r2, #2]
 8000740:	ba5b      	rev16	r3, r3
 8000742:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000744:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000746:	07d8      	lsls	r0, r3, #31
    pavi->aviInfo.StreamSize++;
 8000748:	bf48      	it	mi
 800074a:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800074c:	622b      	str	r3, [r5, #32]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800074e:	632b      	str	r3, [r5, #48]	@ 0x30
 8000750:	e7ce      	b.n	80006f0 <AVI_GetFrame+0xdc>
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000752:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000754:	ab01      	add	r3, sp, #4
 8000756:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8000758:	4630      	mov	r0, r6
 800075a:	3208      	adds	r2, #8
 800075c:	f00e fe3a 	bl	800f3d4 <f_read>
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000760:	6a2a      	ldr	r2, [r5, #32]
 8000762:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return AVI_AUDIO_FRAME;
 8000764:	2002      	movs	r0, #2
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000766:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000768:	885a      	ldrh	r2, [r3, #2]
 800076a:	ba52      	rev16	r2, r2
 800076c:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800076e:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000770:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 8000772:	bf48      	it	mi
 8000774:	3301      	addmi	r3, #1
 8000776:	622b      	str	r3, [r5, #32]
 8000778:	e760      	b.n	800063c <AVI_GetFrame+0x28>
 800077a:	bf00      	nop

0800077c <i2c_register_get>:
    return 1;

}

static int i2c_register_get(fxls8974_i2c_sensorhandle_t *pSensorHandle, uint8_t reg_addr, uint8_t *reg_data)
{
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t status;
	uint32_t count_iter = 0;


	i2c_repeated_start = 1;
 800077e:	2301      	movs	r3, #1
{
 8000780:	b085      	sub	sp, #20
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 8000782:	2600      	movs	r6, #0
{
 8000784:	4605      	mov	r5, r0
	i2c_repeated_start = 1;
 8000786:	4c15      	ldr	r4, [pc, #84]	@ (80007dc <i2c_register_get+0x60>)
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 8000788:	9600      	str	r6, [sp, #0]
{
 800078a:	4616      	mov	r6, r2
 800078c:	f88d 100f 	strb.w	r1, [sp, #15]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 8000790:	f10d 020f 	add.w	r2, sp, #15
 8000794:	8881      	ldrh	r1, [r0, #4]
 8000796:	68af      	ldr	r7, [r5, #8]
 8000798:	6800      	ldr	r0, [r0, #0]
	i2c_repeated_start = 1;
 800079a:	7023      	strb	r3, [r4, #0]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 800079c:	47b8      	blx	r7
    if(HAL_OK != status)
 800079e:	b988      	cbnz	r0, 80007c4 <i2c_register_get+0x48>
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <i2c_register_get+0x64>)
 80007a2:	e001      	b.n	80007a8 <i2c_register_get+0x2c>

    while(i2c_repeated_start)
    {

    	count_iter++;
    	if(count_iter > MAX_ITERATIONS_NUM)
 80007a4:	3b01      	subs	r3, #1
 80007a6:	d00d      	beq.n	80007c4 <i2c_register_get+0x48>
    while(i2c_repeated_start)
 80007a8:	7821      	ldrb	r1, [r4, #0]
 80007aa:	2900      	cmp	r1, #0
 80007ac:	d1fa      	bne.n	80007a4 <i2c_register_get+0x28>
    		return 0;

    }

    status = pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, I2C_LAST_FRAME);
 80007ae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80007b2:	68ec      	ldr	r4, [r5, #12]
 80007b4:	2301      	movs	r3, #1
 80007b6:	4632      	mov	r2, r6
 80007b8:	9100      	str	r1, [sp, #0]
 80007ba:	88a9      	ldrh	r1, [r5, #4]
 80007bc:	6828      	ldr	r0, [r5, #0]
 80007be:	47a0      	blx	r4
    if(HAL_OK != status)
 80007c0:	4603      	mov	r3, r0
 80007c2:	b110      	cbz	r0, 80007ca <i2c_register_get+0x4e>
        return 0;
 80007c4:	2000      	movs	r0, #0

    HAL_Delay(100);

    return 1;

}
 80007c6:	b005      	add	sp, #20
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i2c_rx_cplt = 0;
 80007ca:	4a06      	ldr	r2, [pc, #24]	@ (80007e4 <i2c_register_get+0x68>)
    HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	@ 0x64
    i2c_rx_cplt = 0;
 80007ce:	7013      	strb	r3, [r2, #0]
    HAL_Delay(100);
 80007d0:	f002 fe94 	bl	80034fc <HAL_Delay>
 80007d4:	2001      	movs	r0, #1
}
 80007d6:	b005      	add	sp, #20
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	bf00      	nop
 80007dc:	2400008c 	.word	0x2400008c
 80007e0:	000f4241 	.word	0x000f4241
 80007e4:	2400008d 	.word	0x2400008d

080007e8 <i2c_register_set.constprop.0>:
static int i2c_register_set(fxls8974_i2c_sensorhandle_t *pSensorHandle, uint8_t reg_addr, uint8_t val, uint8_t mask, uint8_t shift)
 80007e8:	b530      	push	{r4, r5, lr}
	reg_data = ( REG_SET(val, shift) & mask );
 80007ea:	401a      	ands	r2, r3
static int i2c_register_set(fxls8974_i2c_sensorhandle_t *pSensorHandle, uint8_t reg_addr, uint8_t val, uint8_t mask, uint8_t shift)
 80007ec:	b085      	sub	sp, #20
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80007ee:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 80007f2:	6884      	ldr	r4, [r0, #8]
	data_buff[0] = reg_addr;
 80007f4:	f88d 100c 	strb.w	r1, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80007f8:	2302      	movs	r3, #2
 80007fa:	9500      	str	r5, [sp, #0]
	data_buff[1] = reg_data;
 80007fc:	f88d 200d 	strb.w	r2, [sp, #13]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000800:	aa03      	add	r2, sp, #12
 8000802:	8881      	ldrh	r1, [r0, #4]
 8000804:	6800      	ldr	r0, [r0, #0]
 8000806:	47a0      	blx	r4
    if(HAL_OK != status)
 8000808:	b110      	cbz	r0, 8000810 <i2c_register_set.constprop.0+0x28>
        return 0;
 800080a:	2000      	movs	r0, #0
}
 800080c:	b005      	add	sp, #20
 800080e:	bd30      	pop	{r4, r5, pc}
 8000810:	4603      	mov	r3, r0
    i2c_tx_cplt = 0;
 8000812:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <i2c_register_set.constprop.0+0x3c>)
    HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 8000816:	7013      	strb	r3, [r2, #0]
    HAL_Delay(100);
 8000818:	f002 fe70 	bl	80034fc <HAL_Delay>
 800081c:	2001      	movs	r0, #1
}
 800081e:	b005      	add	sp, #20
 8000820:	bd30      	pop	{r4, r5, pc}
 8000822:	bf00      	nop
 8000824:	2400008e 	.word	0x2400008e

08000828 <FXLS8974_I2C_Init>:
{
 8000828:	b510      	push	{r4, lr}
 800082a:	f8bd c008 	ldrh.w	ip, [sp, #8]
    if(( pSensorHandle == NULL ) || ( instance == NULL ) || ( pI2C_funTx == NULL ) || ( pI2C_funRx == NULL ))
 800082e:	b178      	cbz	r0, 8000850 <FXLS8974_I2C_Init+0x28>
 8000830:	b171      	cbz	r1, 8000850 <FXLS8974_I2C_Init+0x28>
 8000832:	b16a      	cbz	r2, 8000850 <FXLS8974_I2C_Init+0x28>
 8000834:	b163      	cbz	r3, 8000850 <FXLS8974_I2C_Init+0x28>
    pSensorHandle->pI2C_instance = instance;
 8000836:	6001      	str	r1, [r0, #0]
    status = i2c_register_get(pSensorHandle, FXLS8974_WHO_AM_I, &pSensorHandle->data_reg);
 8000838:	2113      	movs	r1, #19
    pSensorHandle->pI2C_data_Tx = pI2C_funTx;
 800083a:	6082      	str	r2, [r0, #8]
    status = i2c_register_get(pSensorHandle, FXLS8974_WHO_AM_I, &pSensorHandle->data_reg);
 800083c:	f100 0210 	add.w	r2, r0, #16
    pSensorHandle->pI2C_data_Rx = pI2C_funRx;
 8000840:	60c3      	str	r3, [r0, #12]
    pSensorHandle->slaveAddress = sAddress;
 8000842:	4604      	mov	r4, r0
 8000844:	f8a0 c004 	strh.w	ip, [r0, #4]
    status = i2c_register_get(pSensorHandle, FXLS8974_WHO_AM_I, &pSensorHandle->data_reg);
 8000848:	f7ff ff98 	bl	800077c <i2c_register_get>
    if(1 != status)
 800084c:	2801      	cmp	r0, #1
 800084e:	d001      	beq.n	8000854 <FXLS8974_I2C_Init+0x2c>
        return 0;
 8000850:	2000      	movs	r0, #0
}
 8000852:	bd10      	pop	{r4, pc}
    if(FXLS8974_WHOAMI_VALUE != whoami)
 8000854:	7c20      	ldrb	r0, [r4, #16]
 8000856:	f1a0 0086 	sub.w	r0, r0, #134	@ 0x86
 800085a:	fab0 f080 	clz	r0, r0
 800085e:	0940      	lsrs	r0, r0, #5
}
 8000860:	bd10      	pop	{r4, pc}
 8000862:	bf00      	nop

08000864 <FXLS8974_I2C_Configure>:
    if(pSensorHandle == NULL)
 8000864:	2800      	cmp	r0, #0
 8000866:	f000 80da 	beq.w	8000a1e <FXLS8974_I2C_Configure+0x1ba>
	data_buff[0] = reg_addr;
 800086a:	2315      	movs	r3, #21
{
 800086c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000870:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
{
 8000874:	b084      	sub	sp, #16
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000876:	6886      	ldr	r6, [r0, #8]
 8000878:	4604      	mov	r4, r0
 800087a:	9500      	str	r5, [sp, #0]
 800087c:	aa03      	add	r2, sp, #12
 800087e:	8881      	ldrh	r1, [r0, #4]
	data_buff[0] = reg_addr;
 8000880:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000884:	2302      	movs	r3, #2
 8000886:	6800      	ldr	r0, [r0, #0]
 8000888:	47b0      	blx	r6
    if(HAL_OK != status)
 800088a:	b118      	cbz	r0, 8000894 <FXLS8974_I2C_Configure+0x30>
        return 0;
 800088c:	2000      	movs	r0, #0
}
 800088e:	b004      	add	sp, #16
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    i2c_tx_cplt = 0;
 8000894:	4e6e      	ldr	r6, [pc, #440]	@ (8000a50 <FXLS8974_I2C_Configure+0x1ec>)
 8000896:	7030      	strb	r0, [r6, #0]
    HAL_Delay(100);
 8000898:	2064      	movs	r0, #100	@ 0x64
 800089a:	f002 fe2f 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 800089e:	f245 5317 	movw	r3, #21783	@ 0x5517
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008a2:	9500      	str	r5, [sp, #0]
 80008a4:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 80008a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008aa:	2302      	movs	r3, #2
 80008ac:	88a1      	ldrh	r1, [r4, #4]
 80008ae:	6820      	ldr	r0, [r4, #0]
 80008b0:	68a7      	ldr	r7, [r4, #8]
 80008b2:	47b8      	blx	r7
    if(HAL_OK != status)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d1e9      	bne.n	800088c <FXLS8974_I2C_Configure+0x28>
    i2c_tx_cplt = 0;
 80008b8:	7030      	strb	r0, [r6, #0]
    HAL_Delay(100);
 80008ba:	2064      	movs	r0, #100	@ 0x64
 80008bc:	f002 fe1e 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 80008c0:	f241 032f 	movw	r3, #4143	@ 0x102f
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008c4:	9500      	str	r5, [sp, #0]
 80008c6:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 80008c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008cc:	2302      	movs	r3, #2
 80008ce:	88a1      	ldrh	r1, [r4, #4]
 80008d0:	6820      	ldr	r0, [r4, #0]
 80008d2:	68a7      	ldr	r7, [r4, #8]
 80008d4:	47b8      	blx	r7
    if(HAL_OK != status)
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d1d8      	bne.n	800088c <FXLS8974_I2C_Configure+0x28>
    i2c_tx_cplt = 0;
 80008da:	7030      	strb	r0, [r6, #0]
    HAL_Delay(100);
 80008dc:	2064      	movs	r0, #100	@ 0x64
 80008de:	f002 fe0d 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 80008e2:	f24f 0330 	movw	r3, #61488	@ 0xf030
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008e6:	9500      	str	r5, [sp, #0]
 80008e8:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 80008ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008ee:	2302      	movs	r3, #2
 80008f0:	68a7      	ldr	r7, [r4, #8]
 80008f2:	88a1      	ldrh	r1, [r4, #4]
 80008f4:	6820      	ldr	r0, [r4, #0]
 80008f6:	47b8      	blx	r7
    if(HAL_OK != status)
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d1c7      	bne.n	800088c <FXLS8974_I2C_Configure+0x28>
    i2c_tx_cplt = 0;
 80008fc:	7030      	strb	r0, [r6, #0]
    HAL_Delay(100);
 80008fe:	2064      	movs	r0, #100	@ 0x64
 8000900:	f002 fdfc 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 8000904:	f240 6331 	movw	r3, #1585	@ 0x631
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000908:	9500      	str	r5, [sp, #0]
 800090a:	aa03      	add	r2, sp, #12
 800090c:	68a7      	ldr	r7, [r4, #8]
	data_buff[0] = reg_addr;
 800090e:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000912:	2302      	movs	r3, #2
 8000914:	88a1      	ldrh	r1, [r4, #4]
 8000916:	6820      	ldr	r0, [r4, #0]
 8000918:	47b8      	blx	r7
    if(HAL_OK != status)
 800091a:	4607      	mov	r7, r0
 800091c:	2800      	cmp	r0, #0
 800091e:	d1b5      	bne.n	800088c <FXLS8974_I2C_Configure+0x28>
    i2c_tx_cplt = 0;
 8000920:	7030      	strb	r0, [r6, #0]
    HAL_Delay(100);
 8000922:	2064      	movs	r0, #100	@ 0x64
 8000924:	f002 fdea 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 8000928:	2333      	movs	r3, #51	@ 0x33
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 800092a:	9500      	str	r5, [sp, #0]
 800092c:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 800092e:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000932:	2302      	movs	r3, #2
 8000934:	68a5      	ldr	r5, [r4, #8]
 8000936:	88a1      	ldrh	r1, [r4, #4]
 8000938:	6820      	ldr	r0, [r4, #0]
 800093a:	47a8      	blx	r5
    if(HAL_OK != status)
 800093c:	4603      	mov	r3, r0
 800093e:	b920      	cbnz	r0, 800094a <FXLS8974_I2C_Configure+0xe6>
    HAL_Delay(100);
 8000940:	2701      	movs	r7, #1
 8000942:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 8000944:	7033      	strb	r3, [r6, #0]
    HAL_Delay(100);
 8000946:	f002 fdd9 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 800094a:	f44f 734d 	mov.w	r3, #820	@ 0x334
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 800094e:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 8000950:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000954:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2302      	movs	r3, #2
 800095c:	68a5      	ldr	r5, [r4, #8]
 800095e:	88a1      	ldrh	r1, [r4, #4]
 8000960:	6820      	ldr	r0, [r4, #0]
 8000962:	47a8      	blx	r5
    if(HAL_OK != status)
 8000964:	2800      	cmp	r0, #0
 8000966:	d171      	bne.n	8000a4c <FXLS8974_I2C_Configure+0x1e8>
    i2c_tx_cplt = 0;
 8000968:	7030      	strb	r0, [r6, #0]
    HAL_Delay(100);
 800096a:	2064      	movs	r0, #100	@ 0x64
 800096c:	f002 fdc6 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 8000970:	2335      	movs	r3, #53	@ 0x35
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000972:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8000976:	aa03      	add	r2, sp, #12
 8000978:	f8cd 8000 	str.w	r8, [sp]
	data_buff[0] = reg_addr;
 800097c:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000980:	2302      	movs	r3, #2
 8000982:	88a1      	ldrh	r1, [r4, #4]
 8000984:	6820      	ldr	r0, [r4, #0]
 8000986:	68a5      	ldr	r5, [r4, #8]
 8000988:	47a8      	blx	r5
    if(HAL_OK != status)
 800098a:	2800      	cmp	r0, #0
 800098c:	d149      	bne.n	8000a22 <FXLS8974_I2C_Configure+0x1be>
    i2c_tx_cplt = 0;
 800098e:	7030      	strb	r0, [r6, #0]
    HAL_Delay(100);
 8000990:	2064      	movs	r0, #100	@ 0x64
 8000992:	f002 fdb3 	bl	80034fc <HAL_Delay>
	data_buff[0] = reg_addr;
 8000996:	f240 5336 	movw	r3, #1334	@ 0x536
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 800099a:	f8cd 8000 	str.w	r8, [sp]
 800099e:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 80009a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80009a4:	2302      	movs	r3, #2
 80009a6:	68a5      	ldr	r5, [r4, #8]
 80009a8:	88a1      	ldrh	r1, [r4, #4]
 80009aa:	6820      	ldr	r0, [r4, #0]
 80009ac:	47a8      	blx	r5
    if(HAL_OK != status)
 80009ae:	4603      	mov	r3, r0
 80009b0:	2800      	cmp	r0, #0
 80009b2:	f47f af6b 	bne.w	800088c <FXLS8974_I2C_Configure+0x28>
    HAL_Delay(100);
 80009b6:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 80009b8:	7033      	strb	r3, [r6, #0]
    HAL_Delay(100);
 80009ba:	f002 fd9f 	bl	80034fc <HAL_Delay>
    if(1 != status)
 80009be:	2f00      	cmp	r7, #0
 80009c0:	f43f af64 	beq.w	800088c <FXLS8974_I2C_Configure+0x28>
    status = i2c_register_set(pSensorHandle, FXLS8974_SENS_CONFIG4, ( FXLS8974_SENS_CONFIG4_INT_POL_ACT_HIGH ), ( FXLS8974_SENS_CONFIG4_INT_POL_MASK ), 0);
 80009c4:	463b      	mov	r3, r7
 80009c6:	463a      	mov	r2, r7
 80009c8:	2118      	movs	r1, #24
 80009ca:	4620      	mov	r0, r4
 80009cc:	f7ff ff0c 	bl	80007e8 <i2c_register_set.constprop.0>
    if(1 != status)
 80009d0:	2801      	cmp	r0, #1
 80009d2:	f47f af5b 	bne.w	800088c <FXLS8974_I2C_Configure+0x28>
    status = i2c_register_set(pSensorHandle, FXLS8974_ASLP_COUNT_LSB, 0x3f, 0xff, 0);
 80009d6:	23ff      	movs	r3, #255	@ 0xff
 80009d8:	223f      	movs	r2, #63	@ 0x3f
 80009da:	211e      	movs	r1, #30
 80009dc:	4620      	mov	r0, r4
 80009de:	f7ff ff03 	bl	80007e8 <i2c_register_set.constprop.0>
 80009e2:	4605      	mov	r5, r0
    status &= i2c_register_set(pSensorHandle, FXLS8974_ASLP_COUNT_MSB, 0x02, 0xff, 0);
 80009e4:	23ff      	movs	r3, #255	@ 0xff
 80009e6:	2202      	movs	r2, #2
 80009e8:	211f      	movs	r1, #31
 80009ea:	4620      	mov	r0, r4
 80009ec:	f7ff fefc 	bl	80007e8 <i2c_register_set.constprop.0>
 80009f0:	4005      	ands	r5, r0
    if(1 != status)
 80009f2:	2d01      	cmp	r5, #1
 80009f4:	f47f af4a 	bne.w	800088c <FXLS8974_I2C_Configure+0x28>
    status = i2c_register_set(pSensorHandle, FXLS8974_INT_EN, FXLS8974_INT_EN_SDCD_OT_EN_EN, FXLS8974_INT_EN_SDCD_OT_EN_MASK, 0);
 80009f8:	2320      	movs	r3, #32
 80009fa:	4620      	mov	r0, r4
 80009fc:	461a      	mov	r2, r3
 80009fe:	4619      	mov	r1, r3
 8000a00:	f7ff fef2 	bl	80007e8 <i2c_register_set.constprop.0>
    if(1 != status)
 8000a04:	2801      	cmp	r0, #1
 8000a06:	f47f af41 	bne.w	800088c <FXLS8974_I2C_Configure+0x28>
    status = i2c_register_set(pSensorHandle, FXLS8974_SENS_CONFIG1, FXLS8974_SENS_CONFIG1_ACTIVE_ACTIVE, FXLS8974_SENS_CONFIG1_ACTIVE_MASK, 0);
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	463a      	mov	r2, r7
 8000a0e:	2115      	movs	r1, #21
 8000a10:	4620      	mov	r0, r4
 8000a12:	f7ff fee9 	bl	80007e8 <i2c_register_set.constprop.0>
    if(1 != status)
 8000a16:	1e43      	subs	r3, r0, #1
 8000a18:	4258      	negs	r0, r3
 8000a1a:	4158      	adcs	r0, r3
 8000a1c:	e737      	b.n	800088e <FXLS8974_I2C_Configure+0x2a>
        return 0;
 8000a1e:	2000      	movs	r0, #0
}
 8000a20:	4770      	bx	lr
	data_buff[0] = reg_addr;
 8000a22:	f240 5336 	movw	r3, #1334	@ 0x536
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000a26:	f8cd 8000 	str.w	r8, [sp]
 8000a2a:	aa03      	add	r2, sp, #12
 8000a2c:	68a5      	ldr	r5, [r4, #8]
	data_buff[0] = reg_addr;
 8000a2e:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000a32:	2302      	movs	r3, #2
 8000a34:	88a1      	ldrh	r1, [r4, #4]
 8000a36:	6820      	ldr	r0, [r4, #0]
 8000a38:	47a8      	blx	r5
    if(HAL_OK != status)
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	f47f af25 	bne.w	800088c <FXLS8974_I2C_Configure+0x28>
    HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 8000a44:	7033      	strb	r3, [r6, #0]
    HAL_Delay(100);
 8000a46:	f002 fd59 	bl	80034fc <HAL_Delay>
    if(1 != status)
 8000a4a:	e71f      	b.n	800088c <FXLS8974_I2C_Configure+0x28>
 8000a4c:	2700      	movs	r7, #0
 8000a4e:	e78f      	b.n	8000970 <FXLS8974_I2C_Configure+0x10c>
 8000a50:	2400008e 	.word	0x2400008e

08000a54 <HAL_I2C_MasterTxCpltCallback>:
// CallBacks Functions

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{

	i2c_tx_cplt = 1;
 8000a54:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <HAL_I2C_MasterTxCpltCallback+0x14>)
 8000a56:	2101      	movs	r1, #1

	if(i2c_repeated_start == 1)
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <HAL_I2C_MasterTxCpltCallback+0x18>)
	i2c_tx_cplt = 1;
 8000a5a:	7011      	strb	r1, [r2, #0]
	if(i2c_repeated_start == 1)
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	428a      	cmp	r2, r1
 8000a60:	d101      	bne.n	8000a66 <HAL_I2C_MasterTxCpltCallback+0x12>
		i2c_repeated_start = 0;
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]

}
 8000a66:	4770      	bx	lr
 8000a68:	2400008e 	.word	0x2400008e
 8000a6c:	2400008c 	.word	0x2400008c

08000a70 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{

	i2c_rx_cplt = 1;
 8000a70:	4b01      	ldr	r3, [pc, #4]	@ (8000a78 <HAL_I2C_MasterRxCpltCallback+0x8>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]

}
 8000a76:	4770      	bx	lr
 8000a78:	2400008d 	.word	0x2400008d

08000a7c <GC9A01_write_data.constprop.0.isra.0>:

    return ret;

}

int GC9A01_write_data(uint8_t *data, size_t len)
 8000a7c:	b570      	push	{r4, r5, r6, lr}
	while(spi_dma_not_ready)
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <GC9A01_write_data.constprop.0.isra.0+0x7c>)
int GC9A01_write_data(uint8_t *data, size_t len)
 8000a80:	4605      	mov	r5, r0
 8000a82:	4c1e      	ldr	r4, [pc, #120]	@ (8000afc <GC9A01_write_data.constprop.0.isra.0+0x80>)
	while(spi_dma_not_ready)
 8000a84:	e001      	b.n	8000a8a <GC9A01_write_data.constprop.0.isra.0+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000a86:	3b01      	subs	r3, #1
 8000a88:	d002      	beq.n	8000a90 <GC9A01_write_data.constprop.0.isra.0+0x14>
	while(spi_dma_not_ready)
 8000a8a:	7822      	ldrb	r2, [r4, #0]
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d1fa      	bne.n	8000a86 <GC9A01_write_data.constprop.0.isra.0+0xa>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2102      	movs	r1, #2
 8000a94:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <GC9A01_write_data.constprop.0.isra.0+0x84>)
 8000a96:	f005 fd3d 	bl	8006514 <HAL_GPIO_WritePin>
}
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <GC9A01_write_data.constprop.0.isra.0+0x7c>)
 8000a9c:	e001      	b.n	8000aa2 <GC9A01_write_data.constprop.0.isra.0+0x26>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	d002      	beq.n	8000aa8 <GC9A01_write_data.constprop.0.isra.0+0x2c>
	while(spi_dma_not_ready)
 8000aa2:	7822      	ldrb	r2, [r4, #0]
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d1fa      	bne.n	8000a9e <GC9A01_write_data.constprop.0.isra.0+0x22>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000aa8:	4e16      	ldr	r6, [pc, #88]	@ (8000b04 <GC9A01_write_data.constprop.0.isra.0+0x88>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2200      	movs	r2, #0
 8000aae:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <GC9A01_write_data.constprop.0.isra.0+0x84>)
 8000ab0:	f005 fd30 	bl	8006514 <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join)
	{

		count_iter++;

		if(count_iter >= MAX_ITERATIONS_NUM)
 8000ab4:	4914      	ldr	r1, [pc, #80]	@ (8000b08 <GC9A01_write_data.constprop.0.isra.0+0x8c>)
 8000ab6:	6833      	ldr	r3, [r6, #0]
 8000ab8:	e001      	b.n	8000abe <GC9A01_write_data.constprop.0.isra.0+0x42>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d81a      	bhi.n	8000af4 <GC9A01_write_data.constprop.0.isra.0+0x78>
	while(spi_dma_not_ready && !join)
 8000abe:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 8000ac0:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8000ac2:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 8000ac6:	2a00      	cmp	r2, #0
 8000ac8:	d1f7      	bne.n	8000aba <GC9A01_write_data.constprop.0.isra.0+0x3e>

	}

	count_iter = 0;

	spi_dma_not_ready = 1;
 8000aca:	2201      	movs	r2, #1
	count_iter = 0;
 8000acc:	6030      	str	r0, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000ace:	4629      	mov	r1, r5
 8000ad0:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <GC9A01_write_data.constprop.0.isra.0+0x90>)
	spi_dma_not_ready = 1;
 8000ad2:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000ad4:	f00b fc1a 	bl	800c30c <HAL_SPI_Transmit_DMA>
}
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <GC9A01_write_data.constprop.0.isra.0+0x7c>)
 8000ada:	e001      	b.n	8000ae0 <GC9A01_write_data.constprop.0.isra.0+0x64>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000adc:	3b01      	subs	r3, #1
 8000ade:	d002      	beq.n	8000ae6 <GC9A01_write_data.constprop.0.isra.0+0x6a>
	while(spi_dma_not_ready)
 8000ae0:	7822      	ldrb	r2, [r4, #0]
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d1fa      	bne.n	8000adc <GC9A01_write_data.constprop.0.isra.0+0x60>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <GC9A01_write_data.constprop.0.isra.0+0x84>)
 8000aea:	4611      	mov	r1, r2
}
 8000aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000af0:	f005 bd10 	b.w	8006514 <HAL_GPIO_WritePin>
 8000af4:	6033      	str	r3, [r6, #0]
 8000af6:	e7ef      	b.n	8000ad8 <GC9A01_write_data.constprop.0.isra.0+0x5c>
 8000af8:	000f4240 	.word	0x000f4240
 8000afc:	24000094 	.word	0x24000094
 8000b00:	58020400 	.word	0x58020400
 8000b04:	24000090 	.word	0x24000090
 8000b08:	000f423f 	.word	0x000f423f
 8000b0c:	240002f0 	.word	0x240002f0

08000b10 <GC9A01_set_data_command>:
{
 8000b10:	b410      	push	{r4}
	while(spi_dma_not_ready)
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <GC9A01_set_data_command+0x24>)
{
 8000b14:	4602      	mov	r2, r0
 8000b16:	4c08      	ldr	r4, [pc, #32]	@ (8000b38 <GC9A01_set_data_command+0x28>)
	while(spi_dma_not_ready)
 8000b18:	e001      	b.n	8000b1e <GC9A01_set_data_command+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	d002      	beq.n	8000b24 <GC9A01_set_data_command+0x14>
	while(spi_dma_not_ready)
 8000b1e:	7821      	ldrb	r1, [r4, #0]
 8000b20:	2900      	cmp	r1, #0
 8000b22:	d1fa      	bne.n	8000b1a <GC9A01_set_data_command+0xa>
	if(val==0)
 8000b24:	b102      	cbz	r2, 8000b28 <GC9A01_set_data_command+0x18>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <GC9A01_set_data_command+0x2c>)
}
 8000b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b30:	f005 bcf0 	b.w	8006514 <HAL_GPIO_WritePin>
 8000b34:	000f4240 	.word	0x000f4240
 8000b38:	24000094 	.word	0x24000094
 8000b3c:	58020400 	.word	0x58020400

08000b40 <GC9A01_set_chip_select>:
{
 8000b40:	b410      	push	{r4}
	while(spi_dma_not_ready)
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <GC9A01_set_chip_select+0x30>)
{
 8000b44:	4602      	mov	r2, r0
 8000b46:	4c0b      	ldr	r4, [pc, #44]	@ (8000b74 <GC9A01_set_chip_select+0x34>)
	while(spi_dma_not_ready)
 8000b48:	e001      	b.n	8000b4e <GC9A01_set_chip_select+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	d002      	beq.n	8000b54 <GC9A01_set_chip_select+0x14>
	while(spi_dma_not_ready)
 8000b4e:	7821      	ldrb	r1, [r4, #0]
 8000b50:	2900      	cmp	r1, #0
 8000b52:	d1fa      	bne.n	8000b4a <GC9A01_set_chip_select+0xa>
    if (val==0)
 8000b54:	b92a      	cbnz	r2, 8000b62 <GC9A01_set_chip_select+0x22>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b56:	2101      	movs	r1, #1
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <GC9A01_set_chip_select+0x38>)
}
 8000b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b5e:	f005 bcd9 	b.w	8006514 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <GC9A01_set_chip_select+0x38>)
}
 8000b66:	f85d 4b04 	ldr.w	r4, [sp], #4
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	f005 bcd2 	b.w	8006514 <HAL_GPIO_WritePin>
 8000b70:	000f4240 	.word	0x000f4240
 8000b74:	24000094 	.word	0x24000094
 8000b78:	58020400 	.word	0x58020400

08000b7c <GC9A01_write_command>:
{
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <GC9A01_write_command+0x8c>)
 8000b82:	4c22      	ldr	r4, [pc, #136]	@ (8000c0c <GC9A01_write_command+0x90>)
 8000b84:	f88d 0007 	strb.w	r0, [sp, #7]
 8000b88:	e001      	b.n	8000b8e <GC9A01_write_command+0x12>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	d002      	beq.n	8000b94 <GC9A01_write_command+0x18>
	while(spi_dma_not_ready)
 8000b8e:	7822      	ldrb	r2, [r4, #0]
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d1fa      	bne.n	8000b8a <GC9A01_write_command+0xe>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2102      	movs	r1, #2
 8000b98:	481d      	ldr	r0, [pc, #116]	@ (8000c10 <GC9A01_write_command+0x94>)
 8000b9a:	f005 fcbb 	bl	8006514 <HAL_GPIO_WritePin>
}
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <GC9A01_write_command+0x8c>)
 8000ba0:	e001      	b.n	8000ba6 <GC9A01_write_command+0x2a>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	d002      	beq.n	8000bac <GC9A01_write_command+0x30>
	while(spi_dma_not_ready)
 8000ba6:	7822      	ldrb	r2, [r4, #0]
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	d1fa      	bne.n	8000ba2 <GC9A01_write_command+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000bac:	4e19      	ldr	r6, [pc, #100]	@ (8000c14 <GC9A01_write_command+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <GC9A01_write_command+0x94>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	f005 fcae 	bl	8006514 <HAL_GPIO_WritePin>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <GC9A01_write_command+0x9c>)
 8000bba:	6833      	ldr	r3, [r6, #0]
}
 8000bbc:	e001      	b.n	8000bc2 <GC9A01_write_command+0x46>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000bbe:	4283      	cmp	r3, r0
 8000bc0:	d81e      	bhi.n	8000c00 <GC9A01_write_command+0x84>
	while(spi_dma_not_ready && !join)
 8000bc2:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 8000bc4:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8000bc6:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d1f7      	bne.n	8000bbe <GC9A01_write_command+0x42>
	spi_dma_not_ready = 1;
 8000bce:	2501      	movs	r5, #1
	count_iter = 0;
 8000bd0:	6031      	str	r1, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000bd2:	4812      	ldr	r0, [pc, #72]	@ (8000c1c <GC9A01_write_command+0xa0>)
 8000bd4:	f10d 0107 	add.w	r1, sp, #7
 8000bd8:	462a      	mov	r2, r5
	spi_dma_not_ready = 1;
 8000bda:	7025      	strb	r5, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000bdc:	f00b fb96 	bl	800c30c <HAL_SPI_Transmit_DMA>

#else
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
#endif

	if(ret != HAL_OK)
 8000be0:	b978      	cbnz	r0, 8000c02 <GC9A01_write_command+0x86>
		return -1;

	return 1;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <GC9A01_write_command+0x8c>)
 8000be4:	e001      	b.n	8000bea <GC9A01_write_command+0x6e>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000be6:	3b01      	subs	r3, #1
 8000be8:	d002      	beq.n	8000bf0 <GC9A01_write_command+0x74>
	while(spi_dma_not_ready)
 8000bea:	7821      	ldrb	r1, [r4, #0]
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d1fa      	bne.n	8000be6 <GC9A01_write_command+0x6a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <GC9A01_write_command+0x94>)
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	f005 fc8d 	bl	8006514 <HAL_GPIO_WritePin>
}
 8000bfa:	4628      	mov	r0, r5
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	6033      	str	r3, [r6, #0]
			return -1;
 8000c02:	f04f 35ff 	mov.w	r5, #4294967295
 8000c06:	e7ec      	b.n	8000be2 <GC9A01_write_command+0x66>
 8000c08:	000f4240 	.word	0x000f4240
 8000c0c:	24000094 	.word	0x24000094
 8000c10:	58020400 	.word	0x58020400
 8000c14:	24000090 	.word	0x24000090
 8000c18:	000f423f 	.word	0x000f423f
 8000c1c:	240002f0 	.word	0x240002f0

08000c20 <GC9A01_write_data>:
{
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	4b21      	ldr	r3, [pc, #132]	@ (8000ca8 <GC9A01_write_data+0x88>)
 8000c24:	4605      	mov	r5, r0
 8000c26:	4c21      	ldr	r4, [pc, #132]	@ (8000cac <GC9A01_write_data+0x8c>)
 8000c28:	460e      	mov	r6, r1
 8000c2a:	e001      	b.n	8000c30 <GC9A01_write_data+0x10>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	d002      	beq.n	8000c36 <GC9A01_write_data+0x16>
	while(spi_dma_not_ready)
 8000c30:	7822      	ldrb	r2, [r4, #0]
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d1fa      	bne.n	8000c2c <GC9A01_write_data+0xc>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2102      	movs	r1, #2
 8000c3a:	481d      	ldr	r0, [pc, #116]	@ (8000cb0 <GC9A01_write_data+0x90>)
 8000c3c:	f005 fc6a 	bl	8006514 <HAL_GPIO_WritePin>
}
 8000c40:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <GC9A01_write_data+0x88>)
 8000c42:	e001      	b.n	8000c48 <GC9A01_write_data+0x28>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c44:	3b01      	subs	r3, #1
 8000c46:	d002      	beq.n	8000c4e <GC9A01_write_data+0x2e>
	while(spi_dma_not_ready)
 8000c48:	7822      	ldrb	r2, [r4, #0]
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d1fa      	bne.n	8000c44 <GC9A01_write_data+0x24>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c4e:	4f19      	ldr	r7, [pc, #100]	@ (8000cb4 <GC9A01_write_data+0x94>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	2200      	movs	r2, #0
 8000c54:	4816      	ldr	r0, [pc, #88]	@ (8000cb0 <GC9A01_write_data+0x90>)
 8000c56:	f005 fc5d 	bl	8006514 <HAL_GPIO_WritePin>
int GC9A01_spi_tx(uint8_t *data, uint16_t size, uint8_t join)
 8000c5a:	683b      	ldr	r3, [r7, #0]
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c5c:	4916      	ldr	r1, [pc, #88]	@ (8000cb8 <GC9A01_write_data+0x98>)
 8000c5e:	e001      	b.n	8000c64 <GC9A01_write_data+0x44>
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d81c      	bhi.n	8000c9e <GC9A01_write_data+0x7e>
	while(spi_dma_not_ready && !join)
 8000c64:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 8000c66:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8000c68:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d1f7      	bne.n	8000c60 <GC9A01_write_data+0x40>
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c70:	4629      	mov	r1, r5
	spi_dma_not_ready = 1;
 8000c72:	2501      	movs	r5, #1
	count_iter = 0;
 8000c74:	6038      	str	r0, [r7, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c76:	b2b2      	uxth	r2, r6
 8000c78:	4810      	ldr	r0, [pc, #64]	@ (8000cbc <GC9A01_write_data+0x9c>)
	spi_dma_not_ready = 1;
 8000c7a:	7025      	strb	r5, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c7c:	f00b fb46 	bl	800c30c <HAL_SPI_Transmit_DMA>
	if(ret != HAL_OK)
 8000c80:	b970      	cbnz	r0, 8000ca0 <GC9A01_write_data+0x80>
	return 1;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <GC9A01_write_data+0x88>)
 8000c84:	e001      	b.n	8000c8a <GC9A01_write_data+0x6a>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c86:	3b01      	subs	r3, #1
 8000c88:	d002      	beq.n	8000c90 <GC9A01_write_data+0x70>
	while(spi_dma_not_ready)
 8000c8a:	7822      	ldrb	r2, [r4, #0]
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	d1fa      	bne.n	8000c86 <GC9A01_write_data+0x66>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	4807      	ldr	r0, [pc, #28]	@ (8000cb0 <GC9A01_write_data+0x90>)
 8000c94:	4611      	mov	r1, r2
 8000c96:	f005 fc3d 	bl	8006514 <HAL_GPIO_WritePin>
}
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9e:	603b      	str	r3, [r7, #0]
			return -1;
 8000ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8000ca4:	e7ed      	b.n	8000c82 <GC9A01_write_data+0x62>
 8000ca6:	bf00      	nop
 8000ca8:	000f4240 	.word	0x000f4240
 8000cac:	24000094 	.word	0x24000094
 8000cb0:	58020400 	.word	0x58020400
 8000cb4:	24000090 	.word	0x24000090
 8000cb8:	000f423f 	.word	0x000f423f
 8000cbc:	240002f0 	.word	0x240002f0

08000cc0 <GC9A01_Init>:
void GC9A01_Init(void) {
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <GC9A01_Init+0x48>)
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	4c10      	ldr	r4, [pc, #64]	@ (8000d0c <GC9A01_Init+0x4c>)
 8000cca:	e001      	b.n	8000cd0 <GC9A01_Init+0x10>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	d002      	beq.n	8000cd6 <GC9A01_Init+0x16>
	while(spi_dma_not_ready)
 8000cd0:	7822      	ldrb	r2, [r4, #0]
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d1fa      	bne.n	8000ccc <GC9A01_Init+0xc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <GC9A01_Init+0x50>)
 8000cda:	4611      	mov	r1, r2
 8000cdc:	f005 fc1a 	bl	8006514 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000ce0:	2005      	movs	r0, #5
 8000ce2:	f002 fc0b 	bl	80034fc <HAL_Delay>
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <GC9A01_Init+0x48>)
 8000ce8:	e001      	b.n	8000cee <GC9A01_Init+0x2e>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000cea:	3b01      	subs	r3, #1
 8000cec:	d002      	beq.n	8000cf4 <GC9A01_Init+0x34>
	while(spi_dma_not_ready)
 8000cee:	7822      	ldrb	r2, [r4, #0]
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d1fa      	bne.n	8000cea <GC9A01_Init+0x2a>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <GC9A01_Init+0x50>)
 8000cfa:	f005 fc0b 	bl	8006514 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000cfe:	200a      	movs	r0, #10
 8000d00:	f002 fbfc 	bl	80034fc <HAL_Delay>
 8000d04:	4b00      	ldr	r3, [pc, #0]	@ (8000d08 <GC9A01_Init+0x48>)
 8000d06:	e007      	b.n	8000d18 <GC9A01_Init+0x58>
 8000d08:	000f4240 	.word	0x000f4240
 8000d0c:	24000094 	.word	0x24000094
 8000d10:	58020400 	.word	0x58020400
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000d14:	3b01      	subs	r3, #1
 8000d16:	d002      	beq.n	8000d1e <GC9A01_Init+0x5e>
	while(spi_dma_not_ready)
 8000d18:	7822      	ldrb	r2, [r4, #0]
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	d1fa      	bne.n	8000d14 <GC9A01_Init+0x54>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2104      	movs	r1, #4
 8000d22:	48fe      	ldr	r0, [pc, #1016]	@ (800111c <GC9A01_Init+0x45c>)
 8000d24:	f04f 0414 	mov.w	r4, #20
 8000d28:	f005 fbf4 	bl	8006514 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000d2c:	2078      	movs	r0, #120	@ 0x78
 8000d2e:	f002 fbe5 	bl	80034fc <HAL_Delay>
    GC9A01_write_command(0xEF);
 8000d32:	20ef      	movs	r0, #239	@ 0xef
 8000d34:	f7ff ff22 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000d38:	20eb      	movs	r0, #235	@ 0xeb
 8000d3a:	f7ff ff1f 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000d3e:	f10d 0007 	add.w	r0, sp, #7
 8000d42:	f88d 4007 	strb.w	r4, [sp, #7]
 8000d46:	f7ff fe99 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xFE);
 8000d4a:	20fe      	movs	r0, #254	@ 0xfe
 8000d4c:	25ff      	movs	r5, #255	@ 0xff
 8000d4e:	f7ff ff15 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000d52:	20ef      	movs	r0, #239	@ 0xef
 8000d54:	f7ff ff12 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000d58:	20eb      	movs	r0, #235	@ 0xeb
 8000d5a:	f7ff ff0f 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000d5e:	f10d 0007 	add.w	r0, sp, #7
 8000d62:	f88d 4007 	strb.w	r4, [sp, #7]
 8000d66:	f7ff fe89 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x84);
 8000d6a:	2084      	movs	r0, #132	@ 0x84
 8000d6c:	f04f 0821 	mov.w	r8, #33	@ 0x21
 8000d70:	f7ff ff04 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000d74:	2340      	movs	r3, #64	@ 0x40
    return GC9A01_write_data(&val, sizeof(val));
 8000d76:	f10d 0007 	add.w	r0, sp, #7
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000d80:	f7ff fe7c 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x85);
 8000d84:	2085      	movs	r0, #133	@ 0x85
 8000d86:	f04f 0b01 	mov.w	fp, #1
 8000d8a:	f7ff fef7 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000d8e:	f10d 0007 	add.w	r0, sp, #7
 8000d92:	f88d 5007 	strb.w	r5, [sp, #7]
 8000d96:	f7ff fe71 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x86);
 8000d9a:	2086      	movs	r0, #134	@ 0x86
 8000d9c:	2718      	movs	r7, #24
 8000d9e:	f7ff feed 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000da2:	f10d 0007 	add.w	r0, sp, #7
 8000da6:	f88d 5007 	strb.w	r5, [sp, #7]
 8000daa:	f7ff fe67 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x87);
 8000dae:	2087      	movs	r0, #135	@ 0x87
 8000db0:	2608      	movs	r6, #8
 8000db2:	f7ff fee3 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000db6:	f10d 0007 	add.w	r0, sp, #7
 8000dba:	f88d 5007 	strb.w	r5, [sp, #7]
 8000dbe:	f7ff fe5d 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x88);
 8000dc2:	2088      	movs	r0, #136	@ 0x88
 8000dc4:	f04f 0910 	mov.w	r9, #16
 8000dc8:	f7ff fed8 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000dcc:	230a      	movs	r3, #10
    return GC9A01_write_data(&val, sizeof(val));
 8000dce:	f10d 0007 	add.w	r0, sp, #7
 8000dd2:	f04f 0a45 	mov.w	sl, #69	@ 0x45
 8000dd6:	f88d 3007 	strb.w	r3, [sp, #7]
 8000dda:	f7ff fe4f 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x89);
 8000dde:	2089      	movs	r0, #137	@ 0x89
 8000de0:	f7ff fecc 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000de4:	f10d 0007 	add.w	r0, sp, #7
 8000de8:	f88d 8007 	strb.w	r8, [sp, #7]
 8000dec:	f7ff fe46 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8A);
 8000df0:	208a      	movs	r0, #138	@ 0x8a
 8000df2:	f7ff fec3 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000df6:	f10d 0007 	add.w	r0, sp, #7
 8000dfa:	f88d 4007 	strb.w	r4, [sp, #7]
 8000dfe:	f7ff fe3d 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8B);
 8000e02:	208b      	movs	r0, #139	@ 0x8b
 8000e04:	f7ff feba 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000e08:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
    return GC9A01_write_data(&val, sizeof(val));
 8000e0c:	f10d 0007 	add.w	r0, sp, #7
 8000e10:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e14:	f7ff fe32 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8C);
 8000e18:	208c      	movs	r0, #140	@ 0x8c
 8000e1a:	f7ff feaf 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e1e:	f10d 0007 	add.w	r0, sp, #7
 8000e22:	f88d b007 	strb.w	fp, [sp, #7]
 8000e26:	f7ff fe29 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8D);
 8000e2a:	208d      	movs	r0, #141	@ 0x8d
 8000e2c:	f7ff fea6 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e30:	f10d 0007 	add.w	r0, sp, #7
 8000e34:	f88d b007 	strb.w	fp, [sp, #7]
 8000e38:	f7ff fe20 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8E);
 8000e3c:	208e      	movs	r0, #142	@ 0x8e
 8000e3e:	f7ff fe9d 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e42:	f10d 0007 	add.w	r0, sp, #7
 8000e46:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e4a:	f7ff fe17 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8F);
 8000e4e:	208f      	movs	r0, #143	@ 0x8f
 8000e50:	f7ff fe94 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e54:	f10d 0007 	add.w	r0, sp, #7
 8000e58:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e5c:	f7ff fe0e 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xB6);
 8000e60:	20b6      	movs	r0, #182	@ 0xb6
 8000e62:	f7ff fe8b 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e66:	f10d 0007 	add.w	r0, sp, #7
 8000e6a:	f88d 4007 	strb.w	r4, [sp, #7]
 8000e6e:	f7ff fe05 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8000e72:	f10d 0007 	add.w	r0, sp, #7
 8000e76:	f88d 4007 	strb.w	r4, [sp, #7]
 8000e7a:	f7ff fdff 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x36);
 8000e7e:	2036      	movs	r0, #54	@ 0x36
 8000e80:	f7ff fe7c 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e84:	f10d 0007 	add.w	r0, sp, #7
 8000e88:	f88d 7007 	strb.w	r7, [sp, #7]
 8000e8c:	f7ff fdf6 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(COLOR_MODE);
 8000e90:	203a      	movs	r0, #58	@ 0x3a
 8000e92:	f7ff fe73 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000e96:	2305      	movs	r3, #5
    return GC9A01_write_data(&val, sizeof(val));
 8000e98:	f10d 0007 	add.w	r0, sp, #7
 8000e9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ea0:	f7ff fdec 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x90);
 8000ea4:	2090      	movs	r0, #144	@ 0x90
 8000ea6:	f7ff fe69 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000eaa:	f10d 0007 	add.w	r0, sp, #7
 8000eae:	f88d 6007 	strb.w	r6, [sp, #7]
 8000eb2:	f7ff fde3 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8000eb6:	f10d 0007 	add.w	r0, sp, #7
 8000eba:	f88d 6007 	strb.w	r6, [sp, #7]
 8000ebe:	f7ff fddd 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8000ec2:	f10d 0007 	add.w	r0, sp, #7
 8000ec6:	f88d 6007 	strb.w	r6, [sp, #7]
 8000eca:	f7ff fdd7 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8000ece:	f10d 0007 	add.w	r0, sp, #7
 8000ed2:	f88d 6007 	strb.w	r6, [sp, #7]
 8000ed6:	f7ff fdd1 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBD);
 8000eda:	20bd      	movs	r0, #189	@ 0xbd
 8000edc:	f7ff fe4e 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000ee0:	2306      	movs	r3, #6
    return GC9A01_write_data(&val, sizeof(val));
 8000ee2:	f10d 0007 	add.w	r0, sp, #7
 8000ee6:	f88d 3007 	strb.w	r3, [sp, #7]
 8000eea:	f7ff fdc7 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBC);
 8000eee:	20bc      	movs	r0, #188	@ 0xbc
 8000ef0:	f7ff fe44 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ef4:	f10d 0007 	add.w	r0, sp, #7
 8000ef8:	f88d 4007 	strb.w	r4, [sp, #7]
 8000efc:	f7ff fdbe 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xFF);
 8000f00:	4628      	mov	r0, r5
 8000f02:	f04f 0513 	mov.w	r5, #19
 8000f06:	f7ff fe39 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000f0a:	2360      	movs	r3, #96	@ 0x60
    return GC9A01_write_data(&val, sizeof(val));
 8000f0c:	f10d 0007 	add.w	r0, sp, #7
 8000f10:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f14:	f7ff fdb2 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8000f18:	f10d 0007 	add.w	r0, sp, #7
 8000f1c:	f88d b007 	strb.w	fp, [sp, #7]
 8000f20:	f7ff fdac 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8000f24:	f10d 0107 	add.w	r1, sp, #7
 8000f28:	f04f 0204 	mov.w	r2, #4
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	f88d 2007 	strb.w	r2, [sp, #7]
 8000f32:	f7ff fda3 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC3);
 8000f36:	20c3      	movs	r0, #195	@ 0xc3
 8000f38:	f7ff fe20 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f3c:	f10d 0107 	add.w	r1, sp, #7
 8000f40:	f88d 5007 	strb.w	r5, [sp, #7]
 8000f44:	4608      	mov	r0, r1
 8000f46:	f7ff fd99 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC4);
 8000f4a:	20c4      	movs	r0, #196	@ 0xc4
 8000f4c:	f7ff fe16 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f50:	f10d 0107 	add.w	r1, sp, #7
 8000f54:	f88d 5007 	strb.w	r5, [sp, #7]
 8000f58:	2570      	movs	r5, #112	@ 0x70
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	f7ff fd8e 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC9);
 8000f60:	20c9      	movs	r0, #201	@ 0xc9
 8000f62:	f7ff fe0b 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f66:	f10d 0107 	add.w	r1, sp, #7
 8000f6a:	2322      	movs	r3, #34	@ 0x22
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f72:	f7ff fd83 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBE);
 8000f76:	20be      	movs	r0, #190	@ 0xbe
 8000f78:	f7ff fe00 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f7c:	f04f 0111 	mov.w	r1, #17
    return GC9A01_write_data(&val, sizeof(val));
 8000f80:	f10d 0007 	add.w	r0, sp, #7
 8000f84:	f88d 1007 	strb.w	r1, [sp, #7]
 8000f88:	f7ff fd78 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xE1);
 8000f8c:	20e1      	movs	r0, #225	@ 0xe1
 8000f8e:	f7ff fdf5 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f92:	f10d 0007 	add.w	r0, sp, #7
 8000f96:	f88d 9007 	strb.w	r9, [sp, #7]
 8000f9a:	f7ff fd6f 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0E);
 8000f9e:	f04f 0c0e 	mov.w	ip, #14
    return GC9A01_write_data(&val, sizeof(val));
 8000fa2:	f10d 0007 	add.w	r0, sp, #7
 8000fa6:	f04f 0937 	mov.w	r9, #55	@ 0x37
 8000faa:	f88d c007 	strb.w	ip, [sp, #7]
 8000fae:	f7ff fd65 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xDF);
 8000fb2:	20df      	movs	r0, #223	@ 0xdf
 8000fb4:	f7ff fde2 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000fb8:	f10d 0007 	add.w	r0, sp, #7
 8000fbc:	f88d 8007 	strb.w	r8, [sp, #7]
 8000fc0:	f7ff fd5c 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0c);
 8000fc4:	230c      	movs	r3, #12
    return GC9A01_write_data(&val, sizeof(val));
 8000fc6:	f10d 0007 	add.w	r0, sp, #7
 8000fca:	f04f 086f 	mov.w	r8, #111	@ 0x6f
 8000fce:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fd2:	f7ff fd53 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x02);
 8000fd6:	2302      	movs	r3, #2
    return GC9A01_write_data(&val, sizeof(val));
 8000fd8:	f10d 0007 	add.w	r0, sp, #7
 8000fdc:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fe0:	f7ff fd4c 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF0);
 8000fe4:	20f0      	movs	r0, #240	@ 0xf0
 8000fe6:	f7ff fdc9 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000fea:	f10d 0007 	add.w	r0, sp, #7
 8000fee:	f88d a007 	strb.w	sl, [sp, #7]
 8000ff2:	f7ff fd43 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 8000ff6:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 8000ffa:	f10d 0007 	add.w	r0, sp, #7
 8000ffe:	f04f 0a36 	mov.w	sl, #54	@ 0x36
 8001002:	f88d 1007 	strb.w	r1, [sp, #7]
 8001006:	f7ff fd39 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800100a:	f10d 0007 	add.w	r0, sp, #7
 800100e:	f88d 6007 	strb.w	r6, [sp, #7]
 8001012:	f7ff fd33 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001016:	f10d 0007 	add.w	r0, sp, #7
 800101a:	f88d 6007 	strb.w	r6, [sp, #7]
 800101e:	f7ff fd2d 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001022:	2126      	movs	r1, #38	@ 0x26
 8001024:	f10d 0007 	add.w	r0, sp, #7
 8001028:	f88d 1007 	strb.w	r1, [sp, #7]
 800102c:	f7ff fd26 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001030:	222a      	movs	r2, #42	@ 0x2a
 8001032:	f10d 0007 	add.w	r0, sp, #7
 8001036:	f88d 2007 	strb.w	r2, [sp, #7]
 800103a:	f7ff fd1f 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF1);
 800103e:	20f1      	movs	r0, #241	@ 0xf1
 8001040:	f7ff fd9c 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001044:	f04f 0e43 	mov.w	lr, #67	@ 0x43
    return GC9A01_write_data(&val, sizeof(val));
 8001048:	f10d 0007 	add.w	r0, sp, #7
 800104c:	f88d e007 	strb.w	lr, [sp, #7]
 8001050:	f7ff fd14 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001054:	f10d 0007 	add.w	r0, sp, #7
 8001058:	f88d 5007 	strb.w	r5, [sp, #7]
 800105c:	f7ff fd0e 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001060:	2372      	movs	r3, #114	@ 0x72
 8001062:	f10d 0007 	add.w	r0, sp, #7
 8001066:	f88d 3007 	strb.w	r3, [sp, #7]
 800106a:	f7ff fd07 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800106e:	f10d 0007 	add.w	r0, sp, #7
 8001072:	f88d a007 	strb.w	sl, [sp, #7]
 8001076:	f7ff fd01 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800107a:	f10d 0007 	add.w	r0, sp, #7
 800107e:	f88d 9007 	strb.w	r9, [sp, #7]
 8001082:	f7ff fcfb 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001086:	f10d 0007 	add.w	r0, sp, #7
 800108a:	f88d 8007 	strb.w	r8, [sp, #7]
 800108e:	f7ff fcf5 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF2);
 8001092:	20f2      	movs	r0, #242	@ 0xf2
 8001094:	f7ff fd72 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8001098:	f04f 0345 	mov.w	r3, #69	@ 0x45
    return GC9A01_write_data(&val, sizeof(val));
 800109c:	f10d 0007 	add.w	r0, sp, #7
 80010a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80010a4:	f7ff fcea 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 80010a8:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 80010ac:	f10d 0007 	add.w	r0, sp, #7
 80010b0:	f88d 1007 	strb.w	r1, [sp, #7]
 80010b4:	f7ff fce2 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80010b8:	f10d 0007 	add.w	r0, sp, #7
 80010bc:	f88d 6007 	strb.w	r6, [sp, #7]
 80010c0:	f7ff fcdc 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80010c4:	f10d 0007 	add.w	r0, sp, #7
 80010c8:	f88d 6007 	strb.w	r6, [sp, #7]
 80010cc:	f7ff fcd6 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x26);
 80010d0:	2126      	movs	r1, #38	@ 0x26
    return GC9A01_write_data(&val, sizeof(val));
 80010d2:	f10d 0007 	add.w	r0, sp, #7
 80010d6:	f88d 1007 	strb.w	r1, [sp, #7]
 80010da:	f7ff fccf 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x2A);
 80010de:	222a      	movs	r2, #42	@ 0x2a
    return GC9A01_write_data(&val, sizeof(val));
 80010e0:	f10d 0007 	add.w	r0, sp, #7
 80010e4:	f88d 2007 	strb.w	r2, [sp, #7]
 80010e8:	f7ff fcc8 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF3);
 80010ec:	20f3      	movs	r0, #243	@ 0xf3
 80010ee:	f7ff fd45 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 80010f2:	f04f 0e43 	mov.w	lr, #67	@ 0x43
    return GC9A01_write_data(&val, sizeof(val));
 80010f6:	f10d 0007 	add.w	r0, sp, #7
 80010fa:	f88d e007 	strb.w	lr, [sp, #7]
 80010fe:	f7ff fcbd 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001102:	f10d 0007 	add.w	r0, sp, #7
 8001106:	f88d 5007 	strb.w	r5, [sp, #7]
 800110a:	f7ff fcb7 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x72);
 800110e:	2372      	movs	r3, #114	@ 0x72
    return GC9A01_write_data(&val, sizeof(val));
 8001110:	f10d 0007 	add.w	r0, sp, #7
 8001114:	f88d 3007 	strb.w	r3, [sp, #7]
 8001118:	e002      	b.n	8001120 <GC9A01_Init+0x460>
 800111a:	bf00      	nop
 800111c:	58020400 	.word	0x58020400
 8001120:	f7ff fcac 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001124:	f10d 0007 	add.w	r0, sp, #7
 8001128:	f88d a007 	strb.w	sl, [sp, #7]
 800112c:	f7ff fca6 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001130:	f10d 0007 	add.w	r0, sp, #7
 8001134:	f88d 9007 	strb.w	r9, [sp, #7]
 8001138:	f7ff fca0 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800113c:	f10d 0007 	add.w	r0, sp, #7
 8001140:	f88d 8007 	strb.w	r8, [sp, #7]
 8001144:	f7ff fc9a 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xED);
 8001148:	20ed      	movs	r0, #237	@ 0xed
 800114a:	f7ff fd17 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800114e:	231b      	movs	r3, #27
    return GC9A01_write_data(&val, sizeof(val));
 8001150:	f10d 0007 	add.w	r0, sp, #7
 8001154:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8001158:	f88d 3007 	strb.w	r3, [sp, #7]
 800115c:	f7ff fc8e 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0B);
 8001160:	230b      	movs	r3, #11
    return GC9A01_write_data(&val, sizeof(val));
 8001162:	f10d 0007 	add.w	r0, sp, #7
 8001166:	f04f 0807 	mov.w	r8, #7
 800116a:	f04f 0a0f 	mov.w	sl, #15
 800116e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001172:	f7ff fc83 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xAE);
 8001176:	20ae      	movs	r0, #174	@ 0xae
 8001178:	f7ff fd00 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800117c:	2377      	movs	r3, #119	@ 0x77
    return GC9A01_write_data(&val, sizeof(val));
 800117e:	f10d 0007 	add.w	r0, sp, #7
 8001182:	f88d 3007 	strb.w	r3, [sp, #7]
 8001186:	f7ff fc79 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xCD);
 800118a:	20cd      	movs	r0, #205	@ 0xcd
 800118c:	f7ff fcf6 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001190:	f10d 0007 	add.w	r0, sp, #7
 8001194:	f88d 9007 	strb.w	r9, [sp, #7]
 8001198:	f7ff fc70 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x70);
 800119c:	4628      	mov	r0, r5
 800119e:	f7ff fced 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 80011a2:	eb0d 0008 	add.w	r0, sp, r8
 80011a6:	f88d 8007 	strb.w	r8, [sp, #7]
 80011aa:	f7ff fc67 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80011ae:	eb0d 0008 	add.w	r0, sp, r8
 80011b2:	f88d 8007 	strb.w	r8, [sp, #7]
 80011b6:	f7ff fc61 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x04);
 80011ba:	f04f 0004 	mov.w	r0, #4
 80011be:	f88d 0007 	strb.w	r0, [sp, #7]
    return GC9A01_write_data(&val, sizeof(val));
 80011c2:	eb0d 0008 	add.w	r0, sp, r8
 80011c6:	f7ff fc59 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0E);
 80011ca:	f04f 0c0e 	mov.w	ip, #14
    return GC9A01_write_data(&val, sizeof(val));
 80011ce:	eb0d 0008 	add.w	r0, sp, r8
 80011d2:	f88d c007 	strb.w	ip, [sp, #7]
 80011d6:	f7ff fc51 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80011da:	eb0d 0008 	add.w	r0, sp, r8
 80011de:	f88d a007 	strb.w	sl, [sp, #7]
 80011e2:	f7ff fc4b 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 80011e6:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 80011ea:	eb0d 0008 	add.w	r0, sp, r8
 80011ee:	f88d 1007 	strb.w	r1, [sp, #7]
 80011f2:	f7ff fc43 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80011f6:	eb0d 0008 	add.w	r0, sp, r8
 80011fa:	f88d 8007 	strb.w	r8, [sp, #7]
 80011fe:	f7ff fc3d 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001202:	eb0d 0008 	add.w	r0, sp, r8
 8001206:	f88d 6007 	strb.w	r6, [sp, #7]
 800120a:	f7ff fc37 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x03);
 800120e:	2303      	movs	r3, #3
    return GC9A01_write_data(&val, sizeof(val));
 8001210:	eb0d 0008 	add.w	r0, sp, r8
 8001214:	2671      	movs	r6, #113	@ 0x71
 8001216:	f88d 3007 	strb.w	r3, [sp, #7]
 800121a:	f7ff fc2f 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xE8);
 800121e:	20e8      	movs	r0, #232	@ 0xe8
 8001220:	f7ff fcac 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8001224:	2334      	movs	r3, #52	@ 0x34
    return GC9A01_write_data(&val, sizeof(val));
 8001226:	eb0d 0008 	add.w	r0, sp, r8
 800122a:	f88d 3007 	strb.w	r3, [sp, #7]
 800122e:	f7ff fc25 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x62);
 8001232:	2062      	movs	r0, #98	@ 0x62
 8001234:	f7ff fca2 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001238:	eb0d 0008 	add.w	r0, sp, r8
 800123c:	f88d 7007 	strb.w	r7, [sp, #7]
 8001240:	f7ff fc1c 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0D);
 8001244:	230d      	movs	r3, #13
    return GC9A01_write_data(&val, sizeof(val));
 8001246:	eb0d 0008 	add.w	r0, sp, r8
 800124a:	f88d 3007 	strb.w	r3, [sp, #7]
 800124e:	f7ff fc15 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001252:	eb0d 0008 	add.w	r0, sp, r8
 8001256:	f88d 6007 	strb.w	r6, [sp, #7]
 800125a:	f7ff fc0f 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xED);
 800125e:	23ed      	movs	r3, #237	@ 0xed
    return GC9A01_write_data(&val, sizeof(val));
 8001260:	eb0d 0008 	add.w	r0, sp, r8
 8001264:	f88d 3007 	strb.w	r3, [sp, #7]
 8001268:	f7ff fc08 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800126c:	eb0d 0008 	add.w	r0, sp, r8
 8001270:	f88d 5007 	strb.w	r5, [sp, #7]
 8001274:	f7ff fc02 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001278:	eb0d 0008 	add.w	r0, sp, r8
 800127c:	f88d 5007 	strb.w	r5, [sp, #7]
 8001280:	f7ff fbfc 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001284:	eb0d 0008 	add.w	r0, sp, r8
 8001288:	f88d 7007 	strb.w	r7, [sp, #7]
 800128c:	f7ff fbf6 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001290:	eb0d 0008 	add.w	r0, sp, r8
 8001294:	f88d a007 	strb.w	sl, [sp, #7]
 8001298:	f7ff fbf0 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800129c:	eb0d 0008 	add.w	r0, sp, r8
 80012a0:	f88d 6007 	strb.w	r6, [sp, #7]
 80012a4:	f7ff fbea 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xEF);
 80012a8:	23ef      	movs	r3, #239	@ 0xef
    return GC9A01_write_data(&val, sizeof(val));
 80012aa:	eb0d 0008 	add.w	r0, sp, r8
 80012ae:	f04f 0a45 	mov.w	sl, #69	@ 0x45
 80012b2:	f88d 3007 	strb.w	r3, [sp, #7]
 80012b6:	f7ff fbe1 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80012ba:	eb0d 0008 	add.w	r0, sp, r8
 80012be:	f88d 5007 	strb.w	r5, [sp, #7]
 80012c2:	f7ff fbdb 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80012c6:	eb0d 0008 	add.w	r0, sp, r8
 80012ca:	f88d 5007 	strb.w	r5, [sp, #7]
 80012ce:	f7ff fbd5 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x63);
 80012d2:	4648      	mov	r0, r9
 80012d4:	f04f 09f1 	mov.w	r9, #241	@ 0xf1
 80012d8:	f7ff fc50 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 80012dc:	eb0d 0008 	add.w	r0, sp, r8
 80012e0:	f88d 7007 	strb.w	r7, [sp, #7]
 80012e4:	f7ff fbca 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x11);
 80012e8:	f04f 0111 	mov.w	r1, #17
    return GC9A01_write_data(&val, sizeof(val));
 80012ec:	eb0d 0008 	add.w	r0, sp, r8
 80012f0:	f88d 1007 	strb.w	r1, [sp, #7]
 80012f4:	f7ff fbc2 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80012f8:	eb0d 0008 	add.w	r0, sp, r8
 80012fc:	f88d 6007 	strb.w	r6, [sp, #7]
 8001300:	f7ff fbbc 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001304:	eb0d 0008 	add.w	r0, sp, r8
 8001308:	f88d 9007 	strb.w	r9, [sp, #7]
 800130c:	f7ff fbb6 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001310:	eb0d 0008 	add.w	r0, sp, r8
 8001314:	f88d 5007 	strb.w	r5, [sp, #7]
 8001318:	f7ff fbb0 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800131c:	eb0d 0008 	add.w	r0, sp, r8
 8001320:	f88d 5007 	strb.w	r5, [sp, #7]
 8001324:	f7ff fbaa 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001328:	eb0d 0008 	add.w	r0, sp, r8
 800132c:	f88d 7007 	strb.w	r7, [sp, #7]
 8001330:	f7ff fba4 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x13);
 8001334:	f04f 0213 	mov.w	r2, #19
    return GC9A01_write_data(&val, sizeof(val));
 8001338:	eb0d 0008 	add.w	r0, sp, r8
 800133c:	2767      	movs	r7, #103	@ 0x67
 800133e:	f88d 2007 	strb.w	r2, [sp, #7]
 8001342:	f7ff fb9b 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001346:	eb0d 0008 	add.w	r0, sp, r8
 800134a:	f88d 6007 	strb.w	r6, [sp, #7]
 800134e:	f7ff fb95 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xF3);
 8001352:	23f3      	movs	r3, #243	@ 0xf3
    return GC9A01_write_data(&val, sizeof(val));
 8001354:	eb0d 0008 	add.w	r0, sp, r8
 8001358:	2629      	movs	r6, #41	@ 0x29
 800135a:	f88d 3007 	strb.w	r3, [sp, #7]
 800135e:	f7ff fb8d 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001362:	eb0d 0008 	add.w	r0, sp, r8
 8001366:	f88d 5007 	strb.w	r5, [sp, #7]
 800136a:	f7ff fb87 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800136e:	eb0d 0008 	add.w	r0, sp, r8
 8001372:	f88d 5007 	strb.w	r5, [sp, #7]
 8001376:	f7ff fb81 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x64);
 800137a:	2064      	movs	r0, #100	@ 0x64
 800137c:	253c      	movs	r5, #60	@ 0x3c
 800137e:	f7ff fbfd 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8001382:	2328      	movs	r3, #40	@ 0x28
    return GC9A01_write_data(&val, sizeof(val));
 8001384:	eb0d 0008 	add.w	r0, sp, r8
 8001388:	f88d 3007 	strb.w	r3, [sp, #7]
 800138c:	f7ff fb76 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001390:	eb0d 0008 	add.w	r0, sp, r8
 8001394:	f88d 6007 	strb.w	r6, [sp, #7]
 8001398:	f7ff fb70 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800139c:	eb0d 0008 	add.w	r0, sp, r8
 80013a0:	f88d 9007 	strb.w	r9, [sp, #7]
 80013a4:	f7ff fb6a 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80013a8:	eb0d 0008 	add.w	r0, sp, r8
 80013ac:	f88d b007 	strb.w	fp, [sp, #7]
 80013b0:	f7ff fb64 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80013b4:	eb0d 0008 	add.w	r0, sp, r8
 80013b8:	f88d 9007 	strb.w	r9, [sp, #7]
 80013bc:	f7ff fb5e 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80013c0:	eb0d 0008 	add.w	r0, sp, r8
 80013c4:	f88d 4007 	strb.w	r4, [sp, #7]
 80013c8:	f7ff fb58 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80013cc:	eb0d 0008 	add.w	r0, sp, r8
 80013d0:	f88d 8007 	strb.w	r8, [sp, #7]
 80013d4:	f7ff fb52 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x66);
 80013d8:	2066      	movs	r0, #102	@ 0x66
 80013da:	f04f 0910 	mov.w	r9, #16
 80013de:	f7ff fbcd 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 80013e2:	eb0d 0008 	add.w	r0, sp, r8
 80013e6:	f88d 5007 	strb.w	r5, [sp, #7]
 80013ea:	f7ff fb47 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80013ee:	eb0d 0008 	add.w	r0, sp, r8
 80013f2:	f88d 4007 	strb.w	r4, [sp, #7]
 80013f6:	f7ff fb41 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xCD);
 80013fa:	23cd      	movs	r3, #205	@ 0xcd
    return GC9A01_write_data(&val, sizeof(val));
 80013fc:	eb0d 0008 	add.w	r0, sp, r8
 8001400:	f88d 3007 	strb.w	r3, [sp, #7]
 8001404:	f7ff fb3a 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001408:	eb0d 0008 	add.w	r0, sp, r8
 800140c:	f88d 7007 	strb.w	r7, [sp, #7]
 8001410:	f7ff fb34 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001414:	eb0d 0008 	add.w	r0, sp, r8
 8001418:	f88d a007 	strb.w	sl, [sp, #7]
 800141c:	f7ff fb2e 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001420:	eb0d 0008 	add.w	r0, sp, r8
 8001424:	f88d a007 	strb.w	sl, [sp, #7]
 8001428:	f7ff fb28 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800142c:	eb0d 0008 	add.w	r0, sp, r8
 8001430:	f88d 9007 	strb.w	r9, [sp, #7]
 8001434:	f7ff fb22 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001438:	eb0d 0008 	add.w	r0, sp, r8
 800143c:	f88d 4007 	strb.w	r4, [sp, #7]
 8001440:	f7ff fb1c 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001444:	eb0d 0008 	add.w	r0, sp, r8
 8001448:	f88d 4007 	strb.w	r4, [sp, #7]
 800144c:	f7ff fb16 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001450:	eb0d 0008 	add.w	r0, sp, r8
 8001454:	f88d 4007 	strb.w	r4, [sp, #7]
 8001458:	f7ff fb10 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x67);
 800145c:	4638      	mov	r0, r7
 800145e:	f7ff fb8d 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001462:	eb0d 0008 	add.w	r0, sp, r8
 8001466:	f88d 4007 	strb.w	r4, [sp, #7]
 800146a:	f7ff fb07 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800146e:	eb0d 0008 	add.w	r0, sp, r8
 8001472:	f88d 5007 	strb.w	r5, [sp, #7]
 8001476:	f7ff fb01 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800147a:	eb0d 0008 	add.w	r0, sp, r8
 800147e:	f88d 4007 	strb.w	r4, [sp, #7]
 8001482:	f7ff fafb 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001486:	eb0d 0008 	add.w	r0, sp, r8
 800148a:	f88d 4007 	strb.w	r4, [sp, #7]
 800148e:	f7ff faf5 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001492:	eb0d 0008 	add.w	r0, sp, r8
 8001496:	f88d 4007 	strb.w	r4, [sp, #7]
 800149a:	f7ff faef 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800149e:	eb0d 0008 	add.w	r0, sp, r8
 80014a2:	f88d b007 	strb.w	fp, [sp, #7]
 80014a6:	f7ff fae9 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x54);
 80014aa:	2354      	movs	r3, #84	@ 0x54
    return GC9A01_write_data(&val, sizeof(val));
 80014ac:	eb0d 0008 	add.w	r0, sp, r8
 80014b0:	2598      	movs	r5, #152	@ 0x98
 80014b2:	f88d 3007 	strb.w	r3, [sp, #7]
 80014b6:	f7ff fae1 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80014ba:	eb0d 0008 	add.w	r0, sp, r8
 80014be:	f88d 9007 	strb.w	r9, [sp, #7]
 80014c2:	f7ff fadb 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x32);
 80014c6:	2332      	movs	r3, #50	@ 0x32
    return GC9A01_write_data(&val, sizeof(val));
 80014c8:	eb0d 0008 	add.w	r0, sp, r8
 80014cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80014d0:	f7ff fad4 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 80014d4:	eb0d 0008 	add.w	r0, sp, r8
 80014d8:	f88d 5007 	strb.w	r5, [sp, #7]
 80014dc:	f7ff face 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x74);
 80014e0:	2074      	movs	r0, #116	@ 0x74
 80014e2:	f7ff fb4b 	bl	8000b7c <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 80014e6:	eb0d 0008 	add.w	r0, sp, r8
 80014ea:	f88d 9007 	strb.w	r9, [sp, #7]
 80014ee:	f7ff fac5 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x85);
 80014f2:	2385      	movs	r3, #133	@ 0x85
    return GC9A01_write_data(&val, sizeof(val));
 80014f4:	eb0d 0008 	add.w	r0, sp, r8
 80014f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80014fc:	f7ff fabe 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x80);
 8001500:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
    return GC9A01_write_data(&val, sizeof(val));
 8001504:	eb0d 0008 	add.w	r0, sp, r8
 8001508:	f88d 3007 	strb.w	r3, [sp, #7]
 800150c:	f7ff fab6 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001510:	eb0d 0008 	add.w	r0, sp, r8
 8001514:	f88d 4007 	strb.w	r4, [sp, #7]
 8001518:	f7ff fab0 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 800151c:	eb0d 0008 	add.w	r0, sp, r8
 8001520:	f88d 4007 	strb.w	r4, [sp, #7]
 8001524:	f7ff faaa 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x4E);
 8001528:	234e      	movs	r3, #78	@ 0x4e
    return GC9A01_write_data(&val, sizeof(val));
 800152a:	eb0d 0008 	add.w	r0, sp, r8
 800152e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001532:	f7ff faa3 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001536:	eb0d 0008 	add.w	r0, sp, r8
 800153a:	f88d 4007 	strb.w	r4, [sp, #7]
 800153e:	f7ff fa9d 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x98);
 8001542:	4628      	mov	r0, r5
 8001544:	f7ff fb1a 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8001548:	233e      	movs	r3, #62	@ 0x3e
    return GC9A01_write_data(&val, sizeof(val));
 800154a:	eb0d 0008 	add.w	r0, sp, r8
 800154e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001552:	f7ff fa93 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
 8001556:	eb0d 0008 	add.w	r0, sp, r8
 800155a:	f88d 8007 	strb.w	r8, [sp, #7]
 800155e:	f7ff fa8d 	bl	8000a7c <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x35);
 8001562:	2035      	movs	r0, #53	@ 0x35
 8001564:	f7ff fb0a 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001568:	2021      	movs	r0, #33	@ 0x21
 800156a:	f7ff fb07 	bl	8000b7c <GC9A01_write_command>
    GC9A01_write_command(0x11);
 800156e:	2011      	movs	r0, #17
 8001570:	f7ff fb04 	bl	8000b7c <GC9A01_write_command>
    HAL_Delay(120);
 8001574:	2078      	movs	r0, #120	@ 0x78
 8001576:	f001 ffc1 	bl	80034fc <HAL_Delay>
    GC9A01_write_command(0x29);
 800157a:	4630      	mov	r0, r6
 800157c:	f7ff fafe 	bl	8000b7c <GC9A01_write_command>
    HAL_Delay(20);
 8001580:	2014      	movs	r0, #20
}
 8001582:	b003      	add	sp, #12
 8001584:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(20);
 8001588:	f001 bfb8 	b.w	80034fc <HAL_Delay>

0800158c <GC9A01_set_frame>:
{
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	466b      	mov	r3, sp
 8001592:	e883 0003 	stmia.w	r3, {r0, r1}
    if(GC9A01_write_command(COL_ADDR_SET) != 1)
 8001596:	202a      	movs	r0, #42	@ 0x2a
 8001598:	f8bd 5000 	ldrh.w	r5, [sp]
 800159c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80015a0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80015a4:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 80015a8:	f7ff fae8 	bl	8000b7c <GC9A01_write_command>
 80015ac:	2801      	cmp	r0, #1
 80015ae:	d003      	beq.n	80015b8 <GC9A01_set_frame+0x2c>
    	return -1;
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015b4:	b005      	add	sp, #20
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data[0] = (frame.start.X >> 8) & 0xFF;
 80015b8:	0a2a      	lsrs	r2, r5, #8
 80015ba:	2300      	movs	r3, #0
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 80015bc:	2104      	movs	r1, #4
 80015be:	a803      	add	r0, sp, #12
    data[0] = (frame.start.X >> 8) & 0xFF;
 80015c0:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.X >> 8) & 0xFF;
 80015c4:	0a22      	lsrs	r2, r4, #8
    data[0] = (frame.start.X >> 8) & 0xFF;
 80015c6:	f365 230f 	bfi	r3, r5, #8, #8
 80015ca:	f362 4317 	bfi	r3, r2, #16, #8
 80015ce:	f364 631f 	bfi	r3, r4, #24, #8
 80015d2:	9303      	str	r3, [sp, #12]
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 80015d4:	f7ff fb24 	bl	8000c20 <GC9A01_write_data>
 80015d8:	2801      	cmp	r0, #1
 80015da:	d1e9      	bne.n	80015b0 <GC9A01_set_frame+0x24>
    if(GC9A01_write_command(ROW_ADDR_SET) != 1)
 80015dc:	202b      	movs	r0, #43	@ 0x2b
 80015de:	f7ff facd 	bl	8000b7c <GC9A01_write_command>
 80015e2:	2801      	cmp	r0, #1
 80015e4:	d1e4      	bne.n	80015b0 <GC9A01_set_frame+0x24>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80015e6:	0a3a      	lsrs	r2, r7, #8
 80015e8:	2300      	movs	r3, #0
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 80015ea:	a803      	add	r0, sp, #12
 80015ec:	2104      	movs	r1, #4
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80015ee:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.Y >> 8) & 0xFF;
 80015f2:	0a32      	lsrs	r2, r6, #8
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80015f4:	f367 230f 	bfi	r3, r7, #8, #8
 80015f8:	f362 4317 	bfi	r3, r2, #16, #8
 80015fc:	f366 631f 	bfi	r3, r6, #24, #8
 8001600:	9303      	str	r3, [sp, #12]
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 8001602:	f7ff fb0d 	bl	8000c20 <GC9A01_write_data>
 8001606:	2801      	cmp	r0, #1
 8001608:	d1d2      	bne.n	80015b0 <GC9A01_set_frame+0x24>
 800160a:	e7d3      	b.n	80015b4 <GC9A01_set_frame+0x28>

0800160c <GC9A01_sleep_mode>:
{
 800160c:	b510      	push	{r4, lr}
	if(command)
 800160e:	b140      	cbz	r0, 8001622 <GC9A01_sleep_mode+0x16>
		ret = GC9A01_write_command(SLEEP_MODE_ON);
 8001610:	2010      	movs	r0, #16
 8001612:	f7ff fab3 	bl	8000b7c <GC9A01_write_command>
 8001616:	4604      	mov	r4, r0
	HAL_Delay(120);
 8001618:	2078      	movs	r0, #120	@ 0x78
 800161a:	f001 ff6f 	bl	80034fc <HAL_Delay>
}
 800161e:	4620      	mov	r0, r4
 8001620:	bd10      	pop	{r4, pc}
		ret = GC9A01_write_command(SLEEP_MODE_OFF);
 8001622:	2011      	movs	r0, #17
 8001624:	f7ff faaa 	bl	8000b7c <GC9A01_write_command>
 8001628:	4604      	mov	r4, r0
	HAL_Delay(120);
 800162a:	2078      	movs	r0, #120	@ 0x78
 800162c:	f001 ff66 	bl	80034fc <HAL_Delay>
}
 8001630:	4620      	mov	r0, r4
 8001632:	bd10      	pop	{r4, pc}

08001634 <GC9A01_spi_tx>:
{
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	f8df c050 	ldr.w	ip, [pc, #80]	@ 8001688 <GC9A01_spi_tx+0x54>
	while(spi_dma_not_ready && !join)
 800163a:	fab2 f582 	clz	r5, r2
 800163e:	4e0f      	ldr	r6, [pc, #60]	@ (800167c <GC9A01_spi_tx+0x48>)
{
 8001640:	460a      	mov	r2, r1
 8001642:	f8dc 3000 	ldr.w	r3, [ip]
	while(spi_dma_not_ready && !join)
 8001646:	096d      	lsrs	r5, r5, #5
		if(count_iter >= MAX_ITERATIONS_NUM)
 8001648:	4f0d      	ldr	r7, [pc, #52]	@ (8001680 <GC9A01_spi_tx+0x4c>)
	while(spi_dma_not_ready && !join)
 800164a:	e002      	b.n	8001652 <GC9A01_spi_tx+0x1e>
 800164c:	b12d      	cbz	r5, 800165a <GC9A01_spi_tx+0x26>
		if(count_iter >= MAX_ITERATIONS_NUM)
 800164e:	42bb      	cmp	r3, r7
 8001650:	d80f      	bhi.n	8001672 <GC9A01_spi_tx+0x3e>
	while(spi_dma_not_ready && !join)
 8001652:	7834      	ldrb	r4, [r6, #0]
		count_iter++;
 8001654:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8001656:	2c00      	cmp	r4, #0
 8001658:	d1f8      	bne.n	800164c <GC9A01_spi_tx+0x18>
	count_iter = 0;
 800165a:	2300      	movs	r3, #0
	spi_dma_not_ready = 1;
 800165c:	2401      	movs	r4, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800165e:	4601      	mov	r1, r0
 8001660:	4808      	ldr	r0, [pc, #32]	@ (8001684 <GC9A01_spi_tx+0x50>)
	count_iter = 0;
 8001662:	f8cc 3000 	str.w	r3, [ip]
	spi_dma_not_ready = 1;
 8001666:	7034      	strb	r4, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001668:	f00a fe50 	bl	800c30c <HAL_SPI_Transmit_DMA>
	if(ret != HAL_OK)
 800166c:	b918      	cbnz	r0, 8001676 <GC9A01_spi_tx+0x42>
	return 1;
 800166e:	4620      	mov	r0, r4

}
 8001670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001672:	f8cc 3000 	str.w	r3, [ip]
			return -1;
 8001676:	f04f 30ff 	mov.w	r0, #4294967295
}
 800167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800167c:	24000094 	.word	0x24000094
 8001680:	000f423f 	.word	0x000f423f
 8001684:	240002f0 	.word	0x240002f0
 8001688:	24000090 	.word	0x24000090

0800168c <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4616      	mov	r6, r2
 8001690:	b082      	sub	sp, #8
  Input_frameSize = FrameSize;

  Jpeg_HWDecodingEnd = 0;
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8001692:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  JPEGSourceAddress =  FrameSourceAddress ;
 8001696:	4d0a      	ldr	r5, [pc, #40]	@ (80016c0 <JPEG_Decode_DMA+0x34>)
  Input_frameIndex=0;
 8001698:	2400      	movs	r4, #0
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800169a:	9200      	str	r2, [sp, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800169c:	6029      	str	r1, [r5, #0]
  FrameBufferAddress = DestAddress;
 800169e:	4d09      	ldr	r5, [pc, #36]	@ (80016c4 <JPEG_Decode_DMA+0x38>)
 80016a0:	602b      	str	r3, [r5, #0]
  Input_frameIndex=0;
 80016a2:	4d09      	ldr	r5, [pc, #36]	@ (80016c8 <JPEG_Decode_DMA+0x3c>)
 80016a4:	602c      	str	r4, [r5, #0]
  Input_frameSize = FrameSize;
 80016a6:	4d09      	ldr	r5, [pc, #36]	@ (80016cc <JPEG_Decode_DMA+0x40>)
 80016a8:	602e      	str	r6, [r5, #0]
  Jpeg_HWDecodingEnd = 0;
 80016aa:	4d09      	ldr	r5, [pc, #36]	@ (80016d0 <JPEG_Decode_DMA+0x44>)
 80016ac:	602c      	str	r4, [r5, #0]
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 80016ae:	f006 faaf 	bl	8007c10 <HAL_JPEG_Decode_DMA>
	  return -1;
  
  
  return 1;
 80016b2:	42a0      	cmp	r0, r4
  
}
 80016b4:	bf14      	ite	ne
 80016b6:	f04f 30ff 	movne.w	r0, #4294967295
 80016ba:	2001      	moveq	r0, #1
 80016bc:	b002      	add	sp, #8
 80016be:	bd70      	pop	{r4, r5, r6, pc}
 80016c0:	240000a0 	.word	0x240000a0
 80016c4:	240000a4 	.word	0x240000a4
 80016c8:	24000098 	.word	0x24000098
 80016cc:	2400009c 	.word	0x2400009c
 80016d0:	240000a8 	.word	0x240000a8

080016d4 <HAL_JPEG_InfoReadyCallback>:
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80016d8:	b410      	push	{r4}
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 80016da:	4c0e      	ldr	r4, [pc, #56]	@ (8001714 <HAL_JPEG_GetDataCallback+0x3c>)
{
 80016dc:	468c      	mov	ip, r1
  if( Input_frameIndex < Input_frameSize)
 80016de:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <HAL_JPEG_GetDataCallback+0x40>)
  Input_frameIndex += NbDecodedData;
 80016e0:	6823      	ldr	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80016e2:	6812      	ldr	r2, [r2, #0]
  Input_frameIndex += NbDecodedData;
 80016e4:	440b      	add	r3, r1
 80016e6:	6023      	str	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80016e8:	4293      	cmp	r3, r2
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80016ea:	4c0c      	ldr	r4, [pc, #48]	@ (800171c <HAL_JPEG_GetDataCallback+0x44>)
 80016ec:	6821      	ldr	r1, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80016ee:	d20b      	bcs.n	8001708 <HAL_JPEG_GetDataCallback+0x30>
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80016f0:	1ad2      	subs	r2, r2, r3
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80016f2:	4461      	add	r1, ip
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80016f4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80016f8:	6021      	str	r1, [r4, #0]
  {
    inDataLength = 0; 
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
  
}
 80016fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80016fe:	bf28      	it	cs
 8001700:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 8001704:	f006 bac2 	b.w	8007c8c <HAL_JPEG_ConfigInputBuffer>
    inDataLength = 0; 
 8001708:	2200      	movs	r2, #0
}
 800170a:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800170e:	f006 babd 	b.w	8007c8c <HAL_JPEG_ConfigInputBuffer>
 8001712:	bf00      	nop
 8001714:	24000098 	.word	0x24000098
 8001718:	2400009c 	.word	0x2400009c
 800171c:	240000a0 	.word	0x240000a0

08001720 <HAL_JPEG_DataReadyCallback>:
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_JPEG_DataReadyCallback+0x18>)
{
 8001722:	4611      	mov	r1, r2

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8001724:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
{
 8001728:	b410      	push	{r4}
  FrameBufferAddress += OutDataLength;
 800172a:	681c      	ldr	r4, [r3, #0]
 800172c:	4421      	add	r1, r4
}
 800172e:	f85d 4b04 	ldr.w	r4, [sp], #4
  FrameBufferAddress += OutDataLength;
 8001732:	6019      	str	r1, [r3, #0]
  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8001734:	f006 baae 	b.w	8007c94 <HAL_JPEG_ConfigOutputBuffer>
 8001738:	240000a4 	.word	0x240000a4

0800173c <HAL_JPEG_ErrorCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  Error_Handler();
 800173c:	f000 babc 	b.w	8001cb8 <Error_Handler>

08001740 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
  Jpeg_HWDecodingEnd = 1; 
 8001740:	4b01      	ldr	r3, [pc, #4]	@ (8001748 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
}
 8001746:	4770      	bx	lr
 8001748:	240000a8 	.word	0x240000a8

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b510      	push	{r4, lr}
 800174e:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001750:	224c      	movs	r2, #76	@ 0x4c
 8001752:	2100      	movs	r1, #0
 8001754:	a80a      	add	r0, sp, #40	@ 0x28
 8001756:	f00e fa09 	bl	800fb6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175a:	2220      	movs	r2, #32
 800175c:	2100      	movs	r1, #0
 800175e:	a802      	add	r0, sp, #8
 8001760:	f00e fa04 	bl	800fb6c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <SystemClock_Config+0xb8>)
 8001766:	f04f 32ff 	mov.w	r2, #4294967295

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800176a:	2002      	movs	r0, #2
  RCC->CKGAENR = 0xFFFFFFFF;
 800176c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001770:	f007 faaa 	bl	8008cc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001774:	4a24      	ldr	r2, [pc, #144]	@ (8001808 <SystemClock_Config+0xbc>)
 8001776:	2300      	movs	r3, #0
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	6993      	ldr	r3, [r2, #24]
 800177c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	6993      	ldr	r3, [r2, #24]
 8001784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800178c:	6993      	ldr	r3, [r2, #24]
 800178e:	049b      	lsls	r3, r3, #18
 8001790:	d5fc      	bpl.n	800178c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001792:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001794:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001796:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8001798:	2406      	movs	r4, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800179a:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 800179e:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80017a0:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80017a2:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 80017a4:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80017a6:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017a8:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017aa:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80017ac:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017ae:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017b0:	9219      	str	r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017b2:	9415      	str	r4, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017b4:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b6:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 22;
 80017ba:	2216      	movs	r2, #22
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017bc:	e9cd 131a 	strd	r1, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLN = 22;
 80017c0:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f007 fb17 	bl	8008df4 <HAL_RCC_OscConfig>
 80017c6:	b9a8      	cbnz	r0, 80017f4 <SystemClock_Config+0xa8>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	213f      	movs	r1, #63	@ 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ca:	2203      	movs	r2, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2400      	movs	r4, #0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017ce:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d2:	e9cd 1202 	strd	r1, r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017d6:	2108      	movs	r1, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017dc:	e9cd 4104 	strd	r4, r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e0:	2102      	movs	r1, #2
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017e2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ea:	f007 fe75 	bl	80094d8 <HAL_RCC_ClockConfig>
 80017ee:	b920      	cbnz	r0, 80017fa <SystemClock_Config+0xae>
  {
    Error_Handler();
  }
}
 80017f0:	b01e      	add	sp, #120	@ 0x78
 80017f2:	bd10      	pop	{r4, pc}
  while (1)
  {
  }
#else

  HAL_NVIC_SystemReset();
 80017f4:	f002 fe78 	bl	80044e8 <HAL_NVIC_SystemReset>

#endif

  /* USER CODE END Error_Handler_Debug */
}
 80017f8:	e7e6      	b.n	80017c8 <SystemClock_Config+0x7c>
  HAL_NVIC_SystemReset();
 80017fa:	f002 fe75 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 80017fe:	b01e      	add	sp, #120	@ 0x78
 8001800:	bd10      	pop	{r4, pc}
 8001802:	bf00      	nop
 8001804:	58024400 	.word	0x58024400
 8001808:	58024800 	.word	0x58024800

0800180c <MX_ADC1_Init>:
  hadc1.Instance = ADC1;
 800180c:	482b      	ldr	r0, [pc, #172]	@ (80018bc <MX_ADC1_Init+0xb0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800180e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
  hadc1.Instance = ADC1;
 8001812:	492b      	ldr	r1, [pc, #172]	@ (80018c0 <MX_ADC1_Init+0xb4>)
  ADC_MultiModeTypeDef multimode = {0};
 8001814:	2300      	movs	r3, #0
{
 8001816:	b510      	push	{r4, lr}
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001818:	e9c0 1200 	strd	r1, r2, [r0]
{
 800181c:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181e:	2408      	movs	r4, #8
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001820:	2104      	movs	r1, #4
  hadc1.Init.NbrOfConversion = 1;
 8001822:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 8001824:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001826:	9303      	str	r3, [sp, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001828:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800182a:	8283      	strh	r3, [r0, #20]
  hadc1.Init.NbrOfConversion = 1;
 800182c:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182e:	7703      	strb	r3, [r0, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001830:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001832:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001836:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183a:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800183e:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8001842:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800184a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800184e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001852:	f002 fc41 	bl	80040d8 <HAL_ADC_Init>
 8001856:	bb18      	cbnz	r0, 80018a0 <MX_ADC1_Init+0x94>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001858:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800185a:	4669      	mov	r1, sp
 800185c:	4817      	ldr	r0, [pc, #92]	@ (80018bc <MX_ADC1_Init+0xb0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800185e:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001860:	f002 fd72 	bl	8004348 <HAL_ADCEx_MultiModeConfigChannel>
 8001864:	bb30      	cbnz	r0, 80018b4 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_16;
 8001866:	4817      	ldr	r0, [pc, #92]	@ (80018c4 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001868:	2206      	movs	r2, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800186a:	2407      	movs	r4, #7
  sConfig.Offset = 0;
 800186c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186e:	a903      	add	r1, sp, #12
  sConfig.OffsetSignedSaturation = DISABLE;
 8001870:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001874:	e9cd 0203 	strd	r0, r2, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001878:	f240 70ff 	movw	r0, #2047	@ 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800187c:	2204      	movs	r2, #4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800187e:	e9cd 4005 	strd	r4, r0, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001882:	480e      	ldr	r0, [pc, #56]	@ (80018bc <MX_ADC1_Init+0xb0>)
  sConfig.Offset = 0;
 8001884:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001888:	f001 fed4 	bl	8003634 <HAL_ADC_ConfigChannel>
 800188c:	b978      	cbnz	r0, 80018ae <MX_ADC1_Init+0xa2>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 800188e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001892:	2100      	movs	r1, #0
 8001894:	4809      	ldr	r0, [pc, #36]	@ (80018bc <MX_ADC1_Init+0xb0>)
 8001896:	f002 fd05 	bl	80042a4 <HAL_ADCEx_Calibration_Start>
 800189a:	b920      	cbnz	r0, 80018a6 <MX_ADC1_Init+0x9a>
}
 800189c:	b00a      	add	sp, #40	@ 0x28
 800189e:	bd10      	pop	{r4, pc}
  HAL_NVIC_SystemReset();
 80018a0:	f002 fe22 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 80018a4:	e7d8      	b.n	8001858 <MX_ADC1_Init+0x4c>
  HAL_NVIC_SystemReset();
 80018a6:	f002 fe1f 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 80018aa:	b00a      	add	sp, #40	@ 0x28
 80018ac:	bd10      	pop	{r4, pc}
  HAL_NVIC_SystemReset();
 80018ae:	f002 fe1b 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 80018b2:	e7ec      	b.n	800188e <MX_ADC1_Init+0x82>
  HAL_NVIC_SystemReset();
 80018b4:	f002 fe18 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 80018b8:	e7d5      	b.n	8001866 <MX_ADC1_Init+0x5a>
 80018ba:	bf00      	nop
 80018bc:	240000c4 	.word	0x240000c4
 80018c0:	40022000 	.word	0x40022000
 80018c4:	43210000 	.word	0x43210000

080018c8 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018c8:	4acb      	ldr	r2, [pc, #812]	@ (8001bf8 <main+0x330>)
 80018ca:	6953      	ldr	r3, [r2, #20]
 80018cc:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 80018d0:	b570      	push	{r4, r5, r6, lr}
 80018d2:	b08e      	sub	sp, #56	@ 0x38
 80018d4:	d111      	bne.n	80018fa <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018da:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018de:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018e6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80018ea:	6953      	ldr	r3, [r2, #20]
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80018f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018f6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80018fa:	f001 fdbd 	bl	8003478 <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	2400      	movs	r4, #0
  SystemClock_Config();
 8001900:	f7ff ff24 	bl	800174c <SystemClock_Config>
  HAL_Delay(500);
 8001904:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001908:	f001 fdf8 	bl	80034fc <HAL_Delay>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190c:	4bbb      	ldr	r3, [pc, #748]	@ (8001bfc <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800190e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	48bb      	ldr	r0, [pc, #748]	@ (8001c00 <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 8001916:	2507      	movs	r5, #7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 800191c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001920:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001924:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001928:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800192c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001930:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001934:	9204      	str	r2, [sp, #16]
 8001936:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001944:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001948:	f002 0201 	and.w	r2, r2, #1
 800194c:	9205      	str	r2, [sp, #20]
 800194e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001954:	f042 0202 	orr.w	r2, r2, #2
 8001958:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800195c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001960:	f002 0202 	and.w	r2, r2, #2
 8001964:	9206      	str	r2, [sp, #24]
 8001966:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800196c:	f042 0204 	orr.w	r2, r2, #4
 8001970:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001974:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001978:	f002 0204 	and.w	r2, r2, #4
 800197c:	9207      	str	r2, [sp, #28]
 800197e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001980:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001984:	f042 0208 	orr.w	r2, r2, #8
 8001988:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800198c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001990:	9109      	str	r1, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	9308      	str	r3, [sp, #32]
 800199a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f004 fba8 	bl	80060f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 80019a0:	4622      	mov	r2, r4
 80019a2:	2103      	movs	r1, #3
 80019a4:	4897      	ldr	r0, [pc, #604]	@ (8001c04 <main+0x33c>)
 80019a6:	f004 fdb5 	bl	8006514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f240 4104 	movw	r1, #1028	@ 0x404
 80019b0:	4894      	ldr	r0, [pc, #592]	@ (8001c04 <main+0x33c>)
 80019b2:	f004 fdaf 	bl	8006514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2107      	movs	r1, #7
 80019ba:	4893      	ldr	r0, [pc, #588]	@ (8001c08 <main+0x340>)
 80019bc:	f004 fdaa 	bl	8006514 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80019c0:	f240 4307 	movw	r3, #1031	@ 0x407
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	a909      	add	r1, sp, #36	@ 0x24
 80019c6:	488f      	ldr	r0, [pc, #572]	@ (8001c04 <main+0x33c>)
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80019c8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f004 fb8e 	bl	80060f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d4:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d6:	f44f 1604 	mov.w	r6, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	a909      	add	r1, sp, #36	@ 0x24
 80019dc:	488a      	ldr	r0, [pc, #552]	@ (8001c08 <main+0x340>)
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 80019de:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019e0:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f004 fb85 	bl	80060f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FXLS8974CF_INT_Pin;
 80019e6:	2320      	movs	r3, #32
  HAL_GPIO_Init(FXLS8974CF_INT_Port, &GPIO_InitStruct);
 80019e8:	a909      	add	r1, sp, #36	@ 0x24
 80019ea:	4886      	ldr	r0, [pc, #536]	@ (8001c04 <main+0x33c>)
  GPIO_InitStruct.Pin = FXLS8974CF_INT_Pin;
 80019ec:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ee:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(FXLS8974CF_INT_Port, &GPIO_InitStruct);
 80019f2:	f004 fb7d 	bl	80060f0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019f6:	4622      	mov	r2, r4
 80019f8:	4621      	mov	r1, r4
 80019fa:	2006      	movs	r0, #6
 80019fc:	f002 fd18 	bl	8004430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a00:	2006      	movs	r0, #6
 8001a02:	f002 fd51 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a06:	4622      	mov	r2, r4
 8001a08:	4621      	mov	r1, r4
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f002 fd10 	bl	8004430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a10:	4628      	mov	r0, r5
 8001a12:	f002 fd49 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a16:	4622      	mov	r2, r4
 8001a18:	4621      	mov	r1, r4
 8001a1a:	2008      	movs	r0, #8
 8001a1c:	f002 fd08 	bl	8004430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a20:	2008      	movs	r0, #8
 8001a22:	f002 fd41 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a26:	4622      	mov	r2, r4
 8001a28:	4621      	mov	r1, r4
 8001a2a:	2017      	movs	r0, #23
 8001a2c:	f002 fd00 	bl	8004430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a30:	2017      	movs	r0, #23
 8001a32:	f002 fd39 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  DMA2D_Handle.Instance = DMA2D;
 8001a36:	4875      	ldr	r0, [pc, #468]	@ (8001c0c <main+0x344>)
 8001a38:	4b75      	ldr	r3, [pc, #468]	@ (8001c10 <main+0x348>)
  DMA2D_Handle.Init.OutputOffset = 0;
 8001a3a:	60c4      	str	r4, [r0, #12]
  DMA2D_Handle.Instance = DMA2D;
 8001a3c:	6003      	str	r3, [r0, #0]
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001a3e:	65c4      	str	r4, [r0, #92]	@ 0x5c
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001a40:	e9c0 4401 	strd	r4, r4, [r0, #4]
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a44:	e9c0 4411 	strd	r4, r4, [r0, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8001a48:	e9c0 4413 	strd	r4, r4, [r0, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001a4c:	e9c0 4415 	strd	r4, r4, [r0, #84]	@ 0x54
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8001a50:	f004 f9b0 	bl	8005db4 <HAL_DMA2D_Init>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	f040 8127 	bne.w	8001ca8 <main+0x3e0>
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	486b      	ldr	r0, [pc, #428]	@ (8001c0c <main+0x344>)
 8001a5e:	f004 fadd 	bl	800601c <HAL_DMA2D_ConfigLayer>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	f040 811d 	bne.w	8001ca2 <main+0x3da>
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a68:	2400      	movs	r4, #0
  hsd1.Instance = SDMMC1;
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <main+0x34c>)
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001a6c:	4a63      	ldr	r2, [pc, #396]	@ (8001bfc <main+0x334>)
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001a6e:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a72:	4969      	ldr	r1, [pc, #420]	@ (8001c18 <main+0x350>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a74:	609c      	str	r4, [r3, #8]
  hsd1.Init.ClockDiv = 0;
 8001a76:	615c      	str	r4, [r3, #20]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a78:	e9c3 1400 	strd	r1, r4, [r3]
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7c:	f8d2 1138 	ldr.w	r1, [r2, #312]	@ 0x138
 8001a80:	f041 0101 	orr.w	r1, r1, #1
 8001a84:	f8c2 1138 	str.w	r1, [r2, #312]	@ 0x138
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a88:	4621      	mov	r1, r4
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8a:	f8d2 2138 	ldr.w	r2, [r2, #312]	@ 0x138
 8001a8e:	f002 0201 	and.w	r2, r2, #1
 8001a92:	9203      	str	r2, [sp, #12]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a94:	4622      	mov	r2, r4
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001a96:	9803      	ldr	r0, [sp, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001a98:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001a9c:	e9c3 5003 	strd	r5, r0, [r3, #12]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001aa0:	200b      	movs	r0, #11
 8001aa2:	f002 fcc5 	bl	8004430 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	f002 fcfe 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8001aac:	485b      	ldr	r0, [pc, #364]	@ (8001c1c <main+0x354>)
 8001aae:	4a5c      	ldr	r2, [pc, #368]	@ (8001c20 <main+0x358>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ab0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  hspi1.Init.CRCPolynomial = 0x0;
 8001ab4:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ab6:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001aba:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ac4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001acc:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ad0:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad4:	e9c0 4409 	strd	r4, r4, [r0, #36]	@ 0x24
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ad8:	6182      	str	r2, [r0, #24]
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ada:	e9c0 340d 	strd	r3, r4, [r0, #52]	@ 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ade:	e9c0 440f 	strd	r4, r4, [r0, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ae2:	e9c0 4411 	strd	r4, r4, [r0, #68]	@ 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ae6:	e9c0 4413 	strd	r4, r4, [r0, #76]	@ 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aea:	e9c0 4415 	strd	r4, r4, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aee:	f00a fb35 	bl	800c15c <HAL_SPI_Init>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	f040 80d2 	bne.w	8001c9c <main+0x3d4>
  RTC_TimeTypeDef sTime = {0};
 8001af8:	2300      	movs	r3, #0
  hrtc.Instance = RTC;
 8001afa:	484a      	ldr	r0, [pc, #296]	@ (8001c24 <main+0x35c>)
 8001afc:	494a      	ldr	r1, [pc, #296]	@ (8001c28 <main+0x360>)
  hrtc.Init.AsynchPrediv = 127;
 8001afe:	227f      	movs	r2, #127	@ 0x7f
  RTC_TimeTypeDef sTime = {0};
 8001b00:	930d      	str	r3, [sp, #52]	@ 0x34
  hrtc.Init.AsynchPrediv = 127;
 8001b02:	6082      	str	r2, [r0, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  RTC_DateTypeDef sDate = {0};
 8001b08:	9302      	str	r3, [sp, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b0a:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b0c:	e9c0 1300 	strd	r1, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 8001b10:	21ff      	movs	r1, #255	@ 0xff
  RTC_TimeTypeDef sTime = {0};
 8001b12:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 8001b16:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  hrtc.Init.SynchPrediv = 255;
 8001b1a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b1e:	e9c0 3206 	strd	r3, r2, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b22:	f009 fabb 	bl	800b09c <HAL_RTC_Init>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	f040 80b5 	bne.w	8001c96 <main+0x3ce>
  sTime.Hours = 0;
 8001b2c:	2200      	movs	r2, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b2e:	a909      	add	r1, sp, #36	@ 0x24
 8001b30:	483c      	ldr	r0, [pc, #240]	@ (8001c24 <main+0x35c>)
  sTime.Hours = 0;
 8001b32:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
  sTime.Seconds = 0;
 8001b36:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b3a:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b3e:	f009 fb21 	bl	800b184 <HAL_RTC_SetTime>
 8001b42:	2800      	cmp	r0, #0
 8001b44:	f040 80a4 	bne.w	8001c90 <main+0x3c8>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b48:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <main+0x364>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	a902      	add	r1, sp, #8
 8001b4e:	4835      	ldr	r0, [pc, #212]	@ (8001c24 <main+0x35c>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b50:	9302      	str	r3, [sp, #8]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b52:	f009 fbb9 	bl	800b2c8 <HAL_RTC_SetDate>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	f040 8097 	bne.w	8001c8a <main+0x3c2>
  hi2c1.Instance = I2C1;
 8001b5c:	4834      	ldr	r0, [pc, #208]	@ (8001c30 <main+0x368>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	4934      	ldr	r1, [pc, #208]	@ (8001c34 <main+0x36c>)
 8001b62:	2401      	movs	r4, #1
 8001b64:	4a34      	ldr	r2, [pc, #208]	@ (8001c38 <main+0x370>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b66:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b68:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c1.Init.OwnAddress2 = 0;
 8001b6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b70:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b74:	f004 fce0 	bl	8006538 <HAL_I2C_Init>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f040 8083 	bne.w	8001c84 <main+0x3bc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	482b      	ldr	r0, [pc, #172]	@ (8001c30 <main+0x368>)
 8001b82:	f005 fbb3 	bl	80072ec <HAL_I2CEx_ConfigAnalogFilter>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d179      	bne.n	8001c7e <main+0x3b6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4828      	ldr	r0, [pc, #160]	@ (8001c30 <main+0x368>)
 8001b8e:	f005 fbd7 	bl	8007340 <HAL_I2CEx_ConfigDigitalFilter>
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d170      	bne.n	8001c78 <main+0x3b0>
  MX_ADC1_Init();
 8001b96:	f7ff fe39 	bl	800180c <MX_ADC1_Init>
  JPEG_Handle.Instance = JPEG;
 8001b9a:	4828      	ldr	r0, [pc, #160]	@ (8001c3c <main+0x374>)
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <main+0x378>)
 8001b9e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 8001ba0:	f005 fefe 	bl	80079a0 <HAL_JPEG_Init>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d164      	bne.n	8001c72 <main+0x3aa>
  HAL_Delay(500);
 8001ba8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bac:	4c25      	ldr	r4, [pc, #148]	@ (8001c44 <main+0x37c>)
 8001bae:	f001 fca5 	bl	80034fc <HAL_Delay>
  for(int i = 0 ; i < ( LCD_X_SIZE * LCD_Y_SIZE * 2 ) ; i++)
 8001bb2:	2300      	movs	r3, #0
	  outputData[i] = 0xff;
 8001bb4:	21ff      	movs	r1, #255	@ 0xff
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	54d1      	strb	r1, [r2, r3]
  for(int i = 0 ; i < ( LCD_X_SIZE * LCD_Y_SIZE * 2 ) ; i++)
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8001bc0:	d1f9      	bne.n	8001bb6 <main+0x2ee>
  GC9A01_Init();
 8001bc2:	f7ff f87d 	bl	8000cc0 <GC9A01_Init>
  lcd_draw(outputData);
 8001bc6:	6820      	ldr	r0, [r4, #0]
 8001bc8:	f001 f81c 	bl	8002c04 <lcd_draw>
  FXLS8974_I2C_Init(&acc_Handle, &hi2c1, HAL_I2C_Master_Seq_Transmit_IT, HAL_I2C_Master_Seq_Receive_IT, FXLS8974_DEVICE_ADDRESS_SA0_0);
 8001bcc:	2430      	movs	r4, #48	@ 0x30
  HAL_Delay(500);
 8001bce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bd2:	f001 fc93 	bl	80034fc <HAL_Delay>
  HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bdc:	4809      	ldr	r0, [pc, #36]	@ (8001c04 <main+0x33c>)
 8001bde:	f004 fc99 	bl	8006514 <HAL_GPIO_WritePin>
  FXLS8974_I2C_Init(&acc_Handle, &hi2c1, HAL_I2C_Master_Seq_Transmit_IT, HAL_I2C_Master_Seq_Receive_IT, FXLS8974_DEVICE_ADDRESS_SA0_0);
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <main+0x380>)
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <main+0x384>)
 8001be6:	4912      	ldr	r1, [pc, #72]	@ (8001c30 <main+0x368>)
 8001be8:	4819      	ldr	r0, [pc, #100]	@ (8001c50 <main+0x388>)
 8001bea:	9400      	str	r4, [sp, #0]
 8001bec:	f7fe fe1c 	bl	8000828 <FXLS8974_I2C_Init>
  if(smart_watch_init() != OK)
 8001bf0:	f000 fa54 	bl	800209c <smart_watch_init>
 8001bf4:	2801      	cmp	r0, #1
 8001bf6:	e02d      	b.n	8001c54 <main+0x38c>
 8001bf8:	e000ed00 	.word	0xe000ed00
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	58020000 	.word	0x58020000
 8001c04:	58020400 	.word	0x58020400
 8001c08:	58020800 	.word	0x58020800
 8001c0c:	240001b8 	.word	0x240001b8
 8001c10:	52001000 	.word	0x52001000
 8001c14:	24000378 	.word	0x24000378
 8001c18:	52007000 	.word	0x52007000
 8001c1c:	240002f0 	.word	0x240002f0
 8001c20:	40013000 	.word	0x40013000
 8001c24:	2400017c 	.word	0x2400017c
 8001c28:	58004000 	.word	0x58004000
 8001c2c:	00010101 	.word	0x00010101
 8001c30:	24000128 	.word	0x24000128
 8001c34:	40005400 	.word	0x40005400
 8001c38:	10b0c4ff 	.word	0x10b0c4ff
 8001c3c:	24000220 	.word	0x24000220
 8001c40:	52003000 	.word	0x52003000
 8001c44:	24000004 	.word	0x24000004
 8001c48:	08006745 	.word	0x08006745
 8001c4c:	080065ed 	.word	0x080065ed
 8001c50:	240000ac 	.word	0x240000ac
 8001c54:	d001      	beq.n	8001c5a <main+0x392>
  HAL_NVIC_SystemReset();
 8001c56:	f002 fc47 	bl	80044e8 <HAL_NVIC_SystemReset>
  HAL_Delay(500);
 8001c5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c5e:	f001 fc4d 	bl	80034fc <HAL_Delay>
	  if(smart_watch_process() != OK)
 8001c62:	f000 fa5d 	bl	8002120 <smart_watch_process>
 8001c66:	2801      	cmp	r0, #1
 8001c68:	d100      	bne.n	8001c6c <main+0x3a4>
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <main+0x3a2>
  HAL_NVIC_SystemReset();
 8001c6c:	f002 fc3c 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c70:	e7fb      	b.n	8001c6a <main+0x3a2>
  HAL_NVIC_SystemReset();
 8001c72:	f002 fc39 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c76:	e797      	b.n	8001ba8 <main+0x2e0>
  HAL_NVIC_SystemReset();
 8001c78:	f002 fc36 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c7c:	e78b      	b.n	8001b96 <main+0x2ce>
  HAL_NVIC_SystemReset();
 8001c7e:	f002 fc33 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c82:	e782      	b.n	8001b8a <main+0x2c2>
  HAL_NVIC_SystemReset();
 8001c84:	f002 fc30 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c88:	e779      	b.n	8001b7e <main+0x2b6>
  HAL_NVIC_SystemReset();
 8001c8a:	f002 fc2d 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c8e:	e765      	b.n	8001b5c <main+0x294>
  HAL_NVIC_SystemReset();
 8001c90:	f002 fc2a 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c94:	e758      	b.n	8001b48 <main+0x280>
  HAL_NVIC_SystemReset();
 8001c96:	f002 fc27 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001c9a:	e747      	b.n	8001b2c <main+0x264>
  HAL_NVIC_SystemReset();
 8001c9c:	f002 fc24 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001ca0:	e72a      	b.n	8001af8 <main+0x230>
  HAL_NVIC_SystemReset();
 8001ca2:	f002 fc21 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001ca6:	e6df      	b.n	8001a68 <main+0x1a0>
  HAL_NVIC_SystemReset();
 8001ca8:	f002 fc1e 	bl	80044e8 <HAL_NVIC_SystemReset>
}
 8001cac:	e6d5      	b.n	8001a5a <main+0x192>
 8001cae:	bf00      	nop

08001cb0 <get_acc_addr>:
}
 8001cb0:	4800      	ldr	r0, [pc, #0]	@ (8001cb4 <get_acc_addr+0x4>)
 8001cb2:	4770      	bx	lr
 8001cb4:	240000ac 	.word	0x240000ac

08001cb8 <Error_Handler>:
  HAL_NVIC_SystemReset();
 8001cb8:	f002 bc16 	b.w	80044e8 <HAL_NVIC_SystemReset>

08001cbc <file_handler>:
	return 1;

}

static int file_handler(uint8_t openFile)
{
 8001cbc:	b530      	push	{r4, r5, lr}
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 8001cbe:	4c2b      	ldr	r4, [pc, #172]	@ (8001d6c <file_handler+0xb0>)
{
 8001cc0:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8001cc2:	7823      	ldrb	r3, [r4, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d131      	bne.n	8001d2c <file_handler+0x70>
 8001cc8:	b340      	cbz	r0, 8001d1c <file_handler+0x60>
   {

  	 if(openFile)
  		 f_close(&MJPEG_File);
 8001cca:	4829      	ldr	r0, [pc, #164]	@ (8001d70 <file_handler+0xb4>)
 8001ccc:	f00d fcba 	bl	800f644 <f_close>

  	 new_file_flag = 0;
 8001cd0:	2100      	movs	r1, #0

  	 char file_idx_str[4];
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001cd2:	4d28      	ldr	r5, [pc, #160]	@ (8001d74 <file_handler+0xb8>)
 8001cd4:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <file_handler+0xbc>)
 8001cd6:	a803      	add	r0, sp, #12
 8001cd8:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8001cda:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001cdc:	2104      	movs	r1, #4
 8001cde:	f00d ff11 	bl	800fb04 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8001ce2:	4a26      	ldr	r2, [pc, #152]	@ (8001d7c <file_handler+0xc0>)
 8001ce4:	210e      	movs	r1, #14
 8001ce6:	ab03      	add	r3, sp, #12
 8001ce8:	4825      	ldr	r0, [pc, #148]	@ (8001d80 <file_handler+0xc4>)
 8001cea:	f00d ff0b 	bl	800fb04 <sniprintf>

  	 // Open the MJPEG avi file with read access
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4923      	ldr	r1, [pc, #140]	@ (8001d80 <file_handler+0xc4>)
 8001cf2:	481f      	ldr	r0, [pc, #124]	@ (8001d70 <file_handler+0xb4>)
 8001cf4:	f00d f9f6 	bl	800f0e4 <f_open>
 8001cf8:	b110      	cbz	r0, 8001d00 <file_handler+0x44>
{
 8001cfa:	2000      	movs	r0, #0

   }

   return 1;

}
 8001cfc:	b005      	add	sp, #20
 8001cfe:	bd30      	pop	{r4, r5, pc}
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001d00:	4920      	ldr	r1, [pc, #128]	@ (8001d84 <file_handler+0xc8>)
  		 video.isfirstFrame = 1;
 8001d02:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001d04:	9001      	str	r0, [sp, #4]
 8001d06:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001d0a:	9100      	str	r1, [sp, #0]
 8001d0c:	481e      	ldr	r0, [pc, #120]	@ (8001d88 <file_handler+0xcc>)
  		 video.isfirstFrame = 1;
 8001d0e:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001d10:	4917      	ldr	r1, [pc, #92]	@ (8001d70 <file_handler+0xb4>)
 8001d12:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <file_handler+0xd0>)
 8001d14:	f7fe fb3c 	bl	8000390 <AVI_ParserInit>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d1ee      	bne.n	8001cfa <file_handler+0x3e>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <file_handler+0xcc>)
 8001d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d205      	bcs.n	8001d32 <file_handler+0x76>
   return 1;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	b005      	add	sp, #20
 8001d2a:	bd30      	pop	{r4, r5, pc}
  	 if(openFile)
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d0cf      	beq.n	8001cd0 <file_handler+0x14>
 8001d30:	e7cb      	b.n	8001cca <file_handler+0xe>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001d32:	4d10      	ldr	r5, [pc, #64]	@ (8001d74 <file_handler+0xb8>)
 8001d34:	4916      	ldr	r1, [pc, #88]	@ (8001d90 <file_handler+0xd4>)
	   	 video.file_idx++;
 8001d36:	8aab      	ldrh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001d38:	4816      	ldr	r0, [pc, #88]	@ (8001d94 <file_handler+0xd8>)
	   	 video.file_idx++;
 8001d3a:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001d3c:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	fba1 1202 	umull	r1, r2, r1, r2
 8001d46:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001d4a:	fb01 3312 	mls	r3, r1, r2, r3
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001d4e:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001d50:	82ab      	strh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001d52:	f004 f8cb 	bl	8005eec <HAL_DMA2D_PollForTransfer>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d1cf      	bne.n	8001cfa <file_handler+0x3e>
		 if(f_close(&MJPEG_File) != FR_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <file_handler+0xb4>)
 8001d5c:	f00d fc72 	bl	800f644 <f_close>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d1ca      	bne.n	8001cfa <file_handler+0x3e>
		 new_file_flag = 1;
 8001d64:	2301      	movs	r3, #1
 8001d66:	7023      	strb	r3, [r4, #0]
 8001d68:	e7dd      	b.n	8001d26 <file_handler+0x6a>
 8001d6a:	bf00      	nop
 8001d6c:	24000000 	.word	0x24000000
 8001d70:	240ac360 	.word	0x240ac360
 8001d74:	2409fad8 	.word	0x2409fad8
 8001d78:	080104a4 	.word	0x080104a4
 8001d7c:	080104ac 	.word	0x080104ac
 8001d80:	240ac7c0 	.word	0x240ac7c0
 8001d84:	2409fb18 	.word	0x2409fb18
 8001d88:	240ac318 	.word	0x240ac318
 8001d8c:	2409fb18 	.word	0x2409fb18
 8001d90:	05b05b06 	.word	0x05b05b06
 8001d94:	240001b8 	.word	0x240001b8

08001d98 <DMA2D_Init.constprop.0>:
	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;

}

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	460e      	mov	r6, r1
 8001d9c:	4605      	mov	r5, r0
{

	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;


	HAL_DMA2D_MspInit(&DMA2D_Handle);
 8001d9e:	4822      	ldr	r0, [pc, #136]	@ (8001e28 <DMA2D_Init.constprop.0+0x90>)
 8001da0:	f000 ffbc 	bl	8002d1c <HAL_DMA2D_MspInit>

	if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8001da4:	2e01      	cmp	r6, #1
 8001da6:	d02b      	beq.n	8001e00 <DMA2D_Init.constprop.0+0x68>
			inputLineOffset = 16 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001da8:	b326      	cbz	r6, 8001df4 <DMA2D_Init.constprop.0+0x5c>
			inputLineOffset = 8 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8001daa:	2e02      	cmp	r6, #2
 8001dac:	d033      	beq.n	8001e16 <DMA2D_Init.constprop.0+0x7e>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8001dae:	2200      	movs	r2, #0
 8001db0:	2601      	movs	r6, #1
		}

	}

  	// Configure the DMA2D Mode, Color Mode and output offset
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001db2:	4c1d      	ldr	r4, [pc, #116]	@ (8001e28 <DMA2D_Init.constprop.0+0x90>)
 8001db4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  	DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
  	DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 8001db8:	2300      	movs	r3, #0
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8001dba:	f1c5 05f0 	rsb	r5, r5, #240	@ 0xf0
  	// Foreground Configuration
  	DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
  	DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001dbe:	6462      	str	r2, [r4, #68]	@ 0x44
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion

  	DMA2D_Handle.Instance = DMA2D;

  	// DMA2D Initialization
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8001dc0:	4620      	mov	r0, r4
  	DMA2D_Handle.Instance = DMA2D;
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <DMA2D_Init.constprop.0+0x94>)
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001dc4:	65e6      	str	r6, [r4, #92]	@ 0x5c
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001dc6:	2601      	movs	r6, #1
  	DMA2D_Handle.XferCpltCallback  = NULL;
 8001dc8:	6223      	str	r3, [r4, #32]
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001dca:	e9c4 2100 	strd	r2, r1, [r4]
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001dce:	21ff      	movs	r1, #255	@ 0xff
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001dd0:	220b      	movs	r2, #11
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001dd2:	e9c4 6113 	strd	r6, r1, [r4, #76]	@ 0x4c
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8001dd6:	e9c4 6502 	strd	r6, r5, [r4, #8]
  	DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8001dda:	e9c4 3304 	strd	r3, r3, [r4, #16]
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001dde:	64a2      	str	r2, [r4, #72]	@ 0x48
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8001de0:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8001de4:	f003 ffe6 	bl	8005db4 <HAL_DMA2D_Init>
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001de8:	4631      	mov	r1, r6
 8001dea:	4620      	mov	r0, r4

}
 8001dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001df0:	f004 b914 	b.w	800601c <HAL_DMA2D_ConfigLayer>
		if(inputLineOffset != 0)
 8001df4:	f015 0207 	ands.w	r2, r5, #7
 8001df8:	d00b      	beq.n	8001e12 <DMA2D_Init.constprop.0+0x7a>
			inputLineOffset = 8 - inputLineOffset;
 8001dfa:	f1c2 0208 	rsb	r2, r2, #8
 8001dfe:	e7d8      	b.n	8001db2 <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8001e00:	f015 020f 	ands.w	r2, r5, #15
 8001e04:	d003      	beq.n	8001e0e <DMA2D_Init.constprop.0+0x76>
			inputLineOffset = 16 - inputLineOffset;
 8001e06:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_420;
 8001e0a:	2602      	movs	r6, #2
 8001e0c:	e7d1      	b.n	8001db2 <DMA2D_Init.constprop.0+0x1a>
 8001e0e:	2602      	movs	r6, #2
 8001e10:	e7cf      	b.n	8001db2 <DMA2D_Init.constprop.0+0x1a>
 8001e12:	4632      	mov	r2, r6
 8001e14:	e7cd      	b.n	8001db2 <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8001e16:	f015 020f 	ands.w	r2, r5, #15
 8001e1a:	d003      	beq.n	8001e24 <DMA2D_Init.constprop.0+0x8c>
			inputLineOffset = 16 - inputLineOffset;
 8001e1c:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_422;
 8001e20:	2601      	movs	r6, #1
 8001e22:	e7c6      	b.n	8001db2 <DMA2D_Init.constprop.0+0x1a>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8001e24:	2601      	movs	r6, #1
 8001e26:	e7c4      	b.n	8001db2 <DMA2D_Init.constprop.0+0x1a>
 8001e28:	240001b8 	.word	0x240001b8
 8001e2c:	52001000 	.word	0x52001000

08001e30 <file_handler.constprop.0>:
static int file_handler(uint8_t openFile)
 8001e30:	b530      	push	{r4, r5, lr}
   if(new_file_flag || openFile)
 8001e32:	4c29      	ldr	r4, [pc, #164]	@ (8001ed8 <file_handler.constprop.0+0xa8>)
static int file_handler(uint8_t openFile)
 8001e34:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8001e36:	7823      	ldrb	r3, [r4, #0]
 8001e38:	b933      	cbnz	r3, 8001e48 <file_handler.constprop.0+0x18>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001e3a:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <file_handler.constprop.0+0xac>)
 8001e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d22c      	bcs.n	8001e9e <file_handler.constprop.0+0x6e>
   return 1;
 8001e44:	2001      	movs	r0, #1
 8001e46:	e015      	b.n	8001e74 <file_handler.constprop.0+0x44>
  	 new_file_flag = 0;
 8001e48:	2100      	movs	r1, #0
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001e4a:	4d25      	ldr	r5, [pc, #148]	@ (8001ee0 <file_handler.constprop.0+0xb0>)
 8001e4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ee4 <file_handler.constprop.0+0xb4>)
 8001e4e:	a803      	add	r0, sp, #12
 8001e50:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8001e52:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001e54:	2104      	movs	r1, #4
 8001e56:	f00d fe55 	bl	800fb04 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8001e5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <file_handler.constprop.0+0xb8>)
 8001e5c:	210e      	movs	r1, #14
 8001e5e:	ab03      	add	r3, sp, #12
 8001e60:	4822      	ldr	r0, [pc, #136]	@ (8001eec <file_handler.constprop.0+0xbc>)
 8001e62:	f00d fe4f 	bl	800fb04 <sniprintf>
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8001e66:	2201      	movs	r2, #1
 8001e68:	4920      	ldr	r1, [pc, #128]	@ (8001eec <file_handler.constprop.0+0xbc>)
 8001e6a:	4821      	ldr	r0, [pc, #132]	@ (8001ef0 <file_handler.constprop.0+0xc0>)
 8001e6c:	f00d f93a 	bl	800f0e4 <f_open>
 8001e70:	b110      	cbz	r0, 8001e78 <file_handler.constprop.0+0x48>
static int file_handler(uint8_t openFile)
 8001e72:	2000      	movs	r0, #0
}
 8001e74:	b005      	add	sp, #20
 8001e76:	bd30      	pop	{r4, r5, pc}
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001e78:	491e      	ldr	r1, [pc, #120]	@ (8001ef4 <file_handler.constprop.0+0xc4>)
  		 video.isfirstFrame = 1;
 8001e7a:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001e7c:	9001      	str	r0, [sp, #4]
 8001e7e:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001e82:	9100      	str	r1, [sp, #0]
 8001e84:	4815      	ldr	r0, [pc, #84]	@ (8001edc <file_handler.constprop.0+0xac>)
  		 video.isfirstFrame = 1;
 8001e86:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001e88:	4919      	ldr	r1, [pc, #100]	@ (8001ef0 <file_handler.constprop.0+0xc0>)
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef8 <file_handler.constprop.0+0xc8>)
 8001e8c:	f7fe fa80 	bl	8000390 <AVI_ParserInit>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d1ee      	bne.n	8001e72 <file_handler.constprop.0+0x42>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <file_handler.constprop.0+0xac>)
 8001e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3d2      	bcc.n	8001e44 <file_handler.constprop.0+0x14>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001e9e:	4d10      	ldr	r5, [pc, #64]	@ (8001ee0 <file_handler.constprop.0+0xb0>)
 8001ea0:	4916      	ldr	r1, [pc, #88]	@ (8001efc <file_handler.constprop.0+0xcc>)
	   	 video.file_idx++;
 8001ea2:	8aab      	ldrh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001ea4:	4816      	ldr	r0, [pc, #88]	@ (8001f00 <file_handler.constprop.0+0xd0>)
	   	 video.file_idx++;
 8001ea6:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001ea8:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	fba1 1202 	umull	r1, r2, r1, r2
 8001eb2:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001eb6:	fb01 3312 	mls	r3, r1, r2, r3
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001eba:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001ebc:	82ab      	strh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001ebe:	f004 f815 	bl	8005eec <HAL_DMA2D_PollForTransfer>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d1d5      	bne.n	8001e72 <file_handler.constprop.0+0x42>
		 if(f_close(&MJPEG_File) != FR_OK)
 8001ec6:	480a      	ldr	r0, [pc, #40]	@ (8001ef0 <file_handler.constprop.0+0xc0>)
 8001ec8:	f00d fbbc 	bl	800f644 <f_close>
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d1d0      	bne.n	8001e72 <file_handler.constprop.0+0x42>
		 new_file_flag = 1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	7023      	strb	r3, [r4, #0]
 8001ed4:	e7b6      	b.n	8001e44 <file_handler.constprop.0+0x14>
 8001ed6:	bf00      	nop
 8001ed8:	24000000 	.word	0x24000000
 8001edc:	240ac318 	.word	0x240ac318
 8001ee0:	2409fad8 	.word	0x2409fad8
 8001ee4:	080104a4 	.word	0x080104a4
 8001ee8:	080104ac 	.word	0x080104ac
 8001eec:	240ac7c0 	.word	0x240ac7c0
 8001ef0:	240ac360 	.word	0x240ac360
 8001ef4:	2409fb18 	.word	0x2409fb18
 8001ef8:	2409fb18 	.word	0x2409fb18
 8001efc:	05b05b06 	.word	0x05b05b06
 8001f00:	240001b8 	.word	0x240001b8

08001f04 <show_frame.constprop.0>:
static int show_frame(uint32_t frame_num)
 8001f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(video.FrameType == AVI_VIDEO_FRAME)
 8001f08:	4c57      	ldr	r4, [pc, #348]	@ (8002068 <show_frame.constprop.0+0x164>)
static int show_frame(uint32_t frame_num)
 8001f0a:	b084      	sub	sp, #16
	if(video.FrameType == AVI_VIDEO_FRAME)
 8001f0c:	7de3      	ldrb	r3, [r4, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d003      	beq.n	8001f1a <show_frame.constprop.0+0x16>
	return 1;
 8001f12:	2001      	movs	r0, #1
}
 8001f14:	b004      	add	sp, #16
 8001f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		AVI_Handel.CurrentImage++;
 8001f1a:	4954      	ldr	r1, [pc, #336]	@ (800206c <show_frame.constprop.0+0x168>)
		video.frameCount++;
 8001f1c:	69e0      	ldr	r0, [r4, #28]
		AVI_Handel.CurrentImage++;
 8001f1e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
		video.frameCount++;
 8001f20:	1c45      	adds	r5, r0, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8001f22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
		AVI_Handel.CurrentImage++;
 8001f24:	1c50      	adds	r0, r2, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8001f26:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
		video.frameCount++;
 8001f28:	61e5      	str	r5, [r4, #28]
		AVI_Handel.CurrentImage++;
 8001f2a:	62c8      	str	r0, [r1, #44]	@ 0x2c
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8001f2c:	4950      	ldr	r1, [pc, #320]	@ (8002070 <show_frame.constprop.0+0x16c>)
 8001f2e:	4851      	ldr	r0, [pc, #324]	@ (8002074 <show_frame.constprop.0+0x170>)
 8001f30:	f7ff fbac 	bl	800168c <JPEG_Decode_DMA>
 8001f34:	2801      	cmp	r0, #1
 8001f36:	f040 8085 	bne.w	8002044 <show_frame.constprop.0+0x140>
 8001f3a:	4d4f      	ldr	r5, [pc, #316]	@ (8002078 <show_frame.constprop.0+0x174>)
 8001f3c:	494f      	ldr	r1, [pc, #316]	@ (800207c <show_frame.constprop.0+0x178>)
			if(count_iter >= MAX_ITERATIONS_NUM)
 8001f3e:	4850      	ldr	r0, [pc, #320]	@ (8002080 <show_frame.constprop.0+0x17c>)
 8001f40:	682b      	ldr	r3, [r5, #0]
 8001f42:	e001      	b.n	8001f48 <show_frame.constprop.0+0x44>
 8001f44:	4283      	cmp	r3, r0
 8001f46:	d87c      	bhi.n	8002042 <show_frame.constprop.0+0x13e>
		while(Jpeg_HWDecodingEnd == 0)
 8001f48:	680a      	ldr	r2, [r1, #0]
			count_iter++;
 8001f4a:	3301      	adds	r3, #1
		while(Jpeg_HWDecodingEnd == 0)
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d0f9      	beq.n	8001f44 <show_frame.constprop.0+0x40>
		if(video.isfirstFrame == 1)
 8001f50:	7da2      	ldrb	r2, [r4, #22]
		count_iter = 0;
 8001f52:	2300      	movs	r3, #0
		if(video.isfirstFrame == 1)
 8001f54:	2a01      	cmp	r2, #1
		count_iter = 0;
 8001f56:	602b      	str	r3, [r5, #0]
		if(video.isfirstFrame == 1)
 8001f58:	d076      	beq.n	8002048 <show_frame.constprop.0+0x144>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002084 <show_frame.constprop.0+0x180>)
 8001f5c:	e9d3 7902 	ldrd	r7, r9, [r3, #8]
	uint32_t xPos, yPos, destination;


	// calculate the destination transfer address
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8001f60:	f1c7 02f0 	rsb	r2, r7, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8001f64:	f1c9 03f0 	rsb	r3, r9, #240	@ 0xf0
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001f68:	4e47      	ldr	r6, [pc, #284]	@ (8002088 <show_frame.constprop.0+0x184>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;

	// wait for the DMA2D transfer to ends
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
	// copy the new decoded frame to the LCD Frame buffer
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8001f6a:	b2bf      	uxth	r7, r7
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8001f6c:	0852      	lsrs	r2, r2, #1
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001f6e:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8001f72:	085b      	lsrs	r3, r3, #1
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8001f78:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8001f7c:	4843      	ldr	r0, [pc, #268]	@ (800208c <show_frame.constprop.0+0x188>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8001f7e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001f82:	6832      	ldr	r2, [r6, #0]
 8001f84:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8001f88:	f003 ffb0 	bl	8005eec <HAL_DMA2D_PollForTransfer>
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8001f8c:	4641      	mov	r1, r8
 8001f8e:	fa1f f389 	uxth.w	r3, r9
 8001f92:	4652      	mov	r2, sl
 8001f94:	483d      	ldr	r0, [pc, #244]	@ (800208c <show_frame.constprop.0+0x188>)
 8001f96:	9700      	str	r7, [sp, #0]
 8001f98:	f003 ff4c 	bl	8005e34 <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8001f9c:	8b63      	ldrh	r3, [r4, #26]
 8001f9e:	f8b4 c018 	ldrh.w	ip, [r4, #24]
		pOut.u8Arr = (uint8_t *)outputData;
 8001fa2:	6834      	ldr	r4, [r6, #0]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8001fa4:	fb1c fc03 	smulbb	ip, ip, r3
 8001fa8:	fa1f f38c 	uxth.w	r3, ip
	for( ; i < length ; i++)
 8001fac:	b1ab      	cbz	r3, 8001fda <show_frame.constprop.0+0xd6>
 8001fae:	4620      	mov	r0, r4
 8001fb0:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
 8001fb4:	4621      	mov	r1, r4
		pxArr->u16Arr[i] = color565(r, g, b);
 8001fb6:	4f36      	ldr	r7, [pc, #216]	@ (8002090 <show_frame.constprop.0+0x18c>)
 8001fb8:	784a      	ldrb	r2, [r1, #1]
 8001fba:	788b      	ldrb	r3, [r1, #2]
 8001fbc:	00d2      	lsls	r2, r2, #3
 8001fbe:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 8001fc2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f811 2b03 	ldrb.w	r2, [r1], #3
 8001fcc:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8001fd0:	ba5b      	rev16	r3, r3
 8001fd2:	f820 3b02 	strh.w	r3, [r0], #2
	for( ; i < length ; i++)
 8001fd6:	4584      	cmp	ip, r0
 8001fd8:	d1ee      	bne.n	8001fb8 <show_frame.constprop.0+0xb4>
 8001fda:	af02      	add	r7, sp, #8
       frame.start.X = 0;
 8001fdc:	f04f 0800 	mov.w	r8, #0
 8001fe0:	f04f 19ef 	mov.w	r9, #15663343	@ 0xef00ef
 8001fe4:	e004      	b.n	8001ff0 <show_frame.constprop.0+0xec>
			count_iter++;
 8001fe6:	682b      	ldr	r3, [r5, #0]
 8001fe8:	3301      	adds	r3, #1
			if(count_iter >= MAX_ATTEMPTS_NUM)
 8001fea:	2b09      	cmp	r3, #9
			count_iter++;
 8001fec:	602b      	str	r3, [r5, #0]
			if(count_iter >= MAX_ATTEMPTS_NUM)
 8001fee:	d829      	bhi.n	8002044 <show_frame.constprop.0+0x140>
       frame.start.X = 0;
 8001ff0:	e9cd 8902 	strd	r8, r9, [sp, #8]
	   GC9A01_set_frame(frame);
 8001ff4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8001ff8:	f7ff fac8 	bl	800158c <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8001ffc:	202c      	movs	r0, #44	@ 0x2c
 8001ffe:	f7fe fdbd 	bl	8000b7c <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002002:	2001      	movs	r0, #1
 8002004:	f7fe fd84 	bl	8000b10 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe fd99 	bl	8000b40 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 800200e:	2201      	movs	r2, #1
 8002010:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff fb0d 	bl	8001634 <GC9A01_spi_tx>
	   if(ret != 1)
 800201a:	2801      	cmp	r0, #1
 800201c:	d1e3      	bne.n	8001fe6 <show_frame.constprop.0+0xe2>
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 800201e:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002022:	2200      	movs	r2, #0
 8002024:	1860      	adds	r0, r4, r1
 8002026:	f7ff fb05 	bl	8001634 <GC9A01_spi_tx>
		while(lcd_draw(pOut.u8Arr) != 1)
 800202a:	2801      	cmp	r0, #1
 800202c:	d1db      	bne.n	8001fe6 <show_frame.constprop.0+0xe2>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 800202e:	6831      	ldr	r1, [r6, #0]
 8002030:	4a18      	ldr	r2, [pc, #96]	@ (8002094 <show_frame.constprop.0+0x190>)
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <show_frame.constprop.0+0x194>)
		count_iter = 0;
 8002034:	f8c5 8000 	str.w	r8, [r5]
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002038:	4291      	cmp	r1, r2
 800203a:	bf18      	it	ne
 800203c:	4613      	movne	r3, r2
 800203e:	6033      	str	r3, [r6, #0]
 8002040:	e767      	b.n	8001f12 <show_frame.constprop.0+0xe>
 8002042:	602b      	str	r3, [r5, #0]
	return 1;
 8002044:	2000      	movs	r0, #0
 8002046:	e765      	b.n	8001f14 <show_frame.constprop.0+0x10>
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002048:	4e0e      	ldr	r6, [pc, #56]	@ (8002084 <show_frame.constprop.0+0x180>)
 800204a:	480a      	ldr	r0, [pc, #40]	@ (8002074 <show_frame.constprop.0+0x170>)
 800204c:	4631      	mov	r1, r6
			video.isfirstFrame = 0;
 800204e:	75a3      	strb	r3, [r4, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002050:	f005 fdd8 	bl	8007c04 <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8002054:	6871      	ldr	r1, [r6, #4]
 8002056:	89b0      	ldrh	r0, [r6, #12]
 8002058:	f7ff fe9e 	bl	8001d98 <DMA2D_Init.constprop.0>
			video.height = JPEG_Info.ImageHeight;
 800205c:	e9d6 7902 	ldrd	r7, r9, [r6, #8]
			video.width = JPEG_Info.ImageWidth;
 8002060:	f8a4 9018 	strh.w	r9, [r4, #24]
			video.height = JPEG_Info.ImageHeight;
 8002064:	8367      	strh	r7, [r4, #26]
 8002066:	e77b      	b.n	8001f60 <show_frame.constprop.0+0x5c>
 8002068:	2409fad8 	.word	0x2409fad8
 800206c:	240ac318 	.word	0x240ac318
 8002070:	2409fb18 	.word	0x2409fb18
 8002074:	24000220 	.word	0x24000220
 8002078:	240003fc 	.word	0x240003fc
 800207c:	240000a8 	.word	0x240000a8
 8002080:	000f423f 	.word	0x000f423f
 8002084:	240001a4 	.word	0x240001a4
 8002088:	24000004 	.word	0x24000004
 800208c:	240001b8 	.word	0x240001b8
 8002090:	fffff800 	.word	0xfffff800
 8002094:	2402a774 	.word	0x2402a774
 8002098:	24000410 	.word	0x24000410

0800209c <smart_watch_init>:
{
 800209c:	b538      	push	{r3, r4, r5, lr}
	video.frame_time = 0.0;
 800209e:	2100      	movs	r1, #0
	video.time.Hours = 0;
 80020a0:	4c19      	ldr	r4, [pc, #100]	@ (8002108 <smart_watch_init+0x6c>)
 80020a2:	2500      	movs	r5, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <smart_watch_init+0x70>)
	video.display_status = DISPLAY_ON;
 80020a6:	2301      	movs	r3, #1
}

static void disable_accel_int(void)
{

	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80020a8:	2017      	movs	r0, #23
	video.frame_time = 0.0;
 80020aa:	6261      	str	r1, [r4, #36]	@ 0x24
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80020ac:	6322      	str	r2, [r4, #48]	@ 0x30
	video.display_status = DISPLAY_ON;
 80020ae:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	video.time.Hours = 0;
 80020b2:	8025      	strh	r5, [r4, #0]
	video.time.Seconds = 0;
 80020b4:	70a5      	strb	r5, [r4, #2]
	video.file_idx = 0;
 80020b6:	82a5      	strh	r5, [r4, #20]
	video.FrameType = 0;
 80020b8:	75e5      	strb	r5, [r4, #23]
	video.frameToSkip = 0;
 80020ba:	6225      	str	r5, [r4, #32]
	video.display_ts = video.time.Seconds;
 80020bc:	63a5      	str	r5, [r4, #56]	@ 0x38
	video.frameCount = 0;
 80020be:	61e5      	str	r5, [r4, #28]
	video.set = SET_IDLE;
 80020c0:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
	video.tick_offset = 0;
 80020c4:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80020c8:	f002 f9fc 	bl	80044c4 <HAL_NVIC_DisableIRQ>
	pAcc_Handle = (fxls8974_i2c_sensorhandle_t *)get_acc_addr();
 80020cc:	f7ff fdf0 	bl	8001cb0 <get_acc_addr>
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <smart_watch_init+0x74>)
 80020d2:	6018      	str	r0, [r3, #0]
	if(FXLS8974_I2C_Configure(pAcc_Handle) != 1)
 80020d4:	f7fe fbc6 	bl	8000864 <FXLS8974_I2C_Configure>
 80020d8:	2801      	cmp	r0, #1
 80020da:	d001      	beq.n	80020e0 <smart_watch_init+0x44>
		return 0;
 80020dc:	2000      	movs	r0, #0
}
 80020de:	bd38      	pop	{r3, r4, r5, pc}
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80020e0:	490c      	ldr	r1, [pc, #48]	@ (8002114 <smart_watch_init+0x78>)
 80020e2:	480d      	ldr	r0, [pc, #52]	@ (8002118 <smart_watch_init+0x7c>)
	video.video_mode = SETTING_MODE;
 80020e4:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80020e8:	f00d fce8 	bl	800fabc <FATFS_LinkDriver>
 80020ec:	4604      	mov	r4, r0
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d1f4      	bne.n	80020dc <smart_watch_init+0x40>
	BSP_SD_Init();
 80020f2:	f00b fddb 	bl	800dcac <BSP_SD_Init>
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80020f6:	4622      	mov	r2, r4
 80020f8:	4906      	ldr	r1, [pc, #24]	@ (8002114 <smart_watch_init+0x78>)
 80020fa:	4808      	ldr	r0, [pc, #32]	@ (800211c <smart_watch_init+0x80>)
 80020fc:	f00c ffa6 	bl	800f04c <f_mount>
 8002100:	fab0 f080 	clz	r0, r0
 8002104:	0940      	lsrs	r0, r0, #5
}
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	2409fad8 	.word	0x2409fad8
 800210c:	24054ad8 	.word	0x24054ad8
 8002110:	24000404 	.word	0x24000404
 8002114:	240ac8b4 	.word	0x240ac8b4
 8002118:	08010738 	.word	0x08010738
 800211c:	240ac590 	.word	0x240ac590

08002120 <smart_watch_process>:
{
 8002120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch(video.video_mode)
 8002124:	4cd0      	ldr	r4, [pc, #832]	@ (8002468 <smart_watch_process+0x348>)
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002126:	4dd1      	ldr	r5, [pc, #836]	@ (800246c <smart_watch_process+0x34c>)
 8002128:	4ed1      	ldr	r6, [pc, #836]	@ (8002470 <smart_watch_process+0x350>)
{
 800212a:	ed2d 8b06 	vpush	{d8-d10}
 800212e:	b087      	sub	sp, #28
		if(file_handler(0) != 1)
 8002130:	f7ff fe7e 	bl	8001e30 <file_handler.constprop.0>
 8002134:	2801      	cmp	r0, #1
 8002136:	f040 81c5 	bne.w	80024c4 <smart_watch_process+0x3a4>
	switch(video.video_mode)
 800213a:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800213e:	2b01      	cmp	r3, #1
 8002140:	f000 81c6 	beq.w	80024d0 <smart_watch_process+0x3b0>
	switch(video.set)
 8002144:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002148:	2b02      	cmp	r3, #2
 800214a:	f000 82e7 	beq.w	800271c <smart_watch_process+0x5fc>
 800214e:	2b03      	cmp	r3, #3
 8002150:	f000 82dd 	beq.w	800270e <smart_watch_process+0x5ee>
 8002154:	2b01      	cmp	r3, #1
 8002156:	f000 8323 	beq.w	80027a0 <smart_watch_process+0x680>
			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 800215a:	4fc6      	ldr	r7, [pc, #792]	@ (8002474 <smart_watch_process+0x354>)
 800215c:	2102      	movs	r1, #2
 800215e:	4638      	mov	r0, r7
 8002160:	f004 f9d2 	bl	8006508 <HAL_GPIO_ReadPin>
 8002164:	2800      	cmp	r0, #0
 8002166:	d0f9      	beq.n	800215c <smart_watch_process+0x3c>
			video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	4631      	mov	r1, r6
 800216c:	4628      	mov	r0, r5
 800216e:	f7fe fa51 	bl	8000614 <AVI_GetFrame>
			video.set = SET_HOURS;
 8002172:	2301      	movs	r3, #1
			video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002174:	75e0      	strb	r0, [r4, #23]
			video.set = SET_HOURS;
 8002176:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}

static void enable_btn_int(void)
{

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800217a:	2006      	movs	r0, #6
 800217c:	f002 f994 	bl	80044a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002180:	2007      	movs	r0, #7
 8002182:	f002 f991 	bl	80044a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002186:	2008      	movs	r0, #8
 8002188:	f002 f98e 	bl	80044a8 <HAL_NVIC_EnableIRQ>
	if(video.display_status == DISPLAY_ON)
 800218c:	f894 703c 	ldrb.w	r7, [r4, #60]	@ 0x3c
 8002190:	2f01      	cmp	r7, #1
 8002192:	d1cd      	bne.n	8002130 <smart_watch_process+0x10>
		if(video.time.Seconds >= DISPLAY_STANDBY_TIMER)
 8002194:	78a3      	ldrb	r3, [r4, #2]
 8002196:	2b3a      	cmp	r3, #58	@ 0x3a
 8002198:	d9ca      	bls.n	8002130 <smart_watch_process+0x10>
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, SET);
 800219a:	463a      	mov	r2, r7
 800219c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021a0:	48b5      	ldr	r0, [pc, #724]	@ (8002478 <smart_watch_process+0x358>)
	video.time.Hours = 0;
 80021a2:	f04f 0900 	mov.w	r9, #0
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, SET);
 80021a6:	f004 f9b5 	bl	8006514 <HAL_GPIO_WritePin>
	video.frame_time = 0.0;
 80021aa:	2300      	movs	r3, #0
			if(GC9A01_sleep_mode(ON) != 1)
 80021ac:	4638      	mov	r0, r7
	video.display_status = DISPLAY_ON;
 80021ae:	f884 703c 	strb.w	r7, [r4, #60]	@ 0x3c
	video.frame_time = 0.0;
 80021b2:	6263      	str	r3, [r4, #36]	@ 0x24
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80021b4:	4bb1      	ldr	r3, [pc, #708]	@ (800247c <smart_watch_process+0x35c>)
	video.time.Hours = 0;
 80021b6:	f8a4 9000 	strh.w	r9, [r4]
	video.time.Seconds = 0;
 80021ba:	f884 9002 	strb.w	r9, [r4, #2]
	video.file_idx = 0;
 80021be:	f8a4 9014 	strh.w	r9, [r4, #20]
	video.FrameType = 0;
 80021c2:	f884 9017 	strb.w	r9, [r4, #23]
	video.frameToSkip = 0;
 80021c6:	f8c4 9020 	str.w	r9, [r4, #32]
	video.display_ts = video.time.Seconds;
 80021ca:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
	video.frameCount = 0;
 80021ce:	f8c4 901c 	str.w	r9, [r4, #28]
	video.set = SET_IDLE;
 80021d2:	f884 9035 	strb.w	r9, [r4, #53]	@ 0x35
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80021d6:	6323      	str	r3, [r4, #48]	@ 0x30
	video.tick_offset = 0;
 80021d8:	e9c4 990a 	strd	r9, r9, [r4, #40]	@ 0x28
			if(GC9A01_sleep_mode(ON) != 1)
 80021dc:	f7ff fa16 	bl	800160c <GC9A01_sleep_mode>
 80021e0:	2801      	cmp	r0, #1
 80021e2:	f040 816f 	bne.w	80024c4 <smart_watch_process+0x3a4>
			video.display_status = DISPLAY_OFF;
 80021e6:	f884 903c 	strb.w	r9, [r4, #60]	@ 0x3c
 80021ea:	f8df 82ac 	ldr.w	r8, [pc, #684]	@ 8002498 <smart_watch_process+0x378>
 80021ee:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800249c <smart_watch_process+0x37c>
				HAL_ADC_DeInit(&hadc1);
 80021f2:	4fa3      	ldr	r7, [pc, #652]	@ (8002480 <smart_watch_process+0x360>)
	battery_scaled_volt = ( ( battery_scaled_raw / 4096.0 ) * 3.3 );
 80021f4:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8002448 <smart_watch_process+0x328>
 80021f8:	ed9f 9b95 	vldr	d9, [pc, #596]	@ 8002450 <smart_watch_process+0x330>
	battery_volt = REVERT_VOLTAGE_DIV(battery_scaled_volt);
 80021fc:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 8002458 <smart_watch_process+0x338>
				HAL_ADC_DeInit(&hadc1);
 8002200:	4638      	mov	r0, r7
 8002202:	f001 fdef 	bl	8003de4 <HAL_ADC_DeInit>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002206:	2017      	movs	r0, #23
 8002208:	f002 f94e 	bl	80044a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800220c:	2006      	movs	r0, #6
 800220e:	f002 f94b 	bl	80044a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002212:	2007      	movs	r0, #7
 8002214:	f002 f948 	bl	80044a8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002218:	2008      	movs	r0, #8
 800221a:	f002 f945 	bl	80044a8 <HAL_NVIC_EnableIRQ>
				acc_int = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f888 3000 	strb.w	r3, [r8]
				wake_up = 0;
 8002224:	f889 3000 	strb.w	r3, [r9]
				HAL_SuspendTick();
 8002228:	f001 f97a 	bl	8003520 <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
				HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800222e:	2101      	movs	r1, #1
 8002230:	4608      	mov	r0, r1
 8002232:	f006 fd23 	bl	8008c7c <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 8002236:	b662      	cpsie	i
				HAL_ResumeTick();
 8002238:	f001 f97a 	bl	8003530 <HAL_ResumeTick>
				SystemClock_Config();
 800223c:	f7ff fa86 	bl	800174c <SystemClock_Config>
				MX_ADC1_Init();
 8002240:	f7ff fae4 	bl	800180c <MX_ADC1_Init>
				if(acc_int)
 8002244:	f898 3000 	ldrb.w	r3, [r8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 82f9 	bne.w	8002840 <smart_watch_process+0x720>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 800224e:	f04f 0a1e 	mov.w	sl, #30
		HAL_ADC_Start(&hadc1);
 8002252:	4638      	mov	r0, r7
 8002254:	f001 fd1e 	bl	8003c94 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	4638      	mov	r0, r7
 800225e:	f001 f96f 	bl	8003540 <HAL_ADC_PollForConversion>
		battery_scaled_raw = HAL_ADC_GetValue(&hadc1);
 8002262:	4638      	mov	r0, r7
 8002264:	f001 f9e2 	bl	800362c <HAL_ADC_GetValue>
 8002268:	4683      	mov	fp, r0
		HAL_ADC_Stop(&hadc1);
 800226a:	4638      	mov	r0, r7
 800226c:	f001 fe7e 	bl	8003f6c <HAL_ADC_Stop>
		HAL_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f001 f943 	bl	80034fc <HAL_Delay>
	for(int i = 0 ; i < 30 ; i++)
 8002276:	f1ba 0a01 	subs.w	sl, sl, #1
 800227a:	d1ea      	bne.n	8002252 <smart_watch_process+0x132>
	battery_scaled_volt = ( ( battery_scaled_raw / 4096.0 ) * 3.3 );
 800227c:	ee07 ba90 	vmov	s15, fp
	if(battery_volt < BATTERY_THRESH)
 8002280:	eef0 6a0c 	vmov.f32	s13, #12	@ 0x40600000  3.5
	battery_scaled_volt = ( ( battery_scaled_raw / 4096.0 ) * 3.3 );
 8002284:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002288:	ee27 7b0a 	vmul.f64	d7, d7, d10
 800228c:	ee27 7b09 	vmul.f64	d7, d7, d9
 8002290:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	battery_volt = REVERT_VOLTAGE_DIV(battery_scaled_volt);
 8002294:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002298:	ee27 7b08 	vmul.f64	d7, d7, d8
 800229c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	if(battery_volt < BATTERY_THRESH)
 80022a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	d4aa      	bmi.n	8002200 <smart_watch_process+0xe0>
			}while(( check_battery_status() == BATTERY_LOW ) || !wake_up);
 80022aa:	f899 3000 	ldrb.w	r3, [r9]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0a6      	beq.n	8002200 <smart_watch_process+0xe0>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80022b2:	2017      	movs	r0, #23
 80022b4:	f002 f906 	bl	80044c4 <HAL_NVIC_DisableIRQ>
}

static void disable_btn_int(void)
{

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80022b8:	2006      	movs	r0, #6
 80022ba:	f002 f903 	bl	80044c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80022be:	2007      	movs	r0, #7
 80022c0:	f002 f900 	bl	80044c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80022c4:	2008      	movs	r0, #8
 80022c6:	f002 f8fd 	bl	80044c4 <HAL_NVIC_DisableIRQ>
			GC9A01_Init();
 80022ca:	f7fe fcf9 	bl	8000cc0 <GC9A01_Init>
			video.display_status = DISPLAY_ON;
 80022ce:	2301      	movs	r3, #1
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80022d0:	4652      	mov	r2, sl
 80022d2:	4965      	ldr	r1, [pc, #404]	@ (8002468 <smart_watch_process+0x348>)
 80022d4:	486b      	ldr	r0, [pc, #428]	@ (8002484 <smart_watch_process+0x364>)
			video.display_status = DISPLAY_ON;
 80022d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	RTC_DateTypeDef sDate = {0};
 80022da:	f8cd a010 	str.w	sl, [sp, #16]
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80022de:	f008 fe25 	bl	800af2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022e2:	a904      	add	r1, sp, #16
 80022e4:	4652      	mov	r2, sl
 80022e6:	4867      	ldr	r0, [pc, #412]	@ (8002484 <smart_watch_process+0x364>)
 80022e8:	f008 fe5c 	bl	800afa4 <HAL_RTC_GetDate>
	time.current_day = sDate.Date;
 80022ec:	4966      	ldr	r1, [pc, #408]	@ (8002488 <smart_watch_process+0x368>)
 80022ee:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80022f2:	708b      	strb	r3, [r1, #2]
	time.current_month = sDate.Month;
 80022f4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80022f8:	70cb      	strb	r3, [r1, #3]
	if(time.current_month > time.first_month)
 80022fa:	78c8      	ldrb	r0, [r1, #3]
 80022fc:	784b      	ldrb	r3, [r1, #1]
 80022fe:	4298      	cmp	r0, r3
 8002300:	f240 82ac 	bls.w	800285c <smart_watch_process+0x73c>
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002304:	784f      	ldrb	r7, [r1, #1]
 8002306:	78cb      	ldrb	r3, [r1, #3]
 8002308:	b2f8      	uxtb	r0, r7
 800230a:	3b01      	subs	r3, #1
 800230c:	429f      	cmp	r7, r3
 800230e:	f280 83fc 	bge.w	8002b0a <smart_watch_process+0x9ea>
 8002312:	78cf      	ldrb	r7, [r1, #3]
 8002314:	f100 0c01 	add.w	ip, r0, #1
			days_elapsed += num_of_days_per_month[i];
 8002318:	4b5c      	ldr	r3, [pc, #368]	@ (800248c <smart_watch_process+0x36c>)
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800231a:	3f01      	subs	r7, #1
			days_elapsed += num_of_days_per_month[i];
 800231c:	5c1a      	ldrb	r2, [r3, r0]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800231e:	45bc      	cmp	ip, r7
 8002320:	da5d      	bge.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002322:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002326:	f100 0c02 	add.w	ip, r0, #2
			days_elapsed += num_of_days_per_month[i];
 800232a:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800232c:	78cf      	ldrb	r7, [r1, #3]
 800232e:	3f01      	subs	r7, #1
 8002330:	45bc      	cmp	ip, r7
 8002332:	da54      	bge.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002334:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002338:	f100 0c03 	add.w	ip, r0, #3
			days_elapsed += num_of_days_per_month[i];
 800233c:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800233e:	78cf      	ldrb	r7, [r1, #3]
 8002340:	3f01      	subs	r7, #1
 8002342:	45bc      	cmp	ip, r7
 8002344:	da4b      	bge.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002346:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800234a:	f100 0c04 	add.w	ip, r0, #4
			days_elapsed += num_of_days_per_month[i];
 800234e:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002350:	78cf      	ldrb	r7, [r1, #3]
 8002352:	3f01      	subs	r7, #1
 8002354:	4567      	cmp	r7, ip
 8002356:	dd42      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002358:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800235c:	f100 0c05 	add.w	ip, r0, #5
			days_elapsed += num_of_days_per_month[i];
 8002360:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002362:	78cf      	ldrb	r7, [r1, #3]
 8002364:	3f01      	subs	r7, #1
 8002366:	4567      	cmp	r7, ip
 8002368:	dd39      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 800236a:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800236e:	f100 0c06 	add.w	ip, r0, #6
			days_elapsed += num_of_days_per_month[i];
 8002372:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002374:	78cf      	ldrb	r7, [r1, #3]
 8002376:	3f01      	subs	r7, #1
 8002378:	4567      	cmp	r7, ip
 800237a:	dd30      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 800237c:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002380:	f100 0c07 	add.w	ip, r0, #7
			days_elapsed += num_of_days_per_month[i];
 8002384:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002386:	78cf      	ldrb	r7, [r1, #3]
 8002388:	3f01      	subs	r7, #1
 800238a:	4567      	cmp	r7, ip
 800238c:	dd27      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 800238e:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002392:	f100 0c08 	add.w	ip, r0, #8
			days_elapsed += num_of_days_per_month[i];
 8002396:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002398:	78cf      	ldrb	r7, [r1, #3]
 800239a:	3f01      	subs	r7, #1
 800239c:	4567      	cmp	r7, ip
 800239e:	dd1e      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 80023a0:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023a4:	f100 0c09 	add.w	ip, r0, #9
			days_elapsed += num_of_days_per_month[i];
 80023a8:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023aa:	78cf      	ldrb	r7, [r1, #3]
 80023ac:	3f01      	subs	r7, #1
 80023ae:	4567      	cmp	r7, ip
 80023b0:	dd15      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 80023b2:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023b6:	f100 0c0a 	add.w	ip, r0, #10
			days_elapsed += num_of_days_per_month[i];
 80023ba:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023bc:	78cf      	ldrb	r7, [r1, #3]
 80023be:	3f01      	subs	r7, #1
			days_elapsed += num_of_days_per_month[i];
 80023c0:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023c2:	4567      	cmp	r7, ip
 80023c4:	dd0b      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 80023c6:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023ca:	300b      	adds	r0, #11
			days_elapsed += num_of_days_per_month[i];
 80023cc:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023ce:	78cf      	ldrb	r7, [r1, #3]
 80023d0:	3f01      	subs	r7, #1
			days_elapsed += num_of_days_per_month[i];
 80023d2:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023d4:	4287      	cmp	r7, r0
 80023d6:	dd02      	ble.n	80023de <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 80023d8:	321f      	adds	r2, #31
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023da:	78c8      	ldrb	r0, [r1, #3]
			days_elapsed += num_of_days_per_month[i];
 80023dc:	b292      	uxth	r2, r2
		days_elapsed += ( time.current_day + num_of_days_per_month[time.first_month-1] - time.first_day );
 80023de:	788f      	ldrb	r7, [r1, #2]
 80023e0:	7848      	ldrb	r0, [r1, #1]
 80023e2:	7809      	ldrb	r1, [r1, #0]
 80023e4:	4403      	add	r3, r0
 80023e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80023ea:	443b      	add	r3, r7
 80023ec:	1a5b      	subs	r3, r3, r1
 80023ee:	441a      	add	r2, r3
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 80023f0:	b293      	uxth	r3, r2
 80023f2:	ee07 3a90 	vmov	s15, r3
	uint32_t hour_offs = ( time_delay_min / 60 );
 80023f6:	4926      	ldr	r1, [pc, #152]	@ (8002490 <smart_watch_process+0x370>)
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80023f8:	7822      	ldrb	r2, [r4, #0]
			if(file_handler(1) != 1)
 80023fa:	2001      	movs	r0, #1
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 80023fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 8002400:	f894 e001 	ldrb.w	lr, [r4, #1]
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 8002404:	4f23      	ldr	r7, [pc, #140]	@ (8002494 <smart_watch_process+0x374>)
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 8002406:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002460 <smart_watch_process+0x340>
 800240a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800240e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002412:	ee17 3a90 	vmov	r3, s15
	uint32_t hour_offs = ( time_delay_min / 60 );
 8002416:	fba1 8c03 	umull	r8, ip, r1, r3
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 800241a:	eb02 125c 	add.w	r2, r2, ip, lsr #5
	uint32_t hour_offs = ( time_delay_min / 60 );
 800241e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	uint32_t min_offs = ( time_delay_min % 60 );
 8002422:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8002426:	eba3 038c 	sub.w	r3, r3, ip, lsl #2
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 800242a:	fba7 c702 	umull	ip, r7, r7, r2
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 800242e:	4473      	add	r3, lr
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 8002430:	08ff      	lsrs	r7, r7, #3
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 8002432:	fba1 c103 	umull	ip, r1, r1, r3
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 8002436:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 800243a:	0949      	lsrs	r1, r1, #5
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 800243c:	eba2 0287 	sub.w	r2, r2, r7, lsl #2
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 8002440:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002444:	e02c      	b.n	80024a0 <smart_watch_process+0x380>
 8002446:	bf00      	nop
 8002448:	00000000 	.word	0x00000000
 800244c:	3f300000 	.word	0x3f300000
 8002450:	66666666 	.word	0x66666666
 8002454:	400a6666 	.word	0x400a6666
 8002458:	063e7064 	.word	0x063e7064
 800245c:	3ff863e7 	.word	0x3ff863e7
 8002460:	a9fbe76d 	.word	0xa9fbe76d
 8002464:	3fd5d2f1 	.word	0x3fd5d2f1
 8002468:	2409fad8 	.word	0x2409fad8
 800246c:	240ac318 	.word	0x240ac318
 8002470:	240ac360 	.word	0x240ac360
 8002474:	58020800 	.word	0x58020800
 8002478:	58020400 	.word	0x58020400
 800247c:	24054ad8 	.word	0x24054ad8
 8002480:	240000c4 	.word	0x240000c4
 8002484:	2400017c 	.word	0x2400017c
 8002488:	24000408 	.word	0x24000408
 800248c:	080104b4 	.word	0x080104b4
 8002490:	88888889 	.word	0x88888889
 8002494:	aaaaaaab 	.word	0xaaaaaaab
 8002498:	24000401 	.word	0x24000401
 800249c:	24000400 	.word	0x24000400
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024a0:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 80024a4:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 80024a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80024ac:	82a3      	strh	r3, [r4, #20]
			if(file_handler(1) != 1)
 80024ae:	f7ff fc05 	bl	8001cbc <file_handler>
 80024b2:	2801      	cmp	r0, #1
 80024b4:	d106      	bne.n	80024c4 <smart_watch_process+0x3a4>
			video.display_ts = video.time.Seconds;
 80024b6:	78a3      	ldrb	r3, [r4, #2]
 80024b8:	63a3      	str	r3, [r4, #56]	@ 0x38
		if(file_handler(0) != 1)
 80024ba:	f7ff fcb9 	bl	8001e30 <file_handler.constprop.0>
 80024be:	2801      	cmp	r0, #1
 80024c0:	f43f ae3b 	beq.w	800213a <smart_watch_process+0x1a>
}
 80024c4:	2000      	movs	r0, #0
 80024c6:	b007      	add	sp, #28
 80024c8:	ecbd 8b06 	vpop	{d8-d10}
 80024cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	4631      	mov	r1, r6
 80024d4:	48c5      	ldr	r0, [pc, #788]	@ (80027ec <smart_watch_process+0x6cc>)
 80024d6:	f7fe f89d 	bl	8000614 <AVI_GetFrame>
	if(video.frameToSkip)
 80024da:	6a22      	ldr	r2, [r4, #32]
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80024dc:	b2c3      	uxtb	r3, r0
 80024de:	75e3      	strb	r3, [r4, #23]
	if(video.frameToSkip)
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d03b      	beq.n	800255c <smart_watch_process+0x43c>
		AVI_Handel.CurrentImage++;
 80024e4:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
		video.frameToSkip--;
 80024e6:	3a01      	subs	r2, #1
		video.frameCount++;
 80024e8:	69e3      	ldr	r3, [r4, #28]
		AVI_Handel.CurrentImage++;
 80024ea:	3101      	adds	r1, #1
		video.frameToSkip--;
 80024ec:	6222      	str	r2, [r4, #32]
		video.frameCount++;
 80024ee:	3301      	adds	r3, #1
		AVI_Handel.CurrentImage++;
 80024f0:	62e9      	str	r1, [r5, #44]	@ 0x2c
		video.frameCount++;
 80024f2:	61e3      	str	r3, [r4, #28]
	if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 80024f4:	2102      	movs	r1, #2
 80024f6:	48be      	ldr	r0, [pc, #760]	@ (80027f0 <smart_watch_process+0x6d0>)
 80024f8:	f004 f806 	bl	8006508 <HAL_GPIO_ReadPin>
 80024fc:	4607      	mov	r7, r0
 80024fe:	2800      	cmp	r0, #0
 8002500:	f040 819a 	bne.w	8002838 <smart_watch_process+0x718>
		count++;
 8002504:	4abb      	ldr	r2, [pc, #748]	@ (80027f4 <smart_watch_process+0x6d4>)
 8002506:	8813      	ldrh	r3, [r2, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	b29b      	uxth	r3, r3
	if(count >= RESET_ITER_NUM)
 800250c:	2b1d      	cmp	r3, #29
 800250e:	f240 8230 	bls.w	8002972 <smart_watch_process+0x852>
		count = 0;
 8002512:	8010      	strh	r0, [r2, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002514:	2006      	movs	r0, #6
 8002516:	f001 ffd5 	bl	80044c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800251a:	2007      	movs	r0, #7
 800251c:	f001 ffd2 	bl	80044c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8002520:	2008      	movs	r0, #8
 8002522:	f001 ffcf 	bl	80044c4 <HAL_NVIC_DisableIRQ>
		HAL_Delay(300);
 8002526:	f44f 7096 	mov.w	r0, #300	@ 0x12c
		video.video_mode = SETTING_MODE;
 800252a:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
		HAL_Delay(300);
 800252e:	f000 ffe5 	bl	80034fc <HAL_Delay>
	video.frame_time = 0.0;
 8002532:	2300      	movs	r3, #0
	video.display_status = DISPLAY_ON;
 8002534:	2001      	movs	r0, #1
	video.time.Hours = 0;
 8002536:	8027      	strh	r7, [r4, #0]
	video.frame_time = 0.0;
 8002538:	6263      	str	r3, [r4, #36]	@ 0x24
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800253a:	4baf      	ldr	r3, [pc, #700]	@ (80027f8 <smart_watch_process+0x6d8>)
	video.time.Seconds = 0;
 800253c:	70a7      	strb	r7, [r4, #2]
	video.file_idx = 0;
 800253e:	82a7      	strh	r7, [r4, #20]
	video.FrameType = 0;
 8002540:	75e7      	strb	r7, [r4, #23]
	video.frameToSkip = 0;
 8002542:	6227      	str	r7, [r4, #32]
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002544:	6323      	str	r3, [r4, #48]	@ 0x30
	video.display_ts = video.time.Seconds;
 8002546:	63a7      	str	r7, [r4, #56]	@ 0x38
	video.frameCount = 0;
 8002548:	61e7      	str	r7, [r4, #28]
	video.display_status = DISPLAY_ON;
 800254a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
	video.set = SET_IDLE;
 800254e:	f884 7035 	strb.w	r7, [r4, #53]	@ 0x35
	video.tick_offset = 0;
 8002552:	e9c4 770a 	strd	r7, r7, [r4, #40]	@ 0x28
		file_handler(1);
 8002556:	f7ff fbb1 	bl	8001cbc <file_handler>
 800255a:	e617      	b.n	800218c <smart_watch_process+0x6c>
	else if(video.FrameType == AVI_VIDEO_FRAME)
 800255c:	2b01      	cmp	r3, #1
 800255e:	d1c9      	bne.n	80024f4 <smart_watch_process+0x3d4>
		AVI_Handel.CurrentImage++;
 8002560:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
		video.frameCount++;
 8002562:	69e3      	ldr	r3, [r4, #28]
		AVI_Handel.CurrentImage++;
 8002564:	3201      	adds	r2, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8002566:	49a5      	ldr	r1, [pc, #660]	@ (80027fc <smart_watch_process+0x6dc>)
		video.frameCount++;
 8002568:	3301      	adds	r3, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 800256a:	48a5      	ldr	r0, [pc, #660]	@ (8002800 <smart_watch_process+0x6e0>)
		AVI_Handel.CurrentImage++;
 800256c:	62ea      	str	r2, [r5, #44]	@ 0x2c
		video.frameCount++;
 800256e:	61e3      	str	r3, [r4, #28]
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8002570:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8002572:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002574:	f7ff f88a 	bl	800168c <JPEG_Decode_DMA>
 8002578:	2801      	cmp	r0, #1
 800257a:	d1a3      	bne.n	80024c4 <smart_watch_process+0x3a4>
 800257c:	4fa1      	ldr	r7, [pc, #644]	@ (8002804 <smart_watch_process+0x6e4>)
 800257e:	48a2      	ldr	r0, [pc, #648]	@ (8002808 <smart_watch_process+0x6e8>)
 8002580:	683b      	ldr	r3, [r7, #0]
			if(count_iter >= MAX_ITERATIONS_NUM)
 8002582:	49a2      	ldr	r1, [pc, #648]	@ (800280c <smart_watch_process+0x6ec>)
 8002584:	e002      	b.n	800258c <smart_watch_process+0x46c>
 8002586:	428b      	cmp	r3, r1
 8002588:	f200 82b6 	bhi.w	8002af8 <smart_watch_process+0x9d8>
		while(Jpeg_HWDecodingEnd == 0)
 800258c:	6802      	ldr	r2, [r0, #0]
			count_iter++;
 800258e:	3301      	adds	r3, #1
		while(Jpeg_HWDecodingEnd == 0)
 8002590:	2a00      	cmp	r2, #0
 8002592:	d0f8      	beq.n	8002586 <smart_watch_process+0x466>
		if(video.isfirstFrame == 1)
 8002594:	f894 a016 	ldrb.w	sl, [r4, #22]
		count_iter = 0;
 8002598:	f04f 0900 	mov.w	r9, #0
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800259c:	f8df 828c 	ldr.w	r8, [pc, #652]	@ 800282c <smart_watch_process+0x70c>
		if(video.isfirstFrame == 1)
 80025a0:	f1ba 0f01 	cmp.w	sl, #1
		count_iter = 0;
 80025a4:	f8c7 9000 	str.w	r9, [r7]
		if(video.isfirstFrame == 1)
 80025a8:	f000 82c0 	beq.w	8002b2c <smart_watch_process+0xa0c>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80025ac:	f8df a280 	ldr.w	sl, [pc, #640]	@ 8002830 <smart_watch_process+0x710>
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	4896      	ldr	r0, [pc, #600]	@ (8002810 <smart_watch_process+0x6f0>)
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80025b6:	f8d4 b030 	ldr.w	fp, [r4, #48]	@ 0x30
 80025ba:	e9d8 9302 	ldrd	r9, r3, [r8, #8]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 80025be:	f1c9 02f0 	rsb	r2, r9, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 80025c2:	f1c3 08f0 	rsb	r8, r3, #240	@ 0xf0
 80025c6:	9303      	str	r3, [sp, #12]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 80025c8:	0852      	lsrs	r2, r2, #1
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 80025ca:	ea4f 0858 	mov.w	r8, r8, lsr #1
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80025ce:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80025d2:	eb08 1802 	add.w	r8, r8, r2, lsl #4
 80025d6:	f8da 2000 	ldr.w	r2, [sl]
 80025da:	eb02 0888 	add.w	r8, r2, r8, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80025de:	f003 fc85 	bl	8005eec <HAL_DMA2D_PollForTransfer>
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 80025e2:	9b03      	ldr	r3, [sp, #12]
 80025e4:	fa1f f289 	uxth.w	r2, r9
 80025e8:	4659      	mov	r1, fp
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4888      	ldr	r0, [pc, #544]	@ (8002810 <smart_watch_process+0x6f0>)
 80025ee:	9200      	str	r2, [sp, #0]
 80025f0:	4642      	mov	r2, r8
 80025f2:	f003 fc1f 	bl	8005e34 <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 80025f6:	8b22      	ldrh	r2, [r4, #24]
 80025f8:	8b63      	ldrh	r3, [r4, #26]
		pOut.u8Arr = (uint8_t *)outputData;
 80025fa:	f8da 8000 	ldr.w	r8, [sl]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 80025fe:	fb12 f203 	smulbb	r2, r2, r3
 8002602:	b292      	uxth	r2, r2
	for( ; i < length ; i++)
 8002604:	b1ca      	cbz	r2, 800263a <smart_watch_process+0x51a>
 8002606:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 800260a:	4640      	mov	r0, r8
 800260c:	4641      	mov	r1, r8
		pxArr->u16Arr[i] = color565(r, g, b);
 800260e:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8002834 <smart_watch_process+0x714>
 8002612:	f891 e001 	ldrb.w	lr, [r1, #1]
 8002616:	788b      	ldrb	r3, [r1, #2]
 8002618:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800261c:	ea0c 2303 	and.w	r3, ip, r3, lsl #8
 8002620:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8002624:	ea43 030e 	orr.w	r3, r3, lr
 8002628:	f811 eb03 	ldrb.w	lr, [r1], #3
 800262c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8002630:	ba5b      	rev16	r3, r3
 8002632:	f820 3b02 	strh.w	r3, [r0], #2
	for( ; i < length ; i++)
 8002636:	4282      	cmp	r2, r0
 8002638:	d1eb      	bne.n	8002612 <smart_watch_process+0x4f2>
 800263a:	f10d 0910 	add.w	r9, sp, #16
       frame.start.X = 0;
 800263e:	f04f 0b00 	mov.w	fp, #0
 8002642:	e005      	b.n	8002650 <smart_watch_process+0x530>
			count_iter++;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3301      	adds	r3, #1
			if(count_iter >= MAX_ATTEMPTS_NUM)
 8002648:	2b09      	cmp	r3, #9
			count_iter++;
 800264a:	603b      	str	r3, [r7, #0]
			if(count_iter >= MAX_ATTEMPTS_NUM)
 800264c:	f63f af3a 	bhi.w	80024c4 <smart_watch_process+0x3a4>
       frame.start.X = 0;
 8002650:	f04f 13ef 	mov.w	r3, #15663343	@ 0xef00ef
 8002654:	f8cd b010 	str.w	fp, [sp, #16]
 8002658:	9305      	str	r3, [sp, #20]
	   GC9A01_set_frame(frame);
 800265a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800265e:	f7fe ff95 	bl	800158c <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8002662:	202c      	movs	r0, #44	@ 0x2c
 8002664:	f7fe fa8a 	bl	8000b7c <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002668:	2001      	movs	r0, #1
 800266a:	f7fe fa51 	bl	8000b10 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 800266e:	2000      	movs	r0, #0
 8002670:	f7fe fa66 	bl	8000b40 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 8002674:	2201      	movs	r2, #1
 8002676:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800267a:	4640      	mov	r0, r8
 800267c:	f7fe ffda 	bl	8001634 <GC9A01_spi_tx>
	   if(ret != 1)
 8002680:	2801      	cmp	r0, #1
 8002682:	d1df      	bne.n	8002644 <smart_watch_process+0x524>
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 8002684:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002688:	2200      	movs	r2, #0
 800268a:	eb08 0001 	add.w	r0, r8, r1
 800268e:	f7fe ffd1 	bl	8001634 <GC9A01_spi_tx>
		while(lcd_draw(pOut.u8Arr) != 1)
 8002692:	2801      	cmp	r0, #1
 8002694:	d1d6      	bne.n	8002644 <smart_watch_process+0x524>
		if(video.isfirstFrame == 1)
 8002696:	7da3      	ldrb	r3, [r4, #22]
		count_iter = 0;
 8002698:	f8c7 b000 	str.w	fp, [r7]
		if(video.isfirstFrame == 1)
 800269c:	2b01      	cmp	r3, #1
 800269e:	f000 8272 	beq.w	8002b86 <smart_watch_process+0xa66>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 80026a2:	f8da 1000 	ldr.w	r1, [sl]
 80026a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002814 <smart_watch_process+0x6f4>)
 80026a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002818 <smart_watch_process+0x6f8>)
 80026aa:	4291      	cmp	r1, r2
 80026ac:	bf18      	it	ne
 80026ae:	4613      	movne	r3, r2
 80026b0:	f8ca 3000 	str.w	r3, [sl]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 80026b4:	f000 ff1c 	bl	80034f0 <HAL_GetTick>
 80026b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
		float watch_time = ( video.frameCount * video.frame_time );
 80026ba:	ed94 7a07 	vldr	s14, [r4, #28]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 80026be:	1ac0      	subs	r0, r0, r3
		float watch_time = ( video.frameCount * video.frame_time );
 80026c0:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 80026c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		int time_diff = ( video.actual_time - watch_time );
 80026c8:	ee07 0a90 	vmov	s15, r0
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 80026cc:	62a0      	str	r0, [r4, #40]	@ 0x28
		int time_diff = ( video.actual_time - watch_time );
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	eee7 7a66 	vfms.f32	s15, s14, s13
 80026d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		video.frameToSkip = ( time_diff / video.frame_time );
 80026da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		int time_diff = ( video.actual_time - watch_time );
 80026de:	ee17 0a90 	vmov	r0, s15
		if(time_diff < 0)
 80026e2:	2800      	cmp	r0, #0
		video.frameToSkip = ( time_diff / video.frame_time );
 80026e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ec:	edc4 7a08 	vstr	s15, [r4, #32]
		if(time_diff < 0)
 80026f0:	f2c0 8243 	blt.w	8002b7a <smart_watch_process+0xa5a>
		RTC_DateTypeDef sDate = {0};
 80026f4:	2700      	movs	r7, #0
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80026f6:	4949      	ldr	r1, [pc, #292]	@ (800281c <smart_watch_process+0x6fc>)
 80026f8:	4849      	ldr	r0, [pc, #292]	@ (8002820 <smart_watch_process+0x700>)
 80026fa:	463a      	mov	r2, r7
		RTC_DateTypeDef sDate = {0};
 80026fc:	9704      	str	r7, [sp, #16]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80026fe:	f008 fc15 	bl	800af2c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002702:	463a      	mov	r2, r7
 8002704:	4649      	mov	r1, r9
 8002706:	4846      	ldr	r0, [pc, #280]	@ (8002820 <smart_watch_process+0x700>)
 8002708:	f008 fc4c 	bl	800afa4 <HAL_RTC_GetDate>
 800270c:	e6f2      	b.n	80024f4 <smart_watch_process+0x3d4>
			if(file_handler(1) != 1)
 800270e:	f7ff fad5 	bl	8001cbc <file_handler>
 8002712:	2801      	cmp	r0, #1
 8002714:	f47f aed6 	bne.w	80024c4 <smart_watch_process+0x3a4>
			video.video_mode = NORMAL_MODE;
 8002718:	86a0      	strh	r0, [r4, #52]	@ 0x34
			break;
 800271a:	e52e      	b.n	800217a <smart_watch_process+0x5a>
			if(show_frame(0) != 1)
 800271c:	f7ff fbf2 	bl	8001f04 <show_frame.constprop.0>
 8002720:	2801      	cmp	r0, #1
 8002722:	f47f aecf 	bne.w	80024c4 <smart_watch_process+0x3a4>
			if(btn_status == BTN_PLUS)
 8002726:	4f3f      	ldr	r7, [pc, #252]	@ (8002824 <smart_watch_process+0x704>)
 8002728:	f897 9000 	ldrb.w	r9, [r7]
 800272c:	f1b9 0f01 	cmp.w	r9, #1
 8002730:	f000 8155 	beq.w	80029de <smart_watch_process+0x8be>
			if(btn_status == BTN_MINUS)
 8002734:	f1b9 0f03 	cmp.w	r9, #3
 8002738:	f000 8124 	beq.w	8002984 <smart_watch_process+0x864>
			if(btn_status == BTN_SET)
 800273c:	f1b9 0f02 	cmp.w	r9, #2
 8002740:	f47f ad1b 	bne.w	800217a <smart_watch_process+0x5a>
				btn_status = BTN_NONE;
 8002744:	f04f 0800 	mov.w	r8, #0
				HAL_Delay(300);
 8002748:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 800274c:	f887 8000 	strb.w	r8, [r7]
				HAL_Delay(300);
 8002750:	f000 fed4 	bl	80034fc <HAL_Delay>
}

static void clear_btn_int(void)
{

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002754:	2006      	movs	r0, #6
 8002756:	f001 feef 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 800275a:	2007      	movs	r0, #7
 800275c:	f001 feec 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002760:	2008      	movs	r0, #8
 8002762:	f001 fee9 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
				video.file_idx += video.time.Minutes;
 8002766:	8aa2      	ldrh	r2, [r4, #20]
 8002768:	7863      	ldrb	r3, [r4, #1]
				HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800276a:	492c      	ldr	r1, [pc, #176]	@ (800281c <smart_watch_process+0x6fc>)
				video.file_idx += video.time.Minutes;
 800276c:	4413      	add	r3, r2
				HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800276e:	482c      	ldr	r0, [pc, #176]	@ (8002820 <smart_watch_process+0x700>)
 8002770:	4642      	mov	r2, r8
				video.file_idx += video.time.Minutes;
 8002772:	82a3      	strh	r3, [r4, #20]
				HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002774:	f008 fd06 	bl	800b184 <HAL_RTC_SetTime>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002778:	4642      	mov	r2, r8
 800277a:	a904      	add	r1, sp, #16
 800277c:	4828      	ldr	r0, [pc, #160]	@ (8002820 <smart_watch_process+0x700>)
				RTC_DateTypeDef sDate = {0};
 800277e:	f8cd 8010 	str.w	r8, [sp, #16]
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002782:	f008 fc0f 	bl	800afa4 <HAL_RTC_GetDate>
				time.first_day = sDate.Date;
 8002786:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <smart_watch_process+0x708>)
 8002788:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800278c:	701a      	strb	r2, [r3, #0]
				time.first_month = sDate.Month;
 800278e:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002792:	705a      	strb	r2, [r3, #1]
				video.isfirstFrame = 1;
 8002794:	2201      	movs	r2, #1
				video.set = SET_START;
 8002796:	2303      	movs	r3, #3
				video.isfirstFrame = 1;
 8002798:	75a2      	strb	r2, [r4, #22]
				video.set = SET_START;
 800279a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 800279e:	e4ec      	b.n	800217a <smart_watch_process+0x5a>
			if(show_frame(0) != 1)
 80027a0:	f7ff fbb0 	bl	8001f04 <show_frame.constprop.0>
 80027a4:	2801      	cmp	r0, #1
 80027a6:	f47f ae8d 	bne.w	80024c4 <smart_watch_process+0x3a4>
			if(btn_status == BTN_PLUS)
 80027aa:	4f1e      	ldr	r7, [pc, #120]	@ (8002824 <smart_watch_process+0x704>)
 80027ac:	f897 9000 	ldrb.w	r9, [r7]
 80027b0:	f1b9 0f01 	cmp.w	r9, #1
 80027b4:	f000 8147 	beq.w	8002a46 <smart_watch_process+0x926>
			if(btn_status == BTN_MINUS)
 80027b8:	f1b9 0f03 	cmp.w	r9, #3
 80027bc:	f000 8174 	beq.w	8002aa8 <smart_watch_process+0x988>
			if(btn_status == BTN_SET)
 80027c0:	f1b9 0f02 	cmp.w	r9, #2
 80027c4:	f47f acd9 	bne.w	800217a <smart_watch_process+0x5a>
				btn_status = BTN_NONE;
 80027c8:	2300      	movs	r3, #0
				HAL_Delay(300);
 80027ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80027ce:	703b      	strb	r3, [r7, #0]
				HAL_Delay(300);
 80027d0:	f000 fe94 	bl	80034fc <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80027d4:	2006      	movs	r0, #6
 80027d6:	f001 feaf 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80027da:	2007      	movs	r0, #7
 80027dc:	f001 feac 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80027e0:	2008      	movs	r0, #8
 80027e2:	f001 fea9 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
				video.set = SET_MINUTES;
 80027e6:	f884 9035 	strb.w	r9, [r4, #53]	@ 0x35
 80027ea:	e4c6      	b.n	800217a <smart_watch_process+0x5a>
 80027ec:	240ac318 	.word	0x240ac318
 80027f0:	58020800 	.word	0x58020800
 80027f4:	240003f4 	.word	0x240003f4
 80027f8:	24054ad8 	.word	0x24054ad8
 80027fc:	2409fb18 	.word	0x2409fb18
 8002800:	24000220 	.word	0x24000220
 8002804:	240003f8 	.word	0x240003f8
 8002808:	240000a8 	.word	0x240000a8
 800280c:	000f423f 	.word	0x000f423f
 8002810:	240001b8 	.word	0x240001b8
 8002814:	2402a774 	.word	0x2402a774
 8002818:	24000410 	.word	0x24000410
 800281c:	2409fad8 	.word	0x2409fad8
 8002820:	2400017c 	.word	0x2400017c
 8002824:	240ac7ce 	.word	0x240ac7ce
 8002828:	24000408 	.word	0x24000408
 800282c:	240001a4 	.word	0x240001a4
 8002830:	24000004 	.word	0x24000004
 8002834:	fffff800 	.word	0xfffff800
 8002838:	4bb5      	ldr	r3, [pc, #724]	@ (8002b10 <smart_watch_process+0x9f0>)
 800283a:	2200      	movs	r2, #0
 800283c:	801a      	strh	r2, [r3, #0]
	if(count >= RESET_ITER_NUM)
 800283e:	e4a5      	b.n	800218c <smart_watch_process+0x6c>
	HAL_Delay(1000);
 8002840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002844:	f000 fe5a 	bl	80034fc <HAL_Delay>
	if(!HAL_GPIO_ReadPin(FXLS8974CF_INT_Port, FXLS8974CF_INT_Pin))
 8002848:	2120      	movs	r1, #32
 800284a:	48b2      	ldr	r0, [pc, #712]	@ (8002b14 <smart_watch_process+0x9f4>)
 800284c:	f003 fe5c 	bl	8006508 <HAL_GPIO_ReadPin>
 8002850:	fab0 f380 	clz	r3, r0
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	f889 3000 	strb.w	r3, [r9]
	for(int i = 0 ; i < 30 ; i++)
 800285a:	e4f8      	b.n	800224e <smart_watch_process+0x12e>
	else if(time.current_month < time.first_month)
 800285c:	78c8      	ldrb	r0, [r1, #3]
 800285e:	784b      	ldrb	r3, [r1, #1]
 8002860:	4298      	cmp	r0, r3
 8002862:	f080 8088 	bcs.w	8002976 <smart_watch_process+0x856>
		for(int i = time.first_month ; i < 12 ; i++)
 8002866:	784b      	ldrb	r3, [r1, #1]
 8002868:	2b0b      	cmp	r3, #11
 800286a:	b2d8      	uxtb	r0, r3
 800286c:	f300 81a6 	bgt.w	8002bbc <smart_watch_process+0xa9c>
			days_elapsed += num_of_days_per_month[i];
 8002870:	4ba9      	ldr	r3, [pc, #676]	@ (8002b18 <smart_watch_process+0x9f8>)
		for(int i = time.first_month ; i < 12 ; i++)
 8002872:	280b      	cmp	r0, #11
 8002874:	f100 0701 	add.w	r7, r0, #1
			days_elapsed += num_of_days_per_month[i];
 8002878:	5c1a      	ldrb	r2, [r3, r0]
		for(int i = time.first_month ; i < 12 ; i++)
 800287a:	d03c      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 800287c:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 800287e:	280a      	cmp	r0, #10
			days_elapsed += num_of_days_per_month[i];
 8002880:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 8002882:	f100 0702 	add.w	r7, r0, #2
 8002886:	d036      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002888:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 800288a:	2809      	cmp	r0, #9
			days_elapsed += num_of_days_per_month[i];
 800288c:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 800288e:	f100 0703 	add.w	r7, r0, #3
 8002892:	d030      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002894:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 8002896:	2808      	cmp	r0, #8
			days_elapsed += num_of_days_per_month[i];
 8002898:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 800289a:	f100 0704 	add.w	r7, r0, #4
 800289e:	d02a      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028a0:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 80028a2:	2807      	cmp	r0, #7
			days_elapsed += num_of_days_per_month[i];
 80028a4:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 80028a6:	f100 0705 	add.w	r7, r0, #5
 80028aa:	d024      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028ac:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 80028ae:	2806      	cmp	r0, #6
			days_elapsed += num_of_days_per_month[i];
 80028b0:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 80028b2:	f100 0706 	add.w	r7, r0, #6
 80028b6:	d01e      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028b8:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 80028ba:	2805      	cmp	r0, #5
			days_elapsed += num_of_days_per_month[i];
 80028bc:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 80028be:	f100 0707 	add.w	r7, r0, #7
 80028c2:	d018      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028c4:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 80028c6:	2804      	cmp	r0, #4
			days_elapsed += num_of_days_per_month[i];
 80028c8:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 80028ca:	f100 0708 	add.w	r7, r0, #8
 80028ce:	d012      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028d0:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 80028d2:	2803      	cmp	r0, #3
			days_elapsed += num_of_days_per_month[i];
 80028d4:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 80028d6:	f100 0709 	add.w	r7, r0, #9
 80028da:	d00c      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028dc:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 80028de:	2802      	cmp	r0, #2
			days_elapsed += num_of_days_per_month[i];
 80028e0:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 80028e2:	f100 070a 	add.w	r7, r0, #10
			days_elapsed += num_of_days_per_month[i];
 80028e6:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < 12 ; i++)
 80028e8:	d005      	beq.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028ea:	5ddf      	ldrb	r7, [r3, r7]
 80028ec:	443a      	add	r2, r7
 80028ee:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < 12 ; i++)
 80028f0:	b908      	cbnz	r0, 80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 80028f2:	321f      	adds	r2, #31
 80028f4:	b292      	uxth	r2, r2
		for(int i = 0 ; i < ( time.current_month - 1 ) ; i++)
 80028f6:	78c8      	ldrb	r0, [r1, #3]
 80028f8:	2801      	cmp	r0, #1
 80028fa:	d92f      	bls.n	800295c <smart_watch_process+0x83c>
 80028fc:	78c8      	ldrb	r0, [r1, #3]
 80028fe:	2802      	cmp	r0, #2
 8002900:	f240 816e 	bls.w	8002be0 <smart_watch_process+0xac0>
 8002904:	78c8      	ldrb	r0, [r1, #3]
 8002906:	2803      	cmp	r0, #3
 8002908:	f240 8167 	bls.w	8002bda <smart_watch_process+0xaba>
 800290c:	78c8      	ldrb	r0, [r1, #3]
 800290e:	2804      	cmp	r0, #4
 8002910:	f240 8160 	bls.w	8002bd4 <smart_watch_process+0xab4>
 8002914:	78c8      	ldrb	r0, [r1, #3]
 8002916:	2805      	cmp	r0, #5
 8002918:	f240 8159 	bls.w	8002bce <smart_watch_process+0xaae>
 800291c:	78c8      	ldrb	r0, [r1, #3]
 800291e:	2806      	cmp	r0, #6
 8002920:	f240 8152 	bls.w	8002bc8 <smart_watch_process+0xaa8>
 8002924:	78c8      	ldrb	r0, [r1, #3]
 8002926:	2807      	cmp	r0, #7
 8002928:	f240 814b 	bls.w	8002bc2 <smart_watch_process+0xaa2>
 800292c:	78c8      	ldrb	r0, [r1, #3]
 800292e:	2808      	cmp	r0, #8
 8002930:	f240 8141 	bls.w	8002bb6 <smart_watch_process+0xa96>
 8002934:	78c8      	ldrb	r0, [r1, #3]
 8002936:	2809      	cmp	r0, #9
 8002938:	f240 813a 	bls.w	8002bb0 <smart_watch_process+0xa90>
 800293c:	78c8      	ldrb	r0, [r1, #3]
 800293e:	280a      	cmp	r0, #10
 8002940:	f240 8132 	bls.w	8002ba8 <smart_watch_process+0xa88>
 8002944:	78c8      	ldrb	r0, [r1, #3]
 8002946:	280b      	cmp	r0, #11
 8002948:	f240 812a 	bls.w	8002ba0 <smart_watch_process+0xa80>
 800294c:	78c8      	ldrb	r0, [r1, #3]
 800294e:	280c      	cmp	r0, #12
 8002950:	f240 8122 	bls.w	8002b98 <smart_watch_process+0xa78>
			days_elapsed += num_of_days_per_month[i];
 8002954:	f202 126d 	addw	r2, r2, #365	@ 0x16d
		for(int i = 0 ; i < ( time.current_month - 1 ) ; i++)
 8002958:	78c8      	ldrb	r0, [r1, #3]
			days_elapsed += num_of_days_per_month[i];
 800295a:	b292      	uxth	r2, r2
		days_elapsed += ( time.current_day + num_of_days_per_month[time.first_month-1] - time.first_day );
 800295c:	7888      	ldrb	r0, [r1, #2]
 800295e:	784f      	ldrb	r7, [r1, #1]
 8002960:	7809      	ldrb	r1, [r1, #0]
 8002962:	443b      	add	r3, r7
 8002964:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002968:	4403      	add	r3, r0
 800296a:	1a5b      	subs	r3, r3, r1
 800296c:	441a      	add	r2, r3
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 800296e:	b293      	uxth	r3, r2
 8002970:	e53f      	b.n	80023f2 <smart_watch_process+0x2d2>
 8002972:	8013      	strh	r3, [r2, #0]
 8002974:	e40a      	b.n	800218c <smart_watch_process+0x6c>
		days_elapsed += abs(time.current_day - time.first_day);
 8002976:	788b      	ldrb	r3, [r1, #2]
 8002978:	780a      	ldrb	r2, [r1, #0]
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	bfb8      	it	lt
 8002980:	425b      	neglt	r3, r3
 8002982:	e536      	b.n	80023f2 <smart_watch_process+0x2d2>
				btn_status = BTN_NONE;
 8002984:	2300      	movs	r3, #0
				HAL_Delay(300);
 8002986:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 800298a:	703b      	strb	r3, [r7, #0]
				HAL_Delay(300);
 800298c:	f000 fdb6 	bl	80034fc <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002990:	2006      	movs	r0, #6
 8002992:	f001 fdd1 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002996:	2007      	movs	r0, #7
 8002998:	f001 fdce 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800299c:	2008      	movs	r0, #8
 800299e:	f001 fdcb 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Minutes > 0)
 80029a2:	7863      	ldrb	r3, [r4, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80ad 	beq.w	8002b04 <smart_watch_process+0x9e4>
					video.time.Minutes--;
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b2db      	uxtb	r3, r3
				video.file_idx += video.time.Minutes;
 80029ae:	461a      	mov	r2, r3
 80029b0:	7063      	strb	r3, [r4, #1]
				if(file_handler(1) != 1)
 80029b2:	2001      	movs	r0, #1
				video.file_idx += video.time.Minutes;
 80029b4:	8aa3      	ldrh	r3, [r4, #20]
 80029b6:	441a      	add	r2, r3
 80029b8:	82a2      	strh	r2, [r4, #20]
				if(file_handler(1) != 1)
 80029ba:	f7ff f97f 	bl	8001cbc <file_handler>
 80029be:	2801      	cmp	r0, #1
 80029c0:	f47f ad80 	bne.w	80024c4 <smart_watch_process+0x3a4>
				video.file_idx -= video.time.Minutes;
 80029c4:	7862      	ldrb	r2, [r4, #1]
 80029c6:	8aa3      	ldrh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80029c8:	4954      	ldr	r1, [pc, #336]	@ (8002b1c <smart_watch_process+0x9fc>)
				video.file_idx -= video.time.Minutes;
 80029ca:	1a9b      	subs	r3, r3, r2
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80029cc:	4854      	ldr	r0, [pc, #336]	@ (8002b20 <smart_watch_process+0xa00>)
 80029ce:	2200      	movs	r2, #0
				video.file_idx -= video.time.Minutes;
 80029d0:	82a3      	strh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80029d2:	f7fd fe1f 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_SET)
 80029d6:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80029da:	75e0      	strb	r0, [r4, #23]
 80029dc:	e6ae      	b.n	800273c <smart_watch_process+0x61c>
				btn_status = BTN_NONE;
 80029de:	f04f 0800 	mov.w	r8, #0
				HAL_Delay(300);
 80029e2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80029e6:	f887 8000 	strb.w	r8, [r7]
				HAL_Delay(300);
 80029ea:	f000 fd87 	bl	80034fc <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80029ee:	2006      	movs	r0, #6
 80029f0:	f001 fda2 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80029f4:	2007      	movs	r0, #7
 80029f6:	f001 fd9f 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80029fa:	2008      	movs	r0, #8
 80029fc:	f001 fd9c 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
				video.time.Minutes++;
 8002a00:	7863      	ldrb	r3, [r4, #1]
				video.time.Minutes %= 60;
 8002a02:	4a48      	ldr	r2, [pc, #288]	@ (8002b24 <smart_watch_process+0xa04>)
				if(file_handler(1) != 1)
 8002a04:	4648      	mov	r0, r9
				video.time.Minutes++;
 8002a06:	3301      	adds	r3, #1
				video.time.Minutes %= 60;
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	fba2 1203 	umull	r1, r2, r2, r3
 8002a0e:	0952      	lsrs	r2, r2, #5
 8002a10:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002a14:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
				video.file_idx += video.time.Minutes;
 8002a18:	8aa2      	ldrh	r2, [r4, #20]
				video.time.Minutes %= 60;
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	7063      	strb	r3, [r4, #1]
				video.file_idx += video.time.Minutes;
 8002a1e:	4413      	add	r3, r2
 8002a20:	82a3      	strh	r3, [r4, #20]
				if(file_handler(1) != 1)
 8002a22:	f7ff f94b 	bl	8001cbc <file_handler>
 8002a26:	2801      	cmp	r0, #1
 8002a28:	f47f ad4c 	bne.w	80024c4 <smart_watch_process+0x3a4>
				video.file_idx -= video.time.Minutes;
 8002a2c:	8aa3      	ldrh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a2e:	4642      	mov	r2, r8
				video.file_idx -= video.time.Minutes;
 8002a30:	7861      	ldrb	r1, [r4, #1]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a32:	483b      	ldr	r0, [pc, #236]	@ (8002b20 <smart_watch_process+0xa00>)
				video.file_idx -= video.time.Minutes;
 8002a34:	1a5b      	subs	r3, r3, r1
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a36:	4939      	ldr	r1, [pc, #228]	@ (8002b1c <smart_watch_process+0x9fc>)
				video.file_idx -= video.time.Minutes;
 8002a38:	82a3      	strh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a3a:	f7fd fdeb 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_MINUS)
 8002a3e:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a42:	75e0      	strb	r0, [r4, #23]
 8002a44:	e676      	b.n	8002734 <smart_watch_process+0x614>
				btn_status = BTN_NONE;
 8002a46:	f04f 0800 	mov.w	r8, #0
				HAL_Delay(300);
 8002a4a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8002a4e:	f887 8000 	strb.w	r8, [r7]
				HAL_Delay(300);
 8002a52:	f000 fd53 	bl	80034fc <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002a56:	2006      	movs	r0, #6
 8002a58:	f001 fd6e 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002a5c:	2007      	movs	r0, #7
 8002a5e:	f001 fd6b 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002a62:	2008      	movs	r0, #8
 8002a64:	f001 fd68 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
				video.time.Hours++;
 8002a68:	7823      	ldrb	r3, [r4, #0]
				video.time.Hours %= 12;
 8002a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b28 <smart_watch_process+0xa08>)
				if(file_handler(1) != 1)
 8002a6c:	4648      	mov	r0, r9
				video.time.Hours++;
 8002a6e:	3301      	adds	r3, #1
				video.time.Hours %= 12;
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	fba2 1203 	umull	r1, r2, r2, r3
 8002a76:	08d2      	lsrs	r2, r2, #3
 8002a78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a7c:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8002a84:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	82a3      	strh	r3, [r4, #20]
				if(file_handler(1) != 1)
 8002a8c:	f7ff f916 	bl	8001cbc <file_handler>
 8002a90:	2801      	cmp	r0, #1
 8002a92:	f47f ad17 	bne.w	80024c4 <smart_watch_process+0x3a4>
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a96:	4642      	mov	r2, r8
 8002a98:	4920      	ldr	r1, [pc, #128]	@ (8002b1c <smart_watch_process+0x9fc>)
 8002a9a:	4821      	ldr	r0, [pc, #132]	@ (8002b20 <smart_watch_process+0xa00>)
 8002a9c:	f7fd fdba 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_MINUS)
 8002aa0:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002aa4:	75e0      	strb	r0, [r4, #23]
 8002aa6:	e687      	b.n	80027b8 <smart_watch_process+0x698>
				btn_status = BTN_NONE;
 8002aa8:	2300      	movs	r3, #0
				HAL_Delay(300);
 8002aaa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8002aae:	703b      	strb	r3, [r7, #0]
				HAL_Delay(300);
 8002ab0:	f000 fd24 	bl	80034fc <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002ab4:	2006      	movs	r0, #6
 8002ab6:	f001 fd3f 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002aba:	2007      	movs	r0, #7
 8002abc:	f001 fd3c 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002ac0:	2008      	movs	r0, #8
 8002ac2:	f001 fd39 	bl	8004538 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Hours > 0)
 8002ac6:	7823      	ldrb	r3, [r4, #0]
 8002ac8:	b1c3      	cbz	r3, 8002afc <smart_watch_process+0x9dc>
					video.time.Hours--;
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b2db      	uxtb	r3, r3
				video.file_idx = ( video.time.Hours * 60 );
 8002ace:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	b292      	uxth	r2, r2
				if(file_handler(1) != 1)
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8002ada:	82a2      	strh	r2, [r4, #20]
				if(file_handler(1) != 1)
 8002adc:	f7ff f8ee 	bl	8001cbc <file_handler>
 8002ae0:	2801      	cmp	r0, #1
 8002ae2:	f47f acef 	bne.w	80024c4 <smart_watch_process+0x3a4>
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <smart_watch_process+0x9fc>)
 8002aea:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <smart_watch_process+0xa00>)
 8002aec:	f7fd fd92 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_SET)
 8002af0:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002af4:	75e0      	strb	r0, [r4, #23]
 8002af6:	e663      	b.n	80027c0 <smart_watch_process+0x6a0>
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	e4e3      	b.n	80024c4 <smart_watch_process+0x3a4>
 8002afc:	f44f 7225 	mov.w	r2, #660	@ 0x294
					video.time.Hours = 11;
 8002b00:	230b      	movs	r3, #11
 8002b02:	e7e8      	b.n	8002ad6 <smart_watch_process+0x9b6>
 8002b04:	223b      	movs	r2, #59	@ 0x3b
					video.time.Minutes = 59;
 8002b06:	4613      	mov	r3, r2
 8002b08:	e752      	b.n	80029b0 <smart_watch_process+0x890>
	uint16_t days_elapsed = 0;
 8002b0a:	4652      	mov	r2, sl
 8002b0c:	4b02      	ldr	r3, [pc, #8]	@ (8002b18 <smart_watch_process+0x9f8>)
 8002b0e:	e466      	b.n	80023de <smart_watch_process+0x2be>
 8002b10:	240003f4 	.word	0x240003f4
 8002b14:	58020400 	.word	0x58020400
 8002b18:	080104b4 	.word	0x080104b4
 8002b1c:	240ac360 	.word	0x240ac360
 8002b20:	240ac318 	.word	0x240ac318
 8002b24:	88888889 	.word	0x88888889
 8002b28:	aaaaaaab 	.word	0xaaaaaaab
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	4830      	ldr	r0, [pc, #192]	@ (8002bf0 <smart_watch_process+0xad0>)
 8002b30:	f005 f868 	bl	8007c04 <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8002b34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002b38:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 8002b3c:	f7ff f92c 	bl	8001d98 <DMA2D_Init.constprop.0>
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002b40:	edd5 7a00 	vldr	s15, [r5]
			video.width = JPEG_Info.ImageWidth;
 8002b44:	f8d8 300c 	ldr.w	r3, [r8, #12]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002b48:	eeb8 6b67 	vcvt.f64.u32	d6, s15
			video.width = JPEG_Info.ImageWidth;
 8002b4c:	8323      	strh	r3, [r4, #24]
			video.height = JPEG_Info.ImageHeight;
 8002b4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002b52:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 8002be8 <smart_watch_process+0xac8>
			video.height = JPEG_Info.ImageHeight;
 8002b56:	8363      	strh	r3, [r4, #26]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002b58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b5c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002b60:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8002b64:	f000 fcc4 	bl	80034f0 <HAL_GetTick>
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002b68:	464a      	mov	r2, r9
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8002b6a:	62e0      	str	r0, [r4, #44]	@ 0x2c
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002b6c:	4921      	ldr	r1, [pc, #132]	@ (8002bf4 <smart_watch_process+0xad4>)
 8002b6e:	4822      	ldr	r0, [pc, #136]	@ (8002bf8 <smart_watch_process+0xad8>)
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 8002b70:	f8c4 a01c 	str.w	sl, [r4, #28]
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002b74:	f008 fb06 	bl	800b184 <HAL_RTC_SetTime>
 8002b78:	e518      	b.n	80025ac <smart_watch_process+0x48c>
			HAL_Delay(-time_diff);
 8002b7a:	4240      	negs	r0, r0
 8002b7c:	f000 fcbe 	bl	80034fc <HAL_Delay>
			video.frameToSkip = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	6223      	str	r3, [r4, #32]
 8002b84:	e5b6      	b.n	80026f4 <smart_watch_process+0x5d4>
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b8c:	481b      	ldr	r0, [pc, #108]	@ (8002bfc <smart_watch_process+0xadc>)
			video.isfirstFrame = 0;
 8002b8e:	f884 b016 	strb.w	fp, [r4, #22]
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, RESET);
 8002b92:	f003 fcbf 	bl	8006514 <HAL_GPIO_WritePin>
 8002b96:	e584      	b.n	80026a2 <smart_watch_process+0x582>
			days_elapsed += num_of_days_per_month[i];
 8002b98:	f502 72a7 	add.w	r2, r2, #334	@ 0x14e
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	e6dd      	b.n	800295c <smart_watch_process+0x83c>
 8002ba0:	f502 7298 	add.w	r2, r2, #304	@ 0x130
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	e6d9      	b.n	800295c <smart_watch_process+0x83c>
 8002ba8:	f202 1211 	addw	r2, r2, #273	@ 0x111
 8002bac:	b292      	uxth	r2, r2
 8002bae:	e6d5      	b.n	800295c <smart_watch_process+0x83c>
 8002bb0:	32f3      	adds	r2, #243	@ 0xf3
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	e6d2      	b.n	800295c <smart_watch_process+0x83c>
 8002bb6:	32d4      	adds	r2, #212	@ 0xd4
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	e6cf      	b.n	800295c <smart_watch_process+0x83c>
	uint16_t days_elapsed = 0;
 8002bbc:	4652      	mov	r2, sl
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <smart_watch_process+0xae0>)
 8002bc0:	e699      	b.n	80028f6 <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002bc2:	32b5      	adds	r2, #181	@ 0xb5
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	e6c9      	b.n	800295c <smart_watch_process+0x83c>
 8002bc8:	3297      	adds	r2, #151	@ 0x97
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	e6c6      	b.n	800295c <smart_watch_process+0x83c>
 8002bce:	3278      	adds	r2, #120	@ 0x78
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	e6c3      	b.n	800295c <smart_watch_process+0x83c>
 8002bd4:	325a      	adds	r2, #90	@ 0x5a
 8002bd6:	b292      	uxth	r2, r2
 8002bd8:	e6c0      	b.n	800295c <smart_watch_process+0x83c>
 8002bda:	323b      	adds	r2, #59	@ 0x3b
 8002bdc:	b292      	uxth	r2, r2
 8002bde:	e6bd      	b.n	800295c <smart_watch_process+0x83c>
 8002be0:	321f      	adds	r2, #31
 8002be2:	b292      	uxth	r2, r2
 8002be4:	e6ba      	b.n	800295c <smart_watch_process+0x83c>
 8002be6:	bf00      	nop
 8002be8:	00000000 	.word	0x00000000
 8002bec:	408f4000 	.word	0x408f4000
 8002bf0:	24000220 	.word	0x24000220
 8002bf4:	2409fad8 	.word	0x2409fad8
 8002bf8:	2400017c 	.word	0x2400017c
 8002bfc:	58020400 	.word	0x58020400
 8002c00:	080104b4 	.word	0x080104b4

08002c04 <lcd_draw>:
{
 8002c04:	b530      	push	{r4, r5, lr}
       frame.start.X = 0;
 8002c06:	f04f 13ef 	mov.w	r3, #15663343	@ 0xef00ef
{
 8002c0a:	b083      	sub	sp, #12
       frame.start.X = 0;
 8002c0c:	2500      	movs	r5, #0
{
 8002c0e:	4604      	mov	r4, r0
       frame.start.X = 0;
 8002c10:	e9cd 5300 	strd	r5, r3, [sp]
	   GC9A01_set_frame(frame);
 8002c14:	ab02      	add	r3, sp, #8
 8002c16:	e913 0003 	ldmdb	r3, {r0, r1}
 8002c1a:	f7fe fcb7 	bl	800158c <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8002c1e:	202c      	movs	r0, #44	@ 0x2c
 8002c20:	f7fd ffac 	bl	8000b7c <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7fd ff73 	bl	8000b10 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f7fd ff88 	bl	8000b40 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7fe fcfc 	bl	8001634 <GC9A01_spi_tx>
	   if(ret != 1)
 8002c3c:	2801      	cmp	r0, #1
 8002c3e:	d001      	beq.n	8002c44 <lcd_draw+0x40>
}
 8002c40:	b003      	add	sp, #12
 8002c42:	bd30      	pop	{r4, r5, pc}
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 8002c44:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002c48:	462a      	mov	r2, r5
 8002c4a:	1860      	adds	r0, r4, r1
}
 8002c4c:	b003      	add	sp, #12
 8002c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 8002c52:	f7fe bcef 	b.w	8001634 <GC9A01_spi_tx>
 8002c56:	bf00      	nop

08002c58 <HAL_GPIO_EXTI_Callback>:
}

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c58:	b508      	push	{r3, lr}

	if(!HAL_GPIO_ReadPin(FXLS8974CF_INT_Port, FXLS8974CF_INT_Pin))
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	481d      	ldr	r0, [pc, #116]	@ (8002cd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002c5e:	f003 fc53 	bl	8006508 <HAL_GPIO_ReadPin>
 8002c62:	b918      	cbnz	r0, 8002c6c <HAL_GPIO_EXTI_Callback+0x14>
	{

		// Signal accelerometer interrupt

		acc_int = 1;
 8002c64:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x80>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]

		disable_btn_int();

	}

}
 8002c6a:	bd08      	pop	{r3, pc}
		if(video.video_mode == SETTING_MODE)
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <HAL_GPIO_EXTI_Callback+0x84>)
 8002c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c72:	b193      	cbz	r3, 8002c9a <HAL_GPIO_EXTI_Callback+0x42>
		wake_up = 1;
 8002c74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce0 <HAL_GPIO_EXTI_Callback+0x88>)
		acc_int = 0;
 8002c76:	f04f 0c00 	mov.w	ip, #0
 8002c7a:	4917      	ldr	r1, [pc, #92]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x80>)
		wake_up = 1;
 8002c7c:	2201      	movs	r2, #1
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002c7e:	2006      	movs	r0, #6
		wake_up = 1;
 8002c80:	701a      	strb	r2, [r3, #0]
		acc_int = 0;
 8002c82:	f881 c000 	strb.w	ip, [r1]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002c86:	f001 fc1d 	bl	80044c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f001 fc1a 	bl	80044c4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8002c90:	2008      	movs	r0, #8
}
 8002c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8002c96:	f001 bc15 	b.w	80044c4 <HAL_NVIC_DisableIRQ>
			if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	4811      	ldr	r0, [pc, #68]	@ (8002ce4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002c9e:	f003 fc33 	bl	8006508 <HAL_GPIO_ReadPin>
 8002ca2:	b918      	cbnz	r0, 8002cac <HAL_GPIO_EXTI_Callback+0x54>
				btn_status = BTN_PLUS;
 8002ca4:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e7e3      	b.n	8002c74 <HAL_GPIO_EXTI_Callback+0x1c>
			else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8002cac:	2102      	movs	r1, #2
 8002cae:	480d      	ldr	r0, [pc, #52]	@ (8002ce4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002cb0:	f003 fc2a 	bl	8006508 <HAL_GPIO_ReadPin>
 8002cb4:	b918      	cbnz	r0, 8002cbe <HAL_GPIO_EXTI_Callback+0x66>
				btn_status = BTN_SET;
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8002cb8:	2202      	movs	r2, #2
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e7da      	b.n	8002c74 <HAL_GPIO_EXTI_Callback+0x1c>
			else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4808      	ldr	r0, [pc, #32]	@ (8002ce4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002cc2:	f003 fc21 	bl	8006508 <HAL_GPIO_ReadPin>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d1d4      	bne.n	8002c74 <HAL_GPIO_EXTI_Callback+0x1c>
				btn_status = BTN_MINUS;
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <HAL_GPIO_EXTI_Callback+0x90>)
 8002ccc:	2203      	movs	r2, #3
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e7d0      	b.n	8002c74 <HAL_GPIO_EXTI_Callback+0x1c>
 8002cd2:	bf00      	nop
 8002cd4:	58020400 	.word	0x58020400
 8002cd8:	24000401 	.word	0x24000401
 8002cdc:	2409fad8 	.word	0x2409fad8
 8002ce0:	24000400 	.word	0x24000400
 8002ce4:	58020800 	.word	0x58020800
 8002ce8:	240ac7ce 	.word	0x240ac7ce

08002cec <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{

	spi_dma_not_ready = 0;
 8002cec:	4b01      	ldr	r3, [pc, #4]	@ (8002cf4 <HAL_SPI_TxCpltCallback+0x8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]

}
 8002cf2:	4770      	bx	lr
 8002cf4:	24000094 	.word	0x24000094

08002cf8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf8:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <HAL_MspInit+0x20>)
{
 8002cfa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8002d00:	f042 0202 	orr.w	r2, r2, #2
 8002d04:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8002d08:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d14:	b002      	add	sp, #8
 8002d16:	4770      	bx	lr
 8002d18:	58024400 	.word	0x58024400

08002d1c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <HAL_DMA2D_MspInit+0x2c>)
 8002d1e:	6802      	ldr	r2, [r0, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d000      	beq.n	8002d26 <HAL_DMA2D_MspInit+0xa>
 8002d24:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_DMA2D_MspInit+0x30>)
{
 8002d28:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d2a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002d2e:	f042 0210 	orr.w	r2, r2, #16
 8002d32:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8002d36:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002d42:	b002      	add	sp, #8
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	52001000 	.word	0x52001000
 8002d4c:	58024400 	.word	0x58024400

08002d50 <HAL_JPEG_MspInit>:
{
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002d50:	4b3a      	ldr	r3, [pc, #232]	@ (8002e3c <HAL_JPEG_MspInit+0xec>)

	  __HAL_RCC_MDMA_CLK_ENABLE();

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002d52:	2107      	movs	r1, #7
 8002d54:	220f      	movs	r2, #15
{
 8002d56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002d5a:	f8d3 4134 	ldr.w	r4, [r3, #308]	@ 0x134
{
 8002d5e:	4606      	mov	r6, r0
 8002d60:	b083      	sub	sp, #12
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002d62:	2500      	movs	r5, #0
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002d64:	f044 0420 	orr.w	r4, r4, #32
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
	  hmdmaIn.Init.BufferTransferLength = 32;
 8002d68:	2720      	movs	r7, #32
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8002d6a:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8002d6e:	f44f 48a0 	mov.w	r8, #20480	@ 0x5000
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002d72:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
 8002d76:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8002d7a:	4c31      	ldr	r4, [pc, #196]	@ (8002e40 <HAL_JPEG_MspInit+0xf0>)
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002d7c:	f000 0020 	and.w	r0, r0, #32
 8002d80:	9000      	str	r0, [sp, #0]
 8002d82:	9800      	ldr	r0, [sp, #0]
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8002d84:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 8002d88:	f040 0001 	orr.w	r0, r0, #1
 8002d8c:	f8c3 0134 	str.w	r0, [r3, #308]	@ 0x134
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002d90:	2079      	movs	r0, #121	@ 0x79
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8002d92:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002d9e:	f001 fb47 	bl	8004430 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002da2:	2079      	movs	r0, #121	@ 0x79
 8002da4:	f001 fb80 	bl	80044a8 <HAL_NVIC_EnableIRQ>
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8002da8:	2380      	movs	r3, #128	@ 0x80
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8002daa:	2202      	movs	r2, #2

	  hmdmaIn.Instance = MDMA_Channel1;

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);

	  HAL_MDMA_DeInit(&hmdmaIn);
 8002dac:	4620      	mov	r0, r4
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 8002dae:	6223      	str	r3, [r4, #32]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8002db0:	6162      	str	r2, [r4, #20]
	  hmdmaIn.Instance = MDMA_Channel1;
 8002db2:	2211      	movs	r2, #17
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8002db4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8002db8:	60a5      	str	r5, [r4, #8]
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8002dba:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaIn.Init.BufferTransferLength = 32;
 8002dbe:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002dc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8002dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc8:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaIn.Instance = MDMA_Channel1;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <HAL_JPEG_MspInit+0xf4>)
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8002dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8002dd0:	6334      	str	r4, [r6, #48]	@ 0x30
 8002dd2:	6426      	str	r6, [r4, #64]	@ 0x40
	  hmdmaIn.Instance = MDMA_Channel1;
 8002dd4:	e9c4 3200 	strd	r3, r2, [r4]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 8002dd8:	e9c4 5506 	strd	r5, r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaIn);
 8002ddc:	f005 fde6 	bl	80089ac <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8002de0:	4620      	mov	r0, r4
 8002de2:	f005 fd69 	bl	80088b8 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002de6:	4c18      	ldr	r4, [pc, #96]	@ (8002e48 <HAL_JPEG_MspInit+0xf8>)
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8002de8:	f44f 3320 	mov.w	r3, #163840	@ 0x28000

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
	  hmdmaOut.Init.BufferTransferLength = 32;

	  hmdmaOut.Instance = MDMA_Channel0;
 8002dec:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <HAL_JPEG_MspInit+0xfc>)
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8002dee:	60a5      	str	r5, [r4, #8]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8002df0:	4620      	mov	r0, r4
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8002df2:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8002df4:	2313      	movs	r3, #19
	  hmdmaOut.Instance = MDMA_Channel0;
 8002df6:	6022      	str	r2, [r4, #0]
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8002df8:	6063      	str	r3, [r4, #4]
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002dfa:	23c0      	movs	r3, #192	@ 0xc0
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 8002dfc:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002e00:	60e3      	str	r3, [r4, #12]
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8002e02:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaOut.Init.BufferTransferLength = 32;
 8002e06:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 8002e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8002e0c:	e9c4 7507 	strd	r7, r5, [r4, #28]
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8002e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 8002e14:	2508      	movs	r5, #8
 8002e16:	61a5      	str	r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaOut);
 8002e18:	f005 fdc8 	bl	80089ac <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f005 fd4b 	bl	80088b8 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8002e22:	6374      	str	r4, [r6, #52]	@ 0x34


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8002e24:	220f      	movs	r2, #15
 8002e26:	4629      	mov	r1, r5
 8002e28:	207a      	movs	r0, #122	@ 0x7a
	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8002e2a:	6426      	str	r6, [r4, #64]	@ 0x40
	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8002e2c:	f001 fb00 	bl	8004430 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002e30:	207a      	movs	r0, #122	@ 0x7a
}
 8002e32:	b003      	add	sp, #12
 8002e34:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002e38:	f001 bb36 	b.w	80044a8 <HAL_NVIC_EnableIRQ>
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	240ac840 	.word	0x240ac840
 8002e44:	52000080 	.word	0x52000080
 8002e48:	240ac7d0 	.word	0x240ac7d0
 8002e4c:	52000040 	.word	0x52000040

08002e50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e50:	b5d0      	push	{r4, r6, r7, lr}
 8002e52:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	2100      	movs	r1, #0
{
 8002e56:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e58:	22c0      	movs	r2, #192	@ 0xc0
 8002e5a:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	9108      	str	r1, [sp, #32]
 8002e5e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002e62:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e66:	f00c fe81 	bl	800fb6c <memset>
  if(hsd->Instance==SDMMC1)
 8002e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f60 <HAL_SD_MspInit+0x110>)
 8002e6c:	6822      	ldr	r2, [r4, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_SD_MspInit+0x26>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002e72:	b03a      	add	sp, #232	@ 0xe8
 8002e74:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002e76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e7a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e7c:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002e7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e82:	f006 fdbf 	bl	8009a04 <HAL_RCCEx_PeriphCLKConfig>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d166      	bne.n	8002f58 <HAL_SD_MspInit+0x108>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <HAL_SD_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e90:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e92:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e94:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e98:	2601      	movs	r6, #1
 8002e9a:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e9c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ea0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8002ea4:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002ea8:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002eb4:	f042 0202 	orr.w	r2, r2, #2
 8002eb8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002ebc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002ec0:	f002 0202 	and.w	r2, r2, #2
 8002ec4:	9201      	str	r2, [sp, #4]
 8002ec6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002ecc:	f042 0204 	orr.w	r2, r2, #4
 8002ed0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002ed4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002ed8:	f002 0204 	and.w	r2, r2, #4
 8002edc:	9202      	str	r2, [sp, #8]
 8002ede:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002ee4:	f042 0208 	orr.w	r2, r2, #8
 8002ee8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ef0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef2:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	a904      	add	r1, sp, #16
 8002efe:	481a      	ldr	r0, [pc, #104]	@ (8002f68 <HAL_SD_MspInit+0x118>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f00:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f02:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f003 f8f3 	bl	80060f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002f0a:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8002f0e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f10:	a904      	add	r1, sp, #16
 8002f12:	4816      	ldr	r0, [pc, #88]	@ (8002f6c <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f14:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002f16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f1e:	f003 f8e7 	bl	80060f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f26:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f28:	a904      	add	r1, sp, #16
 8002f2a:	4810      	ldr	r0, [pc, #64]	@ (8002f6c <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f2c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2303      	movs	r3, #3
 8002f36:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3a:	f003 f8d9 	bl	80060f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f3e:	2204      	movs	r2, #4
 8002f40:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f42:	a904      	add	r1, sp, #16
 8002f44:	480a      	ldr	r0, [pc, #40]	@ (8002f70 <HAL_SD_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f46:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f48:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002f4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f50:	f003 f8ce 	bl	80060f0 <HAL_GPIO_Init>
}
 8002f54:	b03a      	add	sp, #232	@ 0xe8
 8002f56:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8002f58:	f7fe feae 	bl	8001cb8 <Error_Handler>
 8002f5c:	e795      	b.n	8002e8a <HAL_SD_MspInit+0x3a>
 8002f5e:	bf00      	nop
 8002f60:	52007000 	.word	0x52007000
 8002f64:	58024400 	.word	0x58024400
 8002f68:	58020400 	.word	0x58020400
 8002f6c:	58020800 	.word	0x58020800
 8002f70:	58020c00 	.word	0x58020c00

08002f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f74:	b530      	push	{r4, r5, lr}
 8002f76:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	2100      	movs	r1, #0
{
 8002f7a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f7c:	22c0      	movs	r2, #192	@ 0xc0
 8002f7e:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	9106      	str	r1, [sp, #24]
 8002f82:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002f86:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f8a:	f00c fdef 	bl	800fb6c <memset>
  if(hspi->Instance==SPI1)
 8002f8e:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <HAL_SPI_MspInit+0xdc>)
 8002f90:	6822      	ldr	r2, [r4, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_SPI_MspInit+0x26>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f96:	b039      	add	sp, #228	@ 0xe4
 8002f98:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f9e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002fa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa6:	f006 fd2d 	bl	8009a04 <HAL_RCCEx_PeriphCLKConfig>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d14a      	bne.n	8003044 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fae:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fb0:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fb4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8002fb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fbc:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 8002fc0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8002fc4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fc8:	9200      	str	r2, [sp, #0]
 8002fca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fd8:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fde:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	481c      	ldr	r0, [pc, #112]	@ (8003058 <HAL_SPI_MspInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fe8:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	9d01      	ldr	r5, [sp, #4]
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8002fec:	4d1b      	ldr	r5, [pc, #108]	@ (800305c <HAL_SPI_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f003 f879 	bl	80060f0 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002ffe:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8003000:	4917      	ldr	r1, [pc, #92]	@ (8003060 <HAL_SPI_MspInit+0xec>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003002:	2226      	movs	r2, #38	@ 0x26
 8003004:	2040      	movs	r0, #64	@ 0x40
 8003006:	60eb      	str	r3, [r5, #12]
 8003008:	616b      	str	r3, [r5, #20]
 800300a:	60a8      	str	r0, [r5, #8]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800300c:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800300e:	e9c5 1200 	strd	r1, r2, [r5]
 8003012:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8003016:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800301a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800301e:	2304      	movs	r3, #4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003020:	6129      	str	r1, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003022:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003026:	f001 fb7d 	bl	8004724 <HAL_DMA_Init>
 800302a:	b970      	cbnz	r0, 800304a <HAL_SPI_MspInit+0xd6>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2023      	movs	r0, #35	@ 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003030:	67a5      	str	r5, [r4, #120]	@ 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003032:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003034:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003036:	f001 f9fb 	bl	8004430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800303a:	2023      	movs	r0, #35	@ 0x23
 800303c:	f001 fa34 	bl	80044a8 <HAL_NVIC_EnableIRQ>
}
 8003040:	b039      	add	sp, #228	@ 0xe4
 8003042:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8003044:	f7fe fe38 	bl	8001cb8 <Error_Handler>
 8003048:	e7b1      	b.n	8002fae <HAL_SPI_MspInit+0x3a>
      Error_Handler();
 800304a:	f7fe fe35 	bl	8001cb8 <Error_Handler>
 800304e:	e7ed      	b.n	800302c <HAL_SPI_MspInit+0xb8>
 8003050:	40013000 	.word	0x40013000
 8003054:	58024400 	.word	0x58024400
 8003058:	58020000 	.word	0x58020000
 800305c:	24000278 	.word	0x24000278
 8003060:	40020010 	.word	0x40020010
 8003064:	00000000 	.word	0x00000000

08003068 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003068:	b510      	push	{r4, lr}
 800306a:	b0b0      	sub	sp, #192	@ 0xc0
 800306c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800306e:	22c0      	movs	r2, #192	@ 0xc0
 8003070:	2100      	movs	r1, #0
 8003072:	4668      	mov	r0, sp
 8003074:	f00c fd7a 	bl	800fb6c <memset>
  if(hrtc->Instance==RTC)
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <HAL_RTC_MspInit+0x50>)
 800307a:	6822      	ldr	r2, [r4, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RTC_MspInit+0x1c>

    __HAL_RCC_RTC_ENABLE();

  }

}
 8003080:	b030      	add	sp, #192	@ 0xc0
 8003082:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003084:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80030b0 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003088:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308c:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800308e:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003092:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003094:	f006 fcb6 	bl	8009a04 <HAL_RCCEx_PeriphCLKConfig>
 8003098:	b930      	cbnz	r0, 80030a8 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <HAL_RTC_MspInit+0x54>)
 800309c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800309e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030a2:	6713      	str	r3, [r2, #112]	@ 0x70
}
 80030a4:	b030      	add	sp, #192	@ 0xc0
 80030a6:	bd10      	pop	{r4, pc}
      Error_Handler();
 80030a8:	f7fe fe06 	bl	8001cb8 <Error_Handler>
 80030ac:	e7f5      	b.n	800309a <HAL_RTC_MspInit+0x32>
 80030ae:	bf00      	nop
 80030b0:	00400000 	.word	0x00400000
 80030b4:	00000000 	.word	0x00000000
 80030b8:	58004000 	.word	0x58004000
 80030bc:	58024400 	.word	0x58024400

080030c0 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030c0:	b510      	push	{r4, lr}
 80030c2:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	2100      	movs	r1, #0
{
 80030c6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030c8:	22c0      	movs	r2, #192	@ 0xc0
 80030ca:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	9106      	str	r1, [sp, #24]
 80030ce:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80030d2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d6:	f00c fd49 	bl	800fb6c <memset>
  if(hi2c->Instance==I2C1)
 80030da:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_I2C_MspInit+0xa8>)
 80030dc:	6822      	ldr	r2, [r4, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80030e2:	b038      	add	sp, #224	@ 0xe0
 80030e4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030e6:	2208      	movs	r2, #8
 80030e8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ea:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030f0:	f006 fc88 	bl	8009a04 <HAL_RCCEx_PeriphCLKConfig>
 80030f4:	bb80      	cbnz	r0, 8003158 <HAL_I2C_MspInit+0x98>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	4c1d      	ldr	r4, [pc, #116]	@ (800316c <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030f8:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fa:	a902      	add	r1, sp, #8
 80030fc:	481c      	ldr	r0, [pc, #112]	@ (8003170 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fe:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 800310a:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800310e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003110:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003112:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003116:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8003160 <HAL_I2C_MspInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800311e:	2300      	movs	r3, #0
 8003120:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003124:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003128:	f002 ffe2 	bl	80060f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800312c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003134:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003138:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 800313a:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 800313e:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8003142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800314a:	f001 f971 	bl	8004430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800314e:	201f      	movs	r0, #31
 8003150:	f001 f9aa 	bl	80044a8 <HAL_NVIC_EnableIRQ>
}
 8003154:	b038      	add	sp, #224	@ 0xe0
 8003156:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003158:	f7fe fdae 	bl	8001cb8 <Error_Handler>
 800315c:	e7cb      	b.n	80030f6 <HAL_I2C_MspInit+0x36>
 800315e:	bf00      	nop
 8003160:	000000c0 	.word	0x000000c0
 8003164:	00000012 	.word	0x00000012
 8003168:	40005400 	.word	0x40005400
 800316c:	58024400 	.word	0x58024400
 8003170:	58020400 	.word	0x58020400
 8003174:	00000000 	.word	0x00000000

08003178 <HAL_ADC_MspInit>:
  }

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003178:	b510      	push	{r4, lr}
 800317a:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	2100      	movs	r1, #0
{
 800317e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003180:	22c0      	movs	r2, #192	@ 0xc0
 8003182:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	9106      	str	r1, [sp, #24]
 8003186:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800318a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800318e:	f00c fced 	bl	800fb6c <memset>
  if(hadc->Instance==ADC1)
 8003192:	4b23      	ldr	r3, [pc, #140]	@ (8003220 <HAL_ADC_MspInit+0xa8>)
 8003194:	6822      	ldr	r2, [r4, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d001      	beq.n	800319e <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800319a:	b038      	add	sp, #224	@ 0xe0
 800319c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800319e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80031a2:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80031a4:	2104      	movs	r1, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80031ac:	2310      	movs	r3, #16
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80031ae:	2208      	movs	r2, #8
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80031b0:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80031b4:	2302      	movs	r3, #2
 80031b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80031ba:	2202      	movs	r2, #2
 80031bc:	23c0      	movs	r3, #192	@ 0xc0
 80031be:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c2:	f006 fc1f 	bl	8009a04 <HAL_RCCEx_PeriphCLKConfig>
 80031c6:	bb20      	cbnz	r0, 8003212 <HAL_ADC_MspInit+0x9a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031c8:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <HAL_ADC_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	a902      	add	r1, sp, #8
 80031ce:	4816      	ldr	r0, [pc, #88]	@ (8003228 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031d0:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 80031dc:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 80031e0:	f002 0220 	and.w	r2, r2, #32
 80031e4:	9200      	str	r2, [sp, #0]
 80031e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80031f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fa:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031fe:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8003218 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003206:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f002 ff71 	bl	80060f0 <HAL_GPIO_Init>
}
 800320e:	b038      	add	sp, #224	@ 0xe0
 8003210:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003212:	f7fe fd51 	bl	8001cb8 <Error_Handler>
 8003216:	e7d7      	b.n	80031c8 <HAL_ADC_MspInit+0x50>
 8003218:	00000001 	.word	0x00000001
 800321c:	00000003 	.word	0x00000003
 8003220:	40022000 	.word	0x40022000
 8003224:	58024400 	.word	0x58024400
 8003228:	58020000 	.word	0x58020000

0800322c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 800322c:	4b07      	ldr	r3, [pc, #28]	@ (800324c <HAL_ADC_MspDeInit+0x20>)
 800322e:	6802      	ldr	r2, [r0, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d000      	beq.n	8003236 <HAL_ADC_MspDeInit+0xa>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003234:	4770      	bx	lr
    __HAL_RCC_ADC12_CLK_DISABLE();
 8003236:	4a06      	ldr	r2, [pc, #24]	@ (8003250 <HAL_ADC_MspDeInit+0x24>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8003238:	2101      	movs	r1, #1
 800323a:	4806      	ldr	r0, [pc, #24]	@ (8003254 <HAL_ADC_MspDeInit+0x28>)
    __HAL_RCC_ADC12_CLK_DISABLE();
 800323c:	f8d2 3138 	ldr.w	r3, [r2, #312]	@ 0x138
 8003240:	f023 0320 	bic.w	r3, r3, #32
 8003244:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8003248:	f003 b894 	b.w	8006374 <HAL_GPIO_DeInit>
 800324c:	40022000 	.word	0x40022000
 8003250:	58024400 	.word	0x58024400
 8003254:	58020000 	.word	0x58020000

08003258 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003258:	e7fe      	b.n	8003258 <NMI_Handler>
 800325a:	bf00      	nop

0800325c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325c:	e7fe      	b.n	800325c <HardFault_Handler>
 800325e:	bf00      	nop

08003260 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <MemManage_Handler>
 8003262:	bf00      	nop

08003264 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003264:	e7fe      	b.n	8003264 <BusFault_Handler>
 8003266:	bf00      	nop

08003268 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <UsageFault_Handler>
 800326a:	bf00      	nop

0800326c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop

08003278 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003278:	f000 b92e 	b.w	80034d8 <HAL_IncTick>

0800327c <JPEG_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800327c:	4801      	ldr	r0, [pc, #4]	@ (8003284 <JPEG_IRQHandler+0x8>)
 800327e:	f005 ba7f 	b.w	8008780 <HAL_JPEG_IRQHandler>
 8003282:	bf00      	nop
 8003284:	24000220 	.word	0x24000220

08003288 <MDMA_IRQHandler>:
}

void MDMA_IRQHandler()
{
 8003288:	b510      	push	{r4, lr}
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800328a:	4c04      	ldr	r4, [pc, #16]	@ (800329c <MDMA_IRQHandler+0x14>)
 800328c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800328e:	f005 fc37 	bl	8008b00 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003292:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8003294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003298:	f005 bc32 	b.w	8008b00 <HAL_MDMA_IRQHandler>
 800329c:	24000220 	.word	0x24000220

080032a0 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler()
{

	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80032a0:	4801      	ldr	r0, [pc, #4]	@ (80032a8 <DMA1_Stream0_IRQHandler+0x8>)
 80032a2:	f002 ba03 	b.w	80056ac <HAL_DMA_IRQHandler>
 80032a6:	bf00      	nop
 80032a8:	24000278 	.word	0x24000278

080032ac <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80032ac:	4801      	ldr	r0, [pc, #4]	@ (80032b4 <SPI1_IRQHandler+0x8>)
 80032ae:	f009 b985 	b.w	800c5bc <HAL_SPI_IRQHandler>
 80032b2:	bf00      	nop
 80032b4:	240002f0 	.word	0x240002f0

080032b8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80032b8:	4801      	ldr	r0, [pc, #4]	@ (80032c0 <I2C1_EV_IRQHandler+0x8>)
 80032ba:	f003 bacb 	b.w	8006854 <HAL_I2C_EV_IRQHandler>
 80032be:	bf00      	nop
 80032c0:	24000128 	.word	0x24000128

080032c4 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 80032c4:	2001      	movs	r0, #1
 80032c6:	f003 b929 	b.w	800651c <HAL_GPIO_EXTI_IRQHandler>
 80032ca:	bf00      	nop

080032cc <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 80032cc:	2002      	movs	r0, #2
 80032ce:	f003 b925 	b.w	800651c <HAL_GPIO_EXTI_IRQHandler>
 80032d2:	bf00      	nop

080032d4 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 80032d4:	2004      	movs	r0, #4
 80032d6:	f003 b921 	b.w	800651c <HAL_GPIO_EXTI_IRQHandler>
 80032da:	bf00      	nop

080032dc <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(FXLS8974CF_INT_Pin);
 80032dc:	2020      	movs	r0, #32
 80032de:	f003 b91d 	b.w	800651c <HAL_GPIO_EXTI_IRQHandler>
 80032e2:	bf00      	nop

080032e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e4:	490d      	ldr	r1, [pc, #52]	@ (800331c <_sbrk+0x38>)
{
 80032e6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80032ea:	6808      	ldr	r0, [r1, #0]
{
 80032ec:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032ee:	4c0d      	ldr	r4, [pc, #52]	@ (8003324 <_sbrk+0x40>)
 80032f0:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80032f2:	b120      	cbz	r0, 80032fe <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f4:	4403      	add	r3, r0
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d807      	bhi.n	800330a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80032fa:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80032fc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80032fe:	4c0a      	ldr	r4, [pc, #40]	@ (8003328 <_sbrk+0x44>)
 8003300:	4620      	mov	r0, r4
 8003302:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003304:	4403      	add	r3, r0
 8003306:	4293      	cmp	r3, r2
 8003308:	d9f7      	bls.n	80032fa <_sbrk+0x16>
    errno = ENOMEM;
 800330a:	f00c fc37 	bl	800fb7c <__errno>
 800330e:	220c      	movs	r2, #12
 8003310:	4603      	mov	r3, r0
    return (void *)-1;
 8003312:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8003316:	601a      	str	r2, [r3, #0]
}
 8003318:	bd10      	pop	{r4, pc}
 800331a:	bf00      	nop
 800331c:	240ac8ac 	.word	0x240ac8ac
 8003320:	24100000 	.word	0x24100000
 8003324:	00000800 	.word	0x00000800
 8003328:	240aca38 	.word	0x240aca38

0800332c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800332c:	4922      	ldr	r1, [pc, #136]	@ (80033b8 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800332e:	4a23      	ldr	r2, [pc, #140]	@ (80033bc <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003330:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8003338:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800333e:	6813      	ldr	r3, [r2, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2b02      	cmp	r3, #2
 8003346:	d805      	bhi.n	8003354 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003348:	6813      	ldr	r3, [r2, #0]
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	f043 0303 	orr.w	r3, r3, #3
 8003352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003356:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003358:	4a1a      	ldr	r2, [pc, #104]	@ (80033c4 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 800335a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800335c:	4817      	ldr	r0, [pc, #92]	@ (80033bc <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 800335e:	f041 0101 	orr.w	r1, r1, #1
 8003362:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003364:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003366:	6819      	ldr	r1, [r3, #0]
 8003368:	400a      	ands	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800336c:	6803      	ldr	r3, [r0, #0]
 800336e:	f013 0f0c 	tst.w	r3, #12
 8003372:	d005      	beq.n	8003380 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003374:	6803      	ldr	r3, [r0, #0]
 8003376:	f023 030f 	bic.w	r3, r3, #15
 800337a:	f043 0303 	orr.w	r3, r3, #3
 800337e:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003380:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <SystemInit+0x94>)
 8003382:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003384:	4910      	ldr	r1, [pc, #64]	@ (80033c8 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8003386:	4c11      	ldr	r4, [pc, #68]	@ (80033cc <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003388:	4811      	ldr	r0, [pc, #68]	@ (80033d0 <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 800338a:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 800338c:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 800338e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003390:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003392:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8003396:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003398:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 800339a:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 800339c:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 800339e:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 80033a0:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 80033a2:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 80033a4:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033a6:	480b      	ldr	r0, [pc, #44]	@ (80033d4 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 80033a8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80033ac:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 80033ae:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033b0:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80033b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00
 80033bc:	52002000 	.word	0x52002000
 80033c0:	58024400 	.word	0x58024400
 80033c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80033c8:	01010280 	.word	0x01010280
 80033cc:	02020200 	.word	0x02020200
 80033d0:	01ff0000 	.word	0x01ff0000
 80033d4:	52004000 	.word	0x52004000

080033d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003410 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033dc:	f7ff ffa6 	bl	800332c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033e0:	480c      	ldr	r0, [pc, #48]	@ (8003414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033e2:	490d      	ldr	r1, [pc, #52]	@ (8003418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033e4:	4a0d      	ldr	r2, [pc, #52]	@ (800341c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e8:	e002      	b.n	80033f0 <LoopCopyDataInit>

080033ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ee:	3304      	adds	r3, #4

080033f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80033f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f4:	d3f9      	bcc.n	80033ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033fc:	e001      	b.n	8003402 <LoopFillZerobss>

080033fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003400:	3204      	adds	r2, #4

08003402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003404:	d3fb      	bcc.n	80033fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003406:	f00c fbbf 	bl	800fb88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800340a:	f7fe fa5d 	bl	80018c8 <main>
  bx  lr
 800340e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003410:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003414:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003418:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800341c:	08010820 	.word	0x08010820
  ldr r2, =_sbss
 8003420:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003424:	240aca34 	.word	0x240aca34

08003428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003428:	e7fe      	b.n	8003428 <ADC_IRQHandler>
	...

0800342c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800342c:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_InitTick+0x40>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b90b      	cbnz	r3, 8003436 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003432:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003434:	4770      	bx	lr
{
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800343a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800343e:	4a0c      	ldr	r2, [pc, #48]	@ (8003470 <HAL_InitTick+0x44>)
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	6810      	ldr	r0, [r2, #0]
 8003446:	fbb0 f0f3 	udiv	r0, r0, r3
 800344a:	f001 f85f 	bl	800450c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	b908      	cbnz	r0, 8003454 <HAL_InitTick+0x28>
 8003450:	2c0f      	cmp	r4, #15
 8003452:	d901      	bls.n	8003458 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003454:	2001      	movs	r0, #1
}
 8003456:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003458:	2200      	movs	r2, #0
 800345a:	4621      	mov	r1, r4
 800345c:	f04f 30ff 	mov.w	r0, #4294967295
 8003460:	f000 ffe6 	bl	8004430 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <HAL_InitTick+0x48>)
 8003466:	2000      	movs	r0, #0
 8003468:	601c      	str	r4, [r3, #0]
}
 800346a:	bd10      	pop	{r4, pc}
 800346c:	24000010 	.word	0x24000010
 8003470:	2400000c 	.word	0x2400000c
 8003474:	24000014 	.word	0x24000014

08003478 <HAL_Init>:
{
 8003478:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800347c:	4c12      	ldr	r4, [pc, #72]	@ (80034c8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347e:	f000 ffc5 	bl	800440c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003482:	f005 ff9b 	bl	80093bc <HAL_RCC_GetSysClockFreq>
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_Init+0x54>)
 8003488:	4911      	ldr	r1, [pc, #68]	@ (80034d0 <HAL_Init+0x58>)
 800348a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800348c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800348e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003492:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003496:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003498:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800349a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800349e:	490d      	ldr	r1, [pc, #52]	@ (80034d4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034a0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80034a4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034a6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80034aa:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ac:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034ae:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034b0:	f7ff ffbc 	bl	800342c <HAL_InitTick>
 80034b4:	b110      	cbz	r0, 80034bc <HAL_Init+0x44>
    return HAL_ERROR;
 80034b6:	2401      	movs	r4, #1
}
 80034b8:	4620      	mov	r0, r4
 80034ba:	bd10      	pop	{r4, pc}
 80034bc:	4604      	mov	r4, r0
  HAL_MspInit();
 80034be:	f7ff fc1b 	bl	8002cf8 <HAL_MspInit>
}
 80034c2:	4620      	mov	r0, r4
 80034c4:	bd10      	pop	{r4, pc}
 80034c6:	bf00      	nop
 80034c8:	24000008 	.word	0x24000008
 80034cc:	58024400 	.word	0x58024400
 80034d0:	080104c0 	.word	0x080104c0
 80034d4:	2400000c 	.word	0x2400000c

080034d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80034d8:	4a03      	ldr	r2, [pc, #12]	@ (80034e8 <HAL_IncTick+0x10>)
 80034da:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <HAL_IncTick+0x14>)
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	440b      	add	r3, r1
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	240ac8b0 	.word	0x240ac8b0
 80034ec:	24000010 	.word	0x24000010

080034f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80034f0:	4b01      	ldr	r3, [pc, #4]	@ (80034f8 <HAL_GetTick+0x8>)
 80034f2:	6818      	ldr	r0, [r3, #0]
}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	240ac8b0 	.word	0x240ac8b0

080034fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7ff fff6 	bl	80034f0 <HAL_GetTick>
 8003504:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003506:	1c63      	adds	r3, r4, #1
 8003508:	d002      	beq.n	8003510 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800350a:	4b04      	ldr	r3, [pc, #16]	@ (800351c <HAL_Delay+0x20>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003510:	f7ff ffee 	bl	80034f0 <HAL_GetTick>
 8003514:	1b40      	subs	r0, r0, r5
 8003516:	42a0      	cmp	r0, r4
 8003518:	d3fa      	bcc.n	8003510 <HAL_Delay+0x14>
  {
  }
}
 800351a:	bd38      	pop	{r3, r4, r5, pc}
 800351c:	24000010 	.word	0x24000010

08003520 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003520:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003524:	6913      	ldr	r3, [r2, #16]
 8003526:	f023 0302 	bic.w	r3, r3, #2
 800352a:	6113      	str	r3, [r2, #16]
}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop

08003530 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003530:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003534:	6913      	ldr	r3, [r2, #16]
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	6113      	str	r3, [r2, #16]
}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop

08003540 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003544:	4a36      	ldr	r2, [pc, #216]	@ (8003620 <HAL_ADC_PollForConversion+0xe0>)
 8003546:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003548:	6904      	ldr	r4, [r0, #16]
{
 800354a:	460e      	mov	r6, r1
 800354c:	6897      	ldr	r7, [r2, #8]
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800354e:	2c08      	cmp	r4, #8
 8003550:	f007 071f 	and.w	r7, r7, #31
 8003554:	d009      	beq.n	800356a <HAL_ADC_PollForConversion+0x2a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003556:	f240 2321 	movw	r3, #545	@ 0x221
 800355a:	40fb      	lsrs	r3, r7
 800355c:	07d9      	lsls	r1, r3, #31
 800355e:	d44c      	bmi.n	80035fa <HAL_ADC_PollForConversion+0xba>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003560:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003562:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8003566:	d14c      	bne.n	8003602 <HAL_ADC_PollForConversion+0xc2>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003568:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800356a:	f7ff ffc1 	bl	80034f0 <HAL_GetTick>
 800356e:	1c73      	adds	r3, r6, #1
 8003570:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003572:	682a      	ldr	r2, [r5, #0]
 8003574:	d12b      	bne.n	80035ce <HAL_ADC_PollForConversion+0x8e>
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	4223      	tst	r3, r4
 800357a:	d0fc      	beq.n	8003576 <HAL_ADC_PollForConversion+0x36>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800357c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800357e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003582:	656b      	str	r3, [r5, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003584:	68d3      	ldr	r3, [r2, #12]
 8003586:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 800358a:	d10f      	bne.n	80035ac <HAL_ADC_PollForConversion+0x6c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800358c:	7d6b      	ldrb	r3, [r5, #21]
 800358e:	b96b      	cbnz	r3, 80035ac <HAL_ADC_PollForConversion+0x6c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003590:	6813      	ldr	r3, [r2, #0]
 8003592:	071e      	lsls	r6, r3, #28
 8003594:	d50a      	bpl.n	80035ac <HAL_ADC_PollForConversion+0x6c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003596:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8003598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800359c:	656b      	str	r3, [r5, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800359e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80035a0:	04d8      	lsls	r0, r3, #19
 80035a2:	d403      	bmi.n	80035ac <HAL_ADC_PollForConversion+0x6c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035a4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	656b      	str	r3, [r5, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <HAL_ADC_PollForConversion+0xe4>)
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d018      	beq.n	80035e4 <HAL_ADC_PollForConversion+0xa4>
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80035b2:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035b4:	68d3      	ldr	r3, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80035b6:	d01e      	beq.n	80035f6 <HAL_ADC_PollForConversion+0xb6>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80035b8:	045b      	lsls	r3, r3, #17
 80035ba:	d401      	bmi.n	80035c0 <HAL_ADC_PollForConversion+0x80>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035bc:	230c      	movs	r3, #12
 80035be:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80035c0:	2000      	movs	r0, #0
}
 80035c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80035c6:	b916      	cbnz	r6, 80035ce <HAL_ADC_PollForConversion+0x8e>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035c8:	6813      	ldr	r3, [r2, #0]
 80035ca:	4023      	ands	r3, r4
 80035cc:	d020      	beq.n	8003610 <HAL_ADC_PollForConversion+0xd0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035ce:	6813      	ldr	r3, [r2, #0]
 80035d0:	4223      	tst	r3, r4
 80035d2:	d1d3      	bne.n	800357c <HAL_ADC_PollForConversion+0x3c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80035d4:	f7ff ff8c 	bl	80034f0 <HAL_GetTick>
 80035d8:	eba0 0008 	sub.w	r0, r0, r8
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035dc:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80035de:	42b0      	cmp	r0, r6
 80035e0:	d9f1      	bls.n	80035c6 <HAL_ADC_PollForConversion+0x86>
 80035e2:	e7f1      	b.n	80035c8 <HAL_ADC_PollForConversion+0x88>
 80035e4:	f240 2321 	movw	r3, #545	@ 0x221
 80035e8:	40fb      	lsrs	r3, r7
 80035ea:	07d9      	lsls	r1, r3, #31
 80035ec:	d4e1      	bmi.n	80035b2 <HAL_ADC_PollForConversion+0x72>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <HAL_ADC_PollForConversion+0xe8>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80035f0:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035f2:	68db      	ldr	r3, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80035f4:	d1e0      	bne.n	80035b8 <HAL_ADC_PollForConversion+0x78>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80035f6:	6014      	str	r4, [r2, #0]
 80035f8:	e7e2      	b.n	80035c0 <HAL_ADC_PollForConversion+0x80>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	07da      	lsls	r2, r3, #31
 8003600:	d5b2      	bpl.n	8003568 <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003602:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
        return HAL_ERROR;
 8003604:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003606:	f043 0320 	orr.w	r3, r3, #32
 800360a:	656b      	str	r3, [r5, #84]	@ 0x54
}
 800360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003610:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 8003612:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8003614:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003618:	f042 0204 	orr.w	r2, r2, #4
 800361c:	656a      	str	r2, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 800361e:	e7d0      	b.n	80035c2 <HAL_ADC_PollForConversion+0x82>
 8003620:	40022300 	.word	0x40022300
 8003624:	40022100 	.word	0x40022100
 8003628:	40022000 	.word	0x40022000

0800362c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800362c:	6803      	ldr	r3, [r0, #0]
 800362e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop

08003634 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003634:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003636:	2200      	movs	r2, #0
{
 8003638:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800363a:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800363c:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8003640:	2a01      	cmp	r2, #1
 8003642:	f000 80e4 	beq.w	800380e <HAL_ADC_ConfigChannel+0x1da>
 8003646:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003648:	6802      	ldr	r2, [r0, #0]
 800364a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800364c:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003650:	6890      	ldr	r0, [r2, #8]
 8003652:	0740      	lsls	r0, r0, #29
 8003654:	d509      	bpl.n	800366a <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003656:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 8003658:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365a:	f042 0220 	orr.w	r2, r2, #32
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003666:	b002      	add	sp, #8
 8003668:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800366a:	680d      	ldr	r5, [r1, #0]
 800366c:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800366e:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003672:	db0d      	blt.n	8003690 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003674:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8003678:	2e00      	cmp	r6, #0
 800367a:	f000 80b4 	beq.w	80037e6 <HAL_ADC_ConfigChannel+0x1b2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003682:	b115      	cbz	r5, 800368a <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003684:	fab5 f585 	clz	r5, r5
 8003688:	40ac      	lsls	r4, r5
 800368a:	69d5      	ldr	r5, [r2, #28]
 800368c:	432c      	orrs	r4, r5
 800368e:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003690:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003692:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003696:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800369a:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800369e:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 80036a0:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036a4:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 80036a8:	fa0c fc04 	lsl.w	ip, ip, r4
 80036ac:	40a0      	lsls	r0, r4
 80036ae:	f85e 4005 	ldr.w	r4, [lr, r5]
 80036b2:	ea24 0c0c 	bic.w	ip, r4, ip
 80036b6:	ea4c 0000 	orr.w	r0, ip, r0
 80036ba:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036be:	6890      	ldr	r0, [r2, #8]
 80036c0:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036c4:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036c8:	0706      	lsls	r6, r0, #28
 80036ca:	d53d      	bpl.n	8003748 <HAL_ADC_ConfigChannel+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036cc:	6890      	ldr	r0, [r2, #8]
 80036ce:	07c4      	lsls	r4, r0, #31
 80036d0:	d438      	bmi.n	8003744 <HAL_ADC_ConfigChannel+0x110>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036d2:	68cd      	ldr	r5, [r1, #12]
 80036d4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80036d6:	f005 0618 	and.w	r6, r5, #24
 80036da:	48b0      	ldr	r0, [pc, #704]	@ (800399c <HAL_ADC_ConfigChannel+0x368>)
 80036dc:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 80036e0:	40f0      	lsrs	r0, r6
 80036e2:	f3c4 0613 	ubfx	r6, r4, #0, #20
 80036e6:	4020      	ands	r0, r4
 80036e8:	ea21 0106 	bic.w	r1, r1, r6
 80036ec:	4301      	orrs	r1, r0
 80036ee:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036f2:	49ab      	ldr	r1, [pc, #684]	@ (80039a0 <HAL_ADC_ConfigChannel+0x36c>)
 80036f4:	428d      	cmp	r5, r1
 80036f6:	d07f      	beq.n	80037f8 <HAL_ADC_ConfigChannel+0x1c4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036f8:	2c00      	cmp	r4, #0
 80036fa:	da23      	bge.n	8003744 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036fc:	49a9      	ldr	r1, [pc, #676]	@ (80039a4 <HAL_ADC_ConfigChannel+0x370>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036fe:	48aa      	ldr	r0, [pc, #680]	@ (80039a8 <HAL_ADC_ConfigChannel+0x374>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003700:	688d      	ldr	r5, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003702:	6880      	ldr	r0, [r0, #8]
 8003704:	07c0      	lsls	r0, r0, #31
 8003706:	f100 80a1 	bmi.w	800384c <HAL_ADC_ConfigChannel+0x218>
 800370a:	48a8      	ldr	r0, [pc, #672]	@ (80039ac <HAL_ADC_ConfigChannel+0x378>)
 800370c:	6886      	ldr	r6, [r0, #8]
 800370e:	07f6      	lsls	r6, r6, #31
 8003710:	d4a1      	bmi.n	8003656 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003712:	4ea7      	ldr	r6, [pc, #668]	@ (80039b0 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003714:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
 8003718:	42b4      	cmp	r4, r6
 800371a:	f000 811b 	beq.w	8003954 <HAL_ADC_ConfigChannel+0x320>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800371e:	4ea5      	ldr	r6, [pc, #660]	@ (80039b4 <HAL_ADC_ConfigChannel+0x380>)
 8003720:	42b4      	cmp	r4, r6
 8003722:	f000 816a 	beq.w	80039fa <HAL_ADC_ConfigChannel+0x3c6>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003726:	4ea4      	ldr	r6, [pc, #656]	@ (80039b8 <HAL_ADC_ConfigChannel+0x384>)
 8003728:	42b4      	cmp	r4, r6
 800372a:	d10b      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x110>
            if (ADC_VREFINT_INSTANCE(hadc))
 800372c:	026c      	lsls	r4, r5, #9
 800372e:	d409      	bmi.n	8003744 <HAL_ADC_ConfigChannel+0x110>
 8003730:	4282      	cmp	r2, r0
 8003732:	d107      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x110>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800373a:	ea42 020c 	orr.w	r2, r2, ip
 800373e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003742:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003744:	2000      	movs	r0, #0
 8003746:	e78b      	b.n	8003660 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003748:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800374a:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 800374e:	f04f 0e07 	mov.w	lr, #7
 8003752:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003754:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8003756:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800375a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800375e:	fa0e fe04 	lsl.w	lr, lr, r4
 8003762:	fa06 f404 	lsl.w	r4, r6, r4
 8003766:	f85c 0005 	ldr.w	r0, [ip, r5]
 800376a:	ea20 000e 	bic.w	r0, r0, lr
 800376e:	4320      	orrs	r0, r4
 8003770:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003774:	68d0      	ldr	r0, [r2, #12]
 8003776:	06c5      	lsls	r5, r0, #27
 8003778:	d537      	bpl.n	80037ea <HAL_ADC_ConfigChannel+0x1b6>
 800377a:	68d0      	ldr	r0, [r2, #12]
 800377c:	694d      	ldr	r5, [r1, #20]
 800377e:	0840      	lsrs	r0, r0, #1
 8003780:	f000 0008 	and.w	r0, r0, #8
 8003784:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003786:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003788:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800378a:	2e04      	cmp	r6, #4
 800378c:	d042      	beq.n	8003814 <HAL_ADC_ConfigChannel+0x1e0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800378e:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8003792:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8003796:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 800379a:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800379e:	4320      	orrs	r0, r4
 80037a0:	4328      	orrs	r0, r5
 80037a2:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037a6:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037a8:	690d      	ldr	r5, [r1, #16]
 80037aa:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037ae:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 80037b2:	fab4 f484 	clz	r4, r4
 80037b6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80037ba:	0964      	lsrs	r4, r4, #5
 80037bc:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 80037c0:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037c4:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037c6:	690d      	ldr	r5, [r1, #16]
 80037c8:	f1a0 0001 	sub.w	r0, r0, #1
 80037cc:	6914      	ldr	r4, [r2, #16]
 80037ce:	f005 051f 	and.w	r5, r5, #31
 80037d2:	fab0 f080 	clz	r0, r0
 80037d6:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 80037da:	0940      	lsrs	r0, r0, #5
 80037dc:	02c0      	lsls	r0, r0, #11
 80037de:	40a8      	lsls	r0, r5
 80037e0:	4320      	orrs	r0, r4
 80037e2:	6110      	str	r0, [r2, #16]
}
 80037e4:	e772      	b.n	80036cc <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037e6:	4084      	lsls	r4, r0
 80037e8:	e74f      	b.n	800368a <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037ea:	68d0      	ldr	r0, [r2, #12]
 80037ec:	694d      	ldr	r5, [r1, #20]
 80037ee:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80037f2:	0040      	lsls	r0, r0, #1
 80037f4:	4085      	lsls	r5, r0
 80037f6:	e7c6      	b.n	8003786 <HAL_ADC_ConfigChannel+0x152>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80037f8:	496b      	ldr	r1, [pc, #428]	@ (80039a8 <HAL_ADC_ConfigChannel+0x374>)
 80037fa:	428a      	cmp	r2, r1
 80037fc:	d073      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x2b2>
 80037fe:	496b      	ldr	r1, [pc, #428]	@ (80039ac <HAL_ADC_ConfigChannel+0x378>)
 8003800:	428a      	cmp	r2, r1
 8003802:	d035      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x23c>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003804:	69d1      	ldr	r1, [r2, #28]
 8003806:	f041 0101 	orr.w	r1, r1, #1
 800380a:	61d1      	str	r1, [r2, #28]
}
 800380c:	e774      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_LOCK(hadc);
 800380e:	2002      	movs	r0, #2
}
 8003810:	b002      	add	sp, #8
 8003812:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003814:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8003816:	0684      	lsls	r4, r0, #26
 8003818:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 800381c:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8003820:	d017      	beq.n	8003852 <HAL_ADC_ConfigChannel+0x21e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003822:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003824:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003828:	4284      	cmp	r4, r0
 800382a:	d01c      	beq.n	8003866 <HAL_ADC_ConfigChannel+0x232>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800382c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800382e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003832:	4284      	cmp	r4, r0
 8003834:	d012      	beq.n	800385c <HAL_ADC_ConfigChannel+0x228>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003836:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003838:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800383c:	4284      	cmp	r4, r0
 800383e:	f47f af45 	bne.w	80036cc <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003842:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003844:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003848:	66d0      	str	r0, [r2, #108]	@ 0x6c
 800384a:	e73f      	b.n	80036cc <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800384c:	4a57      	ldr	r2, [pc, #348]	@ (80039ac <HAL_ADC_ConfigChannel+0x378>)
 800384e:	6892      	ldr	r2, [r2, #8]
 8003850:	e701      	b.n	8003656 <HAL_ADC_ConfigChannel+0x22>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003852:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8003854:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003858:	6610      	str	r0, [r2, #96]	@ 0x60
 800385a:	e7e2      	b.n	8003822 <HAL_ADC_ConfigChannel+0x1ee>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800385c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800385e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003862:	6690      	str	r0, [r2, #104]	@ 0x68
 8003864:	e7e7      	b.n	8003836 <HAL_ADC_ConfigChannel+0x202>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003866:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003868:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800386c:	6650      	str	r0, [r2, #100]	@ 0x64
 800386e:	e7dd      	b.n	800382c <HAL_ADC_ConfigChannel+0x1f8>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003870:	4952      	ldr	r1, [pc, #328]	@ (80039bc <HAL_ADC_ConfigChannel+0x388>)
 8003872:	428c      	cmp	r4, r1
 8003874:	f000 80b6 	beq.w	80039e4 <HAL_ADC_ConfigChannel+0x3b0>
 8003878:	4951      	ldr	r1, [pc, #324]	@ (80039c0 <HAL_ADC_ConfigChannel+0x38c>)
 800387a:	428c      	cmp	r4, r1
 800387c:	f000 80cc 	beq.w	8003a18 <HAL_ADC_ConfigChannel+0x3e4>
 8003880:	4950      	ldr	r1, [pc, #320]	@ (80039c4 <HAL_ADC_ConfigChannel+0x390>)
 8003882:	428c      	cmp	r4, r1
 8003884:	f000 80d5 	beq.w	8003a32 <HAL_ADC_ConfigChannel+0x3fe>
 8003888:	494f      	ldr	r1, [pc, #316]	@ (80039c8 <HAL_ADC_ConfigChannel+0x394>)
 800388a:	428c      	cmp	r4, r1
 800388c:	f000 80db 	beq.w	8003a46 <HAL_ADC_ConfigChannel+0x412>
 8003890:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003894:	3110      	adds	r1, #16
 8003896:	428c      	cmp	r4, r1
 8003898:	f000 80e1 	beq.w	8003a5e <HAL_ADC_ConfigChannel+0x42a>
 800389c:	494b      	ldr	r1, [pc, #300]	@ (80039cc <HAL_ADC_ConfigChannel+0x398>)
 800389e:	428c      	cmp	r4, r1
 80038a0:	f000 80f5 	beq.w	8003a8e <HAL_ADC_ConfigChannel+0x45a>
 80038a4:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 80038a8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80038ac:	428c      	cmp	r4, r1
 80038ae:	f000 8103 	beq.w	8003ab8 <HAL_ADC_ConfigChannel+0x484>
 80038b2:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80038b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038ba:	428c      	cmp	r4, r1
 80038bc:	f000 810a 	beq.w	8003ad4 <HAL_ADC_ConfigChannel+0x4a0>
 80038c0:	4943      	ldr	r1, [pc, #268]	@ (80039d0 <HAL_ADC_ConfigChannel+0x39c>)
 80038c2:	428c      	cmp	r4, r1
 80038c4:	d19e      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x1d0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	4a43      	ldr	r2, [pc, #268]	@ (80039d4 <HAL_ADC_ConfigChannel+0x3a0>)
 80038c8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	f000 80cc 	beq.w	8003a6a <HAL_ADC_ConfigChannel+0x436>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80038d2:	4836      	ldr	r0, [pc, #216]	@ (80039ac <HAL_ADC_ConfigChannel+0x378>)
  return __builtin_clz(value);
 80038d4:	fab2 f282 	clz	r2, r2
 80038d8:	2101      	movs	r1, #1
 80038da:	69c4      	ldr	r4, [r0, #28]
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	4322      	orrs	r2, r4
 80038e2:	61c2      	str	r2, [r0, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038e4:	e72e      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80038e6:	4935      	ldr	r1, [pc, #212]	@ (80039bc <HAL_ADC_ConfigChannel+0x388>)
 80038e8:	428c      	cmp	r4, r1
 80038ea:	d07b      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x3b0>
 80038ec:	4934      	ldr	r1, [pc, #208]	@ (80039c0 <HAL_ADC_ConfigChannel+0x38c>)
 80038ee:	428c      	cmp	r4, r1
 80038f0:	f000 8092 	beq.w	8003a18 <HAL_ADC_ConfigChannel+0x3e4>
 80038f4:	4933      	ldr	r1, [pc, #204]	@ (80039c4 <HAL_ADC_ConfigChannel+0x390>)
 80038f6:	428c      	cmp	r4, r1
 80038f8:	f000 809b 	beq.w	8003a32 <HAL_ADC_ConfigChannel+0x3fe>
 80038fc:	4932      	ldr	r1, [pc, #200]	@ (80039c8 <HAL_ADC_ConfigChannel+0x394>)
 80038fe:	428c      	cmp	r4, r1
 8003900:	f000 80a1 	beq.w	8003a46 <HAL_ADC_ConfigChannel+0x412>
 8003904:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003908:	3110      	adds	r1, #16
 800390a:	428c      	cmp	r4, r1
 800390c:	f000 80a1 	beq.w	8003a52 <HAL_ADC_ConfigChannel+0x41e>
 8003910:	492e      	ldr	r1, [pc, #184]	@ (80039cc <HAL_ADC_ConfigChannel+0x398>)
 8003912:	428c      	cmp	r4, r1
 8003914:	f000 80af 	beq.w	8003a76 <HAL_ADC_ConfigChannel+0x442>
 8003918:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 800391c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8003920:	428c      	cmp	r4, r1
 8003922:	f000 80bb 	beq.w	8003a9c <HAL_ADC_ConfigChannel+0x468>
 8003926:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800392a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800392e:	428c      	cmp	r4, r1
 8003930:	f000 80bb 	beq.w	8003aaa <HAL_ADC_ConfigChannel+0x476>
 8003934:	4928      	ldr	r1, [pc, #160]	@ (80039d8 <HAL_ADC_ConfigChannel+0x3a4>)
 8003936:	428c      	cmp	r4, r1
 8003938:	f000 80c5 	beq.w	8003ac6 <HAL_ADC_ConfigChannel+0x492>
 800393c:	4924      	ldr	r1, [pc, #144]	@ (80039d0 <HAL_ADC_ConfigChannel+0x39c>)
 800393e:	428c      	cmp	r4, r1
 8003940:	f47f af60 	bne.w	8003804 <HAL_ADC_ConfigChannel+0x1d0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <HAL_ADC_ConfigChannel+0x3a0>)
 8003946:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800394a:	2a00      	cmp	r2, #0
 800394c:	f000 8099 	beq.w	8003a82 <HAL_ADC_ConfigChannel+0x44e>
 8003950:	4815      	ldr	r0, [pc, #84]	@ (80039a8 <HAL_ADC_ConfigChannel+0x374>)
 8003952:	e7bf      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x2a0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003954:	022e      	lsls	r6, r5, #8
 8003956:	f53f aef5 	bmi.w	8003744 <HAL_ADC_ConfigChannel+0x110>
 800395a:	4282      	cmp	r2, r0
 800395c:	f47f aef2 	bne.w	8003744 <HAL_ADC_ConfigChannel+0x110>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003960:	688a      	ldr	r2, [r1, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003962:	481e      	ldr	r0, [pc, #120]	@ (80039dc <HAL_ADC_ConfigChannel+0x3a8>)
 8003964:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003968:	ea42 020c 	orr.w	r2, r2, ip
 800396c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003970:	608a      	str	r2, [r1, #8]
 8003972:	6802      	ldr	r2, [r0, #0]
 8003974:	491a      	ldr	r1, [pc, #104]	@ (80039e0 <HAL_ADC_ConfigChannel+0x3ac>)
 8003976:	0992      	lsrs	r2, r2, #6
 8003978:	fba1 1202 	umull	r1, r2, r1, r2
 800397c:	0992      	lsrs	r2, r2, #6
 800397e:	3201      	adds	r2, #1
 8003980:	0052      	lsls	r2, r2, #1
 8003982:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003984:	9a01      	ldr	r2, [sp, #4]
 8003986:	2a00      	cmp	r2, #0
 8003988:	f43f aedc 	beq.w	8003744 <HAL_ADC_ConfigChannel+0x110>
                wait_loop_index--;
 800398c:	9a01      	ldr	r2, [sp, #4]
 800398e:	3a01      	subs	r2, #1
 8003990:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003992:	9a01      	ldr	r2, [sp, #4]
 8003994:	2a00      	cmp	r2, #0
 8003996:	d1f9      	bne.n	800398c <HAL_ADC_ConfigChannel+0x358>
 8003998:	e6d4      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
 800399a:	bf00      	nop
 800399c:	000fffff 	.word	0x000fffff
 80039a0:	47ff0000 	.word	0x47ff0000
 80039a4:	40022300 	.word	0x40022300
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40022100 	.word	0x40022100
 80039b0:	cb840000 	.word	0xcb840000
 80039b4:	bac04000 	.word	0xbac04000
 80039b8:	cfb80000 	.word	0xcfb80000
 80039bc:	04300002 	.word	0x04300002
 80039c0:	08600004 	.word	0x08600004
 80039c4:	0c900008 	.word	0x0c900008
 80039c8:	10c00010 	.word	0x10c00010
 80039cc:	2a000400 	.word	0x2a000400
 80039d0:	4b840000 	.word	0x4b840000
 80039d4:	4fb80000 	.word	0x4fb80000
 80039d8:	43210000 	.word	0x43210000
 80039dc:	2400000c 	.word	0x2400000c
 80039e0:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	2101      	movs	r1, #1
 80039e6:	fa91 f0a1 	rbit	r0, r1
  if (value == 0U)
 80039ea:	b338      	cbz	r0, 8003a3c <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 80039ec:	fab0 f080 	clz	r0, r0
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80039f0:	69d4      	ldr	r4, [r2, #28]
 80039f2:	4081      	lsls	r1, r0
 80039f4:	4321      	orrs	r1, r4
 80039f6:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039f8:	e6a4      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039fa:	01ed      	lsls	r5, r5, #7
 80039fc:	f53f aea2 	bmi.w	8003744 <HAL_ADC_ConfigChannel+0x110>
 8003a00:	4282      	cmp	r2, r0
 8003a02:	f47f ae9f 	bne.w	8003744 <HAL_ADC_ConfigChannel+0x110>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a06:	688a      	ldr	r2, [r1, #8]
 8003a08:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003a0c:	ea42 020c 	orr.w	r2, r2, ip
 8003a10:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003a14:	608a      	str	r2, [r1, #8]
}
 8003a16:	e695      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	4932      	ldr	r1, [pc, #200]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x4b0>)
 8003a1a:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003a1e:	b169      	cbz	r1, 8003a3c <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8003a20:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003a24:	2001      	movs	r0, #1
 8003a26:	69d4      	ldr	r4, [r2, #28]
 8003a28:	fa00 f101 	lsl.w	r1, r0, r1
 8003a2c:	4321      	orrs	r1, r4
 8003a2e:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a30:	e688      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	492d      	ldr	r1, [pc, #180]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a34:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003a38:	2900      	cmp	r1, #0
 8003a3a:	d1f1      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x3ec>
 8003a3c:	69d1      	ldr	r1, [r2, #28]
 8003a3e:	f041 0101 	orr.w	r1, r1, #1
 8003a42:	61d1      	str	r1, [r2, #28]
 8003a44:	e67e      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	4929      	ldr	r1, [pc, #164]	@ (8003aec <HAL_ADC_ConfigChannel+0x4b8>)
 8003a48:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	d1e7      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x3ec>
 8003a50:	e7f4      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x408>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	4927      	ldr	r1, [pc, #156]	@ (8003af0 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a54:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d1e1      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x3ec>
 8003a5c:	e7ee      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x408>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	4a24      	ldr	r2, [pc, #144]	@ (8003af0 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a60:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	f47f af34 	bne.w	80038d2 <HAL_ADC_ConfigChannel+0x29e>
 8003a6a:	4922      	ldr	r1, [pc, #136]	@ (8003af4 <HAL_ADC_ConfigChannel+0x4c0>)
 8003a6c:	69ca      	ldr	r2, [r1, #28]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	61ca      	str	r2, [r1, #28]
 8003a74:	e666      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	4a20      	ldr	r2, [pc, #128]	@ (8003af8 <HAL_ADC_ConfigChannel+0x4c4>)
 8003a78:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	f47f af67 	bne.w	8003950 <HAL_ADC_ConfigChannel+0x31c>
 8003a82:	491e      	ldr	r1, [pc, #120]	@ (8003afc <HAL_ADC_ConfigChannel+0x4c8>)
 8003a84:	69ca      	ldr	r2, [r1, #28]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	61ca      	str	r2, [r1, #28]
 8003a8c:	e65a      	b.n	8003744 <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <HAL_ADC_ConfigChannel+0x4c4>)
 8003a90:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	f47f af1c 	bne.w	80038d2 <HAL_ADC_ConfigChannel+0x29e>
 8003a9a:	e7e6      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <HAL_ADC_ConfigChannel+0x4cc>)
 8003a9e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003aa2:	2a00      	cmp	r2, #0
 8003aa4:	f47f af54 	bne.w	8003950 <HAL_ADC_ConfigChannel+0x31c>
 8003aa8:	e7eb      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x44e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	4a16      	ldr	r2, [pc, #88]	@ (8003b04 <HAL_ADC_ConfigChannel+0x4d0>)
 8003aac:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003ab0:	2a00      	cmp	r2, #0
 8003ab2:	f47f af4d 	bne.w	8003950 <HAL_ADC_ConfigChannel+0x31c>
 8003ab6:	e7e4      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x44e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <HAL_ADC_ConfigChannel+0x4cc>)
 8003aba:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003abe:	2a00      	cmp	r2, #0
 8003ac0:	f47f af07 	bne.w	80038d2 <HAL_ADC_ConfigChannel+0x29e>
 8003ac4:	e7d1      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	4a10      	ldr	r2, [pc, #64]	@ (8003b08 <HAL_ADC_ConfigChannel+0x4d4>)
 8003ac8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	f47f af3f 	bne.w	8003950 <HAL_ADC_ConfigChannel+0x31c>
 8003ad2:	e7d6      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x44e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8003b04 <HAL_ADC_ConfigChannel+0x4d0>)
 8003ad6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003ada:	2a00      	cmp	r2, #0
 8003adc:	f47f aef9 	bne.w	80038d2 <HAL_ADC_ConfigChannel+0x29e>
 8003ae0:	e7c3      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x436>
 8003ae2:	bf00      	nop
 8003ae4:	19200040 	.word	0x19200040
 8003ae8:	1d500080 	.word	0x1d500080
 8003aec:	21800100 	.word	0x21800100
 8003af0:	25b00200 	.word	0x25b00200
 8003af4:	40022100 	.word	0x40022100
 8003af8:	2e300800 	.word	0x2e300800
 8003afc:	40022000 	.word	0x40022000
 8003b00:	32601000 	.word	0x32601000
 8003b04:	36902000 	.word	0x36902000
 8003b08:	47520000 	.word	0x47520000

08003b0c <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b14:	689a      	ldr	r2, [r3, #8]
{
 8003b16:	b570      	push	{r4, r5, r6, lr}
 8003b18:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b1a:	d101      	bne.n	8003b20 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b1c:	0716      	lsls	r6, r2, #28
 8003b1e:	d540      	bpl.n	8003ba2 <ADC_ConversionStop+0x96>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	0195      	lsls	r5, r2, #6
 8003b24:	d504      	bpl.n	8003b30 <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b26:	8aa0      	ldrh	r0, [r4, #20]
 8003b28:	f240 1201 	movw	r2, #257	@ 0x101
 8003b2c:	4290      	cmp	r0, r2
 8003b2e:	d03a      	beq.n	8003ba6 <ADC_ConversionStop+0x9a>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b30:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	d048      	beq.n	8003bc8 <ADC_ConversionStop+0xbc>
 8003b36:	0750      	lsls	r0, r2, #29
 8003b38:	d508      	bpl.n	8003b4c <ADC_ConversionStop+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	0792      	lsls	r2, r2, #30
 8003b3e:	d405      	bmi.n	8003b4c <ADC_ConversionStop+0x40>
  MODIFY_REG(ADCx->CR,
 8003b40:	6898      	ldr	r0, [r3, #8]
 8003b42:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <ADC_ConversionStop+0xec>)
 8003b44:	4002      	ands	r2, r0
 8003b46:	f042 0210 	orr.w	r2, r2, #16
 8003b4a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003b4c:	2901      	cmp	r1, #1
 8003b4e:	d039      	beq.n	8003bc4 <ADC_ConversionStop+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	0710      	lsls	r0, r2, #28
 8003b54:	d508      	bpl.n	8003b68 <ADC_ConversionStop+0x5c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	0792      	lsls	r2, r2, #30
 8003b5a:	d405      	bmi.n	8003b68 <ADC_ConversionStop+0x5c>
  MODIFY_REG(ADCx->CR,
 8003b5c:	6898      	ldr	r0, [r3, #8]
 8003b5e:	4a26      	ldr	r2, [pc, #152]	@ (8003bf8 <ADC_ConversionStop+0xec>)
 8003b60:	4002      	ands	r2, r0
 8003b62:	f042 0220 	orr.w	r2, r2, #32
 8003b66:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003b68:	2903      	cmp	r1, #3
 8003b6a:	d12b      	bne.n	8003bc4 <ADC_ConversionStop+0xb8>
 8003b6c:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b6e:	f7ff fcbf 	bl	80034f0 <HAL_GetTick>

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b72:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003b74:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	421d      	tst	r5, r3
 8003b7a:	d012      	beq.n	8003ba2 <ADC_ConversionStop+0x96>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b7c:	f7ff fcb8 	bl	80034f0 <HAL_GetTick>
 8003b80:	1b83      	subs	r3, r0, r6
 8003b82:	2b05      	cmp	r3, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b84:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b86:	d9f6      	bls.n	8003b76 <ADC_ConversionStop+0x6a>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	422a      	tst	r2, r5
 8003b8c:	d0f3      	beq.n	8003b76 <ADC_ConversionStop+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 8003b90:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	65a3      	str	r3, [r4, #88]	@ 0x58

  }

  /* Return HAL status */
  return HAL_OK;
}
 8003ba0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003ba2:	2000      	movs	r0, #0
}
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	0650      	lsls	r0, r2, #25
 8003baa:	d406      	bmi.n	8003bba <ADC_ConversionStop+0xae>
 8003bac:	4a13      	ldr	r2, [pc, #76]	@ (8003bfc <ADC_ConversionStop+0xf0>)
 8003bae:	e001      	b.n	8003bb4 <ADC_ConversionStop+0xa8>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bb0:	3a01      	subs	r2, #1
 8003bb2:	d0ec      	beq.n	8003b8e <ADC_ConversionStop+0x82>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	0649      	lsls	r1, r1, #25
 8003bb8:	d5fa      	bpl.n	8003bb0 <ADC_ConversionStop+0xa4>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003bba:	2240      	movs	r2, #64	@ 0x40
 8003bbc:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	0756      	lsls	r6, r2, #29
 8003bc2:	d40f      	bmi.n	8003be4 <ADC_ConversionStop+0xd8>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003bc4:	2504      	movs	r5, #4
 8003bc6:	e7d2      	b.n	8003b6e <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bc8:	0716      	lsls	r6, r2, #28
 8003bca:	d401      	bmi.n	8003bd0 <ADC_ConversionStop+0xc4>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003bcc:	2508      	movs	r5, #8
 8003bce:	e7ce      	b.n	8003b6e <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	0795      	lsls	r5, r2, #30
 8003bd4:	d4fa      	bmi.n	8003bcc <ADC_ConversionStop+0xc0>
  MODIFY_REG(ADCx->CR,
 8003bd6:	6899      	ldr	r1, [r3, #8]
 8003bd8:	4a07      	ldr	r2, [pc, #28]	@ (8003bf8 <ADC_ConversionStop+0xec>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	f042 0220 	orr.w	r2, r2, #32
 8003be0:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8003be2:	e7f3      	b.n	8003bcc <ADC_ConversionStop+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	0795      	lsls	r5, r2, #30
 8003be8:	d4ec      	bmi.n	8003bc4 <ADC_ConversionStop+0xb8>
  MODIFY_REG(ADCx->CR,
 8003bea:	6899      	ldr	r1, [r3, #8]
 8003bec:	4a02      	ldr	r2, [pc, #8]	@ (8003bf8 <ADC_ConversionStop+0xec>)
 8003bee:	400a      	ands	r2, r1
 8003bf0:	f042 0210 	orr.w	r2, r2, #16
 8003bf4:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003bf6:	e7e5      	b.n	8003bc4 <ADC_ConversionStop+0xb8>
 8003bf8:	7fffffc0 	.word	0x7fffffc0
 8003bfc:	000cdc00 	.word	0x000cdc00

08003c00 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c00:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	07d1      	lsls	r1, r2, #31
 8003c06:	d501      	bpl.n	8003c0c <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c08:	2000      	movs	r0, #0
}
 8003c0a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <ADC_Enable+0x84>)
 8003c10:	4211      	tst	r1, r2
{
 8003c12:	b570      	push	{r4, r5, r6, lr}
 8003c14:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c16:	d12a      	bne.n	8003c6e <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003c88 <ADC_Enable+0x88>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003c24:	f7ff fc64 	bl	80034f0 <HAL_GetTick>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c28:	4a18      	ldr	r2, [pc, #96]	@ (8003c8c <ADC_Enable+0x8c>)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c2a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c30:	06d2      	lsls	r2, r2, #27
 8003c32:	d002      	beq.n	8003c3a <ADC_Enable+0x3a>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c34:	4a16      	ldr	r2, [pc, #88]	@ (8003c90 <ADC_Enable+0x90>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d017      	beq.n	8003c6a <ADC_Enable+0x6a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	07d6      	lsls	r6, r2, #31
 8003c3e:	d414      	bmi.n	8003c6a <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8003c40:	4e11      	ldr	r6, [pc, #68]	@ (8003c88 <ADC_Enable+0x88>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	07d0      	lsls	r0, r2, #31
 8003c46:	d404      	bmi.n	8003c52 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	4032      	ands	r2, r6
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c52:	f7ff fc4d 	bl	80034f0 <HAL_GetTick>
 8003c56:	1b43      	subs	r3, r0, r5
 8003c58:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c5c:	d902      	bls.n	8003c64 <ADC_Enable+0x64>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	07d1      	lsls	r1, r2, #31
 8003c62:	d504      	bpl.n	8003c6e <ADC_Enable+0x6e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	07d2      	lsls	r2, r2, #31
 8003c68:	d5eb      	bpl.n	8003c42 <ADC_Enable+0x42>
  return HAL_OK;
 8003c6a:	2000      	movs	r0, #0
}
 8003c6c:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8003c70:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	f043 0310 	orr.w	r3, r3, #16
 8003c76:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
 8003c82:	bf00      	nop
 8003c84:	8000003f 	.word	0x8000003f
 8003c88:	7fffffc0 	.word	0x7fffffc0
 8003c8c:	40022300 	.word	0x40022300
 8003c90:	40022100 	.word	0x40022100

08003c94 <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c94:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <HAL_ADC_Start+0xc8>)
{
 8003c96:	b570      	push	{r4, r5, r6, lr}
 8003c98:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c9a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c9c:	689d      	ldr	r5, [r3, #8]
 8003c9e:	f015 0504 	ands.w	r5, r5, #4
 8003ca2:	d13f      	bne.n	8003d24 <HAL_ADC_Start+0x90>
    __HAL_LOCK(hadc);
 8003ca4:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003ca8:	4604      	mov	r4, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d03a      	beq.n	8003d24 <HAL_ADC_Start+0x90>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8003cb4:	f7ff ffa4 	bl	8003c00 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d135      	bne.n	8003d28 <HAL_ADC_Start+0x94>
      ADC_STATE_CLR_SET(hadc->State,
 8003cbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cbe:	f006 061f 	and.w	r6, r6, #31
 8003cc2:	4a27      	ldr	r2, [pc, #156]	@ (8003d60 <HAL_ADC_Start+0xcc>)
 8003cc4:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cc6:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ccc:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cce:	4a25      	ldr	r2, [pc, #148]	@ (8003d64 <HAL_ADC_Start+0xd0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d02c      	beq.n	8003d2e <HAL_ADC_Start+0x9a>
 8003cd4:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cd6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003cd8:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003cdc:	6562      	str	r2, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cde:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ce4:	d037      	beq.n	8003d56 <HAL_ADC_Start+0xc2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ce6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ce8:	f022 0206 	bic.w	r2, r2, #6
 8003cec:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cee:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cf0:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cf2:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cfc:	d01b      	beq.n	8003d36 <HAL_ADC_Start+0xa2>
 8003cfe:	f240 2221 	movw	r2, #545	@ 0x221
 8003d02:	40f2      	lsrs	r2, r6
 8003d04:	07d5      	lsls	r5, r2, #31
 8003d06:	d416      	bmi.n	8003d36 <HAL_ADC_Start+0xa2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d0e:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d10:	68cb      	ldr	r3, [r1, #12]
 8003d12:	019b      	lsls	r3, r3, #6
 8003d14:	d505      	bpl.n	8003d22 <HAL_ADC_Start+0x8e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d20:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003d24:	2002      	movs	r0, #2
}
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003d28:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d2e:	490e      	ldr	r1, [pc, #56]	@ (8003d68 <HAL_ADC_Start+0xd4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d30:	2e00      	cmp	r6, #0
 8003d32:	d1d4      	bne.n	8003cde <HAL_ADC_Start+0x4a>
 8003d34:	e7cf      	b.n	8003cd6 <HAL_ADC_Start+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	0192      	lsls	r2, r2, #6
 8003d3a:	d505      	bpl.n	8003d48 <HAL_ADC_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d3e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003d42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d46:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	4a08      	ldr	r2, [pc, #32]	@ (8003d6c <HAL_ADC_Start+0xd8>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	f042 0204 	orr.w	r2, r2, #4
 8003d52:	609a      	str	r2, [r3, #8]
}
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 8003d56:	65a2      	str	r2, [r4, #88]	@ 0x58
 8003d58:	e7c9      	b.n	8003cee <HAL_ADC_Start+0x5a>
 8003d5a:	bf00      	nop
 8003d5c:	40022300 	.word	0x40022300
 8003d60:	fffff0fe 	.word	0xfffff0fe
 8003d64:	40022100 	.word	0x40022100
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	7fffffc0 	.word	0x7fffffc0

08003d70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d70:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d72:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	0795      	lsls	r5, r2, #30
 8003d78:	d502      	bpl.n	8003d80 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d7a:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d7c:	2000      	movs	r0, #0
}
 8003d7e:	bd38      	pop	{r3, r4, r5, pc}
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	07d4      	lsls	r4, r2, #31
 8003d84:	d5fa      	bpl.n	8003d7c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	4604      	mov	r4, r0
 8003d8a:	f002 020d 	and.w	r2, r2, #13
 8003d8e:	2a01      	cmp	r2, #1
 8003d90:	d009      	beq.n	8003da6 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d92:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8003d94:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d96:	f043 0310 	orr.w	r3, r3, #16
 8003d9a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003da4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003da6:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003da8:	2103      	movs	r1, #3
 8003daa:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <ADC_Disable+0x70>)
 8003dac:	4002      	ands	r2, r0
 8003dae:	f042 0202 	orr.w	r2, r2, #2
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003db6:	f7ff fb9b 	bl	80034f0 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dba:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003dbc:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	07d9      	lsls	r1, r3, #31
 8003dc2:	d403      	bmi.n	8003dcc <ADC_Disable+0x5c>
 8003dc4:	e7da      	b.n	8003d7c <ADC_Disable+0xc>
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	07db      	lsls	r3, r3, #31
 8003dca:	d5d7      	bpl.n	8003d7c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dcc:	f7ff fb90 	bl	80034f0 <HAL_GetTick>
 8003dd0:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd2:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dd4:	2802      	cmp	r0, #2
 8003dd6:	d9f6      	bls.n	8003dc6 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	07d2      	lsls	r2, r2, #31
 8003ddc:	d5f3      	bpl.n	8003dc6 <ADC_Disable+0x56>
 8003dde:	e7d8      	b.n	8003d92 <ADC_Disable+0x22>
 8003de0:	7fffffc0 	.word	0x7fffffc0

08003de4 <HAL_ADC_DeInit>:
{
 8003de4:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
 8003de6:	2800      	cmp	r0, #0
 8003de8:	f000 80a6 	beq.w	8003f38 <HAL_ADC_DeInit+0x154>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003dec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003dee:	4604      	mov	r4, r0
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003df0:	2103      	movs	r1, #3
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	6543      	str	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003df8:	f7ff fe88 	bl	8003b0c <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003dfc:	6823      	ldr	r3, [r4, #0]
  if (tmp_hal_status == HAL_OK)
 8003dfe:	4605      	mov	r5, r0
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003e06:	60da      	str	r2, [r3, #12]
  if (tmp_hal_status == HAL_OK)
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	f000 808c 	beq.w	8003f26 <HAL_ADC_DeInit+0x142>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	4a4c      	ldr	r2, [pc, #304]	@ (8003f44 <HAL_ADC_DeInit+0x160>)
 8003e12:	400a      	ands	r2, r1
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003e14:	f240 71ff 	movw	r1, #2047	@ 0x7ff
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003e18:	605a      	str	r2, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003e1a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003e1c:	689a      	ldr	r2, [r3, #8]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003e1e:	494a      	ldr	r1, [pc, #296]	@ (8003f48 <HAL_ADC_DeInit+0x164>)
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003e20:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8003e24:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003e2c:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8003e34:	60da      	str	r2, [r3, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	4011      	ands	r1, r2
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003e42:	4a42      	ldr	r2, [pc, #264]	@ (8003f4c <HAL_ADC_DeInit+0x168>)
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003e44:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003e46:	6959      	ldr	r1, [r3, #20]
 8003e48:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 8003e4c:	6159      	str	r1, [r3, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003e4e:	6999      	ldr	r1, [r3, #24]
 8003e50:	f001 4178 	and.w	r1, r1, #4160749568	@ 0xf8000000
 8003e54:	6199      	str	r1, [r3, #24]
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8003e56:	6a19      	ldr	r1, [r3, #32]
 8003e58:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003e5c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8003e5e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e60:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003e64:	6259      	str	r1, [r3, #36]	@ 0x24
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8003e66:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003e6a:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003e6e:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8003e72:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8003e76:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003e7a:	f8c3 10b4 	str.w	r1, [r3, #180]	@ 0xb4
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003e7e:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8003e82:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003e86:	f8c3 10b8 	str.w	r1, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003e8a:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8003e8e:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003e92:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003e96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e98:	400a      	ands	r2, r1
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003e9a:	492d      	ldr	r1, [pc, #180]	@ (8003f50 <HAL_ADC_DeInit+0x16c>)
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	635a      	str	r2, [r3, #52]	@ 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea6:	400a      	ands	r2, r1
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003ea8:	492a      	ldr	r1, [pc, #168]	@ (8003f54 <HAL_ADC_DeInit+0x170>)
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eae:	4011      	ands	r1, r2
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003eb0:	2200      	movs	r2, #0
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003eb2:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003eb4:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8003eb6:	661a      	str	r2, [r3, #96]	@ 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003eb8:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003eba:	665a      	str	r2, [r3, #100]	@ 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8003ebc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003ebe:	669a      	str	r2, [r3, #104]	@ 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8003ec0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8003ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8003ec4:	4924      	ldr	r1, [pc, #144]	@ (8003f58 <HAL_ADC_DeInit+0x174>)
 8003ec6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003eca:	400a      	ands	r2, r1
 8003ecc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003ed0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003eda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003ede:	400a      	ands	r2, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ee0:	491e      	ldr	r1, [pc, #120]	@ (8003f5c <HAL_ADC_DeInit+0x178>)
 8003ee2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003ee6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003eea:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8003eee:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8003ef2:	688b      	ldr	r3, [r1, #8]
 8003ef4:	f013 0f01 	tst.w	r3, #1
 8003ef8:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_ADC_DeInit+0x17c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	d008      	beq.n	8003f10 <HAL_ADC_DeInit+0x12c>
  ADC_CLEAR_ERRORCODE(hadc);
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4628      	mov	r0, r5
  ADC_CLEAR_ERRORCODE(hadc);
 8003f02:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003f04:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hadc->State = HAL_ADC_STATE_RESET;
 8003f08:	6563      	str	r3, [r4, #84]	@ 0x54
  hadc->InjectionConfig.ContextQueue = 0;
 8003f0a:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
}
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	07db      	lsls	r3, r3, #31
 8003f12:	d4f4      	bmi.n	8003efe <HAL_ADC_DeInit+0x11a>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003f14:	4a13      	ldr	r2, [pc, #76]	@ (8003f64 <HAL_ADC_DeInit+0x180>)
    HAL_ADC_MspDeInit(hadc);
 8003f16:	4620      	mov	r0, r4
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003f18:	4b13      	ldr	r3, [pc, #76]	@ (8003f68 <HAL_ADC_DeInit+0x184>)
 8003f1a:	6891      	ldr	r1, [r2, #8]
 8003f1c:	400b      	ands	r3, r1
 8003f1e:	6093      	str	r3, [r2, #8]
    HAL_ADC_MspDeInit(hadc);
 8003f20:	f7ff f984 	bl	800322c <HAL_ADC_MspDeInit>
 8003f24:	e7eb      	b.n	8003efe <HAL_ADC_DeInit+0x11a>
    tmp_hal_status = ADC_Disable(hadc);
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7ff ff22 	bl	8003d70 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	b930      	cbnz	r0, 8003f3e <HAL_ADC_DeInit+0x15a>
      hadc->State = HAL_ADC_STATE_READY;
 8003f30:	2201      	movs	r2, #1
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003f32:	6823      	ldr	r3, [r4, #0]
      hadc->State = HAL_ADC_STATE_READY;
 8003f34:	6562      	str	r2, [r4, #84]	@ 0x54
 8003f36:	e76a      	b.n	8003e0e <HAL_ADC_DeInit+0x2a>
    return HAL_ERROR;
 8003f38:	2501      	movs	r5, #1
}
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	e765      	b.n	8003e0e <HAL_ADC_DeInit+0x2a>
 8003f42:	bf00      	nop
 8003f44:	fffff800 	.word	0xfffff800
 8003f48:	fc00f81c 	.word	0xfc00f81c
 8003f4c:	e0820830 	.word	0xe0820830
 8003f50:	e0820820 	.word	0xe0820820
 8003f54:	fffff820 	.word	0xfffff820
 8003f58:	fff00000 	.word	0xfff00000
 8003f5c:	40022000 	.word	0x40022000
 8003f60:	40022100 	.word	0x40022100
 8003f64:	40022300 	.word	0x40022300
 8003f68:	fe0030e0 	.word	0xfe0030e0

08003f6c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003f6c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d01b      	beq.n	8003fac <HAL_ADC_Stop+0x40>
 8003f74:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003f76:	2103      	movs	r1, #3
{
 8003f78:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003f7a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003f7e:	4604      	mov	r4, r0
 8003f80:	f7ff fdc4 	bl	8003b0c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003f84:	b118      	cbz	r0, 8003f8e <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8003f86:	2300      	movs	r3, #0
 8003f88:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003f8c:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f7ff feee 	bl	8003d70 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d1f6      	bne.n	8003f86 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8003f98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_ADC_Stop+0x44>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003faa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003fac:	2002      	movs	r0, #2
}
 8003fae:	4770      	bx	lr
 8003fb0:	ffffeefe 	.word	0xffffeefe

08003fb4 <ADC_ConfigureBoostMode>:
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fb4:	4b44      	ldr	r3, [pc, #272]	@ (80040c8 <ADC_ConfigureBoostMode+0x114>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
{
 8003fbc:	b510      	push	{r4, lr}
 8003fbe:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fc0:	d01b      	beq.n	8003ffa <ADC_ConfigureBoostMode+0x46>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003fc2:	f005 fbb3 	bl	800972c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003fc6:	6862      	ldr	r2, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003fc8:	4603      	mov	r3, r0
    switch (hadc->Init.ClockPrescaler)
 8003fca:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8003fce:	d070      	beq.n	80040b2 <ADC_ConfigureBoostMode+0xfe>
 8003fd0:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8003fd4:	d055      	beq.n	8004082 <ADC_ConfigureBoostMode+0xce>
 8003fd6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003fda:	d06a      	beq.n	80040b2 <ADC_ConfigureBoostMode+0xfe>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 8003fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80040cc <ADC_ConfigureBoostMode+0x118>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
  }
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003fde:	6821      	ldr	r1, [r4, #0]
  if (freq <= 6250000UL)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d920      	bls.n	8004026 <ADC_ConfigureBoostMode+0x72>
  else if (freq <= 12500000UL)
 8003fe4:	4a3a      	ldr	r2, [pc, #232]	@ (80040d0 <ADC_ConfigureBoostMode+0x11c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d944      	bls.n	8004074 <ADC_ConfigureBoostMode+0xc0>
  else if (freq <= 25000000UL)
 8003fea:	4a3a      	ldr	r2, [pc, #232]	@ (80040d4 <ADC_ConfigureBoostMode+0x120>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d957      	bls.n	80040a0 <ADC_ConfigureBoostMode+0xec>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ff0:	688b      	ldr	r3, [r1, #8]
 8003ff2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003ff6:	608b      	str	r3, [r1, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ff8:	bd10      	pop	{r4, pc}
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ffa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003ffe:	2100      	movs	r1, #0
 8004000:	f006 fde6 	bl	800abd0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8004004:	6862      	ldr	r2, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004006:	4603      	mov	r3, r0
    switch (hadc->Init.ClockPrescaler)
 8004008:	f5b2 1f10 	cmp.w	r2, #2359296	@ 0x240000
 800400c:	d059      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10e>
 800400e:	d90f      	bls.n	8004030 <ADC_ConfigureBoostMode+0x7c>
 8004010:	f5b2 1f20 	cmp.w	r2, #2621440	@ 0x280000
 8004014:	d03b      	beq.n	800408e <ADC_ConfigureBoostMode+0xda>
 8004016:	f5b2 1f30 	cmp.w	r2, #2883584	@ 0x2c0000
 800401a:	d1df      	bne.n	8003fdc <ADC_ConfigureBoostMode+0x28>
  if (freq <= 6250000UL)
 800401c:	4a2b      	ldr	r2, [pc, #172]	@ (80040cc <ADC_ConfigureBoostMode+0x118>)
 800401e:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
 8004022:	d326      	bcc.n	8004072 <ADC_ConfigureBoostMode+0xbe>
 8004024:	6821      	ldr	r1, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004026:	688b      	ldr	r3, [r1, #8]
 8004028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402c:	608b      	str	r3, [r1, #8]
}
 800402e:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 8004030:	f5b2 1fe0 	cmp.w	r2, #1835008	@ 0x1c0000
 8004034:	d03b      	beq.n	80040ae <ADC_ConfigureBoostMode+0xfa>
 8004036:	d904      	bls.n	8004042 <ADC_ConfigureBoostMode+0x8e>
 8004038:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800403c:	d1ce      	bne.n	8003fdc <ADC_ConfigureBoostMode+0x28>
        freq /= 32UL;
 800403e:	0943      	lsrs	r3, r0, #5
        break;
 8004040:	e7cc      	b.n	8003fdc <ADC_ConfigureBoostMode+0x28>
    switch (hadc->Init.ClockPrescaler)
 8004042:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8004046:	d006      	beq.n	8004056 <ADC_ConfigureBoostMode+0xa2>
 8004048:	d90a      	bls.n	8004060 <ADC_ConfigureBoostMode+0xac>
 800404a:	f5b2 1fa0 	cmp.w	r2, #1310720	@ 0x140000
 800404e:	d002      	beq.n	8004056 <ADC_ConfigureBoostMode+0xa2>
 8004050:	f5b2 1fc0 	cmp.w	r2, #1572864	@ 0x180000
 8004054:	d1c2      	bne.n	8003fdc <ADC_ConfigureBoostMode+0x28>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004056:	0c92      	lsrs	r2, r2, #18
 8004058:	0052      	lsls	r2, r2, #1
 800405a:	fbb3 f3f2 	udiv	r3, r3, r2
        break;
 800405e:	e7bd      	b.n	8003fdc <ADC_ConfigureBoostMode+0x28>
    switch (hadc->Init.ClockPrescaler)
 8004060:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8004064:	d0f7      	beq.n	8004056 <ADC_ConfigureBoostMode+0xa2>
 8004066:	f422 2100 	bic.w	r1, r2, #524288	@ 0x80000
 800406a:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 800406e:	d0f2      	beq.n	8004056 <ADC_ConfigureBoostMode+0xa2>
 8004070:	e7b4      	b.n	8003fdc <ADC_ConfigureBoostMode+0x28>
 8004072:	6821      	ldr	r1, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004074:	688b      	ldr	r3, [r1, #8]
 8004076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407e:	608b      	str	r3, [r1, #8]
}
 8004080:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 8004082:	0883      	lsrs	r3, r0, #2
  if (freq <= 6250000UL)
 8004084:	4a11      	ldr	r2, [pc, #68]	@ (80040cc <ADC_ConfigureBoostMode+0x118>)
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004086:	6821      	ldr	r1, [r4, #0]
  if (freq <= 6250000UL)
 8004088:	4293      	cmp	r3, r2
 800408a:	d9cc      	bls.n	8004026 <ADC_ConfigureBoostMode+0x72>
 800408c:	e7aa      	b.n	8003fe4 <ADC_ConfigureBoostMode+0x30>
 800408e:	4a0f      	ldr	r2, [pc, #60]	@ (80040cc <ADC_ConfigureBoostMode+0x118>)
        freq /= 128UL;
 8004090:	09c1      	lsrs	r1, r0, #7
  if (freq <= 6250000UL)
 8004092:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
 8004096:	d2c5      	bcs.n	8004024 <ADC_ConfigureBoostMode+0x70>
  else if (freq <= 12500000UL)
 8004098:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <ADC_ConfigureBoostMode+0x11c>)
 800409a:	4299      	cmp	r1, r3
 800409c:	d9e9      	bls.n	8004072 <ADC_ConfigureBoostMode+0xbe>
 800409e:	6821      	ldr	r1, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80040a0:	688b      	ldr	r3, [r1, #8]
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040aa:	608b      	str	r3, [r1, #8]
}
 80040ac:	bd10      	pop	{r4, pc}
        freq /= 16UL;
 80040ae:	0903      	lsrs	r3, r0, #4
        break;
 80040b0:	e794      	b.n	8003fdc <ADC_ConfigureBoostMode+0x28>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80040b2:	0c12      	lsrs	r2, r2, #16
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80040b4:	6821      	ldr	r1, [r4, #0]
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80040b6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (freq <= 6250000UL)
 80040ba:	4a04      	ldr	r2, [pc, #16]	@ (80040cc <ADC_ConfigureBoostMode+0x118>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d9b2      	bls.n	8004026 <ADC_ConfigureBoostMode+0x72>
 80040c0:	e790      	b.n	8003fe4 <ADC_ConfigureBoostMode+0x30>
        freq /= 64UL;
 80040c2:	0983      	lsrs	r3, r0, #6
        break;
 80040c4:	e78a      	b.n	8003fdc <ADC_ConfigureBoostMode+0x28>
 80040c6:	bf00      	nop
 80040c8:	40022300 	.word	0x40022300
 80040cc:	00bebc21 	.word	0x00bebc21
 80040d0:	017d7841 	.word	0x017d7841
 80040d4:	02faf081 	.word	0x02faf081

080040d8 <HAL_ADC_Init>:
{
 80040d8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80040da:	2300      	movs	r3, #0
{
 80040dc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80040de:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80040e0:	2800      	cmp	r0, #0
 80040e2:	f000 8098 	beq.w	8004216 <HAL_ADC_Init+0x13e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040e6:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80040e8:	4604      	mov	r4, r0
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	f000 8099 	beq.w	8004222 <HAL_ADC_Init+0x14a>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040f0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040f2:	6893      	ldr	r3, [r2, #8]
 80040f4:	0098      	lsls	r0, r3, #2
 80040f6:	d503      	bpl.n	8004100 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040f8:	6891      	ldr	r1, [r2, #8]
 80040fa:	4b60      	ldr	r3, [pc, #384]	@ (800427c <HAL_ADC_Init+0x1a4>)
 80040fc:	400b      	ands	r3, r1
 80040fe:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004100:	6893      	ldr	r3, [r2, #8]
 8004102:	00d9      	lsls	r1, r3, #3
 8004104:	d416      	bmi.n	8004134 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004106:	4b5e      	ldr	r3, [pc, #376]	@ (8004280 <HAL_ADC_Init+0x1a8>)
 8004108:	495e      	ldr	r1, [pc, #376]	@ (8004284 <HAL_ADC_Init+0x1ac>)
 800410a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800410c:	6890      	ldr	r0, [r2, #8]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	fba1 1303 	umull	r1, r3, r1, r3
 8004114:	495c      	ldr	r1, [pc, #368]	@ (8004288 <HAL_ADC_Init+0x1b0>)
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	4001      	ands	r1, r0
 800411a:	3301      	adds	r3, #1
 800411c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004120:	6091      	str	r1, [r2, #8]
 8004122:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004124:	9b01      	ldr	r3, [sp, #4]
 8004126:	b12b      	cbz	r3, 8004134 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8004128:	9b01      	ldr	r3, [sp, #4]
 800412a:	3b01      	subs	r3, #1
 800412c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800412e:	9b01      	ldr	r3, [sp, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f9      	bne.n	8004128 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004134:	6893      	ldr	r3, [r2, #8]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	d471      	bmi.n	800421e <HAL_ADC_Init+0x146>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800413c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413e:	f043 0310 	orr.w	r3, r3, #16
 8004142:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004144:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004146:	432b      	orrs	r3, r5
 8004148:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800414a:	6893      	ldr	r3, [r2, #8]
 800414c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004150:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004152:	d15c      	bne.n	800420e <HAL_ADC_Init+0x136>
 8004154:	06de      	lsls	r6, r3, #27
 8004156:	d45a      	bmi.n	800420e <HAL_ADC_Init+0x136>
    ADC_STATE_CLR_SET(hadc->State,
 8004158:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800415a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004164:	6893      	ldr	r3, [r2, #8]
 8004166:	07d8      	lsls	r0, r3, #31
 8004168:	d408      	bmi.n	800417c <HAL_ADC_Init+0xa4>
 800416a:	4b48      	ldr	r3, [pc, #288]	@ (800428c <HAL_ADC_Init+0x1b4>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f013 0f01 	tst.w	r3, #1
 8004172:	4b47      	ldr	r3, [pc, #284]	@ (8004290 <HAL_ADC_Init+0x1b8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	d101      	bne.n	800417c <HAL_ADC_Init+0xa4>
 8004178:	07d9      	lsls	r1, r3, #31
 800417a:	d565      	bpl.n	8004248 <HAL_ADC_Init+0x170>
                hadc->Init.Overrun                                                    |
 800417c:	68a0      	ldr	r0, [r4, #8]
 800417e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004180:	7f21      	ldrb	r1, [r4, #28]
                hadc->Init.Overrun                                                    |
 8004182:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004184:	7d60      	ldrb	r0, [r4, #21]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004186:	2901      	cmp	r1, #1
                hadc->Init.Overrun                                                    |
 8004188:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800418c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004190:	d055      	beq.n	800423e <HAL_ADC_Init+0x166>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004192:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004194:	b121      	cbz	r1, 80041a0 <HAL_ADC_Init+0xc8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004196:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800419a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800419c:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800419e:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041a0:	68d0      	ldr	r0, [r2, #12]
 80041a2:	493c      	ldr	r1, [pc, #240]	@ (8004294 <HAL_ADC_Init+0x1bc>)
 80041a4:	4001      	ands	r1, r0
 80041a6:	4319      	orrs	r1, r3
 80041a8:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041aa:	6893      	ldr	r3, [r2, #8]
 80041ac:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041b0:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041b2:	d11c      	bne.n	80041ee <HAL_ADC_Init+0x116>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	d41a      	bmi.n	80041ee <HAL_ADC_Init+0x116>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041b8:	68d0      	ldr	r0, [r2, #12]
 80041ba:	4b37      	ldr	r3, [pc, #220]	@ (8004298 <HAL_ADC_Init+0x1c0>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041bc:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041be:	4003      	ands	r3, r0
 80041c0:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 80041c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80041c6:	430b      	orrs	r3, r1
 80041c8:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80041ca:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d042      	beq.n	8004258 <HAL_ADC_Init+0x180>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041d2:	6913      	ldr	r3, [r2, #16]
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041da:	6913      	ldr	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80041dc:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80041e8:	f7ff fee4 	bl	8003fb4 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041ec:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d01c      	beq.n	800422e <HAL_ADC_Init+0x156>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041f4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80041f6:	f023 030f 	bic.w	r3, r3, #15
 80041fa:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80041fe:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004200:	f023 0303 	bic.w	r3, r3, #3
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6563      	str	r3, [r4, #84]	@ 0x54
}
 800420a:	b002      	add	sp, #8
 800420c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004210:	f043 0310 	orr.w	r3, r3, #16
 8004214:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8004216:	2501      	movs	r5, #1
}
 8004218:	4628      	mov	r0, r5
 800421a:	b002      	add	sp, #8
 800421c:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421e:	2500      	movs	r5, #0
 8004220:	e793      	b.n	800414a <HAL_ADC_Init+0x72>
    HAL_ADC_MspInit(hadc);
 8004222:	f7fe ffa9 	bl	8003178 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004226:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8004228:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 800422c:	e760      	b.n	80040f0 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800422e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004230:	69a3      	ldr	r3, [r4, #24]
 8004232:	f021 010f 	bic.w	r1, r1, #15
 8004236:	3b01      	subs	r3, #1
 8004238:	430b      	orrs	r3, r1
 800423a:	6313      	str	r3, [r2, #48]	@ 0x30
 800423c:	e7de      	b.n	80041fc <HAL_ADC_Init+0x124>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800423e:	6a21      	ldr	r1, [r4, #32]
 8004240:	3901      	subs	r1, #1
 8004242:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004246:	e7a4      	b.n	8004192 <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004248:	4914      	ldr	r1, [pc, #80]	@ (800429c <HAL_ADC_Init+0x1c4>)
 800424a:	6860      	ldr	r0, [r4, #4]
 800424c:	688b      	ldr	r3, [r1, #8]
 800424e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8004252:	4303      	orrs	r3, r0
 8004254:	608b      	str	r3, [r1, #8]
}
 8004256:	e791      	b.n	800417c <HAL_ADC_Init+0xa4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004258:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 800425c:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800425e:	3901      	subs	r1, #1
 8004260:	6910      	ldr	r0, [r2, #16]
 8004262:	4333      	orrs	r3, r6
 8004264:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004268:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800426a:	430b      	orrs	r3, r1
 800426c:	490c      	ldr	r1, [pc, #48]	@ (80042a0 <HAL_ADC_Init+0x1c8>)
 800426e:	4001      	ands	r1, r0
 8004270:	430b      	orrs	r3, r1
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6113      	str	r3, [r2, #16]
 8004278:	e7af      	b.n	80041da <HAL_ADC_Init+0x102>
 800427a:	bf00      	nop
 800427c:	5fffffc0 	.word	0x5fffffc0
 8004280:	2400000c 	.word	0x2400000c
 8004284:	053e2d63 	.word	0x053e2d63
 8004288:	6fffffc0 	.word	0x6fffffc0
 800428c:	40022000 	.word	0x40022000
 8004290:	40022100 	.word	0x40022100
 8004294:	fff0c003 	.word	0xfff0c003
 8004298:	ffffbffc 	.word	0xffffbffc
 800429c:	40022300 	.word	0x40022300
 80042a0:	fc00f81e 	.word	0xfc00f81e

080042a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042a6:	2300      	movs	r3, #0
{
 80042a8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80042aa:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ac:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d040      	beq.n	8004336 <HAL_ADCEx_Calibration_Start+0x92>
 80042b4:	2301      	movs	r3, #1
 80042b6:	4604      	mov	r4, r0
 80042b8:	460e      	mov	r6, r1
 80042ba:	4615      	mov	r5, r2
 80042bc:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042c0:	f7ff fd56 	bl	8003d70 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042c4:	b9e8      	cbnz	r0, 8004302 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042c6:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80042c8:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 80042cc:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <HAL_ADCEx_Calibration_Start+0x98>)
 80042ce:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80042d2:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80042d4:	403b      	ands	r3, r7
 80042d6:	f043 0302 	orr.w	r3, r3, #2
 80042da:	6563      	str	r3, [r4, #84]	@ 0x54
 80042dc:	4b18      	ldr	r3, [pc, #96]	@ (8004340 <HAL_ADCEx_Calibration_Start+0x9c>)
 80042de:	68ae      	ldr	r6, [r5, #8]
 80042e0:	4033      	ands	r3, r6
 80042e2:	4313      	orrs	r3, r2
 80042e4:	430b      	orrs	r3, r1
 80042e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042ea:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042ec:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042ee:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <HAL_ADCEx_Calibration_Start+0xa0>)
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db0f      	blt.n	8004314 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6563      	str	r3, [r4, #84]	@ 0x54
 8004300:	e003      	b.n	800430a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004304:	f043 0310 	orr.w	r3, r3, #16
 8004308:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800430a:	2300      	movs	r3, #0
 800430c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004310:	b003      	add	sp, #12
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8004314:	9b01      	ldr	r3, [sp, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	4293      	cmp	r3, r2
 800431e:	d3e5      	bcc.n	80042ec <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8004320:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8004322:	2200      	movs	r2, #0
        return HAL_ERROR;
 8004324:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004326:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800432a:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800432e:	f043 0310 	orr.w	r3, r3, #16
 8004332:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8004334:	e7ec      	b.n	8004310 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8004336:	2002      	movs	r0, #2
}
 8004338:	b003      	add	sp, #12
 800433a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800433c:	ffffeefd 	.word	0xffffeefd
 8004340:	3ffeffc0 	.word	0x3ffeffc0
 8004344:	25c3f800 	.word	0x25c3f800

08004348 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004348:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800434a:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 800434e:	b09a      	sub	sp, #104	@ 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004350:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8004352:	2a01      	cmp	r2, #1
 8004354:	d03c      	beq.n	80043d0 <HAL_ADCEx_MultiModeConfigChannel+0x88>
 8004356:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004358:	4d28      	ldr	r5, [pc, #160]	@ (80043fc <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800435a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800435c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800435e:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004360:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004362:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8004364:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004368:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800436a:	d008      	beq.n	800437e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800436c:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004372:	f041 0120 	orr.w	r1, r1, #32
 8004376:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004378:	b01a      	add	sp, #104	@ 0x68
 800437a:	bcf0      	pop	{r4, r5, r6, r7}
 800437c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800437e:	4a20      	ldr	r2, [pc, #128]	@ (8004400 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004380:	6890      	ldr	r0, [r2, #8]
 8004382:	0740      	lsls	r0, r0, #29
 8004384:	d50b      	bpl.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004386:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800438a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	f042 0220 	orr.w	r2, r2, #32
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8004398:	b01a      	add	sp, #104	@ 0x68
 800439a:	bcf0      	pop	{r4, r5, r6, r7}
 800439c:	4770      	bx	lr
 800439e:	68a0      	ldr	r0, [r4, #8]
 80043a0:	0745      	lsls	r5, r0, #29
 80043a2:	d4f1      	bmi.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a4:	b1c6      	cbz	r6, 80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80043a6:	4f17      	ldr	r7, [pc, #92]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80043a8:	684d      	ldr	r5, [r1, #4]
 80043aa:	68b8      	ldr	r0, [r7, #8]
 80043ac:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80043b0:	4328      	orrs	r0, r5
 80043b2:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043b4:	68a0      	ldr	r0, [r4, #8]
 80043b6:	6892      	ldr	r2, [r2, #8]
 80043b8:	07c0      	lsls	r0, r0, #31
 80043ba:	d41c      	bmi.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80043bc:	07d2      	lsls	r2, r2, #31
 80043be:	d41a      	bmi.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
        MODIFY_REG(tmpADC_Common->CCR,
 80043c0:	688a      	ldr	r2, [r1, #8]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	4910      	ldr	r1, [pc, #64]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80043c6:	4332      	orrs	r2, r6
 80043c8:	4001      	ands	r1, r0
 80043ca:	430a      	orrs	r2, r1
 80043cc:	60ba      	str	r2, [r7, #8]
 80043ce:	e012      	b.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 80043d0:	2002      	movs	r0, #2
}
 80043d2:	b01a      	add	sp, #104	@ 0x68
 80043d4:	bcf0      	pop	{r4, r5, r6, r7}
 80043d6:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80043d8:	480a      	ldr	r0, [pc, #40]	@ (8004404 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80043da:	6881      	ldr	r1, [r0, #8]
 80043dc:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 80043e0:	6081      	str	r1, [r0, #8]
 80043e2:	68a1      	ldr	r1, [r4, #8]
 80043e4:	6892      	ldr	r2, [r2, #8]
 80043e6:	07cd      	lsls	r5, r1, #31
 80043e8:	d405      	bmi.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80043ea:	07d4      	lsls	r4, r2, #31
 80043ec:	d403      	bmi.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043ee:	6881      	ldr	r1, [r0, #8]
 80043f0:	4a05      	ldr	r2, [pc, #20]	@ (8004408 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f6:	2000      	movs	r0, #0
 80043f8:	e7cb      	b.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80043fa:	bf00      	nop
 80043fc:	40022000 	.word	0x40022000
 8004400:	40022100 	.word	0x40022100
 8004404:	40022300 	.word	0x40022300
 8004408:	fffff0e0 	.word	0xfffff0e0

0800440c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800440c:	4906      	ldr	r1, [pc, #24]	@ (8004428 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800440e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004412:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8004414:	4b05      	ldr	r3, [pc, #20]	@ (800442c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004416:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004418:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800441c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004420:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8004422:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004424:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004426:	4770      	bx	lr
 8004428:	e000ed00 	.word	0xe000ed00
 800442c:	05fa0000 	.word	0x05fa0000

08004430 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004430:	4b1a      	ldr	r3, [pc, #104]	@ (800449c <HAL_NVIC_SetPriority+0x6c>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004438:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004442:	f1be 0f04 	cmp.w	lr, #4
 8004446:	bf28      	it	cs
 8004448:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444c:	f1bc 0f06 	cmp.w	ip, #6
 8004450:	d91a      	bls.n	8004488 <HAL_NVIC_SetPriority+0x58>
 8004452:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	fa03 f30c 	lsl.w	r3, r3, ip
 800445e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8004466:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	fa03 f30e 	lsl.w	r3, r3, lr
 800446c:	ea21 0303 	bic.w	r3, r1, r3
 8004470:	fa03 f30c 	lsl.w	r3, r3, ip
 8004474:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004478:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800447c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800447e:	db06      	blt.n	800448e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004480:	4a07      	ldr	r2, [pc, #28]	@ (80044a0 <HAL_NVIC_SetPriority+0x70>)
 8004482:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004484:	f85d fb04 	ldr.w	pc, [sp], #4
 8004488:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448a:	4694      	mov	ip, r2
 800448c:	e7e9      	b.n	8004462 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448e:	f000 000f 	and.w	r0, r0, #15
 8004492:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <HAL_NVIC_SetPriority+0x74>)
 8004494:	5413      	strb	r3, [r2, r0]
 8004496:	f85d fb04 	ldr.w	pc, [sp], #4
 800449a:	bf00      	nop
 800449c:	e000ed00 	.word	0xe000ed00
 80044a0:	e000e400 	.word	0xe000e400
 80044a4:	e000ed14 	.word	0xe000ed14

080044a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044a8:	2800      	cmp	r0, #0
 80044aa:	db07      	blt.n	80044bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ac:	2301      	movs	r3, #1
 80044ae:	f000 011f 	and.w	r1, r0, #31
 80044b2:	4a03      	ldr	r2, [pc, #12]	@ (80044c0 <HAL_NVIC_EnableIRQ+0x18>)
 80044b4:	0940      	lsrs	r0, r0, #5
 80044b6:	408b      	lsls	r3, r1
 80044b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000e100 	.word	0xe000e100

080044c4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044c4:	2800      	cmp	r0, #0
 80044c6:	db0c      	blt.n	80044e2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c8:	0943      	lsrs	r3, r0, #5
 80044ca:	2201      	movs	r2, #1
 80044cc:	f000 001f 	and.w	r0, r0, #31
 80044d0:	4904      	ldr	r1, [pc, #16]	@ (80044e4 <HAL_NVIC_DisableIRQ+0x20>)
 80044d2:	3320      	adds	r3, #32
 80044d4:	4082      	lsls	r2, r0
 80044d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80044da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044de:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80044e2:	4770      	bx	lr
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80044e8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80044ec:	4905      	ldr	r1, [pc, #20]	@ (8004504 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80044f0:	68ca      	ldr	r2, [r1, #12]
 80044f2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60cb      	str	r3, [r1, #12]
 80044fa:	f3bf 8f4f 	dsb	sy
    __NOP();
 80044fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004500:	e7fd      	b.n	80044fe <HAL_NVIC_SystemReset+0x16>
 8004502:	bf00      	nop
 8004504:	e000ed00 	.word	0xe000ed00
 8004508:	05fa0004 	.word	0x05fa0004

0800450c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800450c:	1e43      	subs	r3, r0, #1
 800450e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004512:	d301      	bcc.n	8004518 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004514:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004516:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004518:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800451c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451e:	4905      	ldr	r1, [pc, #20]	@ (8004534 <HAL_SYSTICK_Config+0x28>)
 8004520:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004524:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004526:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800452c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800452e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004538:	2800      	cmp	r0, #0
 800453a:	db08      	blt.n	800454e <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800453c:	0943      	lsrs	r3, r0, #5
 800453e:	2201      	movs	r2, #1
 8004540:	f000 001f 	and.w	r0, r0, #31
 8004544:	4902      	ldr	r1, [pc, #8]	@ (8004550 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8004546:	3360      	adds	r3, #96	@ 0x60
 8004548:	4082      	lsls	r2, r0
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100

08004554 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004554:	4936      	ldr	r1, [pc, #216]	@ (8004630 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004556:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004558:	6803      	ldr	r3, [r0, #0]
 800455a:	428b      	cmp	r3, r1
 800455c:	d033      	beq.n	80045c6 <DMA_CalcBaseAndBitshift+0x72>
 800455e:	3118      	adds	r1, #24
 8004560:	1a59      	subs	r1, r3, r1
 8004562:	fab1 f181 	clz	r1, r1
 8004566:	0949      	lsrs	r1, r1, #5
 8004568:	bb69      	cbnz	r1, 80045c6 <DMA_CalcBaseAndBitshift+0x72>
 800456a:	4832      	ldr	r0, [pc, #200]	@ (8004634 <DMA_CalcBaseAndBitshift+0xe0>)
 800456c:	4283      	cmp	r3, r0
 800456e:	d03e      	beq.n	80045ee <DMA_CalcBaseAndBitshift+0x9a>
 8004570:	3018      	adds	r0, #24
 8004572:	4283      	cmp	r3, r0
 8004574:	d03e      	beq.n	80045f4 <DMA_CalcBaseAndBitshift+0xa0>
 8004576:	3018      	adds	r0, #24
 8004578:	4283      	cmp	r3, r0
 800457a:	d034      	beq.n	80045e6 <DMA_CalcBaseAndBitshift+0x92>
 800457c:	3018      	adds	r0, #24
 800457e:	4283      	cmp	r3, r0
 8004580:	d03b      	beq.n	80045fa <DMA_CalcBaseAndBitshift+0xa6>
 8004582:	3018      	adds	r0, #24
 8004584:	4283      	cmp	r3, r0
 8004586:	d03e      	beq.n	8004606 <DMA_CalcBaseAndBitshift+0xb2>
 8004588:	3018      	adds	r0, #24
 800458a:	4283      	cmp	r3, r0
 800458c:	d02a      	beq.n	80045e4 <DMA_CalcBaseAndBitshift+0x90>
 800458e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8004592:	4283      	cmp	r3, r0
 8004594:	d035      	beq.n	8004602 <DMA_CalcBaseAndBitshift+0xae>
 8004596:	4928      	ldr	r1, [pc, #160]	@ (8004638 <DMA_CalcBaseAndBitshift+0xe4>)
 8004598:	428b      	cmp	r3, r1
 800459a:	d031      	beq.n	8004600 <DMA_CalcBaseAndBitshift+0xac>
 800459c:	3118      	adds	r1, #24
 800459e:	428b      	cmp	r3, r1
 80045a0:	d034      	beq.n	800460c <DMA_CalcBaseAndBitshift+0xb8>
 80045a2:	3118      	adds	r1, #24
 80045a4:	428b      	cmp	r3, r1
 80045a6:	d034      	beq.n	8004612 <DMA_CalcBaseAndBitshift+0xbe>
 80045a8:	3118      	adds	r1, #24
 80045aa:	428b      	cmp	r3, r1
 80045ac:	d034      	beq.n	8004618 <DMA_CalcBaseAndBitshift+0xc4>
 80045ae:	3118      	adds	r1, #24
 80045b0:	428b      	cmp	r3, r1
 80045b2:	d034      	beq.n	800461e <DMA_CalcBaseAndBitshift+0xca>
 80045b4:	3118      	adds	r1, #24
 80045b6:	428b      	cmp	r3, r1
 80045b8:	d034      	beq.n	8004624 <DMA_CalcBaseAndBitshift+0xd0>
 80045ba:	3118      	adds	r1, #24
 80045bc:	428b      	cmp	r3, r1
 80045be:	d034      	beq.n	800462a <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045c0:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 80045c4:	e011      	b.n	80045ea <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	491c      	ldr	r1, [pc, #112]	@ (800463c <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045ca:	481d      	ldr	r0, [pc, #116]	@ (8004640 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045cc:	3b10      	subs	r3, #16
 80045ce:	fba1 1303 	umull	r1, r3, r1, r3
{
 80045d2:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045d4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045d6:	4c1b      	ldr	r4, [pc, #108]	@ (8004644 <DMA_CalcBaseAndBitshift+0xf0>)
 80045d8:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 80045da:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045de:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 80045e2:	4770      	bx	lr
 80045e4:	2116      	movs	r1, #22
 80045e6:	4818      	ldr	r0, [pc, #96]	@ (8004648 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045e8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045ea:	6590      	str	r0, [r2, #88]	@ 0x58
}
 80045ec:	4770      	bx	lr
 80045ee:	2110      	movs	r1, #16
 80045f0:	4813      	ldr	r0, [pc, #76]	@ (8004640 <DMA_CalcBaseAndBitshift+0xec>)
 80045f2:	e7f9      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 80045f4:	2116      	movs	r1, #22
 80045f6:	4812      	ldr	r0, [pc, #72]	@ (8004640 <DMA_CalcBaseAndBitshift+0xec>)
 80045f8:	e7f6      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 80045fa:	2106      	movs	r1, #6
 80045fc:	4812      	ldr	r0, [pc, #72]	@ (8004648 <DMA_CalcBaseAndBitshift+0xf4>)
 80045fe:	e7f3      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 8004600:	2106      	movs	r1, #6
 8004602:	4812      	ldr	r0, [pc, #72]	@ (800464c <DMA_CalcBaseAndBitshift+0xf8>)
 8004604:	e7f0      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 8004606:	2110      	movs	r1, #16
 8004608:	480f      	ldr	r0, [pc, #60]	@ (8004648 <DMA_CalcBaseAndBitshift+0xf4>)
 800460a:	e7ed      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 800460c:	2110      	movs	r1, #16
 800460e:	480f      	ldr	r0, [pc, #60]	@ (800464c <DMA_CalcBaseAndBitshift+0xf8>)
 8004610:	e7ea      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 8004612:	2116      	movs	r1, #22
 8004614:	480d      	ldr	r0, [pc, #52]	@ (800464c <DMA_CalcBaseAndBitshift+0xf8>)
 8004616:	e7e7      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 8004618:	2100      	movs	r1, #0
 800461a:	480d      	ldr	r0, [pc, #52]	@ (8004650 <DMA_CalcBaseAndBitshift+0xfc>)
 800461c:	e7e4      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 800461e:	2106      	movs	r1, #6
 8004620:	480b      	ldr	r0, [pc, #44]	@ (8004650 <DMA_CalcBaseAndBitshift+0xfc>)
 8004622:	e7e1      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 8004624:	2110      	movs	r1, #16
 8004626:	480a      	ldr	r0, [pc, #40]	@ (8004650 <DMA_CalcBaseAndBitshift+0xfc>)
 8004628:	e7de      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 800462a:	2116      	movs	r1, #22
 800462c:	4808      	ldr	r0, [pc, #32]	@ (8004650 <DMA_CalcBaseAndBitshift+0xfc>)
 800462e:	e7db      	b.n	80045e8 <DMA_CalcBaseAndBitshift+0x94>
 8004630:	40020010 	.word	0x40020010
 8004634:	40020040 	.word	0x40020040
 8004638:	40020428 	.word	0x40020428
 800463c:	aaaaaaab 	.word	0xaaaaaaab
 8004640:	40020000 	.word	0x40020000
 8004644:	080104d0 	.word	0x080104d0
 8004648:	40020004 	.word	0x40020004
 800464c:	40020400 	.word	0x40020400
 8004650:	40020404 	.word	0x40020404

08004654 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004654:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004656:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004658:	4927      	ldr	r1, [pc, #156]	@ (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800465a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800465c:	4d27      	ldr	r5, [pc, #156]	@ (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800465e:	4c28      	ldr	r4, [pc, #160]	@ (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004660:	42aa      	cmp	r2, r5
 8004662:	bf18      	it	ne
 8004664:	429a      	cmpne	r2, r3
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	428a      	cmp	r2, r1
 800466e:	bf08      	it	eq
 8004670:	f043 0301 	orreq.w	r3, r3, #1
 8004674:	3128      	adds	r1, #40	@ 0x28
 8004676:	42a2      	cmp	r2, r4
 8004678:	bf08      	it	eq
 800467a:	f043 0301 	orreq.w	r3, r3, #1
 800467e:	3428      	adds	r4, #40	@ 0x28
 8004680:	428a      	cmp	r2, r1
 8004682:	bf08      	it	eq
 8004684:	f043 0301 	orreq.w	r3, r3, #1
 8004688:	3128      	adds	r1, #40	@ 0x28
 800468a:	42a2      	cmp	r2, r4
 800468c:	bf08      	it	eq
 800468e:	f043 0301 	orreq.w	r3, r3, #1
 8004692:	428a      	cmp	r2, r1
 8004694:	bf08      	it	eq
 8004696:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800469a:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800469c:	b913      	cbnz	r3, 80046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800469e:	4b19      	ldr	r3, [pc, #100]	@ (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d112      	bne.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046a4:	f1a1 0308 	sub.w	r3, r1, #8
 80046a8:	4917      	ldr	r1, [pc, #92]	@ (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046aa:	4a18      	ldr	r2, [pc, #96]	@ (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046ac:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046b0:	2101      	movs	r1, #1
 80046b2:	4c17      	ldr	r4, [pc, #92]	@ (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046b4:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046b8:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046bc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046be:	4099      	lsls	r1, r3
 80046c0:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046c2:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046c6:	bc30      	pop	{r4, r5}
 80046c8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046ca:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046ce:	4911      	ldr	r1, [pc, #68]	@ (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046d0:	4c11      	ldr	r4, [pc, #68]	@ (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046d2:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046d4:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046d8:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046da:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046de:	d800      	bhi.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80046e0:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046e2:	4a0e      	ldr	r2, [pc, #56]	@ (800471c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046e4:	f003 041f 	and.w	r4, r3, #31
 80046e8:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046ea:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046ec:	40a1      	lsls	r1, r4
 80046ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046f0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046f2:	e7e5      	b.n	80046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80046f4:	58025408 	.word	0x58025408
 80046f8:	58025430 	.word	0x58025430
 80046fc:	5802541c 	.word	0x5802541c
 8004700:	58025444 	.word	0x58025444
 8004704:	58025494 	.word	0x58025494
 8004708:	cccccccd 	.word	0xcccccccd
 800470c:	16009600 	.word	0x16009600
 8004710:	58025880 	.word	0x58025880
 8004714:	bffdfbf0 	.word	0xbffdfbf0
 8004718:	aaaaaaab 	.word	0xaaaaaaab
 800471c:	10008200 	.word	0x10008200
 8004720:	40020880 	.word	0x40020880

08004724 <HAL_DMA_Init>:
{
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	4605      	mov	r5, r0
 800472a:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800472c:	f7fe fee0 	bl	80034f0 <HAL_GetTick>
  if(hdma == NULL)
 8004730:	2d00      	cmp	r5, #0
 8004732:	f000 8237 	beq.w	8004ba4 <HAL_DMA_Init+0x480>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004736:	4e8e      	ldr	r6, [pc, #568]	@ (8004970 <HAL_DMA_Init+0x24c>)
 8004738:	4607      	mov	r7, r0
 800473a:	682c      	ldr	r4, [r5, #0]
 800473c:	4b8d      	ldr	r3, [pc, #564]	@ (8004974 <HAL_DMA_Init+0x250>)
 800473e:	429c      	cmp	r4, r3
 8004740:	bf18      	it	ne
 8004742:	42b4      	cmpne	r4, r6
 8004744:	bf0c      	ite	eq
 8004746:	2601      	moveq	r6, #1
 8004748:	2600      	movne	r6, #0
 800474a:	f040 8129 	bne.w	80049a0 <HAL_DMA_Init+0x27c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004754:	2300      	movs	r3, #0
 8004756:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	e006      	b.n	8004772 <HAL_DMA_Init+0x4e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004764:	f7fe fec4 	bl	80034f0 <HAL_GetTick>
 8004768:	1bc0      	subs	r0, r0, r7
 800476a:	2805      	cmp	r0, #5
 800476c:	f200 8215 	bhi.w	8004b9a <HAL_DMA_Init+0x476>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004770:	682c      	ldr	r4, [r5, #0]
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	07de      	lsls	r6, r3, #31
 8004776:	d4f5      	bmi.n	8004764 <HAL_DMA_Init+0x40>
    registerValue |=  hdma->Init.Direction           |
 8004778:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 800477e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004780:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004782:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004784:	430b      	orrs	r3, r1
 8004786:	6969      	ldr	r1, [r5, #20]
 8004788:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478a:	69e9      	ldr	r1, [r5, #28]
 800478c:	4313      	orrs	r3, r2
 800478e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004790:	4979      	ldr	r1, [pc, #484]	@ (8004978 <HAL_DMA_Init+0x254>)
 8004792:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004794:	6a28      	ldr	r0, [r5, #32]
 8004796:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 8004798:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800479a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800479c:	2904      	cmp	r1, #4
 800479e:	d103      	bne.n	80047a8 <HAL_DMA_Init+0x84>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047a0:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 80047a4:	4330      	orrs	r0, r6
 80047a6:	4303      	orrs	r3, r0
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80047a8:	6868      	ldr	r0, [r5, #4]
 80047aa:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 80047ae:	2e1f      	cmp	r6, #31
 80047b0:	f240 81fc 	bls.w	8004bac <HAL_DMA_Init+0x488>
 80047b4:	f1a0 064f 	sub.w	r6, r0, #79	@ 0x4f
 80047b8:	2e03      	cmp	r6, #3
 80047ba:	f200 820e 	bhi.w	8004bda <HAL_DMA_Init+0x4b6>
        registerValue |= DMA_SxCR_TRBUFF;
 80047be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047c2:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047c4:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047c6:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047c8:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80047cc:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047d0:	d10d      	bne.n	80047ee <HAL_DMA_Init+0xca>
      registerValue |= hdma->Init.FIFOThreshold;
 80047d2:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047d4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80047d6:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047d8:	b148      	cbz	r0, 80047ee <HAL_DMA_Init+0xca>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047da:	2a00      	cmp	r2, #0
 80047dc:	f040 81ec 	bne.w	8004bb8 <HAL_DMA_Init+0x494>
    switch (hdma->Init.FIFOThreshold)
 80047e0:	2901      	cmp	r1, #1
 80047e2:	f000 820d 	beq.w	8004c00 <HAL_DMA_Init+0x4dc>
 80047e6:	f031 0202 	bics.w	r2, r1, #2
 80047ea:	f000 81ed 	beq.w	8004bc8 <HAL_DMA_Init+0x4a4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80047ee:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047f0:	4628      	mov	r0, r5
 80047f2:	f7ff feaf 	bl	8004554 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047f6:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80047f8:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047fa:	4e5e      	ldr	r6, [pc, #376]	@ (8004974 <HAL_DMA_Init+0x250>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047fc:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004800:	4f5e      	ldr	r7, [pc, #376]	@ (800497c <HAL_DMA_Init+0x258>)
 8004802:	495f      	ldr	r1, [pc, #380]	@ (8004980 <HAL_DMA_Init+0x25c>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004804:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004806:	4a5f      	ldr	r2, [pc, #380]	@ (8004984 <HAL_DMA_Init+0x260>)
 8004808:	1a61      	subs	r1, r4, r1
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800480c:	1aa2      	subs	r2, r4, r2
 800480e:	4b58      	ldr	r3, [pc, #352]	@ (8004970 <HAL_DMA_Init+0x24c>)
 8004810:	fab1 f181 	clz	r1, r1
 8004814:	485c      	ldr	r0, [pc, #368]	@ (8004988 <HAL_DMA_Init+0x264>)
 8004816:	fab2 f282 	clz	r2, r2
 800481a:	429c      	cmp	r4, r3
 800481c:	bf18      	it	ne
 800481e:	42b4      	cmpne	r4, r6
 8004820:	eba4 0307 	sub.w	r3, r4, r7
 8004824:	eba4 0900 	sub.w	r9, r4, r0
 8004828:	f100 0014 	add.w	r0, r0, #20
 800482c:	fab3 f383 	clz	r3, r3
 8004830:	bf08      	it	eq
 8004832:	2601      	moveq	r6, #1
 8004834:	eba4 0a00 	sub.w	sl, r4, r0
 8004838:	fab9 f989 	clz	r9, r9
 800483c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004840:	bf18      	it	ne
 8004842:	2600      	movne	r6, #0
 8004844:	faba fa8a 	clz	sl, sl
 8004848:	0952      	lsrs	r2, r2, #5
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	0949      	lsrs	r1, r1, #5
 800484e:	4b4f      	ldr	r3, [pc, #316]	@ (800498c <HAL_DMA_Init+0x268>)
 8004850:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004854:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8004858:	eba4 0b03 	sub.w	fp, r4, r3
 800485c:	3328      	adds	r3, #40	@ 0x28
 800485e:	eba4 0803 	sub.w	r8, r4, r3
 8004862:	3328      	adds	r3, #40	@ 0x28
 8004864:	fabb fb8b 	clz	fp, fp
 8004868:	1ae3      	subs	r3, r4, r3
 800486a:	fab8 f888 	clz	r8, r8
 800486e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	430b      	orrs	r3, r1
 800487e:	ea4b 0b03 	orr.w	fp, fp, r3
 8004882:	9b00      	ldr	r3, [sp, #0]
 8004884:	ea4a 0a0b 	orr.w	sl, sl, fp
 8004888:	ea49 090a 	orr.w	r9, r9, sl
 800488c:	ea48 0809 	orr.w	r8, r8, r9
 8004890:	ea43 0708 	orr.w	r7, r3, r8
 8004894:	4317      	orrs	r7, r2
 8004896:	4a3e      	ldr	r2, [pc, #248]	@ (8004990 <HAL_DMA_Init+0x26c>)
 8004898:	ea47 0306 	orr.w	r3, r7, r6
 800489c:	4294      	cmp	r4, r2
 800489e:	bf08      	it	eq
 80048a0:	f043 0301 	orreq.w	r3, r3, #1
 80048a4:	3218      	adds	r2, #24
 80048a6:	4294      	cmp	r4, r2
 80048a8:	bf08      	it	eq
 80048aa:	f043 0301 	orreq.w	r3, r3, #1
 80048ae:	3218      	adds	r2, #24
 80048b0:	4294      	cmp	r4, r2
 80048b2:	bf08      	it	eq
 80048b4:	f043 0301 	orreq.w	r3, r3, #1
 80048b8:	3218      	adds	r2, #24
 80048ba:	4294      	cmp	r4, r2
 80048bc:	bf08      	it	eq
 80048be:	f043 0301 	orreq.w	r3, r3, #1
 80048c2:	3218      	adds	r2, #24
 80048c4:	4294      	cmp	r4, r2
 80048c6:	bf08      	it	eq
 80048c8:	f043 0301 	orreq.w	r3, r3, #1
 80048cc:	3218      	adds	r2, #24
 80048ce:	4294      	cmp	r4, r2
 80048d0:	bf08      	it	eq
 80048d2:	f043 0301 	orreq.w	r3, r3, #1
 80048d6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80048da:	4294      	cmp	r4, r2
 80048dc:	bf08      	it	eq
 80048de:	f043 0301 	orreq.w	r3, r3, #1
 80048e2:	3218      	adds	r2, #24
 80048e4:	4294      	cmp	r4, r2
 80048e6:	bf08      	it	eq
 80048e8:	f043 0301 	orreq.w	r3, r3, #1
 80048ec:	3218      	adds	r2, #24
 80048ee:	4294      	cmp	r4, r2
 80048f0:	bf08      	it	eq
 80048f2:	f043 0301 	orreq.w	r3, r3, #1
 80048f6:	3218      	adds	r2, #24
 80048f8:	4294      	cmp	r4, r2
 80048fa:	bf08      	it	eq
 80048fc:	f043 0301 	orreq.w	r3, r3, #1
 8004900:	3218      	adds	r2, #24
 8004902:	4294      	cmp	r4, r2
 8004904:	bf08      	it	eq
 8004906:	f043 0301 	orreq.w	r3, r3, #1
 800490a:	3218      	adds	r2, #24
 800490c:	4294      	cmp	r4, r2
 800490e:	bf08      	it	eq
 8004910:	f043 0301 	orreq.w	r3, r3, #1
 8004914:	3218      	adds	r2, #24
 8004916:	4294      	cmp	r4, r2
 8004918:	bf08      	it	eq
 800491a:	f043 0301 	orreq.w	r3, r3, #1
 800491e:	b91b      	cbnz	r3, 8004928 <HAL_DMA_Init+0x204>
 8004920:	4b1c      	ldr	r3, [pc, #112]	@ (8004994 <HAL_DMA_Init+0x270>)
 8004922:	429c      	cmp	r4, r3
 8004924:	f040 8130 	bne.w	8004b88 <HAL_DMA_Init+0x464>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004928:	4628      	mov	r0, r5
 800492a:	f7ff fe93 	bl	8004654 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800492e:	68ab      	ldr	r3, [r5, #8]
 8004930:	2b80      	cmp	r3, #128	@ 0x80
 8004932:	f000 811e 	beq.w	8004b72 <HAL_DMA_Init+0x44e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004936:	686b      	ldr	r3, [r5, #4]
 8004938:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800493a:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800493c:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800493e:	600a      	str	r2, [r1, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004940:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004942:	e9d5 1019 	ldrd	r1, r0, [r5, #100]	@ 0x64
 8004946:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004948:	f200 811a 	bhi.w	8004b80 <HAL_DMA_Init+0x45c>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800494c:	1e50      	subs	r0, r2, #1
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800494e:	2f00      	cmp	r7, #0
 8004950:	f000 815b 	beq.w	8004c0a <HAL_DMA_Init+0x4e6>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <HAL_DMA_Init+0x274>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004956:	4911      	ldr	r1, [pc, #68]	@ (800499c <HAL_DMA_Init+0x278>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800495c:	2301      	movs	r3, #1
 800495e:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004960:	2000      	movs	r0, #0
 8004962:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004966:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004968:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	e10c      	b.n	8004b88 <HAL_DMA_Init+0x464>
 800496e:	bf00      	nop
 8004970:	40020010 	.word	0x40020010
 8004974:	40020028 	.word	0x40020028
 8004978:	fe10803f 	.word	0xfe10803f
 800497c:	58025494 	.word	0x58025494
 8004980:	58025444 	.word	0x58025444
 8004984:	5802541c 	.word	0x5802541c
 8004988:	5802546c 	.word	0x5802546c
 800498c:	58025408 	.word	0x58025408
 8004990:	40020040 	.word	0x40020040
 8004994:	400204b8 	.word	0x400204b8
 8004998:	1600963f 	.word	0x1600963f
 800499c:	58025940 	.word	0x58025940
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049a0:	3318      	adds	r3, #24
 80049a2:	429c      	cmp	r4, r3
 80049a4:	f43f aed3 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049a8:	3318      	adds	r3, #24
 80049aa:	429c      	cmp	r4, r3
 80049ac:	f43f aecf 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049b0:	3318      	adds	r3, #24
 80049b2:	429c      	cmp	r4, r3
 80049b4:	f43f aecb 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049b8:	3318      	adds	r3, #24
 80049ba:	429c      	cmp	r4, r3
 80049bc:	f43f aec7 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049c0:	3318      	adds	r3, #24
 80049c2:	429c      	cmp	r4, r3
 80049c4:	f43f aec3 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049c8:	3318      	adds	r3, #24
 80049ca:	429c      	cmp	r4, r3
 80049cc:	f43f aebf 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049d0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80049d4:	429c      	cmp	r4, r3
 80049d6:	f43f aeba 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049da:	3318      	adds	r3, #24
 80049dc:	429c      	cmp	r4, r3
 80049de:	f43f aeb6 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049e2:	3318      	adds	r3, #24
 80049e4:	429c      	cmp	r4, r3
 80049e6:	f43f aeb2 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049ea:	3318      	adds	r3, #24
 80049ec:	429c      	cmp	r4, r3
 80049ee:	f43f aeae 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049f2:	3318      	adds	r3, #24
 80049f4:	429c      	cmp	r4, r3
 80049f6:	f43f aeaa 	beq.w	800474e <HAL_DMA_Init+0x2a>
 80049fa:	3318      	adds	r3, #24
 80049fc:	429c      	cmp	r4, r3
 80049fe:	f43f aea6 	beq.w	800474e <HAL_DMA_Init+0x2a>
 8004a02:	3318      	adds	r3, #24
 8004a04:	429c      	cmp	r4, r3
 8004a06:	f43f aea2 	beq.w	800474e <HAL_DMA_Init+0x2a>
 8004a0a:	3318      	adds	r3, #24
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	f43f ae9e 	beq.w	800474e <HAL_DMA_Init+0x2a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a12:	4b84      	ldr	r3, [pc, #528]	@ (8004c24 <HAL_DMA_Init+0x500>)
 8004a14:	4884      	ldr	r0, [pc, #528]	@ (8004c28 <HAL_DMA_Init+0x504>)
 8004a16:	eba4 0b03 	sub.w	fp, r4, r3
 8004a1a:	4b84      	ldr	r3, [pc, #528]	@ (8004c2c <HAL_DMA_Init+0x508>)
 8004a1c:	4a84      	ldr	r2, [pc, #528]	@ (8004c30 <HAL_DMA_Init+0x50c>)
 8004a1e:	429c      	cmp	r4, r3
 8004a20:	bf18      	it	ne
 8004a22:	4284      	cmpne	r4, r0
 8004a24:	f103 0314 	add.w	r3, r3, #20
 8004a28:	fabb fb8b 	clz	fp, fp
 8004a2c:	eba4 0202 	sub.w	r2, r4, r2
 8004a30:	bf0c      	ite	eq
 8004a32:	2001      	moveq	r0, #1
 8004a34:	2000      	movne	r0, #0
 8004a36:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004a3a:	fab2 f282 	clz	r2, r2
 8004a3e:	429c      	cmp	r4, r3
 8004a40:	bf08      	it	eq
 8004a42:	f040 0001 	orreq.w	r0, r0, #1
 8004a46:	3314      	adds	r3, #20
 8004a48:	497a      	ldr	r1, [pc, #488]	@ (8004c34 <HAL_DMA_Init+0x510>)
 8004a4a:	0952      	lsrs	r2, r2, #5
 8004a4c:	429c      	cmp	r4, r3
 8004a4e:	bf08      	it	eq
 8004a50:	f040 0001 	orreq.w	r0, r0, #1
 8004a54:	3314      	adds	r3, #20
 8004a56:	1a61      	subs	r1, r4, r1
 8004a58:	4f77      	ldr	r7, [pc, #476]	@ (8004c38 <HAL_DMA_Init+0x514>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	bf08      	it	eq
 8004a5e:	f040 0001 	orreq.w	r0, r0, #1
 8004a62:	3314      	adds	r3, #20
 8004a64:	fab1 f181 	clz	r1, r1
 8004a68:	eba4 0907 	sub.w	r9, r4, r7
 8004a6c:	429c      	cmp	r4, r3
 8004a6e:	bf08      	it	eq
 8004a70:	f040 0001 	orreq.w	r0, r0, #1
 8004a74:	3314      	adds	r3, #20
 8004a76:	3714      	adds	r7, #20
 8004a78:	0949      	lsrs	r1, r1, #5
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	bf08      	it	eq
 8004a7e:	f040 0001 	orreq.w	r0, r0, #1
 8004a82:	3314      	adds	r3, #20
 8004a84:	eba4 0a07 	sub.w	sl, r4, r7
 8004a88:	fab9 f989 	clz	r9, r9
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	bf08      	it	eq
 8004a90:	f040 0001 	orreq.w	r0, r0, #1
 8004a94:	4b69      	ldr	r3, [pc, #420]	@ (8004c3c <HAL_DMA_Init+0x518>)
 8004a96:	3714      	adds	r7, #20
 8004a98:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004a9c:	eba4 0803 	sub.w	r8, r4, r3
 8004aa0:	ea4b 0000 	orr.w	r0, fp, r0
 8004aa4:	3328      	adds	r3, #40	@ 0x28
 8004aa6:	faba fa8a 	clz	sl, sl
 8004aaa:	fab8 f888 	clz	r8, r8
 8004aae:	4310      	orrs	r0, r2
 8004ab0:	1ae3      	subs	r3, r4, r3
 8004ab2:	1be7      	subs	r7, r4, r7
 8004ab4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004ab8:	fab3 f383 	clz	r3, r3
 8004abc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8004ac0:	ea48 0000 	orr.w	r0, r8, r0
 8004ac4:	fab7 f787 	clz	r7, r7
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	4308      	orrs	r0, r1
 8004acc:	097f      	lsrs	r7, r7, #5
 8004ace:	4318      	orrs	r0, r3
 8004ad0:	9700      	str	r7, [sp, #0]
 8004ad2:	ea49 0000 	orr.w	r0, r9, r0
 8004ad6:	ea5a 0000 	orrs.w	r0, sl, r0
 8004ada:	d102      	bne.n	8004ae2 <HAL_DMA_Init+0x3be>
 8004adc:	2f00      	cmp	r7, #0
 8004ade:	f000 809b 	beq.w	8004c18 <HAL_DMA_Init+0x4f4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004ae8:	2000      	movs	r0, #0
 8004aea:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004aee:	4854      	ldr	r0, [pc, #336]	@ (8004c40 <HAL_DMA_Init+0x51c>)
 8004af0:	4607      	mov	r7, r0
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004af2:	6820      	ldr	r0, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004af4:	4038      	ands	r0, r7
 8004af6:	4607      	mov	r7, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004af8:	68a8      	ldr	r0, [r5, #8]
 8004afa:	2840      	cmp	r0, #64	@ 0x40
 8004afc:	f000 808a 	beq.w	8004c14 <HAL_DMA_Init+0x4f0>
 8004b00:	f1a0 0080 	sub.w	r0, r0, #128	@ 0x80
 8004b04:	fab0 f080 	clz	r0, r0
 8004b08:	0940      	lsrs	r0, r0, #5
 8004b0a:	0380      	lsls	r0, r0, #14
 8004b0c:	9301      	str	r3, [sp, #4]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b0e:	692b      	ldr	r3, [r5, #16]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b10:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8004c54 <HAL_DMA_Init+0x530>
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b14:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8004b18:	68eb      	ldr	r3, [r5, #12]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b1a:	44a6      	add	lr, r4
 8004b1c:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004b20:	696b      	ldr	r3, [r5, #20]
 8004b22:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004b26:	69ab      	ldr	r3, [r5, #24]
 8004b28:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004b2c:	69eb      	ldr	r3, [r5, #28]
 8004b2e:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004b32:	6a2b      	ldr	r3, [r5, #32]
 8004b34:	ea4c 1c13 	orr.w	ip, ip, r3, lsr #4
 8004b38:	ea4c 0c07 	orr.w	ip, ip, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b3c:	ea40 000c 	orr.w	r0, r0, ip
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b40:	6020      	str	r0, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b42:	4840      	ldr	r0, [pc, #256]	@ (8004c44 <HAL_DMA_Init+0x520>)
 8004b44:	fba0 c00e 	umull	ip, r0, r0, lr
 8004b48:	0900      	lsrs	r0, r0, #4
 8004b4a:	0080      	lsls	r0, r0, #2
 8004b4c:	65e8      	str	r0, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b4e:	4628      	mov	r0, r5
 8004b50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004b54:	f7ff fcfe 	bl	8004554 <DMA_CalcBaseAndBitshift>
 8004b58:	4684      	mov	ip, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b5a:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	f000 0e1f 	and.w	lr, r0, #31
 8004b62:	2001      	movs	r0, #1
 8004b64:	fa00 f00e 	lsl.w	r0, r0, lr
 8004b68:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004b6c:	f8cc 0004 	str.w	r0, [ip, #4]
 8004b70:	e684      	b.n	800487c <HAL_DMA_Init+0x158>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b72:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b74:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004b76:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b7a:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b7c:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b7e:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b86:	676b      	str	r3, [r5, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b88:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004b8a:	2201      	movs	r2, #1
  return HAL_OK;
 8004b8c:	4618      	mov	r0, r3
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b8e:	656b      	str	r3, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004b90:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
}
 8004b94:	b005      	add	sp, #20
 8004b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b9a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b9c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b9e:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ba0:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004ba4:	2001      	movs	r0, #1
}
 8004ba6:	b005      	add	sp, #20
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004bac:	4826      	ldr	r0, [pc, #152]	@ (8004c48 <HAL_DMA_Init+0x524>)
 8004bae:	40f0      	lsrs	r0, r6
 8004bb0:	07c0      	lsls	r0, r0, #31
 8004bb2:	f53f ae04 	bmi.w	80047be <HAL_DMA_Init+0x9a>
 8004bb6:	e604      	b.n	80047c2 <HAL_DMA_Init+0x9e>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bb8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004bbc:	d012      	beq.n	8004be4 <HAL_DMA_Init+0x4c0>
    switch (hdma->Init.FIFOThreshold)
 8004bbe:	2902      	cmp	r1, #2
 8004bc0:	d905      	bls.n	8004bce <HAL_DMA_Init+0x4aa>
 8004bc2:	2903      	cmp	r1, #3
 8004bc4:	f47f ae13 	bne.w	80047ee <HAL_DMA_Init+0xca>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc8:	01c2      	lsls	r2, r0, #7
 8004bca:	f57f ae10 	bpl.w	80047ee <HAL_DMA_Init+0xca>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bce:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bd2:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8004bd8:	e7e4      	b.n	8004ba4 <HAL_DMA_Init+0x480>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004bda:	3874      	subs	r0, #116	@ 0x74
 8004bdc:	2803      	cmp	r0, #3
 8004bde:	f67f adee 	bls.w	80047be <HAL_DMA_Init+0x9a>
 8004be2:	e5ee      	b.n	80047c2 <HAL_DMA_Init+0x9e>
    switch (hdma->Init.FIFOThreshold)
 8004be4:	2903      	cmp	r1, #3
 8004be6:	f63f ae02 	bhi.w	80047ee <HAL_DMA_Init+0xca>
 8004bea:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf0 <HAL_DMA_Init+0x4cc>)
 8004bec:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8004bf0:	08004bcf 	.word	0x08004bcf
 8004bf4:	08004bc9 	.word	0x08004bc9
 8004bf8:	08004bcf 	.word	0x08004bcf
 8004bfc:	08004c01 	.word	0x08004c01
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c00:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8004c04:	f47f adf3 	bne.w	80047ee <HAL_DMA_Init+0xca>
 8004c08:	e7e1      	b.n	8004bce <HAL_DMA_Init+0x4aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c0a:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <HAL_DMA_Init+0x528>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c0c:	4910      	ldr	r1, [pc, #64]	@ (8004c50 <HAL_DMA_Init+0x52c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c0e:	4413      	add	r3, r2
 8004c10:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c12:	e6a3      	b.n	800495c <HAL_DMA_Init+0x238>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c14:	2010      	movs	r0, #16
 8004c16:	e779      	b.n	8004b0c <HAL_DMA_Init+0x3e8>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c18:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c1a:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c1c:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c1e:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004c22:	e7bf      	b.n	8004ba4 <HAL_DMA_Init+0x480>
 8004c24:	58025408 	.word	0x58025408
 8004c28:	48022c08 	.word	0x48022c08
 8004c2c:	48022c1c 	.word	0x48022c1c
 8004c30:	5802541c 	.word	0x5802541c
 8004c34:	58025444 	.word	0x58025444
 8004c38:	5802546c 	.word	0x5802546c
 8004c3c:	58025430 	.word	0x58025430
 8004c40:	fffe000f 	.word	0xfffe000f
 8004c44:	cccccccd 	.word	0xcccccccd
 8004c48:	c3c0003f 	.word	0xc3c0003f
 8004c4c:	1000823f 	.word	0x1000823f
 8004c50:	40020940 	.word	0x40020940
 8004c54:	a7fdabf8 	.word	0xa7fdabf8

08004c58 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f000 8267 	beq.w	800512c <HAL_DMA_Start_IT+0x4d4>
{
 8004c5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hdma);
 8004c62:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
{
 8004c66:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 8004c68:	2c01      	cmp	r4, #1
 8004c6a:	f000 825b 	beq.w	8005124 <HAL_DMA_Start_IT+0x4cc>
 8004c6e:	2401      	movs	r4, #1
 8004c70:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c74:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8004c78:	2c01      	cmp	r4, #1
 8004c7a:	d009      	beq.n	8004c90 <HAL_DMA_Start_IT+0x38>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8004c80:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c82:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004c84:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8004c88:	2001      	movs	r0, #1
}
 8004c8a:	b003      	add	sp, #12
 8004c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c90:	2402      	movs	r4, #2
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c92:	4e87      	ldr	r6, [pc, #540]	@ (8004eb0 <HAL_DMA_Start_IT+0x258>)
 8004c94:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 8004eb8 <HAL_DMA_Start_IT+0x260>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c98:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c9c:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8004c9e:	4d85      	ldr	r5, [pc, #532]	@ (8004eb4 <HAL_DMA_Start_IT+0x25c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca0:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004ca2:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca4:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8004ebc <HAL_DMA_Start_IT+0x264>
 8004ca8:	4544      	cmp	r4, r8
 8004caa:	bf18      	it	ne
 8004cac:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 8004cae:	f8df c220 	ldr.w	ip, [pc, #544]	@ 8004ed0 <HAL_DMA_Start_IT+0x278>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cb2:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 8004cb4:	bf0c      	ite	eq
 8004cb6:	f04f 0b01 	moveq.w	fp, #1
 8004cba:	f04f 0b00 	movne.w	fp, #0
 8004cbe:	9601      	str	r6, [sp, #4]
 8004cc0:	454c      	cmp	r4, r9
 8004cc2:	bf14      	ite	ne
 8004cc4:	46de      	movne	lr, fp
 8004cc6:	f04b 0e01 	orreq.w	lr, fp, #1
    __HAL_DMA_DISABLE(hdma);
 8004cca:	42ac      	cmp	r4, r5
 8004ccc:	bf18      	it	ne
 8004cce:	4564      	cmpne	r4, ip
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2501      	moveq	r5, #1
 8004cd4:	2500      	movne	r5, #0
 8004cd6:	f040 80fd 	bne.w	8004ed4 <HAL_DMA_Start_IT+0x27c>
 8004cda:	f8d4 c000 	ldr.w	ip, [r4]
 8004cde:	f02c 0c01 	bic.w	ip, ip, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ce2:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004ce6:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004cea:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cee:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004cf0:	f1bc 0f00 	cmp.w	ip, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cf6:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8004cfa:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cfc:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8004cfe:	f04f 083f 	mov.w	r8, #63	@ 0x3f
 8004d02:	9e01      	ldr	r6, [sp, #4]
 8004d04:	f007 091f 	and.w	r9, r7, #31
 8004d08:	fa08 f809 	lsl.w	r8, r8, r9
 8004d0c:	f8c6 8008 	str.w	r8, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d10:	6827      	ldr	r7, [r4, #0]
 8004d12:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8004d16:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d18:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d1a:	6883      	ldr	r3, [r0, #8]
 8004d1c:	2b40      	cmp	r3, #64	@ 0x40
 8004d1e:	f000 8207 	beq.w	8005130 <HAL_DMA_Start_IT+0x4d8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d22:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d24:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d26:	2d00      	cmp	r5, #0
 8004d28:	f040 81e6 	bne.w	80050f8 <HAL_DMA_Start_IT+0x4a0>
 8004d2c:	4a62      	ldr	r2, [pc, #392]	@ (8004eb8 <HAL_DMA_Start_IT+0x260>)
      if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d30:	4294      	cmp	r4, r2
 8004d32:	f000 8223 	beq.w	800517c <HAL_DMA_Start_IT+0x524>
 8004d36:	4a61      	ldr	r2, [pc, #388]	@ (8004ebc <HAL_DMA_Start_IT+0x264>)
 8004d38:	4294      	cmp	r4, r2
 8004d3a:	f000 8251 	beq.w	80051e0 <HAL_DMA_Start_IT+0x588>
 8004d3e:	f1bb 0f00 	cmp.w	fp, #0
 8004d42:	f040 820c 	bne.w	800515e <HAL_DMA_Start_IT+0x506>
 8004d46:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec0 <HAL_DMA_Start_IT+0x268>)
      if(hdma->XferHalfCpltCallback != NULL)
 8004d48:	4619      	mov	r1, r3
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d4a:	4294      	cmp	r4, r2
 8004d4c:	f000 8252 	beq.w	80051f4 <HAL_DMA_Start_IT+0x59c>
 8004d50:	4a5c      	ldr	r2, [pc, #368]	@ (8004ec4 <HAL_DMA_Start_IT+0x26c>)
 8004d52:	4294      	cmp	r4, r2
 8004d54:	f000 8282 	beq.w	800525c <HAL_DMA_Start_IT+0x604>
 8004d58:	3218      	adds	r2, #24
 8004d5a:	4294      	cmp	r4, r2
 8004d5c:	f000 829f 	beq.w	800529e <HAL_DMA_Start_IT+0x646>
 8004d60:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004d64:	4294      	cmp	r4, r2
 8004d66:	f000 82a7 	beq.w	80052b8 <HAL_DMA_Start_IT+0x660>
 8004d6a:	4b57      	ldr	r3, [pc, #348]	@ (8004ec8 <HAL_DMA_Start_IT+0x270>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	f000 8340 	beq.w	80053f2 <HAL_DMA_Start_IT+0x79a>
 8004d72:	3318      	adds	r3, #24
 8004d74:	429c      	cmp	r4, r3
 8004d76:	f000 8347 	beq.w	8005408 <HAL_DMA_Start_IT+0x7b0>
 8004d7a:	3318      	adds	r3, #24
 8004d7c:	429c      	cmp	r4, r3
 8004d7e:	f000 8357 	beq.w	8005430 <HAL_DMA_Start_IT+0x7d8>
 8004d82:	3318      	adds	r3, #24
 8004d84:	429c      	cmp	r4, r3
 8004d86:	f000 8370 	beq.w	800546a <HAL_DMA_Start_IT+0x812>
 8004d8a:	3318      	adds	r3, #24
 8004d8c:	429c      	cmp	r4, r3
 8004d8e:	f000 839b 	beq.w	80054c8 <HAL_DMA_Start_IT+0x870>
 8004d92:	3318      	adds	r3, #24
 8004d94:	429c      	cmp	r4, r3
 8004d96:	f000 83ad 	beq.w	80054f4 <HAL_DMA_Start_IT+0x89c>
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	429c      	cmp	r4, r3
 8004d9e:	f000 83bf 	beq.w	8005520 <HAL_DMA_Start_IT+0x8c8>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f023 030e 	bic.w	r3, r3, #14
 8004da8:	f043 030a 	orr.w	r3, r3, #10
 8004dac:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004dae:	b119      	cbz	r1, 8004db8 <HAL_DMA_Start_IT+0x160>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	f043 0304 	orr.w	r3, r3, #4
 8004db6:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004db8:	4b42      	ldr	r3, [pc, #264]	@ (8004ec4 <HAL_DMA_Start_IT+0x26c>)
 8004dba:	4a41      	ldr	r2, [pc, #260]	@ (8004ec0 <HAL_DMA_Start_IT+0x268>)
 8004dbc:	4294      	cmp	r4, r2
 8004dbe:	bf18      	it	ne
 8004dc0:	429c      	cmpne	r4, r3
 8004dc2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	4294      	cmp	r4, r2
 8004dce:	bf08      	it	eq
 8004dd0:	f043 0301 	orreq.w	r3, r3, #1
 8004dd4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004dd8:	4294      	cmp	r4, r2
 8004dda:	bf08      	it	eq
 8004ddc:	f043 0301 	orreq.w	r3, r3, #1
 8004de0:	3218      	adds	r2, #24
 8004de2:	4294      	cmp	r4, r2
 8004de4:	bf08      	it	eq
 8004de6:	f043 0301 	orreq.w	r3, r3, #1
 8004dea:	3218      	adds	r2, #24
 8004dec:	4294      	cmp	r4, r2
 8004dee:	bf08      	it	eq
 8004df0:	f043 0301 	orreq.w	r3, r3, #1
 8004df4:	3218      	adds	r2, #24
 8004df6:	4294      	cmp	r4, r2
 8004df8:	bf08      	it	eq
 8004dfa:	f043 0301 	orreq.w	r3, r3, #1
 8004dfe:	3218      	adds	r2, #24
 8004e00:	4294      	cmp	r4, r2
 8004e02:	bf08      	it	eq
 8004e04:	f043 0301 	orreq.w	r3, r3, #1
 8004e08:	3218      	adds	r2, #24
 8004e0a:	4294      	cmp	r4, r2
 8004e0c:	bf08      	it	eq
 8004e0e:	f043 0301 	orreq.w	r3, r3, #1
 8004e12:	3218      	adds	r2, #24
 8004e14:	4294      	cmp	r4, r2
 8004e16:	bf08      	it	eq
 8004e18:	f043 0301 	orreq.w	r3, r3, #1
 8004e1c:	3218      	adds	r2, #24
 8004e1e:	4294      	cmp	r4, r2
 8004e20:	bf08      	it	eq
 8004e22:	f043 0301 	orreq.w	r3, r3, #1
 8004e26:	4a29      	ldr	r2, [pc, #164]	@ (8004ecc <HAL_DMA_Start_IT+0x274>)
 8004e28:	4294      	cmp	r4, r2
 8004e2a:	bf08      	it	eq
 8004e2c:	f043 0301 	orreq.w	r3, r3, #1
 8004e30:	3214      	adds	r2, #20
 8004e32:	4294      	cmp	r4, r2
 8004e34:	bf08      	it	eq
 8004e36:	f043 0301 	orreq.w	r3, r3, #1
 8004e3a:	3214      	adds	r2, #20
 8004e3c:	4294      	cmp	r4, r2
 8004e3e:	bf08      	it	eq
 8004e40:	f043 0301 	orreq.w	r3, r3, #1
 8004e44:	3214      	adds	r2, #20
 8004e46:	4294      	cmp	r4, r2
 8004e48:	bf08      	it	eq
 8004e4a:	f043 0301 	orreq.w	r3, r3, #1
 8004e4e:	3214      	adds	r2, #20
 8004e50:	4294      	cmp	r4, r2
 8004e52:	bf08      	it	eq
 8004e54:	f043 0301 	orreq.w	r3, r3, #1
 8004e58:	3214      	adds	r2, #20
 8004e5a:	4294      	cmp	r4, r2
 8004e5c:	bf08      	it	eq
 8004e5e:	f043 0301 	orreq.w	r3, r3, #1
 8004e62:	3214      	adds	r2, #20
 8004e64:	4294      	cmp	r4, r2
 8004e66:	bf08      	it	eq
 8004e68:	f043 0301 	orreq.w	r3, r3, #1
 8004e6c:	3214      	adds	r2, #20
 8004e6e:	4294      	cmp	r4, r2
 8004e70:	bf08      	it	eq
 8004e72:	f043 0301 	orreq.w	r3, r3, #1
 8004e76:	b913      	cbnz	r3, 8004e7e <HAL_DMA_Start_IT+0x226>
 8004e78:	f1be 0f00 	cmp.w	lr, #0
 8004e7c:	d00f      	beq.n	8004e9e <HAL_DMA_Start_IT+0x246>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e7e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004e80:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	03d2      	lsls	r2, r2, #15
 8004e88:	f100 8147 	bmi.w	800511a <HAL_DMA_Start_IT+0x4c2>
      if(hdma->DMAmuxRequestGen != 0U)
 8004e8c:	f1bc 0f00 	cmp.w	ip, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_DMA_Start_IT+0x246>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e92:	f8dc 3000 	ldr.w	r3, [ip]
 8004e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9a:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8004e9e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6023      	str	r3, [r4, #0]
}
 8004ea8:	b003      	add	sp, #12
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	bf00      	nop
 8004eb0:	40020070 	.word	0x40020070
 8004eb4:	40020028 	.word	0x40020028
 8004eb8:	40020040 	.word	0x40020040
 8004ebc:	40020058 	.word	0x40020058
 8004ec0:	40020088 	.word	0x40020088
 8004ec4:	400200a0 	.word	0x400200a0
 8004ec8:	40020428 	.word	0x40020428
 8004ecc:	58025408 	.word	0x58025408
 8004ed0:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8004ed4:	4544      	cmp	r4, r8
 8004ed6:	f000 815b 	beq.w	8005190 <HAL_DMA_Start_IT+0x538>
 8004eda:	454c      	cmp	r4, r9
 8004edc:	f000 816c 	beq.w	80051b8 <HAL_DMA_Start_IT+0x560>
 8004ee0:	f1bb 0f00 	cmp.w	fp, #0
 8004ee4:	f040 8127 	bne.w	8005136 <HAL_DMA_Start_IT+0x4de>
 8004ee8:	f8df c59c 	ldr.w	ip, [pc, #1436]	@ 8005488 <HAL_DMA_Start_IT+0x830>
 8004eec:	4564      	cmp	r4, ip
 8004eee:	f000 818d 	beq.w	800520c <HAL_DMA_Start_IT+0x5b4>
 8004ef2:	f10c 0c18 	add.w	ip, ip, #24
 8004ef6:	4564      	cmp	r4, ip
 8004ef8:	f000 819c 	beq.w	8005234 <HAL_DMA_Start_IT+0x5dc>
 8004efc:	f10c 0c18 	add.w	ip, ip, #24
 8004f00:	4564      	cmp	r4, ip
 8004f02:	f000 81b8 	beq.w	8005276 <HAL_DMA_Start_IT+0x61e>
 8004f06:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8004f0a:	4564      	cmp	r4, ip
 8004f0c:	f000 81df 	beq.w	80052ce <HAL_DMA_Start_IT+0x676>
 8004f10:	f10c 0c18 	add.w	ip, ip, #24
 8004f14:	4564      	cmp	r4, ip
 8004f16:	f000 8263 	beq.w	80053e0 <HAL_DMA_Start_IT+0x788>
 8004f1a:	f10c 0c18 	add.w	ip, ip, #24
 8004f1e:	4564      	cmp	r4, ip
 8004f20:	f000 827d 	beq.w	800541e <HAL_DMA_Start_IT+0x7c6>
 8004f24:	f10c 0c18 	add.w	ip, ip, #24
 8004f28:	4564      	cmp	r4, ip
 8004f2a:	f000 828c 	beq.w	8005446 <HAL_DMA_Start_IT+0x7ee>
 8004f2e:	f10c 0c18 	add.w	ip, ip, #24
 8004f32:	4564      	cmp	r4, ip
 8004f34:	f000 8290 	beq.w	8005458 <HAL_DMA_Start_IT+0x800>
 8004f38:	f10c 0c18 	add.w	ip, ip, #24
 8004f3c:	4564      	cmp	r4, ip
 8004f3e:	f000 82d0 	beq.w	80054e2 <HAL_DMA_Start_IT+0x88a>
 8004f42:	f10c 0c18 	add.w	ip, ip, #24
 8004f46:	4564      	cmp	r4, ip
 8004f48:	f000 82e1 	beq.w	800550e <HAL_DMA_Start_IT+0x8b6>
 8004f4c:	f10c 0c18 	add.w	ip, ip, #24
 8004f50:	4564      	cmp	r4, ip
 8004f52:	f000 82f2 	beq.w	800553a <HAL_DMA_Start_IT+0x8e2>
 8004f56:	f8d4 c000 	ldr.w	ip, [r4]
 8004f5a:	f02c 0c01 	bic.w	ip, ip, #1
 8004f5e:	f8c4 c000 	str.w	ip, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f62:	f8df c528 	ldr.w	ip, [pc, #1320]	@ 800548c <HAL_DMA_Start_IT+0x834>
 8004f66:	4564      	cmp	r4, ip
 8004f68:	f040 81c8 	bne.w	80052fc <HAL_DMA_Start_IT+0x6a4>
    if(hdma->DMAmuxRequestGen != 0U)
 8004f6c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f70:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8004f74:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004f76:	f1bc 0f00 	cmp.w	ip, #0
 8004f7a:	f43f aebf 	beq.w	8004cfc <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f7e:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8004f82:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f84:	f8df 8500 	ldr.w	r8, [pc, #1280]	@ 8005488 <HAL_DMA_Start_IT+0x830>
 8004f88:	f8df 9504 	ldr.w	r9, [pc, #1284]	@ 8005490 <HAL_DMA_Start_IT+0x838>
 8004f8c:	454c      	cmp	r4, r9
 8004f8e:	bf18      	it	ne
 8004f90:	4544      	cmpne	r4, r8
 8004f92:	f109 0918 	add.w	r9, r9, #24
 8004f96:	bf0c      	ite	eq
 8004f98:	f04f 0801 	moveq.w	r8, #1
 8004f9c:	f04f 0800 	movne.w	r8, #0
 8004fa0:	454c      	cmp	r4, r9
 8004fa2:	bf08      	it	eq
 8004fa4:	f048 0801 	orreq.w	r8, r8, #1
 8004fa8:	f509 7956 	add.w	r9, r9, #856	@ 0x358
 8004fac:	454c      	cmp	r4, r9
 8004fae:	bf08      	it	eq
 8004fb0:	f048 0801 	orreq.w	r8, r8, #1
 8004fb4:	f109 0918 	add.w	r9, r9, #24
 8004fb8:	454c      	cmp	r4, r9
 8004fba:	bf08      	it	eq
 8004fbc:	f048 0801 	orreq.w	r8, r8, #1
 8004fc0:	f109 0918 	add.w	r9, r9, #24
 8004fc4:	454c      	cmp	r4, r9
 8004fc6:	bf08      	it	eq
 8004fc8:	f048 0801 	orreq.w	r8, r8, #1
 8004fcc:	f109 0918 	add.w	r9, r9, #24
 8004fd0:	454c      	cmp	r4, r9
 8004fd2:	bf08      	it	eq
 8004fd4:	f048 0801 	orreq.w	r8, r8, #1
 8004fd8:	f109 0918 	add.w	r9, r9, #24
 8004fdc:	454c      	cmp	r4, r9
 8004fde:	bf08      	it	eq
 8004fe0:	f048 0801 	orreq.w	r8, r8, #1
 8004fe4:	f109 0918 	add.w	r9, r9, #24
 8004fe8:	454c      	cmp	r4, r9
 8004fea:	bf08      	it	eq
 8004fec:	f048 0801 	orreq.w	r8, r8, #1
 8004ff0:	f109 0918 	add.w	r9, r9, #24
 8004ff4:	454c      	cmp	r4, r9
 8004ff6:	bf08      	it	eq
 8004ff8:	f048 0801 	orreq.w	r8, r8, #1
 8004ffc:	f1b8 0f00 	cmp.w	r8, #0
 8005000:	f47f ae7c 	bne.w	8004cfc <HAL_DMA_Start_IT+0xa4>
 8005004:	f8df 848c 	ldr.w	r8, [pc, #1164]	@ 8005494 <HAL_DMA_Start_IT+0x83c>
 8005008:	4544      	cmp	r4, r8
 800500a:	f43f ae77 	beq.w	8004cfc <HAL_DMA_Start_IT+0xa4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800500e:	f8df c488 	ldr.w	ip, [pc, #1160]	@ 8005498 <HAL_DMA_Start_IT+0x840>
 8005012:	f8df 8488 	ldr.w	r8, [pc, #1160]	@ 800549c <HAL_DMA_Start_IT+0x844>
 8005016:	4544      	cmp	r4, r8
 8005018:	bf18      	it	ne
 800501a:	4564      	cmpne	r4, ip
 800501c:	f108 0814 	add.w	r8, r8, #20
 8005020:	bf0c      	ite	eq
 8005022:	f04f 0c01 	moveq.w	ip, #1
 8005026:	f04f 0c00 	movne.w	ip, #0
 800502a:	4544      	cmp	r4, r8
 800502c:	bf08      	it	eq
 800502e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005032:	f108 0814 	add.w	r8, r8, #20
 8005036:	4544      	cmp	r4, r8
 8005038:	bf08      	it	eq
 800503a:	f04c 0c01 	orreq.w	ip, ip, #1
 800503e:	f108 0814 	add.w	r8, r8, #20
 8005042:	4544      	cmp	r4, r8
 8005044:	bf08      	it	eq
 8005046:	f04c 0c01 	orreq.w	ip, ip, #1
 800504a:	f108 0814 	add.w	r8, r8, #20
 800504e:	4544      	cmp	r4, r8
 8005050:	bf08      	it	eq
 8005052:	f04c 0c01 	orreq.w	ip, ip, #1
 8005056:	f108 0814 	add.w	r8, r8, #20
 800505a:	4544      	cmp	r4, r8
 800505c:	bf08      	it	eq
 800505e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005062:	f108 0814 	add.w	r8, r8, #20
 8005066:	4544      	cmp	r4, r8
 8005068:	bf08      	it	eq
 800506a:	f04c 0c01 	orreq.w	ip, ip, #1
 800506e:	f8df 8430 	ldr.w	r8, [pc, #1072]	@ 80054a0 <HAL_DMA_Start_IT+0x848>
 8005072:	4544      	cmp	r4, r8
 8005074:	bf08      	it	eq
 8005076:	f04c 0c01 	orreq.w	ip, ip, #1
 800507a:	f108 0814 	add.w	r8, r8, #20
 800507e:	4544      	cmp	r4, r8
 8005080:	bf08      	it	eq
 8005082:	f04c 0c01 	orreq.w	ip, ip, #1
 8005086:	f108 0814 	add.w	r8, r8, #20
 800508a:	4544      	cmp	r4, r8
 800508c:	bf08      	it	eq
 800508e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005092:	f108 0814 	add.w	r8, r8, #20
 8005096:	4544      	cmp	r4, r8
 8005098:	bf08      	it	eq
 800509a:	f04c 0c01 	orreq.w	ip, ip, #1
 800509e:	f108 0814 	add.w	r8, r8, #20
 80050a2:	4544      	cmp	r4, r8
 80050a4:	bf08      	it	eq
 80050a6:	f04c 0c01 	orreq.w	ip, ip, #1
 80050aa:	f108 0814 	add.w	r8, r8, #20
 80050ae:	4544      	cmp	r4, r8
 80050b0:	bf08      	it	eq
 80050b2:	f04c 0c01 	orreq.w	ip, ip, #1
 80050b6:	f108 0814 	add.w	r8, r8, #20
 80050ba:	4544      	cmp	r4, r8
 80050bc:	bf08      	it	eq
 80050be:	f04c 0c01 	orreq.w	ip, ip, #1
 80050c2:	f1bc 0f00 	cmp.w	ip, #0
 80050c6:	d104      	bne.n	80050d2 <HAL_DMA_Start_IT+0x47a>
 80050c8:	f8df c3d8 	ldr.w	ip, [pc, #984]	@ 80054a4 <HAL_DMA_Start_IT+0x84c>
 80050cc:	4564      	cmp	r4, ip
 80050ce:	f040 823f 	bne.w	8005550 <HAL_DMA_Start_IT+0x8f8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050d2:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 80050d4:	f04f 0c01 	mov.w	ip, #1
 80050d8:	f006 081f 	and.w	r8, r6, #31
 80050dc:	9e01      	ldr	r6, [sp, #4]
 80050de:	fa0c fc08 	lsl.w	ip, ip, r8
 80050e2:	f8c6 c004 	str.w	ip, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050e6:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050e8:	6883      	ldr	r3, [r0, #8]
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	f000 822e 	beq.w	800554c <HAL_DMA_Start_IT+0x8f4>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80050f0:	60a1      	str	r1, [r4, #8]
      if(hdma->XferHalfCpltCallback != NULL)
 80050f2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050f4:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050f6:	e61e      	b.n	8004d36 <HAL_DMA_Start_IT+0xde>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	f023 031e 	bic.w	r3, r3, #30
 80050fe:	f043 0316 	orr.w	r3, r3, #22
 8005102:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005104:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005106:	b11b      	cbz	r3, 8005110 <HAL_DMA_Start_IT+0x4b8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f043 0308 	orr.w	r3, r3, #8
 800510e:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005110:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	03d2      	lsls	r2, r2, #15
 8005116:	f57f aeb9 	bpl.w	8004e8c <HAL_DMA_Start_IT+0x234>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e6b3      	b.n	8004e8c <HAL_DMA_Start_IT+0x234>
  __HAL_LOCK(hdma);
 8005124:	2002      	movs	r0, #2
}
 8005126:	b003      	add	sp, #12
 8005128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 800512c:	2001      	movs	r0, #1
}
 800512e:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005130:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005132:	60e1      	str	r1, [r4, #12]
 8005134:	e5f7      	b.n	8004d26 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8005136:	f8df a348 	ldr.w	sl, [pc, #840]	@ 8005480 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800513a:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 800513e:	f8da 8070 	ldr.w	r8, [sl, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8005142:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8005146:	f028 0801 	bic.w	r8, r8, #1
 800514a:	f8ca 8070 	str.w	r8, [sl, #112]	@ 0x70
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800514e:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8005150:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005154:	f1bc 0f00 	cmp.w	ip, #0
 8005158:	f47f adcd 	bne.w	8004cf6 <HAL_DMA_Start_IT+0x9e>
 800515c:	e5ce      	b.n	8004cfc <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800515e:	49c8      	ldr	r1, [pc, #800]	@ (8005480 <HAL_DMA_Start_IT+0x828>)
 8005160:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 8005162:	f022 021e 	bic.w	r2, r2, #30
 8005166:	f042 0216 	orr.w	r2, r2, #22
 800516a:	670a      	str	r2, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 800516c:	2b00      	cmp	r3, #0
 800516e:	f43f ae86 	beq.w	8004e7e <HAL_DMA_Start_IT+0x226>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	f043 0308 	orr.w	r3, r3, #8
 8005178:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800517a:	e61d      	b.n	8004db8 <HAL_DMA_Start_IT+0x160>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800517c:	49c0      	ldr	r1, [pc, #768]	@ (8005480 <HAL_DMA_Start_IT+0x828>)
 800517e:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005180:	f022 021e 	bic.w	r2, r2, #30
 8005184:	f042 0216 	orr.w	r2, r2, #22
 8005188:	640a      	str	r2, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f1      	bne.n	8005172 <HAL_DMA_Start_IT+0x51a>
 800518e:	e7bf      	b.n	8005110 <HAL_DMA_Start_IT+0x4b8>
    __HAL_DMA_DISABLE(hdma);
 8005190:	f8df a2ec 	ldr.w	sl, [pc, #748]	@ 8005480 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005194:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8005198:	f8da 8040 	ldr.w	r8, [sl, #64]	@ 0x40
    if(hdma->DMAmuxRequestGen != 0U)
 800519c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 80051a0:	f028 0801 	bic.w	r8, r8, #1
 80051a4:	f8ca 8040 	str.w	r8, [sl, #64]	@ 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a8:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 80051aa:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80051ae:	f1bc 0f00 	cmp.w	ip, #0
 80051b2:	f47f ada0 	bne.w	8004cf6 <HAL_DMA_Start_IT+0x9e>
 80051b6:	e5a1      	b.n	8004cfc <HAL_DMA_Start_IT+0xa4>
    __HAL_DMA_DISABLE(hdma);
 80051b8:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8005480 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051bc:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 80051c0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
    if(hdma->DMAmuxRequestGen != 0U)
 80051c4:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 80051c8:	f028 0801 	bic.w	r8, r8, #1
 80051cc:	f8ca 8058 	str.w	r8, [sl, #88]	@ 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051d0:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 80051d2:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80051d6:	f1bc 0f00 	cmp.w	ip, #0
 80051da:	f47f ad8c 	bne.w	8004cf6 <HAL_DMA_Start_IT+0x9e>
 80051de:	e58d      	b.n	8004cfc <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051e0:	49a7      	ldr	r1, [pc, #668]	@ (8005480 <HAL_DMA_Start_IT+0x828>)
 80051e2:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80051e4:	f022 021e 	bic.w	r2, r2, #30
 80051e8:	f042 0216 	orr.w	r2, r2, #22
 80051ec:	658a      	str	r2, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1bf      	bne.n	8005172 <HAL_DMA_Start_IT+0x51a>
 80051f2:	e644      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051f4:	49a2      	ldr	r1, [pc, #648]	@ (8005480 <HAL_DMA_Start_IT+0x828>)
 80051f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80051fa:	f022 021e 	bic.w	r2, r2, #30
 80051fe:	f042 0216 	orr.w	r2, r2, #22
 8005202:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1b3      	bne.n	8005172 <HAL_DMA_Start_IT+0x51a>
 800520a:	e638      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800520c:	f8df a270 	ldr.w	sl, [pc, #624]	@ 8005480 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005210:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8005214:	f8da 8088 	ldr.w	r8, [sl, #136]	@ 0x88
    if(hdma->DMAmuxRequestGen != 0U)
 8005218:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 800521c:	f028 0801 	bic.w	r8, r8, #1
 8005220:	f8ca 8088 	str.w	r8, [sl, #136]	@ 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005224:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8005226:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800522a:	f1bc 0f00 	cmp.w	ip, #0
 800522e:	f47f aea6 	bne.w	8004f7e <HAL_DMA_Start_IT+0x326>
 8005232:	e6a7      	b.n	8004f84 <HAL_DMA_Start_IT+0x32c>
    __HAL_DMA_DISABLE(hdma);
 8005234:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8005480 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005238:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 800523c:	f8da 80a0 	ldr.w	r8, [sl, #160]	@ 0xa0
    if(hdma->DMAmuxRequestGen != 0U)
 8005240:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8005244:	f028 0801 	bic.w	r8, r8, #1
 8005248:	f8ca 80a0 	str.w	r8, [sl, #160]	@ 0xa0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800524c:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 800524e:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005252:	f1bc 0f00 	cmp.w	ip, #0
 8005256:	f47f ae92 	bne.w	8004f7e <HAL_DMA_Start_IT+0x326>
 800525a:	e693      	b.n	8004f84 <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800525c:	4988      	ldr	r1, [pc, #544]	@ (8005480 <HAL_DMA_Start_IT+0x828>)
 800525e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8005262:	f022 021e 	bic.w	r2, r2, #30
 8005266:	f042 0216 	orr.w	r2, r2, #22
 800526a:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 800526e:	2b00      	cmp	r3, #0
 8005270:	f47f af7f 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 8005274:	e603      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8005276:	f8df a208 	ldr.w	sl, [pc, #520]	@ 8005480 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800527a:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 800527e:	f8da 80b8 	ldr.w	r8, [sl, #184]	@ 0xb8
    if(hdma->DMAmuxRequestGen != 0U)
 8005282:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8005286:	f028 0801 	bic.w	r8, r8, #1
 800528a:	f8ca 80b8 	str.w	r8, [sl, #184]	@ 0xb8
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800528e:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8005290:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005294:	f1bc 0f00 	cmp.w	ip, #0
 8005298:	f47f ae71 	bne.w	8004f7e <HAL_DMA_Start_IT+0x326>
 800529c:	e672      	b.n	8004f84 <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800529e:	4978      	ldr	r1, [pc, #480]	@ (8005480 <HAL_DMA_Start_IT+0x828>)
 80052a0:	f8d1 20b8 	ldr.w	r2, [r1, #184]	@ 0xb8
 80052a4:	f022 021e 	bic.w	r2, r2, #30
 80052a8:	f042 0216 	orr.w	r2, r2, #22
 80052ac:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f47f af5e 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 80052b6:	e5e2      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052b8:	4972      	ldr	r1, [pc, #456]	@ (8005484 <HAL_DMA_Start_IT+0x82c>)
 80052ba:	690a      	ldr	r2, [r1, #16]
 80052bc:	f022 021e 	bic.w	r2, r2, #30
 80052c0:	f042 0216 	orr.w	r2, r2, #22
 80052c4:	610a      	str	r2, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f47f af53 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 80052cc:	e5d7      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80052ce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8005484 <HAL_DMA_Start_IT+0x82c>
 80052d2:	f8d8 c010 	ldr.w	ip, [r8, #16]
 80052d6:	f02c 0c01 	bic.w	ip, ip, #1
 80052da:	f8c8 c010 	str.w	ip, [r8, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052de:	f8df c1c8 	ldr.w	ip, [pc, #456]	@ 80054a8 <HAL_DMA_Start_IT+0x850>
 80052e2:	4564      	cmp	r4, ip
 80052e4:	f43f ae42 	beq.w	8004f6c <HAL_DMA_Start_IT+0x314>
 80052e8:	f10c 0c18 	add.w	ip, ip, #24
 80052ec:	4564      	cmp	r4, ip
 80052ee:	f43f ae3d 	beq.w	8004f6c <HAL_DMA_Start_IT+0x314>
 80052f2:	f10c 0c18 	add.w	ip, ip, #24
 80052f6:	4564      	cmp	r4, ip
 80052f8:	f43f ae38 	beq.w	8004f6c <HAL_DMA_Start_IT+0x314>
 80052fc:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 80054ac <HAL_DMA_Start_IT+0x854>
 8005300:	4564      	cmp	r4, ip
 8005302:	f43f ae33 	beq.w	8004f6c <HAL_DMA_Start_IT+0x314>
 8005306:	f10c 0c18 	add.w	ip, ip, #24
 800530a:	4564      	cmp	r4, ip
 800530c:	f43f ae2e 	beq.w	8004f6c <HAL_DMA_Start_IT+0x314>
 8005310:	f10c 0c18 	add.w	ip, ip, #24
 8005314:	4564      	cmp	r4, ip
 8005316:	f43f ae29 	beq.w	8004f6c <HAL_DMA_Start_IT+0x314>
 800531a:	f10c 0c18 	add.w	ip, ip, #24
 800531e:	4564      	cmp	r4, ip
 8005320:	f43f ae24 	beq.w	8004f6c <HAL_DMA_Start_IT+0x314>
 8005324:	f8df c178 	ldr.w	ip, [pc, #376]	@ 80054a0 <HAL_DMA_Start_IT+0x848>
 8005328:	4564      	cmp	r4, ip
 800532a:	f000 80c3 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
 800532e:	f10c 0c14 	add.w	ip, ip, #20
 8005332:	4564      	cmp	r4, ip
 8005334:	f000 80be 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
 8005338:	f10c 0c14 	add.w	ip, ip, #20
 800533c:	4564      	cmp	r4, ip
 800533e:	f000 80b9 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
 8005342:	f10c 0c14 	add.w	ip, ip, #20
 8005346:	4564      	cmp	r4, ip
 8005348:	f000 80b4 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
 800534c:	f10c 0c14 	add.w	ip, ip, #20
 8005350:	4564      	cmp	r4, ip
 8005352:	f000 80af 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
 8005356:	f10c 0c14 	add.w	ip, ip, #20
 800535a:	4564      	cmp	r4, ip
 800535c:	f000 80aa 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
 8005360:	f10c 0c14 	add.w	ip, ip, #20
 8005364:	4564      	cmp	r4, ip
 8005366:	f000 80a5 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
 800536a:	f10c 0c14 	add.w	ip, ip, #20
 800536e:	4564      	cmp	r4, ip
 8005370:	f000 80a0 	beq.w	80054b4 <HAL_DMA_Start_IT+0x85c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005374:	f8df c124 	ldr.w	ip, [pc, #292]	@ 800549c <HAL_DMA_Start_IT+0x844>
 8005378:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8005498 <HAL_DMA_Start_IT+0x840>
 800537c:	4544      	cmp	r4, r8
 800537e:	bf18      	it	ne
 8005380:	4564      	cmpne	r4, ip
 8005382:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 8005386:	bf0c      	ite	eq
 8005388:	f04f 0c01 	moveq.w	ip, #1
 800538c:	f04f 0c00 	movne.w	ip, #0
 8005390:	4544      	cmp	r4, r8
 8005392:	bf08      	it	eq
 8005394:	f04c 0c01 	orreq.w	ip, ip, #1
 8005398:	f108 0814 	add.w	r8, r8, #20
 800539c:	4544      	cmp	r4, r8
 800539e:	bf08      	it	eq
 80053a0:	f04c 0c01 	orreq.w	ip, ip, #1
 80053a4:	f108 0814 	add.w	r8, r8, #20
 80053a8:	4544      	cmp	r4, r8
 80053aa:	bf08      	it	eq
 80053ac:	f04c 0c01 	orreq.w	ip, ip, #1
 80053b0:	f108 0814 	add.w	r8, r8, #20
 80053b4:	4544      	cmp	r4, r8
 80053b6:	bf08      	it	eq
 80053b8:	f04c 0c01 	orreq.w	ip, ip, #1
 80053bc:	f108 0814 	add.w	r8, r8, #20
 80053c0:	4544      	cmp	r4, r8
 80053c2:	bf08      	it	eq
 80053c4:	f04c 0c01 	orreq.w	ip, ip, #1
 80053c8:	f1bc 0f00 	cmp.w	ip, #0
 80053cc:	f47f ae81 	bne.w	80050d2 <HAL_DMA_Start_IT+0x47a>
 80053d0:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80054b0 <HAL_DMA_Start_IT+0x858>
 80053d4:	4564      	cmp	r4, ip
      if(hdma->XferHalfCpltCallback != NULL)
 80053d6:	bf18      	it	ne
 80053d8:	6c01      	ldrne	r1, [r0, #64]	@ 0x40
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053da:	f43f ae7a 	beq.w	80050d2 <HAL_DMA_Start_IT+0x47a>
 80053de:	e4c4      	b.n	8004d6a <HAL_DMA_Start_IT+0x112>
    __HAL_DMA_DISABLE(hdma);
 80053e0:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8005484 <HAL_DMA_Start_IT+0x82c>
 80053e4:	f8d8 c028 	ldr.w	ip, [r8, #40]	@ 0x28
 80053e8:	f02c 0c01 	bic.w	ip, ip, #1
 80053ec:	f8c8 c028 	str.w	ip, [r8, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053f0:	e5bc      	b.n	8004f6c <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053f2:	4a24      	ldr	r2, [pc, #144]	@ (8005484 <HAL_DMA_Start_IT+0x82c>)
 80053f4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80053f6:	f023 031e 	bic.w	r3, r3, #30
 80053fa:	f043 0316 	orr.w	r3, r3, #22
 80053fe:	6293      	str	r3, [r2, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8005400:	2900      	cmp	r1, #0
 8005402:	f47f aeb6 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 8005406:	e53a      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005408:	4a1e      	ldr	r2, [pc, #120]	@ (8005484 <HAL_DMA_Start_IT+0x82c>)
 800540a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800540c:	f023 031e 	bic.w	r3, r3, #30
 8005410:	f043 0316 	orr.w	r3, r3, #22
 8005414:	6413      	str	r3, [r2, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8005416:	2900      	cmp	r1, #0
 8005418:	f47f aeab 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 800541c:	e52f      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800541e:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8005484 <HAL_DMA_Start_IT+0x82c>
 8005422:	f8d8 c040 	ldr.w	ip, [r8, #64]	@ 0x40
 8005426:	f02c 0c01 	bic.w	ip, ip, #1
 800542a:	f8c8 c040 	str.w	ip, [r8, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800542e:	e59d      	b.n	8004f6c <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005430:	4a14      	ldr	r2, [pc, #80]	@ (8005484 <HAL_DMA_Start_IT+0x82c>)
 8005432:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005434:	f023 031e 	bic.w	r3, r3, #30
 8005438:	f043 0316 	orr.w	r3, r3, #22
 800543c:	6593      	str	r3, [r2, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 800543e:	2900      	cmp	r1, #0
 8005440:	f47f ae97 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 8005444:	e51b      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8005446:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8005484 <HAL_DMA_Start_IT+0x82c>
 800544a:	f8d8 c058 	ldr.w	ip, [r8, #88]	@ 0x58
 800544e:	f02c 0c01 	bic.w	ip, ip, #1
 8005452:	f8c8 c058 	str.w	ip, [r8, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005456:	e584      	b.n	8004f62 <HAL_DMA_Start_IT+0x30a>
    __HAL_DMA_DISABLE(hdma);
 8005458:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 8005484 <HAL_DMA_Start_IT+0x82c>
 800545c:	f8d8 c070 	ldr.w	ip, [r8, #112]	@ 0x70
 8005460:	f02c 0c01 	bic.w	ip, ip, #1
 8005464:	f8c8 c070 	str.w	ip, [r8, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005468:	e748      	b.n	80052fc <HAL_DMA_Start_IT+0x6a4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800546a:	4a06      	ldr	r2, [pc, #24]	@ (8005484 <HAL_DMA_Start_IT+0x82c>)
 800546c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800546e:	f023 031e 	bic.w	r3, r3, #30
 8005472:	f043 0316 	orr.w	r3, r3, #22
 8005476:	6713      	str	r3, [r2, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8005478:	2900      	cmp	r1, #0
 800547a:	f47f ae7a 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 800547e:	e4fe      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
 8005480:	40020000 	.word	0x40020000
 8005484:	40020400 	.word	0x40020400
 8005488:	40020088 	.word	0x40020088
 800548c:	40020458 	.word	0x40020458
 8005490:	400200a0 	.word	0x400200a0
 8005494:	400204b8 	.word	0x400204b8
 8005498:	48022c08 	.word	0x48022c08
 800549c:	48022c1c 	.word	0x48022c1c
 80054a0:	58025408 	.word	0x58025408
 80054a4:	58025494 	.word	0x58025494
 80054a8:	40020410 	.word	0x40020410
 80054ac:	40020470 	.word	0x40020470
 80054b0:	48022c94 	.word	0x48022c94
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054b4:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 80054b8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054bc:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80054be:	f1bc 0f00 	cmp.w	ip, #0
 80054c2:	f47f ad5c 	bne.w	8004f7e <HAL_DMA_Start_IT+0x326>
 80054c6:	e5a2      	b.n	800500e <HAL_DMA_Start_IT+0x3b6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054c8:	4a23      	ldr	r2, [pc, #140]	@ (8005558 <HAL_DMA_Start_IT+0x900>)
 80054ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80054ce:	f023 031e 	bic.w	r3, r3, #30
 80054d2:	f043 0316 	orr.w	r3, r3, #22
 80054d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 80054da:	2900      	cmp	r1, #0
 80054dc:	f47f ae49 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 80054e0:	e4cd      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80054e2:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8005558 <HAL_DMA_Start_IT+0x900>
 80054e6:	f8d8 c088 	ldr.w	ip, [r8, #136]	@ 0x88
 80054ea:	f02c 0c01 	bic.w	ip, ip, #1
 80054ee:	f8c8 c088 	str.w	ip, [r8, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054f2:	e536      	b.n	8004f62 <HAL_DMA_Start_IT+0x30a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054f4:	4a18      	ldr	r2, [pc, #96]	@ (8005558 <HAL_DMA_Start_IT+0x900>)
 80054f6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80054fa:	f023 031e 	bic.w	r3, r3, #30
 80054fe:	f043 0316 	orr.w	r3, r3, #22
 8005502:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8005506:	2900      	cmp	r1, #0
 8005508:	f47f ae33 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 800550c:	e4b7      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800550e:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 8005558 <HAL_DMA_Start_IT+0x900>
 8005512:	f8d8 c0a0 	ldr.w	ip, [r8, #160]	@ 0xa0
 8005516:	f02c 0c01 	bic.w	ip, ip, #1
 800551a:	f8c8 c0a0 	str.w	ip, [r8, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800551e:	e6de      	b.n	80052de <HAL_DMA_Start_IT+0x686>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005520:	4a0d      	ldr	r2, [pc, #52]	@ (8005558 <HAL_DMA_Start_IT+0x900>)
 8005522:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 8005526:	f023 031e 	bic.w	r3, r3, #30
 800552a:	f043 0316 	orr.w	r3, r3, #22
 800552e:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8005532:	2900      	cmp	r1, #0
 8005534:	f47f ae1d 	bne.w	8005172 <HAL_DMA_Start_IT+0x51a>
 8005538:	e4a1      	b.n	8004e7e <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800553a:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8005558 <HAL_DMA_Start_IT+0x900>
 800553e:	f8d8 c0b8 	ldr.w	ip, [r8, #184]	@ 0xb8
 8005542:	f02c 0c01 	bic.w	ip, ip, #1
 8005546:	f8c8 c0b8 	str.w	ip, [r8, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800554a:	e6c8      	b.n	80052de <HAL_DMA_Start_IT+0x686>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800554c:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800554e:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005550:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005552:	f7ff bbf8 	b.w	8004d46 <HAL_DMA_Start_IT+0xee>
 8005556:	bf00      	nop
 8005558:	40020400 	.word	0x40020400

0800555c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800555c:	2800      	cmp	r0, #0
 800555e:	f000 8096 	beq.w	800568e <HAL_DMA_Abort_IT+0x132>
{
 8005562:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005564:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005568:	2b02      	cmp	r3, #2
 800556a:	f040 8083 	bne.w	8005674 <HAL_DMA_Abort_IT+0x118>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800556e:	6803      	ldr	r3, [r0, #0]
 8005570:	4a48      	ldr	r2, [pc, #288]	@ (8005694 <HAL_DMA_Abort_IT+0x138>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f000 8082 	beq.w	800567c <HAL_DMA_Abort_IT+0x120>
 8005578:	3218      	adds	r2, #24
 800557a:	4293      	cmp	r3, r2
 800557c:	d07e      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 800557e:	3218      	adds	r2, #24
 8005580:	4293      	cmp	r3, r2
 8005582:	d07b      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 8005584:	3218      	adds	r2, #24
 8005586:	4293      	cmp	r3, r2
 8005588:	d078      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 800558a:	3218      	adds	r2, #24
 800558c:	4293      	cmp	r3, r2
 800558e:	d075      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 8005590:	3218      	adds	r2, #24
 8005592:	4293      	cmp	r3, r2
 8005594:	d072      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 8005596:	3218      	adds	r2, #24
 8005598:	4293      	cmp	r3, r2
 800559a:	d06f      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 800559c:	3218      	adds	r2, #24
 800559e:	4293      	cmp	r3, r2
 80055a0:	d06c      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055a2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d068      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055aa:	3218      	adds	r2, #24
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d065      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055b0:	3218      	adds	r2, #24
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d062      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055b6:	3218      	adds	r2, #24
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d05f      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055bc:	3218      	adds	r2, #24
 80055be:	4293      	cmp	r3, r2
 80055c0:	d05c      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055c2:	3218      	adds	r2, #24
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d059      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055c8:	3218      	adds	r2, #24
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d056      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
 80055ce:	3218      	adds	r2, #24
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d053      	beq.n	800567c <HAL_DMA_Abort_IT+0x120>
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055d4:	4a30      	ldr	r2, [pc, #192]	@ (8005698 <HAL_DMA_Abort_IT+0x13c>)
 80055d6:	4d31      	ldr	r5, [pc, #196]	@ (800569c <HAL_DMA_Abort_IT+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055d8:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055da:	42ab      	cmp	r3, r5
 80055dc:	bf18      	it	ne
 80055de:	4293      	cmpne	r3, r2
 80055e0:	4c2f      	ldr	r4, [pc, #188]	@ (80056a0 <HAL_DMA_Abort_IT+0x144>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055e2:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055e6:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 80055ea:	bf0c      	ite	eq
 80055ec:	2201      	moveq	r2, #1
 80055ee:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055f0:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	bf08      	it	eq
 80055f6:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80055fa:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055fc:	3428      	adds	r4, #40	@ 0x28
 80055fe:	42ab      	cmp	r3, r5
 8005600:	bf08      	it	eq
 8005602:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8005606:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800560a:	42a3      	cmp	r3, r4
 800560c:	bf08      	it	eq
 800560e:	f042 0201 	orreq.w	r2, r2, #1
 8005612:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8005614:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005616:	42a3      	cmp	r3, r4
 8005618:	bf08      	it	eq
 800561a:	f042 0201 	orreq.w	r2, r2, #1
 800561e:	4921      	ldr	r1, [pc, #132]	@ (80056a4 <HAL_DMA_Abort_IT+0x148>)
 8005620:	428b      	cmp	r3, r1
 8005622:	bf08      	it	eq
 8005624:	f042 0201 	orreq.w	r2, r2, #1
 8005628:	b912      	cbnz	r2, 8005630 <HAL_DMA_Abort_IT+0xd4>
 800562a:	4a1f      	ldr	r2, [pc, #124]	@ (80056a8 <HAL_DMA_Abort_IT+0x14c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d117      	bne.n	8005660 <HAL_DMA_Abort_IT+0x104>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005630:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005632:	6d84      	ldr	r4, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005634:	e9d0 1517 	ldrd	r1, r5, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005638:	682a      	ldr	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800563a:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800563e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005642:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005644:	602a      	str	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005646:	6063      	str	r3, [r4, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005648:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800564a:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 800564e:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005650:	b133      	cbz	r3, 8005660 <HAL_DMA_Abort_IT+0x104>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005652:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005654:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005658:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800565c:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800565e:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005660:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8005662:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 8005664:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8005666:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800566a:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 800566e:	b163      	cbz	r3, 800568a <HAL_DMA_Abort_IT+0x12e>
        hdma->XferAbortCallback(hdma);
 8005670:	4798      	blx	r3
 8005672:	e00a      	b.n	800568a <HAL_DMA_Abort_IT+0x12e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8005678:	2001      	movs	r0, #1
}
 800567a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 800567c:	2204      	movs	r2, #4
 800567e:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800568a:	2000      	movs	r0, #0
}
 800568c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800568e:	2001      	movs	r0, #1
}
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40020010 	.word	0x40020010
 8005698:	5802541c 	.word	0x5802541c
 800569c:	58025408 	.word	0x58025408
 80056a0:	58025430 	.word	0x58025430
 80056a4:	58025480 	.word	0x58025480
 80056a8:	58025494 	.word	0x58025494

080056ac <HAL_DMA_IRQHandler>:
{
 80056ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80056b0:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80056b2:	4b5a      	ldr	r3, [pc, #360]	@ (800581c <HAL_DMA_IRQHandler+0x170>)
{
 80056b4:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056b6:	6d84      	ldr	r4, [r0, #88]	@ 0x58
{
 80056b8:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80056ba:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 80056bc:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056be:	6803      	ldr	r3, [r0, #0]
 80056c0:	4a57      	ldr	r2, [pc, #348]	@ (8005820 <HAL_DMA_IRQHandler+0x174>)
 80056c2:	4858      	ldr	r0, [pc, #352]	@ (8005824 <HAL_DMA_IRQHandler+0x178>)
  tmpisr_dma  = regs_dma->ISR;
 80056c4:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056c6:	4293      	cmp	r3, r2
 80056c8:	bf18      	it	ne
 80056ca:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 80056cc:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80056ce:	bf0c      	ite	eq
 80056d0:	2001      	moveq	r0, #1
 80056d2:	2000      	movne	r0, #0
 80056d4:	f000 80b0 	beq.w	8005838 <HAL_DMA_IRQHandler+0x18c>
 80056d8:	3218      	adds	r2, #24
 80056da:	4293      	cmp	r3, r2
 80056dc:	f000 82a6 	beq.w	8005c2c <HAL_DMA_IRQHandler+0x580>
 80056e0:	3218      	adds	r2, #24
 80056e2:	4293      	cmp	r3, r2
 80056e4:	f000 82a2 	beq.w	8005c2c <HAL_DMA_IRQHandler+0x580>
 80056e8:	3218      	adds	r2, #24
 80056ea:	4293      	cmp	r3, r2
 80056ec:	f000 82af 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 80056f0:	3218      	adds	r2, #24
 80056f2:	4293      	cmp	r3, r2
 80056f4:	f000 82ab 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 80056f8:	3218      	adds	r2, #24
 80056fa:	4293      	cmp	r3, r2
 80056fc:	f000 82a7 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 8005700:	3218      	adds	r2, #24
 8005702:	4293      	cmp	r3, r2
 8005704:	f000 82a3 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 8005708:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800570c:	4293      	cmp	r3, r2
 800570e:	f000 829e 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 8005712:	3218      	adds	r2, #24
 8005714:	4293      	cmp	r3, r2
 8005716:	f000 829a 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 800571a:	3218      	adds	r2, #24
 800571c:	4293      	cmp	r3, r2
 800571e:	f000 8296 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 8005722:	3218      	adds	r2, #24
 8005724:	4293      	cmp	r3, r2
 8005726:	f000 8292 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 800572a:	3218      	adds	r2, #24
 800572c:	4293      	cmp	r3, r2
 800572e:	f000 828e 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 8005732:	3218      	adds	r2, #24
 8005734:	4293      	cmp	r3, r2
 8005736:	f000 828a 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 800573a:	3218      	adds	r2, #24
 800573c:	4293      	cmp	r3, r2
 800573e:	f000 8286 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
 8005742:	3218      	adds	r2, #24
 8005744:	4293      	cmp	r3, r2
 8005746:	f000 8282 	beq.w	8005c4e <HAL_DMA_IRQHandler+0x5a2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800574a:	4a37      	ldr	r2, [pc, #220]	@ (8005828 <HAL_DMA_IRQHandler+0x17c>)
 800574c:	4837      	ldr	r0, [pc, #220]	@ (800582c <HAL_DMA_IRQHandler+0x180>)
 800574e:	4283      	cmp	r3, r0
 8005750:	bf18      	it	ne
 8005752:	4293      	cmpne	r3, r2
 8005754:	f100 0014 	add.w	r0, r0, #20
 8005758:	bf0c      	ite	eq
 800575a:	2201      	moveq	r2, #1
 800575c:	2200      	movne	r2, #0
 800575e:	4283      	cmp	r3, r0
 8005760:	bf08      	it	eq
 8005762:	f042 0201 	orreq.w	r2, r2, #1
 8005766:	3014      	adds	r0, #20
 8005768:	4283      	cmp	r3, r0
 800576a:	bf08      	it	eq
 800576c:	f042 0201 	orreq.w	r2, r2, #1
 8005770:	3014      	adds	r0, #20
 8005772:	4283      	cmp	r3, r0
 8005774:	bf08      	it	eq
 8005776:	f042 0201 	orreq.w	r2, r2, #1
 800577a:	3014      	adds	r0, #20
 800577c:	4283      	cmp	r3, r0
 800577e:	bf08      	it	eq
 8005780:	f042 0201 	orreq.w	r2, r2, #1
 8005784:	3014      	adds	r0, #20
 8005786:	4283      	cmp	r3, r0
 8005788:	bf08      	it	eq
 800578a:	f042 0201 	orreq.w	r2, r2, #1
 800578e:	3014      	adds	r0, #20
 8005790:	4283      	cmp	r3, r0
 8005792:	bf08      	it	eq
 8005794:	f042 0201 	orreq.w	r2, r2, #1
 8005798:	4825      	ldr	r0, [pc, #148]	@ (8005830 <HAL_DMA_IRQHandler+0x184>)
 800579a:	4283      	cmp	r3, r0
 800579c:	bf08      	it	eq
 800579e:	f042 0201 	orreq.w	r2, r2, #1
 80057a2:	3014      	adds	r0, #20
 80057a4:	4283      	cmp	r3, r0
 80057a6:	bf08      	it	eq
 80057a8:	f042 0201 	orreq.w	r2, r2, #1
 80057ac:	3014      	adds	r0, #20
 80057ae:	4283      	cmp	r3, r0
 80057b0:	bf08      	it	eq
 80057b2:	f042 0201 	orreq.w	r2, r2, #1
 80057b6:	3014      	adds	r0, #20
 80057b8:	4283      	cmp	r3, r0
 80057ba:	bf08      	it	eq
 80057bc:	f042 0201 	orreq.w	r2, r2, #1
 80057c0:	3014      	adds	r0, #20
 80057c2:	4283      	cmp	r3, r0
 80057c4:	bf08      	it	eq
 80057c6:	f042 0201 	orreq.w	r2, r2, #1
 80057ca:	3014      	adds	r0, #20
 80057cc:	4283      	cmp	r3, r0
 80057ce:	bf08      	it	eq
 80057d0:	f042 0201 	orreq.w	r2, r2, #1
 80057d4:	3014      	adds	r0, #20
 80057d6:	4283      	cmp	r3, r0
 80057d8:	bf08      	it	eq
 80057da:	f042 0201 	orreq.w	r2, r2, #1
 80057de:	b912      	cbnz	r2, 80057e6 <HAL_DMA_IRQHandler+0x13a>
 80057e0:	4a14      	ldr	r2, [pc, #80]	@ (8005834 <HAL_DMA_IRQHandler+0x188>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d116      	bne.n	8005814 <HAL_DMA_IRQHandler+0x168>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80057e6:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 80057e8:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80057ea:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80057ec:	f000 001f 	and.w	r0, r0, #31
 80057f0:	4085      	lsls	r5, r0
 80057f2:	420d      	tst	r5, r1
 80057f4:	f000 8285 	beq.w	8005d02 <HAL_DMA_IRQHandler+0x656>
 80057f8:	0757      	lsls	r7, r2, #29
 80057fa:	f140 8282 	bpl.w	8005d02 <HAL_DMA_IRQHandler+0x656>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057fe:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005800:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005802:	f140 82b1 	bpl.w	8005d68 <HAL_DMA_IRQHandler+0x6bc>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005806:	03d1      	lsls	r1, r2, #15
 8005808:	f100 82b4 	bmi.w	8005d74 <HAL_DMA_IRQHandler+0x6c8>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800580c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 81f6 	bne.w	8005c00 <HAL_DMA_IRQHandler+0x554>
}
 8005814:	b002      	add	sp, #8
 8005816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800581a:	bf00      	nop
 800581c:	2400000c 	.word	0x2400000c
 8005820:	40020028 	.word	0x40020028
 8005824:	40020010 	.word	0x40020010
 8005828:	48022c08 	.word	0x48022c08
 800582c:	48022c1c 	.word	0x48022c1c
 8005830:	58025408 	.word	0x58025408
 8005834:	58025494 	.word	0x58025494
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005838:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 800583c:	f04f 0c08 	mov.w	ip, #8
 8005840:	f00e 021f 	and.w	r2, lr, #31
 8005844:	fa0c f102 	lsl.w	r1, ip, r2
 8005848:	420f      	tst	r7, r1
 800584a:	f000 81de 	beq.w	8005c0a <HAL_DMA_IRQHandler+0x55e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800584e:	f8d3 c000 	ldr.w	ip, [r3]
 8005852:	f01c 0f04 	tst.w	ip, #4
 8005856:	d00a      	beq.n	800586e <HAL_DMA_IRQHandler+0x1c2>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005858:	f8d3 c000 	ldr.w	ip, [r3]
 800585c:	f02c 0c04 	bic.w	ip, ip, #4
 8005860:	f8c3 c000 	str.w	ip, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005864:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005866:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8005868:	f041 0101 	orr.w	r1, r1, #1
 800586c:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800586e:	fa27 f102 	lsr.w	r1, r7, r2
 8005872:	07c9      	lsls	r1, r1, #31
 8005874:	d55b      	bpl.n	800592e <HAL_DMA_IRQHandler+0x282>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005876:	2800      	cmp	r0, #0
 8005878:	d14f      	bne.n	800591a <HAL_DMA_IRQHandler+0x26e>
 800587a:	49a2      	ldr	r1, [pc, #648]	@ (8005b04 <HAL_DMA_IRQHandler+0x458>)
 800587c:	f8df c298 	ldr.w	ip, [pc, #664]	@ 8005b18 <HAL_DMA_IRQHandler+0x46c>
 8005880:	4563      	cmp	r3, ip
 8005882:	bf18      	it	ne
 8005884:	428b      	cmpne	r3, r1
 8005886:	f10c 0c18 	add.w	ip, ip, #24
 800588a:	bf0c      	ite	eq
 800588c:	2101      	moveq	r1, #1
 800588e:	2100      	movne	r1, #0
 8005890:	4563      	cmp	r3, ip
 8005892:	bf08      	it	eq
 8005894:	f041 0101 	orreq.w	r1, r1, #1
 8005898:	f10c 0c18 	add.w	ip, ip, #24
 800589c:	4563      	cmp	r3, ip
 800589e:	bf08      	it	eq
 80058a0:	f041 0101 	orreq.w	r1, r1, #1
 80058a4:	f10c 0c18 	add.w	ip, ip, #24
 80058a8:	4563      	cmp	r3, ip
 80058aa:	bf08      	it	eq
 80058ac:	f041 0101 	orreq.w	r1, r1, #1
 80058b0:	f10c 0c18 	add.w	ip, ip, #24
 80058b4:	4563      	cmp	r3, ip
 80058b6:	bf08      	it	eq
 80058b8:	f041 0101 	orreq.w	r1, r1, #1
 80058bc:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 80058c0:	4563      	cmp	r3, ip
 80058c2:	bf08      	it	eq
 80058c4:	f041 0101 	orreq.w	r1, r1, #1
 80058c8:	f10c 0c18 	add.w	ip, ip, #24
 80058cc:	4563      	cmp	r3, ip
 80058ce:	bf08      	it	eq
 80058d0:	f041 0101 	orreq.w	r1, r1, #1
 80058d4:	f10c 0c18 	add.w	ip, ip, #24
 80058d8:	4563      	cmp	r3, ip
 80058da:	bf08      	it	eq
 80058dc:	f041 0101 	orreq.w	r1, r1, #1
 80058e0:	f10c 0c18 	add.w	ip, ip, #24
 80058e4:	4563      	cmp	r3, ip
 80058e6:	bf08      	it	eq
 80058e8:	f041 0101 	orreq.w	r1, r1, #1
 80058ec:	f10c 0c18 	add.w	ip, ip, #24
 80058f0:	4563      	cmp	r3, ip
 80058f2:	bf08      	it	eq
 80058f4:	f041 0101 	orreq.w	r1, r1, #1
 80058f8:	f10c 0c18 	add.w	ip, ip, #24
 80058fc:	4563      	cmp	r3, ip
 80058fe:	bf08      	it	eq
 8005900:	f041 0101 	orreq.w	r1, r1, #1
 8005904:	f10c 0c18 	add.w	ip, ip, #24
 8005908:	4563      	cmp	r3, ip
 800590a:	bf08      	it	eq
 800590c:	f041 0101 	orreq.w	r1, r1, #1
 8005910:	b919      	cbnz	r1, 800591a <HAL_DMA_IRQHandler+0x26e>
 8005912:	497d      	ldr	r1, [pc, #500]	@ (8005b08 <HAL_DMA_IRQHandler+0x45c>)
 8005914:	428b      	cmp	r3, r1
 8005916:	f040 81e3 	bne.w	8005ce0 <HAL_DMA_IRQHandler+0x634>
 800591a:	6959      	ldr	r1, [r3, #20]
 800591c:	0609      	lsls	r1, r1, #24
 800591e:	d506      	bpl.n	800592e <HAL_DMA_IRQHandler+0x282>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005920:	2101      	movs	r1, #1
 8005922:	4091      	lsls	r1, r2
 8005924:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005926:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8005928:	f041 0102 	orr.w	r1, r1, #2
 800592c:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800592e:	2104      	movs	r1, #4
 8005930:	4091      	lsls	r1, r2
 8005932:	4239      	tst	r1, r7
 8005934:	d05f      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005936:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8005b04 <HAL_DMA_IRQHandler+0x458>
 800593a:	4563      	cmp	r3, ip
 800593c:	d051      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x336>
 800593e:	2800      	cmp	r0, #0
 8005940:	d14f      	bne.n	80059e2 <HAL_DMA_IRQHandler+0x336>
 8005942:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8005946:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 8005b18 <HAL_DMA_IRQHandler+0x46c>
 800594a:	4543      	cmp	r3, r8
 800594c:	bf18      	it	ne
 800594e:	4563      	cmpne	r3, ip
 8005950:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8005954:	bf0c      	ite	eq
 8005956:	f04f 0c01 	moveq.w	ip, #1
 800595a:	f04f 0c00 	movne.w	ip, #0
 800595e:	4543      	cmp	r3, r8
 8005960:	bf08      	it	eq
 8005962:	f04c 0c01 	orreq.w	ip, ip, #1
 8005966:	f108 0818 	add.w	r8, r8, #24
 800596a:	4543      	cmp	r3, r8
 800596c:	bf08      	it	eq
 800596e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005972:	f108 0818 	add.w	r8, r8, #24
 8005976:	4543      	cmp	r3, r8
 8005978:	bf08      	it	eq
 800597a:	f04c 0c01 	orreq.w	ip, ip, #1
 800597e:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8005982:	4543      	cmp	r3, r8
 8005984:	bf08      	it	eq
 8005986:	f04c 0c01 	orreq.w	ip, ip, #1
 800598a:	f108 0818 	add.w	r8, r8, #24
 800598e:	4543      	cmp	r3, r8
 8005990:	bf08      	it	eq
 8005992:	f04c 0c01 	orreq.w	ip, ip, #1
 8005996:	f108 0818 	add.w	r8, r8, #24
 800599a:	4543      	cmp	r3, r8
 800599c:	bf08      	it	eq
 800599e:	f04c 0c01 	orreq.w	ip, ip, #1
 80059a2:	f108 0818 	add.w	r8, r8, #24
 80059a6:	4543      	cmp	r3, r8
 80059a8:	bf08      	it	eq
 80059aa:	f04c 0c01 	orreq.w	ip, ip, #1
 80059ae:	f108 0818 	add.w	r8, r8, #24
 80059b2:	4543      	cmp	r3, r8
 80059b4:	bf08      	it	eq
 80059b6:	f04c 0c01 	orreq.w	ip, ip, #1
 80059ba:	f108 0818 	add.w	r8, r8, #24
 80059be:	4543      	cmp	r3, r8
 80059c0:	bf08      	it	eq
 80059c2:	f04c 0c01 	orreq.w	ip, ip, #1
 80059c6:	f108 0818 	add.w	r8, r8, #24
 80059ca:	4543      	cmp	r3, r8
 80059cc:	bf08      	it	eq
 80059ce:	f04c 0c01 	orreq.w	ip, ip, #1
 80059d2:	f1bc 0f00 	cmp.w	ip, #0
 80059d6:	d104      	bne.n	80059e2 <HAL_DMA_IRQHandler+0x336>
 80059d8:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8005b08 <HAL_DMA_IRQHandler+0x45c>
 80059dc:	4563      	cmp	r3, ip
 80059de:	f040 8185 	bne.w	8005cec <HAL_DMA_IRQHandler+0x640>
 80059e2:	f8d3 c000 	ldr.w	ip, [r3]
 80059e6:	f01c 0f02 	tst.w	ip, #2
 80059ea:	d004      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059ec:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059ee:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 80059f0:	f041 0104 	orr.w	r1, r1, #4
 80059f4:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059f6:	2110      	movs	r1, #16
 80059f8:	fa01 f202 	lsl.w	r2, r1, r2
 80059fc:	423a      	tst	r2, r7
 80059fe:	d05b      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a00:	4940      	ldr	r1, [pc, #256]	@ (8005b04 <HAL_DMA_IRQHandler+0x458>)
 8005a02:	428b      	cmp	r3, r1
 8005a04:	d042      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x3e0>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d140      	bne.n	8005a8c <HAL_DMA_IRQHandler+0x3e0>
 8005a0a:	3118      	adds	r1, #24
 8005a0c:	483f      	ldr	r0, [pc, #252]	@ (8005b0c <HAL_DMA_IRQHandler+0x460>)
 8005a0e:	4283      	cmp	r3, r0
 8005a10:	bf18      	it	ne
 8005a12:	428b      	cmpne	r3, r1
 8005a14:	f100 0018 	add.w	r0, r0, #24
 8005a18:	bf0c      	ite	eq
 8005a1a:	2101      	moveq	r1, #1
 8005a1c:	2100      	movne	r1, #0
 8005a1e:	4283      	cmp	r3, r0
 8005a20:	bf08      	it	eq
 8005a22:	f041 0101 	orreq.w	r1, r1, #1
 8005a26:	3018      	adds	r0, #24
 8005a28:	4283      	cmp	r3, r0
 8005a2a:	bf08      	it	eq
 8005a2c:	f041 0101 	orreq.w	r1, r1, #1
 8005a30:	3018      	adds	r0, #24
 8005a32:	4283      	cmp	r3, r0
 8005a34:	bf08      	it	eq
 8005a36:	f041 0101 	orreq.w	r1, r1, #1
 8005a3a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8005a3e:	4283      	cmp	r3, r0
 8005a40:	bf08      	it	eq
 8005a42:	f041 0101 	orreq.w	r1, r1, #1
 8005a46:	3018      	adds	r0, #24
 8005a48:	4283      	cmp	r3, r0
 8005a4a:	bf08      	it	eq
 8005a4c:	f041 0101 	orreq.w	r1, r1, #1
 8005a50:	3018      	adds	r0, #24
 8005a52:	4283      	cmp	r3, r0
 8005a54:	bf08      	it	eq
 8005a56:	f041 0101 	orreq.w	r1, r1, #1
 8005a5a:	3018      	adds	r0, #24
 8005a5c:	4283      	cmp	r3, r0
 8005a5e:	bf08      	it	eq
 8005a60:	f041 0101 	orreq.w	r1, r1, #1
 8005a64:	3018      	adds	r0, #24
 8005a66:	4283      	cmp	r3, r0
 8005a68:	bf08      	it	eq
 8005a6a:	f041 0101 	orreq.w	r1, r1, #1
 8005a6e:	3018      	adds	r0, #24
 8005a70:	4283      	cmp	r3, r0
 8005a72:	bf08      	it	eq
 8005a74:	f041 0101 	orreq.w	r1, r1, #1
 8005a78:	3018      	adds	r0, #24
 8005a7a:	4283      	cmp	r3, r0
 8005a7c:	bf08      	it	eq
 8005a7e:	f041 0101 	orreq.w	r1, r1, #1
 8005a82:	b919      	cbnz	r1, 8005a8c <HAL_DMA_IRQHandler+0x3e0>
 8005a84:	4920      	ldr	r1, [pc, #128]	@ (8005b08 <HAL_DMA_IRQHandler+0x45c>)
 8005a86:	428b      	cmp	r3, r1
 8005a88:	f040 8137 	bne.w	8005cfa <HAL_DMA_IRQHandler+0x64e>
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8005a92:	b189      	cbz	r1, 8005ab8 <HAL_DMA_IRQHandler+0x40c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a94:	60a2      	str	r2, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	0350      	lsls	r0, r2, #13
 8005a9a:	f100 80e7 	bmi.w	8005c6c <HAL_DMA_IRQHandler+0x5c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	05d2      	lsls	r2, r2, #23
 8005aa2:	d403      	bmi.n	8005aac <HAL_DMA_IRQHandler+0x400>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	f022 0208 	bic.w	r2, r2, #8
 8005aaa:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005aac:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005aae:	b11b      	cbz	r3, 8005ab8 <HAL_DMA_IRQHandler+0x40c>
            hdma->XferHalfCpltCallback(hdma);
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	4798      	blx	r3
 8005ab4:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ab8:	f00e 011f 	and.w	r1, lr, #31
 8005abc:	2020      	movs	r0, #32
 8005abe:	4088      	lsls	r0, r1
 8005ac0:	4238      	tst	r0, r7
 8005ac2:	d073      	beq.n	8005bac <HAL_DMA_IRQHandler+0x500>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ac4:	6832      	ldr	r2, [r6, #0]
 8005ac6:	4b12      	ldr	r3, [pc, #72]	@ (8005b10 <HAL_DMA_IRQHandler+0x464>)
 8005ac8:	4f12      	ldr	r7, [pc, #72]	@ (8005b14 <HAL_DMA_IRQHandler+0x468>)
 8005aca:	42ba      	cmp	r2, r7
 8005acc:	bf18      	it	ne
 8005ace:	429a      	cmpne	r2, r3
 8005ad0:	f107 0718 	add.w	r7, r7, #24
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	42ba      	cmp	r2, r7
 8005adc:	bf08      	it	eq
 8005ade:	f043 0301 	orreq.w	r3, r3, #1
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	42ba      	cmp	r2, r7
 8005ae6:	bf08      	it	eq
 8005ae8:	f043 0301 	orreq.w	r3, r3, #1
 8005aec:	3718      	adds	r7, #24
 8005aee:	42ba      	cmp	r2, r7
 8005af0:	bf08      	it	eq
 8005af2:	f043 0301 	orreq.w	r3, r3, #1
 8005af6:	3718      	adds	r7, #24
 8005af8:	42ba      	cmp	r2, r7
 8005afa:	bf08      	it	eq
 8005afc:	f043 0301 	orreq.w	r3, r3, #1
 8005b00:	3718      	adds	r7, #24
 8005b02:	e00b      	b.n	8005b1c <HAL_DMA_IRQHandler+0x470>
 8005b04:	40020040 	.word	0x40020040
 8005b08:	400204b8 	.word	0x400204b8
 8005b0c:	40020070 	.word	0x40020070
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	42ba      	cmp	r2, r7
 8005b1e:	bf08      	it	eq
 8005b20:	f043 0301 	orreq.w	r3, r3, #1
 8005b24:	3718      	adds	r7, #24
 8005b26:	42ba      	cmp	r2, r7
 8005b28:	bf08      	it	eq
 8005b2a:	f043 0301 	orreq.w	r3, r3, #1
 8005b2e:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8005b32:	42ba      	cmp	r2, r7
 8005b34:	bf08      	it	eq
 8005b36:	f043 0301 	orreq.w	r3, r3, #1
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	42ba      	cmp	r2, r7
 8005b3e:	bf08      	it	eq
 8005b40:	f043 0301 	orreq.w	r3, r3, #1
 8005b44:	3718      	adds	r7, #24
 8005b46:	42ba      	cmp	r2, r7
 8005b48:	bf08      	it	eq
 8005b4a:	f043 0301 	orreq.w	r3, r3, #1
 8005b4e:	3718      	adds	r7, #24
 8005b50:	42ba      	cmp	r2, r7
 8005b52:	bf08      	it	eq
 8005b54:	f043 0301 	orreq.w	r3, r3, #1
 8005b58:	3718      	adds	r7, #24
 8005b5a:	42ba      	cmp	r2, r7
 8005b5c:	bf08      	it	eq
 8005b5e:	f043 0301 	orreq.w	r3, r3, #1
 8005b62:	3718      	adds	r7, #24
 8005b64:	42ba      	cmp	r2, r7
 8005b66:	bf08      	it	eq
 8005b68:	f043 0301 	orreq.w	r3, r3, #1
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	42ba      	cmp	r2, r7
 8005b70:	bf08      	it	eq
 8005b72:	f043 0301 	orreq.w	r3, r3, #1
 8005b76:	b91b      	cbnz	r3, 8005b80 <HAL_DMA_IRQHandler+0x4d4>
 8005b78:	4b89      	ldr	r3, [pc, #548]	@ (8005da0 <HAL_DMA_IRQHandler+0x6f4>)
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	f040 80f0 	bne.w	8005d60 <HAL_DMA_IRQHandler+0x6b4>
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b86:	b18b      	cbz	r3, 8005bac <HAL_DMA_IRQHandler+0x500>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b88:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b8a:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 8005b8e:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b90:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b92:	d074      	beq.n	8005c7e <HAL_DMA_IRQHandler+0x5d2>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b94:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b98:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b9a:	f000 808a 	beq.w	8005cb2 <HAL_DMA_IRQHandler+0x606>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b9e:	031f      	lsls	r7, r3, #12
 8005ba0:	f140 8095 	bpl.w	8005cce <HAL_DMA_IRQHandler+0x622>
          if(hdma->XferCpltCallback != NULL)
 8005ba4:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8005ba6:	b10b      	cbz	r3, 8005bac <HAL_DMA_IRQHandler+0x500>
            hdma->XferCpltCallback(hdma);
 8005ba8:	4630      	mov	r0, r6
 8005baa:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bac:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f43f ae30 	beq.w	8005814 <HAL_DMA_IRQHandler+0x168>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bb4:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8005bb6:	07dc      	lsls	r4, r3, #31
 8005bb8:	d51e      	bpl.n	8005bf8 <HAL_DMA_IRQHandler+0x54c>
        __HAL_DMA_DISABLE(hdma);
 8005bba:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	f886 1035 	strb.w	r1, [r6, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bc2:	4978      	ldr	r1, [pc, #480]	@ (8005da4 <HAL_DMA_IRQHandler+0x6f8>)
        __HAL_DMA_DISABLE(hdma);
 8005bc4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bc6:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8005bca:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bce:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e002      	b.n	8005bda <HAL_DMA_IRQHandler+0x52e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	07d8      	lsls	r0, r3, #31
 8005bd8:	d504      	bpl.n	8005be4 <HAL_DMA_IRQHandler+0x538>
          if (++count > timeout)
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	428b      	cmp	r3, r1
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	d9f7      	bls.n	8005bd4 <HAL_DMA_IRQHandler+0x528>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005be4:	6813      	ldr	r3, [r2, #0]
 8005be6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005be8:	bf4c      	ite	mi
 8005bea:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005bec:	2301      	movpl	r3, #1
 8005bee:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005bf8:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f43f ae0a 	beq.w	8005814 <HAL_DMA_IRQHandler+0x168>
          hdma->XferCpltCallback(hdma);
 8005c00:	4630      	mov	r0, r6
}
 8005c02:	b002      	add	sp, #8
 8005c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8005c08:	4718      	bx	r3
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c0a:	fa27 f102 	lsr.w	r1, r7, r2
 8005c0e:	07c9      	lsls	r1, r1, #31
 8005c10:	f53f ae83 	bmi.w	800591a <HAL_DMA_IRQHandler+0x26e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c14:	2104      	movs	r1, #4
 8005c16:	4091      	lsls	r1, r2
 8005c18:	420f      	tst	r7, r1
 8005c1a:	f47f aee2 	bne.w	80059e2 <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c1e:	2110      	movs	r1, #16
 8005c20:	fa01 f202 	lsl.w	r2, r1, r2
 8005c24:	4217      	tst	r7, r2
 8005c26:	f47f af31 	bne.w	8005a8c <HAL_DMA_IRQHandler+0x3e0>
 8005c2a:	e745      	b.n	8005ab8 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c2c:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8005c30:	f04f 0c08 	mov.w	ip, #8
 8005c34:	f00e 021f 	and.w	r2, lr, #31
 8005c38:	fa0c f102 	lsl.w	r1, ip, r2
 8005c3c:	420f      	tst	r7, r1
 8005c3e:	f47f ae06 	bne.w	800584e <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c42:	fa27 f102 	lsr.w	r1, r7, r2
 8005c46:	07c9      	lsls	r1, r1, #31
 8005c48:	f53f ae67 	bmi.w	800591a <HAL_DMA_IRQHandler+0x26e>
 8005c4c:	e66f      	b.n	800592e <HAL_DMA_IRQHandler+0x282>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c4e:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8005c52:	2108      	movs	r1, #8
 8005c54:	f00e 021f 	and.w	r2, lr, #31
 8005c58:	4091      	lsls	r1, r2
 8005c5a:	420f      	tst	r7, r1
 8005c5c:	f47f adf7 	bne.w	800584e <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c60:	fa27 f102 	lsr.w	r1, r7, r2
 8005c64:	07c9      	lsls	r1, r1, #31
 8005c66:	f53f ae58 	bmi.w	800591a <HAL_DMA_IRQHandler+0x26e>
 8005c6a:	e660      	b.n	800592e <HAL_DMA_IRQHandler+0x282>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0319      	lsls	r1, r3, #12
 8005c70:	f57f af1c 	bpl.w	8005aac <HAL_DMA_IRQHandler+0x400>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c74:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f47f af1a 	bne.w	8005ab0 <HAL_DMA_IRQHandler+0x404>
 8005c7c:	e71c      	b.n	8005ab8 <HAL_DMA_IRQHandler+0x40c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7e:	f023 0316 	bic.w	r3, r3, #22
 8005c82:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c84:	6953      	ldr	r3, [r2, #20]
 8005c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c8a:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c8c:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005c8e:	b31b      	cbz	r3, 8005cd8 <HAL_DMA_IRQHandler+0x62c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	f023 0308 	bic.w	r3, r3, #8
 8005c96:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c98:	233f      	movs	r3, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8005c9c:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c9e:	408b      	lsls	r3, r1
 8005ca0:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8005ca2:	6d33      	ldr	r3, [r6, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8005ca4:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005ca8:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1a7      	bne.n	8005c00 <HAL_DMA_IRQHandler+0x554>
 8005cb0:	e5b0      	b.n	8005814 <HAL_DMA_IRQHandler+0x168>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005cb2:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8005cb6:	f47f af75 	bne.w	8005ba4 <HAL_DMA_IRQHandler+0x4f8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005cba:	6811      	ldr	r1, [r2, #0]
 8005cbc:	f021 0110 	bic.w	r1, r1, #16
 8005cc0:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005cc2:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8005cc4:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005cc8:	f886 2035 	strb.w	r2, [r6, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8005ccc:	e76a      	b.n	8005ba4 <HAL_DMA_IRQHandler+0x4f8>
            if(hdma->XferM1CpltCallback != NULL)
 8005cce:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f47f af69 	bne.w	8005ba8 <HAL_DMA_IRQHandler+0x4fc>
 8005cd6:	e769      	b.n	8005bac <HAL_DMA_IRQHandler+0x500>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cd8:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1d8      	bne.n	8005c90 <HAL_DMA_IRQHandler+0x5e4>
 8005cde:	e7db      	b.n	8005c98 <HAL_DMA_IRQHandler+0x5ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ce0:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	4091      	lsls	r1, r2
 8005ce6:	4239      	tst	r1, r7
 8005ce8:	f43f ae85 	beq.w	80059f6 <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005cec:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cee:	2110      	movs	r1, #16
 8005cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf4:	4217      	tst	r7, r2
 8005cf6:	f43f aedf 	beq.w	8005ab8 <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005cfa:	6819      	ldr	r1, [r3, #0]
 8005cfc:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8005d00:	e6c7      	b.n	8005a92 <HAL_DMA_IRQHandler+0x3e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d02:	2502      	movs	r5, #2
 8005d04:	4085      	lsls	r5, r0
 8005d06:	420d      	tst	r5, r1
 8005d08:	d00b      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x676>
 8005d0a:	0797      	lsls	r7, r2, #30
 8005d0c:	d509      	bpl.n	8005d22 <HAL_DMA_IRQHandler+0x676>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d0e:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005d10:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d12:	d534      	bpl.n	8005d7e <HAL_DMA_IRQHandler+0x6d2>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d14:	03d7      	lsls	r7, r2, #15
 8005d16:	d43e      	bmi.n	8005d96 <HAL_DMA_IRQHandler+0x6ea>
          if(hdma->XferM1CpltCallback != NULL)
 8005d18:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f47f af70 	bne.w	8005c00 <HAL_DMA_IRQHandler+0x554>
 8005d20:	e578      	b.n	8005814 <HAL_DMA_IRQHandler+0x168>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d22:	2508      	movs	r5, #8
 8005d24:	4085      	lsls	r5, r0
 8005d26:	420d      	tst	r5, r1
 8005d28:	f43f ad74 	beq.w	8005814 <HAL_DMA_IRQHandler+0x168>
 8005d2c:	0715      	lsls	r5, r2, #28
 8005d2e:	f57f ad71 	bpl.w	8005814 <HAL_DMA_IRQHandler+0x168>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d32:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005d34:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d36:	f022 020e 	bic.w	r2, r2, #14
 8005d3a:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d3c:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8005d3e:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d40:	fa03 f000 	lsl.w	r0, r3, r0
 8005d44:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d46:	6573      	str	r3, [r6, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8005d48:	f886 1034 	strb.w	r1, [r6, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005d4c:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	f43f ad5f 	beq.w	8005814 <HAL_DMA_IRQHandler+0x168>
        hdma->XferErrorCallback(hdma);
 8005d56:	4630      	mov	r0, r6
}
 8005d58:	b002      	add	sp, #8
 8005d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8005d5e:	4710      	bx	r2
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d60:	6813      	ldr	r3, [r2, #0]
 8005d62:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d66:	e70e      	b.n	8005b86 <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d68:	0692      	lsls	r2, r2, #26
 8005d6a:	d403      	bmi.n	8005d74 <HAL_DMA_IRQHandler+0x6c8>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	f022 0204 	bic.w	r2, r2, #4
 8005d72:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005d74:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f47f af42 	bne.w	8005c00 <HAL_DMA_IRQHandler+0x554>
 8005d7c:	e54a      	b.n	8005814 <HAL_DMA_IRQHandler+0x168>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d7e:	f012 0220 	ands.w	r2, r2, #32
 8005d82:	d108      	bne.n	8005d96 <HAL_DMA_IRQHandler+0x6ea>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d84:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005d86:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d88:	f021 010a 	bic.w	r1, r1, #10
 8005d8c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005d8e:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005d92:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005d96:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f47f af31 	bne.w	8005c00 <HAL_DMA_IRQHandler+0x554>
 8005d9e:	e539      	b.n	8005814 <HAL_DMA_IRQHandler+0x168>
 8005da0:	400204b8 	.word	0x400204b8
 8005da4:	1b4e81b5 	.word	0x1b4e81b5

08005da8 <HAL_DMA_GetState>:
  return hdma->State;
 8005da8:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop

08005db0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005db0:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8005db2:	4770      	bx	lr

08005db4 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d035      	beq.n	8005e24 <HAL_DMA2D_Init+0x70>
{
 8005db8:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005dba:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005dc4:	b34b      	cbz	r3, 8005e1a <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005dc6:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dc8:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005dca:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dcc:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005dd0:	69e1      	ldr	r1, [r4, #28]
 8005dd2:	681d      	ldr	r5, [r3, #0]
 8005dd4:	4814      	ldr	r0, [pc, #80]	@ (8005e28 <HAL_DMA2D_Init+0x74>)
 8005dd6:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005dd8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005dda:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ddc:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005dde:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005de0:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005de2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005de4:	4302      	orrs	r2, r0
 8005de6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005de8:	4810      	ldr	r0, [pc, #64]	@ (8005e2c <HAL_DMA2D_Init+0x78>)
 8005dea:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005dec:	4910      	ldr	r1, [pc, #64]	@ (8005e30 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005dee:	4302      	orrs	r2, r0
 8005df0:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005df4:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005df6:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005dfa:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005dfc:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005dfe:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005e00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005e02:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e06:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005e08:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e10:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005e12:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005e14:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8005e18:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8005e1a:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8005e1e:	f7fc ff7d 	bl	8002d1c <HAL_DMA2D_MspInit>
 8005e22:	e7d0      	b.n	8005dc6 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8005e24:	2001      	movs	r0, #1
}
 8005e26:	4770      	bx	lr
 8005e28:	fff8ffbf 	.word	0xfff8ffbf
 8005e2c:	fffffef8 	.word	0xfffffef8
 8005e30:	ffff0000 	.word	0xffff0000

08005e34 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005e34:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005e36:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8005e3a:	2c01      	cmp	r4, #1
 8005e3c:	d03a      	beq.n	8005eb4 <HAL_DMA2D_Start+0x80>
 8005e3e:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e40:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 8005e42:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e46:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e48:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e4c:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e50:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e54:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e56:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e5a:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 8005e5e:	ea43 030c 	orr.w	r3, r3, ip
 8005e62:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005e64:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e66:	d00a      	beq.n	8005e7e <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005e68:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 8005e6c:	d025      	beq.n	8005eba <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005e6e:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8005e70:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005e72:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6023      	str	r3, [r4, #0]
}
 8005e7a:	bc70      	pop	{r4, r5, r6}
 8005e7c:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005e7e:	6883      	ldr	r3, [r0, #8]
 8005e80:	b1b3      	cbz	r3, 8005eb0 <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d026      	beq.n	8005ed4 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005e86:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005e88:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005e8c:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005e90:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005e92:	d022      	beq.n	8005eda <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005e94:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005e96:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005e9a:	d010      	beq.n	8005ebe <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 8005e9c:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8005e9e:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005ea0:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8005ea2:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005ea4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8005ea8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005eac:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005eb0:	63a1      	str	r1, [r4, #56]	@ 0x38
 8005eb2:	e7dd      	b.n	8005e70 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 8005eb4:	2002      	movs	r0, #2
}
 8005eb6:	bc70      	pop	{r4, r5, r6}
 8005eb8:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005eba:	6161      	str	r1, [r4, #20]
 8005ebc:	e7d8      	b.n	8005e70 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 8005ebe:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 8005ec0:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ec2:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8005ec4:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ec6:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8005eca:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8005ece:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8005ed2:	e7ed      	b.n	8005eb0 <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 8005ed4:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8005ed8:	e7ea      	b.n	8005eb0 <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 8005eda:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 8005edc:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ede:	02db      	lsls	r3, r3, #11
 8005ee0:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8005ee4:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8005ee8:	e7e2      	b.n	8005eb0 <HAL_DMA2D_Start+0x7c>
 8005eea:	bf00      	nop

08005eec <HAL_DMA2D_PollForTransfer>:
{
 8005eec:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8005eee:	2300      	movs	r3, #0
{
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8005ef6:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005ef8:	6803      	ldr	r3, [r0, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	07d6      	lsls	r6, r2, #31
 8005efe:	d40f      	bmi.n	8005f20 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005f00:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005f02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f04:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8005f06:	0691      	lsls	r1, r2, #26
 8005f08:	d432      	bmi.n	8005f70 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005f0a:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f0c:	2201      	movs	r2, #1
  return HAL_OK;
 8005f0e:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005f10:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f12:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 8005f16:	2300      	movs	r3, #0
 8005f18:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8005f20:	f7fd fae6 	bl	80034f0 <HAL_GetTick>
 8005f24:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005f26:	1c68      	adds	r0, r5, #1
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	d152      	bne.n	8005fd2 <HAL_DMA2D_PollForTransfer+0xe6>
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	0796      	lsls	r6, r2, #30
 8005f30:	d4e6      	bmi.n	8005f00 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005f36:	9a01      	ldr	r2, [sp, #4]
 8005f38:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8005f3c:	d0f6      	beq.n	8005f2c <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f3e:	9a01      	ldr	r2, [sp, #4]
 8005f40:	0691      	lsls	r1, r2, #26
 8005f42:	d503      	bpl.n	8005f4c <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f44:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f46:	f042 0202 	orr.w	r2, r2, #2
 8005f4a:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005f4c:	9a01      	ldr	r2, [sp, #4]
 8005f4e:	07d2      	lsls	r2, r2, #31
 8005f50:	d503      	bpl.n	8005f5a <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f54:	f042 0201 	orr.w	r2, r2, #1
 8005f58:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005f5a:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f5c:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005f5e:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f60:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 8005f64:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 8005f66:	2300      	movs	r3, #0
 8005f68:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8005f70:	f7fd fabe 	bl	80034f0 <HAL_GetTick>
 8005f74:	1c6a      	adds	r2, r5, #1
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005f76:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8005f78:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005f7a:	d13b      	bne.n	8005ff4 <HAL_DMA2D_PollForTransfer+0x108>
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	06d1      	lsls	r1, r2, #27
 8005f80:	d4c3      	bmi.n	8005f0a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005f86:	9a01      	ldr	r2, [sp, #4]
 8005f88:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8005f8c:	d0f6      	beq.n	8005f7c <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f8e:	9a01      	ldr	r2, [sp, #4]
 8005f90:	0716      	lsls	r6, r2, #28
 8005f92:	d503      	bpl.n	8005f9c <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f94:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f96:	f042 0204 	orr.w	r2, r2, #4
 8005f9a:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f9c:	9a01      	ldr	r2, [sp, #4]
 8005f9e:	0695      	lsls	r5, r2, #26
 8005fa0:	d503      	bpl.n	8005faa <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005fa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fa4:	f042 0202 	orr.w	r2, r2, #2
 8005fa8:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005faa:	9a01      	ldr	r2, [sp, #4]
 8005fac:	07d0      	lsls	r0, r2, #31
 8005fae:	d503      	bpl.n	8005fb8 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005fb0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005fb8:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005fba:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005fbc:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005fbe:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 8005fc2:	e7cf      	b.n	8005f64 <HAL_DMA2D_PollForTransfer+0x78>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fc4:	f7fd fa94 	bl	80034f0 <HAL_GetTick>
 8005fc8:	1b80      	subs	r0, r0, r6
 8005fca:	42a8      	cmp	r0, r5
 8005fcc:	d81c      	bhi.n	8006008 <HAL_DMA2D_PollForTransfer+0x11c>
 8005fce:	b1dd      	cbz	r5, 8006008 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	0790      	lsls	r0, r2, #30
 8005fd6:	d493      	bmi.n	8005f00 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005fdc:	9a01      	ldr	r2, [sp, #4]
 8005fde:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8005fe2:	d0ef      	beq.n	8005fc4 <HAL_DMA2D_PollForTransfer+0xd8>
 8005fe4:	e7ab      	b.n	8005f3e <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fe6:	f7fd fa83 	bl	80034f0 <HAL_GetTick>
 8005fea:	1b80      	subs	r0, r0, r6
 8005fec:	42a8      	cmp	r0, r5
 8005fee:	d80b      	bhi.n	8006008 <HAL_DMA2D_PollForTransfer+0x11c>
 8005ff0:	b155      	cbz	r5, 8006008 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	06d2      	lsls	r2, r2, #27
 8005ff8:	d487      	bmi.n	8005f0a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005ffe:	9a01      	ldr	r2, [sp, #4]
 8006000:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8006004:	d0ef      	beq.n	8005fe6 <HAL_DMA2D_PollForTransfer+0xfa>
 8006006:	e7c2      	b.n	8005f8e <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800600a:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 800600c:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800600e:	f043 0320 	orr.w	r3, r3, #32
 8006012:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006014:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 8006018:	e77d      	b.n	8005f16 <HAL_DMA2D_PollForTransfer+0x2a>
 800601a:	bf00      	nop

0800601c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800601c:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 8006020:	2a01      	cmp	r2, #1
 8006022:	d05f      	beq.n	80060e4 <HAL_DMA2D_ConfigLayer+0xc8>
 8006024:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006026:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800602a:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800602c:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8006030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8006034:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8006036:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006038:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 800603c:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006040:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006042:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006044:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006046:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006048:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800604a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800604e:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006052:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006054:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006056:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800605a:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800605e:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006060:	d923      	bls.n	80060aa <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006062:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006066:	b971      	cbnz	r1, 8006086 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006068:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800606a:	491f      	ldr	r1, [pc, #124]	@ (80060e8 <HAL_DMA2D_ConfigLayer+0xcc>)
 800606c:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800606e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006070:	4311      	orrs	r1, r2
 8006072:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006074:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 8006076:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006078:	2101      	movs	r1, #1
  return HAL_OK;
 800607a:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800607c:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 8006080:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8006084:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006086:	2d0b      	cmp	r5, #11
 8006088:	d12a      	bne.n	80060e0 <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800608a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800608c:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8006090:	4816      	ldr	r0, [pc, #88]	@ (80060ec <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006092:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006096:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006098:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800609c:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800609e:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060a2:	430a      	orrs	r2, r1
 80060a4:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060a6:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060a8:	e7e5      	b.n	8006076 <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80060aa:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 80060ae:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80060b0:	b959      	cbnz	r1, 80060ca <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060b2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80060b4:	490c      	ldr	r1, [pc, #48]	@ (80060e8 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060b6:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060b8:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80060ba:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060bc:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80060be:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80060c2:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060c4:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80060c6:	62a0      	str	r0, [r4, #40]	@ 0x28
 80060c8:	e7d5      	b.n	8006076 <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060ca:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80060cc:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060d0:	4905      	ldr	r1, [pc, #20]	@ (80060e8 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060d2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060d4:	4029      	ands	r1, r5
 80060d6:	4311      	orrs	r1, r2
 80060d8:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060da:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80060dc:	6226      	str	r6, [r4, #32]
 80060de:	e7ca      	b.n	8006076 <HAL_DMA2D_ConfigLayer+0x5a>
 80060e0:	4801      	ldr	r0, [pc, #4]	@ (80060e8 <HAL_DMA2D_ConfigLayer+0xcc>)
 80060e2:	e7d6      	b.n	8006092 <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 80060e4:	2002      	movs	r0, #2
}
 80060e6:	4770      	bx	lr
 80060e8:	00ccfff0 	.word	0x00ccfff0
 80060ec:	00c0fff0 	.word	0x00c0fff0

080060f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060f4:	680c      	ldr	r4, [r1, #0]
{
 80060f6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060f8:	2c00      	cmp	r4, #0
 80060fa:	f000 80a5 	beq.w	8006248 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 80060fe:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006100:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006104:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006108:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800610a:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800610e:	ea1c 0a04 	ands.w	sl, ip, r4
 8006112:	f000 8094 	beq.w	800623e <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006116:	9900      	ldr	r1, [sp, #0]
 8006118:	005f      	lsls	r7, r3, #1
 800611a:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800611c:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800611e:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006122:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006126:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800612a:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800612c:	f1b8 0f01 	cmp.w	r8, #1
 8006130:	f240 808d 	bls.w	800624e <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006134:	2a03      	cmp	r2, #3
 8006136:	f040 80cb 	bne.w	80062d0 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800613a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800613c:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800613e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006142:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006146:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800614a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800614c:	d077      	beq.n	800623e <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800614e:	4e7f      	ldr	r6, [pc, #508]	@ (800634c <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006150:	f003 0703 	and.w	r7, r3, #3
 8006154:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006156:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800615a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800615c:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006160:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006164:	497a      	ldr	r1, [pc, #488]	@ (8006350 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006166:	f8c6 2154 	str.w	r2, [r6, #340]	@ 0x154
 800616a:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
 800616e:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006172:	4288      	cmp	r0, r1
 8006174:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006178:	f002 0202 	and.w	r2, r2, #2
 800617c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006180:	9203      	str	r2, [sp, #12]
 8006182:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006184:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006186:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800618a:	d031      	beq.n	80061f0 <HAL_GPIO_Init+0x100>
 800618c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006190:	4288      	cmp	r0, r1
 8006192:	f000 80b0 	beq.w	80062f6 <HAL_GPIO_Init+0x206>
 8006196:	496f      	ldr	r1, [pc, #444]	@ (8006354 <HAL_GPIO_Init+0x264>)
 8006198:	4288      	cmp	r0, r1
 800619a:	f000 80b2 	beq.w	8006302 <HAL_GPIO_Init+0x212>
 800619e:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8006358 <HAL_GPIO_Init+0x268>
 80061a2:	4560      	cmp	r0, ip
 80061a4:	f000 80a1 	beq.w	80062ea <HAL_GPIO_Init+0x1fa>
 80061a8:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 800635c <HAL_GPIO_Init+0x26c>
 80061ac:	4560      	cmp	r0, ip
 80061ae:	f000 80b4 	beq.w	800631a <HAL_GPIO_Init+0x22a>
 80061b2:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8006360 <HAL_GPIO_Init+0x270>
 80061b6:	4560      	cmp	r0, ip
 80061b8:	f000 80b5 	beq.w	8006326 <HAL_GPIO_Init+0x236>
 80061bc:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8006364 <HAL_GPIO_Init+0x274>
 80061c0:	4560      	cmp	r0, ip
 80061c2:	f000 80a4 	beq.w	800630e <HAL_GPIO_Init+0x21e>
 80061c6:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8006368 <HAL_GPIO_Init+0x278>
 80061ca:	4560      	cmp	r0, ip
 80061cc:	f000 80b1 	beq.w	8006332 <HAL_GPIO_Init+0x242>
 80061d0:	f8df c198 	ldr.w	ip, [pc, #408]	@ 800636c <HAL_GPIO_Init+0x27c>
 80061d4:	4560      	cmp	r0, ip
 80061d6:	f000 80b2 	beq.w	800633e <HAL_GPIO_Init+0x24e>
 80061da:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8006370 <HAL_GPIO_Init+0x280>
 80061de:	4560      	cmp	r0, ip
 80061e0:	bf0c      	ite	eq
 80061e2:	f04f 0c09 	moveq.w	ip, #9
 80061e6:	f04f 0c0a 	movne.w	ip, #10
 80061ea:	fa0c f707 	lsl.w	r7, ip, r7
 80061ee:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061f0:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061f2:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 80061f4:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 80061f8:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 80061fc:	bf4c      	ite	mi
 80061fe:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8006202:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006204:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8006206:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 800620a:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800620e:	bf54      	ite	pl
 8006210:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8006212:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006216:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8006218:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800621c:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006220:	bf54      	ite	pl
 8006222:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8006224:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006228:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800622a:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800622e:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8006232:	bf54      	ite	pl
 8006234:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8006236:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800623a:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 800623e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006240:	fa34 f203 	lsrs.w	r2, r4, r3
 8006244:	f47f af61 	bne.w	800610a <HAL_GPIO_Init+0x1a>
  }
}
 8006248:	b005      	add	sp, #20
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800624e:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006250:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8006252:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006256:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006258:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800625c:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006260:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006262:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006266:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8006268:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800626c:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8006270:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006274:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006278:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800627c:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8006280:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006284:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8006288:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800628c:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006290:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8006294:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006298:	f47f af4f 	bne.w	800613a <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800629c:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062a0:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 80062a2:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062a6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062aa:	6909      	ldr	r1, [r1, #16]
 80062ac:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80062b0:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 80062b4:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062b8:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062ba:	210f      	movs	r1, #15
 80062bc:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062c0:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062c2:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062c6:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80062ca:	f8c8 c020 	str.w	ip, [r8, #32]
 80062ce:	e734      	b.n	800613a <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062d0:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 80062d2:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062d6:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062d8:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062dc:	fa01 fc07 	lsl.w	ip, r1, r7
 80062e0:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80062e4:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062e8:	e727      	b.n	800613a <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062ea:	f04f 0c03 	mov.w	ip, #3
 80062ee:	fa0c f707 	lsl.w	r7, ip, r7
 80062f2:	433a      	orrs	r2, r7
 80062f4:	e77c      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 80062f6:	f04f 0c01 	mov.w	ip, #1
 80062fa:	fa0c f707 	lsl.w	r7, ip, r7
 80062fe:	433a      	orrs	r2, r7
 8006300:	e776      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 8006302:	f04f 0c02 	mov.w	ip, #2
 8006306:	fa0c f707 	lsl.w	r7, ip, r7
 800630a:	433a      	orrs	r2, r7
 800630c:	e770      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 800630e:	f04f 0c06 	mov.w	ip, #6
 8006312:	fa0c f707 	lsl.w	r7, ip, r7
 8006316:	433a      	orrs	r2, r7
 8006318:	e76a      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 800631a:	f04f 0c04 	mov.w	ip, #4
 800631e:	fa0c f707 	lsl.w	r7, ip, r7
 8006322:	433a      	orrs	r2, r7
 8006324:	e764      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 8006326:	f04f 0c05 	mov.w	ip, #5
 800632a:	fa0c f707 	lsl.w	r7, ip, r7
 800632e:	433a      	orrs	r2, r7
 8006330:	e75e      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 8006332:	f04f 0c07 	mov.w	ip, #7
 8006336:	fa0c f707 	lsl.w	r7, ip, r7
 800633a:	433a      	orrs	r2, r7
 800633c:	e758      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 800633e:	f04f 0c08 	mov.w	ip, #8
 8006342:	fa0c f707 	lsl.w	r7, ip, r7
 8006346:	433a      	orrs	r2, r7
 8006348:	e752      	b.n	80061f0 <HAL_GPIO_Init+0x100>
 800634a:	bf00      	nop
 800634c:	58024400 	.word	0x58024400
 8006350:	58020000 	.word	0x58020000
 8006354:	58020800 	.word	0x58020800
 8006358:	58020c00 	.word	0x58020c00
 800635c:	58021000 	.word	0x58021000
 8006360:	58021400 	.word	0x58021400
 8006364:	58021800 	.word	0x58021800
 8006368:	58021c00 	.word	0x58021c00
 800636c:	58022000 	.word	0x58022000
 8006370:	58022400 	.word	0x58022400

08006374 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006374:	2900      	cmp	r1, #0
 8006376:	f000 80ac 	beq.w	80064d2 <HAL_GPIO_DeInit+0x15e>
  uint32_t position = 0x00U;
 800637a:	2300      	movs	r3, #0
{
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006380:	2601      	movs	r6, #1
{
 8006382:	b083      	sub	sp, #12
 8006384:	f8df a168 	ldr.w	sl, [pc, #360]	@ 80064f0 <HAL_GPIO_DeInit+0x17c>
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006388:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800638c:	f04f 0903 	mov.w	r9, #3
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006390:	fa06 f203 	lsl.w	r2, r6, r3
    if (iocurrent != 0x00U)
 8006394:	ea12 0c01 	ands.w	ip, r2, r1
 8006398:	d073      	beq.n	8006482 <HAL_GPIO_DeInit+0x10e>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800639a:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800639e:	f003 0403 	and.w	r4, r3, #3
 80063a2:	4455      	add	r5, sl
 80063a4:	00a4      	lsls	r4, r4, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80063a6:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80063a8:	fa08 fe04 	lsl.w	lr, r8, r4
 80063ac:	ea0e 0707 	and.w	r7, lr, r7
 80063b0:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80063b2:	4f4b      	ldr	r7, [pc, #300]	@ (80064e0 <HAL_GPIO_DeInit+0x16c>)
 80063b4:	42b8      	cmp	r0, r7
 80063b6:	d027      	beq.n	8006408 <HAL_GPIO_DeInit+0x94>
 80063b8:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80063bc:	42b8      	cmp	r0, r7
 80063be:	d067      	beq.n	8006490 <HAL_GPIO_DeInit+0x11c>
 80063c0:	4f48      	ldr	r7, [pc, #288]	@ (80064e4 <HAL_GPIO_DeInit+0x170>)
 80063c2:	42b8      	cmp	r0, r7
 80063c4:	d067      	beq.n	8006496 <HAL_GPIO_DeInit+0x122>
 80063c6:	4f48      	ldr	r7, [pc, #288]	@ (80064e8 <HAL_GPIO_DeInit+0x174>)
 80063c8:	42b8      	cmp	r0, r7
 80063ca:	d06e      	beq.n	80064aa <HAL_GPIO_DeInit+0x136>
 80063cc:	4f47      	ldr	r7, [pc, #284]	@ (80064ec <HAL_GPIO_DeInit+0x178>)
 80063ce:	42b8      	cmp	r0, r7
 80063d0:	d070      	beq.n	80064b4 <HAL_GPIO_DeInit+0x140>
 80063d2:	f8df b120 	ldr.w	fp, [pc, #288]	@ 80064f4 <HAL_GPIO_DeInit+0x180>
 80063d6:	4558      	cmp	r0, fp
 80063d8:	d062      	beq.n	80064a0 <HAL_GPIO_DeInit+0x12c>
 80063da:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 80064f8 <HAL_GPIO_DeInit+0x184>
 80063de:	4558      	cmp	r0, fp
 80063e0:	d072      	beq.n	80064c8 <HAL_GPIO_DeInit+0x154>
 80063e2:	f8df b118 	ldr.w	fp, [pc, #280]	@ 80064fc <HAL_GPIO_DeInit+0x188>
 80063e6:	4558      	cmp	r0, fp
 80063e8:	d074      	beq.n	80064d4 <HAL_GPIO_DeInit+0x160>
 80063ea:	f8df b114 	ldr.w	fp, [pc, #276]	@ 8006500 <HAL_GPIO_DeInit+0x18c>
 80063ee:	4558      	cmp	r0, fp
 80063f0:	d065      	beq.n	80064be <HAL_GPIO_DeInit+0x14a>
 80063f2:	f8df b110 	ldr.w	fp, [pc, #272]	@ 8006504 <HAL_GPIO_DeInit+0x190>
 80063f6:	4558      	cmp	r0, fp
 80063f8:	bf14      	ite	ne
 80063fa:	f04f 0b0a 	movne.w	fp, #10
 80063fe:	f04f 0b09 	moveq.w	fp, #9
 8006402:	fa0b f404 	lsl.w	r4, fp, r4
 8006406:	e000      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 8006408:	2400      	movs	r4, #0
 800640a:	9f01      	ldr	r7, [sp, #4]
 800640c:	42a7      	cmp	r7, r4
 800640e:	d119      	bne.n	8006444 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006410:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 8006414:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8006418:	ea27 070c 	bic.w	r7, r7, ip
 800641c:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006420:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8006424:	ea27 070c 	bic.w	r7, r7, ip
 8006428:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800642c:	6867      	ldr	r7, [r4, #4]
 800642e:	ea27 070c 	bic.w	r7, r7, ip
 8006432:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006434:	6827      	ldr	r7, [r4, #0]
 8006436:	ea27 070c 	bic.w	r7, r7, ip
 800643a:	6027      	str	r7, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800643c:	68ac      	ldr	r4, [r5, #8]
 800643e:	ea24 040e 	bic.w	r4, r4, lr
 8006442:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006444:	005d      	lsls	r5, r3, #1
 8006446:	6804      	ldr	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006448:	08df      	lsrs	r7, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800644a:	fa09 f505 	lsl.w	r5, r9, r5
 800644e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8006452:	432c      	orrs	r4, r5
 8006454:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006456:	f003 0407 	and.w	r4, r3, #7
 800645a:	f8d7 c020 	ldr.w	ip, [r7, #32]
 800645e:	00a4      	lsls	r4, r4, #2
 8006460:	fa08 f404 	lsl.w	r4, r8, r4
 8006464:	ea2c 0404 	bic.w	r4, ip, r4
 8006468:	623c      	str	r4, [r7, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800646a:	68c4      	ldr	r4, [r0, #12]
 800646c:	ea24 0405 	bic.w	r4, r4, r5
 8006470:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006472:	6844      	ldr	r4, [r0, #4]
 8006474:	ea24 0202 	bic.w	r2, r4, r2
 8006478:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800647a:	6882      	ldr	r2, [r0, #8]
 800647c:	ea22 0205 	bic.w	r2, r2, r5
 8006480:	6082      	str	r2, [r0, #8]
    }

    position++;
 8006482:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 8006484:	fa31 f203 	lsrs.w	r2, r1, r3
 8006488:	d182      	bne.n	8006390 <HAL_GPIO_DeInit+0x1c>
  }
}
 800648a:	b003      	add	sp, #12
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006490:	fa06 f404 	lsl.w	r4, r6, r4
 8006494:	e7b9      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 8006496:	f04f 0b02 	mov.w	fp, #2
 800649a:	fa0b f404 	lsl.w	r4, fp, r4
 800649e:	e7b4      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 80064a0:	f04f 0b05 	mov.w	fp, #5
 80064a4:	fa0b f404 	lsl.w	r4, fp, r4
 80064a8:	e7af      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 80064aa:	f04f 0b03 	mov.w	fp, #3
 80064ae:	fa0b f404 	lsl.w	r4, fp, r4
 80064b2:	e7aa      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 80064b4:	f04f 0b04 	mov.w	fp, #4
 80064b8:	fa0b f404 	lsl.w	r4, fp, r4
 80064bc:	e7a5      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 80064be:	f04f 0b08 	mov.w	fp, #8
 80064c2:	fa0b f404 	lsl.w	r4, fp, r4
 80064c6:	e7a0      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 80064c8:	f04f 0b06 	mov.w	fp, #6
 80064cc:	fa0b f404 	lsl.w	r4, fp, r4
 80064d0:	e79b      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 80064d2:	4770      	bx	lr
 80064d4:	f04f 0b07 	mov.w	fp, #7
 80064d8:	fa0b f404 	lsl.w	r4, fp, r4
 80064dc:	e795      	b.n	800640a <HAL_GPIO_DeInit+0x96>
 80064de:	bf00      	nop
 80064e0:	58020000 	.word	0x58020000
 80064e4:	58020800 	.word	0x58020800
 80064e8:	58020c00 	.word	0x58020c00
 80064ec:	58021000 	.word	0x58021000
 80064f0:	58000400 	.word	0x58000400
 80064f4:	58021400 	.word	0x58021400
 80064f8:	58021800 	.word	0x58021800
 80064fc:	58021c00 	.word	0x58021c00
 8006500:	58022000 	.word	0x58022000
 8006504:	58022400 	.word	0x58022400

08006508 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006508:	6903      	ldr	r3, [r0, #16]
 800650a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800650c:	bf14      	ite	ne
 800650e:	2001      	movne	r0, #1
 8006510:	2000      	moveq	r0, #0
 8006512:	4770      	bx	lr

08006514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006514:	b902      	cbnz	r2, 8006518 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006516:	0409      	lsls	r1, r1, #16
 8006518:	6181      	str	r1, [r0, #24]
  }
}
 800651a:	4770      	bx	lr

0800651c <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800651c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006520:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8006524:	4201      	tst	r1, r0
 8006526:	d100      	bne.n	800652a <HAL_GPIO_EXTI_IRQHandler+0xe>
 8006528:	4770      	bx	lr
{
 800652a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800652c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006530:	f7fc fb92 	bl	8002c58 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006534:	bd08      	pop	{r3, pc}
 8006536:	bf00      	nop

08006538 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006538:	2800      	cmp	r0, #0
 800653a:	d053      	beq.n	80065e4 <HAL_I2C_Init+0xac>
{
 800653c:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800653e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006542:	4604      	mov	r4, r0
 8006544:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006548:	2b00      	cmp	r3, #0
 800654a:	d046      	beq.n	80065da <HAL_I2C_Init+0xa2>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800654c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800654e:	2124      	movs	r1, #36	@ 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006550:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006552:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006556:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006558:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800655c:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800655e:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006562:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8006564:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006566:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006568:	689a      	ldr	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800656a:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800656c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006570:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006572:	d009      	beq.n	8006588 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006574:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006578:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800657a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800657c:	d107      	bne.n	800658e <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	e006      	b.n	8006596 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006588:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800658c:	6099      	str	r1, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006594:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006596:	6858      	ldr	r0, [r3, #4]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8006598:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800659c:	4912      	ldr	r1, [pc, #72]	@ (80065e8 <HAL_I2C_Init+0xb0>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800659e:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065a0:	4301      	orrs	r1, r0
 80065a2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065a4:	68d9      	ldr	r1, [r3, #12]
 80065a6:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80065aa:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065ac:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065b0:	4302      	orrs	r2, r0
 80065b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065b6:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ba:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065bc:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065be:	4301      	orrs	r1, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80065c0:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065c2:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	f041 0101 	orr.w	r1, r1, #1
 80065ca:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065cc:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065ce:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065d2:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 80065d8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80065da:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80065de:	f7fc fd6f 	bl	80030c0 <HAL_I2C_MspInit>
 80065e2:	e7b3      	b.n	800654c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80065e4:	2001      	movs	r0, #1
}
 80065e6:	4770      	bx	lr
 80065e8:	02008000 	.word	0x02008000

080065ec <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 80065ec:	4684      	mov	ip, r0
 80065ee:	b470      	push	{r4, r5, r6}
  uint32_t sizetoxfer = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f0:	f89c 4041 	ldrb.w	r4, [ip, #65]	@ 0x41
{
 80065f4:	9803      	ldr	r0, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f6:	2c20      	cmp	r4, #32
 80065f8:	d177      	bne.n	80066ea <HAL_I2C_Master_Seq_Transmit_IT+0xfe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065fa:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80065fe:	2c01      	cmp	r4, #1
 8006600:	d073      	beq.n	80066ea <HAL_I2C_Master_Seq_Transmit_IT+0xfe>

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006602:	2421      	movs	r4, #33	@ 0x21
    {
      hi2c->XferSize = hi2c->XferCount;
      xfermode = hi2c->XferOptions;
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 8006604:	f020 7600 	bic.w	r6, r0, #33554432	@ 0x2000000
    hi2c->pBuffPtr    = pData;
 8006608:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800660c:	f88c 4041 	strb.w	r4, [ip, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006610:	2410      	movs	r4, #16
 8006612:	f88c 4042 	strb.w	r4, [ip, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006616:	2400      	movs	r4, #0
 8006618:	f8cc 4044 	str.w	r4, [ip, #68]	@ 0x44
    __HAL_LOCK(hi2c);
 800661c:	2401      	movs	r4, #1
    hi2c->XferCount   = Size;
 800661e:	f8ac 302a 	strh.w	r3, [ip, #42]	@ 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006622:	4b44      	ldr	r3, [pc, #272]	@ (8006734 <HAL_I2C_Master_Seq_Transmit_IT+0x148>)
    hi2c->XferOptions = XferOptions;
 8006624:	f8cc 002c 	str.w	r0, [ip, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006628:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800662c:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
    __HAL_LOCK(hi2c);
 8006630:	f88c 4040 	strb.w	r4, [ip, #64]	@ 0x40
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006634:	b29b      	uxth	r3, r3
 8006636:	2bff      	cmp	r3, #255	@ 0xff
 8006638:	d83a      	bhi.n	80066b0 <HAL_I2C_Master_Seq_Transmit_IT+0xc4>
      hi2c->XferSize = hi2c->XferCount;
 800663a:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 800663e:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
      hi2c->XferSize = hi2c->XferCount;
 8006642:	b29b      	uxth	r3, r3
    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 8006644:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d136      	bne.n	80066ba <HAL_I2C_Master_Seq_Transmit_IT+0xce>
 800664c:	f8dc 4000 	ldr.w	r4, [ip]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8006650:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 8006654:	2b11      	cmp	r3, #17
 8006656:	d061      	beq.n	800671c <HAL_I2C_Master_Seq_Transmit_IT+0x130>
 8006658:	2300      	movs	r3, #0
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800665a:	f8dc 202c 	ldr.w	r2, [ip, #44]	@ 0x2c
 800665e:	2aaa      	cmp	r2, #170	@ 0xaa
 8006660:	d058      	beq.n	8006714 <HAL_I2C_Master_Seq_Transmit_IT+0x128>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006662:	f8dc 202c 	ldr.w	r2, [ip, #44]	@ 0x2c
 8006666:	f5b2 4f2a 	cmp.w	r2, #43520	@ 0xaa00
 800666a:	d04e      	beq.n	800670a <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 800666c:	f8bc 202a 	ldrh.w	r2, [ip, #42]	@ 0x2a
 8006670:	b292      	uxth	r2, r2
 8006672:	2aff      	cmp	r2, #255	@ 0xff
 8006674:	d83c      	bhi.n	80066f0 <HAL_I2C_Master_Seq_Transmit_IT+0x104>
        xfermode = hi2c->XferOptions;
 8006676:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
 800667a:	4a2f      	ldr	r2, [pc, #188]	@ (8006738 <HAL_I2C_Master_Seq_Transmit_IT+0x14c>)
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800667c:	482f      	ldr	r0, [pc, #188]	@ (800673c <HAL_I2C_Master_Seq_Transmit_IT+0x150>)
    if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 800667e:	2e00      	cmp	r6, #0
 8006680:	d03a      	beq.n	80066f8 <HAL_I2C_Master_Seq_Transmit_IT+0x10c>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006682:	f3c1 0309 	ubfx	r3, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006686:	f89c 1028 	ldrb.w	r1, [ip, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800668a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800668e:	432b      	orrs	r3, r5
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006690:	4303      	orrs	r3, r0
  MODIFY_REG(hi2c->Instance->CR2, \
 8006692:	6861      	ldr	r1, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006694:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    __HAL_UNLOCK(hi2c);
 8006698:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, \
 800669a:	400a      	ands	r2, r1
 800669c:	4313      	orrs	r3, r2
 800669e:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 80066a0:	f88c 0040 	strb.w	r0, [ip, #64]	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80066aa:	6023      	str	r3, [r4, #0]
}
 80066ac:	bc70      	pop	{r4, r5, r6}
 80066ae:	4770      	bx	lr
 80066b0:	23ff      	movs	r3, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 80066b2:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80066b6:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066ba:	f8dc 4000 	ldr.w	r4, [ip]
    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 80066be:	2e00      	cmp	r6, #0
 80066c0:	d1c6      	bne.n	8006650 <HAL_I2C_Master_Seq_Transmit_IT+0x64>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066c2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80066c6:	62a0      	str	r0, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80066c8:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
      hi2c->XferCount--;
 80066cc:	f8bc 202a 	ldrh.w	r2, [ip, #42]	@ 0x2a
 80066d0:	3a01      	subs	r2, #1
 80066d2:	b292      	uxth	r2, r2
 80066d4:	f8ac 202a 	strh.w	r2, [ip, #42]	@ 0x2a
      hi2c->XferSize--;
 80066d8:	1e5a      	subs	r2, r3, #1
 80066da:	f8ac 2028 	strh.w	r2, [ip, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 80066de:	f8dc 2030 	ldr.w	r2, [ip, #48]	@ 0x30
 80066e2:	2a11      	cmp	r2, #17
 80066e4:	d1b9      	bne.n	800665a <HAL_I2C_Master_Seq_Transmit_IT+0x6e>
 80066e6:	4a16      	ldr	r2, [pc, #88]	@ (8006740 <HAL_I2C_Master_Seq_Transmit_IT+0x154>)
 80066e8:	e007      	b.n	80066fa <HAL_I2C_Master_Seq_Transmit_IT+0x10e>
    __HAL_LOCK(hi2c);
 80066ea:	2002      	movs	r0, #2
}
 80066ec:	bc70      	pop	{r4, r5, r6}
 80066ee:	4770      	bx	lr
 80066f0:	4a11      	ldr	r2, [pc, #68]	@ (8006738 <HAL_I2C_Master_Seq_Transmit_IT+0x14c>)
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80066f2:	4812      	ldr	r0, [pc, #72]	@ (800673c <HAL_I2C_Master_Seq_Transmit_IT+0x150>)
    if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 80066f4:	2e00      	cmp	r6, #0
 80066f6:	d1c4      	bne.n	8006682 <HAL_I2C_Master_Seq_Transmit_IT+0x96>
 80066f8:	4305      	orrs	r5, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066fa:	041b      	lsls	r3, r3, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066fc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006700:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006704:	4329      	orrs	r1, r5
 8006706:	430b      	orrs	r3, r1
 8006708:	e7c3      	b.n	8006692 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800670a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800670e:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
 8006712:	e7ab      	b.n	800666c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006714:	2200      	movs	r2, #0
 8006716:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
 800671a:	e7a7      	b.n	800666c <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 800671c:	28aa      	cmp	r0, #170	@ 0xaa
 800671e:	d09b      	beq.n	8006658 <HAL_I2C_Master_Seq_Transmit_IT+0x6c>
 8006720:	f5a0 432a 	sub.w	r3, r0, #43520	@ 0xaa00
 8006724:	fab3 f383 	clz	r3, r3
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	2b00      	cmp	r3, #0
 800672c:	d194      	bne.n	8006658 <HAL_I2C_Master_Seq_Transmit_IT+0x6c>
 800672e:	4a04      	ldr	r2, [pc, #16]	@ (8006740 <HAL_I2C_Master_Seq_Transmit_IT+0x154>)
      xferrequest = I2C_NO_STARTSTOP;
 8006730:	4618      	mov	r0, r3
 8006732:	e7a4      	b.n	800667e <HAL_I2C_Master_Seq_Transmit_IT+0x92>
 8006734:	08006c65 	.word	0x08006c65
 8006738:	fc009800 	.word	0xfc009800
 800673c:	80002000 	.word	0x80002000
 8006740:	fc009c00 	.word	0xfc009c00

08006744 <HAL_I2C_Master_Seq_Receive_IT>:
{
 8006744:	4684      	mov	ip, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006746:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800674a:	2820      	cmp	r0, #32
 800674c:	d16c      	bne.n	8006828 <HAL_I2C_Master_Seq_Receive_IT+0xe4>
    __HAL_LOCK(hi2c);
 800674e:	f89c 0040 	ldrb.w	r0, [ip, #64]	@ 0x40
 8006752:	2801      	cmp	r0, #1
 8006754:	d068      	beq.n	8006828 <HAL_I2C_Master_Seq_Receive_IT+0xe4>
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006756:	483b      	ldr	r0, [pc, #236]	@ (8006844 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
{
 8006758:	b530      	push	{r4, r5, lr}
    hi2c->pBuffPtr    = pData;
 800675a:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800675e:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006760:	f8cc 0034 	str.w	r0, [ip, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006764:	2010      	movs	r0, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006766:	f88c 2041 	strb.w	r2, [ip, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800676a:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800676c:	f88c 0042 	strb.w	r0, [ip, #66]	@ 0x42
    __HAL_LOCK(hi2c);
 8006770:	2401      	movs	r4, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006772:	f8cc 2044 	str.w	r2, [ip, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8006776:	f8ac 302a 	strh.w	r3, [ip, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 800677a:	9b03      	ldr	r3, [sp, #12]
    __HAL_LOCK(hi2c);
 800677c:	f88c 4040 	strb.w	r4, [ip, #64]	@ 0x40
    hi2c->XferOptions = XferOptions;
 8006780:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006784:	f8bc 202a 	ldrh.w	r2, [ip, #42]	@ 0x2a
 8006788:	b292      	uxth	r2, r2
 800678a:	2aff      	cmp	r2, #255	@ 0xff
 800678c:	d835      	bhi.n	80067fa <HAL_I2C_Master_Seq_Receive_IT+0xb6>
      hi2c->XferSize = hi2c->XferCount;
 800678e:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 8006792:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006796:	b2d8      	uxtb	r0, r3
      hi2c->XferSize = hi2c->XferCount;
 8006798:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800679a:	0400      	lsls	r0, r0, #16
 800679c:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 80067a0:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 80067a4:	2b12      	cmp	r3, #18
 80067a6:	d033      	beq.n	8006810 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80067a8:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80067ac:	2baa      	cmp	r3, #170	@ 0xaa
 80067ae:	d045      	beq.n	800683c <HAL_I2C_Master_Seq_Receive_IT+0xf8>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80067b0:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 80067b4:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 80067b8:	d03b      	beq.n	8006832 <HAL_I2C_Master_Seq_Receive_IT+0xee>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 80067ba:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2bff      	cmp	r3, #255	@ 0xff
 80067c2:	d833      	bhi.n	800682c <HAL_I2C_Master_Seq_Receive_IT+0xe8>
        xfermode = hi2c->XferOptions;
 80067c4:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
 80067c8:	4c1f      	ldr	r4, [pc, #124]	@ (8006848 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 80067ca:	4a20      	ldr	r2, [pc, #128]	@ (800684c <HAL_I2C_Master_Seq_Receive_IT+0x108>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067cc:	f3c1 0309 	ubfx	r3, r1, #0, #10
    __HAL_UNLOCK(hi2c);
 80067d0:	f04f 0e00 	mov.w	lr, #0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067d4:	4303      	orrs	r3, r0
    return HAL_OK;
 80067d6:	4670      	mov	r0, lr
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067d8:	432b      	orrs	r3, r5
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067da:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80067dc:	f8dc 2000 	ldr.w	r2, [ip]
 80067e0:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80067e6:	4021      	ands	r1, r4
 80067e8:	430b      	orrs	r3, r1
 80067ea:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 80067ec:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80067f0:	6813      	ldr	r3, [r2, #0]
 80067f2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80067f6:	6013      	str	r3, [r2, #0]
}
 80067f8:	bd30      	pop	{r4, r5, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067fa:	23ff      	movs	r3, #255	@ 0xff
 80067fc:	f44f 007f 	mov.w	r0, #16711680	@ 0xff0000
      xfermode = I2C_RELOAD_MODE;
 8006800:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8006804:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8006808:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 800680c:	2b12      	cmp	r3, #18
 800680e:	d1cb      	bne.n	80067a8 <HAL_I2C_Master_Seq_Receive_IT+0x64>
 8006810:	9b03      	ldr	r3, [sp, #12]
 8006812:	2baa      	cmp	r3, #170	@ 0xaa
 8006814:	d0c8      	beq.n	80067a8 <HAL_I2C_Master_Seq_Receive_IT+0x64>
 8006816:	f5a3 422a 	sub.w	r2, r3, #43520	@ 0xaa00
 800681a:	fab2 f282 	clz	r2, r2
 800681e:	0952      	lsrs	r2, r2, #5
 8006820:	2a00      	cmp	r2, #0
 8006822:	d1c1      	bne.n	80067a8 <HAL_I2C_Master_Seq_Receive_IT+0x64>
 8006824:	4c0a      	ldr	r4, [pc, #40]	@ (8006850 <HAL_I2C_Master_Seq_Receive_IT+0x10c>)
 8006826:	e7d1      	b.n	80067cc <HAL_I2C_Master_Seq_Receive_IT+0x88>
    __HAL_LOCK(hi2c);
 8006828:	2002      	movs	r0, #2
}
 800682a:	4770      	bx	lr
 800682c:	4c06      	ldr	r4, [pc, #24]	@ (8006848 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800682e:	4a07      	ldr	r2, [pc, #28]	@ (800684c <HAL_I2C_Master_Seq_Receive_IT+0x108>)
 8006830:	e7cc      	b.n	80067cc <HAL_I2C_Master_Seq_Receive_IT+0x88>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006836:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800683a:	e7be      	b.n	80067ba <HAL_I2C_Master_Seq_Receive_IT+0x76>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800683c:	2300      	movs	r3, #0
 800683e:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 8006842:	e7ba      	b.n	80067ba <HAL_I2C_Master_Seq_Receive_IT+0x76>
 8006844:	08006c65 	.word	0x08006c65
 8006848:	fc009800 	.word	0xfc009800
 800684c:	80002400 	.word	0x80002400
 8006850:	fc009c00 	.word	0xfc009c00

08006854 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006854:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8006856:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006858:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800685a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800685c:	b103      	cbz	r3, 8006860 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800685e:	4718      	bx	r3
}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop

08006868 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800686c:	6801      	ldr	r1, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800686e:	2200      	movs	r2, #0
{
 8006870:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006872:	680b      	ldr	r3, [r1, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006874:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006878:	045a      	lsls	r2, r3, #17
 800687a:	d525      	bpl.n	80068c8 <I2C_ITSlaveSeqCplt+0x5c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800687c:	680b      	ldr	r3, [r1, #0]
 800687e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006882:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006884:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006888:	2b29      	cmp	r3, #41	@ 0x29
 800688a:	d027      	beq.n	80068dc <I2C_ITSlaveSeqCplt+0x70>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800688c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006890:	2b2a      	cmp	r3, #42	@ 0x2a
 8006892:	d000      	beq.n	8006896 <I2C_ITSlaveSeqCplt+0x2a>
}
 8006894:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006896:	2228      	movs	r2, #40	@ 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006898:	2322      	movs	r3, #34	@ 0x22
    __HAL_UNLOCK(hi2c);
 800689a:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800689e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068a2:	6303      	str	r3, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068a4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80068a8:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068aa:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80068ae:	2a28      	cmp	r2, #40	@ 0x28
 80068b0:	bf14      	ite	ne
 80068b2:	f06f 02f4 	mvnne.w	r2, #244	@ 0xf4
 80068b6:	f06f 0244 	mvneq.w	r2, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80068ba:	4013      	ands	r3, r2
 80068bc:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80068be:	f880 c040 	strb.w	ip, [r0, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068c2:	f7ff ffd1 	bl	8006868 <HAL_I2C_SlaveRxCpltCallback>
}
 80068c6:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80068c8:	041b      	lsls	r3, r3, #16
 80068ca:	d5db      	bpl.n	8006884 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068cc:	680b      	ldr	r3, [r1, #0]
 80068ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d2:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80068d4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80068d8:	2b29      	cmp	r3, #41	@ 0x29
 80068da:	d1d7      	bne.n	800688c <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80068dc:	2228      	movs	r2, #40	@ 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068de:	2321      	movs	r3, #33	@ 0x21
    __HAL_UNLOCK(hi2c);
 80068e0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80068e4:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068e8:	6303      	str	r3, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068ea:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80068ee:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80068f0:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80068f4:	2a28      	cmp	r2, #40	@ 0x28
 80068f6:	bf14      	ite	ne
 80068f8:	f06f 02f2 	mvnne.w	r2, #242	@ 0xf2
 80068fc:	f06f 0242 	mvneq.w	r2, #66	@ 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006900:	4013      	ands	r3, r2
 8006902:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006904:	f880 c040 	strb.w	ip, [r0, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006908:	f7ff ffac 	bl	8006864 <HAL_I2C_SlaveTxCpltCallback>
}
 800690c:	bd08      	pop	{r3, pc}
 800690e:	bf00      	nop

08006910 <HAL_I2C_AddrCallback>:
}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <I2C_ITAddrCplt.part.0.constprop.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006914:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8006916:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006918:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800691a:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800691c:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800691e:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006920:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006922:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8006924:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006928:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800692c:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800692e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006932:	d10f      	bne.n	8006954 <I2C_ITAddrCplt.part.0.constprop.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006934:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006938:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800693c:	f013 0306 	ands.w	r3, r3, #6
 8006940:	d106      	bne.n	8006950 <I2C_ITAddrCplt.part.0.constprop.0+0x3c>
        hi2c->AddrEventCount++;
 8006942:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8006944:	3501      	adds	r5, #1
 8006946:	6485      	str	r5, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006948:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 800694a:	2d02      	cmp	r5, #2
 800694c:	d00c      	beq.n	8006968 <I2C_ITAddrCplt.part.0.constprop.0+0x54>
}
 800694e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006950:	f006 02fe 	and.w	r2, r6, #254	@ 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	f023 03b8 	bic.w	r3, r3, #184	@ 0xb8
 800695a:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800695c:	2300      	movs	r3, #0
 800695e:	f88c 3040 	strb.w	r3, [ip, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006962:	f7ff ffd5 	bl	8006910 <HAL_I2C_AddrCallback>
}
 8006966:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006968:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 800696a:	6483      	str	r3, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800696c:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800696e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006972:	f7ff ffcd 	bl	8006910 <HAL_I2C_AddrCallback>
}
 8006976:	bd70      	pop	{r4, r5, r6, pc}

08006978 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop

0800697c <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop

08006980 <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop

08006984 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop

08006988 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop

0800698c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800698c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800698e:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
 8006990:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006992:	b10b      	cbz	r3, 8006998 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006994:	2200      	movs	r2, #0
 8006996:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8006998:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800699a:	b10b      	cbz	r3, 80069a0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800699c:	2200      	movs	r2, #0
 800699e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069a0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80069a4:	2b60      	cmp	r3, #96	@ 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 80069a6:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069aa:	d005      	beq.n	80069b8 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069ac:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80069ae:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80069b2:	f7ff ffe7 	bl	8006984 <HAL_I2C_ErrorCallback>
}
 80069b6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80069b8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80069ba:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80069be:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c2:	6303      	str	r3, [r0, #48]	@ 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80069c4:	f7ff ffe0 	bl	8006988 <HAL_I2C_AbortCpltCallback>
}
 80069c8:	bd08      	pop	{r3, pc}
 80069ca:	bf00      	nop

080069cc <I2C_ITError>:
{
 80069cc:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069ce:	4b57      	ldr	r3, [pc, #348]	@ (8006b2c <I2C_ITError+0x160>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069d0:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80069d2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80069d6:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069d8:	f880 5042 	strb.w	r5, [r0, #66]	@ 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80069dc:	3a28      	subs	r2, #40	@ 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069de:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80069e0:	8545      	strh	r5, [r0, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80069e2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80069e4:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 80069e6:	ea41 0103 	orr.w	r1, r1, r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80069ea:	6803      	ldr	r3, [r0, #0]
  hi2c->ErrorCode |= ErrorCode;
 80069ec:	6441      	str	r1, [r0, #68]	@ 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80069ee:	d86e      	bhi.n	8006ace <I2C_ITError+0x102>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80069f0:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80069f4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80069f8:	f001 0128 	and.w	r1, r1, #40	@ 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80069fc:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80069fe:	f000 0028 	and.w	r0, r0, #40	@ 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a02:	2928      	cmp	r1, #40	@ 0x28
 8006a04:	bf14      	ite	ne
 8006a06:	f06f 01f6 	mvnne.w	r1, #246	@ 0xf6
 8006a0a:	f06f 0146 	mvneq.w	r1, #70	@ 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a0e:	2828      	cmp	r0, #40	@ 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a10:	f04f 0028 	mov.w	r0, #40	@ 0x28
 8006a14:	bf18      	it	ne
 8006a16:	f06f 01f6 	mvnne.w	r1, #246	@ 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a1a:	400a      	ands	r2, r1
 8006a1c:	4944      	ldr	r1, [pc, #272]	@ (8006b30 <I2C_ITError+0x164>)
 8006a1e:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a20:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006a24:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
  tmppreviousstate = hi2c->PreviousState;
 8006a26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006a28:	6361      	str	r1, [r4, #52]	@ 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006a2a:	b118      	cbz	r0, 8006a34 <I2C_ITError+0x68>
 8006a2c:	2a11      	cmp	r2, #17
 8006a2e:	d01e      	beq.n	8006a6e <I2C_ITError+0xa2>
 8006a30:	2a21      	cmp	r2, #33	@ 0x21
 8006a32:	d01c      	beq.n	8006a6e <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006a34:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006a36:	b118      	cbz	r0, 8006a40 <I2C_ITError+0x74>
 8006a38:	2a12      	cmp	r2, #18
 8006a3a:	d02e      	beq.n	8006a9a <I2C_ITError+0xce>
 8006a3c:	2a22      	cmp	r2, #34	@ 0x22
 8006a3e:	d02c      	beq.n	8006a9a <I2C_ITError+0xce>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a40:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006a44:	2b60      	cmp	r3, #96	@ 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a46:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a4a:	d006      	beq.n	8006a5a <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8006a4c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a4e:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a50:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006a54:	f7ff ff96 	bl	8006984 <HAL_I2C_ErrorCallback>
}
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006a5a:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a5c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006a5e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006a62:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a66:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a68:	f7ff ff8e 	bl	8006988 <HAL_I2C_AbortCpltCallback>
}
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	0451      	lsls	r1, r2, #17
 8006a72:	d456      	bmi.n	8006b22 <I2C_ITError+0x156>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a74:	f7ff f998 	bl	8005da8 <HAL_DMA_GetState>
 8006a78:	2801      	cmp	r0, #1
 8006a7a:	d0e1      	beq.n	8006a40 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a7c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8006a7e:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a80:	4a2c      	ldr	r2, [pc, #176]	@ (8006b34 <I2C_ITError+0x168>)
 8006a82:	6502      	str	r2, [r0, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8006a84:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a88:	f7fe fd68 	bl	800555c <HAL_DMA_Abort_IT>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d0e3      	beq.n	8006a58 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a90:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
}
 8006a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a96:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006a98:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	0412      	lsls	r2, r2, #16
 8006a9e:	d503      	bpl.n	8006aa8 <I2C_ITError+0xdc>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006aa6:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006aa8:	f7ff f97e 	bl	8005da8 <HAL_DMA_GetState>
 8006aac:	2801      	cmp	r0, #1
 8006aae:	d0c7      	beq.n	8006a40 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ab0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hi2c);
 8006ab2:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b34 <I2C_ITError+0x168>)
 8006ab6:	6502      	str	r2, [r0, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8006ab8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006abc:	f7fe fd4e 	bl	800555c <HAL_DMA_Abort_IT>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d0c9      	beq.n	8006a58 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ac4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 8006ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006aca:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006acc:	4718      	bx	r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ace:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ad2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	f022 02fe 	bic.w	r2, r2, #254	@ 0xfe
 8006adc:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ade:	699a      	ldr	r2, [r3, #24]
 8006ae0:	0792      	lsls	r2, r2, #30
 8006ae2:	d500      	bpl.n	8006ae6 <I2C_ITError+0x11a>
    hi2c->Instance->TXDR = 0x00U;
 8006ae4:	629d      	str	r5, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	07d6      	lsls	r6, r2, #31
 8006aea:	d403      	bmi.n	8006af4 <I2C_ITError+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006af4:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8006af8:	2a60      	cmp	r2, #96	@ 0x60
 8006afa:	d010      	beq.n	8006b1e <I2C_ITError+0x152>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006afc:	2220      	movs	r2, #32
 8006afe:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	0695      	lsls	r5, r2, #26
 8006b06:	d50a      	bpl.n	8006b1e <I2C_ITError+0x152>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	06d0      	lsls	r0, r2, #27
 8006b0c:	d505      	bpl.n	8006b1a <I2C_ITError+0x14e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b0e:	2210      	movs	r2, #16
 8006b10:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b12:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006b14:	f042 0204 	orr.w	r2, r2, #4
 8006b18:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8006b1e:	2100      	movs	r1, #0
 8006b20:	e780      	b.n	8006a24 <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e7a3      	b.n	8006a74 <I2C_ITError+0xa8>
 8006b2c:	ffff0000 	.word	0xffff0000
 8006b30:	08007131 	.word	0x08007131
 8006b34:	0800698d 	.word	0x0800698d

08006b38 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b38:	2220      	movs	r2, #32
 8006b3a:	6803      	ldr	r3, [r0, #0]
{
 8006b3c:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b3e:	61da      	str	r2, [r3, #28]
{
 8006b40:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b42:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006b46:	2a21      	cmp	r2, #33	@ 0x21
 8006b48:	d053      	beq.n	8006bf2 <I2C_ITMasterCplt+0xba>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b4a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006b4e:	2a22      	cmp	r2, #34	@ 0x22
 8006b50:	d038      	beq.n	8006bc4 <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	4c41      	ldr	r4, [pc, #260]	@ (8006c5c <I2C_ITMasterCplt+0x124>)
 8006b56:	4022      	ands	r2, r4
  hi2c->XferISR       = NULL;
 8006b58:	2400      	movs	r4, #0
  I2C_RESET_CR2(hi2c);
 8006b5a:	605a      	str	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b5c:	4a40      	ldr	r2, [pc, #256]	@ (8006c60 <I2C_ITMasterCplt+0x128>)
  hi2c->XferISR       = NULL;
 8006b5e:	6344      	str	r4, [r0, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b60:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b62:	06ca      	lsls	r2, r1, #27
 8006b64:	d505      	bpl.n	8006b72 <I2C_ITMasterCplt+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b66:	2210      	movs	r2, #16
 8006b68:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b6a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006b6c:	f042 0204 	orr.w	r2, r2, #4
 8006b70:	6442      	str	r2, [r0, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b72:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006b76:	2a60      	cmp	r2, #96	@ 0x60
 8006b78:	d034      	beq.n	8006be4 <I2C_ITMasterCplt+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	0791      	lsls	r1, r2, #30
 8006b7e:	d501      	bpl.n	8006b84 <I2C_ITMasterCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 8006b80:	2200      	movs	r2, #0
 8006b82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	07d2      	lsls	r2, r2, #31
 8006b88:	d403      	bmi.n	8006b92 <I2C_ITMasterCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	f042 0201 	orr.w	r2, r2, #1
 8006b90:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
 8006b92:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006b94:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006b98:	2a60      	cmp	r2, #96	@ 0x60
 8006b9a:	d00d      	beq.n	8006bb8 <I2C_ITMasterCplt+0x80>
 8006b9c:	1e1a      	subs	r2, r3, #0
 8006b9e:	bf18      	it	ne
 8006ba0:	2201      	movne	r2, #1
 8006ba2:	b94b      	cbnz	r3, 8006bb8 <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ba4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006ba8:	2b21      	cmp	r3, #33	@ 0x21
 8006baa:	d041      	beq.n	8006c30 <I2C_ITMasterCplt+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bac:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006bb0:	2b22      	cmp	r3, #34	@ 0x22
 8006bb2:	d02e      	beq.n	8006c12 <I2C_ITMasterCplt+0xda>
}
 8006bb4:	b002      	add	sp, #8
 8006bb6:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bb8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
}
 8006bba:	b002      	add	sp, #8
 8006bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bc0:	f7ff bf04 	b.w	80069cc <I2C_ITError>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bc4:	f890 4041 	ldrb.w	r4, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bc8:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bca:	f004 0428 	and.w	r4, r4, #40	@ 0x28
 8006bce:	2c28      	cmp	r4, #40	@ 0x28
 8006bd0:	bf14      	ite	ne
 8006bd2:	f06f 04f4 	mvnne.w	r4, #244	@ 0xf4
 8006bd6:	f06f 0444 	mvneq.w	r4, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bda:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006bdc:	2412      	movs	r4, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bde:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006be0:	6304      	str	r4, [r0, #48]	@ 0x30
 8006be2:	e7b6      	b.n	8006b52 <I2C_ITMasterCplt+0x1a>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006be4:	074c      	lsls	r4, r1, #29
 8006be6:	d5c8      	bpl.n	8006b7a <I2C_ITMasterCplt+0x42>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
 8006bee:	9a01      	ldr	r2, [sp, #4]
 8006bf0:	e7c3      	b.n	8006b7a <I2C_ITMasterCplt+0x42>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bf2:	f890 4041 	ldrb.w	r4, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006bf6:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bf8:	f004 0428 	and.w	r4, r4, #40	@ 0x28
 8006bfc:	2c28      	cmp	r4, #40	@ 0x28
 8006bfe:	bf14      	ite	ne
 8006c00:	f06f 04f2 	mvnne.w	r4, #242	@ 0xf2
 8006c04:	f06f 0442 	mvneq.w	r4, #66	@ 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c08:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c0a:	2411      	movs	r4, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c0c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c0e:	6304      	str	r4, [r0, #48]	@ 0x30
 8006c10:	e79f      	b.n	8006b52 <I2C_ITMasterCplt+0x1a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c12:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
 8006c14:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006c18:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c1c:	6302      	str	r2, [r0, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c1e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c22:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d014      	beq.n	8006c54 <I2C_ITMasterCplt+0x11c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c2a:	f7f9 ff21 	bl	8000a70 <HAL_I2C_MasterRxCpltCallback>
}
 8006c2e:	e7c1      	b.n	8006bb4 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c30:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
 8006c32:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c3a:	6302      	str	r2, [r0, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c3c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c44:	2b40      	cmp	r3, #64	@ 0x40
 8006c46:	d002      	beq.n	8006c4e <I2C_ITMasterCplt+0x116>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c48:	f7f9 ff04 	bl	8000a54 <HAL_I2C_MasterTxCpltCallback>
 8006c4c:	e7b2      	b.n	8006bb4 <I2C_ITMasterCplt+0x7c>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c4e:	f7ff fe95 	bl	800697c <HAL_I2C_MemTxCpltCallback>
 8006c52:	e7af      	b.n	8006bb4 <I2C_ITMasterCplt+0x7c>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c54:	f7ff fe94 	bl	8006980 <HAL_I2C_MemRxCpltCallback>
 8006c58:	e7ac      	b.n	8006bb4 <I2C_ITMasterCplt+0x7c>
 8006c5a:	bf00      	nop
 8006c5c:	fe00e800 	.word	0xfe00e800
 8006c60:	ffff0000 	.word	0xffff0000

08006c64 <I2C_Master_ISR_IT>:
{
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006c66:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	f000 80bb 	beq.w	8006de6 <I2C_Master_ISR_IT+0x182>
 8006c70:	4616      	mov	r6, r2
 8006c72:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006c74:	06ca      	lsls	r2, r1, #27
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8006c7a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006c7e:	d51a      	bpl.n	8006cb6 <I2C_Master_ISR_IT+0x52>
 8006c80:	06f3      	lsls	r3, r6, #27
 8006c82:	d518      	bpl.n	8006cb6 <I2C_Master_ISR_IT+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c84:	6803      	ldr	r3, [r0, #0]
 8006c86:	2210      	movs	r2, #16
 8006c88:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c8a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006c8c:	f042 0204 	orr.w	r2, r2, #4
 8006c90:	6442      	str	r2, [r0, #68]	@ 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	0797      	lsls	r7, r2, #30
 8006c96:	d501      	bpl.n	8006c9c <I2C_Master_ISR_IT+0x38>
    hi2c->Instance->TXDR = 0x00U;
 8006c98:	2200      	movs	r2, #0
 8006c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	07d0      	lsls	r0, r2, #31
 8006ca0:	d56e      	bpl.n	8006d80 <I2C_Master_ISR_IT+0x11c>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ca2:	06aa      	lsls	r2, r5, #26
 8006ca4:	d502      	bpl.n	8006cac <I2C_Master_ISR_IT+0x48>
 8006ca6:	06b3      	lsls	r3, r6, #26
 8006ca8:	f100 8098 	bmi.w	8006ddc <I2C_Master_ISR_IT+0x178>
  __HAL_UNLOCK(hi2c);
 8006cac:	2300      	movs	r3, #0
  return HAL_OK;
 8006cae:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8006cb0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8006cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006cb6:	0769      	lsls	r1, r5, #29
 8006cb8:	d417      	bmi.n	8006cea <I2C_Master_ISR_IT+0x86>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006cba:	066b      	lsls	r3, r5, #25
 8006cbc:	d428      	bmi.n	8006d10 <I2C_Master_ISR_IT+0xac>
 8006cbe:	07a8      	lsls	r0, r5, #30
 8006cc0:	d545      	bpl.n	8006d4e <I2C_Master_ISR_IT+0xea>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006cc2:	07b1      	lsls	r1, r6, #30
 8006cc4:	d543      	bpl.n	8006d4e <I2C_Master_ISR_IT+0xea>
    if (hi2c->XferCount != 0U)
 8006cc6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0e9      	beq.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006cce:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006cd0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006cd2:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 8006cd6:	3b01      	subs	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006cd8:	6821      	ldr	r1, [r4, #0]
 8006cda:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->XferSize--;
 8006cdc:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8006cde:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8006ce0:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8006ce8:	e7db      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006cea:	0772      	lsls	r2, r6, #29
 8006cec:	d5e5      	bpl.n	8006cba <I2C_Master_ISR_IT+0x56>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cee:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006cf0:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cf4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006cf6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cf8:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006cfa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8006cfc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8006cfe:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 8006d00:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8006d02:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8006d04:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 8006d06:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8006d08:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize--;
 8006d0a:	1e53      	subs	r3, r2, #1
 8006d0c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8006d0e:	e7c8      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d10:	062a      	lsls	r2, r5, #24
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006d12:	f006 0340 	and.w	r3, r6, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d16:	d51f      	bpl.n	8006d58 <I2C_Master_ISR_IT+0xf4>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0c2      	beq.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d1c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d1e:	6822      	ldr	r2, [r4, #0]
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d031      	beq.n	8006d8a <I2C_Master_ISR_IT+0x126>
 8006d26:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d12e      	bne.n	8006d8a <I2C_Master_ISR_IT+0x126>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006d2c:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006d30:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2bff      	cmp	r3, #255	@ 0xff
 8006d38:	d96c      	bls.n	8006e14 <I2C_Master_ISR_IT+0x1b0>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d3a:	6853      	ldr	r3, [r2, #4]
 8006d3c:	4854      	ldr	r0, [pc, #336]	@ (8006e90 <I2C_Master_ISR_IT+0x22c>)
 8006d3e:	4003      	ands	r3, r0
 8006d40:	430b      	orrs	r3, r1
 8006d42:	4954      	ldr	r1, [pc, #336]	@ (8006e94 <I2C_Master_ISR_IT+0x230>)
 8006d44:	4319      	orrs	r1, r3
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d46:	23ff      	movs	r3, #255	@ 0xff
 8006d48:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d4a:	6051      	str	r1, [r2, #4]
}
 8006d4c:	e7a9      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d4e:	0628      	lsls	r0, r5, #24
 8006d50:	d5a7      	bpl.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
 8006d52:	0671      	lsls	r1, r6, #25
 8006d54:	d4e2      	bmi.n	8006d1c <I2C_Master_ISR_IT+0xb8>
 8006d56:	e7a4      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0a2      	beq.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
    if (hi2c->XferCount == 0U)
 8006d5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d136      	bne.n	8006dd2 <I2C_Master_ISR_IT+0x16e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006d64:	6822      	ldr	r2, [r4, #0]
 8006d66:	6853      	ldr	r3, [r2, #4]
 8006d68:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8006d6c:	d199      	bne.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006d6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006d70:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8006d74:	d162      	bne.n	8006e3c <I2C_Master_ISR_IT+0x1d8>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d76:	6853      	ldr	r3, [r2, #4]
 8006d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d7c:	6053      	str	r3, [r2, #4]
 8006d7e:	e790      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	f042 0201 	orr.w	r2, r2, #1
 8006d86:	619a      	str	r2, [r3, #24]
 8006d88:	e78b      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006d8a:	6853      	ldr	r3, [r2, #4]
 8006d8c:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8006d90:	d11f      	bne.n	8006dd2 <I2C_Master_ISR_IT+0x16e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d92:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d96:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 8006d9a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d9c:	2921      	cmp	r1, #33	@ 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d9e:	f04f 0120 	mov.w	r1, #32
 8006da2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006da6:	d020      	beq.n	8006dea <I2C_Master_ISR_IT+0x186>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006da8:	2112      	movs	r1, #18
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006daa:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006dac:	6321      	str	r1, [r4, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dae:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006db2:	6817      	ldr	r7, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006db4:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8006db8:	2928      	cmp	r1, #40	@ 0x28
 8006dba:	bf14      	ite	ne
 8006dbc:	f06f 01f4 	mvnne.w	r1, #244	@ 0xf4
 8006dc0:	f06f 0144 	mvneq.w	r1, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006dc4:	4039      	ands	r1, r7
 8006dc6:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8006dc8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006dcc:	f7f9 fe50 	bl	8000a70 <HAL_I2C_MasterRxCpltCallback>
 8006dd0:	e767      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006dd2:	2140      	movs	r1, #64	@ 0x40
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff fdf9 	bl	80069cc <I2C_ITError>
 8006dda:	e762      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7ff feaa 	bl	8006b38 <I2C_ITMasterCplt>
 8006de4:	e762      	b.n	8006cac <I2C_Master_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8006de6:	2002      	movs	r0, #2
}
 8006de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006dea:	2111      	movs	r1, #17
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dec:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006dee:	6321      	str	r1, [r4, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006df0:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006df4:	6817      	ldr	r7, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006df6:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8006dfa:	2928      	cmp	r1, #40	@ 0x28
 8006dfc:	bf14      	ite	ne
 8006dfe:	f06f 01f2 	mvnne.w	r1, #242	@ 0xf2
 8006e02:	f06f 0142 	mvneq.w	r1, #66	@ 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e06:	4039      	ands	r1, r7
 8006e08:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8006e0a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e0e:	f7f9 fe21 	bl	8000a54 <HAL_I2C_MasterTxCpltCallback>
}
 8006e12:	e746      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
        hi2c->XferSize = hi2c->XferCount;
 8006e14:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e16:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8006e18:	b29b      	uxth	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e1a:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8006e1e:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e20:	b2db      	uxtb	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e22:	d02b      	beq.n	8006e7c <I2C_Master_ISR_IT+0x218>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006e24:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e26:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e2a:	4819      	ldr	r0, [pc, #100]	@ (8006e90 <I2C_Master_ISR_IT+0x22c>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e2c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e2e:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e34:	4001      	ands	r1, r0
 8006e36:	430b      	orrs	r3, r1
 8006e38:	6053      	str	r3, [r2, #4]
}
 8006e3a:	e732      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e40:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 8006e44:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e46:	2921      	cmp	r1, #33	@ 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e48:	f04f 0120 	mov.w	r1, #32
 8006e4c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e50:	d0cb      	beq.n	8006dea <I2C_Master_ISR_IT+0x186>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e52:	2112      	movs	r1, #18
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e54:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e56:	6321      	str	r1, [r4, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e58:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 8006e5c:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8006e60:	2928      	cmp	r1, #40	@ 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e62:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e64:	bf14      	ite	ne
 8006e66:	f06f 07f4 	mvnne.w	r7, #244	@ 0xf4
 8006e6a:	f06f 0744 	mvneq.w	r7, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e6e:	4039      	ands	r1, r7
 8006e70:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8006e72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e76:	f7f9 fdfb 	bl	8000a70 <HAL_I2C_MasterRxCpltCallback>
 8006e7a:	e712      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e7c:	6850      	ldr	r0, [r2, #4]
 8006e7e:	4f04      	ldr	r7, [pc, #16]	@ (8006e90 <I2C_Master_ISR_IT+0x22c>)
 8006e80:	4038      	ands	r0, r7
 8006e82:	4301      	orrs	r1, r0
 8006e84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006e88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006e8c:	6053      	str	r3, [r2, #4]
}
 8006e8e:	e708      	b.n	8006ca2 <I2C_Master_ISR_IT+0x3e>
 8006e90:	fc009c00 	.word	0xfc009c00
 8006e94:	01ff0000 	.word	0x01ff0000

08006e98 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e9c:	6803      	ldr	r3, [r0, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006e9e:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea0:	2120      	movs	r1, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ea2:	6818      	ldr	r0, [r3, #0]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ea6:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eaa:	61d9      	str	r1, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006eac:	f002 01f7 	and.w	r1, r2, #247	@ 0xf7
 8006eb0:	2921      	cmp	r1, #33	@ 0x21
 8006eb2:	f040 8085 	bne.w	8006fc0 <I2C_ITSlaveCplt.constprop.0+0x128>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eb6:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	f022 02fa 	bic.w	r2, r2, #250	@ 0xfa
 8006ec0:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ec2:	6321      	str	r1, [r4, #48]	@ 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ec4:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8006ec6:	4998      	ldr	r1, [pc, #608]	@ (8007128 <I2C_ITSlaveCplt.constprop.0+0x290>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ec8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ecc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	400a      	ands	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	0791      	lsls	r1, r2, #30
 8006ed8:	d501      	bpl.n	8006ede <I2C_ITSlaveCplt.constprop.0+0x46>
    hi2c->Instance->TXDR = 0x00U;
 8006eda:	2200      	movs	r2, #0
 8006edc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	07d2      	lsls	r2, r2, #31
 8006ee2:	d403      	bmi.n	8006eec <I2C_ITSlaveCplt.constprop.0+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006eec:	0447      	lsls	r7, r0, #17
 8006eee:	d571      	bpl.n	8006fd4 <I2C_ITSlaveCplt.constprop.0+0x13c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ef6:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8006ef8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006efa:	b11a      	cbz	r2, 8006f04 <I2C_ITSlaveCplt.constprop.0+0x6c>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006efc:	6811      	ldr	r1, [r2, #0]
 8006efe:	684a      	ldr	r2, [r1, #4]
 8006f00:	b292      	uxth	r2, r2
 8006f02:	8562      	strh	r2, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006f04:	076a      	lsls	r2, r5, #29
 8006f06:	d50f      	bpl.n	8006f28 <I2C_ITSlaveCplt.constprop.0+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f10:	3301      	adds	r3, #1
 8006f12:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8006f14:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006f16:	b12b      	cbz	r3, 8006f24 <I2C_ITSlaveCplt.constprop.0+0x8c>
      hi2c->XferSize--;
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8006f1c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8563      	strh	r3, [r4, #42]	@ 0x2a
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006f24:	f025 0504 	bic.w	r5, r5, #4
  if (hi2c->XferCount != 0U)
 8006f28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	b11b      	cbz	r3, 8006f36 <I2C_ITSlaveCplt.constprop.0+0x9e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f2e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006f30:	f043 0304 	orr.w	r3, r3, #4
 8006f34:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006f36:	06eb      	lsls	r3, r5, #27
 8006f38:	d501      	bpl.n	8006f3e <I2C_ITSlaveCplt.constprop.0+0xa6>
 8006f3a:	06c7      	lsls	r7, r0, #27
 8006f3c:	d428      	bmi.n	8006f90 <I2C_ITSlaveCplt.constprop.0+0xf8>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f3e:	2700      	movs	r7, #0
 8006f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f44:	6c66      	ldr	r6, [r4, #68]	@ 0x44
  hi2c->XferISR = NULL;
 8006f46:	6367      	str	r7, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	d14d      	bne.n	8006fe8 <I2C_ITSlaveCplt.constprop.0+0x150>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006f4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f4e:	4d77      	ldr	r5, [pc, #476]	@ (800712c <I2C_ITSlaveCplt.constprop.0+0x294>)
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	d10f      	bne.n	8006f74 <I2C_ITSlaveCplt.constprop.0+0xdc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f54:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f58:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006f5a:	f884 6040 	strb.w	r6, [r4, #64]	@ 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f5e:	2b22      	cmp	r3, #34	@ 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	f04f 0320 	mov.w	r3, #32
 8006f64:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f68:	6326      	str	r6, [r4, #48]	@ 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f6a:	f000 808a 	beq.w	8007082 <I2C_ITSlaveCplt.constprop.0+0x1ea>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f6e:	f7ff fc79 	bl	8006864 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 8006f74:	4620      	mov	r0, r4
 8006f76:	f7ff fc79 	bl	800686c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f7a:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f7c:	62e5      	str	r5, [r4, #44]	@ 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f7e:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8006f80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8006f84:	f884 6040 	strb.w	r6, [r4, #64]	@ 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f88:	6326      	str	r6, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f8a:	f7ff fcf5 	bl	8006978 <HAL_I2C_ListenCpltCallback>
}
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hi2c->XferCount == 0U)
 8006f90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f92:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount == 0U)
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d164      	bne.n	8007064 <I2C_ITSlaveCplt.constprop.0+0x1cc>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006f9a:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 8006f9e:	2928      	cmp	r1, #40	@ 0x28
 8006fa0:	d103      	bne.n	8006faa <I2C_ITSlaveCplt.constprop.0+0x112>
 8006fa2:	f1b6 7f00 	cmp.w	r6, #33554432	@ 0x2000000
 8006fa6:	f000 808d 	beq.w	80070c4 <I2C_ITSlaveCplt.constprop.0+0x22c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006faa:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006fae:	f516 3f80 	cmn.w	r6, #65536	@ 0x10000
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	d001      	beq.n	8006fba <I2C_ITSlaveCplt.constprop.0+0x122>
 8006fb6:	2b29      	cmp	r3, #41	@ 0x29
 8006fb8:	d066      	beq.n	8007088 <I2C_ITSlaveCplt.constprop.0+0x1f0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fba:	2310      	movs	r3, #16
 8006fbc:	61d3      	str	r3, [r2, #28]
 8006fbe:	e7be      	b.n	8006f3e <I2C_ITSlaveCplt.constprop.0+0xa6>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006fc0:	2922      	cmp	r1, #34	@ 0x22
 8006fc2:	d140      	bne.n	8007046 <I2C_ITSlaveCplt.constprop.0+0x1ae>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fc4:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
 8006fce:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006fd0:	6321      	str	r1, [r4, #48]	@ 0x30
 8006fd2:	e777      	b.n	8006ec4 <I2C_ITSlaveCplt.constprop.0+0x2c>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006fd4:	0401      	lsls	r1, r0, #16
 8006fd6:	d595      	bpl.n	8006f04 <I2C_ITSlaveCplt.constprop.0+0x6c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fde:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8006fe0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d18a      	bne.n	8006efc <I2C_ITSlaveCplt.constprop.0+0x64>
 8006fe6:	e78d      	b.n	8006f04 <I2C_ITSlaveCplt.constprop.0+0x6c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fe8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006fea:	4620      	mov	r0, r4
 8006fec:	f7ff fcee 	bl	80069cc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ff0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006ff4:	2b28      	cmp	r3, #40	@ 0x28
 8006ff6:	d1bc      	bne.n	8006f72 <I2C_ITSlaveCplt.constprop.0+0xda>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800712c <I2C_ITSlaveCplt.constprop.0+0x294>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006ffa:	2320      	movs	r3, #32
  hi2c->XferISR = NULL;
 8006ffc:	6367      	str	r7, [r4, #52]	@ 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ffe:	62e2      	str	r2, [r4, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007000:	6327      	str	r7, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007002:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007006:	076b      	lsls	r3, r5, #29
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007008:	6822      	ldr	r2, [r4, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800700a:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800700e:	d509      	bpl.n	8007024 <I2C_ITSlaveCplt.constprop.0+0x18c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007012:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007014:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007016:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8007018:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->pBuffPtr++;
 800701a:	3301      	adds	r3, #1
 800701c:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800701e:	2a00      	cmp	r2, #0
 8007020:	d144      	bne.n	80070ac <I2C_ITSlaveCplt.constprop.0+0x214>
 8007022:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007024:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007028:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800702a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 800702e:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007030:	6813      	ldr	r3, [r2, #0]
 8007032:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8007036:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007038:	61d0      	str	r0, [r2, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800703a:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800703c:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007040:	f7ff fc9a 	bl	8006978 <HAL_I2C_ListenCpltCallback>
}
 8007044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007046:	b2d2      	uxtb	r2, r2
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007048:	2a28      	cmp	r2, #40	@ 0x28
 800704a:	f47f af3b 	bne.w	8006ec4 <I2C_ITSlaveCplt.constprop.0+0x2c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800704e:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007052:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	f022 02fe 	bic.w	r2, r2, #254	@ 0xfe
 800705c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800705e:	2200      	movs	r2, #0
 8007060:	6322      	str	r2, [r4, #48]	@ 0x30
 8007062:	e72f      	b.n	8006ec4 <I2C_ITSlaveCplt.constprop.0+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007064:	2310      	movs	r3, #16
 8007066:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007068:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800706a:	f043 0304 	orr.w	r3, r3, #4
 800706e:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007070:	f036 7380 	bics.w	r3, r6, #16777216	@ 0x1000000
 8007074:	f47f af63 	bne.w	8006f3e <I2C_ITSlaveCplt.constprop.0+0xa6>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007078:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff fca6 	bl	80069cc <I2C_ITError>
 8007080:	e75d      	b.n	8006f3e <I2C_ITSlaveCplt.constprop.0+0xa6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007082:	f7ff fbf1 	bl	8006868 <HAL_I2C_SlaveRxCpltCallback>
}
 8007086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007088:	2310      	movs	r3, #16
 800708a:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800708c:	6993      	ldr	r3, [r2, #24]
 800708e:	0798      	lsls	r0, r3, #30
 8007090:	d501      	bpl.n	8007096 <I2C_ITSlaveCplt.constprop.0+0x1fe>
    hi2c->Instance->TXDR = 0x00U;
 8007092:	2300      	movs	r3, #0
 8007094:	6293      	str	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007096:	6993      	ldr	r3, [r2, #24]
 8007098:	07d9      	lsls	r1, r3, #31
 800709a:	d403      	bmi.n	80070a4 <I2C_ITSlaveCplt.constprop.0+0x20c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800709c:	6993      	ldr	r3, [r2, #24]
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	6193      	str	r3, [r2, #24]
        I2C_ITSlaveSeqCplt(hi2c);
 80070a4:	4620      	mov	r0, r4
 80070a6:	f7ff fbe1 	bl	800686c <I2C_ITSlaveSeqCplt>
 80070aa:	e748      	b.n	8006f3e <I2C_ITSlaveCplt.constprop.0+0xa6>
      hi2c->XferCount--;
 80070ac:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80070ae:	1e53      	subs	r3, r2, #1
 80070b0:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 80070b2:	3901      	subs	r1, #1
      hi2c->XferSize--;
 80070b4:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80070b6:	b28b      	uxth	r3, r1
 80070b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070ba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80070bc:	f043 0304 	orr.w	r3, r3, #4
 80070c0:	6463      	str	r3, [r4, #68]	@ 0x44
 80070c2:	e7af      	b.n	8007024 <I2C_ITSlaveCplt.constprop.0+0x18c>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070c4:	4919      	ldr	r1, [pc, #100]	@ (800712c <I2C_ITSlaveCplt.constprop.0+0x294>)
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070c6:	076e      	lsls	r6, r5, #29
  hi2c->XferISR = NULL;
 80070c8:	6363      	str	r3, [r4, #52]	@ 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070ca:	62e1      	str	r1, [r4, #44]	@ 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	f04f 0120 	mov.w	r1, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80070d0:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070d2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070da:	d508      	bpl.n	80070ee <I2C_ITSlaveCplt.constprop.0+0x256>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80070e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80070e4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->pBuffPtr++;
 80070e6:	3301      	adds	r3, #1
 80070e8:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80070ea:	b98a      	cbnz	r2, 8007110 <I2C_ITSlaveCplt.constprop.0+0x278>
 80070ec:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070ee:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f2:	2110      	movs	r1, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070f4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  HAL_I2C_ListenCpltCallback(hi2c);
 80070f8:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8007100:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hi2c);
 8007102:	2300      	movs	r3, #0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007104:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(hi2c);
 8007106:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800710a:	f7ff fc35 	bl	8006978 <HAL_I2C_ListenCpltCallback>
}
 800710e:	e716      	b.n	8006f3e <I2C_ITSlaveCplt.constprop.0+0xa6>
      hi2c->XferCount--;
 8007110:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007112:	1e53      	subs	r3, r2, #1
 8007114:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 8007116:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8007118:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800711a:	b28b      	uxth	r3, r1
 800711c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800711e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007120:	f043 0304 	orr.w	r3, r3, #4
 8007124:	6463      	str	r3, [r4, #68]	@ 0x44
 8007126:	e7e2      	b.n	80070ee <I2C_ITSlaveCplt.constprop.0+0x256>
 8007128:	fe00e800 	.word	0xfe00e800
 800712c:	ffff0000 	.word	0xffff0000

08007130 <I2C_Slave_ISR_IT>:
{
 8007130:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2c);
 8007132:	f890 c040 	ldrb.w	ip, [r0, #64]	@ 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8007136:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8007138:	f1bc 0f01 	cmp.w	ip, #1
 800713c:	f000 80a0 	beq.w	8007280 <I2C_Slave_ISR_IT+0x150>
 8007140:	f04f 0c01 	mov.w	ip, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007144:	f011 0f20 	tst.w	r1, #32
 8007148:	460b      	mov	r3, r1
 800714a:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 800714c:	f880 c040 	strb.w	ip, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007150:	d003      	beq.n	800715a <I2C_Slave_ISR_IT+0x2a>
 8007152:	f012 0f20 	tst.w	r2, #32
 8007156:	f040 8081 	bne.w	800725c <I2C_Slave_ISR_IT+0x12c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800715a:	06d8      	lsls	r0, r3, #27
 800715c:	d53b      	bpl.n	80071d6 <I2C_Slave_ISR_IT+0xa6>
 800715e:	06d1      	lsls	r1, r2, #27
 8007160:	d539      	bpl.n	80071d6 <I2C_Slave_ISR_IT+0xa6>
    if (hi2c->XferCount == 0U)
 8007162:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007164:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferCount == 0U)
 8007166:	b292      	uxth	r2, r2
 8007168:	2a00      	cmp	r2, #0
 800716a:	f040 808b 	bne.w	8007284 <I2C_Slave_ISR_IT+0x154>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800716e:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 8007172:	f1b5 7f00 	cmp.w	r5, #33554432	@ 0x2000000
 8007176:	b2c0      	uxtb	r0, r0
 8007178:	d177      	bne.n	800726a <I2C_Slave_ISR_IT+0x13a>
 800717a:	2828      	cmp	r0, #40	@ 0x28
 800717c:	d175      	bne.n	800726a <I2C_Slave_ISR_IT+0x13a>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800717e:	485a      	ldr	r0, [pc, #360]	@ (80072e8 <I2C_Slave_ISR_IT+0x1b8>)
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007180:	075b      	lsls	r3, r3, #29
  hi2c->XferISR = NULL;
 8007182:	6362      	str	r2, [r4, #52]	@ 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007184:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8007186:	f04f 0020 	mov.w	r0, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800718a:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800718c:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007190:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007194:	d50a      	bpl.n	80071ac <I2C_Slave_ISR_IT+0x7c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007196:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8007198:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800719a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800719c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800719e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->pBuffPtr++;
 80071a0:	3301      	adds	r3, #1
 80071a2:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80071a4:	2a00      	cmp	r2, #0
 80071a6:	f040 8092 	bne.w	80072ce <I2C_Slave_ISR_IT+0x19e>
 80071aa:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ac:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b0:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80071b2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 80071b6:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80071b8:	680b      	ldr	r3, [r1, #0]
 80071ba:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80071be:	600b      	str	r3, [r1, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c0:	61c8      	str	r0, [r1, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 80071c2:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 80071c4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80071c8:	f7ff fbd6 	bl	8006978 <HAL_I2C_ListenCpltCallback>
  __HAL_UNLOCK(hi2c);
 80071cc:	2300      	movs	r3, #0
  return HAL_OK;
 80071ce:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 80071d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80071d4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80071d6:	0759      	lsls	r1, r3, #29
 80071d8:	d40d      	bmi.n	80071f6 <I2C_Slave_ISR_IT+0xc6>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80071da:	0719      	lsls	r1, r3, #28
 80071dc:	d529      	bpl.n	8007232 <I2C_Slave_ISR_IT+0x102>
 80071de:	0710      	lsls	r0, r2, #28
 80071e0:	d527      	bpl.n	8007232 <I2C_Slave_ISR_IT+0x102>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071e2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80071e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80071ea:	2b28      	cmp	r3, #40	@ 0x28
 80071ec:	d06b      	beq.n	80072c6 <I2C_Slave_ISR_IT+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	2208      	movs	r2, #8
 80071f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80071f4:	e7ea      	b.n	80071cc <I2C_Slave_ISR_IT+0x9c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80071f6:	0750      	lsls	r0, r2, #29
 80071f8:	d5ef      	bpl.n	80071da <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount > 0U)
 80071fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	b16b      	cbz	r3, 800721c <I2C_Slave_ISR_IT+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007206:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8007208:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800720a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800720c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800720e:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8007210:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8007212:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007214:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8007216:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007218:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800721a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 800721c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1d3      	bne.n	80071cc <I2C_Slave_ISR_IT+0x9c>
 8007224:	f515 3f80 	cmn.w	r5, #65536	@ 0x10000
 8007228:	d0d0      	beq.n	80071cc <I2C_Slave_ISR_IT+0x9c>
        I2C_ITSlaveSeqCplt(hi2c);
 800722a:	4620      	mov	r0, r4
 800722c:	f7ff fb1e 	bl	800686c <I2C_ITSlaveSeqCplt>
 8007230:	e7cc      	b.n	80071cc <I2C_Slave_ISR_IT+0x9c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007232:	0799      	lsls	r1, r3, #30
 8007234:	d5ca      	bpl.n	80071cc <I2C_Slave_ISR_IT+0x9c>
 8007236:	0793      	lsls	r3, r2, #30
 8007238:	d5c8      	bpl.n	80071cc <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount > 0U)
 800723a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	b37b      	cbz	r3, 80072a0 <I2C_Slave_ISR_IT+0x170>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007240:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	f811 0b01 	ldrb.w	r0, [r1], #1
      hi2c->XferSize--;
 8007248:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800724a:	6298      	str	r0, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800724c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800724e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007250:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007252:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007254:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007256:	b29b      	uxth	r3, r3
 8007258:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800725a:	e7b7      	b.n	80071cc <I2C_Slave_ISR_IT+0x9c>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800725c:	f7ff fe1c 	bl	8006e98 <I2C_ITSlaveCplt.constprop.0>
  __HAL_UNLOCK(hi2c);
 8007260:	2300      	movs	r3, #0
  return HAL_OK;
 8007262:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8007264:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  return HAL_OK;
 8007268:	e7b4      	b.n	80071d4 <I2C_Slave_ISR_IT+0xa4>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800726a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800726e:	f515 3f80 	cmn.w	r5, #65536	@ 0x10000
 8007272:	b2db      	uxtb	r3, r3
 8007274:	d001      	beq.n	800727a <I2C_Slave_ISR_IT+0x14a>
 8007276:	2b29      	cmp	r3, #41	@ 0x29
 8007278:	d016      	beq.n	80072a8 <I2C_Slave_ISR_IT+0x178>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800727a:	2310      	movs	r3, #16
 800727c:	61cb      	str	r3, [r1, #28]
 800727e:	e7a5      	b.n	80071cc <I2C_Slave_ISR_IT+0x9c>
  __HAL_LOCK(hi2c);
 8007280:	2002      	movs	r0, #2
}
 8007282:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007284:	2310      	movs	r3, #16
 8007286:	61cb      	str	r3, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007288:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800728a:	f043 0304 	orr.w	r3, r3, #4
 800728e:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007290:	f035 7380 	bics.w	r3, r5, #16777216	@ 0x1000000
 8007294:	d19a      	bne.n	80071cc <I2C_Slave_ISR_IT+0x9c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007296:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007298:	4620      	mov	r0, r4
 800729a:	f7ff fb97 	bl	80069cc <I2C_ITError>
 800729e:	e795      	b.n	80071cc <I2C_Slave_ISR_IT+0x9c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80072a0:	f035 7380 	bics.w	r3, r5, #16777216	@ 0x1000000
 80072a4:	d192      	bne.n	80071cc <I2C_Slave_ISR_IT+0x9c>
 80072a6:	e7c0      	b.n	800722a <I2C_Slave_ISR_IT+0xfa>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a8:	2310      	movs	r3, #16
 80072aa:	61cb      	str	r3, [r1, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072ac:	698b      	ldr	r3, [r1, #24]
 80072ae:	079d      	lsls	r5, r3, #30
 80072b0:	d501      	bpl.n	80072b6 <I2C_Slave_ISR_IT+0x186>
    hi2c->Instance->TXDR = 0x00U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	628b      	str	r3, [r1, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072b6:	698b      	ldr	r3, [r1, #24]
 80072b8:	07d8      	lsls	r0, r3, #31
 80072ba:	d4b6      	bmi.n	800722a <I2C_Slave_ISR_IT+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072bc:	698b      	ldr	r3, [r1, #24]
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	618b      	str	r3, [r1, #24]
 80072c4:	e7b1      	b.n	800722a <I2C_Slave_ISR_IT+0xfa>
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7ff fb24 	bl	8006914 <I2C_ITAddrCplt.part.0.constprop.0>
 80072cc:	e77e      	b.n	80071cc <I2C_Slave_ISR_IT+0x9c>
      hi2c->XferCount--;
 80072ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80072d0:	3a01      	subs	r2, #1
 80072d2:	6821      	ldr	r1, [r4, #0]
      hi2c->XferCount--;
 80072d4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80072d6:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80072de:	f043 0304 	orr.w	r3, r3, #4
 80072e2:	6463      	str	r3, [r4, #68]	@ 0x44
 80072e4:	e762      	b.n	80071ac <I2C_Slave_ISR_IT+0x7c>
 80072e6:	bf00      	nop
 80072e8:	ffff0000 	.word	0xffff0000

080072ec <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ec:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80072f0:	2a20      	cmp	r2, #32
 80072f2:	d123      	bne.n	800733c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80072f4:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80072fc:	4603      	mov	r3, r0
 80072fe:	2a01      	cmp	r2, #1
 8007300:	d01c      	beq.n	800733c <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007302:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007304:	2024      	movs	r0, #36	@ 0x24
{
 8007306:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007308:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800730c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8007310:	6810      	ldr	r0, [r2, #0]
 8007312:	f020 0001 	bic.w	r0, r0, #1
 8007316:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007318:	6810      	ldr	r0, [r2, #0]
 800731a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800731e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8007320:	6810      	ldr	r0, [r2, #0]
 8007322:	4301      	orrs	r1, r0

    return HAL_OK;
 8007324:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8007326:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007328:	6811      	ldr	r1, [r2, #0]
 800732a:	f041 0101 	orr.w	r1, r1, #1
 800732e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007330:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007334:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007338:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800733c:	2002      	movs	r0, #2
}
 800733e:	4770      	bx	lr

08007340 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007340:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8007344:	2a20      	cmp	r2, #32
 8007346:	d122      	bne.n	800738e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8007348:	4603      	mov	r3, r0
{
 800734a:	b500      	push	{lr}
 800734c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007350:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007354:	2a01      	cmp	r2, #1
 8007356:	d01c      	beq.n	8007392 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007358:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800735a:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800735c:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007360:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007364:	6810      	ldr	r0, [r2, #0]
 8007366:	f020 0001 	bic.w	r0, r0, #1
 800736a:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800736c:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800736e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 8007372:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8007376:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8007378:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800737a:	6811      	ldr	r1, [r2, #0]
 800737c:	f041 0101 	orr.w	r1, r1, #1
 8007380:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007382:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007386:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800738a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800738e:	2002      	movs	r0, #2
}
 8007390:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007392:	2002      	movs	r0, #2
}
 8007394:	f85d fb04 	ldr.w	pc, [sp], #4

08007398 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	4699      	mov	r9, r3
 800739e:	4680      	mov	r8, r0
 80073a0:	460d      	mov	r5, r1
 80073a2:	4614      	mov	r4, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 80073a4:	7803      	ldrb	r3, [r0, #0]
 80073a6:	2601      	movs	r6, #1
  p = 0;
 80073a8:	2700      	movs	r7, #0
 80073aa:	e005      	b.n	80073b8 <JPEG_Bits_To_SizeCodes+0x20>
    i = (uint32_t)Bits[l];
 80073ac:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    if ((p + i) > 256UL)
 80073b0:	19da      	adds	r2, r3, r7
 80073b2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80073b6:	d83a      	bhi.n	800742e <JPEG_Bits_To_SizeCodes+0x96>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80073b8:	19e8      	adds	r0, r5, r7
 80073ba:	461a      	mov	r2, r3
 80073bc:	4631      	mov	r1, r6
    while (i != 0UL)
 80073be:	b113      	cbz	r3, 80073c6 <JPEG_Bits_To_SizeCodes+0x2e>
      p++;
 80073c0:	441f      	add	r7, r3
      Huffsize[p] = (uint8_t) l + 1U;
 80073c2:	f008 fbd3 	bl	800fb6c <memset>
  for (l = 0; l < 16UL; l++)
 80073c6:	2e10      	cmp	r6, #16
    if ((p + i) > 256UL)
 80073c8:	f106 0601 	add.w	r6, r6, #1
  for (l = 0; l < 16UL; l++)
 80073cc:	d1ee      	bne.n	80073ac <JPEG_Bits_To_SizeCodes+0x14>
      i--;
    }
  }
  Huffsize[p] = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	55eb      	strb	r3, [r5, r7]
  *LastK = p;
 80073d2:	f8c9 7000 	str.w	r7, [r9]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
 80073d6:	7829      	ldrb	r1, [r5, #0]
 80073d8:	460a      	mov	r2, r1
  p = 0;
  while (Huffsize[p] != 0U)
 80073da:	b329      	cbz	r1, 8007428 <JPEG_Bits_To_SizeCodes+0x90>
  code = 0;
 80073dc:	4699      	mov	r9, r3
 80073de:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80073e2:	2701      	movs	r7, #1
  p = 0;
 80073e4:	461e      	mov	r6, r3
    while (((uint32_t) Huffsize[p]) == si)
 80073e6:	4291      	cmp	r1, r2
 80073e8:	d124      	bne.n	8007434 <JPEG_Bits_To_SizeCodes+0x9c>
 80073ea:	eb06 0008 	add.w	r0, r6, r8
 80073ee:	eb05 0c06 	add.w	ip, r5, r6
 80073f2:	464b      	mov	r3, r9
 80073f4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      Huffcode[p] = code;
 80073f8:	f840 3f04 	str.w	r3, [r0, #4]!
      code++;
 80073fc:	4619      	mov	r1, r3
    while (((uint32_t) Huffsize[p]) == si)
 80073fe:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
 8007402:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8007404:	4596      	cmp	lr, r2
 8007406:	d0f7      	beq.n	80073f8 <JPEG_Bits_To_SizeCodes+0x60>
 8007408:	3601      	adds	r6, #1
 800740a:	eba6 0609 	sub.w	r6, r6, r9
      p++;
 800740e:	440e      	add	r6, r1
    if(si > 31UL)
 8007410:	2a1f      	cmp	r2, #31
 8007412:	d80c      	bhi.n	800742e <JPEG_Bits_To_SizeCodes+0x96>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007414:	fa07 f102 	lsl.w	r1, r7, r2
 8007418:	4299      	cmp	r1, r3
 800741a:	d908      	bls.n	800742e <JPEG_Bits_To_SizeCodes+0x96>
  while (Huffsize[p] != 0U)
 800741c:	5da9      	ldrb	r1, [r5, r6]
    {
      return HAL_ERROR;
    }
    code <<= 1;
 800741e:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 8007422:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 8007424:	2900      	cmp	r1, #0
 8007426:	d1de      	bne.n	80073e6 <JPEG_Bits_To_SizeCodes+0x4e>
  }
  /* Return function status */
  return HAL_OK;
 8007428:	2000      	movs	r0, #0
}
 800742a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 800742e:	2001      	movs	r0, #1
}
 8007430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (((uint32_t) Huffsize[p]) == si)
 8007434:	464b      	mov	r3, r9
 8007436:	e7eb      	b.n	8007410 <JPEG_Bits_To_SizeCodes+0x78>

08007438 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8007438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743a:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800743e:	460d      	mov	r5, r1
 8007440:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007442:	ab01      	add	r3, sp, #4
 8007444:	aa43      	add	r2, sp, #268	@ 0x10c
 8007446:	a902      	add	r1, sp, #8
 8007448:	f7ff ffa6 	bl	8007398 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800744c:	b9d0      	cbnz	r0, 8007484 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800744e:	9f01      	ldr	r7, [sp, #4]
 8007450:	b1c7      	cbz	r7, 8007484 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
 8007452:	370f      	adds	r7, #15
 8007454:	f50d 7e86 	add.w	lr, sp, #268	@ 0x10c
 8007458:	a902      	add	r1, sp, #8
 800745a:	f104 0c0f 	add.w	ip, r4, #15
 800745e:	4427      	add	r7, r4
 8007460:	e009      	b.n	8007476 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007462:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
 8007466:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007468:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800746c:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007470:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007472:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8007474:	d006      	beq.n	8007484 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
 8007476:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800747a:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800747c:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007480:	d9ef      	bls.n	8007462 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8007482:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007484:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8007488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748a:	bf00      	nop

0800748c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007490:	6804      	ldr	r4, [r0, #0]
{
 8007492:	b093      	sub	sp, #76	@ 0x4c
 8007494:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007496:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800749a:	429a      	cmp	r2, r3
 800749c:	f000 809d 	beq.w	80075da <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80074a0:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d003      	beq.n	80074b0 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 80074a8:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80074aa:	b013      	add	sp, #76	@ 0x4c
 80074ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80074b0:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80074b4:	a903      	add	r1, sp, #12
 80074b6:	f7ff ffbf 	bl	8007438 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d1f5      	bne.n	80074aa <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
 80074be:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074c2:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074c6:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
 80074ca:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074cc:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
 80074d0:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074d2:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80074d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074da:	f40a 6a70 	and.w	sl, sl, #3840	@ 0xf00
 80074de:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074e2:	f40e 6e70 	and.w	lr, lr, #3840	@ 0xf00
 80074e6:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074e8:	f89d 9015 	ldrb.w	r9, [sp, #21]
 80074ec:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074f0:	f89d c014 	ldrb.w	ip, [sp, #20]
 80074f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074f8:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80074fc:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007500:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007504:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007506:	f409 6970 	and.w	r9, r9, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800750a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800750e:	f40c 6c70 	and.w	ip, ip, #3840	@ 0xf00
 8007512:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007516:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800751a:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800751e:	f89d 7011 	ldrb.w	r7, [sp, #17]
 8007522:	f408 6870 	and.w	r8, r8, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007526:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
 8007528:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800752c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8007530:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007534:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
 8007536:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800753a:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800753c:	f89d e03c 	ldrb.w	lr, [sp, #60]	@ 0x3c
 8007540:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007544:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007548:	f89d 600f 	ldrb.w	r6, [sp, #15]
 800754c:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007550:	f89d e038 	ldrb.w	lr, [sp, #56]	@ 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007554:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007556:	9b01      	ldr	r3, [sp, #4]
 8007558:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800755c:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8007560:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007564:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
 8007568:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800756c:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
 800756e:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007572:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007576:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 800757a:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800757e:	f40b 6b70 	and.w	fp, fp, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007582:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007586:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 800758a:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
 800758e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8007592:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007596:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 800759a:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800759c:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 80075a0:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
 80075a2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80075a6:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075aa:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 80075ae:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075b0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80075b4:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
 80075b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80075ba:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075be:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80075c2:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075c4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80075c8:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
 80075cc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80075d0:	f844 3c18 	str.w	r3, [r4, #-24]
}
 80075d4:	b013      	add	sp, #76	@ 0x4c
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80075da:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
  if (HuffTableDC != NULL)
 80075de:	e769      	b.n	80074b4 <JPEG_Set_HuffDC_Mem+0x28>

080075e0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80075e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80075e4:	6804      	ldr	r4, [r0, #0]
{
 80075e6:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 80075ea:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80075ec:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d041      	beq.n	8007678 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80075f4:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d004      	beq.n	8007606 <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 80075fc:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80075fe:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 8007602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007606:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800760a:	4628      	mov	r0, r5
 800760c:	466b      	mov	r3, sp
 800760e:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8007612:	a901      	add	r1, sp, #4
 8007614:	f7ff fec0 	bl	8007398 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007618:	2800      	cmp	r0, #0
 800761a:	d1f0      	bne.n	80075fe <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 800761c:	9b00      	ldr	r3, [sp, #0]
 800761e:	b373      	cbz	r3, 800767e <JPEG_Set_HuffAC_Mem+0x9e>
 8007620:	330f      	adds	r3, #15
 8007622:	f20d 4c34 	addw	ip, sp, #1076	@ 0x434
 8007626:	af01      	add	r7, sp, #4
 8007628:	f105 020f 	add.w	r2, r5, #15
 800762c:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007630:	ae42      	add	r6, sp, #264	@ 0x108
 8007632:	e011      	b.n	8007658 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
 8007634:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8007638:	2ba1      	cmp	r3, #161	@ 0xa1
 800763a:	d8df      	bhi.n	80075fc <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800763c:	f817 5b01 	ldrb.w	r5, [r7], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007640:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 8007644:	f85c 1b04 	ldr.w	r1, [ip], #4
  while (k < lastK)
 8007648:	4572      	cmp	r2, lr
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800764a:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800764e:	46b1      	mov	r9, r6
 8007650:	f8c8 10a4 	str.w	r1, [r8, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007654:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
 8007656:	d014      	beq.n	8007682 <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
 8007658:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
 800765c:	23a0      	movs	r3, #160	@ 0xa0
    if (l == 0UL)
 800765e:	2900      	cmp	r1, #0
 8007660:	d0ec      	beq.n	800763c <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
 8007662:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
 8007664:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007668:	29f0      	cmp	r1, #240	@ 0xf0
      l = (msb * 10UL) + lsb - 1UL;
 800766a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800766e:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007672:	d1df      	bne.n	8007634 <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
 8007674:	23a1      	movs	r3, #161	@ 0xa1
 8007676:	e7e1      	b.n	800763c <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007678:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  if (HuffTableAC != NULL)
 800767c:	e7c5      	b.n	800760a <JPEG_Set_HuffAC_Mem+0x2a>
 800767e:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
      *addressDef = 0x0FFF0FFF;
 8007682:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
    *addressDef = 0x0FD10FD0;
 8007686:	4a1a      	ldr	r2, [pc, #104]	@ (80076f0 <JPEG_Set_HuffAC_Mem+0x110>)
 8007688:	eba9 0c89 	sub.w	ip, r9, r9, lsl #2
 800768c:	4649      	mov	r1, r9
      *addressDef = 0x0FFF0FFF;
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	f10d 0566 	add.w	r5, sp, #102	@ 0x66
 8007694:	6063      	str	r3, [r4, #4]
 8007696:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 800769a:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
 800769c:	f103 33d3 	add.w	r3, r3, #3553874899	@ 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
 80076a0:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
 80076a2:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
 80076a6:	f103 232c 	add.w	r3, r3, #738208768	@ 0x2c002c00
 80076aa:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 80076ac:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80076b0:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 80076b2:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80076b6:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076b8:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076bc:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076c0:	0212      	lsls	r2, r2, #8
 80076c2:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076cc:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    while (i > 1UL)
 80076d0:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076d2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076d6:	433a      	orrs	r2, r7
    while (i > 1UL)
 80076d8:	42a9      	cmp	r1, r5
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80076da:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
 80076de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e2:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80076e6:	d1e7      	bne.n	80076b8 <JPEG_Set_HuffAC_Mem+0xd8>
}
 80076e8:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 80076ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076f0:	0fd10fd0 	.word	0x0fd10fd0

080076f4 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80076f4:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80076f6:	6803      	ldr	r3, [r0, #0]
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80076f8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80076fc:	6542      	str	r2, [r0, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80076fe:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007700:	f002 0203 	and.w	r2, r2, #3
 8007704:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	bf0c      	ite	eq
 800770a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800770e:	f022 0208 	bicne.w	r2, r2, #8
 8007712:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	f022 0201 	bic.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800771c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800771e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007722:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007726:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800772a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800772c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800772e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007732:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007736:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800773a:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007744:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007746:	f002 020c 	and.w	r2, r2, #12
 800774a:	2a08      	cmp	r2, #8
 800774c:	d00a      	beq.n	8007764 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800774e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007750:	f002 020c 	and.w	r2, r2, #12
 8007754:	2a0c      	cmp	r2, #12
 8007756:	d000      	beq.n	800775a <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007758:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800775a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800775c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007760:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007762:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8007764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007766:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800776a:	631a      	str	r2, [r3, #48]	@ 0x30
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007770:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007772:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007776:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
{
 8007778:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800777a:	42aa      	cmp	r2, r5
 800777c:	d32a      	bcc.n	80077d4 <JPEG_DMA_StartProcess+0x64>
 800777e:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007780:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007782:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007784:	6a86      	ldr	r6, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007786:	42b3      	cmp	r3, r6
 8007788:	d324      	bcc.n	80077d4 <JPEG_DMA_StartProcess+0x64>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800778a:	4f19      	ldr	r7, [pc, #100]	@ (80077f0 <JPEG_DMA_StartProcess+0x80>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800778c:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80077fc <JPEG_DMA_StartProcess+0x8c>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007790:	654f      	str	r7, [r1, #84]	@ 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007792:	f8c1 c044 	str.w	ip, [r1, #68]	@ 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007796:	4917      	ldr	r1, [pc, #92]	@ (80077f4 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007798:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800779a:	6441      	str	r1, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800779c:	4916      	ldr	r1, [pc, #88]	@ (80077f8 <JPEG_DMA_StartProcess+0x88>)
 800779e:	6581      	str	r1, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80077a0:	b1a5      	cbz	r5, 80077cc <JPEG_DMA_StartProcess+0x5c>
 80077a2:	b19e      	cbz	r6, 80077cc <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80077a4:	fbb2 f1f5 	udiv	r1, r2, r5
 80077a8:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80077ac:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80077ae:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80077b0:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80077b2:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80077b4:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80077b6:	fbb3 f2f6 	udiv	r2, r3, r6
 80077ba:	fb06 3212 	mls	r2, r6, r2, r3
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80077c2:	9500      	str	r5, [sp, #0]
 80077c4:	69e2      	ldr	r2, [r4, #28]
 80077c6:	f001 f915 	bl	80089f4 <HAL_MDMA_Start_IT>
 80077ca:	b130      	cbz	r0, 80077da <JPEG_DMA_StartProcess+0x6a>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80077cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80077ce:	f043 0304 	orr.w	r3, r3, #4
 80077d2:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80077d4:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80077d6:	b003      	add	sp, #12
 80077d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80077de:	69a1      	ldr	r1, [r4, #24]
 80077e0:	3240      	adds	r2, #64	@ 0x40
 80077e2:	9500      	str	r5, [sp, #0]
 80077e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80077e6:	f001 f905 	bl	80089f4 <HAL_MDMA_Start_IT>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d0f3      	beq.n	80077d6 <JPEG_DMA_StartProcess+0x66>
 80077ee:	e7ed      	b.n	80077cc <JPEG_DMA_StartProcess+0x5c>
 80077f0:	08007ca1 	.word	0x08007ca1
 80077f4:	08007e29 	.word	0x08007e29
 80077f8:	08007ea9 	.word	0x08007ea9
 80077fc:	08007ccd 	.word	0x08007ccd

08007800 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007800:	6803      	ldr	r3, [r0, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	f002 0203 	and.w	r2, r2, #3
 8007808:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
 800780a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800780e:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007810:	d018      	beq.n	8007844 <HAL_JPEG_GetInfo.part.0+0x44>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	f012 0203 	ands.w	r2, r2, #3
 8007818:	d10b      	bne.n	8007832 <HAL_JPEG_GetInfo.part.0+0x32>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800781a:	6859      	ldr	r1, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800781c:	f8c9 2000 	str.w	r2, [r9]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007820:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007822:	0c09      	lsrs	r1, r1, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007824:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007826:	f8c9 1008 	str.w	r1, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800782a:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800782e:	2100      	movs	r1, #0
 8007830:	e02f      	b.n	8007892 <HAL_JPEG_GetInfo.part.0+0x92>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	f002 0203 	and.w	r2, r2, #3
 8007838:	2a03      	cmp	r2, #3
 800783a:	f000 8097 	beq.w	800796c <HAL_JPEG_GetInfo.part.0+0x16c>
    return HAL_ERROR;
 800783e:	2001      	movs	r0, #1
}
 8007840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007844:	2110      	movs	r1, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007846:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007848:	f8c9 1000 	str.w	r1, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800784c:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800784e:	68d9      	ldr	r1, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007850:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007854:	0c09      	lsrs	r1, r1, #16
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007856:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007858:	695c      	ldr	r4, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800785a:	f8c9 100c 	str.w	r1, [r9, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800785e:	0916      	lsrs	r6, r2, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007860:	6999      	ldr	r1, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007862:	f014 0ff0 	tst.w	r4, #240	@ 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007866:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800786a:	ea4f 1714 	mov.w	r7, r4, lsr #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800786e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007872:	d105      	bne.n	8007880 <HAL_JPEG_GetInfo.part.0+0x80>
 8007874:	2a01      	cmp	r2, #1
 8007876:	d103      	bne.n	8007880 <HAL_JPEG_GetInfo.part.0+0x80>
 8007878:	070d      	lsls	r5, r1, #28
 800787a:	d1d8      	bne.n	800782e <HAL_JPEG_GetInfo.part.0+0x2e>
 800787c:	2102      	movs	r1, #2
 800787e:	e008      	b.n	8007892 <HAL_JPEG_GetInfo.part.0+0x92>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007880:	433e      	orrs	r6, r7
 8007882:	0734      	lsls	r4, r6, #28
 8007884:	d0d3      	beq.n	800782e <HAL_JPEG_GetInfo.part.0+0x2e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007886:	430f      	orrs	r7, r1
 8007888:	0739      	lsls	r1, r7, #28
 800788a:	d1d0      	bne.n	800782e <HAL_JPEG_GetInfo.part.0+0x2e>
 800788c:	2a03      	cmp	r2, #3
 800788e:	d1ce      	bne.n	800782e <HAL_JPEG_GetInfo.part.0+0x2e>
 8007890:	2101      	movs	r1, #1
 8007892:	4a42      	ldr	r2, [pc, #264]	@ (800799c <HAL_JPEG_GetInfo.part.0+0x19c>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8007894:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007898:	f8c9 1004 	str.w	r1, [r9, #4]
  uint32_t quality = 0;
 800789c:	2600      	movs	r6, #0
 800789e:	f102 0440 	add.w	r4, r2, #64	@ 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80078a2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80078a6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80078aa:	e033      	b.n	8007914 <HAL_JPEG_GetInfo.part.0+0x114>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80078ac:	f892 8001 	ldrb.w	r8, [r2, #1]
 80078b0:	fb0e f707 	mul.w	r7, lr, r7
 80078b4:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80078b6:	f815 8008 	ldrb.w	r8, [r5, r8]
 80078ba:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 80078be:	2f64      	cmp	r7, #100	@ 0x64
 80078c0:	d958      	bls.n	8007974 <HAL_JPEG_GetInfo.part.0+0x174>
          quality += 5000UL / scale;
 80078c2:	fbb1 f7f7 	udiv	r7, r1, r7
 80078c6:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80078c8:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
 80078cc:	2f01      	cmp	r7, #1
 80078ce:	d03d      	beq.n	800794c <HAL_JPEG_GetInfo.part.0+0x14c>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80078d0:	f892 8002 	ldrb.w	r8, [r2, #2]
 80078d4:	fb0e f707 	mul.w	r7, lr, r7
 80078d8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80078da:	f815 8008 	ldrb.w	r8, [r5, r8]
 80078de:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 80078e2:	2f64      	cmp	r7, #100	@ 0x64
 80078e4:	d955      	bls.n	8007992 <HAL_JPEG_GetInfo.part.0+0x192>
          quality += 5000UL / scale;
 80078e6:	fbb1 f7f7 	udiv	r7, r1, r7
 80078ea:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80078ec:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d030      	beq.n	8007954 <HAL_JPEG_GetInfo.part.0+0x154>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80078f2:	78d7      	ldrb	r7, [r2, #3]
 80078f4:	fb0e f303 	mul.w	r3, lr, r3
 80078f8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80078fa:	5def      	ldrb	r7, [r5, r7]
 80078fc:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
 8007900:	2b64      	cmp	r3, #100	@ 0x64
 8007902:	d93c      	bls.n	800797e <HAL_JPEG_GetInfo.part.0+0x17e>
          quality += 5000UL / scale;
 8007904:	fbb1 f3f3 	udiv	r3, r1, r3
 8007908:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800790a:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
 800790c:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007910:	4294      	cmp	r4, r2
 8007912:	d025      	beq.n	8007960 <HAL_JPEG_GetInfo.part.0+0x160>
    quantRow = *tableAddress;
 8007914:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007918:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
 800791a:	2f01      	cmp	r7, #1
 800791c:	d028      	beq.n	8007970 <HAL_JPEG_GetInfo.part.0+0x170>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800791e:	f892 8000 	ldrb.w	r8, [r2]
 8007922:	fb0e f707 	mul.w	r7, lr, r7
 8007926:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8007928:	f815 8008 	ldrb.w	r8, [r5, r8]
 800792c:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8007930:	2f64      	cmp	r7, #100	@ 0x64
 8007932:	d929      	bls.n	8007988 <HAL_JPEG_GetInfo.part.0+0x188>
          quality += 5000UL / scale;
 8007934:	fbb1 f7f7 	udiv	r7, r1, r7
 8007938:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800793a:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
 800793e:	2f01      	cmp	r7, #1
 8007940:	d1b4      	bne.n	80078ac <HAL_JPEG_GetInfo.part.0+0xac>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007942:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
 8007946:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8007948:	2f01      	cmp	r7, #1
 800794a:	d1c1      	bne.n	80078d0 <HAL_JPEG_GetInfo.part.0+0xd0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800794c:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
 800794e:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8007950:	2b01      	cmp	r3, #1
 8007952:	d1ce      	bne.n	80078f2 <HAL_JPEG_GetInfo.part.0+0xf2>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007954:	3204      	adds	r2, #4
        quality += 100UL;
 8007956:	3664      	adds	r6, #100	@ 0x64
    tableAddress ++;
 8007958:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800795c:	4294      	cmp	r4, r2
 800795e:	d1d9      	bne.n	8007914 <HAL_JPEG_GetInfo.part.0+0x114>
  }

  return (quality / 64UL);
 8007960:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
 8007962:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007964:	f8c9 6010 	str.w	r6, [r9, #16]
}
 8007968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800796c:	2130      	movs	r1, #48	@ 0x30
 800796e:	e76a      	b.n	8007846 <HAL_JPEG_GetInfo.part.0+0x46>
        quality += 100UL;
 8007970:	3664      	adds	r6, #100	@ 0x64
 8007972:	e7e2      	b.n	800793a <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += (200UL - scale) / 2UL;
 8007974:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8007978:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 800797c:	e7a4      	b.n	80078c8 <HAL_JPEG_GetInfo.part.0+0xc8>
 800797e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8007982:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 8007986:	e7c0      	b.n	800790a <HAL_JPEG_GetInfo.part.0+0x10a>
 8007988:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 800798c:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8007990:	e7d3      	b.n	800793a <HAL_JPEG_GetInfo.part.0+0x13a>
 8007992:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8007996:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 800799a:	e7a7      	b.n	80078ec <HAL_JPEG_GetInfo.part.0+0xec>
 800799c:	08010558 	.word	0x08010558

080079a0 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f000 8107 	beq.w	8007bb4 <HAL_JPEG_Init+0x214>
{
 80079a6:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80079a8:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80079ac:	4605      	mov	r5, r0
 80079ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80f9 	beq.w	8007baa <HAL_JPEG_Init+0x20a>
  __HAL_JPEG_ENABLE(hjpeg);
 80079b8:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80079ba:	2202      	movs	r2, #2
  hjpeg->QuantTable2 = NULL;
 80079bc:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80079be:	497e      	ldr	r1, [pc, #504]	@ (8007bb8 <HAL_JPEG_Init+0x218>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80079c0:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 80079c4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80079cc:	6822      	ldr	r2, [r4, #0]
 80079ce:	f022 0201 	bic.w	r2, r2, #1
 80079d2:	6022      	str	r2, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80079d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80079d6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80079da:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80079dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80079de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079e2:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80079e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80079e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079ea:	6322      	str	r2, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80079ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80079ee:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80079f2:	63a2      	str	r2, [r4, #56]	@ 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80079f4:	4a71      	ldr	r2, [pc, #452]	@ (8007bbc <HAL_JPEG_Init+0x21c>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80079f6:	63e9      	str	r1, [r5, #60]	@ 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80079f8:	2101      	movs	r1, #1
  hjpeg->QuantTable2 = NULL;
 80079fa:	64ab      	str	r3, [r5, #72]	@ 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80079fc:	e9c5 2310 	strd	r2, r3, [r5, #64]	@ 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a00:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
 8007a04:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8007a08:	4b6d      	ldr	r3, [pc, #436]	@ (8007bc0 <HAL_JPEG_Init+0x220>)
 8007a0a:	f8c4 1368 	str.w	r1, [r4, #872]	@ 0x368
 8007a0e:	f8c4 2364 	str.w	r2, [r4, #868]	@ 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a12:	496c      	ldr	r1, [pc, #432]	@ (8007bc4 <HAL_JPEG_Init+0x224>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a14:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a18:	4b6b      	ldr	r3, [pc, #428]	@ (8007bc8 <HAL_JPEG_Init+0x228>)
 8007a1a:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
 8007a1e:	4a6b      	ldr	r2, [pc, #428]	@ (8007bcc <HAL_JPEG_Init+0x22c>)
 8007a20:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a24:	4b6a      	ldr	r3, [pc, #424]	@ (8007bd0 <HAL_JPEG_Init+0x230>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a26:	f8c4 2370 	str.w	r2, [r4, #880]	@ 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a2a:	496a      	ldr	r1, [pc, #424]	@ (8007bd4 <HAL_JPEG_Init+0x234>)
 8007a2c:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
 8007a30:	4a69      	ldr	r2, [pc, #420]	@ (8007bd8 <HAL_JPEG_Init+0x238>)
 8007a32:	4b6a      	ldr	r3, [pc, #424]	@ (8007bdc <HAL_JPEG_Init+0x23c>)
 8007a34:	f8c4 1384 	str.w	r1, [r4, #900]	@ 0x384
 8007a38:	f8c4 2380 	str.w	r2, [r4, #896]	@ 0x380
 8007a3c:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007a40:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
  value = *address & 0xFFFF0000U;
 8007a44:	f8d4 142c 	ldr.w	r1, [r4, #1068]	@ 0x42c
 8007a48:	4a65      	ldr	r2, [pc, #404]	@ (8007be0 <HAL_JPEG_Init+0x240>)
 8007a4a:	400a      	ands	r2, r1
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007a4c:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007a50:	4313      	orrs	r3, r2
  *address = value;
 8007a52:	4a64      	ldr	r2, [pc, #400]	@ (8007be4 <HAL_JPEG_Init+0x244>)
 8007a54:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
 8007a58:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007a5c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007a60:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a62:	f892 e0b3 	ldrb.w	lr, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007a66:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007a68:	f892 c0b0 	ldrb.w	ip, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007a6c:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
  while (index > 3UL)
 8007a70:	4296      	cmp	r6, r2
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a72:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007a76:	ea43 030c 	orr.w	r3, r3, ip
 8007a7a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a7e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007a82:	d1eb      	bne.n	8007a5c <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
 8007a84:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007a88:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
  value = *address & 0xFFFF0000U;
 8007a8c:	4954      	ldr	r1, [pc, #336]	@ (8007be0 <HAL_JPEG_Init+0x240>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007a8e:	2001      	movs	r0, #1
  value = *address & 0x0000FFFFU;
 8007a90:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007a92:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007a96:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007a9a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007a9e:	400b      	ands	r3, r1
  *address = value;
 8007aa0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007aa4:	f8c4 0438 	str.w	r0, [r4, #1080]	@ 0x438
 8007aa8:	f8c4 2434 	str.w	r2, [r4, #1076]	@ 0x434
 8007aac:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007ab0:	f640 320a 	movw	r2, #2826	@ 0xb0a
  value = *address & 0x0000FFFFUL;
 8007ab4:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007ab8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007abe:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007ac2:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007ac6:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007ac8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007aca:	4b47      	ldr	r3, [pc, #284]	@ (8007be8 <HAL_JPEG_Init+0x248>)
  *address = value;
 8007acc:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007ad0:	f247 7202 	movw	r2, #30466	@ 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007ad4:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007ad8:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007adc:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007ae0:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007ae4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007aea:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007aee:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007af2:	400b      	ands	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007af4:	493d      	ldr	r1, [pc, #244]	@ (8007bec <HAL_JPEG_Init+0x24c>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007af6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007af8:	4b3d      	ldr	r3, [pc, #244]	@ (8007bf0 <HAL_JPEG_Init+0x250>)
  *address = value;
 8007afa:	f8c4 2458 	str.w	r2, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007afe:	4a3d      	ldr	r2, [pc, #244]	@ (8007bf4 <HAL_JPEG_Init+0x254>)
 8007b00:	f8c4 1454 	str.w	r1, [r4, #1108]	@ 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
 8007b04:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b08:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
 8007b0c:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007b10:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007b14:	4a38      	ldr	r2, [pc, #224]	@ (8007bf8 <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFUL;
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007b1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007b20:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007b24:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007b28:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b2a:	f892 e0b5 	ldrb.w	lr, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007b2e:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007b30:	f892 c0b2 	ldrb.w	ip, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007b34:	f892 00b3 	ldrb.w	r0, [r2, #179]	@ 0xb3
  while (index > 3UL)
 8007b38:	4296      	cmp	r6, r2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007b3a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8007b3e:	ea43 030c 	orr.w	r3, r3, ip
 8007b42:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b46:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007b4a:	d1eb      	bne.n	8007b24 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007b4c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007b50:	4924      	ldr	r1, [pc, #144]	@ (8007be4 <HAL_JPEG_Init+0x244>)
 8007b52:	4628      	mov	r0, r5
 8007b54:	f7ff fd44 	bl	80075e0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007b58:	b118      	cbz	r0, 8007b62 <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007b5a:	2301      	movs	r3, #1
    return HAL_ERROR;
 8007b5c:	2001      	movs	r0, #1
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007b5e:	652b      	str	r3, [r5, #80]	@ 0x50
}
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007b62:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007b66:	4924      	ldr	r1, [pc, #144]	@ (8007bf8 <HAL_JPEG_Init+0x258>)
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7ff fd39 	bl	80075e0 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d1f3      	bne.n	8007b5a <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007b72:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007b76:	4921      	ldr	r1, [pc, #132]	@ (8007bfc <HAL_JPEG_Init+0x25c>)
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7ff fc87 	bl	800748c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d1eb      	bne.n	8007b5a <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007b82:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007b86:	491e      	ldr	r1, [pc, #120]	@ (8007c00 <HAL_JPEG_Init+0x260>)
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f7ff fc7f 	bl	800748c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d1e3      	bne.n	8007b5a <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007b92:	6863      	ldr	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007b94:	2201      	movs	r2, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b9a:	6063      	str	r3, [r4, #4]
  hjpeg->JpegInCount = 0;
 8007b9c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007b9e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007ba0:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007ba4:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007ba6:	6568      	str	r0, [r5, #84]	@ 0x54
}
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 8007baa:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007bae:	f7fb f8cf 	bl	8002d50 <HAL_JPEG_MspInit>
 8007bb2:	e701      	b.n	80079b8 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
 8007bb4:	2001      	movs	r0, #1
}
 8007bb6:	4770      	bx	lr
 8007bb8:	08010518 	.word	0x08010518
 8007bbc:	080104d8 	.word	0x080104d8
 8007bc0:	01050100 	.word	0x01050100
 8007bc4:	0b0a0908 	.word	0x0b0a0908
 8007bc8:	07060504 	.word	0x07060504
 8007bcc:	03020100 	.word	0x03020100
 8007bd0:	7d010000 	.word	0x7d010000
 8007bd4:	04040505 	.word	0x04040505
 8007bd8:	03040203 	.word	0x03040203
 8007bdc:	03010200 	.word	0x03010200
 8007be0:	ffff0000 	.word	0xffff0000
 8007be4:	0801064c 	.word	0x0801064c
 8007be8:	09080706 	.word	0x09080706
 8007bec:	01000404 	.word	0x01000404
 8007bf0:	04040201 	.word	0x04040201
 8007bf4:	05070403 	.word	0x05070403
 8007bf8:	08010598 	.word	0x08010598
 8007bfc:	0801071c 	.word	0x0801071c
 8007c00:	08010700 	.word	0x08010700

08007c04 <HAL_JPEG_GetInfo>:
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007c04:	b110      	cbz	r0, 8007c0c <HAL_JPEG_GetInfo+0x8>
 8007c06:	b109      	cbz	r1, 8007c0c <HAL_JPEG_GetInfo+0x8>
 8007c08:	f7ff bdfa 	b.w	8007800 <HAL_JPEG_GetInfo.part.0>
}
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	4770      	bx	lr

08007c10 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bf18      	it	ne
 8007c14:	2900      	cmpne	r1, #0
 8007c16:	d036      	beq.n	8007c86 <HAL_JPEG_Decode_DMA+0x76>
{
 8007c18:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007c1a:	fab0 f580 	clz	r5, r0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	096d      	lsrs	r5, r5, #5
 8007c22:	b370      	cbz	r0, 8007c82 <HAL_JPEG_Decode_DMA+0x72>
  __HAL_LOCK(hjpeg);
 8007c24:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 8007c28:	f1bc 0f01 	cmp.w	ip, #1
 8007c2c:	d022      	beq.n	8007c74 <HAL_JPEG_Decode_DMA+0x64>
 8007c2e:	f04f 0c01 	mov.w	ip, #1
 8007c32:	f880 c04c 	strb.w	ip, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8007c36:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 8007c3a:	f1bc 0f01 	cmp.w	ip, #1
 8007c3e:	d117      	bne.n	8007c70 <HAL_JPEG_Decode_DMA+0x60>
    hjpeg->InDataLength = InDataLength;
 8007c40:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8007c42:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007c4a:	2304      	movs	r3, #4
 8007c4c:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007c50:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007c52:	f023 030f 	bic.w	r3, r3, #15
 8007c56:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007c58:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007c5a:	f043 030e 	orr.w	r3, r3, #14
 8007c5e:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8007c60:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 8007c62:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8007c64:	f7ff fd46 	bl	80076f4 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007c68:	f7ff fd82 	bl	8007770 <JPEG_DMA_StartProcess>
 8007c6c:	b920      	cbnz	r0, 8007c78 <HAL_JPEG_Decode_DMA+0x68>
}
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8007c70:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8007c74:	2002      	movs	r0, #2
}
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007c78:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8007c7a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007c7e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8007c82:	2001      	movs	r0, #1
}
 8007c84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007c86:	2001      	movs	r0, #1
}
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop

08007c8c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8007c8c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8007c8e:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop

08007c94 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8007c94:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8007c96:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop

08007c9c <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop

08007ca0 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007ca0:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007ca2:	2101      	movs	r1, #1
{
 8007ca4:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007ca6:	6803      	ldr	r3, [r0, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	f022 0201 	bic.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cb2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007cb8:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007cbc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007cbe:	f043 0304 	orr.w	r3, r3, #4
 8007cc2:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8007cc4:	f7f9 fd3a 	bl	800173c <HAL_JPEG_ErrorCallback>
}
 8007cc8:	bd08      	pop	{r3, pc}
 8007cca:	bf00      	nop

08007ccc <JPEG_MDMAInCpltCallback>:
{
 8007ccc:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007cce:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8007cd0:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8007cd4:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007cda:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007cde:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8007ce0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007ce2:	400b      	ands	r3, r1
 8007ce4:	2b0c      	cmp	r3, #12
 8007ce6:	d001      	beq.n	8007cec <JPEG_MDMAInCpltCallback+0x20>
}
 8007ce8:	b003      	add	sp, #12
 8007cea:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007cec:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007cee:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007cf0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007cf2:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007cf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007cf6:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007cfa:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007d00:	6a21      	ldr	r1, [r4, #32]
 8007d02:	f7f9 fce9 	bl	80016d8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8007d06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007d08:	42ab      	cmp	r3, r5
 8007d0a:	d311      	bcc.n	8007d30 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
 8007d0c:	b305      	cbz	r5, 8007d50 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007d0e:	fbb3 f2f5 	udiv	r2, r3, r5
 8007d12:	fb05 3212 	mls	r2, r5, r2, r3
 8007d16:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007d1a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007d1c:	04d1      	lsls	r1, r2, #19
 8007d1e:	d400      	bmi.n	8007d22 <JPEG_MDMAInCpltCallback+0x56>
 8007d20:	b963      	cbnz	r3, 8007d3c <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007d26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007d2a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8007d2c:	b003      	add	sp, #12
 8007d2e:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
 8007d30:	b1cb      	cbz	r3, 8007d66 <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8007d32:	0798      	lsls	r0, r3, #30
 8007d34:	d119      	bne.n	8007d6a <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007d36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d38:	04d2      	lsls	r2, r2, #19
 8007d3a:	d4f2      	bmi.n	8007d22 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	2501      	movs	r5, #1
 8007d40:	69a1      	ldr	r1, [r4, #24]
 8007d42:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007d44:	3240      	adds	r2, #64	@ 0x40
 8007d46:	9500      	str	r5, [sp, #0]
 8007d48:	f000 fe54 	bl	80089f4 <HAL_MDMA_Start_IT>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d0e8      	beq.n	8007d22 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007d50:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007d52:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
 8007d54:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007d56:	f043 0304 	orr.w	r3, r3, #4
 8007d5a:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007d5c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8007d60:	f7f9 fcec 	bl	800173c <HAL_JPEG_ErrorCallback>
        return;
 8007d64:	e7c0      	b.n	8007ce8 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007d66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007d68:	e7db      	b.n	8007d22 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	3304      	adds	r3, #4
 8007d70:	e7d2      	b.n	8007d18 <JPEG_MDMAInCpltCallback+0x4c>
 8007d72:	bf00      	nop

08007d74 <JPEG_DMA_PollResidualData>:
{
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007d76:	6802      	ldr	r2, [r0, #0]
 8007d78:	2610      	movs	r6, #16
{
 8007d7a:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007d7c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8007d7e:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8007d82:	d11d      	bne.n	8007dc0 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007d84:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007d86:	06df      	lsls	r7, r3, #27
 8007d88:	d51a      	bpl.n	8007dc0 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
 8007d8a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8007d8c:	69e7      	ldr	r7, [r4, #28]
 8007d8e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8007d90:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8007d92:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8007d94:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8007d96:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8007d98:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8007d9a:	69e2      	ldr	r2, [r4, #28]
 8007d9c:	443a      	add	r2, r7
 8007d9e:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8007da0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007da2:	69e2      	ldr	r2, [r4, #28]
 8007da4:	4402      	add	r2, r0
 8007da6:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8007da8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007daa:	69e2      	ldr	r2, [r4, #28]
 8007dac:	440a      	add	r2, r1
 8007dae:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8007db0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007db2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hjpeg->JpegOutCount += 4UL;
 8007db4:	3304      	adds	r3, #4
 8007db6:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007db8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d021      	beq.n	8007e02 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8007dbe:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8007dc0:	3e01      	subs	r6, #1
 8007dc2:	d1db      	bne.n	8007d7c <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 8007dc4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8007dc6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007dc8:	06d8      	lsls	r0, r3, #27
 8007dca:	d501      	bpl.n	8007dd0 <JPEG_DMA_PollResidualData+0x5c>
 8007dcc:	048b      	lsls	r3, r1, #18
 8007dce:	d417      	bmi.n	8007e00 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007dd0:	6813      	ldr	r3, [r2, #0]
 8007dd2:	f023 0301 	bic.w	r3, r3, #1
 8007dd6:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8007dd8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007dda:	b9eb      	cbnz	r3, 8007e18 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
 8007ddc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8007dde:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007de2:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007de4:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8007de8:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007dec:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007df0:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007df2:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007df4:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007df6:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007dfa:	d00a      	beq.n	8007e12 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007dfc:	f7ff ff4e 	bl	8007c9c <HAL_JPEG_EncodeCpltCallback>
}
 8007e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007e02:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007e04:	4620      	mov	r0, r4
 8007e06:	69e1      	ldr	r1, [r4, #28]
 8007e08:	f7f9 fc8a 	bl	8001720 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8007e0c:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
 8007e0e:	6265      	str	r5, [r4, #36]	@ 0x24
 8007e10:	e7d6      	b.n	8007dc0 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007e12:	f7f9 fc95 	bl	8001740 <HAL_JPEG_DecodeCpltCallback>
}
 8007e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007e18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	69e1      	ldr	r1, [r4, #28]
 8007e1e:	f7f9 fc7f 	bl	8001720 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e26:	e7d9      	b.n	8007ddc <JPEG_DMA_PollResidualData+0x68>

08007e28 <JPEG_MDMAOutCpltCallback>:
{
 8007e28:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007e2a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8007e2c:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8007e30:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e36:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8007e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e3e:	400a      	ands	r2, r1
 8007e40:	2a0c      	cmp	r2, #12
 8007e42:	d001      	beq.n	8007e48 <JPEG_MDMAOutCpltCallback+0x20>
}
 8007e44:	b003      	add	sp, #12
 8007e46:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8007e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e4a:	0692      	lsls	r2, r2, #26
 8007e4c:	d505      	bpl.n	8007e5a <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e50:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007e54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e56:	b003      	add	sp, #12
 8007e58:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007e5a:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007e5c:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007e5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e60:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007e62:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007e64:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007e6c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007e6e:	f7f9 fc57 	bl	8001720 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007e72:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007e74:	049b      	lsls	r3, r3, #18
 8007e76:	d501      	bpl.n	8007e7c <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	e7e8      	b.n	8007e4e <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007e7c:	6821      	ldr	r1, [r4, #0]
 8007e7e:	2501      	movs	r5, #1
 8007e80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e82:	69e2      	ldr	r2, [r4, #28]
 8007e84:	3144      	adds	r1, #68	@ 0x44
 8007e86:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007e88:	9500      	str	r5, [sp, #0]
 8007e8a:	f000 fdb3 	bl	80089f4 <HAL_MDMA_Start_IT>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d0f2      	beq.n	8007e78 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007e92:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007e94:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
 8007e96:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007e98:	f043 0304 	orr.w	r3, r3, #4
 8007e9c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007e9e:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8007ea2:	f7f9 fc4b 	bl	800173c <HAL_JPEG_ErrorCallback>
          return;
 8007ea6:	e7cd      	b.n	8007e44 <JPEG_MDMAOutCpltCallback+0x1c>

08007ea8 <JPEG_MDMAOutAbortCallback>:
{
 8007ea8:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007eaa:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8007eac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007eae:	041a      	lsls	r2, r3, #16
 8007eb0:	d400      	bmi.n	8007eb4 <JPEG_MDMAOutAbortCallback+0xc>
}
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007eb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eb6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007ec4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d025      	beq.n	8007f16 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007ece:	f015 0510 	ands.w	r5, r5, #16
 8007ed2:	d118      	bne.n	8007f06 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
 8007ed4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ed6:	bb4b      	cbnz	r3, 8007f2c <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007ed8:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8007eda:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007edc:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8007ee4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007ee6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ee8:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8007eec:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007ef0:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007ef4:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ef6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007ef8:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007efa:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007efe:	d012      	beq.n	8007f26 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007f00:	f7ff fecc 	bl	8007c9c <HAL_JPEG_EncodeCpltCallback>
}
 8007f04:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007f06:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007f08:	049b      	lsls	r3, r3, #18
 8007f0a:	d4d2      	bmi.n	8007eb2 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
 8007f0c:	4620      	mov	r0, r4
}
 8007f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8007f12:	f7ff bf2f 	b.w	8007d74 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007f16:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007f18:	4620      	mov	r0, r4
 8007f1a:	69e1      	ldr	r1, [r4, #28]
 8007f1c:	f7f9 fc00 	bl	8001720 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f24:	e7d1      	b.n	8007eca <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007f26:	f7f9 fc0b 	bl	8001740 <HAL_JPEG_DecodeCpltCallback>
}
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007f2c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007f2e:	4620      	mov	r0, r4
 8007f30:	69e1      	ldr	r1, [r4, #28]
 8007f32:	f7f9 fbf5 	bl	8001720 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007f36:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8007f38:	6265      	str	r5, [r4, #36]	@ 0x24
 8007f3a:	e7cd      	b.n	8007ed8 <JPEG_MDMAOutAbortCallback+0x30>

08007f3c <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007f3c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007f3e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007f40:	f002 0203 	and.w	r2, r2, #3
 8007f44:	2a02      	cmp	r2, #2
{
 8007f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4a:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007f4c:	d01e      	beq.n	8007f8c <JPEG_Process+0x50>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8007f4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f50:	04d7      	lsls	r7, r2, #19
 8007f52:	d407      	bmi.n	8007f64 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8007f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f56:	0796      	lsls	r6, r2, #30
 8007f58:	f100 811b 	bmi.w	8008192 <JPEG_Process+0x256>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8007f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f5e:	0750      	lsls	r0, r2, #29
 8007f60:	f100 81cc 	bmi.w	80082fc <JPEG_Process+0x3c0>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007f64:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8007f66:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8007f6a:	d107      	bne.n	8007f7c <JPEG_Process+0x40>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8007f6c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8007f6e:	f016 0608 	ands.w	r6, r6, #8
 8007f72:	d14a      	bne.n	800800a <JPEG_Process+0xce>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f76:	06d2      	lsls	r2, r2, #27
 8007f78:	f100 81fe 	bmi.w	8008378 <JPEG_Process+0x43c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8007f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f7e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8007f82:	2a20      	cmp	r2, #32
 8007f84:	d019      	beq.n	8007fba <JPEG_Process+0x7e>
  return JPEG_PROCESS_ONGOING;
 8007f86:	2000      	movs	r0, #0
}
 8007f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f8e:	0652      	lsls	r2, r2, #25
 8007f90:	d5dd      	bpl.n	8007f4e <JPEG_Process+0x12>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8007f92:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7ff fc33 	bl	8007800 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 8007f9a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8007fa0:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007fa2:	f7f9 fb97 	bl	80016d4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fae:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8007fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007fb8:	e7c9      	b.n	8007f4e <JPEG_Process+0x12>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	f022 0201 	bic.w	r2, r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007fc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fc4:	f002 020c 	and.w	r2, r2, #12
 8007fc8:	2a08      	cmp	r2, #8
 8007fca:	f000 8201 	beq.w	80083d0 <JPEG_Process+0x494>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007fce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fd0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8007fd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f040 81fe 	bne.w	80083da <JPEG_Process+0x49e>
    tmpContext = hjpeg->Context;
 8007fde:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8007fe0:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007fe2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007fe4:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007fe6:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8007fea:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007fee:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007ff2:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ff4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007ff6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007ff8:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ffc:	f000 81e5 	beq.w	80083ca <JPEG_Process+0x48e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008000:	f7ff fe4c 	bl	8007c9c <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8008004:	2001      	movs	r0, #1
}
 8008006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800800a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800800c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800800e:	3220      	adds	r2, #32
 8008010:	4296      	cmp	r6, r2
 8008012:	f0c0 8200 	bcc.w	8008416 <JPEG_Process+0x4da>
      dataword = hjpeg->Instance->DOR;
 8008016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008018:	69e1      	ldr	r1, [r4, #28]
 800801a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800801c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800801e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008020:	69e2      	ldr	r2, [r4, #28]
 8008022:	440a      	add	r2, r1
 8008024:	0a19      	lsrs	r1, r3, #8
 8008026:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008028:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800802a:	69e2      	ldr	r2, [r4, #28]
 800802c:	440a      	add	r2, r1
 800802e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008030:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008032:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008034:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008036:	69e2      	ldr	r2, [r4, #28]
 8008038:	440a      	add	r2, r1
 800803a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800803c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800803e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8008040:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008042:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8008044:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8008046:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008048:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800804a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800804c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800804e:	69e2      	ldr	r2, [r4, #28]
 8008050:	440a      	add	r2, r1
 8008052:	0a19      	lsrs	r1, r3, #8
 8008054:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008056:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008058:	69e2      	ldr	r2, [r4, #28]
 800805a:	440a      	add	r2, r1
 800805c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800805e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008060:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008062:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008064:	69e2      	ldr	r2, [r4, #28]
 8008066:	440a      	add	r2, r1
 8008068:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800806a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800806c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 800806e:	3304      	adds	r3, #4
 8008070:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8008072:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008074:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008076:	69e1      	ldr	r1, [r4, #28]
 8008078:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800807a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800807c:	69e2      	ldr	r2, [r4, #28]
 800807e:	440a      	add	r2, r1
 8008080:	0a19      	lsrs	r1, r3, #8
 8008082:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008084:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008086:	69e2      	ldr	r2, [r4, #28]
 8008088:	440a      	add	r2, r1
 800808a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800808c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800808e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008090:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008092:	69e2      	ldr	r2, [r4, #28]
 8008094:	440a      	add	r2, r1
 8008096:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008098:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800809a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 800809c:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800809e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80080a0:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80080a2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80080a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080a6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80080a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080aa:	69e2      	ldr	r2, [r4, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	0a19      	lsrs	r1, r3, #8
 80080b0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80080b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080b4:	69e2      	ldr	r2, [r4, #28]
 80080b6:	440a      	add	r2, r1
 80080b8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80080ba:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80080bc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80080be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080c0:	69e2      	ldr	r2, [r4, #28]
 80080c2:	440a      	add	r2, r1
 80080c4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80080c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80080c8:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80080ca:	3304      	adds	r3, #4
 80080cc:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80080ce:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80080d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080d2:	69e1      	ldr	r1, [r4, #28]
 80080d4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80080d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080d8:	69e2      	ldr	r2, [r4, #28]
 80080da:	440a      	add	r2, r1
 80080dc:	0a19      	lsrs	r1, r3, #8
 80080de:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80080e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080e2:	69e2      	ldr	r2, [r4, #28]
 80080e4:	440a      	add	r2, r1
 80080e6:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80080e8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80080ea:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80080ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080ee:	69e2      	ldr	r2, [r4, #28]
 80080f0:	440a      	add	r2, r1
 80080f2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80080f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80080f6:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80080f8:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80080fa:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80080fc:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80080fe:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008100:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008102:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008104:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008106:	69e2      	ldr	r2, [r4, #28]
 8008108:	440a      	add	r2, r1
 800810a:	0a19      	lsrs	r1, r3, #8
 800810c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800810e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008110:	69e2      	ldr	r2, [r4, #28]
 8008112:	440a      	add	r2, r1
 8008114:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008116:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008118:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800811a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800811c:	69e2      	ldr	r2, [r4, #28]
 800811e:	440a      	add	r2, r1
 8008120:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008122:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008124:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8008126:	3304      	adds	r3, #4
 8008128:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800812a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800812c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800812e:	69e1      	ldr	r1, [r4, #28]
 8008130:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008132:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008134:	69e2      	ldr	r2, [r4, #28]
 8008136:	440a      	add	r2, r1
 8008138:	0a19      	lsrs	r1, r3, #8
 800813a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800813c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800813e:	69e2      	ldr	r2, [r4, #28]
 8008140:	440a      	add	r2, r1
 8008142:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008144:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008146:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008148:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800814a:	69e2      	ldr	r2, [r4, #28]
 800814c:	440a      	add	r2, r1
 800814e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008150:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008152:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8008154:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008156:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8008158:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800815a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800815c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800815e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008160:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008162:	69e2      	ldr	r2, [r4, #28]
 8008164:	440a      	add	r2, r1
 8008166:	0a19      	lsrs	r1, r3, #8
 8008168:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800816a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800816c:	69e2      	ldr	r2, [r4, #28]
 800816e:	440a      	add	r2, r1
 8008170:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008172:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008174:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008176:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008178:	69e2      	ldr	r2, [r4, #28]
 800817a:	440a      	add	r2, r1
 800817c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800817e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008180:	3304      	adds	r3, #4
 8008182:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008184:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008186:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008188:	429a      	cmp	r2, r3
 800818a:	f000 8258 	beq.w	800863e <JPEG_Process+0x702>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	e6f4      	b.n	8007f7c <JPEG_Process+0x40>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008192:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008194:	2a00      	cmp	r2, #0
 8008196:	f000 8128 	beq.w	80083ea <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800819a:	6a21      	ldr	r1, [r4, #32]
 800819c:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800819e:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80081a0:	f240 81b9 	bls.w	8008516 <JPEG_Process+0x5da>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80081a4:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80081a6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80081a8:	04cd      	lsls	r5, r1, #19
 80081aa:	f53f aedb 	bmi.w	8007f64 <JPEG_Process+0x28>
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	f43f aed8 	beq.w	8007f64 <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 80081b4:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
 80081b6:	ea4f 0092 	mov.w	r0, r2, lsr #2
    if (nb_words >= nbRequestWords)
 80081ba:	f200 8248 	bhi.w	800864e <JPEG_Process+0x712>
      if (nb_words > 0UL)
 80081be:	2a03      	cmp	r2, #3
 80081c0:	f240 82c0 	bls.w	8008744 <JPEG_Process+0x808>
          input_count = hjpeg->JpegInCount;
 80081c4:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80081c6:	2801      	cmp	r0, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80081c8:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80081ca:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80081ce:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80081d0:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80081d2:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80081d4:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80081d8:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80081da:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80081de:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80081e2:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80081e6:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80081e8:	6a21      	ldr	r1, [r4, #32]
 80081ea:	f101 0104 	add.w	r1, r1, #4
 80081ee:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80081f0:	f43f aeb8 	beq.w	8007f64 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80081f4:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80081f6:	2802      	cmp	r0, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80081f8:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80081fc:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80081fe:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008200:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008202:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008206:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008208:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800820c:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008210:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008214:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008216:	6a21      	ldr	r1, [r4, #32]
 8008218:	f101 0104 	add.w	r1, r1, #4
 800821c:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800821e:	f43f aea1 	beq.w	8007f64 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8008222:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008224:	2803      	cmp	r0, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008226:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800822a:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800822c:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800822e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008230:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008234:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008236:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800823a:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800823e:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008242:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008244:	6a21      	ldr	r1, [r4, #32]
 8008246:	f101 0104 	add.w	r1, r1, #4
 800824a:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800824c:	f43f ae8a 	beq.w	8007f64 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8008250:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008252:	2804      	cmp	r0, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008254:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008258:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800825a:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800825c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800825e:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008262:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008264:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8008268:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800826c:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008270:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008272:	6a21      	ldr	r1, [r4, #32]
 8008274:	f101 0104 	add.w	r1, r1, #4
 8008278:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800827a:	f43f ae73 	beq.w	8007f64 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 800827e:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008280:	2805      	cmp	r0, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008282:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008286:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008288:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800828a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800828c:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008290:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008292:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8008296:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800829a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800829e:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80082a0:	6a21      	ldr	r1, [r4, #32]
 80082a2:	f101 0104 	add.w	r1, r1, #4
 80082a6:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80082a8:	f43f ae5c 	beq.w	8007f64 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80082ac:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80082ae:	2807      	cmp	r0, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082b0:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082b4:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082b6:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082b8:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082ba:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80082be:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082c0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80082c4:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082c8:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082cc:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80082ce:	6a21      	ldr	r1, [r4, #32]
 80082d0:	f101 0104 	add.w	r1, r1, #4
 80082d4:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80082d6:	f47f ae45 	bne.w	8007f64 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80082da:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082dc:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082de:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082e0:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80082e2:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082e4:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082e6:	7849      	ldrb	r1, [r1, #1]
 80082e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80082ec:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082ee:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80082f4:	6a22      	ldr	r2, [r4, #32]
 80082f6:	3204      	adds	r2, #4
 80082f8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80082fa:	e633      	b.n	8007f64 <JPEG_Process+0x28>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80082fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80082fe:	2a00      	cmp	r2, #0
 8008300:	d073      	beq.n	80083ea <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008302:	6a21      	ldr	r1, [r4, #32]
 8008304:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008306:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008308:	f200 8182 	bhi.w	8008610 <JPEG_Process+0x6d4>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800830c:	428a      	cmp	r2, r1
 800830e:	f040 8104 	bne.w	800851a <JPEG_Process+0x5de>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008312:	6a21      	ldr	r1, [r4, #32]
 8008314:	4620      	mov	r0, r4
 8008316:	f7f9 f9df 	bl	80016d8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800831a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800831c:	2a04      	cmp	r2, #4
 800831e:	d902      	bls.n	8008326 <JPEG_Process+0x3ea>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008320:	f022 0203 	bic.w	r2, r2, #3
 8008324:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008326:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008328:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 800832a:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800832c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800832e:	04c9      	lsls	r1, r1, #19
 8008330:	f53f ae18 	bmi.w	8007f64 <JPEG_Process+0x28>
 8008334:	2a00      	cmp	r2, #0
 8008336:	f43f ae15 	beq.w	8007f64 <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 800833a:	0891      	lsrs	r1, r2, #2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800833c:	69a0      	ldr	r0, [r4, #24]
    if (nb_words >= nbRequestWords)
 800833e:	f040 8177 	bne.w	8008630 <JPEG_Process+0x6f4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008342:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008344:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 8008346:	6a25      	ldr	r5, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008348:	5c41      	ldrb	r1, [r0, r1]
          hjpeg->JpegInCount++;
 800834a:	f105 0501 	add.w	r5, r5, #1
 800834e:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008350:	d010      	beq.n	8008374 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008352:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008354:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008356:	5d45      	ldrb	r5, [r0, r5]
 8008358:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
          hjpeg->JpegInCount++;
 800835c:	6a25      	ldr	r5, [r4, #32]
 800835e:	f105 0501 	add.w	r5, r5, #1
 8008362:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008364:	d106      	bne.n	8008374 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008366:	6a22      	ldr	r2, [r4, #32]
 8008368:	5c80      	ldrb	r0, [r0, r2]
          hjpeg->JpegInCount++;
 800836a:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800836c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8008370:	3201      	adds	r2, #1
 8008372:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 8008374:	6419      	str	r1, [r3, #64]	@ 0x40
 8008376:	e5f5      	b.n	8007f64 <JPEG_Process+0x28>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008378:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800837a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800837c:	3204      	adds	r2, #4
 800837e:	4295      	cmp	r5, r2
 8008380:	f0c0 80cd 	bcc.w	800851e <JPEG_Process+0x5e2>
      dataword = hjpeg->Instance->DOR;
 8008384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008386:	69e1      	ldr	r1, [r4, #28]
 8008388:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800838a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800838c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800838e:	69e2      	ldr	r2, [r4, #28]
 8008390:	440a      	add	r2, r1
 8008392:	0a19      	lsrs	r1, r3, #8
 8008394:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008396:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008398:	69e2      	ldr	r2, [r4, #28]
 800839a:	440a      	add	r2, r1
 800839c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800839e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80083a0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80083a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80083a4:	69e2      	ldr	r2, [r4, #28]
 80083a6:	440a      	add	r2, r1
 80083a8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80083aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80083ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      hjpeg->JpegOutCount += 4UL;
 80083ae:	3304      	adds	r3, #4
 80083b0:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80083b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083b4:	429a      	cmp	r2, r3
 80083b6:	f47f aeea 	bne.w	800818e <JPEG_Process+0x252>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083bc:	4620      	mov	r0, r4
 80083be:	69e1      	ldr	r1, [r4, #28]
 80083c0:	f7f9 f9ae 	bl	8001720 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80083c4:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80083c6:	6266      	str	r6, [r4, #36]	@ 0x24
 80083c8:	e5d8      	b.n	8007f7c <JPEG_Process+0x40>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80083ca:	f7f9 f9b9 	bl	8001740 <HAL_JPEG_DecodeCpltCallback>
 80083ce:	e619      	b.n	8008004 <JPEG_Process+0xc8>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80083d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083d2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80083d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80083d8:	e5f9      	b.n	8007fce <JPEG_Process+0x92>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083da:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083dc:	4620      	mov	r0, r4
 80083de:	69e1      	ldr	r1, [r4, #28]
 80083e0:	f7f9 f99e 	bl	8001720 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80083e8:	e5f9      	b.n	8007fde <JPEG_Process+0xa2>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80083ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083ec:	f002 020c 	and.w	r2, r2, #12
 80083f0:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80083f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80083f4:	f000 811e 	beq.w	8008634 <JPEG_Process+0x6f8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80083f8:	f002 020c 	and.w	r2, r2, #12
 80083fc:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80083fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008400:	f47f adb0 	bne.w	8007f64 <JPEG_Process+0x28>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008404:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008408:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800840a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800840c:	f022 0206 	bic.w	r2, r2, #6
 8008410:	631a      	str	r2, [r3, #48]	@ 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008412:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008414:	e5a6      	b.n	8007f64 <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008416:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008418:	4296      	cmp	r6, r2
 800841a:	f67f adaf 	bls.w	8007f7c <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800841e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008420:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
 8008422:	0880      	lsrs	r0, r0, #2
 8008424:	d020      	beq.n	8008468 <JPEG_Process+0x52c>
 8008426:	4629      	mov	r1, r5
 8008428:	e000      	b.n	800842c <JPEG_Process+0x4f0>
      dataword = hjpeg->Instance->DOR;
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 800842e:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008430:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008432:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8008434:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008436:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008438:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800843a:	69e2      	ldr	r2, [r4, #28]
 800843c:	4432      	add	r2, r6
 800843e:	ea4f 2613 	mov.w	r6, r3, lsr #8
 8008442:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008444:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008446:	69e2      	ldr	r2, [r4, #28]
 8008448:	4432      	add	r2, r6
 800844a:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800844e:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008452:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008454:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8008456:	69e2      	ldr	r2, [r4, #28]
 8008458:	4432      	add	r2, r6
 800845a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800845c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800845e:	f103 0304 	add.w	r3, r3, #4
 8008462:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008464:	d1e1      	bne.n	800842a <JPEG_Process+0x4ee>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008468:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800846a:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800846c:	429e      	cmp	r6, r3
 800846e:	f000 8161 	beq.w	8008734 <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008472:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8008476:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8008478:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
 800847c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800847e:	d00e      	beq.n	800849e <JPEG_Process+0x562>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008480:	f005 0303 	and.w	r3, r5, #3
 8008484:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008486:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008488:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 800848a:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800848c:	fa27 f303 	lsr.w	r3, r7, r3
 8008490:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8008492:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008494:	69e1      	ldr	r1, [r4, #28]
 8008496:	f103 0301 	add.w	r3, r3, #1
 800849a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800849c:	d1f0      	bne.n	8008480 <JPEG_Process+0x544>
      nb_bytes = 4UL - nb_bytes;
 800849e:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80084a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084a4:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
 80084a6:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80084aa:	f7f9 f939 	bl	8001720 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80084ae:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 80084b0:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
 80084b2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80084b4:	f63f ae6b 	bhi.w	800818e <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80084b8:	ea4f 02c6 	mov.w	r2, r6, lsl #3
 80084bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80084be:	69e0      	ldr	r0, [r4, #28]
 80084c0:	fa27 f502 	lsr.w	r5, r7, r2
 80084c4:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 80084c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80084c8:	f101 0101 	add.w	r1, r1, #1
 80084cc:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80084ce:	f43f ae5e 	beq.w	800818e <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80084d2:	f102 0108 	add.w	r1, r2, #8
 80084d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80084d8:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80084da:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80084dc:	fa27 f101 	lsr.w	r1, r7, r1
 80084e0:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 80084e2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80084e4:	f101 0101 	add.w	r1, r1, #1
 80084e8:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80084ea:	f43f ae50 	beq.w	800818e <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80084ee:	3210      	adds	r2, #16
 80084f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80084f2:	69e0      	ldr	r0, [r4, #28]
 80084f4:	fa27 f202 	lsr.w	r2, r7, r2
 80084f8:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80084fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084fc:	3201      	adds	r2, #1
 80084fe:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008500:	2e00      	cmp	r6, #0
 8008502:	f47f ae44 	bne.w	800818e <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008506:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008508:	0e3f      	lsrs	r7, r7, #24
 800850a:	69e2      	ldr	r2, [r4, #28]
 800850c:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
 800850e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008510:	3301      	adds	r3, #1
 8008512:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008514:	e63b      	b.n	800818e <JPEG_Process+0x252>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8008516:	428a      	cmp	r2, r1
 8008518:	d07c      	beq.n	8008614 <JPEG_Process+0x6d8>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800851a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800851c:	e522      	b.n	8007f64 <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800851e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008520:	4295      	cmp	r5, r2
 8008522:	f67f ad2b 	bls.w	8007f7c <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008526:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008528:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
 800852a:	0880      	lsrs	r0, r0, #2
 800852c:	d020      	beq.n	8008570 <JPEG_Process+0x634>
 800852e:	4631      	mov	r1, r6
 8008530:	e000      	b.n	8008534 <JPEG_Process+0x5f8>
      dataword = hjpeg->Instance->DOR;
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 8008536:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008538:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800853a:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800853c:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800853e:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008540:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008542:	69e2      	ldr	r2, [r4, #28]
 8008544:	442a      	add	r2, r5
 8008546:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800854a:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800854c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800854e:	69e2      	ldr	r2, [r4, #28]
 8008550:	442a      	add	r2, r5
 8008552:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008556:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800855a:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800855c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800855e:	69e2      	ldr	r2, [r4, #28]
 8008560:	442a      	add	r2, r5
 8008562:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008564:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008566:	f103 0304 	add.w	r3, r3, #4
 800856a:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800856c:	d1e1      	bne.n	8008532 <JPEG_Process+0x5f6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800856e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8008570:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008572:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008574:	429d      	cmp	r5, r3
 8008576:	f000 80dd 	beq.w	8008734 <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800857a:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800857e:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8008580:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
 8008584:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008586:	d00e      	beq.n	80085a6 <JPEG_Process+0x66a>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008588:	f006 0303 	and.w	r3, r6, #3
 800858c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800858e:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008590:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 8008592:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008594:	fa27 f303 	lsr.w	r3, r7, r3
 8008598:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 800859a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800859c:	69e1      	ldr	r1, [r4, #28]
 800859e:	f103 0301 	add.w	r3, r3, #1
 80085a2:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80085a4:	d1f0      	bne.n	8008588 <JPEG_Process+0x64c>
      nb_bytes = 4UL - nb_bytes;
 80085a6:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7f9 f8b7 	bl	8001720 <HAL_JPEG_DataReadyCallback>
      nb_bytes = 4UL - nb_bytes;
 80085b2:	eba8 0305 	sub.w	r3, r8, r5
      hjpeg->JpegOutCount = 0;
 80085b6:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 80085b8:	2b03      	cmp	r3, #3
      hjpeg->JpegOutCount = 0;
 80085ba:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80085bc:	f63f ade7 	bhi.w	800818e <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80085c0:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 80085c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80085c6:	69e0      	ldr	r0, [r4, #28]
 80085c8:	fa27 f502 	lsr.w	r5, r7, r2
 80085cc:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 80085ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80085d0:	f101 0101 	add.w	r1, r1, #1
 80085d4:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80085d6:	f43f adda 	beq.w	800818e <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80085da:	f102 0108 	add.w	r1, r2, #8
 80085de:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80085e0:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80085e2:	2b02      	cmp	r3, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80085e4:	fa27 f101 	lsr.w	r1, r7, r1
 80085e8:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 80085ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80085ec:	f101 0101 	add.w	r1, r1, #1
 80085f0:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80085f2:	f43f adcc 	beq.w	800818e <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80085f6:	3210      	adds	r2, #16
 80085f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80085fa:	69e0      	ldr	r0, [r4, #28]
 80085fc:	fa27 f202 	lsr.w	r2, r7, r2
 8008600:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8008602:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008604:	3201      	adds	r2, #1
 8008606:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008608:	2b00      	cmp	r3, #0
 800860a:	f43f af7c 	beq.w	8008506 <JPEG_Process+0x5ca>
 800860e:	e5be      	b.n	800818e <JPEG_Process+0x252>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008610:	1a52      	subs	r2, r2, r1
 8008612:	e68b      	b.n	800832c <JPEG_Process+0x3f0>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008614:	6a21      	ldr	r1, [r4, #32]
 8008616:	4620      	mov	r0, r4
 8008618:	f7f9 f85e 	bl	80016d8 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800861c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800861e:	2a04      	cmp	r2, #4
 8008620:	d902      	bls.n	8008628 <JPEG_Process+0x6ec>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008622:	f022 0203 	bic.w	r2, r2, #3
 8008626:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008628:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800862a:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 800862c:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800862e:	e5ba      	b.n	80081a6 <JPEG_Process+0x26a>
        input_count = hjpeg->JpegInCount;
 8008630:	6a22      	ldr	r2, [r4, #32]
 8008632:	e653      	b.n	80082dc <JPEG_Process+0x3a0>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008634:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008638:	6562      	str	r2, [r4, #84]	@ 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800863a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800863c:	e492      	b.n	8007f64 <JPEG_Process+0x28>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800863e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008640:	4620      	mov	r0, r4
 8008642:	69e1      	ldr	r1, [r4, #28]
 8008644:	f7f9 f86c 	bl	8001720 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008648:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 800864a:	6265      	str	r5, [r4, #36]	@ 0x24
 800864c:	e496      	b.n	8007f7c <JPEG_Process+0x40>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800864e:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
 8008650:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008652:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008654:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008656:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008658:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800865a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800865c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800865e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8008662:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008664:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008668:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800866a:	6a21      	ldr	r1, [r4, #32]
 800866c:	3104      	adds	r1, #4
 800866e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008670:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008672:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008674:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008676:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008678:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800867a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800867c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800867e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8008682:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008684:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008688:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800868a:	6a21      	ldr	r1, [r4, #32]
 800868c:	3104      	adds	r1, #4
 800868e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008690:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008692:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008694:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008696:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008698:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800869a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800869c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800869e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80086a2:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086a4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086a8:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80086aa:	6a21      	ldr	r1, [r4, #32]
 80086ac:	3104      	adds	r1, #4
 80086ae:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80086b0:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086b2:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086b4:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086b6:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086b8:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086ba:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80086bc:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086be:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80086c2:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086c4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086c8:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80086ca:	6a21      	ldr	r1, [r4, #32]
 80086cc:	3104      	adds	r1, #4
 80086ce:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80086d0:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086d2:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086d4:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086d6:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086d8:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086da:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80086dc:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086de:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80086e2:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086e4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086e8:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80086ea:	6a21      	ldr	r1, [r4, #32]
 80086ec:	3104      	adds	r1, #4
 80086ee:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80086f0:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086f2:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086f4:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086f6:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086f8:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086fa:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80086fc:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8008702:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008704:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008708:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800870a:	6a21      	ldr	r1, [r4, #32]
 800870c:	3104      	adds	r1, #4
 800870e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008710:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008712:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008714:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008716:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008718:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800871a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800871c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800871e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8008722:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008724:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008728:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800872a:	6a21      	ldr	r1, [r4, #32]
 800872c:	3104      	adds	r1, #4
 800872e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008730:	6a20      	ldr	r0, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008732:	e5d3      	b.n	80082dc <JPEG_Process+0x3a0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008734:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008736:	4620      	mov	r0, r4
 8008738:	f7f8 fff2 	bl	8001720 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800873c:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800873e:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8008740:	6262      	str	r2, [r4, #36]	@ 0x24
 8008742:	e41b      	b.n	8007f7c <JPEG_Process+0x40>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008744:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008746:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 8008748:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800874a:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
 800874c:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008750:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
 8008752:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008754:	f43f ae0e 	beq.w	8008374 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008758:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800875a:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800875c:	5c28      	ldrb	r0, [r5, r0]
 800875e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
 8008762:	6a20      	ldr	r0, [r4, #32]
 8008764:	f100 0001 	add.w	r0, r0, #1
 8008768:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800876a:	f47f ae03 	bne.w	8008374 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800876e:	6a22      	ldr	r2, [r4, #32]
 8008770:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
 8008772:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008774:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8008778:	3201      	adds	r2, #1
 800877a:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 800877c:	e5fa      	b.n	8008374 <JPEG_Process+0x438>
 800877e:	bf00      	nop

08008780 <HAL_JPEG_IRQHandler>:
{
 8008780:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 8008782:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8008786:	3b03      	subs	r3, #3
 8008788:	2b01      	cmp	r3, #1
 800878a:	d900      	bls.n	800878e <HAL_JPEG_IRQHandler+0xe>
}
 800878c:	bd38      	pop	{r3, r4, r5, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800878e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008790:	4604      	mov	r4, r0
 8008792:	f003 030c 	and.w	r3, r3, #12
 8008796:	2b08      	cmp	r3, #8
 8008798:	d050      	beq.n	800883c <HAL_JPEG_IRQHandler+0xbc>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800879a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800879c:	f003 030c 	and.w	r3, r3, #12
 80087a0:	2b0c      	cmp	r3, #12
 80087a2:	d1f3      	bne.n	800878c <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80087a4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80087a6:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80087a8:	f002 0203 	and.w	r2, r2, #3
 80087ac:	2a02      	cmp	r2, #2
 80087ae:	d049      	beq.n	8008844 <HAL_JPEG_IRQHandler+0xc4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80087b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087b2:	0692      	lsls	r2, r2, #26
 80087b4:	d5ea      	bpl.n	800878c <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80087b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80087b8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80087ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087be:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	f022 0201 	bic.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80087c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087ca:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80087ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80087d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80087d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80087d8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d054      	beq.n	800888a <HAL_JPEG_IRQHandler+0x10a>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80087e0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80087e2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d043      	beq.n	8008872 <HAL_JPEG_IRQHandler+0xf2>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80087ea:	6803      	ldr	r3, [r0, #0]
 80087ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80087f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d048      	beq.n	8008890 <HAL_JPEG_IRQHandler+0x110>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80087fe:	6822      	ldr	r2, [r4, #0]
 8008800:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8008802:	f015 0510 	ands.w	r5, r5, #16
 8008806:	d138      	bne.n	800887a <HAL_JPEG_IRQHandler+0xfa>
    if (hjpeg->JpegOutCount > 0UL)
 8008808:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800880a:	2b00      	cmp	r3, #0
 800880c:	d14b      	bne.n	80088a6 <HAL_JPEG_IRQHandler+0x126>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800880e:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8008810:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008812:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008814:	f023 0301 	bic.w	r3, r3, #1
 8008818:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800881a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800881c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800881e:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8008822:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008826:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800882a:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800882c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800882e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008830:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008834:	d034      	beq.n	80088a0 <HAL_JPEG_IRQHandler+0x120>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008836:	f7ff fa31 	bl	8007c9c <HAL_JPEG_EncodeCpltCallback>
}
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void) JPEG_Process(hjpeg);
 8008840:	f7ff bb7c 	b.w	8007f3c <JPEG_Process>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008846:	0651      	lsls	r1, r2, #25
 8008848:	d5b2      	bpl.n	80087b0 <HAL_JPEG_IRQHandler+0x30>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800884a:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 800884c:	4629      	mov	r1, r5
 800884e:	f7fe ffd7 	bl	8007800 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 8008852:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008854:	4629      	mov	r1, r5
 8008856:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008858:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800885a:	f7f8 ff3b 	bl	80016d4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008866:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800886a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800886e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008870:	e79e      	b.n	80087b0 <HAL_JPEG_IRQHandler+0x30>
}
 8008872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8008876:	f000 b92f 	b.w	8008ad8 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800887a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800887c:	049b      	lsls	r3, r3, #18
 800887e:	d485      	bmi.n	800878c <HAL_JPEG_IRQHandler+0xc>
    JPEG_DMA_PollResidualData(hjpeg);
 8008880:	4620      	mov	r0, r4
}
 8008882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8008886:	f7ff ba75 	b.w	8007d74 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800888a:	f000 f925 	bl	8008ad8 <HAL_MDMA_Abort_IT>
 800888e:	e7a7      	b.n	80087e0 <HAL_JPEG_IRQHandler+0x60>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008890:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008892:	4620      	mov	r0, r4
 8008894:	69e1      	ldr	r1, [r4, #28]
 8008896:	f7f8 ff43 	bl	8001720 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	6263      	str	r3, [r4, #36]	@ 0x24
 800889e:	e7ae      	b.n	80087fe <HAL_JPEG_IRQHandler+0x7e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80088a0:	f7f8 ff4e 	bl	8001740 <HAL_JPEG_DecodeCpltCallback>
}
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80088a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80088a8:	4620      	mov	r0, r4
 80088aa:	69e1      	ldr	r1, [r4, #28]
 80088ac:	f7f8 ff38 	bl	8001720 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80088b0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80088b2:	6265      	str	r5, [r4, #36]	@ 0x24
 80088b4:	e7ab      	b.n	800880e <HAL_JPEG_IRQHandler+0x8e>
 80088b6:	bf00      	nop

080088b8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80088bc:	f7fa fe18 	bl	80034f0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	d058      	beq.n	8008976 <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80088c4:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80088c6:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 80088c8:	2100      	movs	r1, #0
 80088ca:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80088cc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80088d0:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80088dc:	e005      	b.n	80088ea <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80088de:	f7fa fe07 	bl	80034f0 <HAL_GetTick>
 80088e2:	1b43      	subs	r3, r0, r5
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d841      	bhi.n	800896c <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	07d2      	lsls	r2, r2, #31
 80088ee:	d4f6      	bmi.n	80088de <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80088f0:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 80088f4:	69e0      	ldr	r0, [r4, #28]
 80088f6:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80088f8:	68e1      	ldr	r1, [r4, #12]
 80088fa:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80088fc:	4302      	orrs	r2, r0
 80088fe:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008900:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008902:	4302      	orrs	r2, r0
 8008904:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008906:	4302      	orrs	r2, r0
 8008908:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800890a:	4302      	orrs	r2, r0
 800890c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800890e:	4302      	orrs	r2, r0
 8008910:	68a0      	ldr	r0, [r4, #8]
 8008912:	4302      	orrs	r2, r0
 8008914:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008916:	3801      	subs	r0, #1
 8008918:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800891c:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800891e:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008920:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008924:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008926:	d103      	bne.n	8008930 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008928:	691a      	ldr	r2, [r3, #16]
 800892a:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800892e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008930:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008932:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008934:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 8008936:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008938:	db1f      	blt.n	800897a <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800893a:	b292      	uxth	r2, r2
 800893c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800893e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008940:	2a00      	cmp	r2, #0
 8008942:	db24      	blt.n	800898e <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008944:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008946:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800894a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800894e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008950:	d029      	beq.n	80089a6 <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008952:	b2c0      	uxtb	r0, r0
 8008954:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008956:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8008958:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800895a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 800895c:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800895e:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008960:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008962:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008966:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 800896a:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800896c:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800896e:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008970:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008972:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008976:	2001      	movs	r0, #1
}
 8008978:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800897a:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800897c:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800897e:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008982:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008984:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008986:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008988:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800898a:	2a00      	cmp	r2, #0
 800898c:	dada      	bge.n	8008944 <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800898e:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008990:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008992:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008996:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 800899a:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800899c:	6a19      	ldr	r1, [r3, #32]
 800899e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80089a2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80089a4:	d1d5      	bne.n	8008952 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 80089a6:	2200      	movs	r2, #0
 80089a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80089aa:	e7d4      	b.n	8008956 <HAL_MDMA_Init+0x9e>

080089ac <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80089ac:	b1f8      	cbz	r0, 80089ee <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 80089ae:	6802      	ldr	r2, [r0, #0]
 80089b0:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 80089b2:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 80089b4:	68d0      	ldr	r0, [r2, #12]
{
 80089b6:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 80089b8:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80089bc:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 80089be:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 80089c0:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 80089c2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80089c4:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80089c6:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80089c8:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80089ca:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80089cc:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80089ce:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80089d0:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80089d2:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80089d4:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80089d6:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80089d8:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 80089da:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 80089de:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 80089e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 80089e6:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 80089e8:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 80089ec:	4770      	bx	lr
    return HAL_ERROR;
 80089ee:	2001      	movs	r0, #1
}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop

080089f4 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d06b      	beq.n	8008ad0 <HAL_MDMA_Start_IT+0xdc>
{
 80089f8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
 80089fa:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 80089fe:	2c01      	cmp	r4, #1
 8008a00:	d009      	beq.n	8008a16 <HAL_MDMA_Start_IT+0x22>
 8008a02:	2401      	movs	r4, #1
 8008a04:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008a08:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 8008a0c:	2c01      	cmp	r4, #1
 8008a0e:	d005      	beq.n	8008a1c <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
 8008a10:	2300      	movs	r3, #0
 8008a12:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008a16:	2002      	movs	r0, #2
}
 8008a18:	bc70      	pop	{r4, r5, r6}
 8008a1a:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008a1c:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008a1e:	9e03      	ldr	r6, [sp, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008a20:	4d2c      	ldr	r5, [pc, #176]	@ (8008ad4 <HAL_MDMA_Start_IT+0xe0>)
 8008a22:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008a26:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008a2a:	2400      	movs	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008a2c:	f106 3cff 	add.w	ip, r6, #4294967295
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008a30:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008a34:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008a36:	6804      	ldr	r4, [r0, #0]
 8008a38:	68e6      	ldr	r6, [r4, #12]
 8008a3a:	f026 0601 	bic.w	r6, r6, #1
 8008a3e:	60e6      	str	r6, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008a40:	6966      	ldr	r6, [r4, #20]
 8008a42:	ea05 0506 	and.w	r5, r5, r6
 8008a46:	ea45 0503 	orr.w	r5, r5, r3
 8008a4a:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008a4c:	6963      	ldr	r3, [r4, #20]
 8008a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a52:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8008a56:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008a58:	f04f 031f 	mov.w	r3, #31
 8008a5c:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008a5e:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008a60:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008a62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a64:	bf0c      	ite	eq
 8008a66:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008a6a:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008a6e:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 8008a72:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008a74:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008a76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a78:	bf0c      	ite	eq
 8008a7a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008a7e:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8008a82:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008a84:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8008a86:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008a88:	68e3      	ldr	r3, [r4, #12]
 8008a8a:	f043 0306 	orr.w	r3, r3, #6
 8008a8e:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008a90:	b11a      	cbz	r2, 8008a9a <HAL_MDMA_Start_IT+0xa6>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	f043 0310 	orr.w	r3, r3, #16
 8008a98:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008a9a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008a9c:	b11b      	cbz	r3, 8008aa6 <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008a9e:	68e3      	ldr	r3, [r4, #12]
 8008aa0:	f043 0308 	orr.w	r3, r3, #8
 8008aa4:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008aa6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8008aa8:	b11b      	cbz	r3, 8008ab2 <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	f043 0320 	orr.w	r3, r3, #32
 8008ab0:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008ab2:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008ab4:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 8008ab6:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008aba:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 8008abe:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008ac0:	d103      	bne.n	8008aca <HAL_MDMA_Start_IT+0xd6>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008ac2:	68e3      	ldr	r3, [r4, #12]
 8008ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ac8:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8008aca:	2000      	movs	r0, #0
}
 8008acc:	bc70      	pop	{r4, r5, r6}
 8008ace:	4770      	bx	lr
    return HAL_ERROR;
 8008ad0:	2001      	movs	r0, #1
}
 8008ad2:	4770      	bx	lr
 8008ad4:	fffe0000 	.word	0xfffe0000

08008ad8 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008ad8:	4603      	mov	r3, r0
 8008ada:	b128      	cbz	r0, 8008ae8 <HAL_MDMA_Abort_IT+0x10>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008adc:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8008ae0:	2a02      	cmp	r2, #2
 8008ae2:	d003      	beq.n	8008aec <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008ae4:	2280      	movs	r2, #128	@ 0x80
 8008ae6:	6682      	str	r2, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008ae8:	2001      	movs	r0, #1
 8008aea:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008aec:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008aee:	2104      	movs	r1, #4
  return HAL_OK;
 8008af0:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008af2:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008af6:	68d3      	ldr	r3, [r2, #12]
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	60d3      	str	r3, [r2, #12]
}
 8008afe:	4770      	bx	lr

08008b00 <HAL_MDMA_IRQHandler>:
{
 8008b00:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 8008b02:	2300      	movs	r3, #0
{
 8008b04:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008b06:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 8008b0a:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8008b0c:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008b0e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b10:	4b57      	ldr	r3, [pc, #348]	@ (8008c70 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008b12:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008b14:	4a57      	ldr	r2, [pc, #348]	@ (8008c74 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b16:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	441a      	add	r2, r3
 8008b1c:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008b20:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008b24:	4202      	tst	r2, r0
 8008b26:	f000 80a0 	beq.w	8008c6a <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	07d1      	lsls	r1, r2, #31
 8008b2e:	d529      	bpl.n	8008b84 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	0792      	lsls	r2, r2, #30
 8008b34:	d526      	bpl.n	8008b84 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	f022 0202 	bic.w	r2, r2, #2
 8008b3c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008b3e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008b40:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008b42:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008b44:	bf54      	ite	pl
 8008b46:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008b4a:	f041 0102 	orrmi.w	r1, r1, #2
 8008b4e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008b50:	0591      	lsls	r1, r2, #22
 8008b52:	d503      	bpl.n	8008b5c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008b54:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b56:	f041 0104 	orr.w	r1, r1, #4
 8008b5a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008b5c:	05d0      	lsls	r0, r2, #23
 8008b5e:	d503      	bpl.n	8008b68 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008b60:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b62:	f041 0108 	orr.w	r1, r1, #8
 8008b66:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008b68:	0551      	lsls	r1, r2, #21
 8008b6a:	d503      	bpl.n	8008b74 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008b6c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b6e:	f041 0110 	orr.w	r1, r1, #16
 8008b72:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008b74:	0510      	lsls	r0, r2, #20
 8008b76:	d503      	bpl.n	8008b80 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008b78:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008b7a:	f042 0220 	orr.w	r2, r2, #32
 8008b7e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008b80:	2201      	movs	r2, #1
 8008b82:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	06d1      	lsls	r1, r2, #27
 8008b88:	d509      	bpl.n	8008b9e <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	0692      	lsls	r2, r2, #26
 8008b8e:	d506      	bpl.n	8008b9e <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008b90:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 8008b92:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008b94:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008b96:	b112      	cbz	r2, 8008b9e <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 8008b98:	4620      	mov	r0, r4
 8008b9a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	0710      	lsls	r0, r2, #28
 8008ba2:	d509      	bpl.n	8008bb8 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	06d1      	lsls	r1, r2, #27
 8008ba8:	d506      	bpl.n	8008bb8 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008baa:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 8008bac:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008bae:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008bb0:	b112      	cbz	r2, 8008bb8 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	0752      	lsls	r2, r2, #29
 8008bbc:	d509      	bpl.n	8008bd2 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	0710      	lsls	r0, r2, #28
 8008bc2:	d506      	bpl.n	8008bd2 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008bc4:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008bc6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008bc8:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008bca:	b112      	cbz	r2, 8008bd2 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	0791      	lsls	r1, r2, #30
 8008bd6:	d516      	bpl.n	8008c06 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	0752      	lsls	r2, r2, #29
 8008bdc:	d513      	bpl.n	8008c06 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008be4:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008be6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008bea:	2a04      	cmp	r2, #4
 8008bec:	d034      	beq.n	8008c58 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008bee:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 8008bf0:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008bf2:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008bf4:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 8008bf6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 8008bf8:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008bfc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008c00:	b10b      	cbz	r3, 8008c06 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 8008c02:	4620      	mov	r0, r4
 8008c04:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008c06:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d02e      	beq.n	8008c6a <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 8008c0c:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008c0e:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c10:	4b19      	ldr	r3, [pc, #100]	@ (8008c78 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008c12:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c16:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 8008c1a:	68cb      	ldr	r3, [r1, #12]
 8008c1c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c20:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 8008c22:	60cb      	str	r3, [r1, #12]
 8008c24:	e002      	b.n	8008c2c <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008c26:	68cb      	ldr	r3, [r1, #12]
 8008c28:	07d8      	lsls	r0, r3, #31
 8008c2a:	d504      	bpl.n	8008c36 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	4293      	cmp	r3, r2
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	d9f7      	bls.n	8008c26 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 8008c36:	2300      	movs	r3, #0
 8008c38:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008c3c:	68cb      	ldr	r3, [r1, #12]
 8008c3e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008c40:	bf4c      	ite	mi
 8008c42:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008c44:	2301      	movpl	r3, #1
 8008c46:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008c4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008c4c:	b16b      	cbz	r3, 8008c6a <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 8008c4e:	4620      	mov	r0, r4
}
 8008c50:	b003      	add	sp, #12
 8008c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008c56:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 8008c58:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 8008c5a:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 8008c5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 8008c5e:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008c62:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f1      	bne.n	8008c4e <HAL_MDMA_IRQHandler+0x14e>
}
 8008c6a:	b003      	add	sp, #12
 8008c6c:	bd30      	pop	{r4, r5, pc}
 8008c6e:	bf00      	nop
 8008c70:	2400000c 	.word	0x2400000c
 8008c74:	adffffc0 	.word	0xadffffc0
 8008c78:	1b4e81b5 	.word	0x1b4e81b5

08008c7c <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008c7c:	4a10      	ldr	r2, [pc, #64]	@ (8008cc0 <HAL_PWR_EnterSTOPMode+0x44>)
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	f023 0301 	bic.w	r3, r3, #1
 8008c84:	4303      	orrs	r3, r0
{
 8008c86:	b410      	push	{r4}
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008c88:	6013      	str	r3, [r2, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008c8a:	6913      	ldr	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8008cc4 <HAL_PWR_EnterSTOPMode+0x48>)
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008c8e:	f023 0305 	bic.w	r3, r3, #5
 8008c92:	6113      	str	r3, [r2, #16]
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	f043 0304 	orr.w	r3, r3, #4
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008ca0:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008ca4:	2901      	cmp	r1, #1
 8008ca6:	d008      	beq.n	8008cba <HAL_PWR_EnterSTOPMode+0x3e>
    __WFI ();
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008ca8:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008caa:	4a06      	ldr	r2, [pc, #24]	@ (8008cc4 <HAL_PWR_EnterSTOPMode+0x48>)
}
 8008cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008cb0:	6913      	ldr	r3, [r2, #16]
 8008cb2:	f023 0304 	bic.w	r3, r3, #4
 8008cb6:	6113      	str	r3, [r2, #16]
}
 8008cb8:	4770      	bx	lr
    __WFI ();
 8008cba:	bf30      	wfi
 8008cbc:	e7f5      	b.n	8008caa <HAL_PWR_EnterSTOPMode+0x2e>
 8008cbe:	bf00      	nop
 8008cc0:	58024800 	.word	0x58024800
 8008cc4:	e000ed00 	.word	0xe000ed00

08008cc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008cc8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008cca:	4c10      	ldr	r4, [pc, #64]	@ (8008d0c <HAL_PWREx_ConfigSupply+0x44>)
 8008ccc:	68e3      	ldr	r3, [r4, #12]
 8008cce:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008cd2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008cd4:	d105      	bne.n	8008ce2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	1a18      	subs	r0, r3, r0
 8008cdc:	bf18      	it	ne
 8008cde:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008ce2:	f023 0307 	bic.w	r3, r3, #7
 8008ce6:	4303      	orrs	r3, r0
 8008ce8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8008cea:	f7fa fc01 	bl	80034f0 <HAL_GetTick>
 8008cee:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cf0:	e005      	b.n	8008cfe <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cf2:	f7fa fbfd 	bl	80034f0 <HAL_GetTick>
 8008cf6:	1b40      	subs	r0, r0, r5
 8008cf8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008cfc:	d804      	bhi.n	8008d08 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cfe:	6863      	ldr	r3, [r4, #4]
 8008d00:	049b      	lsls	r3, r3, #18
 8008d02:	d5f6      	bpl.n	8008cf2 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8008d04:	2000      	movs	r0, #0
}
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008d08:	2001      	movs	r0, #1
}
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	58024800 	.word	0x58024800

08008d10 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d10:	4b33      	ldr	r3, [pc, #204]	@ (8008de0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8008d12:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d14:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d16:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d18:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8008d1a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d20:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8008d24:	d036      	beq.n	8008d94 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d26:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d2a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d2e:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d32:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d36:	fb05 f202 	mul.w	r2, r5, r2
 8008d3a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d40:	ee06 2a90 	vmov	s13, r2
 8008d44:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8008d48:	d002      	beq.n	8008d50 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8008d4a:	2902      	cmp	r1, #2
 8008d4c:	d042      	beq.n	8008dd4 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8008d4e:	b319      	cbz	r1, 8008d98 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d50:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8008de4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8008d54:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8008d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8008d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008d72:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008d76:	4b1a      	ldr	r3, [pc, #104]	@ (8008de0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008d7e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008d80:	ee07 3a10 	vmov	s14, r3
 8008d84:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008d8c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008d90:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8008d94:	bc30      	pop	{r4, r5}
 8008d96:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	0692      	lsls	r2, r2, #26
 8008d9c:	d51d      	bpl.n	8008dda <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d9e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da4:	4a10      	ldr	r2, [pc, #64]	@ (8008de8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008da8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008db0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	ee06 2a10 	vmov	s12, r2
 8008dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dbe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008dc2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8008dc6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8008dca:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8008dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dd2:	e7d0      	b.n	8008d76 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dd4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008dec <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8008dd8:	e7bc      	b.n	8008d54 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dda:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008df0 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8008dde:	e7b9      	b.n	8008d54 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8008de0:	58024400 	.word	0x58024400
 8008de4:	4a742400 	.word	0x4a742400
 8008de8:	03d09000 	.word	0x03d09000
 8008dec:	4bbebc20 	.word	0x4bbebc20
 8008df0:	4c742400 	.word	0x4c742400

08008df4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f000 82dc 	beq.w	80093b2 <HAL_RCC_OscConfig+0x5be>
{
 8008dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dfc:	6803      	ldr	r3, [r0, #0]
 8008dfe:	4604      	mov	r4, r0
 8008e00:	07d9      	lsls	r1, r3, #31
 8008e02:	d53b      	bpl.n	8008e7c <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e04:	499e      	ldr	r1, [pc, #632]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008e06:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e0a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e0e:	2a10      	cmp	r2, #16
 8008e10:	f000 80e4 	beq.w	8008fdc <HAL_RCC_OscConfig+0x1e8>
 8008e14:	2a18      	cmp	r2, #24
 8008e16:	f000 80dc 	beq.w	8008fd2 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e20:	d018      	beq.n	8008e54 <HAL_RCC_OscConfig+0x60>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 8154 	beq.w	80090d0 <HAL_RCC_OscConfig+0x2dc>
 8008e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e2c:	f000 8270 	beq.w	8009310 <HAL_RCC_OscConfig+0x51c>
 8008e30:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008e34:	4b92      	ldr	r3, [pc, #584]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	f000 8211 	beq.w	800925e <HAL_RCC_OscConfig+0x46a>
 8008e3c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008e50:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e52:	e004      	b.n	8008e5e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e54:	4a8a      	ldr	r2, [pc, #552]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008e56:	6813      	ldr	r3, [r2, #0]
 8008e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e5c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008e5e:	f7fa fb47 	bl	80034f0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e62:	4e87      	ldr	r6, [pc, #540]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8008e64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e66:	e005      	b.n	8008e74 <HAL_RCC_OscConfig+0x80>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e68:	f7fa fb42 	bl	80034f0 <HAL_GetTick>
 8008e6c:	1b40      	subs	r0, r0, r5
 8008e6e:	2864      	cmp	r0, #100	@ 0x64
 8008e70:	f200 812c 	bhi.w	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e74:	6833      	ldr	r3, [r6, #0]
 8008e76:	039b      	lsls	r3, r3, #14
 8008e78:	d5f6      	bpl.n	8008e68 <HAL_RCC_OscConfig+0x74>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	079d      	lsls	r5, r3, #30
 8008e7e:	d464      	bmi.n	8008f4a <HAL_RCC_OscConfig+0x156>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e80:	06d9      	lsls	r1, r3, #27
 8008e82:	d528      	bpl.n	8008ed6 <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e84:	497e      	ldr	r1, [pc, #504]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008e86:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e88:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e8a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e8e:	2a08      	cmp	r2, #8
 8008e90:	f000 80b4 	beq.w	8008ffc <HAL_RCC_OscConfig+0x208>
 8008e94:	2a18      	cmp	r2, #24
 8008e96:	f000 80ac 	beq.w	8008ff2 <HAL_RCC_OscConfig+0x1fe>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e9a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8008e9c:	4d78      	ldr	r5, [pc, #480]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 8152 	beq.w	8009148 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eaa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008eac:	f7fa fb20 	bl	80034f0 <HAL_GetTick>
 8008eb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008eb2:	e005      	b.n	8008ec0 <HAL_RCC_OscConfig+0xcc>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008eb4:	f7fa fb1c 	bl	80034f0 <HAL_GetTick>
 8008eb8:	1b80      	subs	r0, r0, r6
 8008eba:	2802      	cmp	r0, #2
 8008ebc:	f200 8106 	bhi.w	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	05db      	lsls	r3, r3, #23
 8008ec4:	d5f6      	bpl.n	8008eb4 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ec6:	68eb      	ldr	r3, [r5, #12]
 8008ec8:	6a22      	ldr	r2, [r4, #32]
 8008eca:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008ece:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008ed2:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	071d      	lsls	r5, r3, #28
 8008ed8:	d516      	bpl.n	8008f08 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008eda:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8008edc:	4d68      	ldr	r5, [pc, #416]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 8110 	beq.w	8009104 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8008ee4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8008eec:	f7fa fb00 	bl	80034f0 <HAL_GetTick>
 8008ef0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ef2:	e005      	b.n	8008f00 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ef4:	f7fa fafc 	bl	80034f0 <HAL_GetTick>
 8008ef8:	1b80      	subs	r0, r0, r6
 8008efa:	2802      	cmp	r0, #2
 8008efc:	f200 80e6 	bhi.w	80090cc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f00:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8008f02:	0798      	lsls	r0, r3, #30
 8008f04:	d5f6      	bpl.n	8008ef4 <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	069a      	lsls	r2, r3, #26
 8008f0a:	d516      	bpl.n	8008f3a <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f0c:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8008f0e:	4d5c      	ldr	r5, [pc, #368]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 8108 	beq.w	8009126 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 8008f16:	682b      	ldr	r3, [r5, #0]
 8008f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008f1c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008f1e:	f7fa fae7 	bl	80034f0 <HAL_GetTick>
 8008f22:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f24:	e005      	b.n	8008f32 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f26:	f7fa fae3 	bl	80034f0 <HAL_GetTick>
 8008f2a:	1b80      	subs	r0, r0, r6
 8008f2c:	2802      	cmp	r0, #2
 8008f2e:	f200 80cd 	bhi.w	80090cc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f32:	682b      	ldr	r3, [r5, #0]
 8008f34:	049f      	lsls	r7, r3, #18
 8008f36:	d5f6      	bpl.n	8008f26 <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	0759      	lsls	r1, r3, #29
 8008f3c:	d46e      	bmi.n	800901c <HAL_RCC_OscConfig+0x228>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 80aa 	bne.w	800909a <HAL_RCC_OscConfig+0x2a6>
  return HAL_OK;
 8008f46:	2000      	movs	r0, #0
}
 8008f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f4a:	4a4d      	ldr	r2, [pc, #308]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008f4c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f4e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f50:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8008f54:	d122      	bne.n	8008f9c <HAL_RCC_OscConfig+0x1a8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f56:	4b4a      	ldr	r3, [pc, #296]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f58:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	0759      	lsls	r1, r3, #29
 8008f5e:	d501      	bpl.n	8008f64 <HAL_RCC_OscConfig+0x170>
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	d044      	beq.n	8008fee <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f64:	4d46      	ldr	r5, [pc, #280]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	f023 0319 	bic.w	r3, r3, #25
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008f70:	f7fa fabe 	bl	80034f0 <HAL_GetTick>
 8008f74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f76:	e005      	b.n	8008f84 <HAL_RCC_OscConfig+0x190>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f78:	f7fa faba 	bl	80034f0 <HAL_GetTick>
 8008f7c:	1b80      	subs	r0, r0, r6
 8008f7e:	2802      	cmp	r0, #2
 8008f80:	f200 80a4 	bhi.w	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	075b      	lsls	r3, r3, #29
 8008f88:	d5f6      	bpl.n	8008f78 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f8a:	686b      	ldr	r3, [r5, #4]
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008f92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f96:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	e771      	b.n	8008e80 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f9c:	2b18      	cmp	r3, #24
 8008f9e:	f000 80f6 	beq.w	800918e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fa2:	4d37      	ldr	r5, [pc, #220]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fa4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fa6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	f000 80df 	beq.w	800916c <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fae:	f023 0319 	bic.w	r3, r3, #25
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008fb6:	f7fa fa9b 	bl	80034f0 <HAL_GetTick>
 8008fba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fbc:	e005      	b.n	8008fca <HAL_RCC_OscConfig+0x1d6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fbe:	f7fa fa97 	bl	80034f0 <HAL_GetTick>
 8008fc2:	1b80      	subs	r0, r0, r6
 8008fc4:	2802      	cmp	r0, #2
 8008fc6:	f200 8081 	bhi.w	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	075f      	lsls	r7, r3, #29
 8008fce:	d5f6      	bpl.n	8008fbe <HAL_RCC_OscConfig+0x1ca>
 8008fd0:	e7db      	b.n	8008f8a <HAL_RCC_OscConfig+0x196>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008fd2:	f001 0103 	and.w	r1, r1, #3
 8008fd6:	2902      	cmp	r1, #2
 8008fd8:	f47f af1f 	bne.w	8008e1a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fdc:	4a28      	ldr	r2, [pc, #160]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	0392      	lsls	r2, r2, #14
 8008fe2:	f57f af4b 	bpl.w	8008e7c <HAL_RCC_OscConfig+0x88>
 8008fe6:	6862      	ldr	r2, [r4, #4]
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	f47f af47 	bne.w	8008e7c <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8008fee:	2001      	movs	r0, #1
}
 8008ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ff2:	f001 0103 	and.w	r1, r1, #3
 8008ff6:	2901      	cmp	r1, #1
 8008ff8:	f47f af4f 	bne.w	8008e9a <HAL_RCC_OscConfig+0xa6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ffc:	4a20      	ldr	r2, [pc, #128]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	05d2      	lsls	r2, r2, #23
 8009002:	d502      	bpl.n	800900a <HAL_RCC_OscConfig+0x216>
 8009004:	69e2      	ldr	r2, [r4, #28]
 8009006:	2a80      	cmp	r2, #128	@ 0x80
 8009008:	d1f1      	bne.n	8008fee <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800900a:	491d      	ldr	r1, [pc, #116]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 800900c:	6a20      	ldr	r0, [r4, #32]
 800900e:	68ca      	ldr	r2, [r1, #12]
 8009010:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8009014:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8009018:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800901a:	e75c      	b.n	8008ed6 <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 800901c:	4d19      	ldr	r5, [pc, #100]	@ (8009084 <HAL_RCC_OscConfig+0x290>)
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009024:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009026:	f7fa fa63 	bl	80034f0 <HAL_GetTick>
 800902a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800902c:	e004      	b.n	8009038 <HAL_RCC_OscConfig+0x244>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800902e:	f7fa fa5f 	bl	80034f0 <HAL_GetTick>
 8009032:	1b80      	subs	r0, r0, r6
 8009034:	2864      	cmp	r0, #100	@ 0x64
 8009036:	d849      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	05da      	lsls	r2, r3, #23
 800903c:	d5f7      	bpl.n	800902e <HAL_RCC_OscConfig+0x23a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	2b01      	cmp	r3, #1
 8009042:	f000 8196 	beq.w	8009372 <HAL_RCC_OscConfig+0x57e>
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8176 	beq.w	8009338 <HAL_RCC_OscConfig+0x544>
 800904c:	2b05      	cmp	r3, #5
 800904e:	f000 8196 	beq.w	800937e <HAL_RCC_OscConfig+0x58a>
 8009052:	2b85      	cmp	r3, #133	@ 0x85
 8009054:	4b0a      	ldr	r3, [pc, #40]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
 8009056:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009058:	f000 819f 	beq.w	800939a <HAL_RCC_OscConfig+0x5a6>
 800905c:	f022 0201 	bic.w	r2, r2, #1
 8009060:	671a      	str	r2, [r3, #112]	@ 0x70
 8009062:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009064:	f022 0204 	bic.w	r2, r2, #4
 8009068:	671a      	str	r2, [r3, #112]	@ 0x70
 800906a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800906c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009070:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8009072:	f7fa fa3d 	bl	80034f0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009076:	4e02      	ldr	r6, [pc, #8]	@ (8009080 <HAL_RCC_OscConfig+0x28c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009078:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800907c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800907e:	e008      	b.n	8009092 <HAL_RCC_OscConfig+0x29e>
 8009080:	58024400 	.word	0x58024400
 8009084:	58024800 	.word	0x58024800
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009088:	f7fa fa32 	bl	80034f0 <HAL_GetTick>
 800908c:	1b40      	subs	r0, r0, r5
 800908e:	42b8      	cmp	r0, r7
 8009090:	d81c      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009092:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8009094:	079b      	lsls	r3, r3, #30
 8009096:	d5f7      	bpl.n	8009088 <HAL_RCC_OscConfig+0x294>
 8009098:	e751      	b.n	8008f3e <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800909a:	4da4      	ldr	r5, [pc, #656]	@ (800932c <HAL_RCC_OscConfig+0x538>)
 800909c:	692a      	ldr	r2, [r5, #16]
 800909e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80090a2:	2a18      	cmp	r2, #24
 80090a4:	f000 80e7 	beq.w	8009276 <HAL_RCC_OscConfig+0x482>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090a8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80090aa:	682b      	ldr	r3, [r5, #0]
 80090ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090b0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090b2:	d070      	beq.n	8009196 <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 80090b4:	f7fa fa1c 	bl	80034f0 <HAL_GetTick>
 80090b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090ba:	682b      	ldr	r3, [r5, #0]
 80090bc:	019b      	lsls	r3, r3, #6
 80090be:	f57f af42 	bpl.w	8008f46 <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090c2:	f7fa fa15 	bl	80034f0 <HAL_GetTick>
 80090c6:	1b00      	subs	r0, r0, r4
 80090c8:	2802      	cmp	r0, #2
 80090ca:	d9f6      	bls.n	80090ba <HAL_RCC_OscConfig+0x2c6>
            return HAL_TIMEOUT;
 80090cc:	2003      	movs	r0, #3
}
 80090ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090d0:	4d96      	ldr	r5, [pc, #600]	@ (800932c <HAL_RCC_OscConfig+0x538>)
 80090d2:	682b      	ldr	r3, [r5, #0]
 80090d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	682b      	ldr	r3, [r5, #0]
 80090dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80090ea:	f7fa fa01 	bl	80034f0 <HAL_GetTick>
 80090ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090f0:	e004      	b.n	80090fc <HAL_RCC_OscConfig+0x308>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090f2:	f7fa f9fd 	bl	80034f0 <HAL_GetTick>
 80090f6:	1b80      	subs	r0, r0, r6
 80090f8:	2864      	cmp	r0, #100	@ 0x64
 80090fa:	d8e7      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	039f      	lsls	r7, r3, #14
 8009100:	d4f7      	bmi.n	80090f2 <HAL_RCC_OscConfig+0x2fe>
 8009102:	e6ba      	b.n	8008e7a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8009104:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800910c:	f7fa f9f0 	bl	80034f0 <HAL_GetTick>
 8009110:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009112:	e004      	b.n	800911e <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009114:	f7fa f9ec 	bl	80034f0 <HAL_GetTick>
 8009118:	1b80      	subs	r0, r0, r6
 800911a:	2802      	cmp	r0, #2
 800911c:	d8d6      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800911e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009120:	0799      	lsls	r1, r3, #30
 8009122:	d4f7      	bmi.n	8009114 <HAL_RCC_OscConfig+0x320>
 8009124:	e6ef      	b.n	8008f06 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 8009126:	682b      	ldr	r3, [r5, #0]
 8009128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800912c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800912e:	f7fa f9df 	bl	80034f0 <HAL_GetTick>
 8009132:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009134:	e004      	b.n	8009140 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009136:	f7fa f9db 	bl	80034f0 <HAL_GetTick>
 800913a:	1b80      	subs	r0, r0, r6
 800913c:	2802      	cmp	r0, #2
 800913e:	d8c5      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	0498      	lsls	r0, r3, #18
 8009144:	d4f7      	bmi.n	8009136 <HAL_RCC_OscConfig+0x342>
 8009146:	e6f7      	b.n	8008f38 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800914e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009150:	f7fa f9ce 	bl	80034f0 <HAL_GetTick>
 8009154:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009156:	e004      	b.n	8009162 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009158:	f7fa f9ca 	bl	80034f0 <HAL_GetTick>
 800915c:	1b80      	subs	r0, r0, r6
 800915e:	2802      	cmp	r0, #2
 8009160:	d8b4      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	05df      	lsls	r7, r3, #23
 8009166:	d4f7      	bmi.n	8009158 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	e6b4      	b.n	8008ed6 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800916c:	f023 0301 	bic.w	r3, r3, #1
 8009170:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009172:	f7fa f9bd 	bl	80034f0 <HAL_GetTick>
 8009176:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009178:	e004      	b.n	8009184 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800917a:	f7fa f9b9 	bl	80034f0 <HAL_GetTick>
 800917e:	1b80      	subs	r0, r0, r6
 8009180:	2802      	cmp	r0, #2
 8009182:	d8a3      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	0758      	lsls	r0, r3, #29
 8009188:	d4f7      	bmi.n	800917a <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	e678      	b.n	8008e80 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800918e:	0790      	lsls	r0, r2, #30
 8009190:	f47f af07 	bne.w	8008fa2 <HAL_RCC_OscConfig+0x1ae>
 8009194:	e6df      	b.n	8008f56 <HAL_RCC_OscConfig+0x162>
        tickstart = HAL_GetTick();
 8009196:	f7fa f9ab 	bl	80034f0 <HAL_GetTick>
 800919a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800919c:	e004      	b.n	80091a8 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800919e:	f7fa f9a7 	bl	80034f0 <HAL_GetTick>
 80091a2:	1b80      	subs	r0, r0, r6
 80091a4:	2802      	cmp	r0, #2
 80091a6:	d891      	bhi.n	80090cc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	0199      	lsls	r1, r3, #6
 80091ac:	d4f7      	bmi.n	800919e <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091ae:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80091b0:	4b5f      	ldr	r3, [pc, #380]	@ (8009330 <HAL_RCC_OscConfig+0x53c>)
 80091b2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80091b4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091b6:	495f      	ldr	r1, [pc, #380]	@ (8009334 <HAL_RCC_OscConfig+0x540>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091b8:	4e5c      	ldr	r6, [pc, #368]	@ (800932c <HAL_RCC_OscConfig+0x538>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091ba:	4313      	orrs	r3, r2
 80091bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80091be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80091c2:	62ab      	str	r3, [r5, #40]	@ 0x28
 80091c4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80091c8:	3b01      	subs	r3, #1
 80091ca:	3a01      	subs	r2, #1
 80091cc:	025b      	lsls	r3, r3, #9
 80091ce:	0412      	lsls	r2, r2, #16
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80091d6:	4313      	orrs	r3, r2
 80091d8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80091da:	3a01      	subs	r2, #1
 80091dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091e0:	4313      	orrs	r3, r2
 80091e2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80091e4:	3a01      	subs	r2, #1
 80091e6:	0612      	lsls	r2, r2, #24
 80091e8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80091ec:	4313      	orrs	r3, r2
 80091ee:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80091f0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80091f2:	f023 0301 	bic.w	r3, r3, #1
 80091f6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091f8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80091fa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80091fc:	4011      	ands	r1, r2
 80091fe:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8009202:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009204:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009206:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009208:	f023 030c 	bic.w	r3, r3, #12
 800920c:	4313      	orrs	r3, r2
 800920e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009210:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009212:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009214:	f023 0302 	bic.w	r3, r3, #2
 8009218:	4313      	orrs	r3, r2
 800921a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800921c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800921e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009222:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009224:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800922a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800922c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800922e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009232:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009234:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009242:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009244:	f7fa f954 	bl	80034f0 <HAL_GetTick>
 8009248:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800924a:	6833      	ldr	r3, [r6, #0]
 800924c:	019a      	lsls	r2, r3, #6
 800924e:	f53f ae7a 	bmi.w	8008f46 <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009252:	f7fa f94d 	bl	80034f0 <HAL_GetTick>
 8009256:	1b00      	subs	r0, r0, r4
 8009258:	2802      	cmp	r0, #2
 800925a:	d9f6      	bls.n	800924a <HAL_RCC_OscConfig+0x456>
 800925c:	e736      	b.n	80090cc <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800925e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009272:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009274:	e5f3      	b.n	8008e5e <HAL_RCC_OscConfig+0x6a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009276:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009278:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800927a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800927c:	f43f aeb7 	beq.w	8008fee <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009280:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009284:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009286:	428b      	cmp	r3, r1
 8009288:	f47f aeb1 	bne.w	8008fee <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800928c:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009290:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009292:	429a      	cmp	r2, r3
 8009294:	f47f aeab 	bne.w	8008fee <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009298:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800929a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800929e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092a0:	429a      	cmp	r2, r3
 80092a2:	f47f aea4 	bne.w	8008fee <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092a8:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80092ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092ae:	429a      	cmp	r2, r3
 80092b0:	f47f ae9d 	bne.w	8008fee <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80092b6:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80092ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092bc:	429a      	cmp	r2, r3
 80092be:	f47f ae96 	bne.w	8008fee <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80092c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80092c4:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80092c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092ca:	4298      	cmp	r0, r3
 80092cc:	f47f ae8f 	bne.w	8008fee <HAL_RCC_OscConfig+0x1fa>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80092d0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80092d2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80092d4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80092d8:	429a      	cmp	r2, r3
 80092da:	f43f ae34 	beq.w	8008f46 <HAL_RCC_OscConfig+0x152>
          __HAL_RCC_PLLFRACN_DISABLE();
 80092de:	4a13      	ldr	r2, [pc, #76]	@ (800932c <HAL_RCC_OscConfig+0x538>)
 80092e0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80092e2:	f023 0301 	bic.w	r3, r3, #1
 80092e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80092e8:	f7fa f902 	bl	80034f0 <HAL_GetTick>
 80092ec:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80092ee:	f7fa f8ff 	bl	80034f0 <HAL_GetTick>
 80092f2:	42a8      	cmp	r0, r5
 80092f4:	d0fb      	beq.n	80092ee <HAL_RCC_OscConfig+0x4fa>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092f6:	4a0d      	ldr	r2, [pc, #52]	@ (800932c <HAL_RCC_OscConfig+0x538>)
 80092f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009334 <HAL_RCC_OscConfig+0x540>)
 80092fa:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80092fc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80092fe:	4003      	ands	r3, r0
 8009300:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009304:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009306:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009308:	f043 0301 	orr.w	r3, r3, #1
 800930c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800930e:	e61a      	b.n	8008f46 <HAL_RCC_OscConfig+0x152>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009310:	4b06      	ldr	r3, [pc, #24]	@ (800932c <HAL_RCC_OscConfig+0x538>)
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009328:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800932a:	e598      	b.n	8008e5e <HAL_RCC_OscConfig+0x6a>
 800932c:	58024400 	.word	0x58024400
 8009330:	fffffc0c 	.word	0xfffffc0c
 8009334:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009338:	4d1f      	ldr	r5, [pc, #124]	@ (80093b8 <HAL_RCC_OscConfig+0x5c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800933a:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800933e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009340:	f023 0301 	bic.w	r3, r3, #1
 8009344:	672b      	str	r3, [r5, #112]	@ 0x70
 8009346:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800934c:	672b      	str	r3, [r5, #112]	@ 0x70
 800934e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009350:	f023 0304 	bic.w	r3, r3, #4
 8009354:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8009356:	f7fa f8cb 	bl	80034f0 <HAL_GetTick>
 800935a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800935c:	e005      	b.n	800936a <HAL_RCC_OscConfig+0x576>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800935e:	f7fa f8c7 	bl	80034f0 <HAL_GetTick>
 8009362:	1b80      	subs	r0, r0, r6
 8009364:	42b8      	cmp	r0, r7
 8009366:	f63f aeb1 	bhi.w	80090cc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800936a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800936c:	0798      	lsls	r0, r3, #30
 800936e:	d4f6      	bmi.n	800935e <HAL_RCC_OscConfig+0x56a>
 8009370:	e5e5      	b.n	8008f3e <HAL_RCC_OscConfig+0x14a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009372:	4a11      	ldr	r2, [pc, #68]	@ (80093b8 <HAL_RCC_OscConfig+0x5c4>)
 8009374:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8009376:	f043 0301 	orr.w	r3, r3, #1
 800937a:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800937c:	e679      	b.n	8009072 <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800937e:	4b0e      	ldr	r3, [pc, #56]	@ (80093b8 <HAL_RCC_OscConfig+0x5c4>)
 8009380:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009382:	f042 0204 	orr.w	r2, r2, #4
 8009386:	671a      	str	r2, [r3, #112]	@ 0x70
 8009388:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800938a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800938e:	671a      	str	r2, [r3, #112]	@ 0x70
 8009390:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009392:	f042 0201 	orr.w	r2, r2, #1
 8009396:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009398:	e66b      	b.n	8009072 <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800939a:	f042 0204 	orr.w	r2, r2, #4
 800939e:	671a      	str	r2, [r3, #112]	@ 0x70
 80093a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80093a6:	671a      	str	r2, [r3, #112]	@ 0x70
 80093a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093aa:	f042 0201 	orr.w	r2, r2, #1
 80093ae:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093b0:	e65f      	b.n	8009072 <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 80093b2:	2001      	movs	r0, #1
}
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	58024400 	.word	0x58024400

080093bc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093bc:	4a3f      	ldr	r2, [pc, #252]	@ (80094bc <HAL_RCC_GetSysClockFreq+0x100>)
 80093be:	6913      	ldr	r3, [r2, #16]
 80093c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	d004      	beq.n	80093d2 <HAL_RCC_GetSysClockFreq+0x16>
 80093c8:	2b18      	cmp	r3, #24
 80093ca:	d00d      	beq.n	80093e8 <HAL_RCC_GetSysClockFreq+0x2c>
 80093cc:	b11b      	cbz	r3, 80093d6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80093ce:	483c      	ldr	r0, [pc, #240]	@ (80094c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80093d0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093d2:	483c      	ldr	r0, [pc, #240]	@ (80094c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80093d4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d6:	6813      	ldr	r3, [r2, #0]
 80093d8:	0699      	lsls	r1, r3, #26
 80093da:	d548      	bpl.n	800946e <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093dc:	6813      	ldr	r3, [r2, #0]
 80093de:	483a      	ldr	r0, [pc, #232]	@ (80094c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80093e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093e4:	40d8      	lsrs	r0, r3
 80093e6:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 80093ea:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80093ec:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093ee:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 80093f0:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80093f4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80093f6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80093fa:	d036      	beq.n	800946a <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80093fc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009400:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009404:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009408:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800940c:	fb05 f303 	mul.w	r3, r5, r3
 8009410:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009416:	ee06 3a90 	vmov	s13, r3
 800941a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800941e:	d002      	beq.n	8009426 <HAL_RCC_GetSysClockFreq+0x6a>
 8009420:	2902      	cmp	r1, #2
 8009422:	d026      	beq.n	8009472 <HAL_RCC_GetSysClockFreq+0xb6>
 8009424:	b341      	cbz	r1, 8009478 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009426:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80094cc <HAL_RCC_GetSysClockFreq+0x110>
 800942a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800942e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009434:	ee07 3a10 	vmov	s14, r3
 8009438:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800943c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009440:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009444:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009448:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800944c:	4b1b      	ldr	r3, [pc, #108]	@ (80094bc <HAL_RCC_GetSysClockFreq+0x100>)
 800944e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009450:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009454:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800945e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009466:	ee17 0a90 	vmov	r0, s15
}
 800946a:	bc30      	pop	{r4, r5}
 800946c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800946e:	4816      	ldr	r0, [pc, #88]	@ (80094c8 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8009470:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009472:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80094d0 <HAL_RCC_GetSysClockFreq+0x114>
 8009476:	e7d8      	b.n	800942a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009478:	6813      	ldr	r3, [r2, #0]
 800947a:	069b      	lsls	r3, r3, #26
 800947c:	d51a      	bpl.n	80094b4 <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800947e:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009480:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009484:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009486:	4910      	ldr	r1, [pc, #64]	@ (80094c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009488:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800948c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009490:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009492:	ee07 3a10 	vmov	s14, r3
 8009496:	ee06 1a10 	vmov	s12, r1
 800949a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800949e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80094a2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80094a6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80094aa:	ee76 7aa5 	vadd.f32	s15, s13, s11
 80094ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094b2:	e7cb      	b.n	800944c <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80094d4 <HAL_RCC_GetSysClockFreq+0x118>
 80094b8:	e7b7      	b.n	800942a <HAL_RCC_GetSysClockFreq+0x6e>
 80094ba:	bf00      	nop
 80094bc:	58024400 	.word	0x58024400
 80094c0:	003d0900 	.word	0x003d0900
 80094c4:	017d7840 	.word	0x017d7840
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	4a742400 	.word	0x4a742400
 80094d0:	4bbebc20 	.word	0x4bbebc20
 80094d4:	4c742400 	.word	0x4c742400

080094d8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80094d8:	2800      	cmp	r0, #0
 80094da:	f000 810e 	beq.w	80096fa <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094de:	4a8d      	ldr	r2, [pc, #564]	@ (8009714 <HAL_RCC_ClockConfig+0x23c>)
 80094e0:	6813      	ldr	r3, [r2, #0]
 80094e2:	f003 030f 	and.w	r3, r3, #15
 80094e6:	428b      	cmp	r3, r1
{
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	4604      	mov	r4, r0
 80094ee:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094f0:	d20c      	bcs.n	800950c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	f023 030f 	bic.w	r3, r3, #15
 80094f8:	430b      	orrs	r3, r1
 80094fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094fc:	6813      	ldr	r3, [r2, #0]
 80094fe:	f003 030f 	and.w	r3, r3, #15
 8009502:	428b      	cmp	r3, r1
 8009504:	d002      	beq.n	800950c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009506:	2001      	movs	r0, #1
}
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	0758      	lsls	r0, r3, #29
 8009510:	d50b      	bpl.n	800952a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009512:	4981      	ldr	r1, [pc, #516]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 8009514:	6920      	ldr	r0, [r4, #16]
 8009516:	698a      	ldr	r2, [r1, #24]
 8009518:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800951c:	4290      	cmp	r0, r2
 800951e:	d904      	bls.n	800952a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009520:	698a      	ldr	r2, [r1, #24]
 8009522:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009526:	4302      	orrs	r2, r0
 8009528:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800952a:	0719      	lsls	r1, r3, #28
 800952c:	d50b      	bpl.n	8009546 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800952e:	497a      	ldr	r1, [pc, #488]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 8009530:	6960      	ldr	r0, [r4, #20]
 8009532:	69ca      	ldr	r2, [r1, #28]
 8009534:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009538:	4290      	cmp	r0, r2
 800953a:	d904      	bls.n	8009546 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800953c:	69ca      	ldr	r2, [r1, #28]
 800953e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009542:	4302      	orrs	r2, r0
 8009544:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009546:	06da      	lsls	r2, r3, #27
 8009548:	d50b      	bpl.n	8009562 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800954a:	4973      	ldr	r1, [pc, #460]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 800954c:	69a0      	ldr	r0, [r4, #24]
 800954e:	69ca      	ldr	r2, [r1, #28]
 8009550:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009554:	4290      	cmp	r0, r2
 8009556:	d904      	bls.n	8009562 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009558:	69ca      	ldr	r2, [r1, #28]
 800955a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800955e:	4302      	orrs	r2, r0
 8009560:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009562:	069f      	lsls	r7, r3, #26
 8009564:	d50b      	bpl.n	800957e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009566:	496c      	ldr	r1, [pc, #432]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 8009568:	69e0      	ldr	r0, [r4, #28]
 800956a:	6a0a      	ldr	r2, [r1, #32]
 800956c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009570:	4290      	cmp	r0, r2
 8009572:	d904      	bls.n	800957e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009574:	6a0a      	ldr	r2, [r1, #32]
 8009576:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800957a:	4302      	orrs	r2, r0
 800957c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800957e:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009580:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009584:	f140 80ab 	bpl.w	80096de <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009588:	4e63      	ldr	r6, [pc, #396]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 800958a:	68e0      	ldr	r0, [r4, #12]
 800958c:	69b1      	ldr	r1, [r6, #24]
 800958e:	f001 010f 	and.w	r1, r1, #15
 8009592:	4288      	cmp	r0, r1
 8009594:	d904      	bls.n	80095a0 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009596:	69b1      	ldr	r1, [r6, #24]
 8009598:	f021 010f 	bic.w	r1, r1, #15
 800959c:	4301      	orrs	r1, r0
 800959e:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d030      	beq.n	8009606 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80095a4:	4a5c      	ldr	r2, [pc, #368]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 80095a6:	68a1      	ldr	r1, [r4, #8]
 80095a8:	6993      	ldr	r3, [r2, #24]
 80095aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80095ae:	430b      	orrs	r3, r1
 80095b0:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095b2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095b4:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095b6:	2902      	cmp	r1, #2
 80095b8:	f000 80a1 	beq.w	80096fe <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095bc:	2903      	cmp	r1, #3
 80095be:	f000 8098 	beq.w	80096f2 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095c2:	2901      	cmp	r1, #1
 80095c4:	f000 80a1 	beq.w	800970a <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095c8:	075f      	lsls	r7, r3, #29
 80095ca:	d59c      	bpl.n	8009506 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095cc:	4e52      	ldr	r6, [pc, #328]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ce:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095d2:	6933      	ldr	r3, [r6, #16]
 80095d4:	f023 0307 	bic.w	r3, r3, #7
 80095d8:	430b      	orrs	r3, r1
 80095da:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80095dc:	f7f9 ff88 	bl	80034f0 <HAL_GetTick>
 80095e0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e2:	e005      	b.n	80095f0 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e4:	f7f9 ff84 	bl	80034f0 <HAL_GetTick>
 80095e8:	1bc0      	subs	r0, r0, r7
 80095ea:	4540      	cmp	r0, r8
 80095ec:	f200 808b 	bhi.w	8009706 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f0:	6933      	ldr	r3, [r6, #16]
 80095f2:	6862      	ldr	r2, [r4, #4]
 80095f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095f8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80095fc:	d1f2      	bne.n	80095e4 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	079e      	lsls	r6, r3, #30
 8009602:	d506      	bpl.n	8009612 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009604:	68e0      	ldr	r0, [r4, #12]
 8009606:	4944      	ldr	r1, [pc, #272]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 8009608:	698a      	ldr	r2, [r1, #24]
 800960a:	f002 020f 	and.w	r2, r2, #15
 800960e:	4282      	cmp	r2, r0
 8009610:	d869      	bhi.n	80096e6 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009612:	4940      	ldr	r1, [pc, #256]	@ (8009714 <HAL_RCC_ClockConfig+0x23c>)
 8009614:	680a      	ldr	r2, [r1, #0]
 8009616:	f002 020f 	and.w	r2, r2, #15
 800961a:	42aa      	cmp	r2, r5
 800961c:	d90a      	bls.n	8009634 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800961e:	680a      	ldr	r2, [r1, #0]
 8009620:	f022 020f 	bic.w	r2, r2, #15
 8009624:	432a      	orrs	r2, r5
 8009626:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009628:	680a      	ldr	r2, [r1, #0]
 800962a:	f002 020f 	and.w	r2, r2, #15
 800962e:	42aa      	cmp	r2, r5
 8009630:	f47f af69 	bne.w	8009506 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009634:	0758      	lsls	r0, r3, #29
 8009636:	d50b      	bpl.n	8009650 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009638:	4937      	ldr	r1, [pc, #220]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 800963a:	6920      	ldr	r0, [r4, #16]
 800963c:	698a      	ldr	r2, [r1, #24]
 800963e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009642:	4290      	cmp	r0, r2
 8009644:	d204      	bcs.n	8009650 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009646:	698a      	ldr	r2, [r1, #24]
 8009648:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800964c:	4302      	orrs	r2, r0
 800964e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009650:	0719      	lsls	r1, r3, #28
 8009652:	d50b      	bpl.n	800966c <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009654:	4930      	ldr	r1, [pc, #192]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 8009656:	6960      	ldr	r0, [r4, #20]
 8009658:	69ca      	ldr	r2, [r1, #28]
 800965a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800965e:	4290      	cmp	r0, r2
 8009660:	d204      	bcs.n	800966c <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009662:	69ca      	ldr	r2, [r1, #28]
 8009664:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009668:	4302      	orrs	r2, r0
 800966a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800966c:	06da      	lsls	r2, r3, #27
 800966e:	d50b      	bpl.n	8009688 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009670:	4929      	ldr	r1, [pc, #164]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 8009672:	69a0      	ldr	r0, [r4, #24]
 8009674:	69ca      	ldr	r2, [r1, #28]
 8009676:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800967a:	4290      	cmp	r0, r2
 800967c:	d204      	bcs.n	8009688 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800967e:	69ca      	ldr	r2, [r1, #28]
 8009680:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009684:	4302      	orrs	r2, r0
 8009686:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009688:	069b      	lsls	r3, r3, #26
 800968a:	d50b      	bpl.n	80096a4 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800968c:	4a22      	ldr	r2, [pc, #136]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 800968e:	69e1      	ldr	r1, [r4, #28]
 8009690:	6a13      	ldr	r3, [r2, #32]
 8009692:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009696:	4299      	cmp	r1, r3
 8009698:	d204      	bcs.n	80096a4 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800969a:	6a13      	ldr	r3, [r2, #32]
 800969c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a0:	430b      	orrs	r3, r1
 80096a2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80096a4:	f7ff fe8a 	bl	80093bc <HAL_RCC_GetSysClockFreq>
 80096a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009718 <HAL_RCC_ClockConfig+0x240>)
 80096aa:	4603      	mov	r3, r0
 80096ac:	481b      	ldr	r0, [pc, #108]	@ (800971c <HAL_RCC_ClockConfig+0x244>)
 80096ae:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80096b0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80096b2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80096b6:	4d1a      	ldr	r5, [pc, #104]	@ (8009720 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80096b8:	f002 020f 	and.w	r2, r2, #15
 80096bc:	4c19      	ldr	r4, [pc, #100]	@ (8009724 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80096be:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80096c0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80096c2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80096c6:	4818      	ldr	r0, [pc, #96]	@ (8009728 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80096c8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80096cc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80096ce:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80096d0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80096d2:	40d3      	lsrs	r3, r2
 80096d4:	6023      	str	r3, [r4, #0]
}
 80096d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80096da:	f7f9 bea7 	b.w	800342c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096de:	2a00      	cmp	r2, #0
 80096e0:	f47f af60 	bne.w	80095a4 <HAL_RCC_ClockConfig+0xcc>
 80096e4:	e795      	b.n	8009612 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096e6:	698a      	ldr	r2, [r1, #24]
 80096e8:	f022 020f 	bic.w	r2, r2, #15
 80096ec:	4302      	orrs	r2, r0
 80096ee:	618a      	str	r2, [r1, #24]
 80096f0:	e78f      	b.n	8009612 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096f2:	019a      	lsls	r2, r3, #6
 80096f4:	f53f af6a 	bmi.w	80095cc <HAL_RCC_ClockConfig+0xf4>
 80096f8:	e705      	b.n	8009506 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80096fa:	2001      	movs	r0, #1
}
 80096fc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096fe:	0398      	lsls	r0, r3, #14
 8009700:	f53f af64 	bmi.w	80095cc <HAL_RCC_ClockConfig+0xf4>
 8009704:	e6ff      	b.n	8009506 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8009706:	2003      	movs	r0, #3
 8009708:	e6fe      	b.n	8009508 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800970a:	05db      	lsls	r3, r3, #23
 800970c:	f53f af5e 	bmi.w	80095cc <HAL_RCC_ClockConfig+0xf4>
 8009710:	e6f9      	b.n	8009506 <HAL_RCC_ClockConfig+0x2e>
 8009712:	bf00      	nop
 8009714:	52002000 	.word	0x52002000
 8009718:	58024400 	.word	0x58024400
 800971c:	080104c0 	.word	0x080104c0
 8009720:	2400000c 	.word	0x2400000c
 8009724:	24000008 	.word	0x24000008
 8009728:	24000014 	.word	0x24000014

0800972c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800972c:	4a18      	ldr	r2, [pc, #96]	@ (8009790 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800972e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009730:	6913      	ldr	r3, [r2, #16]
 8009732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009736:	2b10      	cmp	r3, #16
 8009738:	d019      	beq.n	800976e <HAL_RCC_GetHCLKFreq+0x42>
 800973a:	2b18      	cmp	r3, #24
 800973c:	d022      	beq.n	8009784 <HAL_RCC_GetHCLKFreq+0x58>
 800973e:	b1c3      	cbz	r3, 8009772 <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8009740:	4b14      	ldr	r3, [pc, #80]	@ (8009794 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009742:	4913      	ldr	r1, [pc, #76]	@ (8009790 <HAL_RCC_GetHCLKFreq+0x64>)
 8009744:	4814      	ldr	r0, [pc, #80]	@ (8009798 <HAL_RCC_GetHCLKFreq+0x6c>)
 8009746:	698a      	ldr	r2, [r1, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009748:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800974a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800974e:	4c13      	ldr	r4, [pc, #76]	@ (800979c <HAL_RCC_GetHCLKFreq+0x70>)
 8009750:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009754:	4d12      	ldr	r5, [pc, #72]	@ (80097a0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009756:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009758:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800975a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800975e:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009762:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009764:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8009768:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800976a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800976c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800976e:	4b0d      	ldr	r3, [pc, #52]	@ (80097a4 <HAL_RCC_GetHCLKFreq+0x78>)
 8009770:	e7e7      	b.n	8009742 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	069b      	lsls	r3, r3, #26
 8009776:	d509      	bpl.n	800978c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009778:	6812      	ldr	r2, [r2, #0]
 800977a:	4b0b      	ldr	r3, [pc, #44]	@ (80097a8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800977c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009780:	40d3      	lsrs	r3, r2
 8009782:	e7de      	b.n	8009742 <HAL_RCC_GetHCLKFreq+0x16>
 8009784:	f7ff fac4 	bl	8008d10 <HAL_RCC_GetSysClockFreq.part.0>
 8009788:	4603      	mov	r3, r0
 800978a:	e7da      	b.n	8009742 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800978c:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800978e:	e7d8      	b.n	8009742 <HAL_RCC_GetHCLKFreq+0x16>
 8009790:	58024400 	.word	0x58024400
 8009794:	003d0900 	.word	0x003d0900
 8009798:	080104c0 	.word	0x080104c0
 800979c:	24000008 	.word	0x24000008
 80097a0:	2400000c 	.word	0x2400000c
 80097a4:	017d7840 	.word	0x017d7840
 80097a8:	03d09000 	.word	0x03d09000

080097ac <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009820 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097ae:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097b0:	6913      	ldr	r3, [r2, #16]
 80097b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097b6:	2b10      	cmp	r3, #16
 80097b8:	d020      	beq.n	80097fc <HAL_RCC_GetPCLK1Freq+0x50>
 80097ba:	2b18      	cmp	r3, #24
 80097bc:	d029      	beq.n	8009812 <HAL_RCC_GetPCLK1Freq+0x66>
 80097be:	b1fb      	cbz	r3, 8009800 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 80097c0:	4b18      	ldr	r3, [pc, #96]	@ (8009824 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80097c2:	4a17      	ldr	r2, [pc, #92]	@ (8009820 <HAL_RCC_GetPCLK1Freq+0x74>)
 80097c4:	4918      	ldr	r1, [pc, #96]	@ (8009828 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80097c6:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80097c8:	4d18      	ldr	r5, [pc, #96]	@ (800982c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80097ca:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80097ce:	4c18      	ldr	r4, [pc, #96]	@ (8009830 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80097d0:	5c08      	ldrb	r0, [r1, r0]
 80097d2:	f000 001f 	and.w	r0, r0, #31
 80097d6:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80097d8:	6990      	ldr	r0, [r2, #24]
 80097da:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80097de:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80097e0:	5c08      	ldrb	r0, [r1, r0]
 80097e2:	f000 001f 	and.w	r0, r0, #31
 80097e6:	40c3      	lsrs	r3, r0
 80097e8:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80097ea:	69d2      	ldr	r2, [r2, #28]
 80097ec:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80097f0:	5c88      	ldrb	r0, [r1, r2]
 80097f2:	f000 001f 	and.w	r0, r0, #31
#endif
}
 80097f6:	fa23 f000 	lsr.w	r0, r3, r0
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009834 <HAL_RCC_GetPCLK1Freq+0x88>)
 80097fe:	e7e0      	b.n	80097c2 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009800:	6813      	ldr	r3, [r2, #0]
 8009802:	069b      	lsls	r3, r3, #26
 8009804:	d509      	bpl.n	800981a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009806:	6812      	ldr	r2, [r2, #0]
 8009808:	4b0b      	ldr	r3, [pc, #44]	@ (8009838 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800980a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800980e:	40d3      	lsrs	r3, r2
 8009810:	e7d7      	b.n	80097c2 <HAL_RCC_GetPCLK1Freq+0x16>
 8009812:	f7ff fa7d 	bl	8008d10 <HAL_RCC_GetSysClockFreq.part.0>
 8009816:	4603      	mov	r3, r0
 8009818:	e7d3      	b.n	80097c2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800981a:	4b07      	ldr	r3, [pc, #28]	@ (8009838 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800981c:	e7d1      	b.n	80097c2 <HAL_RCC_GetPCLK1Freq+0x16>
 800981e:	bf00      	nop
 8009820:	58024400 	.word	0x58024400
 8009824:	003d0900 	.word	0x003d0900
 8009828:	080104c0 	.word	0x080104c0
 800982c:	2400000c 	.word	0x2400000c
 8009830:	24000008 	.word	0x24000008
 8009834:	017d7840 	.word	0x017d7840
 8009838:	03d09000 	.word	0x03d09000

0800983c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800983e:	4c36      	ldr	r4, [pc, #216]	@ (8009918 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8009840:	4606      	mov	r6, r0
 8009842:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800984a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800984c:	f7f9 fe50 	bl	80034f0 <HAL_GetTick>
 8009850:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009852:	e004      	b.n	800985e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009854:	f7f9 fe4c 	bl	80034f0 <HAL_GetTick>
 8009858:	1b40      	subs	r0, r0, r5
 800985a:	2802      	cmp	r0, #2
 800985c:	d856      	bhi.n	800990c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	011a      	lsls	r2, r3, #4
 8009862:	d4f7      	bmi.n	8009854 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009864:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009866:	6832      	ldr	r2, [r6, #0]
 8009868:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800986c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009870:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009872:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8009876:	3b01      	subs	r3, #1
 8009878:	3a01      	subs	r2, #1
 800987a:	025b      	lsls	r3, r3, #9
 800987c:	0412      	lsls	r2, r2, #16
 800987e:	b29b      	uxth	r3, r3
 8009880:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009884:	4313      	orrs	r3, r2
 8009886:	6872      	ldr	r2, [r6, #4]
 8009888:	3a01      	subs	r2, #1
 800988a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800988e:	4313      	orrs	r3, r2
 8009890:	6932      	ldr	r2, [r6, #16]
 8009892:	3a01      	subs	r2, #1
 8009894:	0612      	lsls	r2, r2, #24
 8009896:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800989a:	4313      	orrs	r3, r2
 800989c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800989e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80098a0:	6972      	ldr	r2, [r6, #20]
 80098a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80098a6:	4313      	orrs	r3, r2
 80098a8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80098ac:	69b3      	ldr	r3, [r6, #24]
 80098ae:	f022 0220 	bic.w	r2, r2, #32
 80098b2:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098b4:	4b19      	ldr	r3, [pc, #100]	@ (800991c <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098b6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098b8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80098ba:	f022 0210 	bic.w	r2, r2, #16
 80098be:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80098c2:	69f2      	ldr	r2, [r6, #28]
 80098c4:	400b      	ands	r3, r1
 80098c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80098ca:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80098ce:	f043 0310 	orr.w	r3, r3, #16
 80098d2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80098d6:	b1df      	cbz	r7, 8009910 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098d8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098da:	bf0c      	ite	eq
 80098dc:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098e0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80098e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098e6:	4c0c      	ldr	r4, [pc, #48]	@ (8009918 <RCCEx_PLL2_Config.part.0+0xdc>)
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098f0:	f7f9 fdfe 	bl	80034f0 <HAL_GetTick>
 80098f4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098f6:	e004      	b.n	8009902 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098f8:	f7f9 fdfa 	bl	80034f0 <HAL_GetTick>
 80098fc:	1b40      	subs	r0, r0, r5
 80098fe:	2802      	cmp	r0, #2
 8009900:	d804      	bhi.n	800990c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	d5f7      	bpl.n	80098f8 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8009908:	2000      	movs	r0, #0
}
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800990c:	2003      	movs	r0, #3
}
 800990e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009910:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009914:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009916:	e7e6      	b.n	80098e6 <RCCEx_PLL2_Config.part.0+0xaa>
 8009918:	58024400 	.word	0x58024400
 800991c:	ffff0007 	.word	0xffff0007

08009920 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009922:	4c36      	ldr	r4, [pc, #216]	@ (80099fc <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8009924:	4606      	mov	r6, r0
 8009926:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800992e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009930:	f7f9 fdde 	bl	80034f0 <HAL_GetTick>
 8009934:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009936:	e004      	b.n	8009942 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009938:	f7f9 fdda 	bl	80034f0 <HAL_GetTick>
 800993c:	1b40      	subs	r0, r0, r5
 800993e:	2802      	cmp	r0, #2
 8009940:	d856      	bhi.n	80099f0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	009a      	lsls	r2, r3, #2
 8009946:	d4f7      	bmi.n	8009938 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009948:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800994a:	6832      	ldr	r2, [r6, #0]
 800994c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8009950:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009954:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009956:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800995a:	3b01      	subs	r3, #1
 800995c:	3a01      	subs	r2, #1
 800995e:	025b      	lsls	r3, r3, #9
 8009960:	0412      	lsls	r2, r2, #16
 8009962:	b29b      	uxth	r3, r3
 8009964:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009968:	4313      	orrs	r3, r2
 800996a:	6872      	ldr	r2, [r6, #4]
 800996c:	3a01      	subs	r2, #1
 800996e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009972:	4313      	orrs	r3, r2
 8009974:	6932      	ldr	r2, [r6, #16]
 8009976:	3a01      	subs	r2, #1
 8009978:	0612      	lsls	r2, r2, #24
 800997a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800997e:	4313      	orrs	r3, r2
 8009980:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009982:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009984:	6972      	ldr	r2, [r6, #20]
 8009986:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800998a:	4313      	orrs	r3, r2
 800998c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800998e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009990:	69b3      	ldr	r3, [r6, #24]
 8009992:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009996:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009998:	4b19      	ldr	r3, [pc, #100]	@ (8009a00 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800999a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800999c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800999e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80099a2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80099a6:	69f2      	ldr	r2, [r6, #28]
 80099a8:	400b      	ands	r3, r1
 80099aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80099ae:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80099b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099b6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80099ba:	b1df      	cbz	r7, 80099f4 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099bc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099be:	bf0c      	ite	eq
 80099c0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099c4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80099c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099ca:	4c0c      	ldr	r4, [pc, #48]	@ (80099fc <RCCEx_PLL3_Config.part.0+0xdc>)
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099d4:	f7f9 fd8c 	bl	80034f0 <HAL_GetTick>
 80099d8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099da:	e004      	b.n	80099e6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099dc:	f7f9 fd88 	bl	80034f0 <HAL_GetTick>
 80099e0:	1b40      	subs	r0, r0, r5
 80099e2:	2802      	cmp	r0, #2
 80099e4:	d804      	bhi.n	80099f0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	d5f7      	bpl.n	80099dc <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80099ec:	2000      	movs	r0, #0
}
 80099ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80099f0:	2003      	movs	r0, #3
}
 80099f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80099f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099fa:	e7e6      	b.n	80099ca <RCCEx_PLL3_Config.part.0+0xaa>
 80099fc:	58024400 	.word	0x58024400
 8009a00:	ffff0007 	.word	0xffff0007

08009a04 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a08:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8009a0c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a0e:	0118      	lsls	r0, r3, #4
 8009a10:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8009a14:	d526      	bpl.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009a16:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8009a18:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8009a1c:	f000 8671 	beq.w	800a702 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009a20:	d815      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8009a22:	2900      	cmp	r1, #0
 8009a24:	f000 8490 	beq.w	800a348 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8009a28:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009a2c:	f040 846b 	bne.w	800a306 <HAL_RCCEx_PeriphCLKConfig+0x902>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a30:	49a4      	ldr	r1, [pc, #656]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009a32:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009a34:	f001 0103 	and.w	r1, r1, #3
 8009a38:	2903      	cmp	r1, #3
 8009a3a:	f000 8464 	beq.w	800a306 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8009a3e:	2102      	movs	r1, #2
 8009a40:	f104 0008 	add.w	r0, r4, #8
 8009a44:	f7ff fefa 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009a48:	4606      	mov	r6, r0
        break;
 8009a4a:	f000 be67 	b.w	800a71c <HAL_RCCEx_PeriphCLKConfig+0xd18>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009a4e:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8009a52:	f040 8458 	bne.w	800a306 <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009a56:	4d9b      	ldr	r5, [pc, #620]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a58:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009a5a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8009a5c:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8009a60:	4301      	orrs	r1, r0
 8009a62:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009a64:	05d9      	lsls	r1, r3, #23
 8009a66:	d50a      	bpl.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009a68:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009a6a:	2904      	cmp	r1, #4
 8009a6c:	d806      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009a6e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009a72:	0495      	.short	0x0495
 8009a74:	06380623 	.word	0x06380623
 8009a78:	049a049a 	.word	0x049a049a
 8009a7c:	2601      	movs	r6, #1
 8009a7e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009a80:	059f      	lsls	r7, r3, #22
 8009a82:	d524      	bpl.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2AClockSelection)
 8009a84:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8009a86:	2980      	cmp	r1, #128	@ 0x80
 8009a88:	f000 85d7 	beq.w	800a63a <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8009a8c:	f200 80e4 	bhi.w	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009a90:	2900      	cmp	r1, #0
 8009a92:	f000 8460 	beq.w	800a356 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009a96:	2940      	cmp	r1, #64	@ 0x40
 8009a98:	f040 80e7 	bne.w	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x266>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a9c:	4989      	ldr	r1, [pc, #548]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009a9e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009aa0:	f001 0103 	and.w	r1, r1, #3
 8009aa4:	2903      	cmp	r1, #3
 8009aa6:	f000 80e0 	beq.w	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009aaa:	2100      	movs	r1, #0
 8009aac:	f104 0008 	add.w	r0, r4, #8
 8009ab0:	f7ff fec4 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009ab4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009ab6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	f040 84f7 	bne.w	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xaaa>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009ac0:	4f80      	ldr	r7, [pc, #512]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009ac2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009ac4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ac6:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8009aca:	4301      	orrs	r1, r0
 8009acc:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009ace:	0558      	lsls	r0, r3, #21
 8009ad0:	d526      	bpl.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai2BClockSelection)
 8009ad2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8009ad4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009ad8:	f000 85da 	beq.w	800a690 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 8009adc:	f200 80c8 	bhi.w	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	f000 8442 	beq.w	800a36a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009ae6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009aea:	f040 80cb 	bne.w	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009aee:	4975      	ldr	r1, [pc, #468]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009af0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009af2:	f001 0103 	and.w	r1, r1, #3
 8009af6:	2903      	cmp	r1, #3
 8009af8:	f000 80c4 	beq.w	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8009afc:	2100      	movs	r1, #0
 8009afe:	f104 0008 	add.w	r0, r4, #8
 8009b02:	f7ff fe9b 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009b06:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009b08:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009b0c:	2d00      	cmp	r5, #0
 8009b0e:	f040 84d1 	bne.w	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009b12:	4f6c      	ldr	r7, [pc, #432]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b14:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8009b16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b18:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8009b1c:	4301      	orrs	r1, r0
 8009b1e:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009b20:	0199      	lsls	r1, r3, #6
 8009b22:	d518      	bpl.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->OspiClockSelection)
 8009b24:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009b26:	2920      	cmp	r1, #32
 8009b28:	f000 8527 	beq.w	800a57a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8009b2c:	f200 80ad 	bhi.w	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009b30:	b139      	cbz	r1, 8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009b32:	2910      	cmp	r1, #16
 8009b34:	f040 80ac 	bne.w	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b38:	4862      	ldr	r0, [pc, #392]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b3a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009b3c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8009b40:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8009b42:	2d00      	cmp	r5, #0
 8009b44:	f040 84ab 	bne.w	800a49e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009b48:	4f5e      	ldr	r7, [pc, #376]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b4a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8009b4c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009b4e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8009b52:	4301      	orrs	r1, r0
 8009b54:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b56:	04df      	lsls	r7, r3, #19
 8009b58:	d526      	bpl.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b5a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8009b5c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8009b60:	f000 857f 	beq.w	800a662 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8009b64:	f200 8097 	bhi.w	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	f000 840d 	beq.w	800a388 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009b6e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009b72:	f040 8098 	bne.w	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b76:	4953      	ldr	r1, [pc, #332]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b78:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009b7a:	f001 0103 	and.w	r1, r1, #3
 8009b7e:	2903      	cmp	r1, #3
 8009b80:	f000 8091 	beq.w	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8009b84:	2100      	movs	r1, #0
 8009b86:	f104 0008 	add.w	r0, r4, #8
 8009b8a:	f7ff fe57 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009b8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009b90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009b94:	2d00      	cmp	r5, #0
 8009b96:	f040 8487 	bne.w	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b9a:	4f4a      	ldr	r7, [pc, #296]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b9c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8009b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ba0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009ba4:	4301      	orrs	r1, r0
 8009ba6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ba8:	0498      	lsls	r0, r3, #18
 8009baa:	d521      	bpl.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009bac:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009bae:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8009bb2:	f000 852e 	beq.w	800a612 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8009bb6:	d879      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009bb8:	b181      	cbz	r1, 8009bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009bba:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009bbe:	d17d      	bne.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bc0:	4940      	ldr	r1, [pc, #256]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009bc2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009bc4:	f001 0103 	and.w	r1, r1, #3
 8009bc8:	2903      	cmp	r1, #3
 8009bca:	d077      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009bcc:	2101      	movs	r1, #1
 8009bce:	f104 0008 	add.w	r0, r4, #8
 8009bd2:	f7ff fe33 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009bd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009bd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	f040 847a 	bne.w	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009be2:	4f38      	ldr	r7, [pc, #224]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009be4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8009be6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009be8:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8009bec:	4301      	orrs	r1, r0
 8009bee:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009bf0:	0459      	lsls	r1, r3, #17
 8009bf2:	d572      	bpl.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    switch (PeriphClkInit->Spi6ClockSelection)
 8009bf4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8009bf8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8009bfc:	f000 84d0 	beq.w	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009c00:	d862      	bhi.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8009c02:	b181      	cbz	r1, 8009c26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009c04:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8009c08:	d165      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c0a:	492e      	ldr	r1, [pc, #184]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009c0c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009c0e:	f001 0103 	and.w	r1, r1, #3
 8009c12:	2903      	cmp	r1, #3
 8009c14:	d05f      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009c16:	2101      	movs	r1, #1
 8009c18:	f104 0008 	add.w	r0, r4, #8
 8009c1c:	f7ff fe0e 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009c20:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c22:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	f040 8463 	bne.w	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009c2c:	4f25      	ldr	r7, [pc, #148]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009c2e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8009c32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009c34:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8009c38:	4301      	orrs	r1, r0
 8009c3a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c3c:	041f      	lsls	r7, r3, #16
 8009c3e:	d44e      	bmi.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c40:	01d8      	lsls	r0, r3, #7
 8009c42:	d55c      	bpl.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch (PeriphClkInit->FmcClockSelection)
 8009c44:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009c46:	2903      	cmp	r1, #3
 8009c48:	f200 85c8 	bhi.w	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8009c4c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009c50:	02c802cd 	.word	0x02c802cd
 8009c54:	02cd04ce 	.word	0x02cd04ce
    switch (PeriphClkInit->Sai2AClockSelection)
 8009c58:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8009c5c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8009c60:	f43f af2b 	beq.w	8009aba <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8009c64:	29c0      	cmp	r1, #192	@ 0xc0
 8009c66:	f43f af28 	beq.w	8009aba <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8009c6a:	2601      	movs	r6, #1
 8009c6c:	4635      	mov	r5, r6
 8009c6e:	e72e      	b.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2BClockSelection)
 8009c70:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8009c74:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8009c78:	f43f af48 	beq.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8009c7c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8009c80:	f43f af44 	beq.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8009c84:	2601      	movs	r6, #1
 8009c86:	4635      	mov	r5, r6
 8009c88:	e74a      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->OspiClockSelection)
 8009c8a:	2930      	cmp	r1, #48	@ 0x30
 8009c8c:	f43f af59 	beq.w	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009c90:	2601      	movs	r6, #1
 8009c92:	4635      	mov	r5, r6
 8009c94:	e75f      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c96:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8009c9a:	f43f af7b 	beq.w	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009c9e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8009ca2:	f43f af77 	beq.w	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009ca6:	2601      	movs	r6, #1
 8009ca8:	4635      	mov	r5, r6
 8009caa:	e77d      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009cac:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8009cb0:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8009cb4:	d092      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009cb6:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8009cba:	d08f      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009cbc:	2601      	movs	r6, #1
 8009cbe:	4635      	mov	r5, r6
 8009cc0:	e796      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8009cc2:	bf00      	nop
 8009cc4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 8009cc8:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 8009ccc:	d0ab      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009cce:	d94a      	bls.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009cd0:	f1b1 4fc0 	cmp.w	r1, #1610612736	@ 0x60000000
 8009cd4:	d0a7      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009cd6:	2601      	movs	r6, #1
 8009cd8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009cda:	041f      	lsls	r7, r3, #16
 8009cdc:	d5b0      	bpl.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    switch (PeriphClkInit->FdcanClockSelection)
 8009cde:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8009ce0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8009ce4:	f000 82e4 	beq.w	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8009ce8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8009cec:	f000 83c0 	beq.w	800a470 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	f000 82e2 	beq.w	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8009cf6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009cf8:	01d8      	lsls	r0, r3, #7
 8009cfa:	4635      	mov	r5, r6
 8009cfc:	d4a2      	bmi.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x240>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009cfe:	0259      	lsls	r1, r3, #9
 8009d00:	f100 8280 	bmi.w	800a204 <HAL_RCCEx_PeriphCLKConfig+0x800>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d04:	07df      	lsls	r7, r3, #31
 8009d06:	d53b      	bpl.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8009d08:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8009d0c:	2928      	cmp	r1, #40	@ 0x28
 8009d0e:	d835      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009d10:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009d14:	0034030e 	.word	0x0034030e
 8009d18:	00340034 	.word	0x00340034
 8009d1c:	00340034 	.word	0x00340034
 8009d20:	00340034 	.word	0x00340034
 8009d24:	003402ff 	.word	0x003402ff
 8009d28:	00340034 	.word	0x00340034
 8009d2c:	00340034 	.word	0x00340034
 8009d30:	00340034 	.word	0x00340034
 8009d34:	00340530 	.word	0x00340530
 8009d38:	00340034 	.word	0x00340034
 8009d3c:	00340034 	.word	0x00340034
 8009d40:	00340034 	.word	0x00340034
 8009d44:	0034030e 	.word	0x0034030e
 8009d48:	00340034 	.word	0x00340034
 8009d4c:	00340034 	.word	0x00340034
 8009d50:	00340034 	.word	0x00340034
 8009d54:	0034030e 	.word	0x0034030e
 8009d58:	00340034 	.word	0x00340034
 8009d5c:	00340034 	.word	0x00340034
 8009d60:	00340034 	.word	0x00340034
 8009d64:	030e      	.short	0x030e
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d66:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8009d6a:	f43f af5c 	beq.w	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d6e:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8009d72:	d1b0      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    if (ret == HAL_OK)
 8009d74:	2d00      	cmp	r5, #0
 8009d76:	f040 83bc 	bne.w	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8009d7a:	e757      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009d7c:	2601      	movs	r6, #1
 8009d7e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d80:	0798      	lsls	r0, r3, #30
 8009d82:	d51f      	bpl.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d84:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8009d88:	2905      	cmp	r1, #5
 8009d8a:	f200 850c 	bhi.w	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8009d8e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009d92:	0015      	.short	0x0015
 8009d94:	04df0006 	.word	0x04df0006
 8009d98:	00150015 	.word	0x00150015
 8009d9c:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d9e:	4911      	ldr	r1, [pc, #68]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009da2:	f001 0103 	and.w	r1, r1, #3
 8009da6:	2903      	cmp	r1, #3
 8009da8:	f000 84fd 	beq.w	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8009dac:	2101      	movs	r1, #1
 8009dae:	f104 0008 	add.w	r0, r4, #8
 8009db2:	f7ff fd43 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009db6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009db8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	f000 839b 	beq.w	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 8009dc2:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009dc4:	0759      	lsls	r1, r3, #29
 8009dc6:	d522      	bpl.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009dc8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8009dcc:	2905      	cmp	r1, #5
 8009dce:	f200 84ee 	bhi.w	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8009dd2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009dd6:	0018      	.short	0x0018
 8009dd8:	04ab0009 	.word	0x04ab0009
 8009ddc:	00180018 	.word	0x00180018
 8009de0:	0018      	.short	0x0018
 8009de2:	bf00      	nop
 8009de4:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009de8:	49af      	ldr	r1, [pc, #700]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009dea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009dec:	f001 0103 	and.w	r1, r1, #3
 8009df0:	2903      	cmp	r1, #3
 8009df2:	f000 84dc 	beq.w	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8009df6:	2101      	movs	r1, #1
 8009df8:	f104 0008 	add.w	r0, r4, #8
 8009dfc:	f7ff fd1e 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009e00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e02:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	f000 8368 	beq.w	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009e0c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e0e:	069f      	lsls	r7, r3, #26
 8009e10:	d526      	bpl.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e12:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8009e16:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8009e1a:	f000 8378 	beq.w	800a50e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009e1e:	f200 8192 	bhi.w	800a146 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8009e22:	b191      	cbz	r1, 8009e4a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009e24:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8009e28:	f040 8197 	bne.w	800a15a <HAL_RCCEx_PeriphCLKConfig+0x756>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e2c:	499e      	ldr	r1, [pc, #632]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009e2e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009e30:	f001 0103 	and.w	r1, r1, #3
 8009e34:	2903      	cmp	r1, #3
 8009e36:	f000 8190 	beq.w	800a15a <HAL_RCCEx_PeriphCLKConfig+0x756>
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	f104 0008 	add.w	r0, r4, #8
 8009e40:	f7ff fcfc 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009e44:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e46:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009e4a:	2d00      	cmp	r5, #0
 8009e4c:	f040 834f 	bne.w	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xaea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e50:	4f95      	ldr	r7, [pc, #596]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009e52:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8009e56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e58:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8009e5c:	4301      	orrs	r1, r0
 8009e5e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e60:	0658      	lsls	r0, r3, #25
 8009e62:	d526      	bpl.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009e64:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8009e68:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009e6c:	f000 8373 	beq.w	800a556 <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8009e70:	f200 8176 	bhi.w	800a160 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009e74:	b191      	cbz	r1, 8009e9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009e76:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009e7a:	f040 817b 	bne.w	800a174 <HAL_RCCEx_PeriphCLKConfig+0x770>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e7e:	498a      	ldr	r1, [pc, #552]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009e80:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009e82:	f001 0103 	and.w	r1, r1, #3
 8009e86:	2903      	cmp	r1, #3
 8009e88:	f000 8174 	beq.w	800a174 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	f104 0008 	add.w	r0, r4, #8
 8009e92:	f7ff fcd3 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009e96:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009e98:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	f040 8314 	bne.w	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ea2:	4f81      	ldr	r7, [pc, #516]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009ea4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8009ea8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009eaa:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8009eae:	4301      	orrs	r1, r0
 8009eb0:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009eb2:	0619      	lsls	r1, r3, #24
 8009eb4:	d526      	bpl.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009eb6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8009eba:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8009ebe:	f000 8338 	beq.w	800a532 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009ec2:	f200 815a 	bhi.w	800a17a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8009ec6:	b191      	cbz	r1, 8009eee <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009ec8:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8009ecc:	f040 815f 	bne.w	800a18e <HAL_RCCEx_PeriphCLKConfig+0x78a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ed0:	4975      	ldr	r1, [pc, #468]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009ed2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009ed4:	f001 0103 	and.w	r1, r1, #3
 8009ed8:	2903      	cmp	r1, #3
 8009eda:	f000 8158 	beq.w	800a18e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8009ede:	2100      	movs	r1, #0
 8009ee0:	f104 0008 	add.w	r0, r4, #8
 8009ee4:	f7ff fcaa 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009ee8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009eea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	f040 82ef 	bne.w	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xace>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ef4:	4f6c      	ldr	r7, [pc, #432]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009ef6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8009efa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009efc:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8009f00:	4301      	orrs	r1, r0
 8009f02:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f04:	071f      	lsls	r7, r3, #28
 8009f06:	d50b      	bpl.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009f08:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8009f0c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8009f10:	f000 8262 	beq.w	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009f14:	4f64      	ldr	r7, [pc, #400]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f18:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8009f1c:	4301      	orrs	r1, r0
 8009f1e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f20:	06d8      	lsls	r0, r3, #27
 8009f22:	d50b      	bpl.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x538>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f24:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8009f28:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8009f2c:	f000 8268 	beq.w	800a400 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f30:	4f5d      	ldr	r7, [pc, #372]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009f32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f34:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8009f38:	4301      	orrs	r1, r0
 8009f3a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f3c:	0319      	lsls	r1, r3, #12
 8009f3e:	d50e      	bpl.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8009f40:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8009f44:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009f48:	f000 81c2 	beq.w	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8009f4c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8009f50:	f000 81cd 	beq.w	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8009f54:	2900      	cmp	r1, #0
 8009f56:	f000 827b 	beq.w	800a450 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8009f5a:	2601      	movs	r6, #1
 8009f5c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f5e:	035f      	lsls	r7, r3, #13
 8009f60:	d50f      	bpl.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 8009f62:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8009f66:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8009f6a:	f000 832c 	beq.w	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8009f6e:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8009f72:	f000 8191 	beq.w	800a298 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8009f76:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009f7a:	f000 8188 	beq.w	800a28e <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8009f7e:	2601      	movs	r6, #1
 8009f80:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f82:	03d8      	lsls	r0, r3, #15
 8009f84:	d520      	bpl.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8009f86:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	f000 824e 	beq.w	800a42a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8009f8e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009f92:	f040 8179 	bne.w	800a288 <HAL_RCCEx_PeriphCLKConfig+0x884>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f96:	4944      	ldr	r1, [pc, #272]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009f98:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009f9a:	f001 0103 	and.w	r1, r1, #3
 8009f9e:	2903      	cmp	r1, #3
 8009fa0:	f000 8172 	beq.w	800a288 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8009fa4:	2102      	movs	r1, #2
 8009fa6:	f104 0008 	add.w	r0, r4, #8
 8009faa:	f7ff fc47 	bl	800983c <RCCEx_PLL2_Config.part.0>
 8009fae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fb0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	f040 8240 	bne.w	800a43a <HAL_RCCEx_PeriphCLKConfig+0xa36>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fba:	4f3b      	ldr	r7, [pc, #236]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009fbc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8009fbe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009fc0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009fc4:	4301      	orrs	r1, r0
 8009fc6:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009fc8:	0099      	lsls	r1, r3, #2
 8009fca:	d50e      	bpl.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fcc:	4936      	ldr	r1, [pc, #216]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009fce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009fd0:	f001 0103 	and.w	r1, r1, #3
 8009fd4:	2903      	cmp	r1, #3
 8009fd6:	d007      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009fd8:	2102      	movs	r1, #2
 8009fda:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009fde:	f7ff fc9f 	bl	8009920 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009fe2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009fe6:	b100      	cbz	r0, 8009fea <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8009fe8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009fea:	039f      	lsls	r7, r3, #14
 8009fec:	f140 80de 	bpl.w	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 8009ff0:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8009ff4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009ff8:	f000 8221 	beq.w	800a43e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8009ffc:	f240 80ca 	bls.w	800a194 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800a000:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 800a004:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800a008:	f000 80c7 	beq.w	800a19a <HAL_RCCEx_PeriphCLKConfig+0x796>
 800a00c:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a00e:	02d8      	lsls	r0, r3, #11
 800a010:	d506      	bpl.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a012:	4825      	ldr	r0, [pc, #148]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a014:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 800a016:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800a018:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a01c:	4331      	orrs	r1, r6
 800a01e:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a020:	0299      	lsls	r1, r3, #10
 800a022:	d506      	bpl.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a024:	4820      	ldr	r0, [pc, #128]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a026:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 800a028:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800a02a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800a02e:	4331      	orrs	r1, r6
 800a030:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a032:	051f      	lsls	r7, r3, #20
 800a034:	d506      	bpl.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x640>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a036:	481c      	ldr	r0, [pc, #112]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a038:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800a03a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800a03c:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 800a040:	4331      	orrs	r1, r6
 800a042:	6581      	str	r1, [r0, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a044:	005e      	lsls	r6, r3, #1
 800a046:	d509      	bpl.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x658>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a048:	4917      	ldr	r1, [pc, #92]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a04a:	6908      	ldr	r0, [r1, #16]
 800a04c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a050:	6108      	str	r0, [r1, #16]
 800a052:	6908      	ldr	r0, [r1, #16]
 800a054:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800a058:	4330      	orrs	r0, r6
 800a05a:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	da06      	bge.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x66a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a060:	4811      	ldr	r0, [pc, #68]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a062:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 800a064:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800a066:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800a06a:	4331      	orrs	r1, r6
 800a06c:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a06e:	0218      	lsls	r0, r3, #8
 800a070:	d507      	bpl.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a072:	490d      	ldr	r1, [pc, #52]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a074:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800a078:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800a07a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a07e:	4303      	orrs	r3, r0
 800a080:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a082:	07d1      	lsls	r1, r2, #31
 800a084:	d512      	bpl.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a086:	4b08      	ldr	r3, [pc, #32]	@ (800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08a:	f003 0303 	and.w	r3, r3, #3
 800a08e:	2b03      	cmp	r3, #3
 800a090:	f000 8198 	beq.w	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800a094:	2100      	movs	r1, #0
 800a096:	f104 0008 	add.w	r0, r4, #8
 800a09a:	f7ff fbcf 	bl	800983c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a09e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	f040 820e 	bne.w	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800a0a6:	e001      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800a0a8:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a0ac:	0793      	lsls	r3, r2, #30
 800a0ae:	d50f      	bpl.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0b0:	4bb3      	ldr	r3, [pc, #716]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b4:	f003 0303 	and.w	r3, r3, #3
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	f000 8185 	beq.w	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 800a0be:	2101      	movs	r1, #1
 800a0c0:	f104 0008 	add.w	r0, r4, #8
 800a0c4:	f7ff fbba 	bl	800983c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0c8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	f040 81f5 	bne.w	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0d0:	0757      	lsls	r7, r2, #29
 800a0d2:	d50f      	bpl.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0d4:	4baa      	ldr	r3, [pc, #680]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	f000 816f 	beq.w	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800a0e2:	2102      	movs	r1, #2
 800a0e4:	f104 0008 	add.w	r0, r4, #8
 800a0e8:	f7ff fba8 	bl	800983c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a0ec:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f040 81e5 	bne.w	800a4be <HAL_RCCEx_PeriphCLKConfig+0xaba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a0f4:	0716      	lsls	r6, r2, #28
 800a0f6:	d50f      	bpl.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0f8:	4ba1      	ldr	r3, [pc, #644]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fc:	f003 0303 	and.w	r3, r3, #3
 800a100:	2b03      	cmp	r3, #3
 800a102:	f000 8167 	beq.w	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a106:	2100      	movs	r1, #0
 800a108:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a10c:	f7ff fc08 	bl	8009920 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a110:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a112:	2800      	cmp	r0, #0
 800a114:	f040 81d7 	bne.w	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a118:	06d0      	lsls	r0, r2, #27
 800a11a:	d54a      	bpl.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a11c:	4b98      	ldr	r3, [pc, #608]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a11e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	2b03      	cmp	r3, #3
 800a12a:	f000 814f 	beq.w	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800a12e:	2101      	movs	r1, #1
 800a130:	4630      	mov	r0, r6
 800a132:	f7ff fbf5 	bl	8009920 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800a136:	2800      	cmp	r0, #0
 800a138:	d03a      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a13a:	6863      	ldr	r3, [r4, #4]
 800a13c:	069a      	lsls	r2, r3, #26
 800a13e:	f140 80e5 	bpl.w	800a30c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a142:	4605      	mov	r5, r0
 800a144:	e039      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a146:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800a14a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a14e:	f43f ae7c 	beq.w	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x446>
 800a152:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800a156:	f43f ae78 	beq.w	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x446>
 800a15a:	2601      	movs	r6, #1
 800a15c:	4635      	mov	r5, r6
 800a15e:	e67f      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a160:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 800a164:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a168:	f43f ae98 	beq.w	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a16c:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 800a170:	f43f ae94 	beq.w	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a174:	2601      	movs	r6, #1
 800a176:	4635      	mov	r5, r6
 800a178:	e69b      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a17a:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800a17e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a182:	f43f aeb4 	beq.w	8009eee <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800a186:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800a18a:	f43f aeb0 	beq.w	8009eee <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800a18e:	2601      	movs	r6, #1
 800a190:	4635      	mov	r5, r6
 800a192:	e6b7      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->RngClockSelection)
 800a194:	2900      	cmp	r1, #0
 800a196:	f47f af39 	bne.w	800a00c <HAL_RCCEx_PeriphCLKConfig+0x608>
    if (ret == HAL_OK)
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	f47f af37 	bne.w	800a00e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1a0:	4d77      	ldr	r5, [pc, #476]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a1a2:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800a1a4:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800a1a8:	4301      	orrs	r1, r0
 800a1aa:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 800a1ac:	4635      	mov	r5, r6
 800a1ae:	e72e      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a1b0:	6862      	ldr	r2, [r4, #4]
 800a1b2:	0693      	lsls	r3, r2, #26
 800a1b4:	d50f      	bpl.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1b6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ba:	4b71      	ldr	r3, [pc, #452]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	f000 80a2 	beq.w	800a30c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a1c8:	2102      	movs	r1, #2
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f7ff fba8 	bl	8009920 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	f040 809b 	bne.w	800a30c <HAL_RCCEx_PeriphCLKConfig+0x908>
  if (status == HAL_OK)
 800a1d6:	1e28      	subs	r0, r5, #0
 800a1d8:	bf18      	it	ne
 800a1da:	2001      	movne	r0, #1
}
 800a1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1e0:	4867      	ldr	r0, [pc, #412]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a1e2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a1e4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a1e8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a1ea:	2d00      	cmp	r5, #0
 800a1ec:	f040 815a 	bne.w	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1f0:	4f63      	ldr	r7, [pc, #396]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a1f2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800a1f4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a1f6:	f021 0103 	bic.w	r1, r1, #3
 800a1fa:	4301      	orrs	r1, r0
 800a1fc:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1fe:	0259      	lsls	r1, r3, #9
 800a200:	f57f ad80 	bpl.w	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x300>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a204:	4f5f      	ldr	r7, [pc, #380]	@ (800a384 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a20c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a20e:	f7f9 f96f 	bl	80034f0 <HAL_GetTick>
 800a212:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a214:	e006      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x820>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a216:	f7f9 f96b 	bl	80034f0 <HAL_GetTick>
 800a21a:	eba0 0008 	sub.w	r0, r0, r8
 800a21e:	2864      	cmp	r0, #100	@ 0x64
 800a220:	f200 82bb 	bhi.w	800a79a <HAL_RCCEx_PeriphCLKConfig+0xd96>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	05da      	lsls	r2, r3, #23
 800a228:	d5f5      	bpl.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (ret == HAL_OK)
 800a22a:	2d00      	cmp	r5, #0
 800a22c:	f040 82b6 	bne.w	800a79c <HAL_RCCEx_PeriphCLKConfig+0xd98>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a230:	4a53      	ldr	r2, [pc, #332]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a232:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800a236:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a238:	4059      	eors	r1, r3
 800a23a:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800a23e:	d00b      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x854>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a240:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a242:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a244:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a248:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800a24c:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a24e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800a250:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800a254:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a256:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a25c:	f000 82c2 	beq.w	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a260:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a264:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a268:	f000 82d0 	beq.w	800a80c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800a26c:	4944      	ldr	r1, [pc, #272]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a26e:	690a      	ldr	r2, [r1, #16]
 800a270:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a274:	610a      	str	r2, [r1, #16]
 800a276:	4842      	ldr	r0, [pc, #264]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a278:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800a27c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800a27e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a280:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a284:	6701      	str	r1, [r0, #112]	@ 0x70
 800a286:	e53d      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a288:	2601      	movs	r6, #1
 800a28a:	4635      	mov	r5, r6
 800a28c:	e69c      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a28e:	483c      	ldr	r0, [pc, #240]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a290:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a292:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a296:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a298:	2d00      	cmp	r5, #0
 800a29a:	f040 80fe 	bne.w	800a49a <HAL_RCCEx_PeriphCLKConfig+0xa96>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a29e:	4f38      	ldr	r7, [pc, #224]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a2a0:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800a2a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2a6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800a2aa:	4301      	orrs	r1, r0
 800a2ac:	6579      	str	r1, [r7, #84]	@ 0x54
 800a2ae:	e668      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2b0:	4833      	ldr	r0, [pc, #204]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a2b2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a2b4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a2b8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	f040 80ea 	bne.w	800a494 <HAL_RCCEx_PeriphCLKConfig+0xa90>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2c0:	4f2f      	ldr	r7, [pc, #188]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a2c2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800a2c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2c6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800a2ca:	4301      	orrs	r1, r0
 800a2cc:	6539      	str	r1, [r7, #80]	@ 0x50
 800a2ce:	e4b7      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2d0:	492b      	ldr	r1, [pc, #172]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a2d2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a2d4:	f001 0103 	and.w	r1, r1, #3
 800a2d8:	2903      	cmp	r1, #3
 800a2da:	f43f ae3e 	beq.w	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a2de:	2102      	movs	r1, #2
 800a2e0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a2e4:	f7ff fb1c 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a2e8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2ea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	f040 80ed 	bne.w	800a4ce <HAL_RCCEx_PeriphCLKConfig+0xaca>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2f4:	4f22      	ldr	r7, [pc, #136]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a2f6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800a2fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a2fc:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800a300:	4301      	orrs	r1, r0
 800a302:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a304:	e62b      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800a306:	2601      	movs	r6, #1
 800a308:	f7ff bbac 	b.w	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x60>
  return HAL_ERROR;
 800a30c:	2001      	movs	r0, #1
}
 800a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a312:	491b      	ldr	r1, [pc, #108]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a314:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a316:	f001 0103 	and.w	r1, r1, #3
 800a31a:	2903      	cmp	r1, #3
 800a31c:	f43f ad2e 	beq.w	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a320:	2101      	movs	r1, #1
 800a322:	f104 0008 	add.w	r0, r4, #8
 800a326:	f7ff fa89 	bl	800983c <RCCEx_PLL2_Config.part.0>
 800a32a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a32c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a330:	2d00      	cmp	r5, #0
 800a332:	f040 80ea 	bne.w	800a50a <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a336:	4f12      	ldr	r7, [pc, #72]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a338:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800a33c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a33e:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800a342:	4301      	orrs	r1, r0
 800a344:	6579      	str	r1, [r7, #84]	@ 0x54
 800a346:	e51b      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a348:	4d0d      	ldr	r5, [pc, #52]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a34a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800a34c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800a350:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a352:	f7ff bb80 	b.w	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a356:	480a      	ldr	r0, [pc, #40]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a358:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a35a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a35e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a360:	2d00      	cmp	r5, #0
 800a362:	f040 80a4 	bne.w	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a366:	f7ff bbab 	b.w	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a36a:	4805      	ldr	r0, [pc, #20]	@ (800a380 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a36c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a36e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a372:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a374:	2d00      	cmp	r5, #0
 800a376:	f040 809d 	bne.w	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a37a:	f7ff bbca 	b.w	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800a37e:	bf00      	nop
 800a380:	58024400 	.word	0x58024400
 800a384:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a388:	48c0      	ldr	r0, [pc, #768]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a38a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a38c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a390:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a392:	2d00      	cmp	r5, #0
 800a394:	f040 8088 	bne.w	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a398:	f7ff bbff 	b.w	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a39c:	48bb      	ldr	r0, [pc, #748]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a39e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a3a0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a3a4:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800a3a6:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	f040 8197 	bne.w	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xcd8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a3ae:	4fb7      	ldr	r7, [pc, #732]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3b4:	f021 0107 	bic.w	r1, r1, #7
 800a3b8:	4301      	orrs	r1, r0
 800a3ba:	6539      	str	r1, [r7, #80]	@ 0x50
 800a3bc:	f7ff bb60 	b.w	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    return HAL_ERROR;
 800a3c0:	2501      	movs	r5, #1
 800a3c2:	e697      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800a3c4:	2501      	movs	r5, #1
 800a3c6:	e671      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800a3c8:	2501      	movs	r5, #1
 800a3ca:	e681      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a3cc:	0691      	lsls	r1, r2, #26
 800a3ce:	d59d      	bpl.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x908>
    return HAL_ERROR;
 800a3d0:	2501      	movs	r5, #1
 800a3d2:	e6f2      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 800a3d4:	2501      	movs	r5, #1
 800a3d6:	e69f      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3d8:	49ac      	ldr	r1, [pc, #688]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a3da:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a3dc:	f001 0103 	and.w	r1, r1, #3
 800a3e0:	2903      	cmp	r1, #3
 800a3e2:	f000 81e8 	beq.w	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 800a3e6:	2102      	movs	r1, #2
 800a3e8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a3ec:	f7ff fa98 	bl	8009920 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	f040 81ec 	bne.w	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xdca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a3f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a3fe:	e589      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x510>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a400:	49a2      	ldr	r1, [pc, #648]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a402:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a404:	f001 0103 	and.w	r1, r1, #3
 800a408:	2903      	cmp	r1, #3
 800a40a:	f000 81d7 	beq.w	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 800a40e:	2102      	movs	r1, #2
 800a410:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a414:	f7ff fa84 	bl	8009920 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a418:	2800      	cmp	r0, #0
 800a41a:	f000 81d2 	beq.w	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a41e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
        status = HAL_ERROR;
 800a422:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a424:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a428:	e582      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a42a:	4898      	ldr	r0, [pc, #608]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a42c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a42e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a432:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a434:	2d00      	cmp	r5, #0
 800a436:	f43f adc0 	beq.w	8009fba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800a43a:	462e      	mov	r6, r5
 800a43c:	e5c4      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a43e:	4f93      	ldr	r7, [pc, #588]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a440:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a442:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800a446:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a448:	2d00      	cmp	r5, #0
 800a44a:	f47f ade0 	bne.w	800a00e <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800a44e:	e6a7      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a450:	488e      	ldr	r0, [pc, #568]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a452:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a454:	f000 0003 	and.w	r0, r0, #3
 800a458:	2803      	cmp	r0, #3
 800a45a:	f43f ad7e 	beq.w	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a45e:	f104 0008 	add.w	r0, r4, #8
 800a462:	f7ff f9eb 	bl	800983c <RCCEx_PLL2_Config.part.0>
 800a466:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a468:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a46c:	bb7d      	cbnz	r5, 800a4ce <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800a46e:	e741      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a470:	4986      	ldr	r1, [pc, #536]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a472:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a474:	f001 0103 	and.w	r1, r1, #3
 800a478:	2903      	cmp	r1, #3
 800a47a:	f43f ac3c 	beq.w	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 800a47e:	2101      	movs	r1, #1
 800a480:	f104 0008 	add.w	r0, r4, #8
 800a484:	f7ff f9da 	bl	800983c <RCCEx_PLL2_Config.part.0>
 800a488:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a48a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a48e:	2d00      	cmp	r5, #0
 800a490:	f43f af16 	beq.w	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a494:	462e      	mov	r6, r5
 800a496:	f7ff bbd3 	b.w	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800a49a:	462e      	mov	r6, r5
 800a49c:	e571      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800a49e:	462e      	mov	r6, r5
 800a4a0:	f7ff bb59 	b.w	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a4a4:	462e      	mov	r6, r5
 800a4a6:	e42a      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800a4a8:	462e      	mov	r6, r5
 800a4aa:	f7ff bb7d 	b.w	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a4ae:	462e      	mov	r6, r5
 800a4b0:	f7ff bb0d 	b.w	8009ace <HAL_RCCEx_PeriphCLKConfig+0xca>
 800a4b4:	462e      	mov	r6, r5
 800a4b6:	f7ff bb33 	b.w	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	e608      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a4be:	4605      	mov	r5, r0
 800a4c0:	e618      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	e5f2      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	e626      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800a4ca:	462e      	mov	r6, r5
 800a4cc:	e4f1      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a4ce:	462e      	mov	r6, r5
 800a4d0:	e545      	b.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800a4d2:	462e      	mov	r6, r5
 800a4d4:	e516      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800a4d6:	462e      	mov	r6, r5
 800a4d8:	f7ff bb8a 	b.w	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4dc:	4f6b      	ldr	r7, [pc, #428]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a4de:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800a4e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a4e4:	f021 0107 	bic.w	r1, r1, #7
 800a4e8:	4301      	orrs	r1, r0
 800a4ea:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a4ec:	e48f      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a4ee:	462e      	mov	r6, r5
 800a4f0:	e4b6      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800a4f2:	462e      	mov	r6, r5
 800a4f4:	f7ff bbf1 	b.w	8009cda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4f8:	4f64      	ldr	r7, [pc, #400]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a4fa:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800a4fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a500:	f021 0107 	bic.w	r1, r1, #7
 800a504:	4301      	orrs	r1, r0
 800a506:	6579      	str	r1, [r7, #84]	@ 0x54
 800a508:	e45c      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a50a:	462e      	mov	r6, r5
 800a50c:	e438      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a50e:	495f      	ldr	r1, [pc, #380]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a510:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a512:	f001 0103 	and.w	r1, r1, #3
 800a516:	2903      	cmp	r1, #3
 800a518:	f43f ae1f 	beq.w	800a15a <HAL_RCCEx_PeriphCLKConfig+0x756>
 800a51c:	2102      	movs	r1, #2
 800a51e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a522:	f7ff f9fd 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a526:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a528:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a52c:	2d00      	cmp	r5, #0
 800a52e:	d1de      	bne.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800a530:	e48e      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a532:	4956      	ldr	r1, [pc, #344]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a534:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a536:	f001 0103 	and.w	r1, r1, #3
 800a53a:	2903      	cmp	r1, #3
 800a53c:	f43f ae27 	beq.w	800a18e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800a540:	2102      	movs	r1, #2
 800a542:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a546:	f7ff f9eb 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a54a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a54c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a550:	2d00      	cmp	r5, #0
 800a552:	d1be      	bne.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xace>
 800a554:	e4ce      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a556:	494d      	ldr	r1, [pc, #308]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a558:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a55a:	f001 0103 	and.w	r1, r1, #3
 800a55e:	2903      	cmp	r1, #3
 800a560:	f43f ae08 	beq.w	800a174 <HAL_RCCEx_PeriphCLKConfig+0x770>
 800a564:	2102      	movs	r1, #2
 800a566:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a56a:	f7ff f9d9 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a56e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a570:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a574:	2d00      	cmp	r5, #0
 800a576:	d1a8      	bne.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xac6>
 800a578:	e493      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x49e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a57a:	4944      	ldr	r1, [pc, #272]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a57c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a57e:	f001 0103 	and.w	r1, r1, #3
 800a582:	2903      	cmp	r1, #3
 800a584:	f43f ab84 	beq.w	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800a588:	2102      	movs	r1, #2
 800a58a:	f104 0008 	add.w	r0, r4, #8
 800a58e:	f7ff f955 	bl	800983c <RCCEx_PLL2_Config.part.0>
 800a592:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a594:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a598:	2d00      	cmp	r5, #0
 800a59a:	d180      	bne.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800a59c:	f7ff bad4 	b.w	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x144>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5a0:	493a      	ldr	r1, [pc, #232]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a5a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a5a4:	f001 0103 	and.w	r1, r1, #3
 800a5a8:	2903      	cmp	r1, #3
 800a5aa:	f43f ab94 	beq.w	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a5b4:	f7ff f9b4 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a5b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a5ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a5be:	2d00      	cmp	r5, #0
 800a5c0:	d197      	bne.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800a5c2:	f7ff bb33 	b.w	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5c6:	4931      	ldr	r1, [pc, #196]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a5c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a5ca:	f001 0103 	and.w	r1, r1, #3
 800a5ce:	2903      	cmp	r1, #3
 800a5d0:	f43f acd5 	beq.w	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a5da:	f7ff f9a1 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a5de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a5e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a5e4:	2d00      	cmp	r5, #0
 800a5e6:	f47f af58 	bne.w	800a49a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800a5ea:	e658      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x89a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5ec:	4927      	ldr	r1, [pc, #156]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a5ee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a5f0:	f001 0103 	and.w	r1, r1, #3
 800a5f4:	2903      	cmp	r1, #3
 800a5f6:	f000 80f1 	beq.w	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800a5fa:	2102      	movs	r1, #2
 800a5fc:	f104 0008 	add.w	r0, r4, #8
 800a600:	f7ff f91c 	bl	800983c <RCCEx_PLL2_Config.part.0>
 800a604:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a606:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a60a:	2d00      	cmp	r5, #0
 800a60c:	f47f af4a 	bne.w	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800a610:	e5ee      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a612:	491e      	ldr	r1, [pc, #120]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a614:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a616:	f001 0103 	and.w	r1, r1, #3
 800a61a:	2903      	cmp	r1, #3
 800a61c:	f43f ab4e 	beq.w	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a620:	2101      	movs	r1, #1
 800a622:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a626:	f7ff f97b 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a62a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a62c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a630:	2d00      	cmp	r5, #0
 800a632:	f47f af50 	bne.w	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800a636:	f7ff bad4 	b.w	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a63a:	4914      	ldr	r1, [pc, #80]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a63c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a63e:	f001 0103 	and.w	r1, r1, #3
 800a642:	2903      	cmp	r1, #3
 800a644:	f43f ab11 	beq.w	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a648:	2100      	movs	r1, #0
 800a64a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a64e:	f7ff f967 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a652:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a654:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a658:	2d00      	cmp	r5, #0
 800a65a:	f47f af28 	bne.w	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a65e:	f7ff ba2f 	b.w	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a662:	490a      	ldr	r1, [pc, #40]	@ (800a68c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a664:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a666:	f001 0103 	and.w	r1, r1, #3
 800a66a:	2903      	cmp	r1, #3
 800a66c:	f43f ab1b 	beq.w	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800a670:	2100      	movs	r1, #0
 800a672:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a676:	f7ff f953 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a67a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a67c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a680:	2d00      	cmp	r5, #0
 800a682:	f47f af11 	bne.w	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a686:	f7ff ba88 	b.w	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a68a:	bf00      	nop
 800a68c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a690:	4966      	ldr	r1, [pc, #408]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a692:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a694:	f001 0103 	and.w	r1, r1, #3
 800a698:	2903      	cmp	r1, #3
 800a69a:	f43f aaf3 	beq.w	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800a69e:	2100      	movs	r1, #0
 800a6a0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a6a4:	f7ff f93c 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a6a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a6aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a6ae:	2d00      	cmp	r5, #0
 800a6b0:	f47f af00 	bne.w	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a6b4:	f7ff ba2d 	b.w	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6b8:	495c      	ldr	r1, [pc, #368]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a6ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a6bc:	f001 0103 	and.w	r1, r1, #3
 800a6c0:	2903      	cmp	r1, #3
 800a6c2:	f43f a9db 	beq.w	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	f104 0008 	add.w	r0, r4, #8
 800a6cc:	f7ff f8b6 	bl	800983c <RCCEx_PLL2_Config.part.0>
 800a6d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a6d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	f43f ae69 	beq.w	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800a6dc:	462e      	mov	r6, r5
 800a6de:	f7ff b9cf 	b.w	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6e2:	4952      	ldr	r1, [pc, #328]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a6e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a6e6:	f001 0103 	and.w	r1, r1, #3
 800a6ea:	2903      	cmp	r1, #3
 800a6ec:	f43f a9c6 	beq.w	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a6f6:	f7ff f913 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a6fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a6fc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800a700:	e652      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a702:	494a      	ldr	r1, [pc, #296]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a704:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a706:	f001 0103 	and.w	r1, r1, #3
 800a70a:	2903      	cmp	r1, #3
 800a70c:	f43f adfb 	beq.w	800a306 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800a710:	2102      	movs	r1, #2
 800a712:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a716:	f7ff f903 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a71a:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a71c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a720:	2e00      	cmp	r6, #0
 800a722:	f47f a99f 	bne.w	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a726:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800a728:	f7ff b995 	b.w	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x52>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a72c:	493f      	ldr	r1, [pc, #252]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a72e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a730:	f001 0103 	and.w	r1, r1, #3
 800a734:	2903      	cmp	r1, #3
 800a736:	d03a      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800a738:	2101      	movs	r1, #1
 800a73a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a73e:	f7ff f8ef 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a742:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a744:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a748:	2d00      	cmp	r5, #0
 800a74a:	f47f ab5f 	bne.w	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a74e:	e6c5      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xad8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a750:	4936      	ldr	r1, [pc, #216]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a752:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a754:	f001 0103 	and.w	r1, r1, #3
 800a758:	2903      	cmp	r1, #3
 800a75a:	d024      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800a75c:	2101      	movs	r1, #1
 800a75e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a762:	f7ff f8dd 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a766:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a768:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a76c:	2d00      	cmp	r5, #0
 800a76e:	f47f ab28 	bne.w	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 800a772:	e6c1      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a774:	492d      	ldr	r1, [pc, #180]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a776:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a778:	f001 0103 	and.w	r1, r1, #3
 800a77c:	2903      	cmp	r1, #3
 800a77e:	f43f aafd 	beq.w	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a782:	2101      	movs	r1, #1
 800a784:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a788:	f7ff f8ca 	bl	8009920 <RCCEx_PLL3_Config.part.0>
 800a78c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a78e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a792:	2d00      	cmp	r5, #0
 800a794:	f47f aeb9 	bne.w	800a50a <HAL_RCCEx_PeriphCLKConfig+0xb06>
 800a798:	e5cd      	b.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = HAL_TIMEOUT;
 800a79a:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a79c:	462e      	mov	r6, r5
 800a79e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a7a2:	f7ff baaf 	b.w	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a7a6:	2601      	movs	r6, #1
 800a7a8:	4635      	mov	r5, r6
 800a7aa:	f7ff bb0b 	b.w	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a7ae:	2601      	movs	r6, #1
 800a7b0:	4635      	mov	r5, r6
 800a7b2:	f7ff bb2c 	b.w	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
        status = HAL_ERROR;
 800a7b6:	2601      	movs	r6, #1
 800a7b8:	f7ff bbac 	b.w	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x510>
        status = HAL_ERROR;
 800a7bc:	2601      	movs	r6, #1
 800a7be:	f7ff bbb7 	b.w	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a7c2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a7ca:	f7ff bbb1 	b.w	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a7ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
        status = HAL_ERROR;
 800a7d2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a7d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a7d8:	f7ff bb9c 	b.w	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a7dc:	2601      	movs	r6, #1
 800a7de:	4635      	mov	r5, r6
 800a7e0:	f7ff ba8d 	b.w	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        tickstart = HAL_GetTick();
 800a7e4:	f7f8 fe84 	bl	80034f0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7e8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>
        tickstart = HAL_GetTick();
 800a7ec:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7ee:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7f2:	e004      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7f4:	f7f8 fe7c 	bl	80034f0 <HAL_GetTick>
 800a7f8:	1bc0      	subs	r0, r0, r7
 800a7fa:	4548      	cmp	r0, r9
 800a7fc:	d810      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7fe:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a802:	079b      	lsls	r3, r3, #30
 800a804:	d5f6      	bpl.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a806:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800a80a:	e529      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800a80c:	4807      	ldr	r0, [pc, #28]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a80e:	4a08      	ldr	r2, [pc, #32]	@ (800a830 <HAL_RCCEx_PeriphCLKConfig+0xe2c>)
 800a810:	6901      	ldr	r1, [r0, #16]
 800a812:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a816:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800a81a:	430a      	orrs	r2, r1
 800a81c:	6102      	str	r2, [r0, #16]
 800a81e:	e52a      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x872>
        status = ret;
 800a820:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a822:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a826:	4635      	mov	r5, r6
 800a828:	f7ff ba6c 	b.w	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a82c:	58024400 	.word	0x58024400
 800a830:	00ffffcf 	.word	0x00ffffcf

0800a834 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a834:	4a47      	ldr	r2, [pc, #284]	@ (800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800a836:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a838:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a83a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a83c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800a83e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a842:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a846:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 800a848:	d05b      	beq.n	800a902 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a84a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a84e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a852:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a856:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a85a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800a85e:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a864:	ee06 1a90 	vmov	s13, r1
 800a868:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800a86c:	d003      	beq.n	800a876 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800a86e:	2c02      	cmp	r4, #2
 800a870:	d06a      	beq.n	800a948 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800a872:	2c00      	cmp	r4, #0
 800a874:	d04a      	beq.n	800a90c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a876:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800a958 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800a87a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a87e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a884:	ee07 3a90 	vmov	s15, r3
 800a888:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a894:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a898:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a89c:	4a2d      	ldr	r2, [pc, #180]	@ (800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 800a89e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a8a2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a8a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a8a8:	ee07 3a10 	vmov	s14, r3
 800a8ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a8b0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a8b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a8b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a8ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a8be:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a8c2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a8c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a8c8:	ee07 3a10 	vmov	s14, r3
 800a8cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a8d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a8d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a8d8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a8dc:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a8e0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a8e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a8e6:	ee06 3a90 	vmov	s13, r3
 800a8ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a8ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a8f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a8f6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a8fa:	ee17 3a90 	vmov	r3, s15
 800a8fe:	6083      	str	r3, [r0, #8]
}
 800a900:	4770      	bx	lr
 800a902:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a904:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a908:	6083      	str	r3, [r0, #8]
}
 800a90a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a90c:	6813      	ldr	r3, [r2, #0]
 800a90e:	069b      	lsls	r3, r3, #26
 800a910:	d51d      	bpl.n	800a94e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a912:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a914:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a918:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a91a:	4910      	ldr	r1, [pc, #64]	@ (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800a91c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a920:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a924:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	ee06 1a10 	vmov	s12, r1
 800a92e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a932:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a936:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a93a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800a93e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800a942:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a946:	e7a9      	b.n	800a89c <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a948:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a960 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800a94c:	e795      	b.n	800a87a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a94e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800a952:	e792      	b.n	800a87a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800a954:	58024400 	.word	0x58024400
 800a958:	4a742400 	.word	0x4a742400
 800a95c:	03d09000 	.word	0x03d09000
 800a960:	4bbebc20 	.word	0x4bbebc20
 800a964:	4c742400 	.word	0x4c742400

0800a968 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a968:	4a47      	ldr	r2, [pc, #284]	@ (800aa88 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800a96a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a96c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a96e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a970:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800a972:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a976:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a97a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 800a97c:	d05b      	beq.n	800aa36 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a97e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a982:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a986:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a98a:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a98e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800a992:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a998:	ee06 1a90 	vmov	s13, r1
 800a99c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800a9a0:	d003      	beq.n	800a9aa <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800a9a2:	2c02      	cmp	r4, #2
 800a9a4:	d06a      	beq.n	800aa7c <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800a9a6:	2c00      	cmp	r4, #0
 800a9a8:	d04a      	beq.n	800aa40 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9aa:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800aa8c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800a9ae:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a9b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b8:	ee07 3a90 	vmov	s15, r3
 800a9bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a9cc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a9d0:	4a2d      	ldr	r2, [pc, #180]	@ (800aa88 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 800a9d2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a9d6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a9d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a9dc:	ee07 3a10 	vmov	s14, r3
 800a9e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a9e4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a9e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a9ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a9ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a9f2:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a9f6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a9f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a9fc:	ee07 3a10 	vmov	s14, r3
 800aa00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa04:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aa08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa0c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800aa10:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aa14:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800aa16:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800aa1a:	ee06 3a90 	vmov	s13, r3
 800aa1e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800aa22:	ee76 6a86 	vadd.f32	s13, s13, s12
 800aa26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800aa2a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800aa2e:	ee17 3a90 	vmov	r3, s15
 800aa32:	6083      	str	r3, [r0, #8]
}
 800aa34:	4770      	bx	lr
 800aa36:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aa38:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aa3c:	6083      	str	r3, [r0, #8]
}
 800aa3e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa40:	6813      	ldr	r3, [r2, #0]
 800aa42:	069b      	lsls	r3, r3, #26
 800aa44:	d51d      	bpl.n	800aa82 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa46:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa48:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800aa4c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa4e:	4910      	ldr	r1, [pc, #64]	@ (800aa90 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800aa50:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa54:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa58:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	ee06 1a10 	vmov	s12, r1
 800aa62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa66:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800aa6a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800aa6e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800aa72:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800aa76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa7a:	e7a9      	b.n	800a9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa7c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800aa80:	e795      	b.n	800a9ae <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa82:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800aa98 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800aa86:	e792      	b.n	800a9ae <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800aa88:	58024400 	.word	0x58024400
 800aa8c:	4a742400 	.word	0x4a742400
 800aa90:	03d09000 	.word	0x03d09000
 800aa94:	4bbebc20 	.word	0x4bbebc20
 800aa98:	4c742400 	.word	0x4c742400

0800aa9c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa9c:	4a47      	ldr	r2, [pc, #284]	@ (800abbc <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 800aa9e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaa0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aaa2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aaa4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 800aaa6:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aaaa:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aaae:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 800aab0:	d05b      	beq.n	800ab6a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aab2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aab6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaba:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aabe:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aac2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800aac6:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aac8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aacc:	ee06 1a90 	vmov	s13, r1
 800aad0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800aad4:	d06f      	beq.n	800abb6 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 800aad6:	2c02      	cmp	r4, #2
 800aad8:	d06a      	beq.n	800abb0 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 800aada:	2c00      	cmp	r4, #0
 800aadc:	d04a      	beq.n	800ab74 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aade:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800abc0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800aae2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800aae6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800aae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800aaf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ab00:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ab04:	4a2d      	ldr	r2, [pc, #180]	@ (800abbc <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 800ab06:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800ab0a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ab0c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ab10:	ee07 3a10 	vmov	s14, r3
 800ab14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ab18:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ab1a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ab1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ab22:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ab26:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ab2a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ab2c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ab30:	ee07 3a10 	vmov	s14, r3
 800ab34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ab38:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ab3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ab40:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800ab44:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ab48:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ab4a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ab4e:	ee06 3a90 	vmov	s13, r3
 800ab52:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ab56:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ab5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ab5e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800ab62:	ee17 3a90 	vmov	r3, s15
 800ab66:	6083      	str	r3, [r0, #8]
}
 800ab68:	4770      	bx	lr
 800ab6a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ab6c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ab70:	6083      	str	r3, [r0, #8]
}
 800ab72:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab74:	6813      	ldr	r3, [r2, #0]
 800ab76:	069b      	lsls	r3, r3, #26
 800ab78:	d5b1      	bpl.n	800aade <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab7a:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab7c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800ab80:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab82:	4910      	ldr	r1, [pc, #64]	@ (800abc4 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 800ab84:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab88:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab8c:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	ee06 1a10 	vmov	s12, r1
 800ab96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab9a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800ab9e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800aba2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800aba6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800abaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abae:	e7a9      	b.n	800ab04 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abb0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800abc8 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 800abb4:	e795      	b.n	800aae2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abb6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800abcc <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800abba:	e792      	b.n	800aae2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800abbc:	58024400 	.word	0x58024400
 800abc0:	4c742400 	.word	0x4c742400
 800abc4:	03d09000 	.word	0x03d09000
 800abc8:	4bbebc20 	.word	0x4bbebc20
 800abcc:	4a742400 	.word	0x4a742400

0800abd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800abd0:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800abd4:	430b      	orrs	r3, r1
{
 800abd6:	b500      	push	{lr}
 800abd8:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800abda:	d071      	beq.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800abdc:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800abe0:	430b      	orrs	r3, r1
 800abe2:	d033      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800abe4:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800abe8:	430b      	orrs	r3, r1
 800abea:	f000 80c6 	beq.w	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800abee:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800abf2:	430b      	orrs	r3, r1
 800abf4:	d078      	beq.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800abf6:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800abfa:	430b      	orrs	r3, r1
 800abfc:	f000 80d3 	beq.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac00:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800ac04:	430b      	orrs	r3, r1
 800ac06:	f000 812c 	beq.w	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac0a:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800ac0e:	430b      	orrs	r3, r1
 800ac10:	f000 8140 	beq.w	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ac14:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	f000 8103 	beq.w	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac1e:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800ac22:	4308      	orrs	r0, r1
 800ac24:	d137      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ac26:	4b96      	ldr	r3, [pc, #600]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ac28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 800ac2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac32:	d07f      	beq.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 800ac34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac38:	f000 8167 	beq.w	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800ac3c:	bb5b      	cbnz	r3, 800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac3e:	4b90      	ldr	r3, [pc, #576]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800ac46:	d038      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = HSE_VALUE;
 800ac48:	488e      	ldr	r0, [pc, #568]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac4a:	e036      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800ac4c:	4a8c      	ldr	r2, [pc, #560]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ac4e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ac50:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 800ac54:	2b80      	cmp	r3, #128	@ 0x80
 800ac56:	f000 808b 	beq.w	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800ac5a:	d920      	bls.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 800ac5c:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac5e:	d02b      	beq.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ac60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac64:	d117      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac66:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac68:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac6e:	0749      	lsls	r1, r1, #29
 800ac70:	d502      	bpl.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 80c9 	beq.w	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac78:	4a81      	ldr	r2, [pc, #516]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ac7a:	6812      	ldr	r2, [r2, #0]
 800ac7c:	05d0      	lsls	r0, r2, #23
 800ac7e:	d503      	bpl.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800ac80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac84:	f000 80cc 	beq.w	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac88:	4a7d      	ldr	r2, [pc, #500]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ac8a:	6812      	ldr	r2, [r2, #0]
 800ac8c:	0391      	lsls	r1, r2, #14
 800ac8e:	d502      	bpl.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800ac90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac94:	d0d8      	beq.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800ac96:	2000      	movs	r0, #0
}
 800ac98:	b005      	add	sp, #20
 800ac9a:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d03f      	beq.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800aca2:	2b40      	cmp	r3, #64	@ 0x40
 800aca4:	d1f7      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aca6:	6810      	ldr	r0, [r2, #0]
 800aca8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800acac:	d005      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acae:	a801      	add	r0, sp, #4
 800acb0:	f7ff fdc0 	bl	800a834 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acb4:	9801      	ldr	r0, [sp, #4]
 800acb6:	e000      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = EXTERNAL_CLOCK_VALUE;
 800acb8:	4873      	ldr	r0, [pc, #460]	@ (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
}
 800acba:	b005      	add	sp, #20
 800acbc:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800acc0:	4b6f      	ldr	r3, [pc, #444]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800acc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc4:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800acc8:	2b04      	cmp	r3, #4
 800acca:	d8e4      	bhi.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800accc:	a201      	add	r2, pc, #4	@ (adr r2, 800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 800acce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800ad35 	.word	0x0800ad35
 800acd8:	0800ad41 	.word	0x0800ad41
 800acdc:	0800ad51 	.word	0x0800ad51
 800ace0:	0800acb9 	.word	0x0800acb9
 800ace4:	0800ad4d 	.word	0x0800ad4d
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ace8:	4a65      	ldr	r2, [pc, #404]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800acea:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800acec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 800acf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acf4:	d03c      	beq.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800acf6:	d935      	bls.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800acf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800acfc:	d0dc      	beq.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800acfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad02:	d1c8      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad04:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad06:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad0c:	0752      	lsls	r2, r2, #29
 800ad0e:	d5b3      	bpl.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1b1      	bne.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad14:	4b5a      	ldr	r3, [pc, #360]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad16:	485d      	ldr	r0, [pc, #372]	@ (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ad1e:	40d8      	lsrs	r0, r3
 800ad20:	e7cb      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad22:	6810      	ldr	r0, [r2, #0]
 800ad24:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ad28:	d0c7      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad2a:	a801      	add	r0, sp, #4
 800ad2c:	f7ff feb6 	bl	800aa9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad30:	9802      	ldr	r0, [sp, #8]
 800ad32:	e7c2      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad34:	4b52      	ldr	r3, [pc, #328]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ad3c:	d0bd      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800ad3e:	e7f4      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad40:	4b4f      	ldr	r3, [pc, #316]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ad48:	d0b7      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800ad4a:	e7b0      	b.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad4c:	4a4c      	ldr	r2, [pc, #304]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad4e:	e78a      	b.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad50:	4b4b      	ldr	r3, [pc, #300]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800ad58:	d0af      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad5a:	a801      	add	r0, sp, #4
 800ad5c:	f7ff fe04 	bl	800a968 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad60:	9801      	ldr	r0, [sp, #4]
 800ad62:	e7aa      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0dc      	beq.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800ad68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad6c:	d09b      	beq.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800ad6e:	e792      	b.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad70:	6810      	ldr	r0, [r2, #0]
 800ad72:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800ad76:	d0a0      	beq.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800ad78:	e7ef      	b.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800ad7a:	4a41      	ldr	r2, [pc, #260]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad7c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ad7e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
    switch (saiclocksource)
 800ad82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad86:	d0f3      	beq.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800ad88:	d805      	bhi.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0c9      	beq.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800ad8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad92:	d088      	beq.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800ad94:	e77f      	b.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800ad96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ad9a:	d08d      	beq.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ad9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada0:	f43f af61 	beq.w	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800ada4:	e777      	b.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ada6:	4a36      	ldr	r2, [pc, #216]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ada8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800adaa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800adae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adb2:	d025      	beq.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800adb4:	d80f      	bhi.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800adb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adba:	d048      	beq.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800adbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc0:	d116      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adc2:	6810      	ldr	r0, [r2, #0]
 800adc4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800adc8:	f43f af77 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adcc:	a801      	add	r0, sp, #4
 800adce:	f7ff fdcb 	bl	800a968 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800add2:	9802      	ldr	r0, [sp, #8]
 800add4:	e771      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800add6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800adda:	d01c      	beq.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800addc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ade0:	f47f af59 	bne.w	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ade4:	6810      	ldr	r0, [r2, #0]
 800ade6:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800adea:	f43f af66 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800adee:	e72b      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f47f af50 	bne.w	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
}
 800adf6:	b005      	add	sp, #20
 800adf8:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800adfc:	f7fe bcd6 	b.w	80097ac <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae00:	6810      	ldr	r0, [r2, #0]
 800ae02:	f010 0004 	ands.w	r0, r0, #4
 800ae06:	f43f af58 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae0a:	6813      	ldr	r3, [r2, #0]
 800ae0c:	481f      	ldr	r0, [pc, #124]	@ (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ae0e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ae12:	40d8      	lsrs	r0, r3
 800ae14:	e751      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae16:	6810      	ldr	r0, [r2, #0]
 800ae18:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800ae1c:	f43f af4d 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = CSI_VALUE;
 800ae20:	481b      	ldr	r0, [pc, #108]	@ (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ae22:	e74a      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ae24:	4a16      	ldr	r2, [pc, #88]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ae26:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ae28:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800ae2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae30:	d072      	beq.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800ae32:	d83e      	bhi.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 800ae34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae38:	d067      	beq.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800ae3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae3e:	d14b      	bne.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae40:	4b0f      	ldr	r3, [pc, #60]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ae42:	6818      	ldr	r0, [r3, #0]
 800ae44:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800ae48:	f43f af37 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800ae4c:	e7be      	b.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae4e:	6810      	ldr	r0, [r2, #0]
 800ae50:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ae54:	f43f af31 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae58:	a801      	add	r0, sp, #4
 800ae5a:	f7ff fceb 	bl	800a834 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae5e:	9802      	ldr	r0, [sp, #8]
 800ae60:	e72b      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae62:	4a07      	ldr	r2, [pc, #28]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ae64:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ae66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 800ae6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae6e:	d042      	beq.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800ae70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae74:	f43f af46 	beq.w	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f47f af0c 	bne.w	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800ae7e:	e712      	b.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800ae80:	58024400 	.word	0x58024400
 800ae84:	017d7840 	.word	0x017d7840
 800ae88:	00bb8000 	.word	0x00bb8000
 800ae8c:	03d09000 	.word	0x03d09000
 800ae90:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae94:	4b23      	ldr	r3, [pc, #140]	@ (800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800ae96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800ae98:	03d2      	lsls	r2, r2, #15
 800ae9a:	f57f af4c 	bpl.w	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae9e:	6818      	ldr	r0, [r3, #0]
 800aea0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800aea4:	f43f af09 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aea8:	a801      	add	r0, sp, #4
 800aeaa:	f7ff fcc3 	bl	800a834 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aeae:	9803      	ldr	r0, [sp, #12]
 800aeb0:	e703      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800aeb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aeb6:	f43f aec2 	beq.w	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800aeba:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800aebe:	f43f aefb 	beq.w	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800aec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aec6:	f47f aee6 	bne.w	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aeca:	4b16      	ldr	r3, [pc, #88]	@ (800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800aed2:	f43f aef2 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800aed6:	e7a3      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    switch (srcclk)
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f47f aedc 	bne.w	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800aede:	f7fe fc25 	bl	800972c <HAL_RCC_GetHCLKFreq>
 800aee2:	4b10      	ldr	r3, [pc, #64]	@ (800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800aee4:	4a10      	ldr	r2, [pc, #64]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800aeec:	5cd3      	ldrb	r3, [r2, r3]
 800aeee:	f003 031f 	and.w	r3, r3, #31
 800aef2:	40d8      	lsrs	r0, r3
        break;
 800aef4:	e6e1      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aef6:	6810      	ldr	r0, [r2, #0]
 800aef8:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800aefc:	f43f aedd 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af00:	a801      	add	r0, sp, #4
 800af02:	f7ff fd31 	bl	800a968 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af06:	9803      	ldr	r0, [sp, #12]
 800af08:	e6d7      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af0a:	4b06      	ldr	r3, [pc, #24]	@ (800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800af12:	f43f aed2 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800af16:	e79f      	b.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af18:	6810      	ldr	r0, [r2, #0]
 800af1a:	f010 0004 	ands.w	r0, r0, #4
 800af1e:	f43f aecc 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800af22:	e6f7      	b.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800af24:	58024400 	.word	0x58024400
 800af28:	080104c0 	.word	0x080104c0

0800af2c <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800af2c:	6803      	ldr	r3, [r0, #0]
{
 800af2e:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800af30:	689c      	ldr	r4, [r3, #8]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800af32:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800af34:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800af36:	f3c0 000e 	ubfx	r0, r0, #0, #15

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800af3a:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800af3e:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800af42:	f3c3 4506 	ubfx	r5, r3, #16, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800af46:	e9c1 4001 	strd	r4, r0, [r1, #4]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800af4a:	f3c3 4405 	ubfx	r4, r3, #16, #6
 800af4e:	2000      	movs	r0, #0
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800af50:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800af54:	f364 0007 	bfi	r0, r4, #0, #8
 800af58:	f36e 200f 	bfi	r0, lr, #8, #8
 800af5c:	f36c 4017 	bfi	r0, ip, #16, #8
 800af60:	f363 601f 	bfi	r0, r3, #24, #8
 800af64:	6008      	str	r0, [r1, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800af66:	b9da      	cbnz	r2, 800afa0 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800af68:	ea4f 131e 	mov.w	r3, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 800af6c:	f00e 0e0f 	and.w	lr, lr, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800af70:	0924      	lsrs	r4, r4, #4
  return (tmp + (Value & 0x0FU));
 800af72:	f005 050f 	and.w	r5, r5, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800af76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800af7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & 0x0FU));
 800af7e:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800af82:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 800af86:	f00c 0c0f 	and.w	ip, ip, #15
 800af8a:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800af8e:	f881 e001 	strb.w	lr, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800af92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800af96:	700d      	strb	r5, [r1, #0]
  return (tmp + (Value & 0x0FU));
 800af98:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800af9c:	f881 c002 	strb.w	ip, [r1, #2]
}
 800afa0:	2000      	movs	r0, #0
 800afa2:	bd30      	pop	{r4, r5, pc}

0800afa4 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800afa4:	6803      	ldr	r3, [r0, #0]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800afa6:	2000      	movs	r0, #0
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800afa8:	685b      	ldr	r3, [r3, #4]
{
 800afaa:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800afac:	f3c3 3e42 	ubfx	lr, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800afb0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800afb4:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800afb8:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800afbc:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800afc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800afc4:	f36e 200f 	bfi	r0, lr, #8, #8
 800afc8:	f363 4017 	bfi	r0, r3, #16, #8
 800afcc:	f36c 601f 	bfi	r0, ip, #24, #8
 800afd0:	6008      	str	r0, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800afd2:	b9d2      	cbnz	r2, 800b00a <HAL_RTC_GetDate+0x66>
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800afd4:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & 0x0FU));
 800afd6:	f003 030f 	and.w	r3, r3, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800afda:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 800afde:	f004 040f 	and.w	r4, r4, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800afe2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800afe6:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (Value & 0x0FU));
 800afea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800afee:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aff2:	708b      	strb	r3, [r1, #2]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800aff4:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 800aff8:	f00c 0c0f 	and.w	ip, ip, #15
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800affc:	704c      	strb	r4, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800affe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800b002:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b006:	f881 c003 	strb.w	ip, [r1, #3]
}
 800b00a:	2000      	movs	r0, #0
 800b00c:	bd10      	pop	{r4, pc}
 800b00e:	bf00      	nop

0800b010 <RTC_ExitInitMode>:
{
 800b010:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b012:	4b20      	ldr	r3, [pc, #128]	@ (800b094 <RTC_ExitInitMode+0x84>)
{
 800b014:	4604      	mov	r4, r0
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b016:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b01e:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b020:	699a      	ldr	r2, [r3, #24]
 800b022:	0690      	lsls	r0, r2, #26
 800b024:	d411      	bmi.n	800b04a <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b026:	4b1c      	ldr	r3, [pc, #112]	@ (800b098 <RTC_ExitInitMode+0x88>)
 800b028:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 800b02a:	f7f8 fa61 	bl	80034f0 <HAL_GetTick>
 800b02e:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b030:	e005      	b.n	800b03e <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b032:	f7f8 fa5d 	bl	80034f0 <HAL_GetTick>
 800b036:	1b43      	subs	r3, r0, r5
 800b038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b03c:	d825      	bhi.n	800b08a <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	069a      	lsls	r2, r3, #26
 800b044:	d5f5      	bpl.n	800b032 <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800b046:	2000      	movs	r0, #0
}
 800b048:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b04a:	699a      	ldr	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b04c:	4812      	ldr	r0, [pc, #72]	@ (800b098 <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b04e:	f022 0220 	bic.w	r2, r2, #32
 800b052:	619a      	str	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b054:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 800b056:	f7f8 fa4b 	bl	80034f0 <HAL_GetTick>
 800b05a:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b05c:	e005      	b.n	800b06a <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b05e:	f7f8 fa47 	bl	80034f0 <HAL_GetTick>
 800b062:	1b43      	subs	r3, r0, r5
 800b064:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b068:	d80a      	bhi.n	800b080 <RTC_ExitInitMode+0x70>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	069b      	lsls	r3, r3, #26
 800b070:	d5f5      	bpl.n	800b05e <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 800b072:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b074:	4a07      	ldr	r2, [pc, #28]	@ (800b094 <RTC_ExitInitMode+0x84>)
 800b076:	6993      	ldr	r3, [r2, #24]
 800b078:	f043 0320 	orr.w	r3, r3, #32
 800b07c:	6193      	str	r3, [r2, #24]
}
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b080:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 800b082:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b084:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800b088:	e7f4      	b.n	800b074 <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 800b08c:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b08e:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	58004000 	.word	0x58004000
 800b098:	0001005f 	.word	0x0001005f

0800b09c <HAL_RTC_Init>:
  if(hrtc != NULL)
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d046      	beq.n	800b12e <HAL_RTC_Init+0x92>
{
 800b0a0:	b570      	push	{r4, r5, r6, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b0a2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d039      	beq.n	800b124 <HAL_RTC_Init+0x88>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b0b0:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b0b2:	6822      	ldr	r2, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b0b4:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b0b8:	68d3      	ldr	r3, [r2, #12]
 800b0ba:	06db      	lsls	r3, r3, #27
 800b0bc:	d504      	bpl.n	800b0c8 <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0c8:	21ca      	movs	r1, #202	@ 0xca
 800b0ca:	2353      	movs	r3, #83	@ 0x53
 800b0cc:	6251      	str	r1, [r2, #36]	@ 0x24
 800b0ce:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b0d0:	68d5      	ldr	r5, [r2, #12]
 800b0d2:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 800b0d6:	d02c      	beq.n	800b132 <HAL_RTC_Init+0x96>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b0d8:	6990      	ldr	r0, [r2, #24]
 800b0da:	4929      	ldr	r1, [pc, #164]	@ (800b180 <HAL_RTC_Init+0xe4>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b0dc:	6863      	ldr	r3, [r4, #4]
 800b0de:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b0e0:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b0e2:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b0e4:	6191      	str	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b0e6:	69a1      	ldr	r1, [r4, #24]
 800b0e8:	6990      	ldr	r0, [r2, #24]
 800b0ea:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b0ec:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b0ee:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 800b0f0:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b0f2:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b0f4:	68e3      	ldr	r3, [r4, #12]
 800b0f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b0fa:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 800b0fc:	f7ff ff88 	bl	800b010 <RTC_ExitInitMode>
      if(status == HAL_OK)
 800b100:	2800      	cmp	r0, #0
 800b102:	d133      	bne.n	800b16c <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b104:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b106:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b108:	6991      	ldr	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b10a:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b10e:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b112:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b114:	6191      	str	r1, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b116:	21ff      	movs	r1, #255	@ 0xff
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b118:	4303      	orrs	r3, r0
 800b11a:	6990      	ldr	r0, [r2, #24]
 800b11c:	4303      	orrs	r3, r0
 800b11e:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b120:	6251      	str	r1, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 800b122:	e7cc      	b.n	800b0be <HAL_RTC_Init+0x22>
      hrtc->Lock = HAL_UNLOCKED;
 800b124:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
      HAL_RTC_MspInit(hrtc);
 800b128:	f7f7 ff9e 	bl	8003068 <HAL_RTC_MspInit>
 800b12c:	e7c0      	b.n	800b0b0 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b12e:	2001      	movs	r0, #1
}
 800b130:	4770      	bx	lr
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b132:	68d3      	ldr	r3, [r2, #12]
 800b134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b138:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800b13a:	f7f8 f9d9 	bl	80034f0 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800b13e:	4629      	mov	r1, r5
    tickstart = HAL_GetTick();
 800b140:	4606      	mov	r6, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b142:	e008      	b.n	800b156 <HAL_RTC_Init+0xba>
 800b144:	2903      	cmp	r1, #3
 800b146:	d00d      	beq.n	800b164 <HAL_RTC_Init+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b148:	f7f8 f9d2 	bl	80034f0 <HAL_GetTick>
 800b14c:	1b80      	subs	r0, r0, r6
 800b14e:	4629      	mov	r1, r5
 800b150:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b154:	d80e      	bhi.n	800b174 <HAL_RTC_Init+0xd8>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	68d5      	ldr	r5, [r2, #12]
 800b15a:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 800b15e:	d0f1      	beq.n	800b144 <HAL_RTC_Init+0xa8>
      if (status == HAL_OK)
 800b160:	2900      	cmp	r1, #0
 800b162:	d0b9      	beq.n	800b0d8 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b164:	23ff      	movs	r3, #255	@ 0xff
 800b166:	2003      	movs	r0, #3
 800b168:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800b16a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	22ff      	movs	r2, #255	@ 0xff
 800b170:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b172:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b174:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800b176:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b178:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 800b17c:	e7eb      	b.n	800b156 <HAL_RTC_Init+0xba>
 800b17e:	bf00      	nop
 800b180:	fb8fffbf 	.word	0xfb8fffbf

0800b184 <HAL_RTC_SetTime>:
{
 800b184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 800b188:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d065      	beq.n	800b25c <HAL_RTC_SetTime+0xd8>
 800b190:	2301      	movs	r3, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b192:	6805      	ldr	r5, [r0, #0]
 800b194:	4681      	mov	r9, r0
 800b196:	460f      	mov	r7, r1
  __HAL_LOCK(hrtc);
 800b198:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b19c:	2302      	movs	r3, #2
 800b19e:	4616      	mov	r6, r2
 800b1a0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1a4:	23ca      	movs	r3, #202	@ 0xca
 800b1a6:	626b      	str	r3, [r5, #36]	@ 0x24
 800b1a8:	2353      	movs	r3, #83	@ 0x53
 800b1aa:	626b      	str	r3, [r5, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b1ac:	68ec      	ldr	r4, [r5, #12]
 800b1ae:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800b1b2:	d030      	beq.n	800b216 <HAL_RTC_SetTime+0x92>
    if(Format == RTC_FORMAT_BIN)
 800b1b4:	2e00      	cmp	r6, #0
 800b1b6:	d154      	bne.n	800b262 <HAL_RTC_SetTime+0xde>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b1b8:	69a8      	ldr	r0, [r5, #24]
 800b1ba:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800b1be:	d07d      	beq.n	800b2bc <HAL_RTC_SetTime+0x138>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b1c0:	78f8      	ldrb	r0, [r7, #3]
 800b1c2:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b1c4:	783b      	ldrb	r3, [r7, #0]
  while (bcdlow >= 10U)
 800b1c6:	2b09      	cmp	r3, #9
 800b1c8:	d908      	bls.n	800b1dc <HAL_RTC_SetTime+0x58>
  uint32_t bcdhigh = 0U;
 800b1ca:	2200      	movs	r2, #0
    bcdlow -= 10U;
 800b1cc:	3b0a      	subs	r3, #10
    bcdhigh++;
 800b1ce:	3201      	adds	r2, #1
    bcdlow -= 10U;
 800b1d0:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800b1d2:	2b09      	cmp	r3, #9
 800b1d4:	d8fa      	bhi.n	800b1cc <HAL_RTC_SetTime+0x48>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b1d6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b1da:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b1dc:	787a      	ldrb	r2, [r7, #1]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b1de:	041b      	lsls	r3, r3, #16
  while (bcdlow >= 10U)
 800b1e0:	2a09      	cmp	r2, #9
 800b1e2:	d908      	bls.n	800b1f6 <HAL_RTC_SetTime+0x72>
  uint32_t bcdhigh = 0U;
 800b1e4:	2100      	movs	r1, #0
    bcdlow -= 10U;
 800b1e6:	3a0a      	subs	r2, #10
    bcdhigh++;
 800b1e8:	3101      	adds	r1, #1
    bcdlow -= 10U;
 800b1ea:	b2d2      	uxtb	r2, r2
  while (bcdlow >= 10U)
 800b1ec:	2a09      	cmp	r2, #9
 800b1ee:	d8fa      	bhi.n	800b1e6 <HAL_RTC_SetTime+0x62>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b1f0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800b1f4:	b2d2      	uxtb	r2, r2
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b1f6:	78b9      	ldrb	r1, [r7, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b1f8:	0212      	lsls	r2, r2, #8
  while (bcdlow >= 10U)
 800b1fa:	2909      	cmp	r1, #9
 800b1fc:	d907      	bls.n	800b20e <HAL_RTC_SetTime+0x8a>
    bcdlow -= 10U;
 800b1fe:	390a      	subs	r1, #10
    bcdhigh++;
 800b200:	3601      	adds	r6, #1
    bcdlow -= 10U;
 800b202:	b2c9      	uxtb	r1, r1
  while (bcdlow >= 10U)
 800b204:	2909      	cmp	r1, #9
 800b206:	d8fa      	bhi.n	800b1fe <HAL_RTC_SetTime+0x7a>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b208:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800b20c:	b2c9      	uxtb	r1, r1
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b20e:	4303      	orrs	r3, r0
 800b210:	4313      	orrs	r3, r2
 800b212:	430b      	orrs	r3, r1
 800b214:	e033      	b.n	800b27e <HAL_RTC_SetTime+0xfa>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b216:	68eb      	ldr	r3, [r5, #12]
 800b218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b21c:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800b21e:	f7f8 f967 	bl	80034f0 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800b222:	4622      	mov	r2, r4
    tickstart = HAL_GetTick();
 800b224:	4680      	mov	r8, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b226:	e009      	b.n	800b23c <HAL_RTC_SetTime+0xb8>
 800b228:	2a03      	cmp	r2, #3
 800b22a:	d00f      	beq.n	800b24c <HAL_RTC_SetTime+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b22c:	f7f8 f960 	bl	80034f0 <HAL_GetTick>
 800b230:	eba0 0308 	sub.w	r3, r0, r8
 800b234:	4622      	mov	r2, r4
 800b236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b23a:	d83a      	bhi.n	800b2b2 <HAL_RTC_SetTime+0x12e>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b23c:	f8d9 5000 	ldr.w	r5, [r9]
 800b240:	68ec      	ldr	r4, [r5, #12]
 800b242:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800b246:	d0ef      	beq.n	800b228 <HAL_RTC_SetTime+0xa4>
  if (status == HAL_OK)
 800b248:	2a00      	cmp	r2, #0
 800b24a:	d0b3      	beq.n	800b1b4 <HAL_RTC_SetTime+0x30>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b24c:	23ff      	movs	r3, #255	@ 0xff
 800b24e:	2003      	movs	r0, #3
 800b250:	626b      	str	r3, [r5, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800b252:	2300      	movs	r3, #0
 800b254:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
}
 800b258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 800b25c:	2002      	movs	r0, #2
}
 800b25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b262:	69aa      	ldr	r2, [r5, #24]
 800b264:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 800b268:	d02a      	beq.n	800b2c0 <HAL_RTC_SetTime+0x13c>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	0592      	lsls	r2, r2, #22
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b26e:	787b      	ldrb	r3, [r7, #1]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b270:	7839      	ldrb	r1, [r7, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b272:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b278:	78b9      	ldrb	r1, [r7, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b27a:	430b      	orrs	r3, r1
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b27c:	4313      	orrs	r3, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b27e:	4a11      	ldr	r2, [pc, #68]	@ (800b2c4 <HAL_RTC_SetTime+0x140>)
    status = RTC_ExitInitMode(hrtc);
 800b280:	4648      	mov	r0, r9
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b282:	401a      	ands	r2, r3
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b284:	e9d7 3103 	ldrd	r3, r1, [r7, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b288:	602a      	str	r2, [r5, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b28a:	69aa      	ldr	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b28c:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b28e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b292:	61aa      	str	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b294:	69aa      	ldr	r2, [r5, #24]
 800b296:	4313      	orrs	r3, r2
 800b298:	61ab      	str	r3, [r5, #24]
    status = RTC_ExitInitMode(hrtc);
 800b29a:	f7ff feb9 	bl	800b010 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b29e:	f8d9 3000 	ldr.w	r3, [r9]
 800b2a2:	22ff      	movs	r2, #255	@ 0xff
 800b2a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d1d3      	bne.n	800b252 <HAL_RTC_SetTime+0xce>
    hrtc->State = HAL_RTC_STATE_READY;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 800b2b0:	e7cf      	b.n	800b252 <HAL_RTC_SetTime+0xce>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800b2b4:	461a      	mov	r2, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2b6:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 800b2ba:	e7bf      	b.n	800b23c <HAL_RTC_SetTime+0xb8>
        sTime->TimeFormat = 0x00U;
 800b2bc:	70fe      	strb	r6, [r7, #3]
 800b2be:	e781      	b.n	800b1c4 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 800b2c0:	70fa      	strb	r2, [r7, #3]
 800b2c2:	e7d4      	b.n	800b26e <HAL_RTC_SetTime+0xea>
 800b2c4:	007f7f7f 	.word	0x007f7f7f

0800b2c8 <HAL_RTC_SetDate>:
{
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800b2ca:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	f000 808b 	beq.w	800b3ea <HAL_RTC_SetDate+0x122>
 800b2d4:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2d6:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800b2d8:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2da:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_LOCK(hrtc);
 800b2de:	f885 0024 	strb.w	r0, [r5, #36]	@ 0x24
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b2e2:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b2e4:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b2e6:	f891 c001 	ldrb.w	ip, [r1, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b2ea:	0376      	lsls	r6, r6, #13
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b2ec:	7888      	ldrb	r0, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b2ee:	b1f2      	cbz	r2, 800b32e <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b2f0:	ea46 4403 	orr.w	r4, r6, r3, lsl #16
 800b2f4:	4304      	orrs	r4, r0
 800b2f6:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2fa:	682a      	ldr	r2, [r5, #0]
 800b2fc:	21ca      	movs	r1, #202	@ 0xca
 800b2fe:	2353      	movs	r3, #83	@ 0x53
 800b300:	6251      	str	r1, [r2, #36]	@ 0x24
 800b302:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b304:	68d6      	ldr	r6, [r2, #12]
 800b306:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 800b30a:	d049      	beq.n	800b3a0 <HAL_RTC_SetDate+0xd8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b30c:	4b39      	ldr	r3, [pc, #228]	@ (800b3f4 <HAL_RTC_SetDate+0x12c>)
    status = RTC_ExitInitMode(hrtc);
 800b30e:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b310:	4023      	ands	r3, r4
 800b312:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800b314:	f7ff fe7c 	bl	800b010 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	22ff      	movs	r2, #255	@ 0xff
 800b31c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800b31e:	b910      	cbnz	r0, 800b326 <HAL_RTC_SetDate+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 800b320:	2301      	movs	r3, #1
 800b322:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_UNLOCK(hrtc);
 800b326:	2300      	movs	r3, #0
 800b328:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
}
 800b32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b32e:	f01c 0f10 	tst.w	ip, #16
 800b332:	d052      	beq.n	800b3da <HAL_RTC_SetDate+0x112>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b334:	f02c 0c10 	bic.w	ip, ip, #16
  while (bcdlow >= 10U)
 800b338:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b33a:	f10c 0c0a 	add.w	ip, ip, #10
 800b33e:	fa5f fc8c 	uxtb.w	ip, ip
 800b342:	f881 c001 	strb.w	ip, [r1, #1]
  while (bcdlow >= 10U)
 800b346:	d952      	bls.n	800b3ee <HAL_RTC_SetDate+0x126>
  uint32_t bcdhigh = 0U;
 800b348:	2100      	movs	r1, #0
    bcdlow -= 10U;
 800b34a:	3b0a      	subs	r3, #10
    bcdhigh++;
 800b34c:	3101      	adds	r1, #1
    bcdlow -= 10U;
 800b34e:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800b350:	2b09      	cmp	r3, #9
 800b352:	d8fa      	bhi.n	800b34a <HAL_RTC_SetDate+0x82>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b354:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800b358:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800b35a:	f1bc 0f09 	cmp.w	ip, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b35e:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (bcdlow >= 10U)
 800b362:	d90c      	bls.n	800b37e <HAL_RTC_SetDate+0xb6>
  uint32_t bcdhigh = 0U;
 800b364:	2300      	movs	r3, #0
    bcdlow -= 10U;
 800b366:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 800b36a:	3301      	adds	r3, #1
    bcdlow -= 10U;
 800b36c:	fa5f fc8c 	uxtb.w	ip, ip
  while (bcdlow >= 10U)
 800b370:	f1bc 0f09 	cmp.w	ip, #9
 800b374:	d8f7      	bhi.n	800b366 <HAL_RTC_SetDate+0x9e>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b376:	ea4c 1303 	orr.w	r3, ip, r3, lsl #4
 800b37a:	fa5f fc83 	uxtb.w	ip, r3
  while (bcdlow >= 10U)
 800b37e:	2809      	cmp	r0, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b380:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  while (bcdlow >= 10U)
 800b384:	d907      	bls.n	800b396 <HAL_RTC_SetDate+0xce>
    bcdlow -= 10U;
 800b386:	380a      	subs	r0, #10
    bcdhigh++;
 800b388:	3201      	adds	r2, #1
    bcdlow -= 10U;
 800b38a:	b2c0      	uxtb	r0, r0
  while (bcdlow >= 10U)
 800b38c:	2809      	cmp	r0, #9
 800b38e:	d8fa      	bhi.n	800b386 <HAL_RTC_SetDate+0xbe>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b390:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b394:	b2d0      	uxtb	r0, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b396:	4334      	orrs	r4, r6
 800b398:	ea44 040c 	orr.w	r4, r4, ip
 800b39c:	4304      	orrs	r4, r0
 800b39e:	e7ac      	b.n	800b2fa <HAL_RTC_SetDate+0x32>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b3a0:	68d3      	ldr	r3, [r2, #12]
 800b3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3a6:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800b3a8:	f7f8 f8a2 	bl	80034f0 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800b3ac:	4631      	mov	r1, r6
    tickstart = HAL_GetTick();
 800b3ae:	4607      	mov	r7, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b3b0:	e008      	b.n	800b3c4 <HAL_RTC_SetDate+0xfc>
 800b3b2:	2903      	cmp	r1, #3
 800b3b4:	d00d      	beq.n	800b3d2 <HAL_RTC_SetDate+0x10a>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b3b6:	f7f8 f89b 	bl	80034f0 <HAL_GetTick>
 800b3ba:	1bc0      	subs	r0, r0, r7
 800b3bc:	4631      	mov	r1, r6
 800b3be:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b3c2:	d80d      	bhi.n	800b3e0 <HAL_RTC_SetDate+0x118>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b3c4:	682a      	ldr	r2, [r5, #0]
 800b3c6:	68d6      	ldr	r6, [r2, #12]
 800b3c8:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 800b3cc:	d0f1      	beq.n	800b3b2 <HAL_RTC_SetDate+0xea>
  if (status == HAL_OK)
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	d09c      	beq.n	800b30c <HAL_RTC_SetDate+0x44>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3d2:	23ff      	movs	r3, #255	@ 0xff
 800b3d4:	2003      	movs	r0, #3
 800b3d6:	6253      	str	r3, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 800b3d8:	e7a5      	b.n	800b326 <HAL_RTC_SetDate+0x5e>
  while (bcdlow >= 10U)
 800b3da:	2b09      	cmp	r3, #9
 800b3dc:	d8b4      	bhi.n	800b348 <HAL_RTC_SetDate+0x80>
 800b3de:	e7bc      	b.n	800b35a <HAL_RTC_SetDate+0x92>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800b3e2:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b3e4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b3e8:	e7ec      	b.n	800b3c4 <HAL_RTC_SetDate+0xfc>
  __HAL_LOCK(hrtc);
 800b3ea:	2002      	movs	r0, #2
}
 800b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b3ee:	041c      	lsls	r4, r3, #16
  while (bcdlow >= 10U)
 800b3f0:	e7b8      	b.n	800b364 <HAL_RTC_SetDate+0x9c>
 800b3f2:	bf00      	nop
 800b3f4:	00ffff3f 	.word	0x00ffff3f

0800b3f8 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800b3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	b086      	sub	sp, #24
 800b400:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b402:	f7f8 f875 	bl	80034f0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b406:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800b408:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b40a:	6828      	ldr	r0, [r5, #0]
 800b40c:	f001 fa26 	bl	800c85c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800b410:	4604      	mov	r4, r0
 800b412:	b118      	cbz	r0, 800b41c <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800b414:	4620      	mov	r0, r4
 800b416:	b006      	add	sp, #24
 800b418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b41c:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 800b41e:	6828      	ldr	r0, [r5, #0]
 800b420:	0409      	lsls	r1, r1, #16
 800b422:	f001 ff93 	bl	800d34c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800b426:	4604      	mov	r4, r0
 800b428:	2800      	cmp	r0, #0
 800b42a:	d1f3      	bne.n	800b414 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 800b42c:	f04f 32ff 	mov.w	r2, #4294967295
 800b430:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b432:	4669      	mov	r1, sp
 800b434:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 800b436:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b43a:	2230      	movs	r2, #48	@ 0x30
 800b43c:	2302      	movs	r3, #2
 800b43e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b442:	2200      	movs	r2, #0
 800b444:	2301      	movs	r3, #1
 800b446:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b44a:	f001 f9f1 	bl	800c830 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b44e:	6828      	ldr	r0, [r5, #0]
 800b450:	f002 f910 	bl	800d674 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800b454:	4604      	mov	r4, r0
 800b456:	2800      	cmp	r0, #0
 800b458:	d1dc      	bne.n	800b414 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b45a:	4682      	mov	sl, r0
 800b45c:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b45e:	f240 582a 	movw	r8, #1322	@ 0x52a
 800b462:	e004      	b.n	800b46e <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b464:	f7f8 f844 	bl	80034f0 <HAL_GetTick>
 800b468:	1b83      	subs	r3, r0, r6
 800b46a:	3301      	adds	r3, #1
 800b46c:	d024      	beq.n	800b4b8 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b46e:	6828      	ldr	r0, [r5, #0]
 800b470:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b472:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b476:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b478:	d10c      	bne.n	800b494 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b47a:	0319      	lsls	r1, r3, #12
 800b47c:	d4f2      	bmi.n	800b464 <SD_FindSCR.constprop.0+0x6c>
 800b47e:	2c00      	cmp	r4, #0
 800b480:	d1f0      	bne.n	800b464 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b482:	f001 f9bb 	bl	800c7fc <SDMMC_ReadFIFO>
 800b486:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b488:	6828      	ldr	r0, [r5, #0]
      index++;
 800b48a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b48c:	f001 f9b6 	bl	800c7fc <SDMMC_ReadFIFO>
 800b490:	4682      	mov	sl, r0
      index++;
 800b492:	e7e7      	b.n	800b464 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b494:	071a      	lsls	r2, r3, #28
 800b496:	d416      	bmi.n	800b4c6 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b498:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b49a:	079b      	lsls	r3, r3, #30
 800b49c:	d40f      	bmi.n	800b4be <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b49e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800b4a0:	f014 0420 	ands.w	r4, r4, #32
 800b4a4:	d113      	bne.n	800b4ce <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b4a6:	fa9a f28a 	rev.w	r2, sl
 800b4aa:	fa99 f389 	rev.w	r3, r9
 800b4ae:	490a      	ldr	r1, [pc, #40]	@ (800b4d8 <SD_FindSCR.constprop.0+0xe0>)
 800b4b0:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b4b2:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800b4b6:	e7ad      	b.n	800b414 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800b4b8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800b4bc:	e7aa      	b.n	800b414 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b4be:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b4c0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b4c2:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b4c4:	e7a6      	b.n	800b414 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b4c6:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b4c8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b4ca:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b4cc:	e7a2      	b.n	800b414 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b4ce:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800b4d0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b4d2:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800b4d4:	e79e      	b.n	800b414 <SD_FindSCR.constprop.0+0x1c>
 800b4d6:	bf00      	nop
 800b4d8:	18000f3a 	.word	0x18000f3a

0800b4dc <HAL_SD_ReadBlocks>:
{
 800b4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	460d      	mov	r5, r1
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4691      	mov	r9, r2
 800b4e8:	461f      	mov	r7, r3
 800b4ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 800b4ee:	f7f7 ffff 	bl	80034f0 <HAL_GetTick>
  if (NULL == pData)
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	d065      	beq.n	800b5c2 <HAL_SD_ReadBlocks+0xe6>
  if (hsd->State == HAL_SD_STATE_READY)
 800b4f6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d152      	bne.n	800b5a4 <HAL_SD_ReadBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b4fe:	eb09 0307 	add.w	r3, r9, r7
 800b502:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b504:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b506:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b508:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b50a:	d85f      	bhi.n	800b5cc <HAL_SD_ReadBlocks+0xf0>
    hsd->State = HAL_SD_STATE_BUSY;
 800b50c:	2303      	movs	r3, #3
 800b50e:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 800b510:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b512:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 800b516:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b51a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 800b51c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b51e:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b520:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b522:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b526:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b52a:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 800b52e:	bf18      	it	ne
 800b530:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b534:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b536:	027b      	lsls	r3, r7, #9
 800b538:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b53a:	2390      	movs	r3, #144	@ 0x90
 800b53c:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b540:	f001 f976 	bl	800c830 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b544:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 800b546:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b548:	68c3      	ldr	r3, [r0, #12]
 800b54a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b54e:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 800b550:	d931      	bls.n	800b5b6 <HAL_SD_ReadBlocks+0xda>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b552:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b554:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b558:	f001 fad8 	bl	800cb0c <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b55c:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b55e:	2800      	cmp	r0, #0
 800b560:	d139      	bne.n	800b5d6 <HAL_SD_ReadBlocks+0xfa>
    dataremaining = config.DataLength;
 800b562:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b566:	e005      	b.n	800b574 <HAL_SD_ReadBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b568:	f7f7 ffc2 	bl	80034f0 <HAL_GetTick>
 800b56c:	1b82      	subs	r2, r0, r6
 800b56e:	4542      	cmp	r2, r8
 800b570:	d25c      	bcs.n	800b62c <HAL_SD_ReadBlocks+0x150>
 800b572:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b574:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b576:	4610      	mov	r0, r2
 800b578:	f413 7f95 	tst.w	r3, #298	@ 0x12a
 800b57c:	d136      	bne.n	800b5ec <HAL_SD_ReadBlocks+0x110>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b57e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b580:	041a      	lsls	r2, r3, #16
 800b582:	d5f1      	bpl.n	800b568 <HAL_SD_ReadBlocks+0x8c>
 800b584:	f1b9 0f1f 	cmp.w	r9, #31
 800b588:	d9ee      	bls.n	800b568 <HAL_SD_ReadBlocks+0x8c>
 800b58a:	f105 0a20 	add.w	sl, r5, #32
 800b58e:	e000      	b.n	800b592 <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b590:	6820      	ldr	r0, [r4, #0]
 800b592:	f001 f933 	bl	800c7fc <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b596:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 800b59a:	45aa      	cmp	sl, r5
 800b59c:	d1f8      	bne.n	800b590 <HAL_SD_ReadBlocks+0xb4>
        dataremaining -= 32U;
 800b59e:	f1a9 0920 	sub.w	r9, r9, #32
 800b5a2:	e7e1      	b.n	800b568 <HAL_SD_ReadBlocks+0x8c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b5a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b5aa:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	b006      	add	sp, #24
 800b5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b5b6:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b5b8:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b5ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b5bc:	f001 f9fa 	bl	800c9b4 <SDMMC_CmdReadSingleBlock>
 800b5c0:	e7cc      	b.n	800b55c <HAL_SD_ReadBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b5c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b5c8:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b5ca:	e7ef      	b.n	800b5ac <HAL_SD_ReadBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b5cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b5d2:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800b5d4:	e7ea      	b.n	800b5ac <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5d6:	4b31      	ldr	r3, [pc, #196]	@ (800b69c <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b5d8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b5da:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b5dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b5de:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 800b5e0:	4303      	orrs	r3, r0
 800b5e2:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b5e4:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b5e8:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800b5ea:	e7df      	b.n	800b5ac <HAL_SD_ReadBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b5ec:	68d3      	ldr	r3, [r2, #12]
 800b5ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5f2:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b5f4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b5f6:	05db      	lsls	r3, r3, #23
 800b5f8:	d501      	bpl.n	800b5fe <HAL_SD_ReadBlocks+0x122>
 800b5fa:	2f01      	cmp	r7, #1
 800b5fc:	d824      	bhi.n	800b648 <HAL_SD_ReadBlocks+0x16c>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b5fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b600:	f013 0308 	ands.w	r3, r3, #8
 800b604:	d133      	bne.n	800b66e <HAL_SD_ReadBlocks+0x192>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b606:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b608:	f012 0202 	ands.w	r2, r2, #2
 800b60c:	d124      	bne.n	800b658 <HAL_SD_ReadBlocks+0x17c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b60e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b610:	f013 0320 	ands.w	r3, r3, #32
 800b614:	d037      	beq.n	800b686 <HAL_SD_ReadBlocks+0x1aa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b616:	4b21      	ldr	r3, [pc, #132]	@ (800b69c <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b618:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b61a:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b61e:	f043 0320 	orr.w	r3, r3, #32
 800b622:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b624:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b628:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b62a:	e7bf      	b.n	800b5ac <HAL_SD_ReadBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b62c:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800b62e:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b630:	481a      	ldr	r0, [pc, #104]	@ (800b69c <HAL_SD_ReadBlocks+0x1c0>)
        hsd->Context = SD_CONTEXT_NONE;
 800b632:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b634:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b636:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b638:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b63c:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800b640:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b644:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b646:	e7b2      	b.n	800b5ae <HAL_SD_ReadBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b648:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d0d7      	beq.n	800b5fe <HAL_SD_ReadBlocks+0x122>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b64e:	f001 fc61 	bl	800cf14 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800b652:	b9f0      	cbnz	r0, 800b692 <HAL_SD_ReadBlocks+0x1b6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b654:	6820      	ldr	r0, [r4, #0]
 800b656:	e7d2      	b.n	800b5fe <HAL_SD_ReadBlocks+0x122>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b658:	4a10      	ldr	r2, [pc, #64]	@ (800b69c <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b65a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b65c:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b65e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b660:	f042 0202 	orr.w	r2, r2, #2
 800b664:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b666:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b66a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b66c:	e79e      	b.n	800b5ac <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b66e:	4b0b      	ldr	r3, [pc, #44]	@ (800b69c <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b670:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b672:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b674:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b676:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b678:	f043 0308 	orr.w	r3, r3, #8
 800b67c:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b67e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b682:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b684:	e792      	b.n	800b5ac <HAL_SD_ReadBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b686:	4906      	ldr	r1, [pc, #24]	@ (800b6a0 <HAL_SD_ReadBlocks+0x1c4>)
    hsd->State = HAL_SD_STATE_READY;
 800b688:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b68a:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b68c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800b690:	e78d      	b.n	800b5ae <HAL_SD_ReadBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b692:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800b694:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b696:	4a01      	ldr	r2, [pc, #4]	@ (800b69c <HAL_SD_ReadBlocks+0x1c0>)
 800b698:	639a      	str	r2, [r3, #56]	@ 0x38
 800b69a:	e79f      	b.n	800b5dc <HAL_SD_ReadBlocks+0x100>
 800b69c:	1fe00fff 	.word	0x1fe00fff
 800b6a0:	18000f3a 	.word	0x18000f3a

0800b6a4 <HAL_SD_WriteBlocks>:
{
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	460d      	mov	r5, r1
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	4691      	mov	r9, r2
 800b6b0:	461f      	mov	r7, r3
 800b6b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b6b6:	f7f7 ff1b 	bl	80034f0 <HAL_GetTick>
  if (NULL == pData)
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	d064      	beq.n	800b788 <HAL_SD_WriteBlocks+0xe4>
  if (hsd->State == HAL_SD_STATE_READY)
 800b6be:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d152      	bne.n	800b76c <HAL_SD_WriteBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6c6:	eb09 0307 	add.w	r3, r9, r7
 800b6ca:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6cc:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6ce:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6d0:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6d2:	d85e      	bhi.n	800b792 <HAL_SD_WriteBlocks+0xee>
    hsd->State = HAL_SD_STATE_BUSY;
 800b6d4:	2303      	movs	r3, #3
 800b6d6:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 800b6d8:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800b6da:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 800b6e0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b6e2:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6e4:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b6e6:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b6ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b6ee:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b6f0:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 800b6f4:	bf18      	it	ne
 800b6f6:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b6fa:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b6fc:	027b      	lsls	r3, r7, #9
 800b6fe:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b700:	2390      	movs	r3, #144	@ 0x90
 800b702:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b704:	f001 f894 	bl	800c830 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b708:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 800b70a:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b70c:	4649      	mov	r1, r9
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b70e:	68c3      	ldr	r3, [r0, #12]
 800b710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b714:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 800b716:	d932      	bls.n	800b77e <HAL_SD_WriteBlocks+0xda>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b718:	2320      	movs	r3, #32
 800b71a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b71c:	f001 fb4e 	bl	800cdbc <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b720:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b722:	2800      	cmp	r0, #0
 800b724:	d13a      	bne.n	800b79c <HAL_SD_WriteBlocks+0xf8>
    dataremaining = config.DataLength;
 800b726:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800b72a:	e005      	b.n	800b738 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b72c:	f7f7 fee0 	bl	80034f0 <HAL_GetTick>
 800b730:	1b82      	subs	r2, r0, r6
 800b732:	4542      	cmp	r2, r8
 800b734:	d25d      	bcs.n	800b7f2 <HAL_SD_WriteBlocks+0x14e>
 800b736:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800b738:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b73a:	4610      	mov	r0, r2
 800b73c:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
 800b740:	d137      	bne.n	800b7b2 <HAL_SD_WriteBlocks+0x10e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800b742:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b744:	045a      	lsls	r2, r3, #17
 800b746:	d5f1      	bpl.n	800b72c <HAL_SD_WriteBlocks+0x88>
 800b748:	f1b9 0f1f 	cmp.w	r9, #31
 800b74c:	d9ee      	bls.n	800b72c <HAL_SD_WriteBlocks+0x88>
 800b74e:	f105 0a20 	add.w	sl, r5, #32
 800b752:	e000      	b.n	800b756 <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b754:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b756:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b75a:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b75c:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b75e:	f001 f851 	bl	800c804 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800b762:	4555      	cmp	r5, sl
 800b764:	d1f6      	bne.n	800b754 <HAL_SD_WriteBlocks+0xb0>
        dataremaining -= 32U;
 800b766:	f1a9 0920 	sub.w	r9, r9, #32
 800b76a:	e7df      	b.n	800b72c <HAL_SD_WriteBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b76c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b76e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b772:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
}
 800b776:	4618      	mov	r0, r3
 800b778:	b008      	add	sp, #32
 800b77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b77e:	2310      	movs	r3, #16
 800b780:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b782:	f001 fa6f 	bl	800cc64 <SDMMC_CmdWriteSingleBlock>
 800b786:	e7cb      	b.n	800b720 <HAL_SD_WriteBlocks+0x7c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b78a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b78e:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b790:	e7f0      	b.n	800b774 <HAL_SD_WriteBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b792:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b794:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b798:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800b79a:	e7eb      	b.n	800b774 <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b79c:	4b30      	ldr	r3, [pc, #192]	@ (800b860 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b79e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7a0:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b7a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b7a4:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 800b7a6:	4303      	orrs	r3, r0
 800b7a8:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b7aa:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b7ae:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800b7b0:	e7e0      	b.n	800b774 <HAL_SD_WriteBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b7b2:	68d3      	ldr	r3, [r2, #12]
 800b7b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7b8:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b7ba:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b7bc:	05db      	lsls	r3, r3, #23
 800b7be:	d501      	bpl.n	800b7c4 <HAL_SD_WriteBlocks+0x120>
 800b7c0:	2f01      	cmp	r7, #1
 800b7c2:	d822      	bhi.n	800b80a <HAL_SD_WriteBlocks+0x166>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b7c4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b7c6:	f013 0308 	ands.w	r3, r3, #8
 800b7ca:	d131      	bne.n	800b830 <HAL_SD_WriteBlocks+0x18c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b7cc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b7ce:	f012 0202 	ands.w	r2, r2, #2
 800b7d2:	d122      	bne.n	800b81a <HAL_SD_WriteBlocks+0x176>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800b7d4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b7d6:	f013 0310 	ands.w	r3, r3, #16
 800b7da:	d035      	beq.n	800b848 <HAL_SD_WriteBlocks+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7dc:	4b20      	ldr	r3, [pc, #128]	@ (800b860 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b7de:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7e0:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b7e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7e4:	f043 0310 	orr.w	r3, r3, #16
 800b7e8:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b7ea:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b7ee:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b7f0:	e7c0      	b.n	800b774 <HAL_SD_WriteBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7f2:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800b7f4:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7f6:	481a      	ldr	r0, [pc, #104]	@ (800b860 <HAL_SD_WriteBlocks+0x1bc>)
        hsd->Context = SD_CONTEXT_NONE;
 800b7f8:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7fa:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b7fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7fe:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800b802:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b806:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b808:	e7b5      	b.n	800b776 <HAL_SD_WriteBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b80a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b80c:	2b03      	cmp	r3, #3
 800b80e:	d0d9      	beq.n	800b7c4 <HAL_SD_WriteBlocks+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b810:	f001 fb80 	bl	800cf14 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800b814:	b9f0      	cbnz	r0, 800b854 <HAL_SD_WriteBlocks+0x1b0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b816:	6820      	ldr	r0, [r4, #0]
 800b818:	e7d4      	b.n	800b7c4 <HAL_SD_WriteBlocks+0x120>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b81a:	4a11      	ldr	r2, [pc, #68]	@ (800b860 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b81c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b81e:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b820:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b822:	f042 0202 	orr.w	r2, r2, #2
 800b826:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b828:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b82c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b82e:	e7a1      	b.n	800b774 <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b830:	4b0b      	ldr	r3, [pc, #44]	@ (800b860 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b832:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b834:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b836:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b83a:	f043 0308 	orr.w	r3, r3, #8
 800b83e:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b840:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b844:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b846:	e795      	b.n	800b774 <HAL_SD_WriteBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b848:	4906      	ldr	r1, [pc, #24]	@ (800b864 <HAL_SD_WriteBlocks+0x1c0>)
    hsd->State = HAL_SD_STATE_READY;
 800b84a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b84c:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b84e:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800b852:	e790      	b.n	800b776 <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b854:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800b856:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b858:	4a01      	ldr	r2, [pc, #4]	@ (800b860 <HAL_SD_WriteBlocks+0x1bc>)
 800b85a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b85c:	e7a1      	b.n	800b7a2 <HAL_SD_WriteBlocks+0xfe>
 800b85e:	bf00      	nop
 800b860:	1fe00fff 	.word	0x1fe00fff
 800b864:	18000f3a 	.word	0x18000f3a

0800b868 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b868:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 800b86a:	4603      	mov	r3, r0
 800b86c:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b86e:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b872:	0f94      	lsrs	r4, r2, #30
 800b874:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b876:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b87a:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b87c:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b880:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b882:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b884:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b888:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b88a:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b88c:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b88e:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b890:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b892:	0d14      	lsrs	r4, r2, #20
 800b894:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b896:	f3c2 4403 	ubfx	r4, r2, #16, #4
 800b89a:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b89c:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800b8a0:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b8a2:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800b8a6:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b8a8:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800b8ac:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b8ae:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800b8b2:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b8b4:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800b8b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d16f      	bne.n	800b99c <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b8bc:	f640 74fc 	movw	r4, #4092	@ 0xffc
 800b8c0:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800b8c2:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b8c6:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b8ca:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800b8ce:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b8d0:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b8d4:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b8d6:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800b8da:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b8dc:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b8e0:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b8e2:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b8e6:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b8e8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b8ea:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b8ec:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b8ee:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b8f0:	f002 0207 	and.w	r2, r2, #7
 800b8f4:	3202      	adds	r2, #2
 800b8f6:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b8f8:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b8fa:	649c      	str	r4, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b8fc:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b900:	f00c 0c0f 	and.w	ip, ip, #15
 800b904:	fa02 f20c 	lsl.w	r2, r2, ip
 800b908:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b90a:	0a52      	lsrs	r2, r2, #9
 800b90c:	fb04 f202 	mul.w	r2, r4, r2
 800b910:	651a      	str	r2, [r3, #80]	@ 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b912:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800b916:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b91a:	655c      	str	r4, [r3, #84]	@ 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b91c:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b920:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b922:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b926:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 800b928:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b92a:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b92c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b92e:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b930:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b934:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b936:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b93a:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b93c:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b940:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b942:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b946:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b948:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b94c:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b950:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 800b954:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b958:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b95c:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b960:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b964:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b968:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b96c:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b970:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b974:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b978:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b97c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b980:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b984:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b988:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 800b98c:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b98e:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800b992:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 800b996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b99a:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b99c:	2801      	cmp	r0, #1
 800b99e:	d10f      	bne.n	800b9c0 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b9a0:	0412      	lsls	r2, r2, #16
 800b9a2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
    hsd->SdCard.BlockSize = 512U;
 800b9a4:	f44f 7400 	mov.w	r4, #512	@ 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b9a8:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800b9ac:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800b9b0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b9b2:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800b9b4:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b9b6:	3201      	adds	r2, #1
 800b9b8:	0292      	lsls	r2, r2, #10
 800b9ba:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b9bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b9be:	e7a8      	b.n	800b912 <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9c0:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 800b9c2:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9c4:	4805      	ldr	r0, [pc, #20]	@ (800b9dc <HAL_SD_GetCardCSD+0x174>)
 800b9c6:	6390      	str	r0, [r2, #56]	@ 0x38
    return HAL_ERROR;
 800b9c8:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9cc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b9d0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b9d2:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
}
 800b9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	1fe00fff 	.word	0x1fe00fff

0800b9e0 <HAL_SD_InitCard>:
{
 800b9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b9e2:	2200      	movs	r2, #0
{
 800b9e4:	b095      	sub	sp, #84	@ 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b9e6:	2300      	movs	r3, #0
{
 800b9e8:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b9f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b9f8:	f7ff f8ea 	bl	800abd0 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800b9fc:	b948      	cbnz	r0, 800ba12 <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 800b9fe:	2201      	movs	r2, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ba00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800ba04:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ba08:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800ba0a:	2501      	movs	r5, #1
}
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	b015      	add	sp, #84	@ 0x54
 800ba10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ba12:	0a06      	lsrs	r6, r0, #8
 800ba14:	4b8a      	ldr	r3, [pc, #552]	@ (800bc40 <HAL_SD_InitCard+0x260>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800ba16:	aa07      	add	r2, sp, #28
 800ba18:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ba1a:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800ba1e:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ba20:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800ba22:	9608      	str	r6, [sp, #32]
 800ba24:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba28:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ba2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba2e:	6820      	ldr	r0, [r4, #0]
 800ba30:	f000 fec8 	bl	800c7c4 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	f000 feeb 	bl	800c810 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800ba3a:	4b82      	ldr	r3, [pc, #520]	@ (800bc44 <HAL_SD_InitCard+0x264>)
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d902      	bls.n	800ba46 <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ba40:	0076      	lsls	r6, r6, #1
 800ba42:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800ba46:	4880      	ldr	r0, [pc, #512]	@ (800bc48 <HAL_SD_InitCard+0x268>)
 800ba48:	fbb0 f0f5 	udiv	r0, r0, r5
 800ba4c:	3001      	adds	r0, #1
 800ba4e:	f7f7 fd55 	bl	80034fc <HAL_Delay>
  __IO uint32_t count = 0U;
 800ba52:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba54:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800ba56:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ba58:	f001 fc0c 	bl	800d274 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	bb70      	cbnz	r0, 800babe <HAL_SD_InitCard+0xde>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ba60:	6820      	ldr	r0, [r4, #0]
 800ba62:	f001 fc33 	bl	800d2cc <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ba66:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800ba6a:	f000 80ce 	beq.w	800bc0a <HAL_SD_InitCard+0x22a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba72:	2100      	movs	r1, #0
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	f001 fc69 	bl	800d34c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ba7a:	bb38      	cbnz	r0, 800bacc <HAL_SD_InitCard+0xec>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 800ba82:	42b3      	cmp	r3, r6
 800ba84:	f200 80d3 	bhi.w	800bc2e <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ba88:	4f70      	ldr	r7, [pc, #448]	@ (800bc4c <HAL_SD_InitCard+0x26c>)
 800ba8a:	e010      	b.n	800baae <HAL_SD_InitCard+0xce>
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	f001 fd09 	bl	800d4a4 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ba92:	4601      	mov	r1, r0
 800ba94:	b9d0      	cbnz	r0, 800bacc <HAL_SD_InitCard+0xec>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba96:	6820      	ldr	r0, [r4, #0]
 800ba98:	f000 fec6 	bl	800c828 <SDMMC_GetResponse>
    count++;
 800ba9c:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba9e:	2800      	cmp	r0, #0
    count++;
 800baa0:	f103 0301 	add.w	r3, r3, #1
 800baa4:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	db13      	blt.n	800bad2 <HAL_SD_InitCard+0xf2>
 800baaa:	42b3      	cmp	r3, r6
 800baac:	d811      	bhi.n	800bad2 <HAL_SD_InitCard+0xf2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800baae:	2100      	movs	r1, #0
 800bab0:	6820      	ldr	r0, [r4, #0]
 800bab2:	f001 fc4b 	bl	800d34c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800bab6:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800bab8:	2800      	cmp	r0, #0
 800baba:	d0e7      	beq.n	800ba8c <HAL_SD_InitCard+0xac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800babc:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_READY;
 800babe:	2301      	movs	r3, #1
 800bac0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bac4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bac6:	432b      	orrs	r3, r5
 800bac8:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800baca:	e79e      	b.n	800ba0a <HAL_SD_InitCard+0x2a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bacc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800bad0:	e7f5      	b.n	800babe <HAL_SD_InitCard+0xde>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800bad2:	9a03      	ldr	r2, [sp, #12]
 800bad4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800bad8:	429a      	cmp	r2, r3
 800bada:	f200 80ac 	bhi.w	800bc36 <HAL_SD_InitCard+0x256>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bade:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800bae2:	bf18      	it	ne
 800bae4:	2501      	movne	r5, #1
  uint16_t sd_rca = 0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	63a5      	str	r5, [r4, #56]	@ 0x38
 800baea:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800baee:	f7f7 fcff 	bl	80034f0 <HAL_GetTick>
 800baf2:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800baf4:	6820      	ldr	r0, [r4, #0]
 800baf6:	f000 fe93 	bl	800c820 <SDMMC_GetPowerState>
 800bafa:	b348      	cbz	r0, 800bb50 <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bafc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bafe:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	d12e      	bne.n	800bb62 <HAL_SD_InitCard+0x182>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bb04:	2104      	movs	r1, #4
 800bb06:	f000 fe8f 	bl	800c828 <SDMMC_GetResponse>
 800bb0a:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bb0c:	a909      	add	r1, sp, #36	@ 0x24
 800bb0e:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bb10:	0d1b      	lsrs	r3, r3, #20
 800bb12:	6423      	str	r3, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bb14:	f7ff fea8 	bl	800b868 <HAL_SD_GetCardCSD>
 800bb18:	4605      	mov	r5, r0
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	f040 8081 	bne.w	800bc22 <HAL_SD_InitCard+0x242>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bb20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bb22:	6820      	ldr	r0, [r4, #0]
 800bb24:	0409      	lsls	r1, r1, #16
 800bb26:	f001 faf9 	bl	800d11c <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb2a:	b998      	cbnz	r0, 800bb54 <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bb2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bb30:	6820      	ldr	r0, [r4, #0]
 800bb32:	f000 fe93 	bl	800c85c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb36:	2800      	cmp	r0, #0
 800bb38:	f43f af68 	beq.w	800ba0c <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb3c:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800bb3e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb40:	4943      	ldr	r1, [pc, #268]	@ (800bc50 <HAL_SD_InitCard+0x270>)
 800bb42:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bb44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb46:	4303      	orrs	r3, r0
 800bb48:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bb4a:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800bb4e:	e75c      	b.n	800ba0a <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb50:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bb5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb5c:	4303      	orrs	r3, r0
 800bb5e:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800bb60:	e753      	b.n	800ba0a <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bb62:	f001 fe2d 	bl	800d7c0 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d1f4      	bne.n	800bb54 <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	f000 fe5b 	bl	800c828 <SDMMC_GetResponse>
 800bb72:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bb74:	2104      	movs	r1, #4
 800bb76:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb78:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bb7a:	f000 fe55 	bl	800c828 <SDMMC_GetResponse>
 800bb7e:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bb80:	2108      	movs	r1, #8
 800bb82:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bb84:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bb86:	f000 fe4f 	bl	800c828 <SDMMC_GetResponse>
 800bb8a:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bb8c:	210c      	movs	r1, #12
 800bb8e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bb90:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bb92:	f000 fe49 	bl	800c828 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bb96:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bb98:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d04e      	beq.n	800bc3c <HAL_SD_InitCard+0x25c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800bb9e:	f241 3687 	movw	r6, #4999	@ 0x1387
 800bba2:	e008      	b.n	800bbb6 <HAL_SD_InitCard+0x1d6>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bba4:	f001 fe8a 	bl	800d8bc <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d1d3      	bne.n	800bb54 <HAL_SD_InitCard+0x174>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800bbac:	f7f7 fca0 	bl	80034f0 <HAL_GetTick>
 800bbb0:	1b43      	subs	r3, r0, r5
 800bbb2:	42b3      	cmp	r3, r6
 800bbb4:	d838      	bhi.n	800bc28 <HAL_SD_InitCard+0x248>
    while (sd_rca == 0U)
 800bbb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bbba:	f10d 010a 	add.w	r1, sp, #10
 800bbbe:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0ef      	beq.n	800bba4 <HAL_SD_InitCard+0x1c4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bbc4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bbc6:	2a03      	cmp	r2, #3
 800bbc8:	d09c      	beq.n	800bb04 <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbca:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 800bbcc:	6463      	str	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbce:	f001 fe35 	bl	800d83c <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d1be      	bne.n	800bb54 <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	6820      	ldr	r0, [r4, #0]
 800bbda:	f000 fe25 	bl	800c828 <SDMMC_GetResponse>
 800bbde:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bbe0:	2104      	movs	r1, #4
 800bbe2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbe4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bbe6:	f000 fe1f 	bl	800c828 <SDMMC_GetResponse>
 800bbea:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bbec:	2108      	movs	r1, #8
 800bbee:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bbf0:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bbf2:	f000 fe19 	bl	800c828 <SDMMC_GetResponse>
 800bbf6:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bbf8:	210c      	movs	r1, #12
 800bbfa:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bbfc:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bbfe:	f000 fe13 	bl	800c828 <SDMMC_GetResponse>
 800bc02:	4603      	mov	r3, r0
 800bc04:	6820      	ldr	r0, [r4, #0]
 800bc06:	66a3      	str	r3, [r4, #104]	@ 0x68
 800bc08:	e77c      	b.n	800bb04 <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bc0a:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bc0c:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bc0e:	f001 fb31 	bl	800d274 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f47f af52 	bne.w	800babc <HAL_SD_InitCard+0xdc>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800bc18:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	f47f af2e 	bne.w	800ba7c <HAL_SD_InitCard+0x9c>
 800bc20:	e727      	b.n	800ba72 <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc22:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800bc26:	e795      	b.n	800bb54 <HAL_SD_InitCard+0x174>
        return HAL_SD_ERROR_TIMEOUT;
 800bc28:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc2c:	e792      	b.n	800bb54 <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	42b3      	cmp	r3, r6
 800bc32:	f67f af58 	bls.w	800bae6 <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bc36:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800bc3a:	e740      	b.n	800babe <HAL_SD_InitCard+0xde>
 800bc3c:	6820      	ldr	r0, [r4, #0]
 800bc3e:	e761      	b.n	800bb04 <HAL_SD_InitCard+0x124>
 800bc40:	014f8b59 	.word	0x014f8b59
 800bc44:	000c34ff 	.word	0x000c34ff
 800bc48:	00012110 	.word	0x00012110
 800bc4c:	c1100000 	.word	0xc1100000
 800bc50:	1fe00fff 	.word	0x1fe00fff

0800bc54 <HAL_SD_GetCardStatus>:
{
 800bc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 800bc58:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 800bc5c:	b097      	sub	sp, #92	@ 0x5c
  if (hsd->State == HAL_SD_STATE_BUSY)
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d033      	beq.n	800bcca <HAL_SD_GetCardStatus+0x76>
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800bc62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800bc64:	460d      	mov	r5, r1
 800bc66:	f7f7 fc43 	bl	80034f0 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc6a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800bc6c:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc6e:	6820      	ldr	r0, [r4, #0]
 800bc70:	f000 fdda 	bl	800c828 <SDMMC_GetResponse>
 800bc74:	0182      	lsls	r2, r0, #6
 800bc76:	d410      	bmi.n	800bc9a <HAL_SD_GetCardStatus+0x46>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bc78:	2140      	movs	r1, #64	@ 0x40
 800bc7a:	6820      	ldr	r0, [r4, #0]
 800bc7c:	f000 fdee 	bl	800c85c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc80:	4603      	mov	r3, r0
 800bc82:	b930      	cbnz	r0, 800bc92 <HAL_SD_GetCardStatus+0x3e>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bc86:	6820      	ldr	r0, [r4, #0]
 800bc88:	0409      	lsls	r1, r1, #16
 800bc8a:	f001 fb5f 	bl	800d34c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc8e:	4603      	mov	r3, r0
 800bc90:	b300      	cbz	r0, 800bcd4 <HAL_SD_GetCardStatus+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bc92:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc94:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bc96:	6362      	str	r2, [r4, #52]	@ 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc98:	e002      	b.n	800bca0 <HAL_SD_GetCardStatus+0x4c>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bc9a:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bca0:	4a54      	ldr	r2, [pc, #336]	@ (800bdf4 <HAL_SD_GetCardStatus+0x1a0>)
    hsd->State = HAL_SD_STATE_READY;
 800bca2:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bca4:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800bca6:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 800bca8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bcae:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bcb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bcb6:	f000 fdd1 	bl	800c85c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bcba:	b138      	cbz	r0, 800bccc <HAL_SD_GetCardStatus+0x78>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcbc:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800bcbe:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcc0:	494c      	ldr	r1, [pc, #304]	@ (800bdf4 <HAL_SD_GetCardStatus+0x1a0>)
 800bcc2:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800bcc4:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bcc6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800bcca:	2601      	movs	r6, #1
}
 800bccc:	4630      	mov	r0, r6
 800bcce:	b017      	add	sp, #92	@ 0x5c
 800bcd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  config.DataLength    = 64U;
 800bcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd8:	2340      	movs	r3, #64	@ 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bcda:	4669      	mov	r1, sp
 800bcdc:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800bcde:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bce2:	2260      	movs	r2, #96	@ 0x60
 800bce4:	2302      	movs	r3, #2
 800bce6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bcea:	2301      	movs	r3, #1
 800bcec:	2200      	movs	r2, #0
 800bcee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bcf2:	f000 fd9d 	bl	800c830 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bcf6:	6820      	ldr	r0, [r4, #0]
 800bcf8:	f001 feec 	bl	800dad4 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d1c7      	bne.n	800bc92 <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800bd02:	ae06      	add	r6, sp, #24
 800bd04:	e004      	b.n	800bd10 <HAL_SD_GetCardStatus+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd06:	f7f7 fbf3 	bl	80034f0 <HAL_GetTick>
 800bd0a:	1bc0      	subs	r0, r0, r7
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d012      	beq.n	800bd36 <HAL_SD_GetCardStatus+0xe2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bd14:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bd18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bd1a:	d110      	bne.n	800bd3e <HAL_SD_GetCardStatus+0xea>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bd1c:	041b      	lsls	r3, r3, #16
 800bd1e:	d5f2      	bpl.n	800bd06 <HAL_SD_GetCardStatus+0xb2>
 800bd20:	f106 0820 	add.w	r8, r6, #32
 800bd24:	e000      	b.n	800bd28 <HAL_SD_GetCardStatus+0xd4>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bd26:	6820      	ldr	r0, [r4, #0]
 800bd28:	f000 fd68 	bl	800c7fc <SDMMC_ReadFIFO>
 800bd2c:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800bd30:	4546      	cmp	r6, r8
 800bd32:	d1f8      	bne.n	800bd26 <HAL_SD_GetCardStatus+0xd2>
 800bd34:	e7e7      	b.n	800bd06 <HAL_SD_GetCardStatus+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd36:	6820      	ldr	r0, [r4, #0]
 800bd38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bd3c:	e7b0      	b.n	800bca0 <HAL_SD_GetCardStatus+0x4c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd3e:	0719      	lsls	r1, r3, #28
 800bd40:	d451      	bmi.n	800bde6 <HAL_SD_GetCardStatus+0x192>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd42:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bd44:	079a      	lsls	r2, r3, #30
 800bd46:	d450      	bmi.n	800bdea <HAL_SD_GetCardStatus+0x196>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bd48:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bd4a:	069b      	lsls	r3, r3, #26
 800bd4c:	d50a      	bpl.n	800bd64 <HAL_SD_GetCardStatus+0x110>
 800bd4e:	e04e      	b.n	800bdee <HAL_SD_GetCardStatus+0x19a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bd50:	f000 fd54 	bl	800c7fc <SDMMC_ReadFIFO>
 800bd54:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd58:	f7f7 fbca 	bl	80034f0 <HAL_GetTick>
 800bd5c:	1bc0      	subs	r0, r0, r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	d0e9      	beq.n	800bd36 <HAL_SD_GetCardStatus+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd62:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bd64:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bd66:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800bd6a:	d1f1      	bne.n	800bd50 <HAL_SD_GetCardStatus+0xfc>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bd6c:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800bd6e:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bd70:	4a21      	ldr	r2, [pc, #132]	@ (800bdf8 <HAL_SD_GetCardStatus+0x1a4>)
 800bd72:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bd74:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bd76:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bd7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bd7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bd82:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bd86:	fa5f f883 	uxtb.w	r8, r3
 800bd8a:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bd8e:	fa1f f982 	uxth.w	r9, r2
 800bd92:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bd94:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bd98:	f3c1 1881 	ubfx	r8, r1, #6, #2
 800bd9c:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bda0:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bda4:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800bda8:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800bdac:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800bdae:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800bdb2:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800bdb6:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800bdb8:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800bdbc:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800bdbe:	f3cc 5203 	ubfx	r2, ip, #20, #4
 800bdc2:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bdc4:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800bdc8:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800bdca:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800bdcc:	f3c3 2201 	ubfx	r2, r3, #8, #2
 800bdd0:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bdd2:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800bdd6:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800bdda:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800bddc:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800bdde:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 800bde2:	74ab      	strb	r3, [r5, #18]
 800bde4:	e765      	b.n	800bcb2 <HAL_SD_GetCardStatus+0x5e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bde6:	2308      	movs	r3, #8
 800bde8:	e75a      	b.n	800bca0 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bdea:	2302      	movs	r3, #2
 800bdec:	e758      	b.n	800bca0 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800bdee:	2320      	movs	r3, #32
 800bdf0:	e756      	b.n	800bca0 <HAL_SD_GetCardStatus+0x4c>
 800bdf2:	bf00      	nop
 800bdf4:	1fe00fff 	.word	0x1fe00fff
 800bdf8:	18000f3a 	.word	0x18000f3a

0800bdfc <HAL_SD_GetCardInfo>:
{
 800bdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bdfe:	e9d0 e30e 	ldrd	lr, r3, [r0, #56]	@ 0x38
 800be02:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
 800be06:	e9d0 5412 	ldrd	r5, r4, [r0, #72]	@ 0x48
 800be0a:	e9d0 2014 	ldrd	r2, r0, [r0, #80]	@ 0x50
 800be0e:	e9c1 e300 	strd	lr, r3, [r1]
 800be12:	e9c1 2006 	strd	r2, r0, [r1, #24]
 800be16:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 800be1a:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800be1c:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be22:	bf00      	nop

0800be24 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800be24:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800be26:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800be28:	4293      	cmp	r3, r2
{
 800be2a:	b530      	push	{r4, r5, lr}
 800be2c:	4604      	mov	r4, r0
 800be2e:	b089      	sub	sp, #36	@ 0x24
 800be30:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800be32:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800be36:	d041      	beq.n	800bebc <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800be38:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800be3c:	d03e      	beq.n	800bebc <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800be3e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800be42:	d07e      	beq.n	800bf42 <HAL_SD_ConfigWideBusOperation+0x11e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800be44:	2900      	cmp	r1, #0
 800be46:	d05d      	beq.n	800bf04 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be48:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800be4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be4e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800be50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be52:	2b00      	cmp	r3, #0
 800be54:	d139      	bne.n	800beca <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800be56:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800be5a:	2100      	movs	r1, #0
 800be5c:	f7fe feb8 	bl	800abd0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800be60:	2800      	cmp	r0, #0
 800be62:	d048      	beq.n	800bef6 <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800be64:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800be66:	4b50      	ldr	r3, [pc, #320]	@ (800bfa8 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800be68:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800be6a:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800be6c:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800be6e:	fba3 5300 	umull	r5, r3, r3, r0
 800be72:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800be74:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800be76:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800be7a:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800be7c:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800be80:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800be82:	d20e      	bcs.n	800bea2 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800be84:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800be86:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800be8a:	d00a      	beq.n	800bea2 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800be8c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800be90:	d079      	beq.n	800bf86 <HAL_SD_ConfigWideBusOperation+0x162>
        if (hsd->Init.ClockDiv == 0U)
 800be92:	b112      	cbz	r2, 800be9a <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800be94:	0053      	lsls	r3, r2, #1
 800be96:	fbb0 f0f3 	udiv	r0, r0, r3
 800be9a:	4b44      	ldr	r3, [pc, #272]	@ (800bfac <HAL_SD_ConfigWideBusOperation+0x188>)
 800be9c:	4298      	cmp	r0, r3
 800be9e:	bf88      	it	hi
 800bea0:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800bea2:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800bea4:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800bea6:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800bea8:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800beaa:	c903      	ldmia	r1, {r0, r1}
 800beac:	e88d 0003 	stmia.w	sp, {r0, r1}
 800beb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800beb2:	6820      	ldr	r0, [r4, #0]
 800beb4:	f000 fc86 	bl	800c7c4 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	e00a      	b.n	800bed2 <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bec2:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0c5      	beq.n	800be56 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800beca:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 800becc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bece:	4b38      	ldr	r3, [pc, #224]	@ (800bfb0 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800bed0:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bed2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bed6:	f000 fcc1 	bl	800c85c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800beda:	b130      	cbz	r0, 800beea <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bedc:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800bede:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bee0:	4a33      	ldr	r2, [pc, #204]	@ (800bfb0 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800bee2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bee4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bee6:	4303      	orrs	r3, r0
 800bee8:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 800beea:	2301      	movs	r3, #1
}
 800beec:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800beee:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 800bef2:	b009      	add	sp, #36	@ 0x24
 800bef4:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800bef6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 800bef8:	2501      	movs	r5, #1
      (void)SDMMC_Init(hsd->Instance, Init);
 800befa:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800befc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf00:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 800bf02:	e7e6      	b.n	800bed2 <HAL_SD_ConfigWideBusOperation+0xae>
  uint32_t scr[2U] = {0UL, 0UL};
 800bf04:	2200      	movs	r2, #0
 800bf06:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf08:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800bf0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf0e:	f000 fc8b 	bl	800c828 <SDMMC_GetResponse>
 800bf12:	0182      	lsls	r2, r0, #6
 800bf14:	d434      	bmi.n	800bf80 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800bf16:	a902      	add	r1, sp, #8
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f7ff fa6d 	bl	800b3f8 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf1e:	b960      	cbnz	r0, 800bf3a <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	03db      	lsls	r3, r3, #15
 800bf24:	d535      	bpl.n	800bf92 <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf26:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bf28:	6820      	ldr	r0, [r4, #0]
 800bf2a:	0409      	lsls	r1, r1, #16
 800bf2c:	f001 fa0e 	bl	800d34c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bf30:	b918      	cbnz	r0, 800bf3a <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bf32:	4601      	mov	r1, r0
 800bf34:	6820      	ldr	r0, [r4, #0]
 800bf36:	f001 faf1 	bl	800d51c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800bf3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf3c:	4303      	orrs	r3, r0
 800bf3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf40:	e7c0      	b.n	800bec4 <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 800bf42:	2200      	movs	r2, #0
 800bf44:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf46:	2100      	movs	r1, #0
 800bf48:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800bf4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf4e:	f000 fc6b 	bl	800c828 <SDMMC_GetResponse>
 800bf52:	0180      	lsls	r0, r0, #6
 800bf54:	d414      	bmi.n	800bf80 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800bf56:	a902      	add	r1, sp, #8
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f7ff fa4d 	bl	800b3f8 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d1eb      	bne.n	800bf3a <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bf62:	9b03      	ldr	r3, [sp, #12]
 800bf64:	0359      	lsls	r1, r3, #13
 800bf66:	d514      	bpl.n	800bf92 <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf68:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bf6a:	6820      	ldr	r0, [r4, #0]
 800bf6c:	0409      	lsls	r1, r1, #16
 800bf6e:	f001 f9ed 	bl	800d34c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d1e1      	bne.n	800bf3a <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bf76:	2102      	movs	r1, #2
 800bf78:	6820      	ldr	r0, [r4, #0]
 800bf7a:	f001 facf 	bl	800d51c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bf7e:	e7dc      	b.n	800bf3a <HAL_SD_ConfigWideBusOperation+0x116>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bf80:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bf84:	e7d9      	b.n	800bf3a <HAL_SD_ConfigWideBusOperation+0x116>
        if (hsd->Init.ClockDiv == 0U)
 800bf86:	b93a      	cbnz	r2, 800bf98 <HAL_SD_ConfigWideBusOperation+0x174>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800bf88:	490a      	ldr	r1, [pc, #40]	@ (800bfb4 <HAL_SD_ConfigWideBusOperation+0x190>)
 800bf8a:	4288      	cmp	r0, r1
 800bf8c:	d989      	bls.n	800bea2 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800bf8e:	0e5a      	lsrs	r2, r3, #25
 800bf90:	e787      	b.n	800bea2 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf92:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800bf96:	e7d0      	b.n	800bf3a <HAL_SD_ConfigWideBusOperation+0x116>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800bf98:	0051      	lsls	r1, r2, #1
 800bf9a:	fbb0 f1f1 	udiv	r1, r0, r1
 800bf9e:	4805      	ldr	r0, [pc, #20]	@ (800bfb4 <HAL_SD_ConfigWideBusOperation+0x190>)
 800bfa0:	4281      	cmp	r1, r0
 800bfa2:	f67f af7e 	bls.w	800bea2 <HAL_SD_ConfigWideBusOperation+0x7e>
 800bfa6:	e7f2      	b.n	800bf8e <HAL_SD_ConfigWideBusOperation+0x16a>
 800bfa8:	55e63b89 	.word	0x55e63b89
 800bfac:	017d7840 	.word	0x017d7840
 800bfb0:	1fe00fff 	.word	0x1fe00fff
 800bfb4:	02faf080 	.word	0x02faf080

0800bfb8 <HAL_SD_Init>:
{
 800bfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfba:	b087      	sub	sp, #28
  if (hsd == NULL)
 800bfbc:	b168      	cbz	r0, 800bfda <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 800bfbe:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d044      	beq.n	800c056 <HAL_SD_Init+0x9e>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bfcc:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfce:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bfd0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfd4:	f7ff fd04 	bl	800b9e0 <HAL_SD_InitCard>
 800bfd8:	b118      	cbz	r0, 800bfe2 <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800bfda:	2601      	movs	r6, #1
}
 800bfdc:	4630      	mov	r0, r6
 800bfde:	b007      	add	sp, #28
 800bfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bfe2:	a901      	add	r1, sp, #4
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f7ff fe35 	bl	800bc54 <HAL_SD_GetCardStatus>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d1f5      	bne.n	800bfda <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bfee:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800bff0:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bff4:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bff6:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800bffa:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bffc:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bffe:	d02e      	beq.n	800c05e <HAL_SD_Init+0xa6>
 800c000:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c002:	68e1      	ldr	r1, [r4, #12]
 800c004:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c006:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c008:	f7ff ff0c 	bl	800be24 <HAL_SD_ConfigWideBusOperation>
 800c00c:	4606      	mov	r6, r0
 800c00e:	2800      	cmp	r0, #0
 800c010:	d1e3      	bne.n	800bfda <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800c012:	f7f7 fa6d 	bl	80034f0 <HAL_GetTick>
 800c016:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c018:	e007      	b.n	800c02a <HAL_SD_Init+0x72>
    hsd->ErrorCode |= errorstate;
 800c01a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c01c:	4303      	orrs	r3, r0
 800c01e:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c020:	f7f7 fa66 	bl	80034f0 <HAL_GetTick>
 800c024:	1bc3      	subs	r3, r0, r7
 800c026:	3301      	adds	r3, #1
 800c028:	d020      	beq.n	800c06c <HAL_SD_Init+0xb4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c02a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c02c:	6820      	ldr	r0, [r4, #0]
 800c02e:	0409      	lsls	r1, r1, #16
 800c030:	f001 fca4 	bl	800d97c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c034:	4605      	mov	r5, r0
 800c036:	2800      	cmp	r0, #0
 800c038:	d1ef      	bne.n	800c01a <HAL_SD_Init+0x62>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c03a:	6820      	ldr	r0, [r4, #0]
 800c03c:	4629      	mov	r1, r5
 800c03e:	f000 fbf3 	bl	800c828 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c042:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c046:	2804      	cmp	r0, #4
 800c048:	d1ea      	bne.n	800c020 <HAL_SD_Init+0x68>
  hsd->State = HAL_SD_STATE_READY;
 800c04a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c04c:	6365      	str	r5, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c04e:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800c050:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 800c054:	e7c2      	b.n	800bfdc <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800c056:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800c058:	f7f6 fefa 	bl	8002e50 <HAL_SD_MspInit>
 800c05c:	e7b6      	b.n	800bfcc <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c05e:	4313      	orrs	r3, r2
 800c060:	bf14      	ite	ne
 800c062:	f44f 7300 	movne.w	r3, #512	@ 0x200
 800c066:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 800c06a:	e7ca      	b.n	800c002 <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c06c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800c070:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800c072:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c074:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c076:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c07a:	e7af      	b.n	800bfdc <HAL_SD_Init+0x24>

0800c07c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c07c:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 800c07e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c080:	0409      	lsls	r1, r1, #16
{
 800c082:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c084:	6800      	ldr	r0, [r0, #0]
 800c086:	f001 fc79 	bl	800d97c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c08a:	4601      	mov	r1, r0
 800c08c:	b120      	cbz	r0, 800c098 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800c08e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c090:	2000      	movs	r0, #0
 800c092:	430b      	orrs	r3, r1
 800c094:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800c096:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c098:	6820      	ldr	r0, [r4, #0]
 800c09a:	f000 fbc5 	bl	800c828 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c09e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800c0a2:	bd10      	pop	{r4, pc}

0800c0a4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800c0a4:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c0a6:	492c      	ldr	r1, [pc, #176]	@ (800c158 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 800c0a8:	695a      	ldr	r2, [r3, #20]
{
 800c0aa:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c0ac:	699c      	ldr	r4, [r3, #24]
 800c0ae:	f044 0408 	orr.w	r4, r4, #8
 800c0b2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c0b4:	699c      	ldr	r4, [r3, #24]
 800c0b6:	f044 0410 	orr.w	r4, r4, #16
 800c0ba:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 800c0bc:	681c      	ldr	r4, [r3, #0]
 800c0be:	f024 0401 	bic.w	r4, r4, #1
 800c0c2:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c0c4:	691c      	ldr	r4, [r3, #16]
 800c0c6:	4021      	ands	r1, r4
 800c0c8:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c0ca:	6899      	ldr	r1, [r3, #8]
 800c0cc:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 800c0d0:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c0d2:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800c0d6:	2904      	cmp	r1, #4
 800c0d8:	d001      	beq.n	800c0de <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c0da:	0691      	lsls	r1, r2, #26
 800c0dc:	d430      	bmi.n	800c140 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c0de:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800c0e2:	2903      	cmp	r1, #3
 800c0e4:	d001      	beq.n	800c0ea <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c0e6:	0654      	lsls	r4, r2, #25
 800c0e8:	d41f      	bmi.n	800c12a <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c0ea:	0591      	lsls	r1, r2, #22
 800c0ec:	d509      	bpl.n	800c102 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c0ee:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800c0f2:	f041 0101 	orr.w	r1, r1, #1
 800c0f6:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0fa:	6999      	ldr	r1, [r3, #24]
 800c0fc:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800c100:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c102:	05d2      	lsls	r2, r2, #23
 800c104:	d509      	bpl.n	800c11a <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c106:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800c10a:	f042 0208 	orr.w	r2, r2, #8
 800c10e:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c112:	699a      	ldr	r2, [r3, #24]
 800c114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c118:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c11a:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800c11c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800c120:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c124:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 800c128:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c12a:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800c12e:	f041 0104 	orr.w	r1, r1, #4
 800c132:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c136:	6999      	ldr	r1, [r3, #24]
 800c138:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c13c:	6199      	str	r1, [r3, #24]
 800c13e:	e7d4      	b.n	800c0ea <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c140:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800c144:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800c148:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c14c:	6999      	ldr	r1, [r3, #24]
 800c14e:	f041 0120 	orr.w	r1, r1, #32
 800c152:	6199      	str	r1, [r3, #24]
 800c154:	e7c3      	b.n	800c0de <SPI_CloseTransfer+0x3a>
 800c156:	bf00      	nop
 800c158:	fffffc90 	.word	0xfffffc90

0800c15c <HAL_SPI_Init>:
  if (hspi == NULL)
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f000 80c8 	beq.w	800c2f2 <HAL_SPI_Init+0x196>
{
 800c162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c166:	4604      	mov	r4, r0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c168:	4b67      	ldr	r3, [pc, #412]	@ (800c308 <HAL_SPI_Init+0x1ac>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c16a:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c16c:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c16e:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c170:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c172:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c174:	d016      	beq.n	800c1a4 <HAL_SPI_Init+0x48>
 800c176:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d012      	beq.n	800c1a4 <HAL_SPI_Init+0x48>
 800c17e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c182:	429a      	cmp	r2, r3
 800c184:	f000 80ad 	beq.w	800c2e2 <HAL_SPI_Init+0x186>
 800c188:	290f      	cmp	r1, #15
 800c18a:	d808      	bhi.n	800c19e <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c18c:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c18e:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c192:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800c194:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800c196:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c19a:	2b08      	cmp	r3, #8
 800c19c:	d90a      	bls.n	800c1b4 <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 800c19e:	2001      	movs	r0, #1
}
 800c1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1a4:	4b58      	ldr	r3, [pc, #352]	@ (800c308 <HAL_SPI_Init+0x1ac>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c1a6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d06d      	beq.n	800c288 <HAL_SPI_Init+0x12c>
 800c1ac:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d069      	beq.n	800c288 <HAL_SPI_Init+0x12c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1b4:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800c1b8:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d071      	beq.n	800c2a4 <HAL_SPI_Init+0x148>
 800c1c0:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 800c1c4:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1c6:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1c8:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 800c1cc:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c1d0:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 800c1d4:	6813      	ldr	r3, [r2, #0]
 800c1d6:	f023 0301 	bic.w	r3, r3, #1
 800c1da:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c1dc:	6893      	ldr	r3, [r2, #8]
 800c1de:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1e2:	69a3      	ldr	r3, [r4, #24]
 800c1e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c1e8:	d067      	beq.n	800c2ba <HAL_SPI_Init+0x15e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c1ea:	f1b9 0f00 	cmp.w	r9, #0
 800c1ee:	d001      	beq.n	800c1f4 <HAL_SPI_Init+0x98>
 800c1f0:	2906      	cmp	r1, #6
 800c1f2:	d86f      	bhi.n	800c2d4 <HAL_SPI_Init+0x178>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c1f4:	6817      	ldr	r7, [r2, #0]
 800c1f6:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800c1fa:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c1fc:	4303      	orrs	r3, r0
 800c1fe:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c200:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c204:	ea43 030e 	orr.w	r3, r3, lr
 800c208:	433b      	orrs	r3, r7
 800c20a:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800c20c:	433b      	orrs	r3, r7
 800c20e:	6927      	ldr	r7, [r4, #16]
 800c210:	433b      	orrs	r3, r7
 800c212:	6967      	ldr	r7, [r4, #20]
 800c214:	433b      	orrs	r3, r7
 800c216:	6a27      	ldr	r7, [r4, #32]
 800c218:	433b      	orrs	r3, r7
 800c21a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800c21c:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c21e:	69e7      	ldr	r7, [r4, #28]
 800c220:	4339      	orrs	r1, r7
 800c222:	4329      	orrs	r1, r5
 800c224:	ea41 010c 	orr.w	r1, r1, ip
 800c228:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c22a:	68a1      	ldr	r1, [r4, #8]
 800c22c:	430b      	orrs	r3, r1
 800c22e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c230:	430b      	orrs	r3, r1
 800c232:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800c234:	430b      	orrs	r3, r1
 800c236:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c238:	b9c0      	cbnz	r0, 800c26c <HAL_SPI_Init+0x110>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c23a:	6893      	ldr	r3, [r2, #8]
 800c23c:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800c240:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c244:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c246:	6893      	ldr	r3, [r2, #8]
 800c248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c24c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c250:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c252:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c254:	f023 0301 	bic.w	r3, r3, #1
 800c258:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c25a:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800c25c:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c25e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 800c262:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 800c264:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 800c268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c26c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c26e:	f023 0301 	bic.w	r3, r3, #1
 800c272:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c274:	f1b9 0f00 	cmp.w	r9, #0
 800c278:	d0ef      	beq.n	800c25a <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c27a:	68d3      	ldr	r3, [r2, #12]
 800c27c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c27e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c282:	430b      	orrs	r3, r1
 800c284:	60d3      	str	r3, [r2, #12]
 800c286:	e7e8      	b.n	800c25a <HAL_SPI_Init+0xfe>
  data_size = (data_size + 7UL) / 8UL;
 800c288:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c28c:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800c28e:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800c290:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c294:	2b10      	cmp	r3, #16
 800c296:	d882      	bhi.n	800c19e <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c298:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800c29c:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d18d      	bne.n	800c1c0 <HAL_SPI_Init+0x64>
    HAL_SPI_MspInit(hspi);
 800c2a4:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800c2a6:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800c2aa:	f7f6 fe63 	bl	8002f74 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800c2ae:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2b0:	68e1      	ldr	r1, [r4, #12]
 800c2b2:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800c2b6:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800c2b8:	e784      	b.n	800c1c4 <HAL_SPI_Init+0x68>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2ba:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 800c2be:	d01a      	beq.n	800c2f6 <HAL_SPI_Init+0x19a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d192      	bne.n	800c1ea <HAL_SPI_Init+0x8e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2c4:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 800c2c8:	d194      	bne.n	800c1f4 <HAL_SPI_Init+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2ca:	6817      	ldr	r7, [r2, #0]
 800c2cc:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 800c2d0:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c2d2:	e78f      	b.n	800c1f4 <HAL_SPI_Init+0x98>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c2d4:	6817      	ldr	r7, [r2, #0]
 800c2d6:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 800c2d8:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800c2dc:	4337      	orrs	r7, r6
 800c2de:	6017      	str	r7, [r2, #0]
 800c2e0:	e78c      	b.n	800c1fc <HAL_SPI_Init+0xa0>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c2e2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800c2e4:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c2e8:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800c2ea:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800c2ec:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c2f0:	e7d0      	b.n	800c294 <HAL_SPI_Init+0x138>
    return HAL_ERROR;
 800c2f2:	2001      	movs	r0, #1
}
 800c2f4:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2f6:	f1be 0f00 	cmp.w	lr, #0
 800c2fa:	f47f af79 	bne.w	800c1f0 <HAL_SPI_Init+0x94>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2fe:	6817      	ldr	r7, [r2, #0]
 800c300:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 800c304:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c306:	e773      	b.n	800c1f0 <HAL_SPI_Init+0x94>
 800c308:	40013000 	.word	0x40013000

0800c30c <HAL_SPI_Transmit_DMA>:
  if (hspi->State != HAL_SPI_STATE_READY)
 800c30c:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800c310:	2b01      	cmp	r3, #1
 800c312:	d17c      	bne.n	800c40e <HAL_SPI_Transmit_DMA+0x102>
  if ((pData == NULL) || (Size == 0UL))
 800c314:	2900      	cmp	r1, #0
 800c316:	f000 80a8 	beq.w	800c46a <HAL_SPI_Transmit_DMA+0x15e>
{
 800c31a:	b570      	push	{r4, r5, r6, lr}
 800c31c:	4615      	mov	r5, r2
 800c31e:	b2da      	uxtb	r2, r3
  if ((pData == NULL) || (Size == 0UL))
 800c320:	fab5 f385 	clz	r3, r5
 800c324:	095b      	lsrs	r3, r3, #5
 800c326:	2d00      	cmp	r5, #0
 800c328:	d079      	beq.n	800c41e <HAL_SPI_Transmit_DMA+0x112>
 800c32a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800c32c:	f890 0080 	ldrb.w	r0, [r0, #128]	@ 0x80
 800c330:	2801      	cmp	r0, #1
 800c332:	f000 8098 	beq.w	800c466 <HAL_SPI_Transmit_DMA+0x15a>
 800c336:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c33a:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 800c33c:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c33e:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->RxISR       = NULL;
 800c342:	6723      	str	r3, [r4, #112]	@ 0x70
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c344:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->RxISR       = NULL;
 800c348:	6763      	str	r3, [r4, #116]	@ 0x74
  hspi->TxXferCount = Size;
 800c34a:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 800c34e:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800c352:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c356:	68a3      	ldr	r3, [r4, #8]
    SPI_1LINE_TX(hspi);
 800c358:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c35a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c35e:	65e1      	str	r1, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c360:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c364:	d05d      	beq.n	800c422 <HAL_SPI_Transmit_DMA+0x116>
    SPI_2LINES_TX(hspi);
 800c366:	68d3      	ldr	r3, [r2, #12]
 800c368:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800c36c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c370:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c372:	68e3      	ldr	r3, [r4, #12]
 800c374:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800c376:	2b0f      	cmp	r3, #15
 800c378:	6986      	ldr	r6, [r0, #24]
 800c37a:	d84a      	bhi.n	800c412 <HAL_SPI_Transmit_DMA+0x106>
 800c37c:	2b07      	cmp	r3, #7
 800c37e:	d861      	bhi.n	800c444 <HAL_SPI_Transmit_DMA+0x138>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c380:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800c384:	d067      	beq.n	800c456 <HAL_SPI_Transmit_DMA+0x14a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c386:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c38a:	d106      	bne.n	800c39a <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800c38c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800c390:	b29b      	uxth	r3, r3
 800c392:	3303      	adds	r3, #3
 800c394:	089b      	lsrs	r3, r3, #2
 800c396:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c39a:	4e35      	ldr	r6, [pc, #212]	@ (800c470 <HAL_SPI_Transmit_DMA+0x164>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c39c:	3220      	adds	r2, #32
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c39e:	f852 3c18 	ldr.w	r3, [r2, #-24]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c3a2:	6406      	str	r6, [r0, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c3a4:	4e33      	ldr	r6, [pc, #204]	@ (800c474 <HAL_SPI_Transmit_DMA+0x168>)
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c3a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c3aa:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c3ac:	4e32      	ldr	r6, [pc, #200]	@ (800c478 <HAL_SPI_Transmit_DMA+0x16c>)
 800c3ae:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800c3b0:	2600      	movs	r6, #0
 800c3b2:	6506      	str	r6, [r0, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c3b4:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
 800c3b8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	f7f8 fc4b 	bl	8004c58 <HAL_DMA_Start_IT>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d132      	bne.n	800c42c <HAL_SPI_Transmit_DMA+0x120>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c3c6:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c3c8:	6823      	ldr	r3, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c3ca:	69d2      	ldr	r2, [r2, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c3cc:	6859      	ldr	r1, [r3, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c3ce:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c3d2:	4a2a      	ldr	r2, [pc, #168]	@ (800c47c <HAL_SPI_Transmit_DMA+0x170>)
 800c3d4:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c3d8:	bf18      	it	ne
 800c3da:	432a      	orrne	r2, r5
 800c3dc:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c3de:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3e0:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c3e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3e6:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c3ea:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800c3ec:	691a      	ldr	r2, [r3, #16]
 800c3ee:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800c3f2:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	f042 0201 	orr.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3fc:	d103      	bne.n	800c406 <HAL_SPI_Transmit_DMA+0xfa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c404:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800c406:	2300      	movs	r3, #0
 800c408:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800c40c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c40e:	2002      	movs	r0, #2
 800c410:	4770      	bx	lr
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c412:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c416:	d0c0      	beq.n	800c39a <HAL_SPI_Transmit_DMA+0x8e>
    __HAL_UNLOCK(hspi);
 800c418:	2300      	movs	r3, #0
 800c41a:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    return HAL_ERROR;
 800c41e:	2001      	movs	r0, #1
}
 800c420:	bd70      	pop	{r4, r5, r6, pc}
    SPI_1LINE_TX(hspi);
 800c422:	6813      	ldr	r3, [r2, #0]
 800c424:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	e7a2      	b.n	800c372 <HAL_SPI_Transmit_DMA+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c42c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c430:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800c432:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c436:	f043 0310 	orr.w	r3, r3, #16
 800c43a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c43e:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    return HAL_ERROR;
 800c442:	e7ec      	b.n	800c41e <HAL_SPI_Transmit_DMA+0x112>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c444:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c448:	d005      	beq.n	800c456 <HAL_SPI_Transmit_DMA+0x14a>
 800c44a:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800c44e:	d1e3      	bne.n	800c418 <HAL_SPI_Transmit_DMA+0x10c>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c450:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c454:	d1a1      	bne.n	800c39a <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c456:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	3301      	adds	r3, #1
 800c45e:	085b      	lsrs	r3, r3, #1
 800c460:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800c464:	e799      	b.n	800c39a <HAL_SPI_Transmit_DMA+0x8e>
    return HAL_BUSY;
 800c466:	2002      	movs	r0, #2
}
 800c468:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800c46a:	2001      	movs	r0, #1
}
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	0800c4b5 	.word	0x0800c4b5
 800c474:	0800c481 	.word	0x0800c481
 800c478:	0800c4c5 	.word	0x0800c4c5
 800c47c:	ffff0000 	.word	0xffff0000

0800c480 <SPI_DMATransmitCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c480:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800c482:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c484:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800c488:	2b07      	cmp	r3, #7
 800c48a:	d009      	beq.n	800c4a0 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c48c:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c494:	d005      	beq.n	800c4a2 <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c496:	6802      	ldr	r2, [r0, #0]
 800c498:	6913      	ldr	r3, [r2, #16]
 800c49a:	f043 0308 	orr.w	r3, r3, #8
 800c49e:	6113      	str	r3, [r2, #16]
}
 800c4a0:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 800c4a2:	f7f6 fc23 	bl	8002cec <HAL_SPI_TxCpltCallback>
}
 800c4a6:	bd08      	pop	{r3, pc}

0800c4a8 <HAL_SPI_RxCpltCallback>:
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop

0800c4ac <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop

0800c4b0 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop

0800c4b4 <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c4b4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800c4b6:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c4b8:	f7ff fffa 	bl	800c4b0 <HAL_SPI_TxHalfCpltCallback>
}
 800c4bc:	bd08      	pop	{r3, pc}
 800c4be:	bf00      	nop

0800c4c0 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop

0800c4c4 <SPI_DMAError>:
{
 800c4c4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4c6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c4c8:	f7f9 fc72 	bl	8005db0 <HAL_DMA_GetError>
 800c4cc:	2802      	cmp	r0, #2
 800c4ce:	d100      	bne.n	800c4d2 <SPI_DMAError+0xe>
}
 800c4d0:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800c4d2:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c4d4:	4930      	ldr	r1, [pc, #192]	@ (800c598 <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
 800c4d6:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c4d8:	6998      	ldr	r0, [r3, #24]
 800c4da:	f040 0008 	orr.w	r0, r0, #8
 800c4de:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c4e0:	6998      	ldr	r0, [r3, #24]
 800c4e2:	f040 0010 	orr.w	r0, r0, #16
 800c4e6:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 800c4e8:	6818      	ldr	r0, [r3, #0]
 800c4ea:	f020 0001 	bic.w	r0, r0, #1
 800c4ee:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c4f0:	6918      	ldr	r0, [r3, #16]
 800c4f2:	4001      	ands	r1, r0
 800c4f4:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c4f6:	6899      	ldr	r1, [r3, #8]
 800c4f8:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 800c4fc:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4fe:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800c502:	2904      	cmp	r1, #4
 800c504:	d001      	beq.n	800c50a <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c506:	0691      	lsls	r1, r2, #26
 800c508:	d43a      	bmi.n	800c580 <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c50a:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800c50e:	2903      	cmp	r1, #3
 800c510:	d001      	beq.n	800c516 <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c512:	0650      	lsls	r0, r2, #25
 800c514:	d429      	bmi.n	800c56a <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c516:	0591      	lsls	r1, r2, #22
 800c518:	d509      	bpl.n	800c52e <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c51a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c51e:	f041 0101 	orr.w	r1, r1, #1
 800c522:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c526:	6999      	ldr	r1, [r3, #24]
 800c528:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800c52c:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c52e:	05d2      	lsls	r2, r2, #23
 800c530:	d509      	bpl.n	800c546 <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c532:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800c536:	f042 0208 	orr.w	r2, r2, #8
 800c53a:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c53e:	699a      	ldr	r2, [r3, #24]
 800c540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c544:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800c546:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800c548:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800c54a:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800c54c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c550:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c554:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c558:	f043 0310 	orr.w	r3, r3, #16
 800c55c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c560:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    HAL_SPI_ErrorCallback(hspi);
 800c564:	f7ff ffac 	bl	800c4c0 <HAL_SPI_ErrorCallback>
}
 800c568:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c56a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c56e:	f041 0104 	orr.w	r1, r1, #4
 800c572:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c576:	6999      	ldr	r1, [r3, #24]
 800c578:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c57c:	6199      	str	r1, [r3, #24]
 800c57e:	e7ca      	b.n	800c516 <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c580:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c584:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800c588:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c58c:	6999      	ldr	r1, [r3, #24]
 800c58e:	f041 0120 	orr.w	r1, r1, #32
 800c592:	6199      	str	r1, [r3, #24]
 800c594:	e7b9      	b.n	800c50a <SPI_DMAError+0x46>
 800c596:	bf00      	nop
 800c598:	fffffc90 	.word	0xfffffc90

0800c59c <SPI_DMAAbortOnError>:
{
 800c59c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c59e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800c5a0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c5a2:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 800c5a4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c5a8:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800c5ac:	f880 2081 	strb.w	r2, [r0, #129]	@ 0x81
  HAL_SPI_ErrorCallback(hspi);
 800c5b0:	f7ff ff86 	bl	800c4c0 <HAL_SPI_ErrorCallback>
}
 800c5b4:	bd08      	pop	{r3, pc}
 800c5b6:	bf00      	nop

0800c5b8 <HAL_SPI_SuspendCallback>:
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop

0800c5bc <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 800c5bc:	6803      	ldr	r3, [r0, #0]
{
 800c5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800c5c2:	691e      	ldr	r6, [r3, #16]
{
 800c5c4:	4604      	mov	r4, r0
  uint32_t itflag   = hspi->Instance->SR;
 800c5c6:	6959      	ldr	r1, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c5c8:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 800c5cc:	ea06 0201 	and.w	r2, r6, r1
  HAL_SPI_StateTypeDef State = hspi->State;
 800c5d0:	f890 5081 	ldrb.w	r5, [r0, #129]	@ 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c5d4:	0509      	lsls	r1, r1, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800c5d6:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c5d8:	d502      	bpl.n	800c5e0 <HAL_SPI_IRQHandler+0x24>
 800c5da:	0737      	lsls	r7, r6, #28
 800c5dc:	f100 80cd 	bmi.w	800c77a <HAL_SPI_IRQHandler+0x1be>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c5e0:	f002 0164 	and.w	r1, r2, #100	@ 0x64
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c5e4:	f002 0745 	and.w	r7, r2, #69	@ 0x45
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c5e8:	f002 0626 	and.w	r6, r2, #38	@ 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c5ec:	2904      	cmp	r1, #4
 800c5ee:	d039      	beq.n	800c664 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c5f0:	2f01      	cmp	r7, #1
 800c5f2:	d03f      	beq.n	800c674 <HAL_SPI_IRQHandler+0xb8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c5f4:	2e02      	cmp	r6, #2
 800c5f6:	f000 80d6 	beq.w	800c7a6 <HAL_SPI_IRQHandler+0x1ea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c5fa:	0716      	lsls	r6, r2, #28
 800c5fc:	d557      	bpl.n	800c6ae <HAL_SPI_IRQHandler+0xf2>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c5fe:	699a      	ldr	r2, [r3, #24]
 800c600:	f042 0208 	orr.w	r2, r2, #8
 800c604:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c606:	699a      	ldr	r2, [r3, #24]
 800c608:	f042 0210 	orr.w	r2, r2, #16
 800c60c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c60e:	699a      	ldr	r2, [r3, #24]
 800c610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c614:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c616:	691a      	ldr	r2, [r3, #16]
 800c618:	f022 0208 	bic.w	r2, r2, #8
 800c61c:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c61e:	689a      	ldr	r2, [r3, #8]
 800c620:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 800c624:	d12e      	bne.n	800c684 <HAL_SPI_IRQHandler+0xc8>
      while (hspi->RxXferCount != 0UL)
 800c626:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800c62a:	b292      	uxth	r2, r2
 800c62c:	b352      	cbz	r2, 800c684 <HAL_SPI_IRQHandler+0xc8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c62e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800c630:	e00e      	b.n	800c650 <HAL_SPI_IRQHandler+0x94>
 800c632:	6822      	ldr	r2, [r4, #0]
 800c634:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c636:	f841 2b04 	str.w	r2, [r1], #4
        hspi->RxXferCount--;
 800c63a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c63e:	6661      	str	r1, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 800c640:	3a01      	subs	r2, #1
 800c642:	b292      	uxth	r2, r2
 800c644:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c648:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800c64c:	b292      	uxth	r2, r2
 800c64e:	b1ca      	cbz	r2, 800c684 <HAL_SPI_IRQHandler+0xc8>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c650:	68e2      	ldr	r2, [r4, #12]
 800c652:	2a0f      	cmp	r2, #15
 800c654:	d8ed      	bhi.n	800c632 <HAL_SPI_IRQHandler+0x76>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c656:	2a07      	cmp	r2, #7
 800c658:	f240 809e 	bls.w	800c798 <HAL_SPI_IRQHandler+0x1dc>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c65c:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800c65e:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c662:	e7ea      	b.n	800c63a <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 800c664:	4620      	mov	r0, r4
 800c666:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c668:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c66a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c66c:	4620      	mov	r0, r4
 800c66e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c670:	2f01      	cmp	r7, #1
 800c672:	d102      	bne.n	800c67a <HAL_SPI_IRQHandler+0xbe>
    hspi->RxISR(hspi);
 800c674:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c676:	4620      	mov	r0, r4
 800c678:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c67a:	2e02      	cmp	r6, #2
 800c67c:	f000 8093 	beq.w	800c7a6 <HAL_SPI_IRQHandler+0x1ea>
}
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800c684:	4620      	mov	r0, r4
 800c686:	f7ff fd0d 	bl	800c0a4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800c68a:	2301      	movs	r3, #1
 800c68c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c690:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c694:	2b00      	cmp	r3, #0
 800c696:	d17c      	bne.n	800c792 <HAL_SPI_IRQHandler+0x1d6>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c698:	2d05      	cmp	r5, #5
 800c69a:	f000 8089 	beq.w	800c7b0 <HAL_SPI_IRQHandler+0x1f4>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c69e:	2d04      	cmp	r5, #4
 800c6a0:	f000 8089 	beq.w	800c7b6 <HAL_SPI_IRQHandler+0x1fa>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c6a4:	2d03      	cmp	r5, #3
 800c6a6:	d1eb      	bne.n	800c680 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_TxCpltCallback(hspi);
 800c6a8:	f7f6 fb20 	bl	8002cec <HAL_SPI_TxCpltCallback>
 800c6ac:	e7e8      	b.n	800c680 <HAL_SPI_IRQHandler+0xc4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c6ae:	f412 7f58 	tst.w	r2, #864	@ 0x360
 800c6b2:	d0e5      	beq.n	800c680 <HAL_SPI_IRQHandler+0xc4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c6b4:	0655      	lsls	r5, r2, #25
 800c6b6:	d509      	bpl.n	800c6cc <HAL_SPI_IRQHandler+0x110>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c6b8:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c6bc:	f041 0104 	orr.w	r1, r1, #4
 800c6c0:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c6c4:	6999      	ldr	r1, [r3, #24]
 800c6c6:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c6ca:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c6cc:	0590      	lsls	r0, r2, #22
 800c6ce:	d509      	bpl.n	800c6e4 <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c6d0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c6d4:	f041 0101 	orr.w	r1, r1, #1
 800c6d8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c6dc:	6999      	ldr	r1, [r3, #24]
 800c6de:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800c6e2:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c6e4:	05d1      	lsls	r1, r2, #23
 800c6e6:	d509      	bpl.n	800c6fc <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c6e8:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c6ec:	f041 0108 	orr.w	r1, r1, #8
 800c6f0:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c6f4:	6999      	ldr	r1, [r3, #24]
 800c6f6:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800c6fa:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c6fc:	0692      	lsls	r2, r2, #26
 800c6fe:	d509      	bpl.n	800c714 <HAL_SPI_IRQHandler+0x158>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c700:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800c704:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c708:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c70c:	699a      	ldr	r2, [r3, #24]
 800c70e:	f042 0220 	orr.w	r2, r2, #32
 800c712:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c714:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800c718:	2a00      	cmp	r2, #0
 800c71a:	d0b1      	beq.n	800c680 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE(hspi);
 800c71c:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c71e:	f40c 4c40 	and.w	ip, ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c722:	4a26      	ldr	r2, [pc, #152]	@ (800c7bc <HAL_SPI_IRQHandler+0x200>)
      __HAL_SPI_DISABLE(hspi);
 800c724:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c728:	f5bc 4f40 	cmp.w	ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE(hspi);
 800c72c:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c72e:	6919      	ldr	r1, [r3, #16]
 800c730:	ea02 0201 	and.w	r2, r2, r1
 800c734:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c736:	d128      	bne.n	800c78a <HAL_SPI_IRQHandler+0x1ce>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c738:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800c73a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c73c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c740:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800c742:	b150      	cbz	r0, 800c75a <HAL_SPI_IRQHandler+0x19e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c744:	4b1e      	ldr	r3, [pc, #120]	@ (800c7c0 <HAL_SPI_IRQHandler+0x204>)
 800c746:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c748:	f7f8 ff08 	bl	800555c <HAL_DMA_Abort_IT>
 800c74c:	b128      	cbz	r0, 800c75a <HAL_SPI_IRQHandler+0x19e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c74e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c756:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        if (hspi->hdmatx != NULL)
 800c75a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d08f      	beq.n	800c680 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c760:	4b17      	ldr	r3, [pc, #92]	@ (800c7c0 <HAL_SPI_IRQHandler+0x204>)
 800c762:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c764:	f7f8 fefa 	bl	800555c <HAL_DMA_Abort_IT>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d089      	beq.n	800c680 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c76c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c774:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800c778:	e782      	b.n	800c680 <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c77a:	699a      	ldr	r2, [r3, #24]
 800c77c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c780:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 800c782:	f7ff ff19 	bl	800c5b8 <HAL_SPI_SuspendCallback>
}
 800c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800c78a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800c78c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800c78e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c792:	f7ff fe95 	bl	800c4c0 <HAL_SPI_ErrorCallback>
 800c796:	e773      	b.n	800c680 <HAL_SPI_IRQHandler+0xc4>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800c79e:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c7a0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800c7a2:	3101      	adds	r1, #1
 800c7a4:	e749      	b.n	800c63a <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 800c7a6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c7a8:	4620      	mov	r0, r4
}
 800c7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800c7ae:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800c7b0:	f7ff fe7c 	bl	800c4ac <HAL_SPI_TxRxCpltCallback>
 800c7b4:	e764      	b.n	800c680 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_RxCpltCallback(hspi);
 800c7b6:	f7ff fe77 	bl	800c4a8 <HAL_SPI_RxCpltCallback>
 800c7ba:	e761      	b.n	800c680 <HAL_SPI_IRQHandler+0xc4>
 800c7bc:	fffffc94 	.word	0xfffffc94
 800c7c0:	0800c59d 	.word	0x0800c59d

0800c7c4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	b410      	push	{r4}
 800c7c8:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c7cc:	4614      	mov	r4, r2
{
 800c7ce:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800c7d2:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800c7d4:	9904      	ldr	r1, [sp, #16]
{
 800c7d6:	4602      	mov	r2, r0
             Init.BusWide             | \
 800c7d8:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800c7da:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c7dc:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800c7de:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800c7e0:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800c7e2:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800c7e4:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800c7e6:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c7e8:	4903      	ldr	r1, [pc, #12]	@ (800c7f8 <SDMMC_Init+0x34>)
 800c7ea:	4021      	ands	r1, r4
}
 800c7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c7f0:	430b      	orrs	r3, r1
}
 800c7f2:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c7f4:	6053      	str	r3, [r2, #4]
}
 800c7f6:	4770      	bx	lr
 800c7f8:	ffc02c00 	.word	0xffc02c00

0800c7fc <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c7fc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop

0800c804 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c804:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c806:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800c808:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800c80a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800c80e:	4770      	bx	lr

0800c810 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c810:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800c812:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	f042 0203 	orr.w	r2, r2, #3
 800c81a:	601a      	str	r2, [r3, #0]
}
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop

0800c820 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c820:	6800      	ldr	r0, [r0, #0]
}
 800c822:	f000 0003 	and.w	r0, r0, #3
 800c826:	4770      	bx	lr

0800c828 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c828:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800c82a:	5840      	ldr	r0, [r0, r1]
}
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop

0800c830 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c830:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c832:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 800c836:	690d      	ldr	r5, [r1, #16]
{
 800c838:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c83a:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c83c:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 800c83e:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c840:	6250      	str	r0, [r2, #36]	@ 0x24
                       Data->TransferDir   | \
 800c842:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800c844:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 800c846:	6294      	str	r4, [r2, #40]	@ 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c848:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
                       Data->TransferMode  | \
 800c84a:	4303      	orrs	r3, r0

  return HAL_OK;

}
 800c84c:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c84e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800c852:	430b      	orrs	r3, r1
}
 800c854:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c856:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop

0800c85c <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c85c:	4a4f      	ldr	r2, [pc, #316]	@ (800c99c <SDMMC_CmdBlockLength+0x140>)
{
 800c85e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c860:	4b4f      	ldr	r3, [pc, #316]	@ (800c9a0 <SDMMC_CmdBlockLength+0x144>)
 800c862:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c864:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c868:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c86c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c870:	484c      	ldr	r0, [pc, #304]	@ (800c9a4 <SDMMC_CmdBlockLength+0x148>)
 800c872:	f241 1310 	movw	r3, #4368	@ 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c876:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c878:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c87a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c87e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c880:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c884:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800c888:	1e53      	subs	r3, r2, #1
 800c88a:	b14a      	cbz	r2, 800c8a0 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c88c:	4946      	ldr	r1, [pc, #280]	@ (800c9a8 <SDMMC_CmdBlockLength+0x14c>)
    sta_reg = SDMMCx->STA;
 800c88e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800c892:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c894:	420a      	tst	r2, r1
 800c896:	d001      	beq.n	800c89c <SDMMC_CmdBlockLength+0x40>
 800c898:	0492      	lsls	r2, r2, #18
 800c89a:	d504      	bpl.n	800c8a6 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800c89c:	1c58      	adds	r0, r3, #1
 800c89e:	d1f6      	bne.n	800c88e <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c8a0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c8a4:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8a6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c8aa:	075b      	lsls	r3, r3, #29
 800c8ac:	d443      	bmi.n	800c936 <SDMMC_CmdBlockLength+0xda>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8ae:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c8b2:	07d8      	lsls	r0, r3, #31
 800c8b4:	d409      	bmi.n	800c8ca <SDMMC_CmdBlockLength+0x6e>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8b6:	4b3d      	ldr	r3, [pc, #244]	@ (800c9ac <SDMMC_CmdBlockLength+0x150>)
 800c8b8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c8bc:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b10      	cmp	r3, #16
 800c8c4:	d005      	beq.n	800c8d2 <SDMMC_CmdBlockLength+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8d0:	e7f9      	b.n	800c8c6 <SDMMC_CmdBlockLength+0x6a>
  return (*(__IO uint32_t *) tmp);
 800c8d2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c8d6:	4836      	ldr	r0, [pc, #216]	@ (800c9b0 <SDMMC_CmdBlockLength+0x154>)
 800c8d8:	4018      	ands	r0, r3
 800c8da:	b358      	cbz	r0, 800c934 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	db2f      	blt.n	800c940 <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c8e0:	0059      	lsls	r1, r3, #1
 800c8e2:	d430      	bmi.n	800c946 <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c8e4:	009a      	lsls	r2, r3, #2
 800c8e6:	d430      	bmi.n	800c94a <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c8e8:	00d9      	lsls	r1, r3, #3
 800c8ea:	d430      	bmi.n	800c94e <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c8ec:	011a      	lsls	r2, r3, #4
 800c8ee:	d431      	bmi.n	800c954 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c8f0:	0159      	lsls	r1, r3, #5
 800c8f2:	d432      	bmi.n	800c95a <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c8f4:	01da      	lsls	r2, r3, #7
 800c8f6:	d433      	bmi.n	800c960 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c8f8:	0219      	lsls	r1, r3, #8
 800c8fa:	d434      	bmi.n	800c966 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c8fc:	025a      	lsls	r2, r3, #9
 800c8fe:	d435      	bmi.n	800c96c <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c900:	0299      	lsls	r1, r3, #10
 800c902:	d43f      	bmi.n	800c984 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c904:	02da      	lsls	r2, r3, #11
 800c906:	d43a      	bmi.n	800c97e <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c908:	0359      	lsls	r1, r3, #13
 800c90a:	d435      	bmi.n	800c978 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c90c:	039a      	lsls	r2, r3, #14
 800c90e:	d430      	bmi.n	800c972 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c910:	03d9      	lsls	r1, r3, #15
 800c912:	d440      	bmi.n	800c996 <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c914:	041a      	lsls	r2, r3, #16
 800c916:	d43b      	bmi.n	800c990 <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c918:	0459      	lsls	r1, r3, #17
 800c91a:	d436      	bmi.n	800c98a <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c91c:	049a      	lsls	r2, r3, #18
 800c91e:	d407      	bmi.n	800c930 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c920:	f013 0f08 	tst.w	r3, #8
 800c924:	bf0c      	ite	eq
 800c926:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800c92a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800c92e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c930:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800c934:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c936:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c938:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c93a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c93e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c940:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800c944:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c946:	2040      	movs	r0, #64	@ 0x40
 800c948:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c94a:	2080      	movs	r0, #128	@ 0x80
 800c94c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c94e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c952:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c954:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c958:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c95a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800c95e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c960:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c964:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c966:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c96a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c96c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c970:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c972:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800c976:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c978:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800c97c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c97e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c982:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c984:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c988:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c98a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c98e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c990:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c994:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c996:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c99a:	4770      	bx	lr
 800c99c:	2400000c 	.word	0x2400000c
 800c9a0:	10624dd3 	.word	0x10624dd3
 800c9a4:	fffee0c0 	.word	0xfffee0c0
 800c9a8:	00200045 	.word	0x00200045
 800c9ac:	002000c5 	.word	0x002000c5
 800c9b0:	fdffe008 	.word	0xfdffe008

0800c9b4 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c9b4:	4a4f      	ldr	r2, [pc, #316]	@ (800caf4 <SDMMC_CmdReadSingleBlock+0x140>)
{
 800c9b6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c9b8:	4b4f      	ldr	r3, [pc, #316]	@ (800caf8 <SDMMC_CmdReadSingleBlock+0x144>)
 800c9ba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c9bc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c9c0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9c4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c9c8:	484c      	ldr	r0, [pc, #304]	@ (800cafc <SDMMC_CmdReadSingleBlock+0x148>)
 800c9ca:	f241 1311 	movw	r3, #4369	@ 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c9ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9d0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c9d2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9d6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c9d8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9dc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c9e0:	1e53      	subs	r3, r2, #1
 800c9e2:	b14a      	cbz	r2, 800c9f8 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c9e4:	4946      	ldr	r1, [pc, #280]	@ (800cb00 <SDMMC_CmdReadSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800c9e6:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800c9ea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c9ec:	420a      	tst	r2, r1
 800c9ee:	d001      	beq.n	800c9f4 <SDMMC_CmdReadSingleBlock+0x40>
 800c9f0:	0492      	lsls	r2, r2, #18
 800c9f2:	d504      	bpl.n	800c9fe <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800c9f4:	1c58      	adds	r0, r3, #1
 800c9f6:	d1f6      	bne.n	800c9e6 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c9f8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c9fc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9fe:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ca02:	075b      	lsls	r3, r3, #29
 800ca04:	d443      	bmi.n	800ca8e <SDMMC_CmdReadSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca06:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ca0a:	07d8      	lsls	r0, r3, #31
 800ca0c:	d409      	bmi.n	800ca22 <SDMMC_CmdReadSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca0e:	4b3d      	ldr	r3, [pc, #244]	@ (800cb04 <SDMMC_CmdReadSingleBlock+0x150>)
 800ca10:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ca14:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b11      	cmp	r3, #17
 800ca1c:	d005      	beq.n	800ca2a <SDMMC_CmdReadSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca1e:	2001      	movs	r0, #1
 800ca20:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca22:	2301      	movs	r3, #1
 800ca24:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca28:	e7f9      	b.n	800ca1e <SDMMC_CmdReadSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800ca2a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ca2e:	4836      	ldr	r0, [pc, #216]	@ (800cb08 <SDMMC_CmdReadSingleBlock+0x154>)
 800ca30:	4018      	ands	r0, r3
 800ca32:	b358      	cbz	r0, 800ca8c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	db2f      	blt.n	800ca98 <SDMMC_CmdReadSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ca38:	0059      	lsls	r1, r3, #1
 800ca3a:	d430      	bmi.n	800ca9e <SDMMC_CmdReadSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca3c:	009a      	lsls	r2, r3, #2
 800ca3e:	d430      	bmi.n	800caa2 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca40:	00d9      	lsls	r1, r3, #3
 800ca42:	d430      	bmi.n	800caa6 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca44:	011a      	lsls	r2, r3, #4
 800ca46:	d431      	bmi.n	800caac <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca48:	0159      	lsls	r1, r3, #5
 800ca4a:	d432      	bmi.n	800cab2 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca4c:	01da      	lsls	r2, r3, #7
 800ca4e:	d433      	bmi.n	800cab8 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca50:	0219      	lsls	r1, r3, #8
 800ca52:	d434      	bmi.n	800cabe <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca54:	025a      	lsls	r2, r3, #9
 800ca56:	d435      	bmi.n	800cac4 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca58:	0299      	lsls	r1, r3, #10
 800ca5a:	d43f      	bmi.n	800cadc <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca5c:	02da      	lsls	r2, r3, #11
 800ca5e:	d43a      	bmi.n	800cad6 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca60:	0359      	lsls	r1, r3, #13
 800ca62:	d435      	bmi.n	800cad0 <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ca64:	039a      	lsls	r2, r3, #14
 800ca66:	d430      	bmi.n	800caca <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ca68:	03d9      	lsls	r1, r3, #15
 800ca6a:	d440      	bmi.n	800caee <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ca6c:	041a      	lsls	r2, r3, #16
 800ca6e:	d43b      	bmi.n	800cae8 <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ca70:	0459      	lsls	r1, r3, #17
 800ca72:	d436      	bmi.n	800cae2 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ca74:	049a      	lsls	r2, r3, #18
 800ca76:	d407      	bmi.n	800ca88 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ca78:	f013 0f08 	tst.w	r3, #8
 800ca7c:	bf0c      	ite	eq
 800ca7e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800ca82:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800ca86:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800ca88:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800ca8c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca8e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca90:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca92:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca96:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ca98:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800ca9c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ca9e:	2040      	movs	r0, #64	@ 0x40
 800caa0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800caa2:	2080      	movs	r0, #128	@ 0x80
 800caa4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800caa6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800caaa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800caac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800cab0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cab2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cab6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cab8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cabc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cabe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800cac2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cac4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800cac8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800caca:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800cace:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cad0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800cad4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800cad6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cada:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cadc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cae0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cae2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800cae6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cae8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800caec:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800caee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800caf2:	4770      	bx	lr
 800caf4:	2400000c 	.word	0x2400000c
 800caf8:	10624dd3 	.word	0x10624dd3
 800cafc:	fffee0c0 	.word	0xfffee0c0
 800cb00:	00200045 	.word	0x00200045
 800cb04:	002000c5 	.word	0x002000c5
 800cb08:	fdffe008 	.word	0xfdffe008

0800cb0c <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cb0c:	4a4f      	ldr	r2, [pc, #316]	@ (800cc4c <SDMMC_CmdReadMultiBlock+0x140>)
{
 800cb0e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cb10:	4b4f      	ldr	r3, [pc, #316]	@ (800cc50 <SDMMC_CmdReadMultiBlock+0x144>)
 800cb12:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800cb14:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cb18:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb1c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800cb20:	484c      	ldr	r0, [pc, #304]	@ (800cc54 <SDMMC_CmdReadMultiBlock+0x148>)
 800cb22:	f241 1312 	movw	r3, #4370	@ 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cb26:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb28:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cb2a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb2e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cb30:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cb34:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800cb38:	1e53      	subs	r3, r2, #1
 800cb3a:	b14a      	cbz	r2, 800cb50 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cb3c:	4946      	ldr	r1, [pc, #280]	@ (800cc58 <SDMMC_CmdReadMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800cb3e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800cb42:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cb44:	420a      	tst	r2, r1
 800cb46:	d001      	beq.n	800cb4c <SDMMC_CmdReadMultiBlock+0x40>
 800cb48:	0492      	lsls	r2, r2, #18
 800cb4a:	d504      	bpl.n	800cb56 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800cb4c:	1c58      	adds	r0, r3, #1
 800cb4e:	d1f6      	bne.n	800cb3e <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800cb50:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800cb54:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb56:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800cb5a:	075b      	lsls	r3, r3, #29
 800cb5c:	d443      	bmi.n	800cbe6 <SDMMC_CmdReadMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb5e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800cb62:	07d8      	lsls	r0, r3, #31
 800cb64:	d409      	bmi.n	800cb7a <SDMMC_CmdReadMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb66:	4b3d      	ldr	r3, [pc, #244]	@ (800cc5c <SDMMC_CmdReadMultiBlock+0x150>)
 800cb68:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb6c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b12      	cmp	r3, #18
 800cb74:	d005      	beq.n	800cb82 <SDMMC_CmdReadMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb76:	2001      	movs	r0, #1
 800cb78:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb80:	e7f9      	b.n	800cb76 <SDMMC_CmdReadMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800cb82:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cb86:	4836      	ldr	r0, [pc, #216]	@ (800cc60 <SDMMC_CmdReadMultiBlock+0x154>)
 800cb88:	4018      	ands	r0, r3
 800cb8a:	b358      	cbz	r0, 800cbe4 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	db2f      	blt.n	800cbf0 <SDMMC_CmdReadMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb90:	0059      	lsls	r1, r3, #1
 800cb92:	d430      	bmi.n	800cbf6 <SDMMC_CmdReadMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb94:	009a      	lsls	r2, r3, #2
 800cb96:	d430      	bmi.n	800cbfa <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb98:	00d9      	lsls	r1, r3, #3
 800cb9a:	d430      	bmi.n	800cbfe <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb9c:	011a      	lsls	r2, r3, #4
 800cb9e:	d431      	bmi.n	800cc04 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cba0:	0159      	lsls	r1, r3, #5
 800cba2:	d432      	bmi.n	800cc0a <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cba4:	01da      	lsls	r2, r3, #7
 800cba6:	d433      	bmi.n	800cc10 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cba8:	0219      	lsls	r1, r3, #8
 800cbaa:	d434      	bmi.n	800cc16 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cbac:	025a      	lsls	r2, r3, #9
 800cbae:	d435      	bmi.n	800cc1c <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cbb0:	0299      	lsls	r1, r3, #10
 800cbb2:	d43f      	bmi.n	800cc34 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cbb4:	02da      	lsls	r2, r3, #11
 800cbb6:	d43a      	bmi.n	800cc2e <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cbb8:	0359      	lsls	r1, r3, #13
 800cbba:	d435      	bmi.n	800cc28 <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cbbc:	039a      	lsls	r2, r3, #14
 800cbbe:	d430      	bmi.n	800cc22 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cbc0:	03d9      	lsls	r1, r3, #15
 800cbc2:	d440      	bmi.n	800cc46 <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cbc4:	041a      	lsls	r2, r3, #16
 800cbc6:	d43b      	bmi.n	800cc40 <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cbc8:	0459      	lsls	r1, r3, #17
 800cbca:	d436      	bmi.n	800cc3a <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cbcc:	049a      	lsls	r2, r3, #18
 800cbce:	d407      	bmi.n	800cbe0 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cbd0:	f013 0f08 	tst.w	r3, #8
 800cbd4:	bf0c      	ite	eq
 800cbd6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800cbda:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800cbde:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800cbe0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800cbe4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cbe6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbe8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cbea:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbee:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cbf0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800cbf4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cbf6:	2040      	movs	r0, #64	@ 0x40
 800cbf8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cbfa:	2080      	movs	r0, #128	@ 0x80
 800cbfc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cbfe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800cc02:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cc04:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800cc08:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cc0a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cc0e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cc10:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cc14:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cc16:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800cc1a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cc1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800cc20:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cc22:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800cc26:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cc28:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800cc2c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800cc2e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cc32:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cc34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cc38:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cc3a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800cc3e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc40:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800cc44:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cc46:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800cc4a:	4770      	bx	lr
 800cc4c:	2400000c 	.word	0x2400000c
 800cc50:	10624dd3 	.word	0x10624dd3
 800cc54:	fffee0c0 	.word	0xfffee0c0
 800cc58:	00200045 	.word	0x00200045
 800cc5c:	002000c5 	.word	0x002000c5
 800cc60:	fdffe008 	.word	0xfdffe008

0800cc64 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc64:	4a4f      	ldr	r2, [pc, #316]	@ (800cda4 <SDMMC_CmdWriteSingleBlock+0x140>)
{
 800cc66:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc68:	4b4f      	ldr	r3, [pc, #316]	@ (800cda8 <SDMMC_CmdWriteSingleBlock+0x144>)
 800cc6a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800cc6c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc70:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc74:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800cc78:	484c      	ldr	r0, [pc, #304]	@ (800cdac <SDMMC_CmdWriteSingleBlock+0x148>)
 800cc7a:	f241 1318 	movw	r3, #4376	@ 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc7e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc80:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc82:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc86:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc88:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc8c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800cc90:	1e53      	subs	r3, r2, #1
 800cc92:	b14a      	cbz	r2, 800cca8 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cc94:	4946      	ldr	r1, [pc, #280]	@ (800cdb0 <SDMMC_CmdWriteSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800cc96:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800cc9a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cc9c:	420a      	tst	r2, r1
 800cc9e:	d001      	beq.n	800cca4 <SDMMC_CmdWriteSingleBlock+0x40>
 800cca0:	0492      	lsls	r2, r2, #18
 800cca2:	d504      	bpl.n	800ccae <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800cca4:	1c58      	adds	r0, r3, #1
 800cca6:	d1f6      	bne.n	800cc96 <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800cca8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ccac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ccae:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ccb2:	075b      	lsls	r3, r3, #29
 800ccb4:	d443      	bmi.n	800cd3e <SDMMC_CmdWriteSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ccb6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ccba:	07d8      	lsls	r0, r3, #31
 800ccbc:	d409      	bmi.n	800ccd2 <SDMMC_CmdWriteSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccbe:	4b3d      	ldr	r3, [pc, #244]	@ (800cdb4 <SDMMC_CmdWriteSingleBlock+0x150>)
 800ccc0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ccc4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b18      	cmp	r3, #24
 800cccc:	d005      	beq.n	800ccda <SDMMC_CmdWriteSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccce:	2001      	movs	r0, #1
 800ccd0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccd8:	e7f9      	b.n	800ccce <SDMMC_CmdWriteSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800ccda:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ccde:	4836      	ldr	r0, [pc, #216]	@ (800cdb8 <SDMMC_CmdWriteSingleBlock+0x154>)
 800cce0:	4018      	ands	r0, r3
 800cce2:	b358      	cbz	r0, 800cd3c <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	db2f      	blt.n	800cd48 <SDMMC_CmdWriteSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cce8:	0059      	lsls	r1, r3, #1
 800ccea:	d430      	bmi.n	800cd4e <SDMMC_CmdWriteSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccec:	009a      	lsls	r2, r3, #2
 800ccee:	d430      	bmi.n	800cd52 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ccf0:	00d9      	lsls	r1, r3, #3
 800ccf2:	d430      	bmi.n	800cd56 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ccf4:	011a      	lsls	r2, r3, #4
 800ccf6:	d431      	bmi.n	800cd5c <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ccf8:	0159      	lsls	r1, r3, #5
 800ccfa:	d432      	bmi.n	800cd62 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ccfc:	01da      	lsls	r2, r3, #7
 800ccfe:	d433      	bmi.n	800cd68 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd00:	0219      	lsls	r1, r3, #8
 800cd02:	d434      	bmi.n	800cd6e <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd04:	025a      	lsls	r2, r3, #9
 800cd06:	d435      	bmi.n	800cd74 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd08:	0299      	lsls	r1, r3, #10
 800cd0a:	d43f      	bmi.n	800cd8c <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd0c:	02da      	lsls	r2, r3, #11
 800cd0e:	d43a      	bmi.n	800cd86 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd10:	0359      	lsls	r1, r3, #13
 800cd12:	d435      	bmi.n	800cd80 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd14:	039a      	lsls	r2, r3, #14
 800cd16:	d430      	bmi.n	800cd7a <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cd18:	03d9      	lsls	r1, r3, #15
 800cd1a:	d440      	bmi.n	800cd9e <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cd1c:	041a      	lsls	r2, r3, #16
 800cd1e:	d43b      	bmi.n	800cd98 <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cd20:	0459      	lsls	r1, r3, #17
 800cd22:	d436      	bmi.n	800cd92 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cd24:	049a      	lsls	r2, r3, #18
 800cd26:	d407      	bmi.n	800cd38 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cd28:	f013 0f08 	tst.w	r3, #8
 800cd2c:	bf0c      	ite	eq
 800cd2e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800cd32:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800cd36:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800cd38:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800cd3c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd3e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd40:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd42:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd46:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cd48:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800cd4c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cd4e:	2040      	movs	r0, #64	@ 0x40
 800cd50:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cd52:	2080      	movs	r0, #128	@ 0x80
 800cd54:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cd56:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800cd5a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cd5c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800cd60:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd62:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cd66:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd68:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cd6c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd6e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800cd72:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800cd78:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd7a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800cd7e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd80:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800cd84:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800cd86:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cd8a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd8c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cd90:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cd92:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800cd96:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cd98:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800cd9c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cd9e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800cda2:	4770      	bx	lr
 800cda4:	2400000c 	.word	0x2400000c
 800cda8:	10624dd3 	.word	0x10624dd3
 800cdac:	fffee0c0 	.word	0xfffee0c0
 800cdb0:	00200045 	.word	0x00200045
 800cdb4:	002000c5 	.word	0x002000c5
 800cdb8:	fdffe008 	.word	0xfdffe008

0800cdbc <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cdbc:	4a4f      	ldr	r2, [pc, #316]	@ (800cefc <SDMMC_CmdWriteMultiBlock+0x140>)
{
 800cdbe:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cdc0:	4b4f      	ldr	r3, [pc, #316]	@ (800cf00 <SDMMC_CmdWriteMultiBlock+0x144>)
 800cdc2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800cdc4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cdc8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cdcc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800cdd0:	484c      	ldr	r0, [pc, #304]	@ (800cf04 <SDMMC_CmdWriteMultiBlock+0x148>)
 800cdd2:	f241 1319 	movw	r3, #4377	@ 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cdd6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cdd8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cdda:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cdde:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cde0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cde4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800cde8:	1e53      	subs	r3, r2, #1
 800cdea:	b14a      	cbz	r2, 800ce00 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cdec:	4946      	ldr	r1, [pc, #280]	@ (800cf08 <SDMMC_CmdWriteMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800cdee:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800cdf2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cdf4:	420a      	tst	r2, r1
 800cdf6:	d001      	beq.n	800cdfc <SDMMC_CmdWriteMultiBlock+0x40>
 800cdf8:	0492      	lsls	r2, r2, #18
 800cdfa:	d504      	bpl.n	800ce06 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800cdfc:	1c58      	adds	r0, r3, #1
 800cdfe:	d1f6      	bne.n	800cdee <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800ce00:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ce04:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce06:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ce0a:	075b      	lsls	r3, r3, #29
 800ce0c:	d443      	bmi.n	800ce96 <SDMMC_CmdWriteMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce0e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ce12:	07d8      	lsls	r0, r3, #31
 800ce14:	d409      	bmi.n	800ce2a <SDMMC_CmdWriteMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce16:	4b3d      	ldr	r3, [pc, #244]	@ (800cf0c <SDMMC_CmdWriteMultiBlock+0x150>)
 800ce18:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce1c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	2b19      	cmp	r3, #25
 800ce24:	d005      	beq.n	800ce32 <SDMMC_CmdWriteMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce26:	2001      	movs	r0, #1
 800ce28:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce30:	e7f9      	b.n	800ce26 <SDMMC_CmdWriteMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800ce32:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ce36:	4836      	ldr	r0, [pc, #216]	@ (800cf10 <SDMMC_CmdWriteMultiBlock+0x154>)
 800ce38:	4018      	ands	r0, r3
 800ce3a:	b358      	cbz	r0, 800ce94 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	db2f      	blt.n	800cea0 <SDMMC_CmdWriteMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ce40:	0059      	lsls	r1, r3, #1
 800ce42:	d430      	bmi.n	800cea6 <SDMMC_CmdWriteMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ce44:	009a      	lsls	r2, r3, #2
 800ce46:	d430      	bmi.n	800ceaa <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ce48:	00d9      	lsls	r1, r3, #3
 800ce4a:	d430      	bmi.n	800ceae <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ce4c:	011a      	lsls	r2, r3, #4
 800ce4e:	d431      	bmi.n	800ceb4 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ce50:	0159      	lsls	r1, r3, #5
 800ce52:	d432      	bmi.n	800ceba <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ce54:	01da      	lsls	r2, r3, #7
 800ce56:	d433      	bmi.n	800cec0 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ce58:	0219      	lsls	r1, r3, #8
 800ce5a:	d434      	bmi.n	800cec6 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ce5c:	025a      	lsls	r2, r3, #9
 800ce5e:	d435      	bmi.n	800cecc <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ce60:	0299      	lsls	r1, r3, #10
 800ce62:	d43f      	bmi.n	800cee4 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ce64:	02da      	lsls	r2, r3, #11
 800ce66:	d43a      	bmi.n	800cede <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ce68:	0359      	lsls	r1, r3, #13
 800ce6a:	d435      	bmi.n	800ced8 <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ce6c:	039a      	lsls	r2, r3, #14
 800ce6e:	d430      	bmi.n	800ced2 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ce70:	03d9      	lsls	r1, r3, #15
 800ce72:	d440      	bmi.n	800cef6 <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ce74:	041a      	lsls	r2, r3, #16
 800ce76:	d43b      	bmi.n	800cef0 <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ce78:	0459      	lsls	r1, r3, #17
 800ce7a:	d436      	bmi.n	800ceea <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ce7c:	049a      	lsls	r2, r3, #18
 800ce7e:	d407      	bmi.n	800ce90 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ce80:	f013 0f08 	tst.w	r3, #8
 800ce84:	bf0c      	ite	eq
 800ce86:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800ce8a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800ce8e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800ce90:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800ce94:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce96:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce98:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce9a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce9e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cea0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800cea4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cea6:	2040      	movs	r0, #64	@ 0x40
 800cea8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ceaa:	2080      	movs	r0, #128	@ 0x80
 800ceac:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ceae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ceb2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ceb4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ceb8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ceba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cebe:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cec0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cec4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cec6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ceca:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cecc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ced0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ced2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ced6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ced8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800cedc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800cede:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cee2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cee4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cee8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ceea:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ceee:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cef0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800cef4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cef6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800cefa:	4770      	bx	lr
 800cefc:	2400000c 	.word	0x2400000c
 800cf00:	10624dd3 	.word	0x10624dd3
 800cf04:	fffee0c0 	.word	0xfffee0c0
 800cf08:	00200045 	.word	0x00200045
 800cf0c:	002000c5 	.word	0x002000c5
 800cf10:	fdffe008 	.word	0xfdffe008

0800cf14 <SDMMC_CmdStopTransfer>:
{
 800cf14:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf16:	4b7a      	ldr	r3, [pc, #488]	@ (800d100 <SDMMC_CmdStopTransfer+0x1ec>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cf18:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf1a:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cf1c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf20:	4b78      	ldr	r3, [pc, #480]	@ (800d104 <SDMMC_CmdStopTransfer+0x1f0>)
{
 800cf22:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf24:	4c78      	ldr	r4, [pc, #480]	@ (800d108 <SDMMC_CmdStopTransfer+0x1f4>)
  SDMMCx->ARG = Command->Argument;
 800cf26:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cf28:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf2a:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cf2e:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf30:	4c76      	ldr	r4, [pc, #472]	@ (800d10c <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cf32:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf36:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cf38:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf3a:	f241 100c 	movw	r0, #4364	@ 0x110c
  SDMMCx->ARG = Command->Argument;
 800cf3e:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cf40:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cf44:	68cc      	ldr	r4, [r1, #12]
 800cf46:	4023      	ands	r3, r4
 800cf48:	4318      	orrs	r0, r3
 800cf4a:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800cf4c:	b14a      	cbz	r2, 800cf62 <SDMMC_CmdStopTransfer+0x4e>
 800cf4e:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cf50:	486f      	ldr	r0, [pc, #444]	@ (800d110 <SDMMC_CmdStopTransfer+0x1fc>)
    sta_reg = SDMMCx->STA;
 800cf52:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800cf54:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cf56:	4202      	tst	r2, r0
 800cf58:	d001      	beq.n	800cf5e <SDMMC_CmdStopTransfer+0x4a>
 800cf5a:	0492      	lsls	r2, r2, #18
 800cf5c:	d509      	bpl.n	800cf72 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800cf5e:	1c5c      	adds	r4, r3, #1
 800cf60:	d1f7      	bne.n	800cf52 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cf62:	68cb      	ldr	r3, [r1, #12]
 800cf64:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800cf68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf6c:	60cb      	str	r3, [r1, #12]
}
 800cf6e:	bc30      	pop	{r4, r5}
 800cf70:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf72:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800cf74:	075b      	lsls	r3, r3, #29
 800cf76:	d44d      	bmi.n	800d014 <SDMMC_CmdStopTransfer+0x100>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf78:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800cf7a:	f010 0001 	ands.w	r0, r0, #1
 800cf7e:	d13a      	bne.n	800cff6 <SDMMC_CmdStopTransfer+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf80:	4b64      	ldr	r3, [pc, #400]	@ (800d114 <SDMMC_CmdStopTransfer+0x200>)
 800cf82:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cf84:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b0c      	cmp	r3, #12
 800cf8a:	d136      	bne.n	800cffa <SDMMC_CmdStopTransfer+0xe6>
  return (*(__IO uint32_t *) tmp);
 800cf8c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf8e:	4a62      	ldr	r2, [pc, #392]	@ (800d118 <SDMMC_CmdStopTransfer+0x204>)
 800cf90:	401a      	ands	r2, r3
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	d038      	beq.n	800d008 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	db36      	blt.n	800d008 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf9a:	005d      	lsls	r5, r3, #1
 800cf9c:	d441      	bmi.n	800d022 <SDMMC_CmdStopTransfer+0x10e>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf9e:	009c      	lsls	r4, r3, #2
 800cfa0:	d445      	bmi.n	800d02e <SDMMC_CmdStopTransfer+0x11a>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cfa2:	00d8      	lsls	r0, r3, #3
 800cfa4:	d449      	bmi.n	800d03a <SDMMC_CmdStopTransfer+0x126>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cfa6:	011a      	lsls	r2, r3, #4
 800cfa8:	d44e      	bmi.n	800d048 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cfaa:	015d      	lsls	r5, r3, #5
 800cfac:	d453      	bmi.n	800d056 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cfae:	01dc      	lsls	r4, r3, #7
 800cfb0:	d45f      	bmi.n	800d072 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cfb2:	0218      	lsls	r0, r3, #8
 800cfb4:	d456      	bmi.n	800d064 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cfb6:	025a      	lsls	r2, r3, #9
 800cfb8:	d469      	bmi.n	800d08e <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfba:	029d      	lsls	r5, r3, #10
 800cfbc:	d460      	bmi.n	800d080 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cfbe:	02dc      	lsls	r4, r3, #11
 800cfc0:	d47a      	bmi.n	800d0b8 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cfc2:	0358      	lsls	r0, r3, #13
 800cfc4:	d471      	bmi.n	800d0aa <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cfc6:	039a      	lsls	r2, r3, #14
 800cfc8:	d468      	bmi.n	800d09c <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cfca:	03dd      	lsls	r5, r3, #15
 800cfcc:	f100 8090 	bmi.w	800d0f0 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cfd0:	041c      	lsls	r4, r3, #16
 800cfd2:	d47f      	bmi.n	800d0d4 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cfd4:	0458      	lsls	r0, r3, #17
 800cfd6:	d476      	bmi.n	800d0c6 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cfd8:	049a      	lsls	r2, r3, #18
 800cfda:	f100 8082 	bmi.w	800d0e2 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cfde:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cfe2:	68cb      	ldr	r3, [r1, #12]
 800cfe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cfe8:	bf14      	ite	ne
 800cfea:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cfee:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cff2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800cff4:	e7bb      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cff6:	2301      	movs	r3, #1
 800cff8:	638b      	str	r3, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cffa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cffc:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800cffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800d002:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d004:	60cb      	str	r3, [r1, #12]
}
 800d006:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d008:	68cb      	ldr	r3, [r1, #12]
 800d00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800d00e:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d010:	60cb      	str	r3, [r1, #12]
}
 800d012:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d014:	2004      	movs	r0, #4
 800d016:	6388      	str	r0, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d018:	68cb      	ldr	r3, [r1, #12]
 800d01a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d01e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d020:	e7a5      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d022:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d024:	2040      	movs	r0, #64	@ 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d02a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d02c:	e79f      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d02e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d030:	2080      	movs	r0, #128	@ 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d036:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d038:	e799      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d03a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d03c:	f44f 7080 	mov.w	r0, #256	@ 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d044:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d046:	e792      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d048:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d04a:	f44f 7000 	mov.w	r0, #512	@ 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d052:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d054:	e78b      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d056:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d058:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d05c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d060:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d062:	e784      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d064:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d066:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d06a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d06e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d070:	e77d      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d072:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d074:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d07c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d07e:	e776      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d080:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d082:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d08a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d08c:	e76f      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d08e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d090:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d098:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d09a:	e768      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d09c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d09e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0a6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0a8:	e761      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0aa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d0ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0b4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0b6:	e75a      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0b8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800d0ba:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0c2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0c4:	e753      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0c6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d0c8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0d0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0d2:	e74c      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0d4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d0d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0de:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0e0:	e745      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0e2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800d0e4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0ec:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0ee:	e73e      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0f0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d0f2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0fa:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0fc:	e737      	b.n	800cf6e <SDMMC_CmdStopTransfer+0x5a>
 800d0fe:	bf00      	nop
 800d100:	2400000c 	.word	0x2400000c
 800d104:	fffee0c0 	.word	0xfffee0c0
 800d108:	10624dd3 	.word	0x10624dd3
 800d10c:	05f5e100 	.word	0x05f5e100
 800d110:	00200045 	.word	0x00200045
 800d114:	002000c5 	.word	0x002000c5
 800d118:	fdffe008 	.word	0xfdffe008

0800d11c <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d11c:	4a4f      	ldr	r2, [pc, #316]	@ (800d25c <SDMMC_CmdSelDesel+0x140>)
{
 800d11e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d120:	4b4f      	ldr	r3, [pc, #316]	@ (800d260 <SDMMC_CmdSelDesel+0x144>)
 800d122:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d124:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d128:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d12c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d130:	484c      	ldr	r0, [pc, #304]	@ (800d264 <SDMMC_CmdSelDesel+0x148>)
 800d132:	f241 1307 	movw	r3, #4359	@ 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d136:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d138:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d13a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d13e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d140:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d144:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d148:	1e53      	subs	r3, r2, #1
 800d14a:	b14a      	cbz	r2, 800d160 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d14c:	4946      	ldr	r1, [pc, #280]	@ (800d268 <SDMMC_CmdSelDesel+0x14c>)
    sta_reg = SDMMCx->STA;
 800d14e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d152:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d154:	420a      	tst	r2, r1
 800d156:	d001      	beq.n	800d15c <SDMMC_CmdSelDesel+0x40>
 800d158:	0492      	lsls	r2, r2, #18
 800d15a:	d504      	bpl.n	800d166 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800d15c:	1c58      	adds	r0, r3, #1
 800d15e:	d1f6      	bne.n	800d14e <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800d160:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d164:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d166:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d16a:	075b      	lsls	r3, r3, #29
 800d16c:	d443      	bmi.n	800d1f6 <SDMMC_CmdSelDesel+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d16e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d172:	07d8      	lsls	r0, r3, #31
 800d174:	d409      	bmi.n	800d18a <SDMMC_CmdSelDesel+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d176:	4b3d      	ldr	r3, [pc, #244]	@ (800d26c <SDMMC_CmdSelDesel+0x150>)
 800d178:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d17c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b07      	cmp	r3, #7
 800d184:	d005      	beq.n	800d192 <SDMMC_CmdSelDesel+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d186:	2001      	movs	r0, #1
 800d188:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d18a:	2301      	movs	r3, #1
 800d18c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d190:	e7f9      	b.n	800d186 <SDMMC_CmdSelDesel+0x6a>
  return (*(__IO uint32_t *) tmp);
 800d192:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d196:	4836      	ldr	r0, [pc, #216]	@ (800d270 <SDMMC_CmdSelDesel+0x154>)
 800d198:	4018      	ands	r0, r3
 800d19a:	b358      	cbz	r0, 800d1f4 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	db2f      	blt.n	800d200 <SDMMC_CmdSelDesel+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d1a0:	0059      	lsls	r1, r3, #1
 800d1a2:	d430      	bmi.n	800d206 <SDMMC_CmdSelDesel+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d1a4:	009a      	lsls	r2, r3, #2
 800d1a6:	d430      	bmi.n	800d20a <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d1a8:	00d9      	lsls	r1, r3, #3
 800d1aa:	d430      	bmi.n	800d20e <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d1ac:	011a      	lsls	r2, r3, #4
 800d1ae:	d431      	bmi.n	800d214 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d1b0:	0159      	lsls	r1, r3, #5
 800d1b2:	d432      	bmi.n	800d21a <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d1b4:	01da      	lsls	r2, r3, #7
 800d1b6:	d433      	bmi.n	800d220 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d1b8:	0219      	lsls	r1, r3, #8
 800d1ba:	d434      	bmi.n	800d226 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d1bc:	025a      	lsls	r2, r3, #9
 800d1be:	d435      	bmi.n	800d22c <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d1c0:	0299      	lsls	r1, r3, #10
 800d1c2:	d43f      	bmi.n	800d244 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d1c4:	02da      	lsls	r2, r3, #11
 800d1c6:	d43a      	bmi.n	800d23e <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d1c8:	0359      	lsls	r1, r3, #13
 800d1ca:	d435      	bmi.n	800d238 <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d1cc:	039a      	lsls	r2, r3, #14
 800d1ce:	d430      	bmi.n	800d232 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d1d0:	03d9      	lsls	r1, r3, #15
 800d1d2:	d440      	bmi.n	800d256 <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d1d4:	041a      	lsls	r2, r3, #16
 800d1d6:	d43b      	bmi.n	800d250 <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d1d8:	0459      	lsls	r1, r3, #17
 800d1da:	d436      	bmi.n	800d24a <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d1dc:	049a      	lsls	r2, r3, #18
 800d1de:	d407      	bmi.n	800d1f0 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d1e0:	f013 0f08 	tst.w	r3, #8
 800d1e4:	bf0c      	ite	eq
 800d1e6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d1ea:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d1ee:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800d1f0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800d1f4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1f6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1f8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1fa:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1fe:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d200:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d204:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d206:	2040      	movs	r0, #64	@ 0x40
 800d208:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d20a:	2080      	movs	r0, #128	@ 0x80
 800d20c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d20e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d212:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d214:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d218:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d21a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d21e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d220:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d224:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d226:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d22a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d22c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d230:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d232:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d236:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d238:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d23c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800d23e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d242:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d244:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d248:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d24a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d24e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d250:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d254:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d256:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d25a:	4770      	bx	lr
 800d25c:	2400000c 	.word	0x2400000c
 800d260:	10624dd3 	.word	0x10624dd3
 800d264:	fffee0c0 	.word	0xfffee0c0
 800d268:	00200045 	.word	0x00200045
 800d26c:	002000c5 	.word	0x002000c5
 800d270:	fdffe008 	.word	0xfdffe008

0800d274 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d274:	4b11      	ldr	r3, [pc, #68]	@ (800d2bc <SDMMC_CmdGoIdleState+0x48>)
{
 800d276:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d278:	4a11      	ldr	r2, [pc, #68]	@ (800d2c0 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d27a:	681b      	ldr	r3, [r3, #0]
{
 800d27c:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d27e:	4c11      	ldr	r4, [pc, #68]	@ (800d2c4 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800d280:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d282:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 800d286:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d288:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d28a:	0a5b      	lsrs	r3, r3, #9
 800d28c:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d290:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d292:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d296:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d29a:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d29c:	e002      	b.n	800d2a4 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d29e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800d2a0:	0612      	lsls	r2, r2, #24
 800d2a2:	d405      	bmi.n	800d2b0 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	d2fa      	bcs.n	800d29e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800d2a8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d2ac:	bc30      	pop	{r4, r5}
 800d2ae:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2b0:	4b05      	ldr	r3, [pc, #20]	@ (800d2c8 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800d2b2:	2000      	movs	r0, #0
}
 800d2b4:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d2b6:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	2400000c 	.word	0x2400000c
 800d2c0:	fffee0c0 	.word	0xfffee0c0
 800d2c4:	10624dd3 	.word	0x10624dd3
 800d2c8:	002000c5 	.word	0x002000c5

0800d2cc <SDMMC_CmdOperCond>:
{
 800d2cc:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d2ce:	4a1c      	ldr	r2, [pc, #112]	@ (800d340 <SDMMC_CmdOperCond+0x74>)
 800d2d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d344 <SDMMC_CmdOperCond+0x78>)
 800d2d2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d2d4:	481c      	ldr	r0, [pc, #112]	@ (800d348 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d2d6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d2da:	f241 1308 	movw	r3, #4360	@ 0x1108
{
 800d2de:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d2e0:	f44f 74d5 	mov.w	r4, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d2e4:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800d2e6:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d2e8:	68cc      	ldr	r4, [r1, #12]
 800d2ea:	4020      	ands	r0, r4
 800d2ec:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d2ee:	f241 3088 	movw	r0, #5000	@ 0x1388
 800d2f2:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d2f6:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800d2f8:	b14a      	cbz	r2, 800d30e <SDMMC_CmdOperCond+0x42>
 800d2fa:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d2fc:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800d2fe:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d300:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d304:	d001      	beq.n	800d30a <SDMMC_CmdOperCond+0x3e>
 800d306:	0490      	lsls	r0, r2, #18
 800d308:	d506      	bpl.n	800d318 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800d30a:	1c5c      	adds	r4, r3, #1
 800d30c:	d1f6      	bne.n	800d2fc <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d30e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d316:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d318:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d31a:	075a      	lsls	r2, r3, #29
 800d31c:	d40c      	bmi.n	800d338 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d31e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800d320:	f010 0001 	ands.w	r0, r0, #1
 800d324:	d105      	bne.n	800d332 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d326:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d328:	065b      	lsls	r3, r3, #25
 800d32a:	d5f2      	bpl.n	800d312 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d32c:	2340      	movs	r3, #64	@ 0x40
 800d32e:	638b      	str	r3, [r1, #56]	@ 0x38
 800d330:	e7ef      	b.n	800d312 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d332:	2301      	movs	r3, #1
 800d334:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d336:	e7ec      	b.n	800d312 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d338:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d33a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d33c:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d33e:	e7e8      	b.n	800d312 <SDMMC_CmdOperCond+0x46>
 800d340:	2400000c 	.word	0x2400000c
 800d344:	10624dd3 	.word	0x10624dd3
 800d348:	fffee0c0 	.word	0xfffee0c0

0800d34c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d34c:	4a4f      	ldr	r2, [pc, #316]	@ (800d48c <SDMMC_CmdAppCommand+0x140>)
{
 800d34e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d350:	4b4f      	ldr	r3, [pc, #316]	@ (800d490 <SDMMC_CmdAppCommand+0x144>)
 800d352:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d354:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d358:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d35c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d360:	484c      	ldr	r0, [pc, #304]	@ (800d494 <SDMMC_CmdAppCommand+0x148>)
 800d362:	f241 1337 	movw	r3, #4407	@ 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d366:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d368:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d36a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d36e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d370:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d374:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d378:	1e53      	subs	r3, r2, #1
 800d37a:	b14a      	cbz	r2, 800d390 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d37c:	4946      	ldr	r1, [pc, #280]	@ (800d498 <SDMMC_CmdAppCommand+0x14c>)
    sta_reg = SDMMCx->STA;
 800d37e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d382:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d384:	420a      	tst	r2, r1
 800d386:	d001      	beq.n	800d38c <SDMMC_CmdAppCommand+0x40>
 800d388:	0492      	lsls	r2, r2, #18
 800d38a:	d504      	bpl.n	800d396 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800d38c:	1c58      	adds	r0, r3, #1
 800d38e:	d1f6      	bne.n	800d37e <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800d390:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d394:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d396:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d39a:	075b      	lsls	r3, r3, #29
 800d39c:	d443      	bmi.n	800d426 <SDMMC_CmdAppCommand+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d39e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d3a2:	07d8      	lsls	r0, r3, #31
 800d3a4:	d409      	bmi.n	800d3ba <SDMMC_CmdAppCommand+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d3a6:	4b3d      	ldr	r3, [pc, #244]	@ (800d49c <SDMMC_CmdAppCommand+0x150>)
 800d3a8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d3ac:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	2b37      	cmp	r3, #55	@ 0x37
 800d3b4:	d005      	beq.n	800d3c2 <SDMMC_CmdAppCommand+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3c0:	e7f9      	b.n	800d3b6 <SDMMC_CmdAppCommand+0x6a>
  return (*(__IO uint32_t *) tmp);
 800d3c2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d3c6:	4836      	ldr	r0, [pc, #216]	@ (800d4a0 <SDMMC_CmdAppCommand+0x154>)
 800d3c8:	4018      	ands	r0, r3
 800d3ca:	b358      	cbz	r0, 800d424 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	db2f      	blt.n	800d430 <SDMMC_CmdAppCommand+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d3d0:	0059      	lsls	r1, r3, #1
 800d3d2:	d430      	bmi.n	800d436 <SDMMC_CmdAppCommand+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d3d4:	009a      	lsls	r2, r3, #2
 800d3d6:	d430      	bmi.n	800d43a <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d3d8:	00d9      	lsls	r1, r3, #3
 800d3da:	d430      	bmi.n	800d43e <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d3dc:	011a      	lsls	r2, r3, #4
 800d3de:	d431      	bmi.n	800d444 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d3e0:	0159      	lsls	r1, r3, #5
 800d3e2:	d432      	bmi.n	800d44a <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d3e4:	01da      	lsls	r2, r3, #7
 800d3e6:	d433      	bmi.n	800d450 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d3e8:	0219      	lsls	r1, r3, #8
 800d3ea:	d434      	bmi.n	800d456 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d3ec:	025a      	lsls	r2, r3, #9
 800d3ee:	d435      	bmi.n	800d45c <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d3f0:	0299      	lsls	r1, r3, #10
 800d3f2:	d43f      	bmi.n	800d474 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d3f4:	02da      	lsls	r2, r3, #11
 800d3f6:	d43a      	bmi.n	800d46e <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d3f8:	0359      	lsls	r1, r3, #13
 800d3fa:	d435      	bmi.n	800d468 <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d3fc:	039a      	lsls	r2, r3, #14
 800d3fe:	d430      	bmi.n	800d462 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d400:	03d9      	lsls	r1, r3, #15
 800d402:	d440      	bmi.n	800d486 <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d404:	041a      	lsls	r2, r3, #16
 800d406:	d43b      	bmi.n	800d480 <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d408:	0459      	lsls	r1, r3, #17
 800d40a:	d436      	bmi.n	800d47a <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d40c:	049a      	lsls	r2, r3, #18
 800d40e:	d407      	bmi.n	800d420 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d410:	f013 0f08 	tst.w	r3, #8
 800d414:	bf0c      	ite	eq
 800d416:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d41a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d41e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800d420:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800d424:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d426:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d428:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d42a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d42e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d430:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d434:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d436:	2040      	movs	r0, #64	@ 0x40
 800d438:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d43a:	2080      	movs	r0, #128	@ 0x80
 800d43c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d43e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d442:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d444:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d448:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d44a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d44e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d450:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d454:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d456:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d45a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d45c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d460:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d462:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d466:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d468:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d46c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800d46e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d472:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d474:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d478:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d47a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d47e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d480:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d484:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d486:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d48a:	4770      	bx	lr
 800d48c:	2400000c 	.word	0x2400000c
 800d490:	10624dd3 	.word	0x10624dd3
 800d494:	fffee0c0 	.word	0xfffee0c0
 800d498:	00200045 	.word	0x00200045
 800d49c:	002000c5 	.word	0x002000c5
 800d4a0:	fdffe008 	.word	0xfdffe008

0800d4a4 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4a4:	4a19      	ldr	r2, [pc, #100]	@ (800d50c <SDMMC_CmdAppOperCommand+0x68>)
{
 800d4a6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4a8:	4b19      	ldr	r3, [pc, #100]	@ (800d510 <SDMMC_CmdAppOperCommand+0x6c>)
 800d4aa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d4ac:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4b0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d4b4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d4b8:	4816      	ldr	r0, [pc, #88]	@ (800d514 <SDMMC_CmdAppOperCommand+0x70>)
 800d4ba:	f241 1329 	movw	r3, #4393	@ 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4be:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d4c0:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4c2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d4c6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d4c8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d4cc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d4d0:	1e53      	subs	r3, r2, #1
 800d4d2:	b14a      	cbz	r2, 800d4e8 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800d4d4:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d4d8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d4da:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d4de:	d001      	beq.n	800d4e4 <SDMMC_CmdAppOperCommand+0x40>
 800d4e0:	0492      	lsls	r2, r2, #18
 800d4e2:	d504      	bpl.n	800d4ee <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800d4e4:	1c59      	adds	r1, r3, #1
 800d4e6:	d1f5      	bne.n	800d4d4 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d4e8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d4ec:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d4ee:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800d4f2:	f010 0004 	ands.w	r0, r0, #4
 800d4f6:	d103      	bne.n	800d500 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4f8:	4b07      	ldr	r3, [pc, #28]	@ (800d518 <SDMMC_CmdAppOperCommand+0x74>)
 800d4fa:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800d4fe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d500:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d502:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d504:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	2400000c 	.word	0x2400000c
 800d510:	10624dd3 	.word	0x10624dd3
 800d514:	fffee0c0 	.word	0xfffee0c0
 800d518:	002000c5 	.word	0x002000c5

0800d51c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d51c:	4a4f      	ldr	r2, [pc, #316]	@ (800d65c <SDMMC_CmdBusWidth+0x140>)
{
 800d51e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d520:	4b4f      	ldr	r3, [pc, #316]	@ (800d660 <SDMMC_CmdBusWidth+0x144>)
 800d522:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d524:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d528:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d52c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d530:	484c      	ldr	r0, [pc, #304]	@ (800d664 <SDMMC_CmdBusWidth+0x148>)
 800d532:	f241 1306 	movw	r3, #4358	@ 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d536:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d538:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d53a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d53e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d540:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d544:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d548:	1e53      	subs	r3, r2, #1
 800d54a:	b14a      	cbz	r2, 800d560 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d54c:	4946      	ldr	r1, [pc, #280]	@ (800d668 <SDMMC_CmdBusWidth+0x14c>)
    sta_reg = SDMMCx->STA;
 800d54e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d552:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d554:	420a      	tst	r2, r1
 800d556:	d001      	beq.n	800d55c <SDMMC_CmdBusWidth+0x40>
 800d558:	0492      	lsls	r2, r2, #18
 800d55a:	d504      	bpl.n	800d566 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800d55c:	1c58      	adds	r0, r3, #1
 800d55e:	d1f6      	bne.n	800d54e <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800d560:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d564:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d566:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d56a:	075b      	lsls	r3, r3, #29
 800d56c:	d443      	bmi.n	800d5f6 <SDMMC_CmdBusWidth+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d56e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d572:	07d8      	lsls	r0, r3, #31
 800d574:	d409      	bmi.n	800d58a <SDMMC_CmdBusWidth+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d576:	4b3d      	ldr	r3, [pc, #244]	@ (800d66c <SDMMC_CmdBusWidth+0x150>)
 800d578:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d57c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b06      	cmp	r3, #6
 800d584:	d005      	beq.n	800d592 <SDMMC_CmdBusWidth+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d586:	2001      	movs	r0, #1
 800d588:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d58a:	2301      	movs	r3, #1
 800d58c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d590:	e7f9      	b.n	800d586 <SDMMC_CmdBusWidth+0x6a>
  return (*(__IO uint32_t *) tmp);
 800d592:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d596:	4836      	ldr	r0, [pc, #216]	@ (800d670 <SDMMC_CmdBusWidth+0x154>)
 800d598:	4018      	ands	r0, r3
 800d59a:	b358      	cbz	r0, 800d5f4 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	db2f      	blt.n	800d600 <SDMMC_CmdBusWidth+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d5a0:	0059      	lsls	r1, r3, #1
 800d5a2:	d430      	bmi.n	800d606 <SDMMC_CmdBusWidth+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d5a4:	009a      	lsls	r2, r3, #2
 800d5a6:	d430      	bmi.n	800d60a <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d5a8:	00d9      	lsls	r1, r3, #3
 800d5aa:	d430      	bmi.n	800d60e <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d5ac:	011a      	lsls	r2, r3, #4
 800d5ae:	d431      	bmi.n	800d614 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d5b0:	0159      	lsls	r1, r3, #5
 800d5b2:	d432      	bmi.n	800d61a <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d5b4:	01da      	lsls	r2, r3, #7
 800d5b6:	d433      	bmi.n	800d620 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d5b8:	0219      	lsls	r1, r3, #8
 800d5ba:	d434      	bmi.n	800d626 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d5bc:	025a      	lsls	r2, r3, #9
 800d5be:	d435      	bmi.n	800d62c <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d5c0:	0299      	lsls	r1, r3, #10
 800d5c2:	d43f      	bmi.n	800d644 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d5c4:	02da      	lsls	r2, r3, #11
 800d5c6:	d43a      	bmi.n	800d63e <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d5c8:	0359      	lsls	r1, r3, #13
 800d5ca:	d435      	bmi.n	800d638 <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d5cc:	039a      	lsls	r2, r3, #14
 800d5ce:	d430      	bmi.n	800d632 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d5d0:	03d9      	lsls	r1, r3, #15
 800d5d2:	d440      	bmi.n	800d656 <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d5d4:	041a      	lsls	r2, r3, #16
 800d5d6:	d43b      	bmi.n	800d650 <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d5d8:	0459      	lsls	r1, r3, #17
 800d5da:	d436      	bmi.n	800d64a <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d5dc:	049a      	lsls	r2, r3, #18
 800d5de:	d407      	bmi.n	800d5f0 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d5e0:	f013 0f08 	tst.w	r3, #8
 800d5e4:	bf0c      	ite	eq
 800d5e6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d5ea:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d5ee:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800d5f0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800d5f4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5f6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5f8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5fa:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5fe:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d600:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d604:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d606:	2040      	movs	r0, #64	@ 0x40
 800d608:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d60a:	2080      	movs	r0, #128	@ 0x80
 800d60c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d60e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d612:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d614:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d618:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d61a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d61e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d620:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d624:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d626:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d62a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d62c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d630:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d632:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d636:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d638:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d63c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800d63e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d642:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d644:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d648:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d64a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d64e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d650:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d654:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d656:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d65a:	4770      	bx	lr
 800d65c:	2400000c 	.word	0x2400000c
 800d660:	10624dd3 	.word	0x10624dd3
 800d664:	fffee0c0 	.word	0xfffee0c0
 800d668:	00200045 	.word	0x00200045
 800d66c:	002000c5 	.word	0x002000c5
 800d670:	fdffe008 	.word	0xfdffe008

0800d674 <SDMMC_CmdSendSCR>:
{
 800d674:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d676:	4a4c      	ldr	r2, [pc, #304]	@ (800d7a8 <SDMMC_CmdSendSCR+0x134>)
 800d678:	4b4c      	ldr	r3, [pc, #304]	@ (800d7ac <SDMMC_CmdSendSCR+0x138>)
 800d67a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d67c:	484c      	ldr	r0, [pc, #304]	@ (800d7b0 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d67e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d682:	f241 1333 	movw	r3, #4403	@ 0x1133
{
 800d686:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d688:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d68a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800d68c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d68e:	68cc      	ldr	r4, [r1, #12]
 800d690:	4020      	ands	r0, r4
 800d692:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d694:	f241 3088 	movw	r0, #5000	@ 0x1388
 800d698:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d69c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800d69e:	b14a      	cbz	r2, 800d6b4 <SDMMC_CmdSendSCR+0x40>
 800d6a0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d6a2:	4844      	ldr	r0, [pc, #272]	@ (800d7b4 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 800d6a4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800d6a6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d6a8:	4202      	tst	r2, r0
 800d6aa:	d001      	beq.n	800d6b0 <SDMMC_CmdSendSCR+0x3c>
 800d6ac:	0492      	lsls	r2, r2, #18
 800d6ae:	d506      	bpl.n	800d6be <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800d6b0:	1c5c      	adds	r4, r3, #1
 800d6b2:	d1f7      	bne.n	800d6a4 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d6b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6bc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6be:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d6c0:	075c      	lsls	r4, r3, #29
 800d6c2:	d43c      	bmi.n	800d73e <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6c4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d6c6:	07d8      	lsls	r0, r3, #31
 800d6c8:	d407      	bmi.n	800d6da <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6ca:	4b3b      	ldr	r3, [pc, #236]	@ (800d7b8 <SDMMC_CmdSendSCR+0x144>)
 800d6cc:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d6ce:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b33      	cmp	r3, #51	@ 0x33
 800d6d4:	d004      	beq.n	800d6e0 <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	e7ee      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6da:	2301      	movs	r3, #1
 800d6dc:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6de:	e7fa      	b.n	800d6d6 <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 800d6e0:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d6e2:	4836      	ldr	r0, [pc, #216]	@ (800d7bc <SDMMC_CmdSendSCR+0x148>)
 800d6e4:	4018      	ands	r0, r3
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0e6      	beq.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	db2b      	blt.n	800d746 <SDMMC_CmdSendSCR+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d6ee:	005a      	lsls	r2, r3, #1
 800d6f0:	d42c      	bmi.n	800d74c <SDMMC_CmdSendSCR+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d6f2:	009c      	lsls	r4, r3, #2
 800d6f4:	d42c      	bmi.n	800d750 <SDMMC_CmdSendSCR+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d6f6:	00d9      	lsls	r1, r3, #3
 800d6f8:	d42c      	bmi.n	800d754 <SDMMC_CmdSendSCR+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d6fa:	011a      	lsls	r2, r3, #4
 800d6fc:	d42d      	bmi.n	800d75a <SDMMC_CmdSendSCR+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d6fe:	015c      	lsls	r4, r3, #5
 800d700:	d42e      	bmi.n	800d760 <SDMMC_CmdSendSCR+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d702:	01d9      	lsls	r1, r3, #7
 800d704:	d42f      	bmi.n	800d766 <SDMMC_CmdSendSCR+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d706:	021a      	lsls	r2, r3, #8
 800d708:	d430      	bmi.n	800d76c <SDMMC_CmdSendSCR+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d70a:	025c      	lsls	r4, r3, #9
 800d70c:	d431      	bmi.n	800d772 <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d70e:	0299      	lsls	r1, r3, #10
 800d710:	d43b      	bmi.n	800d78a <SDMMC_CmdSendSCR+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d712:	02da      	lsls	r2, r3, #11
 800d714:	d436      	bmi.n	800d784 <SDMMC_CmdSendSCR+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d716:	035c      	lsls	r4, r3, #13
 800d718:	d431      	bmi.n	800d77e <SDMMC_CmdSendSCR+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d71a:	0399      	lsls	r1, r3, #14
 800d71c:	d42c      	bmi.n	800d778 <SDMMC_CmdSendSCR+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d71e:	03da      	lsls	r2, r3, #15
 800d720:	d43f      	bmi.n	800d7a2 <SDMMC_CmdSendSCR+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d722:	041c      	lsls	r4, r3, #16
 800d724:	d43a      	bmi.n	800d79c <SDMMC_CmdSendSCR+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d726:	0459      	lsls	r1, r3, #17
 800d728:	d435      	bmi.n	800d796 <SDMMC_CmdSendSCR+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d72a:	049a      	lsls	r2, r3, #18
 800d72c:	d430      	bmi.n	800d790 <SDMMC_CmdSendSCR+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d72e:	f013 0f08 	tst.w	r3, #8
 800d732:	bf0c      	ite	eq
 800d734:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d738:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d73c:	e7bc      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d73e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d740:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d742:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d744:	e7b8      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d746:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d74a:	e7b5      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d74c:	2040      	movs	r0, #64	@ 0x40
 800d74e:	e7b3      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d750:	2080      	movs	r0, #128	@ 0x80
 800d752:	e7b1      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d754:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d758:	e7ae      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d75a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d75e:	e7ab      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d760:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d764:	e7a8      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d766:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d76a:	e7a5      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d76c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d770:	e7a2      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d772:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d776:	e79f      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d778:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d77c:	e79c      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d77e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d782:	e799      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d784:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d788:	e796      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d78a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d78e:	e793      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d790:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d794:	e790      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d796:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d79a:	e78d      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d79c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d7a0:	e78a      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d7a2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d7a6:	e787      	b.n	800d6b8 <SDMMC_CmdSendSCR+0x44>
 800d7a8:	2400000c 	.word	0x2400000c
 800d7ac:	10624dd3 	.word	0x10624dd3
 800d7b0:	fffee0c0 	.word	0xfffee0c0
 800d7b4:	00200045 	.word	0x00200045
 800d7b8:	002000c5 	.word	0x002000c5
 800d7bc:	fdffe008 	.word	0xfdffe008

0800d7c0 <SDMMC_CmdSendCID>:
{
 800d7c0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7c2:	4a1a      	ldr	r2, [pc, #104]	@ (800d82c <SDMMC_CmdSendCID+0x6c>)
 800d7c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d830 <SDMMC_CmdSendCID+0x70>)
 800d7c6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7c8:	481a      	ldr	r0, [pc, #104]	@ (800d834 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7ca:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7ce:	f241 3302 	movw	r3, #4866	@ 0x1302
{
 800d7d2:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d7d4:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7d6:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800d7d8:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7da:	68cc      	ldr	r4, [r1, #12]
 800d7dc:	4020      	ands	r0, r4
 800d7de:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d7e0:	f241 3088 	movw	r0, #5000	@ 0x1388
 800d7e4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d7e8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800d7ea:	b14a      	cbz	r2, 800d800 <SDMMC_CmdSendCID+0x40>
 800d7ec:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d7ee:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800d7f0:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d7f2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d7f6:	d001      	beq.n	800d7fc <SDMMC_CmdSendCID+0x3c>
 800d7f8:	0492      	lsls	r2, r2, #18
 800d7fa:	d506      	bpl.n	800d80a <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800d7fc:	1c58      	adds	r0, r3, #1
 800d7fe:	d1f6      	bne.n	800d7ee <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d800:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d808:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d80a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d80c:	075b      	lsls	r3, r3, #29
 800d80e:	d409      	bmi.n	800d824 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d810:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800d812:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d816:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d81a:	bf14      	ite	ne
 800d81c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d81e:	4b06      	ldreq	r3, [pc, #24]	@ (800d838 <SDMMC_CmdSendCID+0x78>)
 800d820:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800d822:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d824:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d826:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d828:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d82a:	e7eb      	b.n	800d804 <SDMMC_CmdSendCID+0x44>
 800d82c:	2400000c 	.word	0x2400000c
 800d830:	10624dd3 	.word	0x10624dd3
 800d834:	fffee0c0 	.word	0xfffee0c0
 800d838:	002000c5 	.word	0x002000c5

0800d83c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d83c:	4a1b      	ldr	r2, [pc, #108]	@ (800d8ac <SDMMC_CmdSendCSD+0x70>)
{
 800d83e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d840:	4b1b      	ldr	r3, [pc, #108]	@ (800d8b0 <SDMMC_CmdSendCSD+0x74>)
 800d842:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d844:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d848:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d84c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d850:	4818      	ldr	r0, [pc, #96]	@ (800d8b4 <SDMMC_CmdSendCSD+0x78>)
 800d852:	f241 3309 	movw	r3, #4873	@ 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d856:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d858:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d85a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d85e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d860:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d864:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d868:	1e53      	subs	r3, r2, #1
 800d86a:	b14a      	cbz	r2, 800d880 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800d86c:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d870:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d872:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d876:	d001      	beq.n	800d87c <SDMMC_CmdSendCSD+0x40>
 800d878:	0492      	lsls	r2, r2, #18
 800d87a:	d504      	bpl.n	800d886 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800d87c:	1c59      	adds	r1, r3, #1
 800d87e:	d1f5      	bne.n	800d86c <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d880:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d884:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d886:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d88a:	075b      	lsls	r3, r3, #29
 800d88c:	d409      	bmi.n	800d8a2 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d88e:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800d892:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d896:	bf14      	ite	ne
 800d898:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d89a:	4b07      	ldreq	r3, [pc, #28]	@ (800d8b8 <SDMMC_CmdSendCSD+0x7c>)
 800d89c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800d8a0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8a2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8a4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8a6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8aa:	4770      	bx	lr
 800d8ac:	2400000c 	.word	0x2400000c
 800d8b0:	10624dd3 	.word	0x10624dd3
 800d8b4:	fffee0c0 	.word	0xfffee0c0
 800d8b8:	002000c5 	.word	0x002000c5

0800d8bc <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800d8bc:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8be:	4a2b      	ldr	r2, [pc, #172]	@ (800d96c <SDMMC_CmdSetRelAdd+0xb0>)
{
 800d8c0:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8c2:	6812      	ldr	r2, [r2, #0]
{
 800d8c4:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d8c6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8c8:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8ca:	4829      	ldr	r0, [pc, #164]	@ (800d970 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8cc:	4c29      	ldr	r4, [pc, #164]	@ (800d974 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8ce:	fba0 0202 	umull	r0, r2, r0, r2
 800d8d2:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8d6:	401c      	ands	r4, r3
 800d8d8:	f241 1303 	movw	r3, #4355	@ 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8dc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8de:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8e0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8e4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d8e8:	b152      	cbz	r2, 800d900 <SDMMC_CmdSetRelAdd+0x44>
 800d8ea:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d8ec:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d8f0:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8f2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d8f6:	d001      	beq.n	800d8fc <SDMMC_CmdSetRelAdd+0x40>
 800d8f8:	0492      	lsls	r2, r2, #18
 800d8fa:	d506      	bpl.n	800d90a <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800d8fc:	1c58      	adds	r0, r3, #1
 800d8fe:	d1f5      	bne.n	800d8ec <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d900:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d908:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d90a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d90e:	075c      	lsls	r4, r3, #29
 800d910:	d420      	bmi.n	800d954 <SDMMC_CmdSetRelAdd+0x98>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d912:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d916:	07d8      	lsls	r0, r3, #31
 800d918:	d406      	bmi.n	800d928 <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800d91a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b03      	cmp	r3, #3
 800d922:	d005      	beq.n	800d930 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d924:	2001      	movs	r0, #1
 800d926:	e7ed      	b.n	800d904 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d928:	2301      	movs	r3, #1
 800d92a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d92e:	e7f9      	b.n	800d924 <SDMMC_CmdSetRelAdd+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d930:	4b11      	ldr	r3, [pc, #68]	@ (800d978 <SDMMC_CmdSetRelAdd+0xbc>)
 800d932:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800d936:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d93a:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800d93e:	d011      	beq.n	800d964 <SDMMC_CmdSetRelAdd+0xa8>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d940:	045a      	lsls	r2, r3, #17
 800d942:	d40c      	bmi.n	800d95e <SDMMC_CmdSetRelAdd+0xa2>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d944:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800d948:	bf0c      	ite	eq
 800d94a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d94e:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800d952:	e7d7      	b.n	800d904 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d954:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d956:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d958:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d95c:	e7d2      	b.n	800d904 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d95e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d962:	e7cf      	b.n	800d904 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800d964:	0c1b      	lsrs	r3, r3, #16
 800d966:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800d968:	e7cc      	b.n	800d904 <SDMMC_CmdSetRelAdd+0x48>
 800d96a:	bf00      	nop
 800d96c:	2400000c 	.word	0x2400000c
 800d970:	10624dd3 	.word	0x10624dd3
 800d974:	fffee0c0 	.word	0xfffee0c0
 800d978:	002000c5 	.word	0x002000c5

0800d97c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d97c:	4a4f      	ldr	r2, [pc, #316]	@ (800dabc <SDMMC_CmdSendStatus+0x140>)
{
 800d97e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d980:	4b4f      	ldr	r3, [pc, #316]	@ (800dac0 <SDMMC_CmdSendStatus+0x144>)
 800d982:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d984:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d988:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d98c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d990:	484c      	ldr	r0, [pc, #304]	@ (800dac4 <SDMMC_CmdSendStatus+0x148>)
 800d992:	f241 130d 	movw	r3, #4365	@ 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d996:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d998:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d99a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d99e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d9a0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d9a4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d9a8:	1e53      	subs	r3, r2, #1
 800d9aa:	b14a      	cbz	r2, 800d9c0 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d9ac:	4946      	ldr	r1, [pc, #280]	@ (800dac8 <SDMMC_CmdSendStatus+0x14c>)
    sta_reg = SDMMCx->STA;
 800d9ae:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d9b2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d9b4:	420a      	tst	r2, r1
 800d9b6:	d001      	beq.n	800d9bc <SDMMC_CmdSendStatus+0x40>
 800d9b8:	0492      	lsls	r2, r2, #18
 800d9ba:	d504      	bpl.n	800d9c6 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800d9bc:	1c58      	adds	r0, r3, #1
 800d9be:	d1f6      	bne.n	800d9ae <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800d9c0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d9c4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9c6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d9ca:	075b      	lsls	r3, r3, #29
 800d9cc:	d443      	bmi.n	800da56 <SDMMC_CmdSendStatus+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9ce:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d9d2:	07d8      	lsls	r0, r3, #31
 800d9d4:	d409      	bmi.n	800d9ea <SDMMC_CmdSendStatus+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9d6:	4b3d      	ldr	r3, [pc, #244]	@ (800dacc <SDMMC_CmdSendStatus+0x150>)
 800d9d8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d9dc:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b0d      	cmp	r3, #13
 800d9e4:	d005      	beq.n	800d9f2 <SDMMC_CmdSendStatus+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9e6:	2001      	movs	r0, #1
 800d9e8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9f0:	e7f9      	b.n	800d9e6 <SDMMC_CmdSendStatus+0x6a>
  return (*(__IO uint32_t *) tmp);
 800d9f2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d9f6:	4836      	ldr	r0, [pc, #216]	@ (800dad0 <SDMMC_CmdSendStatus+0x154>)
 800d9f8:	4018      	ands	r0, r3
 800d9fa:	b358      	cbz	r0, 800da54 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	db2f      	blt.n	800da60 <SDMMC_CmdSendStatus+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da00:	0059      	lsls	r1, r3, #1
 800da02:	d430      	bmi.n	800da66 <SDMMC_CmdSendStatus+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da04:	009a      	lsls	r2, r3, #2
 800da06:	d430      	bmi.n	800da6a <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da08:	00d9      	lsls	r1, r3, #3
 800da0a:	d430      	bmi.n	800da6e <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da0c:	011a      	lsls	r2, r3, #4
 800da0e:	d431      	bmi.n	800da74 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da10:	0159      	lsls	r1, r3, #5
 800da12:	d432      	bmi.n	800da7a <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da14:	01da      	lsls	r2, r3, #7
 800da16:	d433      	bmi.n	800da80 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da18:	0219      	lsls	r1, r3, #8
 800da1a:	d434      	bmi.n	800da86 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da1c:	025a      	lsls	r2, r3, #9
 800da1e:	d435      	bmi.n	800da8c <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da20:	0299      	lsls	r1, r3, #10
 800da22:	d43f      	bmi.n	800daa4 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da24:	02da      	lsls	r2, r3, #11
 800da26:	d43a      	bmi.n	800da9e <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da28:	0359      	lsls	r1, r3, #13
 800da2a:	d435      	bmi.n	800da98 <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da2c:	039a      	lsls	r2, r3, #14
 800da2e:	d430      	bmi.n	800da92 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da30:	03d9      	lsls	r1, r3, #15
 800da32:	d440      	bmi.n	800dab6 <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da34:	041a      	lsls	r2, r3, #16
 800da36:	d43b      	bmi.n	800dab0 <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da38:	0459      	lsls	r1, r3, #17
 800da3a:	d436      	bmi.n	800daaa <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da3c:	049a      	lsls	r2, r3, #18
 800da3e:	d407      	bmi.n	800da50 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da40:	f013 0f08 	tst.w	r3, #8
 800da44:	bf0c      	ite	eq
 800da46:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800da4a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800da4e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800da50:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800da54:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da56:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da58:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da5a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da5e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da60:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800da64:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da66:	2040      	movs	r0, #64	@ 0x40
 800da68:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da6a:	2080      	movs	r0, #128	@ 0x80
 800da6c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da6e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800da72:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da74:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800da78:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da7a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800da7e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da80:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800da84:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da86:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800da8a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800da90:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da92:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800da96:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da98:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800da9c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800da9e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800daa2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800daa4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800daa8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800daaa:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800daae:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dab0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dab4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dab6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800daba:	4770      	bx	lr
 800dabc:	2400000c 	.word	0x2400000c
 800dac0:	10624dd3 	.word	0x10624dd3
 800dac4:	fffee0c0 	.word	0xfffee0c0
 800dac8:	00200045 	.word	0x00200045
 800dacc:	002000c5 	.word	0x002000c5
 800dad0:	fdffe008 	.word	0xfdffe008

0800dad4 <SDMMC_CmdStatusRegister>:
{
 800dad4:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dad6:	4a4c      	ldr	r2, [pc, #304]	@ (800dc08 <SDMMC_CmdStatusRegister+0x134>)
 800dad8:	4b4c      	ldr	r3, [pc, #304]	@ (800dc0c <SDMMC_CmdStatusRegister+0x138>)
 800dada:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dadc:	484c      	ldr	r0, [pc, #304]	@ (800dc10 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dade:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dae2:	f241 130d 	movw	r3, #4365	@ 0x110d
{
 800dae6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800dae8:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800daea:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800daec:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800daee:	68cc      	ldr	r4, [r1, #12]
 800daf0:	4020      	ands	r0, r4
 800daf2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800daf4:	f241 3088 	movw	r0, #5000	@ 0x1388
 800daf8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dafc:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800dafe:	b14a      	cbz	r2, 800db14 <SDMMC_CmdStatusRegister+0x40>
 800db00:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800db02:	4844      	ldr	r0, [pc, #272]	@ (800dc14 <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 800db04:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800db06:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db08:	4202      	tst	r2, r0
 800db0a:	d001      	beq.n	800db10 <SDMMC_CmdStatusRegister+0x3c>
 800db0c:	0492      	lsls	r2, r2, #18
 800db0e:	d506      	bpl.n	800db1e <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800db10:	1c5c      	adds	r4, r3, #1
 800db12:	d1f7      	bne.n	800db04 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800db14:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800db18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db1c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db1e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800db20:	075c      	lsls	r4, r3, #29
 800db22:	d43c      	bmi.n	800db9e <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db24:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800db26:	07d8      	lsls	r0, r3, #31
 800db28:	d407      	bmi.n	800db3a <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db2a:	4b3b      	ldr	r3, [pc, #236]	@ (800dc18 <SDMMC_CmdStatusRegister+0x144>)
 800db2c:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800db2e:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b0d      	cmp	r3, #13
 800db34:	d004      	beq.n	800db40 <SDMMC_CmdStatusRegister+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db36:	2001      	movs	r0, #1
 800db38:	e7ee      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db3a:	2301      	movs	r3, #1
 800db3c:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db3e:	e7fa      	b.n	800db36 <SDMMC_CmdStatusRegister+0x62>
  return (*(__IO uint32_t *) tmp);
 800db40:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800db42:	4836      	ldr	r0, [pc, #216]	@ (800dc1c <SDMMC_CmdStatusRegister+0x148>)
 800db44:	4018      	ands	r0, r3
 800db46:	2800      	cmp	r0, #0
 800db48:	d0e6      	beq.n	800db18 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	db2b      	blt.n	800dba6 <SDMMC_CmdStatusRegister+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800db4e:	005a      	lsls	r2, r3, #1
 800db50:	d42c      	bmi.n	800dbac <SDMMC_CmdStatusRegister+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800db52:	009c      	lsls	r4, r3, #2
 800db54:	d42c      	bmi.n	800dbb0 <SDMMC_CmdStatusRegister+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800db56:	00d9      	lsls	r1, r3, #3
 800db58:	d42c      	bmi.n	800dbb4 <SDMMC_CmdStatusRegister+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800db5a:	011a      	lsls	r2, r3, #4
 800db5c:	d42d      	bmi.n	800dbba <SDMMC_CmdStatusRegister+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800db5e:	015c      	lsls	r4, r3, #5
 800db60:	d42e      	bmi.n	800dbc0 <SDMMC_CmdStatusRegister+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800db62:	01d9      	lsls	r1, r3, #7
 800db64:	d42f      	bmi.n	800dbc6 <SDMMC_CmdStatusRegister+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800db66:	021a      	lsls	r2, r3, #8
 800db68:	d430      	bmi.n	800dbcc <SDMMC_CmdStatusRegister+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800db6a:	025c      	lsls	r4, r3, #9
 800db6c:	d431      	bmi.n	800dbd2 <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800db6e:	0299      	lsls	r1, r3, #10
 800db70:	d43b      	bmi.n	800dbea <SDMMC_CmdStatusRegister+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800db72:	02da      	lsls	r2, r3, #11
 800db74:	d436      	bmi.n	800dbe4 <SDMMC_CmdStatusRegister+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800db76:	035c      	lsls	r4, r3, #13
 800db78:	d431      	bmi.n	800dbde <SDMMC_CmdStatusRegister+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db7a:	0399      	lsls	r1, r3, #14
 800db7c:	d42c      	bmi.n	800dbd8 <SDMMC_CmdStatusRegister+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db7e:	03da      	lsls	r2, r3, #15
 800db80:	d43f      	bmi.n	800dc02 <SDMMC_CmdStatusRegister+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db82:	041c      	lsls	r4, r3, #16
 800db84:	d43a      	bmi.n	800dbfc <SDMMC_CmdStatusRegister+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800db86:	0459      	lsls	r1, r3, #17
 800db88:	d435      	bmi.n	800dbf6 <SDMMC_CmdStatusRegister+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db8a:	049a      	lsls	r2, r3, #18
 800db8c:	d430      	bmi.n	800dbf0 <SDMMC_CmdStatusRegister+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db8e:	f013 0f08 	tst.w	r3, #8
 800db92:	bf0c      	ite	eq
 800db94:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800db98:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800db9c:	e7bc      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db9e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dba0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dba2:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dba4:	e7b8      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dba6:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dbaa:	e7b5      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dbac:	2040      	movs	r0, #64	@ 0x40
 800dbae:	e7b3      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dbb0:	2080      	movs	r0, #128	@ 0x80
 800dbb2:	e7b1      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dbb4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dbb8:	e7ae      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dbba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dbbe:	e7ab      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dbc0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dbc4:	e7a8      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dbc6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dbca:	e7a5      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbcc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dbd0:	e7a2      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dbd2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dbd6:	e79f      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dbd8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dbdc:	e79c      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dbde:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dbe2:	e799      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800dbe4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dbe8:	e796      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dbea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dbee:	e793      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800dbf0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dbf4:	e790      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dbf6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dbfa:	e78d      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dbfc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dc00:	e78a      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dc02:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dc06:	e787      	b.n	800db18 <SDMMC_CmdStatusRegister+0x44>
 800dc08:	2400000c 	.word	0x2400000c
 800dc0c:	10624dd3 	.word	0x10624dd3
 800dc10:	fffee0c0 	.word	0xfffee0c0
 800dc14:	00200045 	.word	0x00200045
 800dc18:	002000c5 	.word	0x002000c5
 800dc1c:	fdffe008 	.word	0xfdffe008

0800dc20 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800dc20:	2000      	movs	r0, #0
 800dc22:	4770      	bx	lr

0800dc24 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dc24:	b510      	push	{r4, lr}
 800dc26:	4694      	mov	ip, r2
 800dc28:	b082      	sub	sp, #8
 800dc2a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dc2c:	460a      	mov	r2, r1
 800dc2e:	4663      	mov	r3, ip
 800dc30:	4601      	mov	r1, r0
 800dc32:	9400      	str	r4, [sp, #0]
 800dc34:	4803      	ldr	r0, [pc, #12]	@ (800dc44 <BSP_SD_ReadBlocks+0x20>)
 800dc36:	f7fd fc51 	bl	800b4dc <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800dc3a:	3800      	subs	r0, #0
 800dc3c:	bf18      	it	ne
 800dc3e:	2001      	movne	r0, #1
 800dc40:	b002      	add	sp, #8
 800dc42:	bd10      	pop	{r4, pc}
 800dc44:	24000378 	.word	0x24000378

0800dc48 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	4694      	mov	ip, r2
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dc50:	460a      	mov	r2, r1
 800dc52:	4663      	mov	r3, ip
 800dc54:	4601      	mov	r1, r0
 800dc56:	9400      	str	r4, [sp, #0]
 800dc58:	4803      	ldr	r0, [pc, #12]	@ (800dc68 <BSP_SD_WriteBlocks+0x20>)
 800dc5a:	f7fd fd23 	bl	800b6a4 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800dc5e:	3800      	subs	r0, #0
 800dc60:	bf18      	it	ne
 800dc62:	2001      	movne	r0, #1
 800dc64:	b002      	add	sp, #8
 800dc66:	bd10      	pop	{r4, pc}
 800dc68:	24000378 	.word	0x24000378

0800dc6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dc6c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dc6e:	4803      	ldr	r0, [pc, #12]	@ (800dc7c <BSP_SD_GetCardState+0x10>)
 800dc70:	f7fe fa04 	bl	800c07c <HAL_SD_GetCardState>
}
 800dc74:	3804      	subs	r0, #4
 800dc76:	bf18      	it	ne
 800dc78:	2001      	movne	r0, #1
 800dc7a:	bd08      	pop	{r3, pc}
 800dc7c:	24000378 	.word	0x24000378

0800dc80 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dc80:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dc82:	4801      	ldr	r0, [pc, #4]	@ (800dc88 <BSP_SD_GetCardInfo+0x8>)
 800dc84:	f7fe b8ba 	b.w	800bdfc <HAL_SD_GetCardInfo>
 800dc88:	24000378 	.word	0x24000378

0800dc8c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dc8c:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800dc8e:	2301      	movs	r3, #1
{
 800dc90:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800dc92:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dc96:	f000 f821 	bl	800dcdc <BSP_PlatformIsDetected>
 800dc9a:	b908      	cbnz	r0, 800dca0 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800dc9c:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800dca0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800dca4:	b003      	add	sp, #12
 800dca6:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcaa:	bf00      	nop

0800dcac <BSP_SD_Init>:
{
 800dcac:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dcae:	f7ff ffed 	bl	800dc8c <BSP_SD_IsDetected>
 800dcb2:	2801      	cmp	r0, #1
 800dcb4:	d001      	beq.n	800dcba <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800dcb6:	2002      	movs	r0, #2
}
 800dcb8:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800dcba:	4807      	ldr	r0, [pc, #28]	@ (800dcd8 <BSP_SD_Init+0x2c>)
 800dcbc:	f7fe f97c 	bl	800bfb8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d1f9      	bne.n	800dcb8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dcc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dcc8:	4803      	ldr	r0, [pc, #12]	@ (800dcd8 <BSP_SD_Init+0x2c>)
 800dcca:	f7fe f8ab 	bl	800be24 <HAL_SD_ConfigWideBusOperation>
 800dcce:	3800      	subs	r0, #0
 800dcd0:	bf18      	it	ne
 800dcd2:	2001      	movne	r0, #1
}
 800dcd4:	bd08      	pop	{r3, pc}
 800dcd6:	bf00      	nop
 800dcd8:	24000378 	.word	0x24000378

0800dcdc <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dcdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800dce0:	4803      	ldr	r0, [pc, #12]	@ (800dcf0 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800dce2:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dce4:	f7f8 fc10 	bl	8006508 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800dce8:	fab0 f080 	clz	r0, r0
 800dcec:	0940      	lsrs	r0, r0, #5
 800dcee:	bd08      	pop	{r3, pc}
 800dcf0:	58020000 	.word	0x58020000

0800dcf4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dcf4:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800dcf6:	4c0a      	ldr	r4, [pc, #40]	@ (800dd20 <SD_initialize+0x2c>)
 800dcf8:	2501      	movs	r5, #1
 800dcfa:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dcfc:	f7ff ffd6 	bl	800dcac <BSP_SD_Init>
 800dd00:	b108      	cbz	r0, 800dd06 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dd02:	7820      	ldrb	r0, [r4, #0]
}
 800dd04:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800dd06:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800dd08:	f7ff ffb0 	bl	800dc6c <BSP_SD_GetCardState>
 800dd0c:	b918      	cbnz	r0, 800dd16 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800dd0e:	7823      	ldrb	r3, [r4, #0]
 800dd10:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800dd14:	7023      	strb	r3, [r4, #0]
  return Stat;
 800dd16:	7823      	ldrb	r3, [r4, #0]
 800dd18:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800dd1a:	7023      	strb	r3, [r4, #0]
  return Stat;
 800dd1c:	7820      	ldrb	r0, [r4, #0]
}
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}
 800dd20:	24000018 	.word	0x24000018

0800dd24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dd24:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800dd26:	2301      	movs	r3, #1
 800dd28:	4c05      	ldr	r4, [pc, #20]	@ (800dd40 <SD_status+0x1c>)
 800dd2a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800dd2c:	f7ff ff9e 	bl	800dc6c <BSP_SD_GetCardState>
 800dd30:	b918      	cbnz	r0, 800dd3a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800dd32:	7823      	ldrb	r3, [r4, #0]
 800dd34:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800dd38:	7023      	strb	r3, [r4, #0]
  return Stat;
 800dd3a:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800dd3c:	bd10      	pop	{r4, pc}
 800dd3e:	bf00      	nop
 800dd40:	24000018 	.word	0x24000018

0800dd44 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd44:	4b16      	ldr	r3, [pc, #88]	@ (800dda0 <SD_ioctl+0x5c>)
{
 800dd46:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd48:	7818      	ldrb	r0, [r3, #0]
{
 800dd4a:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd4c:	f010 0401 	ands.w	r4, r0, #1
 800dd50:	d106      	bne.n	800dd60 <SD_ioctl+0x1c>
 800dd52:	4615      	mov	r5, r2

  switch (cmd)
 800dd54:	2903      	cmp	r1, #3
 800dd56:	d820      	bhi.n	800dd9a <SD_ioctl+0x56>
 800dd58:	e8df f001 	tbb	[pc, r1]
 800dd5c:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dd60:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800dd62:	4620      	mov	r0, r4
 800dd64:	b00b      	add	sp, #44	@ 0x2c
 800dd66:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800dd68:	a801      	add	r0, sp, #4
 800dd6a:	f7ff ff89 	bl	800dc80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dd6e:	9b08      	ldr	r3, [sp, #32]
}
 800dd70:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dd72:	0a5b      	lsrs	r3, r3, #9
 800dd74:	602b      	str	r3, [r5, #0]
}
 800dd76:	b00b      	add	sp, #44	@ 0x2c
 800dd78:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800dd7a:	a801      	add	r0, sp, #4
 800dd7c:	f7ff ff80 	bl	800dc80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dd80:	9b07      	ldr	r3, [sp, #28]
}
 800dd82:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dd84:	602b      	str	r3, [r5, #0]
}
 800dd86:	b00b      	add	sp, #44	@ 0x2c
 800dd88:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800dd8a:	a801      	add	r0, sp, #4
 800dd8c:	f7ff ff78 	bl	800dc80 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dd90:	9b08      	ldr	r3, [sp, #32]
}
 800dd92:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dd94:	802b      	strh	r3, [r5, #0]
}
 800dd96:	b00b      	add	sp, #44	@ 0x2c
 800dd98:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800dd9a:	2404      	movs	r4, #4
 800dd9c:	e7e1      	b.n	800dd62 <SD_ioctl+0x1e>
 800dd9e:	bf00      	nop
 800dda0:	24000018 	.word	0x24000018

0800dda4 <SD_read>:
{
 800dda4:	b508      	push	{r3, lr}
 800dda6:	4608      	mov	r0, r1
 800dda8:	4611      	mov	r1, r2
 800ddaa:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ddac:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb0:	f7ff ff38 	bl	800dc24 <BSP_SD_ReadBlocks>
 800ddb4:	b108      	cbz	r0, 800ddba <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800ddb6:	2001      	movs	r0, #1
}
 800ddb8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ddba:	f7ff ff57 	bl	800dc6c <BSP_SD_GetCardState>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d0fa      	beq.n	800ddb8 <SD_read+0x14>
 800ddc2:	f7ff ff53 	bl	800dc6c <BSP_SD_GetCardState>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d1f7      	bne.n	800ddba <SD_read+0x16>
 800ddca:	e7f5      	b.n	800ddb8 <SD_read+0x14>

0800ddcc <SD_write>:
{
 800ddcc:	b508      	push	{r3, lr}
 800ddce:	4608      	mov	r0, r1
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ddd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd8:	f7ff ff36 	bl	800dc48 <BSP_SD_WriteBlocks>
 800dddc:	b108      	cbz	r0, 800dde2 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800ddde:	2001      	movs	r0, #1
}
 800dde0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dde2:	f7ff ff43 	bl	800dc6c <BSP_SD_GetCardState>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d0fa      	beq.n	800dde0 <SD_write+0x14>
 800ddea:	f7ff ff3f 	bl	800dc6c <BSP_SD_GetCardState>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d1f7      	bne.n	800dde2 <SD_write+0x16>
 800ddf2:	e7f5      	b.n	800dde0 <SD_write+0x14>

0800ddf4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ddf4:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <disk_status+0x10>)
 800ddf6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ddfa:	4403      	add	r3, r0
 800ddfc:	6852      	ldr	r2, [r2, #4]
 800ddfe:	7a18      	ldrb	r0, [r3, #8]
 800de00:	6853      	ldr	r3, [r2, #4]
 800de02:	4718      	bx	r3
 800de04:	240ac8e0 	.word	0x240ac8e0

0800de08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800de08:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800de0a:	4d09      	ldr	r5, [pc, #36]	@ (800de30 <disk_initialize+0x28>)
 800de0c:	5c2b      	ldrb	r3, [r5, r0]
 800de0e:	b10b      	cbz	r3, 800de14 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800de10:	2000      	movs	r0, #0
    {
      disk.is_initialized[pdrv] = 1;
    }
  }
  return stat;
}
 800de12:	bd38      	pop	{r3, r4, r5, pc}
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800de14:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800de18:	182b      	adds	r3, r5, r0
 800de1a:	4604      	mov	r4, r0
 800de1c:	6852      	ldr	r2, [r2, #4]
 800de1e:	7a18      	ldrb	r0, [r3, #8]
 800de20:	6813      	ldr	r3, [r2, #0]
 800de22:	4798      	blx	r3
    if(stat == RES_OK)
 800de24:	2800      	cmp	r0, #0
 800de26:	d1f4      	bne.n	800de12 <disk_initialize+0xa>
      disk.is_initialized[pdrv] = 1;
 800de28:	2301      	movs	r3, #1
 800de2a:	552b      	strb	r3, [r5, r4]
 800de2c:	e7f0      	b.n	800de10 <disk_initialize+0x8>
 800de2e:	bf00      	nop
 800de30:	240ac8e0 	.word	0x240ac8e0

0800de34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800de34:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800de36:	4c05      	ldr	r4, [pc, #20]	@ (800de4c <disk_read+0x18>)
 800de38:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800de3c:	4404      	add	r4, r0
 800de3e:	686d      	ldr	r5, [r5, #4]
 800de40:	7a20      	ldrb	r0, [r4, #8]
 800de42:	68ac      	ldr	r4, [r5, #8]
 800de44:	46a4      	mov	ip, r4
  return res;
}
 800de46:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800de48:	4760      	bx	ip
 800de4a:	bf00      	nop
 800de4c:	240ac8e0 	.word	0x240ac8e0

0800de50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800de50:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800de52:	4c05      	ldr	r4, [pc, #20]	@ (800de68 <disk_write+0x18>)
 800de54:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800de58:	4404      	add	r4, r0
 800de5a:	686d      	ldr	r5, [r5, #4]
 800de5c:	7a20      	ldrb	r0, [r4, #8]
 800de5e:	68ec      	ldr	r4, [r5, #12]
 800de60:	46a4      	mov	ip, r4
  return res;
}
 800de62:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800de64:	4760      	bx	ip
 800de66:	bf00      	nop
 800de68:	240ac8e0 	.word	0x240ac8e0

0800de6c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800de6c:	4b04      	ldr	r3, [pc, #16]	@ (800de80 <disk_ioctl+0x14>)
 800de6e:	eb03 0c00 	add.w	ip, r3, r0
 800de72:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	4718      	bx	r3
 800de80:	240ac8e0 	.word	0x240ac8e0

0800de84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800de84:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800de86:	4b28      	ldr	r3, [pc, #160]	@ (800df28 <inc_lock+0xa4>)
{
 800de88:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800de8a:	6818      	ldr	r0, [r3, #0]
 800de8c:	6814      	ldr	r4, [r2, #0]
 800de8e:	4284      	cmp	r4, r0
 800de90:	d022      	beq.n	800ded8 <inc_lock+0x54>
 800de92:	691d      	ldr	r5, [r3, #16]
 800de94:	42a5      	cmp	r5, r4
 800de96:	d005      	beq.n	800dea4 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800de98:	b370      	cbz	r0, 800def8 <inc_lock+0x74>
 800de9a:	2d00      	cmp	r5, #0
 800de9c:	d040      	beq.n	800df20 <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800de9e:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800dea0:	bcf0      	pop	{r4, r5, r6, r7}
 800dea2:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800dea4:	695e      	ldr	r6, [r3, #20]
 800dea6:	6897      	ldr	r7, [r2, #8]
 800dea8:	42be      	cmp	r6, r7
 800deaa:	d1f5      	bne.n	800de98 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800deac:	699e      	ldr	r6, [r3, #24]
 800deae:	6957      	ldr	r7, [r2, #20]
 800deb0:	42be      	cmp	r6, r7
 800deb2:	d1f1      	bne.n	800de98 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800deb4:	f04f 0c01 	mov.w	ip, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800deb8:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800debc:	ea4f 150c 	mov.w	r5, ip, lsl #4
 800dec0:	8992      	ldrh	r2, [r2, #12]
 800dec2:	b1a1      	cbz	r1, 800deee <inc_lock+0x6a>
 800dec4:	2a00      	cmp	r2, #0
 800dec6:	d1ea      	bne.n	800de9e <inc_lock+0x1a>
	return i + 1;
 800dec8:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800decc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ded0:	442b      	add	r3, r5
}
 800ded2:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ded4:	819a      	strh	r2, [r3, #12]
}
 800ded6:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800ded8:	6895      	ldr	r5, [r2, #8]
 800deda:	685e      	ldr	r6, [r3, #4]
 800dedc:	42ae      	cmp	r6, r5
 800dede:	d1d8      	bne.n	800de92 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800dee0:	6955      	ldr	r5, [r2, #20]
 800dee2:	689e      	ldr	r6, [r3, #8]
 800dee4:	42ae      	cmp	r6, r5
 800dee6:	d1d4      	bne.n	800de92 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dee8:	f04f 0c00 	mov.w	ip, #0
 800deec:	e7e4      	b.n	800deb8 <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800deee:	3201      	adds	r2, #1
	return i + 1;
 800def0:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800def4:	b292      	uxth	r2, r2
 800def6:	e7eb      	b.n	800ded0 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800def8:	4684      	mov	ip, r0
 800defa:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800defc:	ea4f 150c 	mov.w	r5, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800df00:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800df02:	eb03 110c 	add.w	r1, r3, ip, lsl #4
 800df06:	515c      	str	r4, [r3, r5]
		Files[i].clu = dp->obj.sclust;
 800df08:	6894      	ldr	r4, [r2, #8]
 800df0a:	6952      	ldr	r2, [r2, #20]
 800df0c:	e9c1 4201 	strd	r4, r2, [r1, #4]
		Files[i].ctr = 0;
 800df10:	f04f 0200 	mov.w	r2, #0
 800df14:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800df16:	bf14      	ite	ne
 800df18:	f44f 7280 	movne.w	r2, #256	@ 0x100
 800df1c:	2201      	moveq	r2, #1
 800df1e:	e7d7      	b.n	800ded0 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800df20:	2002      	movs	r0, #2
 800df22:	f04f 0c01 	mov.w	ip, #1
 800df26:	e7e9      	b.n	800defc <inc_lock+0x78>
 800df28:	240ac8b8 	.word	0x240ac8b8

0800df2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df2c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df2e:	f04f 36ff 	mov.w	r6, #4294967295
 800df32:	2300      	movs	r3, #0
{
 800df34:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800df36:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df38:	70c3      	strb	r3, [r0, #3]
 800df3a:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800df3c:	d122      	bne.n	800df84 <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df3e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800df42:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800df46:	429a      	cmp	r2, r3
 800df48:	d11a      	bne.n	800df80 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df4a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800df4e:	2be9      	cmp	r3, #233	@ 0xe9
 800df50:	d007      	beq.n	800df62 <check_fs+0x36>
 800df52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800df54:	4a13      	ldr	r2, [pc, #76]	@ (800dfa4 <check_fs+0x78>)
 800df56:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d001      	beq.n	800df62 <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df5e:	2002      	movs	r0, #2
}
 800df60:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800df62:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df66:	4a10      	ldr	r2, [pc, #64]	@ (800dfa8 <check_fs+0x7c>)
 800df68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d017      	beq.n	800dfa0 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800df70:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df74:	4b0d      	ldr	r3, [pc, #52]	@ (800dfac <check_fs+0x80>)
 800df76:	1ac0      	subs	r0, r0, r3
 800df78:	bf18      	it	ne
 800df7a:	2001      	movne	r0, #1
 800df7c:	0040      	lsls	r0, r0, #1
}
 800df7e:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df80:	2003      	movs	r0, #3
}
 800df82:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800df84:	460d      	mov	r5, r1
 800df86:	460a      	mov	r2, r1
 800df88:	2301      	movs	r3, #1
 800df8a:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 800df8e:	7840      	ldrb	r0, [r0, #1]
 800df90:	f7ff ff50 	bl	800de34 <disk_read>
 800df94:	b110      	cbz	r0, 800df9c <check_fs+0x70>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df96:	2004      	movs	r0, #4
			fs->winsect = sector;
 800df98:	62e6      	str	r6, [r4, #44]	@ 0x2c
}
 800df9a:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800df9c:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800df9e:	e7ce      	b.n	800df3e <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dfa0:	2000      	movs	r0, #0
}
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	009000eb 	.word	0x009000eb
 800dfa8:	00544146 	.word	0x00544146
 800dfac:	33544146 	.word	0x33544146

0800dfb0 <sync_fs>:
{
 800dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dfb2:	78c3      	ldrb	r3, [r0, #3]
{
 800dfb4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dfb6:	b95b      	cbnz	r3, 800dfd0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dfb8:	7823      	ldrb	r3, [r4, #0]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d02a      	beq.n	800e014 <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	7860      	ldrb	r0, [r4, #1]
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	f7ff ff52 	bl	800de6c <disk_ioctl>
 800dfc8:	3800      	subs	r0, #0
 800dfca:	bf18      	it	ne
 800dfcc:	2001      	movne	r0, #1
}
 800dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800dfd0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dfd2:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	7840      	ldrb	r0, [r0, #1]
 800dfda:	462a      	mov	r2, r5
 800dfdc:	4639      	mov	r1, r7
 800dfde:	f7ff ff37 	bl	800de50 <disk_write>
 800dfe2:	b9a8      	cbnz	r0, 800e010 <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dfe4:	6a22      	ldr	r2, [r4, #32]
 800dfe6:	69a3      	ldr	r3, [r4, #24]
 800dfe8:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800dfea:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d2e3      	bcs.n	800dfb8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dff0:	78a6      	ldrb	r6, [r4, #2]
 800dff2:	2e01      	cmp	r6, #1
 800dff4:	d801      	bhi.n	800dffa <sync_fs+0x4a>
 800dff6:	e7df      	b.n	800dfb8 <sync_fs+0x8>
					wsect += fs->fsize;
 800dff8:	69a3      	ldr	r3, [r4, #24]
 800dffa:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dffc:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800dffe:	2301      	movs	r3, #1
 800e000:	4639      	mov	r1, r7
 800e002:	462a      	mov	r2, r5
 800e004:	7860      	ldrb	r0, [r4, #1]
 800e006:	f7ff ff23 	bl	800de50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e00a:	2e01      	cmp	r6, #1
 800e00c:	d1f4      	bne.n	800dff8 <sync_fs+0x48>
 800e00e:	e7d3      	b.n	800dfb8 <sync_fs+0x8>
			res = FR_DISK_ERR;
 800e010:	2001      	movs	r0, #1
}
 800e012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e014:	7925      	ldrb	r5, [r4, #4]
 800e016:	2d01      	cmp	r5, #1
 800e018:	d1d1      	bne.n	800dfbe <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800e01a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 800e01e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e022:	2100      	movs	r1, #0
 800e024:	4630      	mov	r0, r6
 800e026:	f001 fda1 	bl	800fb6c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800e02a:	480f      	ldr	r0, [pc, #60]	@ (800e068 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800e02c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800e030:	6320      	str	r0, [r4, #48]	@ 0x30
 800e032:	f100 50ff 	add.w	r0, r0, #534773760	@ 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800e036:	f8a4 322e 	strh.w	r3, [r4, #558]	@ 0x22e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e03a:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800e03c:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800e040:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e044:	3020      	adds	r0, #32
 800e046:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
			fs->winsect = fs->volbase + 1;
 800e04a:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800e04c:	f8c4 121c 	str.w	r1, [r4, #540]	@ 0x21c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e050:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800e052:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800e054:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e058:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800e05a:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e05c:	f7ff fef8 	bl	800de50 <disk_write>
			fs->fsi_flag = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	7123      	strb	r3, [r4, #4]
 800e064:	e7ab      	b.n	800dfbe <sync_fs+0xe>
 800e066:	bf00      	nop
 800e068:	41615252 	.word	0x41615252

0800e06c <move_window>:
{
 800e06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e070:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800e072:	428e      	cmp	r6, r1
 800e074:	d102      	bne.n	800e07c <move_window+0x10>
	FRESULT res = FR_OK;
 800e076:	2000      	movs	r0, #0
}
 800e078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e07c:	4604      	mov	r4, r0
 800e07e:	460d      	mov	r5, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e080:	7840      	ldrb	r0, [r0, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e082:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e084:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e088:	b95b      	cbnz	r3, 800e0a2 <move_window+0x36>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e08a:	2301      	movs	r3, #1
 800e08c:	4639      	mov	r1, r7
 800e08e:	462a      	mov	r2, r5
 800e090:	f7ff fed0 	bl	800de34 <disk_read>
 800e094:	b110      	cbz	r0, 800e09c <move_window+0x30>
				res = FR_DISK_ERR;
 800e096:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e098:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800e09c:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	4639      	mov	r1, r7
 800e0a8:	f7ff fed2 	bl	800de50 <disk_write>
 800e0ac:	b9d0      	cbnz	r0, 800e0e4 <move_window+0x78>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e0ae:	6a22      	ldr	r2, [r4, #32]
 800e0b0:	69a3      	ldr	r3, [r4, #24]
 800e0b2:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800e0b4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d212      	bcs.n	800e0e0 <move_window+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0ba:	f894 8002 	ldrb.w	r8, [r4, #2]
 800e0be:	f1b8 0f01 	cmp.w	r8, #1
 800e0c2:	d801      	bhi.n	800e0c8 <move_window+0x5c>
 800e0c4:	e00c      	b.n	800e0e0 <move_window+0x74>
					wsect += fs->fsize;
 800e0c6:	69a3      	ldr	r3, [r4, #24]
 800e0c8:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0ca:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	4639      	mov	r1, r7
 800e0d2:	4632      	mov	r2, r6
 800e0d4:	7860      	ldrb	r0, [r4, #1]
 800e0d6:	f7ff febb 	bl	800de50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0da:	f1b8 0f01 	cmp.w	r8, #1
 800e0de:	d1f2      	bne.n	800e0c6 <move_window+0x5a>
 800e0e0:	7860      	ldrb	r0, [r4, #1]
 800e0e2:	e7d2      	b.n	800e08a <move_window+0x1e>
			res = FR_DISK_ERR;
 800e0e4:	2001      	movs	r0, #1
 800e0e6:	e7c7      	b.n	800e078 <move_window+0xc>

0800e0e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e0ec:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 800e0ee:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800e0f0:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800e0f2:	b18c      	cbz	r4, 800e118 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e0f4:	7825      	ldrb	r5, [r4, #0]
 800e0f6:	2d20      	cmp	r5, #32
 800e0f8:	d911      	bls.n	800e11e <find_volume+0x36>
 800e0fa:	2d3a      	cmp	r5, #58	@ 0x3a
 800e0fc:	d00f      	beq.n	800e11e <find_volume+0x36>
 800e0fe:	46a4      	mov	ip, r4
 800e100:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e104:	2b20      	cmp	r3, #32
 800e106:	d90c      	bls.n	800e122 <find_volume+0x3a>
 800e108:	2b3a      	cmp	r3, #58	@ 0x3a
 800e10a:	d1f9      	bne.n	800e100 <find_volume+0x18>
			i = *tp++ - '0';
 800e10c:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e10e:	45a4      	cmp	ip, r4
 800e110:	d102      	bne.n	800e118 <find_volume+0x30>
 800e112:	2d30      	cmp	r5, #48	@ 0x30
 800e114:	f000 80e1 	beq.w	800e2da <find_volume+0x1f2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800e118:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800e11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e11e:	462b      	mov	r3, r5
 800e120:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e122:	2b3a      	cmp	r3, #58	@ 0x3a
 800e124:	d0f2      	beq.n	800e10c <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e126:	4ba1      	ldr	r3, [pc, #644]	@ (800e3ac <find_volume+0x2c4>)
 800e128:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e12a:	2c00      	cmp	r4, #0
 800e12c:	f000 80c6 	beq.w	800e2bc <find_volume+0x1d4>
	*rfs = fs;							/* Return pointer to the file system object */
 800e130:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e132:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e136:	7823      	ldrb	r3, [r4, #0]
 800e138:	b153      	cbz	r3, 800e150 <find_volume+0x68>
		stat = disk_status(fs->drv);
 800e13a:	7860      	ldrb	r0, [r4, #1]
 800e13c:	f7ff fe5a 	bl	800ddf4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e140:	07c3      	lsls	r3, r0, #31
 800e142:	d405      	bmi.n	800e150 <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e144:	b115      	cbz	r5, 800e14c <find_volume+0x64>
 800e146:	0747      	lsls	r7, r0, #29
 800e148:	f100 80b5 	bmi.w	800e2b6 <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 800e14c:	2000      	movs	r0, #0
 800e14e:	e08d      	b.n	800e26c <find_volume+0x184>
	fs->fs_type = 0;					/* Clear the file system object */
 800e150:	2000      	movs	r0, #0
 800e152:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e154:	f7ff fe58 	bl	800de08 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e158:	07c6      	lsls	r6, r0, #31
 800e15a:	f100 8089 	bmi.w	800e270 <find_volume+0x188>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e15e:	b115      	cbz	r5, 800e166 <find_volume+0x7e>
 800e160:	0745      	lsls	r5, r0, #29
 800e162:	f100 80a8 	bmi.w	800e2b6 <find_volume+0x1ce>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e166:	2100      	movs	r1, #0
 800e168:	4620      	mov	r0, r4
 800e16a:	f7ff fedf 	bl	800df2c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e16e:	2802      	cmp	r0, #2
 800e170:	f000 8081 	beq.w	800e276 <find_volume+0x18e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e174:	2804      	cmp	r0, #4
 800e176:	f000 80ac 	beq.w	800e2d2 <find_volume+0x1ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e17a:	2801      	cmp	r0, #1
 800e17c:	d875      	bhi.n	800e26a <find_volume+0x182>
 800e17e:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e180:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800e184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e188:	d16f      	bne.n	800e26a <find_volume+0x182>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e18a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e18e:	b901      	cbnz	r1, 800e192 <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 800e190:	6d61      	ldr	r1, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e192:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800e196:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e198:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e19a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d864      	bhi.n	800e26a <find_volume+0x182>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e1a0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800e1a4:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d05f      	beq.n	800e26a <find_volume+0x182>
 800e1aa:	1e58      	subs	r0, r3, #1
 800e1ac:	4218      	tst	r0, r3
 800e1ae:	d15c      	bne.n	800e26a <find_volume+0x182>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e1b0:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1b4:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e1b6:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1b8:	d157      	bne.n	800e26a <find_volume+0x182>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1ba:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1be:	b900      	cbnz	r0, 800e1c2 <find_volume+0xda>
	rv = rv << 8 | ptr[0];
 800e1c0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1c2:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1c6:	f1bc 0f00 	cmp.w	ip, #0
 800e1ca:	d04e      	beq.n	800e26a <find_volume+0x182>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e1cc:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1d0:	eb0c 1617 	add.w	r6, ip, r7, lsr #4
 800e1d4:	4416      	add	r6, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1d6:	42b0      	cmp	r0, r6
 800e1d8:	d347      	bcc.n	800e26a <find_volume+0x182>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e1da:	1b80      	subs	r0, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e1dc:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e1de:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e1e2:	d342      	bcc.n	800e26a <find_volume+0x182>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e1e4:	eb0c 0305 	add.w	r3, ip, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e1e8:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
		fs->database = bsect + sysect;					/* Data start sector */
 800e1ec:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e1ee:	f10e 0002 	add.w	r0, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e1f2:	45e6      	cmp	lr, ip
 800e1f4:	f240 808f 	bls.w	800e316 <find_volume+0x22e>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e1f8:	6223      	str	r3, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e1fa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->database = bsect + sysect;					/* Data start sector */
 800e1fe:	62a6      	str	r6, [r4, #40]	@ 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e200:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e202:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e204:	61e5      	str	r5, [r4, #28]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e206:	d130      	bne.n	800e26a <find_volume+0x182>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e208:	0083      	lsls	r3, r0, #2
	rv = rv << 8 | ptr[0];
 800e20a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e20c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e210:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e212:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800e216:	d328      	bcc.n	800e26a <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e218:	f8b4 2060 	ldrh.w	r2, [r4, #96]	@ 0x60
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e21c:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800e220:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e222:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800e224:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e226:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e22a:	f000 809c 	beq.w	800e366 <find_volume+0x27e>
		fmt = FS_FAT32;
 800e22e:	2303      	movs	r3, #3
	fs->id = ++Fsid;		/* File system mount ID */
 800e230:	495f      	ldr	r1, [pc, #380]	@ (800e3b0 <find_volume+0x2c8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800e232:	7023      	strb	r3, [r4, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e234:	4a5f      	ldr	r2, [pc, #380]	@ (800e3b4 <find_volume+0x2cc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800e236:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e238:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e23a:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e23c:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800e23e:	b29b      	uxth	r3, r3
 800e240:	800b      	strh	r3, [r1, #0]
 800e242:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e244:	f000 808c 	beq.w	800e360 <find_volume+0x278>
 800e248:	6913      	ldr	r3, [r2, #16]
 800e24a:	429c      	cmp	r4, r3
 800e24c:	f47f af7e 	bne.w	800e14c <find_volume+0x64>
 800e250:	2300      	movs	r3, #0
 800e252:	6113      	str	r3, [r2, #16]
 800e254:	e77a      	b.n	800e14c <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 800e256:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e25a:	2e00      	cmp	r6, #0
 800e25c:	d14a      	bne.n	800e2f4 <find_volume+0x20c>
 800e25e:	2f00      	cmp	r7, #0
 800e260:	d151      	bne.n	800e306 <find_volume+0x21e>
 800e262:	f1b8 0f00 	cmp.w	r8, #0
 800e266:	d13c      	bne.n	800e2e2 <find_volume+0x1fa>
 800e268:	bb55      	cbnz	r5, 800e2c0 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e26a:	200d      	movs	r0, #13
}
 800e26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e270:	2003      	movs	r0, #3
}
 800e272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e276:	f894 61f2 	ldrb.w	r6, [r4, #498]	@ 0x1f2
 800e27a:	b10e      	cbz	r6, 800e280 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800e27c:	f8d4 61f6 	ldr.w	r6, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e280:	f894 7202 	ldrb.w	r7, [r4, #514]	@ 0x202
 800e284:	b10f      	cbz	r7, 800e28a <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 800e286:	f8d4 7206 	ldr.w	r7, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e28a:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 800e28e:	b313      	cbz	r3, 800e2d6 <find_volume+0x1ee>
	rv = rv << 8 | ptr[0];
 800e290:	f8d4 8216 	ldr.w	r8, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e294:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 800e298:	2d00      	cmp	r5, #0
 800e29a:	d1dc      	bne.n	800e256 <find_volume+0x16e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e29c:	bb56      	cbnz	r6, 800e2f4 <find_volume+0x20c>
 800e29e:	bb8f      	cbnz	r7, 800e304 <find_volume+0x21c>
 800e2a0:	f1b8 0f00 	cmp.w	r8, #0
 800e2a4:	d0e1      	beq.n	800e26a <find_volume+0x182>
 800e2a6:	4641      	mov	r1, r8
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	f7ff fe3f 	bl	800df2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2ae:	2801      	cmp	r0, #1
 800e2b0:	d8db      	bhi.n	800e26a <find_volume+0x182>
			bsect = br[i];
 800e2b2:	4645      	mov	r5, r8
 800e2b4:	e764      	b.n	800e180 <find_volume+0x98>
				return FR_WRITE_PROTECTED;
 800e2b6:	200a      	movs	r0, #10
}
 800e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e2bc:	200c      	movs	r0, #12
 800e2be:	e7d5      	b.n	800e26c <find_volume+0x184>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f7ff fe32 	bl	800df2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2c8:	2801      	cmp	r0, #1
 800e2ca:	f67f af59 	bls.w	800e180 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e2ce:	2804      	cmp	r0, #4
 800e2d0:	d1cb      	bne.n	800e26a <find_volume+0x182>
 800e2d2:	2001      	movs	r0, #1
 800e2d4:	e7ca      	b.n	800e26c <find_volume+0x184>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e2d6:	4698      	mov	r8, r3
 800e2d8:	e7dc      	b.n	800e294 <find_volume+0x1ac>
					*path = ++tt;
 800e2da:	f10c 0301 	add.w	r3, ip, #1
 800e2de:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e2e0:	e721      	b.n	800e126 <find_volume+0x3e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2e2:	4641      	mov	r1, r8
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f7ff fe21 	bl	800df2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2ea:	2801      	cmp	r0, #1
 800e2ec:	d9e1      	bls.n	800e2b2 <find_volume+0x1ca>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e2ee:	2d00      	cmp	r5, #0
 800e2f0:	d1e6      	bne.n	800e2c0 <find_volume+0x1d8>
 800e2f2:	e7ba      	b.n	800e26a <find_volume+0x182>
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f7ff fe18 	bl	800df2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e2fc:	2801      	cmp	r0, #1
 800e2fe:	d8ae      	bhi.n	800e25e <find_volume+0x176>
			bsect = br[i];
 800e300:	4635      	mov	r5, r6
 800e302:	e73d      	b.n	800e180 <find_volume+0x98>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e304:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e306:	4639      	mov	r1, r7
 800e308:	4620      	mov	r0, r4
 800e30a:	f7ff fe0f 	bl	800df2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e30e:	2801      	cmp	r0, #1
 800e310:	d8a7      	bhi.n	800e262 <find_volume+0x17a>
			bsect = br[i];
 800e312:	463d      	mov	r5, r7
 800e314:	e734      	b.n	800e180 <find_volume+0x98>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e316:	f640 7cf5 	movw	ip, #4085	@ 0xff5
		fs->volbase = bsect;							/* Volume start sector */
 800e31a:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800e31c:	62a6      	str	r6, [r4, #40]	@ 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e31e:	45e6      	cmp	lr, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e320:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e322:	6223      	str	r3, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e324:	d816      	bhi.n	800e354 <find_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e326:	2f00      	cmp	r7, #0
 800e328:	d09f      	beq.n	800e26a <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e32a:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e32c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800e330:	f000 0001 	and.w	r0, r0, #1
 800e334:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800e338:	2301      	movs	r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e33a:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e33e:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e340:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
 800e344:	d391      	bcc.n	800e26a <find_volume+0x182>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800e34a:	2180      	movs	r1, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e34c:	e9c4 2203 	strd	r2, r2, [r4, #12]
		fs->fsi_flag = 0x80;
 800e350:	7121      	strb	r1, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e352:	e76d      	b.n	800e230 <find_volume+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e354:	2f00      	cmp	r7, #0
 800e356:	d088      	beq.n	800e26a <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e358:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e35a:	0040      	lsls	r0, r0, #1
 800e35c:	2302      	movs	r3, #2
 800e35e:	e7ec      	b.n	800e33a <find_volume+0x252>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e360:	2300      	movs	r3, #0
 800e362:	6013      	str	r3, [r2, #0]
 800e364:	e770      	b.n	800e248 <find_volume+0x160>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e366:	1c69      	adds	r1, r5, #1
 800e368:	4620      	mov	r0, r4
 800e36a:	f7ff fe7f 	bl	800e06c <move_window>
 800e36e:	2800      	cmp	r0, #0
 800e370:	f47f af5d 	bne.w	800e22e <find_volume+0x146>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e374:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800e378:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 800e37c:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e37e:	4291      	cmp	r1, r2
 800e380:	f47f af55 	bne.w	800e22e <find_volume+0x146>
	rv = rv << 8 | ptr[0];
 800e384:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e386:	4b0c      	ldr	r3, [pc, #48]	@ (800e3b8 <find_volume+0x2d0>)
 800e388:	429a      	cmp	r2, r3
 800e38a:	f47f af50 	bne.w	800e22e <find_volume+0x146>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e38e:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 800e392:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e396:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e39a:	3320      	adds	r3, #32
 800e39c:	429a      	cmp	r2, r3
 800e39e:	f47f af46 	bne.w	800e22e <find_volume+0x146>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3a2:	e9d4 2386 	ldrd	r2, r3, [r4, #536]	@ 0x218
 800e3a6:	e9c4 3203 	strd	r3, r2, [r4, #12]
 800e3aa:	e740      	b.n	800e22e <find_volume+0x146>
 800e3ac:	240ac8dc 	.word	0x240ac8dc
 800e3b0:	240ac8d8 	.word	0x240ac8d8
 800e3b4:	240ac8b8 	.word	0x240ac8b8
 800e3b8:	41615252 	.word	0x41615252

0800e3bc <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800e3c0:	f890 9000 	ldrb.w	r9, [r0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	460e      	mov	r6, r1
 800e3c8:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 800e3ca:	f1b9 0f02 	cmp.w	r9, #2
 800e3ce:	d008      	beq.n	800e3e2 <put_fat.part.0+0x26>
 800e3d0:	f1b9 0f03 	cmp.w	r9, #3
 800e3d4:	d042      	beq.n	800e45c <put_fat.part.0+0xa0>
 800e3d6:	f1b9 0f01 	cmp.w	r9, #1
 800e3da:	d014      	beq.n	800e406 <put_fat.part.0+0x4a>
 800e3dc:	2002      	movs	r0, #2
}
 800e3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e3e2:	6a01      	ldr	r1, [r0, #32]
 800e3e4:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 800e3e8:	f7ff fe40 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d1f6      	bne.n	800e3de <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e3f0:	0076      	lsls	r6, r6, #1
 800e3f2:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 800e3f6:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e3fa:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e3fc:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800e3fe:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800e402:	7054      	strb	r4, [r2, #1]
			break;
 800e404:	e03d      	b.n	800e482 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e406:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800e408:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e40c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800e410:	f7ff fe2c 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800e414:	2800      	cmp	r0, #0
 800e416:	d1e2      	bne.n	800e3de <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 800e418:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e41c:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 800e41e:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800e422:	f105 0830 	add.w	r8, r5, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e426:	ea4f 2157 	mov.w	r1, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e42a:	d52f      	bpl.n	800e48c <put_fat.part.0+0xd0>
 800e42c:	f818 2003 	ldrb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e430:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e432:	f002 020f 	and.w	r2, r2, #15
 800e436:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800e43a:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e43e:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800e440:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e444:	4419      	add	r1, r3
 800e446:	f7ff fe11 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800e44a:	2800      	cmp	r0, #0
 800e44c:	d1c7      	bne.n	800e3de <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800e44e:	f3c7 0208 	ubfx	r2, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e452:	f3c4 1307 	ubfx	r3, r4, #4, #8
			p = fs->win + bc % SS(fs);
 800e456:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e458:	7013      	strb	r3, [r2, #0]
			break;
 800e45a:	e012      	b.n	800e482 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e45c:	6a01      	ldr	r1, [r0, #32]
 800e45e:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 800e462:	f7ff fe03 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800e466:	2800      	cmp	r0, #0
 800e468:	d1b9      	bne.n	800e3de <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e46a:	00b6      	lsls	r6, r6, #2
 800e46c:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800e470:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 800e474:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e478:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e47a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e47e:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800e480:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 800e482:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e484:	2000      	movs	r0, #0
			fs->wflag = 1;
 800e486:	70eb      	strb	r3, [r5, #3]
}
 800e488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e48c:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e490:	4628      	mov	r0, r5
 800e492:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800e494:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e498:	4419      	add	r1, r3
 800e49a:	f7ff fde7 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d19d      	bne.n	800e3de <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800e4a2:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e4a6:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800e4aa:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 800e4ae:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e4b2:	f023 030f 	bic.w	r3, r3, #15
 800e4b6:	4323      	orrs	r3, r4
 800e4b8:	7013      	strb	r3, [r2, #0]
			break;
 800e4ba:	e7e2      	b.n	800e482 <put_fat.part.0+0xc6>

0800e4bc <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e4bc:	2901      	cmp	r1, #1
 800e4be:	d90e      	bls.n	800e4de <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800e4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e4c2:	6943      	ldr	r3, [r0, #20]
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	4299      	cmp	r1, r3
 800e4ca:	d206      	bcs.n	800e4da <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800e4cc:	7803      	ldrb	r3, [r0, #0]
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d021      	beq.n	800e516 <get_fat.isra.0+0x5a>
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d010      	beq.n	800e4f8 <get_fat.isra.0+0x3c>
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d003      	beq.n	800e4e2 <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 800e4da:	2001      	movs	r0, #1
}
 800e4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800e4de:	2001      	movs	r0, #1
}
 800e4e0:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4e2:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800e4e4:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4e8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800e4ec:	f7ff fdbe 	bl	800e06c <move_window>
 800e4f0:	b1f0      	cbz	r0, 800e530 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e4f2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e4f8:	6a01      	ldr	r1, [r0, #32]
 800e4fa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e4fe:	f7ff fdb5 	bl	800e06c <move_window>
 800e502:	2800      	cmp	r0, #0
 800e504:	d1f5      	bne.n	800e4f2 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e506:	00a4      	lsls	r4, r4, #2
 800e508:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e50c:	4425      	add	r5, r4
 800e50e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e510:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 800e514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e516:	6a01      	ldr	r1, [r0, #32]
 800e518:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e51c:	f7ff fda6 	bl	800e06c <move_window>
 800e520:	2800      	cmp	r0, #0
 800e522:	d1e6      	bne.n	800e4f2 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e524:	0063      	lsls	r3, r4, #1
 800e526:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e52a:	442b      	add	r3, r5
 800e52c:	8e18      	ldrh	r0, [r3, #48]	@ 0x30
}
 800e52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800e530:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e534:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800e536:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e538:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800e53a:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e53c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e540:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e544:	f7ff fd92 	bl	800e06c <move_window>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d1d2      	bne.n	800e4f2 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e54c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800e550:	442f      	add	r7, r5
 800e552:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800e556:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e55a:	07e3      	lsls	r3, r4, #31
 800e55c:	bf4c      	ite	mi
 800e55e:	0900      	lsrmi	r0, r0, #4
 800e560:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800e564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e566:	bf00      	nop

0800e568 <create_chain>:
{
 800e568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56c:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800e56e:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 800e570:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800e574:	2900      	cmp	r1, #0
 800e576:	f040 80a7 	bne.w	800e6c8 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e57a:	f8d8 600c 	ldr.w	r6, [r8, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e57e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e582:	b1c6      	cbz	r6, 800e5b6 <create_chain+0x4e>
 800e584:	429e      	cmp	r6, r3
 800e586:	d216      	bcs.n	800e5b6 <create_chain+0x4e>
			ncl++;							/* Next cluster */
 800e588:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e58a:	42a3      	cmp	r3, r4
 800e58c:	f200 80b4 	bhi.w	800e6f8 <create_chain+0x190>
				if (ncl > scl) return 0;	/* No free cluster */
 800e590:	2e01      	cmp	r6, #1
 800e592:	d013      	beq.n	800e5bc <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e594:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800e596:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e598:	696b      	ldr	r3, [r5, #20]
 800e59a:	42a3      	cmp	r3, r4
 800e59c:	d907      	bls.n	800e5ae <create_chain+0x46>
		switch (fs->fs_type) {
 800e59e:	782b      	ldrb	r3, [r5, #0]
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	f000 8083 	beq.w	800e6ac <create_chain+0x144>
 800e5a6:	2b03      	cmp	r3, #3
 800e5a8:	d042      	beq.n	800e630 <create_chain+0xc8>
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d00a      	beq.n	800e5c4 <create_chain+0x5c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e5ae:	2401      	movs	r4, #1
}
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	f200 809a 	bhi.w	800e6f0 <create_chain+0x188>
				if (ncl > scl) return 0;	/* No free cluster */
 800e5bc:	2400      	movs	r4, #0
}
 800e5be:	4620      	mov	r0, r4
 800e5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5c4:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 800e5c6:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800e5d0:	f7ff fd4c 	bl	800e06c <move_window>
 800e5d4:	bb38      	cbnz	r0, 800e626 <create_chain+0xbe>
			wc = fs->win[bc++ % SS(fs)];
 800e5d6:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5da:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800e5dc:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5e0:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800e5e2:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5e4:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e5e8:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ec:	f7ff fd3e 	bl	800e06c <move_window>
 800e5f0:	b9c8      	cbnz	r0, 800e626 <create_chain+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5f2:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e5f6:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5f8:	44ab      	add	fp, r5
 800e5fa:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 800e5fe:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e602:	bf4c      	ite	mi
 800e604:	091b      	lsrmi	r3, r3, #4
 800e606:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800e60a:	b313      	cbz	r3, 800e652 <create_chain+0xea>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d0ce      	beq.n	800e5ae <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800e610:	42a6      	cmp	r6, r4
 800e612:	d0d3      	beq.n	800e5bc <create_chain+0x54>
			ncl++;							/* Next cluster */
 800e614:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e616:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e61a:	429c      	cmp	r4, r3
 800e61c:	d2b8      	bcs.n	800e590 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e61e:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e620:	e7ba      	b.n	800e598 <create_chain+0x30>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e622:	2801      	cmp	r0, #1
 800e624:	d1c3      	bne.n	800e5ae <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e626:	f04f 34ff 	mov.w	r4, #4294967295
}
 800e62a:	4620      	mov	r0, r4
 800e62c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e630:	6a29      	ldr	r1, [r5, #32]
 800e632:	4628      	mov	r0, r5
 800e634:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e638:	f7ff fd18 	bl	800e06c <move_window>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d1f2      	bne.n	800e626 <create_chain+0xbe>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e640:	00a3      	lsls	r3, r4, #2
 800e642:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e646:	442b      	add	r3, r5
 800e648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e64a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1dc      	bne.n	800e60c <create_chain+0xa4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e652:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e656:	42a3      	cmp	r3, r4
 800e658:	d9a9      	bls.n	800e5ae <create_chain+0x46>
 800e65a:	f04f 32ff 	mov.w	r2, #4294967295
 800e65e:	4621      	mov	r1, r4
 800e660:	4640      	mov	r0, r8
 800e662:	f7ff feab 	bl	800e3bc <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800e666:	b970      	cbnz	r0, 800e686 <create_chain+0x11e>
 800e668:	f1b9 0f00 	cmp.w	r9, #0
 800e66c:	d00b      	beq.n	800e686 <create_chain+0x11e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e66e:	f1b9 0f01 	cmp.w	r9, #1
 800e672:	d09c      	beq.n	800e5ae <create_chain+0x46>
 800e674:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e678:	4599      	cmp	r9, r3
 800e67a:	d298      	bcs.n	800e5ae <create_chain+0x46>
 800e67c:	4622      	mov	r2, r4
 800e67e:	4649      	mov	r1, r9
 800e680:	4640      	mov	r0, r8
 800e682:	f7ff fe9b 	bl	800e3bc <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e686:	2800      	cmp	r0, #0
 800e688:	d1cb      	bne.n	800e622 <create_chain+0xba>
		fs->last_clst = ncl;
 800e68a:	f8c8 400c 	str.w	r4, [r8, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e68e:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800e692:	3b02      	subs	r3, #2
 800e694:	429a      	cmp	r2, r3
 800e696:	d802      	bhi.n	800e69e <create_chain+0x136>
 800e698:	3a01      	subs	r2, #1
 800e69a:	f8c8 2010 	str.w	r2, [r8, #16]
		fs->fsi_flag |= 1;
 800e69e:	f898 3004 	ldrb.w	r3, [r8, #4]
 800e6a2:	f043 0301 	orr.w	r3, r3, #1
 800e6a6:	f888 3004 	strb.w	r3, [r8, #4]
 800e6aa:	e781      	b.n	800e5b0 <create_chain+0x48>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6ac:	6a29      	ldr	r1, [r5, #32]
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e6b4:	f7ff fcda 	bl	800e06c <move_window>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d1b4      	bne.n	800e626 <create_chain+0xbe>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e6bc:	0063      	lsls	r3, r4, #1
 800e6be:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e6c2:	442b      	add	r3, r5
 800e6c4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
			break;
 800e6c6:	e7a0      	b.n	800e60a <create_chain+0xa2>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e6c8:	4640      	mov	r0, r8
 800e6ca:	f7ff fef7 	bl	800e4bc <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e6ce:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e6d0:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e6d2:	f67f af6c 	bls.w	800e5ae <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e6d6:	1c41      	adds	r1, r0, #1
 800e6d8:	d0a5      	beq.n	800e626 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e6da:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e6de:	4283      	cmp	r3, r0
 800e6e0:	f63f af66 	bhi.w	800e5b0 <create_chain+0x48>
			ncl++;							/* Next cluster */
 800e6e4:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e6e8:	42a3      	cmp	r3, r4
 800e6ea:	d807      	bhi.n	800e6fc <create_chain+0x194>
 800e6ec:	464e      	mov	r6, r9
 800e6ee:	e74f      	b.n	800e590 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e6f0:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e6f2:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 800e6f4:	2402      	movs	r4, #2
 800e6f6:	e74f      	b.n	800e598 <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e6f8:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e6fa:	e74d      	b.n	800e598 <create_chain+0x30>
 800e6fc:	2c01      	cmp	r4, #1
 800e6fe:	683d      	ldr	r5, [r7, #0]
 800e700:	f67f af55 	bls.w	800e5ae <create_chain+0x46>
 800e704:	464e      	mov	r6, r9
 800e706:	e747      	b.n	800e598 <create_chain+0x30>

0800e708 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800e708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->dptr = ofs;				/* Set current offset */
 800e70c:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e70e:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800e710:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800e712:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800e714:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e716:	b98c      	cbnz	r4, 800e73c <dir_sdi.constprop.0+0x34>
 800e718:	783b      	ldrb	r3, [r7, #0]
 800e71a:	2b02      	cmp	r3, #2
 800e71c:	d80a      	bhi.n	800e734 <dir_sdi.constprop.0+0x2c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e71e:	893b      	ldrh	r3, [r7, #8]
 800e720:	b18b      	cbz	r3, 800e746 <dir_sdi.constprop.0+0x3e>
		dp->sect = fs->dirbase;
 800e722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 800e724:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e728:	b16b      	cbz	r3, 800e746 <dir_sdi.constprop.0+0x3e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e72a:	3730      	adds	r7, #48	@ 0x30
	return FR_OK;
 800e72c:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e72e:	6237      	str	r7, [r6, #32]
}
 800e730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 800e734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e736:	2b00      	cmp	r3, #0
 800e738:	d0f1      	beq.n	800e71e <dir_sdi.constprop.0+0x16>
 800e73a:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e73c:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d15c      	bne.n	800e7fc <dir_sdi.constprop.0+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e742:	2c01      	cmp	r4, #1
 800e744:	d102      	bne.n	800e74c <dir_sdi.constprop.0+0x44>
		return FR_INT_ERR;
 800e746:	2002      	movs	r0, #2
}
 800e748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e74c:	463d      	mov	r5, r7
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e74e:	696b      	ldr	r3, [r5, #20]
 800e750:	42a3      	cmp	r3, r4
 800e752:	d9f8      	bls.n	800e746 <dir_sdi.constprop.0+0x3e>
		switch (fs->fs_type) {
 800e754:	782b      	ldrb	r3, [r5, #0]
 800e756:	2b02      	cmp	r3, #2
 800e758:	d025      	beq.n	800e7a6 <dir_sdi.constprop.0+0x9e>
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d00d      	beq.n	800e77a <dir_sdi.constprop.0+0x72>
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d1f1      	bne.n	800e746 <dir_sdi.constprop.0+0x3e>
			bc = (UINT)clst; bc += bc / 2;
 800e762:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e766:	6a29      	ldr	r1, [r5, #32]
 800e768:	4628      	mov	r0, r5
 800e76a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800e76e:	f7ff fc7d 	bl	800e06c <move_window>
 800e772:	b330      	cbz	r0, 800e7c2 <dir_sdi.constprop.0+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e774:	2001      	movs	r0, #1
}
 800e776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e77a:	6a29      	ldr	r1, [r5, #32]
 800e77c:	4628      	mov	r0, r5
 800e77e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e782:	f7ff fc73 	bl	800e06c <move_window>
 800e786:	2800      	cmp	r0, #0
 800e788:	d1f4      	bne.n	800e774 <dir_sdi.constprop.0+0x6c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e78a:	00a3      	lsls	r3, r4, #2
 800e78c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e790:	442b      	add	r3, r5
 800e792:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e794:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e798:	2c01      	cmp	r4, #1
 800e79a:	d9d4      	bls.n	800e746 <dir_sdi.constprop.0+0x3e>
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	429c      	cmp	r4, r3
 800e7a0:	d2d1      	bcs.n	800e746 <dir_sdi.constprop.0+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e7a2:	6835      	ldr	r5, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e7a4:	e7d3      	b.n	800e74e <dir_sdi.constprop.0+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7a6:	6a29      	ldr	r1, [r5, #32]
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e7ae:	f7ff fc5d 	bl	800e06c <move_window>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d1de      	bne.n	800e774 <dir_sdi.constprop.0+0x6c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e7b6:	0063      	lsls	r3, r4, #1
 800e7b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e7bc:	442b      	add	r3, r5
 800e7be:	8e1c      	ldrh	r4, [r3, #48]	@ 0x30
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e7c0:	e7ea      	b.n	800e798 <dir_sdi.constprop.0+0x90>
			wc = fs->win[bc++ % SS(fs)];
 800e7c2:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7c6:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800e7c8:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7cc:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800e7ce:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7d0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e7d4:	f893 9030 	ldrb.w	r9, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7d8:	f7ff fc48 	bl	800e06c <move_window>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d1c9      	bne.n	800e774 <dir_sdi.constprop.0+0x6c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e7e0:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800e7e4:	44a8      	add	r8, r5
 800e7e6:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800e7ea:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e7ee:	07e3      	lsls	r3, r4, #31
 800e7f0:	bf4c      	ite	mi
 800e7f2:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800e7f6:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e7fa:	e7cd      	b.n	800e798 <dir_sdi.constprop.0+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e7fc:	697a      	ldr	r2, [r7, #20]
	clst -= 2;
 800e7fe:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e800:	3a02      	subs	r2, #2
 800e802:	4291      	cmp	r1, r2
 800e804:	d203      	bcs.n	800e80e <dir_sdi.constprop.0+0x106>
	return clst * fs->csize + fs->database;
 800e806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e808:	fb01 2303 	mla	r3, r1, r3, r2
 800e80c:	e78a      	b.n	800e724 <dir_sdi.constprop.0+0x1c>
		dp->sect = fs->dirbase;
 800e80e:	2300      	movs	r3, #0
 800e810:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e814:	e797      	b.n	800e746 <dir_sdi.constprop.0+0x3e>
 800e816:	bf00      	nop

0800e818 <follow_path>:
{
 800e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e81c:	780a      	ldrb	r2, [r1, #0]
{
 800e81e:	b085      	sub	sp, #20
 800e820:	468b      	mov	fp, r1
 800e822:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e824:	2a2f      	cmp	r2, #47	@ 0x2f
	FATFS *fs = obj->fs;
 800e826:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e828:	d001      	beq.n	800e82e <follow_path+0x16>
 800e82a:	2a5c      	cmp	r2, #92	@ 0x5c
 800e82c:	d105      	bne.n	800e83a <follow_path+0x22>
 800e82e:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800e832:	2b2f      	cmp	r3, #47	@ 0x2f
 800e834:	d0fb      	beq.n	800e82e <follow_path+0x16>
 800e836:	2b5c      	cmp	r3, #92	@ 0x5c
 800e838:	d0f9      	beq.n	800e82e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e83a:	2200      	movs	r2, #0
 800e83c:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e83e:	f89b 2000 	ldrb.w	r2, [fp]
 800e842:	2a1f      	cmp	r2, #31
 800e844:	f240 816b 	bls.w	800eb1e <follow_path+0x306>
 800e848:	465b      	mov	r3, fp
	p = *path; sfn = dp->fn;
 800e84a:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 800e84e:	46ab      	mov	fp, r5
		*d++ = (BYTE)val;
 800e850:	f04f 3a20 	mov.w	sl, #538976288	@ 0x20202020
 800e854:	463e      	mov	r6, r7
 800e856:	461d      	mov	r5, r3
 800e858:	2320      	movs	r3, #32
 800e85a:	f242 0220 	movw	r2, #8224	@ 0x2020
 800e85e:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 800e862:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 800e866:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800e868:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		c = (BYTE)p[si++];
 800e86c:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e86e:	2b20      	cmp	r3, #32
 800e870:	d95f      	bls.n	800e932 <follow_path+0x11a>
 800e872:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 800e874:	2700      	movs	r7, #0
 800e876:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800e87a:	2001      	movs	r0, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e87c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e87e:	d066      	beq.n	800e94e <follow_path+0x136>
 800e880:	2b5c      	cmp	r3, #92	@ 0x5c
 800e882:	d064      	beq.n	800e94e <follow_path+0x136>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e884:	2b2e      	cmp	r3, #46	@ 0x2e
 800e886:	d001      	beq.n	800e88c <follow_path+0x74>
 800e888:	4567      	cmp	r7, ip
 800e88a:	d345      	bcc.n	800e918 <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e88c:	f1bc 0f0b 	cmp.w	ip, #11
 800e890:	d04f      	beq.n	800e932 <follow_path+0x11a>
 800e892:	2b2e      	cmp	r3, #46	@ 0x2e
 800e894:	d14d      	bne.n	800e932 <follow_path+0x11a>
			i = 8; ni = 11;				/* Goto extension */
 800e896:	2708      	movs	r7, #8
 800e898:	f04f 0c0b 	mov.w	ip, #11
		c = (BYTE)p[si++];
 800e89c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800e8a0:	3001      	adds	r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e8a2:	2b20      	cmp	r3, #32
 800e8a4:	d8ea      	bhi.n	800e87c <follow_path+0x64>
	*path = p + si;						/* Return pointer to the next segment */
 800e8a6:	4405      	add	r5, r0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e8a8:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800e8ac:	2ae5      	cmp	r2, #229	@ 0xe5
 800e8ae:	d102      	bne.n	800e8b6 <follow_path+0x9e>
 800e8b0:	2205      	movs	r2, #5
 800e8b2:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e8b6:	2b20      	cmp	r3, #32
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e8b8:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800e8ba:	f8d4 8000 	ldr.w	r8, [r4]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e8be:	bf8c      	ite	hi
 800e8c0:	2300      	movhi	r3, #0
 800e8c2:	2301      	movls	r3, #1
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e8ca:	f7ff ff1d 	bl	800e708 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	f040 80cc 	bne.w	800ea6e <follow_path+0x256>
		res = move_window(fs, dp->sect);
 800e8d6:	69e7      	ldr	r7, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e8d8:	f108 0930 	add.w	r9, r8, #48	@ 0x30
 800e8dc:	e9cd b600 	strd	fp, r6, [sp]
 800e8e0:	46ab      	mov	fp, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e8e2:	f8d8 602c 	ldr.w	r6, [r8, #44]	@ 0x2c
 800e8e6:	42b7      	cmp	r7, r6
 800e8e8:	d046      	beq.n	800e978 <follow_path+0x160>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e8ea:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e8ee:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	f040 80c1 	bne.w	800ea7a <follow_path+0x262>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	463a      	mov	r2, r7
 800e8fc:	4649      	mov	r1, r9
 800e8fe:	f7ff fa99 	bl	800de34 <disk_read>
 800e902:	2800      	cmp	r0, #0
 800e904:	d036      	beq.n	800e974 <follow_path+0x15c>
				res = FR_DISK_ERR;
 800e906:	2201      	movs	r2, #1
			fs->winsect = sector;
 800e908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e90c:	4610      	mov	r0, r2
			fs->winsect = sector;
 800e90e:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
}
 800e912:	b005      	add	sp, #20
 800e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
 800e918:	061a      	lsls	r2, r3, #24
 800e91a:	d502      	bpl.n	800e922 <follow_path+0x10a>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e91c:	3b80      	subs	r3, #128	@ 0x80
 800e91e:	4a89      	ldr	r2, [pc, #548]	@ (800eb44 <follow_path+0x32c>)
 800e920:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 800e922:	2222      	movs	r2, #34	@ 0x22
 800e924:	4988      	ldr	r1, [pc, #544]	@ (800eb48 <follow_path+0x330>)
 800e926:	e002      	b.n	800e92e <follow_path+0x116>
 800e928:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e92c:	b132      	cbz	r2, 800e93c <follow_path+0x124>
 800e92e:	4293      	cmp	r3, r2
 800e930:	d1fa      	bne.n	800e928 <follow_path+0x110>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e932:	2206      	movs	r2, #6
}
 800e934:	4610      	mov	r0, r2
 800e936:	b005      	add	sp, #20
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e93c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e940:	2a19      	cmp	r2, #25
 800e942:	d801      	bhi.n	800e948 <follow_path+0x130>
 800e944:	3b20      	subs	r3, #32
 800e946:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800e948:	55f3      	strb	r3, [r6, r7]
 800e94a:	3701      	adds	r7, #1
 800e94c:	e7a6      	b.n	800e89c <follow_path+0x84>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e94e:	5c2a      	ldrb	r2, [r5, r0]
 800e950:	1829      	adds	r1, r5, r0
 800e952:	2a2f      	cmp	r2, #47	@ 0x2f
 800e954:	d002      	beq.n	800e95c <follow_path+0x144>
 800e956:	2a5c      	cmp	r2, #92	@ 0x5c
 800e958:	f040 80ec 	bne.w	800eb34 <follow_path+0x31c>
 800e95c:	1c42      	adds	r2, r0, #1
 800e95e:	442a      	add	r2, r5
 800e960:	4615      	mov	r5, r2
 800e962:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e966:	292f      	cmp	r1, #47	@ 0x2f
 800e968:	d0fa      	beq.n	800e960 <follow_path+0x148>
 800e96a:	295c      	cmp	r1, #92	@ 0x5c
 800e96c:	d0f8      	beq.n	800e960 <follow_path+0x148>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e96e:	2f00      	cmp	r7, #0
 800e970:	d19a      	bne.n	800e8a8 <follow_path+0x90>
 800e972:	e7de      	b.n	800e932 <follow_path+0x11a>
			fs->winsect = sector;
 800e974:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
		c = dp->dir[DIR_Name];
 800e978:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e97a:	781a      	ldrb	r2, [r3, #0]
 800e97c:	2a00      	cmp	r2, #0
 800e97e:	d075      	beq.n	800ea6c <follow_path+0x254>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e980:	7ad9      	ldrb	r1, [r3, #11]
 800e982:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 800e986:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e988:	7ada      	ldrb	r2, [r3, #11]
 800e98a:	f012 0208 	ands.w	r2, r2, #8
 800e98e:	d01b      	beq.n	800e9c8 <follow_path+0x1b0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e990:	6966      	ldr	r6, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e992:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 800e994:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e996:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e998:	2f00      	cmp	r7, #0
 800e99a:	d067      	beq.n	800ea6c <follow_path+0x254>
 800e99c:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
 800e9a0:	d264      	bcs.n	800ea6c <follow_path+0x254>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e9a2:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800e9a6:	b953      	cbnz	r3, 800e9be <follow_path+0x1a6>
		dp->sect++;				/* Next sector */
 800e9a8:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 800e9aa:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800e9ac:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	f040 8087 	bne.w	800eac2 <follow_path+0x2aa>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e9b4:	892a      	ldrh	r2, [r5, #8]
 800e9b6:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 800e9ba:	f240 809f 	bls.w	800eafc <follow_path+0x2e4>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e9be:	3530      	adds	r5, #48	@ 0x30
	dp->dptr = ofs;						/* Current entry */
 800e9c0:	6166      	str	r6, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e9c2:	441d      	add	r5, r3
 800e9c4:	6225      	str	r5, [r4, #32]
	} while (res == FR_OK);
 800e9c6:	e78c      	b.n	800e8e2 <follow_path+0xca>
	} while (--cnt && r == 0);
 800e9c8:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
 800e9cc:	7818      	ldrb	r0, [r3, #0]
 800e9ce:	4285      	cmp	r5, r0
 800e9d0:	d1de      	bne.n	800e990 <follow_path+0x178>
 800e9d2:	785d      	ldrb	r5, [r3, #1]
 800e9d4:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800e9d8:	4285      	cmp	r5, r0
 800e9da:	d1d9      	bne.n	800e990 <follow_path+0x178>
 800e9dc:	f894 5026 	ldrb.w	r5, [r4, #38]	@ 0x26
 800e9e0:	7898      	ldrb	r0, [r3, #2]
 800e9e2:	4285      	cmp	r5, r0
 800e9e4:	d1d4      	bne.n	800e990 <follow_path+0x178>
 800e9e6:	f894 5027 	ldrb.w	r5, [r4, #39]	@ 0x27
 800e9ea:	78d8      	ldrb	r0, [r3, #3]
 800e9ec:	4285      	cmp	r5, r0
 800e9ee:	d1cf      	bne.n	800e990 <follow_path+0x178>
 800e9f0:	791d      	ldrb	r5, [r3, #4]
 800e9f2:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800e9f6:	4285      	cmp	r5, r0
 800e9f8:	d1ca      	bne.n	800e990 <follow_path+0x178>
 800e9fa:	795d      	ldrb	r5, [r3, #5]
 800e9fc:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800ea00:	4285      	cmp	r5, r0
 800ea02:	d1c5      	bne.n	800e990 <follow_path+0x178>
 800ea04:	799d      	ldrb	r5, [r3, #6]
 800ea06:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800ea0a:	4285      	cmp	r5, r0
 800ea0c:	d1c0      	bne.n	800e990 <follow_path+0x178>
 800ea0e:	79dd      	ldrb	r5, [r3, #7]
 800ea10:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
 800ea14:	4285      	cmp	r5, r0
 800ea16:	d1bb      	bne.n	800e990 <follow_path+0x178>
 800ea18:	7a1d      	ldrb	r5, [r3, #8]
 800ea1a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ea1e:	4285      	cmp	r5, r0
 800ea20:	d1b6      	bne.n	800e990 <follow_path+0x178>
 800ea22:	7a5d      	ldrb	r5, [r3, #9]
 800ea24:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800ea28:	4285      	cmp	r5, r0
 800ea2a:	d1b1      	bne.n	800e990 <follow_path+0x178>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ea2c:	7a98      	ldrb	r0, [r3, #10]
 800ea2e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ea32:	4298      	cmp	r0, r3
 800ea34:	d1ac      	bne.n	800e990 <follow_path+0x178>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea36:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800ea3a:	465d      	mov	r5, fp
 800ea3c:	9e01      	ldr	r6, [sp, #4]
 800ea3e:	0758      	lsls	r0, r3, #29
 800ea40:	f8dd b000 	ldr.w	fp, [sp]
 800ea44:	f53f af76 	bmi.w	800e934 <follow_path+0x11c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ea48:	06cb      	lsls	r3, r1, #27
 800ea4a:	d553      	bpl.n	800eaf4 <follow_path+0x2dc>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea4c:	6962      	ldr	r2, [r4, #20]
 800ea4e:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
	if (fs->fs_type == FS_FAT32) {
 800ea52:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea56:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800ea5a:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea5c:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800ea5e:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ea60:	d102      	bne.n	800ea68 <follow_path+0x250>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ea62:	8a9b      	ldrh	r3, [r3, #20]
 800ea64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea68:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea6a:	e6f5      	b.n	800e858 <follow_path+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ea6c:	2204      	movs	r2, #4
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ea6e:	2a04      	cmp	r2, #4
			ns = dp->fn[NSFLAG];
 800ea70:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ea74:	f47f af5e 	bne.w	800e934 <follow_path+0x11c>
 800ea78:	e03a      	b.n	800eaf0 <follow_path+0x2d8>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	4632      	mov	r2, r6
 800ea7e:	4649      	mov	r1, r9
 800ea80:	f7ff f9e6 	bl	800de50 <disk_write>
 800ea84:	bbc0      	cbnz	r0, 800eaf8 <follow_path+0x2e0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea86:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800ea8a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ea8e:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800ea90:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d211      	bcs.n	800eabc <follow_path+0x2a4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea98:	f898 5002 	ldrb.w	r5, [r8, #2]
 800ea9c:	2d01      	cmp	r5, #1
 800ea9e:	d802      	bhi.n	800eaa6 <follow_path+0x28e>
 800eaa0:	e00c      	b.n	800eabc <follow_path+0x2a4>
					wsect += fs->fsize;
 800eaa2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800eaa6:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eaa8:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800eaaa:	2301      	movs	r3, #1
 800eaac:	4649      	mov	r1, r9
 800eaae:	4632      	mov	r2, r6
 800eab0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800eab4:	f7ff f9cc 	bl	800de50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eab8:	2d01      	cmp	r5, #1
 800eaba:	d1f2      	bne.n	800eaa2 <follow_path+0x28a>
 800eabc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800eac0:	e71a      	b.n	800e8f8 <follow_path+0xe0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800eac2:	896a      	ldrh	r2, [r5, #10]
 800eac4:	3a01      	subs	r2, #1
 800eac6:	ea12 2256 	ands.w	r2, r2, r6, lsr #9
 800eaca:	f47f af78 	bne.w	800e9be <follow_path+0x1a6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eace:	4628      	mov	r0, r5
 800ead0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ead4:	f7ff fcf2 	bl	800e4bc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ead8:	2801      	cmp	r0, #1
 800eada:	d91e      	bls.n	800eb1a <follow_path+0x302>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eadc:	1c47      	adds	r7, r0, #1
 800eade:	d00b      	beq.n	800eaf8 <follow_path+0x2e0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eae0:	6969      	ldr	r1, [r5, #20]
 800eae2:	9b02      	ldr	r3, [sp, #8]
 800eae4:	4288      	cmp	r0, r1
 800eae6:	d30d      	bcc.n	800eb04 <follow_path+0x2ec>
			ns = dp->fn[NSFLAG];
 800eae8:	9a03      	ldr	r2, [sp, #12]
 800eaea:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
						dp->sect = 0; return FR_NO_FILE;
 800eaee:	61e2      	str	r2, [r4, #28]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eaf0:	075a      	lsls	r2, r3, #29
 800eaf2:	d424      	bmi.n	800eb3e <follow_path+0x326>
 800eaf4:	2205      	movs	r2, #5
 800eaf6:	e71d      	b.n	800e934 <follow_path+0x11c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eaf8:	2201      	movs	r2, #1
 800eafa:	e7b8      	b.n	800ea6e <follow_path+0x256>
			ns = dp->fn[NSFLAG];
 800eafc:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				dp->sect = 0; return FR_NO_FILE;
 800eb00:	61e1      	str	r1, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 800eb02:	e7f5      	b.n	800eaf0 <follow_path+0x2d8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb04:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800eb06:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800eb08:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb0a:	4288      	cmp	r0, r1
 800eb0c:	d210      	bcs.n	800eb30 <follow_path+0x318>
	return clst * fs->csize + fs->database;
 800eb0e:	896a      	ldrh	r2, [r5, #10]
 800eb10:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800eb12:	fb00 7702 	mla	r7, r0, r2, r7
				dp->sect = clust2sect(fs, clst);
 800eb16:	61e7      	str	r7, [r4, #28]
 800eb18:	e751      	b.n	800e9be <follow_path+0x1a6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	e7a7      	b.n	800ea6e <follow_path+0x256>
		dp->fn[NSFLAG] = NS_NONAME;
 800eb1e:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 800eb20:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800eb22:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
}
 800eb26:	b005      	add	sp, #20
 800eb28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800eb2c:	f7ff bdec 	b.w	800e708 <dir_sdi.constprop.0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb30:	461f      	mov	r7, r3
 800eb32:	e7f0      	b.n	800eb16 <follow_path+0x2fe>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb34:	460d      	mov	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800eb36:	2f00      	cmp	r7, #0
 800eb38:	f47f aeb6 	bne.w	800e8a8 <follow_path+0x90>
 800eb3c:	e6f9      	b.n	800e932 <follow_path+0x11a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eb3e:	2204      	movs	r2, #4
	return res;
 800eb40:	e6f8      	b.n	800e934 <follow_path+0x11c>
 800eb42:	bf00      	nop
 800eb44:	0801075c 	.word	0x0801075c
 800eb48:	0801074c 	.word	0x0801074c

0800eb4c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eb4c:	2901      	cmp	r1, #1
{
 800eb4e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb52:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800eb54:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eb56:	d909      	bls.n	800eb6c <remove_chain+0x20>
 800eb58:	6973      	ldr	r3, [r6, #20]
 800eb5a:	428b      	cmp	r3, r1
 800eb5c:	d906      	bls.n	800eb6c <remove_chain+0x20>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eb5e:	4605      	mov	r5, r0
 800eb60:	4611      	mov	r1, r2
 800eb62:	b932      	cbnz	r2, 800eb72 <remove_chain+0x26>
 800eb64:	46b1      	mov	r9, r6
			fs->wflag = 1;
 800eb66:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb68:	429c      	cmp	r4, r3
 800eb6a:	d312      	bcc.n	800eb92 <remove_chain+0x46>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eb6c:	2002      	movs	r0, #2
}
 800eb6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d9fa      	bls.n	800eb6c <remove_chain+0x20>
 800eb76:	2a01      	cmp	r2, #1
 800eb78:	d0f8      	beq.n	800eb6c <remove_chain+0x20>
 800eb7a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f7ff fc1c 	bl	800e3bc <put_fat.part.0>
		if (res != FR_OK) return res;
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d1f2      	bne.n	800eb6e <remove_chain+0x22>
 800eb88:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb8c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eb90:	e7e9      	b.n	800eb66 <remove_chain+0x1a>
		switch (fs->fs_type) {
 800eb92:	f899 3000 	ldrb.w	r3, [r9]
 800eb96:	2b02      	cmp	r3, #2
 800eb98:	f000 8098 	beq.w	800eccc <remove_chain+0x180>
 800eb9c:	2b03      	cmp	r3, #3
 800eb9e:	d010      	beq.n	800ebc2 <remove_chain+0x76>
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d1e3      	bne.n	800eb6c <remove_chain+0x20>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eba4:	f8d9 1020 	ldr.w	r1, [r9, #32]
			bc = (UINT)clst; bc += bc / 2;
 800eba8:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebac:	4648      	mov	r0, r9
 800ebae:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800ebb2:	f7ff fa5b 	bl	800e06c <move_window>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	f000 80b3 	beq.w	800ed22 <remove_chain+0x1d6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ebbc:	2001      	movs	r0, #1
}
 800ebbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ebc2:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800ebc6:	4648      	mov	r0, r9
 800ebc8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800ebcc:	f7ff fa4e 	bl	800e06c <move_window>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d1f3      	bne.n	800ebbc <remove_chain+0x70>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ebd4:	00a3      	lsls	r3, r4, #2
 800ebd6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800ebda:	444b      	add	r3, r9
 800ebdc:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800ebe0:	f038 4870 	bics.w	r8, r8, #4026531840	@ 0xf0000000
 800ebe4:	f000 80bb 	beq.w	800ed5e <remove_chain+0x212>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ebe8:	f1b8 0f01 	cmp.w	r8, #1
 800ebec:	d0be      	beq.n	800eb6c <remove_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ebee:	6973      	ldr	r3, [r6, #20]
 800ebf0:	429c      	cmp	r4, r3
 800ebf2:	d2bb      	bcs.n	800eb6c <remove_chain+0x20>
		switch (fs->fs_type) {
 800ebf4:	f896 9000 	ldrb.w	r9, [r6]
 800ebf8:	f1b9 0f02 	cmp.w	r9, #2
 800ebfc:	d02e      	beq.n	800ec5c <remove_chain+0x110>
 800ebfe:	f1b9 0f03 	cmp.w	r9, #3
 800ec02:	d04c      	beq.n	800ec9e <remove_chain+0x152>
 800ec04:	f1b9 0f01 	cmp.w	r9, #1
 800ec08:	d1b0      	bne.n	800eb6c <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec0a:	6a31      	ldr	r1, [r6, #32]
			bc = (UINT)clst; bc += bc / 2;
 800ec0c:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec10:	4630      	mov	r0, r6
 800ec12:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800ec16:	f7ff fa29 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d1a7      	bne.n	800eb6e <remove_chain+0x22>
			p = fs->win + bc++ % SS(fs);
 800ec1e:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ec22:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 800ec24:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800ec28:	f106 0a30 	add.w	sl, r6, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec2c:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ec30:	d561      	bpl.n	800ecf6 <remove_chain+0x1aa>
 800ec32:	f81a 1003 	ldrb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec36:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ec38:	f001 010f 	and.w	r1, r1, #15
 800ec3c:	f80a 1003 	strb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec40:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800ec42:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec46:	4411      	add	r1, r2
 800ec48:	f7ff fa10 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d18e      	bne.n	800eb6e <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800ec50:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800ec54:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ec58:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800ec5a:	e00c      	b.n	800ec76 <remove_chain+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ec5c:	6a31      	ldr	r1, [r6, #32]
 800ec5e:	4630      	mov	r0, r6
 800ec60:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800ec64:	f7ff fa02 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d180      	bne.n	800eb6e <remove_chain+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ec6c:	0064      	lsls	r4, r4, #1
 800ec6e:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800ec72:	4434      	add	r4, r6
 800ec74:	8620      	strh	r0, [r4, #48]	@ 0x30
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ec76:	6972      	ldr	r2, [r6, #20]
 800ec78:	6933      	ldr	r3, [r6, #16]
 800ec7a:	1e91      	subs	r1, r2, #2
			fs->wflag = 1;
 800ec7c:	70f7      	strb	r7, [r6, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ec7e:	428b      	cmp	r3, r1
 800ec80:	d205      	bcs.n	800ec8e <remove_chain+0x142>
			fs->free_clst++;
 800ec82:	3301      	adds	r3, #1
 800ec84:	6133      	str	r3, [r6, #16]
			fs->fsi_flag |= 1;
 800ec86:	7933      	ldrb	r3, [r6, #4]
 800ec88:	f043 0301 	orr.w	r3, r3, #1
 800ec8c:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ec8e:	4542      	cmp	r2, r8
 800ec90:	d965      	bls.n	800ed5e <remove_chain+0x212>
 800ec92:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec96:	4644      	mov	r4, r8
 800ec98:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ec9c:	e764      	b.n	800eb68 <remove_chain+0x1c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ec9e:	6a31      	ldr	r1, [r6, #32]
 800eca0:	4630      	mov	r0, r6
 800eca2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800eca6:	f7ff f9e1 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	f47f af5f 	bne.w	800eb6e <remove_chain+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ecb0:	00a4      	lsls	r4, r4, #2
 800ecb2:	f106 0230 	add.w	r2, r6, #48	@ 0x30
 800ecb6:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800ecba:	5911      	ldr	r1, [r2, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800ecbc:	5310      	strh	r0, [r2, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ecbe:	4422      	add	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800ecc0:	0e0b      	lsrs	r3, r1, #24
 800ecc2:	7090      	strb	r0, [r2, #2]
 800ecc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 800ecc8:	70d3      	strb	r3, [r2, #3]
			if (res != FR_OK) return res;
 800ecca:	e7d4      	b.n	800ec76 <remove_chain+0x12a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eccc:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800ecd0:	4648      	mov	r0, r9
 800ecd2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800ecd6:	f7ff f9c9 	bl	800e06c <move_window>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	f47f af6e 	bne.w	800ebbc <remove_chain+0x70>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ece0:	0063      	lsls	r3, r4, #1
 800ece2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ece6:	444b      	add	r3, r9
 800ece8:	f8b3 8030 	ldrh.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800ecec:	f1b8 0f00 	cmp.w	r8, #0
 800ecf0:	f47f af7a 	bne.w	800ebe8 <remove_chain+0x9c>
 800ecf4:	e033      	b.n	800ed5e <remove_chain+0x212>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ecf6:	f80a 0003 	strb.w	r0, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800ecfe:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed02:	4411      	add	r1, r2
 800ed04:	f7ff f9b2 	bl	800e06c <move_window>
			if (res != FR_OK) break;
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	f47f af30 	bne.w	800eb6e <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800ed0e:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800ed12:	f81a 000b 	ldrb.w	r0, [sl, fp]
 800ed16:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ed1a:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 800ed1e:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800ed20:	e7a9      	b.n	800ec76 <remove_chain+0x12a>
			wc = fs->win[bc++ % SS(fs)];
 800ed22:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed26:	f8d9 1020 	ldr.w	r1, [r9, #32]
			wc = fs->win[bc++ % SS(fs)];
 800ed2a:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed2e:	4648      	mov	r0, r9
			wc = fs->win[bc++ % SS(fs)];
 800ed30:	444b      	add	r3, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed32:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800ed36:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed3a:	f7ff f997 	bl	800e06c <move_window>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f47f af3c 	bne.w	800ebbc <remove_chain+0x70>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ed44:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed48:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800ed4a:	44c8      	add	r8, r9
 800ed4c:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800ed50:	ea4a 2803 	orr.w	r8, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed54:	d505      	bpl.n	800ed62 <remove_chain+0x216>
		if (nxt == 0) break;				/* Empty cluster? */
 800ed56:	ea5f 1818 	movs.w	r8, r8, lsr #4
 800ed5a:	f47f af45 	bne.w	800ebe8 <remove_chain+0x9c>
	return FR_OK;
 800ed5e:	2000      	movs	r0, #0
 800ed60:	e705      	b.n	800eb6e <remove_chain+0x22>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed62:	f3c8 080b 	ubfx	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800ed66:	f1b8 0f00 	cmp.w	r8, #0
 800ed6a:	f47f af3d 	bne.w	800ebe8 <remove_chain+0x9c>
 800ed6e:	e7f6      	b.n	800ed5e <remove_chain+0x212>

0800ed70 <dir_register>:
{
 800ed70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed74:	b085      	sub	sp, #20
 800ed76:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800ed78:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800ed7a:	f7ff fcc5 	bl	800e708 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	f040 80b2 	bne.w	800eee8 <dir_register+0x178>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ed84:	f8d6 b02c 	ldr.w	fp, [r6, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed88:	f106 0330 	add.w	r3, r6, #48	@ 0x30
			res = move_window(fs, dp->sect);
 800ed8c:	f8d4 a01c 	ldr.w	sl, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	465b      	mov	r3, fp
 800ed94:	46d3      	mov	fp, sl
 800ed96:	469a      	mov	sl, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ed98:	45d3      	cmp	fp, sl
 800ed9a:	d014      	beq.n	800edc6 <dir_register+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ed9c:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed9e:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d15c      	bne.n	800ee5e <dir_register+0xee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eda4:	2301      	movs	r3, #1
 800eda6:	465a      	mov	r2, fp
 800eda8:	9900      	ldr	r1, [sp, #0]
 800edaa:	f7ff f843 	bl	800de34 <disk_read>
 800edae:	b138      	cbz	r0, 800edc0 <dir_register+0x50>
			fs->winsect = sector;
 800edb0:	f04f 33ff 	mov.w	r3, #4294967295
 800edb4:	62f3      	str	r3, [r6, #44]	@ 0x2c
				res = FR_DISK_ERR;
 800edb6:	2501      	movs	r5, #1
}
 800edb8:	4628      	mov	r0, r5
 800edba:	b005      	add	sp, #20
 800edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800edc0:	46da      	mov	sl, fp
 800edc2:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800edc6:	6a23      	ldr	r3, [r4, #32]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	2be5      	cmp	r3, #229	@ 0xe5
 800edcc:	d000      	beq.n	800edd0 <dir_register+0x60>
 800edce:	bb2b      	cbnz	r3, 800ee1c <dir_register+0xac>
		res = move_window(fs, dp->sect);
 800edd0:	69e1      	ldr	r1, [r4, #28]
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7ff f94a 	bl	800e06c <move_window>
		if (res == FR_OK) {
 800edd8:	4605      	mov	r5, r0
 800edda:	2800      	cmp	r0, #0
 800eddc:	d1ec      	bne.n	800edb8 <dir_register+0x48>
		*d++ = (BYTE)val;
 800edde:	2220      	movs	r2, #32
 800ede0:	4601      	mov	r1, r0
 800ede2:	6a20      	ldr	r0, [r4, #32]
 800ede4:	f000 fec2 	bl	800fb6c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ede8:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800edea:	f104 0225 	add.w	r2, r4, #37	@ 0x25
 800edee:	1a9a      	subs	r2, r3, r2
 800edf0:	2a02      	cmp	r2, #2
 800edf2:	f240 80db 	bls.w	800efac <dir_register+0x23c>
			*d++ = *s++;
 800edf6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800edf8:	601a      	str	r2, [r3, #0]
 800edfa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800edfc:	605a      	str	r2, [r3, #4]
 800edfe:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
}
 800ee02:	4628      	mov	r0, r5
			*d++ = *s++;
 800ee04:	721a      	strb	r2, [r3, #8]
 800ee06:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ee0a:	725a      	strb	r2, [r3, #9]
			fs->wflag = 1;
 800ee0c:	2201      	movs	r2, #1
			*d++ = *s++;
 800ee0e:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 800ee12:	7299      	strb	r1, [r3, #10]
			fs->wflag = 1;
 800ee14:	70f2      	strb	r2, [r6, #3]
}
 800ee16:	b005      	add	sp, #20
 800ee18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ee1c:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800ee1e:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ee20:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee22:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800ee26:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800ee2a:	d265      	bcs.n	800eef8 <dir_register+0x188>
 800ee2c:	f1bb 0f00 	cmp.w	fp, #0
 800ee30:	d062      	beq.n	800eef8 <dir_register+0x188>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee32:	f3c5 0908 	ubfx	r9, r5, #0, #9
 800ee36:	f1b9 0f00 	cmp.w	r9, #0
 800ee3a:	d109      	bne.n	800ee50 <dir_register+0xe0>
		dp->sect++;				/* Next sector */
 800ee3c:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 800ee40:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800ee42:	f8c4 b01c 	str.w	fp, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800ee46:	bb51      	cbnz	r1, 800ee9e <dir_register+0x12e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ee48:	893b      	ldrh	r3, [r7, #8]
 800ee4a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800ee4e:	d952      	bls.n	800eef6 <dir_register+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee50:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ee54:	eb08 0309 	add.w	r3, r8, r9
	dp->dptr = ofs;						/* Current entry */
 800ee58:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ee5a:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ee5c:	e79c      	b.n	800ed98 <dir_register+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee5e:	2301      	movs	r3, #1
 800ee60:	4652      	mov	r2, sl
 800ee62:	9900      	ldr	r1, [sp, #0]
 800ee64:	f7fe fff4 	bl	800de50 <disk_write>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d1a4      	bne.n	800edb6 <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ee6c:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800ee6e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ee70:	ebaa 0103 	sub.w	r1, sl, r3
 800ee74:	69b3      	ldr	r3, [r6, #24]
 800ee76:	4299      	cmp	r1, r3
 800ee78:	d20f      	bcs.n	800ee9a <dir_register+0x12a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee7a:	78b5      	ldrb	r5, [r6, #2]
 800ee7c:	2d01      	cmp	r5, #1
 800ee7e:	d90c      	bls.n	800ee9a <dir_register+0x12a>
 800ee80:	9f00      	ldr	r7, [sp, #0]
 800ee82:	e000      	b.n	800ee86 <dir_register+0x116>
					wsect += fs->fsize;
 800ee84:	69b3      	ldr	r3, [r6, #24]
 800ee86:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee88:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4639      	mov	r1, r7
 800ee8e:	4652      	mov	r2, sl
 800ee90:	7870      	ldrb	r0, [r6, #1]
 800ee92:	f7fe ffdd 	bl	800de50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee96:	2d01      	cmp	r5, #1
 800ee98:	d1f4      	bne.n	800ee84 <dir_register+0x114>
 800ee9a:	7870      	ldrb	r0, [r6, #1]
 800ee9c:	e782      	b.n	800eda4 <dir_register+0x34>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ee9e:	897b      	ldrh	r3, [r7, #10]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800eea6:	d1d3      	bne.n	800ee50 <dir_register+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eea8:	4638      	mov	r0, r7
 800eeaa:	f7ff fb07 	bl	800e4bc <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eeae:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eeb0:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eeb2:	d979      	bls.n	800efa8 <dir_register+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eeb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eeb8:	f43f af7d 	beq.w	800edb6 <dir_register+0x46>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	4298      	cmp	r0, r3
 800eec0:	d21c      	bcs.n	800eefc <dir_register+0x18c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eec2:	3b02      	subs	r3, #2
	clst -= 2;
 800eec4:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eec8:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eecc:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 800eece:	f8c4 a018 	str.w	sl, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eed2:	f240 8084 	bls.w	800efde <dir_register+0x26e>
	return clst * fs->csize + fs->database;
 800eed6:	897a      	ldrh	r2, [r7, #10]
 800eed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeda:	fb0b 3b02 	mla	fp, fp, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800eede:	f8d6 a02c 	ldr.w	sl, [r6, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 800eee2:	f8c4 b01c 	str.w	fp, [r4, #28]
 800eee6:	e7b5      	b.n	800ee54 <dir_register+0xe4>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eee8:	2804      	cmp	r0, #4
 800eeea:	4605      	mov	r5, r0
 800eeec:	d004      	beq.n	800eef8 <dir_register+0x188>
}
 800eeee:	4628      	mov	r0, r5
 800eef0:	b005      	add	sp, #20
 800eef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 800eef6:	61e1      	str	r1, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eef8:	2507      	movs	r5, #7
	return res;
 800eefa:	e75d      	b.n	800edb8 <dir_register+0x48>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eefc:	69a1      	ldr	r1, [r4, #24]
 800eefe:	4620      	mov	r0, r4
 800ef00:	f7ff fb32 	bl	800e568 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef04:	4682      	mov	sl, r0
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d0f6      	beq.n	800eef8 <dir_register+0x188>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ef0a:	2801      	cmp	r0, #1
 800ef0c:	d04c      	beq.n	800efa8 <dir_register+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ef0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef12:	f43f af50 	beq.w	800edb6 <dir_register+0x46>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ef16:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef18:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d16a      	bne.n	800eff6 <dir_register+0x286>
		*d++ = (BYTE)val;
 800ef20:	2100      	movs	r1, #0
 800ef22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef26:	4640      	mov	r0, r8
	clst -= 2;
 800ef28:	f1aa 0b02 	sub.w	fp, sl, #2
		*d++ = (BYTE)val;
 800ef2c:	f000 fe1e 	bl	800fb6c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef30:	697b      	ldr	r3, [r7, #20]
	return clst * fs->csize + fs->database;
 800ef32:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef34:	3b02      	subs	r3, #2
 800ef36:	459b      	cmp	fp, r3
 800ef38:	f080 8086 	bcs.w	800f048 <dir_register+0x2d8>
	return clst * fs->csize + fs->database;
 800ef3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef3e:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef44:	2900      	cmp	r1, #0
 800ef46:	d054      	beq.n	800eff2 <dir_register+0x282>
 800ef48:	2100      	movs	r1, #0
 800ef4a:	9403      	str	r4, [sp, #12]
 800ef4c:	4614      	mov	r4, r2
 800ef4e:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800ef52:	460e      	mov	r6, r1
						fs->wflag = 1;
 800ef54:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef58:	4622      	mov	r2, r4
 800ef5a:	4641      	mov	r1, r8
 800ef5c:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800ef5e:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef60:	2301      	movs	r3, #1
 800ef62:	f7fe ff75 	bl	800de50 <disk_write>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	f47f af25 	bne.w	800edb6 <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 800ef6e:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef70:	1ae1      	subs	r1, r4, r3
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	4299      	cmp	r1, r3
 800ef76:	d20e      	bcs.n	800ef96 <dir_register+0x226>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef78:	78bd      	ldrb	r5, [r7, #2]
 800ef7a:	2d01      	cmp	r5, #1
 800ef7c:	d801      	bhi.n	800ef82 <dir_register+0x212>
 800ef7e:	e00a      	b.n	800ef96 <dir_register+0x226>
					wsect += fs->fsize;
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef84:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef86:	2301      	movs	r3, #1
 800ef88:	4641      	mov	r1, r8
 800ef8a:	4622      	mov	r2, r4
 800ef8c:	7878      	ldrb	r0, [r7, #1]
 800ef8e:	f7fe ff5f 	bl	800de50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef92:	2d01      	cmp	r5, #1
 800ef94:	d1f4      	bne.n	800ef80 <dir_register+0x210>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef98:	1c73      	adds	r3, r6, #1
 800ef9a:	8979      	ldrh	r1, [r7, #10]
 800ef9c:	1c44      	adds	r4, r0, #1
 800ef9e:	428b      	cmp	r3, r1
 800efa0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800efa2:	d21f      	bcs.n	800efe4 <dir_register+0x274>
 800efa4:	461e      	mov	r6, r3
 800efa6:	e7d5      	b.n	800ef54 <dir_register+0x1e4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800efa8:	2502      	movs	r5, #2
 800efaa:	e705      	b.n	800edb8 <dir_register+0x48>
			*d++ = *s++;
 800efac:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800efb0:	701a      	strb	r2, [r3, #0]
 800efb2:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 800efb6:	705a      	strb	r2, [r3, #1]
 800efb8:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800efbc:	709a      	strb	r2, [r3, #2]
 800efbe:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 800efc2:	70da      	strb	r2, [r3, #3]
 800efc4:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800efc8:	711a      	strb	r2, [r3, #4]
 800efca:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800efce:	715a      	strb	r2, [r3, #5]
 800efd0:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800efd4:	719a      	strb	r2, [r3, #6]
 800efd6:	f894 202b 	ldrb.w	r2, [r4, #43]	@ 0x2b
 800efda:	71da      	strb	r2, [r3, #7]
 800efdc:	e70f      	b.n	800edfe <dir_register+0x8e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800efde:	f04f 0b00 	mov.w	fp, #0
 800efe2:	e77c      	b.n	800eede <dir_register+0x16e>
					fs->winsect -= n;							/* Restore window offset */
 800efe4:	4631      	mov	r1, r6
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800efe6:	697b      	ldr	r3, [r7, #20]
					fs->winsect -= n;							/* Restore window offset */
 800efe8:	9d02      	ldr	r5, [sp, #8]
 800efea:	9e01      	ldr	r6, [sp, #4]
 800efec:	1a42      	subs	r2, r0, r1
 800efee:	9c03      	ldr	r4, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eff0:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800eff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eff4:	e76a      	b.n	800eecc <dir_register+0x15c>
		wsect = fs->winsect;	/* Current sector number */
 800eff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eff8:	2301      	movs	r3, #1
 800effa:	4641      	mov	r1, r8
 800effc:	7878      	ldrb	r0, [r7, #1]
 800effe:	9201      	str	r2, [sp, #4]
 800f000:	f7fe ff26 	bl	800de50 <disk_write>
 800f004:	2800      	cmp	r0, #0
 800f006:	f47f aed6 	bne.w	800edb6 <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f00a:	6a3b      	ldr	r3, [r7, #32]
 800f00c:	9a01      	ldr	r2, [sp, #4]
			fs->wflag = 0;
 800f00e:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f010:	1ad1      	subs	r1, r2, r3
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	4299      	cmp	r1, r3
 800f016:	d283      	bcs.n	800ef20 <dir_register+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f018:	f897 b002 	ldrb.w	fp, [r7, #2]
 800f01c:	f1bb 0f01 	cmp.w	fp, #1
 800f020:	f67f af7e 	bls.w	800ef20 <dir_register+0x1b0>
 800f024:	9401      	str	r4, [sp, #4]
 800f026:	4614      	mov	r4, r2
 800f028:	e000      	b.n	800f02c <dir_register+0x2bc>
					wsect += fs->fsize;
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f02e:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800f032:	2301      	movs	r3, #1
 800f034:	4641      	mov	r1, r8
 800f036:	4622      	mov	r2, r4
 800f038:	7878      	ldrb	r0, [r7, #1]
 800f03a:	f7fe ff09 	bl	800de50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f03e:	f1bb 0f01 	cmp.w	fp, #1
 800f042:	d1f2      	bne.n	800f02a <dir_register+0x2ba>
 800f044:	9c01      	ldr	r4, [sp, #4]
 800f046:	e76b      	b.n	800ef20 <dir_register+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f048:	2200      	movs	r2, #0
 800f04a:	e77a      	b.n	800ef42 <dir_register+0x1d2>

0800f04c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f04c:	b510      	push	{r4, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800f054:	b1a1      	cbz	r1, 800f080 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f056:	f891 c000 	ldrb.w	ip, [r1]
 800f05a:	f1bc 0f20 	cmp.w	ip, #32
 800f05e:	d912      	bls.n	800f086 <f_mount+0x3a>
 800f060:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 800f064:	d00f      	beq.n	800f086 <f_mount+0x3a>
 800f066:	4608      	mov	r0, r1
 800f068:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f06c:	2b20      	cmp	r3, #32
 800f06e:	d90c      	bls.n	800f08a <f_mount+0x3e>
 800f070:	2b3a      	cmp	r3, #58	@ 0x3a
 800f072:	d1f9      	bne.n	800f068 <f_mount+0x1c>
			i = *tp++ - '0';
 800f074:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f076:	4288      	cmp	r0, r1
 800f078:	d102      	bne.n	800f080 <f_mount+0x34>
 800f07a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f07e:	d006      	beq.n	800f08e <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800f080:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800f082:	b002      	add	sp, #8
 800f084:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f086:	4663      	mov	r3, ip
 800f088:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f08a:	2b3a      	cmp	r3, #58	@ 0x3a
 800f08c:	d0f2      	beq.n	800f074 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f08e:	4913      	ldr	r1, [pc, #76]	@ (800f0dc <f_mount+0x90>)
 800f090:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800f092:	b143      	cbz	r3, 800f0a6 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f094:	4812      	ldr	r0, [pc, #72]	@ (800f0e0 <f_mount+0x94>)
 800f096:	6804      	ldr	r4, [r0, #0]
 800f098:	42a3      	cmp	r3, r4
 800f09a:	d019      	beq.n	800f0d0 <f_mount+0x84>
 800f09c:	6904      	ldr	r4, [r0, #16]
 800f09e:	429c      	cmp	r4, r3
 800f0a0:	d013      	beq.n	800f0ca <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800f0a6:	9b01      	ldr	r3, [sp, #4]
 800f0a8:	b15b      	cbz	r3, 800f0c2 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800f0aa:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0ac:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800f0ae:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800f0b0:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0b2:	d107      	bne.n	800f0c4 <f_mount+0x78>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	a901      	add	r1, sp, #4
 800f0b8:	4668      	mov	r0, sp
 800f0ba:	f7ff f815 	bl	800e0e8 <find_volume>
}
 800f0be:	b002      	add	sp, #8
 800f0c0:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800f0c2:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f0c4:	2000      	movs	r0, #0
}
 800f0c6:	b002      	add	sp, #8
 800f0c8:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f0ca:	2400      	movs	r4, #0
 800f0cc:	6104      	str	r4, [r0, #16]
 800f0ce:	e7e8      	b.n	800f0a2 <f_mount+0x56>
 800f0d0:	2400      	movs	r4, #0
 800f0d2:	6004      	str	r4, [r0, #0]
 800f0d4:	6904      	ldr	r4, [r0, #16]
 800f0d6:	429c      	cmp	r4, r3
 800f0d8:	d1e3      	bne.n	800f0a2 <f_mount+0x56>
 800f0da:	e7f6      	b.n	800f0ca <f_mount+0x7e>
 800f0dc:	240ac8dc 	.word	0x240ac8dc
 800f0e0:	240ac8b8 	.word	0x240ac8b8

0800f0e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0e8:	b090      	sub	sp, #64	@ 0x40
 800f0ea:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d036      	beq.n	800f15e <f_open+0x7a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f0f0:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800f0f4:	4616      	mov	r6, r2
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	a903      	add	r1, sp, #12
 800f0fa:	a801      	add	r0, sp, #4
 800f0fc:	463a      	mov	r2, r7
 800f0fe:	f7fe fff3 	bl	800e0e8 <find_volume>
	if (res == FR_OK) {
 800f102:	4605      	mov	r5, r0
 800f104:	b128      	cbz	r0, 800f112 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f106:	2300      	movs	r3, #0
 800f108:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800f10a:	4628      	mov	r0, r5
 800f10c:	b010      	add	sp, #64	@ 0x40
 800f10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800f112:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f116:	a804      	add	r0, sp, #16
 800f118:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800f11a:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f11e:	f7ff fb7b 	bl	800e818 <follow_path>
		if (res == FR_OK) {
 800f122:	b9a8      	cbnz	r0, 800f150 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f124:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 800f128:	2b00      	cmp	r3, #0
 800f12a:	db1d      	blt.n	800f168 <f_open+0x84>
		if (Files[i].fs) {	/* Existing entry */
 800f12c:	4ba8      	ldr	r3, [pc, #672]	@ (800f3d0 <f_open+0x2ec>)
 800f12e:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f132:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800f134:	6818      	ldr	r0, [r3, #0]
 800f136:	2800      	cmp	r0, #0
 800f138:	f000 8109 	beq.w	800f34e <f_open+0x26a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f13c:	4290      	cmp	r0, r2
 800f13e:	d060      	beq.n	800f202 <f_open+0x11e>
		if (Files[i].fs) {	/* Existing entry */
 800f140:	6919      	ldr	r1, [r3, #16]
 800f142:	2900      	cmp	r1, #0
 800f144:	d06d      	beq.n	800f222 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f146:	4291      	cmp	r1, r2
 800f148:	f000 8116 	beq.w	800f378 <f_open+0x294>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f14c:	2512      	movs	r5, #18
 800f14e:	e7da      	b.n	800f106 <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f150:	f016 0f1c 	tst.w	r6, #28
 800f154:	d001      	beq.n	800f15a <f_open+0x76>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f156:	2804      	cmp	r0, #4
 800f158:	d008      	beq.n	800f16c <f_open+0x88>
 800f15a:	4605      	mov	r5, r0
 800f15c:	e7d3      	b.n	800f106 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800f15e:	2509      	movs	r5, #9
}
 800f160:	4628      	mov	r0, r5
 800f162:	b010      	add	sp, #64	@ 0x40
 800f164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800f168:	2506      	movs	r5, #6
 800f16a:	e7cc      	b.n	800f106 <f_open+0x22>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f16c:	4b98      	ldr	r3, [pc, #608]	@ (800f3d0 <f_open+0x2ec>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	2a00      	cmp	r2, #0
 800f172:	f000 80f9 	beq.w	800f368 <f_open+0x284>
 800f176:	691b      	ldr	r3, [r3, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1e7      	bne.n	800f14c <f_open+0x68>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f17c:	a804      	add	r0, sp, #16
 800f17e:	f7ff fdf7 	bl	800ed70 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f182:	4603      	mov	r3, r0
 800f184:	2800      	cmp	r0, #0
 800f186:	f040 811c 	bne.w	800f3c2 <f_open+0x2de>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f18a:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 800f18e:	f7fe fd47 	bl	800dc20 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f192:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f196:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800f198:	f8c9 000e 	str.w	r0, [r9, #14]
 800f19c:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f1a0:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 800f1a4:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800f1a8:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800f1ac:	2b03      	cmp	r3, #3
 800f1ae:	d103      	bne.n	800f1b8 <f_open+0xd4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f1b0:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800f1b4:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800f1be:	f898 2000 	ldrb.w	r2, [r8]
 800f1c2:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800f1c4:	f04f 0200 	mov.w	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f1c8:	bf08      	it	eq
 800f1ca:	f8a9 3014 	strheq.w	r3, [r9, #20]
					fs->wflag = 1;
 800f1ce:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d0:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 800f1d4:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800f1d8:	2e00      	cmp	r6, #0
 800f1da:	f040 80de 	bne.w	800f39a <f_open+0x2b6>
				mode |= FA_MODIFIED;
 800f1de:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f1e2:	2f01      	cmp	r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f1e4:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f1e8:	a804      	add	r0, sp, #16
 800f1ea:	bf94      	ite	ls
 800f1ec:	2100      	movls	r1, #0
 800f1ee:	2101      	movhi	r1, #1
			fp->dir_ptr = dj.dir;
 800f1f0:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f1f4:	f7fe fe46 	bl	800de84 <inc_lock>
 800f1f8:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	d143      	bne.n	800f286 <f_open+0x1a2>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f1fe:	2502      	movs	r5, #2
 800f200:	e781      	b.n	800f106 <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f208:	4572      	cmp	r2, lr
 800f20a:	f000 80b9 	beq.w	800f380 <f_open+0x29c>
		if (Files[i].fs) {	/* Existing entry */
 800f20e:	691a      	ldr	r2, [r3, #16]
 800f210:	b13a      	cbz	r2, 800f222 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f212:	4282      	cmp	r2, r0
 800f214:	d19a      	bne.n	800f14c <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f216:	4628      	mov	r0, r5
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f218:	695a      	ldr	r2, [r3, #20]
 800f21a:	4572      	cmp	r2, lr
 800f21c:	d00d      	beq.n	800f23a <f_open+0x156>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f21e:	2800      	cmp	r0, #0
 800f220:	d094      	beq.n	800f14c <f_open+0x68>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f222:	f016 0f1c 	tst.w	r6, #28
 800f226:	d018      	beq.n	800f25a <f_open+0x176>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f228:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f22c:	f013 0f11 	tst.w	r3, #17
 800f230:	d120      	bne.n	800f274 <f_open+0x190>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f232:	0773      	lsls	r3, r6, #29
 800f234:	d520      	bpl.n	800f278 <f_open+0x194>
 800f236:	2508      	movs	r5, #8
 800f238:	e765      	b.n	800f106 <f_open+0x22>
				Files[i].clu == dp->obj.sclust &&
 800f23a:	6999      	ldr	r1, [r3, #24]
 800f23c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f23e:	4291      	cmp	r1, r2
 800f240:	d1ed      	bne.n	800f21e <f_open+0x13a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f242:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f244:	f1bc 0f00 	cmp.w	ip, #0
 800f248:	d105      	bne.n	800f256 <f_open+0x172>
 800f24a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f24e:	899b      	ldrh	r3, [r3, #12]
 800f250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f254:	d1e5      	bne.n	800f222 <f_open+0x13e>
 800f256:	2510      	movs	r5, #16
 800f258:	e755      	b.n	800f106 <f_open+0x22>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f25a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f25e:	06d8      	lsls	r0, r3, #27
 800f260:	d40f      	bmi.n	800f282 <f_open+0x19e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f262:	07b2      	lsls	r2, r6, #30
 800f264:	d501      	bpl.n	800f26a <f_open+0x186>
 800f266:	07db      	lsls	r3, r3, #31
 800f268:	d404      	bmi.n	800f274 <f_open+0x190>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f26a:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 800f26c:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f270:	d5b7      	bpl.n	800f1e2 <f_open+0xfe>
 800f272:	e7b4      	b.n	800f1de <f_open+0xfa>
					res = FR_DENIED;
 800f274:	2507      	movs	r5, #7
 800f276:	e746      	b.n	800f106 <f_open+0x22>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f278:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800f27a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f27e:	d5b0      	bpl.n	800f1e2 <f_open+0xfe>
 800f280:	e785      	b.n	800f18e <f_open+0xaa>
					res = FR_NO_FILE;
 800f282:	2504      	movs	r5, #4
 800f284:	e73f      	b.n	800f106 <f_open+0x22>
	if (fs->fs_type == FS_FAT32) {
 800f286:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800f28a:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800f28e:	2b03      	cmp	r3, #3
 800f290:	d103      	bne.n	800f29a <f_open+0x1b6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f292:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800f296:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f29a:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 800f29c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f2a0:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f2a2:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
	rv = rv << 8 | ptr[0];
 800f2a6:	f8d9 901c 	ldr.w	r9, [r9, #28]
		*d++ = (BYTE)val;
 800f2aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f2ae:	62e1      	str	r1, [r4, #44]	@ 0x2c
		*d++ = (BYTE)val;
 800f2b0:	4650      	mov	r0, sl
			fp->err = 0;			/* Clear error flag */
 800f2b2:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f2b4:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f2b6:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f2b8:	f8c4 8000 	str.w	r8, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f2bc:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->obj.id = fs->id;
 800f2c0:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800f2c2:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 800f2c4:	f000 fc52 	bl	800fb6c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f2c8:	06b9      	lsls	r1, r7, #26
 800f2ca:	f57f af1e 	bpl.w	800f10a <f_open+0x26>
 800f2ce:	f1b9 0f00 	cmp.w	r9, #0
 800f2d2:	f43f af1a 	beq.w	800f10a <f_open+0x26>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f2d6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f2da:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2de:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f2e2:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2e6:	d96e      	bls.n	800f3c6 <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	6820      	ldr	r0, [r4, #0]
 800f2ec:	f7ff f8e6 	bl	800e4bc <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800f2f0:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2f2:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800f2f6:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f2f8:	d934      	bls.n	800f364 <f_open+0x280>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f2fa:	1c42      	adds	r2, r0, #1
 800f2fc:	d001      	beq.n	800f302 <f_open+0x21e>
 800f2fe:	454f      	cmp	r7, r9
 800f300:	d3f2      	bcc.n	800f2e8 <f_open+0x204>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f302:	1c73      	adds	r3, r6, #1
				fp->clust = clst;
 800f304:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f306:	d020      	beq.n	800f34a <f_open+0x266>
 800f308:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f43f aefc 	beq.w	800f10a <f_open+0x26>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f312:	f8d8 3014 	ldr.w	r3, [r8, #20]
	clst -= 2;
 800f316:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f318:	3b02      	subs	r3, #2
 800f31a:	429e      	cmp	r6, r3
 800f31c:	f4bf af6f 	bcs.w	800f1fe <f_open+0x11a>
	return clst * fs->csize + fs->database;
 800f320:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800f324:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800f328:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f32c:	2a00      	cmp	r2, #0
 800f32e:	f43f af66 	beq.w	800f1fe <f_open+0x11a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f332:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f336:	4651      	mov	r1, sl
 800f338:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f33a:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f33c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f340:	f7fe fd78 	bl	800de34 <disk_read>
 800f344:	2800      	cmp	r0, #0
 800f346:	f43f aee0 	beq.w	800f10a <f_open+0x26>
 800f34a:	2501      	movs	r5, #1
 800f34c:	e6db      	b.n	800f106 <f_open+0x22>
		if (Files[i].fs) {	/* Existing entry */
 800f34e:	6919      	ldr	r1, [r3, #16]
 800f350:	2900      	cmp	r1, #0
 800f352:	f43f af66 	beq.w	800f222 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f356:	4291      	cmp	r1, r2
 800f358:	f47f af63 	bne.w	800f222 <f_open+0x13e>
			be = 1;
 800f35c:	2001      	movs	r0, #1
 800f35e:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f362:	e759      	b.n	800f218 <f_open+0x134>
				fp->clust = clst;
 800f364:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f366:	e74a      	b.n	800f1fe <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f368:	a804      	add	r0, sp, #16
 800f36a:	f7ff fd01 	bl	800ed70 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f36e:	2800      	cmp	r0, #0
 800f370:	f43f af0b 	beq.w	800f18a <f_open+0xa6>
 800f374:	4605      	mov	r5, r0
 800f376:	e6c6      	b.n	800f106 <f_open+0x22>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f378:	4628      	mov	r0, r5
 800f37a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f37e:	e74b      	b.n	800f218 <f_open+0x134>
				Files[i].clu == dp->obj.sclust &&
 800f380:	689a      	ldr	r2, [r3, #8]
 800f382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f384:	4291      	cmp	r1, r2
 800f386:	d020      	beq.n	800f3ca <f_open+0x2e6>
		if (Files[i].fs) {	/* Existing entry */
 800f388:	691a      	ldr	r2, [r3, #16]
 800f38a:	2a00      	cmp	r2, #0
 800f38c:	f43f af49 	beq.w	800f222 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f390:	4290      	cmp	r0, r2
 800f392:	f47f aedb 	bne.w	800f14c <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f396:	2000      	movs	r0, #0
 800f398:	e73e      	b.n	800f218 <f_open+0x134>
						res = remove_chain(&dj.obj, cl, 0);
 800f39a:	4631      	mov	r1, r6
 800f39c:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800f39e:	f8d8 a02c 	ldr.w	sl, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800f3a2:	f7ff fbd3 	bl	800eb4c <remove_chain>
						if (res == FR_OK) {
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f47f aed7 	bne.w	800f15a <f_open+0x76>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f3ac:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800f3ae:	4651      	mov	r1, sl
 800f3b0:	4640      	mov	r0, r8
 800f3b2:	f7fe fe5b 	bl	800e06c <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f3b6:	f8c8 600c 	str.w	r6, [r8, #12]
		if (res == FR_OK) {
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	f43f af0e 	beq.w	800f1de <f_open+0xfa>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f3c2:	461d      	mov	r5, r3
 800f3c4:	e69f      	b.n	800f106 <f_open+0x22>
				fp->clust = clst;
 800f3c6:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3c8:	e79e      	b.n	800f308 <f_open+0x224>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f3ca:	462a      	mov	r2, r5
 800f3cc:	e73a      	b.n	800f244 <f_open+0x160>
 800f3ce:	bf00      	nop
 800f3d0:	240ac8b8 	.word	0x240ac8b8

0800f3d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800f3da:	2300      	movs	r3, #0
{
 800f3dc:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800f3de:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f3e0:	b150      	cbz	r0, 800f3f8 <f_read+0x24>
 800f3e2:	6803      	ldr	r3, [r0, #0]
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	b13b      	cbz	r3, 800f3f8 <f_read+0x24>
 800f3e8:	4691      	mov	r9, r2
 800f3ea:	781a      	ldrb	r2, [r3, #0]
 800f3ec:	b122      	cbz	r2, 800f3f8 <f_read+0x24>
 800f3ee:	460e      	mov	r6, r1
 800f3f0:	88da      	ldrh	r2, [r3, #6]
 800f3f2:	8881      	ldrh	r1, [r0, #4]
 800f3f4:	4291      	cmp	r1, r2
 800f3f6:	d004      	beq.n	800f402 <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 800f3f8:	2509      	movs	r5, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	b003      	add	sp, #12
 800f3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f402:	7858      	ldrb	r0, [r3, #1]
 800f404:	f7fe fcf6 	bl	800ddf4 <disk_status>
 800f408:	07c2      	lsls	r2, r0, #31
 800f40a:	d4f5      	bmi.n	800f3f8 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f40c:	7d65      	ldrb	r5, [r4, #21]
 800f40e:	2d00      	cmp	r5, #0
 800f410:	d1f3      	bne.n	800f3fa <f_read+0x26>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f412:	7d23      	ldrb	r3, [r4, #20]
 800f414:	f013 0b01 	ands.w	fp, r3, #1
 800f418:	f000 80d9 	beq.w	800f5ce <f_read+0x1fa>
	remain = fp->obj.objsize - fp->fptr;
 800f41c:	69a0      	ldr	r0, [r4, #24]
 800f41e:	68e3      	ldr	r3, [r4, #12]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f420:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 800f424:	eba3 0800 	sub.w	r8, r3, r0
 800f428:	45c8      	cmp	r8, r9
 800f42a:	bf28      	it	cs
 800f42c:	46c8      	movcs	r8, r9
	for ( ;  btr;								/* Repeat until all data read */
 800f42e:	f1b8 0f00 	cmp.w	r8, #0
 800f432:	d0e2      	beq.n	800f3fa <f_read+0x26>
 800f434:	9500      	str	r5, [sp, #0]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f436:	f3c0 0c08 	ubfx	ip, r0, #0, #9
 800f43a:	f1bc 0f00 	cmp.w	ip, #0
 800f43e:	d152      	bne.n	800f4e6 <f_read+0x112>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f440:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800f444:	0a43      	lsrs	r3, r0, #9
 800f446:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800f448:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 800f44c:	d036      	beq.n	800f4bc <f_read+0xe8>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f44e:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f450:	f8da 3014 	ldr.w	r3, [sl, #20]
	clst -= 2;
 800f454:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f456:	3b02      	subs	r3, #2
 800f458:	4298      	cmp	r0, r3
 800f45a:	d23d      	bcs.n	800f4d8 <f_read+0x104>
	return clst * fs->csize + fs->database;
 800f45c:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800f460:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 800f464:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d035      	beq.n	800f4d8 <f_read+0x104>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f46c:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
			sect += csect;
 800f470:	eb02 0903 	add.w	r9, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f474:	d378      	bcc.n	800f568 <f_read+0x194>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f476:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f47a:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f47e:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f480:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 800f484:	bf88      	it	hi
 800f486:	1a8d      	subhi	r5, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f488:	464a      	mov	r2, r9
 800f48a:	4631      	mov	r1, r6
 800f48c:	462b      	mov	r3, r5
 800f48e:	f7fe fcd1 	bl	800de34 <disk_read>
 800f492:	2800      	cmp	r0, #0
 800f494:	f040 8094 	bne.w	800f5c0 <f_read+0x1ec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f498:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800f49c:	2a00      	cmp	r2, #0
 800f49e:	f2c0 80ad 	blt.w	800f5fc <f_read+0x228>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f4a2:	026a      	lsls	r2, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f4a4:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800f4a6:	ebb8 0802 	subs.w	r8, r8, r2
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	4416      	add	r6, r2
 800f4ae:	4410      	add	r0, r2
 800f4b0:	4413      	add	r3, r2
 800f4b2:	61a0      	str	r0, [r4, #24]
 800f4b4:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800f4b6:	d1be      	bne.n	800f436 <f_read+0x62>
 800f4b8:	9d00      	ldr	r5, [sp, #0]
 800f4ba:	e79e      	b.n	800f3fa <f_read+0x26>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d16b      	bne.n	800f598 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f4c0:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f4c2:	2801      	cmp	r0, #1
 800f4c4:	d908      	bls.n	800f4d8 <f_read+0x104>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	d07a      	beq.n	800f5c0 <f_read+0x1ec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f4ca:	f8da 3014 	ldr.w	r3, [sl, #20]
				fp->clust = clst;				/* Update current cluster */
 800f4ce:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800f4d0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f4d2:	3b02      	subs	r3, #2
 800f4d4:	4298      	cmp	r0, r3
 800f4d6:	d3c1      	bcc.n	800f45c <f_read+0x88>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f4d8:	2302      	movs	r3, #2
 800f4da:	461d      	mov	r5, r3
 800f4dc:	7563      	strb	r3, [r4, #21]
}
 800f4de:	4628      	mov	r0, r5
 800f4e0:	b003      	add	sp, #12
 800f4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f4e6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f4ea:	f5cc 7300 	rsb	r3, ip, #512	@ 0x200
 800f4ee:	4543      	cmp	r3, r8
 800f4f0:	bf28      	it	cs
 800f4f2:	4643      	movcs	r3, r8
 800f4f4:	461a      	mov	r2, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f4f6:	eb01 030c 	add.w	r3, r1, ip
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f4fa:	1e50      	subs	r0, r2, #1
 800f4fc:	2805      	cmp	r0, #5
 800f4fe:	d905      	bls.n	800f50c <f_read+0x138>
 800f500:	f10c 0c01 	add.w	ip, ip, #1
 800f504:	4461      	add	r1, ip
 800f506:	1a71      	subs	r1, r6, r1
 800f508:	2902      	cmp	r1, #2
 800f50a:	d809      	bhi.n	800f520 <f_read+0x14c>
 800f50c:	1e71      	subs	r1, r6, #1
 800f50e:	eb03 0c02 	add.w	ip, r3, r2
			*d++ = *s++;
 800f512:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800f516:	4563      	cmp	r3, ip
			*d++ = *s++;
 800f518:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800f51c:	d1f9      	bne.n	800f512 <f_read+0x13e>
 800f51e:	e7c1      	b.n	800f4a4 <f_read+0xd0>
 800f520:	f022 0e03 	bic.w	lr, r2, #3
 800f524:	4619      	mov	r1, r3
 800f526:	4630      	mov	r0, r6
 800f528:	449e      	add	lr, r3
			*d++ = *s++;
 800f52a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f52e:	4571      	cmp	r1, lr
 800f530:	f840 5b04 	str.w	r5, [r0], #4
		} while (--cnt);
 800f534:	d1f9      	bne.n	800f52a <f_read+0x156>
 800f536:	f022 0103 	bic.w	r1, r2, #3
 800f53a:	0795      	lsls	r5, r2, #30
 800f53c:	f002 0003 	and.w	r0, r2, #3
 800f540:	eb06 0c01 	add.w	ip, r6, r1
 800f544:	eb03 0e01 	add.w	lr, r3, r1
 800f548:	d0ac      	beq.n	800f4a4 <f_read+0xd0>
			*d++ = *s++;
 800f54a:	5c5b      	ldrb	r3, [r3, r1]
		} while (--cnt);
 800f54c:	2801      	cmp	r0, #1
			*d++ = *s++;
 800f54e:	5473      	strb	r3, [r6, r1]
		} while (--cnt);
 800f550:	d0a8      	beq.n	800f4a4 <f_read+0xd0>
			*d++ = *s++;
 800f552:	f89e 3001 	ldrb.w	r3, [lr, #1]
		} while (--cnt);
 800f556:	2802      	cmp	r0, #2
			*d++ = *s++;
 800f558:	f88c 3001 	strb.w	r3, [ip, #1]
		} while (--cnt);
 800f55c:	d0a2      	beq.n	800f4a4 <f_read+0xd0>
			*d++ = *s++;
 800f55e:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800f562:	f88c 3002 	strb.w	r3, [ip, #2]
		} while (--cnt);
 800f566:	e79d      	b.n	800f4a4 <f_read+0xd0>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f568:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f56a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f56e:	454a      	cmp	r2, r9
 800f570:	d00c      	beq.n	800f58c <f_read+0x1b8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f572:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f576:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	db30      	blt.n	800f5e0 <f_read+0x20c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f57e:	2301      	movs	r3, #1
 800f580:	464a      	mov	r2, r9
 800f582:	9101      	str	r1, [sp, #4]
 800f584:	f7fe fc56 	bl	800de34 <disk_read>
 800f588:	9901      	ldr	r1, [sp, #4]
 800f58a:	b9c8      	cbnz	r0, 800f5c0 <f_read+0x1ec>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f58c:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800f58e:	f8c4 9020 	str.w	r9, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f592:	f3c3 0c08 	ubfx	ip, r3, #0, #9
 800f596:	e7a8      	b.n	800f4ea <f_read+0x116>
					if (fp->cltbl) {
 800f598:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	FATFS *fs = fp->obj.fs;
 800f59a:	6821      	ldr	r1, [r4, #0]
					if (fp->cltbl) {
 800f59c:	b1c8      	cbz	r0, 800f5d2 <f_read+0x1fe>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f59e:	8949      	ldrh	r1, [r1, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f5a0:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f5a2:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5a6:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f5a8:	b929      	cbnz	r1, 800f5b6 <f_read+0x1e2>
 800f5aa:	e795      	b.n	800f4d8 <f_read+0x104>
		cl -= ncl; tbl++;		/* Next fragment */
 800f5ac:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f5ae:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f5b2:	2900      	cmp	r1, #0
 800f5b4:	d090      	beq.n	800f4d8 <f_read+0x104>
		if (cl < ncl) break;	/* In this fragment? */
 800f5b6:	428b      	cmp	r3, r1
 800f5b8:	d2f8      	bcs.n	800f5ac <f_read+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 800f5ba:	6840      	ldr	r0, [r0, #4]
 800f5bc:	4418      	add	r0, r3
 800f5be:	e780      	b.n	800f4c2 <f_read+0xee>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5c0:	465d      	mov	r5, fp
 800f5c2:	2301      	movs	r3, #1
}
 800f5c4:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5c6:	7563      	strb	r3, [r4, #21]
}
 800f5c8:	b003      	add	sp, #12
 800f5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f5ce:	2507      	movs	r5, #7
 800f5d0:	e713      	b.n	800f3fa <f_read+0x26>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	69e1      	ldr	r1, [r4, #28]
 800f5d6:	9201      	str	r2, [sp, #4]
 800f5d8:	f7fe ff70 	bl	800e4bc <get_fat.isra.0>
 800f5dc:	9a01      	ldr	r2, [sp, #4]
 800f5de:	e770      	b.n	800f4c2 <f_read+0xee>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	9101      	str	r1, [sp, #4]
 800f5e4:	f7fe fc34 	bl	800de50 <disk_write>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d1e9      	bne.n	800f5c0 <f_read+0x1ec>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f5ec:	7d23      	ldrb	r3, [r4, #20]
 800f5ee:	9901      	ldr	r1, [sp, #4]
 800f5f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5f4:	7523      	strb	r3, [r4, #20]
 800f5f6:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800f5fa:	e7c0      	b.n	800f57e <f_read+0x1aa>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f5fc:	6a22      	ldr	r2, [r4, #32]
 800f5fe:	eba2 0209 	sub.w	r2, r2, r9
 800f602:	42aa      	cmp	r2, r5
 800f604:	f4bf af4d 	bcs.w	800f4a2 <f_read+0xce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f608:	eb06 2242 	add.w	r2, r6, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f60c:	f104 0131 	add.w	r1, r4, #49	@ 0x31
 800f610:	1a51      	subs	r1, r2, r1
 800f612:	2902      	cmp	r1, #2
 800f614:	d90a      	bls.n	800f62c <f_read+0x258>
 800f616:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f61a:	f502 7c00 	add.w	ip, r2, #512	@ 0x200
			*d++ = *s++;
 800f61e:	f851 3b04 	ldr.w	r3, [r1], #4
 800f622:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800f626:	4562      	cmp	r2, ip
 800f628:	d1f9      	bne.n	800f61e <f_read+0x24a>
 800f62a:	e73a      	b.n	800f4a2 <f_read+0xce>
 800f62c:	3a01      	subs	r2, #1
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f62e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f632:	f504 7c0c 	add.w	ip, r4, #560	@ 0x230
			*d++ = *s++;
 800f636:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800f63a:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f63c:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800f640:	d1f9      	bne.n	800f636 <f_read+0x262>
 800f642:	e72e      	b.n	800f4a2 <f_read+0xce>

0800f644 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f644:	b158      	cbz	r0, 800f65e <f_close+0x1a>
 800f646:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f648:	b570      	push	{r4, r5, r6, lr}
 800f64a:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f64c:	b12b      	cbz	r3, 800f65a <f_close+0x16>
 800f64e:	781a      	ldrb	r2, [r3, #0]
 800f650:	b11a      	cbz	r2, 800f65a <f_close+0x16>
 800f652:	8881      	ldrh	r1, [r0, #4]
 800f654:	88da      	ldrh	r2, [r3, #6]
 800f656:	4291      	cmp	r1, r2
 800f658:	d003      	beq.n	800f662 <f_close+0x1e>
{
 800f65a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800f65c:	bd70      	pop	{r4, r5, r6, pc}
{
 800f65e:	2009      	movs	r0, #9
}
 800f660:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f662:	7858      	ldrb	r0, [r3, #1]
 800f664:	f7fe fbc6 	bl	800ddf4 <disk_status>
 800f668:	07c1      	lsls	r1, r0, #31
 800f66a:	d4f6      	bmi.n	800f65a <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f66c:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f66e:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f670:	065a      	lsls	r2, r3, #25
 800f672:	d52e      	bpl.n	800f6d2 <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f674:	061b      	lsls	r3, r3, #24
 800f676:	d451      	bmi.n	800f71c <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800f678:	f7fe fad2 	bl	800dc20 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f67c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f67e:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800f680:	4628      	mov	r0, r5
 800f682:	f7fe fcf3 	bl	800e06c <move_window>
				if (res == FR_OK) {
 800f686:	2800      	cmp	r0, #0
 800f688:	d1e8      	bne.n	800f65c <f_close+0x18>
					dir = fp->dir_ptr;
 800f68a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f68c:	7ada      	ldrb	r2, [r3, #11]
 800f68e:	f042 0220 	orr.w	r2, r2, #32
 800f692:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f694:	68a2      	ldr	r2, [r4, #8]
 800f696:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f698:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800f69c:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800f69e:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800f6a0:	7809      	ldrb	r1, [r1, #0]
 800f6a2:	2903      	cmp	r1, #3
 800f6a4:	d103      	bne.n	800f6ae <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f6a6:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f6a8:	751a      	strb	r2, [r3, #20]
 800f6aa:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800f6ac:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6ae:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6b0:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f6b2:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f6b6:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800f6b8:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f6ba:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f6c0:	f7fe fc76 	bl	800dfb0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f6c4:	7d23      	ldrb	r3, [r4, #20]
 800f6c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6ca:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d1c5      	bne.n	800f65c <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6d0:	6825      	ldr	r5, [r4, #0]
 800f6d2:	2d00      	cmp	r5, #0
 800f6d4:	d0c1      	beq.n	800f65a <f_close+0x16>
 800f6d6:	782b      	ldrb	r3, [r5, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d0be      	beq.n	800f65a <f_close+0x16>
 800f6dc:	88a2      	ldrh	r2, [r4, #4]
 800f6de:	88eb      	ldrh	r3, [r5, #6]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d1ba      	bne.n	800f65a <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f6e4:	7868      	ldrb	r0, [r5, #1]
 800f6e6:	f7fe fb85 	bl	800ddf4 <disk_status>
 800f6ea:	f010 0001 	ands.w	r0, r0, #1
 800f6ee:	d1b4      	bne.n	800f65a <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f6f0:	6923      	ldr	r3, [r4, #16]
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d81e      	bhi.n	800f736 <f_close+0xf2>
		n = Files[i].ctr;
 800f6f8:	4912      	ldr	r1, [pc, #72]	@ (800f744 <f_close+0x100>)
 800f6fa:	011d      	lsls	r5, r3, #4
 800f6fc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f700:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f702:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800f706:	d01a      	beq.n	800f73e <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800f708:	b11a      	cbz	r2, 800f712 <f_close+0xce>
 800f70a:	3a01      	subs	r2, #1
 800f70c:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800f70e:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f710:	b90a      	cbnz	r2, 800f716 <f_close+0xd2>
 800f712:	2300      	movs	r3, #0
 800f714:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800f716:	2300      	movs	r3, #0
 800f718:	6023      	str	r3, [r4, #0]
}
 800f71a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f71c:	2301      	movs	r3, #1
 800f71e:	6a22      	ldr	r2, [r4, #32]
 800f720:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f724:	7868      	ldrb	r0, [r5, #1]
 800f726:	f7fe fb93 	bl	800de50 <disk_write>
 800f72a:	b930      	cbnz	r0, 800f73a <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f72c:	7d23      	ldrb	r3, [r4, #20]
 800f72e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f732:	7523      	strb	r3, [r4, #20]
 800f734:	e7a0      	b.n	800f678 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f736:	2002      	movs	r0, #2
}
 800f738:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f73a:	2001      	movs	r0, #1
}
 800f73c:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800f73e:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f740:	e7e7      	b.n	800f712 <f_close+0xce>
 800f742:	bf00      	nop
 800f744:	240ac8b8 	.word	0x240ac8b8

0800f748 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f74c:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f74e:	b148      	cbz	r0, 800f764 <f_lseek+0x1c>
 800f750:	6803      	ldr	r3, [r0, #0]
 800f752:	4604      	mov	r4, r0
 800f754:	b133      	cbz	r3, 800f764 <f_lseek+0x1c>
 800f756:	781a      	ldrb	r2, [r3, #0]
 800f758:	b122      	cbz	r2, 800f764 <f_lseek+0x1c>
 800f75a:	460e      	mov	r6, r1
 800f75c:	88da      	ldrh	r2, [r3, #6]
 800f75e:	8881      	ldrh	r1, [r0, #4]
 800f760:	4291      	cmp	r1, r2
 800f762:	d004      	beq.n	800f76e <f_lseek+0x26>
	FRESULT res = FR_INVALID_OBJECT;
 800f764:	2509      	movs	r5, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800f766:	4628      	mov	r0, r5
 800f768:	b005      	add	sp, #20
 800f76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f76e:	7858      	ldrb	r0, [r3, #1]
 800f770:	f7fe fb40 	bl	800ddf4 <disk_status>
 800f774:	07c3      	lsls	r3, r0, #31
 800f776:	d4f5      	bmi.n	800f764 <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f778:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f77a:	2d00      	cmp	r5, #0
 800f77c:	d1f3      	bne.n	800f766 <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 800f77e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f780:	f8d4 9000 	ldr.w	r9, [r4]
	if (fp->cltbl) {	/* Fast seek */
 800f784:	b1f8      	cbz	r0, 800f7c6 <f_lseek+0x7e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f786:	1c77      	adds	r7, r6, #1
 800f788:	d05d      	beq.n	800f846 <f_lseek+0xfe>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f78a:	68e3      	ldr	r3, [r4, #12]
 800f78c:	429e      	cmp	r6, r3
 800f78e:	bf28      	it	cs
 800f790:	461e      	movcs	r6, r3
			fp->fptr = ofs;				/* Set file pointer */
 800f792:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800f794:	2e00      	cmp	r6, #0
 800f796:	d0e6      	beq.n	800f766 <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f798:	f106 3cff 	add.w	ip, r6, #4294967295
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f79c:	f8b9 700a 	ldrh.w	r7, [r9, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f7a0:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f7a2:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f7a4:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
 800f7a8:	fbbc f1f7 	udiv	r1, ip, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f7ac:	b92b      	cbnz	r3, 800f7ba <f_lseek+0x72>
 800f7ae:	e05f      	b.n	800f870 <f_lseek+0x128>
		cl -= ncl; tbl++;		/* Next fragment */
 800f7b0:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f7b2:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d05a      	beq.n	800f870 <f_lseek+0x128>
		if (cl < ncl) break;	/* In this fragment? */
 800f7ba:	428b      	cmp	r3, r1
 800f7bc:	d9f8      	bls.n	800f7b0 <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 800f7be:	6853      	ldr	r3, [r2, #4]
 800f7c0:	440b      	add	r3, r1
	clst -= 2;
 800f7c2:	1e99      	subs	r1, r3, #2
	return cl + *tbl;	/* Return the cluster number */
 800f7c4:	e056      	b.n	800f874 <f_lseek+0x12c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f7c6:	68e2      	ldr	r2, [r4, #12]
		ifptr = fp->fptr;
 800f7c8:	69a3      	ldr	r3, [r4, #24]
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f7ca:	42b2      	cmp	r2, r6
 800f7cc:	d204      	bcs.n	800f7d8 <f_lseek+0x90>
 800f7ce:	7d21      	ldrb	r1, [r4, #20]
 800f7d0:	0788      	lsls	r0, r1, #30
 800f7d2:	f100 809b 	bmi.w	800f90c <f_lseek+0x1c4>
 800f7d6:	4616      	mov	r6, r2
		fp->fptr = nsect = 0;
 800f7d8:	2200      	movs	r2, #0
 800f7da:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800f7dc:	2e00      	cmp	r6, #0
 800f7de:	d0c2      	beq.n	800f766 <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f7e0:	f8b9 800a 	ldrh.w	r8, [r9, #10]
 800f7e4:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d16e      	bne.n	800f8ca <f_lseek+0x182>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f7ec:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f7ee:	2f00      	cmp	r7, #0
 800f7f0:	f000 811e 	beq.w	800fa30 <f_lseek+0x2e8>
				fp->clust = clst;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	61e7      	str	r7, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f7f8:	45b0      	cmp	r8, r6
 800f7fa:	f080 8155 	bcs.w	800faa8 <f_lseek+0x360>
 800f7fe:	4639      	mov	r1, r7
 800f800:	e014      	b.n	800f82c <f_lseek+0xe4>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f802:	f7fe feb1 	bl	800e568 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f806:	4601      	mov	r1, r0
 800f808:	2800      	cmp	r0, #0
 800f80a:	f000 8148 	beq.w	800fa9e <f_lseek+0x356>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f80e:	1c4b      	adds	r3, r1, #1
 800f810:	f000 80c7 	beq.w	800f9a2 <f_lseek+0x25a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f814:	2901      	cmp	r1, #1
 800f816:	d91d      	bls.n	800f854 <f_lseek+0x10c>
 800f818:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f81c:	428b      	cmp	r3, r1
 800f81e:	d919      	bls.n	800f854 <f_lseek+0x10c>
				fp->fptr += ofs;
 800f820:	69a2      	ldr	r2, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800f822:	45b0      	cmp	r8, r6
					fp->clust = clst;
 800f824:	61e1      	str	r1, [r4, #28]
				fp->fptr += ofs;
 800f826:	4613      	mov	r3, r2
				while (ofs > bcs) {						/* Cluster following loop */
 800f828:	f080 8120 	bcs.w	800fa6c <f_lseek+0x324>
					ofs -= bcs; fp->fptr += bcs;
 800f82c:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f82e:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800f830:	eba6 0608 	sub.w	r6, r6, r8
 800f834:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f836:	7d23      	ldrb	r3, [r4, #20]
 800f838:	079a      	lsls	r2, r3, #30
 800f83a:	d4e2      	bmi.n	800f802 <f_lseek+0xba>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f83c:	6820      	ldr	r0, [r4, #0]
 800f83e:	f7fe fe3d 	bl	800e4bc <get_fat.isra.0>
 800f842:	4601      	mov	r1, r0
 800f844:	e7e3      	b.n	800f80e <f_lseek+0xc6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f846:	4680      	mov	r8, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f848:	68a2      	ldr	r2, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f84a:	f858 1b04 	ldr.w	r1, [r8], #4
			if (cl) {
 800f84e:	b12a      	cbz	r2, 800f85c <f_lseek+0x114>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f850:	2a01      	cmp	r2, #1
 800f852:	d15f      	bne.n	800f914 <f_lseek+0x1cc>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f854:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f856:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f858:	7563      	strb	r3, [r4, #21]
 800f85a:	e784      	b.n	800f766 <f_lseek+0x1e>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f85c:	f04f 0a02 	mov.w	sl, #2
			if (ulen <= tlen) {
 800f860:	458a      	cmp	sl, r1
			*fp->cltbl = ulen;	/* Number of items used */
 800f862:	f8c0 a000 	str.w	sl, [r0]
			if (ulen <= tlen) {
 800f866:	d853      	bhi.n	800f910 <f_lseek+0x1c8>
				*tbl = 0;		/* Terminate table */
 800f868:	2300      	movs	r3, #0
 800f86a:	f8c8 3000 	str.w	r3, [r8]
 800f86e:	e77a      	b.n	800f766 <f_lseek+0x1e>
 800f870:	f06f 0101 	mvn.w	r1, #1
				fp->clust = clmt_clust(fp, ofs - 1);
 800f874:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f876:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f87a:	3b02      	subs	r3, #2
 800f87c:	428b      	cmp	r3, r1
 800f87e:	d9e9      	bls.n	800f854 <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800f880:	f8d9 2028 	ldr.w	r2, [r9, #40]	@ 0x28
 800f884:	fb01 2207 	mla	r2, r1, r7, r2
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f888:	2a00      	cmp	r2, #0
 800f88a:	d0e3      	beq.n	800f854 <f_lseek+0x10c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f88c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f890:	2e00      	cmp	r6, #0
 800f892:	f43f af68 	beq.w	800f766 <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f896:	3f01      	subs	r7, #1
 800f898:	ea07 070c 	and.w	r7, r7, ip
 800f89c:	4417      	add	r7, r2
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f89e:	6a22      	ldr	r2, [r4, #32]
 800f8a0:	42ba      	cmp	r2, r7
 800f8a2:	f43f af60 	beq.w	800f766 <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f8a6:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8aa:	f104 0630 	add.w	r6, r4, #48	@ 0x30
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8ae:	f899 0001 	ldrb.w	r0, [r9, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f2c0 80af 	blt.w	800fa16 <f_lseek+0x2ce>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	463a      	mov	r2, r7
 800f8be:	f7fe fab9 	bl	800de34 <disk_read>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d16d      	bne.n	800f9a2 <f_lseek+0x25a>
			fp->sect = nsect;
 800f8c6:	6227      	str	r7, [r4, #32]
 800f8c8:	e74d      	b.n	800f766 <f_lseek+0x1e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f8ca:	3b01      	subs	r3, #1
 800f8cc:	1e72      	subs	r2, r6, #1
 800f8ce:	fbb3 f1f8 	udiv	r1, r3, r8
 800f8d2:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 800f8d6:	428a      	cmp	r2, r1
 800f8d8:	d388      	bcc.n	800f7ec <f_lseek+0xa4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f8da:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 800f8de:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f8e0:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800f8e2:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f8e4:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 800f8e6:	2f00      	cmp	r7, #0
 800f8e8:	d186      	bne.n	800f7f8 <f_lseek+0xb0>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f8ea:	68e2      	ldr	r2, [r4, #12]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d204      	bcs.n	800f8fa <f_lseek+0x1b2>
			fp->flag |= FA_MODIFIED;
 800f8f0:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800f8f2:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800f8f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f8f8:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f43f af31 	beq.w	800f766 <f_lseek+0x1e>
 800f904:	6a22      	ldr	r2, [r4, #32]
 800f906:	42ba      	cmp	r2, r7
 800f908:	d1cd      	bne.n	800f8a6 <f_lseek+0x15e>
 800f90a:	e72c      	b.n	800f766 <f_lseek+0x1e>
		fp->fptr = nsect = 0;
 800f90c:	61a5      	str	r5, [r4, #24]
		if (ofs) {
 800f90e:	e767      	b.n	800f7e0 <f_lseek+0x98>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f910:	2511      	movs	r5, #17
 800f912:	e728      	b.n	800f766 <f_lseek+0x1e>
 800f914:	464f      	mov	r7, r9
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f916:	f04f 0a02 	mov.w	sl, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f91a:	46c3      	mov	fp, r8
 800f91c:	4616      	mov	r6, r2
 800f91e:	9102      	str	r1, [sp, #8]
 800f920:	9503      	str	r5, [sp, #12]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f922:	4635      	mov	r5, r6
						pcl = cl; ncl++;
 800f924:	f04f 0801 	mov.w	r8, #1
 800f928:	9600      	str	r6, [sp, #0]
 800f92a:	e033      	b.n	800f994 <f_lseek+0x24c>
		switch (fs->fs_type) {
 800f92c:	783b      	ldrb	r3, [r7, #0]
 800f92e:	2b02      	cmp	r3, #2
 800f930:	d04e      	beq.n	800f9d0 <f_lseek+0x288>
 800f932:	2b03      	cmp	r3, #3
 800f934:	d039      	beq.n	800f9aa <f_lseek+0x262>
 800f936:	2b01      	cmp	r3, #1
 800f938:	d18c      	bne.n	800f854 <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f93a:	6a39      	ldr	r1, [r7, #32]
			bc = (UINT)clst; bc += bc / 2;
 800f93c:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f940:	4638      	mov	r0, r7
 800f942:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800f946:	f7fe fb91 	bl	800e06c <move_window>
 800f94a:	bb50      	cbnz	r0, 800f9a2 <f_lseek+0x25a>
			wc = fs->win[bc++ % SS(fs)];
 800f94c:	f3c6 0208 	ubfx	r2, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f950:	6a39      	ldr	r1, [r7, #32]
			wc = fs->win[bc++ % SS(fs)];
 800f952:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f954:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800f956:	443a      	add	r2, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f958:	eb01 2156 	add.w	r1, r1, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800f95c:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800f960:	9301      	str	r3, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f962:	f7fe fb83 	bl	800e06c <move_window>
 800f966:	b9e0      	cbnz	r0, 800f9a2 <f_lseek+0x25a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f968:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800f96c:	9a01      	ldr	r2, [sp, #4]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f96e:	07ee      	lsls	r6, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800f970:	443b      	add	r3, r7
 800f972:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f976:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f97a:	d570      	bpl.n	800fa5e <f_lseek+0x316>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f97c:	2a1f      	cmp	r2, #31
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f97e:	ea4f 1312 	mov.w	r3, r2, lsr #4
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f982:	f67f af67 	bls.w	800f854 <f_lseek+0x10c>
					} while (cl == pcl + 1);
 800f986:	3501      	adds	r5, #1
 800f988:	429d      	cmp	r5, r3
 800f98a:	d131      	bne.n	800f9f0 <f_lseek+0x2a8>
						pcl = cl; ncl++;
 800f98c:	f108 0801 	add.w	r8, r8, #1
 800f990:	461d      	mov	r5, r3
 800f992:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	42ab      	cmp	r3, r5
 800f998:	d8c8      	bhi.n	800f92c <f_lseek+0x1e4>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f99a:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f99c:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f99e:	7563      	strb	r3, [r4, #21]
 800f9a0:	e6e1      	b.n	800f766 <f_lseek+0x1e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	461d      	mov	r5, r3
 800f9a6:	7563      	strb	r3, [r4, #21]
 800f9a8:	e6dd      	b.n	800f766 <f_lseek+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9aa:	6a39      	ldr	r1, [r7, #32]
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800f9b2:	f7fe fb5b 	bl	800e06c <move_window>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d1f3      	bne.n	800f9a2 <f_lseek+0x25a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f9ba:	00ab      	lsls	r3, r5, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f9bc:	493e      	ldr	r1, [pc, #248]	@ (800fab8 <f_lseek+0x370>)
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f9be:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800f9c2:	443b      	add	r3, r7
 800f9c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f9c6:	420a      	tst	r2, r1
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f9c8:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f9cc:	d1db      	bne.n	800f986 <f_lseek+0x23e>
 800f9ce:	e741      	b.n	800f854 <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f9d0:	6a39      	ldr	r1, [r7, #32]
 800f9d2:	4638      	mov	r0, r7
 800f9d4:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800f9d8:	f7fe fb48 	bl	800e06c <move_window>
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d1e0      	bne.n	800f9a2 <f_lseek+0x25a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f9e0:	006b      	lsls	r3, r5, #1
 800f9e2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f9e6:	443b      	add	r3, r7
 800f9e8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d8cb      	bhi.n	800f986 <f_lseek+0x23e>
 800f9ee:	e731      	b.n	800f854 <f_lseek+0x10c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f9f0:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f9f4:	9a02      	ldr	r2, [sp, #8]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f9f6:	9e00      	ldr	r6, [sp, #0]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f9f8:	4552      	cmp	r2, sl
 800f9fa:	d327      	bcc.n	800fa4c <f_lseek+0x304>
						*tbl++ = ncl; *tbl++ = tcl;
 800f9fc:	465a      	mov	r2, fp
 800f9fe:	f842 8b08 	str.w	r8, [r2], #8
 800fa02:	f8cb 6004 	str.w	r6, [fp, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fa06:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800fa0a:	4299      	cmp	r1, r3
 800fa0c:	d950      	bls.n	800fab0 <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 800fa0e:	4693      	mov	fp, r2
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fa10:	461e      	mov	r6, r3
 800fa12:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa14:	e785      	b.n	800f922 <f_lseek+0x1da>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa16:	2301      	movs	r3, #1
 800fa18:	4631      	mov	r1, r6
 800fa1a:	f7fe fa19 	bl	800de50 <disk_write>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d1bf      	bne.n	800f9a2 <f_lseek+0x25a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa22:	7d23      	ldrb	r3, [r4, #20]
 800fa24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa28:	7523      	strb	r3, [r4, #20]
 800fa2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa2e:	e743      	b.n	800f8b8 <f_lseek+0x170>
					clst = create_chain(&fp->obj, 0);
 800fa30:	4639      	mov	r1, r7
 800fa32:	4620      	mov	r0, r4
 800fa34:	f7fe fd98 	bl	800e568 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa38:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800fa3a:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa3c:	f43f af0a 	beq.w	800f854 <f_lseek+0x10c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa40:	1c41      	adds	r1, r0, #1
 800fa42:	d0ae      	beq.n	800f9a2 <f_lseek+0x25a>
				fp->fptr += ofs;
 800fa44:	69a3      	ldr	r3, [r4, #24]
					fp->obj.sclust = clst;
 800fa46:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
 800fa48:	61e0      	str	r0, [r4, #28]
 800fa4a:	e74c      	b.n	800f8e6 <f_lseek+0x19e>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fa4c:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d8dd      	bhi.n	800fa10 <f_lseek+0x2c8>
 800fa54:	46d8      	mov	r8, fp
 800fa56:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
			*fp->cltbl = ulen;	/* Number of items used */
 800fa5a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fa5c:	e700      	b.n	800f860 <f_lseek+0x118>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa5e:	f640 71fe 	movw	r1, #4094	@ 0xffe
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fa62:	f3c2 030b 	ubfx	r3, r2, #0, #12
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa66:	420a      	tst	r2, r1
 800fa68:	d18d      	bne.n	800f986 <f_lseek+0x23e>
 800fa6a:	e6f3      	b.n	800f854 <f_lseek+0x10c>
				if (ofs % SS(fs)) {
 800fa6c:	460f      	mov	r7, r1
 800fa6e:	f3c6 0108 	ubfx	r1, r6, #0, #9
				fp->fptr += ofs;
 800fa72:	18b3      	adds	r3, r6, r2
 800fa74:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800fa76:	b1a9      	cbz	r1, 800faa4 <f_lseek+0x35c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa78:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 800fa7c:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa7e:	3a02      	subs	r2, #2
 800fa80:	4291      	cmp	r1, r2
 800fa82:	f4bf aee7 	bcs.w	800f854 <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800fa86:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800fa8a:	f8d9 7028 	ldr.w	r7, [r9, #40]	@ 0x28
 800fa8e:	fb01 7702 	mla	r7, r1, r2, r7
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fa92:	2f00      	cmp	r7, #0
 800fa94:	f43f aede 	beq.w	800f854 <f_lseek+0x10c>
					nsect += (DWORD)(ofs / SS(fs));
 800fa98:	eb07 2756 	add.w	r7, r7, r6, lsr #9
 800fa9c:	e725      	b.n	800f8ea <f_lseek+0x1a2>
 800fa9e:	4607      	mov	r7, r0
				fp->fptr += ofs;
 800faa0:	69a3      	ldr	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800faa2:	e722      	b.n	800f8ea <f_lseek+0x1a2>
		fp->fptr = nsect = 0;
 800faa4:	460f      	mov	r7, r1
 800faa6:	e720      	b.n	800f8ea <f_lseek+0x1a2>
				if (ofs % SS(fs)) {
 800faa8:	f3c6 0108 	ubfx	r1, r6, #0, #9
 800faac:	69a2      	ldr	r2, [r4, #24]
 800faae:	e7e0      	b.n	800fa72 <f_lseek+0x32a>
						*tbl++ = ncl; *tbl++ = tcl;
 800fab0:	9902      	ldr	r1, [sp, #8]
 800fab2:	4690      	mov	r8, r2
 800fab4:	9d03      	ldr	r5, [sp, #12]
 800fab6:	e7d0      	b.n	800fa5a <f_lseek+0x312>
 800fab8:	0ffffffe 	.word	0x0ffffffe

0800fabc <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800fabc:	4b10      	ldr	r3, [pc, #64]	@ (800fb00 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fabe:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800fac0:	7a5c      	ldrb	r4, [r3, #9]
 800fac2:	b9cc      	cbnz	r4, 800faf8 <FATFS_LinkDriver+0x3c>
 800fac4:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800fac6:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800faca:	7a5c      	ldrb	r4, [r3, #9]
 800facc:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800face:	7a5c      	ldrb	r4, [r3, #9]
 800fad0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fad4:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800fad6:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800fad8:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800fada:	441c      	add	r4, r3
 800fadc:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800fade:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800fae0:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800fae2:	b2e4      	uxtb	r4, r4
 800fae4:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800fae6:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 800fae8:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 800faea:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800faec:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 800faee:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800faf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800faf4:	708b      	strb	r3, [r1, #2]
}
 800faf6:	4770      	bx	lr
  uint8_t ret = 1;
 800faf8:	2001      	movs	r0, #1
}
 800fafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fafe:	4770      	bx	lr
 800fb00:	240ac8e0 	.word	0x240ac8e0

0800fb04 <sniprintf>:
 800fb04:	b40c      	push	{r2, r3}
 800fb06:	b530      	push	{r4, r5, lr}
 800fb08:	4b17      	ldr	r3, [pc, #92]	@ (800fb68 <sniprintf+0x64>)
 800fb0a:	1e0c      	subs	r4, r1, #0
 800fb0c:	681d      	ldr	r5, [r3, #0]
 800fb0e:	b09d      	sub	sp, #116	@ 0x74
 800fb10:	da08      	bge.n	800fb24 <sniprintf+0x20>
 800fb12:	238b      	movs	r3, #139	@ 0x8b
 800fb14:	602b      	str	r3, [r5, #0]
 800fb16:	f04f 30ff 	mov.w	r0, #4294967295
 800fb1a:	b01d      	add	sp, #116	@ 0x74
 800fb1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb20:	b002      	add	sp, #8
 800fb22:	4770      	bx	lr
 800fb24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fb28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb2c:	bf14      	ite	ne
 800fb2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb32:	4623      	moveq	r3, r4
 800fb34:	9304      	str	r3, [sp, #16]
 800fb36:	9307      	str	r3, [sp, #28]
 800fb38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb3c:	9002      	str	r0, [sp, #8]
 800fb3e:	9006      	str	r0, [sp, #24]
 800fb40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fb46:	ab21      	add	r3, sp, #132	@ 0x84
 800fb48:	a902      	add	r1, sp, #8
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	9301      	str	r3, [sp, #4]
 800fb4e:	f000 f995 	bl	800fe7c <_svfiprintf_r>
 800fb52:	1c43      	adds	r3, r0, #1
 800fb54:	bfbc      	itt	lt
 800fb56:	238b      	movlt	r3, #139	@ 0x8b
 800fb58:	602b      	strlt	r3, [r5, #0]
 800fb5a:	2c00      	cmp	r4, #0
 800fb5c:	d0dd      	beq.n	800fb1a <sniprintf+0x16>
 800fb5e:	9b02      	ldr	r3, [sp, #8]
 800fb60:	2200      	movs	r2, #0
 800fb62:	701a      	strb	r2, [r3, #0]
 800fb64:	e7d9      	b.n	800fb1a <sniprintf+0x16>
 800fb66:	bf00      	nop
 800fb68:	2400001c 	.word	0x2400001c

0800fb6c <memset>:
 800fb6c:	4402      	add	r2, r0
 800fb6e:	4603      	mov	r3, r0
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d100      	bne.n	800fb76 <memset+0xa>
 800fb74:	4770      	bx	lr
 800fb76:	f803 1b01 	strb.w	r1, [r3], #1
 800fb7a:	e7f9      	b.n	800fb70 <memset+0x4>

0800fb7c <__errno>:
 800fb7c:	4b01      	ldr	r3, [pc, #4]	@ (800fb84 <__errno+0x8>)
 800fb7e:	6818      	ldr	r0, [r3, #0]
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	2400001c 	.word	0x2400001c

0800fb88 <__libc_init_array>:
 800fb88:	b570      	push	{r4, r5, r6, lr}
 800fb8a:	4d0d      	ldr	r5, [pc, #52]	@ (800fbc0 <__libc_init_array+0x38>)
 800fb8c:	4c0d      	ldr	r4, [pc, #52]	@ (800fbc4 <__libc_init_array+0x3c>)
 800fb8e:	1b64      	subs	r4, r4, r5
 800fb90:	10a4      	asrs	r4, r4, #2
 800fb92:	2600      	movs	r6, #0
 800fb94:	42a6      	cmp	r6, r4
 800fb96:	d109      	bne.n	800fbac <__libc_init_array+0x24>
 800fb98:	4d0b      	ldr	r5, [pc, #44]	@ (800fbc8 <__libc_init_array+0x40>)
 800fb9a:	4c0c      	ldr	r4, [pc, #48]	@ (800fbcc <__libc_init_array+0x44>)
 800fb9c:	f000 fc66 	bl	801046c <_init>
 800fba0:	1b64      	subs	r4, r4, r5
 800fba2:	10a4      	asrs	r4, r4, #2
 800fba4:	2600      	movs	r6, #0
 800fba6:	42a6      	cmp	r6, r4
 800fba8:	d105      	bne.n	800fbb6 <__libc_init_array+0x2e>
 800fbaa:	bd70      	pop	{r4, r5, r6, pc}
 800fbac:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbb0:	4798      	blx	r3
 800fbb2:	3601      	adds	r6, #1
 800fbb4:	e7ee      	b.n	800fb94 <__libc_init_array+0xc>
 800fbb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbba:	4798      	blx	r3
 800fbbc:	3601      	adds	r6, #1
 800fbbe:	e7f2      	b.n	800fba6 <__libc_init_array+0x1e>
 800fbc0:	08010818 	.word	0x08010818
 800fbc4:	08010818 	.word	0x08010818
 800fbc8:	08010818 	.word	0x08010818
 800fbcc:	0801081c 	.word	0x0801081c

0800fbd0 <__retarget_lock_acquire_recursive>:
 800fbd0:	4770      	bx	lr

0800fbd2 <__retarget_lock_release_recursive>:
 800fbd2:	4770      	bx	lr

0800fbd4 <_free_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	2900      	cmp	r1, #0
 800fbda:	d041      	beq.n	800fc60 <_free_r+0x8c>
 800fbdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbe0:	1f0c      	subs	r4, r1, #4
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	bfb8      	it	lt
 800fbe6:	18e4      	addlt	r4, r4, r3
 800fbe8:	f000 f8e0 	bl	800fdac <__malloc_lock>
 800fbec:	4a1d      	ldr	r2, [pc, #116]	@ (800fc64 <_free_r+0x90>)
 800fbee:	6813      	ldr	r3, [r2, #0]
 800fbf0:	b933      	cbnz	r3, 800fc00 <_free_r+0x2c>
 800fbf2:	6063      	str	r3, [r4, #4]
 800fbf4:	6014      	str	r4, [r2, #0]
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbfc:	f000 b8dc 	b.w	800fdb8 <__malloc_unlock>
 800fc00:	42a3      	cmp	r3, r4
 800fc02:	d908      	bls.n	800fc16 <_free_r+0x42>
 800fc04:	6820      	ldr	r0, [r4, #0]
 800fc06:	1821      	adds	r1, r4, r0
 800fc08:	428b      	cmp	r3, r1
 800fc0a:	bf01      	itttt	eq
 800fc0c:	6819      	ldreq	r1, [r3, #0]
 800fc0e:	685b      	ldreq	r3, [r3, #4]
 800fc10:	1809      	addeq	r1, r1, r0
 800fc12:	6021      	streq	r1, [r4, #0]
 800fc14:	e7ed      	b.n	800fbf2 <_free_r+0x1e>
 800fc16:	461a      	mov	r2, r3
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	b10b      	cbz	r3, 800fc20 <_free_r+0x4c>
 800fc1c:	42a3      	cmp	r3, r4
 800fc1e:	d9fa      	bls.n	800fc16 <_free_r+0x42>
 800fc20:	6811      	ldr	r1, [r2, #0]
 800fc22:	1850      	adds	r0, r2, r1
 800fc24:	42a0      	cmp	r0, r4
 800fc26:	d10b      	bne.n	800fc40 <_free_r+0x6c>
 800fc28:	6820      	ldr	r0, [r4, #0]
 800fc2a:	4401      	add	r1, r0
 800fc2c:	1850      	adds	r0, r2, r1
 800fc2e:	4283      	cmp	r3, r0
 800fc30:	6011      	str	r1, [r2, #0]
 800fc32:	d1e0      	bne.n	800fbf6 <_free_r+0x22>
 800fc34:	6818      	ldr	r0, [r3, #0]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	6053      	str	r3, [r2, #4]
 800fc3a:	4408      	add	r0, r1
 800fc3c:	6010      	str	r0, [r2, #0]
 800fc3e:	e7da      	b.n	800fbf6 <_free_r+0x22>
 800fc40:	d902      	bls.n	800fc48 <_free_r+0x74>
 800fc42:	230c      	movs	r3, #12
 800fc44:	602b      	str	r3, [r5, #0]
 800fc46:	e7d6      	b.n	800fbf6 <_free_r+0x22>
 800fc48:	6820      	ldr	r0, [r4, #0]
 800fc4a:	1821      	adds	r1, r4, r0
 800fc4c:	428b      	cmp	r3, r1
 800fc4e:	bf04      	itt	eq
 800fc50:	6819      	ldreq	r1, [r3, #0]
 800fc52:	685b      	ldreq	r3, [r3, #4]
 800fc54:	6063      	str	r3, [r4, #4]
 800fc56:	bf04      	itt	eq
 800fc58:	1809      	addeq	r1, r1, r0
 800fc5a:	6021      	streq	r1, [r4, #0]
 800fc5c:	6054      	str	r4, [r2, #4]
 800fc5e:	e7ca      	b.n	800fbf6 <_free_r+0x22>
 800fc60:	bd38      	pop	{r3, r4, r5, pc}
 800fc62:	bf00      	nop
 800fc64:	240aca30 	.word	0x240aca30

0800fc68 <sbrk_aligned>:
 800fc68:	b570      	push	{r4, r5, r6, lr}
 800fc6a:	4e0f      	ldr	r6, [pc, #60]	@ (800fca8 <sbrk_aligned+0x40>)
 800fc6c:	460c      	mov	r4, r1
 800fc6e:	6831      	ldr	r1, [r6, #0]
 800fc70:	4605      	mov	r5, r0
 800fc72:	b911      	cbnz	r1, 800fc7a <sbrk_aligned+0x12>
 800fc74:	f000 fba6 	bl	80103c4 <_sbrk_r>
 800fc78:	6030      	str	r0, [r6, #0]
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	f000 fba1 	bl	80103c4 <_sbrk_r>
 800fc82:	1c43      	adds	r3, r0, #1
 800fc84:	d103      	bne.n	800fc8e <sbrk_aligned+0x26>
 800fc86:	f04f 34ff 	mov.w	r4, #4294967295
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	bd70      	pop	{r4, r5, r6, pc}
 800fc8e:	1cc4      	adds	r4, r0, #3
 800fc90:	f024 0403 	bic.w	r4, r4, #3
 800fc94:	42a0      	cmp	r0, r4
 800fc96:	d0f8      	beq.n	800fc8a <sbrk_aligned+0x22>
 800fc98:	1a21      	subs	r1, r4, r0
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	f000 fb92 	bl	80103c4 <_sbrk_r>
 800fca0:	3001      	adds	r0, #1
 800fca2:	d1f2      	bne.n	800fc8a <sbrk_aligned+0x22>
 800fca4:	e7ef      	b.n	800fc86 <sbrk_aligned+0x1e>
 800fca6:	bf00      	nop
 800fca8:	240aca2c 	.word	0x240aca2c

0800fcac <_malloc_r>:
 800fcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb0:	1ccd      	adds	r5, r1, #3
 800fcb2:	f025 0503 	bic.w	r5, r5, #3
 800fcb6:	3508      	adds	r5, #8
 800fcb8:	2d0c      	cmp	r5, #12
 800fcba:	bf38      	it	cc
 800fcbc:	250c      	movcc	r5, #12
 800fcbe:	2d00      	cmp	r5, #0
 800fcc0:	4606      	mov	r6, r0
 800fcc2:	db01      	blt.n	800fcc8 <_malloc_r+0x1c>
 800fcc4:	42a9      	cmp	r1, r5
 800fcc6:	d904      	bls.n	800fcd2 <_malloc_r+0x26>
 800fcc8:	230c      	movs	r3, #12
 800fcca:	6033      	str	r3, [r6, #0]
 800fccc:	2000      	movs	r0, #0
 800fcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fda8 <_malloc_r+0xfc>
 800fcd6:	f000 f869 	bl	800fdac <__malloc_lock>
 800fcda:	f8d8 3000 	ldr.w	r3, [r8]
 800fcde:	461c      	mov	r4, r3
 800fce0:	bb44      	cbnz	r4, 800fd34 <_malloc_r+0x88>
 800fce2:	4629      	mov	r1, r5
 800fce4:	4630      	mov	r0, r6
 800fce6:	f7ff ffbf 	bl	800fc68 <sbrk_aligned>
 800fcea:	1c43      	adds	r3, r0, #1
 800fcec:	4604      	mov	r4, r0
 800fcee:	d158      	bne.n	800fda2 <_malloc_r+0xf6>
 800fcf0:	f8d8 4000 	ldr.w	r4, [r8]
 800fcf4:	4627      	mov	r7, r4
 800fcf6:	2f00      	cmp	r7, #0
 800fcf8:	d143      	bne.n	800fd82 <_malloc_r+0xd6>
 800fcfa:	2c00      	cmp	r4, #0
 800fcfc:	d04b      	beq.n	800fd96 <_malloc_r+0xea>
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	4639      	mov	r1, r7
 800fd02:	4630      	mov	r0, r6
 800fd04:	eb04 0903 	add.w	r9, r4, r3
 800fd08:	f000 fb5c 	bl	80103c4 <_sbrk_r>
 800fd0c:	4581      	cmp	r9, r0
 800fd0e:	d142      	bne.n	800fd96 <_malloc_r+0xea>
 800fd10:	6821      	ldr	r1, [r4, #0]
 800fd12:	1a6d      	subs	r5, r5, r1
 800fd14:	4629      	mov	r1, r5
 800fd16:	4630      	mov	r0, r6
 800fd18:	f7ff ffa6 	bl	800fc68 <sbrk_aligned>
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	d03a      	beq.n	800fd96 <_malloc_r+0xea>
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	442b      	add	r3, r5
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	f8d8 3000 	ldr.w	r3, [r8]
 800fd2a:	685a      	ldr	r2, [r3, #4]
 800fd2c:	bb62      	cbnz	r2, 800fd88 <_malloc_r+0xdc>
 800fd2e:	f8c8 7000 	str.w	r7, [r8]
 800fd32:	e00f      	b.n	800fd54 <_malloc_r+0xa8>
 800fd34:	6822      	ldr	r2, [r4, #0]
 800fd36:	1b52      	subs	r2, r2, r5
 800fd38:	d420      	bmi.n	800fd7c <_malloc_r+0xd0>
 800fd3a:	2a0b      	cmp	r2, #11
 800fd3c:	d917      	bls.n	800fd6e <_malloc_r+0xc2>
 800fd3e:	1961      	adds	r1, r4, r5
 800fd40:	42a3      	cmp	r3, r4
 800fd42:	6025      	str	r5, [r4, #0]
 800fd44:	bf18      	it	ne
 800fd46:	6059      	strne	r1, [r3, #4]
 800fd48:	6863      	ldr	r3, [r4, #4]
 800fd4a:	bf08      	it	eq
 800fd4c:	f8c8 1000 	streq.w	r1, [r8]
 800fd50:	5162      	str	r2, [r4, r5]
 800fd52:	604b      	str	r3, [r1, #4]
 800fd54:	4630      	mov	r0, r6
 800fd56:	f000 f82f 	bl	800fdb8 <__malloc_unlock>
 800fd5a:	f104 000b 	add.w	r0, r4, #11
 800fd5e:	1d23      	adds	r3, r4, #4
 800fd60:	f020 0007 	bic.w	r0, r0, #7
 800fd64:	1ac2      	subs	r2, r0, r3
 800fd66:	bf1c      	itt	ne
 800fd68:	1a1b      	subne	r3, r3, r0
 800fd6a:	50a3      	strne	r3, [r4, r2]
 800fd6c:	e7af      	b.n	800fcce <_malloc_r+0x22>
 800fd6e:	6862      	ldr	r2, [r4, #4]
 800fd70:	42a3      	cmp	r3, r4
 800fd72:	bf0c      	ite	eq
 800fd74:	f8c8 2000 	streq.w	r2, [r8]
 800fd78:	605a      	strne	r2, [r3, #4]
 800fd7a:	e7eb      	b.n	800fd54 <_malloc_r+0xa8>
 800fd7c:	4623      	mov	r3, r4
 800fd7e:	6864      	ldr	r4, [r4, #4]
 800fd80:	e7ae      	b.n	800fce0 <_malloc_r+0x34>
 800fd82:	463c      	mov	r4, r7
 800fd84:	687f      	ldr	r7, [r7, #4]
 800fd86:	e7b6      	b.n	800fcf6 <_malloc_r+0x4a>
 800fd88:	461a      	mov	r2, r3
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	42a3      	cmp	r3, r4
 800fd8e:	d1fb      	bne.n	800fd88 <_malloc_r+0xdc>
 800fd90:	2300      	movs	r3, #0
 800fd92:	6053      	str	r3, [r2, #4]
 800fd94:	e7de      	b.n	800fd54 <_malloc_r+0xa8>
 800fd96:	230c      	movs	r3, #12
 800fd98:	6033      	str	r3, [r6, #0]
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	f000 f80c 	bl	800fdb8 <__malloc_unlock>
 800fda0:	e794      	b.n	800fccc <_malloc_r+0x20>
 800fda2:	6005      	str	r5, [r0, #0]
 800fda4:	e7d6      	b.n	800fd54 <_malloc_r+0xa8>
 800fda6:	bf00      	nop
 800fda8:	240aca30 	.word	0x240aca30

0800fdac <__malloc_lock>:
 800fdac:	4801      	ldr	r0, [pc, #4]	@ (800fdb4 <__malloc_lock+0x8>)
 800fdae:	f7ff bf0f 	b.w	800fbd0 <__retarget_lock_acquire_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	240aca28 	.word	0x240aca28

0800fdb8 <__malloc_unlock>:
 800fdb8:	4801      	ldr	r0, [pc, #4]	@ (800fdc0 <__malloc_unlock+0x8>)
 800fdba:	f7ff bf0a 	b.w	800fbd2 <__retarget_lock_release_recursive>
 800fdbe:	bf00      	nop
 800fdc0:	240aca28 	.word	0x240aca28

0800fdc4 <__ssputs_r>:
 800fdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc8:	688e      	ldr	r6, [r1, #8]
 800fdca:	461f      	mov	r7, r3
 800fdcc:	42be      	cmp	r6, r7
 800fdce:	680b      	ldr	r3, [r1, #0]
 800fdd0:	4682      	mov	sl, r0
 800fdd2:	460c      	mov	r4, r1
 800fdd4:	4690      	mov	r8, r2
 800fdd6:	d82d      	bhi.n	800fe34 <__ssputs_r+0x70>
 800fdd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fde0:	d026      	beq.n	800fe30 <__ssputs_r+0x6c>
 800fde2:	6965      	ldr	r5, [r4, #20]
 800fde4:	6909      	ldr	r1, [r1, #16]
 800fde6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdea:	eba3 0901 	sub.w	r9, r3, r1
 800fdee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdf2:	1c7b      	adds	r3, r7, #1
 800fdf4:	444b      	add	r3, r9
 800fdf6:	106d      	asrs	r5, r5, #1
 800fdf8:	429d      	cmp	r5, r3
 800fdfa:	bf38      	it	cc
 800fdfc:	461d      	movcc	r5, r3
 800fdfe:	0553      	lsls	r3, r2, #21
 800fe00:	d527      	bpl.n	800fe52 <__ssputs_r+0x8e>
 800fe02:	4629      	mov	r1, r5
 800fe04:	f7ff ff52 	bl	800fcac <_malloc_r>
 800fe08:	4606      	mov	r6, r0
 800fe0a:	b360      	cbz	r0, 800fe66 <__ssputs_r+0xa2>
 800fe0c:	6921      	ldr	r1, [r4, #16]
 800fe0e:	464a      	mov	r2, r9
 800fe10:	f000 fae8 	bl	80103e4 <memcpy>
 800fe14:	89a3      	ldrh	r3, [r4, #12]
 800fe16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe1e:	81a3      	strh	r3, [r4, #12]
 800fe20:	6126      	str	r6, [r4, #16]
 800fe22:	6165      	str	r5, [r4, #20]
 800fe24:	444e      	add	r6, r9
 800fe26:	eba5 0509 	sub.w	r5, r5, r9
 800fe2a:	6026      	str	r6, [r4, #0]
 800fe2c:	60a5      	str	r5, [r4, #8]
 800fe2e:	463e      	mov	r6, r7
 800fe30:	42be      	cmp	r6, r7
 800fe32:	d900      	bls.n	800fe36 <__ssputs_r+0x72>
 800fe34:	463e      	mov	r6, r7
 800fe36:	6820      	ldr	r0, [r4, #0]
 800fe38:	4632      	mov	r2, r6
 800fe3a:	4641      	mov	r1, r8
 800fe3c:	f000 faa8 	bl	8010390 <memmove>
 800fe40:	68a3      	ldr	r3, [r4, #8]
 800fe42:	1b9b      	subs	r3, r3, r6
 800fe44:	60a3      	str	r3, [r4, #8]
 800fe46:	6823      	ldr	r3, [r4, #0]
 800fe48:	4433      	add	r3, r6
 800fe4a:	6023      	str	r3, [r4, #0]
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe52:	462a      	mov	r2, r5
 800fe54:	f000 fad4 	bl	8010400 <_realloc_r>
 800fe58:	4606      	mov	r6, r0
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d1e0      	bne.n	800fe20 <__ssputs_r+0x5c>
 800fe5e:	6921      	ldr	r1, [r4, #16]
 800fe60:	4650      	mov	r0, sl
 800fe62:	f7ff feb7 	bl	800fbd4 <_free_r>
 800fe66:	230c      	movs	r3, #12
 800fe68:	f8ca 3000 	str.w	r3, [sl]
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe72:	81a3      	strh	r3, [r4, #12]
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295
 800fe78:	e7e9      	b.n	800fe4e <__ssputs_r+0x8a>
	...

0800fe7c <_svfiprintf_r>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	4698      	mov	r8, r3
 800fe82:	898b      	ldrh	r3, [r1, #12]
 800fe84:	061b      	lsls	r3, r3, #24
 800fe86:	b09d      	sub	sp, #116	@ 0x74
 800fe88:	4607      	mov	r7, r0
 800fe8a:	460d      	mov	r5, r1
 800fe8c:	4614      	mov	r4, r2
 800fe8e:	d510      	bpl.n	800feb2 <_svfiprintf_r+0x36>
 800fe90:	690b      	ldr	r3, [r1, #16]
 800fe92:	b973      	cbnz	r3, 800feb2 <_svfiprintf_r+0x36>
 800fe94:	2140      	movs	r1, #64	@ 0x40
 800fe96:	f7ff ff09 	bl	800fcac <_malloc_r>
 800fe9a:	6028      	str	r0, [r5, #0]
 800fe9c:	6128      	str	r0, [r5, #16]
 800fe9e:	b930      	cbnz	r0, 800feae <_svfiprintf_r+0x32>
 800fea0:	230c      	movs	r3, #12
 800fea2:	603b      	str	r3, [r7, #0]
 800fea4:	f04f 30ff 	mov.w	r0, #4294967295
 800fea8:	b01d      	add	sp, #116	@ 0x74
 800feaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feae:	2340      	movs	r3, #64	@ 0x40
 800feb0:	616b      	str	r3, [r5, #20]
 800feb2:	2300      	movs	r3, #0
 800feb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800feb6:	2320      	movs	r3, #32
 800feb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800febc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fec0:	2330      	movs	r3, #48	@ 0x30
 800fec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010060 <_svfiprintf_r+0x1e4>
 800fec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800feca:	f04f 0901 	mov.w	r9, #1
 800fece:	4623      	mov	r3, r4
 800fed0:	469a      	mov	sl, r3
 800fed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fed6:	b10a      	cbz	r2, 800fedc <_svfiprintf_r+0x60>
 800fed8:	2a25      	cmp	r2, #37	@ 0x25
 800feda:	d1f9      	bne.n	800fed0 <_svfiprintf_r+0x54>
 800fedc:	ebba 0b04 	subs.w	fp, sl, r4
 800fee0:	d00b      	beq.n	800fefa <_svfiprintf_r+0x7e>
 800fee2:	465b      	mov	r3, fp
 800fee4:	4622      	mov	r2, r4
 800fee6:	4629      	mov	r1, r5
 800fee8:	4638      	mov	r0, r7
 800feea:	f7ff ff6b 	bl	800fdc4 <__ssputs_r>
 800feee:	3001      	adds	r0, #1
 800fef0:	f000 80a7 	beq.w	8010042 <_svfiprintf_r+0x1c6>
 800fef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fef6:	445a      	add	r2, fp
 800fef8:	9209      	str	r2, [sp, #36]	@ 0x24
 800fefa:	f89a 3000 	ldrb.w	r3, [sl]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f000 809f 	beq.w	8010042 <_svfiprintf_r+0x1c6>
 800ff04:	2300      	movs	r3, #0
 800ff06:	f04f 32ff 	mov.w	r2, #4294967295
 800ff0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff0e:	f10a 0a01 	add.w	sl, sl, #1
 800ff12:	9304      	str	r3, [sp, #16]
 800ff14:	9307      	str	r3, [sp, #28]
 800ff16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff1c:	4654      	mov	r4, sl
 800ff1e:	2205      	movs	r2, #5
 800ff20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff24:	484e      	ldr	r0, [pc, #312]	@ (8010060 <_svfiprintf_r+0x1e4>)
 800ff26:	f7f0 f9e3 	bl	80002f0 <memchr>
 800ff2a:	9a04      	ldr	r2, [sp, #16]
 800ff2c:	b9d8      	cbnz	r0, 800ff66 <_svfiprintf_r+0xea>
 800ff2e:	06d0      	lsls	r0, r2, #27
 800ff30:	bf44      	itt	mi
 800ff32:	2320      	movmi	r3, #32
 800ff34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff38:	0711      	lsls	r1, r2, #28
 800ff3a:	bf44      	itt	mi
 800ff3c:	232b      	movmi	r3, #43	@ 0x2b
 800ff3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff42:	f89a 3000 	ldrb.w	r3, [sl]
 800ff46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff48:	d015      	beq.n	800ff76 <_svfiprintf_r+0xfa>
 800ff4a:	9a07      	ldr	r2, [sp, #28]
 800ff4c:	4654      	mov	r4, sl
 800ff4e:	2000      	movs	r0, #0
 800ff50:	f04f 0c0a 	mov.w	ip, #10
 800ff54:	4621      	mov	r1, r4
 800ff56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff5a:	3b30      	subs	r3, #48	@ 0x30
 800ff5c:	2b09      	cmp	r3, #9
 800ff5e:	d94b      	bls.n	800fff8 <_svfiprintf_r+0x17c>
 800ff60:	b1b0      	cbz	r0, 800ff90 <_svfiprintf_r+0x114>
 800ff62:	9207      	str	r2, [sp, #28]
 800ff64:	e014      	b.n	800ff90 <_svfiprintf_r+0x114>
 800ff66:	eba0 0308 	sub.w	r3, r0, r8
 800ff6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ff6e:	4313      	orrs	r3, r2
 800ff70:	9304      	str	r3, [sp, #16]
 800ff72:	46a2      	mov	sl, r4
 800ff74:	e7d2      	b.n	800ff1c <_svfiprintf_r+0xa0>
 800ff76:	9b03      	ldr	r3, [sp, #12]
 800ff78:	1d19      	adds	r1, r3, #4
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	9103      	str	r1, [sp, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	bfbb      	ittet	lt
 800ff82:	425b      	neglt	r3, r3
 800ff84:	f042 0202 	orrlt.w	r2, r2, #2
 800ff88:	9307      	strge	r3, [sp, #28]
 800ff8a:	9307      	strlt	r3, [sp, #28]
 800ff8c:	bfb8      	it	lt
 800ff8e:	9204      	strlt	r2, [sp, #16]
 800ff90:	7823      	ldrb	r3, [r4, #0]
 800ff92:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff94:	d10a      	bne.n	800ffac <_svfiprintf_r+0x130>
 800ff96:	7863      	ldrb	r3, [r4, #1]
 800ff98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff9a:	d132      	bne.n	8010002 <_svfiprintf_r+0x186>
 800ff9c:	9b03      	ldr	r3, [sp, #12]
 800ff9e:	1d1a      	adds	r2, r3, #4
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	9203      	str	r2, [sp, #12]
 800ffa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffa8:	3402      	adds	r4, #2
 800ffaa:	9305      	str	r3, [sp, #20]
 800ffac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010070 <_svfiprintf_r+0x1f4>
 800ffb0:	7821      	ldrb	r1, [r4, #0]
 800ffb2:	2203      	movs	r2, #3
 800ffb4:	4650      	mov	r0, sl
 800ffb6:	f7f0 f99b 	bl	80002f0 <memchr>
 800ffba:	b138      	cbz	r0, 800ffcc <_svfiprintf_r+0x150>
 800ffbc:	9b04      	ldr	r3, [sp, #16]
 800ffbe:	eba0 000a 	sub.w	r0, r0, sl
 800ffc2:	2240      	movs	r2, #64	@ 0x40
 800ffc4:	4082      	lsls	r2, r0
 800ffc6:	4313      	orrs	r3, r2
 800ffc8:	3401      	adds	r4, #1
 800ffca:	9304      	str	r3, [sp, #16]
 800ffcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffd0:	4824      	ldr	r0, [pc, #144]	@ (8010064 <_svfiprintf_r+0x1e8>)
 800ffd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ffd6:	2206      	movs	r2, #6
 800ffd8:	f7f0 f98a 	bl	80002f0 <memchr>
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d036      	beq.n	801004e <_svfiprintf_r+0x1d2>
 800ffe0:	4b21      	ldr	r3, [pc, #132]	@ (8010068 <_svfiprintf_r+0x1ec>)
 800ffe2:	bb1b      	cbnz	r3, 801002c <_svfiprintf_r+0x1b0>
 800ffe4:	9b03      	ldr	r3, [sp, #12]
 800ffe6:	3307      	adds	r3, #7
 800ffe8:	f023 0307 	bic.w	r3, r3, #7
 800ffec:	3308      	adds	r3, #8
 800ffee:	9303      	str	r3, [sp, #12]
 800fff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fff2:	4433      	add	r3, r6
 800fff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fff6:	e76a      	b.n	800fece <_svfiprintf_r+0x52>
 800fff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800fffc:	460c      	mov	r4, r1
 800fffe:	2001      	movs	r0, #1
 8010000:	e7a8      	b.n	800ff54 <_svfiprintf_r+0xd8>
 8010002:	2300      	movs	r3, #0
 8010004:	3401      	adds	r4, #1
 8010006:	9305      	str	r3, [sp, #20]
 8010008:	4619      	mov	r1, r3
 801000a:	f04f 0c0a 	mov.w	ip, #10
 801000e:	4620      	mov	r0, r4
 8010010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010014:	3a30      	subs	r2, #48	@ 0x30
 8010016:	2a09      	cmp	r2, #9
 8010018:	d903      	bls.n	8010022 <_svfiprintf_r+0x1a6>
 801001a:	2b00      	cmp	r3, #0
 801001c:	d0c6      	beq.n	800ffac <_svfiprintf_r+0x130>
 801001e:	9105      	str	r1, [sp, #20]
 8010020:	e7c4      	b.n	800ffac <_svfiprintf_r+0x130>
 8010022:	fb0c 2101 	mla	r1, ip, r1, r2
 8010026:	4604      	mov	r4, r0
 8010028:	2301      	movs	r3, #1
 801002a:	e7f0      	b.n	801000e <_svfiprintf_r+0x192>
 801002c:	ab03      	add	r3, sp, #12
 801002e:	9300      	str	r3, [sp, #0]
 8010030:	462a      	mov	r2, r5
 8010032:	4b0e      	ldr	r3, [pc, #56]	@ (801006c <_svfiprintf_r+0x1f0>)
 8010034:	a904      	add	r1, sp, #16
 8010036:	4638      	mov	r0, r7
 8010038:	f3af 8000 	nop.w
 801003c:	1c42      	adds	r2, r0, #1
 801003e:	4606      	mov	r6, r0
 8010040:	d1d6      	bne.n	800fff0 <_svfiprintf_r+0x174>
 8010042:	89ab      	ldrh	r3, [r5, #12]
 8010044:	065b      	lsls	r3, r3, #25
 8010046:	f53f af2d 	bmi.w	800fea4 <_svfiprintf_r+0x28>
 801004a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801004c:	e72c      	b.n	800fea8 <_svfiprintf_r+0x2c>
 801004e:	ab03      	add	r3, sp, #12
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	462a      	mov	r2, r5
 8010054:	4b05      	ldr	r3, [pc, #20]	@ (801006c <_svfiprintf_r+0x1f0>)
 8010056:	a904      	add	r1, sp, #16
 8010058:	4638      	mov	r0, r7
 801005a:	f000 f879 	bl	8010150 <_printf_i>
 801005e:	e7ed      	b.n	801003c <_svfiprintf_r+0x1c0>
 8010060:	080107dc 	.word	0x080107dc
 8010064:	080107e6 	.word	0x080107e6
 8010068:	00000000 	.word	0x00000000
 801006c:	0800fdc5 	.word	0x0800fdc5
 8010070:	080107e2 	.word	0x080107e2

08010074 <_printf_common>:
 8010074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010078:	4616      	mov	r6, r2
 801007a:	4698      	mov	r8, r3
 801007c:	688a      	ldr	r2, [r1, #8]
 801007e:	690b      	ldr	r3, [r1, #16]
 8010080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010084:	4293      	cmp	r3, r2
 8010086:	bfb8      	it	lt
 8010088:	4613      	movlt	r3, r2
 801008a:	6033      	str	r3, [r6, #0]
 801008c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010090:	4607      	mov	r7, r0
 8010092:	460c      	mov	r4, r1
 8010094:	b10a      	cbz	r2, 801009a <_printf_common+0x26>
 8010096:	3301      	adds	r3, #1
 8010098:	6033      	str	r3, [r6, #0]
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	0699      	lsls	r1, r3, #26
 801009e:	bf42      	ittt	mi
 80100a0:	6833      	ldrmi	r3, [r6, #0]
 80100a2:	3302      	addmi	r3, #2
 80100a4:	6033      	strmi	r3, [r6, #0]
 80100a6:	6825      	ldr	r5, [r4, #0]
 80100a8:	f015 0506 	ands.w	r5, r5, #6
 80100ac:	d106      	bne.n	80100bc <_printf_common+0x48>
 80100ae:	f104 0a19 	add.w	sl, r4, #25
 80100b2:	68e3      	ldr	r3, [r4, #12]
 80100b4:	6832      	ldr	r2, [r6, #0]
 80100b6:	1a9b      	subs	r3, r3, r2
 80100b8:	42ab      	cmp	r3, r5
 80100ba:	dc26      	bgt.n	801010a <_printf_common+0x96>
 80100bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	3b00      	subs	r3, #0
 80100c4:	bf18      	it	ne
 80100c6:	2301      	movne	r3, #1
 80100c8:	0692      	lsls	r2, r2, #26
 80100ca:	d42b      	bmi.n	8010124 <_printf_common+0xb0>
 80100cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100d0:	4641      	mov	r1, r8
 80100d2:	4638      	mov	r0, r7
 80100d4:	47c8      	blx	r9
 80100d6:	3001      	adds	r0, #1
 80100d8:	d01e      	beq.n	8010118 <_printf_common+0xa4>
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	6922      	ldr	r2, [r4, #16]
 80100de:	f003 0306 	and.w	r3, r3, #6
 80100e2:	2b04      	cmp	r3, #4
 80100e4:	bf02      	ittt	eq
 80100e6:	68e5      	ldreq	r5, [r4, #12]
 80100e8:	6833      	ldreq	r3, [r6, #0]
 80100ea:	1aed      	subeq	r5, r5, r3
 80100ec:	68a3      	ldr	r3, [r4, #8]
 80100ee:	bf0c      	ite	eq
 80100f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100f4:	2500      	movne	r5, #0
 80100f6:	4293      	cmp	r3, r2
 80100f8:	bfc4      	itt	gt
 80100fa:	1a9b      	subgt	r3, r3, r2
 80100fc:	18ed      	addgt	r5, r5, r3
 80100fe:	2600      	movs	r6, #0
 8010100:	341a      	adds	r4, #26
 8010102:	42b5      	cmp	r5, r6
 8010104:	d11a      	bne.n	801013c <_printf_common+0xc8>
 8010106:	2000      	movs	r0, #0
 8010108:	e008      	b.n	801011c <_printf_common+0xa8>
 801010a:	2301      	movs	r3, #1
 801010c:	4652      	mov	r2, sl
 801010e:	4641      	mov	r1, r8
 8010110:	4638      	mov	r0, r7
 8010112:	47c8      	blx	r9
 8010114:	3001      	adds	r0, #1
 8010116:	d103      	bne.n	8010120 <_printf_common+0xac>
 8010118:	f04f 30ff 	mov.w	r0, #4294967295
 801011c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010120:	3501      	adds	r5, #1
 8010122:	e7c6      	b.n	80100b2 <_printf_common+0x3e>
 8010124:	18e1      	adds	r1, r4, r3
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	2030      	movs	r0, #48	@ 0x30
 801012a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801012e:	4422      	add	r2, r4
 8010130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010138:	3302      	adds	r3, #2
 801013a:	e7c7      	b.n	80100cc <_printf_common+0x58>
 801013c:	2301      	movs	r3, #1
 801013e:	4622      	mov	r2, r4
 8010140:	4641      	mov	r1, r8
 8010142:	4638      	mov	r0, r7
 8010144:	47c8      	blx	r9
 8010146:	3001      	adds	r0, #1
 8010148:	d0e6      	beq.n	8010118 <_printf_common+0xa4>
 801014a:	3601      	adds	r6, #1
 801014c:	e7d9      	b.n	8010102 <_printf_common+0x8e>
	...

08010150 <_printf_i>:
 8010150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010154:	7e0f      	ldrb	r7, [r1, #24]
 8010156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010158:	2f78      	cmp	r7, #120	@ 0x78
 801015a:	4691      	mov	r9, r2
 801015c:	4680      	mov	r8, r0
 801015e:	460c      	mov	r4, r1
 8010160:	469a      	mov	sl, r3
 8010162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010166:	d807      	bhi.n	8010178 <_printf_i+0x28>
 8010168:	2f62      	cmp	r7, #98	@ 0x62
 801016a:	d80a      	bhi.n	8010182 <_printf_i+0x32>
 801016c:	2f00      	cmp	r7, #0
 801016e:	f000 80d2 	beq.w	8010316 <_printf_i+0x1c6>
 8010172:	2f58      	cmp	r7, #88	@ 0x58
 8010174:	f000 80b9 	beq.w	80102ea <_printf_i+0x19a>
 8010178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801017c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010180:	e03a      	b.n	80101f8 <_printf_i+0xa8>
 8010182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010186:	2b15      	cmp	r3, #21
 8010188:	d8f6      	bhi.n	8010178 <_printf_i+0x28>
 801018a:	a101      	add	r1, pc, #4	@ (adr r1, 8010190 <_printf_i+0x40>)
 801018c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010190:	080101e9 	.word	0x080101e9
 8010194:	080101fd 	.word	0x080101fd
 8010198:	08010179 	.word	0x08010179
 801019c:	08010179 	.word	0x08010179
 80101a0:	08010179 	.word	0x08010179
 80101a4:	08010179 	.word	0x08010179
 80101a8:	080101fd 	.word	0x080101fd
 80101ac:	08010179 	.word	0x08010179
 80101b0:	08010179 	.word	0x08010179
 80101b4:	08010179 	.word	0x08010179
 80101b8:	08010179 	.word	0x08010179
 80101bc:	080102fd 	.word	0x080102fd
 80101c0:	08010227 	.word	0x08010227
 80101c4:	080102b7 	.word	0x080102b7
 80101c8:	08010179 	.word	0x08010179
 80101cc:	08010179 	.word	0x08010179
 80101d0:	0801031f 	.word	0x0801031f
 80101d4:	08010179 	.word	0x08010179
 80101d8:	08010227 	.word	0x08010227
 80101dc:	08010179 	.word	0x08010179
 80101e0:	08010179 	.word	0x08010179
 80101e4:	080102bf 	.word	0x080102bf
 80101e8:	6833      	ldr	r3, [r6, #0]
 80101ea:	1d1a      	adds	r2, r3, #4
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	6032      	str	r2, [r6, #0]
 80101f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80101f8:	2301      	movs	r3, #1
 80101fa:	e09d      	b.n	8010338 <_printf_i+0x1e8>
 80101fc:	6833      	ldr	r3, [r6, #0]
 80101fe:	6820      	ldr	r0, [r4, #0]
 8010200:	1d19      	adds	r1, r3, #4
 8010202:	6031      	str	r1, [r6, #0]
 8010204:	0606      	lsls	r6, r0, #24
 8010206:	d501      	bpl.n	801020c <_printf_i+0xbc>
 8010208:	681d      	ldr	r5, [r3, #0]
 801020a:	e003      	b.n	8010214 <_printf_i+0xc4>
 801020c:	0645      	lsls	r5, r0, #25
 801020e:	d5fb      	bpl.n	8010208 <_printf_i+0xb8>
 8010210:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010214:	2d00      	cmp	r5, #0
 8010216:	da03      	bge.n	8010220 <_printf_i+0xd0>
 8010218:	232d      	movs	r3, #45	@ 0x2d
 801021a:	426d      	negs	r5, r5
 801021c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010220:	4859      	ldr	r0, [pc, #356]	@ (8010388 <_printf_i+0x238>)
 8010222:	230a      	movs	r3, #10
 8010224:	e011      	b.n	801024a <_printf_i+0xfa>
 8010226:	6821      	ldr	r1, [r4, #0]
 8010228:	6833      	ldr	r3, [r6, #0]
 801022a:	0608      	lsls	r0, r1, #24
 801022c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010230:	d402      	bmi.n	8010238 <_printf_i+0xe8>
 8010232:	0649      	lsls	r1, r1, #25
 8010234:	bf48      	it	mi
 8010236:	b2ad      	uxthmi	r5, r5
 8010238:	2f6f      	cmp	r7, #111	@ 0x6f
 801023a:	4853      	ldr	r0, [pc, #332]	@ (8010388 <_printf_i+0x238>)
 801023c:	6033      	str	r3, [r6, #0]
 801023e:	bf14      	ite	ne
 8010240:	230a      	movne	r3, #10
 8010242:	2308      	moveq	r3, #8
 8010244:	2100      	movs	r1, #0
 8010246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801024a:	6866      	ldr	r6, [r4, #4]
 801024c:	60a6      	str	r6, [r4, #8]
 801024e:	2e00      	cmp	r6, #0
 8010250:	bfa2      	ittt	ge
 8010252:	6821      	ldrge	r1, [r4, #0]
 8010254:	f021 0104 	bicge.w	r1, r1, #4
 8010258:	6021      	strge	r1, [r4, #0]
 801025a:	b90d      	cbnz	r5, 8010260 <_printf_i+0x110>
 801025c:	2e00      	cmp	r6, #0
 801025e:	d04b      	beq.n	80102f8 <_printf_i+0x1a8>
 8010260:	4616      	mov	r6, r2
 8010262:	fbb5 f1f3 	udiv	r1, r5, r3
 8010266:	fb03 5711 	mls	r7, r3, r1, r5
 801026a:	5dc7      	ldrb	r7, [r0, r7]
 801026c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010270:	462f      	mov	r7, r5
 8010272:	42bb      	cmp	r3, r7
 8010274:	460d      	mov	r5, r1
 8010276:	d9f4      	bls.n	8010262 <_printf_i+0x112>
 8010278:	2b08      	cmp	r3, #8
 801027a:	d10b      	bne.n	8010294 <_printf_i+0x144>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	07df      	lsls	r7, r3, #31
 8010280:	d508      	bpl.n	8010294 <_printf_i+0x144>
 8010282:	6923      	ldr	r3, [r4, #16]
 8010284:	6861      	ldr	r1, [r4, #4]
 8010286:	4299      	cmp	r1, r3
 8010288:	bfde      	ittt	le
 801028a:	2330      	movle	r3, #48	@ 0x30
 801028c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010290:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010294:	1b92      	subs	r2, r2, r6
 8010296:	6122      	str	r2, [r4, #16]
 8010298:	f8cd a000 	str.w	sl, [sp]
 801029c:	464b      	mov	r3, r9
 801029e:	aa03      	add	r2, sp, #12
 80102a0:	4621      	mov	r1, r4
 80102a2:	4640      	mov	r0, r8
 80102a4:	f7ff fee6 	bl	8010074 <_printf_common>
 80102a8:	3001      	adds	r0, #1
 80102aa:	d14a      	bne.n	8010342 <_printf_i+0x1f2>
 80102ac:	f04f 30ff 	mov.w	r0, #4294967295
 80102b0:	b004      	add	sp, #16
 80102b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b6:	6823      	ldr	r3, [r4, #0]
 80102b8:	f043 0320 	orr.w	r3, r3, #32
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	4833      	ldr	r0, [pc, #204]	@ (801038c <_printf_i+0x23c>)
 80102c0:	2778      	movs	r7, #120	@ 0x78
 80102c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	6831      	ldr	r1, [r6, #0]
 80102ca:	061f      	lsls	r7, r3, #24
 80102cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80102d0:	d402      	bmi.n	80102d8 <_printf_i+0x188>
 80102d2:	065f      	lsls	r7, r3, #25
 80102d4:	bf48      	it	mi
 80102d6:	b2ad      	uxthmi	r5, r5
 80102d8:	6031      	str	r1, [r6, #0]
 80102da:	07d9      	lsls	r1, r3, #31
 80102dc:	bf44      	itt	mi
 80102de:	f043 0320 	orrmi.w	r3, r3, #32
 80102e2:	6023      	strmi	r3, [r4, #0]
 80102e4:	b11d      	cbz	r5, 80102ee <_printf_i+0x19e>
 80102e6:	2310      	movs	r3, #16
 80102e8:	e7ac      	b.n	8010244 <_printf_i+0xf4>
 80102ea:	4827      	ldr	r0, [pc, #156]	@ (8010388 <_printf_i+0x238>)
 80102ec:	e7e9      	b.n	80102c2 <_printf_i+0x172>
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	f023 0320 	bic.w	r3, r3, #32
 80102f4:	6023      	str	r3, [r4, #0]
 80102f6:	e7f6      	b.n	80102e6 <_printf_i+0x196>
 80102f8:	4616      	mov	r6, r2
 80102fa:	e7bd      	b.n	8010278 <_printf_i+0x128>
 80102fc:	6833      	ldr	r3, [r6, #0]
 80102fe:	6825      	ldr	r5, [r4, #0]
 8010300:	6961      	ldr	r1, [r4, #20]
 8010302:	1d18      	adds	r0, r3, #4
 8010304:	6030      	str	r0, [r6, #0]
 8010306:	062e      	lsls	r6, r5, #24
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	d501      	bpl.n	8010310 <_printf_i+0x1c0>
 801030c:	6019      	str	r1, [r3, #0]
 801030e:	e002      	b.n	8010316 <_printf_i+0x1c6>
 8010310:	0668      	lsls	r0, r5, #25
 8010312:	d5fb      	bpl.n	801030c <_printf_i+0x1bc>
 8010314:	8019      	strh	r1, [r3, #0]
 8010316:	2300      	movs	r3, #0
 8010318:	6123      	str	r3, [r4, #16]
 801031a:	4616      	mov	r6, r2
 801031c:	e7bc      	b.n	8010298 <_printf_i+0x148>
 801031e:	6833      	ldr	r3, [r6, #0]
 8010320:	1d1a      	adds	r2, r3, #4
 8010322:	6032      	str	r2, [r6, #0]
 8010324:	681e      	ldr	r6, [r3, #0]
 8010326:	6862      	ldr	r2, [r4, #4]
 8010328:	2100      	movs	r1, #0
 801032a:	4630      	mov	r0, r6
 801032c:	f7ef ffe0 	bl	80002f0 <memchr>
 8010330:	b108      	cbz	r0, 8010336 <_printf_i+0x1e6>
 8010332:	1b80      	subs	r0, r0, r6
 8010334:	6060      	str	r0, [r4, #4]
 8010336:	6863      	ldr	r3, [r4, #4]
 8010338:	6123      	str	r3, [r4, #16]
 801033a:	2300      	movs	r3, #0
 801033c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010340:	e7aa      	b.n	8010298 <_printf_i+0x148>
 8010342:	6923      	ldr	r3, [r4, #16]
 8010344:	4632      	mov	r2, r6
 8010346:	4649      	mov	r1, r9
 8010348:	4640      	mov	r0, r8
 801034a:	47d0      	blx	sl
 801034c:	3001      	adds	r0, #1
 801034e:	d0ad      	beq.n	80102ac <_printf_i+0x15c>
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	079b      	lsls	r3, r3, #30
 8010354:	d413      	bmi.n	801037e <_printf_i+0x22e>
 8010356:	68e0      	ldr	r0, [r4, #12]
 8010358:	9b03      	ldr	r3, [sp, #12]
 801035a:	4298      	cmp	r0, r3
 801035c:	bfb8      	it	lt
 801035e:	4618      	movlt	r0, r3
 8010360:	e7a6      	b.n	80102b0 <_printf_i+0x160>
 8010362:	2301      	movs	r3, #1
 8010364:	4632      	mov	r2, r6
 8010366:	4649      	mov	r1, r9
 8010368:	4640      	mov	r0, r8
 801036a:	47d0      	blx	sl
 801036c:	3001      	adds	r0, #1
 801036e:	d09d      	beq.n	80102ac <_printf_i+0x15c>
 8010370:	3501      	adds	r5, #1
 8010372:	68e3      	ldr	r3, [r4, #12]
 8010374:	9903      	ldr	r1, [sp, #12]
 8010376:	1a5b      	subs	r3, r3, r1
 8010378:	42ab      	cmp	r3, r5
 801037a:	dcf2      	bgt.n	8010362 <_printf_i+0x212>
 801037c:	e7eb      	b.n	8010356 <_printf_i+0x206>
 801037e:	2500      	movs	r5, #0
 8010380:	f104 0619 	add.w	r6, r4, #25
 8010384:	e7f5      	b.n	8010372 <_printf_i+0x222>
 8010386:	bf00      	nop
 8010388:	080107ed 	.word	0x080107ed
 801038c:	080107fe 	.word	0x080107fe

08010390 <memmove>:
 8010390:	4288      	cmp	r0, r1
 8010392:	b510      	push	{r4, lr}
 8010394:	eb01 0402 	add.w	r4, r1, r2
 8010398:	d902      	bls.n	80103a0 <memmove+0x10>
 801039a:	4284      	cmp	r4, r0
 801039c:	4623      	mov	r3, r4
 801039e:	d807      	bhi.n	80103b0 <memmove+0x20>
 80103a0:	1e43      	subs	r3, r0, #1
 80103a2:	42a1      	cmp	r1, r4
 80103a4:	d008      	beq.n	80103b8 <memmove+0x28>
 80103a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103ae:	e7f8      	b.n	80103a2 <memmove+0x12>
 80103b0:	4402      	add	r2, r0
 80103b2:	4601      	mov	r1, r0
 80103b4:	428a      	cmp	r2, r1
 80103b6:	d100      	bne.n	80103ba <memmove+0x2a>
 80103b8:	bd10      	pop	{r4, pc}
 80103ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103c2:	e7f7      	b.n	80103b4 <memmove+0x24>

080103c4 <_sbrk_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4d06      	ldr	r5, [pc, #24]	@ (80103e0 <_sbrk_r+0x1c>)
 80103c8:	2300      	movs	r3, #0
 80103ca:	4604      	mov	r4, r0
 80103cc:	4608      	mov	r0, r1
 80103ce:	602b      	str	r3, [r5, #0]
 80103d0:	f7f2 ff88 	bl	80032e4 <_sbrk>
 80103d4:	1c43      	adds	r3, r0, #1
 80103d6:	d102      	bne.n	80103de <_sbrk_r+0x1a>
 80103d8:	682b      	ldr	r3, [r5, #0]
 80103da:	b103      	cbz	r3, 80103de <_sbrk_r+0x1a>
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	bd38      	pop	{r3, r4, r5, pc}
 80103e0:	240aca24 	.word	0x240aca24

080103e4 <memcpy>:
 80103e4:	440a      	add	r2, r1
 80103e6:	4291      	cmp	r1, r2
 80103e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80103ec:	d100      	bne.n	80103f0 <memcpy+0xc>
 80103ee:	4770      	bx	lr
 80103f0:	b510      	push	{r4, lr}
 80103f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103fa:	4291      	cmp	r1, r2
 80103fc:	d1f9      	bne.n	80103f2 <memcpy+0xe>
 80103fe:	bd10      	pop	{r4, pc}

08010400 <_realloc_r>:
 8010400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010404:	4680      	mov	r8, r0
 8010406:	4615      	mov	r5, r2
 8010408:	460c      	mov	r4, r1
 801040a:	b921      	cbnz	r1, 8010416 <_realloc_r+0x16>
 801040c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010410:	4611      	mov	r1, r2
 8010412:	f7ff bc4b 	b.w	800fcac <_malloc_r>
 8010416:	b92a      	cbnz	r2, 8010424 <_realloc_r+0x24>
 8010418:	f7ff fbdc 	bl	800fbd4 <_free_r>
 801041c:	2400      	movs	r4, #0
 801041e:	4620      	mov	r0, r4
 8010420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010424:	f000 f81a 	bl	801045c <_malloc_usable_size_r>
 8010428:	4285      	cmp	r5, r0
 801042a:	4606      	mov	r6, r0
 801042c:	d802      	bhi.n	8010434 <_realloc_r+0x34>
 801042e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010432:	d8f4      	bhi.n	801041e <_realloc_r+0x1e>
 8010434:	4629      	mov	r1, r5
 8010436:	4640      	mov	r0, r8
 8010438:	f7ff fc38 	bl	800fcac <_malloc_r>
 801043c:	4607      	mov	r7, r0
 801043e:	2800      	cmp	r0, #0
 8010440:	d0ec      	beq.n	801041c <_realloc_r+0x1c>
 8010442:	42b5      	cmp	r5, r6
 8010444:	462a      	mov	r2, r5
 8010446:	4621      	mov	r1, r4
 8010448:	bf28      	it	cs
 801044a:	4632      	movcs	r2, r6
 801044c:	f7ff ffca 	bl	80103e4 <memcpy>
 8010450:	4621      	mov	r1, r4
 8010452:	4640      	mov	r0, r8
 8010454:	f7ff fbbe 	bl	800fbd4 <_free_r>
 8010458:	463c      	mov	r4, r7
 801045a:	e7e0      	b.n	801041e <_realloc_r+0x1e>

0801045c <_malloc_usable_size_r>:
 801045c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010460:	1f18      	subs	r0, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	bfbc      	itt	lt
 8010466:	580b      	ldrlt	r3, [r1, r0]
 8010468:	18c0      	addlt	r0, r0, r3
 801046a:	4770      	bx	lr

0801046c <_init>:
 801046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046e:	bf00      	nop
 8010470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010472:	bc08      	pop	{r3}
 8010474:	469e      	mov	lr, r3
 8010476:	4770      	bx	lr

08010478 <_fini>:
 8010478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047a:	bf00      	nop
 801047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801047e:	bc08      	pop	{r3}
 8010480:	469e      	mov	lr, r3
 8010482:	4770      	bx	lr
