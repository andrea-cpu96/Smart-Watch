
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebdc  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800ee8c  0800ee8c  0000fe8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f20c  0800f20c  0001020c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f214  0800f214  00010214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f218  0800f218  00010218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800f21c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000ac8dc  24000070  0800f288  00011070  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  240ac94c  0800f288  0001194c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039631  00000000  00000000  0001109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058ec  00000000  00000000  0004a6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00022257  00000000  00000000  0004ffb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001528  00000000  00000000  00072210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003395  00000000  00000000  00073738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035d7e  00000000  00000000  00076acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00038cf6  00000000  00000000  000ac84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00147ace  00000000  00000000  000e5541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0022d00f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000044e4  00000000  00000000  0022d054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006c  00000000  00000000  00231538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ee74 	.word	0x0800ee74

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0800ee74 	.word	0x0800ee74

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	461d      	mov	r5, r3
 8000398:	460e      	mov	r6, r1
 800039a:	4604      	mov	r4, r0
 800039c:	9b08      	ldr	r3, [sp, #32]
  uint32_t readSize= 0;
 800039e:	2100      	movs	r1, #0
  
  pavi->pVideoBuffer = pVideoBuffer;
 80003a0:	6342      	str	r2, [r0, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;

  pavi->pAudioBuffer = pAudioBuffer;
 80003a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
{
 80003a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  pavi->VideoBufferSize = VideoBufferSize;
 80003a6:	6385      	str	r5, [r0, #56]	@ 0x38
  pavi->AudioBufferSize = AudioBufferSize;
 80003a8:	6403      	str	r3, [r0, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80003aa:	4630      	mov	r0, r6
  uint32_t readSize= 0;
 80003ac:	9101      	str	r1, [sp, #4]
  f_lseek(file, 0 );
 80003ae:	f00d fecf 	bl	800e150 <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80003b2:	ab01      	add	r3, sp, #4
 80003b4:	462a      	mov	r2, r5
 80003b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80003b8:	4630      	mov	r0, r6
 80003ba:	f00d fd0f 	bl	800dddc <f_read>
  if(readSize != VideoBufferSize)
 80003be:	9b01      	ldr	r3, [sp, #4]
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d104      	bne.n	80003ce <AVI_ParserInit+0x3e>
  {
    return 1;
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 80003c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  if(aviheader->RiffID != AVI_RIFF_ID)
 80003c6:	4a86      	ldr	r2, [pc, #536]	@ (80005e0 <AVI_ParserInit+0x250>)
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	4291      	cmp	r1, r2
 80003cc:	d003      	beq.n	80003d6 <AVI_ParserInit+0x46>
    return 1;
 80003ce:	2001      	movs	r0, #1

  pavi->FileSize= f_size(file);
  pavi->CurrentImage=0;
  
  return  0;
}
 80003d0:	b002      	add	sp, #8
 80003d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(aviheader->AviID != AVI_AVI_ID)
 80003d6:	4a83      	ldr	r2, [pc, #524]	@ (80005e4 <AVI_ParserInit+0x254>)
 80003d8:	6899      	ldr	r1, [r3, #8]
 80003da:	4291      	cmp	r1, r2
 80003dc:	d1f7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListID != AVI_LIST_ID)
 80003de:	4982      	ldr	r1, [pc, #520]	@ (80005e8 <AVI_ParserInit+0x258>)
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	428a      	cmp	r2, r1
 80003e4:	d1f3      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_HDRL_ID)
 80003e6:	4981      	ldr	r1, [pc, #516]	@ (80005ec <AVI_ParserInit+0x25c>)
 80003e8:	6958      	ldr	r0, [r3, #20]
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d1ef      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(avihheader->BlockID != AVI_AVIH_ID)
 80003ee:	f1a1 6181 	sub.w	r1, r1, #67633152	@ 0x4080000
 80003f2:	6998      	ldr	r0, [r3, #24]
 80003f4:	f5a1 416e 	sub.w	r1, r1, #60928	@ 0xee00
 80003f8:	3907      	subs	r1, #7
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d1e7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 80003fe:	6a18      	ldr	r0, [r3, #32]
 8000400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000402:	e9c4 0100 	strd	r0, r1, [r4]
  buf+=avihheader->BlockSize+8;            
 8000406:	69d9      	ldr	r1, [r3, #28]
 8000408:	3120      	adds	r1, #32
  if(listheader->ListID != AVI_LIST_ID)
 800040a:	5858      	ldr	r0, [r3, r1]
  buf+=avihheader->BlockSize+8;            
 800040c:	4419      	add	r1, r3
  if(listheader->ListID != AVI_LIST_ID)
 800040e:	4290      	cmp	r0, r2
 8000410:	d1dd      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_STRL_ID)
 8000412:	4a77      	ldr	r2, [pc, #476]	@ (80005f0 <AVI_ParserInit+0x260>)
 8000414:	6888      	ldr	r0, [r1, #8]
 8000416:	4290      	cmp	r0, r2
 8000418:	d1d9      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->BlockID != AVI_STRH_ID)
 800041a:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
 800041e:	68c8      	ldr	r0, [r1, #12]
 8000420:	4290      	cmp	r0, r2
 8000422:	d1d4      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 8000424:	694a      	ldr	r2, [r1, #20]
 8000426:	4873      	ldr	r0, [pc, #460]	@ (80005f4 <AVI_ParserInit+0x264>)
 8000428:	4282      	cmp	r2, r0
 800042a:	d02a      	beq.n	8000482 <AVI_ParserInit+0xf2>
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800042c:	4872      	ldr	r0, [pc, #456]	@ (80005f8 <AVI_ParserInit+0x268>)
 800042e:	4282      	cmp	r2, r0
 8000430:	d047      	beq.n	80004c2 <AVI_ParserInit+0x132>
  for(i=0;i<size;i++)
 8000432:	3d04      	subs	r5, #4
 8000434:	d0cb      	beq.n	80003ce <AVI_ParserInit+0x3e>
 8000436:	2200      	movs	r2, #0
 8000438:	4611      	mov	r1, r2
 800043a:	e002      	b.n	8000442 <AVI_ParserInit+0xb2>
 800043c:	4295      	cmp	r5, r2
 800043e:	4611      	mov	r1, r2
 8000440:	d9c5      	bls.n	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 8000442:	5c58      	ldrb	r0, [r3, r1]
  for(i=0;i<size;i++)
 8000444:	3201      	adds	r2, #1
    if(buf[i] == id[0])
 8000446:	eb03 0c01 	add.w	ip, r3, r1
 800044a:	286d      	cmp	r0, #109	@ 0x6d
  for(i=0;i<size;i++)
 800044c:	b292      	uxth	r2, r2
    if(buf[i] == id[0])
 800044e:	d1f5      	bne.n	800043c <AVI_ParserInit+0xac>
      if(buf[i+1] == id[1])
 8000450:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8000454:	286f      	cmp	r0, #111	@ 0x6f
 8000456:	d1f1      	bne.n	800043c <AVI_ParserInit+0xac>
        if(buf[i+2] == id[2])  
 8000458:	f89c 0002 	ldrb.w	r0, [ip, #2]
 800045c:	2876      	cmp	r0, #118	@ 0x76
 800045e:	d1ed      	bne.n	800043c <AVI_ParserInit+0xac>
          if(buf[i+3] == id[3])
 8000460:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8000464:	2869      	cmp	r0, #105	@ 0x69
 8000466:	d1e9      	bne.n	800043c <AVI_ParserInit+0xac>
  if(offset == 0)
 8000468:	2900      	cmp	r1, #0
 800046a:	d0b0      	beq.n	80003ce <AVI_ParserInit+0x3e>
  if(pavi->aviInfo.SampleRate)
 800046c:	6963      	ldr	r3, [r4, #20]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d169      	bne.n	8000546 <AVI_ParserInit+0x1b6>
  pavi->CurrentImage=0;
 8000472:	2300      	movs	r3, #0
  pavi->FileSize= f_size(file);
 8000474:	68f2      	ldr	r2, [r6, #12]
  return  0;
 8000476:	4618      	mov	r0, r3
  pavi->FileSize= f_size(file);
 8000478:	6462      	str	r2, [r4, #68]	@ 0x44
  pavi->CurrentImage=0;
 800047a:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800047c:	b002      	add	sp, #8
 800047e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000482:	4a5e      	ldr	r2, [pc, #376]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000484:	6988      	ldr	r0, [r1, #24]
 8000486:	4290      	cmp	r0, r2
 8000488:	d1a1      	bne.n	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048a:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800048c:	485c      	ldr	r0, [pc, #368]	@ (8000600 <AVI_ParserInit+0x270>)
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048e:	3214      	adds	r2, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000490:	4f5c      	ldr	r7, [pc, #368]	@ (8000604 <AVI_ParserInit+0x274>)
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000492:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 8000494:	485c      	ldr	r0, [pc, #368]	@ (8000608 <AVI_ParserInit+0x278>)
 8000496:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000498:	5888      	ldr	r0, [r1, r2]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800049a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800049c:	42b8      	cmp	r0, r7
 800049e:	d196      	bne.n	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80004a0:	e9d2 7203 	ldrd	r7, r2, [r2, #12]
 80004a4:	e9c4 7203 	strd	r7, r2, [r4, #12]
    buf+=listheader->BlockSize+8;          
 80004a8:	684a      	ldr	r2, [r1, #4]
    if(listheader->ListID != AVI_LIST_ID)
 80004aa:	4f4f      	ldr	r7, [pc, #316]	@ (80005e8 <AVI_ParserInit+0x258>)
    buf+=listheader->BlockSize+8;          
 80004ac:	3208      	adds	r2, #8
    if(listheader->ListID != AVI_LIST_ID)
 80004ae:	f851 c002 	ldr.w	ip, [r1, r2]
    buf+=listheader->BlockSize+8;          
 80004b2:	440a      	add	r2, r1
    if(listheader->ListID != AVI_LIST_ID)
 80004b4:	45bc      	cmp	ip, r7
 80004b6:	d070      	beq.n	800059a <AVI_ParserInit+0x20a>
      pavi->aviInfo.SampleRate=0;          
 80004b8:	2200      	movs	r2, #0
 80004ba:	6162      	str	r2, [r4, #20]
      pavi->aviInfo.Channels=0;          
 80004bc:	8322      	strh	r2, [r4, #24]
      pavi->aviInfo.AudioType=0;          
 80004be:	83a2      	strh	r2, [r4, #28]
 80004c0:	e7b7      	b.n	8000432 <AVI_ParserInit+0xa2>
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c2:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c4:	4851      	ldr	r0, [pc, #324]	@ (800060c <AVI_ParserInit+0x27c>)
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c6:	3214      	adds	r2, #20
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c8:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004ca:	4851      	ldr	r0, [pc, #324]	@ (8000610 <AVI_ParserInit+0x280>)
    if(wavheader->BlockID != AVI_STRF_ID)
 80004cc:	f851 c002 	ldr.w	ip, [r1, r2]
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004d0:	440a      	add	r2, r1
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004d2:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(wavheader->BlockID != AVI_STRF_ID)
 80004d4:	484b      	ldr	r0, [pc, #300]	@ (8000604 <AVI_ParserInit+0x274>)
 80004d6:	4584      	cmp	ip, r0
 80004d8:	f47f af79 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004dc:	68d7      	ldr	r7, [r2, #12]
    buf+=listheader->BlockSize+8;          
 80004de:	6848      	ldr	r0, [r1, #4]
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004e0:	6167      	str	r7, [r4, #20]
    buf+=listheader->BlockSize+8;          
 80004e2:	3008      	adds	r0, #8
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004e4:	8957      	ldrh	r7, [r2, #10]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004e6:	8912      	ldrh	r2, [r2, #8]
    if(listheader->ListID != AVI_LIST_ID)
 80004e8:	f851 e000 	ldr.w	lr, [r1, r0]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004ec:	8327      	strh	r7, [r4, #24]
    if(listheader->ListID != AVI_LIST_ID)
 80004ee:	4f3e      	ldr	r7, [pc, #248]	@ (80005e8 <AVI_ParserInit+0x258>)
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004f0:	83a2      	strh	r2, [r4, #28]
    buf+=listheader->BlockSize+8;          
 80004f2:	180a      	adds	r2, r1, r0
    if(listheader->ListID != AVI_LIST_ID)
 80004f4:	45be      	cmp	lr, r7
 80004f6:	f47f af6a 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(listheader->ListType != AVI_STRL_ID)
 80004fa:	493d      	ldr	r1, [pc, #244]	@ (80005f0 <AVI_ParserInit+0x260>)
 80004fc:	6890      	ldr	r0, [r2, #8]
 80004fe:	4288      	cmp	r0, r1
 8000500:	f47f af65 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->BlockID != AVI_STRH_ID)
 8000504:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 8000508:	68d0      	ldr	r0, [r2, #12]
 800050a:	4288      	cmp	r0, r1
 800050c:	f47f af5f 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000510:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 8000514:	6950      	ldr	r0, [r2, #20]
 8000516:	f501 31fa 	add.w	r1, r1, #128000	@ 0x1f400
 800051a:	f201 1103 	addw	r1, r1, #259	@ 0x103
 800051e:	4288      	cmp	r0, r1
 8000520:	f47f af55 	bne.w	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000524:	6911      	ldr	r1, [r2, #16]
 8000526:	3114      	adds	r1, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000528:	5850      	ldr	r0, [r2, r1]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800052a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800052c:	4560      	cmp	r0, ip
 800052e:	f47f af4e 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000532:	4932      	ldr	r1, [pc, #200]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000534:	6990      	ldr	r0, [r2, #24]
 8000536:	4288      	cmp	r0, r1
 8000538:	f47f af49 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800053c:	e9d2 1203 	ldrd	r1, r2, [r2, #12]
 8000540:	e9c4 1203 	strd	r1, r2, [r4, #12]
 8000544:	e775      	b.n	8000432 <AVI_ParserInit+0xa2>
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000546:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
  for(i=0;i<size;i++)
 800054a:	2300      	movs	r3, #0
    if(buf[i] == id[0])
 800054c:	f898 0000 	ldrb.w	r0, [r8]
  for(i=0;i<size;i++)
 8000550:	4619      	mov	r1, r3
 8000552:	e003      	b.n	800055c <AVI_ParserInit+0x1cc>
 8000554:	429d      	cmp	r5, r3
 8000556:	4619      	mov	r1, r3
 8000558:	f67f af39 	bls.w	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 800055c:	f81c 2001 	ldrb.w	r2, [ip, r1]
  for(i=0;i<size;i++)
 8000560:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 8000562:	4282      	cmp	r2, r0
  for(i=0;i<size;i++)
 8000564:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000566:	d1f5      	bne.n	8000554 <AVI_ParserInit+0x1c4>
      if(buf[i+1] == id[1])
 8000568:	eb0c 0201 	add.w	r2, ip, r1
 800056c:	f898 e001 	ldrb.w	lr, [r8, #1]
 8000570:	7857      	ldrb	r7, [r2, #1]
 8000572:	4577      	cmp	r7, lr
 8000574:	d1ee      	bne.n	8000554 <AVI_ParserInit+0x1c4>
        if(buf[i+2] == id[2])  
 8000576:	f892 e002 	ldrb.w	lr, [r2, #2]
 800057a:	f898 7002 	ldrb.w	r7, [r8, #2]
 800057e:	45be      	cmp	lr, r7
 8000580:	d1e8      	bne.n	8000554 <AVI_ParserInit+0x1c4>
          if(buf[i+3] == id[3])
 8000582:	f892 e003 	ldrb.w	lr, [r2, #3]
 8000586:	f898 7003 	ldrb.w	r7, [r8, #3]
 800058a:	45be      	cmp	lr, r7
 800058c:	d1e2      	bne.n	8000554 <AVI_ParserInit+0x1c4>
    if(offset == 0)
 800058e:	2900      	cmp	r1, #0
 8000590:	f43f af1d 	beq.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000594:	8893      	ldrh	r3, [r2, #4]
 8000596:	8363      	strh	r3, [r4, #26]
 8000598:	e76b      	b.n	8000472 <AVI_ParserInit+0xe2>
      if(listheader->ListType != AVI_STRL_ID)
 800059a:	4915      	ldr	r1, [pc, #84]	@ (80005f0 <AVI_ParserInit+0x260>)
 800059c:	6897      	ldr	r7, [r2, #8]
 800059e:	428f      	cmp	r7, r1
 80005a0:	f47f af15 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->BlockID != AVI_STRH_ID)
 80005a4:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 80005a8:	68d7      	ldr	r7, [r2, #12]
 80005aa:	428f      	cmp	r7, r1
 80005ac:	f47f af0f 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 80005b0:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 80005b4:	6957      	ldr	r7, [r2, #20]
 80005b6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 80005ba:	31ee      	adds	r1, #238	@ 0xee
 80005bc:	428f      	cmp	r7, r1
 80005be:	f47f af06 	bne.w	80003ce <AVI_ParserInit+0x3e>
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c2:	6911      	ldr	r1, [r2, #16]
 80005c4:	3114      	adds	r1, #20
      if(wavheader->BlockID != AVI_STRF_ID)
 80005c6:	5857      	ldr	r7, [r2, r1]
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c8:	440a      	add	r2, r1
      if(wavheader->BlockID != AVI_STRF_ID)
 80005ca:	4287      	cmp	r7, r0
 80005cc:	f47f aeff 	bne.w	80003ce <AVI_ParserInit+0x3e>
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 80005d0:	68d1      	ldr	r1, [r2, #12]
 80005d2:	6161      	str	r1, [r4, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d4:	8951      	ldrh	r1, [r2, #10]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005d6:	8912      	ldrh	r2, [r2, #8]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d8:	8321      	strh	r1, [r4, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005da:	83a2      	strh	r2, [r4, #28]
 80005dc:	e729      	b.n	8000432 <AVI_ParserInit+0xa2>
 80005de:	bf00      	nop
 80005e0:	46464952 	.word	0x46464952
 80005e4:	20495641 	.word	0x20495641
 80005e8:	5453494c 	.word	0x5453494c
 80005ec:	6c726468 	.word	0x6c726468
 80005f0:	6c727473 	.word	0x6c727473
 80005f4:	73646976 	.word	0x73646976
 80005f8:	73647561 	.word	0x73647561
 80005fc:	47504a4d 	.word	0x47504a4d
 8000600:	0800ee8c 	.word	0x0800ee8c
 8000604:	66727473 	.word	0x66727473
 8000608:	0800ee94 	.word	0x0800ee94
 800060c:	0800ee9c 	.word	0x0800ee9c
 8000610:	0800eea4 	.word	0x0800eea4

08000614 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000616:	2300      	movs	r3, #0
{
 8000618:	b083      	sub	sp, #12
  
  if(pavi->CurrentImage== 0 )
 800061a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
{
 800061c:	4605      	mov	r5, r0
 800061e:	460e      	mov	r6, r1
 8000620:	4617      	mov	r7, r2
  uint32_t readSize = 0;
 8000622:	9301      	str	r3, [sp, #4]
  if(pavi->CurrentImage== 0 )
 8000624:	b164      	cbz	r4, 8000640 <AVI_GetFrame+0x2c>
    f_lseek(file, offset + 12 );
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000626:	8beb      	ldrh	r3, [r5, #30]
 8000628:	f246 4263 	movw	r2, #25699	@ 0x6463
 800062c:	4293      	cmp	r3, r2
 800062e:	d046      	beq.n	80006be <AVI_GetFrame+0xaa>

	}
    
    return AVI_VIDEO_FRAME;
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000630:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000634:	4293      	cmp	r3, r2
 8000636:	f000 808c 	beq.w	8000752 <AVI_GetFrame+0x13e>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
    
  }
  
  return 0;
 800063a:	2000      	movs	r0, #0
}
 800063c:	b003      	add	sp, #12
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(file, 0 ); /* Go to the file start */
 8000640:	4621      	mov	r1, r4
 8000642:	4630      	mov	r0, r6
 8000644:	f00d fd84 	bl	800e150 <f_lseek>
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 8000648:	ab01      	add	r3, sp, #4
 800064a:	4630      	mov	r0, r6
 800064c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	@ 0x34
 8000650:	f00d fbc4 	bl	800dddc <f_read>
  size-=4;
 8000654:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	@ 0x34
  for(i=0;i<size;i++)
 8000658:	3904      	subs	r1, #4
 800065a:	d01d      	beq.n	8000698 <AVI_GetFrame+0x84>
 800065c:	4623      	mov	r3, r4
 800065e:	e002      	b.n	8000666 <AVI_GetFrame+0x52>
 8000660:	4299      	cmp	r1, r3
 8000662:	461c      	mov	r4, r3
 8000664:	d918      	bls.n	8000698 <AVI_GetFrame+0x84>
    if(buf[i] == id[0])
 8000666:	f812 c004 	ldrb.w	ip, [r2, r4]
  for(i=0;i<size;i++)
 800066a:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 800066c:	f1bc 0f6d 	cmp.w	ip, #109	@ 0x6d
  for(i=0;i<size;i++)
 8000670:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000672:	d1f5      	bne.n	8000660 <AVI_GetFrame+0x4c>
      if(buf[i+1] == id[1])
 8000674:	1910      	adds	r0, r2, r4
 8000676:	f890 c001 	ldrb.w	ip, [r0, #1]
 800067a:	f1bc 0f6f 	cmp.w	ip, #111	@ 0x6f
 800067e:	d1ef      	bne.n	8000660 <AVI_GetFrame+0x4c>
        if(buf[i+2] == id[2])  
 8000680:	f890 c002 	ldrb.w	ip, [r0, #2]
 8000684:	f1bc 0f76 	cmp.w	ip, #118	@ 0x76
 8000688:	d1ea      	bne.n	8000660 <AVI_GetFrame+0x4c>
          if(buf[i+3] == id[3])
 800068a:	78c0      	ldrb	r0, [r0, #3]
 800068c:	2869      	cmp	r0, #105	@ 0x69
 800068e:	d1e7      	bne.n	8000660 <AVI_GetFrame+0x4c>
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000690:	1d23      	adds	r3, r4, #4
    f_lseek(file, offset + 12 );
 8000692:	f104 010c 	add.w	r1, r4, #12
 8000696:	e001      	b.n	800069c <AVI_GetFrame+0x88>
  for(i=0;i<size;i++)
 8000698:	210c      	movs	r1, #12
 800069a:	2304      	movs	r3, #4
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800069c:	441a      	add	r2, r3
    f_lseek(file, offset + 12 );
 800069e:	4630      	mov	r0, r6
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006a0:	8853      	ldrh	r3, [r2, #2]
 80006a2:	ba5b      	rev16	r3, r3
 80006a4:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006a6:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006a8:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 80006aa:	bf48      	it	mi
 80006ac:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006ae:	622b      	str	r3, [r5, #32]
    f_lseek(file, offset + 12 );
 80006b0:	f00d fd4e 	bl	800e150 <f_lseek>
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80006b4:	8beb      	ldrh	r3, [r5, #30]
 80006b6:	f246 4263 	movw	r2, #25699	@ 0x6463
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d1b8      	bne.n	8000630 <AVI_GetFrame+0x1c>
	if(skipFlag == 1)
 80006be:	2f01      	cmp	r7, #1
 80006c0:	d018      	beq.n	80006f4 <AVI_GetFrame+0xe0>
	else if(skipFlag == 2)
 80006c2:	2f02      	cmp	r7, #2
 80006c4:	d02d      	beq.n	8000722 <AVI_GetFrame+0x10e>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006c6:	6a29      	ldr	r1, [r5, #32]
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006c8:	ab01      	add	r3, sp, #4
 80006ca:	4630      	mov	r0, r6
 80006cc:	f101 0208 	add.w	r2, r1, #8
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006d0:	6329      	str	r1, [r5, #48]	@ 0x30
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006d2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80006d4:	f00d fb82 	bl	800dddc <f_read>
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 80006d8:	6a2a      	ldr	r2, [r5, #32]
 80006da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80006dc:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006de:	885a      	ldrh	r2, [r3, #2]
 80006e0:	ba52      	rev16	r2, r2
 80006e2:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006e4:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006e6:	07d9      	lsls	r1, r3, #31
 80006e8:	461a      	mov	r2, r3
 80006ea:	d518      	bpl.n	800071e <AVI_GetFrame+0x10a>
    pavi->aviInfo.StreamSize++;
 80006ec:	3301      	adds	r3, #1
 80006ee:	622b      	str	r3, [r5, #32]
    return AVI_VIDEO_FRAME;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7a3      	b.n	800063c <AVI_GetFrame+0x28>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006f4:	6a2b      	ldr	r3, [r5, #32]
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006f6:	4630      	mov	r0, r6
 80006f8:	69b1      	ldr	r1, [r6, #24]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006fa:	632b      	str	r3, [r5, #48]	@ 0x30
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006fc:	4419      	add	r1, r3
 80006fe:	f00d fd27 	bl	800e150 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000702:	ab01      	add	r3, sp, #4
 8000704:	2208      	movs	r2, #8
 8000706:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000708:	4630      	mov	r0, r6
 800070a:	f00d fb67 	bl	800dddc <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800070e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000710:	8853      	ldrh	r3, [r2, #2]
 8000712:	ba5b      	rev16	r3, r3
 8000714:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000716:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000718:	07dc      	lsls	r4, r3, #31
 800071a:	461a      	mov	r2, r3
 800071c:	d4e6      	bmi.n	80006ec <AVI_GetFrame+0xd8>
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800071e:	622a      	str	r2, [r5, #32]
 8000720:	e7e6      	b.n	80006f0 <AVI_GetFrame+0xdc>
		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 8000722:	69b3      	ldr	r3, [r6, #24]
 8000724:	4630      	mov	r0, r6
 8000726:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8000728:	3b10      	subs	r3, #16
 800072a:	1a59      	subs	r1, r3, r1
 800072c:	f00d fd10 	bl	800e150 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000730:	ab01      	add	r3, sp, #4
 8000732:	2208      	movs	r2, #8
 8000734:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000736:	4630      	mov	r0, r6
 8000738:	f00d fb50 	bl	800dddc <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800073c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800073e:	8853      	ldrh	r3, [r2, #2]
 8000740:	ba5b      	rev16	r3, r3
 8000742:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000744:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000746:	07d8      	lsls	r0, r3, #31
    pavi->aviInfo.StreamSize++;
 8000748:	bf48      	it	mi
 800074a:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800074c:	622b      	str	r3, [r5, #32]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800074e:	632b      	str	r3, [r5, #48]	@ 0x30
 8000750:	e7ce      	b.n	80006f0 <AVI_GetFrame+0xdc>
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000752:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000754:	ab01      	add	r3, sp, #4
 8000756:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8000758:	4630      	mov	r0, r6
 800075a:	3208      	adds	r2, #8
 800075c:	f00d fb3e 	bl	800dddc <f_read>
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000760:	6a2a      	ldr	r2, [r5, #32]
 8000762:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return AVI_AUDIO_FRAME;
 8000764:	2002      	movs	r0, #2
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000766:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000768:	885a      	ldrh	r2, [r3, #2]
 800076a:	ba52      	rev16	r2, r2
 800076c:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800076e:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000770:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 8000772:	bf48      	it	mi
 8000774:	3301      	addmi	r3, #1
 8000776:	622b      	str	r3, [r5, #32]
 8000778:	e760      	b.n	800063c <AVI_GetFrame+0x28>
 800077a:	bf00      	nop

0800077c <GC9A01_write_data.constprop.0>:
    GC9A01_set_chip_select(OFF);
    GC9A01_spi_tx(&cmd, sizeof(cmd), 0);
    GC9A01_set_chip_select(ON);
}

void GC9A01_write_data(uint8_t *data, size_t len) {
 800077c:	b538      	push	{r3, r4, r5, lr}
 800077e:	4c13      	ldr	r4, [pc, #76]	@ (80007cc <GC9A01_write_data.constprop.0+0x50>)
 8000780:	4605      	mov	r5, r0
	while(spi_dma_not_ready);
 8000782:	7823      	ldrb	r3, [r4, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1fc      	bne.n	8000782 <GC9A01_write_data.constprop.0+0x6>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2102      	movs	r1, #2
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <GC9A01_write_data.constprop.0+0x54>)
 800078e:	f005 faf5 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000792:	7823      	ldrb	r3, [r4, #0]
 8000794:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1fa      	bne.n	8000792 <GC9A01_write_data.constprop.0+0x16>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800079c:	2101      	movs	r1, #1
 800079e:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <GC9A01_write_data.constprop.0+0x54>)
 80007a0:	f005 faec 	bl	8005d7c <HAL_GPIO_WritePin>

	HAL_StatusTypeDef ret;


#ifdef DMA_MODE
	while(spi_dma_not_ready && !join);
 80007a4:	7823      	ldrb	r3, [r4, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1fc      	bne.n	80007a4 <GC9A01_write_data.constprop.0+0x28>
	spi_dma_not_ready = 1;
 80007aa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80007ac:	4629      	mov	r1, r5
 80007ae:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <GC9A01_write_data.constprop.0+0x58>)
	spi_dma_not_ready = 1;
 80007b0:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80007b2:	f00a faaf 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80007b6:	7823      	ldrb	r3, [r4, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1fc      	bne.n	80007b6 <GC9A01_write_data.constprop.0+0x3a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <GC9A01_write_data.constprop.0+0x54>)
 80007c0:	4611      	mov	r1, r2
}
 80007c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007c6:	f005 bad9 	b.w	8005d7c <HAL_GPIO_WritePin>
 80007ca:	bf00      	nop
 80007cc:	2400008c 	.word	0x2400008c
 80007d0:	58020400 	.word	0x58020400
 80007d4:	24000218 	.word	0x24000218

080007d8 <GC9A01_set_data_command>:
	while(spi_dma_not_ready);
 80007d8:	4905      	ldr	r1, [pc, #20]	@ (80007f0 <GC9A01_set_data_command+0x18>)
void GC9A01_set_data_command(uint8_t val) {
 80007da:	4602      	mov	r2, r0
	while(spi_dma_not_ready);
 80007dc:	780b      	ldrb	r3, [r1, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1fc      	bne.n	80007dc <GC9A01_set_data_command+0x4>
    if (val==0) {
 80007e2:	b102      	cbz	r2, 80007e6 <GC9A01_set_data_command+0xe>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2102      	movs	r1, #2
 80007e8:	4802      	ldr	r0, [pc, #8]	@ (80007f4 <GC9A01_set_data_command+0x1c>)
 80007ea:	f005 bac7 	b.w	8005d7c <HAL_GPIO_WritePin>
 80007ee:	bf00      	nop
 80007f0:	2400008c 	.word	0x2400008c
 80007f4:	58020400 	.word	0x58020400

080007f8 <GC9A01_set_chip_select>:
	while(spi_dma_not_ready);
 80007f8:	4907      	ldr	r1, [pc, #28]	@ (8000818 <GC9A01_set_chip_select+0x20>)
void GC9A01_set_chip_select(uint8_t val) {
 80007fa:	4602      	mov	r2, r0
	while(spi_dma_not_ready);
 80007fc:	780b      	ldrb	r3, [r1, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1fc      	bne.n	80007fc <GC9A01_set_chip_select+0x4>
    if (val==0) {
 8000802:	b91a      	cbnz	r2, 800080c <GC9A01_set_chip_select+0x14>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000804:	2101      	movs	r1, #1
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <GC9A01_set_chip_select+0x24>)
 8000808:	f005 bab8 	b.w	8005d7c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	4803      	ldr	r0, [pc, #12]	@ (800081c <GC9A01_set_chip_select+0x24>)
 8000810:	4611      	mov	r1, r2
 8000812:	f005 bab3 	b.w	8005d7c <HAL_GPIO_WritePin>
 8000816:	bf00      	nop
 8000818:	2400008c 	.word	0x2400008c
 800081c:	58020400 	.word	0x58020400

08000820 <GC9A01_write_command>:
void GC9A01_write_command(uint8_t cmd) {
 8000820:	b510      	push	{r4, lr}
 8000822:	4c15      	ldr	r4, [pc, #84]	@ (8000878 <GC9A01_write_command+0x58>)
 8000824:	b082      	sub	sp, #8
 8000826:	f88d 0007 	strb.w	r0, [sp, #7]
	while(spi_dma_not_ready);
 800082a:	7823      	ldrb	r3, [r4, #0]
 800082c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1fa      	bne.n	800082a <GC9A01_write_command+0xa>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000834:	2102      	movs	r1, #2
 8000836:	4811      	ldr	r0, [pc, #68]	@ (800087c <GC9A01_write_command+0x5c>)
 8000838:	f005 faa0 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800083c:	7823      	ldrb	r3, [r4, #0]
 800083e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1fa      	bne.n	800083c <GC9A01_write_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000846:	2101      	movs	r1, #1
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <GC9A01_write_command+0x5c>)
 800084a:	f005 fa97 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800084e:	7823      	ldrb	r3, [r4, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1fc      	bne.n	800084e <GC9A01_write_command+0x2e>
	spi_dma_not_ready = 1;
 8000854:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000856:	f10d 0107 	add.w	r1, sp, #7
 800085a:	4809      	ldr	r0, [pc, #36]	@ (8000880 <GC9A01_write_command+0x60>)
	spi_dma_not_ready = 1;
 800085c:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800085e:	f00a fa59 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000862:	7823      	ldrb	r3, [r4, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1fc      	bne.n	8000862 <GC9A01_write_command+0x42>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	4804      	ldr	r0, [pc, #16]	@ (800087c <GC9A01_write_command+0x5c>)
 800086c:	4611      	mov	r1, r2
 800086e:	f005 fa85 	bl	8005d7c <HAL_GPIO_WritePin>
}
 8000872:	b002      	add	sp, #8
 8000874:	bd10      	pop	{r4, pc}
 8000876:	bf00      	nop
 8000878:	2400008c 	.word	0x2400008c
 800087c:	58020400 	.word	0x58020400
 8000880:	24000218 	.word	0x24000218

08000884 <GC9A01_init>:
void GC9A01_init(void) {
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	4cbf      	ldr	r4, [pc, #764]	@ (8000b84 <GC9A01_init+0x300>)
 8000888:	b082      	sub	sp, #8
	while(spi_dma_not_ready);
 800088a:	7823      	ldrb	r3, [r4, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1fc      	bne.n	800088a <GC9A01_init+0x6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000890:	2201      	movs	r2, #1
 8000892:	48bd      	ldr	r0, [pc, #756]	@ (8000b88 <GC9A01_init+0x304>)
 8000894:	4611      	mov	r1, r2
 8000896:	f005 fa71 	bl	8005d7c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800089a:	2005      	movs	r0, #5
 800089c:	f003 faa8 	bl	8003df0 <HAL_Delay>
	while(spi_dma_not_ready);
 80008a0:	7823      	ldrb	r3, [r4, #0]
 80008a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1fa      	bne.n	80008a0 <GC9A01_init+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 80008aa:	48b7      	ldr	r0, [pc, #732]	@ (8000b88 <GC9A01_init+0x304>)
 80008ac:	2104      	movs	r1, #4
 80008ae:	f005 fa65 	bl	8005d7c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f003 fa9c 	bl	8003df0 <HAL_Delay>
	while(spi_dma_not_ready);
 80008b8:	7823      	ldrb	r3, [r4, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1fc      	bne.n	80008b8 <GC9A01_init+0x34>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2104      	movs	r1, #4
 80008c2:	48b1      	ldr	r0, [pc, #708]	@ (8000b88 <GC9A01_init+0x304>)
 80008c4:	2514      	movs	r5, #20
 80008c6:	f005 fa59 	bl	8005d7c <HAL_GPIO_WritePin>
    HAL_Delay(120);
 80008ca:	2078      	movs	r0, #120	@ 0x78
 80008cc:	f003 fa90 	bl	8003df0 <HAL_Delay>
    GC9A01_write_command(0xEF);
 80008d0:	20ef      	movs	r0, #239	@ 0xef
 80008d2:	f7ff ffa5 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 80008d6:	20eb      	movs	r0, #235	@ 0xeb
 80008d8:	f7ff ffa2 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_data(&val, sizeof(val));
 80008dc:	f10d 0007 	add.w	r0, sp, #7
 80008e0:	f88d 5007 	strb.w	r5, [sp, #7]
 80008e4:	f7ff ff4a 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xFE);
 80008e8:	20fe      	movs	r0, #254	@ 0xfe
 80008ea:	f7ff ff99 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 80008ee:	20ef      	movs	r0, #239	@ 0xef
 80008f0:	f7ff ff96 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 80008f4:	20eb      	movs	r0, #235	@ 0xeb
 80008f6:	f7ff ff93 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80008fa:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 80008fe:	7823      	ldrb	r3, [r4, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1fc      	bne.n	80008fe <GC9A01_init+0x7a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2102      	movs	r1, #2
 8000908:	489f      	ldr	r0, [pc, #636]	@ (8000b88 <GC9A01_init+0x304>)
 800090a:	f005 fa37 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800090e:	7823      	ldrb	r3, [r4, #0]
 8000910:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1fa      	bne.n	800090e <GC9A01_init+0x8a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000918:	2101      	movs	r1, #1
 800091a:	489b      	ldr	r0, [pc, #620]	@ (8000b88 <GC9A01_init+0x304>)
 800091c:	f005 fa2e 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000920:	7823      	ldrb	r3, [r4, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1fc      	bne.n	8000920 <GC9A01_init+0x9c>
	spi_dma_not_ready = 1;
 8000926:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000928:	f10d 0107 	add.w	r1, sp, #7
 800092c:	4897      	ldr	r0, [pc, #604]	@ (8000b8c <GC9A01_init+0x308>)
	spi_dma_not_ready = 1;
 800092e:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000930:	f00a f9f0 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000934:	7823      	ldrb	r3, [r4, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1fc      	bne.n	8000934 <GC9A01_init+0xb0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	4892      	ldr	r0, [pc, #584]	@ (8000b88 <GC9A01_init+0x304>)
 800093e:	4611      	mov	r1, r2
 8000940:	f005 fa1c 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x84);
 8000944:	2084      	movs	r0, #132	@ 0x84
 8000946:	f7ff ff6b 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800094a:	2340      	movs	r3, #64	@ 0x40
    GC9A01_write_data(&val, sizeof(val));
 800094c:	f10d 0007 	add.w	r0, sp, #7
 8000950:	f88d 3007 	strb.w	r3, [sp, #7]
 8000954:	f7ff ff12 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x85);
 8000958:	2085      	movs	r0, #133	@ 0x85
 800095a:	f7ff ff61 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800095e:	23ff      	movs	r3, #255	@ 0xff
 8000960:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000964:	7823      	ldrb	r3, [r4, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1fc      	bne.n	8000964 <GC9A01_init+0xe0>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2102      	movs	r1, #2
 800096e:	4886      	ldr	r0, [pc, #536]	@ (8000b88 <GC9A01_init+0x304>)
 8000970:	f005 fa04 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000974:	7823      	ldrb	r3, [r4, #0]
 8000976:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1fa      	bne.n	8000974 <GC9A01_init+0xf0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800097e:	2101      	movs	r1, #1
 8000980:	4881      	ldr	r0, [pc, #516]	@ (8000b88 <GC9A01_init+0x304>)
 8000982:	f005 f9fb 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000986:	7823      	ldrb	r3, [r4, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1fc      	bne.n	8000986 <GC9A01_init+0x102>
	spi_dma_not_ready = 1;
 800098c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800098e:	f10d 0107 	add.w	r1, sp, #7
 8000992:	487e      	ldr	r0, [pc, #504]	@ (8000b8c <GC9A01_init+0x308>)
	spi_dma_not_ready = 1;
 8000994:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000996:	f00a f9bd 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800099a:	7823      	ldrb	r3, [r4, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1fc      	bne.n	800099a <GC9A01_init+0x116>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	4879      	ldr	r0, [pc, #484]	@ (8000b88 <GC9A01_init+0x304>)
 80009a4:	25ff      	movs	r5, #255	@ 0xff
 80009a6:	4611      	mov	r1, r2
 80009a8:	f005 f9e8 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x86);
 80009ac:	2086      	movs	r0, #134	@ 0x86
 80009ae:	f7ff ff37 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_data(&val, sizeof(val));
 80009b2:	f10d 0007 	add.w	r0, sp, #7
 80009b6:	f88d 5007 	strb.w	r5, [sp, #7]
 80009ba:	f7ff fedf 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x87);
 80009be:	2087      	movs	r0, #135	@ 0x87
 80009c0:	f7ff ff2e 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 80009c4:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 80009c8:	7823      	ldrb	r3, [r4, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d1fc      	bne.n	80009c8 <GC9A01_init+0x144>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2102      	movs	r1, #2
 80009d2:	486d      	ldr	r0, [pc, #436]	@ (8000b88 <GC9A01_init+0x304>)
 80009d4:	f005 f9d2 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80009d8:	7823      	ldrb	r3, [r4, #0]
 80009da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1fa      	bne.n	80009d8 <GC9A01_init+0x154>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80009e2:	2101      	movs	r1, #1
 80009e4:	4868      	ldr	r0, [pc, #416]	@ (8000b88 <GC9A01_init+0x304>)
 80009e6:	f005 f9c9 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80009ea:	7823      	ldrb	r3, [r4, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1fc      	bne.n	80009ea <GC9A01_init+0x166>
	spi_dma_not_ready = 1;
 80009f0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80009f2:	f10d 0107 	add.w	r1, sp, #7
 80009f6:	4865      	ldr	r0, [pc, #404]	@ (8000b8c <GC9A01_init+0x308>)
	spi_dma_not_ready = 1;
 80009f8:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80009fa:	f00a f98b 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80009fe:	7823      	ldrb	r3, [r4, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1fc      	bne.n	80009fe <GC9A01_init+0x17a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	4860      	ldr	r0, [pc, #384]	@ (8000b88 <GC9A01_init+0x304>)
 8000a08:	4611      	mov	r1, r2
 8000a0a:	f005 f9b7 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x88);
 8000a0e:	2088      	movs	r0, #136	@ 0x88
 8000a10:	f7ff ff06 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000a14:	230a      	movs	r3, #10
    GC9A01_write_data(&val, sizeof(val));
 8000a16:	f10d 0007 	add.w	r0, sp, #7
 8000a1a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a1e:	f7ff fead 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x89);
 8000a22:	2089      	movs	r0, #137	@ 0x89
 8000a24:	f7ff fefc 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000a28:	2321      	movs	r3, #33	@ 0x21
 8000a2a:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000a2e:	7823      	ldrb	r3, [r4, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1fc      	bne.n	8000a2e <GC9A01_init+0x1aa>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2102      	movs	r1, #2
 8000a38:	4853      	ldr	r0, [pc, #332]	@ (8000b88 <GC9A01_init+0x304>)
 8000a3a:	f005 f99f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000a3e:	7823      	ldrb	r3, [r4, #0]
 8000a40:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1fa      	bne.n	8000a3e <GC9A01_init+0x1ba>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	484f      	ldr	r0, [pc, #316]	@ (8000b88 <GC9A01_init+0x304>)
 8000a4c:	f005 f996 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000a50:	7823      	ldrb	r3, [r4, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1fc      	bne.n	8000a50 <GC9A01_init+0x1cc>
	spi_dma_not_ready = 1;
 8000a56:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000a58:	f10d 0107 	add.w	r1, sp, #7
 8000a5c:	484b      	ldr	r0, [pc, #300]	@ (8000b8c <GC9A01_init+0x308>)
	spi_dma_not_ready = 1;
 8000a5e:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000a60:	f00a f958 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1fa      	bne.n	8000a64 <GC9A01_init+0x1e0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4845      	ldr	r0, [pc, #276]	@ (8000b88 <GC9A01_init+0x304>)
 8000a72:	4611      	mov	r1, r2
 8000a74:	f005 f982 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8A);
 8000a78:	208a      	movs	r0, #138	@ 0x8a
 8000a7a:	f7ff fed1 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000a7e:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8000a82:	7823      	ldrb	r3, [r4, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1fc      	bne.n	8000a82 <GC9A01_init+0x1fe>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	483e      	ldr	r0, [pc, #248]	@ (8000b88 <GC9A01_init+0x304>)
 8000a8e:	f005 f975 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000a92:	7823      	ldrb	r3, [r4, #0]
 8000a94:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1fa      	bne.n	8000a92 <GC9A01_init+0x20e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	483a      	ldr	r0, [pc, #232]	@ (8000b88 <GC9A01_init+0x304>)
 8000aa0:	f005 f96c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000aa4:	7823      	ldrb	r3, [r4, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1fc      	bne.n	8000aa4 <GC9A01_init+0x220>
	spi_dma_not_ready = 1;
 8000aaa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000aac:	f10d 0107 	add.w	r1, sp, #7
 8000ab0:	4836      	ldr	r0, [pc, #216]	@ (8000b8c <GC9A01_init+0x308>)
	spi_dma_not_ready = 1;
 8000ab2:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000ab4:	f00a f92e 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000ab8:	7823      	ldrb	r3, [r4, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1fc      	bne.n	8000ab8 <GC9A01_init+0x234>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4831      	ldr	r0, [pc, #196]	@ (8000b88 <GC9A01_init+0x304>)
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	f005 f95a 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8B);
 8000ac8:	208b      	movs	r0, #139	@ 0x8b
 8000aca:	f7ff fea9 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000ace:	2380      	movs	r3, #128	@ 0x80
    GC9A01_write_data(&val, sizeof(val));
 8000ad0:	f10d 0007 	add.w	r0, sp, #7
 8000ad4:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ad8:	f7ff fe50 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x8C);
 8000adc:	208c      	movs	r0, #140	@ 0x8c
 8000ade:	f7ff fe9f 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000ae8:	7823      	ldrb	r3, [r4, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1fc      	bne.n	8000ae8 <GC9A01_init+0x264>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2102      	movs	r1, #2
 8000af2:	4825      	ldr	r0, [pc, #148]	@ (8000b88 <GC9A01_init+0x304>)
 8000af4:	f005 f942 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000af8:	7823      	ldrb	r3, [r4, #0]
 8000afa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1fa      	bne.n	8000af8 <GC9A01_init+0x274>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b02:	2101      	movs	r1, #1
 8000b04:	4820      	ldr	r0, [pc, #128]	@ (8000b88 <GC9A01_init+0x304>)
 8000b06:	f005 f939 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000b0a:	7823      	ldrb	r3, [r4, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1fc      	bne.n	8000b0a <GC9A01_init+0x286>
	spi_dma_not_ready = 1;
 8000b10:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000b12:	f10d 0107 	add.w	r1, sp, #7
 8000b16:	481d      	ldr	r0, [pc, #116]	@ (8000b8c <GC9A01_init+0x308>)
	spi_dma_not_ready = 1;
 8000b18:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000b1a:	f00a f8fb 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000b1e:	7823      	ldrb	r3, [r4, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1fc      	bne.n	8000b1e <GC9A01_init+0x29a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <GC9A01_init+0x304>)
 8000b28:	4611      	mov	r1, r2
 8000b2a:	f005 f927 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8D);
 8000b2e:	208d      	movs	r0, #141	@ 0x8d
 8000b30:	f7ff fe76 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 8000b34:	2301      	movs	r3, #1
 8000b36:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000b3a:	7823      	ldrb	r3, [r4, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1fc      	bne.n	8000b3a <GC9A01_init+0x2b6>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	4810      	ldr	r0, [pc, #64]	@ (8000b88 <GC9A01_init+0x304>)
 8000b46:	f005 f919 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000b4a:	7823      	ldrb	r3, [r4, #0]
 8000b4c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1fa      	bne.n	8000b4a <GC9A01_init+0x2c6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b54:	2101      	movs	r1, #1
 8000b56:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <GC9A01_init+0x304>)
 8000b58:	f005 f910 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1fc      	bne.n	8000b5c <GC9A01_init+0x2d8>
	spi_dma_not_ready = 1;
 8000b62:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000b64:	f10d 0107 	add.w	r1, sp, #7
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <GC9A01_init+0x308>)
	spi_dma_not_ready = 1;
 8000b6a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000b6c:	f00a f8d2 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000b70:	7823      	ldrb	r3, [r4, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1fc      	bne.n	8000b70 <GC9A01_init+0x2ec>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <GC9A01_init+0x304>)
 8000b7a:	25ff      	movs	r5, #255	@ 0xff
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	f005 f8fd 	bl	8005d7c <HAL_GPIO_WritePin>
 8000b82:	e005      	b.n	8000b90 <GC9A01_init+0x30c>
 8000b84:	2400008c 	.word	0x2400008c
 8000b88:	58020400 	.word	0x58020400
 8000b8c:	24000218 	.word	0x24000218
    GC9A01_write_command(0x8E);
 8000b90:	208e      	movs	r0, #142	@ 0x8e
 8000b92:	f7ff fe45 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_data(&val, sizeof(val));
 8000b96:	f10d 0007 	add.w	r0, sp, #7
 8000b9a:	f88d 5007 	strb.w	r5, [sp, #7]
 8000b9e:	f7ff fded 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x8F);
 8000ba2:	208f      	movs	r0, #143	@ 0x8f
 8000ba4:	f7ff fe3c 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000ba8:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8000bac:	7823      	ldrb	r3, [r4, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1fc      	bne.n	8000bac <GC9A01_init+0x328>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	48b8      	ldr	r0, [pc, #736]	@ (8000e98 <GC9A01_init+0x614>)
 8000bb8:	f005 f8e0 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000bbc:	7823      	ldrb	r3, [r4, #0]
 8000bbe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1fa      	bne.n	8000bbc <GC9A01_init+0x338>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	48b3      	ldr	r0, [pc, #716]	@ (8000e98 <GC9A01_init+0x614>)
 8000bca:	f005 f8d7 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000bce:	7823      	ldrb	r3, [r4, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1fc      	bne.n	8000bce <GC9A01_init+0x34a>
	spi_dma_not_ready = 1;
 8000bd4:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000bd6:	f10d 0107 	add.w	r1, sp, #7
 8000bda:	48b0      	ldr	r0, [pc, #704]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000bdc:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000bde:	f00a f899 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000be2:	7823      	ldrb	r3, [r4, #0]
 8000be4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1fa      	bne.n	8000be2 <GC9A01_init+0x35e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	48aa      	ldr	r0, [pc, #680]	@ (8000e98 <GC9A01_init+0x614>)
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	f005 f8c3 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xB6);
 8000bf6:	20b6      	movs	r0, #182	@ 0xb6
 8000bf8:	f7ff fe12 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000bfc:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8000c00:	7823      	ldrb	r3, [r4, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1fc      	bne.n	8000c00 <GC9A01_init+0x37c>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2102      	movs	r1, #2
 8000c0a:	48a3      	ldr	r0, [pc, #652]	@ (8000e98 <GC9A01_init+0x614>)
 8000c0c:	f005 f8b6 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000c10:	7823      	ldrb	r3, [r4, #0]
 8000c12:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1fa      	bne.n	8000c10 <GC9A01_init+0x38c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	489e      	ldr	r0, [pc, #632]	@ (8000e98 <GC9A01_init+0x614>)
 8000c1e:	f005 f8ad 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000c22:	7823      	ldrb	r3, [r4, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1fc      	bne.n	8000c22 <GC9A01_init+0x39e>
	spi_dma_not_ready = 1;
 8000c28:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c2a:	f10d 0107 	add.w	r1, sp, #7
 8000c2e:	489b      	ldr	r0, [pc, #620]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000c30:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c32:	f00a f86f 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000c36:	7823      	ldrb	r3, [r4, #0]
 8000c38:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1fa      	bne.n	8000c36 <GC9A01_init+0x3b2>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	4895      	ldr	r0, [pc, #596]	@ (8000e98 <GC9A01_init+0x614>)
 8000c44:	4611      	mov	r1, r2
 8000c46:	f005 f899 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x00);
 8000c4a:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8000c4e:	7823      	ldrb	r3, [r4, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1fc      	bne.n	8000c4e <GC9A01_init+0x3ca>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2102      	movs	r1, #2
 8000c58:	488f      	ldr	r0, [pc, #572]	@ (8000e98 <GC9A01_init+0x614>)
 8000c5a:	f005 f88f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000c5e:	7823      	ldrb	r3, [r4, #0]
 8000c60:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1fa      	bne.n	8000c5e <GC9A01_init+0x3da>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	488b      	ldr	r0, [pc, #556]	@ (8000e98 <GC9A01_init+0x614>)
 8000c6c:	f005 f886 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000c70:	7823      	ldrb	r3, [r4, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1fc      	bne.n	8000c70 <GC9A01_init+0x3ec>
	spi_dma_not_ready = 1;
 8000c76:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c78:	f10d 0107 	add.w	r1, sp, #7
 8000c7c:	4887      	ldr	r0, [pc, #540]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000c7e:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c80:	f00a f848 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000c84:	7823      	ldrb	r3, [r4, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1fc      	bne.n	8000c84 <GC9A01_init+0x400>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4882      	ldr	r0, [pc, #520]	@ (8000e98 <GC9A01_init+0x614>)
 8000c8e:	4611      	mov	r1, r2
 8000c90:	f005 f874 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x36);
 8000c94:	2036      	movs	r0, #54	@ 0x36
 8000c96:	f7ff fdc3 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000c9a:	2318      	movs	r3, #24
    GC9A01_write_data(&val, sizeof(val));
 8000c9c:	f10d 0007 	add.w	r0, sp, #7
 8000ca0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ca4:	f7ff fd6a 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(COLOR_MODE);
 8000ca8:	203a      	movs	r0, #58	@ 0x3a
 8000caa:	f7ff fdb9 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000cae:	2305      	movs	r3, #5
 8000cb0:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000cb4:	7823      	ldrb	r3, [r4, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1fc      	bne.n	8000cb4 <GC9A01_init+0x430>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4876      	ldr	r0, [pc, #472]	@ (8000e98 <GC9A01_init+0x614>)
 8000cc0:	f005 f85c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000cc4:	7823      	ldrb	r3, [r4, #0]
 8000cc6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1fa      	bne.n	8000cc4 <GC9A01_init+0x440>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4871      	ldr	r0, [pc, #452]	@ (8000e98 <GC9A01_init+0x614>)
 8000cd2:	f005 f853 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000cd6:	7823      	ldrb	r3, [r4, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1fc      	bne.n	8000cd6 <GC9A01_init+0x452>
	spi_dma_not_ready = 1;
 8000cdc:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000cde:	f10d 0107 	add.w	r1, sp, #7
 8000ce2:	486e      	ldr	r0, [pc, #440]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000ce4:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000ce6:	f00a f815 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000cea:	7823      	ldrb	r3, [r4, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1fc      	bne.n	8000cea <GC9A01_init+0x466>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4869      	ldr	r0, [pc, #420]	@ (8000e98 <GC9A01_init+0x614>)
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	f005 f841 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x90);
 8000cfa:	2090      	movs	r0, #144	@ 0x90
 8000cfc:	f7ff fd90 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000d00:	2308      	movs	r3, #8
 8000d02:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000d06:	7823      	ldrb	r3, [r4, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1fc      	bne.n	8000d06 <GC9A01_init+0x482>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4861      	ldr	r0, [pc, #388]	@ (8000e98 <GC9A01_init+0x614>)
 8000d12:	f005 f833 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000d16:	7823      	ldrb	r3, [r4, #0]
 8000d18:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1fa      	bne.n	8000d16 <GC9A01_init+0x492>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d20:	2101      	movs	r1, #1
 8000d22:	485d      	ldr	r0, [pc, #372]	@ (8000e98 <GC9A01_init+0x614>)
 8000d24:	f005 f82a 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000d28:	7823      	ldrb	r3, [r4, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1fc      	bne.n	8000d28 <GC9A01_init+0x4a4>
	spi_dma_not_ready = 1;
 8000d2e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000d30:	f10d 0107 	add.w	r1, sp, #7
 8000d34:	4859      	ldr	r0, [pc, #356]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000d36:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000d38:	f009 ffec 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000d3c:	7823      	ldrb	r3, [r4, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1fc      	bne.n	8000d3c <GC9A01_init+0x4b8>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	4854      	ldr	r0, [pc, #336]	@ (8000e98 <GC9A01_init+0x614>)
 8000d46:	4611      	mov	r1, r2
 8000d48:	f005 f818 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000d52:	7823      	ldrb	r3, [r4, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1fc      	bne.n	8000d52 <GC9A01_init+0x4ce>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	484e      	ldr	r0, [pc, #312]	@ (8000e98 <GC9A01_init+0x614>)
 8000d5e:	f005 f80d 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000d62:	7823      	ldrb	r3, [r4, #0]
 8000d64:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1fa      	bne.n	8000d62 <GC9A01_init+0x4de>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	484a      	ldr	r0, [pc, #296]	@ (8000e98 <GC9A01_init+0x614>)
 8000d70:	f005 f804 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000d74:	7823      	ldrb	r3, [r4, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1fc      	bne.n	8000d74 <GC9A01_init+0x4f0>
	spi_dma_not_ready = 1;
 8000d7a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000d7c:	f10d 0107 	add.w	r1, sp, #7
 8000d80:	4846      	ldr	r0, [pc, #280]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000d82:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000d84:	f009 ffc6 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000d88:	7823      	ldrb	r3, [r4, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1fc      	bne.n	8000d88 <GC9A01_init+0x504>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4841      	ldr	r0, [pc, #260]	@ (8000e98 <GC9A01_init+0x614>)
 8000d92:	4611      	mov	r1, r2
 8000d94:	f004 fff2 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8000d98:	2308      	movs	r3, #8
 8000d9a:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000d9e:	7823      	ldrb	r3, [r4, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1fc      	bne.n	8000d9e <GC9A01_init+0x51a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2102      	movs	r1, #2
 8000da8:	483b      	ldr	r0, [pc, #236]	@ (8000e98 <GC9A01_init+0x614>)
 8000daa:	f004 ffe7 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000dae:	7823      	ldrb	r3, [r4, #0]
 8000db0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1fa      	bne.n	8000dae <GC9A01_init+0x52a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000db8:	2101      	movs	r1, #1
 8000dba:	4837      	ldr	r0, [pc, #220]	@ (8000e98 <GC9A01_init+0x614>)
 8000dbc:	f004 ffde 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000dc0:	7823      	ldrb	r3, [r4, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1fc      	bne.n	8000dc0 <GC9A01_init+0x53c>
	spi_dma_not_ready = 1;
 8000dc6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000dc8:	f10d 0107 	add.w	r1, sp, #7
 8000dcc:	4833      	ldr	r0, [pc, #204]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000dce:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000dd0:	f009 ffa0 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000dd4:	7823      	ldrb	r3, [r4, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1fc      	bne.n	8000dd4 <GC9A01_init+0x550>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	482e      	ldr	r0, [pc, #184]	@ (8000e98 <GC9A01_init+0x614>)
 8000dde:	4611      	mov	r1, r2
 8000de0:	f004 ffcc 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8000de4:	2308      	movs	r3, #8
 8000de6:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000dea:	7823      	ldrb	r3, [r4, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1fc      	bne.n	8000dea <GC9A01_init+0x566>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2102      	movs	r1, #2
 8000df4:	4828      	ldr	r0, [pc, #160]	@ (8000e98 <GC9A01_init+0x614>)
 8000df6:	f004 ffc1 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000dfa:	7823      	ldrb	r3, [r4, #0]
 8000dfc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1fa      	bne.n	8000dfa <GC9A01_init+0x576>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000e04:	2101      	movs	r1, #1
 8000e06:	4824      	ldr	r0, [pc, #144]	@ (8000e98 <GC9A01_init+0x614>)
 8000e08:	f004 ffb8 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000e0c:	7823      	ldrb	r3, [r4, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1fc      	bne.n	8000e0c <GC9A01_init+0x588>
	spi_dma_not_ready = 1;
 8000e12:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000e14:	f10d 0107 	add.w	r1, sp, #7
 8000e18:	4820      	ldr	r0, [pc, #128]	@ (8000e9c <GC9A01_init+0x618>)
	spi_dma_not_ready = 1;
 8000e1a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000e1c:	f009 ff7a 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000e20:	7823      	ldrb	r3, [r4, #0]
 8000e22:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1fa      	bne.n	8000e20 <GC9A01_init+0x59c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	481a      	ldr	r0, [pc, #104]	@ (8000e98 <GC9A01_init+0x614>)
 8000e2e:	4611      	mov	r1, r2
 8000e30:	f004 ffa4 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xBD);
 8000e34:	20bd      	movs	r0, #189	@ 0xbd
 8000e36:	f7ff fcf3 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000e3a:	2306      	movs	r3, #6
    GC9A01_write_data(&val, sizeof(val));
 8000e3c:	f10d 0007 	add.w	r0, sp, #7
 8000e40:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e44:	f7ff fc9a 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xBC);
 8000e48:	20bc      	movs	r0, #188	@ 0xbc
 8000e4a:	f7ff fce9 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_data(&val, sizeof(val));
 8000e4e:	f10d 0007 	add.w	r0, sp, #7
 8000e52:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e56:	f7ff fc91 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xFF);
 8000e5a:	20ff      	movs	r0, #255	@ 0xff
 8000e5c:	f7ff fce0 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000e60:	2360      	movs	r3, #96	@ 0x60
    GC9A01_write_data(&val, sizeof(val));
 8000e62:	f10d 0007 	add.w	r0, sp, #7
 8000e66:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e6a:	f7ff fc87 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x01);
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000e74:	7823      	ldrb	r3, [r4, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1fc      	bne.n	8000e74 <GC9A01_init+0x5f0>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <GC9A01_init+0x614>)
 8000e80:	f004 ff7c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000e84:	7823      	ldrb	r3, [r4, #0]
 8000e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1fa      	bne.n	8000e84 <GC9A01_init+0x600>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4801      	ldr	r0, [pc, #4]	@ (8000e98 <GC9A01_init+0x614>)
 8000e92:	f004 ff73 	bl	8005d7c <HAL_GPIO_WritePin>
 8000e96:	e003      	b.n	8000ea0 <GC9A01_init+0x61c>
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	24000218 	.word	0x24000218
	while(spi_dma_not_ready && !join);
 8000ea0:	7823      	ldrb	r3, [r4, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1fc      	bne.n	8000ea0 <GC9A01_init+0x61c>
	spi_dma_not_ready = 1;
 8000ea6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000ea8:	f10d 0107 	add.w	r1, sp, #7
 8000eac:	48bb      	ldr	r0, [pc, #748]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 8000eae:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000eb0:	f009 ff30 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000eb4:	7823      	ldrb	r3, [r4, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1fc      	bne.n	8000eb4 <GC9A01_init+0x630>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	48b8      	ldr	r0, [pc, #736]	@ (80011a0 <GC9A01_init+0x91c>)
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	f004 ff5c 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x04);
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000eca:	7823      	ldrb	r3, [r4, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1fc      	bne.n	8000eca <GC9A01_init+0x646>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	48b2      	ldr	r0, [pc, #712]	@ (80011a0 <GC9A01_init+0x91c>)
 8000ed6:	f004 ff51 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000eda:	7823      	ldrb	r3, [r4, #0]
 8000edc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1fa      	bne.n	8000eda <GC9A01_init+0x656>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	48ae      	ldr	r0, [pc, #696]	@ (80011a0 <GC9A01_init+0x91c>)
 8000ee8:	f004 ff48 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000eec:	7823      	ldrb	r3, [r4, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1fc      	bne.n	8000eec <GC9A01_init+0x668>
	spi_dma_not_ready = 1;
 8000ef2:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000ef4:	f10d 0107 	add.w	r1, sp, #7
 8000ef8:	48a8      	ldr	r0, [pc, #672]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 8000efa:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000efc:	f009 ff0a 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000f00:	7823      	ldrb	r3, [r4, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1fc      	bne.n	8000f00 <GC9A01_init+0x67c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	48a5      	ldr	r0, [pc, #660]	@ (80011a0 <GC9A01_init+0x91c>)
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	f004 ff36 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC3);
 8000f10:	20c3      	movs	r0, #195	@ 0xc3
 8000f12:	f7ff fc85 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f16:	2313      	movs	r3, #19
 8000f18:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000f1c:	7823      	ldrb	r3, [r4, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1fc      	bne.n	8000f1c <GC9A01_init+0x698>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2102      	movs	r1, #2
 8000f26:	489e      	ldr	r0, [pc, #632]	@ (80011a0 <GC9A01_init+0x91c>)
 8000f28:	f004 ff28 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000f2c:	7823      	ldrb	r3, [r4, #0]
 8000f2e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1fa      	bne.n	8000f2c <GC9A01_init+0x6a8>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000f36:	2101      	movs	r1, #1
 8000f38:	4899      	ldr	r0, [pc, #612]	@ (80011a0 <GC9A01_init+0x91c>)
 8000f3a:	f004 ff1f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000f3e:	7823      	ldrb	r3, [r4, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1fc      	bne.n	8000f3e <GC9A01_init+0x6ba>
	spi_dma_not_ready = 1;
 8000f44:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000f46:	f10d 0107 	add.w	r1, sp, #7
 8000f4a:	4894      	ldr	r0, [pc, #592]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 8000f4c:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000f4e:	f009 fee1 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000f52:	7823      	ldrb	r3, [r4, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1fc      	bne.n	8000f52 <GC9A01_init+0x6ce>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4891      	ldr	r0, [pc, #580]	@ (80011a0 <GC9A01_init+0x91c>)
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	f004 ff0d 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC4);
 8000f62:	20c4      	movs	r0, #196	@ 0xc4
 8000f64:	f7ff fc5c 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000f68:	2313      	movs	r3, #19
    GC9A01_write_data(&val, sizeof(val));
 8000f6a:	f10d 0007 	add.w	r0, sp, #7
 8000f6e:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f72:	f7ff fc03 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xC9);
 8000f76:	20c9      	movs	r0, #201	@ 0xc9
 8000f78:	f7ff fc52 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f7c:	2322      	movs	r3, #34	@ 0x22
    GC9A01_write_data(&val, sizeof(val));
 8000f7e:	f10d 0007 	add.w	r0, sp, #7
 8000f82:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f86:	f7ff fbf9 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xBE);
 8000f8a:	20be      	movs	r0, #190	@ 0xbe
 8000f8c:	f7ff fc48 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f90:	2311      	movs	r3, #17
    GC9A01_write_data(&val, sizeof(val));
 8000f92:	f10d 0007 	add.w	r0, sp, #7
 8000f96:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f9a:	f7ff fbef 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xE1);
 8000f9e:	20e1      	movs	r0, #225	@ 0xe1
 8000fa0:	f7ff fc3e 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000fa4:	2310      	movs	r3, #16
    GC9A01_write_data(&val, sizeof(val));
 8000fa6:	f10d 0007 	add.w	r0, sp, #7
 8000faa:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fae:	f7ff fbe5 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x0E);
 8000fb2:	230e      	movs	r3, #14
 8000fb4:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8000fb8:	7823      	ldrb	r3, [r4, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1fc      	bne.n	8000fb8 <GC9A01_init+0x734>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4877      	ldr	r0, [pc, #476]	@ (80011a0 <GC9A01_init+0x91c>)
 8000fc4:	f004 feda 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8000fc8:	7823      	ldrb	r3, [r4, #0]
 8000fca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1fa      	bne.n	8000fc8 <GC9A01_init+0x744>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4872      	ldr	r0, [pc, #456]	@ (80011a0 <GC9A01_init+0x91c>)
 8000fd6:	f004 fed1 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8000fda:	7823      	ldrb	r3, [r4, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1fc      	bne.n	8000fda <GC9A01_init+0x756>
	spi_dma_not_ready = 1;
 8000fe0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000fe2:	f10d 0107 	add.w	r1, sp, #7
 8000fe6:	486d      	ldr	r0, [pc, #436]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 8000fe8:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000fea:	f009 fe93 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8000fee:	7823      	ldrb	r3, [r4, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1fc      	bne.n	8000fee <GC9A01_init+0x76a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	486a      	ldr	r0, [pc, #424]	@ (80011a0 <GC9A01_init+0x91c>)
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	f004 febf 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xDF);
 8000ffe:	20df      	movs	r0, #223	@ 0xdf
 8001000:	f7ff fc0e 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8001004:	2321      	movs	r3, #33	@ 0x21
    GC9A01_write_data(&val, sizeof(val));
 8001006:	f10d 0007 	add.w	r0, sp, #7
 800100a:	f88d 3007 	strb.w	r3, [sp, #7]
 800100e:	f7ff fbb5 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x0c);
 8001012:	230c      	movs	r3, #12
 8001014:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001018:	7823      	ldrb	r3, [r4, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1fc      	bne.n	8001018 <GC9A01_init+0x794>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800101e:	2201      	movs	r2, #1
 8001020:	2102      	movs	r1, #2
 8001022:	485f      	ldr	r0, [pc, #380]	@ (80011a0 <GC9A01_init+0x91c>)
 8001024:	f004 feaa 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001028:	7823      	ldrb	r3, [r4, #0]
 800102a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1fa      	bne.n	8001028 <GC9A01_init+0x7a4>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001032:	2101      	movs	r1, #1
 8001034:	485a      	ldr	r0, [pc, #360]	@ (80011a0 <GC9A01_init+0x91c>)
 8001036:	f004 fea1 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800103a:	7823      	ldrb	r3, [r4, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1fc      	bne.n	800103a <GC9A01_init+0x7b6>
	spi_dma_not_ready = 1;
 8001040:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001042:	f10d 0107 	add.w	r1, sp, #7
 8001046:	4855      	ldr	r0, [pc, #340]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 8001048:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800104a:	f009 fe63 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800104e:	7823      	ldrb	r3, [r4, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1fc      	bne.n	800104e <GC9A01_init+0x7ca>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001054:	2201      	movs	r2, #1
 8001056:	4852      	ldr	r0, [pc, #328]	@ (80011a0 <GC9A01_init+0x91c>)
 8001058:	4611      	mov	r1, r2
 800105a:	f004 fe8f 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x02);
 800105e:	2302      	movs	r3, #2
 8001060:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001064:	7823      	ldrb	r3, [r4, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1fc      	bne.n	8001064 <GC9A01_init+0x7e0>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2102      	movs	r1, #2
 800106e:	484c      	ldr	r0, [pc, #304]	@ (80011a0 <GC9A01_init+0x91c>)
 8001070:	f004 fe84 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001074:	7823      	ldrb	r3, [r4, #0]
 8001076:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1fa      	bne.n	8001074 <GC9A01_init+0x7f0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800107e:	2101      	movs	r1, #1
 8001080:	4847      	ldr	r0, [pc, #284]	@ (80011a0 <GC9A01_init+0x91c>)
 8001082:	f004 fe7b 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001086:	7823      	ldrb	r3, [r4, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1fc      	bne.n	8001086 <GC9A01_init+0x802>
	spi_dma_not_ready = 1;
 800108c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800108e:	f10d 0107 	add.w	r1, sp, #7
 8001092:	4842      	ldr	r0, [pc, #264]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 8001094:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001096:	f009 fe3d 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800109a:	7823      	ldrb	r3, [r4, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1fc      	bne.n	800109a <GC9A01_init+0x816>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	483f      	ldr	r0, [pc, #252]	@ (80011a0 <GC9A01_init+0x91c>)
 80010a4:	4611      	mov	r1, r2
 80010a6:	f004 fe69 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF0);
 80010aa:	20f0      	movs	r0, #240	@ 0xf0
 80010ac:	f7ff fbb8 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 80010b0:	2345      	movs	r3, #69	@ 0x45
 80010b2:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80010b6:	7823      	ldrb	r3, [r4, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1fc      	bne.n	80010b6 <GC9A01_init+0x832>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2102      	movs	r1, #2
 80010c0:	4837      	ldr	r0, [pc, #220]	@ (80011a0 <GC9A01_init+0x91c>)
 80010c2:	f004 fe5b 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80010c6:	7823      	ldrb	r3, [r4, #0]
 80010c8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1fa      	bne.n	80010c6 <GC9A01_init+0x842>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80010d0:	2101      	movs	r1, #1
 80010d2:	4833      	ldr	r0, [pc, #204]	@ (80011a0 <GC9A01_init+0x91c>)
 80010d4:	f004 fe52 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80010d8:	7823      	ldrb	r3, [r4, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1fc      	bne.n	80010d8 <GC9A01_init+0x854>
	spi_dma_not_ready = 1;
 80010de:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80010e0:	f10d 0107 	add.w	r1, sp, #7
 80010e4:	482d      	ldr	r0, [pc, #180]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 80010e6:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80010e8:	f009 fe14 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80010ec:	7823      	ldrb	r3, [r4, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1fc      	bne.n	80010ec <GC9A01_init+0x868>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	482a      	ldr	r0, [pc, #168]	@ (80011a0 <GC9A01_init+0x91c>)
 80010f6:	4611      	mov	r1, r2
 80010f8:	f004 fe40 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 80010fc:	2309      	movs	r3, #9
 80010fe:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001102:	7823      	ldrb	r3, [r4, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1fc      	bne.n	8001102 <GC9A01_init+0x87e>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2102      	movs	r1, #2
 800110c:	4824      	ldr	r0, [pc, #144]	@ (80011a0 <GC9A01_init+0x91c>)
 800110e:	f004 fe35 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001112:	7823      	ldrb	r3, [r4, #0]
 8001114:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1fa      	bne.n	8001112 <GC9A01_init+0x88e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800111c:	2101      	movs	r1, #1
 800111e:	4820      	ldr	r0, [pc, #128]	@ (80011a0 <GC9A01_init+0x91c>)
 8001120:	f004 fe2c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001124:	7823      	ldrb	r3, [r4, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1fc      	bne.n	8001124 <GC9A01_init+0x8a0>
	spi_dma_not_ready = 1;
 800112a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800112c:	f10d 0107 	add.w	r1, sp, #7
 8001130:	481a      	ldr	r0, [pc, #104]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 8001132:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001134:	f009 fdee 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001138:	7823      	ldrb	r3, [r4, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1fc      	bne.n	8001138 <GC9A01_init+0x8b4>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800113e:	2201      	movs	r2, #1
 8001140:	4817      	ldr	r0, [pc, #92]	@ (80011a0 <GC9A01_init+0x91c>)
 8001142:	4611      	mov	r1, r2
 8001144:	f004 fe1a 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8001148:	2308      	movs	r3, #8
 800114a:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800114e:	7823      	ldrb	r3, [r4, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1fc      	bne.n	800114e <GC9A01_init+0x8ca>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2102      	movs	r1, #2
 8001158:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <GC9A01_init+0x91c>)
 800115a:	f004 fe0f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800115e:	7823      	ldrb	r3, [r4, #0]
 8001160:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1fa      	bne.n	800115e <GC9A01_init+0x8da>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001168:	2101      	movs	r1, #1
 800116a:	480d      	ldr	r0, [pc, #52]	@ (80011a0 <GC9A01_init+0x91c>)
 800116c:	f004 fe06 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001170:	7823      	ldrb	r3, [r4, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1fc      	bne.n	8001170 <GC9A01_init+0x8ec>
	spi_dma_not_ready = 1;
 8001176:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001178:	f10d 0107 	add.w	r1, sp, #7
 800117c:	4807      	ldr	r0, [pc, #28]	@ (800119c <GC9A01_init+0x918>)
	spi_dma_not_ready = 1;
 800117e:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001180:	f009 fdc8 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001184:	7823      	ldrb	r3, [r4, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1fc      	bne.n	8001184 <GC9A01_init+0x900>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800118a:	2201      	movs	r2, #1
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <GC9A01_init+0x91c>)
 800118e:	4611      	mov	r1, r2
 8001190:	f004 fdf4 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8001194:	2308      	movs	r3, #8
 8001196:	f88d 3007 	strb.w	r3, [sp, #7]
 800119a:	e003      	b.n	80011a4 <GC9A01_init+0x920>
 800119c:	24000218 	.word	0x24000218
 80011a0:	58020400 	.word	0x58020400
	while(spi_dma_not_ready);
 80011a4:	7823      	ldrb	r3, [r4, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1fc      	bne.n	80011a4 <GC9A01_init+0x920>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2102      	movs	r1, #2
 80011ae:	48b8      	ldr	r0, [pc, #736]	@ (8001490 <GC9A01_init+0xc0c>)
 80011b0:	f004 fde4 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80011b4:	7823      	ldrb	r3, [r4, #0]
 80011b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1fa      	bne.n	80011b4 <GC9A01_init+0x930>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80011be:	2101      	movs	r1, #1
 80011c0:	48b3      	ldr	r0, [pc, #716]	@ (8001490 <GC9A01_init+0xc0c>)
 80011c2:	f004 fddb 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80011c6:	7823      	ldrb	r3, [r4, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1fc      	bne.n	80011c6 <GC9A01_init+0x942>
	spi_dma_not_ready = 1;
 80011cc:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80011ce:	f10d 0107 	add.w	r1, sp, #7
 80011d2:	48b0      	ldr	r0, [pc, #704]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 80011d4:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80011d6:	f009 fd9d 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80011da:	7823      	ldrb	r3, [r4, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1fc      	bne.n	80011da <GC9A01_init+0x956>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	48ab      	ldr	r0, [pc, #684]	@ (8001490 <GC9A01_init+0xc0c>)
 80011e4:	4611      	mov	r1, r2
 80011e6:	f004 fdc9 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x26);
 80011ea:	2326      	movs	r3, #38	@ 0x26
 80011ec:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80011f0:	7823      	ldrb	r3, [r4, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1fc      	bne.n	80011f0 <GC9A01_init+0x96c>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2102      	movs	r1, #2
 80011fa:	48a5      	ldr	r0, [pc, #660]	@ (8001490 <GC9A01_init+0xc0c>)
 80011fc:	f004 fdbe 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001200:	7823      	ldrb	r3, [r4, #0]
 8001202:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1fa      	bne.n	8001200 <GC9A01_init+0x97c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800120a:	2101      	movs	r1, #1
 800120c:	48a0      	ldr	r0, [pc, #640]	@ (8001490 <GC9A01_init+0xc0c>)
 800120e:	f004 fdb5 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001212:	7823      	ldrb	r3, [r4, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1fc      	bne.n	8001212 <GC9A01_init+0x98e>
	spi_dma_not_ready = 1;
 8001218:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800121a:	f10d 0107 	add.w	r1, sp, #7
 800121e:	489d      	ldr	r0, [pc, #628]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 8001220:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001222:	f009 fd77 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001226:	7823      	ldrb	r3, [r4, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1fc      	bne.n	8001226 <GC9A01_init+0x9a2>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800122c:	2201      	movs	r2, #1
 800122e:	4898      	ldr	r0, [pc, #608]	@ (8001490 <GC9A01_init+0xc0c>)
 8001230:	4611      	mov	r1, r2
 8001232:	f004 fda3 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x2A);
 8001236:	232a      	movs	r3, #42	@ 0x2a
    GC9A01_write_data(&val, sizeof(val));
 8001238:	f10d 0007 	add.w	r0, sp, #7
 800123c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001240:	f7ff fa9c 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xF1);
 8001244:	20f1      	movs	r0, #241	@ 0xf1
 8001246:	f7ff faeb 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800124a:	2343      	movs	r3, #67	@ 0x43
 800124c:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001250:	7823      	ldrb	r3, [r4, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1fc      	bne.n	8001250 <GC9A01_init+0x9cc>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	488d      	ldr	r0, [pc, #564]	@ (8001490 <GC9A01_init+0xc0c>)
 800125c:	f004 fd8e 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001260:	7823      	ldrb	r3, [r4, #0]
 8001262:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1fa      	bne.n	8001260 <GC9A01_init+0x9dc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800126a:	2101      	movs	r1, #1
 800126c:	4888      	ldr	r0, [pc, #544]	@ (8001490 <GC9A01_init+0xc0c>)
 800126e:	f004 fd85 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001272:	7823      	ldrb	r3, [r4, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1fc      	bne.n	8001272 <GC9A01_init+0x9ee>
	spi_dma_not_ready = 1;
 8001278:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800127a:	f10d 0107 	add.w	r1, sp, #7
 800127e:	4885      	ldr	r0, [pc, #532]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 8001280:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001282:	f009 fd47 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001286:	7823      	ldrb	r3, [r4, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1fc      	bne.n	8001286 <GC9A01_init+0xa02>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800128c:	2201      	movs	r2, #1
 800128e:	4880      	ldr	r0, [pc, #512]	@ (8001490 <GC9A01_init+0xc0c>)
 8001290:	4611      	mov	r1, r2
 8001292:	f004 fd73 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001296:	2370      	movs	r3, #112	@ 0x70
 8001298:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800129c:	7823      	ldrb	r3, [r4, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1fc      	bne.n	800129c <GC9A01_init+0xa18>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2102      	movs	r1, #2
 80012a6:	487a      	ldr	r0, [pc, #488]	@ (8001490 <GC9A01_init+0xc0c>)
 80012a8:	f004 fd68 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80012ac:	7823      	ldrb	r3, [r4, #0]
 80012ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1fa      	bne.n	80012ac <GC9A01_init+0xa28>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80012b6:	2101      	movs	r1, #1
 80012b8:	4875      	ldr	r0, [pc, #468]	@ (8001490 <GC9A01_init+0xc0c>)
 80012ba:	f004 fd5f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80012be:	7823      	ldrb	r3, [r4, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1fc      	bne.n	80012be <GC9A01_init+0xa3a>
	spi_dma_not_ready = 1;
 80012c4:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80012c6:	f10d 0107 	add.w	r1, sp, #7
 80012ca:	4872      	ldr	r0, [pc, #456]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 80012cc:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80012ce:	f009 fd21 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80012d2:	7823      	ldrb	r3, [r4, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1fc      	bne.n	80012d2 <GC9A01_init+0xa4e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	486d      	ldr	r0, [pc, #436]	@ (8001490 <GC9A01_init+0xc0c>)
 80012dc:	4611      	mov	r1, r2
 80012de:	f004 fd4d 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x72);
 80012e2:	2372      	movs	r3, #114	@ 0x72
    GC9A01_write_data(&val, sizeof(val));
 80012e4:	f10d 0007 	add.w	r0, sp, #7
 80012e8:	f88d 3007 	strb.w	r3, [sp, #7]
 80012ec:	f7ff fa46 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x36);
 80012f0:	2336      	movs	r3, #54	@ 0x36
    GC9A01_write_data(&val, sizeof(val));
 80012f2:	f10d 0007 	add.w	r0, sp, #7
 80012f6:	f88d 3007 	strb.w	r3, [sp, #7]
 80012fa:	f7ff fa3f 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x37);
 80012fe:	2337      	movs	r3, #55	@ 0x37
    GC9A01_write_data(&val, sizeof(val));
 8001300:	f10d 0007 	add.w	r0, sp, #7
 8001304:	f88d 3007 	strb.w	r3, [sp, #7]
 8001308:	f7ff fa38 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x6F);
 800130c:	236f      	movs	r3, #111	@ 0x6f
    GC9A01_write_data(&val, sizeof(val));
 800130e:	f10d 0007 	add.w	r0, sp, #7
 8001312:	f88d 3007 	strb.w	r3, [sp, #7]
 8001316:	f7ff fa31 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xF2);
 800131a:	20f2      	movs	r0, #242	@ 0xf2
 800131c:	f7ff fa80 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8001320:	2345      	movs	r3, #69	@ 0x45
 8001322:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001326:	7823      	ldrb	r3, [r4, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1fc      	bne.n	8001326 <GC9A01_init+0xaa2>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2102      	movs	r1, #2
 8001330:	4857      	ldr	r0, [pc, #348]	@ (8001490 <GC9A01_init+0xc0c>)
 8001332:	f004 fd23 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001336:	7823      	ldrb	r3, [r4, #0]
 8001338:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1fa      	bne.n	8001336 <GC9A01_init+0xab2>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001340:	2101      	movs	r1, #1
 8001342:	4853      	ldr	r0, [pc, #332]	@ (8001490 <GC9A01_init+0xc0c>)
 8001344:	f004 fd1a 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001348:	7823      	ldrb	r3, [r4, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1fc      	bne.n	8001348 <GC9A01_init+0xac4>
	spi_dma_not_ready = 1;
 800134e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001350:	f10d 0107 	add.w	r1, sp, #7
 8001354:	484f      	ldr	r0, [pc, #316]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 8001356:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001358:	f009 fcdc 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800135c:	7823      	ldrb	r3, [r4, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1fc      	bne.n	800135c <GC9A01_init+0xad8>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001362:	2201      	movs	r2, #1
 8001364:	484a      	ldr	r0, [pc, #296]	@ (8001490 <GC9A01_init+0xc0c>)
 8001366:	4611      	mov	r1, r2
 8001368:	f004 fd08 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 800136c:	2309      	movs	r3, #9
 800136e:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001372:	7823      	ldrb	r3, [r4, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1fc      	bne.n	8001372 <GC9A01_init+0xaee>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	2102      	movs	r1, #2
 800137c:	4844      	ldr	r0, [pc, #272]	@ (8001490 <GC9A01_init+0xc0c>)
 800137e:	f004 fcfd 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001382:	7823      	ldrb	r3, [r4, #0]
 8001384:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1fa      	bne.n	8001382 <GC9A01_init+0xafe>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800138c:	2101      	movs	r1, #1
 800138e:	4840      	ldr	r0, [pc, #256]	@ (8001490 <GC9A01_init+0xc0c>)
 8001390:	f004 fcf4 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001394:	7823      	ldrb	r3, [r4, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1fc      	bne.n	8001394 <GC9A01_init+0xb10>
	spi_dma_not_ready = 1;
 800139a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800139c:	f10d 0107 	add.w	r1, sp, #7
 80013a0:	483c      	ldr	r0, [pc, #240]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 80013a2:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80013a4:	f009 fcb6 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80013a8:	7823      	ldrb	r3, [r4, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1fc      	bne.n	80013a8 <GC9A01_init+0xb24>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	4837      	ldr	r0, [pc, #220]	@ (8001490 <GC9A01_init+0xc0c>)
 80013b2:	4611      	mov	r1, r2
 80013b4:	f004 fce2 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 80013b8:	2308      	movs	r3, #8
 80013ba:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80013be:	7823      	ldrb	r3, [r4, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1fc      	bne.n	80013be <GC9A01_init+0xb3a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2102      	movs	r1, #2
 80013c8:	4831      	ldr	r0, [pc, #196]	@ (8001490 <GC9A01_init+0xc0c>)
 80013ca:	f004 fcd7 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80013ce:	7823      	ldrb	r3, [r4, #0]
 80013d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1fa      	bne.n	80013ce <GC9A01_init+0xb4a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80013d8:	2101      	movs	r1, #1
 80013da:	482d      	ldr	r0, [pc, #180]	@ (8001490 <GC9A01_init+0xc0c>)
 80013dc:	f004 fcce 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80013e0:	7823      	ldrb	r3, [r4, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1fc      	bne.n	80013e0 <GC9A01_init+0xb5c>
	spi_dma_not_ready = 1;
 80013e6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80013e8:	f10d 0107 	add.w	r1, sp, #7
 80013ec:	4829      	ldr	r0, [pc, #164]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 80013ee:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80013f0:	f009 fc90 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80013f4:	7823      	ldrb	r3, [r4, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1fc      	bne.n	80013f4 <GC9A01_init+0xb70>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	4824      	ldr	r0, [pc, #144]	@ (8001490 <GC9A01_init+0xc0c>)
 80013fe:	4611      	mov	r1, r2
 8001400:	f004 fcbc 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8001404:	2308      	movs	r3, #8
 8001406:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800140a:	7823      	ldrb	r3, [r4, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1fc      	bne.n	800140a <GC9A01_init+0xb86>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2102      	movs	r1, #2
 8001414:	481e      	ldr	r0, [pc, #120]	@ (8001490 <GC9A01_init+0xc0c>)
 8001416:	f004 fcb1 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800141a:	7823      	ldrb	r3, [r4, #0]
 800141c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1fa      	bne.n	800141a <GC9A01_init+0xb96>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001424:	2101      	movs	r1, #1
 8001426:	481a      	ldr	r0, [pc, #104]	@ (8001490 <GC9A01_init+0xc0c>)
 8001428:	f004 fca8 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800142c:	7823      	ldrb	r3, [r4, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1fc      	bne.n	800142c <GC9A01_init+0xba8>
	spi_dma_not_ready = 1;
 8001432:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001434:	f10d 0107 	add.w	r1, sp, #7
 8001438:	4816      	ldr	r0, [pc, #88]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 800143a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800143c:	f009 fc6a 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001440:	7823      	ldrb	r3, [r4, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1fc      	bne.n	8001440 <GC9A01_init+0xbbc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001446:	2201      	movs	r2, #1
 8001448:	4811      	ldr	r0, [pc, #68]	@ (8001490 <GC9A01_init+0xc0c>)
 800144a:	4611      	mov	r1, r2
 800144c:	f004 fc96 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x26);
 8001450:	2326      	movs	r3, #38	@ 0x26
 8001452:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001456:	7823      	ldrb	r3, [r4, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1fc      	bne.n	8001456 <GC9A01_init+0xbd2>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2102      	movs	r1, #2
 8001460:	480b      	ldr	r0, [pc, #44]	@ (8001490 <GC9A01_init+0xc0c>)
 8001462:	f004 fc8b 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001466:	7823      	ldrb	r3, [r4, #0]
 8001468:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1fa      	bne.n	8001466 <GC9A01_init+0xbe2>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001470:	2101      	movs	r1, #1
 8001472:	4807      	ldr	r0, [pc, #28]	@ (8001490 <GC9A01_init+0xc0c>)
 8001474:	f004 fc82 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001478:	7823      	ldrb	r3, [r4, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1fc      	bne.n	8001478 <GC9A01_init+0xbf4>
	spi_dma_not_ready = 1;
 800147e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001480:	f10d 0107 	add.w	r1, sp, #7
 8001484:	4803      	ldr	r0, [pc, #12]	@ (8001494 <GC9A01_init+0xc10>)
	spi_dma_not_ready = 1;
 8001486:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001488:	f009 fc44 	bl	800ad14 <HAL_SPI_Transmit_DMA>
 800148c:	e004      	b.n	8001498 <GC9A01_init+0xc14>
 800148e:	bf00      	nop
 8001490:	58020400 	.word	0x58020400
 8001494:	24000218 	.word	0x24000218
	while(spi_dma_not_ready);
 8001498:	7823      	ldrb	r3, [r4, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1fc      	bne.n	8001498 <GC9A01_init+0xc14>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	48b6      	ldr	r0, [pc, #728]	@ (800177c <GC9A01_init+0xef8>)
 80014a2:	4611      	mov	r1, r2
 80014a4:	f004 fc6a 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x2A);
 80014a8:	232a      	movs	r3, #42	@ 0x2a
 80014aa:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80014ae:	7823      	ldrb	r3, [r4, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1fc      	bne.n	80014ae <GC9A01_init+0xc2a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2102      	movs	r1, #2
 80014b8:	48b0      	ldr	r0, [pc, #704]	@ (800177c <GC9A01_init+0xef8>)
 80014ba:	f004 fc5f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80014be:	7823      	ldrb	r3, [r4, #0]
 80014c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1fa      	bne.n	80014be <GC9A01_init+0xc3a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80014c8:	2101      	movs	r1, #1
 80014ca:	48ac      	ldr	r0, [pc, #688]	@ (800177c <GC9A01_init+0xef8>)
 80014cc:	f004 fc56 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80014d0:	7823      	ldrb	r3, [r4, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1fc      	bne.n	80014d0 <GC9A01_init+0xc4c>
	spi_dma_not_ready = 1;
 80014d6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80014d8:	f10d 0107 	add.w	r1, sp, #7
 80014dc:	48a8      	ldr	r0, [pc, #672]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 80014de:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80014e0:	f009 fc18 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80014e4:	7823      	ldrb	r3, [r4, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1fc      	bne.n	80014e4 <GC9A01_init+0xc60>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	48a3      	ldr	r0, [pc, #652]	@ (800177c <GC9A01_init+0xef8>)
 80014ee:	4611      	mov	r1, r2
 80014f0:	f004 fc44 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF3);
 80014f4:	20f3      	movs	r0, #243	@ 0xf3
 80014f6:	f7ff f993 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 80014fa:	2343      	movs	r3, #67	@ 0x43
    GC9A01_write_data(&val, sizeof(val));
 80014fc:	f10d 0007 	add.w	r0, sp, #7
 8001500:	f88d 3007 	strb.w	r3, [sp, #7]
 8001504:	f7ff f93a 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x70);
 8001508:	2370      	movs	r3, #112	@ 0x70
 800150a:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800150e:	7823      	ldrb	r3, [r4, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1fc      	bne.n	800150e <GC9A01_init+0xc8a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2102      	movs	r1, #2
 8001518:	4898      	ldr	r0, [pc, #608]	@ (800177c <GC9A01_init+0xef8>)
 800151a:	f004 fc2f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800151e:	7823      	ldrb	r3, [r4, #0]
 8001520:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1fa      	bne.n	800151e <GC9A01_init+0xc9a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001528:	2101      	movs	r1, #1
 800152a:	4894      	ldr	r0, [pc, #592]	@ (800177c <GC9A01_init+0xef8>)
 800152c:	f004 fc26 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001530:	7823      	ldrb	r3, [r4, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1fc      	bne.n	8001530 <GC9A01_init+0xcac>
	spi_dma_not_ready = 1;
 8001536:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001538:	f10d 0107 	add.w	r1, sp, #7
 800153c:	4890      	ldr	r0, [pc, #576]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 800153e:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001540:	f009 fbe8 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001544:	7823      	ldrb	r3, [r4, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1fc      	bne.n	8001544 <GC9A01_init+0xcc0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800154a:	2201      	movs	r2, #1
 800154c:	488b      	ldr	r0, [pc, #556]	@ (800177c <GC9A01_init+0xef8>)
 800154e:	4611      	mov	r1, r2
 8001550:	f004 fc14 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x72);
 8001554:	2372      	movs	r3, #114	@ 0x72
 8001556:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800155a:	7823      	ldrb	r3, [r4, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1fc      	bne.n	800155a <GC9A01_init+0xcd6>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2102      	movs	r1, #2
 8001564:	4885      	ldr	r0, [pc, #532]	@ (800177c <GC9A01_init+0xef8>)
 8001566:	f004 fc09 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800156a:	7823      	ldrb	r3, [r4, #0]
 800156c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1fa      	bne.n	800156a <GC9A01_init+0xce6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001574:	2101      	movs	r1, #1
 8001576:	4881      	ldr	r0, [pc, #516]	@ (800177c <GC9A01_init+0xef8>)
 8001578:	f004 fc00 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800157c:	7823      	ldrb	r3, [r4, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1fc      	bne.n	800157c <GC9A01_init+0xcf8>
	spi_dma_not_ready = 1;
 8001582:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001584:	f10d 0107 	add.w	r1, sp, #7
 8001588:	487d      	ldr	r0, [pc, #500]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 800158a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800158c:	f009 fbc2 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001590:	7823      	ldrb	r3, [r4, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1fc      	bne.n	8001590 <GC9A01_init+0xd0c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001596:	2201      	movs	r2, #1
 8001598:	4878      	ldr	r0, [pc, #480]	@ (800177c <GC9A01_init+0xef8>)
 800159a:	4611      	mov	r1, r2
 800159c:	f004 fbee 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x36);
 80015a0:	2336      	movs	r3, #54	@ 0x36
 80015a2:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80015a6:	7823      	ldrb	r3, [r4, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1fc      	bne.n	80015a6 <GC9A01_init+0xd22>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2102      	movs	r1, #2
 80015b0:	4872      	ldr	r0, [pc, #456]	@ (800177c <GC9A01_init+0xef8>)
 80015b2:	f004 fbe3 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80015b6:	7823      	ldrb	r3, [r4, #0]
 80015b8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1fa      	bne.n	80015b6 <GC9A01_init+0xd32>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80015c0:	2101      	movs	r1, #1
 80015c2:	486e      	ldr	r0, [pc, #440]	@ (800177c <GC9A01_init+0xef8>)
 80015c4:	f004 fbda 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80015c8:	7823      	ldrb	r3, [r4, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1fc      	bne.n	80015c8 <GC9A01_init+0xd44>
	spi_dma_not_ready = 1;
 80015ce:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80015d0:	f10d 0107 	add.w	r1, sp, #7
 80015d4:	486a      	ldr	r0, [pc, #424]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 80015d6:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80015d8:	f009 fb9c 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80015dc:	7823      	ldrb	r3, [r4, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1fc      	bne.n	80015dc <GC9A01_init+0xd58>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	4865      	ldr	r0, [pc, #404]	@ (800177c <GC9A01_init+0xef8>)
 80015e6:	4611      	mov	r1, r2
 80015e8:	f004 fbc8 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x37);
 80015ec:	2337      	movs	r3, #55	@ 0x37
 80015ee:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80015f2:	7823      	ldrb	r3, [r4, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1fc      	bne.n	80015f2 <GC9A01_init+0xd6e>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2102      	movs	r1, #2
 80015fc:	485f      	ldr	r0, [pc, #380]	@ (800177c <GC9A01_init+0xef8>)
 80015fe:	f004 fbbd 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001602:	7823      	ldrb	r3, [r4, #0]
 8001604:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1fa      	bne.n	8001602 <GC9A01_init+0xd7e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800160c:	2101      	movs	r1, #1
 800160e:	485b      	ldr	r0, [pc, #364]	@ (800177c <GC9A01_init+0xef8>)
 8001610:	f004 fbb4 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001614:	7823      	ldrb	r3, [r4, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1fc      	bne.n	8001614 <GC9A01_init+0xd90>
	spi_dma_not_ready = 1;
 800161a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800161c:	f10d 0107 	add.w	r1, sp, #7
 8001620:	4857      	ldr	r0, [pc, #348]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 8001622:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001624:	f009 fb76 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001628:	7823      	ldrb	r3, [r4, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1fc      	bne.n	8001628 <GC9A01_init+0xda4>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800162e:	2201      	movs	r2, #1
 8001630:	4852      	ldr	r0, [pc, #328]	@ (800177c <GC9A01_init+0xef8>)
 8001632:	4611      	mov	r1, r2
 8001634:	f004 fba2 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x6F);
 8001638:	236f      	movs	r3, #111	@ 0x6f
 800163a:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800163e:	7823      	ldrb	r3, [r4, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1fc      	bne.n	800163e <GC9A01_init+0xdba>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2102      	movs	r1, #2
 8001648:	484c      	ldr	r0, [pc, #304]	@ (800177c <GC9A01_init+0xef8>)
 800164a:	f004 fb97 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800164e:	7823      	ldrb	r3, [r4, #0]
 8001650:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1fa      	bne.n	800164e <GC9A01_init+0xdca>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001658:	2101      	movs	r1, #1
 800165a:	4848      	ldr	r0, [pc, #288]	@ (800177c <GC9A01_init+0xef8>)
 800165c:	f004 fb8e 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001660:	7823      	ldrb	r3, [r4, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1fc      	bne.n	8001660 <GC9A01_init+0xddc>
	spi_dma_not_ready = 1;
 8001666:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001668:	f10d 0107 	add.w	r1, sp, #7
 800166c:	4844      	ldr	r0, [pc, #272]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 800166e:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001670:	f009 fb50 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001674:	7823      	ldrb	r3, [r4, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1fc      	bne.n	8001674 <GC9A01_init+0xdf0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800167a:	2201      	movs	r2, #1
 800167c:	483f      	ldr	r0, [pc, #252]	@ (800177c <GC9A01_init+0xef8>)
 800167e:	4611      	mov	r1, r2
 8001680:	f004 fb7c 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xED);
 8001684:	20ed      	movs	r0, #237	@ 0xed
 8001686:	f7ff f8cb 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800168a:	231b      	movs	r3, #27
    GC9A01_write_data(&val, sizeof(val));
 800168c:	f10d 0007 	add.w	r0, sp, #7
 8001690:	f88d 3007 	strb.w	r3, [sp, #7]
 8001694:	f7ff f872 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x0B);
 8001698:	230b      	movs	r3, #11
 800169a:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800169e:	7823      	ldrb	r3, [r4, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1fc      	bne.n	800169e <GC9A01_init+0xe1a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2102      	movs	r1, #2
 80016a8:	4834      	ldr	r0, [pc, #208]	@ (800177c <GC9A01_init+0xef8>)
 80016aa:	f004 fb67 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80016ae:	7823      	ldrb	r3, [r4, #0]
 80016b0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1fa      	bne.n	80016ae <GC9A01_init+0xe2a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80016b8:	2101      	movs	r1, #1
 80016ba:	4830      	ldr	r0, [pc, #192]	@ (800177c <GC9A01_init+0xef8>)
 80016bc:	f004 fb5e 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80016c0:	7823      	ldrb	r3, [r4, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1fc      	bne.n	80016c0 <GC9A01_init+0xe3c>
	spi_dma_not_ready = 1;
 80016c6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80016c8:	f10d 0107 	add.w	r1, sp, #7
 80016cc:	482c      	ldr	r0, [pc, #176]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 80016ce:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80016d0:	f009 fb20 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80016d4:	7823      	ldrb	r3, [r4, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1fc      	bne.n	80016d4 <GC9A01_init+0xe50>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	4827      	ldr	r0, [pc, #156]	@ (800177c <GC9A01_init+0xef8>)
 80016de:	4611      	mov	r1, r2
 80016e0:	f004 fb4c 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0xAE);
 80016e4:	20ae      	movs	r0, #174	@ 0xae
 80016e6:	f7ff f89b 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 80016ea:	2377      	movs	r3, #119	@ 0x77
    GC9A01_write_data(&val, sizeof(val));
 80016ec:	f10d 0007 	add.w	r0, sp, #7
 80016f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80016f4:	f7ff f842 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xCD);
 80016f8:	20cd      	movs	r0, #205	@ 0xcd
 80016fa:	f7ff f891 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80016fe:	2363      	movs	r3, #99	@ 0x63
 8001700:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001704:	7823      	ldrb	r3, [r4, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1fc      	bne.n	8001704 <GC9A01_init+0xe80>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2102      	movs	r1, #2
 800170e:	481b      	ldr	r0, [pc, #108]	@ (800177c <GC9A01_init+0xef8>)
 8001710:	f004 fb34 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001714:	7823      	ldrb	r3, [r4, #0]
 8001716:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1fa      	bne.n	8001714 <GC9A01_init+0xe90>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800171e:	2101      	movs	r1, #1
 8001720:	4816      	ldr	r0, [pc, #88]	@ (800177c <GC9A01_init+0xef8>)
 8001722:	f004 fb2b 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001726:	7823      	ldrb	r3, [r4, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1fc      	bne.n	8001726 <GC9A01_init+0xea2>
	spi_dma_not_ready = 1;
 800172c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800172e:	f10d 0107 	add.w	r1, sp, #7
 8001732:	4813      	ldr	r0, [pc, #76]	@ (8001780 <GC9A01_init+0xefc>)
	spi_dma_not_ready = 1;
 8001734:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001736:	f009 faed 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800173a:	7823      	ldrb	r3, [r4, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1fc      	bne.n	800173a <GC9A01_init+0xeb6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001740:	2201      	movs	r2, #1
 8001742:	480e      	ldr	r0, [pc, #56]	@ (800177c <GC9A01_init+0xef8>)
 8001744:	4611      	mov	r1, r2
 8001746:	f004 fb19 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x70);
 800174a:	2070      	movs	r0, #112	@ 0x70
 800174c:	f7ff f868 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8001750:	2307      	movs	r3, #7
 8001752:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001756:	7823      	ldrb	r3, [r4, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1fc      	bne.n	8001756 <GC9A01_init+0xed2>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2102      	movs	r1, #2
 8001760:	4806      	ldr	r0, [pc, #24]	@ (800177c <GC9A01_init+0xef8>)
 8001762:	f004 fb0b 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001766:	7823      	ldrb	r3, [r4, #0]
 8001768:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1fa      	bne.n	8001766 <GC9A01_init+0xee2>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001770:	2101      	movs	r1, #1
 8001772:	4802      	ldr	r0, [pc, #8]	@ (800177c <GC9A01_init+0xef8>)
 8001774:	f004 fb02 	bl	8005d7c <HAL_GPIO_WritePin>
 8001778:	e004      	b.n	8001784 <GC9A01_init+0xf00>
 800177a:	bf00      	nop
 800177c:	58020400 	.word	0x58020400
 8001780:	24000218 	.word	0x24000218
	while(spi_dma_not_ready && !join);
 8001784:	7823      	ldrb	r3, [r4, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1fc      	bne.n	8001784 <GC9A01_init+0xf00>
	spi_dma_not_ready = 1;
 800178a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800178c:	f10d 0107 	add.w	r1, sp, #7
 8001790:	48b8      	ldr	r0, [pc, #736]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 8001792:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001794:	f009 fabe 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001798:	7823      	ldrb	r3, [r4, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1fc      	bne.n	8001798 <GC9A01_init+0xf14>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	48b5      	ldr	r0, [pc, #724]	@ (8001a78 <GC9A01_init+0x11f4>)
 80017a2:	4611      	mov	r1, r2
 80017a4:	f004 faea 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x07);
 80017a8:	2307      	movs	r3, #7
 80017aa:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80017ae:	7823      	ldrb	r3, [r4, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1fc      	bne.n	80017ae <GC9A01_init+0xf2a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2102      	movs	r1, #2
 80017b8:	48af      	ldr	r0, [pc, #700]	@ (8001a78 <GC9A01_init+0x11f4>)
 80017ba:	f004 fadf 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80017be:	7823      	ldrb	r3, [r4, #0]
 80017c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1fa      	bne.n	80017be <GC9A01_init+0xf3a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80017c8:	2101      	movs	r1, #1
 80017ca:	48ab      	ldr	r0, [pc, #684]	@ (8001a78 <GC9A01_init+0x11f4>)
 80017cc:	f004 fad6 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80017d0:	7823      	ldrb	r3, [r4, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1fc      	bne.n	80017d0 <GC9A01_init+0xf4c>
	spi_dma_not_ready = 1;
 80017d6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80017d8:	f10d 0107 	add.w	r1, sp, #7
 80017dc:	48a5      	ldr	r0, [pc, #660]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 80017de:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80017e0:	f009 fa98 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80017e4:	7823      	ldrb	r3, [r4, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1fc      	bne.n	80017e4 <GC9A01_init+0xf60>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	48a2      	ldr	r0, [pc, #648]	@ (8001a78 <GC9A01_init+0x11f4>)
 80017ee:	4611      	mov	r1, r2
 80017f0:	f004 fac4 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x04);
 80017f4:	2304      	movs	r3, #4
    GC9A01_write_data(&val, sizeof(val));
 80017f6:	f10d 0007 	add.w	r0, sp, #7
 80017fa:	f88d 3007 	strb.w	r3, [sp, #7]
 80017fe:	f7fe ffbd 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x0E);
 8001802:	230e      	movs	r3, #14
 8001804:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001808:	7823      	ldrb	r3, [r4, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1fc      	bne.n	8001808 <GC9A01_init+0xf84>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2102      	movs	r1, #2
 8001812:	4899      	ldr	r0, [pc, #612]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001814:	f004 fab2 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001818:	7823      	ldrb	r3, [r4, #0]
 800181a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1fa      	bne.n	8001818 <GC9A01_init+0xf94>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001822:	2101      	movs	r1, #1
 8001824:	4894      	ldr	r0, [pc, #592]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001826:	f004 faa9 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800182a:	7823      	ldrb	r3, [r4, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1fc      	bne.n	800182a <GC9A01_init+0xfa6>
	spi_dma_not_ready = 1;
 8001830:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001832:	f10d 0107 	add.w	r1, sp, #7
 8001836:	488f      	ldr	r0, [pc, #572]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 8001838:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800183a:	f009 fa6b 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800183e:	7823      	ldrb	r3, [r4, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1fc      	bne.n	800183e <GC9A01_init+0xfba>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001844:	2201      	movs	r2, #1
 8001846:	488c      	ldr	r0, [pc, #560]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001848:	4611      	mov	r1, r2
 800184a:	f004 fa97 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0F);
 800184e:	230f      	movs	r3, #15
    GC9A01_write_data(&val, sizeof(val));
 8001850:	f10d 0007 	add.w	r0, sp, #7
 8001854:	f88d 3007 	strb.w	r3, [sp, #7]
 8001858:	f7fe ff90 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x09);
 800185c:	2309      	movs	r3, #9
 800185e:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001862:	7823      	ldrb	r3, [r4, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1fc      	bne.n	8001862 <GC9A01_init+0xfde>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2102      	movs	r1, #2
 800186c:	4882      	ldr	r0, [pc, #520]	@ (8001a78 <GC9A01_init+0x11f4>)
 800186e:	f004 fa85 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001872:	7823      	ldrb	r3, [r4, #0]
 8001874:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1fa      	bne.n	8001872 <GC9A01_init+0xfee>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800187c:	2101      	movs	r1, #1
 800187e:	487e      	ldr	r0, [pc, #504]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001880:	f004 fa7c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001884:	7823      	ldrb	r3, [r4, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1fc      	bne.n	8001884 <GC9A01_init+0x1000>
	spi_dma_not_ready = 1;
 800188a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800188c:	f10d 0107 	add.w	r1, sp, #7
 8001890:	4878      	ldr	r0, [pc, #480]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 8001892:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001894:	f009 fa3e 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001898:	7823      	ldrb	r3, [r4, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1fc      	bne.n	8001898 <GC9A01_init+0x1014>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	4875      	ldr	r0, [pc, #468]	@ (8001a78 <GC9A01_init+0x11f4>)
 80018a2:	4611      	mov	r1, r2
 80018a4:	f004 fa6a 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x07);
 80018a8:	2307      	movs	r3, #7
    GC9A01_write_data(&val, sizeof(val));
 80018aa:	eb0d 0003 	add.w	r0, sp, r3
 80018ae:	f88d 3007 	strb.w	r3, [sp, #7]
 80018b2:	f7fe ff63 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x08);
 80018b6:	2308      	movs	r3, #8
 80018b8:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80018bc:	7823      	ldrb	r3, [r4, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1fc      	bne.n	80018bc <GC9A01_init+0x1038>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2102      	movs	r1, #2
 80018c6:	486c      	ldr	r0, [pc, #432]	@ (8001a78 <GC9A01_init+0x11f4>)
 80018c8:	f004 fa58 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80018cc:	7823      	ldrb	r3, [r4, #0]
 80018ce:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1fa      	bne.n	80018cc <GC9A01_init+0x1048>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80018d6:	2101      	movs	r1, #1
 80018d8:	4867      	ldr	r0, [pc, #412]	@ (8001a78 <GC9A01_init+0x11f4>)
 80018da:	f004 fa4f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80018de:	7823      	ldrb	r3, [r4, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1fc      	bne.n	80018de <GC9A01_init+0x105a>
	spi_dma_not_ready = 1;
 80018e4:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80018e6:	f10d 0107 	add.w	r1, sp, #7
 80018ea:	4862      	ldr	r0, [pc, #392]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 80018ec:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80018ee:	f009 fa11 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80018f2:	7823      	ldrb	r3, [r4, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1fc      	bne.n	80018f2 <GC9A01_init+0x106e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	485f      	ldr	r0, [pc, #380]	@ (8001a78 <GC9A01_init+0x11f4>)
 80018fc:	4611      	mov	r1, r2
 80018fe:	f004 fa3d 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x03);
 8001902:	2303      	movs	r3, #3
    GC9A01_write_data(&val, sizeof(val));
 8001904:	f10d 0007 	add.w	r0, sp, #7
 8001908:	f88d 3007 	strb.w	r3, [sp, #7]
 800190c:	f7fe ff36 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0xE8);
 8001910:	20e8      	movs	r0, #232	@ 0xe8
 8001912:	f7fe ff85 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8001916:	2334      	movs	r3, #52	@ 0x34
    GC9A01_write_data(&val, sizeof(val));
 8001918:	f10d 0007 	add.w	r0, sp, #7
 800191c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001920:	f7fe ff2c 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x62);
 8001924:	2062      	movs	r0, #98	@ 0x62
 8001926:	f7fe ff7b 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800192a:	2318      	movs	r3, #24
 800192c:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001930:	7823      	ldrb	r3, [r4, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1fc      	bne.n	8001930 <GC9A01_init+0x10ac>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001936:	2201      	movs	r2, #1
 8001938:	2102      	movs	r1, #2
 800193a:	484f      	ldr	r0, [pc, #316]	@ (8001a78 <GC9A01_init+0x11f4>)
 800193c:	f004 fa1e 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001940:	7823      	ldrb	r3, [r4, #0]
 8001942:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1fa      	bne.n	8001940 <GC9A01_init+0x10bc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800194a:	2101      	movs	r1, #1
 800194c:	484a      	ldr	r0, [pc, #296]	@ (8001a78 <GC9A01_init+0x11f4>)
 800194e:	f004 fa15 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001952:	7823      	ldrb	r3, [r4, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1fc      	bne.n	8001952 <GC9A01_init+0x10ce>
	spi_dma_not_ready = 1;
 8001958:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800195a:	f10d 0107 	add.w	r1, sp, #7
 800195e:	4845      	ldr	r0, [pc, #276]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 8001960:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001962:	f009 f9d7 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001966:	7823      	ldrb	r3, [r4, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1fc      	bne.n	8001966 <GC9A01_init+0x10e2>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800196c:	2201      	movs	r2, #1
 800196e:	4842      	ldr	r0, [pc, #264]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001970:	4611      	mov	r1, r2
 8001972:	f004 fa03 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0D);
 8001976:	230d      	movs	r3, #13
 8001978:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800197c:	7823      	ldrb	r3, [r4, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1fc      	bne.n	800197c <GC9A01_init+0x10f8>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2102      	movs	r1, #2
 8001986:	483c      	ldr	r0, [pc, #240]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001988:	f004 f9f8 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800198c:	7823      	ldrb	r3, [r4, #0]
 800198e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1fa      	bne.n	800198c <GC9A01_init+0x1108>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001996:	2101      	movs	r1, #1
 8001998:	4837      	ldr	r0, [pc, #220]	@ (8001a78 <GC9A01_init+0x11f4>)
 800199a:	f004 f9ef 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800199e:	7823      	ldrb	r3, [r4, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1fc      	bne.n	800199e <GC9A01_init+0x111a>
	spi_dma_not_ready = 1;
 80019a4:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80019a6:	f10d 0107 	add.w	r1, sp, #7
 80019aa:	4832      	ldr	r0, [pc, #200]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 80019ac:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80019ae:	f009 f9b1 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80019b2:	7823      	ldrb	r3, [r4, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1fc      	bne.n	80019b2 <GC9A01_init+0x112e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	482f      	ldr	r0, [pc, #188]	@ (8001a78 <GC9A01_init+0x11f4>)
 80019bc:	4611      	mov	r1, r2
 80019be:	f004 f9dd 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 80019c2:	2371      	movs	r3, #113	@ 0x71
 80019c4:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80019c8:	7823      	ldrb	r3, [r4, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1fc      	bne.n	80019c8 <GC9A01_init+0x1144>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2102      	movs	r1, #2
 80019d2:	4829      	ldr	r0, [pc, #164]	@ (8001a78 <GC9A01_init+0x11f4>)
 80019d4:	f004 f9d2 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80019d8:	7823      	ldrb	r3, [r4, #0]
 80019da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1fa      	bne.n	80019d8 <GC9A01_init+0x1154>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80019e2:	2101      	movs	r1, #1
 80019e4:	4824      	ldr	r0, [pc, #144]	@ (8001a78 <GC9A01_init+0x11f4>)
 80019e6:	f004 f9c9 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80019ea:	7823      	ldrb	r3, [r4, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1fc      	bne.n	80019ea <GC9A01_init+0x1166>
	spi_dma_not_ready = 1;
 80019f0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80019f2:	f10d 0107 	add.w	r1, sp, #7
 80019f6:	481f      	ldr	r0, [pc, #124]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 80019f8:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80019fa:	f009 f98b 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80019fe:	7823      	ldrb	r3, [r4, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1fc      	bne.n	80019fe <GC9A01_init+0x117a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	481c      	ldr	r0, [pc, #112]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001a08:	4611      	mov	r1, r2
 8001a0a:	f004 f9b7 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xED);
 8001a0e:	23ed      	movs	r3, #237	@ 0xed
 8001a10:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001a14:	7823      	ldrb	r3, [r4, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1fc      	bne.n	8001a14 <GC9A01_init+0x1190>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4816      	ldr	r0, [pc, #88]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001a20:	f004 f9ac 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001a24:	7823      	ldrb	r3, [r4, #0]
 8001a26:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1fa      	bne.n	8001a24 <GC9A01_init+0x11a0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4811      	ldr	r0, [pc, #68]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001a32:	f004 f9a3 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001a36:	7823      	ldrb	r3, [r4, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1fc      	bne.n	8001a36 <GC9A01_init+0x11b2>
	spi_dma_not_ready = 1;
 8001a3c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001a3e:	f10d 0107 	add.w	r1, sp, #7
 8001a42:	480c      	ldr	r0, [pc, #48]	@ (8001a74 <GC9A01_init+0x11f0>)
	spi_dma_not_ready = 1;
 8001a44:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001a46:	f009 f965 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001a4a:	7823      	ldrb	r3, [r4, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1fc      	bne.n	8001a4a <GC9A01_init+0x11c6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	4809      	ldr	r0, [pc, #36]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001a54:	4611      	mov	r1, r2
 8001a56:	f004 f991 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001a5a:	2370      	movs	r3, #112	@ 0x70
 8001a5c:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001a60:	7823      	ldrb	r3, [r4, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1fc      	bne.n	8001a60 <GC9A01_init+0x11dc>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	2102      	movs	r1, #2
 8001a6a:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <GC9A01_init+0x11f4>)
 8001a6c:	f004 f986 	bl	8005d7c <HAL_GPIO_WritePin>
 8001a70:	e004      	b.n	8001a7c <GC9A01_init+0x11f8>
 8001a72:	bf00      	nop
 8001a74:	24000218 	.word	0x24000218
 8001a78:	58020400 	.word	0x58020400
	while(spi_dma_not_ready);
 8001a7c:	7823      	ldrb	r3, [r4, #0]
 8001a7e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1fa      	bne.n	8001a7c <GC9A01_init+0x11f8>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a86:	2101      	movs	r1, #1
 8001a88:	48b3      	ldr	r0, [pc, #716]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001a8a:	f004 f977 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001a8e:	7823      	ldrb	r3, [r4, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1fc      	bne.n	8001a8e <GC9A01_init+0x120a>
	spi_dma_not_ready = 1;
 8001a94:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001a96:	f10d 0107 	add.w	r1, sp, #7
 8001a9a:	48b0      	ldr	r0, [pc, #704]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001a9c:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001a9e:	f009 f939 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001aa2:	7823      	ldrb	r3, [r4, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1fc      	bne.n	8001aa2 <GC9A01_init+0x121e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	48ab      	ldr	r0, [pc, #684]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001aac:	4611      	mov	r1, r2
 8001aae:	f004 f965 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001ab2:	2370      	movs	r3, #112	@ 0x70
 8001ab4:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001ab8:	7823      	ldrb	r3, [r4, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1fc      	bne.n	8001ab8 <GC9A01_init+0x1234>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	48a5      	ldr	r0, [pc, #660]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001ac4:	f004 f95a 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001ac8:	7823      	ldrb	r3, [r4, #0]
 8001aca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1fa      	bne.n	8001ac8 <GC9A01_init+0x1244>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	48a0      	ldr	r0, [pc, #640]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001ad6:	f004 f951 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001ada:	7823      	ldrb	r3, [r4, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1fc      	bne.n	8001ada <GC9A01_init+0x1256>
	spi_dma_not_ready = 1;
 8001ae0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001ae2:	f10d 0107 	add.w	r1, sp, #7
 8001ae6:	489d      	ldr	r0, [pc, #628]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001ae8:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001aea:	f009 f913 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001aee:	7823      	ldrb	r3, [r4, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1fc      	bne.n	8001aee <GC9A01_init+0x126a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	4898      	ldr	r0, [pc, #608]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001af8:	4611      	mov	r1, r2
 8001afa:	f004 f93f 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x18);
 8001afe:	2318      	movs	r3, #24
 8001b00:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001b04:	7823      	ldrb	r3, [r4, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1fc      	bne.n	8001b04 <GC9A01_init+0x1280>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4892      	ldr	r0, [pc, #584]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001b10:	f004 f934 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001b14:	7823      	ldrb	r3, [r4, #0]
 8001b16:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1fa      	bne.n	8001b14 <GC9A01_init+0x1290>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	488d      	ldr	r0, [pc, #564]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001b22:	f004 f92b 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001b26:	7823      	ldrb	r3, [r4, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1fc      	bne.n	8001b26 <GC9A01_init+0x12a2>
	spi_dma_not_ready = 1;
 8001b2c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001b2e:	f10d 0107 	add.w	r1, sp, #7
 8001b32:	488a      	ldr	r0, [pc, #552]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001b34:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001b36:	f009 f8ed 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001b3a:	7823      	ldrb	r3, [r4, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1fc      	bne.n	8001b3a <GC9A01_init+0x12b6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	4885      	ldr	r0, [pc, #532]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001b44:	4611      	mov	r1, r2
 8001b46:	f004 f919 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0F);
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001b50:	7823      	ldrb	r3, [r4, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1fc      	bne.n	8001b50 <GC9A01_init+0x12cc>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2102      	movs	r1, #2
 8001b5a:	487f      	ldr	r0, [pc, #508]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001b5c:	f004 f90e 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001b60:	7823      	ldrb	r3, [r4, #0]
 8001b62:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1fa      	bne.n	8001b60 <GC9A01_init+0x12dc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	487a      	ldr	r0, [pc, #488]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001b6e:	f004 f905 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001b72:	7823      	ldrb	r3, [r4, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1fc      	bne.n	8001b72 <GC9A01_init+0x12ee>
	spi_dma_not_ready = 1;
 8001b78:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001b7a:	f10d 0107 	add.w	r1, sp, #7
 8001b7e:	4877      	ldr	r0, [pc, #476]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001b80:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001b82:	f009 f8c7 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001b86:	7823      	ldrb	r3, [r4, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1fc      	bne.n	8001b86 <GC9A01_init+0x1302>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4872      	ldr	r0, [pc, #456]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001b90:	4611      	mov	r1, r2
 8001b92:	f004 f8f3 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001b96:	2371      	movs	r3, #113	@ 0x71
    GC9A01_write_data(&val, sizeof(val));
 8001b98:	f10d 0007 	add.w	r0, sp, #7
 8001b9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ba0:	f7fe fdec 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0xEF);
 8001ba4:	23ef      	movs	r3, #239	@ 0xef
 8001ba6:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001baa:	7823      	ldrb	r3, [r4, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1fc      	bne.n	8001baa <GC9A01_init+0x1326>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	4868      	ldr	r0, [pc, #416]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001bb6:	f004 f8e1 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001bba:	7823      	ldrb	r3, [r4, #0]
 8001bbc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1fa      	bne.n	8001bba <GC9A01_init+0x1336>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4864      	ldr	r0, [pc, #400]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001bc8:	f004 f8d8 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001bcc:	7823      	ldrb	r3, [r4, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1fc      	bne.n	8001bcc <GC9A01_init+0x1348>
	spi_dma_not_ready = 1;
 8001bd2:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001bd4:	f10d 0107 	add.w	r1, sp, #7
 8001bd8:	4860      	ldr	r0, [pc, #384]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001bda:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001bdc:	f009 f89a 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001be0:	7823      	ldrb	r3, [r4, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1fc      	bne.n	8001be0 <GC9A01_init+0x135c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	485b      	ldr	r0, [pc, #364]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001bea:	2570      	movs	r5, #112	@ 0x70
 8001bec:	4611      	mov	r1, r2
 8001bee:	f004 f8c5 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001bf2:	f10d 0007 	add.w	r0, sp, #7
 8001bf6:	f88d 5007 	strb.w	r5, [sp, #7]
 8001bfa:	f7fe fdbf 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x70);
 8001bfe:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8001c02:	7823      	ldrb	r3, [r4, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1fc      	bne.n	8001c02 <GC9A01_init+0x137e>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	4852      	ldr	r0, [pc, #328]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001c0e:	f004 f8b5 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001c12:	7823      	ldrb	r3, [r4, #0]
 8001c14:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1fa      	bne.n	8001c12 <GC9A01_init+0x138e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	484e      	ldr	r0, [pc, #312]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001c20:	f004 f8ac 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001c24:	7823      	ldrb	r3, [r4, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1fc      	bne.n	8001c24 <GC9A01_init+0x13a0>
	spi_dma_not_ready = 1;
 8001c2a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001c2c:	f10d 0107 	add.w	r1, sp, #7
 8001c30:	484a      	ldr	r0, [pc, #296]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001c32:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001c34:	f009 f86e 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001c38:	7823      	ldrb	r3, [r4, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1fc      	bne.n	8001c38 <GC9A01_init+0x13b4>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4845      	ldr	r0, [pc, #276]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001c42:	4611      	mov	r1, r2
 8001c44:	f004 f89a 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x63);
 8001c48:	2063      	movs	r0, #99	@ 0x63
 8001c4a:	f7fe fde9 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8001c4e:	2318      	movs	r3, #24
    GC9A01_write_data(&val, sizeof(val));
 8001c50:	f10d 0007 	add.w	r0, sp, #7
 8001c54:	f88d 3007 	strb.w	r3, [sp, #7]
 8001c58:	f7fe fd90 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x11);
 8001c5c:	2311      	movs	r3, #17
 8001c5e:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001c62:	7823      	ldrb	r3, [r4, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1fc      	bne.n	8001c62 <GC9A01_init+0x13de>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	483a      	ldr	r0, [pc, #232]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001c6e:	f004 f885 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001c72:	7823      	ldrb	r3, [r4, #0]
 8001c74:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1fa      	bne.n	8001c72 <GC9A01_init+0x13ee>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4836      	ldr	r0, [pc, #216]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001c80:	f004 f87c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001c84:	7823      	ldrb	r3, [r4, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1fc      	bne.n	8001c84 <GC9A01_init+0x1400>
	spi_dma_not_ready = 1;
 8001c8a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001c8c:	f10d 0107 	add.w	r1, sp, #7
 8001c90:	4832      	ldr	r0, [pc, #200]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001c92:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001c94:	f009 f83e 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001c98:	7823      	ldrb	r3, [r4, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1fc      	bne.n	8001c98 <GC9A01_init+0x1414>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	482d      	ldr	r0, [pc, #180]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	f004 f86a 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001ca8:	2371      	movs	r3, #113	@ 0x71
 8001caa:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001cae:	7823      	ldrb	r3, [r4, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1fc      	bne.n	8001cae <GC9A01_init+0x142a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4827      	ldr	r0, [pc, #156]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001cba:	f004 f85f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001cbe:	7823      	ldrb	r3, [r4, #0]
 8001cc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1fa      	bne.n	8001cbe <GC9A01_init+0x143a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4823      	ldr	r0, [pc, #140]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001ccc:	f004 f856 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001cd0:	7823      	ldrb	r3, [r4, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1fc      	bne.n	8001cd0 <GC9A01_init+0x144c>
	spi_dma_not_ready = 1;
 8001cd6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001cd8:	f10d 0107 	add.w	r1, sp, #7
 8001cdc:	481f      	ldr	r0, [pc, #124]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001cde:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001ce0:	f009 f818 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001ce4:	7823      	ldrb	r3, [r4, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1fc      	bne.n	8001ce4 <GC9A01_init+0x1460>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001cea:	2201      	movs	r2, #1
 8001cec:	481a      	ldr	r0, [pc, #104]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001cee:	4611      	mov	r1, r2
 8001cf0:	f004 f844 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xF1);
 8001cf4:	23f1      	movs	r3, #241	@ 0xf1
 8001cf6:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001cfa:	7823      	ldrb	r3, [r4, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1fc      	bne.n	8001cfa <GC9A01_init+0x1476>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2102      	movs	r1, #2
 8001d04:	4814      	ldr	r0, [pc, #80]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001d06:	f004 f839 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001d0a:	7823      	ldrb	r3, [r4, #0]
 8001d0c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1fa      	bne.n	8001d0a <GC9A01_init+0x1486>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d14:	2101      	movs	r1, #1
 8001d16:	4810      	ldr	r0, [pc, #64]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001d18:	f004 f830 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001d1c:	7823      	ldrb	r3, [r4, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1fc      	bne.n	8001d1c <GC9A01_init+0x1498>
	spi_dma_not_ready = 1;
 8001d22:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001d24:	f10d 0107 	add.w	r1, sp, #7
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <GC9A01_init+0x14d8>)
	spi_dma_not_ready = 1;
 8001d2a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001d2c:	f008 fff2 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001d30:	7823      	ldrb	r3, [r4, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1fc      	bne.n	8001d30 <GC9A01_init+0x14ac>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	f004 f81e 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001d40:	2370      	movs	r3, #112	@ 0x70
 8001d42:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001d46:	7823      	ldrb	r3, [r4, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1fc      	bne.n	8001d46 <GC9A01_init+0x14c2>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4801      	ldr	r0, [pc, #4]	@ (8001d58 <GC9A01_init+0x14d4>)
 8001d52:	f004 f813 	bl	8005d7c <HAL_GPIO_WritePin>
 8001d56:	e003      	b.n	8001d60 <GC9A01_init+0x14dc>
 8001d58:	58020400 	.word	0x58020400
 8001d5c:	24000218 	.word	0x24000218
	while(spi_dma_not_ready);
 8001d60:	7823      	ldrb	r3, [r4, #0]
 8001d62:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1fa      	bne.n	8001d60 <GC9A01_init+0x14dc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	48c1      	ldr	r0, [pc, #772]	@ (8002074 <GC9A01_init+0x17f0>)
 8001d6e:	f004 f805 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001d72:	7823      	ldrb	r3, [r4, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1fc      	bne.n	8001d72 <GC9A01_init+0x14ee>
	spi_dma_not_ready = 1;
 8001d78:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001d7a:	f10d 0107 	add.w	r1, sp, #7
 8001d7e:	48be      	ldr	r0, [pc, #760]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 8001d80:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001d82:	f008 ffc7 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001d86:	7823      	ldrb	r3, [r4, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1fc      	bne.n	8001d86 <GC9A01_init+0x1502>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	48b9      	ldr	r0, [pc, #740]	@ (8002074 <GC9A01_init+0x17f0>)
 8001d90:	4611      	mov	r1, r2
 8001d92:	f003 fff3 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001d96:	2370      	movs	r3, #112	@ 0x70
    GC9A01_write_data(&val, sizeof(val));
 8001d98:	f10d 0007 	add.w	r0, sp, #7
 8001d9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001da0:	f7fe fcec 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x18);
 8001da4:	2318      	movs	r3, #24
 8001da6:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001daa:	7823      	ldrb	r3, [r4, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1fc      	bne.n	8001daa <GC9A01_init+0x1526>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	2102      	movs	r1, #2
 8001db4:	48af      	ldr	r0, [pc, #700]	@ (8002074 <GC9A01_init+0x17f0>)
 8001db6:	f003 ffe1 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001dba:	7823      	ldrb	r3, [r4, #0]
 8001dbc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1fa      	bne.n	8001dba <GC9A01_init+0x1536>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	48ab      	ldr	r0, [pc, #684]	@ (8002074 <GC9A01_init+0x17f0>)
 8001dc8:	f003 ffd8 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001dcc:	7823      	ldrb	r3, [r4, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1fc      	bne.n	8001dcc <GC9A01_init+0x1548>
	spi_dma_not_ready = 1;
 8001dd2:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001dd4:	f10d 0107 	add.w	r1, sp, #7
 8001dd8:	48a7      	ldr	r0, [pc, #668]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 8001dda:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001ddc:	f008 ff9a 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001de0:	7823      	ldrb	r3, [r4, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1fc      	bne.n	8001de0 <GC9A01_init+0x155c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	48a2      	ldr	r0, [pc, #648]	@ (8002074 <GC9A01_init+0x17f0>)
 8001dea:	4611      	mov	r1, r2
 8001dec:	f003 ffc6 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x13);
 8001df0:	2313      	movs	r3, #19
    GC9A01_write_data(&val, sizeof(val));
 8001df2:	f10d 0007 	add.w	r0, sp, #7
 8001df6:	f88d 3007 	strb.w	r3, [sp, #7]
 8001dfa:	f7fe fcbf 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x71);
 8001dfe:	2371      	movs	r3, #113	@ 0x71
 8001e00:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001e04:	7823      	ldrb	r3, [r4, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1fc      	bne.n	8001e04 <GC9A01_init+0x1580>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4899      	ldr	r0, [pc, #612]	@ (8002074 <GC9A01_init+0x17f0>)
 8001e10:	f003 ffb4 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001e14:	7823      	ldrb	r3, [r4, #0]
 8001e16:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1fa      	bne.n	8001e14 <GC9A01_init+0x1590>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e1e:	2101      	movs	r1, #1
 8001e20:	4894      	ldr	r0, [pc, #592]	@ (8002074 <GC9A01_init+0x17f0>)
 8001e22:	f003 ffab 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001e26:	7823      	ldrb	r3, [r4, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1fc      	bne.n	8001e26 <GC9A01_init+0x15a2>
	spi_dma_not_ready = 1;
 8001e2c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001e2e:	f10d 0107 	add.w	r1, sp, #7
 8001e32:	4891      	ldr	r0, [pc, #580]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 8001e34:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001e36:	f008 ff6d 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001e3a:	7823      	ldrb	r3, [r4, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1fc      	bne.n	8001e3a <GC9A01_init+0x15b6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	488c      	ldr	r0, [pc, #560]	@ (8002074 <GC9A01_init+0x17f0>)
 8001e44:	2570      	movs	r5, #112	@ 0x70
 8001e46:	4611      	mov	r1, r2
 8001e48:	f003 ff98 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xF3);
 8001e4c:	23f3      	movs	r3, #243	@ 0xf3
    GC9A01_write_data(&val, sizeof(val));
 8001e4e:	f10d 0007 	add.w	r0, sp, #7
 8001e52:	f88d 3007 	strb.w	r3, [sp, #7]
 8001e56:	f7fe fc91 	bl	800077c <GC9A01_write_data.constprop.0>
 8001e5a:	f10d 0007 	add.w	r0, sp, #7
 8001e5e:	f88d 5007 	strb.w	r5, [sp, #7]
 8001e62:	f7fe fc8b 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x70);
 8001e66:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8001e6a:	7823      	ldrb	r3, [r4, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1fc      	bne.n	8001e6a <GC9A01_init+0x15e6>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2102      	movs	r1, #2
 8001e74:	487f      	ldr	r0, [pc, #508]	@ (8002074 <GC9A01_init+0x17f0>)
 8001e76:	f003 ff81 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001e7a:	7823      	ldrb	r3, [r4, #0]
 8001e7c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1fa      	bne.n	8001e7a <GC9A01_init+0x15f6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e84:	2101      	movs	r1, #1
 8001e86:	487b      	ldr	r0, [pc, #492]	@ (8002074 <GC9A01_init+0x17f0>)
 8001e88:	f003 ff78 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001e8c:	7823      	ldrb	r3, [r4, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1fc      	bne.n	8001e8c <GC9A01_init+0x1608>
	spi_dma_not_ready = 1;
 8001e92:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001e94:	f10d 0107 	add.w	r1, sp, #7
 8001e98:	4877      	ldr	r0, [pc, #476]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 8001e9a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001e9c:	f008 ff3a 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001ea0:	7823      	ldrb	r3, [r4, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1fc      	bne.n	8001ea0 <GC9A01_init+0x161c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4872      	ldr	r0, [pc, #456]	@ (8002074 <GC9A01_init+0x17f0>)
 8001eaa:	4611      	mov	r1, r2
 8001eac:	f003 ff66 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x64);
 8001eb0:	2064      	movs	r0, #100	@ 0x64
 8001eb2:	f7fe fcb5 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8001eb6:	2328      	movs	r3, #40	@ 0x28
    GC9A01_write_data(&val, sizeof(val));
 8001eb8:	f10d 0007 	add.w	r0, sp, #7
 8001ebc:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ec0:	f7fe fc5c 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x29);
 8001ec4:	2329      	movs	r3, #41	@ 0x29
    GC9A01_write_data(&val, sizeof(val));
 8001ec6:	f10d 0007 	add.w	r0, sp, #7
 8001eca:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ece:	f7fe fc55 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0xF1);
 8001ed2:	23f1      	movs	r3, #241	@ 0xf1
    GC9A01_write_data(&val, sizeof(val));
 8001ed4:	f10d 0007 	add.w	r0, sp, #7
 8001ed8:	f88d 3007 	strb.w	r3, [sp, #7]
 8001edc:	f7fe fc4e 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x01);
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001ee6:	7823      	ldrb	r3, [r4, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1fc      	bne.n	8001ee6 <GC9A01_init+0x1662>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4860      	ldr	r0, [pc, #384]	@ (8002074 <GC9A01_init+0x17f0>)
 8001ef2:	f003 ff43 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001ef6:	7823      	ldrb	r3, [r4, #0]
 8001ef8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1fa      	bne.n	8001ef6 <GC9A01_init+0x1672>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001f00:	2101      	movs	r1, #1
 8001f02:	485c      	ldr	r0, [pc, #368]	@ (8002074 <GC9A01_init+0x17f0>)
 8001f04:	f003 ff3a 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001f08:	7823      	ldrb	r3, [r4, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1fc      	bne.n	8001f08 <GC9A01_init+0x1684>
	spi_dma_not_ready = 1;
 8001f0e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001f10:	f10d 0107 	add.w	r1, sp, #7
 8001f14:	4858      	ldr	r0, [pc, #352]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 8001f16:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001f18:	f008 fefc 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001f1c:	7823      	ldrb	r3, [r4, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1fc      	bne.n	8001f1c <GC9A01_init+0x1698>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	4853      	ldr	r0, [pc, #332]	@ (8002074 <GC9A01_init+0x17f0>)
 8001f26:	4611      	mov	r1, r2
 8001f28:	f003 ff28 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xF1);
 8001f2c:	23f1      	movs	r3, #241	@ 0xf1
 8001f2e:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001f32:	7823      	ldrb	r3, [r4, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1fc      	bne.n	8001f32 <GC9A01_init+0x16ae>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	484d      	ldr	r0, [pc, #308]	@ (8002074 <GC9A01_init+0x17f0>)
 8001f3e:	f003 ff1d 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001f42:	7823      	ldrb	r3, [r4, #0]
 8001f44:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1fa      	bne.n	8001f42 <GC9A01_init+0x16be>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4849      	ldr	r0, [pc, #292]	@ (8002074 <GC9A01_init+0x17f0>)
 8001f50:	f003 ff14 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001f54:	7823      	ldrb	r3, [r4, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1fc      	bne.n	8001f54 <GC9A01_init+0x16d0>
	spi_dma_not_ready = 1;
 8001f5a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001f5c:	f10d 0107 	add.w	r1, sp, #7
 8001f60:	4845      	ldr	r0, [pc, #276]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 8001f62:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001f64:	f008 fed6 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001f68:	7823      	ldrb	r3, [r4, #0]
 8001f6a:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1fa      	bne.n	8001f68 <GC9A01_init+0x16e4>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	483f      	ldr	r0, [pc, #252]	@ (8002074 <GC9A01_init+0x17f0>)
 8001f76:	4611      	mov	r1, r2
 8001f78:	f003 ff00 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001f7c:	f10d 0007 	add.w	r0, sp, #7
 8001f80:	f88d 5007 	strb.w	r5, [sp, #7]
 8001f84:	f7fe fbfa 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x07);
 8001f88:	2307      	movs	r3, #7
    GC9A01_write_data(&val, sizeof(val));
 8001f8a:	eb0d 0003 	add.w	r0, sp, r3
 8001f8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001f92:	f7fe fbf3 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x66);
 8001f96:	2066      	movs	r0, #102	@ 0x66
 8001f98:	f7fe fc42 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8001f9c:	233c      	movs	r3, #60	@ 0x3c
    GC9A01_write_data(&val, sizeof(val));
 8001f9e:	f10d 0007 	add.w	r0, sp, #7
 8001fa2:	f88d 3007 	strb.w	r3, [sp, #7]
 8001fa6:	f7fe fbe9 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x00);
 8001faa:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8001fae:	7823      	ldrb	r3, [r4, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1fc      	bne.n	8001fae <GC9A01_init+0x172a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	482e      	ldr	r0, [pc, #184]	@ (8002074 <GC9A01_init+0x17f0>)
 8001fba:	f003 fedf 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8001fbe:	7823      	ldrb	r3, [r4, #0]
 8001fc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1fa      	bne.n	8001fbe <GC9A01_init+0x173a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	482a      	ldr	r0, [pc, #168]	@ (8002074 <GC9A01_init+0x17f0>)
 8001fcc:	f003 fed6 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8001fd0:	7823      	ldrb	r3, [r4, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1fc      	bne.n	8001fd0 <GC9A01_init+0x174c>
	spi_dma_not_ready = 1;
 8001fd6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001fd8:	f10d 0107 	add.w	r1, sp, #7
 8001fdc:	4826      	ldr	r0, [pc, #152]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 8001fde:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001fe0:	f008 fe98 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8001fe4:	7823      	ldrb	r3, [r4, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1fc      	bne.n	8001fe4 <GC9A01_init+0x1760>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	4821      	ldr	r0, [pc, #132]	@ (8002074 <GC9A01_init+0x17f0>)
 8001fee:	4611      	mov	r1, r2
 8001ff0:	f003 fec4 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xCD);
 8001ff4:	23cd      	movs	r3, #205	@ 0xcd
 8001ff6:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8001ffa:	7823      	ldrb	r3, [r4, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1fc      	bne.n	8001ffa <GC9A01_init+0x1776>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002000:	2201      	movs	r2, #1
 8002002:	2102      	movs	r1, #2
 8002004:	481b      	ldr	r0, [pc, #108]	@ (8002074 <GC9A01_init+0x17f0>)
 8002006:	f003 feb9 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800200a:	7823      	ldrb	r3, [r4, #0]
 800200c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1fa      	bne.n	800200a <GC9A01_init+0x1786>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002014:	2101      	movs	r1, #1
 8002016:	4817      	ldr	r0, [pc, #92]	@ (8002074 <GC9A01_init+0x17f0>)
 8002018:	f003 feb0 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800201c:	7823      	ldrb	r3, [r4, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1fc      	bne.n	800201c <GC9A01_init+0x1798>
	spi_dma_not_ready = 1;
 8002022:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002024:	f10d 0107 	add.w	r1, sp, #7
 8002028:	4813      	ldr	r0, [pc, #76]	@ (8002078 <GC9A01_init+0x17f4>)
	spi_dma_not_ready = 1;
 800202a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800202c:	f008 fe72 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8002030:	7823      	ldrb	r3, [r4, #0]
 8002032:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1fa      	bne.n	8002030 <GC9A01_init+0x17ac>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800203a:	2201      	movs	r2, #1
 800203c:	480d      	ldr	r0, [pc, #52]	@ (8002074 <GC9A01_init+0x17f0>)
 800203e:	2645      	movs	r6, #69	@ 0x45
 8002040:	4611      	mov	r1, r2
 8002042:	f003 fe9b 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x67);
 8002046:	2367      	movs	r3, #103	@ 0x67
    GC9A01_write_data(&val, sizeof(val));
 8002048:	f10d 0007 	add.w	r0, sp, #7
 800204c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002050:	f7fe fb94 	bl	800077c <GC9A01_write_data.constprop.0>
 8002054:	f10d 0007 	add.w	r0, sp, #7
 8002058:	f88d 6007 	strb.w	r6, [sp, #7]
 800205c:	f7fe fb8e 	bl	800077c <GC9A01_write_data.constprop.0>
 8002060:	f10d 0007 	add.w	r0, sp, #7
 8002064:	f88d 6007 	strb.w	r6, [sp, #7]
 8002068:	f7fe fb88 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x10);
 800206c:	2310      	movs	r3, #16
    GC9A01_write_data(&val, sizeof(val));
 800206e:	f10d 0007 	add.w	r0, sp, #7
 8002072:	e003      	b.n	800207c <GC9A01_init+0x17f8>
 8002074:	58020400 	.word	0x58020400
 8002078:	24000218 	.word	0x24000218
 800207c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002080:	f7fe fb7c 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x00);
 8002084:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8002088:	7823      	ldrb	r3, [r4, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1fc      	bne.n	8002088 <GC9A01_init+0x1804>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2102      	movs	r1, #2
 8002092:	48b8      	ldr	r0, [pc, #736]	@ (8002374 <GC9A01_init+0x1af0>)
 8002094:	f003 fe72 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002098:	7823      	ldrb	r3, [r4, #0]
 800209a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1fa      	bne.n	8002098 <GC9A01_init+0x1814>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80020a2:	2101      	movs	r1, #1
 80020a4:	48b3      	ldr	r0, [pc, #716]	@ (8002374 <GC9A01_init+0x1af0>)
 80020a6:	f003 fe69 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80020aa:	7823      	ldrb	r3, [r4, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1fc      	bne.n	80020aa <GC9A01_init+0x1826>
	spi_dma_not_ready = 1;
 80020b0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80020b2:	f10d 0107 	add.w	r1, sp, #7
 80020b6:	48b0      	ldr	r0, [pc, #704]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 80020b8:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80020ba:	f008 fe2b 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80020be:	7823      	ldrb	r3, [r4, #0]
 80020c0:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1fa      	bne.n	80020be <GC9A01_init+0x183a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	48aa      	ldr	r0, [pc, #680]	@ (8002374 <GC9A01_init+0x1af0>)
 80020cc:	4611      	mov	r1, r2
 80020ce:	f003 fe55 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 80020d2:	f10d 0007 	add.w	r0, sp, #7
 80020d6:	f88d 5007 	strb.w	r5, [sp, #7]
 80020da:	f7fe fb4f 	bl	800077c <GC9A01_write_data.constprop.0>
 80020de:	f10d 0007 	add.w	r0, sp, #7
 80020e2:	f88d 5007 	strb.w	r5, [sp, #7]
 80020e6:	f7fe fb49 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x67);
 80020ea:	2067      	movs	r0, #103	@ 0x67
 80020ec:	f7fe fb98 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_data(&val, sizeof(val));
 80020f0:	f10d 0007 	add.w	r0, sp, #7
 80020f4:	f88d 5007 	strb.w	r5, [sp, #7]
 80020f8:	f7fe fb40 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x3C);
 80020fc:	233c      	movs	r3, #60	@ 0x3c
 80020fe:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8002102:	7823      	ldrb	r3, [r4, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1fc      	bne.n	8002102 <GC9A01_init+0x187e>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002108:	2201      	movs	r2, #1
 800210a:	2102      	movs	r1, #2
 800210c:	4899      	ldr	r0, [pc, #612]	@ (8002374 <GC9A01_init+0x1af0>)
 800210e:	f003 fe35 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002112:	7823      	ldrb	r3, [r4, #0]
 8002114:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1fa      	bne.n	8002112 <GC9A01_init+0x188e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800211c:	2101      	movs	r1, #1
 800211e:	4895      	ldr	r0, [pc, #596]	@ (8002374 <GC9A01_init+0x1af0>)
 8002120:	f003 fe2c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8002124:	7823      	ldrb	r3, [r4, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1fc      	bne.n	8002124 <GC9A01_init+0x18a0>
	spi_dma_not_ready = 1;
 800212a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800212c:	f10d 0107 	add.w	r1, sp, #7
 8002130:	4891      	ldr	r0, [pc, #580]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 8002132:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002134:	f008 fdee 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8002138:	7823      	ldrb	r3, [r4, #0]
 800213a:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1fa      	bne.n	8002138 <GC9A01_init+0x18b4>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002142:	2201      	movs	r2, #1
 8002144:	488b      	ldr	r0, [pc, #556]	@ (8002374 <GC9A01_init+0x1af0>)
 8002146:	4611      	mov	r1, r2
 8002148:	f003 fe18 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 800214c:	f10d 0007 	add.w	r0, sp, #7
 8002150:	f88d 5007 	strb.w	r5, [sp, #7]
 8002154:	f7fe fb12 	bl	800077c <GC9A01_write_data.constprop.0>
 8002158:	f10d 0007 	add.w	r0, sp, #7
 800215c:	f88d 5007 	strb.w	r5, [sp, #7]
 8002160:	f7fe fb0c 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x00);
 8002164:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8002168:	7823      	ldrb	r3, [r4, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1fc      	bne.n	8002168 <GC9A01_init+0x18e4>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2102      	movs	r1, #2
 8002172:	4880      	ldr	r0, [pc, #512]	@ (8002374 <GC9A01_init+0x1af0>)
 8002174:	f003 fe02 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002178:	7823      	ldrb	r3, [r4, #0]
 800217a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1fa      	bne.n	8002178 <GC9A01_init+0x18f4>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002182:	2101      	movs	r1, #1
 8002184:	487b      	ldr	r0, [pc, #492]	@ (8002374 <GC9A01_init+0x1af0>)
 8002186:	f003 fdf9 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800218a:	7823      	ldrb	r3, [r4, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1fc      	bne.n	800218a <GC9A01_init+0x1906>
	spi_dma_not_ready = 1;
 8002190:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002192:	f10d 0107 	add.w	r1, sp, #7
 8002196:	4878      	ldr	r0, [pc, #480]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 8002198:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800219a:	f008 fdbb 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800219e:	7823      	ldrb	r3, [r4, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1fc      	bne.n	800219e <GC9A01_init+0x191a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	4873      	ldr	r0, [pc, #460]	@ (8002374 <GC9A01_init+0x1af0>)
 80021a8:	4611      	mov	r1, r2
 80021aa:	f003 fde7 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x01);
 80021ae:	2301      	movs	r3, #1
    GC9A01_write_data(&val, sizeof(val));
 80021b0:	f10d 0007 	add.w	r0, sp, #7
 80021b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80021b8:	f7fe fae0 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x54);
 80021bc:	2354      	movs	r3, #84	@ 0x54
    GC9A01_write_data(&val, sizeof(val));
 80021be:	f10d 0007 	add.w	r0, sp, #7
 80021c2:	f88d 3007 	strb.w	r3, [sp, #7]
 80021c6:	f7fe fad9 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x10);
 80021ca:	2310      	movs	r3, #16
    GC9A01_write_data(&val, sizeof(val));
 80021cc:	f10d 0007 	add.w	r0, sp, #7
 80021d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80021d4:	f7fe fad2 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x32);
 80021d8:	2332      	movs	r3, #50	@ 0x32
 80021da:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80021de:	7823      	ldrb	r3, [r4, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1fc      	bne.n	80021de <GC9A01_init+0x195a>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	2102      	movs	r1, #2
 80021e8:	4862      	ldr	r0, [pc, #392]	@ (8002374 <GC9A01_init+0x1af0>)
 80021ea:	f003 fdc7 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80021ee:	7823      	ldrb	r3, [r4, #0]
 80021f0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1fa      	bne.n	80021ee <GC9A01_init+0x196a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80021f8:	2101      	movs	r1, #1
 80021fa:	485e      	ldr	r0, [pc, #376]	@ (8002374 <GC9A01_init+0x1af0>)
 80021fc:	f003 fdbe 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8002200:	7823      	ldrb	r3, [r4, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1fc      	bne.n	8002200 <GC9A01_init+0x197c>
	spi_dma_not_ready = 1;
 8002206:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002208:	f10d 0107 	add.w	r1, sp, #7
 800220c:	485a      	ldr	r0, [pc, #360]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 800220e:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002210:	f008 fd80 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8002214:	7823      	ldrb	r3, [r4, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1fc      	bne.n	8002214 <GC9A01_init+0x1990>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800221a:	2201      	movs	r2, #1
 800221c:	4855      	ldr	r0, [pc, #340]	@ (8002374 <GC9A01_init+0x1af0>)
 800221e:	4611      	mov	r1, r2
 8002220:	f003 fdac 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x98);
 8002224:	2398      	movs	r3, #152	@ 0x98
 8002226:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800222a:	7823      	ldrb	r3, [r4, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1fc      	bne.n	800222a <GC9A01_init+0x19a6>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002230:	2201      	movs	r2, #1
 8002232:	2102      	movs	r1, #2
 8002234:	484f      	ldr	r0, [pc, #316]	@ (8002374 <GC9A01_init+0x1af0>)
 8002236:	f003 fda1 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800223a:	7823      	ldrb	r3, [r4, #0]
 800223c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1fa      	bne.n	800223a <GC9A01_init+0x19b6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002244:	2101      	movs	r1, #1
 8002246:	484b      	ldr	r0, [pc, #300]	@ (8002374 <GC9A01_init+0x1af0>)
 8002248:	f003 fd98 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800224c:	7823      	ldrb	r3, [r4, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1fc      	bne.n	800224c <GC9A01_init+0x19c8>
	spi_dma_not_ready = 1;
 8002252:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002254:	f10d 0107 	add.w	r1, sp, #7
 8002258:	4847      	ldr	r0, [pc, #284]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 800225a:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800225c:	f008 fd5a 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8002260:	7823      	ldrb	r3, [r4, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1fc      	bne.n	8002260 <GC9A01_init+0x19dc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002266:	2201      	movs	r2, #1
 8002268:	4842      	ldr	r0, [pc, #264]	@ (8002374 <GC9A01_init+0x1af0>)
 800226a:	4611      	mov	r1, r2
 800226c:	f003 fd86 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(0x74);
 8002270:	2074      	movs	r0, #116	@ 0x74
 8002272:	f7fe fad5 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8002276:	2310      	movs	r3, #16
 8002278:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800227c:	7823      	ldrb	r3, [r4, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1fc      	bne.n	800227c <GC9A01_init+0x19f8>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002282:	2201      	movs	r2, #1
 8002284:	2102      	movs	r1, #2
 8002286:	483b      	ldr	r0, [pc, #236]	@ (8002374 <GC9A01_init+0x1af0>)
 8002288:	f003 fd78 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 800228c:	7823      	ldrb	r3, [r4, #0]
 800228e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1fa      	bne.n	800228c <GC9A01_init+0x1a08>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002296:	2101      	movs	r1, #1
 8002298:	4836      	ldr	r0, [pc, #216]	@ (8002374 <GC9A01_init+0x1af0>)
 800229a:	f003 fd6f 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800229e:	7823      	ldrb	r3, [r4, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1fc      	bne.n	800229e <GC9A01_init+0x1a1a>
	spi_dma_not_ready = 1;
 80022a4:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80022a6:	f10d 0107 	add.w	r1, sp, #7
 80022aa:	4833      	ldr	r0, [pc, #204]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 80022ac:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80022ae:	f008 fd31 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80022b2:	7823      	ldrb	r3, [r4, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1fc      	bne.n	80022b2 <GC9A01_init+0x1a2e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022b8:	2201      	movs	r2, #1
 80022ba:	482e      	ldr	r0, [pc, #184]	@ (8002374 <GC9A01_init+0x1af0>)
 80022bc:	4611      	mov	r1, r2
 80022be:	f003 fd5d 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x85);
 80022c2:	2385      	movs	r3, #133	@ 0x85
 80022c4:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80022c8:	7823      	ldrb	r3, [r4, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1fc      	bne.n	80022c8 <GC9A01_init+0x1a44>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2102      	movs	r1, #2
 80022d2:	4828      	ldr	r0, [pc, #160]	@ (8002374 <GC9A01_init+0x1af0>)
 80022d4:	f003 fd52 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80022d8:	7823      	ldrb	r3, [r4, #0]
 80022da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1fa      	bne.n	80022d8 <GC9A01_init+0x1a54>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80022e2:	2101      	movs	r1, #1
 80022e4:	4823      	ldr	r0, [pc, #140]	@ (8002374 <GC9A01_init+0x1af0>)
 80022e6:	f003 fd49 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80022ea:	7823      	ldrb	r3, [r4, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1fc      	bne.n	80022ea <GC9A01_init+0x1a66>
	spi_dma_not_ready = 1;
 80022f0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80022f2:	f10d 0107 	add.w	r1, sp, #7
 80022f6:	4820      	ldr	r0, [pc, #128]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 80022f8:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80022fa:	f008 fd0b 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80022fe:	7823      	ldrb	r3, [r4, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1fc      	bne.n	80022fe <GC9A01_init+0x1a7a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002304:	2201      	movs	r2, #1
 8002306:	481b      	ldr	r0, [pc, #108]	@ (8002374 <GC9A01_init+0x1af0>)
 8002308:	4611      	mov	r1, r2
 800230a:	f003 fd37 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x80);
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8002314:	7823      	ldrb	r3, [r4, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1fc      	bne.n	8002314 <GC9A01_init+0x1a90>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800231a:	2201      	movs	r2, #1
 800231c:	2102      	movs	r1, #2
 800231e:	4815      	ldr	r0, [pc, #84]	@ (8002374 <GC9A01_init+0x1af0>)
 8002320:	f003 fd2c 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002324:	7823      	ldrb	r3, [r4, #0]
 8002326:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1fa      	bne.n	8002324 <GC9A01_init+0x1aa0>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800232e:	2101      	movs	r1, #1
 8002330:	4810      	ldr	r0, [pc, #64]	@ (8002374 <GC9A01_init+0x1af0>)
 8002332:	f003 fd23 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8002336:	7823      	ldrb	r3, [r4, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1fc      	bne.n	8002336 <GC9A01_init+0x1ab2>
	spi_dma_not_ready = 1;
 800233c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800233e:	f10d 0107 	add.w	r1, sp, #7
 8002342:	480d      	ldr	r0, [pc, #52]	@ (8002378 <GC9A01_init+0x1af4>)
	spi_dma_not_ready = 1;
 8002344:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002346:	f008 fce5 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800234a:	7823      	ldrb	r3, [r4, #0]
 800234c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1fa      	bne.n	800234a <GC9A01_init+0x1ac6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002354:	2201      	movs	r2, #1
 8002356:	4807      	ldr	r0, [pc, #28]	@ (8002374 <GC9A01_init+0x1af0>)
 8002358:	4611      	mov	r1, r2
 800235a:	f003 fd0f 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x00);
 800235e:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 8002362:	7823      	ldrb	r3, [r4, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1fc      	bne.n	8002362 <GC9A01_init+0x1ade>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002368:	2201      	movs	r2, #1
 800236a:	2102      	movs	r1, #2
 800236c:	4801      	ldr	r0, [pc, #4]	@ (8002374 <GC9A01_init+0x1af0>)
 800236e:	f003 fd05 	bl	8005d7c <HAL_GPIO_WritePin>
 8002372:	e003      	b.n	800237c <GC9A01_init+0x1af8>
 8002374:	58020400 	.word	0x58020400
 8002378:	24000218 	.word	0x24000218
	while(spi_dma_not_ready);
 800237c:	7823      	ldrb	r3, [r4, #0]
 800237e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1fa      	bne.n	800237c <GC9A01_init+0x1af8>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002386:	2101      	movs	r1, #1
 8002388:	4847      	ldr	r0, [pc, #284]	@ (80024a8 <GC9A01_init+0x1c24>)
 800238a:	f003 fcf7 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800238e:	7823      	ldrb	r3, [r4, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1fc      	bne.n	800238e <GC9A01_init+0x1b0a>
	spi_dma_not_ready = 1;
 8002394:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002396:	f10d 0107 	add.w	r1, sp, #7
 800239a:	4844      	ldr	r0, [pc, #272]	@ (80024ac <GC9A01_init+0x1c28>)
	spi_dma_not_ready = 1;
 800239c:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800239e:	f008 fcb9 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80023a2:	7823      	ldrb	r3, [r4, #0]
 80023a4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1fa      	bne.n	80023a2 <GC9A01_init+0x1b1e>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	483e      	ldr	r0, [pc, #248]	@ (80024a8 <GC9A01_init+0x1c24>)
 80023b0:	4611      	mov	r1, r2
 80023b2:	f003 fce3 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x00);
 80023b6:	f88d 5007 	strb.w	r5, [sp, #7]
	while(spi_dma_not_ready);
 80023ba:	7823      	ldrb	r3, [r4, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1fc      	bne.n	80023ba <GC9A01_init+0x1b36>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2102      	movs	r1, #2
 80023c4:	4838      	ldr	r0, [pc, #224]	@ (80024a8 <GC9A01_init+0x1c24>)
 80023c6:	f003 fcd9 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80023ca:	7823      	ldrb	r3, [r4, #0]
 80023cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1fa      	bne.n	80023ca <GC9A01_init+0x1b46>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80023d4:	2101      	movs	r1, #1
 80023d6:	4834      	ldr	r0, [pc, #208]	@ (80024a8 <GC9A01_init+0x1c24>)
 80023d8:	f003 fcd0 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80023dc:	7823      	ldrb	r3, [r4, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1fc      	bne.n	80023dc <GC9A01_init+0x1b58>
	spi_dma_not_ready = 1;
 80023e2:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80023e4:	f10d 0107 	add.w	r1, sp, #7
 80023e8:	4830      	ldr	r0, [pc, #192]	@ (80024ac <GC9A01_init+0x1c28>)
	spi_dma_not_ready = 1;
 80023ea:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80023ec:	f008 fc92 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80023f0:	7823      	ldrb	r3, [r4, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1fc      	bne.n	80023f0 <GC9A01_init+0x1b6c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80023f6:	2201      	movs	r2, #1
 80023f8:	482b      	ldr	r0, [pc, #172]	@ (80024a8 <GC9A01_init+0x1c24>)
 80023fa:	4611      	mov	r1, r2
 80023fc:	f003 fcbe 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x4E);
 8002400:	234e      	movs	r3, #78	@ 0x4e
 8002402:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 8002406:	7823      	ldrb	r3, [r4, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1fc      	bne.n	8002406 <GC9A01_init+0x1b82>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800240c:	2201      	movs	r2, #1
 800240e:	2102      	movs	r1, #2
 8002410:	4825      	ldr	r0, [pc, #148]	@ (80024a8 <GC9A01_init+0x1c24>)
 8002412:	f003 fcb3 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002416:	7823      	ldrb	r3, [r4, #0]
 8002418:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1fa      	bne.n	8002416 <GC9A01_init+0x1b92>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002420:	2101      	movs	r1, #1
 8002422:	4821      	ldr	r0, [pc, #132]	@ (80024a8 <GC9A01_init+0x1c24>)
 8002424:	f003 fcaa 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8002428:	7823      	ldrb	r3, [r4, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1fc      	bne.n	8002428 <GC9A01_init+0x1ba4>
	spi_dma_not_ready = 1;
 800242e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002430:	f10d 0107 	add.w	r1, sp, #7
 8002434:	481d      	ldr	r0, [pc, #116]	@ (80024ac <GC9A01_init+0x1c28>)
	spi_dma_not_ready = 1;
 8002436:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002438:	f008 fc6c 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800243c:	7823      	ldrb	r3, [r4, #0]
 800243e:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1fa      	bne.n	800243c <GC9A01_init+0x1bb8>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002446:	2201      	movs	r2, #1
 8002448:	4817      	ldr	r0, [pc, #92]	@ (80024a8 <GC9A01_init+0x1c24>)
 800244a:	4611      	mov	r1, r2
 800244c:	f003 fc96 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8002450:	f10d 0007 	add.w	r0, sp, #7
 8002454:	f88d 5007 	strb.w	r5, [sp, #7]
 8002458:	f7fe f990 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x98);
 800245c:	2098      	movs	r0, #152	@ 0x98
 800245e:	f7fe f9df 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8002462:	233e      	movs	r3, #62	@ 0x3e
    GC9A01_write_data(&val, sizeof(val));
 8002464:	f10d 0007 	add.w	r0, sp, #7
 8002468:	f88d 3007 	strb.w	r3, [sp, #7]
 800246c:	f7fe f986 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x07);
 8002470:	2307      	movs	r3, #7
    GC9A01_write_data(&val, sizeof(val));
 8002472:	eb0d 0003 	add.w	r0, sp, r3
 8002476:	f88d 3007 	strb.w	r3, [sp, #7]
 800247a:	f7fe f97f 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_command(0x35);
 800247e:	2035      	movs	r0, #53	@ 0x35
 8002480:	f7fe f9ce 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8002484:	2021      	movs	r0, #33	@ 0x21
 8002486:	f7fe f9cb 	bl	8000820 <GC9A01_write_command>
    GC9A01_write_command(0x11);
 800248a:	2011      	movs	r0, #17
 800248c:	f7fe f9c8 	bl	8000820 <GC9A01_write_command>
    HAL_Delay(120);
 8002490:	2078      	movs	r0, #120	@ 0x78
 8002492:	f001 fcad 	bl	8003df0 <HAL_Delay>
    GC9A01_write_command(0x29);
 8002496:	2029      	movs	r0, #41	@ 0x29
 8002498:	f7fe f9c2 	bl	8000820 <GC9A01_write_command>
    HAL_Delay(20);
 800249c:	2014      	movs	r0, #20
}
 800249e:	b002      	add	sp, #8
 80024a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(20);
 80024a4:	f001 bca4 	b.w	8003df0 <HAL_Delay>
 80024a8:	58020400 	.word	0x58020400
 80024ac:	24000218 	.word	0x24000218

080024b0 <GC9A01_set_frame>:
void GC9A01_set_frame(struct GC9A01_frame frame) {
 80024b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024b4:	b085      	sub	sp, #20
 80024b6:	222a      	movs	r2, #42	@ 0x2a
 80024b8:	4c5e      	ldr	r4, [pc, #376]	@ (8002634 <GC9A01_set_frame+0x184>)
 80024ba:	466b      	mov	r3, sp
 80024bc:	f88d 200c 	strb.w	r2, [sp, #12]
 80024c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80024c4:	f8bd 8000 	ldrh.w	r8, [sp]
 80024c8:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80024cc:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 80024d0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
	while(spi_dma_not_ready);
 80024d4:	7823      	ldrb	r3, [r4, #0]
 80024d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1fa      	bne.n	80024d4 <GC9A01_set_frame+0x24>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80024de:	2102      	movs	r1, #2
 80024e0:	4855      	ldr	r0, [pc, #340]	@ (8002638 <GC9A01_set_frame+0x188>)
 80024e2:	f003 fc4b 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80024e6:	7823      	ldrb	r3, [r4, #0]
 80024e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1fa      	bne.n	80024e6 <GC9A01_set_frame+0x36>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80024f0:	2101      	movs	r1, #1
 80024f2:	4851      	ldr	r0, [pc, #324]	@ (8002638 <GC9A01_set_frame+0x188>)
 80024f4:	f003 fc42 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80024f8:	7823      	ldrb	r3, [r4, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1fc      	bne.n	80024f8 <GC9A01_set_frame+0x48>
	spi_dma_not_ready = 1;
 80024fe:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002500:	484e      	ldr	r0, [pc, #312]	@ (800263c <GC9A01_set_frame+0x18c>)
 8002502:	a903      	add	r1, sp, #12
	spi_dma_not_ready = 1;
 8002504:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002506:	f008 fc05 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800250a:	7823      	ldrb	r3, [r4, #0]
 800250c:	f003 09ff 	and.w	r9, r3, #255	@ 0xff
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1fa      	bne.n	800250a <GC9A01_set_frame+0x5a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002514:	2201      	movs	r2, #1
 8002516:	4848      	ldr	r0, [pc, #288]	@ (8002638 <GC9A01_set_frame+0x188>)
 8002518:	4611      	mov	r1, r2
 800251a:	f003 fc2f 	bl	8005d7c <HAL_GPIO_WritePin>
    data[0] = (frame.start.X >> 8) & 0xFF;
 800251e:	464b      	mov	r3, r9
 8002520:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8002524:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.X >> 8) & 0xFF;
 8002528:	0a3a      	lsrs	r2, r7, #8
    data[0] = (frame.start.X >> 8) & 0xFF;
 800252a:	f368 230f 	bfi	r3, r8, #8, #8
 800252e:	f362 4317 	bfi	r3, r2, #16, #8
 8002532:	f367 631f 	bfi	r3, r7, #24, #8
 8002536:	9303      	str	r3, [sp, #12]
	while(spi_dma_not_ready);
 8002538:	7823      	ldrb	r3, [r4, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1fc      	bne.n	8002538 <GC9A01_set_frame+0x88>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800253e:	2201      	movs	r2, #1
 8002540:	2102      	movs	r1, #2
 8002542:	483d      	ldr	r0, [pc, #244]	@ (8002638 <GC9A01_set_frame+0x188>)
 8002544:	f003 fc1a 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002548:	7823      	ldrb	r3, [r4, #0]
 800254a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1fa      	bne.n	8002548 <GC9A01_set_frame+0x98>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002552:	2101      	movs	r1, #1
 8002554:	4838      	ldr	r0, [pc, #224]	@ (8002638 <GC9A01_set_frame+0x188>)
 8002556:	f003 fc11 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 800255a:	7823      	ldrb	r3, [r4, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1fc      	bne.n	800255a <GC9A01_set_frame+0xaa>
	spi_dma_not_ready = 1;
 8002560:	2301      	movs	r3, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002562:	2204      	movs	r2, #4
 8002564:	a903      	add	r1, sp, #12
 8002566:	4835      	ldr	r0, [pc, #212]	@ (800263c <GC9A01_set_frame+0x18c>)
	spi_dma_not_ready = 1;
 8002568:	7023      	strb	r3, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800256a:	f008 fbd3 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800256e:	7823      	ldrb	r3, [r4, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1fc      	bne.n	800256e <GC9A01_set_frame+0xbe>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002574:	2201      	movs	r2, #1
 8002576:	4830      	ldr	r0, [pc, #192]	@ (8002638 <GC9A01_set_frame+0x188>)
 8002578:	4611      	mov	r1, r2
 800257a:	f003 fbff 	bl	8005d7c <HAL_GPIO_WritePin>
    GC9A01_write_command(ROW_ADDR_SET);
 800257e:	232b      	movs	r3, #43	@ 0x2b
 8002580:	f88d 300b 	strb.w	r3, [sp, #11]
	while(spi_dma_not_ready);
 8002584:	7823      	ldrb	r3, [r4, #0]
 8002586:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1fa      	bne.n	8002584 <GC9A01_set_frame+0xd4>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800258e:	2102      	movs	r1, #2
 8002590:	4829      	ldr	r0, [pc, #164]	@ (8002638 <GC9A01_set_frame+0x188>)
 8002592:	f003 fbf3 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002596:	7823      	ldrb	r3, [r4, #0]
 8002598:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1fa      	bne.n	8002596 <GC9A01_set_frame+0xe6>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80025a0:	2101      	movs	r1, #1
 80025a2:	4825      	ldr	r0, [pc, #148]	@ (8002638 <GC9A01_set_frame+0x188>)
 80025a4:	f003 fbea 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80025a8:	7823      	ldrb	r3, [r4, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1fc      	bne.n	80025a8 <GC9A01_set_frame+0xf8>
	spi_dma_not_ready = 1;
 80025ae:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80025b0:	f10d 010b 	add.w	r1, sp, #11
 80025b4:	4821      	ldr	r0, [pc, #132]	@ (800263c <GC9A01_set_frame+0x18c>)
	spi_dma_not_ready = 1;
 80025b6:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80025b8:	f008 fbac 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80025bc:	7823      	ldrb	r3, [r4, #0]
 80025be:	f003 07ff 	and.w	r7, r3, #255	@ 0xff
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1fa      	bne.n	80025bc <GC9A01_set_frame+0x10c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	481b      	ldr	r0, [pc, #108]	@ (8002638 <GC9A01_set_frame+0x188>)
 80025ca:	4611      	mov	r1, r2
 80025cc:	f003 fbd6 	bl	8005d7c <HAL_GPIO_WritePin>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80025d0:	0a33      	lsrs	r3, r6, #8
 80025d2:	f363 0707 	bfi	r7, r3, #0, #8
    data[2] = (frame.end.Y >> 8) & 0xFF;
 80025d6:	0a2b      	lsrs	r3, r5, #8
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80025d8:	f366 270f 	bfi	r7, r6, #8, #8
 80025dc:	f363 4717 	bfi	r7, r3, #16, #8
 80025e0:	f365 671f 	bfi	r7, r5, #24, #8
 80025e4:	9703      	str	r7, [sp, #12]
	while(spi_dma_not_ready);
 80025e6:	7823      	ldrb	r3, [r4, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1fc      	bne.n	80025e6 <GC9A01_set_frame+0x136>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2102      	movs	r1, #2
 80025f0:	4811      	ldr	r0, [pc, #68]	@ (8002638 <GC9A01_set_frame+0x188>)
 80025f2:	f003 fbc3 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80025f6:	7823      	ldrb	r3, [r4, #0]
 80025f8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1fa      	bne.n	80025f6 <GC9A01_set_frame+0x146>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002600:	2101      	movs	r1, #1
 8002602:	480d      	ldr	r0, [pc, #52]	@ (8002638 <GC9A01_set_frame+0x188>)
 8002604:	f003 fbba 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8002608:	7823      	ldrb	r3, [r4, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1fc      	bne.n	8002608 <GC9A01_set_frame+0x158>
	spi_dma_not_ready = 1;
 800260e:	2301      	movs	r3, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002610:	2204      	movs	r2, #4
 8002612:	a903      	add	r1, sp, #12
 8002614:	4809      	ldr	r0, [pc, #36]	@ (800263c <GC9A01_set_frame+0x18c>)
	spi_dma_not_ready = 1;
 8002616:	7023      	strb	r3, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002618:	f008 fb7c 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 800261c:	7823      	ldrb	r3, [r4, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1fc      	bne.n	800261c <GC9A01_set_frame+0x16c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002622:	2201      	movs	r2, #1
 8002624:	4804      	ldr	r0, [pc, #16]	@ (8002638 <GC9A01_set_frame+0x188>)
 8002626:	4611      	mov	r1, r2
 8002628:	f003 fba8 	bl	8005d7c <HAL_GPIO_WritePin>
}
 800262c:	b005      	add	sp, #20
 800262e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002632:	bf00      	nop
 8002634:	2400008c 	.word	0x2400008c
 8002638:	58020400 	.word	0x58020400
 800263c:	24000218 	.word	0x24000218

08002640 <GC9A01_sleep_mode>:
{
 8002640:	b510      	push	{r4, lr}
 8002642:	b082      	sub	sp, #8
	if(command)
 8002644:	b368      	cbz	r0, 80026a2 <GC9A01_sleep_mode+0x62>
		GC9A01_write_command(SLEEP_MODE_ON);
 8002646:	2310      	movs	r3, #16
 8002648:	4c28      	ldr	r4, [pc, #160]	@ (80026ec <GC9A01_sleep_mode+0xac>)
 800264a:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 800264e:	7823      	ldrb	r3, [r4, #0]
 8002650:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1fa      	bne.n	800264e <GC9A01_sleep_mode+0xe>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8002658:	2102      	movs	r1, #2
 800265a:	4825      	ldr	r0, [pc, #148]	@ (80026f0 <GC9A01_sleep_mode+0xb0>)
 800265c:	f003 fb8e 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 8002660:	7823      	ldrb	r3, [r4, #0]
 8002662:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1fa      	bne.n	8002660 <GC9A01_sleep_mode+0x20>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800266a:	2101      	movs	r1, #1
 800266c:	4820      	ldr	r0, [pc, #128]	@ (80026f0 <GC9A01_sleep_mode+0xb0>)
 800266e:	f003 fb85 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 8002672:	7823      	ldrb	r3, [r4, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1fc      	bne.n	8002672 <GC9A01_sleep_mode+0x32>
	spi_dma_not_ready = 1;
 8002678:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800267a:	f10d 0107 	add.w	r1, sp, #7
 800267e:	481d      	ldr	r0, [pc, #116]	@ (80026f4 <GC9A01_sleep_mode+0xb4>)
	spi_dma_not_ready = 1;
 8002680:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002682:	f008 fb47 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 8002686:	7823      	ldrb	r3, [r4, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1fc      	bne.n	8002686 <GC9A01_sleep_mode+0x46>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800268c:	2201      	movs	r2, #1
 800268e:	4818      	ldr	r0, [pc, #96]	@ (80026f0 <GC9A01_sleep_mode+0xb0>)
 8002690:	4611      	mov	r1, r2
 8002692:	f003 fb73 	bl	8005d7c <HAL_GPIO_WritePin>
	HAL_Delay(120);
 8002696:	2078      	movs	r0, #120	@ 0x78
}
 8002698:	b002      	add	sp, #8
 800269a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(120);
 800269e:	f001 bba7 	b.w	8003df0 <HAL_Delay>
		GC9A01_write_command(SLEEP_MODE_OFF);
 80026a2:	2311      	movs	r3, #17
 80026a4:	4c11      	ldr	r4, [pc, #68]	@ (80026ec <GC9A01_sleep_mode+0xac>)
 80026a6:	f88d 3007 	strb.w	r3, [sp, #7]
	while(spi_dma_not_ready);
 80026aa:	7823      	ldrb	r3, [r4, #0]
 80026ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1fa      	bne.n	80026aa <GC9A01_sleep_mode+0x6a>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80026b4:	2102      	movs	r1, #2
 80026b6:	480e      	ldr	r0, [pc, #56]	@ (80026f0 <GC9A01_sleep_mode+0xb0>)
 80026b8:	f003 fb60 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready);
 80026bc:	7823      	ldrb	r3, [r4, #0]
 80026be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1fa      	bne.n	80026bc <GC9A01_sleep_mode+0x7c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80026c6:	2101      	movs	r1, #1
 80026c8:	4809      	ldr	r0, [pc, #36]	@ (80026f0 <GC9A01_sleep_mode+0xb0>)
 80026ca:	f003 fb57 	bl	8005d7c <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join);
 80026ce:	7823      	ldrb	r3, [r4, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1fc      	bne.n	80026ce <GC9A01_sleep_mode+0x8e>
	spi_dma_not_ready = 1;
 80026d4:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80026d6:	f10d 0107 	add.w	r1, sp, #7
 80026da:	4806      	ldr	r0, [pc, #24]	@ (80026f4 <GC9A01_sleep_mode+0xb4>)
	spi_dma_not_ready = 1;
 80026dc:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80026de:	f008 fb19 	bl	800ad14 <HAL_SPI_Transmit_DMA>
	while(spi_dma_not_ready);
 80026e2:	7823      	ldrb	r3, [r4, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1fc      	bne.n	80026e2 <GC9A01_sleep_mode+0xa2>
 80026e8:	e7d0      	b.n	800268c <GC9A01_sleep_mode+0x4c>
 80026ea:	bf00      	nop
 80026ec:	2400008c 	.word	0x2400008c
 80026f0:	58020400 	.word	0x58020400
 80026f4:	24000218 	.word	0x24000218

080026f8 <GC9A01_spi_tx>:
{
 80026f8:	b538      	push	{r3, r4, r5, lr}
	while(spi_dma_not_ready && !join);
 80026fa:	fab2 f482 	clz	r4, r2
 80026fe:	4d0a      	ldr	r5, [pc, #40]	@ (8002728 <GC9A01_spi_tx+0x30>)
{
 8002700:	460a      	mov	r2, r1
	while(spi_dma_not_ready && !join);
 8002702:	0964      	lsrs	r4, r4, #5
 8002704:	e000      	b.n	8002708 <GC9A01_spi_tx+0x10>
 8002706:	b114      	cbz	r4, 800270e <GC9A01_spi_tx+0x16>
 8002708:	782b      	ldrb	r3, [r5, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1fb      	bne.n	8002706 <GC9A01_spi_tx+0xe>
	spi_dma_not_ready = 1;
 800270e:	2301      	movs	r3, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002710:	4601      	mov	r1, r0
 8002712:	4806      	ldr	r0, [pc, #24]	@ (800272c <GC9A01_spi_tx+0x34>)
	spi_dma_not_ready = 1;
 8002714:	702b      	strb	r3, [r5, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002716:	f008 fafd 	bl	800ad14 <HAL_SPI_Transmit_DMA>
#endif

	if(ret != HAL_OK)
		return -1;

	return 1;
 800271a:	2800      	cmp	r0, #0

}
 800271c:	bf14      	ite	ne
 800271e:	f04f 30ff 	movne.w	r0, #4294967295
 8002722:	2001      	moveq	r0, #1
 8002724:	bd38      	pop	{r3, r4, r5, pc}
 8002726:	bf00      	nop
 8002728:	2400008c 	.word	0x2400008c
 800272c:	24000218 	.word	0x24000218

08002730 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4616      	mov	r6, r2
 8002734:	b082      	sub	sp, #8
  Input_frameSize = FrameSize;

  Jpeg_HWDecodingEnd = 0;
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8002736:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  JPEGSourceAddress =  FrameSourceAddress ;
 800273a:	4d0a      	ldr	r5, [pc, #40]	@ (8002764 <JPEG_Decode_DMA+0x34>)
  Input_frameIndex=0;
 800273c:	2400      	movs	r4, #0
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800273e:	9200      	str	r2, [sp, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 8002740:	6029      	str	r1, [r5, #0]
  FrameBufferAddress = DestAddress;
 8002742:	4d09      	ldr	r5, [pc, #36]	@ (8002768 <JPEG_Decode_DMA+0x38>)
 8002744:	602b      	str	r3, [r5, #0]
  Input_frameIndex=0;
 8002746:	4d09      	ldr	r5, [pc, #36]	@ (800276c <JPEG_Decode_DMA+0x3c>)
 8002748:	602c      	str	r4, [r5, #0]
  Input_frameSize = FrameSize;
 800274a:	4d09      	ldr	r5, [pc, #36]	@ (8002770 <JPEG_Decode_DMA+0x40>)
 800274c:	602e      	str	r6, [r5, #0]
  Jpeg_HWDecodingEnd = 0;
 800274e:	4d09      	ldr	r5, [pc, #36]	@ (8002774 <JPEG_Decode_DMA+0x44>)
 8002750:	602c      	str	r4, [r5, #0]
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8002752:	f003 ff61 	bl	8006618 <HAL_JPEG_Decode_DMA>
	  return -1;
  
  
  return 1;
 8002756:	42a0      	cmp	r0, r4
  
}
 8002758:	bf14      	ite	ne
 800275a:	f04f 30ff 	movne.w	r0, #4294967295
 800275e:	2001      	moveq	r0, #1
 8002760:	b002      	add	sp, #8
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	24000098 	.word	0x24000098
 8002768:	2400009c 	.word	0x2400009c
 800276c:	24000090 	.word	0x24000090
 8002770:	24000094 	.word	0x24000094
 8002774:	240000a0 	.word	0x240000a0

08002778 <HAL_JPEG_InfoReadyCallback>:
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800277c:	b410      	push	{r4}
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800277e:	4c0e      	ldr	r4, [pc, #56]	@ (80027b8 <HAL_JPEG_GetDataCallback+0x3c>)
{
 8002780:	468c      	mov	ip, r1
  if( Input_frameIndex < Input_frameSize)
 8002782:	4a0e      	ldr	r2, [pc, #56]	@ (80027bc <HAL_JPEG_GetDataCallback+0x40>)
  Input_frameIndex += NbDecodedData;
 8002784:	6823      	ldr	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 8002786:	6812      	ldr	r2, [r2, #0]
  Input_frameIndex += NbDecodedData;
 8002788:	440b      	add	r3, r1
 800278a:	6023      	str	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 800278c:	4293      	cmp	r3, r2
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800278e:	4c0c      	ldr	r4, [pc, #48]	@ (80027c0 <HAL_JPEG_GetDataCallback+0x44>)
 8002790:	6821      	ldr	r1, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 8002792:	d20b      	bcs.n	80027ac <HAL_JPEG_GetDataCallback+0x30>
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8002794:	1ad2      	subs	r2, r2, r3
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8002796:	4461      	add	r1, ip
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8002798:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800279c:	6021      	str	r1, [r4, #0]
  {
    inDataLength = 0; 
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
  
}
 800279e:	f85d 4b04 	ldr.w	r4, [sp], #4
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80027a2:	bf28      	it	cs
 80027a4:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80027a8:	f003 bf74 	b.w	8006694 <HAL_JPEG_ConfigInputBuffer>
    inDataLength = 0; 
 80027ac:	2200      	movs	r2, #0
}
 80027ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80027b2:	f003 bf6f 	b.w	8006694 <HAL_JPEG_ConfigInputBuffer>
 80027b6:	bf00      	nop
 80027b8:	24000090 	.word	0x24000090
 80027bc:	24000094 	.word	0x24000094
 80027c0:	24000098 	.word	0x24000098

080027c4 <HAL_JPEG_DataReadyCallback>:
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_JPEG_DataReadyCallback+0x18>)
{
 80027c6:	4611      	mov	r1, r2

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80027c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
{
 80027cc:	b410      	push	{r4}
  FrameBufferAddress += OutDataLength;
 80027ce:	681c      	ldr	r4, [r3, #0]
 80027d0:	4421      	add	r1, r4
}
 80027d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  FrameBufferAddress += OutDataLength;
 80027d6:	6019      	str	r1, [r3, #0]
  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80027d8:	f003 bf60 	b.w	800669c <HAL_JPEG_ConfigOutputBuffer>
 80027dc:	2400009c 	.word	0x2400009c

080027e0 <HAL_JPEG_ErrorCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  Error_Handler();
 80027e0:	f000 b9e2 	b.w	8002ba8 <Error_Handler>

080027e4 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
  Jpeg_HWDecodingEnd = 1; 
 80027e4:	4b01      	ldr	r3, [pc, #4]	@ (80027ec <HAL_JPEG_DecodeCpltCallback+0x8>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	4770      	bx	lr
 80027ec:	240000a0 	.word	0x240000a0

080027f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f0:	b530      	push	{r4, r5, lr}
 80027f2:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f4:	224c      	movs	r2, #76	@ 0x4c
 80027f6:	2100      	movs	r1, #0
 80027f8:	a80a      	add	r0, sp, #40	@ 0x28
 80027fa:	f00b febb 	bl	800e574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fe:	2220      	movs	r2, #32
 8002800:	2100      	movs	r1, #0
 8002802:	a802      	add	r0, sp, #8
 8002804:	f00b feb6 	bl	800e574 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <SystemClock_Config+0xb0>)
 800280a:	f04f 32ff 	mov.w	r2, #4294967295

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800280e:	2002      	movs	r0, #2
  RCC->CKGAENR = 0xFFFFFFFF;
 8002810:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002814:	f004 ff5c 	bl	80076d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002818:	4a22      	ldr	r2, [pc, #136]	@ (80028a4 <SystemClock_Config+0xb4>)
 800281a:	2300      	movs	r3, #0
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	6993      	ldr	r3, [r2, #24]
 8002820:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002824:	6193      	str	r3, [r2, #24]
 8002826:	6993      	ldr	r3, [r2, #24]
 8002828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002830:	6993      	ldr	r3, [r2, #24]
 8002832:	0499      	lsls	r1, r3, #18
 8002834:	d5fc      	bpl.n	8002830 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002836:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002838:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283a:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800283c:	2106      	movs	r1, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800283e:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002840:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 8002842:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002844:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002846:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 22;
 8002848:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800284a:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800284c:	9118      	str	r1, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800284e:	9417      	str	r4, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002850:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002852:	9419      	str	r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002854:	e9cd 4313 	strd	r4, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002858:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 22;
 800285c:	2316      	movs	r3, #22
 800285e:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002862:	230c      	movs	r3, #12
 8002864:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002866:	f004 ffc9 	bl	80077fc <HAL_RCC_OscConfig>
 800286a:	4603      	mov	r3, r0
 800286c:	b108      	cbz	r0, 8002872 <SystemClock_Config+0x82>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800286e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002870:	e7fe      	b.n	8002870 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002872:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002874:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002876:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002878:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287a:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800287c:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800287e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002880:	9509      	str	r5, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002882:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002884:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800288c:	e9cd 5307 	strd	r5, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002890:	f005 fb26 	bl	8007ee0 <HAL_RCC_ClockConfig>
 8002894:	b108      	cbz	r0, 800289a <SystemClock_Config+0xaa>
 8002896:	b672      	cpsid	i
  while (1)
 8002898:	e7fe      	b.n	8002898 <SystemClock_Config+0xa8>
}
 800289a:	b01f      	add	sp, #124	@ 0x7c
 800289c:	bd30      	pop	{r4, r5, pc}
 800289e:	bf00      	nop
 80028a0:	58024400 	.word	0x58024400
 80028a4:	58024800 	.word	0x58024800

080028a8 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80028a8:	4aaf      	ldr	r2, [pc, #700]	@ (8002b68 <main+0x2c0>)
 80028aa:	6953      	ldr	r3, [r2, #20]
 80028ac:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	@ 0x30
 80028b4:	d111      	bne.n	80028da <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028ba:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80028be:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80028c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028c6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80028ca:	6953      	ldr	r3, [r2, #20]
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80028d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028d6:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028da:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028dc:	4da3      	ldr	r5, [pc, #652]	@ (8002b6c <main+0x2c4>)
  HAL_Init();
 80028de:	f001 fa45 	bl	8003d6c <HAL_Init>
  HAL_Delay(500);
 80028e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028e6:	f001 fa83 	bl	8003df0 <HAL_Delay>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ea:	f04f 0801 	mov.w	r8, #1
  SystemClock_Config();
 80028ee:	f7ff ff7f 	bl	80027f0 <SystemClock_Config>
  HAL_Delay(500);
 80028f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028f6:	f001 fa7b 	bl	8003df0 <HAL_Delay>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	a907      	add	r1, sp, #28
 8002900:	489b      	ldr	r0, [pc, #620]	@ (8002b70 <main+0x2c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002902:	2707      	movs	r7, #7
  DMA2D_Handle.Instance = DMA2D;
 8002904:	4e9b      	ldr	r6, [pc, #620]	@ (8002b74 <main+0x2cc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002906:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800290a:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800290e:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 8002912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002916:	f8c5 3140 	str.w	r3, [r5, #320]	@ 0x140
 800291a:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 800291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002922:	9302      	str	r3, [sp, #8]
 8002924:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	f8c5 3140 	str.w	r3, [r5, #320]	@ 0x140
 8002932:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	9303      	str	r3, [sp, #12]
 800293c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	f8c5 3140 	str.w	r3, [r5, #320]	@ 0x140
 800294a:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	9304      	str	r3, [sp, #16]
 8002954:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	f8c5 3140 	str.w	r3, [r5, #320]	@ 0x140
 8002962:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	9305      	str	r3, [sp, #20]
 800296c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800296e:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	f8c5 3140 	str.w	r3, [r5, #320]	@ 0x140
 800297a:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800297e:	9207      	str	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	9306      	str	r3, [sp, #24]
 8002986:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f003 f8b0 	bl	8005aec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 800298c:	4622      	mov	r2, r4
 800298e:	2103      	movs	r1, #3
 8002990:	4879      	ldr	r0, [pc, #484]	@ (8002b78 <main+0x2d0>)
 8002992:	f003 f9f3 	bl	8005d7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	f240 4104 	movw	r1, #1028	@ 0x404
 800299c:	4876      	ldr	r0, [pc, #472]	@ (8002b78 <main+0x2d0>)
 800299e:	f003 f9ed 	bl	8005d7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 80029a2:	2201      	movs	r2, #1
 80029a4:	2107      	movs	r1, #7
 80029a6:	4875      	ldr	r0, [pc, #468]	@ (8002b7c <main+0x2d4>)
 80029a8:	f003 f9e8 	bl	8005d7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80029ac:	f240 4307 	movw	r3, #1031	@ 0x407
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b0:	a907      	add	r1, sp, #28
 80029b2:	4871      	ldr	r0, [pc, #452]	@ (8002b78 <main+0x2d0>)
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80029b4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	f003 f895 	bl	8005aec <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c6:	486d      	ldr	r0, [pc, #436]	@ (8002b7c <main+0x2d4>)
 80029c8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ca:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029ce:	e9cd 7307 	strd	r7, r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d2:	f003 f88b 	bl	8005aec <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029d6:	4622      	mov	r2, r4
 80029d8:	4621      	mov	r1, r4
 80029da:	2006      	movs	r0, #6
 80029dc:	f001 fa3c 	bl	8003e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029e0:	2006      	movs	r0, #6
 80029e2:	f001 fa75 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80029e6:	4622      	mov	r2, r4
 80029e8:	4621      	mov	r1, r4
 80029ea:	4638      	mov	r0, r7
 80029ec:	f001 fa34 	bl	8003e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029f0:	4638      	mov	r0, r7
 80029f2:	f001 fa6d 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80029f6:	4622      	mov	r2, r4
 80029f8:	4621      	mov	r1, r4
 80029fa:	2008      	movs	r0, #8
 80029fc:	f001 fa2c 	bl	8003e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a00:	2008      	movs	r0, #8
 8002a02:	f001 fa65 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
  DMA2D_Handle.Instance = DMA2D;
 8002a06:	4b5e      	ldr	r3, [pc, #376]	@ (8002b80 <main+0x2d8>)
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8002a08:	4630      	mov	r0, r6
  DMA2D_Handle.Init.OutputOffset = 0;
 8002a0a:	60f4      	str	r4, [r6, #12]
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8002a0c:	65f4      	str	r4, [r6, #92]	@ 0x5c
  DMA2D_Handle.Instance = DMA2D;
 8002a0e:	6033      	str	r3, [r6, #0]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002a10:	e9c6 4401 	strd	r4, r4, [r6, #4]
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002a14:	e9c6 4411 	strd	r4, r4, [r6, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8002a18:	e9c6 4413 	strd	r4, r4, [r6, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002a1c:	e9c6 4415 	strd	r4, r4, [r6, #84]	@ 0x54
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8002a20:	f002 fec6 	bl	80057b0 <HAL_DMA2D_Init>
 8002a24:	b108      	cbz	r0, 8002a2a <main+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a26:	b672      	cpsid	i
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <main+0x180>
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8002a2a:	4641      	mov	r1, r8
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f002 fff3 	bl	8005a18 <HAL_DMA2D_ConfigLayer>
 8002a32:	4604      	mov	r4, r0
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d145      	bne.n	8002ac4 <main+0x21c>
  hsd1.Instance = SDMMC1;
 8002a38:	4b52      	ldr	r3, [pc, #328]	@ (8002b84 <main+0x2dc>)
 8002a3a:	4a53      	ldr	r2, [pc, #332]	@ (8002b88 <main+0x2e0>)
  hsd1.Init.ClockDiv = 0;
 8002a3c:	6158      	str	r0, [r3, #20]
  hsd1.Instance = SDMMC1;
 8002a3e:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002a40:	e9c3 0001 	strd	r0, r0, [r3, #4]
 __HAL_RCC_DMA1_CLK_ENABLE();
 8002a44:	f8d5 2138 	ldr.w	r2, [r5, #312]	@ 0x138
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	f8c5 2138 	str.w	r2, [r5, #312]	@ 0x138
 8002a50:	f8d5 2138 	ldr.w	r2, [r5, #312]	@ 0x138
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a54:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 __HAL_RCC_DMA1_CLK_ENABLE();
 8002a58:	f002 0201 	and.w	r2, r2, #1
 8002a5c:	9201      	str	r2, [sp, #4]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a5e:	4602      	mov	r2, r0
 __HAL_RCC_DMA1_CLK_ENABLE();
 8002a60:	9901      	ldr	r1, [sp, #4]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002a62:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a66:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002a6a:	e9c3 0103 	strd	r0, r1, [r3, #12]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a6e:	4621      	mov	r1, r4
 8002a70:	200b      	movs	r0, #11
 8002a72:	f001 f9f1 	bl	8003e58 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a76:	200b      	movs	r0, #11
 8002a78:	f001 fa2a 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8002a7c:	4843      	ldr	r0, [pc, #268]	@ (8002b8c <main+0x2e4>)
 8002a7e:	4b44      	ldr	r3, [pc, #272]	@ (8002b90 <main+0x2e8>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a84:	60c7      	str	r7, [r0, #12]
  hspi1.Instance = SPI1;
 8002a86:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a8c:	6182      	str	r2, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a8e:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002a90:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
  hspi1.Init.CRCPolynomial = 0x0;
 8002a94:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002a96:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a98:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a9c:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	e9c0 4409 	strd	r4, r4, [r0, #36]	@ 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002aa4:	e9c0 540d 	strd	r5, r4, [r0, #52]	@ 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002aa8:	e9c0 440f 	strd	r4, r4, [r0, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002aac:	e9c0 4411 	strd	r4, r4, [r0, #68]	@ 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ab0:	e9c0 4413 	strd	r4, r4, [r0, #76]	@ 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ab4:	e9c0 4415 	strd	r4, r4, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ab8:	f008 f854 	bl	800ab64 <HAL_SPI_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b118      	cbz	r0, 8002ac8 <main+0x220>
 8002ac0:	b672      	cpsid	i
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <main+0x21a>
 8002ac4:	b672      	cpsid	i
 8002ac6:	e7fe      	b.n	8002ac6 <main+0x21e>
  hrtc.Instance = RTC;
 8002ac8:	4c32      	ldr	r4, [pc, #200]	@ (8002b94 <main+0x2ec>)
 8002aca:	4a33      	ldr	r2, [pc, #204]	@ (8002b98 <main+0x2f0>)
  RTC_TimeTypeDef sTime = {0};
 8002acc:	900b      	str	r0, [sp, #44]	@ 0x2c
  hrtc.Instance = RTC;
 8002ace:	6022      	str	r2, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002ad0:	227f      	movs	r2, #127	@ 0x7f
  RTC_DateTypeDef sDate = {0};
 8002ad2:	9000      	str	r0, [sp, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002ad4:	60a2      	str	r2, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ad6:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ad8:	6060      	str	r0, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ada:	6120      	str	r0, [r4, #16]
  hrtc.Init.SynchPrediv = 255;
 8002adc:	60e2      	str	r2, [r4, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ade:	6163      	str	r3, [r4, #20]
  RTC_TimeTypeDef sTime = {0};
 8002ae0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8002ae4:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ae8:	e9c4 0506 	strd	r0, r5, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002aec:	4620      	mov	r0, r4
 8002aee:	f006 ffd9 	bl	8009aa4 <HAL_RTC_Init>
 8002af2:	4602      	mov	r2, r0
 8002af4:	b108      	cbz	r0, 8002afa <main+0x252>
 8002af6:	b672      	cpsid	i
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <main+0x250>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002afa:	a907      	add	r1, sp, #28
 8002afc:	4620      	mov	r0, r4
  sTime.Hours = 0;
 8002afe:	f8ad 201c 	strh.w	r2, [sp, #28]
  sTime.Seconds = 0;
 8002b02:	f88d 201e 	strb.w	r2, [sp, #30]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b06:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002b0a:	f007 f83f 	bl	8009b8c <HAL_RTC_SetTime>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	b108      	cbz	r0, 8002b16 <main+0x26e>
 8002b12:	b672      	cpsid	i
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <main+0x26c>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b16:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <main+0x2f4>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002b18:	4669      	mov	r1, sp
 8002b1a:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b1c:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002b1e:	f007 f8d7 	bl	8009cd0 <HAL_RTC_SetDate>
 8002b22:	b108      	cbz	r0, 8002b28 <main+0x280>
 8002b24:	b672      	cpsid	i
  while (1)
 8002b26:	e7fe      	b.n	8002b26 <main+0x27e>
  HAL_Delay(500);
 8002b28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b2c:	f001 f960 	bl	8003df0 <HAL_Delay>
  JPEG_Handle.Instance = JPEG;
 8002b30:	481b      	ldr	r0, [pc, #108]	@ (8002ba0 <main+0x2f8>)
 8002b32:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <main+0x2fc>)
 8002b34:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 8002b36:	f003 fc37 	bl	80063a8 <HAL_JPEG_Init>
 8002b3a:	b108      	cbz	r0, 8002b40 <main+0x298>
 8002b3c:	b672      	cpsid	i
  while (1)
 8002b3e:	e7fe      	b.n	8002b3e <main+0x296>
  HAL_Delay(500);
 8002b40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b44:	f001 f954 	bl	8003df0 <HAL_Delay>
  GC9A01_init();
 8002b48:	f7fd fe9c 	bl	8000884 <GC9A01_init>
  HAL_Delay(500);
 8002b4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b50:	f001 f94e 	bl	8003df0 <HAL_Delay>
  smart_watch_init();
 8002b54:	f000 f9f4 	bl	8002f40 <smart_watch_init>
  HAL_Delay(500);
 8002b58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b5c:	f001 f948 	bl	8003df0 <HAL_Delay>
	  smart_watch_process();
 8002b60:	f000 fa22 	bl	8002fa8 <smart_watch_process>
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <main+0x2bc>
 8002b66:	bf00      	nop
 8002b68:	e000ed00 	.word	0xe000ed00
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	58020000 	.word	0x58020000
 8002b74:	240000e0 	.word	0x240000e0
 8002b78:	58020400 	.word	0x58020400
 8002b7c:	58020800 	.word	0x58020800
 8002b80:	52001000 	.word	0x52001000
 8002b84:	240002a0 	.word	0x240002a0
 8002b88:	52007000 	.word	0x52007000
 8002b8c:	24000218 	.word	0x24000218
 8002b90:	40013000 	.word	0x40013000
 8002b94:	240000a4 	.word	0x240000a4
 8002b98:	58004000 	.word	0x58004000
 8002b9c:	00010101 	.word	0x00010101
 8002ba0:	24000148 	.word	0x24000148
 8002ba4:	52003000 	.word	0x52003000

08002ba8 <Error_Handler>:
 8002ba8:	b672      	cpsid	i
  while (1)
 8002baa:	e7fe      	b.n	8002baa <Error_Handler+0x2>

08002bac <file_handler>:
	enable_btn_int();

}

static void file_handler(uint8_t openFile)
{
 8002bac:	b530      	push	{r4, r5, lr}
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 8002bae:	4c27      	ldr	r4, [pc, #156]	@ (8002c4c <file_handler+0xa0>)
{
 8002bb0:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8002bb2:	7823      	ldrb	r3, [r4, #0]
 8002bb4:	b9cb      	cbnz	r3, 8002bea <file_handler+0x3e>
 8002bb6:	b340      	cbz	r0, 8002c0a <file_handler+0x5e>
   {

  	 if(openFile)
  		 f_close(&MJPEG_File);
 8002bb8:	4825      	ldr	r0, [pc, #148]	@ (8002c50 <file_handler+0xa4>)
 8002bba:	f00b fa47 	bl	800e04c <f_close>

  	 new_file_flag = 0;
 8002bbe:	2100      	movs	r1, #0

  	 char file_idx_str[4];
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002bc0:	4d24      	ldr	r5, [pc, #144]	@ (8002c54 <file_handler+0xa8>)
 8002bc2:	4a25      	ldr	r2, [pc, #148]	@ (8002c58 <file_handler+0xac>)
 8002bc4:	a803      	add	r0, sp, #12
 8002bc6:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8002bc8:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002bca:	2104      	movs	r1, #4
 8002bcc:	f00b fc9e 	bl	800e50c <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8002bd0:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <file_handler+0xb0>)
 8002bd2:	210e      	movs	r1, #14
 8002bd4:	ab03      	add	r3, sp, #12
 8002bd6:	4822      	ldr	r0, [pc, #136]	@ (8002c60 <file_handler+0xb4>)
 8002bd8:	f00b fc98 	bl	800e50c <sniprintf>

  	 // Open the MJPEG avi file with read access
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4920      	ldr	r1, [pc, #128]	@ (8002c60 <file_handler+0xb4>)
 8002be0:	481b      	ldr	r0, [pc, #108]	@ (8002c50 <file_handler+0xa4>)
 8002be2:	f00a ff83 	bl	800daec <f_open>
 8002be6:	b118      	cbz	r0, 8002bf0 <file_handler+0x44>

  	 }
  	 else
  	 {

  		 while(1);
 8002be8:	e7fe      	b.n	8002be8 <file_handler+0x3c>
  	 if(openFile)
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d0e7      	beq.n	8002bbe <file_handler+0x12>
 8002bee:	e7e3      	b.n	8002bb8 <file_handler+0xc>
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002bf0:	491c      	ldr	r1, [pc, #112]	@ (8002c64 <file_handler+0xb8>)
  		 video.isfirstFrame = 1;
 8002bf2:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002bf4:	9001      	str	r0, [sp, #4]
 8002bf6:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002bfa:	9100      	str	r1, [sp, #0]
 8002bfc:	481a      	ldr	r0, [pc, #104]	@ (8002c68 <file_handler+0xbc>)
  		 video.isfirstFrame = 1;
 8002bfe:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002c00:	4913      	ldr	r1, [pc, #76]	@ (8002c50 <file_handler+0xa4>)
 8002c02:	4a1a      	ldr	r2, [pc, #104]	@ (8002c6c <file_handler+0xc0>)
 8002c04:	f7fd fbc4 	bl	8000390 <AVI_ParserInit>
 8002c08:	b930      	cbnz	r0, 8002c18 <file_handler+0x6c>
  	 }

   }

   // Check for the end of the video
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8002c0a:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <file_handler+0xbc>)
 8002c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d202      	bcs.n	8002c1a <file_handler+0x6e>

		 new_file_flag = 1;

   }

}
 8002c14:	b005      	add	sp, #20
 8002c16:	bd30      	pop	{r4, r5, pc}
  			 while(1);
 8002c18:	e7fe      	b.n	8002c18 <file_handler+0x6c>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c1a:	4d0e      	ldr	r5, [pc, #56]	@ (8002c54 <file_handler+0xa8>)
 8002c1c:	4914      	ldr	r1, [pc, #80]	@ (8002c70 <file_handler+0xc4>)
  	 video.file_idx++;
 8002c1e:	8aab      	ldrh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c20:	4814      	ldr	r0, [pc, #80]	@ (8002c74 <file_handler+0xc8>)
  	 video.file_idx++;
 8002c22:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c24:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	fba1 1202 	umull	r1, r2, r1, r2
 8002c2e:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8002c32:	fb01 3312 	mls	r3, r1, r2, r3
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c36:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c38:	82ab      	strh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c3a:	f002 fe55 	bl	80058e8 <HAL_DMA2D_PollForTransfer>
		 f_close(&MJPEG_File);
 8002c3e:	4804      	ldr	r0, [pc, #16]	@ (8002c50 <file_handler+0xa4>)
 8002c40:	f00b fa04 	bl	800e04c <f_close>
		 new_file_flag = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	7023      	strb	r3, [r4, #0]
}
 8002c48:	b005      	add	sp, #20
 8002c4a:	bd30      	pop	{r4, r5, pc}
 8002c4c:	24000000 	.word	0x24000000
 8002c50:	240ac278 	.word	0x240ac278
 8002c54:	2409f9ec 	.word	0x2409f9ec
 8002c58:	0800eeac 	.word	0x0800eeac
 8002c5c:	0800eeb4 	.word	0x0800eeb4
 8002c60:	240ac6d8 	.word	0x240ac6d8
 8002c64:	2409fa30 	.word	0x2409fa30
 8002c68:	240ac230 	.word	0x240ac230
 8002c6c:	2409fa30 	.word	0x2409fa30
 8002c70:	05b05b06 	.word	0x05b05b06
 8002c74:	240000e0 	.word	0x240000e0

08002c78 <DMA2D_Init.constprop.0>:
	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;

}

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	460e      	mov	r6, r1
 8002c7c:	4605      	mov	r5, r0
{

	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;


	HAL_DMA2D_MspInit(&DMA2D_Handle);
 8002c7e:	4822      	ldr	r0, [pc, #136]	@ (8002d08 <DMA2D_Init.constprop.0+0x90>)
 8002c80:	f000 fd9e 	bl	80037c0 <HAL_DMA2D_MspInit>

	if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8002c84:	2e01      	cmp	r6, #1
 8002c86:	d02b      	beq.n	8002ce0 <DMA2D_Init.constprop.0+0x68>
			inputLineOffset = 16 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8002c88:	b326      	cbz	r6, 8002cd4 <DMA2D_Init.constprop.0+0x5c>
			inputLineOffset = 8 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8002c8a:	2e02      	cmp	r6, #2
 8002c8c:	d033      	beq.n	8002cf6 <DMA2D_Init.constprop.0+0x7e>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2601      	movs	r6, #1
		}

	}

  	// Configure the DMA2D Mode, Color Mode and output offset
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002c92:	4c1d      	ldr	r4, [pc, #116]	@ (8002d08 <DMA2D_Init.constprop.0+0x90>)
 8002c94:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  	DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
  	DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 8002c98:	2300      	movs	r3, #0
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002c9a:	f1c5 05f0 	rsb	r5, r5, #240	@ 0xf0
  	// Foreground Configuration
  	DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
  	DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8002c9e:	6462      	str	r2, [r4, #68]	@ 0x44
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion

  	DMA2D_Handle.Instance = DMA2D;

  	// DMA2D Initialization
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8002ca0:	4620      	mov	r0, r4
  	DMA2D_Handle.Instance = DMA2D;
 8002ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d0c <DMA2D_Init.constprop.0+0x94>)
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8002ca4:	65e6      	str	r6, [r4, #92]	@ 0x5c
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002ca6:	2601      	movs	r6, #1
  	DMA2D_Handle.XferCpltCallback  = NULL;
 8002ca8:	6223      	str	r3, [r4, #32]
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002caa:	e9c4 2100 	strd	r2, r1, [r4]
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8002cae:	21ff      	movs	r1, #255	@ 0xff
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8002cb0:	220b      	movs	r2, #11
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8002cb2:	e9c4 6113 	strd	r6, r1, [r4, #76]	@ 0x4c
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002cb6:	e9c4 6502 	strd	r6, r5, [r4, #8]
  	DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8002cba:	e9c4 3304 	strd	r3, r3, [r4, #16]
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8002cbe:	64a2      	str	r2, [r4, #72]	@ 0x48
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8002cc0:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8002cc4:	f002 fd74 	bl	80057b0 <HAL_DMA2D_Init>
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002cc8:	4631      	mov	r1, r6
 8002cca:	4620      	mov	r0, r4

}
 8002ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002cd0:	f002 bea2 	b.w	8005a18 <HAL_DMA2D_ConfigLayer>
		if(inputLineOffset != 0)
 8002cd4:	f015 0207 	ands.w	r2, r5, #7
 8002cd8:	d00b      	beq.n	8002cf2 <DMA2D_Init.constprop.0+0x7a>
			inputLineOffset = 8 - inputLineOffset;
 8002cda:	f1c2 0208 	rsb	r2, r2, #8
 8002cde:	e7d8      	b.n	8002c92 <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8002ce0:	f015 020f 	ands.w	r2, r5, #15
 8002ce4:	d003      	beq.n	8002cee <DMA2D_Init.constprop.0+0x76>
			inputLineOffset = 16 - inputLineOffset;
 8002ce6:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_420;
 8002cea:	2602      	movs	r6, #2
 8002cec:	e7d1      	b.n	8002c92 <DMA2D_Init.constprop.0+0x1a>
 8002cee:	2602      	movs	r6, #2
 8002cf0:	e7cf      	b.n	8002c92 <DMA2D_Init.constprop.0+0x1a>
 8002cf2:	4632      	mov	r2, r6
 8002cf4:	e7cd      	b.n	8002c92 <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8002cf6:	f015 020f 	ands.w	r2, r5, #15
 8002cfa:	d003      	beq.n	8002d04 <DMA2D_Init.constprop.0+0x8c>
			inputLineOffset = 16 - inputLineOffset;
 8002cfc:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_422;
 8002d00:	2601      	movs	r6, #1
 8002d02:	e7c6      	b.n	8002c92 <DMA2D_Init.constprop.0+0x1a>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002d04:	2601      	movs	r6, #1
 8002d06:	e7c4      	b.n	8002c92 <DMA2D_Init.constprop.0+0x1a>
 8002d08:	240000e0 	.word	0x240000e0
 8002d0c:	52001000 	.word	0x52001000

08002d10 <file_handler.constprop.0>:
static void file_handler(uint8_t openFile)
 8002d10:	b530      	push	{r4, r5, lr}
   if(new_file_flag || openFile)
 8002d12:	4c24      	ldr	r4, [pc, #144]	@ (8002da4 <file_handler.constprop.0+0x94>)
static void file_handler(uint8_t openFile)
 8002d14:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8002d16:	7823      	ldrb	r3, [r4, #0]
 8002d18:	b933      	cbnz	r3, 8002d28 <file_handler.constprop.0+0x18>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <file_handler.constprop.0+0x98>)
 8002d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d226      	bcs.n	8002d72 <file_handler.constprop.0+0x62>
}
 8002d24:	b005      	add	sp, #20
 8002d26:	bd30      	pop	{r4, r5, pc}
  	 new_file_flag = 0;
 8002d28:	2100      	movs	r1, #0
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002d2a:	4d20      	ldr	r5, [pc, #128]	@ (8002dac <file_handler.constprop.0+0x9c>)
 8002d2c:	4a20      	ldr	r2, [pc, #128]	@ (8002db0 <file_handler.constprop.0+0xa0>)
 8002d2e:	a803      	add	r0, sp, #12
 8002d30:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8002d32:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002d34:	2104      	movs	r1, #4
 8002d36:	f00b fbe9 	bl	800e50c <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <file_handler.constprop.0+0xa4>)
 8002d3c:	210e      	movs	r1, #14
 8002d3e:	ab03      	add	r3, sp, #12
 8002d40:	481d      	ldr	r0, [pc, #116]	@ (8002db8 <file_handler.constprop.0+0xa8>)
 8002d42:	f00b fbe3 	bl	800e50c <sniprintf>
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8002d46:	2201      	movs	r2, #1
 8002d48:	491b      	ldr	r1, [pc, #108]	@ (8002db8 <file_handler.constprop.0+0xa8>)
 8002d4a:	481c      	ldr	r0, [pc, #112]	@ (8002dbc <file_handler.constprop.0+0xac>)
 8002d4c:	f00a fece 	bl	800daec <f_open>
 8002d50:	b100      	cbz	r0, 8002d54 <file_handler.constprop.0+0x44>
  		 while(1);
 8002d52:	e7fe      	b.n	8002d52 <file_handler.constprop.0+0x42>
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002d54:	491a      	ldr	r1, [pc, #104]	@ (8002dc0 <file_handler.constprop.0+0xb0>)
  		 video.isfirstFrame = 1;
 8002d56:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002d58:	9001      	str	r0, [sp, #4]
 8002d5a:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002d5e:	9100      	str	r1, [sp, #0]
 8002d60:	4811      	ldr	r0, [pc, #68]	@ (8002da8 <file_handler.constprop.0+0x98>)
  		 video.isfirstFrame = 1;
 8002d62:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002d64:	4915      	ldr	r1, [pc, #84]	@ (8002dbc <file_handler.constprop.0+0xac>)
 8002d66:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <file_handler.constprop.0+0xb4>)
 8002d68:	f7fd fb12 	bl	8000390 <AVI_ParserInit>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d0d4      	beq.n	8002d1a <file_handler.constprop.0+0xa>
  			 while(1);
 8002d70:	e7fe      	b.n	8002d70 <file_handler.constprop.0+0x60>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002d72:	4d0e      	ldr	r5, [pc, #56]	@ (8002dac <file_handler.constprop.0+0x9c>)
 8002d74:	4914      	ldr	r1, [pc, #80]	@ (8002dc8 <file_handler.constprop.0+0xb8>)
  	 video.file_idx++;
 8002d76:	8aab      	ldrh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002d78:	4814      	ldr	r0, [pc, #80]	@ (8002dcc <file_handler.constprop.0+0xbc>)
  	 video.file_idx++;
 8002d7a:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002d7c:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	fba1 1202 	umull	r1, r2, r1, r2
 8002d86:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8002d8a:	fb01 3312 	mls	r3, r1, r2, r3
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002d8e:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002d90:	82ab      	strh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002d92:	f002 fda9 	bl	80058e8 <HAL_DMA2D_PollForTransfer>
		 f_close(&MJPEG_File);
 8002d96:	4809      	ldr	r0, [pc, #36]	@ (8002dbc <file_handler.constprop.0+0xac>)
 8002d98:	f00b f958 	bl	800e04c <f_close>
		 new_file_flag = 1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	7023      	strb	r3, [r4, #0]
}
 8002da0:	b005      	add	sp, #20
 8002da2:	bd30      	pop	{r4, r5, pc}
 8002da4:	24000000 	.word	0x24000000
 8002da8:	240ac230 	.word	0x240ac230
 8002dac:	2409f9ec 	.word	0x2409f9ec
 8002db0:	0800eeac 	.word	0x0800eeac
 8002db4:	0800eeb4 	.word	0x0800eeb4
 8002db8:	240ac6d8 	.word	0x240ac6d8
 8002dbc:	240ac278 	.word	0x240ac278
 8002dc0:	2409fa30 	.word	0x2409fa30
 8002dc4:	2409fa30 	.word	0x2409fa30
 8002dc8:	05b05b06 	.word	0x05b05b06
 8002dcc:	240000e0 	.word	0x240000e0

08002dd0 <show_frame.part.0>:
		AVI_Handel.CurrentImage++;
 8002dd0:	4a50      	ldr	r2, [pc, #320]	@ (8002f14 <show_frame.part.0+0x144>)
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002dd2:	4951      	ldr	r1, [pc, #324]	@ (8002f18 <show_frame.part.0+0x148>)
		AVI_Handel.CurrentImage++;
 8002dd4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002dd6:	4851      	ldr	r0, [pc, #324]	@ (8002f1c <show_frame.part.0+0x14c>)
		AVI_Handel.CurrentImage++;
 8002dd8:	3301      	adds	r3, #1
static void show_frame(uint32_t frame_num)
 8002dda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		video.frameCount++;
 8002dde:	4d50      	ldr	r5, [pc, #320]	@ (8002f20 <show_frame.part.0+0x150>)
static void show_frame(uint32_t frame_num)
 8002de0:	b085      	sub	sp, #20
		AVI_Handel.CurrentImage++;
 8002de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 8002de4:	6a2b      	ldr	r3, [r5, #32]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002de6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
		video.frameCount++;
 8002de8:	3301      	adds	r3, #1
 8002dea:	622b      	str	r3, [r5, #32]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002dec:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002dee:	f7ff fc9f 	bl	8002730 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 8002df2:	4a4c      	ldr	r2, [pc, #304]	@ (8002f24 <show_frame.part.0+0x154>)
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0fc      	beq.n	8002df4 <show_frame.part.0+0x24>
		if(video.isfirstFrame == 1)
 8002dfa:	7dab      	ldrb	r3, [r5, #22]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d06b      	beq.n	8002ed8 <show_frame.part.0+0x108>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002e00:	4b49      	ldr	r3, [pc, #292]	@ (8002f28 <show_frame.part.0+0x158>)
 8002e02:	e9d3 2002 	ldrd	r2, r0, [r3, #8]
 8002e06:	b286      	uxth	r6, r0
 8002e08:	b297      	uxth	r7, r2
	uint32_t xPos, yPos, destination;


	// calculate the destination transfer address
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002e0a:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002e0e:	f1c0 00f0 	rsb	r0, r0, #240	@ 0xf0
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002e12:	4c46      	ldr	r4, [pc, #280]	@ (8002f2c <show_frame.part.0+0x15c>)

	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;

	// wait for the DMA2D transfer to ends
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002e18:	0852      	lsrs	r2, r2, #1
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002e1a:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002e1e:	0840      	lsrs	r0, r0, #1
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8002e20:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002e24:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8002e28:	6822      	ldr	r2, [r4, #0]
 8002e2a:	eb02 0880 	add.w	r8, r2, r0, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002e2e:	4840      	ldr	r0, [pc, #256]	@ (8002f30 <show_frame.part.0+0x160>)
 8002e30:	f002 fd5a 	bl	80058e8 <HAL_DMA2D_PollForTransfer>
	// copy the new decoded frame to the LCD Frame buffer
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8002e34:	4633      	mov	r3, r6
 8002e36:	4642      	mov	r2, r8
 8002e38:	4649      	mov	r1, r9
 8002e3a:	483d      	ldr	r0, [pc, #244]	@ (8002f30 <show_frame.part.0+0x160>)
 8002e3c:	9700      	str	r7, [sp, #0]
 8002e3e:	f002 fcf7 	bl	8005830 <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8002e42:	8b6b      	ldrh	r3, [r5, #26]
 8002e44:	f8b5 c018 	ldrh.w	ip, [r5, #24]
		pOut.u8Arr = (uint8_t *)outputData;
 8002e48:	6825      	ldr	r5, [r4, #0]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8002e4a:	fb1c fc03 	smulbb	ip, ip, r3
 8002e4e:	fa1f f38c 	uxth.w	r3, ip
	for( ; i < length ; i++)
 8002e52:	b1ab      	cbz	r3, 8002e80 <show_frame.part.0+0xb0>
 8002e54:	4628      	mov	r0, r5
 8002e56:	eb05 0c43 	add.w	ip, r5, r3, lsl #1
 8002e5a:	4629      	mov	r1, r5
		pxArr->u16Arr[i] = color565(r, g, b);
 8002e5c:	4e35      	ldr	r6, [pc, #212]	@ (8002f34 <show_frame.part.0+0x164>)
 8002e5e:	784a      	ldrb	r2, [r1, #1]
 8002e60:	788b      	ldrb	r3, [r1, #2]
 8002e62:	00d2      	lsls	r2, r2, #3
 8002e64:	f811 eb03 	ldrb.w	lr, [r1], #3
 8002e68:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8002e6c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8002e70:	4313      	orrs	r3, r2
 8002e72:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8002e76:	ba5b      	rev16	r3, r3
 8002e78:	f820 3b02 	strh.w	r3, [r0], #2
	for( ; i < length ; i++)
 8002e7c:	4584      	cmp	ip, r0
 8002e7e:	d1ee      	bne.n	8002e5e <show_frame.part.0+0x8e>
       frame.start.X = 0;
 8002e80:	2600      	movs	r6, #0
 8002e82:	f04f 13ef 	mov.w	r3, #15663343	@ 0xef00ef
 8002e86:	e9cd 6302 	strd	r6, r3, [sp, #8]
	   GC9A01_set_frame(frame);
 8002e8a:	ab04      	add	r3, sp, #16
 8002e8c:	e913 0003 	ldmdb	r3, {r0, r1}
 8002e90:	f7ff fb0e 	bl	80024b0 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8002e94:	202c      	movs	r0, #44	@ 0x2c
 8002e96:	f7fd fcc3 	bl	8000820 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7fd fc9c 	bl	80007d8 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f7fd fca9 	bl	80007f8 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002eac:	4628      	mov	r0, r5
 8002eae:	f7ff fc23 	bl	80026f8 <GC9A01_spi_tx>
	   if(ret != 1)
 8002eb2:	2801      	cmp	r0, #1
 8002eb4:	d009      	beq.n	8002eca <show_frame.part.0+0xfa>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002eb6:	6821      	ldr	r1, [r4, #0]
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <show_frame.part.0+0x168>)
 8002eba:	4b20      	ldr	r3, [pc, #128]	@ (8002f3c <show_frame.part.0+0x16c>)
 8002ebc:	4291      	cmp	r1, r2
 8002ebe:	bf18      	it	ne
 8002ec0:	4613      	movne	r3, r2
 8002ec2:	6023      	str	r3, [r4, #0]
}
 8002ec4:	b005      	add	sp, #20
 8002ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 8002eca:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002ece:	4632      	mov	r2, r6
 8002ed0:	1868      	adds	r0, r5, r1
 8002ed2:	f7ff fc11 	bl	80026f8 <GC9A01_spi_tx>
	   return ret;
 8002ed6:	e7ee      	b.n	8002eb6 <show_frame.part.0+0xe6>
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002ed8:	4c13      	ldr	r4, [pc, #76]	@ (8002f28 <show_frame.part.0+0x158>)
			video.isfirstFrame = 0;
 8002eda:	2300      	movs	r3, #0
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002edc:	480f      	ldr	r0, [pc, #60]	@ (8002f1c <show_frame.part.0+0x14c>)
 8002ede:	4621      	mov	r1, r4
			video.isfirstFrame = 0;
 8002ee0:	75ab      	strb	r3, [r5, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002ee2:	f003 fb93 	bl	800660c <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8002ee6:	89a0      	ldrh	r0, [r4, #12]
 8002ee8:	6861      	ldr	r1, [r4, #4]
 8002eea:	f7ff fec5 	bl	8002c78 <DMA2D_Init.constprop.0>
			video.height = JPEG_Info.ImageHeight;
 8002eee:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8002ef2:	b286      	uxth	r6, r0
			video.width = JPEG_Info.ImageWidth;
 8002ef4:	8328      	strh	r0, [r5, #24]
			video.height = JPEG_Info.ImageHeight;
 8002ef6:	b297      	uxth	r7, r2
 8002ef8:	836a      	strh	r2, [r5, #26]
			video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002efa:	f1d6 03f0 	rsbs	r3, r6, #240	@ 0xf0
 8002efe:	bf48      	it	mi
 8002f00:	3301      	addmi	r3, #1
 8002f02:	105b      	asrs	r3, r3, #1
 8002f04:	83ab      	strh	r3, [r5, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8002f06:	f1d7 03f0 	rsbs	r3, r7, #240	@ 0xf0
 8002f0a:	bf48      	it	mi
 8002f0c:	3301      	addmi	r3, #1
 8002f0e:	105b      	asrs	r3, r3, #1
 8002f10:	83eb      	strh	r3, [r5, #30]
 8002f12:	e77a      	b.n	8002e0a <show_frame.part.0+0x3a>
 8002f14:	240ac230 	.word	0x240ac230
 8002f18:	2409fa30 	.word	0x2409fa30
 8002f1c:	24000148 	.word	0x24000148
 8002f20:	2409f9ec 	.word	0x2409f9ec
 8002f24:	240000a0 	.word	0x240000a0
 8002f28:	240000cc 	.word	0x240000cc
 8002f2c:	24000004 	.word	0x24000004
 8002f30:	240000e0 	.word	0x240000e0
 8002f34:	fffff800 	.word	0xfffff800
 8002f38:	2402a688 	.word	0x2402a688
 8002f3c:	24000324 	.word	0x24000324

08002f40 <smart_watch_init>:
	video.width = 0;
 8002f40:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <smart_watch_init+0x50>)
	video.frame_time = 0.0;
 8002f42:	2000      	movs	r0, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002f44:	4913      	ldr	r1, [pc, #76]	@ (8002f94 <smart_watch_init+0x54>)
	video.width = 0;
 8002f46:	2200      	movs	r2, #0
{
 8002f48:	b510      	push	{r4, lr}
	video.display_status = DISPLAY_ON;
 8002f4a:	2401      	movs	r4, #1
	video.frame_time = 0.0;
 8002f4c:	6298      	str	r0, [r3, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002f4e:	6359      	str	r1, [r3, #52]	@ 0x34
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002f50:	4811      	ldr	r0, [pc, #68]	@ (8002f98 <smart_watch_init+0x58>)
 8002f52:	4912      	ldr	r1, [pc, #72]	@ (8002f9c <smart_watch_init+0x5c>)
	video.time.Hours = 0;
 8002f54:	801a      	strh	r2, [r3, #0]
	video.time.Seconds = 0;
 8002f56:	709a      	strb	r2, [r3, #2]
	video.file_idx = 0;
 8002f58:	829a      	strh	r2, [r3, #20]
	video.FrameType = 0;
 8002f5a:	75da      	strb	r2, [r3, #23]
	video.frameToSkip = 0;
 8002f5c:	625a      	str	r2, [r3, #36]	@ 0x24
	video.display_ts = video.time.Seconds;
 8002f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	video.display_status = DISPLAY_ON;
 8002f60:	f883 4040 	strb.w	r4, [r3, #64]	@ 0x40
	video.frameCount = 0;
 8002f64:	621a      	str	r2, [r3, #32]
	video.video_mode = SETTING_MODE;
 8002f66:	871a      	strh	r2, [r3, #56]	@ 0x38
	video.width = 0;
 8002f68:	e9c3 2206 	strd	r2, r2, [r3, #24]
	video.tick_offset = 0;
 8002f6c:	e9c3 220b 	strd	r2, r2, [r3, #44]	@ 0x2c
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002f70:	f00b faa8 	bl	800e4c4 <FATFS_LinkDriver>
 8002f74:	b100      	cbz	r0, 8002f78 <smart_watch_init+0x38>
		while(1);
 8002f76:	e7fe      	b.n	8002f76 <smart_watch_init+0x36>
}

static void SD_Initialize(void)
{

	BSP_SD_Init();
 8002f78:	4604      	mov	r4, r0
 8002f7a:	f009 fb9b 	bl	800c6b4 <BSP_SD_Init>
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8002f7e:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <smart_watch_init+0x5c>)
 8002f80:	4622      	mov	r2, r4
 8002f82:	4807      	ldr	r0, [pc, #28]	@ (8002fa0 <smart_watch_init+0x60>)
 8002f84:	f00a fd66 	bl	800da54 <f_mount>
 8002f88:	b100      	cbz	r0, 8002f8c <smart_watch_init+0x4c>
	    	while(1);
 8002f8a:	e7fe      	b.n	8002f8a <smart_watch_init+0x4a>
}
 8002f8c:	bd10      	pop	{r4, pc}
 8002f8e:	bf00      	nop
 8002f90:	2409f9ec 	.word	0x2409f9ec
 8002f94:	240549ec 	.word	0x240549ec
 8002f98:	0800f134 	.word	0x0800f134
 8002f9c:	240ac7cc 	.word	0x240ac7cc
 8002fa0:	240ac4a8 	.word	0x240ac4a8
 8002fa4:	00000000 	.word	0x00000000

08002fa8 <smart_watch_process>:
{
 8002fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fac:	ed2d 8b04 	vpush	{d8-d9}
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002fb0:	ed9f 9b71 	vldr	d9, [pc, #452]	@ 8003178 <smart_watch_process+0x1d0>
{
 8002fb4:	b089      	sub	sp, #36	@ 0x24
 8002fb6:	4c72      	ldr	r4, [pc, #456]	@ (8003180 <smart_watch_process+0x1d8>)
 8002fb8:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 80031a8 <smart_watch_process+0x200>
 8002fbc:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 8003194 <smart_watch_process+0x1ec>
 8002fc0:	4f70      	ldr	r7, [pc, #448]	@ (8003184 <smart_watch_process+0x1dc>)
	video.frame_time = 0.0;
 8002fc2:	ed9f 8a71 	vldr	s16, [pc, #452]	@ 8003188 <smart_watch_process+0x1e0>
{

	static uint16_t count = 0;


	if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8002fc6:	4e71      	ldr	r6, [pc, #452]	@ (800318c <smart_watch_process+0x1e4>)
		uint32_t tempStart = HAL_GetTick();
 8002fc8:	f000 ff0c 	bl	8003de4 <HAL_GetTick>
 8002fcc:	4605      	mov	r5, r0
		file_handler(0);
 8002fce:	f7ff fe9f 	bl	8002d10 <file_handler.constprop.0>
	switch(video.video_mode)
 8002fd2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f000 808a 	beq.w	80030f0 <smart_watch_process+0x148>
	switch(video.set)
 8002fdc:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	f000 81a2 	beq.w	800332a <smart_watch_process+0x382>
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	f000 81ed 	beq.w	80033c6 <smart_watch_process+0x41e>
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f000 81c8 	beq.w	8003382 <smart_watch_process+0x3da>
			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f002 febb 	bl	8005d70 <HAL_GPIO_ReadPin>
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d0f9      	beq.n	8002ff2 <smart_watch_process+0x4a>
			video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	4963      	ldr	r1, [pc, #396]	@ (8003190 <smart_watch_process+0x1e8>)
 8003002:	4864      	ldr	r0, [pc, #400]	@ (8003194 <smart_watch_process+0x1ec>)
 8003004:	f7fd fb06 	bl	8000614 <AVI_GetFrame>
			video.set = SET_HOURS;
 8003008:	2301      	movs	r3, #1
			video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800300a:	75e0      	strb	r0, [r4, #23]
			video.set = SET_HOURS;
 800300c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}

static void enable_btn_int(void)
{

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003010:	2006      	movs	r0, #6
 8003012:	f000 ff5d 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003016:	2007      	movs	r0, #7
 8003018:	f000 ff5a 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800301c:	2008      	movs	r0, #8
 800301e:	f000 ff57 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
	if(video.display_status == DISPLAY_ON)
 8003022:	f894 a040 	ldrb.w	sl, [r4, #64]	@ 0x40
 8003026:	f1ba 0f01 	cmp.w	sl, #1
 800302a:	d00b      	beq.n	8003044 <smart_watch_process+0x9c>
		long unsigned int tempStop = HAL_GetTick();
 800302c:	f000 feda 	bl	8003de4 <HAL_GetTick>
		if(video.video_mode == NORMAL_MODE)
 8003030:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
		volatile long unsigned int tempDiff = ( ( tempStop - tempStart ) );
 8003034:	1b40      	subs	r0, r0, r5
		if(video.video_mode == NORMAL_MODE)
 8003036:	2b01      	cmp	r3, #1
		volatile long unsigned int tempDiff = ( ( tempStop - tempStart ) );
 8003038:	9005      	str	r0, [sp, #20]
		if(video.video_mode == NORMAL_MODE)
 800303a:	d1c5      	bne.n	8002fc8 <smart_watch_process+0x20>
			count++;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	e7c0      	b.n	8002fc6 <smart_watch_process+0x1e>
		if(video.time.Seconds >= DISPLAY_STANDBY_TIMER)
 8003044:	78a3      	ldrb	r3, [r4, #2]
 8003046:	2b3a      	cmp	r3, #58	@ 0x3a
 8003048:	d9f0      	bls.n	800302c <smart_watch_process+0x84>
	video.width = 0;
 800304a:	f04f 0b00 	mov.w	fp, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800304e:	4b52      	ldr	r3, [pc, #328]	@ (8003198 <smart_watch_process+0x1f0>)
			GC9A01_sleep_mode(ON);
 8003050:	4650      	mov	r0, sl
	video.frame_time = 0.0;
 8003052:	ed84 8a0a 	vstr	s16, [r4, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8003056:	6363      	str	r3, [r4, #52]	@ 0x34
	video.display_status = DISPLAY_ON;
 8003058:	f884 a040 	strb.w	sl, [r4, #64]	@ 0x40
	video.time.Hours = 0;
 800305c:	f8a4 b000 	strh.w	fp, [r4]
	video.time.Seconds = 0;
 8003060:	f884 b002 	strb.w	fp, [r4, #2]
	video.file_idx = 0;
 8003064:	f8a4 b014 	strh.w	fp, [r4, #20]
	video.FrameType = 0;
 8003068:	f884 b017 	strb.w	fp, [r4, #23]
	video.frameToSkip = 0;
 800306c:	f8c4 b024 	str.w	fp, [r4, #36]	@ 0x24
	video.display_ts = video.time.Seconds;
 8003070:	f8c4 b03c 	str.w	fp, [r4, #60]	@ 0x3c
	video.frameCount = 0;
 8003074:	f8c4 b020 	str.w	fp, [r4, #32]
	video.set = SET_IDLE;
 8003078:	f884 b039 	strb.w	fp, [r4, #57]	@ 0x39
	video.width = 0;
 800307c:	e9c4 bb06 	strd	fp, fp, [r4, #24]
	video.tick_offset = 0;
 8003080:	e9c4 bb0b 	strd	fp, fp, [r4, #44]	@ 0x2c
			GC9A01_sleep_mode(ON);
 8003084:	f7ff fadc 	bl	8002640 <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 8003088:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
			HAL_SuspendTick();
 800308c:	f000 fec2 	bl	8003e14 <HAL_SuspendTick>
 8003090:	b672      	cpsid	i
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003092:	4651      	mov	r1, sl
 8003094:	4650      	mov	r0, sl
 8003096:	f004 faf5 	bl	8007684 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 800309a:	b662      	cpsie	i
			HAL_ResumeTick();
 800309c:	f000 fec2 	bl	8003e24 <HAL_ResumeTick>
			SystemClock_Config();
 80030a0:	f7ff fba6 	bl	80027f0 <SystemClock_Config>
			GC9A01_init();
 80030a4:	f7fd fbee 	bl	8000884 <GC9A01_init>
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80030a8:	465a      	mov	r2, fp
 80030aa:	4935      	ldr	r1, [pc, #212]	@ (8003180 <smart_watch_process+0x1d8>)
 80030ac:	483b      	ldr	r0, [pc, #236]	@ (800319c <smart_watch_process+0x1f4>)
			video.display_status = DISPLAY_ON;
 80030ae:	f884 a040 	strb.w	sl, [r4, #64]	@ 0x40
			RTC_DateTypeDef sDate = {0};
 80030b2:	f8cd b018 	str.w	fp, [sp, #24]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80030b6:	f006 fc3d 	bl	8009934 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80030ba:	a906      	add	r1, sp, #24
 80030bc:	465a      	mov	r2, fp
 80030be:	4837      	ldr	r0, [pc, #220]	@ (800319c <smart_watch_process+0x1f4>)
 80030c0:	f006 fc74 	bl	80099ac <HAL_RTC_GetDate>
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 80030c4:	7823      	ldrb	r3, [r4, #0]
 80030c6:	4a36      	ldr	r2, [pc, #216]	@ (80031a0 <smart_watch_process+0x1f8>)
			file_handler(1);
 80030c8:	4650      	mov	r0, sl
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 80030ca:	fba2 1203 	umull	r1, r2, r2, r3
 80030ce:	08d2      	lsrs	r2, r2, #3
 80030d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80030d4:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
			video.file_idx += video.time.Minutes;
 80030d8:	7862      	ldrb	r2, [r4, #1]
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
			video.file_idx += video.time.Minutes;
 80030e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80030e4:	82a3      	strh	r3, [r4, #20]
			file_handler(1);
 80030e6:	f7ff fd61 	bl	8002bac <file_handler>
			video.display_ts = video.time.Seconds;
 80030ea:	78a3      	ldrb	r3, [r4, #2]
 80030ec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80030ee:	e79d      	b.n	800302c <smart_watch_process+0x84>
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	4927      	ldr	r1, [pc, #156]	@ (8003190 <smart_watch_process+0x1e8>)
 80030f4:	4827      	ldr	r0, [pc, #156]	@ (8003194 <smart_watch_process+0x1ec>)
 80030f6:	f7fd fa8d 	bl	8000614 <AVI_GetFrame>
	if(video.frameToSkip)
 80030fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80030fc:	b2c0      	uxtb	r0, r0
 80030fe:	75e0      	strb	r0, [r4, #23]
	if(video.frameToSkip)
 8003100:	2b00      	cmp	r3, #0
 8003102:	d053      	beq.n	80031ac <smart_watch_process+0x204>
		video.frameToSkip--;
 8003104:	3b01      	subs	r3, #1
 8003106:	6263      	str	r3, [r4, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 8003108:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 800310c:	3301      	adds	r3, #1
 800310e:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
		video.frameCount++;
 8003112:	6a23      	ldr	r3, [r4, #32]
 8003114:	3301      	adds	r3, #1
 8003116:	6223      	str	r3, [r4, #32]
	if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8003118:	2102      	movs	r1, #2
 800311a:	4630      	mov	r0, r6
 800311c:	f002 fe28 	bl	8005d70 <HAL_GPIO_ReadPin>
 8003120:	2800      	cmp	r0, #0
 8003122:	f040 80fe 	bne.w	8003322 <smart_watch_process+0x37a>
		count++;
 8003126:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <smart_watch_process+0x1fc>)
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	3201      	adds	r2, #1
 800312c:	b292      	uxth	r2, r2
	if(count >= RESET_ITER_NUM)
 800312e:	2a1d      	cmp	r2, #29
 8003130:	f240 814f 	bls.w	80033d2 <smart_watch_process+0x42a>
		count = 0;
 8003134:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <smart_watch_process+0x1fc>)
		video.video_mode = SETTING_MODE;
 8003136:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
		count = 0;
 800313a:	8010      	strh	r0, [r2, #0]
		video.video_mode = SETTING_MODE;
 800313c:	9002      	str	r0, [sp, #8]
		HAL_Delay(300);
 800313e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003142:	f000 fe55 	bl	8003df0 <HAL_Delay>
	video.width = 0;
 8003146:	9b02      	ldr	r3, [sp, #8]
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8003148:	4a13      	ldr	r2, [pc, #76]	@ (8003198 <smart_watch_process+0x1f0>)
	video.display_status = DISPLAY_ON;
 800314a:	2001      	movs	r0, #1
	video.time.Hours = 0;
 800314c:	8023      	strh	r3, [r4, #0]
	video.time.Seconds = 0;
 800314e:	70a3      	strb	r3, [r4, #2]
	video.file_idx = 0;
 8003150:	82a3      	strh	r3, [r4, #20]
	video.FrameType = 0;
 8003152:	75e3      	strb	r3, [r4, #23]
	video.frameToSkip = 0;
 8003154:	6263      	str	r3, [r4, #36]	@ 0x24
	video.frame_time = 0.0;
 8003156:	ed84 8a0a 	vstr	s16, [r4, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800315a:	6362      	str	r2, [r4, #52]	@ 0x34
	video.display_ts = video.time.Seconds;
 800315c:	63e3      	str	r3, [r4, #60]	@ 0x3c
	video.frameCount = 0;
 800315e:	6223      	str	r3, [r4, #32]
	video.set = SET_IDLE;
 8003160:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
	video.display_status = DISPLAY_ON;
 8003164:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
	video.width = 0;
 8003168:	e9c4 3306 	strd	r3, r3, [r4, #24]
	video.tick_offset = 0;
 800316c:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
		file_handler(1);
 8003170:	f7ff fd1c 	bl	8002bac <file_handler>
 8003174:	e755      	b.n	8003022 <smart_watch_process+0x7a>
 8003176:	bf00      	nop
 8003178:	00000000 	.word	0x00000000
 800317c:	408f4000 	.word	0x408f4000
 8003180:	2409f9ec 	.word	0x2409f9ec
 8003184:	24000320 	.word	0x24000320
 8003188:	00000000 	.word	0x00000000
 800318c:	58020800 	.word	0x58020800
 8003190:	240ac278 	.word	0x240ac278
 8003194:	240ac230 	.word	0x240ac230
 8003198:	240549ec 	.word	0x240549ec
 800319c:	240000a4 	.word	0x240000a4
 80031a0:	aaaaaaab 	.word	0xaaaaaaab
 80031a4:	2400031c 	.word	0x2400031c
 80031a8:	240ac6e6 	.word	0x240ac6e6
	else if(video.FrameType == AVI_VIDEO_FRAME)
 80031ac:	2801      	cmp	r0, #1
 80031ae:	d1b3      	bne.n	8003118 <smart_watch_process+0x170>
		AVI_Handel.CurrentImage++;
 80031b0:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 80031b4:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
		AVI_Handel.CurrentImage++;
 80031b8:	3301      	adds	r3, #1
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 80031ba:	49b5      	ldr	r1, [pc, #724]	@ (8003490 <smart_watch_process+0x4e8>)
 80031bc:	48b5      	ldr	r0, [pc, #724]	@ (8003494 <smart_watch_process+0x4ec>)
		AVI_Handel.CurrentImage++;
 80031be:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
		video.frameCount++;
 80031c2:	6a23      	ldr	r3, [r4, #32]
 80031c4:	3301      	adds	r3, #1
 80031c6:	6223      	str	r3, [r4, #32]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 80031c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031ca:	f7ff fab1 	bl	8002730 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 80031ce:	4bb2      	ldr	r3, [pc, #712]	@ (8003498 <smart_watch_process+0x4f0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0fb      	beq.n	80031ce <smart_watch_process+0x226>
		if(video.isfirstFrame == 1)
 80031d6:	7da3      	ldrb	r3, [r4, #22]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	f000 81ec 	beq.w	80035b6 <smart_watch_process+0x60e>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80031de:	4baf      	ldr	r3, [pc, #700]	@ (800349c <smart_watch_process+0x4f4>)
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80031e0:	f04f 31ff 	mov.w	r1, #4294967295
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80031e4:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80031e8:	4bad      	ldr	r3, [pc, #692]	@ (80034a0 <smart_watch_process+0x4f8>)
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 80031ea:	f1ca 00f0 	rsb	r0, sl, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 80031ee:	f1cb 0cf0 	rsb	ip, fp, #240	@ 0xf0
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80031f2:	681a      	ldr	r2, [r3, #0]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 80031f4:	0840      	lsrs	r0, r0, #1
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 80031f6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80031fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80031fe:	eb0c 1000 	add.w	r0, ip, r0, lsl #4
 8003202:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8003206:	48a7      	ldr	r0, [pc, #668]	@ (80034a4 <smart_watch_process+0x4fc>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8003208:	9203      	str	r2, [sp, #12]
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800320a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800320c:	9202      	str	r2, [sp, #8]
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800320e:	f002 fb6b 	bl	80058e8 <HAL_DMA2D_PollForTransfer>
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8003212:	fa1f f18a 	uxth.w	r1, sl
 8003216:	48a3      	ldr	r0, [pc, #652]	@ (80034a4 <smart_watch_process+0x4fc>)
 8003218:	fa1f f38b 	uxth.w	r3, fp
 800321c:	9100      	str	r1, [sp, #0]
 800321e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003222:	f002 fb05 	bl	8005830 <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8003226:	8b63      	ldrh	r3, [r4, #26]
 8003228:	8b20      	ldrh	r0, [r4, #24]
 800322a:	fb10 f003 	smulbb	r0, r0, r3
		pOut.u8Arr = (uint8_t *)outputData;
 800322e:	4b9c      	ldr	r3, [pc, #624]	@ (80034a0 <smart_watch_process+0x4f8>)
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8003230:	b280      	uxth	r0, r0
		pOut.u8Arr = (uint8_t *)outputData;
 8003232:	f8d3 a000 	ldr.w	sl, [r3]
	for( ; i < length ; i++)
 8003236:	b1c8      	cbz	r0, 800326c <smart_watch_process+0x2c4>
 8003238:	eb0a 0040 	add.w	r0, sl, r0, lsl #1
 800323c:	4651      	mov	r1, sl
 800323e:	4652      	mov	r2, sl
		pxArr->u16Arr[i] = color565(r, g, b);
 8003240:	f8df c284 	ldr.w	ip, [pc, #644]	@ 80034c8 <smart_watch_process+0x520>
 8003244:	f892 e001 	ldrb.w	lr, [r2, #1]
 8003248:	7893      	ldrb	r3, [r2, #2]
 800324a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800324e:	ea0c 2303 	and.w	r3, ip, r3, lsl #8
 8003252:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8003256:	ea43 030e 	orr.w	r3, r3, lr
 800325a:	f812 eb03 	ldrb.w	lr, [r2], #3
 800325e:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8003262:	ba5b      	rev16	r3, r3
 8003264:	f821 3b02 	strh.w	r3, [r1], #2
	for( ; i < length ; i++)
 8003268:	4288      	cmp	r0, r1
 800326a:	d1eb      	bne.n	8003244 <smart_watch_process+0x29c>
       frame.start.X = 0;
 800326c:	f04f 0b00 	mov.w	fp, #0
 8003270:	f04f 13ef 	mov.w	r3, #15663343	@ 0xef00ef
 8003274:	e9cd b306 	strd	fp, r3, [sp, #24]
	   GC9A01_set_frame(frame);
 8003278:	ab06      	add	r3, sp, #24
 800327a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800327e:	f7ff f917 	bl	80024b0 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8003282:	202c      	movs	r0, #44	@ 0x2c
 8003284:	f7fd facc 	bl	8000820 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8003288:	2001      	movs	r0, #1
 800328a:	f7fd faa5 	bl	80007d8 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 800328e:	4658      	mov	r0, fp
 8003290:	f7fd fab2 	bl	80007f8 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 8003294:	2201      	movs	r2, #1
 8003296:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800329a:	4650      	mov	r0, sl
 800329c:	f7ff fa2c 	bl	80026f8 <GC9A01_spi_tx>
	   if(ret != 1)
 80032a0:	2801      	cmp	r0, #1
 80032a2:	f000 817a 	beq.w	800359a <smart_watch_process+0x5f2>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 80032a6:	487e      	ldr	r0, [pc, #504]	@ (80034a0 <smart_watch_process+0x4f8>)
 80032a8:	4a7f      	ldr	r2, [pc, #508]	@ (80034a8 <smart_watch_process+0x500>)
 80032aa:	6801      	ldr	r1, [r0, #0]
 80032ac:	4b7f      	ldr	r3, [pc, #508]	@ (80034ac <smart_watch_process+0x504>)
 80032ae:	487c      	ldr	r0, [pc, #496]	@ (80034a0 <smart_watch_process+0x4f8>)
 80032b0:	4299      	cmp	r1, r3
 80032b2:	bf08      	it	eq
 80032b4:	4613      	moveq	r3, r2
 80032b6:	6003      	str	r3, [r0, #0]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 80032b8:	f000 fd94 	bl	8003de4 <HAL_GetTick>
 80032bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
		float watch_time = ( video.frameCount * video.frame_time );
 80032be:	ed94 7a08 	vldr	s14, [r4, #32]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 80032c2:	1ac0      	subs	r0, r0, r3
		float watch_time = ( video.frameCount * video.frame_time );
 80032c4:	edd4 6a0a 	vldr	s13, [r4, #40]	@ 0x28
 80032c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		int time_diff = ( video.actual_time - watch_time );
 80032cc:	ee07 0a90 	vmov	s15, r0
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 80032d0:	62e0      	str	r0, [r4, #44]	@ 0x2c
		int time_diff = ( video.actual_time - watch_time );
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	eee7 7a66 	vfms.f32	s15, s14, s13
 80032da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		video.frameToSkip = ( time_diff / video.frame_time );
 80032de:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		if(time_diff < 0)
 80032e2:	ee17 3a90 	vmov	r3, s15
 80032e6:	2b00      	cmp	r3, #0
		video.frameToSkip = ( time_diff / video.frame_time );
 80032e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80032ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80032f0:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
		if(time_diff < 0)
 80032f4:	f2c0 8159 	blt.w	80035aa <smart_watch_process+0x602>
		RTC_DateTypeDef sDate = {0};
 80032f8:	f04f 0a00 	mov.w	sl, #0
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80032fc:	496c      	ldr	r1, [pc, #432]	@ (80034b0 <smart_watch_process+0x508>)
 80032fe:	486d      	ldr	r0, [pc, #436]	@ (80034b4 <smart_watch_process+0x50c>)
 8003300:	4652      	mov	r2, sl
		RTC_DateTypeDef sDate = {0};
 8003302:	f8cd a018 	str.w	sl, [sp, #24]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003306:	f006 fb15 	bl	8009934 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800330a:	a906      	add	r1, sp, #24
 800330c:	4652      	mov	r2, sl
 800330e:	4869      	ldr	r0, [pc, #420]	@ (80034b4 <smart_watch_process+0x50c>)
 8003310:	f006 fb4c 	bl	80099ac <HAL_RTC_GetDate>
	if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8003314:	2102      	movs	r1, #2
 8003316:	4630      	mov	r0, r6
 8003318:	f002 fd2a 	bl	8005d70 <HAL_GPIO_ReadPin>
 800331c:	2800      	cmp	r0, #0
 800331e:	f43f af02 	beq.w	8003126 <smart_watch_process+0x17e>
 8003322:	2300      	movs	r3, #0
 8003324:	4a64      	ldr	r2, [pc, #400]	@ (80034b8 <smart_watch_process+0x510>)
 8003326:	8013      	strh	r3, [r2, #0]
	if(count >= RESET_ITER_NUM)
 8003328:	e67b      	b.n	8003022 <smart_watch_process+0x7a>
	if(video.FrameType == AVI_VIDEO_FRAME)
 800332a:	7de3      	ldrb	r3, [r4, #23]
 800332c:	2b01      	cmp	r3, #1
 800332e:	f000 812a 	beq.w	8003586 <smart_watch_process+0x5de>
			if(btn_status == BTN_PLUS)
 8003332:	f899 a000 	ldrb.w	sl, [r9]
 8003336:	f1ba 0f01 	cmp.w	sl, #1
 800333a:	f000 80c7 	beq.w	80034cc <smart_watch_process+0x524>
			if(btn_status == BTN_MINUS)
 800333e:	f1ba 0f03 	cmp.w	sl, #3
 8003342:	f000 80f7 	beq.w	8003534 <smart_watch_process+0x58c>
			if(btn_status == BTN_SET)
 8003346:	f1ba 0f02 	cmp.w	sl, #2
 800334a:	f47f ae61 	bne.w	8003010 <smart_watch_process+0x68>
				btn_status = BTN_NONE;
 800334e:	2300      	movs	r3, #0
				HAL_Delay(300);
 8003350:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003354:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 8003358:	f000 fd4a 	bl	8003df0 <HAL_Delay>
}

static void clear_btn_int(void)
{

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800335c:	2006      	movs	r0, #6
 800335e:	f000 fded 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8003362:	2007      	movs	r0, #7
 8003364:	f000 fdea 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8003368:	2008      	movs	r0, #8
 800336a:	f000 fde7 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
				video.file_idx += video.time.Minutes;
 800336e:	8aa2      	ldrh	r2, [r4, #20]
 8003370:	7863      	ldrb	r3, [r4, #1]
 8003372:	4413      	add	r3, r2
 8003374:	82a3      	strh	r3, [r4, #20]
				video.isfirstFrame = 1;
 8003376:	2301      	movs	r3, #1
 8003378:	75a3      	strb	r3, [r4, #22]
				video.set = SET_START;
 800337a:	2303      	movs	r3, #3
 800337c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8003380:	e646      	b.n	8003010 <smart_watch_process+0x68>
	if(video.FrameType == AVI_VIDEO_FRAME)
 8003382:	7de3      	ldrb	r3, [r4, #23]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d07f      	beq.n	8003488 <smart_watch_process+0x4e0>
			if(btn_status == BTN_PLUS)
 8003388:	f899 a000 	ldrb.w	sl, [r9]
 800338c:	f1ba 0f01 	cmp.w	sl, #1
 8003390:	d022      	beq.n	80033d8 <smart_watch_process+0x430>
			if(btn_status == BTN_MINUS)
 8003392:	f1ba 0f03 	cmp.w	sl, #3
 8003396:	d04f      	beq.n	8003438 <smart_watch_process+0x490>
			if(btn_status == BTN_SET)
 8003398:	f1ba 0f02 	cmp.w	sl, #2
 800339c:	f47f ae38 	bne.w	8003010 <smart_watch_process+0x68>
				btn_status = BTN_NONE;
 80033a0:	2300      	movs	r3, #0
				HAL_Delay(300);
 80033a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80033a6:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 80033aa:	f000 fd21 	bl	8003df0 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80033ae:	2006      	movs	r0, #6
 80033b0:	f000 fdc4 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80033b4:	2007      	movs	r0, #7
 80033b6:	f000 fdc1 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80033ba:	2008      	movs	r0, #8
 80033bc:	f000 fdbe 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
				video.set = SET_MINUTES;
 80033c0:	f884 a039 	strb.w	sl, [r4, #57]	@ 0x39
 80033c4:	e624      	b.n	8003010 <smart_watch_process+0x68>
			file_handler(1);							// Start froma the first frame
 80033c6:	2001      	movs	r0, #1
 80033c8:	f7ff fbf0 	bl	8002bac <file_handler>
			video.video_mode = NORMAL_MODE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	8723      	strh	r3, [r4, #56]	@ 0x38
			break;
 80033d0:	e61e      	b.n	8003010 <smart_watch_process+0x68>
 80033d2:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <smart_watch_process+0x510>)
 80033d4:	801a      	strh	r2, [r3, #0]
 80033d6:	e624      	b.n	8003022 <smart_watch_process+0x7a>
				btn_status = BTN_NONE;
 80033d8:	f04f 0b00 	mov.w	fp, #0
				HAL_Delay(300);
 80033dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80033e0:	f889 b000 	strb.w	fp, [r9]
				HAL_Delay(300);
 80033e4:	f000 fd04 	bl	8003df0 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80033e8:	2006      	movs	r0, #6
 80033ea:	f000 fda7 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80033ee:	2007      	movs	r0, #7
 80033f0:	f000 fda4 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80033f4:	2008      	movs	r0, #8
 80033f6:	f000 fda1 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
				video.time.Hours++;
 80033fa:	7823      	ldrb	r3, [r4, #0]
				video.time.Hours %= 12;
 80033fc:	4a2f      	ldr	r2, [pc, #188]	@ (80034bc <smart_watch_process+0x514>)
				file_handler(1);
 80033fe:	4650      	mov	r0, sl
				video.time.Hours++;
 8003400:	3301      	adds	r3, #1
				video.time.Hours %= 12;
 8003402:	b2db      	uxtb	r3, r3
 8003404:	fba2 1203 	umull	r1, r2, r2, r3
 8003408:	08d2      	lsrs	r2, r2, #3
 800340a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800340e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8003412:	b2db      	uxtb	r3, r3
 8003414:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8003416:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	82a3      	strh	r3, [r4, #20]
				file_handler(1);
 800341e:	f7ff fbc5 	bl	8002bac <file_handler>
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003422:	465a      	mov	r2, fp
 8003424:	4926      	ldr	r1, [pc, #152]	@ (80034c0 <smart_watch_process+0x518>)
 8003426:	4827      	ldr	r0, [pc, #156]	@ (80034c4 <smart_watch_process+0x51c>)
 8003428:	f7fd f8f4 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_MINUS)
 800342c:	f899 a000 	ldrb.w	sl, [r9]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003430:	75e0      	strb	r0, [r4, #23]
			if(btn_status == BTN_MINUS)
 8003432:	f1ba 0f03 	cmp.w	sl, #3
 8003436:	d1af      	bne.n	8003398 <smart_watch_process+0x3f0>
				btn_status = BTN_NONE;
 8003438:	2300      	movs	r3, #0
				HAL_Delay(300);
 800343a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 800343e:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 8003442:	f000 fcd5 	bl	8003df0 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8003446:	2006      	movs	r0, #6
 8003448:	f000 fd78 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 800344c:	2007      	movs	r0, #7
 800344e:	f000 fd75 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8003452:	2008      	movs	r0, #8
 8003454:	f000 fd72 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Hours > 0)
 8003458:	7823      	ldrb	r3, [r4, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8096 	beq.w	800358c <smart_watch_process+0x5e4>
					video.time.Hours--;
 8003460:	3b01      	subs	r3, #1
 8003462:	b2db      	uxtb	r3, r3
				video.file_idx = ( video.time.Hours * 60 );
 8003464:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8003468:	0092      	lsls	r2, r2, #2
 800346a:	b292      	uxth	r2, r2
				file_handler(1);
 800346c:	2001      	movs	r0, #1
 800346e:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8003470:	82a2      	strh	r2, [r4, #20]
				file_handler(1);
 8003472:	f7ff fb9b 	bl	8002bac <file_handler>
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	4911      	ldr	r1, [pc, #68]	@ (80034c0 <smart_watch_process+0x518>)
 800347a:	4812      	ldr	r0, [pc, #72]	@ (80034c4 <smart_watch_process+0x51c>)
 800347c:	f7fd f8ca 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_SET)
 8003480:	f899 a000 	ldrb.w	sl, [r9]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003484:	75e0      	strb	r0, [r4, #23]
 8003486:	e787      	b.n	8003398 <smart_watch_process+0x3f0>
 8003488:	f7ff fca2 	bl	8002dd0 <show_frame.part.0>
 800348c:	e77c      	b.n	8003388 <smart_watch_process+0x3e0>
 800348e:	bf00      	nop
 8003490:	2409fa30 	.word	0x2409fa30
 8003494:	24000148 	.word	0x24000148
 8003498:	240000a0 	.word	0x240000a0
 800349c:	240000cc 	.word	0x240000cc
 80034a0:	24000004 	.word	0x24000004
 80034a4:	240000e0 	.word	0x240000e0
 80034a8:	24000324 	.word	0x24000324
 80034ac:	2402a688 	.word	0x2402a688
 80034b0:	2409f9ec 	.word	0x2409f9ec
 80034b4:	240000a4 	.word	0x240000a4
 80034b8:	2400031c 	.word	0x2400031c
 80034bc:	aaaaaaab 	.word	0xaaaaaaab
 80034c0:	240ac278 	.word	0x240ac278
 80034c4:	240ac230 	.word	0x240ac230
 80034c8:	fffff800 	.word	0xfffff800
				btn_status = BTN_NONE;
 80034cc:	f04f 0b00 	mov.w	fp, #0
				HAL_Delay(300);
 80034d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80034d4:	f889 b000 	strb.w	fp, [r9]
				HAL_Delay(300);
 80034d8:	f000 fc8a 	bl	8003df0 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80034dc:	2006      	movs	r0, #6
 80034de:	f000 fd2d 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80034e2:	2007      	movs	r0, #7
 80034e4:	f000 fd2a 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80034e8:	2008      	movs	r0, #8
 80034ea:	f000 fd27 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
				video.time.Minutes++;
 80034ee:	7863      	ldrb	r3, [r4, #1]
				video.time.Minutes %= 60;
 80034f0:	4a4a      	ldr	r2, [pc, #296]	@ (800361c <smart_watch_process+0x674>)
				file_handler(1);
 80034f2:	4650      	mov	r0, sl
				video.time.Minutes++;
 80034f4:	3301      	adds	r3, #1
				video.time.Minutes %= 60;
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	fba2 1203 	umull	r1, r2, r2, r3
 80034fc:	0952      	lsrs	r2, r2, #5
 80034fe:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003502:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
				video.file_idx += video.time.Minutes;
 8003506:	8aa2      	ldrh	r2, [r4, #20]
				video.time.Minutes %= 60;
 8003508:	b2db      	uxtb	r3, r3
 800350a:	7063      	strb	r3, [r4, #1]
				video.file_idx += video.time.Minutes;
 800350c:	4413      	add	r3, r2
 800350e:	82a3      	strh	r3, [r4, #20]
				file_handler(1);
 8003510:	f7ff fb4c 	bl	8002bac <file_handler>
				video.file_idx -= video.time.Minutes;
 8003514:	8aa3      	ldrh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003516:	465a      	mov	r2, fp
				video.file_idx -= video.time.Minutes;
 8003518:	7861      	ldrb	r1, [r4, #1]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800351a:	4841      	ldr	r0, [pc, #260]	@ (8003620 <smart_watch_process+0x678>)
				video.file_idx -= video.time.Minutes;
 800351c:	1a5b      	subs	r3, r3, r1
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800351e:	4941      	ldr	r1, [pc, #260]	@ (8003624 <smart_watch_process+0x67c>)
				video.file_idx -= video.time.Minutes;
 8003520:	82a3      	strh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003522:	f7fd f877 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_MINUS)
 8003526:	f899 a000 	ldrb.w	sl, [r9]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800352a:	75e0      	strb	r0, [r4, #23]
			if(btn_status == BTN_MINUS)
 800352c:	f1ba 0f03 	cmp.w	sl, #3
 8003530:	f47f af09 	bne.w	8003346 <smart_watch_process+0x39e>
				btn_status = BTN_NONE;
 8003534:	2300      	movs	r3, #0
				HAL_Delay(300);
 8003536:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 800353a:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 800353e:	f000 fc57 	bl	8003df0 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8003542:	2006      	movs	r0, #6
 8003544:	f000 fcfa 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8003548:	2007      	movs	r0, #7
 800354a:	f000 fcf7 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800354e:	2008      	movs	r0, #8
 8003550:	f000 fcf4 	bl	8003f3c <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Minutes > 0)
 8003554:	7863      	ldrb	r3, [r4, #1]
 8003556:	b1eb      	cbz	r3, 8003594 <smart_watch_process+0x5ec>
					video.time.Minutes--;
 8003558:	3b01      	subs	r3, #1
 800355a:	b2db      	uxtb	r3, r3
				video.file_idx += video.time.Minutes;
 800355c:	461a      	mov	r2, r3
 800355e:	7063      	strb	r3, [r4, #1]
				file_handler(1);
 8003560:	2001      	movs	r0, #1
				video.file_idx += video.time.Minutes;
 8003562:	8aa3      	ldrh	r3, [r4, #20]
 8003564:	441a      	add	r2, r3
 8003566:	82a2      	strh	r2, [r4, #20]
				file_handler(1);
 8003568:	f7ff fb20 	bl	8002bac <file_handler>
				video.file_idx -= video.time.Minutes;
 800356c:	8aa3      	ldrh	r3, [r4, #20]
 800356e:	7862      	ldrb	r2, [r4, #1]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003570:	492c      	ldr	r1, [pc, #176]	@ (8003624 <smart_watch_process+0x67c>)
				video.file_idx -= video.time.Minutes;
 8003572:	1a9b      	subs	r3, r3, r2
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003574:	482a      	ldr	r0, [pc, #168]	@ (8003620 <smart_watch_process+0x678>)
 8003576:	2200      	movs	r2, #0
				video.file_idx -= video.time.Minutes;
 8003578:	82a3      	strh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800357a:	f7fd f84b 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_SET)
 800357e:	f899 a000 	ldrb.w	sl, [r9]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003582:	75e0      	strb	r0, [r4, #23]
 8003584:	e6df      	b.n	8003346 <smart_watch_process+0x39e>
 8003586:	f7ff fc23 	bl	8002dd0 <show_frame.part.0>
 800358a:	e6d2      	b.n	8003332 <smart_watch_process+0x38a>
 800358c:	f44f 7225 	mov.w	r2, #660	@ 0x294
					video.time.Hours = 11;
 8003590:	230b      	movs	r3, #11
 8003592:	e76b      	b.n	800346c <smart_watch_process+0x4c4>
 8003594:	223b      	movs	r2, #59	@ 0x3b
					video.time.Minutes = 59;
 8003596:	4613      	mov	r3, r2
 8003598:	e7e1      	b.n	800355e <smart_watch_process+0x5b6>
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 800359a:	465a      	mov	r2, fp
 800359c:	f50a 4061 	add.w	r0, sl, #57600	@ 0xe100
 80035a0:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80035a4:	f7ff f8a8 	bl	80026f8 <GC9A01_spi_tx>
	   return ret;
 80035a8:	e67d      	b.n	80032a6 <smart_watch_process+0x2fe>
			HAL_Delay(-time_diff);
 80035aa:	4258      	negs	r0, r3
 80035ac:	f000 fc20 	bl	8003df0 <HAL_Delay>
			video.frameToSkip = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80035b4:	e6a0      	b.n	80032f8 <smart_watch_process+0x350>
			video.isfirstFrame = 0;
 80035b6:	2300      	movs	r3, #0
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 80035b8:	491b      	ldr	r1, [pc, #108]	@ (8003628 <smart_watch_process+0x680>)
 80035ba:	481c      	ldr	r0, [pc, #112]	@ (800362c <smart_watch_process+0x684>)
			video.isfirstFrame = 0;
 80035bc:	75a3      	strb	r3, [r4, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 80035be:	f003 f825 	bl	800660c <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 80035c2:	4b19      	ldr	r3, [pc, #100]	@ (8003628 <smart_watch_process+0x680>)
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	8998      	ldrh	r0, [r3, #12]
 80035c8:	f7ff fb56 	bl	8002c78 <DMA2D_Init.constprop.0>
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 80035cc:	edd8 7a00 	vldr	s15, [r8]
			video.width = JPEG_Info.ImageWidth;
 80035d0:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <smart_watch_process+0x680>)
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 80035d2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
			video.width = JPEG_Info.ImageWidth;
 80035d6:	68da      	ldr	r2, [r3, #12]
			video.height = JPEG_Info.ImageHeight;
 80035d8:	689b      	ldr	r3, [r3, #8]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 80035da:	ee86 7b09 	vdiv.f64	d7, d6, d9
			video.width = JPEG_Info.ImageWidth;
 80035de:	8322      	strh	r2, [r4, #24]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 80035e0:	b292      	uxth	r2, r2
			video.height = JPEG_Info.ImageHeight;
 80035e2:	8363      	strh	r3, [r4, #26]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 80035e4:	b29b      	uxth	r3, r3
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 80035e6:	f1d2 02f0 	rsbs	r2, r2, #240	@ 0xf0
 80035ea:	bf48      	it	mi
 80035ec:	3201      	addmi	r2, #1
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 80035ee:	f1d3 03f0 	rsbs	r3, r3, #240	@ 0xf0
 80035f2:	bf48      	it	mi
 80035f4:	3301      	addmi	r3, #1
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 80035f6:	1052      	asrs	r2, r2, #1
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 80035f8:	105b      	asrs	r3, r3, #1
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 80035fa:	83a2      	strh	r2, [r4, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 80035fc:	83e3      	strh	r3, [r4, #30]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 80035fe:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003602:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8003606:	f000 fbed 	bl	8003de4 <HAL_GetTick>
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 800360a:	2301      	movs	r3, #1
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 800360c:	6320      	str	r0, [r4, #48]	@ 0x30
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800360e:	2200      	movs	r2, #0
 8003610:	4907      	ldr	r1, [pc, #28]	@ (8003630 <smart_watch_process+0x688>)
 8003612:	4808      	ldr	r0, [pc, #32]	@ (8003634 <smart_watch_process+0x68c>)
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 8003614:	6223      	str	r3, [r4, #32]
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003616:	f006 fab9 	bl	8009b8c <HAL_RTC_SetTime>
 800361a:	e5e0      	b.n	80031de <smart_watch_process+0x236>
 800361c:	88888889 	.word	0x88888889
 8003620:	240ac230 	.word	0x240ac230
 8003624:	240ac278 	.word	0x240ac278
 8003628:	240000cc 	.word	0x240000cc
 800362c:	24000148 	.word	0x24000148
 8003630:	2409f9ec 	.word	0x2409f9ec
 8003634:	240000a4 	.word	0x240000a4

08003638 <HAL_GPIO_EXTI_Callback>:
}

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003638:	b508      	push	{r3, lr}

	if(video.video_mode == SETTING_MODE)
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <HAL_GPIO_EXTI_Callback+0x58>)
 800363c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003640:	b103      	cbz	r3, 8003644 <HAL_GPIO_EXTI_Callback+0xc>

		disable_btn_int();

	}

}
 8003642:	bd08      	pop	{r3, pc}
		if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 8003644:	2104      	movs	r1, #4
 8003646:	4813      	ldr	r0, [pc, #76]	@ (8003694 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003648:	f002 fb92 	bl	8005d70 <HAL_GPIO_ReadPin>
 800364c:	b968      	cbnz	r0, 800366a <HAL_GPIO_EXTI_Callback+0x32>
			btn_status = BTN_PLUS;
 800364e:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <HAL_GPIO_EXTI_Callback+0x60>)
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003654:	2006      	movs	r0, #6
 8003656:	f000 fc49 	bl	8003eec <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800365a:	2007      	movs	r0, #7
 800365c:	f000 fc46 	bl	8003eec <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8003660:	2008      	movs	r0, #8
}
 8003662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8003666:	f000 bc41 	b.w	8003eec <HAL_NVIC_DisableIRQ>
		else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 800366a:	2102      	movs	r1, #2
 800366c:	4809      	ldr	r0, [pc, #36]	@ (8003694 <HAL_GPIO_EXTI_Callback+0x5c>)
 800366e:	f002 fb7f 	bl	8005d70 <HAL_GPIO_ReadPin>
 8003672:	b918      	cbnz	r0, 800367c <HAL_GPIO_EXTI_Callback+0x44>
			btn_status = BTN_SET;
 8003674:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <HAL_GPIO_EXTI_Callback+0x60>)
 8003676:	2202      	movs	r2, #2
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e7eb      	b.n	8003654 <HAL_GPIO_EXTI_Callback+0x1c>
		else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 800367c:	2101      	movs	r1, #1
 800367e:	4805      	ldr	r0, [pc, #20]	@ (8003694 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003680:	f002 fb76 	bl	8005d70 <HAL_GPIO_ReadPin>
 8003684:	2800      	cmp	r0, #0
 8003686:	d1e5      	bne.n	8003654 <HAL_GPIO_EXTI_Callback+0x1c>
			btn_status = BTN_MINUS;
 8003688:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <HAL_GPIO_EXTI_Callback+0x60>)
 800368a:	2203      	movs	r2, #3
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e7e1      	b.n	8003654 <HAL_GPIO_EXTI_Callback+0x1c>
 8003690:	2409f9ec 	.word	0x2409f9ec
 8003694:	58020800 	.word	0x58020800
 8003698:	240ac6e6 	.word	0x240ac6e6

0800369c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{

    // Controlla errori FIFO
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_FEIF0_4)) {
 800369c:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_SPI_TxCpltCallback+0xd4>)
 800369e:	4a35      	ldr	r2, [pc, #212]	@ (8003774 <HAL_SPI_TxCpltCallback+0xd8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d904      	bls.n	80036b0 <HAL_SPI_TxCpltCallback+0x14>
 80036a6:	4b34      	ldr	r3, [pc, #208]	@ (8003778 <HAL_SPI_TxCpltCallback+0xdc>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	07d0      	lsls	r0, r2, #31
 80036ac:	d524      	bpl.n	80036f8 <HAL_SPI_TxCpltCallback+0x5c>
       while(1);
 80036ae:	e7fe      	b.n	80036ae <HAL_SPI_TxCpltCallback+0x12>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_FEIF0_4)) {
 80036b0:	4a32      	ldr	r2, [pc, #200]	@ (800377c <HAL_SPI_TxCpltCallback+0xe0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d90a      	bls.n	80036cc <HAL_SPI_TxCpltCallback+0x30>
 80036b6:	4b32      	ldr	r3, [pc, #200]	@ (8003780 <HAL_SPI_TxCpltCallback+0xe4>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	07d1      	lsls	r1, r2, #31
 80036bc:	d4f7      	bmi.n	80036ae <HAL_SPI_TxCpltCallback+0x12>
    }

    // Controlla errori Direct Mode
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_DMEIF0_4)) {
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	0751      	lsls	r1, r2, #29
 80036c2:	d423      	bmi.n	800370c <HAL_SPI_TxCpltCallback+0x70>
        while(1);
    }

    // Controlla errori di trasferimento
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TEIF0_4)) {
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	0711      	lsls	r1, r2, #28
 80036c8:	d51c      	bpl.n	8003704 <HAL_SPI_TxCpltCallback+0x68>
        while(1);
 80036ca:	e7fe      	b.n	80036ca <HAL_SPI_TxCpltCallback+0x2e>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_FEIF0_4)) {
 80036cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <HAL_SPI_TxCpltCallback+0xe8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d91d      	bls.n	800370e <HAL_SPI_TxCpltCallback+0x72>
 80036d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <HAL_SPI_TxCpltCallback+0xec>)
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	07d2      	lsls	r2, r2, #31
 80036d8:	d4e9      	bmi.n	80036ae <HAL_SPI_TxCpltCallback+0x12>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_DMEIF0_4)) {
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	0752      	lsls	r2, r2, #29
 80036de:	d415      	bmi.n	800370c <HAL_SPI_TxCpltCallback+0x70>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TEIF0_4)) {
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	0712      	lsls	r2, r2, #28
 80036e4:	d4f1      	bmi.n	80036ca <HAL_SPI_TxCpltCallback+0x2e>
    }

    // Controlla completamento trasferimento
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TCIF0_4)) {
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d12e      	bne.n	800374e <HAL_SPI_TxCpltCallback+0xb2>
    	while(1);
    }

	spi_dma_not_ready = 0;
 80036f0:	4b26      	ldr	r3, [pc, #152]	@ (800378c <HAL_SPI_TxCpltCallback+0xf0>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]

}
 80036f6:	4770      	bx	lr
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_DMEIF0_4)) {
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	0750      	lsls	r0, r2, #29
 80036fc:	d406      	bmi.n	800370c <HAL_SPI_TxCpltCallback+0x70>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TEIF0_4)) {
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	0710      	lsls	r0, r2, #28
 8003702:	d4e2      	bmi.n	80036ca <HAL_SPI_TxCpltCallback+0x2e>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TCIF0_4)) {
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800370a:	e7ef      	b.n	80036ec <HAL_SPI_TxCpltCallback+0x50>
        while(1);
 800370c:	e7fe      	b.n	800370c <HAL_SPI_TxCpltCallback+0x70>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_FEIF0_4)) {
 800370e:	4a20      	ldr	r2, [pc, #128]	@ (8003790 <HAL_SPI_TxCpltCallback+0xf4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d90a      	bls.n	800372a <HAL_SPI_TxCpltCallback+0x8e>
 8003714:	4b1c      	ldr	r3, [pc, #112]	@ (8003788 <HAL_SPI_TxCpltCallback+0xec>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	07d0      	lsls	r0, r2, #31
 800371a:	d4c8      	bmi.n	80036ae <HAL_SPI_TxCpltCallback+0x12>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_DMEIF0_4)) {
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	0750      	lsls	r0, r2, #29
 8003720:	d4f4      	bmi.n	800370c <HAL_SPI_TxCpltCallback+0x70>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TEIF0_4)) {
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	0710      	lsls	r0, r2, #28
 8003726:	d50d      	bpl.n	8003744 <HAL_SPI_TxCpltCallback+0xa8>
 8003728:	e7cf      	b.n	80036ca <HAL_SPI_TxCpltCallback+0x2e>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_FEIF0_4)) {
 800372a:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <HAL_SPI_TxCpltCallback+0xf8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_SPI_TxCpltCallback+0xfc>)
 8003730:	d80e      	bhi.n	8003750 <HAL_SPI_TxCpltCallback+0xb4>
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	07d2      	lsls	r2, r2, #31
 8003736:	d4ba      	bmi.n	80036ae <HAL_SPI_TxCpltCallback+0x12>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_DMEIF0_4)) {
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	0752      	lsls	r2, r2, #29
 800373c:	d4e6      	bmi.n	800370c <HAL_SPI_TxCpltCallback+0x70>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TEIF0_4)) {
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	0712      	lsls	r2, r2, #28
 8003742:	d4c2      	bmi.n	80036ca <HAL_SPI_TxCpltCallback+0x2e>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TCIF0_4)) {
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0d0      	beq.n	80036f0 <HAL_SPI_TxCpltCallback+0x54>
    	while(1);
 800374e:	e7fe      	b.n	800374e <HAL_SPI_TxCpltCallback+0xb2>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_FEIF0_4)) {
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	07d1      	lsls	r1, r2, #31
 8003754:	d4ab      	bmi.n	80036ae <HAL_SPI_TxCpltCallback+0x12>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_DMEIF0_4)) {
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	0751      	lsls	r1, r2, #29
 800375a:	d4d7      	bmi.n	800370c <HAL_SPI_TxCpltCallback+0x70>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TEIF0_4)) {
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	0711      	lsls	r1, r2, #28
 8003760:	d4b3      	bmi.n	80036ca <HAL_SPI_TxCpltCallback+0x2e>
    if (__HAL_DMA_GET_FLAG(&hdma_spi1_tx, DMA_FLAG_TCIF0_4)) {
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_SPI_TxCpltCallback+0xb2>
 800376c:	e7c0      	b.n	80036f0 <HAL_SPI_TxCpltCallback+0x54>
 800376e:	bf00      	nop
 8003770:	240001a0 	.word	0x240001a0
 8003774:	48022c94 	.word	0x48022c94
 8003778:	58025400 	.word	0x58025400
 800377c:	400204b8 	.word	0x400204b8
 8003780:	48022c00 	.word	0x48022c00
 8003784:	40020458 	.word	0x40020458
 8003788:	40020400 	.word	0x40020400
 800378c:	2400008c 	.word	0x2400008c
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020058 	.word	0x40020058
 8003798:	40020000 	.word	0x40020000

0800379c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379c:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <HAL_MspInit+0x20>)
{
 800379e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a0:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80037a4:	f042 0202 	orr.w	r2, r2, #2
 80037a8:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80037ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b8:	b002      	add	sp, #8
 80037ba:	4770      	bx	lr
 80037bc:	58024400 	.word	0x58024400

080037c0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80037c0:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_DMA2D_MspInit+0x2c>)
 80037c2:	6802      	ldr	r2, [r0, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d000      	beq.n	80037ca <HAL_DMA2D_MspInit+0xa>
 80037c8:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_DMA2D_MspInit+0x30>)
{
 80037cc:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80037ce:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80037d2:	f042 0210 	orr.w	r2, r2, #16
 80037d6:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 80037da:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80037e6:	b002      	add	sp, #8
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	52001000 	.word	0x52001000
 80037f0:	58024400 	.word	0x58024400

080037f4 <HAL_JPEG_MspInit>:
{
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 80037f4:	4b3a      	ldr	r3, [pc, #232]	@ (80038e0 <HAL_JPEG_MspInit+0xec>)

	  __HAL_RCC_MDMA_CLK_ENABLE();

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 80037f6:	2107      	movs	r1, #7
 80037f8:	220f      	movs	r2, #15
{
 80037fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 80037fe:	f8d3 4134 	ldr.w	r4, [r3, #308]	@ 0x134
{
 8003802:	4606      	mov	r6, r0
 8003804:	b083      	sub	sp, #12
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003806:	2500      	movs	r5, #0
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003808:	f044 0420 	orr.w	r4, r4, #32
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
	  hmdmaIn.Init.BufferTransferLength = 32;
 800380c:	2720      	movs	r7, #32
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 800380e:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8003812:	f44f 48a0 	mov.w	r8, #20480	@ 0x5000
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003816:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
 800381a:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800381e:	4c31      	ldr	r4, [pc, #196]	@ (80038e4 <HAL_JPEG_MspInit+0xf0>)
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003820:	f000 0020 	and.w	r0, r0, #32
 8003824:	9000      	str	r0, [sp, #0]
 8003826:	9800      	ldr	r0, [sp, #0]
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8003828:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 800382c:	f040 0001 	orr.w	r0, r0, #1
 8003830:	f8c3 0134 	str.w	r0, [r3, #308]	@ 0x134
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8003834:	2079      	movs	r0, #121	@ 0x79
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8003836:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8003842:	f000 fb09 	bl	8003e58 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8003846:	2079      	movs	r0, #121	@ 0x79
 8003848:	f000 fb42 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800384c:	2380      	movs	r3, #128	@ 0x80
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800384e:	2202      	movs	r2, #2

	  hmdmaIn.Instance = MDMA_Channel1;

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);

	  HAL_MDMA_DeInit(&hmdmaIn);
 8003850:	4620      	mov	r0, r4
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 8003852:	6223      	str	r3, [r4, #32]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8003854:	6162      	str	r2, [r4, #20]
	  hmdmaIn.Instance = MDMA_Channel1;
 8003856:	2211      	movs	r2, #17
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8003858:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800385c:	60a5      	str	r5, [r4, #8]
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800385e:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaIn.Init.BufferTransferLength = 32;
 8003862:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003864:	e9c4 3503 	strd	r3, r5, [r4, #12]
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8003868:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800386c:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaIn.Instance = MDMA_Channel1;
 800386e:	4b1e      	ldr	r3, [pc, #120]	@ (80038e8 <HAL_JPEG_MspInit+0xf4>)
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8003870:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8003874:	6334      	str	r4, [r6, #48]	@ 0x30
 8003876:	6426      	str	r6, [r4, #64]	@ 0x40
	  hmdmaIn.Instance = MDMA_Channel1;
 8003878:	e9c4 3200 	strd	r3, r2, [r4]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800387c:	e9c4 5506 	strd	r5, r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaIn);
 8003880:	f003 fd98 	bl	80073b4 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8003884:	4620      	mov	r0, r4
 8003886:	f003 fd1b 	bl	80072c0 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800388a:	4c18      	ldr	r4, [pc, #96]	@ (80038ec <HAL_JPEG_MspInit+0xf8>)
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 800388c:	f44f 3320 	mov.w	r3, #163840	@ 0x28000

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
	  hmdmaOut.Init.BufferTransferLength = 32;

	  hmdmaOut.Instance = MDMA_Channel0;
 8003890:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_JPEG_MspInit+0xfc>)
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8003892:	60a5      	str	r5, [r4, #8]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8003894:	4620      	mov	r0, r4
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8003896:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8003898:	2313      	movs	r3, #19
	  hmdmaOut.Instance = MDMA_Channel0;
 800389a:	6022      	str	r2, [r4, #0]
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800389c:	6063      	str	r3, [r4, #4]
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800389e:	23c0      	movs	r3, #192	@ 0xc0
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 80038a0:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 80038a4:	60e3      	str	r3, [r4, #12]
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 80038a6:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaOut.Init.BufferTransferLength = 32;
 80038aa:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 80038ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 80038b0:	e9c4 7507 	strd	r7, r5, [r4, #28]
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 80038b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 80038b8:	2508      	movs	r5, #8
 80038ba:	61a5      	str	r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaOut);
 80038bc:	f003 fd7a 	bl	80073b4 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 80038c0:	4620      	mov	r0, r4
 80038c2:	f003 fcfd 	bl	80072c0 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 80038c6:	6374      	str	r4, [r6, #52]	@ 0x34


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 80038c8:	220f      	movs	r2, #15
 80038ca:	4629      	mov	r1, r5
 80038cc:	207a      	movs	r0, #122	@ 0x7a
	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 80038ce:	6426      	str	r6, [r4, #64]	@ 0x40
	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 80038d0:	f000 fac2 	bl	8003e58 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80038d4:	207a      	movs	r0, #122	@ 0x7a
}
 80038d6:	b003      	add	sp, #12
 80038d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80038dc:	f000 baf8 	b.w	8003ed0 <HAL_NVIC_EnableIRQ>
 80038e0:	58024400 	.word	0x58024400
 80038e4:	240ac758 	.word	0x240ac758
 80038e8:	52000080 	.word	0x52000080
 80038ec:	240ac6e8 	.word	0x240ac6e8
 80038f0:	52000040 	.word	0x52000040

080038f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038f4:	b5d0      	push	{r4, r6, r7, lr}
 80038f6:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	2100      	movs	r1, #0
{
 80038fa:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038fc:	22c0      	movs	r2, #192	@ 0xc0
 80038fe:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	9108      	str	r1, [sp, #32]
 8003902:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003906:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800390a:	f00a fe33 	bl	800e574 <memset>
  if(hsd->Instance==SDMMC1)
 800390e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a04 <HAL_SD_MspInit+0x110>)
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <HAL_SD_MspInit+0x26>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003916:	b03a      	add	sp, #232	@ 0xe8
 8003918:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800391a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800391e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003920:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003922:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003926:	f004 fd71 	bl	800840c <HAL_RCCEx_PeriphCLKConfig>
 800392a:	2800      	cmp	r0, #0
 800392c:	d166      	bne.n	80039fc <HAL_SD_MspInit+0x108>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800392e:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <HAL_SD_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003930:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003934:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003936:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003938:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800393c:	2601      	movs	r6, #1
 800393e:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003940:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003944:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8003948:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800394c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8003950:	9200      	str	r2, [sp, #0]
 8003952:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003954:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003958:	f042 0202 	orr.w	r2, r2, #2
 800395c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003960:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003964:	f002 0202 	and.w	r2, r2, #2
 8003968:	9201      	str	r2, [sp, #4]
 800396a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800396c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003970:	f042 0204 	orr.w	r2, r2, #4
 8003974:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003978:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800397c:	f002 0204 	and.w	r2, r2, #4
 8003980:	9202      	str	r2, [sp, #8]
 8003982:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003984:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003988:	f042 0208 	orr.w	r2, r2, #8
 800398c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003990:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003994:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003996:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800399a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800399e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a0:	a904      	add	r1, sp, #16
 80039a2:	481a      	ldr	r0, [pc, #104]	@ (8003a0c <HAL_SD_MspInit+0x118>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80039a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039aa:	f002 f89f 	bl	8005aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80039ae:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 80039b2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b4:	a904      	add	r1, sp, #16
 80039b6:	4816      	ldr	r0, [pc, #88]	@ (8003a10 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80039b8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80039ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039be:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c2:	f002 f893 	bl	8005aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039ca:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039cc:	a904      	add	r1, sp, #16
 80039ce:	4810      	ldr	r0, [pc, #64]	@ (8003a10 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80039d0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039d6:	2200      	movs	r2, #0
 80039d8:	2303      	movs	r3, #3
 80039da:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039de:	f002 f885 	bl	8005aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039e2:	2204      	movs	r2, #4
 80039e4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039e6:	a904      	add	r1, sp, #16
 80039e8:	480a      	ldr	r0, [pc, #40]	@ (8003a14 <HAL_SD_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80039ea:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80039f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039f4:	f002 f87a 	bl	8005aec <HAL_GPIO_Init>
}
 80039f8:	b03a      	add	sp, #232	@ 0xe8
 80039fa:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80039fc:	f7ff f8d4 	bl	8002ba8 <Error_Handler>
 8003a00:	e795      	b.n	800392e <HAL_SD_MspInit+0x3a>
 8003a02:	bf00      	nop
 8003a04:	52007000 	.word	0x52007000
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	58020400 	.word	0x58020400
 8003a10:	58020800 	.word	0x58020800
 8003a14:	58020c00 	.word	0x58020c00

08003a18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a18:	b530      	push	{r4, r5, lr}
 8003a1a:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	2100      	movs	r1, #0
{
 8003a1e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a20:	22c0      	movs	r2, #192	@ 0xc0
 8003a22:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	9106      	str	r1, [sp, #24]
 8003a26:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003a2a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a2e:	f00a fda1 	bl	800e574 <memset>
  if(hspi->Instance==SPI1)
 8003a32:	4b30      	ldr	r3, [pc, #192]	@ (8003af4 <HAL_SPI_MspInit+0xdc>)
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d001      	beq.n	8003a3e <HAL_SPI_MspInit+0x26>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a3a:	b039      	add	sp, #228	@ 0xe4
 8003a3c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003a3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a42:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a44:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003a46:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a4a:	f004 fcdf 	bl	800840c <HAL_RCCEx_PeriphCLKConfig>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d14a      	bne.n	8003ae8 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a52:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a54:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a56:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a58:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8003a5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a60:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 8003a64:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8003a68:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a6c:	9200      	str	r2, [sp, #0]
 8003a6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a70:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a7c:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a82:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a84:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a88:	481c      	ldr	r0, [pc, #112]	@ (8003afc <HAL_SPI_MspInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a8c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	9d01      	ldr	r5, [sp, #4]
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8003a90:	4d1b      	ldr	r5, [pc, #108]	@ (8003b00 <HAL_SPI_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9e:	f002 f825 	bl	8005aec <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003aa2:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8003aa4:	4917      	ldr	r1, [pc, #92]	@ (8003b04 <HAL_SPI_MspInit+0xec>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003aa6:	2226      	movs	r2, #38	@ 0x26
 8003aa8:	2040      	movs	r0, #64	@ 0x40
 8003aaa:	60eb      	str	r3, [r5, #12]
 8003aac:	616b      	str	r3, [r5, #20]
 8003aae:	60a8      	str	r0, [r5, #8]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003ab0:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003ab2:	e9c5 1200 	strd	r1, r2, [r5]
 8003ab6:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8003aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003abe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003ac2:	2304      	movs	r3, #4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003ac4:	6129      	str	r1, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003ac6:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003aca:	f000 fb2d 	bl	8004128 <HAL_DMA_Init>
 8003ace:	b970      	cbnz	r0, 8003aee <HAL_SPI_MspInit+0xd6>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2023      	movs	r0, #35	@ 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003ad4:	67a5      	str	r5, [r4, #120]	@ 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ad6:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003ad8:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ada:	f000 f9bd 	bl	8003e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ade:	2023      	movs	r0, #35	@ 0x23
 8003ae0:	f000 f9f6 	bl	8003ed0 <HAL_NVIC_EnableIRQ>
}
 8003ae4:	b039      	add	sp, #228	@ 0xe4
 8003ae6:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8003ae8:	f7ff f85e 	bl	8002ba8 <Error_Handler>
 8003aec:	e7b1      	b.n	8003a52 <HAL_SPI_MspInit+0x3a>
      Error_Handler();
 8003aee:	f7ff f85b 	bl	8002ba8 <Error_Handler>
 8003af2:	e7ed      	b.n	8003ad0 <HAL_SPI_MspInit+0xb8>
 8003af4:	40013000 	.word	0x40013000
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58020000 	.word	0x58020000
 8003b00:	240001a0 	.word	0x240001a0
 8003b04:	40020010 	.word	0x40020010

08003b08 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	b0b0      	sub	sp, #192	@ 0xc0
 8003b0c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b0e:	22c0      	movs	r2, #192	@ 0xc0
 8003b10:	2100      	movs	r1, #0
 8003b12:	4668      	mov	r0, sp
 8003b14:	f00a fd2e 	bl	800e574 <memset>
  if(hrtc->Instance==RTC)
 8003b18:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <HAL_RTC_MspInit+0x50>)
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RTC_MspInit+0x1c>

    __HAL_RCC_RTC_ENABLE();

  }

}
 8003b20:	b030      	add	sp, #192	@ 0xc0
 8003b22:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b24:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8003b50 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b2c:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b2e:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b32:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b34:	f004 fc6a 	bl	800840c <HAL_RCCEx_PeriphCLKConfig>
 8003b38:	b930      	cbnz	r0, 8003b48 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8003b3a:	4a08      	ldr	r2, [pc, #32]	@ (8003b5c <HAL_RTC_MspInit+0x54>)
 8003b3c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b42:	6713      	str	r3, [r2, #112]	@ 0x70
}
 8003b44:	b030      	add	sp, #192	@ 0xc0
 8003b46:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003b48:	f7ff f82e 	bl	8002ba8 <Error_Handler>
 8003b4c:	e7f5      	b.n	8003b3a <HAL_RTC_MspInit+0x32>
 8003b4e:	bf00      	nop
 8003b50:	00400000 	.word	0x00400000
 8003b54:	00000000 	.word	0x00000000
 8003b58:	58004000 	.word	0x58004000
 8003b5c:	58024400 	.word	0x58024400

08003b60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b60:	e7fe      	b.n	8003b60 <NMI_Handler>
 8003b62:	bf00      	nop

08003b64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b64:	e7fe      	b.n	8003b64 <HardFault_Handler>
 8003b66:	bf00      	nop

08003b68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <MemManage_Handler>
 8003b6a:	bf00      	nop

08003b6c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <BusFault_Handler>
 8003b6e:	bf00      	nop

08003b70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <UsageFault_Handler>
 8003b72:	bf00      	nop

08003b74 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop

08003b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop

08003b7c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b80:	f000 b924 	b.w	8003dcc <HAL_IncTick>

08003b84 <JPEG_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8003b84:	4801      	ldr	r0, [pc, #4]	@ (8003b8c <JPEG_IRQHandler+0x8>)
 8003b86:	f003 baff 	b.w	8007188 <HAL_JPEG_IRQHandler>
 8003b8a:	bf00      	nop
 8003b8c:	24000148 	.word	0x24000148

08003b90 <MDMA_IRQHandler>:
}

void MDMA_IRQHandler()
{
 8003b90:	b510      	push	{r4, lr}
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8003b92:	4c04      	ldr	r4, [pc, #16]	@ (8003ba4 <MDMA_IRQHandler+0x14>)
 8003b94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003b96:	f003 fcb7 	bl	8007508 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003b9a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8003b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003ba0:	f003 bcb2 	b.w	8007508 <HAL_MDMA_IRQHandler>
 8003ba4:	24000148 	.word	0x24000148

08003ba8 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler()
{

	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003ba8:	4801      	ldr	r0, [pc, #4]	@ (8003bb0 <DMA1_Stream0_IRQHandler+0x8>)
 8003baa:	f001 ba81 	b.w	80050b0 <HAL_DMA_IRQHandler>
 8003bae:	bf00      	nop
 8003bb0:	240001a0 	.word	0x240001a0

08003bb4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003bb4:	4801      	ldr	r0, [pc, #4]	@ (8003bbc <SPI1_IRQHandler+0x8>)
 8003bb6:	f007 ba05 	b.w	800afc4 <HAL_SPI_IRQHandler>
 8003bba:	bf00      	nop
 8003bbc:	24000218 	.word	0x24000218

08003bc0 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f002 b8df 	b.w	8005d84 <HAL_GPIO_EXTI_IRQHandler>
 8003bc6:	bf00      	nop

08003bc8 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f002 b8db 	b.w	8005d84 <HAL_GPIO_EXTI_IRQHandler>
 8003bce:	bf00      	nop

08003bd0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 8003bd0:	2004      	movs	r0, #4
 8003bd2:	f002 b8d7 	b.w	8005d84 <HAL_GPIO_EXTI_IRQHandler>
 8003bd6:	bf00      	nop

08003bd8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bd8:	490d      	ldr	r1, [pc, #52]	@ (8003c10 <_sbrk+0x38>)
{
 8003bda:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c14 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003bde:	6808      	ldr	r0, [r1, #0]
{
 8003be0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003be2:	4c0d      	ldr	r4, [pc, #52]	@ (8003c18 <_sbrk+0x40>)
 8003be4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003be6:	b120      	cbz	r0, 8003bf2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003be8:	4403      	add	r3, r0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d807      	bhi.n	8003bfe <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003bee:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8003bf0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003bf2:	4c0a      	ldr	r4, [pc, #40]	@ (8003c1c <_sbrk+0x44>)
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003bf8:	4403      	add	r3, r0
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d9f7      	bls.n	8003bee <_sbrk+0x16>
    errno = ENOMEM;
 8003bfe:	f00a fcc1 	bl	800e584 <__errno>
 8003c02:	220c      	movs	r2, #12
 8003c04:	4603      	mov	r3, r0
    return (void *)-1;
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8003c0a:	601a      	str	r2, [r3, #0]
}
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	bf00      	nop
 8003c10:	240ac7c4 	.word	0x240ac7c4
 8003c14:	24100000 	.word	0x24100000
 8003c18:	00000800 	.word	0x00000800
 8003c1c:	240ac950 	.word	0x240ac950

08003c20 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c20:	4922      	ldr	r1, [pc, #136]	@ (8003cac <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c22:	4a23      	ldr	r2, [pc, #140]	@ (8003cb0 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c24:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8003c2c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d805      	bhi.n	8003c48 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f023 030f 	bic.w	r3, r3, #15
 8003c42:	f043 0303 	orr.w	r3, r3, #3
 8003c46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c48:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb4 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c4a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb8 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8003c4e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c50:	4817      	ldr	r0, [pc, #92]	@ (8003cb0 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8003c52:	f041 0101 	orr.w	r1, r1, #1
 8003c56:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003c58:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003c5a:	6819      	ldr	r1, [r3, #0]
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c60:	6803      	ldr	r3, [r0, #0]
 8003c62:	f013 0f0c 	tst.w	r3, #12
 8003c66:	d005      	beq.n	8003c74 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c68:	6803      	ldr	r3, [r0, #0]
 8003c6a:	f023 030f 	bic.w	r3, r3, #15
 8003c6e:	f043 0303 	orr.w	r3, r3, #3
 8003c72:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <SystemInit+0x94>)
 8003c76:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003c78:	4910      	ldr	r1, [pc, #64]	@ (8003cbc <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8003c7a:	4c11      	ldr	r4, [pc, #68]	@ (8003cc0 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003c7c:	4811      	ldr	r0, [pc, #68]	@ (8003cc4 <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 8003c7e:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8003c80:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8003c82:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003c84:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c86:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8003c8a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003c8c:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8003c90:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003c92:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8003c94:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8003c98:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c9a:	480b      	ldr	r0, [pc, #44]	@ (8003cc8 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8003c9c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003ca0:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8003ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ca4:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00
 8003cb0:	52002000 	.word	0x52002000
 8003cb4:	58024400 	.word	0x58024400
 8003cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003cbc:	01010280 	.word	0x01010280
 8003cc0:	02020200 	.word	0x02020200
 8003cc4:	01ff0000 	.word	0x01ff0000
 8003cc8:	52004000 	.word	0x52004000

08003ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cd0:	f7ff ffa6 	bl	8003c20 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cd4:	480c      	ldr	r0, [pc, #48]	@ (8003d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cd6:	490d      	ldr	r1, [pc, #52]	@ (8003d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cdc:	e002      	b.n	8003ce4 <LoopCopyDataInit>

08003cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ce2:	3304      	adds	r3, #4

08003ce4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce8:	d3f9      	bcc.n	8003cde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cea:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cec:	4c0a      	ldr	r4, [pc, #40]	@ (8003d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf0:	e001      	b.n	8003cf6 <LoopFillZerobss>

08003cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf4:	3204      	adds	r2, #4

08003cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf8:	d3fb      	bcc.n	8003cf2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003cfa:	f00a fc49 	bl	800e590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cfe:	f7fe fdd3 	bl	80028a8 <main>
  bx  lr
 8003d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d04:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003d08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003d0c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003d10:	0800f21c 	.word	0x0800f21c
  ldr r2, =_sbss
 8003d14:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003d18:	240ac94c 	.word	0x240ac94c

08003d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC_IRQHandler>
	...

08003d20 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d20:	4b0f      	ldr	r3, [pc, #60]	@ (8003d60 <HAL_InitTick+0x40>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b90b      	cbnz	r3, 8003d2a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003d26:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003d28:	4770      	bx	lr
{
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d32:	4a0c      	ldr	r2, [pc, #48]	@ (8003d64 <HAL_InitTick+0x44>)
 8003d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d38:	6810      	ldr	r0, [r2, #0]
 8003d3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d3e:	f000 f8e7 	bl	8003f10 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d42:	b908      	cbnz	r0, 8003d48 <HAL_InitTick+0x28>
 8003d44:	2c0f      	cmp	r4, #15
 8003d46:	d901      	bls.n	8003d4c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003d48:	2001      	movs	r0, #1
}
 8003d4a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	4621      	mov	r1, r4
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	f000 f880 	bl	8003e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d58:	4b03      	ldr	r3, [pc, #12]	@ (8003d68 <HAL_InitTick+0x48>)
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	601c      	str	r4, [r3, #0]
}
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	24000010 	.word	0x24000010
 8003d64:	2400000c 	.word	0x2400000c
 8003d68:	24000014 	.word	0x24000014

08003d6c <HAL_Init>:
{
 8003d6c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d6e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d70:	4c12      	ldr	r4, [pc, #72]	@ (8003dbc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d72:	f000 f85f 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d76:	f004 f825 	bl	8007dc4 <HAL_RCC_GetSysClockFreq>
 8003d7a:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <HAL_Init+0x54>)
 8003d7c:	4911      	ldr	r1, [pc, #68]	@ (8003dc4 <HAL_Init+0x58>)
 8003d7e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d80:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d82:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d86:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d8a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d8e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003d92:	490d      	ldr	r1, [pc, #52]	@ (8003dc8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d94:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d98:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d9a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003d9e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003da0:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003da2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003da4:	f7ff ffbc 	bl	8003d20 <HAL_InitTick>
 8003da8:	b110      	cbz	r0, 8003db0 <HAL_Init+0x44>
    return HAL_ERROR;
 8003daa:	2401      	movs	r4, #1
}
 8003dac:	4620      	mov	r0, r4
 8003dae:	bd10      	pop	{r4, pc}
 8003db0:	4604      	mov	r4, r0
  HAL_MspInit();
 8003db2:	f7ff fcf3 	bl	800379c <HAL_MspInit>
}
 8003db6:	4620      	mov	r0, r4
 8003db8:	bd10      	pop	{r4, pc}
 8003dba:	bf00      	nop
 8003dbc:	24000008 	.word	0x24000008
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	0800eebc 	.word	0x0800eebc
 8003dc8:	2400000c 	.word	0x2400000c

08003dcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003dcc:	4a03      	ldr	r2, [pc, #12]	@ (8003ddc <HAL_IncTick+0x10>)
 8003dce:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <HAL_IncTick+0x14>)
 8003dd0:	6811      	ldr	r1, [r2, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	440b      	add	r3, r1
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	240ac7c8 	.word	0x240ac7c8
 8003de0:	24000010 	.word	0x24000010

08003de4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003de4:	4b01      	ldr	r3, [pc, #4]	@ (8003dec <HAL_GetTick+0x8>)
 8003de6:	6818      	ldr	r0, [r3, #0]
}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	240ac7c8 	.word	0x240ac7c8

08003df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff fff6 	bl	8003de4 <HAL_GetTick>
 8003df8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dfa:	1c63      	adds	r3, r4, #1
 8003dfc:	d002      	beq.n	8003e04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfe:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <HAL_Delay+0x20>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e04:	f7ff ffee 	bl	8003de4 <HAL_GetTick>
 8003e08:	1b40      	subs	r0, r0, r5
 8003e0a:	42a0      	cmp	r0, r4
 8003e0c:	d3fa      	bcc.n	8003e04 <HAL_Delay+0x14>
  {
  }
}
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	24000010 	.word	0x24000010

08003e14 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003e14:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003e18:	6913      	ldr	r3, [r2, #16]
 8003e1a:	f023 0302 	bic.w	r3, r3, #2
 8003e1e:	6113      	str	r3, [r2, #16]
}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop

08003e24 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003e24:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003e28:	6913      	ldr	r3, [r2, #16]
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	6113      	str	r3, [r2, #16]
}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop

08003e34 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e34:	4906      	ldr	r1, [pc, #24]	@ (8003e50 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e36:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e3a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e3e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e40:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e44:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e48:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003e4a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003e4c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e4e:	4770      	bx	lr
 8003e50:	e000ed00 	.word	0xe000ed00
 8003e54:	05fa0000 	.word	0x05fa0000

08003e58 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <HAL_NVIC_SetPriority+0x6c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e60:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e62:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e66:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e6a:	f1be 0f04 	cmp.w	lr, #4
 8003e6e:	bf28      	it	cs
 8003e70:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e74:	f1bc 0f06 	cmp.w	ip, #6
 8003e78:	d91a      	bls.n	8003eb0 <HAL_NVIC_SetPriority+0x58>
 8003e7a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	fa03 f30c 	lsl.w	r3, r3, ip
 8003e86:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003e8e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	fa03 f30e 	lsl.w	r3, r3, lr
 8003e94:	ea21 0303 	bic.w	r3, r1, r3
 8003e98:	fa03 f30c 	lsl.w	r3, r3, ip
 8003e9c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003ea4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003ea6:	db06      	blt.n	8003eb6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea8:	4a07      	ldr	r2, [pc, #28]	@ (8003ec8 <HAL_NVIC_SetPriority+0x70>)
 8003eaa:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8003eb0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb2:	4694      	mov	ip, r2
 8003eb4:	e7e9      	b.n	8003e8a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb6:	f000 000f 	and.w	r0, r0, #15
 8003eba:	4a04      	ldr	r2, [pc, #16]	@ (8003ecc <HAL_NVIC_SetPriority+0x74>)
 8003ebc:	5413      	strb	r3, [r2, r0]
 8003ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00
 8003ec8:	e000e400 	.word	0xe000e400
 8003ecc:	e000ed14 	.word	0xe000ed14

08003ed0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	db07      	blt.n	8003ee4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f000 011f 	and.w	r1, r0, #31
 8003eda:	4a03      	ldr	r2, [pc, #12]	@ (8003ee8 <HAL_NVIC_EnableIRQ+0x18>)
 8003edc:	0940      	lsrs	r0, r0, #5
 8003ede:	408b      	lsls	r3, r1
 8003ee0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000e100 	.word	0xe000e100

08003eec <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003eec:	2800      	cmp	r0, #0
 8003eee:	db0c      	blt.n	8003f0a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef0:	0943      	lsrs	r3, r0, #5
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f000 001f 	and.w	r0, r0, #31
 8003ef8:	4904      	ldr	r1, [pc, #16]	@ (8003f0c <HAL_NVIC_DisableIRQ+0x20>)
 8003efa:	3320      	adds	r3, #32
 8003efc:	4082      	lsls	r2, r0
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f06:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003f0a:	4770      	bx	lr
 8003f0c:	e000e100 	.word	0xe000e100

08003f10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f10:	1e43      	subs	r3, r0, #1
 8003f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f16:	d301      	bcc.n	8003f1c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f18:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003f1a:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f20:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f22:	4905      	ldr	r1, [pc, #20]	@ (8003f38 <HAL_SYSTICK_Config+0x28>)
 8003f24:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f28:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f30:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f32:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	db08      	blt.n	8003f52 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f40:	0943      	lsrs	r3, r0, #5
 8003f42:	2201      	movs	r2, #1
 8003f44:	f000 001f 	and.w	r0, r0, #31
 8003f48:	4902      	ldr	r1, [pc, #8]	@ (8003f54 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8003f4a:	3360      	adds	r3, #96	@ 0x60
 8003f4c:	4082      	lsls	r2, r0
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8003f52:	4770      	bx	lr
 8003f54:	e000e100 	.word	0xe000e100

08003f58 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f58:	4936      	ldr	r1, [pc, #216]	@ (8004034 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8003f5a:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f5c:	6803      	ldr	r3, [r0, #0]
 8003f5e:	428b      	cmp	r3, r1
 8003f60:	d033      	beq.n	8003fca <DMA_CalcBaseAndBitshift+0x72>
 8003f62:	3118      	adds	r1, #24
 8003f64:	1a59      	subs	r1, r3, r1
 8003f66:	fab1 f181 	clz	r1, r1
 8003f6a:	0949      	lsrs	r1, r1, #5
 8003f6c:	bb69      	cbnz	r1, 8003fca <DMA_CalcBaseAndBitshift+0x72>
 8003f6e:	4832      	ldr	r0, [pc, #200]	@ (8004038 <DMA_CalcBaseAndBitshift+0xe0>)
 8003f70:	4283      	cmp	r3, r0
 8003f72:	d03e      	beq.n	8003ff2 <DMA_CalcBaseAndBitshift+0x9a>
 8003f74:	3018      	adds	r0, #24
 8003f76:	4283      	cmp	r3, r0
 8003f78:	d03e      	beq.n	8003ff8 <DMA_CalcBaseAndBitshift+0xa0>
 8003f7a:	3018      	adds	r0, #24
 8003f7c:	4283      	cmp	r3, r0
 8003f7e:	d034      	beq.n	8003fea <DMA_CalcBaseAndBitshift+0x92>
 8003f80:	3018      	adds	r0, #24
 8003f82:	4283      	cmp	r3, r0
 8003f84:	d03b      	beq.n	8003ffe <DMA_CalcBaseAndBitshift+0xa6>
 8003f86:	3018      	adds	r0, #24
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	d03e      	beq.n	800400a <DMA_CalcBaseAndBitshift+0xb2>
 8003f8c:	3018      	adds	r0, #24
 8003f8e:	4283      	cmp	r3, r0
 8003f90:	d02a      	beq.n	8003fe8 <DMA_CalcBaseAndBitshift+0x90>
 8003f92:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8003f96:	4283      	cmp	r3, r0
 8003f98:	d035      	beq.n	8004006 <DMA_CalcBaseAndBitshift+0xae>
 8003f9a:	4928      	ldr	r1, [pc, #160]	@ (800403c <DMA_CalcBaseAndBitshift+0xe4>)
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	d031      	beq.n	8004004 <DMA_CalcBaseAndBitshift+0xac>
 8003fa0:	3118      	adds	r1, #24
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d034      	beq.n	8004010 <DMA_CalcBaseAndBitshift+0xb8>
 8003fa6:	3118      	adds	r1, #24
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	d034      	beq.n	8004016 <DMA_CalcBaseAndBitshift+0xbe>
 8003fac:	3118      	adds	r1, #24
 8003fae:	428b      	cmp	r3, r1
 8003fb0:	d034      	beq.n	800401c <DMA_CalcBaseAndBitshift+0xc4>
 8003fb2:	3118      	adds	r1, #24
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	d034      	beq.n	8004022 <DMA_CalcBaseAndBitshift+0xca>
 8003fb8:	3118      	adds	r1, #24
 8003fba:	428b      	cmp	r3, r1
 8003fbc:	d034      	beq.n	8004028 <DMA_CalcBaseAndBitshift+0xd0>
 8003fbe:	3118      	adds	r1, #24
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	d034      	beq.n	800402e <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fc4:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8003fc8:	e011      	b.n	8003fee <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	491c      	ldr	r1, [pc, #112]	@ (8004040 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fce:	481d      	ldr	r0, [pc, #116]	@ (8004044 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fd0:	3b10      	subs	r3, #16
 8003fd2:	fba1 1303 	umull	r1, r3, r1, r3
{
 8003fd6:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fd8:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fda:	4c1b      	ldr	r4, [pc, #108]	@ (8004048 <DMA_CalcBaseAndBitshift+0xf0>)
 8003fdc:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8003fde:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fe2:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8003fe6:	4770      	bx	lr
 8003fe8:	2116      	movs	r1, #22
 8003fea:	4818      	ldr	r0, [pc, #96]	@ (800404c <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fec:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fee:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8003ff0:	4770      	bx	lr
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	4813      	ldr	r0, [pc, #76]	@ (8004044 <DMA_CalcBaseAndBitshift+0xec>)
 8003ff6:	e7f9      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8003ff8:	2116      	movs	r1, #22
 8003ffa:	4812      	ldr	r0, [pc, #72]	@ (8004044 <DMA_CalcBaseAndBitshift+0xec>)
 8003ffc:	e7f6      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8003ffe:	2106      	movs	r1, #6
 8004000:	4812      	ldr	r0, [pc, #72]	@ (800404c <DMA_CalcBaseAndBitshift+0xf4>)
 8004002:	e7f3      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8004004:	2106      	movs	r1, #6
 8004006:	4812      	ldr	r0, [pc, #72]	@ (8004050 <DMA_CalcBaseAndBitshift+0xf8>)
 8004008:	e7f0      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 800400a:	2110      	movs	r1, #16
 800400c:	480f      	ldr	r0, [pc, #60]	@ (800404c <DMA_CalcBaseAndBitshift+0xf4>)
 800400e:	e7ed      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8004010:	2110      	movs	r1, #16
 8004012:	480f      	ldr	r0, [pc, #60]	@ (8004050 <DMA_CalcBaseAndBitshift+0xf8>)
 8004014:	e7ea      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8004016:	2116      	movs	r1, #22
 8004018:	480d      	ldr	r0, [pc, #52]	@ (8004050 <DMA_CalcBaseAndBitshift+0xf8>)
 800401a:	e7e7      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 800401c:	2100      	movs	r1, #0
 800401e:	480d      	ldr	r0, [pc, #52]	@ (8004054 <DMA_CalcBaseAndBitshift+0xfc>)
 8004020:	e7e4      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8004022:	2106      	movs	r1, #6
 8004024:	480b      	ldr	r0, [pc, #44]	@ (8004054 <DMA_CalcBaseAndBitshift+0xfc>)
 8004026:	e7e1      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8004028:	2110      	movs	r1, #16
 800402a:	480a      	ldr	r0, [pc, #40]	@ (8004054 <DMA_CalcBaseAndBitshift+0xfc>)
 800402c:	e7de      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 800402e:	2116      	movs	r1, #22
 8004030:	4808      	ldr	r0, [pc, #32]	@ (8004054 <DMA_CalcBaseAndBitshift+0xfc>)
 8004032:	e7db      	b.n	8003fec <DMA_CalcBaseAndBitshift+0x94>
 8004034:	40020010 	.word	0x40020010
 8004038:	40020040 	.word	0x40020040
 800403c:	40020428 	.word	0x40020428
 8004040:	aaaaaaab 	.word	0xaaaaaaab
 8004044:	40020000 	.word	0x40020000
 8004048:	0800eecc 	.word	0x0800eecc
 800404c:	40020004 	.word	0x40020004
 8004050:	40020400 	.word	0x40020400
 8004054:	40020404 	.word	0x40020404

08004058 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004058:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800405a:	4b27      	ldr	r3, [pc, #156]	@ (80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800405c:	4927      	ldr	r1, [pc, #156]	@ (80040fc <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800405e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004060:	4d27      	ldr	r5, [pc, #156]	@ (8004100 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004062:	4c28      	ldr	r4, [pc, #160]	@ (8004104 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004064:	42aa      	cmp	r2, r5
 8004066:	bf18      	it	ne
 8004068:	429a      	cmpne	r2, r3
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	428a      	cmp	r2, r1
 8004072:	bf08      	it	eq
 8004074:	f043 0301 	orreq.w	r3, r3, #1
 8004078:	3128      	adds	r1, #40	@ 0x28
 800407a:	42a2      	cmp	r2, r4
 800407c:	bf08      	it	eq
 800407e:	f043 0301 	orreq.w	r3, r3, #1
 8004082:	3428      	adds	r4, #40	@ 0x28
 8004084:	428a      	cmp	r2, r1
 8004086:	bf08      	it	eq
 8004088:	f043 0301 	orreq.w	r3, r3, #1
 800408c:	3128      	adds	r1, #40	@ 0x28
 800408e:	42a2      	cmp	r2, r4
 8004090:	bf08      	it	eq
 8004092:	f043 0301 	orreq.w	r3, r3, #1
 8004096:	428a      	cmp	r2, r1
 8004098:	bf08      	it	eq
 800409a:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800409e:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040a0:	b913      	cbnz	r3, 80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 80040a2:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d112      	bne.n	80040ce <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80040a8:	f1a1 0308 	sub.w	r3, r1, #8
 80040ac:	4917      	ldr	r1, [pc, #92]	@ (800410c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040ae:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80040b0:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040b4:	2101      	movs	r1, #1
 80040b6:	4c17      	ldr	r4, [pc, #92]	@ (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040b8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040bc:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040c0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040c2:	4099      	lsls	r1, r3
 80040c4:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040c6:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040ca:	bc30      	pop	{r4, r5}
 80040cc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040ce:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040d2:	4911      	ldr	r1, [pc, #68]	@ (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040d4:	4c11      	ldr	r4, [pc, #68]	@ (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040d6:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040d8:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040dc:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040de:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040e2:	d800      	bhi.n	80040e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80040e4:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040e8:	f003 041f 	and.w	r4, r3, #31
 80040ec:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040ee:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040f0:	40a1      	lsls	r1, r4
 80040f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004124 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040f4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040f6:	e7e5      	b.n	80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80040f8:	58025408 	.word	0x58025408
 80040fc:	58025430 	.word	0x58025430
 8004100:	5802541c 	.word	0x5802541c
 8004104:	58025444 	.word	0x58025444
 8004108:	58025494 	.word	0x58025494
 800410c:	cccccccd 	.word	0xcccccccd
 8004110:	16009600 	.word	0x16009600
 8004114:	58025880 	.word	0x58025880
 8004118:	bffdfbf0 	.word	0xbffdfbf0
 800411c:	aaaaaaab 	.word	0xaaaaaaab
 8004120:	10008200 	.word	0x10008200
 8004124:	40020880 	.word	0x40020880

08004128 <HAL_DMA_Init>:
{
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	4605      	mov	r5, r0
 800412e:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8004130:	f7ff fe58 	bl	8003de4 <HAL_GetTick>
  if(hdma == NULL)
 8004134:	2d00      	cmp	r5, #0
 8004136:	f000 8237 	beq.w	80045a8 <HAL_DMA_Init+0x480>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800413a:	4e8e      	ldr	r6, [pc, #568]	@ (8004374 <HAL_DMA_Init+0x24c>)
 800413c:	4607      	mov	r7, r0
 800413e:	682c      	ldr	r4, [r5, #0]
 8004140:	4b8d      	ldr	r3, [pc, #564]	@ (8004378 <HAL_DMA_Init+0x250>)
 8004142:	429c      	cmp	r4, r3
 8004144:	bf18      	it	ne
 8004146:	42b4      	cmpne	r4, r6
 8004148:	bf0c      	ite	eq
 800414a:	2601      	moveq	r6, #1
 800414c:	2600      	movne	r6, #0
 800414e:	f040 8129 	bne.w	80043a4 <HAL_DMA_Init+0x27c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004152:	2302      	movs	r3, #2
 8004154:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004158:	2300      	movs	r3, #0
 800415a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	e006      	b.n	8004176 <HAL_DMA_Init+0x4e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004168:	f7ff fe3c 	bl	8003de4 <HAL_GetTick>
 800416c:	1bc0      	subs	r0, r0, r7
 800416e:	2805      	cmp	r0, #5
 8004170:	f200 8215 	bhi.w	800459e <HAL_DMA_Init+0x476>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004174:	682c      	ldr	r4, [r5, #0]
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	07de      	lsls	r6, r3, #31
 800417a:	d4f5      	bmi.n	8004168 <HAL_DMA_Init+0x40>
    registerValue |=  hdma->Init.Direction           |
 800417c:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004180:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8004182:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004184:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004186:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004188:	430b      	orrs	r3, r1
 800418a:	6969      	ldr	r1, [r5, #20]
 800418c:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418e:	69e9      	ldr	r1, [r5, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004194:	4979      	ldr	r1, [pc, #484]	@ (800437c <HAL_DMA_Init+0x254>)
 8004196:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004198:	6a28      	ldr	r0, [r5, #32]
 800419a:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 800419c:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800419e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80041a0:	2904      	cmp	r1, #4
 80041a2:	d103      	bne.n	80041ac <HAL_DMA_Init+0x84>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041a4:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 80041a8:	4330      	orrs	r0, r6
 80041aa:	4303      	orrs	r3, r0
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041ac:	6868      	ldr	r0, [r5, #4]
 80041ae:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 80041b2:	2e1f      	cmp	r6, #31
 80041b4:	f240 81fc 	bls.w	80045b0 <HAL_DMA_Init+0x488>
 80041b8:	f1a0 064f 	sub.w	r6, r0, #79	@ 0x4f
 80041bc:	2e03      	cmp	r6, #3
 80041be:	f200 820e 	bhi.w	80045de <HAL_DMA_Init+0x4b6>
        registerValue |= DMA_SxCR_TRBUFF;
 80041c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041c6:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041c8:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80041ca:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041cc:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80041d0:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041d4:	d10d      	bne.n	80041f2 <HAL_DMA_Init+0xca>
      registerValue |= hdma->Init.FIFOThreshold;
 80041d6:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041d8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80041da:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041dc:	b148      	cbz	r0, 80041f2 <HAL_DMA_Init+0xca>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041de:	2a00      	cmp	r2, #0
 80041e0:	f040 81ec 	bne.w	80045bc <HAL_DMA_Init+0x494>
    switch (hdma->Init.FIFOThreshold)
 80041e4:	2901      	cmp	r1, #1
 80041e6:	f000 820d 	beq.w	8004604 <HAL_DMA_Init+0x4dc>
 80041ea:	f031 0202 	bics.w	r2, r1, #2
 80041ee:	f000 81ed 	beq.w	80045cc <HAL_DMA_Init+0x4a4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80041f2:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041f4:	4628      	mov	r0, r5
 80041f6:	f7ff feaf 	bl	8003f58 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041fa:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80041fc:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041fe:	4e5e      	ldr	r6, [pc, #376]	@ (8004378 <HAL_DMA_Init+0x250>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004200:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004204:	4f5e      	ldr	r7, [pc, #376]	@ (8004380 <HAL_DMA_Init+0x258>)
 8004206:	495f      	ldr	r1, [pc, #380]	@ (8004384 <HAL_DMA_Init+0x25c>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004208:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800420a:	4a5f      	ldr	r2, [pc, #380]	@ (8004388 <HAL_DMA_Init+0x260>)
 800420c:	1a61      	subs	r1, r4, r1
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800420e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004210:	1aa2      	subs	r2, r4, r2
 8004212:	4b58      	ldr	r3, [pc, #352]	@ (8004374 <HAL_DMA_Init+0x24c>)
 8004214:	fab1 f181 	clz	r1, r1
 8004218:	485c      	ldr	r0, [pc, #368]	@ (800438c <HAL_DMA_Init+0x264>)
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	429c      	cmp	r4, r3
 8004220:	bf18      	it	ne
 8004222:	42b4      	cmpne	r4, r6
 8004224:	eba4 0307 	sub.w	r3, r4, r7
 8004228:	eba4 0900 	sub.w	r9, r4, r0
 800422c:	f100 0014 	add.w	r0, r0, #20
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	bf08      	it	eq
 8004236:	2601      	moveq	r6, #1
 8004238:	eba4 0a00 	sub.w	sl, r4, r0
 800423c:	fab9 f989 	clz	r9, r9
 8004240:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004244:	bf18      	it	ne
 8004246:	2600      	movne	r6, #0
 8004248:	faba fa8a 	clz	sl, sl
 800424c:	0952      	lsrs	r2, r2, #5
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	0949      	lsrs	r1, r1, #5
 8004252:	4b4f      	ldr	r3, [pc, #316]	@ (8004390 <HAL_DMA_Init+0x268>)
 8004254:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004258:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800425c:	eba4 0b03 	sub.w	fp, r4, r3
 8004260:	3328      	adds	r3, #40	@ 0x28
 8004262:	eba4 0803 	sub.w	r8, r4, r3
 8004266:	3328      	adds	r3, #40	@ 0x28
 8004268:	fabb fb8b 	clz	fp, fp
 800426c:	1ae3      	subs	r3, r4, r3
 800426e:	fab8 f888 	clz	r8, r8
 8004272:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	430b      	orrs	r3, r1
 8004282:	ea4b 0b03 	orr.w	fp, fp, r3
 8004286:	9b00      	ldr	r3, [sp, #0]
 8004288:	ea4a 0a0b 	orr.w	sl, sl, fp
 800428c:	ea49 090a 	orr.w	r9, r9, sl
 8004290:	ea48 0809 	orr.w	r8, r8, r9
 8004294:	ea43 0708 	orr.w	r7, r3, r8
 8004298:	4317      	orrs	r7, r2
 800429a:	4a3e      	ldr	r2, [pc, #248]	@ (8004394 <HAL_DMA_Init+0x26c>)
 800429c:	ea47 0306 	orr.w	r3, r7, r6
 80042a0:	4294      	cmp	r4, r2
 80042a2:	bf08      	it	eq
 80042a4:	f043 0301 	orreq.w	r3, r3, #1
 80042a8:	3218      	adds	r2, #24
 80042aa:	4294      	cmp	r4, r2
 80042ac:	bf08      	it	eq
 80042ae:	f043 0301 	orreq.w	r3, r3, #1
 80042b2:	3218      	adds	r2, #24
 80042b4:	4294      	cmp	r4, r2
 80042b6:	bf08      	it	eq
 80042b8:	f043 0301 	orreq.w	r3, r3, #1
 80042bc:	3218      	adds	r2, #24
 80042be:	4294      	cmp	r4, r2
 80042c0:	bf08      	it	eq
 80042c2:	f043 0301 	orreq.w	r3, r3, #1
 80042c6:	3218      	adds	r2, #24
 80042c8:	4294      	cmp	r4, r2
 80042ca:	bf08      	it	eq
 80042cc:	f043 0301 	orreq.w	r3, r3, #1
 80042d0:	3218      	adds	r2, #24
 80042d2:	4294      	cmp	r4, r2
 80042d4:	bf08      	it	eq
 80042d6:	f043 0301 	orreq.w	r3, r3, #1
 80042da:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80042de:	4294      	cmp	r4, r2
 80042e0:	bf08      	it	eq
 80042e2:	f043 0301 	orreq.w	r3, r3, #1
 80042e6:	3218      	adds	r2, #24
 80042e8:	4294      	cmp	r4, r2
 80042ea:	bf08      	it	eq
 80042ec:	f043 0301 	orreq.w	r3, r3, #1
 80042f0:	3218      	adds	r2, #24
 80042f2:	4294      	cmp	r4, r2
 80042f4:	bf08      	it	eq
 80042f6:	f043 0301 	orreq.w	r3, r3, #1
 80042fa:	3218      	adds	r2, #24
 80042fc:	4294      	cmp	r4, r2
 80042fe:	bf08      	it	eq
 8004300:	f043 0301 	orreq.w	r3, r3, #1
 8004304:	3218      	adds	r2, #24
 8004306:	4294      	cmp	r4, r2
 8004308:	bf08      	it	eq
 800430a:	f043 0301 	orreq.w	r3, r3, #1
 800430e:	3218      	adds	r2, #24
 8004310:	4294      	cmp	r4, r2
 8004312:	bf08      	it	eq
 8004314:	f043 0301 	orreq.w	r3, r3, #1
 8004318:	3218      	adds	r2, #24
 800431a:	4294      	cmp	r4, r2
 800431c:	bf08      	it	eq
 800431e:	f043 0301 	orreq.w	r3, r3, #1
 8004322:	b91b      	cbnz	r3, 800432c <HAL_DMA_Init+0x204>
 8004324:	4b1c      	ldr	r3, [pc, #112]	@ (8004398 <HAL_DMA_Init+0x270>)
 8004326:	429c      	cmp	r4, r3
 8004328:	f040 8130 	bne.w	800458c <HAL_DMA_Init+0x464>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800432c:	4628      	mov	r0, r5
 800432e:	f7ff fe93 	bl	8004058 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004332:	68ab      	ldr	r3, [r5, #8]
 8004334:	2b80      	cmp	r3, #128	@ 0x80
 8004336:	f000 811e 	beq.w	8004576 <HAL_DMA_Init+0x44e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800433a:	686b      	ldr	r3, [r5, #4]
 800433c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800433e:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004340:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004342:	600a      	str	r2, [r1, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004344:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004346:	e9d5 1019 	ldrd	r1, r0, [r5, #100]	@ 0x64
 800434a:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800434c:	f200 811a 	bhi.w	8004584 <HAL_DMA_Init+0x45c>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004350:	1e50      	subs	r0, r2, #1
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004352:	2f00      	cmp	r7, #0
 8004354:	f000 815b 	beq.w	800460e <HAL_DMA_Init+0x4e6>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004358:	4b10      	ldr	r3, [pc, #64]	@ (800439c <HAL_DMA_Init+0x274>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800435a:	4911      	ldr	r1, [pc, #68]	@ (80043a0 <HAL_DMA_Init+0x278>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800435c:	4413      	add	r3, r2
 800435e:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004360:	2301      	movs	r3, #1
 8004362:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004364:	2000      	movs	r0, #0
 8004366:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800436a:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800436c:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800436e:	604b      	str	r3, [r1, #4]
 8004370:	e10c      	b.n	800458c <HAL_DMA_Init+0x464>
 8004372:	bf00      	nop
 8004374:	40020010 	.word	0x40020010
 8004378:	40020028 	.word	0x40020028
 800437c:	fe10803f 	.word	0xfe10803f
 8004380:	58025494 	.word	0x58025494
 8004384:	58025444 	.word	0x58025444
 8004388:	5802541c 	.word	0x5802541c
 800438c:	5802546c 	.word	0x5802546c
 8004390:	58025408 	.word	0x58025408
 8004394:	40020040 	.word	0x40020040
 8004398:	400204b8 	.word	0x400204b8
 800439c:	1600963f 	.word	0x1600963f
 80043a0:	58025940 	.word	0x58025940
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a4:	3318      	adds	r3, #24
 80043a6:	429c      	cmp	r4, r3
 80043a8:	f43f aed3 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043ac:	3318      	adds	r3, #24
 80043ae:	429c      	cmp	r4, r3
 80043b0:	f43f aecf 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043b4:	3318      	adds	r3, #24
 80043b6:	429c      	cmp	r4, r3
 80043b8:	f43f aecb 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043bc:	3318      	adds	r3, #24
 80043be:	429c      	cmp	r4, r3
 80043c0:	f43f aec7 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043c4:	3318      	adds	r3, #24
 80043c6:	429c      	cmp	r4, r3
 80043c8:	f43f aec3 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043cc:	3318      	adds	r3, #24
 80043ce:	429c      	cmp	r4, r3
 80043d0:	f43f aebf 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043d4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80043d8:	429c      	cmp	r4, r3
 80043da:	f43f aeba 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043de:	3318      	adds	r3, #24
 80043e0:	429c      	cmp	r4, r3
 80043e2:	f43f aeb6 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043e6:	3318      	adds	r3, #24
 80043e8:	429c      	cmp	r4, r3
 80043ea:	f43f aeb2 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043ee:	3318      	adds	r3, #24
 80043f0:	429c      	cmp	r4, r3
 80043f2:	f43f aeae 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043f6:	3318      	adds	r3, #24
 80043f8:	429c      	cmp	r4, r3
 80043fa:	f43f aeaa 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 80043fe:	3318      	adds	r3, #24
 8004400:	429c      	cmp	r4, r3
 8004402:	f43f aea6 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 8004406:	3318      	adds	r3, #24
 8004408:	429c      	cmp	r4, r3
 800440a:	f43f aea2 	beq.w	8004152 <HAL_DMA_Init+0x2a>
 800440e:	3318      	adds	r3, #24
 8004410:	429c      	cmp	r4, r3
 8004412:	f43f ae9e 	beq.w	8004152 <HAL_DMA_Init+0x2a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004416:	4b84      	ldr	r3, [pc, #528]	@ (8004628 <HAL_DMA_Init+0x500>)
 8004418:	4884      	ldr	r0, [pc, #528]	@ (800462c <HAL_DMA_Init+0x504>)
 800441a:	eba4 0b03 	sub.w	fp, r4, r3
 800441e:	4b84      	ldr	r3, [pc, #528]	@ (8004630 <HAL_DMA_Init+0x508>)
 8004420:	4a84      	ldr	r2, [pc, #528]	@ (8004634 <HAL_DMA_Init+0x50c>)
 8004422:	429c      	cmp	r4, r3
 8004424:	bf18      	it	ne
 8004426:	4284      	cmpne	r4, r0
 8004428:	f103 0314 	add.w	r3, r3, #20
 800442c:	fabb fb8b 	clz	fp, fp
 8004430:	eba4 0202 	sub.w	r2, r4, r2
 8004434:	bf0c      	ite	eq
 8004436:	2001      	moveq	r0, #1
 8004438:	2000      	movne	r0, #0
 800443a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800443e:	fab2 f282 	clz	r2, r2
 8004442:	429c      	cmp	r4, r3
 8004444:	bf08      	it	eq
 8004446:	f040 0001 	orreq.w	r0, r0, #1
 800444a:	3314      	adds	r3, #20
 800444c:	497a      	ldr	r1, [pc, #488]	@ (8004638 <HAL_DMA_Init+0x510>)
 800444e:	0952      	lsrs	r2, r2, #5
 8004450:	429c      	cmp	r4, r3
 8004452:	bf08      	it	eq
 8004454:	f040 0001 	orreq.w	r0, r0, #1
 8004458:	3314      	adds	r3, #20
 800445a:	1a61      	subs	r1, r4, r1
 800445c:	4f77      	ldr	r7, [pc, #476]	@ (800463c <HAL_DMA_Init+0x514>)
 800445e:	429c      	cmp	r4, r3
 8004460:	bf08      	it	eq
 8004462:	f040 0001 	orreq.w	r0, r0, #1
 8004466:	3314      	adds	r3, #20
 8004468:	fab1 f181 	clz	r1, r1
 800446c:	eba4 0907 	sub.w	r9, r4, r7
 8004470:	429c      	cmp	r4, r3
 8004472:	bf08      	it	eq
 8004474:	f040 0001 	orreq.w	r0, r0, #1
 8004478:	3314      	adds	r3, #20
 800447a:	3714      	adds	r7, #20
 800447c:	0949      	lsrs	r1, r1, #5
 800447e:	429c      	cmp	r4, r3
 8004480:	bf08      	it	eq
 8004482:	f040 0001 	orreq.w	r0, r0, #1
 8004486:	3314      	adds	r3, #20
 8004488:	eba4 0a07 	sub.w	sl, r4, r7
 800448c:	fab9 f989 	clz	r9, r9
 8004490:	429c      	cmp	r4, r3
 8004492:	bf08      	it	eq
 8004494:	f040 0001 	orreq.w	r0, r0, #1
 8004498:	4b69      	ldr	r3, [pc, #420]	@ (8004640 <HAL_DMA_Init+0x518>)
 800449a:	3714      	adds	r7, #20
 800449c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80044a0:	eba4 0803 	sub.w	r8, r4, r3
 80044a4:	ea4b 0000 	orr.w	r0, fp, r0
 80044a8:	3328      	adds	r3, #40	@ 0x28
 80044aa:	faba fa8a 	clz	sl, sl
 80044ae:	fab8 f888 	clz	r8, r8
 80044b2:	4310      	orrs	r0, r2
 80044b4:	1ae3      	subs	r3, r4, r3
 80044b6:	1be7      	subs	r7, r4, r7
 80044b8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80044c4:	ea48 0000 	orr.w	r0, r8, r0
 80044c8:	fab7 f787 	clz	r7, r7
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	4308      	orrs	r0, r1
 80044d0:	097f      	lsrs	r7, r7, #5
 80044d2:	4318      	orrs	r0, r3
 80044d4:	9700      	str	r7, [sp, #0]
 80044d6:	ea49 0000 	orr.w	r0, r9, r0
 80044da:	ea5a 0000 	orrs.w	r0, sl, r0
 80044de:	d102      	bne.n	80044e6 <HAL_DMA_Init+0x3be>
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	f000 809b 	beq.w	800461c <HAL_DMA_Init+0x4f4>
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e6:	2002      	movs	r0, #2
 80044e8:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044f2:	4854      	ldr	r0, [pc, #336]	@ (8004644 <HAL_DMA_Init+0x51c>)
 80044f4:	4607      	mov	r7, r0
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044f6:	6820      	ldr	r0, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044f8:	4038      	ands	r0, r7
 80044fa:	4607      	mov	r7, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044fc:	68a8      	ldr	r0, [r5, #8]
 80044fe:	2840      	cmp	r0, #64	@ 0x40
 8004500:	f000 808a 	beq.w	8004618 <HAL_DMA_Init+0x4f0>
 8004504:	f1a0 0080 	sub.w	r0, r0, #128	@ 0x80
 8004508:	fab0 f080 	clz	r0, r0
 800450c:	0940      	lsrs	r0, r0, #5
 800450e:	0380      	lsls	r0, r0, #14
 8004510:	9301      	str	r3, [sp, #4]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004512:	692b      	ldr	r3, [r5, #16]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004514:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8004658 <HAL_DMA_Init+0x530>
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004518:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800451c:	68eb      	ldr	r3, [r5, #12]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800451e:	44a6      	add	lr, r4
 8004520:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004524:	696b      	ldr	r3, [r5, #20]
 8004526:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 800452a:	69ab      	ldr	r3, [r5, #24]
 800452c:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004530:	69eb      	ldr	r3, [r5, #28]
 8004532:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004536:	6a2b      	ldr	r3, [r5, #32]
 8004538:	ea4c 1c13 	orr.w	ip, ip, r3, lsr #4
 800453c:	ea4c 0c07 	orr.w	ip, ip, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004540:	ea40 000c 	orr.w	r0, r0, ip
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004544:	6020      	str	r0, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004546:	4840      	ldr	r0, [pc, #256]	@ (8004648 <HAL_DMA_Init+0x520>)
 8004548:	fba0 c00e 	umull	ip, r0, r0, lr
 800454c:	0900      	lsrs	r0, r0, #4
 800454e:	0080      	lsls	r0, r0, #2
 8004550:	65e8      	str	r0, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004552:	4628      	mov	r0, r5
 8004554:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004558:	f7ff fcfe 	bl	8003f58 <DMA_CalcBaseAndBitshift>
 800455c:	4684      	mov	ip, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800455e:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 8004560:	9b01      	ldr	r3, [sp, #4]
 8004562:	f000 0e1f 	and.w	lr, r0, #31
 8004566:	2001      	movs	r0, #1
 8004568:	fa00 f00e 	lsl.w	r0, r0, lr
 800456c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004570:	f8cc 0004 	str.w	r0, [ip, #4]
 8004574:	e684      	b.n	8004280 <HAL_DMA_Init+0x158>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004576:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004578:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800457a:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800457e:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004580:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004582:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800458a:	676b      	str	r3, [r5, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800458c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800458e:	2201      	movs	r2, #1
  return HAL_OK;
 8004590:	4618      	mov	r0, r3
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004592:	656b      	str	r3, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004594:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
}
 8004598:	b005      	add	sp, #20
 800459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800459e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80045a0:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045a2:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80045a4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80045a8:	2001      	movs	r0, #1
}
 80045aa:	b005      	add	sp, #20
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045b0:	4826      	ldr	r0, [pc, #152]	@ (800464c <HAL_DMA_Init+0x524>)
 80045b2:	40f0      	lsrs	r0, r6
 80045b4:	07c0      	lsls	r0, r0, #31
 80045b6:	f53f ae04 	bmi.w	80041c2 <HAL_DMA_Init+0x9a>
 80045ba:	e604      	b.n	80041c6 <HAL_DMA_Init+0x9e>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045bc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80045c0:	d012      	beq.n	80045e8 <HAL_DMA_Init+0x4c0>
    switch (hdma->Init.FIFOThreshold)
 80045c2:	2902      	cmp	r1, #2
 80045c4:	d905      	bls.n	80045d2 <HAL_DMA_Init+0x4aa>
 80045c6:	2903      	cmp	r1, #3
 80045c8:	f47f ae13 	bne.w	80041f2 <HAL_DMA_Init+0xca>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045cc:	01c2      	lsls	r2, r0, #7
 80045ce:	f57f ae10 	bpl.w	80041f2 <HAL_DMA_Init+0xca>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d2:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 80045d4:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d6:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80045d8:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 80045dc:	e7e4      	b.n	80045a8 <HAL_DMA_Init+0x480>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045de:	3874      	subs	r0, #116	@ 0x74
 80045e0:	2803      	cmp	r0, #3
 80045e2:	f67f adee 	bls.w	80041c2 <HAL_DMA_Init+0x9a>
 80045e6:	e5ee      	b.n	80041c6 <HAL_DMA_Init+0x9e>
    switch (hdma->Init.FIFOThreshold)
 80045e8:	2903      	cmp	r1, #3
 80045ea:	f63f ae02 	bhi.w	80041f2 <HAL_DMA_Init+0xca>
 80045ee:	a201      	add	r2, pc, #4	@ (adr r2, 80045f4 <HAL_DMA_Init+0x4cc>)
 80045f0:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80045f4:	080045d3 	.word	0x080045d3
 80045f8:	080045cd 	.word	0x080045cd
 80045fc:	080045d3 	.word	0x080045d3
 8004600:	08004605 	.word	0x08004605
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004604:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8004608:	f47f adf3 	bne.w	80041f2 <HAL_DMA_Init+0xca>
 800460c:	e7e1      	b.n	80045d2 <HAL_DMA_Init+0x4aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_DMA_Init+0x528>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004610:	4910      	ldr	r1, [pc, #64]	@ (8004654 <HAL_DMA_Init+0x52c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004612:	4413      	add	r3, r2
 8004614:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004616:	e6a3      	b.n	8004360 <HAL_DMA_Init+0x238>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004618:	2010      	movs	r0, #16
 800461a:	e779      	b.n	8004510 <HAL_DMA_Init+0x3e8>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800461c:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800461e:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004620:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004622:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004626:	e7bf      	b.n	80045a8 <HAL_DMA_Init+0x480>
 8004628:	58025408 	.word	0x58025408
 800462c:	48022c08 	.word	0x48022c08
 8004630:	48022c1c 	.word	0x48022c1c
 8004634:	5802541c 	.word	0x5802541c
 8004638:	58025444 	.word	0x58025444
 800463c:	5802546c 	.word	0x5802546c
 8004640:	58025430 	.word	0x58025430
 8004644:	fffe000f 	.word	0xfffe000f
 8004648:	cccccccd 	.word	0xcccccccd
 800464c:	c3c0003f 	.word	0xc3c0003f
 8004650:	1000823f 	.word	0x1000823f
 8004654:	40020940 	.word	0x40020940
 8004658:	a7fdabf8 	.word	0xa7fdabf8

0800465c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800465c:	2800      	cmp	r0, #0
 800465e:	f000 8267 	beq.w	8004b30 <HAL_DMA_Start_IT+0x4d4>
{
 8004662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hdma);
 8004666:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
{
 800466a:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 800466c:	2c01      	cmp	r4, #1
 800466e:	f000 825b 	beq.w	8004b28 <HAL_DMA_Start_IT+0x4cc>
 8004672:	2401      	movs	r4, #1
 8004674:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004678:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 800467c:	2c01      	cmp	r4, #1
 800467e:	d009      	beq.n	8004694 <HAL_DMA_Start_IT+0x38>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004680:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8004684:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004686:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004688:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
}
 800468e:	b003      	add	sp, #12
 8004690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004694:	2402      	movs	r4, #2
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004696:	4e87      	ldr	r6, [pc, #540]	@ (80048b4 <HAL_DMA_Start_IT+0x258>)
 8004698:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 80048bc <HAL_DMA_Start_IT+0x260>
    hdma->State = HAL_DMA_STATE_BUSY;
 800469c:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a0:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 80046a2:	4d85      	ldr	r5, [pc, #532]	@ (80048b8 <HAL_DMA_Start_IT+0x25c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a4:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80046a6:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046a8:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 80048c0 <HAL_DMA_Start_IT+0x264>
 80046ac:	4544      	cmp	r4, r8
 80046ae:	bf18      	it	ne
 80046b0:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 80046b2:	f8df c220 	ldr.w	ip, [pc, #544]	@ 80048d4 <HAL_DMA_Start_IT+0x278>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b6:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 80046b8:	bf0c      	ite	eq
 80046ba:	f04f 0b01 	moveq.w	fp, #1
 80046be:	f04f 0b00 	movne.w	fp, #0
 80046c2:	9601      	str	r6, [sp, #4]
 80046c4:	454c      	cmp	r4, r9
 80046c6:	bf14      	ite	ne
 80046c8:	46de      	movne	lr, fp
 80046ca:	f04b 0e01 	orreq.w	lr, fp, #1
    __HAL_DMA_DISABLE(hdma);
 80046ce:	42ac      	cmp	r4, r5
 80046d0:	bf18      	it	ne
 80046d2:	4564      	cmpne	r4, ip
 80046d4:	bf0c      	ite	eq
 80046d6:	2501      	moveq	r5, #1
 80046d8:	2500      	movne	r5, #0
 80046da:	f040 80fd 	bne.w	80048d8 <HAL_DMA_Start_IT+0x27c>
 80046de:	f8d4 c000 	ldr.w	ip, [r4]
 80046e2:	f02c 0c01 	bic.w	ip, ip, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046e6:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 80046ea:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 80046ee:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f2:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80046f4:	f1bc 0f00 	cmp.w	ip, #0
 80046f8:	d002      	beq.n	8004700 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046fa:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80046fe:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004700:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8004702:	f04f 083f 	mov.w	r8, #63	@ 0x3f
 8004706:	9e01      	ldr	r6, [sp, #4]
 8004708:	f007 091f 	and.w	r9, r7, #31
 800470c:	fa08 f809 	lsl.w	r8, r8, r9
 8004710:	f8c6 8008 	str.w	r8, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004714:	6827      	ldr	r7, [r4, #0]
 8004716:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 800471a:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800471c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800471e:	6883      	ldr	r3, [r0, #8]
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	f000 8207 	beq.w	8004b34 <HAL_DMA_Start_IT+0x4d8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004726:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004728:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800472a:	2d00      	cmp	r5, #0
 800472c:	f040 81e6 	bne.w	8004afc <HAL_DMA_Start_IT+0x4a0>
 8004730:	4a62      	ldr	r2, [pc, #392]	@ (80048bc <HAL_DMA_Start_IT+0x260>)
      if(hdma->XferHalfCpltCallback != NULL)
 8004732:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004734:	4294      	cmp	r4, r2
 8004736:	f000 8223 	beq.w	8004b80 <HAL_DMA_Start_IT+0x524>
 800473a:	4a61      	ldr	r2, [pc, #388]	@ (80048c0 <HAL_DMA_Start_IT+0x264>)
 800473c:	4294      	cmp	r4, r2
 800473e:	f000 8251 	beq.w	8004be4 <HAL_DMA_Start_IT+0x588>
 8004742:	f1bb 0f00 	cmp.w	fp, #0
 8004746:	f040 820c 	bne.w	8004b62 <HAL_DMA_Start_IT+0x506>
 800474a:	4a5e      	ldr	r2, [pc, #376]	@ (80048c4 <HAL_DMA_Start_IT+0x268>)
      if(hdma->XferHalfCpltCallback != NULL)
 800474c:	4619      	mov	r1, r3
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800474e:	4294      	cmp	r4, r2
 8004750:	f000 8252 	beq.w	8004bf8 <HAL_DMA_Start_IT+0x59c>
 8004754:	4a5c      	ldr	r2, [pc, #368]	@ (80048c8 <HAL_DMA_Start_IT+0x26c>)
 8004756:	4294      	cmp	r4, r2
 8004758:	f000 8282 	beq.w	8004c60 <HAL_DMA_Start_IT+0x604>
 800475c:	3218      	adds	r2, #24
 800475e:	4294      	cmp	r4, r2
 8004760:	f000 829f 	beq.w	8004ca2 <HAL_DMA_Start_IT+0x646>
 8004764:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004768:	4294      	cmp	r4, r2
 800476a:	f000 82a7 	beq.w	8004cbc <HAL_DMA_Start_IT+0x660>
 800476e:	4b57      	ldr	r3, [pc, #348]	@ (80048cc <HAL_DMA_Start_IT+0x270>)
 8004770:	429c      	cmp	r4, r3
 8004772:	f000 8340 	beq.w	8004df6 <HAL_DMA_Start_IT+0x79a>
 8004776:	3318      	adds	r3, #24
 8004778:	429c      	cmp	r4, r3
 800477a:	f000 8347 	beq.w	8004e0c <HAL_DMA_Start_IT+0x7b0>
 800477e:	3318      	adds	r3, #24
 8004780:	429c      	cmp	r4, r3
 8004782:	f000 8357 	beq.w	8004e34 <HAL_DMA_Start_IT+0x7d8>
 8004786:	3318      	adds	r3, #24
 8004788:	429c      	cmp	r4, r3
 800478a:	f000 8370 	beq.w	8004e6e <HAL_DMA_Start_IT+0x812>
 800478e:	3318      	adds	r3, #24
 8004790:	429c      	cmp	r4, r3
 8004792:	f000 839b 	beq.w	8004ecc <HAL_DMA_Start_IT+0x870>
 8004796:	3318      	adds	r3, #24
 8004798:	429c      	cmp	r4, r3
 800479a:	f000 83ad 	beq.w	8004ef8 <HAL_DMA_Start_IT+0x89c>
 800479e:	3318      	adds	r3, #24
 80047a0:	429c      	cmp	r4, r3
 80047a2:	f000 83bf 	beq.w	8004f24 <HAL_DMA_Start_IT+0x8c8>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	f023 030e 	bic.w	r3, r3, #14
 80047ac:	f043 030a 	orr.w	r3, r3, #10
 80047b0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80047b2:	b119      	cbz	r1, 80047bc <HAL_DMA_Start_IT+0x160>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047bc:	4b42      	ldr	r3, [pc, #264]	@ (80048c8 <HAL_DMA_Start_IT+0x26c>)
 80047be:	4a41      	ldr	r2, [pc, #260]	@ (80048c4 <HAL_DMA_Start_IT+0x268>)
 80047c0:	4294      	cmp	r4, r2
 80047c2:	bf18      	it	ne
 80047c4:	429c      	cmpne	r4, r3
 80047c6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	4294      	cmp	r4, r2
 80047d2:	bf08      	it	eq
 80047d4:	f043 0301 	orreq.w	r3, r3, #1
 80047d8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80047dc:	4294      	cmp	r4, r2
 80047de:	bf08      	it	eq
 80047e0:	f043 0301 	orreq.w	r3, r3, #1
 80047e4:	3218      	adds	r2, #24
 80047e6:	4294      	cmp	r4, r2
 80047e8:	bf08      	it	eq
 80047ea:	f043 0301 	orreq.w	r3, r3, #1
 80047ee:	3218      	adds	r2, #24
 80047f0:	4294      	cmp	r4, r2
 80047f2:	bf08      	it	eq
 80047f4:	f043 0301 	orreq.w	r3, r3, #1
 80047f8:	3218      	adds	r2, #24
 80047fa:	4294      	cmp	r4, r2
 80047fc:	bf08      	it	eq
 80047fe:	f043 0301 	orreq.w	r3, r3, #1
 8004802:	3218      	adds	r2, #24
 8004804:	4294      	cmp	r4, r2
 8004806:	bf08      	it	eq
 8004808:	f043 0301 	orreq.w	r3, r3, #1
 800480c:	3218      	adds	r2, #24
 800480e:	4294      	cmp	r4, r2
 8004810:	bf08      	it	eq
 8004812:	f043 0301 	orreq.w	r3, r3, #1
 8004816:	3218      	adds	r2, #24
 8004818:	4294      	cmp	r4, r2
 800481a:	bf08      	it	eq
 800481c:	f043 0301 	orreq.w	r3, r3, #1
 8004820:	3218      	adds	r2, #24
 8004822:	4294      	cmp	r4, r2
 8004824:	bf08      	it	eq
 8004826:	f043 0301 	orreq.w	r3, r3, #1
 800482a:	4a29      	ldr	r2, [pc, #164]	@ (80048d0 <HAL_DMA_Start_IT+0x274>)
 800482c:	4294      	cmp	r4, r2
 800482e:	bf08      	it	eq
 8004830:	f043 0301 	orreq.w	r3, r3, #1
 8004834:	3214      	adds	r2, #20
 8004836:	4294      	cmp	r4, r2
 8004838:	bf08      	it	eq
 800483a:	f043 0301 	orreq.w	r3, r3, #1
 800483e:	3214      	adds	r2, #20
 8004840:	4294      	cmp	r4, r2
 8004842:	bf08      	it	eq
 8004844:	f043 0301 	orreq.w	r3, r3, #1
 8004848:	3214      	adds	r2, #20
 800484a:	4294      	cmp	r4, r2
 800484c:	bf08      	it	eq
 800484e:	f043 0301 	orreq.w	r3, r3, #1
 8004852:	3214      	adds	r2, #20
 8004854:	4294      	cmp	r4, r2
 8004856:	bf08      	it	eq
 8004858:	f043 0301 	orreq.w	r3, r3, #1
 800485c:	3214      	adds	r2, #20
 800485e:	4294      	cmp	r4, r2
 8004860:	bf08      	it	eq
 8004862:	f043 0301 	orreq.w	r3, r3, #1
 8004866:	3214      	adds	r2, #20
 8004868:	4294      	cmp	r4, r2
 800486a:	bf08      	it	eq
 800486c:	f043 0301 	orreq.w	r3, r3, #1
 8004870:	3214      	adds	r2, #20
 8004872:	4294      	cmp	r4, r2
 8004874:	bf08      	it	eq
 8004876:	f043 0301 	orreq.w	r3, r3, #1
 800487a:	b913      	cbnz	r3, 8004882 <HAL_DMA_Start_IT+0x226>
 800487c:	f1be 0f00 	cmp.w	lr, #0
 8004880:	d00f      	beq.n	80048a2 <HAL_DMA_Start_IT+0x246>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004882:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004884:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	03d2      	lsls	r2, r2, #15
 800488c:	f100 8147 	bmi.w	8004b1e <HAL_DMA_Start_IT+0x4c2>
      if(hdma->DMAmuxRequestGen != 0U)
 8004890:	f1bc 0f00 	cmp.w	ip, #0
 8004894:	d005      	beq.n	80048a2 <HAL_DMA_Start_IT+0x246>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004896:	f8dc 3000 	ldr.w	r3, [ip]
 800489a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489e:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 80048a2:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	6023      	str	r3, [r4, #0]
}
 80048ac:	b003      	add	sp, #12
 80048ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b2:	bf00      	nop
 80048b4:	40020070 	.word	0x40020070
 80048b8:	40020028 	.word	0x40020028
 80048bc:	40020040 	.word	0x40020040
 80048c0:	40020058 	.word	0x40020058
 80048c4:	40020088 	.word	0x40020088
 80048c8:	400200a0 	.word	0x400200a0
 80048cc:	40020428 	.word	0x40020428
 80048d0:	58025408 	.word	0x58025408
 80048d4:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 80048d8:	4544      	cmp	r4, r8
 80048da:	f000 815b 	beq.w	8004b94 <HAL_DMA_Start_IT+0x538>
 80048de:	454c      	cmp	r4, r9
 80048e0:	f000 816c 	beq.w	8004bbc <HAL_DMA_Start_IT+0x560>
 80048e4:	f1bb 0f00 	cmp.w	fp, #0
 80048e8:	f040 8127 	bne.w	8004b3a <HAL_DMA_Start_IT+0x4de>
 80048ec:	f8df c59c 	ldr.w	ip, [pc, #1436]	@ 8004e8c <HAL_DMA_Start_IT+0x830>
 80048f0:	4564      	cmp	r4, ip
 80048f2:	f000 818d 	beq.w	8004c10 <HAL_DMA_Start_IT+0x5b4>
 80048f6:	f10c 0c18 	add.w	ip, ip, #24
 80048fa:	4564      	cmp	r4, ip
 80048fc:	f000 819c 	beq.w	8004c38 <HAL_DMA_Start_IT+0x5dc>
 8004900:	f10c 0c18 	add.w	ip, ip, #24
 8004904:	4564      	cmp	r4, ip
 8004906:	f000 81b8 	beq.w	8004c7a <HAL_DMA_Start_IT+0x61e>
 800490a:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 800490e:	4564      	cmp	r4, ip
 8004910:	f000 81df 	beq.w	8004cd2 <HAL_DMA_Start_IT+0x676>
 8004914:	f10c 0c18 	add.w	ip, ip, #24
 8004918:	4564      	cmp	r4, ip
 800491a:	f000 8263 	beq.w	8004de4 <HAL_DMA_Start_IT+0x788>
 800491e:	f10c 0c18 	add.w	ip, ip, #24
 8004922:	4564      	cmp	r4, ip
 8004924:	f000 827d 	beq.w	8004e22 <HAL_DMA_Start_IT+0x7c6>
 8004928:	f10c 0c18 	add.w	ip, ip, #24
 800492c:	4564      	cmp	r4, ip
 800492e:	f000 828c 	beq.w	8004e4a <HAL_DMA_Start_IT+0x7ee>
 8004932:	f10c 0c18 	add.w	ip, ip, #24
 8004936:	4564      	cmp	r4, ip
 8004938:	f000 8290 	beq.w	8004e5c <HAL_DMA_Start_IT+0x800>
 800493c:	f10c 0c18 	add.w	ip, ip, #24
 8004940:	4564      	cmp	r4, ip
 8004942:	f000 82d0 	beq.w	8004ee6 <HAL_DMA_Start_IT+0x88a>
 8004946:	f10c 0c18 	add.w	ip, ip, #24
 800494a:	4564      	cmp	r4, ip
 800494c:	f000 82e1 	beq.w	8004f12 <HAL_DMA_Start_IT+0x8b6>
 8004950:	f10c 0c18 	add.w	ip, ip, #24
 8004954:	4564      	cmp	r4, ip
 8004956:	f000 82f2 	beq.w	8004f3e <HAL_DMA_Start_IT+0x8e2>
 800495a:	f8d4 c000 	ldr.w	ip, [r4]
 800495e:	f02c 0c01 	bic.w	ip, ip, #1
 8004962:	f8c4 c000 	str.w	ip, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004966:	f8df c528 	ldr.w	ip, [pc, #1320]	@ 8004e90 <HAL_DMA_Start_IT+0x834>
 800496a:	4564      	cmp	r4, ip
 800496c:	f040 81c8 	bne.w	8004d00 <HAL_DMA_Start_IT+0x6a4>
    if(hdma->DMAmuxRequestGen != 0U)
 8004970:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004974:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8004978:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800497a:	f1bc 0f00 	cmp.w	ip, #0
 800497e:	f43f aebf 	beq.w	8004700 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004982:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8004986:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004988:	f8df 8500 	ldr.w	r8, [pc, #1280]	@ 8004e8c <HAL_DMA_Start_IT+0x830>
 800498c:	f8df 9504 	ldr.w	r9, [pc, #1284]	@ 8004e94 <HAL_DMA_Start_IT+0x838>
 8004990:	454c      	cmp	r4, r9
 8004992:	bf18      	it	ne
 8004994:	4544      	cmpne	r4, r8
 8004996:	f109 0918 	add.w	r9, r9, #24
 800499a:	bf0c      	ite	eq
 800499c:	f04f 0801 	moveq.w	r8, #1
 80049a0:	f04f 0800 	movne.w	r8, #0
 80049a4:	454c      	cmp	r4, r9
 80049a6:	bf08      	it	eq
 80049a8:	f048 0801 	orreq.w	r8, r8, #1
 80049ac:	f509 7956 	add.w	r9, r9, #856	@ 0x358
 80049b0:	454c      	cmp	r4, r9
 80049b2:	bf08      	it	eq
 80049b4:	f048 0801 	orreq.w	r8, r8, #1
 80049b8:	f109 0918 	add.w	r9, r9, #24
 80049bc:	454c      	cmp	r4, r9
 80049be:	bf08      	it	eq
 80049c0:	f048 0801 	orreq.w	r8, r8, #1
 80049c4:	f109 0918 	add.w	r9, r9, #24
 80049c8:	454c      	cmp	r4, r9
 80049ca:	bf08      	it	eq
 80049cc:	f048 0801 	orreq.w	r8, r8, #1
 80049d0:	f109 0918 	add.w	r9, r9, #24
 80049d4:	454c      	cmp	r4, r9
 80049d6:	bf08      	it	eq
 80049d8:	f048 0801 	orreq.w	r8, r8, #1
 80049dc:	f109 0918 	add.w	r9, r9, #24
 80049e0:	454c      	cmp	r4, r9
 80049e2:	bf08      	it	eq
 80049e4:	f048 0801 	orreq.w	r8, r8, #1
 80049e8:	f109 0918 	add.w	r9, r9, #24
 80049ec:	454c      	cmp	r4, r9
 80049ee:	bf08      	it	eq
 80049f0:	f048 0801 	orreq.w	r8, r8, #1
 80049f4:	f109 0918 	add.w	r9, r9, #24
 80049f8:	454c      	cmp	r4, r9
 80049fa:	bf08      	it	eq
 80049fc:	f048 0801 	orreq.w	r8, r8, #1
 8004a00:	f1b8 0f00 	cmp.w	r8, #0
 8004a04:	f47f ae7c 	bne.w	8004700 <HAL_DMA_Start_IT+0xa4>
 8004a08:	f8df 848c 	ldr.w	r8, [pc, #1164]	@ 8004e98 <HAL_DMA_Start_IT+0x83c>
 8004a0c:	4544      	cmp	r4, r8
 8004a0e:	f43f ae77 	beq.w	8004700 <HAL_DMA_Start_IT+0xa4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a12:	f8df c488 	ldr.w	ip, [pc, #1160]	@ 8004e9c <HAL_DMA_Start_IT+0x840>
 8004a16:	f8df 8488 	ldr.w	r8, [pc, #1160]	@ 8004ea0 <HAL_DMA_Start_IT+0x844>
 8004a1a:	4544      	cmp	r4, r8
 8004a1c:	bf18      	it	ne
 8004a1e:	4564      	cmpne	r4, ip
 8004a20:	f108 0814 	add.w	r8, r8, #20
 8004a24:	bf0c      	ite	eq
 8004a26:	f04f 0c01 	moveq.w	ip, #1
 8004a2a:	f04f 0c00 	movne.w	ip, #0
 8004a2e:	4544      	cmp	r4, r8
 8004a30:	bf08      	it	eq
 8004a32:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a36:	f108 0814 	add.w	r8, r8, #20
 8004a3a:	4544      	cmp	r4, r8
 8004a3c:	bf08      	it	eq
 8004a3e:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a42:	f108 0814 	add.w	r8, r8, #20
 8004a46:	4544      	cmp	r4, r8
 8004a48:	bf08      	it	eq
 8004a4a:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a4e:	f108 0814 	add.w	r8, r8, #20
 8004a52:	4544      	cmp	r4, r8
 8004a54:	bf08      	it	eq
 8004a56:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a5a:	f108 0814 	add.w	r8, r8, #20
 8004a5e:	4544      	cmp	r4, r8
 8004a60:	bf08      	it	eq
 8004a62:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a66:	f108 0814 	add.w	r8, r8, #20
 8004a6a:	4544      	cmp	r4, r8
 8004a6c:	bf08      	it	eq
 8004a6e:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a72:	f8df 8430 	ldr.w	r8, [pc, #1072]	@ 8004ea4 <HAL_DMA_Start_IT+0x848>
 8004a76:	4544      	cmp	r4, r8
 8004a78:	bf08      	it	eq
 8004a7a:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a7e:	f108 0814 	add.w	r8, r8, #20
 8004a82:	4544      	cmp	r4, r8
 8004a84:	bf08      	it	eq
 8004a86:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a8a:	f108 0814 	add.w	r8, r8, #20
 8004a8e:	4544      	cmp	r4, r8
 8004a90:	bf08      	it	eq
 8004a92:	f04c 0c01 	orreq.w	ip, ip, #1
 8004a96:	f108 0814 	add.w	r8, r8, #20
 8004a9a:	4544      	cmp	r4, r8
 8004a9c:	bf08      	it	eq
 8004a9e:	f04c 0c01 	orreq.w	ip, ip, #1
 8004aa2:	f108 0814 	add.w	r8, r8, #20
 8004aa6:	4544      	cmp	r4, r8
 8004aa8:	bf08      	it	eq
 8004aaa:	f04c 0c01 	orreq.w	ip, ip, #1
 8004aae:	f108 0814 	add.w	r8, r8, #20
 8004ab2:	4544      	cmp	r4, r8
 8004ab4:	bf08      	it	eq
 8004ab6:	f04c 0c01 	orreq.w	ip, ip, #1
 8004aba:	f108 0814 	add.w	r8, r8, #20
 8004abe:	4544      	cmp	r4, r8
 8004ac0:	bf08      	it	eq
 8004ac2:	f04c 0c01 	orreq.w	ip, ip, #1
 8004ac6:	f1bc 0f00 	cmp.w	ip, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_DMA_Start_IT+0x47a>
 8004acc:	f8df c3d8 	ldr.w	ip, [pc, #984]	@ 8004ea8 <HAL_DMA_Start_IT+0x84c>
 8004ad0:	4564      	cmp	r4, ip
 8004ad2:	f040 823f 	bne.w	8004f54 <HAL_DMA_Start_IT+0x8f8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ad6:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8004ad8:	f04f 0c01 	mov.w	ip, #1
 8004adc:	f006 081f 	and.w	r8, r6, #31
 8004ae0:	9e01      	ldr	r6, [sp, #4]
 8004ae2:	fa0c fc08 	lsl.w	ip, ip, r8
 8004ae6:	f8c6 c004 	str.w	ip, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004aea:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aec:	6883      	ldr	r3, [r0, #8]
 8004aee:	2b40      	cmp	r3, #64	@ 0x40
 8004af0:	f000 822e 	beq.w	8004f50 <HAL_DMA_Start_IT+0x8f4>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004af4:	60a1      	str	r1, [r4, #8]
      if(hdma->XferHalfCpltCallback != NULL)
 8004af6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004af8:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004afa:	e61e      	b.n	800473a <HAL_DMA_Start_IT+0xde>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	f023 031e 	bic.w	r3, r3, #30
 8004b02:	f043 0316 	orr.w	r3, r3, #22
 8004b06:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004b08:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004b0a:	b11b      	cbz	r3, 8004b14 <HAL_DMA_Start_IT+0x4b8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f043 0308 	orr.w	r3, r3, #8
 8004b12:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b14:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	03d2      	lsls	r2, r2, #15
 8004b1a:	f57f aeb9 	bpl.w	8004890 <HAL_DMA_Start_IT+0x234>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e6b3      	b.n	8004890 <HAL_DMA_Start_IT+0x234>
  __HAL_LOCK(hdma);
 8004b28:	2002      	movs	r0, #2
}
 8004b2a:	b003      	add	sp, #12
 8004b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8004b30:	2001      	movs	r0, #1
}
 8004b32:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b34:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b36:	60e1      	str	r1, [r4, #12]
 8004b38:	e5f7      	b.n	800472a <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8004b3a:	f8df a348 	ldr.w	sl, [pc, #840]	@ 8004e84 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b3e:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004b42:	f8da 8070 	ldr.w	r8, [sl, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8004b46:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004b4a:	f028 0801 	bic.w	r8, r8, #1
 8004b4e:	f8ca 8070 	str.w	r8, [sl, #112]	@ 0x70
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b52:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004b54:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004b58:	f1bc 0f00 	cmp.w	ip, #0
 8004b5c:	f47f adcd 	bne.w	80046fa <HAL_DMA_Start_IT+0x9e>
 8004b60:	e5ce      	b.n	8004700 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b62:	49c8      	ldr	r1, [pc, #800]	@ (8004e84 <HAL_DMA_Start_IT+0x828>)
 8004b64:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 8004b66:	f022 021e 	bic.w	r2, r2, #30
 8004b6a:	f042 0216 	orr.w	r2, r2, #22
 8004b6e:	670a      	str	r2, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f43f ae86 	beq.w	8004882 <HAL_DMA_Start_IT+0x226>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f043 0308 	orr.w	r3, r3, #8
 8004b7c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b7e:	e61d      	b.n	80047bc <HAL_DMA_Start_IT+0x160>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b80:	49c0      	ldr	r1, [pc, #768]	@ (8004e84 <HAL_DMA_Start_IT+0x828>)
 8004b82:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004b84:	f022 021e 	bic.w	r2, r2, #30
 8004b88:	f042 0216 	orr.w	r2, r2, #22
 8004b8c:	640a      	str	r2, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f1      	bne.n	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004b92:	e7bf      	b.n	8004b14 <HAL_DMA_Start_IT+0x4b8>
    __HAL_DMA_DISABLE(hdma);
 8004b94:	f8df a2ec 	ldr.w	sl, [pc, #748]	@ 8004e84 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b98:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004b9c:	f8da 8040 	ldr.w	r8, [sl, #64]	@ 0x40
    if(hdma->DMAmuxRequestGen != 0U)
 8004ba0:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004ba4:	f028 0801 	bic.w	r8, r8, #1
 8004ba8:	f8ca 8040 	str.w	r8, [sl, #64]	@ 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bac:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004bae:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004bb2:	f1bc 0f00 	cmp.w	ip, #0
 8004bb6:	f47f ada0 	bne.w	80046fa <HAL_DMA_Start_IT+0x9e>
 8004bba:	e5a1      	b.n	8004700 <HAL_DMA_Start_IT+0xa4>
    __HAL_DMA_DISABLE(hdma);
 8004bbc:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8004e84 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc0:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004bc4:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
    if(hdma->DMAmuxRequestGen != 0U)
 8004bc8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004bcc:	f028 0801 	bic.w	r8, r8, #1
 8004bd0:	f8ca 8058 	str.w	r8, [sl, #88]	@ 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bd4:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004bd6:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004bda:	f1bc 0f00 	cmp.w	ip, #0
 8004bde:	f47f ad8c 	bne.w	80046fa <HAL_DMA_Start_IT+0x9e>
 8004be2:	e58d      	b.n	8004700 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004be4:	49a7      	ldr	r1, [pc, #668]	@ (8004e84 <HAL_DMA_Start_IT+0x828>)
 8004be6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004be8:	f022 021e 	bic.w	r2, r2, #30
 8004bec:	f042 0216 	orr.w	r2, r2, #22
 8004bf0:	658a      	str	r2, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1bf      	bne.n	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004bf6:	e644      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004bf8:	49a2      	ldr	r1, [pc, #648]	@ (8004e84 <HAL_DMA_Start_IT+0x828>)
 8004bfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004bfe:	f022 021e 	bic.w	r2, r2, #30
 8004c02:	f042 0216 	orr.w	r2, r2, #22
 8004c06:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1b3      	bne.n	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004c0e:	e638      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004c10:	f8df a270 	ldr.w	sl, [pc, #624]	@ 8004e84 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c14:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004c18:	f8da 8088 	ldr.w	r8, [sl, #136]	@ 0x88
    if(hdma->DMAmuxRequestGen != 0U)
 8004c1c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004c20:	f028 0801 	bic.w	r8, r8, #1
 8004c24:	f8ca 8088 	str.w	r8, [sl, #136]	@ 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c28:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004c2a:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004c2e:	f1bc 0f00 	cmp.w	ip, #0
 8004c32:	f47f aea6 	bne.w	8004982 <HAL_DMA_Start_IT+0x326>
 8004c36:	e6a7      	b.n	8004988 <HAL_DMA_Start_IT+0x32c>
    __HAL_DMA_DISABLE(hdma);
 8004c38:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8004e84 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c3c:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004c40:	f8da 80a0 	ldr.w	r8, [sl, #160]	@ 0xa0
    if(hdma->DMAmuxRequestGen != 0U)
 8004c44:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004c48:	f028 0801 	bic.w	r8, r8, #1
 8004c4c:	f8ca 80a0 	str.w	r8, [sl, #160]	@ 0xa0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c50:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004c52:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004c56:	f1bc 0f00 	cmp.w	ip, #0
 8004c5a:	f47f ae92 	bne.w	8004982 <HAL_DMA_Start_IT+0x326>
 8004c5e:	e693      	b.n	8004988 <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c60:	4988      	ldr	r1, [pc, #544]	@ (8004e84 <HAL_DMA_Start_IT+0x828>)
 8004c62:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8004c66:	f022 021e 	bic.w	r2, r2, #30
 8004c6a:	f042 0216 	orr.w	r2, r2, #22
 8004c6e:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f47f af7f 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004c78:	e603      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004c7a:	f8df a208 	ldr.w	sl, [pc, #520]	@ 8004e84 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c7e:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004c82:	f8da 80b8 	ldr.w	r8, [sl, #184]	@ 0xb8
    if(hdma->DMAmuxRequestGen != 0U)
 8004c86:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004c8a:	f028 0801 	bic.w	r8, r8, #1
 8004c8e:	f8ca 80b8 	str.w	r8, [sl, #184]	@ 0xb8
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c92:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004c94:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004c98:	f1bc 0f00 	cmp.w	ip, #0
 8004c9c:	f47f ae71 	bne.w	8004982 <HAL_DMA_Start_IT+0x326>
 8004ca0:	e672      	b.n	8004988 <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ca2:	4978      	ldr	r1, [pc, #480]	@ (8004e84 <HAL_DMA_Start_IT+0x828>)
 8004ca4:	f8d1 20b8 	ldr.w	r2, [r1, #184]	@ 0xb8
 8004ca8:	f022 021e 	bic.w	r2, r2, #30
 8004cac:	f042 0216 	orr.w	r2, r2, #22
 8004cb0:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f47f af5e 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004cba:	e5e2      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004cbc:	4972      	ldr	r1, [pc, #456]	@ (8004e88 <HAL_DMA_Start_IT+0x82c>)
 8004cbe:	690a      	ldr	r2, [r1, #16]
 8004cc0:	f022 021e 	bic.w	r2, r2, #30
 8004cc4:	f042 0216 	orr.w	r2, r2, #22
 8004cc8:	610a      	str	r2, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f47f af53 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004cd0:	e5d7      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004cd2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8004e88 <HAL_DMA_Start_IT+0x82c>
 8004cd6:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8004cda:	f02c 0c01 	bic.w	ip, ip, #1
 8004cde:	f8c8 c010 	str.w	ip, [r8, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ce2:	f8df c1c8 	ldr.w	ip, [pc, #456]	@ 8004eac <HAL_DMA_Start_IT+0x850>
 8004ce6:	4564      	cmp	r4, ip
 8004ce8:	f43f ae42 	beq.w	8004970 <HAL_DMA_Start_IT+0x314>
 8004cec:	f10c 0c18 	add.w	ip, ip, #24
 8004cf0:	4564      	cmp	r4, ip
 8004cf2:	f43f ae3d 	beq.w	8004970 <HAL_DMA_Start_IT+0x314>
 8004cf6:	f10c 0c18 	add.w	ip, ip, #24
 8004cfa:	4564      	cmp	r4, ip
 8004cfc:	f43f ae38 	beq.w	8004970 <HAL_DMA_Start_IT+0x314>
 8004d00:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8004eb0 <HAL_DMA_Start_IT+0x854>
 8004d04:	4564      	cmp	r4, ip
 8004d06:	f43f ae33 	beq.w	8004970 <HAL_DMA_Start_IT+0x314>
 8004d0a:	f10c 0c18 	add.w	ip, ip, #24
 8004d0e:	4564      	cmp	r4, ip
 8004d10:	f43f ae2e 	beq.w	8004970 <HAL_DMA_Start_IT+0x314>
 8004d14:	f10c 0c18 	add.w	ip, ip, #24
 8004d18:	4564      	cmp	r4, ip
 8004d1a:	f43f ae29 	beq.w	8004970 <HAL_DMA_Start_IT+0x314>
 8004d1e:	f10c 0c18 	add.w	ip, ip, #24
 8004d22:	4564      	cmp	r4, ip
 8004d24:	f43f ae24 	beq.w	8004970 <HAL_DMA_Start_IT+0x314>
 8004d28:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8004ea4 <HAL_DMA_Start_IT+0x848>
 8004d2c:	4564      	cmp	r4, ip
 8004d2e:	f000 80c3 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
 8004d32:	f10c 0c14 	add.w	ip, ip, #20
 8004d36:	4564      	cmp	r4, ip
 8004d38:	f000 80be 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
 8004d3c:	f10c 0c14 	add.w	ip, ip, #20
 8004d40:	4564      	cmp	r4, ip
 8004d42:	f000 80b9 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
 8004d46:	f10c 0c14 	add.w	ip, ip, #20
 8004d4a:	4564      	cmp	r4, ip
 8004d4c:	f000 80b4 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
 8004d50:	f10c 0c14 	add.w	ip, ip, #20
 8004d54:	4564      	cmp	r4, ip
 8004d56:	f000 80af 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
 8004d5a:	f10c 0c14 	add.w	ip, ip, #20
 8004d5e:	4564      	cmp	r4, ip
 8004d60:	f000 80aa 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
 8004d64:	f10c 0c14 	add.w	ip, ip, #20
 8004d68:	4564      	cmp	r4, ip
 8004d6a:	f000 80a5 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
 8004d6e:	f10c 0c14 	add.w	ip, ip, #20
 8004d72:	4564      	cmp	r4, ip
 8004d74:	f000 80a0 	beq.w	8004eb8 <HAL_DMA_Start_IT+0x85c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d78:	f8df c124 	ldr.w	ip, [pc, #292]	@ 8004ea0 <HAL_DMA_Start_IT+0x844>
 8004d7c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8004e9c <HAL_DMA_Start_IT+0x840>
 8004d80:	4544      	cmp	r4, r8
 8004d82:	bf18      	it	ne
 8004d84:	4564      	cmpne	r4, ip
 8004d86:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 8004d8a:	bf0c      	ite	eq
 8004d8c:	f04f 0c01 	moveq.w	ip, #1
 8004d90:	f04f 0c00 	movne.w	ip, #0
 8004d94:	4544      	cmp	r4, r8
 8004d96:	bf08      	it	eq
 8004d98:	f04c 0c01 	orreq.w	ip, ip, #1
 8004d9c:	f108 0814 	add.w	r8, r8, #20
 8004da0:	4544      	cmp	r4, r8
 8004da2:	bf08      	it	eq
 8004da4:	f04c 0c01 	orreq.w	ip, ip, #1
 8004da8:	f108 0814 	add.w	r8, r8, #20
 8004dac:	4544      	cmp	r4, r8
 8004dae:	bf08      	it	eq
 8004db0:	f04c 0c01 	orreq.w	ip, ip, #1
 8004db4:	f108 0814 	add.w	r8, r8, #20
 8004db8:	4544      	cmp	r4, r8
 8004dba:	bf08      	it	eq
 8004dbc:	f04c 0c01 	orreq.w	ip, ip, #1
 8004dc0:	f108 0814 	add.w	r8, r8, #20
 8004dc4:	4544      	cmp	r4, r8
 8004dc6:	bf08      	it	eq
 8004dc8:	f04c 0c01 	orreq.w	ip, ip, #1
 8004dcc:	f1bc 0f00 	cmp.w	ip, #0
 8004dd0:	f47f ae81 	bne.w	8004ad6 <HAL_DMA_Start_IT+0x47a>
 8004dd4:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8004eb4 <HAL_DMA_Start_IT+0x858>
 8004dd8:	4564      	cmp	r4, ip
      if(hdma->XferHalfCpltCallback != NULL)
 8004dda:	bf18      	it	ne
 8004ddc:	6c01      	ldrne	r1, [r0, #64]	@ 0x40
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dde:	f43f ae7a 	beq.w	8004ad6 <HAL_DMA_Start_IT+0x47a>
 8004de2:	e4c4      	b.n	800476e <HAL_DMA_Start_IT+0x112>
    __HAL_DMA_DISABLE(hdma);
 8004de4:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8004e88 <HAL_DMA_Start_IT+0x82c>
 8004de8:	f8d8 c028 	ldr.w	ip, [r8, #40]	@ 0x28
 8004dec:	f02c 0c01 	bic.w	ip, ip, #1
 8004df0:	f8c8 c028 	str.w	ip, [r8, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004df4:	e5bc      	b.n	8004970 <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004df6:	4a24      	ldr	r2, [pc, #144]	@ (8004e88 <HAL_DMA_Start_IT+0x82c>)
 8004df8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004dfa:	f023 031e 	bic.w	r3, r3, #30
 8004dfe:	f043 0316 	orr.w	r3, r3, #22
 8004e02:	6293      	str	r3, [r2, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8004e04:	2900      	cmp	r1, #0
 8004e06:	f47f aeb6 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004e0a:	e53a      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <HAL_DMA_Start_IT+0x82c>)
 8004e0e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004e10:	f023 031e 	bic.w	r3, r3, #30
 8004e14:	f043 0316 	orr.w	r3, r3, #22
 8004e18:	6413      	str	r3, [r2, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	f47f aeab 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004e20:	e52f      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004e22:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8004e88 <HAL_DMA_Start_IT+0x82c>
 8004e26:	f8d8 c040 	ldr.w	ip, [r8, #64]	@ 0x40
 8004e2a:	f02c 0c01 	bic.w	ip, ip, #1
 8004e2e:	f8c8 c040 	str.w	ip, [r8, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e32:	e59d      	b.n	8004970 <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e34:	4a14      	ldr	r2, [pc, #80]	@ (8004e88 <HAL_DMA_Start_IT+0x82c>)
 8004e36:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e38:	f023 031e 	bic.w	r3, r3, #30
 8004e3c:	f043 0316 	orr.w	r3, r3, #22
 8004e40:	6593      	str	r3, [r2, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8004e42:	2900      	cmp	r1, #0
 8004e44:	f47f ae97 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004e48:	e51b      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004e4a:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8004e88 <HAL_DMA_Start_IT+0x82c>
 8004e4e:	f8d8 c058 	ldr.w	ip, [r8, #88]	@ 0x58
 8004e52:	f02c 0c01 	bic.w	ip, ip, #1
 8004e56:	f8c8 c058 	str.w	ip, [r8, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e5a:	e584      	b.n	8004966 <HAL_DMA_Start_IT+0x30a>
    __HAL_DMA_DISABLE(hdma);
 8004e5c:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 8004e88 <HAL_DMA_Start_IT+0x82c>
 8004e60:	f8d8 c070 	ldr.w	ip, [r8, #112]	@ 0x70
 8004e64:	f02c 0c01 	bic.w	ip, ip, #1
 8004e68:	f8c8 c070 	str.w	ip, [r8, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e6c:	e748      	b.n	8004d00 <HAL_DMA_Start_IT+0x6a4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e6e:	4a06      	ldr	r2, [pc, #24]	@ (8004e88 <HAL_DMA_Start_IT+0x82c>)
 8004e70:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004e72:	f023 031e 	bic.w	r3, r3, #30
 8004e76:	f043 0316 	orr.w	r3, r3, #22
 8004e7a:	6713      	str	r3, [r2, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	f47f ae7a 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004e82:	e4fe      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
 8004e84:	40020000 	.word	0x40020000
 8004e88:	40020400 	.word	0x40020400
 8004e8c:	40020088 	.word	0x40020088
 8004e90:	40020458 	.word	0x40020458
 8004e94:	400200a0 	.word	0x400200a0
 8004e98:	400204b8 	.word	0x400204b8
 8004e9c:	48022c08 	.word	0x48022c08
 8004ea0:	48022c1c 	.word	0x48022c1c
 8004ea4:	58025408 	.word	0x58025408
 8004ea8:	58025494 	.word	0x58025494
 8004eac:	40020410 	.word	0x40020410
 8004eb0:	40020470 	.word	0x40020470
 8004eb4:	48022c94 	.word	0x48022c94
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb8:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 8004ebc:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ec0:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004ec2:	f1bc 0f00 	cmp.w	ip, #0
 8004ec6:	f47f ad5c 	bne.w	8004982 <HAL_DMA_Start_IT+0x326>
 8004eca:	e5a2      	b.n	8004a12 <HAL_DMA_Start_IT+0x3b6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ecc:	4a23      	ldr	r2, [pc, #140]	@ (8004f5c <HAL_DMA_Start_IT+0x900>)
 8004ece:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004ed2:	f023 031e 	bic.w	r3, r3, #30
 8004ed6:	f043 0316 	orr.w	r3, r3, #22
 8004eda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	f47f ae49 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004ee4:	e4cd      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004ee6:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8004f5c <HAL_DMA_Start_IT+0x900>
 8004eea:	f8d8 c088 	ldr.w	ip, [r8, #136]	@ 0x88
 8004eee:	f02c 0c01 	bic.w	ip, ip, #1
 8004ef2:	f8c8 c088 	str.w	ip, [r8, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ef6:	e536      	b.n	8004966 <HAL_DMA_Start_IT+0x30a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ef8:	4a18      	ldr	r2, [pc, #96]	@ (8004f5c <HAL_DMA_Start_IT+0x900>)
 8004efa:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8004efe:	f023 031e 	bic.w	r3, r3, #30
 8004f02:	f043 0316 	orr.w	r3, r3, #22
 8004f06:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	f47f ae33 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004f10:	e4b7      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004f12:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 8004f5c <HAL_DMA_Start_IT+0x900>
 8004f16:	f8d8 c0a0 	ldr.w	ip, [r8, #160]	@ 0xa0
 8004f1a:	f02c 0c01 	bic.w	ip, ip, #1
 8004f1e:	f8c8 c0a0 	str.w	ip, [r8, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f22:	e6de      	b.n	8004ce2 <HAL_DMA_Start_IT+0x686>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f24:	4a0d      	ldr	r2, [pc, #52]	@ (8004f5c <HAL_DMA_Start_IT+0x900>)
 8004f26:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 8004f2a:	f023 031e 	bic.w	r3, r3, #30
 8004f2e:	f043 0316 	orr.w	r3, r3, #22
 8004f32:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8004f36:	2900      	cmp	r1, #0
 8004f38:	f47f ae1d 	bne.w	8004b76 <HAL_DMA_Start_IT+0x51a>
 8004f3c:	e4a1      	b.n	8004882 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8004f3e:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8004f5c <HAL_DMA_Start_IT+0x900>
 8004f42:	f8d8 c0b8 	ldr.w	ip, [r8, #184]	@ 0xb8
 8004f46:	f02c 0c01 	bic.w	ip, ip, #1
 8004f4a:	f8c8 c0b8 	str.w	ip, [r8, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f4e:	e6c8      	b.n	8004ce2 <HAL_DMA_Start_IT+0x686>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f50:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f52:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004f56:	f7ff bbf8 	b.w	800474a <HAL_DMA_Start_IT+0xee>
 8004f5a:	bf00      	nop
 8004f5c:	40020400 	.word	0x40020400

08004f60 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004f60:	2800      	cmp	r0, #0
 8004f62:	f000 8096 	beq.w	8005092 <HAL_DMA_Abort_IT+0x132>
{
 8004f66:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f68:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	f040 8083 	bne.w	8005078 <HAL_DMA_Abort_IT+0x118>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f72:	6803      	ldr	r3, [r0, #0]
 8004f74:	4a48      	ldr	r2, [pc, #288]	@ (8005098 <HAL_DMA_Abort_IT+0x138>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f000 8082 	beq.w	8005080 <HAL_DMA_Abort_IT+0x120>
 8004f7c:	3218      	adds	r2, #24
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d07e      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004f82:	3218      	adds	r2, #24
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d07b      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004f88:	3218      	adds	r2, #24
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d078      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004f8e:	3218      	adds	r2, #24
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d075      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004f94:	3218      	adds	r2, #24
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d072      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004f9a:	3218      	adds	r2, #24
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d06f      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fa0:	3218      	adds	r2, #24
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d06c      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fa6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d068      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fae:	3218      	adds	r2, #24
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d065      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fb4:	3218      	adds	r2, #24
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d062      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fba:	3218      	adds	r2, #24
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d05f      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fc0:	3218      	adds	r2, #24
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d05c      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fc6:	3218      	adds	r2, #24
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d059      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fcc:	3218      	adds	r2, #24
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d056      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
 8004fd2:	3218      	adds	r2, #24
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d053      	beq.n	8005080 <HAL_DMA_Abort_IT+0x120>
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fd8:	4a30      	ldr	r2, [pc, #192]	@ (800509c <HAL_DMA_Abort_IT+0x13c>)
 8004fda:	4d31      	ldr	r5, [pc, #196]	@ (80050a0 <HAL_DMA_Abort_IT+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fdc:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fde:	42ab      	cmp	r3, r5
 8004fe0:	bf18      	it	ne
 8004fe2:	4293      	cmpne	r3, r2
 8004fe4:	4c2f      	ldr	r4, [pc, #188]	@ (80050a4 <HAL_DMA_Abort_IT+0x144>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fe6:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fea:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8004fee:	bf0c      	ite	eq
 8004ff0:	2201      	moveq	r2, #1
 8004ff2:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ff4:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	bf08      	it	eq
 8004ffa:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8004ffe:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005000:	3428      	adds	r4, #40	@ 0x28
 8005002:	42ab      	cmp	r3, r5
 8005004:	bf08      	it	eq
 8005006:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800500a:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800500e:	42a3      	cmp	r3, r4
 8005010:	bf08      	it	eq
 8005012:	f042 0201 	orreq.w	r2, r2, #1
 8005016:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8005018:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800501a:	42a3      	cmp	r3, r4
 800501c:	bf08      	it	eq
 800501e:	f042 0201 	orreq.w	r2, r2, #1
 8005022:	4921      	ldr	r1, [pc, #132]	@ (80050a8 <HAL_DMA_Abort_IT+0x148>)
 8005024:	428b      	cmp	r3, r1
 8005026:	bf08      	it	eq
 8005028:	f042 0201 	orreq.w	r2, r2, #1
 800502c:	b912      	cbnz	r2, 8005034 <HAL_DMA_Abort_IT+0xd4>
 800502e:	4a1f      	ldr	r2, [pc, #124]	@ (80050ac <HAL_DMA_Abort_IT+0x14c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d117      	bne.n	8005064 <HAL_DMA_Abort_IT+0x104>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005034:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005036:	6d84      	ldr	r4, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005038:	e9d0 1517 	ldrd	r1, r5, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800503c:	682a      	ldr	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800503e:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005042:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005046:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005048:	602a      	str	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800504a:	6063      	str	r3, [r4, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800504c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800504e:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8005052:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005054:	b133      	cbz	r3, 8005064 <HAL_DMA_Abort_IT+0x104>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005056:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005058:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800505c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005060:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005062:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005064:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8005066:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 8005068:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800506a:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800506e:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8005072:	b163      	cbz	r3, 800508e <HAL_DMA_Abort_IT+0x12e>
        hdma->XferAbortCallback(hdma);
 8005074:	4798      	blx	r3
 8005076:	e00a      	b.n	800508e <HAL_DMA_Abort_IT+0x12e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800507c:	2001      	movs	r0, #1
}
 800507e:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8005080:	2204      	movs	r2, #4
 8005082:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800508e:	2000      	movs	r0, #0
}
 8005090:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005092:	2001      	movs	r0, #1
}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40020010 	.word	0x40020010
 800509c:	5802541c 	.word	0x5802541c
 80050a0:	58025408 	.word	0x58025408
 80050a4:	58025430 	.word	0x58025430
 80050a8:	58025480 	.word	0x58025480
 80050ac:	58025494 	.word	0x58025494

080050b0 <HAL_DMA_IRQHandler>:
{
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80050b4:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80050b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005220 <HAL_DMA_IRQHandler+0x170>)
{
 80050b8:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ba:	6d84      	ldr	r4, [r0, #88]	@ 0x58
{
 80050bc:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80050be:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 80050c0:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050c2:	6803      	ldr	r3, [r0, #0]
 80050c4:	4a57      	ldr	r2, [pc, #348]	@ (8005224 <HAL_DMA_IRQHandler+0x174>)
 80050c6:	4858      	ldr	r0, [pc, #352]	@ (8005228 <HAL_DMA_IRQHandler+0x178>)
  tmpisr_dma  = regs_dma->ISR;
 80050c8:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050ca:	4293      	cmp	r3, r2
 80050cc:	bf18      	it	ne
 80050ce:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 80050d0:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050d2:	bf0c      	ite	eq
 80050d4:	2001      	moveq	r0, #1
 80050d6:	2000      	movne	r0, #0
 80050d8:	f000 80b0 	beq.w	800523c <HAL_DMA_IRQHandler+0x18c>
 80050dc:	3218      	adds	r2, #24
 80050de:	4293      	cmp	r3, r2
 80050e0:	f000 82a6 	beq.w	8005630 <HAL_DMA_IRQHandler+0x580>
 80050e4:	3218      	adds	r2, #24
 80050e6:	4293      	cmp	r3, r2
 80050e8:	f000 82a2 	beq.w	8005630 <HAL_DMA_IRQHandler+0x580>
 80050ec:	3218      	adds	r2, #24
 80050ee:	4293      	cmp	r3, r2
 80050f0:	f000 82af 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 80050f4:	3218      	adds	r2, #24
 80050f6:	4293      	cmp	r3, r2
 80050f8:	f000 82ab 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 80050fc:	3218      	adds	r2, #24
 80050fe:	4293      	cmp	r3, r2
 8005100:	f000 82a7 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 8005104:	3218      	adds	r2, #24
 8005106:	4293      	cmp	r3, r2
 8005108:	f000 82a3 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 800510c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005110:	4293      	cmp	r3, r2
 8005112:	f000 829e 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 8005116:	3218      	adds	r2, #24
 8005118:	4293      	cmp	r3, r2
 800511a:	f000 829a 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 800511e:	3218      	adds	r2, #24
 8005120:	4293      	cmp	r3, r2
 8005122:	f000 8296 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 8005126:	3218      	adds	r2, #24
 8005128:	4293      	cmp	r3, r2
 800512a:	f000 8292 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 800512e:	3218      	adds	r2, #24
 8005130:	4293      	cmp	r3, r2
 8005132:	f000 828e 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 8005136:	3218      	adds	r2, #24
 8005138:	4293      	cmp	r3, r2
 800513a:	f000 828a 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 800513e:	3218      	adds	r2, #24
 8005140:	4293      	cmp	r3, r2
 8005142:	f000 8286 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
 8005146:	3218      	adds	r2, #24
 8005148:	4293      	cmp	r3, r2
 800514a:	f000 8282 	beq.w	8005652 <HAL_DMA_IRQHandler+0x5a2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800514e:	4a37      	ldr	r2, [pc, #220]	@ (800522c <HAL_DMA_IRQHandler+0x17c>)
 8005150:	4837      	ldr	r0, [pc, #220]	@ (8005230 <HAL_DMA_IRQHandler+0x180>)
 8005152:	4283      	cmp	r3, r0
 8005154:	bf18      	it	ne
 8005156:	4293      	cmpne	r3, r2
 8005158:	f100 0014 	add.w	r0, r0, #20
 800515c:	bf0c      	ite	eq
 800515e:	2201      	moveq	r2, #1
 8005160:	2200      	movne	r2, #0
 8005162:	4283      	cmp	r3, r0
 8005164:	bf08      	it	eq
 8005166:	f042 0201 	orreq.w	r2, r2, #1
 800516a:	3014      	adds	r0, #20
 800516c:	4283      	cmp	r3, r0
 800516e:	bf08      	it	eq
 8005170:	f042 0201 	orreq.w	r2, r2, #1
 8005174:	3014      	adds	r0, #20
 8005176:	4283      	cmp	r3, r0
 8005178:	bf08      	it	eq
 800517a:	f042 0201 	orreq.w	r2, r2, #1
 800517e:	3014      	adds	r0, #20
 8005180:	4283      	cmp	r3, r0
 8005182:	bf08      	it	eq
 8005184:	f042 0201 	orreq.w	r2, r2, #1
 8005188:	3014      	adds	r0, #20
 800518a:	4283      	cmp	r3, r0
 800518c:	bf08      	it	eq
 800518e:	f042 0201 	orreq.w	r2, r2, #1
 8005192:	3014      	adds	r0, #20
 8005194:	4283      	cmp	r3, r0
 8005196:	bf08      	it	eq
 8005198:	f042 0201 	orreq.w	r2, r2, #1
 800519c:	4825      	ldr	r0, [pc, #148]	@ (8005234 <HAL_DMA_IRQHandler+0x184>)
 800519e:	4283      	cmp	r3, r0
 80051a0:	bf08      	it	eq
 80051a2:	f042 0201 	orreq.w	r2, r2, #1
 80051a6:	3014      	adds	r0, #20
 80051a8:	4283      	cmp	r3, r0
 80051aa:	bf08      	it	eq
 80051ac:	f042 0201 	orreq.w	r2, r2, #1
 80051b0:	3014      	adds	r0, #20
 80051b2:	4283      	cmp	r3, r0
 80051b4:	bf08      	it	eq
 80051b6:	f042 0201 	orreq.w	r2, r2, #1
 80051ba:	3014      	adds	r0, #20
 80051bc:	4283      	cmp	r3, r0
 80051be:	bf08      	it	eq
 80051c0:	f042 0201 	orreq.w	r2, r2, #1
 80051c4:	3014      	adds	r0, #20
 80051c6:	4283      	cmp	r3, r0
 80051c8:	bf08      	it	eq
 80051ca:	f042 0201 	orreq.w	r2, r2, #1
 80051ce:	3014      	adds	r0, #20
 80051d0:	4283      	cmp	r3, r0
 80051d2:	bf08      	it	eq
 80051d4:	f042 0201 	orreq.w	r2, r2, #1
 80051d8:	3014      	adds	r0, #20
 80051da:	4283      	cmp	r3, r0
 80051dc:	bf08      	it	eq
 80051de:	f042 0201 	orreq.w	r2, r2, #1
 80051e2:	b912      	cbnz	r2, 80051ea <HAL_DMA_IRQHandler+0x13a>
 80051e4:	4a14      	ldr	r2, [pc, #80]	@ (8005238 <HAL_DMA_IRQHandler+0x188>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d116      	bne.n	8005218 <HAL_DMA_IRQHandler+0x168>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051ea:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 80051ec:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051ee:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051f0:	f000 001f 	and.w	r0, r0, #31
 80051f4:	4085      	lsls	r5, r0
 80051f6:	420d      	tst	r5, r1
 80051f8:	f000 8285 	beq.w	8005706 <HAL_DMA_IRQHandler+0x656>
 80051fc:	0757      	lsls	r7, r2, #29
 80051fe:	f140 8282 	bpl.w	8005706 <HAL_DMA_IRQHandler+0x656>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005202:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005204:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005206:	f140 82b1 	bpl.w	800576c <HAL_DMA_IRQHandler+0x6bc>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800520a:	03d1      	lsls	r1, r2, #15
 800520c:	f100 82b4 	bmi.w	8005778 <HAL_DMA_IRQHandler+0x6c8>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005210:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 81f6 	bne.w	8005604 <HAL_DMA_IRQHandler+0x554>
}
 8005218:	b002      	add	sp, #8
 800521a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800521e:	bf00      	nop
 8005220:	2400000c 	.word	0x2400000c
 8005224:	40020028 	.word	0x40020028
 8005228:	40020010 	.word	0x40020010
 800522c:	48022c08 	.word	0x48022c08
 8005230:	48022c1c 	.word	0x48022c1c
 8005234:	58025408 	.word	0x58025408
 8005238:	58025494 	.word	0x58025494
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800523c:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8005240:	f04f 0c08 	mov.w	ip, #8
 8005244:	f00e 021f 	and.w	r2, lr, #31
 8005248:	fa0c f102 	lsl.w	r1, ip, r2
 800524c:	420f      	tst	r7, r1
 800524e:	f000 81de 	beq.w	800560e <HAL_DMA_IRQHandler+0x55e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005252:	f8d3 c000 	ldr.w	ip, [r3]
 8005256:	f01c 0f04 	tst.w	ip, #4
 800525a:	d00a      	beq.n	8005272 <HAL_DMA_IRQHandler+0x1c2>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800525c:	f8d3 c000 	ldr.w	ip, [r3]
 8005260:	f02c 0c04 	bic.w	ip, ip, #4
 8005264:	f8c3 c000 	str.w	ip, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005268:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800526a:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 800526c:	f041 0101 	orr.w	r1, r1, #1
 8005270:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005272:	fa27 f102 	lsr.w	r1, r7, r2
 8005276:	07c9      	lsls	r1, r1, #31
 8005278:	d55b      	bpl.n	8005332 <HAL_DMA_IRQHandler+0x282>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800527a:	2800      	cmp	r0, #0
 800527c:	d14f      	bne.n	800531e <HAL_DMA_IRQHandler+0x26e>
 800527e:	49a2      	ldr	r1, [pc, #648]	@ (8005508 <HAL_DMA_IRQHandler+0x458>)
 8005280:	f8df c298 	ldr.w	ip, [pc, #664]	@ 800551c <HAL_DMA_IRQHandler+0x46c>
 8005284:	4563      	cmp	r3, ip
 8005286:	bf18      	it	ne
 8005288:	428b      	cmpne	r3, r1
 800528a:	f10c 0c18 	add.w	ip, ip, #24
 800528e:	bf0c      	ite	eq
 8005290:	2101      	moveq	r1, #1
 8005292:	2100      	movne	r1, #0
 8005294:	4563      	cmp	r3, ip
 8005296:	bf08      	it	eq
 8005298:	f041 0101 	orreq.w	r1, r1, #1
 800529c:	f10c 0c18 	add.w	ip, ip, #24
 80052a0:	4563      	cmp	r3, ip
 80052a2:	bf08      	it	eq
 80052a4:	f041 0101 	orreq.w	r1, r1, #1
 80052a8:	f10c 0c18 	add.w	ip, ip, #24
 80052ac:	4563      	cmp	r3, ip
 80052ae:	bf08      	it	eq
 80052b0:	f041 0101 	orreq.w	r1, r1, #1
 80052b4:	f10c 0c18 	add.w	ip, ip, #24
 80052b8:	4563      	cmp	r3, ip
 80052ba:	bf08      	it	eq
 80052bc:	f041 0101 	orreq.w	r1, r1, #1
 80052c0:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 80052c4:	4563      	cmp	r3, ip
 80052c6:	bf08      	it	eq
 80052c8:	f041 0101 	orreq.w	r1, r1, #1
 80052cc:	f10c 0c18 	add.w	ip, ip, #24
 80052d0:	4563      	cmp	r3, ip
 80052d2:	bf08      	it	eq
 80052d4:	f041 0101 	orreq.w	r1, r1, #1
 80052d8:	f10c 0c18 	add.w	ip, ip, #24
 80052dc:	4563      	cmp	r3, ip
 80052de:	bf08      	it	eq
 80052e0:	f041 0101 	orreq.w	r1, r1, #1
 80052e4:	f10c 0c18 	add.w	ip, ip, #24
 80052e8:	4563      	cmp	r3, ip
 80052ea:	bf08      	it	eq
 80052ec:	f041 0101 	orreq.w	r1, r1, #1
 80052f0:	f10c 0c18 	add.w	ip, ip, #24
 80052f4:	4563      	cmp	r3, ip
 80052f6:	bf08      	it	eq
 80052f8:	f041 0101 	orreq.w	r1, r1, #1
 80052fc:	f10c 0c18 	add.w	ip, ip, #24
 8005300:	4563      	cmp	r3, ip
 8005302:	bf08      	it	eq
 8005304:	f041 0101 	orreq.w	r1, r1, #1
 8005308:	f10c 0c18 	add.w	ip, ip, #24
 800530c:	4563      	cmp	r3, ip
 800530e:	bf08      	it	eq
 8005310:	f041 0101 	orreq.w	r1, r1, #1
 8005314:	b919      	cbnz	r1, 800531e <HAL_DMA_IRQHandler+0x26e>
 8005316:	497d      	ldr	r1, [pc, #500]	@ (800550c <HAL_DMA_IRQHandler+0x45c>)
 8005318:	428b      	cmp	r3, r1
 800531a:	f040 81e3 	bne.w	80056e4 <HAL_DMA_IRQHandler+0x634>
 800531e:	6959      	ldr	r1, [r3, #20]
 8005320:	0609      	lsls	r1, r1, #24
 8005322:	d506      	bpl.n	8005332 <HAL_DMA_IRQHandler+0x282>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005324:	2101      	movs	r1, #1
 8005326:	4091      	lsls	r1, r2
 8005328:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800532a:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 800532c:	f041 0102 	orr.w	r1, r1, #2
 8005330:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005332:	2104      	movs	r1, #4
 8005334:	4091      	lsls	r1, r2
 8005336:	4239      	tst	r1, r7
 8005338:	d05f      	beq.n	80053fa <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800533a:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8005508 <HAL_DMA_IRQHandler+0x458>
 800533e:	4563      	cmp	r3, ip
 8005340:	d051      	beq.n	80053e6 <HAL_DMA_IRQHandler+0x336>
 8005342:	2800      	cmp	r0, #0
 8005344:	d14f      	bne.n	80053e6 <HAL_DMA_IRQHandler+0x336>
 8005346:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 800534a:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 800551c <HAL_DMA_IRQHandler+0x46c>
 800534e:	4543      	cmp	r3, r8
 8005350:	bf18      	it	ne
 8005352:	4563      	cmpne	r3, ip
 8005354:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8005358:	bf0c      	ite	eq
 800535a:	f04f 0c01 	moveq.w	ip, #1
 800535e:	f04f 0c00 	movne.w	ip, #0
 8005362:	4543      	cmp	r3, r8
 8005364:	bf08      	it	eq
 8005366:	f04c 0c01 	orreq.w	ip, ip, #1
 800536a:	f108 0818 	add.w	r8, r8, #24
 800536e:	4543      	cmp	r3, r8
 8005370:	bf08      	it	eq
 8005372:	f04c 0c01 	orreq.w	ip, ip, #1
 8005376:	f108 0818 	add.w	r8, r8, #24
 800537a:	4543      	cmp	r3, r8
 800537c:	bf08      	it	eq
 800537e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005382:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8005386:	4543      	cmp	r3, r8
 8005388:	bf08      	it	eq
 800538a:	f04c 0c01 	orreq.w	ip, ip, #1
 800538e:	f108 0818 	add.w	r8, r8, #24
 8005392:	4543      	cmp	r3, r8
 8005394:	bf08      	it	eq
 8005396:	f04c 0c01 	orreq.w	ip, ip, #1
 800539a:	f108 0818 	add.w	r8, r8, #24
 800539e:	4543      	cmp	r3, r8
 80053a0:	bf08      	it	eq
 80053a2:	f04c 0c01 	orreq.w	ip, ip, #1
 80053a6:	f108 0818 	add.w	r8, r8, #24
 80053aa:	4543      	cmp	r3, r8
 80053ac:	bf08      	it	eq
 80053ae:	f04c 0c01 	orreq.w	ip, ip, #1
 80053b2:	f108 0818 	add.w	r8, r8, #24
 80053b6:	4543      	cmp	r3, r8
 80053b8:	bf08      	it	eq
 80053ba:	f04c 0c01 	orreq.w	ip, ip, #1
 80053be:	f108 0818 	add.w	r8, r8, #24
 80053c2:	4543      	cmp	r3, r8
 80053c4:	bf08      	it	eq
 80053c6:	f04c 0c01 	orreq.w	ip, ip, #1
 80053ca:	f108 0818 	add.w	r8, r8, #24
 80053ce:	4543      	cmp	r3, r8
 80053d0:	bf08      	it	eq
 80053d2:	f04c 0c01 	orreq.w	ip, ip, #1
 80053d6:	f1bc 0f00 	cmp.w	ip, #0
 80053da:	d104      	bne.n	80053e6 <HAL_DMA_IRQHandler+0x336>
 80053dc:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 800550c <HAL_DMA_IRQHandler+0x45c>
 80053e0:	4563      	cmp	r3, ip
 80053e2:	f040 8185 	bne.w	80056f0 <HAL_DMA_IRQHandler+0x640>
 80053e6:	f8d3 c000 	ldr.w	ip, [r3]
 80053ea:	f01c 0f02 	tst.w	ip, #2
 80053ee:	d004      	beq.n	80053fa <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053f0:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053f2:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 80053f4:	f041 0104 	orr.w	r1, r1, #4
 80053f8:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053fa:	2110      	movs	r1, #16
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	423a      	tst	r2, r7
 8005402:	d05b      	beq.n	80054bc <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005404:	4940      	ldr	r1, [pc, #256]	@ (8005508 <HAL_DMA_IRQHandler+0x458>)
 8005406:	428b      	cmp	r3, r1
 8005408:	d042      	beq.n	8005490 <HAL_DMA_IRQHandler+0x3e0>
 800540a:	2800      	cmp	r0, #0
 800540c:	d140      	bne.n	8005490 <HAL_DMA_IRQHandler+0x3e0>
 800540e:	3118      	adds	r1, #24
 8005410:	483f      	ldr	r0, [pc, #252]	@ (8005510 <HAL_DMA_IRQHandler+0x460>)
 8005412:	4283      	cmp	r3, r0
 8005414:	bf18      	it	ne
 8005416:	428b      	cmpne	r3, r1
 8005418:	f100 0018 	add.w	r0, r0, #24
 800541c:	bf0c      	ite	eq
 800541e:	2101      	moveq	r1, #1
 8005420:	2100      	movne	r1, #0
 8005422:	4283      	cmp	r3, r0
 8005424:	bf08      	it	eq
 8005426:	f041 0101 	orreq.w	r1, r1, #1
 800542a:	3018      	adds	r0, #24
 800542c:	4283      	cmp	r3, r0
 800542e:	bf08      	it	eq
 8005430:	f041 0101 	orreq.w	r1, r1, #1
 8005434:	3018      	adds	r0, #24
 8005436:	4283      	cmp	r3, r0
 8005438:	bf08      	it	eq
 800543a:	f041 0101 	orreq.w	r1, r1, #1
 800543e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8005442:	4283      	cmp	r3, r0
 8005444:	bf08      	it	eq
 8005446:	f041 0101 	orreq.w	r1, r1, #1
 800544a:	3018      	adds	r0, #24
 800544c:	4283      	cmp	r3, r0
 800544e:	bf08      	it	eq
 8005450:	f041 0101 	orreq.w	r1, r1, #1
 8005454:	3018      	adds	r0, #24
 8005456:	4283      	cmp	r3, r0
 8005458:	bf08      	it	eq
 800545a:	f041 0101 	orreq.w	r1, r1, #1
 800545e:	3018      	adds	r0, #24
 8005460:	4283      	cmp	r3, r0
 8005462:	bf08      	it	eq
 8005464:	f041 0101 	orreq.w	r1, r1, #1
 8005468:	3018      	adds	r0, #24
 800546a:	4283      	cmp	r3, r0
 800546c:	bf08      	it	eq
 800546e:	f041 0101 	orreq.w	r1, r1, #1
 8005472:	3018      	adds	r0, #24
 8005474:	4283      	cmp	r3, r0
 8005476:	bf08      	it	eq
 8005478:	f041 0101 	orreq.w	r1, r1, #1
 800547c:	3018      	adds	r0, #24
 800547e:	4283      	cmp	r3, r0
 8005480:	bf08      	it	eq
 8005482:	f041 0101 	orreq.w	r1, r1, #1
 8005486:	b919      	cbnz	r1, 8005490 <HAL_DMA_IRQHandler+0x3e0>
 8005488:	4920      	ldr	r1, [pc, #128]	@ (800550c <HAL_DMA_IRQHandler+0x45c>)
 800548a:	428b      	cmp	r3, r1
 800548c:	f040 8137 	bne.w	80056fe <HAL_DMA_IRQHandler+0x64e>
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8005496:	b189      	cbz	r1, 80054bc <HAL_DMA_IRQHandler+0x40c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005498:	60a2      	str	r2, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	0350      	lsls	r0, r2, #13
 800549e:	f100 80e7 	bmi.w	8005670 <HAL_DMA_IRQHandler+0x5c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	05d2      	lsls	r2, r2, #23
 80054a6:	d403      	bmi.n	80054b0 <HAL_DMA_IRQHandler+0x400>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f022 0208 	bic.w	r2, r2, #8
 80054ae:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80054b0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80054b2:	b11b      	cbz	r3, 80054bc <HAL_DMA_IRQHandler+0x40c>
            hdma->XferHalfCpltCallback(hdma);
 80054b4:	4630      	mov	r0, r6
 80054b6:	4798      	blx	r3
 80054b8:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054bc:	f00e 011f 	and.w	r1, lr, #31
 80054c0:	2020      	movs	r0, #32
 80054c2:	4088      	lsls	r0, r1
 80054c4:	4238      	tst	r0, r7
 80054c6:	d073      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x500>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054c8:	6832      	ldr	r2, [r6, #0]
 80054ca:	4b12      	ldr	r3, [pc, #72]	@ (8005514 <HAL_DMA_IRQHandler+0x464>)
 80054cc:	4f12      	ldr	r7, [pc, #72]	@ (8005518 <HAL_DMA_IRQHandler+0x468>)
 80054ce:	42ba      	cmp	r2, r7
 80054d0:	bf18      	it	ne
 80054d2:	429a      	cmpne	r2, r3
 80054d4:	f107 0718 	add.w	r7, r7, #24
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	42ba      	cmp	r2, r7
 80054e0:	bf08      	it	eq
 80054e2:	f043 0301 	orreq.w	r3, r3, #1
 80054e6:	3718      	adds	r7, #24
 80054e8:	42ba      	cmp	r2, r7
 80054ea:	bf08      	it	eq
 80054ec:	f043 0301 	orreq.w	r3, r3, #1
 80054f0:	3718      	adds	r7, #24
 80054f2:	42ba      	cmp	r2, r7
 80054f4:	bf08      	it	eq
 80054f6:	f043 0301 	orreq.w	r3, r3, #1
 80054fa:	3718      	adds	r7, #24
 80054fc:	42ba      	cmp	r2, r7
 80054fe:	bf08      	it	eq
 8005500:	f043 0301 	orreq.w	r3, r3, #1
 8005504:	3718      	adds	r7, #24
 8005506:	e00b      	b.n	8005520 <HAL_DMA_IRQHandler+0x470>
 8005508:	40020040 	.word	0x40020040
 800550c:	400204b8 	.word	0x400204b8
 8005510:	40020070 	.word	0x40020070
 8005514:	40020010 	.word	0x40020010
 8005518:	40020028 	.word	0x40020028
 800551c:	40020058 	.word	0x40020058
 8005520:	42ba      	cmp	r2, r7
 8005522:	bf08      	it	eq
 8005524:	f043 0301 	orreq.w	r3, r3, #1
 8005528:	3718      	adds	r7, #24
 800552a:	42ba      	cmp	r2, r7
 800552c:	bf08      	it	eq
 800552e:	f043 0301 	orreq.w	r3, r3, #1
 8005532:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8005536:	42ba      	cmp	r2, r7
 8005538:	bf08      	it	eq
 800553a:	f043 0301 	orreq.w	r3, r3, #1
 800553e:	3718      	adds	r7, #24
 8005540:	42ba      	cmp	r2, r7
 8005542:	bf08      	it	eq
 8005544:	f043 0301 	orreq.w	r3, r3, #1
 8005548:	3718      	adds	r7, #24
 800554a:	42ba      	cmp	r2, r7
 800554c:	bf08      	it	eq
 800554e:	f043 0301 	orreq.w	r3, r3, #1
 8005552:	3718      	adds	r7, #24
 8005554:	42ba      	cmp	r2, r7
 8005556:	bf08      	it	eq
 8005558:	f043 0301 	orreq.w	r3, r3, #1
 800555c:	3718      	adds	r7, #24
 800555e:	42ba      	cmp	r2, r7
 8005560:	bf08      	it	eq
 8005562:	f043 0301 	orreq.w	r3, r3, #1
 8005566:	3718      	adds	r7, #24
 8005568:	42ba      	cmp	r2, r7
 800556a:	bf08      	it	eq
 800556c:	f043 0301 	orreq.w	r3, r3, #1
 8005570:	3718      	adds	r7, #24
 8005572:	42ba      	cmp	r2, r7
 8005574:	bf08      	it	eq
 8005576:	f043 0301 	orreq.w	r3, r3, #1
 800557a:	b91b      	cbnz	r3, 8005584 <HAL_DMA_IRQHandler+0x4d4>
 800557c:	4b89      	ldr	r3, [pc, #548]	@ (80057a4 <HAL_DMA_IRQHandler+0x6f4>)
 800557e:	429a      	cmp	r2, r3
 8005580:	f040 80f0 	bne.w	8005764 <HAL_DMA_IRQHandler+0x6b4>
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800558a:	b18b      	cbz	r3, 80055b0 <HAL_DMA_IRQHandler+0x500>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800558c:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800558e:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 8005592:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005594:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005596:	d074      	beq.n	8005682 <HAL_DMA_IRQHandler+0x5d2>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005598:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800559c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800559e:	f000 808a 	beq.w	80056b6 <HAL_DMA_IRQHandler+0x606>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055a2:	031f      	lsls	r7, r3, #12
 80055a4:	f140 8095 	bpl.w	80056d2 <HAL_DMA_IRQHandler+0x622>
          if(hdma->XferCpltCallback != NULL)
 80055a8:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 80055aa:	b10b      	cbz	r3, 80055b0 <HAL_DMA_IRQHandler+0x500>
            hdma->XferCpltCallback(hdma);
 80055ac:	4630      	mov	r0, r6
 80055ae:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055b0:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f43f ae30 	beq.w	8005218 <HAL_DMA_IRQHandler+0x168>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80055b8:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80055ba:	07dc      	lsls	r4, r3, #31
 80055bc:	d51e      	bpl.n	80055fc <HAL_DMA_IRQHandler+0x54c>
        __HAL_DMA_DISABLE(hdma);
 80055be:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80055c0:	2104      	movs	r1, #4
 80055c2:	f886 1035 	strb.w	r1, [r6, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 80055c6:	4978      	ldr	r1, [pc, #480]	@ (80057a8 <HAL_DMA_IRQHandler+0x6f8>)
        __HAL_DMA_DISABLE(hdma);
 80055c8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055ca:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 80055ce:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80055d2:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e002      	b.n	80055de <HAL_DMA_IRQHandler+0x52e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80055d8:	6813      	ldr	r3, [r2, #0]
 80055da:	07d8      	lsls	r0, r3, #31
 80055dc:	d504      	bpl.n	80055e8 <HAL_DMA_IRQHandler+0x538>
          if (++count > timeout)
 80055de:	9b01      	ldr	r3, [sp, #4]
 80055e0:	3301      	adds	r3, #1
 80055e2:	428b      	cmp	r3, r1
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	d9f7      	bls.n	80055d8 <HAL_DMA_IRQHandler+0x528>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055e8:	6813      	ldr	r3, [r2, #0]
 80055ea:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80055ec:	bf4c      	ite	mi
 80055ee:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80055f0:	2301      	movpl	r3, #1
 80055f2:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80055f6:	2300      	movs	r3, #0
 80055f8:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 80055fc:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f43f ae0a 	beq.w	8005218 <HAL_DMA_IRQHandler+0x168>
          hdma->XferCpltCallback(hdma);
 8005604:	4630      	mov	r0, r6
}
 8005606:	b002      	add	sp, #8
 8005608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 800560c:	4718      	bx	r3
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800560e:	fa27 f102 	lsr.w	r1, r7, r2
 8005612:	07c9      	lsls	r1, r1, #31
 8005614:	f53f ae83 	bmi.w	800531e <HAL_DMA_IRQHandler+0x26e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005618:	2104      	movs	r1, #4
 800561a:	4091      	lsls	r1, r2
 800561c:	420f      	tst	r7, r1
 800561e:	f47f aee2 	bne.w	80053e6 <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005622:	2110      	movs	r1, #16
 8005624:	fa01 f202 	lsl.w	r2, r1, r2
 8005628:	4217      	tst	r7, r2
 800562a:	f47f af31 	bne.w	8005490 <HAL_DMA_IRQHandler+0x3e0>
 800562e:	e745      	b.n	80054bc <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005630:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8005634:	f04f 0c08 	mov.w	ip, #8
 8005638:	f00e 021f 	and.w	r2, lr, #31
 800563c:	fa0c f102 	lsl.w	r1, ip, r2
 8005640:	420f      	tst	r7, r1
 8005642:	f47f ae06 	bne.w	8005252 <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005646:	fa27 f102 	lsr.w	r1, r7, r2
 800564a:	07c9      	lsls	r1, r1, #31
 800564c:	f53f ae67 	bmi.w	800531e <HAL_DMA_IRQHandler+0x26e>
 8005650:	e66f      	b.n	8005332 <HAL_DMA_IRQHandler+0x282>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005652:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8005656:	2108      	movs	r1, #8
 8005658:	f00e 021f 	and.w	r2, lr, #31
 800565c:	4091      	lsls	r1, r2
 800565e:	420f      	tst	r7, r1
 8005660:	f47f adf7 	bne.w	8005252 <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005664:	fa27 f102 	lsr.w	r1, r7, r2
 8005668:	07c9      	lsls	r1, r1, #31
 800566a:	f53f ae58 	bmi.w	800531e <HAL_DMA_IRQHandler+0x26e>
 800566e:	e660      	b.n	8005332 <HAL_DMA_IRQHandler+0x282>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	0319      	lsls	r1, r3, #12
 8005674:	f57f af1c 	bpl.w	80054b0 <HAL_DMA_IRQHandler+0x400>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005678:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800567a:	2b00      	cmp	r3, #0
 800567c:	f47f af1a 	bne.w	80054b4 <HAL_DMA_IRQHandler+0x404>
 8005680:	e71c      	b.n	80054bc <HAL_DMA_IRQHandler+0x40c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005682:	f023 0316 	bic.w	r3, r3, #22
 8005686:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005688:	6953      	ldr	r3, [r2, #20]
 800568a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800568e:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005690:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005692:	b31b      	cbz	r3, 80056dc <HAL_DMA_IRQHandler+0x62c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005694:	6813      	ldr	r3, [r2, #0]
 8005696:	f023 0308 	bic.w	r3, r3, #8
 800569a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800569c:	233f      	movs	r3, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800569e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 80056a0:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056a2:	408b      	lsls	r3, r1
 80056a4:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 80056a6:	6d33      	ldr	r3, [r6, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80056a8:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80056ac:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1a7      	bne.n	8005604 <HAL_DMA_IRQHandler+0x554>
 80056b4:	e5b0      	b.n	8005218 <HAL_DMA_IRQHandler+0x168>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056b6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 80056ba:	f47f af75 	bne.w	80055a8 <HAL_DMA_IRQHandler+0x4f8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056be:	6811      	ldr	r1, [r2, #0]
 80056c0:	f021 0110 	bic.w	r1, r1, #16
 80056c4:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80056c6:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 80056c8:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80056cc:	f886 2035 	strb.w	r2, [r6, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 80056d0:	e76a      	b.n	80055a8 <HAL_DMA_IRQHandler+0x4f8>
            if(hdma->XferM1CpltCallback != NULL)
 80056d2:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f af69 	bne.w	80055ac <HAL_DMA_IRQHandler+0x4fc>
 80056da:	e769      	b.n	80055b0 <HAL_DMA_IRQHandler+0x500>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056dc:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1d8      	bne.n	8005694 <HAL_DMA_IRQHandler+0x5e4>
 80056e2:	e7db      	b.n	800569c <HAL_DMA_IRQHandler+0x5ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056e4:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056e6:	2104      	movs	r1, #4
 80056e8:	4091      	lsls	r1, r2
 80056ea:	4239      	tst	r1, r7
 80056ec:	f43f ae85 	beq.w	80053fa <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056f0:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056f2:	2110      	movs	r1, #16
 80056f4:	fa01 f202 	lsl.w	r2, r1, r2
 80056f8:	4217      	tst	r7, r2
 80056fa:	f43f aedf 	beq.w	80054bc <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8005704:	e6c7      	b.n	8005496 <HAL_DMA_IRQHandler+0x3e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005706:	2502      	movs	r5, #2
 8005708:	4085      	lsls	r5, r0
 800570a:	420d      	tst	r5, r1
 800570c:	d00b      	beq.n	8005726 <HAL_DMA_IRQHandler+0x676>
 800570e:	0797      	lsls	r7, r2, #30
 8005710:	d509      	bpl.n	8005726 <HAL_DMA_IRQHandler+0x676>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005712:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005714:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005716:	d534      	bpl.n	8005782 <HAL_DMA_IRQHandler+0x6d2>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005718:	03d7      	lsls	r7, r2, #15
 800571a:	d43e      	bmi.n	800579a <HAL_DMA_IRQHandler+0x6ea>
          if(hdma->XferM1CpltCallback != NULL)
 800571c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800571e:	2b00      	cmp	r3, #0
 8005720:	f47f af70 	bne.w	8005604 <HAL_DMA_IRQHandler+0x554>
 8005724:	e578      	b.n	8005218 <HAL_DMA_IRQHandler+0x168>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005726:	2508      	movs	r5, #8
 8005728:	4085      	lsls	r5, r0
 800572a:	420d      	tst	r5, r1
 800572c:	f43f ad74 	beq.w	8005218 <HAL_DMA_IRQHandler+0x168>
 8005730:	0715      	lsls	r5, r2, #28
 8005732:	f57f ad71 	bpl.w	8005218 <HAL_DMA_IRQHandler+0x168>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005736:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005738:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800573a:	f022 020e 	bic.w	r2, r2, #14
 800573e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005740:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8005742:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005744:	fa03 f000 	lsl.w	r0, r3, r0
 8005748:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800574a:	6573      	str	r3, [r6, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 800574c:	f886 1034 	strb.w	r1, [r6, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005750:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8005754:	2a00      	cmp	r2, #0
 8005756:	f43f ad5f 	beq.w	8005218 <HAL_DMA_IRQHandler+0x168>
        hdma->XferErrorCallback(hdma);
 800575a:	4630      	mov	r0, r6
}
 800575c:	b002      	add	sp, #8
 800575e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8005762:	4710      	bx	r2
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005764:	6813      	ldr	r3, [r2, #0]
 8005766:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800576a:	e70e      	b.n	800558a <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800576c:	0692      	lsls	r2, r2, #26
 800576e:	d403      	bmi.n	8005778 <HAL_DMA_IRQHandler+0x6c8>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	f022 0204 	bic.w	r2, r2, #4
 8005776:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005778:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	f47f af42 	bne.w	8005604 <HAL_DMA_IRQHandler+0x554>
 8005780:	e54a      	b.n	8005218 <HAL_DMA_IRQHandler+0x168>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005782:	f012 0220 	ands.w	r2, r2, #32
 8005786:	d108      	bne.n	800579a <HAL_DMA_IRQHandler+0x6ea>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005788:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800578a:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800578c:	f021 010a 	bic.w	r1, r1, #10
 8005790:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005792:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005796:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800579a:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	f47f af31 	bne.w	8005604 <HAL_DMA_IRQHandler+0x554>
 80057a2:	e539      	b.n	8005218 <HAL_DMA_IRQHandler+0x168>
 80057a4:	400204b8 	.word	0x400204b8
 80057a8:	1b4e81b5 	.word	0x1b4e81b5

080057ac <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80057ac:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 80057ae:	4770      	bx	lr

080057b0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d035      	beq.n	8005820 <HAL_DMA2D_Init+0x70>
{
 80057b4:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80057b6:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80057ba:	4604      	mov	r4, r0
 80057bc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80057c0:	b34b      	cbz	r3, 8005816 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057c2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057c4:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057c6:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057c8:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057cc:	69e1      	ldr	r1, [r4, #28]
 80057ce:	681d      	ldr	r5, [r3, #0]
 80057d0:	4814      	ldr	r0, [pc, #80]	@ (8005824 <HAL_DMA2D_Init+0x74>)
 80057d2:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057d4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057d6:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057d8:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057da:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057dc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80057de:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057e0:	4302      	orrs	r2, r0
 80057e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80057e4:	4810      	ldr	r0, [pc, #64]	@ (8005828 <HAL_DMA2D_Init+0x78>)
 80057e6:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057e8:	4910      	ldr	r1, [pc, #64]	@ (800582c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80057ea:	4302      	orrs	r2, r0
 80057ec:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057f0:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057f2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057f6:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057f8:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80057fa:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80057fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80057fe:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005802:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005804:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005808:	430a      	orrs	r2, r1
 800580a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800580c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800580e:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005810:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8005814:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8005816:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800581a:	f7fd ffd1 	bl	80037c0 <HAL_DMA2D_MspInit>
 800581e:	e7d0      	b.n	80057c2 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8005820:	2001      	movs	r0, #1
}
 8005822:	4770      	bx	lr
 8005824:	fff8ffbf 	.word	0xfff8ffbf
 8005828:	fffffef8 	.word	0xfffffef8
 800582c:	ffff0000 	.word	0xffff0000

08005830 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005830:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005832:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8005836:	2c01      	cmp	r4, #1
 8005838:	d03a      	beq.n	80058b0 <HAL_DMA2D_Start+0x80>
 800583a:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800583c:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 800583e:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005842:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005844:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005848:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800584c:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005850:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005852:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005856:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 800585a:	ea43 030c 	orr.w	r3, r3, ip
 800585e:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005860:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005862:	d00a      	beq.n	800587a <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005864:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 8005868:	d025      	beq.n	80058b6 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800586a:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800586c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800586e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	6023      	str	r3, [r4, #0]
}
 8005876:	bc70      	pop	{r4, r5, r6}
 8005878:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800587a:	6883      	ldr	r3, [r0, #8]
 800587c:	b1b3      	cbz	r3, 80058ac <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800587e:	2b01      	cmp	r3, #1
 8005880:	d026      	beq.n	80058d0 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005882:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005884:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005888:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800588c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800588e:	d022      	beq.n	80058d6 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005890:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005892:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005896:	d010      	beq.n	80058ba <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 8005898:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 800589a:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800589c:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800589e:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80058a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80058a4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80058a8:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80058ac:	63a1      	str	r1, [r4, #56]	@ 0x38
 80058ae:	e7dd      	b.n	800586c <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 80058b0:	2002      	movs	r0, #2
}
 80058b2:	bc70      	pop	{r4, r5, r6}
 80058b4:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80058b6:	6161      	str	r1, [r4, #20]
 80058b8:	e7d8      	b.n	800586c <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 80058ba:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 80058bc:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80058be:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 80058c0:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80058c2:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80058c6:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80058ca:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80058ce:	e7ed      	b.n	80058ac <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 80058d0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80058d4:	e7ea      	b.n	80058ac <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 80058d6:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 80058d8:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80058da:	02db      	lsls	r3, r3, #11
 80058dc:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80058e0:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 80058e4:	e7e2      	b.n	80058ac <HAL_DMA2D_Start+0x7c>
 80058e6:	bf00      	nop

080058e8 <HAL_DMA2D_PollForTransfer>:
{
 80058e8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80058ea:	2300      	movs	r3, #0
{
 80058ec:	b082      	sub	sp, #8
 80058ee:	4604      	mov	r4, r0
 80058f0:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 80058f2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80058f4:	6803      	ldr	r3, [r0, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	07d6      	lsls	r6, r2, #31
 80058fa:	d40f      	bmi.n	800591c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80058fc:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80058fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005900:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8005902:	0691      	lsls	r1, r2, #26
 8005904:	d432      	bmi.n	800596c <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005906:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005908:	2201      	movs	r2, #1
  return HAL_OK;
 800590a:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800590c:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800590e:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 8005912:	2300      	movs	r3, #0
 8005914:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8005918:	b002      	add	sp, #8
 800591a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800591c:	f7fe fa62 	bl	8003de4 <HAL_GetTick>
 8005920:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005922:	1c68      	adds	r0, r5, #1
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	d152      	bne.n	80059ce <HAL_DMA2D_PollForTransfer+0xe6>
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	0796      	lsls	r6, r2, #30
 800592c:	d4e6      	bmi.n	80058fc <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005932:	9a01      	ldr	r2, [sp, #4]
 8005934:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8005938:	d0f6      	beq.n	8005928 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800593a:	9a01      	ldr	r2, [sp, #4]
 800593c:	0691      	lsls	r1, r2, #26
 800593e:	d503      	bpl.n	8005948 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005940:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005942:	f042 0202 	orr.w	r2, r2, #2
 8005946:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005948:	9a01      	ldr	r2, [sp, #4]
 800594a:	07d2      	lsls	r2, r2, #31
 800594c:	d503      	bpl.n	8005956 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800594e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005956:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005958:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800595a:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800595c:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 8005960:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8005968:	b002      	add	sp, #8
 800596a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800596c:	f7fe fa3a 	bl	8003de4 <HAL_GetTick>
 8005970:	1c6a      	adds	r2, r5, #1
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005972:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8005974:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005976:	d13b      	bne.n	80059f0 <HAL_DMA2D_PollForTransfer+0x108>
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	06d1      	lsls	r1, r2, #27
 800597c:	d4c3      	bmi.n	8005906 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005982:	9a01      	ldr	r2, [sp, #4]
 8005984:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8005988:	d0f6      	beq.n	8005978 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800598a:	9a01      	ldr	r2, [sp, #4]
 800598c:	0716      	lsls	r6, r2, #28
 800598e:	d503      	bpl.n	8005998 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005990:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005992:	f042 0204 	orr.w	r2, r2, #4
 8005996:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005998:	9a01      	ldr	r2, [sp, #4]
 800599a:	0695      	lsls	r5, r2, #26
 800599c:	d503      	bpl.n	80059a6 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800599e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059a0:	f042 0202 	orr.w	r2, r2, #2
 80059a4:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80059a6:	9a01      	ldr	r2, [sp, #4]
 80059a8:	07d0      	lsls	r0, r2, #31
 80059aa:	d503      	bpl.n	80059b4 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80059ac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80059b4:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80059b6:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80059b8:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80059ba:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 80059be:	e7cf      	b.n	8005960 <HAL_DMA2D_PollForTransfer+0x78>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059c0:	f7fe fa10 	bl	8003de4 <HAL_GetTick>
 80059c4:	1b80      	subs	r0, r0, r6
 80059c6:	42a8      	cmp	r0, r5
 80059c8:	d81c      	bhi.n	8005a04 <HAL_DMA2D_PollForTransfer+0x11c>
 80059ca:	b1dd      	cbz	r5, 8005a04 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	0790      	lsls	r0, r2, #30
 80059d2:	d493      	bmi.n	80058fc <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80059d8:	9a01      	ldr	r2, [sp, #4]
 80059da:	f012 0f21 	tst.w	r2, #33	@ 0x21
 80059de:	d0ef      	beq.n	80059c0 <HAL_DMA2D_PollForTransfer+0xd8>
 80059e0:	e7ab      	b.n	800593a <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fe f9ff 	bl	8003de4 <HAL_GetTick>
 80059e6:	1b80      	subs	r0, r0, r6
 80059e8:	42a8      	cmp	r0, r5
 80059ea:	d80b      	bhi.n	8005a04 <HAL_DMA2D_PollForTransfer+0x11c>
 80059ec:	b155      	cbz	r5, 8005a04 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	06d2      	lsls	r2, r2, #27
 80059f4:	d487      	bmi.n	8005906 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80059fa:	9a01      	ldr	r2, [sp, #4]
 80059fc:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8005a00:	d0ef      	beq.n	80059e2 <HAL_DMA2D_PollForTransfer+0xfa>
 8005a02:	e7c2      	b.n	800598a <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a06:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 8005a08:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a0a:	f043 0320 	orr.w	r3, r3, #32
 8005a0e:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a10:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 8005a14:	e77d      	b.n	8005912 <HAL_DMA2D_PollForTransfer+0x2a>
 8005a16:	bf00      	nop

08005a18 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8005a18:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 8005a1c:	2a01      	cmp	r2, #1
 8005a1e:	d05f      	beq.n	8005ae0 <HAL_DMA2D_ConfigLayer+0xc8>
 8005a20:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a22:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a26:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a28:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8005a2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8005a30:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8005a32:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a34:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 8005a38:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a3c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a3e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005a40:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a42:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005a44:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a4a:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a4e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a50:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a52:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a56:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a5a:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a5c:	d923      	bls.n	8005aa6 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005a5e:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005a62:	b971      	cbnz	r1, 8005a82 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a64:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005a66:	491f      	ldr	r1, [pc, #124]	@ (8005ae4 <HAL_DMA2D_ConfigLayer+0xcc>)
 8005a68:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a6a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a6c:	4311      	orrs	r1, r2
 8005a6e:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a70:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 8005a72:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a74:	2101      	movs	r1, #1
  return HAL_OK;
 8005a76:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a78:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 8005a7c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8005a80:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005a82:	2d0b      	cmp	r5, #11
 8005a84:	d12a      	bne.n	8005adc <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005a86:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8005a88:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8005a8c:	4816      	ldr	r0, [pc, #88]	@ (8005ae8 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a8e:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a92:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a94:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a98:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a9a:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005aa2:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005aa4:	e7e5      	b.n	8005a72 <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005aa6:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 8005aaa:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005aac:	b959      	cbnz	r1, 8005ac6 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005aae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005ab0:	490c      	ldr	r1, [pc, #48]	@ (8005ae4 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ab2:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ab4:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005ab6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ab8:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005aba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005abe:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ac0:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005ac2:	62a0      	str	r0, [r4, #40]	@ 0x28
 8005ac4:	e7d5      	b.n	8005a72 <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ac6:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005ac8:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005acc:	4905      	ldr	r1, [pc, #20]	@ (8005ae4 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ace:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ad0:	4029      	ands	r1, r5
 8005ad2:	4311      	orrs	r1, r2
 8005ad4:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ad6:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005ad8:	6226      	str	r6, [r4, #32]
 8005ada:	e7ca      	b.n	8005a72 <HAL_DMA2D_ConfigLayer+0x5a>
 8005adc:	4801      	ldr	r0, [pc, #4]	@ (8005ae4 <HAL_DMA2D_ConfigLayer+0xcc>)
 8005ade:	e7d6      	b.n	8005a8e <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 8005ae0:	2002      	movs	r0, #2
}
 8005ae2:	4770      	bx	lr
 8005ae4:	00ccfff0 	.word	0x00ccfff0
 8005ae8:	00c0fff0 	.word	0x00c0fff0

08005aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005af0:	680c      	ldr	r4, [r1, #0]
{
 8005af2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005af4:	2c00      	cmp	r4, #0
 8005af6:	f000 80a5 	beq.w	8005c44 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 8005afa:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005afc:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b00:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b04:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b06:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 8005b0a:	ea1c 0a04 	ands.w	sl, ip, r4
 8005b0e:	f000 8094 	beq.w	8005c3a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b12:	9900      	ldr	r1, [sp, #0]
 8005b14:	005f      	lsls	r7, r3, #1
 8005b16:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b18:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b1a:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b1e:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b22:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b26:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b28:	f1b8 0f01 	cmp.w	r8, #1
 8005b2c:	f240 808d 	bls.w	8005c4a <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b30:	2a03      	cmp	r2, #3
 8005b32:	f040 80cb 	bne.w	8005ccc <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b36:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8005b38:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b3a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b3e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b42:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8005b46:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b48:	d077      	beq.n	8005c3a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b4a:	4e7f      	ldr	r6, [pc, #508]	@ (8005d48 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b4c:	f003 0703 	and.w	r7, r3, #3
 8005b50:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b52:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b56:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b58:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b5c:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b60:	497a      	ldr	r1, [pc, #488]	@ (8005d4c <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b62:	f8c6 2154 	str.w	r2, [r6, #340]	@ 0x154
 8005b66:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
 8005b6a:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b6e:	4288      	cmp	r0, r1
 8005b70:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b74:	f002 0202 	and.w	r2, r2, #2
 8005b78:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005b7c:	9203      	str	r2, [sp, #12]
 8005b7e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005b80:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b82:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b86:	d031      	beq.n	8005bec <HAL_GPIO_Init+0x100>
 8005b88:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b8c:	4288      	cmp	r0, r1
 8005b8e:	f000 80b0 	beq.w	8005cf2 <HAL_GPIO_Init+0x206>
 8005b92:	496f      	ldr	r1, [pc, #444]	@ (8005d50 <HAL_GPIO_Init+0x264>)
 8005b94:	4288      	cmp	r0, r1
 8005b96:	f000 80b2 	beq.w	8005cfe <HAL_GPIO_Init+0x212>
 8005b9a:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8005d54 <HAL_GPIO_Init+0x268>
 8005b9e:	4560      	cmp	r0, ip
 8005ba0:	f000 80a1 	beq.w	8005ce6 <HAL_GPIO_Init+0x1fa>
 8005ba4:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8005d58 <HAL_GPIO_Init+0x26c>
 8005ba8:	4560      	cmp	r0, ip
 8005baa:	f000 80b4 	beq.w	8005d16 <HAL_GPIO_Init+0x22a>
 8005bae:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8005d5c <HAL_GPIO_Init+0x270>
 8005bb2:	4560      	cmp	r0, ip
 8005bb4:	f000 80b5 	beq.w	8005d22 <HAL_GPIO_Init+0x236>
 8005bb8:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8005d60 <HAL_GPIO_Init+0x274>
 8005bbc:	4560      	cmp	r0, ip
 8005bbe:	f000 80a4 	beq.w	8005d0a <HAL_GPIO_Init+0x21e>
 8005bc2:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8005d64 <HAL_GPIO_Init+0x278>
 8005bc6:	4560      	cmp	r0, ip
 8005bc8:	f000 80b1 	beq.w	8005d2e <HAL_GPIO_Init+0x242>
 8005bcc:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8005d68 <HAL_GPIO_Init+0x27c>
 8005bd0:	4560      	cmp	r0, ip
 8005bd2:	f000 80b2 	beq.w	8005d3a <HAL_GPIO_Init+0x24e>
 8005bd6:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8005d6c <HAL_GPIO_Init+0x280>
 8005bda:	4560      	cmp	r0, ip
 8005bdc:	bf0c      	ite	eq
 8005bde:	f04f 0c09 	moveq.w	ip, #9
 8005be2:	f04f 0c0a 	movne.w	ip, #10
 8005be6:	fa0c f707 	lsl.w	r7, ip, r7
 8005bea:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bec:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bee:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8005bf0:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8005bf4:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8005bf8:	bf4c      	ite	mi
 8005bfa:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8005bfe:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c00:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8005c02:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8005c06:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8005c0a:	bf54      	ite	pl
 8005c0c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005c0e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c12:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8005c14:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005c18:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8005c1c:	bf54      	ite	pl
 8005c1e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005c20:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c24:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005c26:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8005c2a:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8005c2e:	bf54      	ite	pl
 8005c30:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005c32:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c36:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8005c3a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c3c:	fa34 f203 	lsrs.w	r2, r4, r3
 8005c40:	f47f af61 	bne.w	8005b06 <HAL_GPIO_Init+0x1a>
  }
}
 8005c44:	b005      	add	sp, #20
 8005c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c4a:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c4c:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8005c4e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c52:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c54:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c58:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c5c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c5e:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c62:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8005c64:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c68:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8005c6c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c70:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c74:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c78:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8005c7c:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c80:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8005c84:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c88:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c8c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8005c90:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c94:	f47f af4f 	bne.w	8005b36 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c98:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c9c:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8005c9e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ca2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ca6:	6909      	ldr	r1, [r1, #16]
 8005ca8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005cac:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8005cb0:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cb4:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cb6:	210f      	movs	r1, #15
 8005cb8:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cbc:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cbe:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cc2:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005cc6:	f8c8 c020 	str.w	ip, [r8, #32]
 8005cca:	e734      	b.n	8005b36 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ccc:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8005cce:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cd2:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cd4:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cd8:	fa01 fc07 	lsl.w	ip, r1, r7
 8005cdc:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8005ce0:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce4:	e727      	b.n	8005b36 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ce6:	f04f 0c03 	mov.w	ip, #3
 8005cea:	fa0c f707 	lsl.w	r7, ip, r7
 8005cee:	433a      	orrs	r2, r7
 8005cf0:	e77c      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005cf2:	f04f 0c01 	mov.w	ip, #1
 8005cf6:	fa0c f707 	lsl.w	r7, ip, r7
 8005cfa:	433a      	orrs	r2, r7
 8005cfc:	e776      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005cfe:	f04f 0c02 	mov.w	ip, #2
 8005d02:	fa0c f707 	lsl.w	r7, ip, r7
 8005d06:	433a      	orrs	r2, r7
 8005d08:	e770      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005d0a:	f04f 0c06 	mov.w	ip, #6
 8005d0e:	fa0c f707 	lsl.w	r7, ip, r7
 8005d12:	433a      	orrs	r2, r7
 8005d14:	e76a      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005d16:	f04f 0c04 	mov.w	ip, #4
 8005d1a:	fa0c f707 	lsl.w	r7, ip, r7
 8005d1e:	433a      	orrs	r2, r7
 8005d20:	e764      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005d22:	f04f 0c05 	mov.w	ip, #5
 8005d26:	fa0c f707 	lsl.w	r7, ip, r7
 8005d2a:	433a      	orrs	r2, r7
 8005d2c:	e75e      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005d2e:	f04f 0c07 	mov.w	ip, #7
 8005d32:	fa0c f707 	lsl.w	r7, ip, r7
 8005d36:	433a      	orrs	r2, r7
 8005d38:	e758      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005d3a:	f04f 0c08 	mov.w	ip, #8
 8005d3e:	fa0c f707 	lsl.w	r7, ip, r7
 8005d42:	433a      	orrs	r2, r7
 8005d44:	e752      	b.n	8005bec <HAL_GPIO_Init+0x100>
 8005d46:	bf00      	nop
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	58020000 	.word	0x58020000
 8005d50:	58020800 	.word	0x58020800
 8005d54:	58020c00 	.word	0x58020c00
 8005d58:	58021000 	.word	0x58021000
 8005d5c:	58021400 	.word	0x58021400
 8005d60:	58021800 	.word	0x58021800
 8005d64:	58021c00 	.word	0x58021c00
 8005d68:	58022000 	.word	0x58022000
 8005d6c:	58022400 	.word	0x58022400

08005d70 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d70:	6903      	ldr	r3, [r0, #16]
 8005d72:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005d74:	bf14      	ite	ne
 8005d76:	2001      	movne	r0, #1
 8005d78:	2000      	moveq	r0, #0
 8005d7a:	4770      	bx	lr

08005d7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d7c:	b902      	cbnz	r2, 8005d80 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d7e:	0409      	lsls	r1, r1, #16
 8005d80:	6181      	str	r1, [r0, #24]
  }
}
 8005d82:	4770      	bx	lr

08005d84 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005d84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d88:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8005d8c:	4201      	tst	r1, r0
 8005d8e:	d100      	bne.n	8005d92 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8005d90:	4770      	bx	lr
{
 8005d92:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d98:	f7fd fc4e 	bl	8003638 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005d9c:	bd08      	pop	{r3, pc}
 8005d9e:	bf00      	nop

08005da0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8005da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da4:	4699      	mov	r9, r3
 8005da6:	4680      	mov	r8, r0
 8005da8:	460d      	mov	r5, r1
 8005daa:	4614      	mov	r4, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8005dac:	7803      	ldrb	r3, [r0, #0]
 8005dae:	2601      	movs	r6, #1
  p = 0;
 8005db0:	2700      	movs	r7, #0
 8005db2:	e005      	b.n	8005dc0 <JPEG_Bits_To_SizeCodes+0x20>
    i = (uint32_t)Bits[l];
 8005db4:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    if ((p + i) > 256UL)
 8005db8:	19da      	adds	r2, r3, r7
 8005dba:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005dbe:	d83a      	bhi.n	8005e36 <JPEG_Bits_To_SizeCodes+0x96>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8005dc0:	19e8      	adds	r0, r5, r7
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4631      	mov	r1, r6
    while (i != 0UL)
 8005dc6:	b113      	cbz	r3, 8005dce <JPEG_Bits_To_SizeCodes+0x2e>
      p++;
 8005dc8:	441f      	add	r7, r3
      Huffsize[p] = (uint8_t) l + 1U;
 8005dca:	f008 fbd3 	bl	800e574 <memset>
  for (l = 0; l < 16UL; l++)
 8005dce:	2e10      	cmp	r6, #16
    if ((p + i) > 256UL)
 8005dd0:	f106 0601 	add.w	r6, r6, #1
  for (l = 0; l < 16UL; l++)
 8005dd4:	d1ee      	bne.n	8005db4 <JPEG_Bits_To_SizeCodes+0x14>
      i--;
    }
  }
  Huffsize[p] = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	55eb      	strb	r3, [r5, r7]
  *LastK = p;
 8005dda:	f8c9 7000 	str.w	r7, [r9]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
 8005dde:	7829      	ldrb	r1, [r5, #0]
 8005de0:	460a      	mov	r2, r1
  p = 0;
  while (Huffsize[p] != 0U)
 8005de2:	b329      	cbz	r1, 8005e30 <JPEG_Bits_To_SizeCodes+0x90>
  code = 0;
 8005de4:	4699      	mov	r9, r3
 8005de6:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8005dea:	2701      	movs	r7, #1
  p = 0;
 8005dec:	461e      	mov	r6, r3
    while (((uint32_t) Huffsize[p]) == si)
 8005dee:	4291      	cmp	r1, r2
 8005df0:	d124      	bne.n	8005e3c <JPEG_Bits_To_SizeCodes+0x9c>
 8005df2:	eb06 0008 	add.w	r0, r6, r8
 8005df6:	eb05 0c06 	add.w	ip, r5, r6
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      Huffcode[p] = code;
 8005e00:	f840 3f04 	str.w	r3, [r0, #4]!
      code++;
 8005e04:	4619      	mov	r1, r3
    while (((uint32_t) Huffsize[p]) == si)
 8005e06:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
 8005e0a:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8005e0c:	4596      	cmp	lr, r2
 8005e0e:	d0f7      	beq.n	8005e00 <JPEG_Bits_To_SizeCodes+0x60>
 8005e10:	3601      	adds	r6, #1
 8005e12:	eba6 0609 	sub.w	r6, r6, r9
      p++;
 8005e16:	440e      	add	r6, r1
    if(si > 31UL)
 8005e18:	2a1f      	cmp	r2, #31
 8005e1a:	d80c      	bhi.n	8005e36 <JPEG_Bits_To_SizeCodes+0x96>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8005e1c:	fa07 f102 	lsl.w	r1, r7, r2
 8005e20:	4299      	cmp	r1, r3
 8005e22:	d908      	bls.n	8005e36 <JPEG_Bits_To_SizeCodes+0x96>
  while (Huffsize[p] != 0U)
 8005e24:	5da9      	ldrb	r1, [r5, r6]
    {
      return HAL_ERROR;
    }
    code <<= 1;
 8005e26:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 8005e2a:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d1de      	bne.n	8005dee <JPEG_Bits_To_SizeCodes+0x4e>
  }
  /* Return function status */
  return HAL_OK;
 8005e30:	2000      	movs	r0, #0
}
 8005e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8005e36:	2001      	movs	r0, #1
}
 8005e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (((uint32_t) Huffsize[p]) == si)
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	e7eb      	b.n	8005e18 <JPEG_Bits_To_SizeCodes+0x78>

08005e40 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8005e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e42:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8005e46:	460d      	mov	r5, r1
 8005e48:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8005e4a:	ab01      	add	r3, sp, #4
 8005e4c:	aa43      	add	r2, sp, #268	@ 0x10c
 8005e4e:	a902      	add	r1, sp, #8
 8005e50:	f7ff ffa6 	bl	8005da0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8005e54:	b9d0      	cbnz	r0, 8005e8c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8005e56:	9f01      	ldr	r7, [sp, #4]
 8005e58:	b1c7      	cbz	r7, 8005e8c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
 8005e5a:	370f      	adds	r7, #15
 8005e5c:	f50d 7e86 	add.w	lr, sp, #268	@ 0x10c
 8005e60:	a902      	add	r1, sp, #8
 8005e62:	f104 0c0f 	add.w	ip, r4, #15
 8005e66:	4427      	add	r7, r4
 8005e68:	e009      	b.n	8005e7e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
 8005e6e:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005e70:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005e74:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005e78:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005e7a:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8005e7c:	d006      	beq.n	8005e8c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
 8005e7e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005e82:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005e84:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005e88:	d9ef      	bls.n	8005e6a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005e8a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8005e8c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8005e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e92:	bf00      	nop

08005e94 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8005e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8005e98:	6804      	ldr	r4, [r0, #0]
{
 8005e9a:	b093      	sub	sp, #76	@ 0x4c
 8005e9c:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8005e9e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	f000 809d 	beq.w	8005fe2 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8005ea8:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d003      	beq.n	8005eb8 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8005eb0:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8005eb2:	b013      	add	sp, #76	@ 0x4c
 8005eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8005eb8:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8005ebc:	a903      	add	r1, sp, #12
 8005ebe:	f7ff ffbf 	bl	8005e40 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d1f5      	bne.n	8005eb2 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
 8005ec6:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005eca:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005ece:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
 8005ed2:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005ed4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
 8005ed8:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005eda:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8005ede:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005ee2:	f40a 6a70 	and.w	sl, sl, #3840	@ 0xf00
 8005ee6:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005eea:	f40e 6e70 	and.w	lr, lr, #3840	@ 0xf00
 8005eee:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005ef0:	f89d 9015 	ldrb.w	r9, [sp, #21]
 8005ef4:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005ef8:	f89d c014 	ldrb.w	ip, [sp, #20]
 8005efc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f00:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f04:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f08:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f0c:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f0e:	f409 6970 	and.w	r9, r9, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f12:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8005f16:	f40c 6c70 	and.w	ip, ip, #3840	@ 0xf00
 8005f1a:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f1e:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f22:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f26:	f89d 7011 	ldrb.w	r7, [sp, #17]
 8005f2a:	f408 6870 	and.w	r8, r8, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f2e:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
 8005f30:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f34:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005f38:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f3c:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
 8005f3e:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f42:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f44:	f89d e03c 	ldrb.w	lr, [sp, #60]	@ 0x3c
 8005f48:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f4c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f50:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8005f54:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f58:	f89d e038 	ldrb.w	lr, [sp, #56]	@ 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f5c:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f64:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8005f68:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f6c:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
 8005f70:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f74:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
 8005f76:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f7a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f7e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8005f82:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f86:	f40b 6b70 	and.w	fp, fp, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f8a:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f8e:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 8005f92:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
 8005f96:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8005f9a:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005f9e:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8005fa2:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005fa4:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8005fa8:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
 8005faa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8005fae:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005fb2:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8005fb6:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005fb8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8005fbc:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
 8005fbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005fc2:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005fc6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8005fca:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005fcc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005fd0:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
 8005fd4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005fd8:	f844 3c18 	str.w	r3, [r4, #-24]
}
 8005fdc:	b013      	add	sp, #76	@ 0x4c
 8005fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8005fe2:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
  if (HuffTableDC != NULL)
 8005fe6:	e769      	b.n	8005ebc <JPEG_Set_HuffDC_Mem+0x28>

08005fe8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8005fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8005fec:	6804      	ldr	r4, [r0, #0]
{
 8005fee:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 8005ff2:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8005ff4:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d041      	beq.n	8006080 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8005ffc:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8006000:	429a      	cmp	r2, r3
 8006002:	d004      	beq.n	800600e <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8006004:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8006006:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 800600a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800600e:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8006012:	4628      	mov	r0, r5
 8006014:	466b      	mov	r3, sp
 8006016:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800601a:	a901      	add	r1, sp, #4
 800601c:	f7ff fec0 	bl	8005da0 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8006020:	2800      	cmp	r0, #0
 8006022:	d1f0      	bne.n	8006006 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 8006024:	9b00      	ldr	r3, [sp, #0]
 8006026:	b373      	cbz	r3, 8006086 <JPEG_Set_HuffAC_Mem+0x9e>
 8006028:	330f      	adds	r3, #15
 800602a:	f20d 4c34 	addw	ip, sp, #1076	@ 0x434
 800602e:	af01      	add	r7, sp, #4
 8006030:	f105 020f 	add.w	r2, r5, #15
 8006034:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006038:	ae42      	add	r6, sp, #264	@ 0x108
 800603a:	e011      	b.n	8006060 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
 800603c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8006040:	2ba1      	cmp	r3, #161	@ 0xa1
 8006042:	d8df      	bhi.n	8006004 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8006044:	f817 5b01 	ldrb.w	r5, [r7], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006048:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 800604c:	f85c 1b04 	ldr.w	r1, [ip], #4
  while (k < lastK)
 8006050:	4572      	cmp	r2, lr
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8006052:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006056:	46b1      	mov	r9, r6
 8006058:	f8c8 10a4 	str.w	r1, [r8, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800605c:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
 800605e:	d014      	beq.n	800608a <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
 8006060:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
 8006064:	23a0      	movs	r3, #160	@ 0xa0
    if (l == 0UL)
 8006066:	2900      	cmp	r1, #0
 8006068:	d0ec      	beq.n	8006044 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
 800606a:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
 800606c:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8006070:	29f0      	cmp	r1, #240	@ 0xf0
      l = (msb * 10UL) + lsb - 1UL;
 8006072:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006076:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800607a:	d1df      	bne.n	800603c <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
 800607c:	23a1      	movs	r3, #161	@ 0xa1
 800607e:	e7e1      	b.n	8006044 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006080:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  if (HuffTableAC != NULL)
 8006084:	e7c5      	b.n	8006012 <JPEG_Set_HuffAC_Mem+0x2a>
 8006086:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
      *addressDef = 0x0FFF0FFF;
 800608a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
    *addressDef = 0x0FD10FD0;
 800608e:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <JPEG_Set_HuffAC_Mem+0x110>)
 8006090:	eba9 0c89 	sub.w	ip, r9, r9, lsl #2
 8006094:	4649      	mov	r1, r9
      *addressDef = 0x0FFF0FFF;
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	f10d 0566 	add.w	r5, sp, #102	@ 0x66
 800609c:	6063      	str	r3, [r4, #4]
 800609e:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 80060a2:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
 80060a4:	f103 33d3 	add.w	r3, r3, #3553874899	@ 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
 80060a8:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
 80060aa:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
 80060ae:	f103 232c 	add.w	r3, r3, #738208768	@ 0x2c002c00
 80060b2:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 80060b4:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80060b8:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 80060ba:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 80060be:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060c0:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060c4:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060c8:	0212      	lsls	r2, r2, #8
 80060ca:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060d4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    while (i > 1UL)
 80060d8:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060da:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060de:	433a      	orrs	r2, r7
    while (i > 1UL)
 80060e0:	42a9      	cmp	r1, r5
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80060e2:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
 80060e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ea:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80060ee:	d1e7      	bne.n	80060c0 <JPEG_Set_HuffAC_Mem+0xd8>
}
 80060f0:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 80060f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f8:	0fd10fd0 	.word	0x0fd10fd0

080060fc <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80060fc:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80060fe:	6803      	ldr	r3, [r0, #0]
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8006100:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006104:	6542      	str	r2, [r0, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006106:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8006108:	f002 0203 	and.w	r2, r2, #3
 800610c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	bf0c      	ite	eq
 8006112:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8006116:	f022 0208 	bicne.w	r2, r2, #8
 800611a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006126:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800612a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800612c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800612e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006132:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8006134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006136:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800613c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006142:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800614c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800614e:	f002 020c 	and.w	r2, r2, #12
 8006152:	2a08      	cmp	r2, #8
 8006154:	d00a      	beq.n	800616c <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006156:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8006158:	f002 020c 	and.w	r2, r2, #12
 800615c:	2a0c      	cmp	r2, #12
 800615e:	d000      	beq.n	8006162 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006160:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006164:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800616a:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800616c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800616e:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8006172:	631a      	str	r2, [r3, #48]	@ 0x30
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop

08006178 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8006178:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800617a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800617e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
{
 8006180:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8006182:	42aa      	cmp	r2, r5
 8006184:	d32a      	bcc.n	80061dc <JPEG_DMA_StartProcess+0x64>
 8006186:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8006188:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800618a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800618c:	6a86      	ldr	r6, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800618e:	42b3      	cmp	r3, r6
 8006190:	d324      	bcc.n	80061dc <JPEG_DMA_StartProcess+0x64>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8006192:	4f19      	ldr	r7, [pc, #100]	@ (80061f8 <JPEG_DMA_StartProcess+0x80>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8006194:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8006204 <JPEG_DMA_StartProcess+0x8c>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8006198:	654f      	str	r7, [r1, #84]	@ 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800619a:	f8c1 c044 	str.w	ip, [r1, #68]	@ 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800619e:	4917      	ldr	r1, [pc, #92]	@ (80061fc <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80061a0:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80061a2:	6441      	str	r1, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80061a4:	4916      	ldr	r1, [pc, #88]	@ (8006200 <JPEG_DMA_StartProcess+0x88>)
 80061a6:	6581      	str	r1, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80061a8:	b1a5      	cbz	r5, 80061d4 <JPEG_DMA_StartProcess+0x5c>
 80061aa:	b19e      	cbz	r6, 80061d4 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80061ac:	fbb2 f1f5 	udiv	r1, r2, r5
 80061b0:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80061b4:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80061b6:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80061b8:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80061ba:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80061bc:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80061be:	fbb3 f2f6 	udiv	r2, r3, r6
 80061c2:	fb06 3212 	mls	r2, r6, r2, r3
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80061ca:	9500      	str	r5, [sp, #0]
 80061cc:	69e2      	ldr	r2, [r4, #28]
 80061ce:	f001 f915 	bl	80073fc <HAL_MDMA_Start_IT>
 80061d2:	b130      	cbz	r0, 80061e2 <JPEG_DMA_StartProcess+0x6a>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80061d4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80061d6:	f043 0304 	orr.w	r3, r3, #4
 80061da:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80061dc:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80061de:	b003      	add	sp, #12
 80061e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80061e6:	69a1      	ldr	r1, [r4, #24]
 80061e8:	3240      	adds	r2, #64	@ 0x40
 80061ea:	9500      	str	r5, [sp, #0]
 80061ec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80061ee:	f001 f905 	bl	80073fc <HAL_MDMA_Start_IT>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d0f3      	beq.n	80061de <JPEG_DMA_StartProcess+0x66>
 80061f6:	e7ed      	b.n	80061d4 <JPEG_DMA_StartProcess+0x5c>
 80061f8:	080066a9 	.word	0x080066a9
 80061fc:	08006831 	.word	0x08006831
 8006200:	080068b1 	.word	0x080068b1
 8006204:	080066d5 	.word	0x080066d5

08006208 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8006208:	6803      	ldr	r3, [r0, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	f002 0203 	and.w	r2, r2, #3
 8006210:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
 8006212:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006216:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8006218:	d018      	beq.n	800624c <HAL_JPEG_GetInfo.part.0+0x44>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	f012 0203 	ands.w	r2, r2, #3
 8006220:	d10b      	bne.n	800623a <HAL_JPEG_GetInfo.part.0+0x32>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8006222:	6859      	ldr	r1, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8006224:	f8c9 2000 	str.w	r2, [r9]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8006228:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800622a:	0c09      	lsrs	r1, r1, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800622c:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800622e:	f8c9 1008 	str.w	r1, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8006232:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8006236:	2100      	movs	r1, #0
 8006238:	e02f      	b.n	800629a <HAL_JPEG_GetInfo.part.0+0x92>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	f002 0203 	and.w	r2, r2, #3
 8006240:	2a03      	cmp	r2, #3
 8006242:	f000 8097 	beq.w	8006374 <HAL_JPEG_GetInfo.part.0+0x16c>
    return HAL_ERROR;
 8006246:	2001      	movs	r0, #1
}
 8006248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800624c:	2110      	movs	r1, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800624e:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8006250:	f8c9 1000 	str.w	r1, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8006254:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8006256:	68d9      	ldr	r1, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8006258:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800625c:	0c09      	lsrs	r1, r1, #16
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800625e:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8006260:	695c      	ldr	r4, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8006262:	f8c9 100c 	str.w	r1, [r9, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8006266:	0916      	lsrs	r6, r2, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8006268:	6999      	ldr	r1, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800626a:	f014 0ff0 	tst.w	r4, #240	@ 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800626e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8006272:	ea4f 1714 	mov.w	r7, r4, lsr #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8006276:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800627a:	d105      	bne.n	8006288 <HAL_JPEG_GetInfo.part.0+0x80>
 800627c:	2a01      	cmp	r2, #1
 800627e:	d103      	bne.n	8006288 <HAL_JPEG_GetInfo.part.0+0x80>
 8006280:	070d      	lsls	r5, r1, #28
 8006282:	d1d8      	bne.n	8006236 <HAL_JPEG_GetInfo.part.0+0x2e>
 8006284:	2102      	movs	r1, #2
 8006286:	e008      	b.n	800629a <HAL_JPEG_GetInfo.part.0+0x92>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8006288:	433e      	orrs	r6, r7
 800628a:	0734      	lsls	r4, r6, #28
 800628c:	d0d3      	beq.n	8006236 <HAL_JPEG_GetInfo.part.0+0x2e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800628e:	430f      	orrs	r7, r1
 8006290:	0739      	lsls	r1, r7, #28
 8006292:	d1d0      	bne.n	8006236 <HAL_JPEG_GetInfo.part.0+0x2e>
 8006294:	2a03      	cmp	r2, #3
 8006296:	d1ce      	bne.n	8006236 <HAL_JPEG_GetInfo.part.0+0x2e>
 8006298:	2101      	movs	r1, #1
 800629a:	4a42      	ldr	r2, [pc, #264]	@ (80063a4 <HAL_JPEG_GetInfo.part.0+0x19c>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800629c:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80062a0:	f8c9 1004 	str.w	r1, [r9, #4]
  uint32_t quality = 0;
 80062a4:	2600      	movs	r6, #0
 80062a6:	f102 0440 	add.w	r4, r2, #64	@ 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80062aa:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80062ae:	f241 3188 	movw	r1, #5000	@ 0x1388
 80062b2:	e033      	b.n	800631c <HAL_JPEG_GetInfo.part.0+0x114>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80062b4:	f892 8001 	ldrb.w	r8, [r2, #1]
 80062b8:	fb0e f707 	mul.w	r7, lr, r7
 80062bc:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80062be:	f815 8008 	ldrb.w	r8, [r5, r8]
 80062c2:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 80062c6:	2f64      	cmp	r7, #100	@ 0x64
 80062c8:	d958      	bls.n	800637c <HAL_JPEG_GetInfo.part.0+0x174>
          quality += 5000UL / scale;
 80062ca:	fbb1 f7f7 	udiv	r7, r1, r7
 80062ce:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80062d0:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
 80062d4:	2f01      	cmp	r7, #1
 80062d6:	d03d      	beq.n	8006354 <HAL_JPEG_GetInfo.part.0+0x14c>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80062d8:	f892 8002 	ldrb.w	r8, [r2, #2]
 80062dc:	fb0e f707 	mul.w	r7, lr, r7
 80062e0:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80062e2:	f815 8008 	ldrb.w	r8, [r5, r8]
 80062e6:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 80062ea:	2f64      	cmp	r7, #100	@ 0x64
 80062ec:	d955      	bls.n	800639a <HAL_JPEG_GetInfo.part.0+0x192>
          quality += 5000UL / scale;
 80062ee:	fbb1 f7f7 	udiv	r7, r1, r7
 80062f2:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80062f4:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d030      	beq.n	800635c <HAL_JPEG_GetInfo.part.0+0x154>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80062fa:	78d7      	ldrb	r7, [r2, #3]
 80062fc:	fb0e f303 	mul.w	r3, lr, r3
 8006300:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8006302:	5def      	ldrb	r7, [r5, r7]
 8006304:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
 8006308:	2b64      	cmp	r3, #100	@ 0x64
 800630a:	d93c      	bls.n	8006386 <HAL_JPEG_GetInfo.part.0+0x17e>
          quality += 5000UL / scale;
 800630c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006310:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006312:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
 8006314:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006318:	4294      	cmp	r4, r2
 800631a:	d025      	beq.n	8006368 <HAL_JPEG_GetInfo.part.0+0x160>
    quantRow = *tableAddress;
 800631c:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8006320:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
 8006322:	2f01      	cmp	r7, #1
 8006324:	d028      	beq.n	8006378 <HAL_JPEG_GetInfo.part.0+0x170>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8006326:	f892 8000 	ldrb.w	r8, [r2]
 800632a:	fb0e f707 	mul.w	r7, lr, r7
 800632e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8006330:	f815 8008 	ldrb.w	r8, [r5, r8]
 8006334:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8006338:	2f64      	cmp	r7, #100	@ 0x64
 800633a:	d929      	bls.n	8006390 <HAL_JPEG_GetInfo.part.0+0x188>
          quality += 5000UL / scale;
 800633c:	fbb1 f7f7 	udiv	r7, r1, r7
 8006340:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8006342:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
 8006346:	2f01      	cmp	r7, #1
 8006348:	d1b4      	bne.n	80062b4 <HAL_JPEG_GetInfo.part.0+0xac>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800634a:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
 800634e:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8006350:	2f01      	cmp	r7, #1
 8006352:	d1c1      	bne.n	80062d8 <HAL_JPEG_GetInfo.part.0+0xd0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8006354:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
 8006356:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8006358:	2b01      	cmp	r3, #1
 800635a:	d1ce      	bne.n	80062fa <HAL_JPEG_GetInfo.part.0+0xf2>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800635c:	3204      	adds	r2, #4
        quality += 100UL;
 800635e:	3664      	adds	r6, #100	@ 0x64
    tableAddress ++;
 8006360:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8006364:	4294      	cmp	r4, r2
 8006366:	d1d9      	bne.n	800631c <HAL_JPEG_GetInfo.part.0+0x114>
  }

  return (quality / 64UL);
 8006368:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
 800636a:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800636c:	f8c9 6010 	str.w	r6, [r9, #16]
}
 8006370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006374:	2130      	movs	r1, #48	@ 0x30
 8006376:	e76a      	b.n	800624e <HAL_JPEG_GetInfo.part.0+0x46>
        quality += 100UL;
 8006378:	3664      	adds	r6, #100	@ 0x64
 800637a:	e7e2      	b.n	8006342 <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += (200UL - scale) / 2UL;
 800637c:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8006380:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8006384:	e7a4      	b.n	80062d0 <HAL_JPEG_GetInfo.part.0+0xc8>
 8006386:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800638a:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 800638e:	e7c0      	b.n	8006312 <HAL_JPEG_GetInfo.part.0+0x10a>
 8006390:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8006394:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8006398:	e7d3      	b.n	8006342 <HAL_JPEG_GetInfo.part.0+0x13a>
 800639a:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 800639e:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 80063a2:	e7a7      	b.n	80062f4 <HAL_JPEG_GetInfo.part.0+0xec>
 80063a4:	0800ef54 	.word	0x0800ef54

080063a8 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 80063a8:	2800      	cmp	r0, #0
 80063aa:	f000 8107 	beq.w	80065bc <HAL_JPEG_Init+0x214>
{
 80063ae:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80063b0:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80063b4:	4605      	mov	r5, r0
 80063b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80f9 	beq.w	80065b2 <HAL_JPEG_Init+0x20a>
  __HAL_JPEG_ENABLE(hjpeg);
 80063c0:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80063c2:	2202      	movs	r2, #2
  hjpeg->QuantTable2 = NULL;
 80063c4:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80063c6:	497e      	ldr	r1, [pc, #504]	@ (80065c0 <HAL_JPEG_Init+0x218>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80063c8:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 80063cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	f022 0201 	bic.w	r2, r2, #1
 80063da:	6022      	str	r2, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80063dc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80063de:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80063e2:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80063e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80063e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063ea:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80063ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80063ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063f2:	6322      	str	r2, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80063f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80063f6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80063fa:	63a2      	str	r2, [r4, #56]	@ 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80063fc:	4a71      	ldr	r2, [pc, #452]	@ (80065c4 <HAL_JPEG_Init+0x21c>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80063fe:	63e9      	str	r1, [r5, #60]	@ 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006400:	2101      	movs	r1, #1
  hjpeg->QuantTable2 = NULL;
 8006402:	64ab      	str	r3, [r5, #72]	@ 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8006404:	e9c5 2310 	strd	r2, r3, [r5, #64]	@ 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006408:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
 800640c:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8006410:	4b6d      	ldr	r3, [pc, #436]	@ (80065c8 <HAL_JPEG_Init+0x220>)
 8006412:	f8c4 1368 	str.w	r1, [r4, #872]	@ 0x368
 8006416:	f8c4 2364 	str.w	r2, [r4, #868]	@ 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800641a:	496c      	ldr	r1, [pc, #432]	@ (80065cc <HAL_JPEG_Init+0x224>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800641c:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006420:	4b6b      	ldr	r3, [pc, #428]	@ (80065d0 <HAL_JPEG_Init+0x228>)
 8006422:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
 8006426:	4a6b      	ldr	r2, [pc, #428]	@ (80065d4 <HAL_JPEG_Init+0x22c>)
 8006428:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800642c:	4b6a      	ldr	r3, [pc, #424]	@ (80065d8 <HAL_JPEG_Init+0x230>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800642e:	f8c4 2370 	str.w	r2, [r4, #880]	@ 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006432:	496a      	ldr	r1, [pc, #424]	@ (80065dc <HAL_JPEG_Init+0x234>)
 8006434:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
 8006438:	4a69      	ldr	r2, [pc, #420]	@ (80065e0 <HAL_JPEG_Init+0x238>)
 800643a:	4b6a      	ldr	r3, [pc, #424]	@ (80065e4 <HAL_JPEG_Init+0x23c>)
 800643c:	f8c4 1384 	str.w	r1, [r4, #900]	@ 0x384
 8006440:	f8c4 2380 	str.w	r2, [r4, #896]	@ 0x380
 8006444:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8006448:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
  value = *address & 0xFFFF0000U;
 800644c:	f8d4 142c 	ldr.w	r1, [r4, #1068]	@ 0x42c
 8006450:	4a65      	ldr	r2, [pc, #404]	@ (80065e8 <HAL_JPEG_Init+0x240>)
 8006452:	400a      	ands	r2, r1
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8006454:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8006458:	4313      	orrs	r3, r2
  *address = value;
 800645a:	4a64      	ldr	r2, [pc, #400]	@ (80065ec <HAL_JPEG_Init+0x244>)
 800645c:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
 8006460:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006464:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8006468:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800646a:	f892 e0b3 	ldrb.w	lr, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800646e:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8006470:	f892 c0b0 	ldrb.w	ip, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006474:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
  while (index > 3UL)
 8006478:	4296      	cmp	r6, r2
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800647a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800647e:	ea43 030c 	orr.w	r3, r3, ip
 8006482:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006486:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800648a:	d1eb      	bne.n	8006464 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
 800648c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006490:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
  value = *address & 0xFFFF0000U;
 8006494:	4954      	ldr	r1, [pc, #336]	@ (80065e8 <HAL_JPEG_Init+0x240>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006496:	2001      	movs	r0, #1
  value = *address & 0x0000FFFFU;
 8006498:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800649a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800649e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 80064a2:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 80064a6:	400b      	ands	r3, r1
  *address = value;
 80064a8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80064ac:	f8c4 0438 	str.w	r0, [r4, #1080]	@ 0x438
 80064b0:	f8c4 2434 	str.w	r2, [r4, #1076]	@ 0x434
 80064b4:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80064b8:	f640 320a 	movw	r2, #2826	@ 0xb0a
  value = *address & 0x0000FFFFUL;
 80064bc:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 80064c0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80064c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80064c6:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 80064ca:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 80064ce:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80064d0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80064d2:	4b47      	ldr	r3, [pc, #284]	@ (80065f0 <HAL_JPEG_Init+0x248>)
  *address = value;
 80064d4:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80064d8:	f247 7202 	movw	r2, #30466	@ 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80064dc:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 80064e0:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80064e4:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 80064e8:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 80064ec:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80064ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 80064f2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 80064f6:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80064fa:	400b      	ands	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80064fc:	493d      	ldr	r1, [pc, #244]	@ (80065f4 <HAL_JPEG_Init+0x24c>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80064fe:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006500:	4b3d      	ldr	r3, [pc, #244]	@ (80065f8 <HAL_JPEG_Init+0x250>)
  *address = value;
 8006502:	f8c4 2458 	str.w	r2, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006506:	4a3d      	ldr	r2, [pc, #244]	@ (80065fc <HAL_JPEG_Init+0x254>)
 8006508:	f8c4 1454 	str.w	r1, [r4, #1108]	@ 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
 800650c:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006510:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
 8006514:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8006518:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800651c:	4a38      	ldr	r2, [pc, #224]	@ (8006600 <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFUL;
 800651e:	b29b      	uxth	r3, r3
 8006520:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8006524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8006528:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800652c:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8006530:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006532:	f892 e0b5 	ldrb.w	lr, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006536:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8006538:	f892 c0b2 	ldrb.w	ip, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800653c:	f892 00b3 	ldrb.w	r0, [r2, #179]	@ 0xb3
  while (index > 3UL)
 8006540:	4296      	cmp	r6, r2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006542:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8006546:	ea43 030c 	orr.w	r3, r3, ip
 800654a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800654e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8006552:	d1eb      	bne.n	800652c <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8006554:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8006558:	4924      	ldr	r1, [pc, #144]	@ (80065ec <HAL_JPEG_Init+0x244>)
 800655a:	4628      	mov	r0, r5
 800655c:	f7ff fd44 	bl	8005fe8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8006560:	b118      	cbz	r0, 800656a <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8006562:	2301      	movs	r3, #1
    return HAL_ERROR;
 8006564:	2001      	movs	r0, #1
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8006566:	652b      	str	r3, [r5, #80]	@ 0x50
}
 8006568:	bd70      	pop	{r4, r5, r6, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800656a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800656e:	4924      	ldr	r1, [pc, #144]	@ (8006600 <HAL_JPEG_Init+0x258>)
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff fd39 	bl	8005fe8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8006576:	2800      	cmp	r0, #0
 8006578:	d1f3      	bne.n	8006562 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800657a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800657e:	4921      	ldr	r1, [pc, #132]	@ (8006604 <HAL_JPEG_Init+0x25c>)
 8006580:	4628      	mov	r0, r5
 8006582:	f7ff fc87 	bl	8005e94 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8006586:	2800      	cmp	r0, #0
 8006588:	d1eb      	bne.n	8006562 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800658a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800658e:	491e      	ldr	r1, [pc, #120]	@ (8006608 <HAL_JPEG_Init+0x260>)
 8006590:	4628      	mov	r0, r5
 8006592:	f7ff fc7f 	bl	8005e94 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8006596:	2800      	cmp	r0, #0
 8006598:	d1e3      	bne.n	8006562 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800659a:	6863      	ldr	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800659c:	2201      	movs	r2, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800659e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a2:	6063      	str	r3, [r4, #4]
  hjpeg->JpegInCount = 0;
 80065a4:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 80065a6:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 80065a8:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80065ac:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 80065ae:	6568      	str	r0, [r5, #84]	@ 0x54
}
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 80065b2:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 80065b6:	f7fd f91d 	bl	80037f4 <HAL_JPEG_MspInit>
 80065ba:	e701      	b.n	80063c0 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
 80065bc:	2001      	movs	r0, #1
}
 80065be:	4770      	bx	lr
 80065c0:	0800ef14 	.word	0x0800ef14
 80065c4:	0800eed4 	.word	0x0800eed4
 80065c8:	01050100 	.word	0x01050100
 80065cc:	0b0a0908 	.word	0x0b0a0908
 80065d0:	07060504 	.word	0x07060504
 80065d4:	03020100 	.word	0x03020100
 80065d8:	7d010000 	.word	0x7d010000
 80065dc:	04040505 	.word	0x04040505
 80065e0:	03040203 	.word	0x03040203
 80065e4:	03010200 	.word	0x03010200
 80065e8:	ffff0000 	.word	0xffff0000
 80065ec:	0800f048 	.word	0x0800f048
 80065f0:	09080706 	.word	0x09080706
 80065f4:	01000404 	.word	0x01000404
 80065f8:	04040201 	.word	0x04040201
 80065fc:	05070403 	.word	0x05070403
 8006600:	0800ef94 	.word	0x0800ef94
 8006604:	0800f118 	.word	0x0800f118
 8006608:	0800f0fc 	.word	0x0800f0fc

0800660c <HAL_JPEG_GetInfo>:
  if ((hjpeg == NULL) || (pInfo == NULL))
 800660c:	b110      	cbz	r0, 8006614 <HAL_JPEG_GetInfo+0x8>
 800660e:	b109      	cbz	r1, 8006614 <HAL_JPEG_GetInfo+0x8>
 8006610:	f7ff bdfa 	b.w	8006208 <HAL_JPEG_GetInfo.part.0>
}
 8006614:	2001      	movs	r0, #1
 8006616:	4770      	bx	lr

08006618 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8006618:	2b00      	cmp	r3, #0
 800661a:	bf18      	it	ne
 800661c:	2900      	cmpne	r1, #0
 800661e:	d036      	beq.n	800668e <HAL_JPEG_Decode_DMA+0x76>
{
 8006620:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8006622:	fab0 f580 	clz	r5, r0
 8006626:	4604      	mov	r4, r0
 8006628:	096d      	lsrs	r5, r5, #5
 800662a:	b370      	cbz	r0, 800668a <HAL_JPEG_Decode_DMA+0x72>
  __HAL_LOCK(hjpeg);
 800662c:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 8006630:	f1bc 0f01 	cmp.w	ip, #1
 8006634:	d022      	beq.n	800667c <HAL_JPEG_Decode_DMA+0x64>
 8006636:	f04f 0c01 	mov.w	ip, #1
 800663a:	f880 c04c 	strb.w	ip, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800663e:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 8006642:	f1bc 0f01 	cmp.w	ip, #1
 8006646:	d117      	bne.n	8006678 <HAL_JPEG_Decode_DMA+0x60>
    hjpeg->InDataLength = InDataLength;
 8006648:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800664a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8006652:	2304      	movs	r3, #4
 8006654:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8006658:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800665a:	f023 030f 	bic.w	r3, r3, #15
 800665e:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8006660:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8006662:	f043 030e 	orr.w	r3, r3, #14
 8006666:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8006668:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 800666a:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800666c:	f7ff fd46 	bl	80060fc <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8006670:	f7ff fd82 	bl	8006178 <JPEG_DMA_StartProcess>
 8006674:	b920      	cbnz	r0, 8006680 <HAL_JPEG_Decode_DMA+0x68>
}
 8006676:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8006678:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800667c:	2002      	movs	r0, #2
}
 800667e:	bd38      	pop	{r3, r4, r5, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006680:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8006682:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006686:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800668a:	2001      	movs	r0, #1
}
 800668c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800668e:	2001      	movs	r0, #1
}
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop

08006694 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8006694:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8006696:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop

0800669c <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800669c:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800669e:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop

080066a4 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80066a8:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
 80066aa:	2101      	movs	r1, #1
{
 80066ac:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80066ae:	6803      	ldr	r3, [r0, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80066b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ba:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 80066c0:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80066c4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80066c6:	f043 0304 	orr.w	r3, r3, #4
 80066ca:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 80066cc:	f7fc f888 	bl	80027e0 <HAL_JPEG_ErrorCallback>
}
 80066d0:	bd08      	pop	{r3, pc}
 80066d2:	bf00      	nop

080066d4 <JPEG_MDMAInCpltCallback>:
{
 80066d4:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80066d6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 80066d8:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 80066dc:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80066e2:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80066e6:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 80066e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80066ea:	400b      	ands	r3, r1
 80066ec:	2b0c      	cmp	r3, #12
 80066ee:	d001      	beq.n	80066f4 <JPEG_MDMAInCpltCallback+0x20>
}
 80066f0:	b003      	add	sp, #12
 80066f2:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80066f4:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80066f6:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80066f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80066fa:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80066fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80066fe:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8006702:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8006708:	6a21      	ldr	r1, [r4, #32]
 800670a:	f7fc f837 	bl	800277c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800670e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006710:	42ab      	cmp	r3, r5
 8006712:	d311      	bcc.n	8006738 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
 8006714:	b305      	cbz	r5, 8006758 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8006716:	fbb3 f2f5 	udiv	r2, r3, r5
 800671a:	fb05 3212 	mls	r2, r5, r2, r3
 800671e:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8006720:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8006722:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8006724:	04d1      	lsls	r1, r2, #19
 8006726:	d400      	bmi.n	800672a <JPEG_MDMAInCpltCallback+0x56>
 8006728:	b963      	cbnz	r3, 8006744 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800672e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006732:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8006734:	b003      	add	sp, #12
 8006736:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
 8006738:	b1cb      	cbz	r3, 800676e <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800673a:	0798      	lsls	r0, r3, #30
 800673c:	d119      	bne.n	8006772 <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800673e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006740:	04d2      	lsls	r2, r2, #19
 8006742:	d4f2      	bmi.n	800672a <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	2501      	movs	r5, #1
 8006748:	69a1      	ldr	r1, [r4, #24]
 800674a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800674c:	3240      	adds	r2, #64	@ 0x40
 800674e:	9500      	str	r5, [sp, #0]
 8006750:	f000 fe54 	bl	80073fc <HAL_MDMA_Start_IT>
 8006754:	2800      	cmp	r0, #0
 8006756:	d0e8      	beq.n	800672a <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006758:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800675a:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
 800675c:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800675e:	f043 0304 	orr.w	r3, r3, #4
 8006762:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006764:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8006768:	f7fc f83a 	bl	80027e0 <HAL_JPEG_ErrorCallback>
        return;
 800676c:	e7c0      	b.n	80066f0 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800676e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006770:	e7db      	b.n	800672a <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	3304      	adds	r3, #4
 8006778:	e7d2      	b.n	8006720 <JPEG_MDMAInCpltCallback+0x4c>
 800677a:	bf00      	nop

0800677c <JPEG_DMA_PollResidualData>:
{
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800677e:	6802      	ldr	r2, [r0, #0]
 8006780:	2610      	movs	r6, #16
{
 8006782:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006784:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8006786:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800678a:	d11d      	bne.n	80067c8 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800678c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800678e:	06df      	lsls	r7, r3, #27
 8006790:	d51a      	bpl.n	80067c8 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
 8006792:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8006794:	69e7      	ldr	r7, [r4, #28]
 8006796:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8006798:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800679a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800679c:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800679e:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80067a0:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 80067a2:	69e2      	ldr	r2, [r4, #28]
 80067a4:	443a      	add	r2, r7
 80067a6:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80067a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80067aa:	69e2      	ldr	r2, [r4, #28]
 80067ac:	4402      	add	r2, r0
 80067ae:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80067b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80067b2:	69e2      	ldr	r2, [r4, #28]
 80067b4:	440a      	add	r2, r1
 80067b6:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80067b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80067ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hjpeg->JpegOutCount += 4UL;
 80067bc:	3304      	adds	r3, #4
 80067be:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80067c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d021      	beq.n	800680a <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80067c6:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80067c8:	3e01      	subs	r6, #1
 80067ca:	d1db      	bne.n	8006784 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 80067cc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80067ce:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80067d0:	06d8      	lsls	r0, r3, #27
 80067d2:	d501      	bpl.n	80067d8 <JPEG_DMA_PollResidualData+0x5c>
 80067d4:	048b      	lsls	r3, r1, #18
 80067d6:	d417      	bmi.n	8006808 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80067d8:	6813      	ldr	r3, [r2, #0]
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
 80067e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80067e2:	b9eb      	cbnz	r3, 8006820 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
 80067e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80067e6:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80067e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80067ea:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80067ec:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 80067f0:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80067f4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80067f8:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80067fa:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80067fc:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80067fe:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006802:	d00a      	beq.n	800681a <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006804:	f7ff ff4e 	bl	80066a4 <HAL_JPEG_EncodeCpltCallback>
}
 8006808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800680a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800680c:	4620      	mov	r0, r4
 800680e:	69e1      	ldr	r1, [r4, #28]
 8006810:	f7fb ffd8 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8006814:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
 8006816:	6265      	str	r5, [r4, #36]	@ 0x24
 8006818:	e7d6      	b.n	80067c8 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800681a:	f7fb ffe3 	bl	80027e4 <HAL_JPEG_DecodeCpltCallback>
}
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006822:	4620      	mov	r0, r4
 8006824:	69e1      	ldr	r1, [r4, #28]
 8006826:	f7fb ffcd 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	6263      	str	r3, [r4, #36]	@ 0x24
 800682e:	e7d9      	b.n	80067e4 <JPEG_DMA_PollResidualData+0x68>

08006830 <JPEG_MDMAOutCpltCallback>:
{
 8006830:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8006832:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8006834:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8006838:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800683e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006842:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8006844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006846:	400a      	ands	r2, r1
 8006848:	2a0c      	cmp	r2, #12
 800684a:	d001      	beq.n	8006850 <JPEG_MDMAOutCpltCallback+0x20>
}
 800684c:	b003      	add	sp, #12
 800684e:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8006850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006852:	0692      	lsls	r2, r2, #26
 8006854:	d505      	bpl.n	8006862 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006858:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800685e:	b003      	add	sp, #12
 8006860:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8006862:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006864:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8006866:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006868:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800686a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800686c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006874:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006876:	f7fb ffa5 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800687a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800687c:	049b      	lsls	r3, r3, #18
 800687e:	d501      	bpl.n	8006884 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	e7e8      	b.n	8006856 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006884:	6821      	ldr	r1, [r4, #0]
 8006886:	2501      	movs	r5, #1
 8006888:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800688a:	69e2      	ldr	r2, [r4, #28]
 800688c:	3144      	adds	r1, #68	@ 0x44
 800688e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8006890:	9500      	str	r5, [sp, #0]
 8006892:	f000 fdb3 	bl	80073fc <HAL_MDMA_Start_IT>
 8006896:	2800      	cmp	r0, #0
 8006898:	d0f2      	beq.n	8006880 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800689a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800689c:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
 800689e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80068a0:	f043 0304 	orr.w	r3, r3, #4
 80068a4:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80068a6:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 80068aa:	f7fb ff99 	bl	80027e0 <HAL_JPEG_ErrorCallback>
          return;
 80068ae:	e7cd      	b.n	800684c <JPEG_MDMAOutCpltCallback+0x1c>

080068b0 <JPEG_MDMAOutAbortCallback>:
{
 80068b0:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80068b2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80068b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80068b6:	041a      	lsls	r2, r3, #16
 80068b8:	d400      	bmi.n	80068bc <JPEG_MDMAOutAbortCallback+0xc>
}
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80068bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80068cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d025      	beq.n	800691e <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80068d6:	f015 0510 	ands.w	r5, r5, #16
 80068da:	d118      	bne.n	800690e <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
 80068dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80068de:	bb4b      	cbnz	r3, 8006934 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80068e0:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 80068e2:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 80068e4:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80068ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80068ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80068f0:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 80068f4:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80068f8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80068fc:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80068fe:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006900:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006902:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006906:	d012      	beq.n	800692e <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006908:	f7ff fecc 	bl	80066a4 <HAL_JPEG_EncodeCpltCallback>
}
 800690c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800690e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006910:	049b      	lsls	r3, r3, #18
 8006912:	d4d2      	bmi.n	80068ba <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
 8006914:	4620      	mov	r0, r4
}
 8006916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800691a:	f7ff bf2f 	b.w	800677c <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800691e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006920:	4620      	mov	r0, r4
 8006922:	69e1      	ldr	r1, [r4, #28]
 8006924:	f7fb ff4e 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	6263      	str	r3, [r4, #36]	@ 0x24
 800692c:	e7d1      	b.n	80068d2 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800692e:	f7fb ff59 	bl	80027e4 <HAL_JPEG_DecodeCpltCallback>
}
 8006932:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006934:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006936:	4620      	mov	r0, r4
 8006938:	69e1      	ldr	r1, [r4, #28]
 800693a:	f7fb ff43 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800693e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8006940:	6265      	str	r5, [r4, #36]	@ 0x24
 8006942:	e7cd      	b.n	80068e0 <JPEG_MDMAOutAbortCallback+0x30>

08006944 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006944:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006946:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006948:	f002 0203 	and.w	r2, r2, #3
 800694c:	2a02      	cmp	r2, #2
{
 800694e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006954:	d01e      	beq.n	8006994 <JPEG_Process+0x50>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8006956:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006958:	04d7      	lsls	r7, r2, #19
 800695a:	d407      	bmi.n	800696c <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800695c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800695e:	0796      	lsls	r6, r2, #30
 8006960:	f100 811b 	bmi.w	8006b9a <JPEG_Process+0x256>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8006964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006966:	0750      	lsls	r0, r2, #29
 8006968:	f100 81cc 	bmi.w	8006d04 <JPEG_Process+0x3c0>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800696c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800696e:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8006972:	d107      	bne.n	8006984 <JPEG_Process+0x40>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8006974:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8006976:	f016 0608 	ands.w	r6, r6, #8
 800697a:	d14a      	bne.n	8006a12 <JPEG_Process+0xce>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800697c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697e:	06d2      	lsls	r2, r2, #27
 8006980:	f100 81fe 	bmi.w	8006d80 <JPEG_Process+0x43c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006986:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800698a:	2a20      	cmp	r2, #32
 800698c:	d019      	beq.n	80069c2 <JPEG_Process+0x7e>
  return JPEG_PROCESS_ONGOING;
 800698e:	2000      	movs	r0, #0
}
 8006990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006996:	0652      	lsls	r2, r2, #25
 8006998:	d5dd      	bpl.n	8006956 <JPEG_Process+0x12>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800699a:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 800699c:	4629      	mov	r1, r5
 800699e:	f7ff fc33 	bl	8006208 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 80069a2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80069a4:	4629      	mov	r1, r5
 80069a6:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80069a8:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80069aa:	f7fb fee5 	bl	8002778 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b6:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80069b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069be:	639a      	str	r2, [r3, #56]	@ 0x38
 80069c0:	e7c9      	b.n	8006956 <JPEG_Process+0x12>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80069ca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069cc:	f002 020c 	and.w	r2, r2, #12
 80069d0:	2a08      	cmp	r2, #8
 80069d2:	f000 8201 	beq.w	8006dd8 <JPEG_Process+0x494>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80069d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069d8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80069dc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80069de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 81fe 	bne.w	8006de2 <JPEG_Process+0x49e>
    tmpContext = hjpeg->Context;
 80069e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80069e8:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80069ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80069ec:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80069ee:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 80069f2:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80069f6:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80069fa:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80069fc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80069fe:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006a00:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006a04:	f000 81e5 	beq.w	8006dd2 <JPEG_Process+0x48e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006a08:	f7ff fe4c 	bl	80066a4 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8006a0c:	2001      	movs	r0, #1
}
 8006a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8006a12:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006a14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a16:	3220      	adds	r2, #32
 8006a18:	4296      	cmp	r6, r2
 8006a1a:	f0c0 8200 	bcc.w	8006e1e <JPEG_Process+0x4da>
      dataword = hjpeg->Instance->DOR;
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006a20:	69e1      	ldr	r1, [r4, #28]
 8006a22:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006a24:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006a26:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a28:	69e2      	ldr	r2, [r4, #28]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	0a19      	lsrs	r1, r3, #8
 8006a2e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006a30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a32:	69e2      	ldr	r2, [r4, #28]
 8006a34:	440a      	add	r2, r1
 8006a36:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006a38:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006a3a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006a3c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a3e:	69e2      	ldr	r2, [r4, #28]
 8006a40:	440a      	add	r2, r1
 8006a42:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006a44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006a46:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8006a48:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006a4a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8006a4c:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006a4e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006a50:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006a52:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006a54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a56:	69e2      	ldr	r2, [r4, #28]
 8006a58:	440a      	add	r2, r1
 8006a5a:	0a19      	lsrs	r1, r3, #8
 8006a5c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006a5e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a60:	69e2      	ldr	r2, [r4, #28]
 8006a62:	440a      	add	r2, r1
 8006a64:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006a66:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006a68:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006a6a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a6c:	69e2      	ldr	r2, [r4, #28]
 8006a6e:	440a      	add	r2, r1
 8006a70:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006a72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006a74:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8006a76:	3304      	adds	r3, #4
 8006a78:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006a7a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006a7c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006a7e:	69e1      	ldr	r1, [r4, #28]
 8006a80:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006a82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a84:	69e2      	ldr	r2, [r4, #28]
 8006a86:	440a      	add	r2, r1
 8006a88:	0a19      	lsrs	r1, r3, #8
 8006a8a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006a8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a8e:	69e2      	ldr	r2, [r4, #28]
 8006a90:	440a      	add	r2, r1
 8006a92:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006a94:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006a96:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006a98:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006a9a:	69e2      	ldr	r2, [r4, #28]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006aa0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006aa2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8006aa4:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006aa6:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8006aa8:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006aaa:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006aac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006aae:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006ab0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006ab2:	69e2      	ldr	r2, [r4, #28]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	0a19      	lsrs	r1, r3, #8
 8006ab8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006aba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006abc:	69e2      	ldr	r2, [r4, #28]
 8006abe:	440a      	add	r2, r1
 8006ac0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006ac2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006ac4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006ac6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006ac8:	69e2      	ldr	r2, [r4, #28]
 8006aca:	440a      	add	r2, r1
 8006acc:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006ace:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006ad0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006ad6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006ad8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006ada:	69e1      	ldr	r1, [r4, #28]
 8006adc:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006ade:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006ae0:	69e2      	ldr	r2, [r4, #28]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	0a19      	lsrs	r1, r3, #8
 8006ae6:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006ae8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006aea:	69e2      	ldr	r2, [r4, #28]
 8006aec:	440a      	add	r2, r1
 8006aee:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006af0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006af2:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006af4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006af6:	69e2      	ldr	r2, [r4, #28]
 8006af8:	440a      	add	r2, r1
 8006afa:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006afc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006afe:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8006b00:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006b02:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8006b04:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006b06:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006b08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006b0a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006b0c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b0e:	69e2      	ldr	r2, [r4, #28]
 8006b10:	440a      	add	r2, r1
 8006b12:	0a19      	lsrs	r1, r3, #8
 8006b14:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006b16:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b18:	69e2      	ldr	r2, [r4, #28]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006b1e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006b20:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006b22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b24:	69e2      	ldr	r2, [r4, #28]
 8006b26:	440a      	add	r2, r1
 8006b28:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006b2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006b2c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8006b2e:	3304      	adds	r3, #4
 8006b30:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006b32:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006b34:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006b36:	69e1      	ldr	r1, [r4, #28]
 8006b38:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006b3a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b3c:	69e2      	ldr	r2, [r4, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	0a19      	lsrs	r1, r3, #8
 8006b42:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006b44:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b46:	69e2      	ldr	r2, [r4, #28]
 8006b48:	440a      	add	r2, r1
 8006b4a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006b4c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006b4e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006b50:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b52:	69e2      	ldr	r2, [r4, #28]
 8006b54:	440a      	add	r2, r1
 8006b56:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006b58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006b5a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8006b5c:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006b5e:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8006b60:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006b62:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006b64:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006b66:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006b68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b6a:	69e2      	ldr	r2, [r4, #28]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	0a19      	lsrs	r1, r3, #8
 8006b70:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006b72:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b74:	69e2      	ldr	r2, [r4, #28]
 8006b76:	440a      	add	r2, r1
 8006b78:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006b7a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006b7c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006b7e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006b80:	69e2      	ldr	r2, [r4, #28]
 8006b82:	440a      	add	r2, r1
 8006b84:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006b86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006b88:	3304      	adds	r3, #4
 8006b8a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006b8c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006b8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006b90:	429a      	cmp	r2, r3
 8006b92:	f000 8258 	beq.w	8007046 <JPEG_Process+0x702>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	e6f4      	b.n	8006984 <JPEG_Process+0x40>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8006b9a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	f000 8128 	beq.w	8006df2 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006ba2:	6a21      	ldr	r1, [r4, #32]
 8006ba4:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006ba6:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006ba8:	f240 81b9 	bls.w	8006f1e <JPEG_Process+0x5da>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006bac:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8006bae:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8006bb0:	04cd      	lsls	r5, r1, #19
 8006bb2:	f53f aedb 	bmi.w	800696c <JPEG_Process+0x28>
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	f43f aed8 	beq.w	800696c <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 8006bbc:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
 8006bbe:	ea4f 0092 	mov.w	r0, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8006bc2:	f200 8248 	bhi.w	8007056 <JPEG_Process+0x712>
      if (nb_words > 0UL)
 8006bc6:	2a03      	cmp	r2, #3
 8006bc8:	f240 82c0 	bls.w	800714c <JPEG_Process+0x808>
          input_count = hjpeg->JpegInCount;
 8006bcc:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006bce:	2801      	cmp	r0, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006bd0:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006bd2:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006bd6:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006bd8:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006bda:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006bdc:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006be0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006be2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006be6:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006bea:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006bee:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006bf0:	6a21      	ldr	r1, [r4, #32]
 8006bf2:	f101 0104 	add.w	r1, r1, #4
 8006bf6:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006bf8:	f43f aeb8 	beq.w	800696c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8006bfc:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006bfe:	2802      	cmp	r0, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c00:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c04:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c06:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c08:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c0a:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006c0e:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c10:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006c14:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c18:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c1c:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006c1e:	6a21      	ldr	r1, [r4, #32]
 8006c20:	f101 0104 	add.w	r1, r1, #4
 8006c24:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006c26:	f43f aea1 	beq.w	800696c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8006c2a:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006c2c:	2803      	cmp	r0, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c2e:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c32:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c34:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c36:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c38:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006c3c:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c3e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006c42:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c46:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c4a:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006c4c:	6a21      	ldr	r1, [r4, #32]
 8006c4e:	f101 0104 	add.w	r1, r1, #4
 8006c52:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006c54:	f43f ae8a 	beq.w	800696c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8006c58:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006c5a:	2804      	cmp	r0, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c5c:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c60:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c62:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c64:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c66:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006c6a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c6c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006c70:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c74:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c78:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006c7a:	6a21      	ldr	r1, [r4, #32]
 8006c7c:	f101 0104 	add.w	r1, r1, #4
 8006c80:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006c82:	f43f ae73 	beq.w	800696c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8006c86:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006c88:	2805      	cmp	r0, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c8a:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c8e:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c90:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c92:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c94:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006c98:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c9a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006c9e:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006ca2:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006ca6:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006ca8:	6a21      	ldr	r1, [r4, #32]
 8006caa:	f101 0104 	add.w	r1, r1, #4
 8006cae:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006cb0:	f43f ae5c 	beq.w	800696c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8006cb4:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006cb6:	2807      	cmp	r0, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006cb8:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006cbc:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006cbe:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006cc0:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006cc2:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006cc6:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006cc8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8006ccc:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006cd0:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006cd4:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006cd6:	6a21      	ldr	r1, [r4, #32]
 8006cd8:	f101 0104 	add.w	r1, r1, #4
 8006cdc:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8006cde:	f47f ae45 	bne.w	800696c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8006ce2:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006ce4:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006ce6:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006ce8:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006cea:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006cec:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006cee:	7849      	ldrb	r1, [r1, #1]
 8006cf0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006cf4:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006cf6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006cfa:	641a      	str	r2, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8006cfc:	6a22      	ldr	r2, [r4, #32]
 8006cfe:	3204      	adds	r2, #4
 8006d00:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8006d02:	e633      	b.n	800696c <JPEG_Process+0x28>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8006d04:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	d073      	beq.n	8006df2 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006d0a:	6a21      	ldr	r1, [r4, #32]
 8006d0c:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006d0e:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006d10:	f200 8182 	bhi.w	8007018 <JPEG_Process+0x6d4>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8006d14:	428a      	cmp	r2, r1
 8006d16:	f040 8104 	bne.w	8006f22 <JPEG_Process+0x5de>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8006d1a:	6a21      	ldr	r1, [r4, #32]
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7fb fd2d 	bl	800277c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8006d22:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006d24:	2a04      	cmp	r2, #4
 8006d26:	d902      	bls.n	8006d2e <JPEG_Process+0x3ea>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006d28:	f022 0203 	bic.w	r2, r2, #3
 8006d2c:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8006d2e:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006d30:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 8006d32:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8006d34:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8006d36:	04c9      	lsls	r1, r1, #19
 8006d38:	f53f ae18 	bmi.w	800696c <JPEG_Process+0x28>
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	f43f ae15 	beq.w	800696c <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 8006d42:	0891      	lsrs	r1, r2, #2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006d44:	69a0      	ldr	r0, [r4, #24]
    if (nb_words >= nbRequestWords)
 8006d46:	f040 8177 	bne.w	8007038 <JPEG_Process+0x6f4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006d4a:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8006d4c:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 8006d4e:	6a25      	ldr	r5, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006d50:	5c41      	ldrb	r1, [r0, r1]
          hjpeg->JpegInCount++;
 8006d52:	f105 0501 	add.w	r5, r5, #1
 8006d56:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8006d58:	d010      	beq.n	8006d7c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006d5a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8006d5c:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006d5e:	5d45      	ldrb	r5, [r0, r5]
 8006d60:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
          hjpeg->JpegInCount++;
 8006d64:	6a25      	ldr	r5, [r4, #32]
 8006d66:	f105 0501 	add.w	r5, r5, #1
 8006d6a:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8006d6c:	d106      	bne.n	8006d7c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006d6e:	6a22      	ldr	r2, [r4, #32]
 8006d70:	5c80      	ldrb	r0, [r0, r2]
          hjpeg->JpegInCount++;
 8006d72:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8006d78:	3201      	adds	r2, #1
 8006d7a:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 8006d7c:	6419      	str	r1, [r3, #64]	@ 0x40
 8006d7e:	e5f5      	b.n	800696c <JPEG_Process+0x28>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8006d80:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006d82:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006d84:	3204      	adds	r2, #4
 8006d86:	4295      	cmp	r5, r2
 8006d88:	f0c0 80cd 	bcc.w	8006f26 <JPEG_Process+0x5e2>
      dataword = hjpeg->Instance->DOR;
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006d8e:	69e1      	ldr	r1, [r4, #28]
 8006d90:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006d92:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006d94:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006d96:	69e2      	ldr	r2, [r4, #28]
 8006d98:	440a      	add	r2, r1
 8006d9a:	0a19      	lsrs	r1, r3, #8
 8006d9c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006d9e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006da0:	69e2      	ldr	r2, [r4, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006da6:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006da8:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006daa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006dac:	69e2      	ldr	r2, [r4, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006db2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006db4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      hjpeg->JpegOutCount += 4UL;
 8006db6:	3304      	adds	r3, #4
 8006db8:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006dba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	f47f aeea 	bne.w	8006b96 <JPEG_Process+0x252>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006dc2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	69e1      	ldr	r1, [r4, #28]
 8006dc8:	f7fb fcfc 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8006dcc:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8006dce:	6266      	str	r6, [r4, #36]	@ 0x24
 8006dd0:	e5d8      	b.n	8006984 <JPEG_Process+0x40>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006dd2:	f7fb fd07 	bl	80027e4 <HAL_JPEG_DecodeCpltCallback>
 8006dd6:	e619      	b.n	8006a0c <JPEG_Process+0xc8>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dda:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006dde:	631a      	str	r2, [r3, #48]	@ 0x30
 8006de0:	e5f9      	b.n	80069d6 <JPEG_Process+0x92>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006de2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006de4:	4620      	mov	r0, r4
 8006de6:	69e1      	ldr	r1, [r4, #28]
 8006de8:	f7fb fcec 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	6263      	str	r3, [r4, #36]	@ 0x24
 8006df0:	e5f9      	b.n	80069e6 <JPEG_Process+0xa2>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006df2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006df4:	f002 020c 	and.w	r2, r2, #12
 8006df8:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006dfa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8006dfc:	f000 811e 	beq.w	800703c <JPEG_Process+0x6f8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006e00:	f002 020c 	and.w	r2, r2, #12
 8006e04:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006e06:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8006e08:	f47f adb0 	bne.w	800696c <JPEG_Process+0x28>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8006e0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e10:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8006e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e14:	f022 0206 	bic.w	r2, r2, #6
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8006e1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e1c:	e5a6      	b.n	800696c <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8006e1e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006e20:	4296      	cmp	r6, r2
 8006e22:	f67f adaf 	bls.w	8006984 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8006e26:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006e28:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
 8006e2a:	0880      	lsrs	r0, r0, #2
 8006e2c:	d020      	beq.n	8006e70 <JPEG_Process+0x52c>
 8006e2e:	4629      	mov	r1, r5
 8006e30:	e000      	b.n	8006e34 <JPEG_Process+0x4f0>
      dataword = hjpeg->Instance->DOR;
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 8006e36:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006e38:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006e3a:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8006e3c:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006e3e:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006e40:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8006e42:	69e2      	ldr	r2, [r4, #28]
 8006e44:	4432      	add	r2, r6
 8006e46:	ea4f 2613 	mov.w	r6, r3, lsr #8
 8006e4a:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006e4c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8006e4e:	69e2      	ldr	r2, [r4, #28]
 8006e50:	4432      	add	r2, r6
 8006e52:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006e56:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006e5a:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006e5c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8006e5e:	69e2      	ldr	r2, [r4, #28]
 8006e60:	4432      	add	r2, r6
 8006e62:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006e64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006e66:	f103 0304 	add.w	r3, r3, #4
 8006e6a:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8006e6c:	d1e1      	bne.n	8006e32 <JPEG_Process+0x4ee>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006e72:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006e74:	429e      	cmp	r6, r3
 8006e76:	f000 8161 	beq.w	800713c <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8006e7a:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006e7e:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8006e80:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
 8006e84:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8006e86:	d00e      	beq.n	8006ea6 <JPEG_Process+0x562>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006e88:	f005 0303 	and.w	r3, r5, #3
 8006e8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8006e8e:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006e90:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 8006e92:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006e94:	fa27 f303 	lsr.w	r3, r7, r3
 8006e98:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8006e9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006e9c:	69e1      	ldr	r1, [r4, #28]
 8006e9e:	f103 0301 	add.w	r3, r3, #1
 8006ea2:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8006ea4:	d1f0      	bne.n	8006e88 <JPEG_Process+0x544>
      nb_bytes = 4UL - nb_bytes;
 8006ea6:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006eaa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006eac:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
 8006eae:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006eb2:	f7fb fc87 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006eb6:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 8006eb8:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
 8006eba:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006ebc:	f63f ae6b 	bhi.w	8006b96 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006ec0:	ea4f 02c6 	mov.w	r2, r6, lsl #3
 8006ec4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006ec6:	69e0      	ldr	r0, [r4, #28]
 8006ec8:	fa27 f502 	lsr.w	r5, r7, r2
 8006ecc:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 8006ece:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006ed0:	f101 0101 	add.w	r1, r1, #1
 8006ed4:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006ed6:	f43f ae5e 	beq.w	8006b96 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006eda:	f102 0108 	add.w	r1, r2, #8
 8006ede:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006ee0:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8006ee2:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006ee4:	fa27 f101 	lsr.w	r1, r7, r1
 8006ee8:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 8006eea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006eec:	f101 0101 	add.w	r1, r1, #1
 8006ef0:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006ef2:	f43f ae50 	beq.w	8006b96 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006ef6:	3210      	adds	r2, #16
 8006ef8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006efa:	69e0      	ldr	r0, [r4, #28]
 8006efc:	fa27 f202 	lsr.w	r2, r7, r2
 8006f00:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8006f02:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006f04:	3201      	adds	r2, #1
 8006f06:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006f08:	2e00      	cmp	r6, #0
 8006f0a:	f47f ae44 	bne.w	8006b96 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006f0e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f10:	0e3f      	lsrs	r7, r7, #24
 8006f12:	69e2      	ldr	r2, [r4, #28]
 8006f14:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
 8006f16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f18:	3301      	adds	r3, #1
 8006f1a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006f1c:	e63b      	b.n	8006b96 <JPEG_Process+0x252>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8006f1e:	428a      	cmp	r2, r1
 8006f20:	d07c      	beq.n	800701c <JPEG_Process+0x6d8>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8006f22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f24:	e522      	b.n	800696c <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8006f26:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006f28:	4295      	cmp	r5, r2
 8006f2a:	f67f ad2b 	bls.w	8006984 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8006f2e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006f30:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
 8006f32:	0880      	lsrs	r0, r0, #2
 8006f34:	d020      	beq.n	8006f78 <JPEG_Process+0x634>
 8006f36:	4631      	mov	r1, r6
 8006f38:	e000      	b.n	8006f3c <JPEG_Process+0x5f8>
      dataword = hjpeg->Instance->DOR;
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 8006f3e:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006f40:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006f42:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8006f44:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006f46:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006f48:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006f4a:	69e2      	ldr	r2, [r4, #28]
 8006f4c:	442a      	add	r2, r5
 8006f4e:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8006f52:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006f54:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006f56:	69e2      	ldr	r2, [r4, #28]
 8006f58:	442a      	add	r2, r5
 8006f5a:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006f5e:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006f62:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006f64:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006f66:	69e2      	ldr	r2, [r4, #28]
 8006f68:	442a      	add	r2, r5
 8006f6a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8006f6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f6e:	f103 0304 	add.w	r3, r3, #4
 8006f72:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8006f74:	d1e1      	bne.n	8006f3a <JPEG_Process+0x5f6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006f76:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006f78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006f7a:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006f7c:	429d      	cmp	r5, r3
 8006f7e:	f000 80dd 	beq.w	800713c <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8006f82:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8006f86:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8006f88:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
 8006f8c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8006f8e:	d00e      	beq.n	8006fae <JPEG_Process+0x66a>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006f90:	f006 0303 	and.w	r3, r6, #3
 8006f94:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8006f96:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006f98:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 8006f9a:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006f9c:	fa27 f303 	lsr.w	r3, r7, r3
 8006fa0:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8006fa2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006fa4:	69e1      	ldr	r1, [r4, #28]
 8006fa6:	f103 0301 	add.w	r3, r3, #1
 8006faa:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8006fac:	d1f0      	bne.n	8006f90 <JPEG_Process+0x64c>
      nb_bytes = 4UL - nb_bytes;
 8006fae:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006fb2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7fb fc05 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
      nb_bytes = 4UL - nb_bytes;
 8006fba:	eba8 0305 	sub.w	r3, r8, r5
      hjpeg->JpegOutCount = 0;
 8006fbe:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 8006fc0:	2b03      	cmp	r3, #3
      hjpeg->JpegOutCount = 0;
 8006fc2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006fc4:	f63f ade7 	bhi.w	8006b96 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006fc8:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8006fcc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006fce:	69e0      	ldr	r0, [r4, #28]
 8006fd0:	fa27 f502 	lsr.w	r5, r7, r2
 8006fd4:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 8006fd6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006fd8:	f101 0101 	add.w	r1, r1, #1
 8006fdc:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006fde:	f43f adda 	beq.w	8006b96 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006fe2:	f102 0108 	add.w	r1, r2, #8
 8006fe6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006fe8:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8006fea:	2b02      	cmp	r3, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006fec:	fa27 f101 	lsr.w	r1, r7, r1
 8006ff0:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 8006ff2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006ff4:	f101 0101 	add.w	r1, r1, #1
 8006ff8:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006ffa:	f43f adcc 	beq.w	8006b96 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006ffe:	3210      	adds	r2, #16
 8007000:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007002:	69e0      	ldr	r0, [r4, #28]
 8007004:	fa27 f202 	lsr.w	r2, r7, r2
 8007008:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800700a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800700c:	3201      	adds	r2, #1
 800700e:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8007010:	2b00      	cmp	r3, #0
 8007012:	f43f af7c 	beq.w	8006f0e <JPEG_Process+0x5ca>
 8007016:	e5be      	b.n	8006b96 <JPEG_Process+0x252>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007018:	1a52      	subs	r2, r2, r1
 800701a:	e68b      	b.n	8006d34 <JPEG_Process+0x3f0>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800701c:	6a21      	ldr	r1, [r4, #32]
 800701e:	4620      	mov	r0, r4
 8007020:	f7fb fbac 	bl	800277c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8007024:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007026:	2a04      	cmp	r2, #4
 8007028:	d902      	bls.n	8007030 <JPEG_Process+0x6ec>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800702a:	f022 0203 	bic.w	r2, r2, #3
 800702e:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8007030:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007032:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 8007034:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8007036:	e5ba      	b.n	8006bae <JPEG_Process+0x26a>
        input_count = hjpeg->JpegInCount;
 8007038:	6a22      	ldr	r2, [r4, #32]
 800703a:	e653      	b.n	8006ce4 <JPEG_Process+0x3a0>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800703c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007040:	6562      	str	r2, [r4, #84]	@ 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8007042:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007044:	e492      	b.n	800696c <JPEG_Process+0x28>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007046:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007048:	4620      	mov	r0, r4
 800704a:	69e1      	ldr	r1, [r4, #28]
 800704c:	f7fb fbba 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8007050:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8007052:	6265      	str	r5, [r4, #36]	@ 0x24
 8007054:	e496      	b.n	8006984 <JPEG_Process+0x40>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007056:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
 8007058:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800705a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800705c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800705e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007060:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007062:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007064:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007066:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800706a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800706c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007070:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8007072:	6a21      	ldr	r1, [r4, #32]
 8007074:	3104      	adds	r1, #4
 8007076:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8007078:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800707a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800707c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800707e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007080:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007082:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007084:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007086:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800708a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800708c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007090:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8007092:	6a21      	ldr	r1, [r4, #32]
 8007094:	3104      	adds	r1, #4
 8007096:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8007098:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800709a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800709c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800709e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070a0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070a2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80070a4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80070aa:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070ac:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80070b0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80070b2:	6a21      	ldr	r1, [r4, #32]
 80070b4:	3104      	adds	r1, #4
 80070b6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80070b8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070ba:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80070bc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070be:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070c0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070c2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80070c4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070c6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80070ca:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070cc:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80070d0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80070d2:	6a21      	ldr	r1, [r4, #32]
 80070d4:	3104      	adds	r1, #4
 80070d6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80070d8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070da:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80070dc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070de:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070e0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070e2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80070e4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070e6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80070ea:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070ec:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80070f0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80070f2:	6a21      	ldr	r1, [r4, #32]
 80070f4:	3104      	adds	r1, #4
 80070f6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80070f8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80070fa:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80070fc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80070fe:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007100:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007102:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007104:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007106:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800710a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800710c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007110:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8007112:	6a21      	ldr	r1, [r4, #32]
 8007114:	3104      	adds	r1, #4
 8007116:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8007118:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800711a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800711c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800711e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007120:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007122:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007124:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007126:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800712a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800712c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007130:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8007132:	6a21      	ldr	r1, [r4, #32]
 8007134:	3104      	adds	r1, #4
 8007136:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8007138:	6a20      	ldr	r0, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800713a:	e5d3      	b.n	8006ce4 <JPEG_Process+0x3a0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800713c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800713e:	4620      	mov	r0, r4
 8007140:	f7fb fb40 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007144:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8007146:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8007148:	6262      	str	r2, [r4, #36]	@ 0x24
 800714a:	e41b      	b.n	8006984 <JPEG_Process+0x40>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800714c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800714e:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 8007150:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007152:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
 8007154:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007158:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
 800715a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800715c:	f43f ae0e 	beq.w	8006d7c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007160:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8007162:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007164:	5c28      	ldrb	r0, [r5, r0]
 8007166:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
 800716a:	6a20      	ldr	r0, [r4, #32]
 800716c:	f100 0001 	add.w	r0, r0, #1
 8007170:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8007172:	f47f ae03 	bne.w	8006d7c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007176:	6a22      	ldr	r2, [r4, #32]
 8007178:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
 800717a:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800717c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8007180:	3201      	adds	r2, #1
 8007182:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 8007184:	e5fa      	b.n	8006d7c <JPEG_Process+0x438>
 8007186:	bf00      	nop

08007188 <HAL_JPEG_IRQHandler>:
{
 8007188:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 800718a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800718e:	3b03      	subs	r3, #3
 8007190:	2b01      	cmp	r3, #1
 8007192:	d900      	bls.n	8007196 <HAL_JPEG_IRQHandler+0xe>
}
 8007194:	bd38      	pop	{r3, r4, r5, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007196:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007198:	4604      	mov	r4, r0
 800719a:	f003 030c 	and.w	r3, r3, #12
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d050      	beq.n	8007244 <HAL_JPEG_IRQHandler+0xbc>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80071a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b0c      	cmp	r3, #12
 80071aa:	d1f3      	bne.n	8007194 <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80071ac:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80071ae:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80071b0:	f002 0203 	and.w	r2, r2, #3
 80071b4:	2a02      	cmp	r2, #2
 80071b6:	d049      	beq.n	800724c <HAL_JPEG_IRQHandler+0xc4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80071b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ba:	0692      	lsls	r2, r2, #26
 80071bc:	d5ea      	bpl.n	8007194 <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80071be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80071c0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80071c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071c6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	f022 0201 	bic.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80071d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071d2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80071d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071da:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80071de:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80071e0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d054      	beq.n	8007292 <HAL_JPEG_IRQHandler+0x10a>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80071e8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80071ea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d043      	beq.n	800727a <HAL_JPEG_IRQHandler+0xf2>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80071f2:	6803      	ldr	r3, [r0, #0]
 80071f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007200:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007202:	429a      	cmp	r2, r3
 8007204:	d048      	beq.n	8007298 <HAL_JPEG_IRQHandler+0x110>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8007206:	6822      	ldr	r2, [r4, #0]
 8007208:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800720a:	f015 0510 	ands.w	r5, r5, #16
 800720e:	d138      	bne.n	8007282 <HAL_JPEG_IRQHandler+0xfa>
    if (hjpeg->JpegOutCount > 0UL)
 8007210:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007212:	2b00      	cmp	r3, #0
 8007214:	d14b      	bne.n	80072ae <HAL_JPEG_IRQHandler+0x126>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007216:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8007218:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 800721a:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8007222:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007226:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 800722a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800722e:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007232:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007234:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007236:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007238:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800723c:	d034      	beq.n	80072a8 <HAL_JPEG_IRQHandler+0x120>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800723e:	f7ff fa31 	bl	80066a4 <HAL_JPEG_EncodeCpltCallback>
}
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void) JPEG_Process(hjpeg);
 8007248:	f7ff bb7c 	b.w	8006944 <JPEG_Process>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800724c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800724e:	0651      	lsls	r1, r2, #25
 8007250:	d5b2      	bpl.n	80071b8 <HAL_JPEG_IRQHandler+0x30>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8007252:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007254:	4629      	mov	r1, r5
 8007256:	f7fe ffd7 	bl	8006208 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 800725a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800725c:	4629      	mov	r1, r5
 800725e:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8007260:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8007262:	f7fb fa89 	bl	8002778 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800726a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800726e:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8007270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007276:	639a      	str	r2, [r3, #56]	@ 0x38
 8007278:	e79e      	b.n	80071b8 <HAL_JPEG_IRQHandler+0x30>
}
 800727a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800727e:	f000 b92f 	b.w	80074e0 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007282:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007284:	049b      	lsls	r3, r3, #18
 8007286:	d485      	bmi.n	8007194 <HAL_JPEG_IRQHandler+0xc>
    JPEG_DMA_PollResidualData(hjpeg);
 8007288:	4620      	mov	r0, r4
}
 800728a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800728e:	f7ff ba75 	b.w	800677c <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8007292:	f000 f925 	bl	80074e0 <HAL_MDMA_Abort_IT>
 8007296:	e7a7      	b.n	80071e8 <HAL_JPEG_IRQHandler+0x60>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007298:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800729a:	4620      	mov	r0, r4
 800729c:	69e1      	ldr	r1, [r4, #28]
 800729e:	f7fb fa91 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80072a6:	e7ae      	b.n	8007206 <HAL_JPEG_IRQHandler+0x7e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80072a8:	f7fb fa9c 	bl	80027e4 <HAL_JPEG_DecodeCpltCallback>
}
 80072ac:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80072ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80072b0:	4620      	mov	r0, r4
 80072b2:	69e1      	ldr	r1, [r4, #28]
 80072b4:	f7fb fa86 	bl	80027c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80072b8:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80072ba:	6265      	str	r5, [r4, #36]	@ 0x24
 80072bc:	e7ab      	b.n	8007216 <HAL_JPEG_IRQHandler+0x8e>
 80072be:	bf00      	nop

080072c0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80072c4:	f7fc fd8e 	bl	8003de4 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	d058      	beq.n	800737e <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80072cc:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80072ce:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 80072d0:	2100      	movs	r1, #0
 80072d2:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80072d4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80072d8:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80072e4:	e005      	b.n	80072f2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80072e6:	f7fc fd7d 	bl	8003de4 <HAL_GetTick>
 80072ea:	1b43      	subs	r3, r0, r5
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d841      	bhi.n	8007374 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	07d2      	lsls	r2, r2, #31
 80072f6:	d4f6      	bmi.n	80072e6 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80072f8:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 80072fc:	69e0      	ldr	r0, [r4, #28]
 80072fe:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007300:	68e1      	ldr	r1, [r4, #12]
 8007302:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007304:	4302      	orrs	r2, r0
 8007306:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007308:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800730a:	4302      	orrs	r2, r0
 800730c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800730e:	4302      	orrs	r2, r0
 8007310:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007312:	4302      	orrs	r2, r0
 8007314:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007316:	4302      	orrs	r2, r0
 8007318:	68a0      	ldr	r0, [r4, #8]
 800731a:	4302      	orrs	r2, r0
 800731c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800731e:	3801      	subs	r0, #1
 8007320:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007324:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007326:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007328:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800732c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800732e:	d103      	bne.n	8007338 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8007336:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007338:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800733a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800733c:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 800733e:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007340:	db1f      	blt.n	8007382 <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007342:	b292      	uxth	r2, r2
 8007344:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007346:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007348:	2a00      	cmp	r2, #0
 800734a:	db24      	blt.n	8007396 <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800734c:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800734e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007352:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8007356:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007358:	d029      	beq.n	80073ae <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800735a:	b2c0      	uxtb	r0, r0
 800735c:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800735e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8007360:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8007362:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 8007364:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007366:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8007368:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800736a:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 800736e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 8007372:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007374:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007376:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007378:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800737a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800737e:	2001      	movs	r0, #1
}
 8007380:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007382:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007384:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007386:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800738a:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800738c:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800738e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007390:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007392:	2a00      	cmp	r2, #0
 8007394:	dada      	bge.n	800734c <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007396:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007398:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800739a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800739e:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 80073a2:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80073a4:	6a19      	ldr	r1, [r3, #32]
 80073a6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80073aa:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80073ac:	d1d5      	bne.n	800735a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 80073ae:	2200      	movs	r2, #0
 80073b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80073b2:	e7d4      	b.n	800735e <HAL_MDMA_Init+0x9e>

080073b4 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80073b4:	b1f8      	cbz	r0, 80073f6 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 80073b6:	6802      	ldr	r2, [r0, #0]
 80073b8:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 80073ba:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 80073bc:	68d0      	ldr	r0, [r2, #12]
{
 80073be:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 80073c0:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80073c4:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 80073c6:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 80073c8:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 80073ca:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80073cc:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80073ce:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80073d0:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80073d2:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80073d4:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80073d6:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80073d8:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80073da:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80073dc:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80073de:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80073e0:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 80073e2:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 80073e6:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 80073ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 80073ee:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 80073f0:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 80073f4:	4770      	bx	lr
    return HAL_ERROR;
 80073f6:	2001      	movs	r0, #1
}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop

080073fc <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d06b      	beq.n	80074d8 <HAL_MDMA_Start_IT+0xdc>
{
 8007400:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
 8007402:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 8007406:	2c01      	cmp	r4, #1
 8007408:	d009      	beq.n	800741e <HAL_MDMA_Start_IT+0x22>
 800740a:	2401      	movs	r4, #1
 800740c:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8007410:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 8007414:	2c01      	cmp	r4, #1
 8007416:	d005      	beq.n	8007424 <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
 8007418:	2300      	movs	r3, #0
 800741a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800741e:	2002      	movs	r0, #2
}
 8007420:	bc70      	pop	{r4, r5, r6}
 8007422:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8007424:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8007426:	9e03      	ldr	r6, [sp, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8007428:	4d2c      	ldr	r5, [pc, #176]	@ (80074dc <HAL_MDMA_Start_IT+0xe0>)
 800742a:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800742e:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007432:	2400      	movs	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8007434:	f106 3cff 	add.w	ip, r6, #4294967295
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007438:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800743c:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800743e:	6804      	ldr	r4, [r0, #0]
 8007440:	68e6      	ldr	r6, [r4, #12]
 8007442:	f026 0601 	bic.w	r6, r6, #1
 8007446:	60e6      	str	r6, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8007448:	6966      	ldr	r6, [r4, #20]
 800744a:	ea05 0506 	and.w	r5, r5, r6
 800744e:	ea45 0503 	orr.w	r5, r5, r3
 8007452:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8007454:	6963      	ldr	r3, [r4, #20]
 8007456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800745a:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800745e:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8007460:	f04f 031f 	mov.w	r3, #31
 8007464:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8007466:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8007468:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800746a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800746c:	bf0c      	ite	eq
 800746e:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8007472:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8007476:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 800747a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800747c:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800747e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007480:	bf0c      	ite	eq
 8007482:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8007486:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800748a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800748c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800748e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8007490:	68e3      	ldr	r3, [r4, #12]
 8007492:	f043 0306 	orr.w	r3, r3, #6
 8007496:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8007498:	b11a      	cbz	r2, 80074a2 <HAL_MDMA_Start_IT+0xa6>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800749a:	68e3      	ldr	r3, [r4, #12]
 800749c:	f043 0310 	orr.w	r3, r3, #16
 80074a0:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80074a2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80074a4:	b11b      	cbz	r3, 80074ae <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	f043 0308 	orr.w	r3, r3, #8
 80074ac:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 80074ae:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80074b0:	b11b      	cbz	r3, 80074ba <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	f043 0320 	orr.w	r3, r3, #32
 80074b8:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 80074ba:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80074bc:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 80074be:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80074c2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 80074c6:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80074c8:	d103      	bne.n	80074d2 <HAL_MDMA_Start_IT+0xd6>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074d0:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 80074d2:	2000      	movs	r0, #0
}
 80074d4:	bc70      	pop	{r4, r5, r6}
 80074d6:	4770      	bx	lr
    return HAL_ERROR;
 80074d8:	2001      	movs	r0, #1
}
 80074da:	4770      	bx	lr
 80074dc:	fffe0000 	.word	0xfffe0000

080074e0 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 80074e0:	4603      	mov	r3, r0
 80074e2:	b128      	cbz	r0, 80074f0 <HAL_MDMA_Abort_IT+0x10>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80074e4:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 80074e8:	2a02      	cmp	r2, #2
 80074ea:	d003      	beq.n	80074f4 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80074ec:	2280      	movs	r2, #128	@ 0x80
 80074ee:	6682      	str	r2, [r0, #104]	@ 0x68
    return HAL_ERROR;
 80074f0:	2001      	movs	r0, #1
 80074f2:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 80074f4:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80074f6:	2104      	movs	r1, #4
  return HAL_OK;
 80074f8:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80074fa:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 80074fe:	68d3      	ldr	r3, [r2, #12]
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	60d3      	str	r3, [r2, #12]
}
 8007506:	4770      	bx	lr

08007508 <HAL_MDMA_IRQHandler>:
{
 8007508:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 800750a:	2300      	movs	r3, #0
{
 800750c:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800750e:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 8007512:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8007514:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007516:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8007518:	4b57      	ldr	r3, [pc, #348]	@ (8007678 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800751a:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800751c:	4a57      	ldr	r2, [pc, #348]	@ (800767c <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800751e:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	441a      	add	r2, r3
 8007524:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8007528:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800752c:	4202      	tst	r2, r0
 800752e:	f000 80a0 	beq.w	8007672 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	07d1      	lsls	r1, r2, #31
 8007536:	d529      	bpl.n	800758c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	0792      	lsls	r2, r2, #30
 800753c:	d526      	bpl.n	800758c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	f022 0202 	bic.w	r2, r2, #2
 8007544:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8007546:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007548:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800754a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800754c:	bf54      	ite	pl
 800754e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007552:	f041 0102 	orrmi.w	r1, r1, #2
 8007556:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8007558:	0591      	lsls	r1, r2, #22
 800755a:	d503      	bpl.n	8007564 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800755c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800755e:	f041 0104 	orr.w	r1, r1, #4
 8007562:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007564:	05d0      	lsls	r0, r2, #23
 8007566:	d503      	bpl.n	8007570 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8007568:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800756a:	f041 0108 	orr.w	r1, r1, #8
 800756e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007570:	0551      	lsls	r1, r2, #21
 8007572:	d503      	bpl.n	800757c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007574:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8007576:	f041 0110 	orr.w	r1, r1, #16
 800757a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800757c:	0510      	lsls	r0, r2, #20
 800757e:	d503      	bpl.n	8007588 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8007580:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8007582:	f042 0220 	orr.w	r2, r2, #32
 8007586:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8007588:	2201      	movs	r2, #1
 800758a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	06d1      	lsls	r1, r2, #27
 8007590:	d509      	bpl.n	80075a6 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	0692      	lsls	r2, r2, #26
 8007596:	d506      	bpl.n	80075a6 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8007598:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800759a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800759c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800759e:	b112      	cbz	r2, 80075a6 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 80075a0:	4620      	mov	r0, r4
 80075a2:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80075a4:	6823      	ldr	r3, [r4, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	0710      	lsls	r0, r2, #28
 80075aa:	d509      	bpl.n	80075c0 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	06d1      	lsls	r1, r2, #27
 80075b0:	d506      	bpl.n	80075c0 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80075b2:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 80075b4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80075b6:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 80075b8:	b112      	cbz	r2, 80075c0 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 80075ba:	4620      	mov	r0, r4
 80075bc:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	0752      	lsls	r2, r2, #29
 80075c4:	d509      	bpl.n	80075da <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	0710      	lsls	r0, r2, #28
 80075ca:	d506      	bpl.n	80075da <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80075cc:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80075ce:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80075d0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80075d2:	b112      	cbz	r2, 80075da <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80075d4:	4620      	mov	r0, r4
 80075d6:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	0791      	lsls	r1, r2, #30
 80075de:	d516      	bpl.n	800760e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	0752      	lsls	r2, r2, #29
 80075e4:	d513      	bpl.n	800760e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80075ec:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80075ee:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80075f2:	2a04      	cmp	r2, #4
 80075f4:	d034      	beq.n	8007660 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80075f6:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 80075f8:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80075fa:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 80075fc:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 80075fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 8007600:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8007604:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8007608:	b10b      	cbz	r3, 800760e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 800760a:	4620      	mov	r0, r4
 800760c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800760e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8007610:	2b00      	cmp	r3, #0
 8007612:	d02e      	beq.n	8007672 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 8007614:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007616:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8007618:	4b19      	ldr	r3, [pc, #100]	@ (8007680 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800761a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 800761e:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 8007622:	68cb      	ldr	r3, [r1, #12]
 8007624:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8007628:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800762a:	60cb      	str	r3, [r1, #12]
 800762c:	e002      	b.n	8007634 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800762e:	68cb      	ldr	r3, [r1, #12]
 8007630:	07d8      	lsls	r0, r3, #31
 8007632:	d504      	bpl.n	800763e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	3301      	adds	r3, #1
 8007638:	4293      	cmp	r3, r2
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	d9f7      	bls.n	800762e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 800763e:	2300      	movs	r3, #0
 8007640:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007644:	68cb      	ldr	r3, [r1, #12]
 8007646:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007648:	bf4c      	ite	mi
 800764a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800764c:	2301      	movpl	r3, #1
 800764e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8007652:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007654:	b16b      	cbz	r3, 8007672 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 8007656:	4620      	mov	r0, r4
}
 8007658:	b003      	add	sp, #12
 800765a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800765e:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 8007660:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 8007662:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 8007664:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 8007666:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800766a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f1      	bne.n	8007656 <HAL_MDMA_IRQHandler+0x14e>
}
 8007672:	b003      	add	sp, #12
 8007674:	bd30      	pop	{r4, r5, pc}
 8007676:	bf00      	nop
 8007678:	2400000c 	.word	0x2400000c
 800767c:	adffffc0 	.word	0xadffffc0
 8007680:	1b4e81b5 	.word	0x1b4e81b5

08007684 <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8007684:	4a10      	ldr	r2, [pc, #64]	@ (80076c8 <HAL_PWR_EnterSTOPMode+0x44>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	f023 0301 	bic.w	r3, r3, #1
 800768c:	4303      	orrs	r3, r0
{
 800768e:	b410      	push	{r4}
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8007690:	6013      	str	r3, [r2, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8007692:	6913      	ldr	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007694:	4c0d      	ldr	r4, [pc, #52]	@ (80076cc <HAL_PWR_EnterSTOPMode+0x48>)
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8007696:	f023 0305 	bic.w	r3, r3, #5
 800769a:	6113      	str	r3, [r2, #16]
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	f043 0304 	orr.w	r3, r3, #4
 80076a2:	6123      	str	r3, [r4, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80076a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80076a8:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80076ac:	2901      	cmp	r1, #1
 80076ae:	d008      	beq.n	80076c2 <HAL_PWR_EnterSTOPMode+0x3e>
    __WFI ();
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80076b0:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80076b2:	4a06      	ldr	r2, [pc, #24]	@ (80076cc <HAL_PWR_EnterSTOPMode+0x48>)
}
 80076b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80076b8:	6913      	ldr	r3, [r2, #16]
 80076ba:	f023 0304 	bic.w	r3, r3, #4
 80076be:	6113      	str	r3, [r2, #16]
}
 80076c0:	4770      	bx	lr
    __WFI ();
 80076c2:	bf30      	wfi
 80076c4:	e7f5      	b.n	80076b2 <HAL_PWR_EnterSTOPMode+0x2e>
 80076c6:	bf00      	nop
 80076c8:	58024800 	.word	0x58024800
 80076cc:	e000ed00 	.word	0xe000ed00

080076d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80076d0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80076d2:	4c10      	ldr	r4, [pc, #64]	@ (8007714 <HAL_PWREx_ConfigSupply+0x44>)
 80076d4:	68e3      	ldr	r3, [r4, #12]
 80076d6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076da:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80076dc:	d105      	bne.n	80076ea <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	1a18      	subs	r0, r3, r0
 80076e4:	bf18      	it	ne
 80076e6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	4303      	orrs	r3, r0
 80076f0:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80076f2:	f7fc fb77 	bl	8003de4 <HAL_GetTick>
 80076f6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076f8:	e005      	b.n	8007706 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076fa:	f7fc fb73 	bl	8003de4 <HAL_GetTick>
 80076fe:	1b40      	subs	r0, r0, r5
 8007700:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007704:	d804      	bhi.n	8007710 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	049b      	lsls	r3, r3, #18
 800770a:	d5f6      	bpl.n	80076fa <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 800770c:	2000      	movs	r0, #0
}
 800770e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007710:	2001      	movs	r0, #1
}
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	58024800 	.word	0x58024800

08007718 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007718:	4b33      	ldr	r3, [pc, #204]	@ (80077e8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800771a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800771c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800771e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007720:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8007722:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007728:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800772c:	d036      	beq.n	800779c <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800772e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007732:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007736:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800773a:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800773e:	fb05 f202 	mul.w	r2, r5, r2
 8007742:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007748:	ee06 2a90 	vmov	s13, r2
 800774c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007750:	d002      	beq.n	8007758 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8007752:	2902      	cmp	r1, #2
 8007754:	d042      	beq.n	80077dc <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8007756:	b319      	cbz	r1, 80077a0 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007758:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80077ec <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800775c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800776e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007776:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800777a:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800777e:	4b1a      	ldr	r3, [pc, #104]	@ (80077e8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007782:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007786:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007788:	ee07 3a10 	vmov	s14, r3
 800778c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007790:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007794:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007798:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800779c:	bc30      	pop	{r4, r5}
 800779e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	0692      	lsls	r2, r2, #26
 80077a4:	d51d      	bpl.n	80077e2 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077a6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077a8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ac:	4a10      	ldr	r2, [pc, #64]	@ (80077f0 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077b0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077b8:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	ee06 2a10 	vmov	s12, r2
 80077c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077c6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80077ca:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80077ce:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80077d2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80077d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077da:	e7d0      	b.n	800777e <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077dc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80077f4 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80077e0:	e7bc      	b.n	800775c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077e2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80077f8 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80077e6:	e7b9      	b.n	800775c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80077e8:	58024400 	.word	0x58024400
 80077ec:	4a742400 	.word	0x4a742400
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	4bbebc20 	.word	0x4bbebc20
 80077f8:	4c742400 	.word	0x4c742400

080077fc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f000 82dc 	beq.w	8007dba <HAL_RCC_OscConfig+0x5be>
{
 8007802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007804:	6803      	ldr	r3, [r0, #0]
 8007806:	4604      	mov	r4, r0
 8007808:	07d9      	lsls	r1, r3, #31
 800780a:	d53b      	bpl.n	8007884 <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800780c:	499e      	ldr	r1, [pc, #632]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 800780e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007810:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007812:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007816:	2a10      	cmp	r2, #16
 8007818:	f000 80e4 	beq.w	80079e4 <HAL_RCC_OscConfig+0x1e8>
 800781c:	2a18      	cmp	r2, #24
 800781e:	f000 80dc 	beq.w	80079da <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007822:	6863      	ldr	r3, [r4, #4]
 8007824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007828:	d018      	beq.n	800785c <HAL_RCC_OscConfig+0x60>
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 8154 	beq.w	8007ad8 <HAL_RCC_OscConfig+0x2dc>
 8007830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007834:	f000 8270 	beq.w	8007d18 <HAL_RCC_OscConfig+0x51c>
 8007838:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800783c:	4b92      	ldr	r3, [pc, #584]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	f000 8211 	beq.w	8007c66 <HAL_RCC_OscConfig+0x46a>
 8007844:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007858:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800785a:	e004      	b.n	8007866 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800785c:	4a8a      	ldr	r2, [pc, #552]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 800785e:	6813      	ldr	r3, [r2, #0]
 8007860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007864:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007866:	f7fc fabd 	bl	8003de4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800786a:	4e87      	ldr	r6, [pc, #540]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800786c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800786e:	e005      	b.n	800787c <HAL_RCC_OscConfig+0x80>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007870:	f7fc fab8 	bl	8003de4 <HAL_GetTick>
 8007874:	1b40      	subs	r0, r0, r5
 8007876:	2864      	cmp	r0, #100	@ 0x64
 8007878:	f200 812c 	bhi.w	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800787c:	6833      	ldr	r3, [r6, #0]
 800787e:	039b      	lsls	r3, r3, #14
 8007880:	d5f6      	bpl.n	8007870 <HAL_RCC_OscConfig+0x74>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	079d      	lsls	r5, r3, #30
 8007886:	d464      	bmi.n	8007952 <HAL_RCC_OscConfig+0x156>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007888:	06d9      	lsls	r1, r3, #27
 800788a:	d528      	bpl.n	80078de <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800788c:	497e      	ldr	r1, [pc, #504]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 800788e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007890:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007892:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007896:	2a08      	cmp	r2, #8
 8007898:	f000 80b4 	beq.w	8007a04 <HAL_RCC_OscConfig+0x208>
 800789c:	2a18      	cmp	r2, #24
 800789e:	f000 80ac 	beq.w	80079fa <HAL_RCC_OscConfig+0x1fe>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80078a2:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80078a4:	4d78      	ldr	r5, [pc, #480]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 8152 	beq.w	8007b50 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80078b4:	f7fc fa96 	bl	8003de4 <HAL_GetTick>
 80078b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ba:	e005      	b.n	80078c8 <HAL_RCC_OscConfig+0xcc>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80078bc:	f7fc fa92 	bl	8003de4 <HAL_GetTick>
 80078c0:	1b80      	subs	r0, r0, r6
 80078c2:	2802      	cmp	r0, #2
 80078c4:	f200 8106 	bhi.w	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	05db      	lsls	r3, r3, #23
 80078cc:	d5f6      	bpl.n	80078bc <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078ce:	68eb      	ldr	r3, [r5, #12]
 80078d0:	6a22      	ldr	r2, [r4, #32]
 80078d2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80078d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80078da:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	071d      	lsls	r5, r3, #28
 80078e0:	d516      	bpl.n	8007910 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078e2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80078e4:	4d68      	ldr	r5, [pc, #416]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8110 	beq.w	8007b0c <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 80078ec:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80078f4:	f7fc fa76 	bl	8003de4 <HAL_GetTick>
 80078f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078fa:	e005      	b.n	8007908 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078fc:	f7fc fa72 	bl	8003de4 <HAL_GetTick>
 8007900:	1b80      	subs	r0, r0, r6
 8007902:	2802      	cmp	r0, #2
 8007904:	f200 80e6 	bhi.w	8007ad4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007908:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800790a:	0798      	lsls	r0, r3, #30
 800790c:	d5f6      	bpl.n	80078fc <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	069a      	lsls	r2, r3, #26
 8007912:	d516      	bpl.n	8007942 <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007914:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8007916:	4d5c      	ldr	r5, [pc, #368]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8108 	beq.w	8007b2e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 800791e:	682b      	ldr	r3, [r5, #0]
 8007920:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007924:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007926:	f7fc fa5d 	bl	8003de4 <HAL_GetTick>
 800792a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800792c:	e005      	b.n	800793a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800792e:	f7fc fa59 	bl	8003de4 <HAL_GetTick>
 8007932:	1b80      	subs	r0, r0, r6
 8007934:	2802      	cmp	r0, #2
 8007936:	f200 80cd 	bhi.w	8007ad4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	049f      	lsls	r7, r3, #18
 800793e:	d5f6      	bpl.n	800792e <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	0759      	lsls	r1, r3, #29
 8007944:	d46e      	bmi.n	8007a24 <HAL_RCC_OscConfig+0x228>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007946:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 80aa 	bne.w	8007aa2 <HAL_RCC_OscConfig+0x2a6>
  return HAL_OK;
 800794e:	2000      	movs	r0, #0
}
 8007950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007952:	4a4d      	ldr	r2, [pc, #308]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 8007954:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007956:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007958:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800795c:	d122      	bne.n	80079a4 <HAL_RCC_OscConfig+0x1a8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800795e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007960:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	0759      	lsls	r1, r3, #29
 8007966:	d501      	bpl.n	800796c <HAL_RCC_OscConfig+0x170>
 8007968:	2a00      	cmp	r2, #0
 800796a:	d044      	beq.n	80079f6 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800796c:	4d46      	ldr	r5, [pc, #280]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 800796e:	682b      	ldr	r3, [r5, #0]
 8007970:	f023 0319 	bic.w	r3, r3, #25
 8007974:	4313      	orrs	r3, r2
 8007976:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007978:	f7fc fa34 	bl	8003de4 <HAL_GetTick>
 800797c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800797e:	e005      	b.n	800798c <HAL_RCC_OscConfig+0x190>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007980:	f7fc fa30 	bl	8003de4 <HAL_GetTick>
 8007984:	1b80      	subs	r0, r0, r6
 8007986:	2802      	cmp	r0, #2
 8007988:	f200 80a4 	bhi.w	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	075b      	lsls	r3, r3, #29
 8007990:	d5f6      	bpl.n	8007980 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007992:	686b      	ldr	r3, [r5, #4]
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800799a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800799e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	e771      	b.n	8007888 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80079a4:	2b18      	cmp	r3, #24
 80079a6:	f000 80f6 	beq.w	8007b96 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079aa:	4d37      	ldr	r5, [pc, #220]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079ac:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079ae:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	f000 80df 	beq.w	8007b74 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079b6:	f023 0319 	bic.w	r3, r3, #25
 80079ba:	4313      	orrs	r3, r2
 80079bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80079be:	f7fc fa11 	bl	8003de4 <HAL_GetTick>
 80079c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079c4:	e005      	b.n	80079d2 <HAL_RCC_OscConfig+0x1d6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079c6:	f7fc fa0d 	bl	8003de4 <HAL_GetTick>
 80079ca:	1b80      	subs	r0, r0, r6
 80079cc:	2802      	cmp	r0, #2
 80079ce:	f200 8081 	bhi.w	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079d2:	682b      	ldr	r3, [r5, #0]
 80079d4:	075f      	lsls	r7, r3, #29
 80079d6:	d5f6      	bpl.n	80079c6 <HAL_RCC_OscConfig+0x1ca>
 80079d8:	e7db      	b.n	8007992 <HAL_RCC_OscConfig+0x196>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80079da:	f001 0103 	and.w	r1, r1, #3
 80079de:	2902      	cmp	r1, #2
 80079e0:	f47f af1f 	bne.w	8007822 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e4:	4a28      	ldr	r2, [pc, #160]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	0392      	lsls	r2, r2, #14
 80079ea:	f57f af4b 	bpl.w	8007884 <HAL_RCC_OscConfig+0x88>
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	f47f af47 	bne.w	8007884 <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 80079f6:	2001      	movs	r0, #1
}
 80079f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079fa:	f001 0103 	and.w	r1, r1, #3
 80079fe:	2901      	cmp	r1, #1
 8007a00:	f47f af4f 	bne.w	80078a2 <HAL_RCC_OscConfig+0xa6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a04:	4a20      	ldr	r2, [pc, #128]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 8007a06:	6812      	ldr	r2, [r2, #0]
 8007a08:	05d2      	lsls	r2, r2, #23
 8007a0a:	d502      	bpl.n	8007a12 <HAL_RCC_OscConfig+0x216>
 8007a0c:	69e2      	ldr	r2, [r4, #28]
 8007a0e:	2a80      	cmp	r2, #128	@ 0x80
 8007a10:	d1f1      	bne.n	80079f6 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a12:	491d      	ldr	r1, [pc, #116]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 8007a14:	6a20      	ldr	r0, [r4, #32]
 8007a16:	68ca      	ldr	r2, [r1, #12]
 8007a18:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8007a1c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8007a20:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a22:	e75c      	b.n	80078de <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 8007a24:	4d19      	ldr	r5, [pc, #100]	@ (8007a8c <HAL_RCC_OscConfig+0x290>)
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a2c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007a2e:	f7fc f9d9 	bl	8003de4 <HAL_GetTick>
 8007a32:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a34:	e004      	b.n	8007a40 <HAL_RCC_OscConfig+0x244>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a36:	f7fc f9d5 	bl	8003de4 <HAL_GetTick>
 8007a3a:	1b80      	subs	r0, r0, r6
 8007a3c:	2864      	cmp	r0, #100	@ 0x64
 8007a3e:	d849      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	05da      	lsls	r2, r3, #23
 8007a44:	d5f7      	bpl.n	8007a36 <HAL_RCC_OscConfig+0x23a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	f000 8196 	beq.w	8007d7a <HAL_RCC_OscConfig+0x57e>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8176 	beq.w	8007d40 <HAL_RCC_OscConfig+0x544>
 8007a54:	2b05      	cmp	r3, #5
 8007a56:	f000 8196 	beq.w	8007d86 <HAL_RCC_OscConfig+0x58a>
 8007a5a:	2b85      	cmp	r3, #133	@ 0x85
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
 8007a5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a60:	f000 819f 	beq.w	8007da2 <HAL_RCC_OscConfig+0x5a6>
 8007a64:	f022 0201 	bic.w	r2, r2, #1
 8007a68:	671a      	str	r2, [r3, #112]	@ 0x70
 8007a6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a6c:	f022 0204 	bic.w	r2, r2, #4
 8007a70:	671a      	str	r2, [r3, #112]	@ 0x70
 8007a72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a78:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8007a7a:	f7fc f9b3 	bl	8003de4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a7e:	4e02      	ldr	r6, [pc, #8]	@ (8007a88 <HAL_RCC_OscConfig+0x28c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a80:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007a84:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a86:	e008      	b.n	8007a9a <HAL_RCC_OscConfig+0x29e>
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	58024800 	.word	0x58024800
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a90:	f7fc f9a8 	bl	8003de4 <HAL_GetTick>
 8007a94:	1b40      	subs	r0, r0, r5
 8007a96:	42b8      	cmp	r0, r7
 8007a98:	d81c      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a9a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8007a9c:	079b      	lsls	r3, r3, #30
 8007a9e:	d5f7      	bpl.n	8007a90 <HAL_RCC_OscConfig+0x294>
 8007aa0:	e751      	b.n	8007946 <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007aa2:	4da4      	ldr	r5, [pc, #656]	@ (8007d34 <HAL_RCC_OscConfig+0x538>)
 8007aa4:	692a      	ldr	r2, [r5, #16]
 8007aa6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8007aaa:	2a18      	cmp	r2, #24
 8007aac:	f000 80e7 	beq.w	8007c7e <HAL_RCC_OscConfig+0x482>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ab0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8007ab2:	682b      	ldr	r3, [r5, #0]
 8007ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ab8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aba:	d070      	beq.n	8007b9e <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 8007abc:	f7fc f992 	bl	8003de4 <HAL_GetTick>
 8007ac0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ac2:	682b      	ldr	r3, [r5, #0]
 8007ac4:	019b      	lsls	r3, r3, #6
 8007ac6:	f57f af42 	bpl.w	800794e <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aca:	f7fc f98b 	bl	8003de4 <HAL_GetTick>
 8007ace:	1b00      	subs	r0, r0, r4
 8007ad0:	2802      	cmp	r0, #2
 8007ad2:	d9f6      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x2c6>
            return HAL_TIMEOUT;
 8007ad4:	2003      	movs	r0, #3
}
 8007ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ad8:	4d96      	ldr	r5, [pc, #600]	@ (8007d34 <HAL_RCC_OscConfig+0x538>)
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	682b      	ldr	r3, [r5, #0]
 8007aec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007af0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007af2:	f7fc f977 	bl	8003de4 <HAL_GetTick>
 8007af6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007af8:	e004      	b.n	8007b04 <HAL_RCC_OscConfig+0x308>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007afa:	f7fc f973 	bl	8003de4 <HAL_GetTick>
 8007afe:	1b80      	subs	r0, r0, r6
 8007b00:	2864      	cmp	r0, #100	@ 0x64
 8007b02:	d8e7      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	039f      	lsls	r7, r3, #14
 8007b08:	d4f7      	bmi.n	8007afa <HAL_RCC_OscConfig+0x2fe>
 8007b0a:	e6ba      	b.n	8007882 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8007b0c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8007b14:	f7fc f966 	bl	8003de4 <HAL_GetTick>
 8007b18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b1a:	e004      	b.n	8007b26 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b1c:	f7fc f962 	bl	8003de4 <HAL_GetTick>
 8007b20:	1b80      	subs	r0, r0, r6
 8007b22:	2802      	cmp	r0, #2
 8007b24:	d8d6      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b26:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007b28:	0799      	lsls	r1, r3, #30
 8007b2a:	d4f7      	bmi.n	8007b1c <HAL_RCC_OscConfig+0x320>
 8007b2c:	e6ef      	b.n	800790e <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 8007b2e:	682b      	ldr	r3, [r5, #0]
 8007b30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b34:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007b36:	f7fc f955 	bl	8003de4 <HAL_GetTick>
 8007b3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b3c:	e004      	b.n	8007b48 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b3e:	f7fc f951 	bl	8003de4 <HAL_GetTick>
 8007b42:	1b80      	subs	r0, r0, r6
 8007b44:	2802      	cmp	r0, #2
 8007b46:	d8c5      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	0498      	lsls	r0, r3, #18
 8007b4c:	d4f7      	bmi.n	8007b3e <HAL_RCC_OscConfig+0x342>
 8007b4e:	e6f7      	b.n	8007940 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007b58:	f7fc f944 	bl	8003de4 <HAL_GetTick>
 8007b5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b5e:	e004      	b.n	8007b6a <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b60:	f7fc f940 	bl	8003de4 <HAL_GetTick>
 8007b64:	1b80      	subs	r0, r0, r6
 8007b66:	2802      	cmp	r0, #2
 8007b68:	d8b4      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b6a:	682b      	ldr	r3, [r5, #0]
 8007b6c:	05df      	lsls	r7, r3, #23
 8007b6e:	d4f7      	bmi.n	8007b60 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	e6b4      	b.n	80078de <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007b7a:	f7fc f933 	bl	8003de4 <HAL_GetTick>
 8007b7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b80:	e004      	b.n	8007b8c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b82:	f7fc f92f 	bl	8003de4 <HAL_GetTick>
 8007b86:	1b80      	subs	r0, r0, r6
 8007b88:	2802      	cmp	r0, #2
 8007b8a:	d8a3      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	0758      	lsls	r0, r3, #29
 8007b90:	d4f7      	bmi.n	8007b82 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	e678      	b.n	8007888 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b96:	0790      	lsls	r0, r2, #30
 8007b98:	f47f af07 	bne.w	80079aa <HAL_RCC_OscConfig+0x1ae>
 8007b9c:	e6df      	b.n	800795e <HAL_RCC_OscConfig+0x162>
        tickstart = HAL_GetTick();
 8007b9e:	f7fc f921 	bl	8003de4 <HAL_GetTick>
 8007ba2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ba4:	e004      	b.n	8007bb0 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ba6:	f7fc f91d 	bl	8003de4 <HAL_GetTick>
 8007baa:	1b80      	subs	r0, r0, r6
 8007bac:	2802      	cmp	r0, #2
 8007bae:	d891      	bhi.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	0199      	lsls	r1, r3, #6
 8007bb4:	d4f7      	bmi.n	8007ba6 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bb6:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8007bb8:	4b5f      	ldr	r3, [pc, #380]	@ (8007d38 <HAL_RCC_OscConfig+0x53c>)
 8007bba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007bbc:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007bbe:	495f      	ldr	r1, [pc, #380]	@ (8007d3c <HAL_RCC_OscConfig+0x540>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bc0:	4e5c      	ldr	r6, [pc, #368]	@ (8007d34 <HAL_RCC_OscConfig+0x538>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007bc6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007bca:	62ab      	str	r3, [r5, #40]	@ 0x28
 8007bcc:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	3a01      	subs	r2, #1
 8007bd4:	025b      	lsls	r3, r3, #9
 8007bd6:	0412      	lsls	r2, r2, #16
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007bde:	4313      	orrs	r3, r2
 8007be0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007be2:	3a01      	subs	r2, #1
 8007be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007be8:	4313      	orrs	r3, r2
 8007bea:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007bec:	3a01      	subs	r2, #1
 8007bee:	0612      	lsls	r2, r2, #24
 8007bf0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8007bf8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c00:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8007c02:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007c04:	4011      	ands	r1, r2
 8007c06:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8007c0a:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c0c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007c0e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007c10:	f023 030c 	bic.w	r3, r3, #12
 8007c14:	4313      	orrs	r3, r2
 8007c16:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c18:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007c1a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007c1c:	f023 0302 	bic.w	r3, r3, #2
 8007c20:	4313      	orrs	r3, r2
 8007c22:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c24:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c2a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c2c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c32:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c34:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007c36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c3a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8007c3c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007c4c:	f7fc f8ca 	bl	8003de4 <HAL_GetTick>
 8007c50:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	019a      	lsls	r2, r3, #6
 8007c56:	f53f ae7a 	bmi.w	800794e <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c5a:	f7fc f8c3 	bl	8003de4 <HAL_GetTick>
 8007c5e:	1b00      	subs	r0, r0, r4
 8007c60:	2802      	cmp	r0, #2
 8007c62:	d9f6      	bls.n	8007c52 <HAL_RCC_OscConfig+0x456>
 8007c64:	e736      	b.n	8007ad4 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c66:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007c7a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c7c:	e5f3      	b.n	8007866 <HAL_RCC_OscConfig+0x6a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c7e:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c80:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c82:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c84:	f43f aeb7 	beq.w	80079f6 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c88:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007c8e:	428b      	cmp	r3, r1
 8007c90:	f47f aeb1 	bne.w	80079f6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c94:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	f47f aeab 	bne.w	80079f6 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ca0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007ca2:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8007ca6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	f47f aea4 	bne.w	80079f6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cb0:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8007cb4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	f47f ae9d 	bne.w	80079f6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cbc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007cbe:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8007cc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	f47f ae96 	bne.w	80079f6 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007cca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007ccc:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8007cd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cd2:	4298      	cmp	r0, r3
 8007cd4:	f47f ae8f 	bne.w	80079f6 <HAL_RCC_OscConfig+0x1fa>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007cd8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007cda:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007cdc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	f43f ae34 	beq.w	800794e <HAL_RCC_OscConfig+0x152>
          __HAL_RCC_PLLFRACN_DISABLE();
 8007ce6:	4a13      	ldr	r2, [pc, #76]	@ (8007d34 <HAL_RCC_OscConfig+0x538>)
 8007ce8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007cea:	f023 0301 	bic.w	r3, r3, #1
 8007cee:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8007cf0:	f7fc f878 	bl	8003de4 <HAL_GetTick>
 8007cf4:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007cf6:	f7fc f875 	bl	8003de4 <HAL_GetTick>
 8007cfa:	42a8      	cmp	r0, r5
 8007cfc:	d0fb      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x4fa>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8007d34 <HAL_RCC_OscConfig+0x538>)
 8007d00:	4b0e      	ldr	r3, [pc, #56]	@ (8007d3c <HAL_RCC_OscConfig+0x540>)
 8007d02:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8007d04:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007d06:	4003      	ands	r3, r0
 8007d08:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007d0c:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8007d0e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007d10:	f043 0301 	orr.w	r3, r3, #1
 8007d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d16:	e61a      	b.n	800794e <HAL_RCC_OscConfig+0x152>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d18:	4b06      	ldr	r3, [pc, #24]	@ (8007d34 <HAL_RCC_OscConfig+0x538>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007d30:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d32:	e598      	b.n	8007866 <HAL_RCC_OscConfig+0x6a>
 8007d34:	58024400 	.word	0x58024400
 8007d38:	fffffc0c 	.word	0xfffffc0c
 8007d3c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d40:	4d1f      	ldr	r5, [pc, #124]	@ (8007dc0 <HAL_RCC_OscConfig+0x5c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d42:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d46:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	672b      	str	r3, [r5, #112]	@ 0x70
 8007d4e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8007d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d54:	672b      	str	r3, [r5, #112]	@ 0x70
 8007d56:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8007d58:	f023 0304 	bic.w	r3, r3, #4
 8007d5c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8007d5e:	f7fc f841 	bl	8003de4 <HAL_GetTick>
 8007d62:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d64:	e005      	b.n	8007d72 <HAL_RCC_OscConfig+0x576>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d66:	f7fc f83d 	bl	8003de4 <HAL_GetTick>
 8007d6a:	1b80      	subs	r0, r0, r6
 8007d6c:	42b8      	cmp	r0, r7
 8007d6e:	f63f aeb1 	bhi.w	8007ad4 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d72:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8007d74:	0798      	lsls	r0, r3, #30
 8007d76:	d4f6      	bmi.n	8007d66 <HAL_RCC_OscConfig+0x56a>
 8007d78:	e5e5      	b.n	8007946 <HAL_RCC_OscConfig+0x14a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d7a:	4a11      	ldr	r2, [pc, #68]	@ (8007dc0 <HAL_RCC_OscConfig+0x5c4>)
 8007d7c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d84:	e679      	b.n	8007a7a <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d86:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <HAL_RCC_OscConfig+0x5c4>)
 8007d88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d8a:	f042 0204 	orr.w	r2, r2, #4
 8007d8e:	671a      	str	r2, [r3, #112]	@ 0x70
 8007d90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d96:	671a      	str	r2, [r3, #112]	@ 0x70
 8007d98:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007da0:	e66b      	b.n	8007a7a <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007da2:	f042 0204 	orr.w	r2, r2, #4
 8007da6:	671a      	str	r2, [r3, #112]	@ 0x70
 8007da8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007daa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007dae:	671a      	str	r2, [r3, #112]	@ 0x70
 8007db0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007db2:	f042 0201 	orr.w	r2, r2, #1
 8007db6:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007db8:	e65f      	b.n	8007a7a <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8007dba:	2001      	movs	r0, #1
}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400

08007dc4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dc4:	4a3f      	ldr	r2, [pc, #252]	@ (8007ec4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007dc6:	6913      	ldr	r3, [r2, #16]
 8007dc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dcc:	2b10      	cmp	r3, #16
 8007dce:	d004      	beq.n	8007dda <HAL_RCC_GetSysClockFreq+0x16>
 8007dd0:	2b18      	cmp	r3, #24
 8007dd2:	d00d      	beq.n	8007df0 <HAL_RCC_GetSysClockFreq+0x2c>
 8007dd4:	b11b      	cbz	r3, 8007dde <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8007dd6:	483c      	ldr	r0, [pc, #240]	@ (8007ec8 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dd8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dda:	483c      	ldr	r0, [pc, #240]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8007ddc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dde:	6813      	ldr	r3, [r2, #0]
 8007de0:	0699      	lsls	r1, r3, #26
 8007de2:	d548      	bpl.n	8007e76 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007de4:	6813      	ldr	r3, [r2, #0]
 8007de6:	483a      	ldr	r0, [pc, #232]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007de8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007dec:	40d8      	lsrs	r0, r3
 8007dee:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007df0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8007df2:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007df4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007df6:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8007df8:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007dfc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007dfe:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8007e02:	d036      	beq.n	8007e72 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e04:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e08:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e0c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e10:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e14:	fb05 f303 	mul.w	r3, r5, r3
 8007e18:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e1e:	ee06 3a90 	vmov	s13, r3
 8007e22:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007e26:	d002      	beq.n	8007e2e <HAL_RCC_GetSysClockFreq+0x6a>
 8007e28:	2902      	cmp	r1, #2
 8007e2a:	d026      	beq.n	8007e7a <HAL_RCC_GetSysClockFreq+0xb6>
 8007e2c:	b341      	cbz	r1, 8007e80 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e2e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8007ed4 <HAL_RCC_GetSysClockFreq+0x110>
 8007e32:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007e36:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3c:	ee07 3a10 	vmov	s14, r3
 8007e40:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007e44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007e48:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007e4c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007e50:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e54:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e58:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007e5c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6e:	ee17 0a90 	vmov	r0, s15
}
 8007e72:	bc30      	pop	{r4, r5}
 8007e74:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e76:	4816      	ldr	r0, [pc, #88]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8007e78:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e7a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8007ed8 <HAL_RCC_GetSysClockFreq+0x114>
 8007e7e:	e7d8      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e80:	6813      	ldr	r3, [r2, #0]
 8007e82:	069b      	lsls	r3, r3, #26
 8007e84:	d51a      	bpl.n	8007ebc <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e86:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e88:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007e8c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e8e:	4910      	ldr	r1, [pc, #64]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e90:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e98:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e9a:	ee07 3a10 	vmov	s14, r3
 8007e9e:	ee06 1a10 	vmov	s12, r1
 8007ea2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007ea6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007eaa:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007eae:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8007eb2:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8007eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007eba:	e7cb      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ebc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8007edc <HAL_RCC_GetSysClockFreq+0x118>
 8007ec0:	e7b7      	b.n	8007e32 <HAL_RCC_GetSysClockFreq+0x6e>
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	003d0900 	.word	0x003d0900
 8007ecc:	017d7840 	.word	0x017d7840
 8007ed0:	03d09000 	.word	0x03d09000
 8007ed4:	4a742400 	.word	0x4a742400
 8007ed8:	4bbebc20 	.word	0x4bbebc20
 8007edc:	4c742400 	.word	0x4c742400

08007ee0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f000 810e 	beq.w	8008102 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ee6:	4a8d      	ldr	r2, [pc, #564]	@ (800811c <HAL_RCC_ClockConfig+0x23c>)
 8007ee8:	6813      	ldr	r3, [r2, #0]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	428b      	cmp	r3, r1
{
 8007ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ef8:	d20c      	bcs.n	8007f14 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	f023 030f 	bic.w	r3, r3, #15
 8007f00:	430b      	orrs	r3, r1
 8007f02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f04:	6813      	ldr	r3, [r2, #0]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	428b      	cmp	r3, r1
 8007f0c:	d002      	beq.n	8007f14 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007f0e:	2001      	movs	r0, #1
}
 8007f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	0758      	lsls	r0, r3, #29
 8007f18:	d50b      	bpl.n	8007f32 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007f1a:	4981      	ldr	r1, [pc, #516]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8007f1c:	6920      	ldr	r0, [r4, #16]
 8007f1e:	698a      	ldr	r2, [r1, #24]
 8007f20:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007f24:	4290      	cmp	r0, r2
 8007f26:	d904      	bls.n	8007f32 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f28:	698a      	ldr	r2, [r1, #24]
 8007f2a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007f2e:	4302      	orrs	r2, r0
 8007f30:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f32:	0719      	lsls	r1, r3, #28
 8007f34:	d50b      	bpl.n	8007f4e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007f36:	497a      	ldr	r1, [pc, #488]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8007f38:	6960      	ldr	r0, [r4, #20]
 8007f3a:	69ca      	ldr	r2, [r1, #28]
 8007f3c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007f40:	4290      	cmp	r0, r2
 8007f42:	d904      	bls.n	8007f4e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f44:	69ca      	ldr	r2, [r1, #28]
 8007f46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007f4a:	4302      	orrs	r2, r0
 8007f4c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f4e:	06da      	lsls	r2, r3, #27
 8007f50:	d50b      	bpl.n	8007f6a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007f52:	4973      	ldr	r1, [pc, #460]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8007f54:	69a0      	ldr	r0, [r4, #24]
 8007f56:	69ca      	ldr	r2, [r1, #28]
 8007f58:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007f5c:	4290      	cmp	r0, r2
 8007f5e:	d904      	bls.n	8007f6a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f60:	69ca      	ldr	r2, [r1, #28]
 8007f62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f66:	4302      	orrs	r2, r0
 8007f68:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f6a:	069f      	lsls	r7, r3, #26
 8007f6c:	d50b      	bpl.n	8007f86 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007f6e:	496c      	ldr	r1, [pc, #432]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8007f70:	69e0      	ldr	r0, [r4, #28]
 8007f72:	6a0a      	ldr	r2, [r1, #32]
 8007f74:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007f78:	4290      	cmp	r0, r2
 8007f7a:	d904      	bls.n	8007f86 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f7c:	6a0a      	ldr	r2, [r1, #32]
 8007f7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007f82:	4302      	orrs	r2, r0
 8007f84:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f86:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f88:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f8c:	f140 80ab 	bpl.w	80080e6 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007f90:	4e63      	ldr	r6, [pc, #396]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8007f92:	68e0      	ldr	r0, [r4, #12]
 8007f94:	69b1      	ldr	r1, [r6, #24]
 8007f96:	f001 010f 	and.w	r1, r1, #15
 8007f9a:	4288      	cmp	r0, r1
 8007f9c:	d904      	bls.n	8007fa8 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f9e:	69b1      	ldr	r1, [r6, #24]
 8007fa0:	f021 010f 	bic.w	r1, r1, #15
 8007fa4:	4301      	orrs	r1, r0
 8007fa6:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fa8:	2a00      	cmp	r2, #0
 8007faa:	d030      	beq.n	800800e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007fac:	4a5c      	ldr	r2, [pc, #368]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8007fae:	68a1      	ldr	r1, [r4, #8]
 8007fb0:	6993      	ldr	r3, [r2, #24]
 8007fb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fba:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fbc:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fbe:	2902      	cmp	r1, #2
 8007fc0:	f000 80a1 	beq.w	8008106 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fc4:	2903      	cmp	r1, #3
 8007fc6:	f000 8098 	beq.w	80080fa <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007fca:	2901      	cmp	r1, #1
 8007fcc:	f000 80a1 	beq.w	8008112 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fd0:	075f      	lsls	r7, r3, #29
 8007fd2:	d59c      	bpl.n	8007f0e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fd4:	4e52      	ldr	r6, [pc, #328]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fd6:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fda:	6933      	ldr	r3, [r6, #16]
 8007fdc:	f023 0307 	bic.w	r3, r3, #7
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8007fe4:	f7fb fefe 	bl	8003de4 <HAL_GetTick>
 8007fe8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fea:	e005      	b.n	8007ff8 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fec:	f7fb fefa 	bl	8003de4 <HAL_GetTick>
 8007ff0:	1bc0      	subs	r0, r0, r7
 8007ff2:	4540      	cmp	r0, r8
 8007ff4:	f200 808b 	bhi.w	800810e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ff8:	6933      	ldr	r3, [r6, #16]
 8007ffa:	6862      	ldr	r2, [r4, #4]
 8007ffc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008000:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008004:	d1f2      	bne.n	8007fec <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	079e      	lsls	r6, r3, #30
 800800a:	d506      	bpl.n	800801a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800800c:	68e0      	ldr	r0, [r4, #12]
 800800e:	4944      	ldr	r1, [pc, #272]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8008010:	698a      	ldr	r2, [r1, #24]
 8008012:	f002 020f 	and.w	r2, r2, #15
 8008016:	4282      	cmp	r2, r0
 8008018:	d869      	bhi.n	80080ee <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800801a:	4940      	ldr	r1, [pc, #256]	@ (800811c <HAL_RCC_ClockConfig+0x23c>)
 800801c:	680a      	ldr	r2, [r1, #0]
 800801e:	f002 020f 	and.w	r2, r2, #15
 8008022:	42aa      	cmp	r2, r5
 8008024:	d90a      	bls.n	800803c <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008026:	680a      	ldr	r2, [r1, #0]
 8008028:	f022 020f 	bic.w	r2, r2, #15
 800802c:	432a      	orrs	r2, r5
 800802e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008030:	680a      	ldr	r2, [r1, #0]
 8008032:	f002 020f 	and.w	r2, r2, #15
 8008036:	42aa      	cmp	r2, r5
 8008038:	f47f af69 	bne.w	8007f0e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800803c:	0758      	lsls	r0, r3, #29
 800803e:	d50b      	bpl.n	8008058 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008040:	4937      	ldr	r1, [pc, #220]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8008042:	6920      	ldr	r0, [r4, #16]
 8008044:	698a      	ldr	r2, [r1, #24]
 8008046:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800804a:	4290      	cmp	r0, r2
 800804c:	d204      	bcs.n	8008058 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800804e:	698a      	ldr	r2, [r1, #24]
 8008050:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008054:	4302      	orrs	r2, r0
 8008056:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008058:	0719      	lsls	r1, r3, #28
 800805a:	d50b      	bpl.n	8008074 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800805c:	4930      	ldr	r1, [pc, #192]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 800805e:	6960      	ldr	r0, [r4, #20]
 8008060:	69ca      	ldr	r2, [r1, #28]
 8008062:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8008066:	4290      	cmp	r0, r2
 8008068:	d204      	bcs.n	8008074 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800806a:	69ca      	ldr	r2, [r1, #28]
 800806c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008070:	4302      	orrs	r2, r0
 8008072:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008074:	06da      	lsls	r2, r3, #27
 8008076:	d50b      	bpl.n	8008090 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008078:	4929      	ldr	r1, [pc, #164]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 800807a:	69a0      	ldr	r0, [r4, #24]
 800807c:	69ca      	ldr	r2, [r1, #28]
 800807e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8008082:	4290      	cmp	r0, r2
 8008084:	d204      	bcs.n	8008090 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008086:	69ca      	ldr	r2, [r1, #28]
 8008088:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800808c:	4302      	orrs	r2, r0
 800808e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008090:	069b      	lsls	r3, r3, #26
 8008092:	d50b      	bpl.n	80080ac <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008094:	4a22      	ldr	r2, [pc, #136]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 8008096:	69e1      	ldr	r1, [r4, #28]
 8008098:	6a13      	ldr	r3, [r2, #32]
 800809a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800809e:	4299      	cmp	r1, r3
 80080a0:	d204      	bcs.n	80080ac <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080a2:	6a13      	ldr	r3, [r2, #32]
 80080a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80080ac:	f7ff fe8a 	bl	8007dc4 <HAL_RCC_GetSysClockFreq>
 80080b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008120 <HAL_RCC_ClockConfig+0x240>)
 80080b2:	4603      	mov	r3, r0
 80080b4:	481b      	ldr	r0, [pc, #108]	@ (8008124 <HAL_RCC_ClockConfig+0x244>)
 80080b6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080b8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80080ba:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80080be:	4d1a      	ldr	r5, [pc, #104]	@ (8008128 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080c0:	f002 020f 	and.w	r2, r2, #15
 80080c4:	4c19      	ldr	r4, [pc, #100]	@ (800812c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80080c6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080c8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80080ca:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80080ce:	4818      	ldr	r0, [pc, #96]	@ (8008130 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080d0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80080d4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80080d6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80080d8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80080da:	40d3      	lsrs	r3, r2
 80080dc:	6023      	str	r3, [r4, #0]
}
 80080de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80080e2:	f7fb be1d 	b.w	8003d20 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080e6:	2a00      	cmp	r2, #0
 80080e8:	f47f af60 	bne.w	8007fac <HAL_RCC_ClockConfig+0xcc>
 80080ec:	e795      	b.n	800801a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ee:	698a      	ldr	r2, [r1, #24]
 80080f0:	f022 020f 	bic.w	r2, r2, #15
 80080f4:	4302      	orrs	r2, r0
 80080f6:	618a      	str	r2, [r1, #24]
 80080f8:	e78f      	b.n	800801a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080fa:	019a      	lsls	r2, r3, #6
 80080fc:	f53f af6a 	bmi.w	8007fd4 <HAL_RCC_ClockConfig+0xf4>
 8008100:	e705      	b.n	8007f0e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8008102:	2001      	movs	r0, #1
}
 8008104:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008106:	0398      	lsls	r0, r3, #14
 8008108:	f53f af64 	bmi.w	8007fd4 <HAL_RCC_ClockConfig+0xf4>
 800810c:	e6ff      	b.n	8007f0e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800810e:	2003      	movs	r0, #3
 8008110:	e6fe      	b.n	8007f10 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008112:	05db      	lsls	r3, r3, #23
 8008114:	f53f af5e 	bmi.w	8007fd4 <HAL_RCC_ClockConfig+0xf4>
 8008118:	e6f9      	b.n	8007f0e <HAL_RCC_ClockConfig+0x2e>
 800811a:	bf00      	nop
 800811c:	52002000 	.word	0x52002000
 8008120:	58024400 	.word	0x58024400
 8008124:	0800eebc 	.word	0x0800eebc
 8008128:	2400000c 	.word	0x2400000c
 800812c:	24000008 	.word	0x24000008
 8008130:	24000014 	.word	0x24000014

08008134 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008134:	4a18      	ldr	r2, [pc, #96]	@ (8008198 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008136:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008138:	6913      	ldr	r3, [r2, #16]
 800813a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800813e:	2b10      	cmp	r3, #16
 8008140:	d019      	beq.n	8008176 <HAL_RCC_GetHCLKFreq+0x42>
 8008142:	2b18      	cmp	r3, #24
 8008144:	d022      	beq.n	800818c <HAL_RCC_GetHCLKFreq+0x58>
 8008146:	b1c3      	cbz	r3, 800817a <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8008148:	4b14      	ldr	r3, [pc, #80]	@ (800819c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800814a:	4913      	ldr	r1, [pc, #76]	@ (8008198 <HAL_RCC_GetHCLKFreq+0x64>)
 800814c:	4814      	ldr	r0, [pc, #80]	@ (80081a0 <HAL_RCC_GetHCLKFreq+0x6c>)
 800814e:	698a      	ldr	r2, [r1, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008150:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8008152:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008156:	4c13      	ldr	r4, [pc, #76]	@ (80081a4 <HAL_RCC_GetHCLKFreq+0x70>)
 8008158:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800815c:	4d12      	ldr	r5, [pc, #72]	@ (80081a8 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800815e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008160:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8008162:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008166:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800816a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800816c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8008170:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008172:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008174:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008176:	4b0d      	ldr	r3, [pc, #52]	@ (80081ac <HAL_RCC_GetHCLKFreq+0x78>)
 8008178:	e7e7      	b.n	800814a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800817a:	6813      	ldr	r3, [r2, #0]
 800817c:	069b      	lsls	r3, r3, #26
 800817e:	d509      	bpl.n	8008194 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008180:	6812      	ldr	r2, [r2, #0]
 8008182:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008184:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008188:	40d3      	lsrs	r3, r2
 800818a:	e7de      	b.n	800814a <HAL_RCC_GetHCLKFreq+0x16>
 800818c:	f7ff fac4 	bl	8007718 <HAL_RCC_GetSysClockFreq.part.0>
 8008190:	4603      	mov	r3, r0
 8008192:	e7da      	b.n	800814a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008194:	4b06      	ldr	r3, [pc, #24]	@ (80081b0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008196:	e7d8      	b.n	800814a <HAL_RCC_GetHCLKFreq+0x16>
 8008198:	58024400 	.word	0x58024400
 800819c:	003d0900 	.word	0x003d0900
 80081a0:	0800eebc 	.word	0x0800eebc
 80081a4:	24000008 	.word	0x24000008
 80081a8:	2400000c 	.word	0x2400000c
 80081ac:	017d7840 	.word	0x017d7840
 80081b0:	03d09000 	.word	0x03d09000

080081b4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008228 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081b6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081b8:	6913      	ldr	r3, [r2, #16]
 80081ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081be:	2b10      	cmp	r3, #16
 80081c0:	d020      	beq.n	8008204 <HAL_RCC_GetPCLK1Freq+0x50>
 80081c2:	2b18      	cmp	r3, #24
 80081c4:	d029      	beq.n	800821a <HAL_RCC_GetPCLK1Freq+0x66>
 80081c6:	b1fb      	cbz	r3, 8008208 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 80081c8:	4b18      	ldr	r3, [pc, #96]	@ (800822c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80081ca:	4a17      	ldr	r2, [pc, #92]	@ (8008228 <HAL_RCC_GetPCLK1Freq+0x74>)
 80081cc:	4918      	ldr	r1, [pc, #96]	@ (8008230 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80081ce:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80081d0:	4d18      	ldr	r5, [pc, #96]	@ (8008234 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80081d2:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80081d6:	4c18      	ldr	r4, [pc, #96]	@ (8008238 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80081d8:	5c08      	ldrb	r0, [r1, r0]
 80081da:	f000 001f 	and.w	r0, r0, #31
 80081de:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80081e0:	6990      	ldr	r0, [r2, #24]
 80081e2:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80081e6:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80081e8:	5c08      	ldrb	r0, [r1, r0]
 80081ea:	f000 001f 	and.w	r0, r0, #31
 80081ee:	40c3      	lsrs	r3, r0
 80081f0:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80081f2:	69d2      	ldr	r2, [r2, #28]
 80081f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80081f8:	5c88      	ldrb	r0, [r1, r2]
 80081fa:	f000 001f 	and.w	r0, r0, #31
#endif
}
 80081fe:	fa23 f000 	lsr.w	r0, r3, r0
 8008202:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008204:	4b0d      	ldr	r3, [pc, #52]	@ (800823c <HAL_RCC_GetPCLK1Freq+0x88>)
 8008206:	e7e0      	b.n	80081ca <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008208:	6813      	ldr	r3, [r2, #0]
 800820a:	069b      	lsls	r3, r3, #26
 800820c:	d509      	bpl.n	8008222 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008212:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008216:	40d3      	lsrs	r3, r2
 8008218:	e7d7      	b.n	80081ca <HAL_RCC_GetPCLK1Freq+0x16>
 800821a:	f7ff fa7d 	bl	8007718 <HAL_RCC_GetSysClockFreq.part.0>
 800821e:	4603      	mov	r3, r0
 8008220:	e7d3      	b.n	80081ca <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008222:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008224:	e7d1      	b.n	80081ca <HAL_RCC_GetPCLK1Freq+0x16>
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
 800822c:	003d0900 	.word	0x003d0900
 8008230:	0800eebc 	.word	0x0800eebc
 8008234:	2400000c 	.word	0x2400000c
 8008238:	24000008 	.word	0x24000008
 800823c:	017d7840 	.word	0x017d7840
 8008240:	03d09000 	.word	0x03d09000

08008244 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008246:	4c36      	ldr	r4, [pc, #216]	@ (8008320 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8008248:	4606      	mov	r6, r0
 800824a:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008252:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008254:	f7fb fdc6 	bl	8003de4 <HAL_GetTick>
 8008258:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800825a:	e004      	b.n	8008266 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800825c:	f7fb fdc2 	bl	8003de4 <HAL_GetTick>
 8008260:	1b40      	subs	r0, r0, r5
 8008262:	2802      	cmp	r0, #2
 8008264:	d856      	bhi.n	8008314 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	011a      	lsls	r2, r3, #4
 800826a:	d4f7      	bmi.n	800825c <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800826c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800826e:	6832      	ldr	r2, [r6, #0]
 8008270:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008274:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800827a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800827e:	3b01      	subs	r3, #1
 8008280:	3a01      	subs	r2, #1
 8008282:	025b      	lsls	r3, r3, #9
 8008284:	0412      	lsls	r2, r2, #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800828c:	4313      	orrs	r3, r2
 800828e:	6872      	ldr	r2, [r6, #4]
 8008290:	3a01      	subs	r2, #1
 8008292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008296:	4313      	orrs	r3, r2
 8008298:	6932      	ldr	r2, [r6, #16]
 800829a:	3a01      	subs	r2, #1
 800829c:	0612      	lsls	r2, r2, #24
 800829e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80082a2:	4313      	orrs	r3, r2
 80082a4:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80082a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80082a8:	6972      	ldr	r2, [r6, #20]
 80082aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80082ae:	4313      	orrs	r3, r2
 80082b0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80082b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80082b4:	69b3      	ldr	r3, [r6, #24]
 80082b6:	f022 0220 	bic.w	r2, r2, #32
 80082ba:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082bc:	4b19      	ldr	r3, [pc, #100]	@ (8008324 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80082be:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80082c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80082c2:	f022 0210 	bic.w	r2, r2, #16
 80082c6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082c8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80082ca:	69f2      	ldr	r2, [r6, #28]
 80082cc:	400b      	ands	r3, r1
 80082ce:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80082d2:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80082d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80082d6:	f043 0310 	orr.w	r3, r3, #16
 80082da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80082dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80082de:	b1df      	cbz	r7, 8008318 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082e0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082e2:	bf0c      	ite	eq
 80082e4:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082e8:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80082ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008320 <RCCEx_PLL2_Config.part.0+0xdc>)
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082f6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082f8:	f7fb fd74 	bl	8003de4 <HAL_GetTick>
 80082fc:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082fe:	e004      	b.n	800830a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008300:	f7fb fd70 	bl	8003de4 <HAL_GetTick>
 8008304:	1b40      	subs	r0, r0, r5
 8008306:	2802      	cmp	r0, #2
 8008308:	d804      	bhi.n	8008314 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	d5f7      	bpl.n	8008300 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8008310:	2000      	movs	r0, #0
}
 8008312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008314:	2003      	movs	r0, #3
}
 8008316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008318:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800831c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800831e:	e7e6      	b.n	80082ee <RCCEx_PLL2_Config.part.0+0xaa>
 8008320:	58024400 	.word	0x58024400
 8008324:	ffff0007 	.word	0xffff0007

08008328 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800832a:	4c36      	ldr	r4, [pc, #216]	@ (8008404 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008336:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008338:	f7fb fd54 	bl	8003de4 <HAL_GetTick>
 800833c:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800833e:	e004      	b.n	800834a <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008340:	f7fb fd50 	bl	8003de4 <HAL_GetTick>
 8008344:	1b40      	subs	r0, r0, r5
 8008346:	2802      	cmp	r0, #2
 8008348:	d856      	bhi.n	80083f8 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	009a      	lsls	r2, r3, #2
 800834e:	d4f7      	bmi.n	8008340 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008350:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008352:	6832      	ldr	r2, [r6, #0]
 8008354:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8008358:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800835c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800835e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008362:	3b01      	subs	r3, #1
 8008364:	3a01      	subs	r2, #1
 8008366:	025b      	lsls	r3, r3, #9
 8008368:	0412      	lsls	r2, r2, #16
 800836a:	b29b      	uxth	r3, r3
 800836c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008370:	4313      	orrs	r3, r2
 8008372:	6872      	ldr	r2, [r6, #4]
 8008374:	3a01      	subs	r2, #1
 8008376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800837a:	4313      	orrs	r3, r2
 800837c:	6932      	ldr	r2, [r6, #16]
 800837e:	3a01      	subs	r2, #1
 8008380:	0612      	lsls	r2, r2, #24
 8008382:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008386:	4313      	orrs	r3, r2
 8008388:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800838a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800838c:	6972      	ldr	r2, [r6, #20]
 800838e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008392:	4313      	orrs	r3, r2
 8008394:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008396:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008398:	69b3      	ldr	r3, [r6, #24]
 800839a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800839e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083a0:	4b19      	ldr	r3, [pc, #100]	@ (8008408 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083a2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80083a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083aa:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083ae:	69f2      	ldr	r2, [r6, #28]
 80083b0:	400b      	ands	r3, r1
 80083b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80083b6:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80083ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083be:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80083c2:	b1df      	cbz	r7, 80083fc <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083c4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083c6:	bf0c      	ite	eq
 80083c8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80083cc:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80083d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083d2:	4c0c      	ldr	r4, [pc, #48]	@ (8008404 <RCCEx_PLL3_Config.part.0+0xdc>)
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083dc:	f7fb fd02 	bl	8003de4 <HAL_GetTick>
 80083e0:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083e2:	e004      	b.n	80083ee <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083e4:	f7fb fcfe 	bl	8003de4 <HAL_GetTick>
 80083e8:	1b40      	subs	r0, r0, r5
 80083ea:	2802      	cmp	r0, #2
 80083ec:	d804      	bhi.n	80083f8 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	d5f7      	bpl.n	80083e4 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80083f4:	2000      	movs	r0, #0
}
 80083f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80083f8:	2003      	movs	r0, #3
}
 80083fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008400:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008402:	e7e6      	b.n	80083d2 <RCCEx_PLL3_Config.part.0+0xaa>
 8008404:	58024400 	.word	0x58024400
 8008408:	ffff0007 	.word	0xffff0007

0800840c <HAL_RCCEx_PeriphCLKConfig>:
{
 800840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008410:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8008414:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008416:	0118      	lsls	r0, r3, #4
 8008418:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 800841c:	d526      	bpl.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800841e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8008420:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8008424:	f000 8671 	beq.w	800910a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8008428:	d815      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800842a:	2900      	cmp	r1, #0
 800842c:	f000 8490 	beq.w	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8008430:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008434:	f040 846b 	bne.w	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x902>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008438:	49a4      	ldr	r1, [pc, #656]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800843a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800843c:	f001 0103 	and.w	r1, r1, #3
 8008440:	2903      	cmp	r1, #3
 8008442:	f000 8464 	beq.w	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8008446:	2102      	movs	r1, #2
 8008448:	f104 0008 	add.w	r0, r4, #8
 800844c:	f7ff fefa 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008450:	4606      	mov	r6, r0
        break;
 8008452:	f000 be67 	b.w	8009124 <HAL_RCCEx_PeriphCLKConfig+0xd18>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8008456:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800845a:	f040 8458 	bne.w	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800845e:	4d9b      	ldr	r5, [pc, #620]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008460:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008462:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8008464:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8008468:	4301      	orrs	r1, r0
 800846a:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800846c:	05d9      	lsls	r1, r3, #23
 800846e:	d50a      	bpl.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8008470:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8008472:	2904      	cmp	r1, #4
 8008474:	d806      	bhi.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008476:	e8df f011 	tbh	[pc, r1, lsl #1]
 800847a:	0495      	.short	0x0495
 800847c:	06380623 	.word	0x06380623
 8008480:	049a049a 	.word	0x049a049a
 8008484:	2601      	movs	r6, #1
 8008486:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008488:	059f      	lsls	r7, r3, #22
 800848a:	d524      	bpl.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2AClockSelection)
 800848c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800848e:	2980      	cmp	r1, #128	@ 0x80
 8008490:	f000 85d7 	beq.w	8009042 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8008494:	f200 80e4 	bhi.w	8008660 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008498:	2900      	cmp	r1, #0
 800849a:	f000 8460 	beq.w	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x952>
 800849e:	2940      	cmp	r1, #64	@ 0x40
 80084a0:	f040 80e7 	bne.w	8008672 <HAL_RCCEx_PeriphCLKConfig+0x266>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084a4:	4989      	ldr	r1, [pc, #548]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084a6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80084a8:	f001 0103 	and.w	r1, r1, #3
 80084ac:	2903      	cmp	r1, #3
 80084ae:	f000 80e0 	beq.w	8008672 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80084b2:	2100      	movs	r1, #0
 80084b4:	f104 0008 	add.w	r0, r4, #8
 80084b8:	f7ff fec4 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 80084bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80084be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80084c2:	2d00      	cmp	r5, #0
 80084c4:	f040 84f7 	bne.w	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80084c8:	4f80      	ldr	r7, [pc, #512]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084ca:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80084cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80084ce:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80084d2:	4301      	orrs	r1, r0
 80084d4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80084d6:	0558      	lsls	r0, r3, #21
 80084d8:	d526      	bpl.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai2BClockSelection)
 80084da:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80084dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80084e0:	f000 85da 	beq.w	8009098 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 80084e4:	f200 80c8 	bhi.w	8008678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80084e8:	2900      	cmp	r1, #0
 80084ea:	f000 8442 	beq.w	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80084ee:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80084f2:	f040 80cb 	bne.w	800868c <HAL_RCCEx_PeriphCLKConfig+0x280>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084f6:	4975      	ldr	r1, [pc, #468]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80084fa:	f001 0103 	and.w	r1, r1, #3
 80084fe:	2903      	cmp	r1, #3
 8008500:	f000 80c4 	beq.w	800868c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8008504:	2100      	movs	r1, #0
 8008506:	f104 0008 	add.w	r0, r4, #8
 800850a:	f7ff fe9b 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 800850e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008510:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008514:	2d00      	cmp	r5, #0
 8008516:	f040 84d1 	bne.w	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xab0>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800851a:	4f6c      	ldr	r7, [pc, #432]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800851c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800851e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008520:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8008524:	4301      	orrs	r1, r0
 8008526:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008528:	0199      	lsls	r1, r3, #6
 800852a:	d518      	bpl.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->OspiClockSelection)
 800852c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800852e:	2920      	cmp	r1, #32
 8008530:	f000 8527 	beq.w	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8008534:	f200 80ad 	bhi.w	8008692 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008538:	b139      	cbz	r1, 800854a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800853a:	2910      	cmp	r1, #16
 800853c:	f040 80ac 	bne.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008540:	4862      	ldr	r0, [pc, #392]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008542:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008544:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008548:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800854a:	2d00      	cmp	r5, #0
 800854c:	f040 84ab 	bne.w	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008550:	4f5e      	ldr	r7, [pc, #376]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008552:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008554:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008556:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800855a:	4301      	orrs	r1, r0
 800855c:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800855e:	04df      	lsls	r7, r3, #19
 8008560:	d526      	bpl.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi123ClockSelection)
 8008562:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8008564:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8008568:	f000 857f 	beq.w	800906a <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 800856c:	f200 8097 	bhi.w	800869e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008570:	2900      	cmp	r1, #0
 8008572:	f000 840d 	beq.w	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008576:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800857a:	f040 8098 	bne.w	80086ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800857e:	4953      	ldr	r1, [pc, #332]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008580:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008582:	f001 0103 	and.w	r1, r1, #3
 8008586:	2903      	cmp	r1, #3
 8008588:	f000 8091 	beq.w	80086ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800858c:	2100      	movs	r1, #0
 800858e:	f104 0008 	add.w	r0, r4, #8
 8008592:	f7ff fe57 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008596:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008598:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800859c:	2d00      	cmp	r5, #0
 800859e:	f040 8487 	bne.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80085a2:	4f4a      	ldr	r7, [pc, #296]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80085a4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80085a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085a8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80085ac:	4301      	orrs	r1, r0
 80085ae:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80085b0:	0498      	lsls	r0, r3, #18
 80085b2:	d521      	bpl.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch (PeriphClkInit->Spi45ClockSelection)
 80085b4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80085b6:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80085ba:	f000 852e 	beq.w	800901a <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 80085be:	d879      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80085c0:	b181      	cbz	r1, 80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80085c2:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80085c6:	d17d      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085c8:	4940      	ldr	r1, [pc, #256]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80085ca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80085cc:	f001 0103 	and.w	r1, r1, #3
 80085d0:	2903      	cmp	r1, #3
 80085d2:	d077      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80085d4:	2101      	movs	r1, #1
 80085d6:	f104 0008 	add.w	r0, r4, #8
 80085da:	f7ff fe33 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 80085de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	f040 847a 	bne.w	8008ede <HAL_RCCEx_PeriphCLKConfig+0xad2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80085ea:	4f38      	ldr	r7, [pc, #224]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80085ec:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80085ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80085f0:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80085f4:	4301      	orrs	r1, r0
 80085f6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085f8:	0459      	lsls	r1, r3, #17
 80085fa:	d572      	bpl.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    switch (PeriphClkInit->Spi6ClockSelection)
 80085fc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8008600:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8008604:	f000 84d0 	beq.w	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008608:	d862      	bhi.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800860a:	b181      	cbz	r1, 800862e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800860c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8008610:	d165      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008612:	492e      	ldr	r1, [pc, #184]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008614:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008616:	f001 0103 	and.w	r1, r1, #3
 800861a:	2903      	cmp	r1, #3
 800861c:	d05f      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800861e:	2101      	movs	r1, #1
 8008620:	f104 0008 	add.w	r0, r4, #8
 8008624:	f7ff fe0e 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008628:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800862a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800862e:	2d00      	cmp	r5, #0
 8008630:	f040 8463 	bne.w	8008efa <HAL_RCCEx_PeriphCLKConfig+0xaee>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008634:	4f25      	ldr	r7, [pc, #148]	@ (80086cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008636:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800863a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800863c:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8008640:	4301      	orrs	r1, r0
 8008642:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008644:	041f      	lsls	r7, r3, #16
 8008646:	d44e      	bmi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008648:	01d8      	lsls	r0, r3, #7
 800864a:	d55c      	bpl.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch (PeriphClkInit->FmcClockSelection)
 800864c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800864e:	2903      	cmp	r1, #3
 8008650:	f200 85c8 	bhi.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8008654:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008658:	02c802cd 	.word	0x02c802cd
 800865c:	02cd04ce 	.word	0x02cd04ce
    switch (PeriphClkInit->Sai2AClockSelection)
 8008660:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8008664:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8008668:	f43f af2b 	beq.w	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800866c:	29c0      	cmp	r1, #192	@ 0xc0
 800866e:	f43f af28 	beq.w	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8008672:	2601      	movs	r6, #1
 8008674:	4635      	mov	r5, r6
 8008676:	e72e      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2BClockSelection)
 8008678:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 800867c:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8008680:	f43f af48 	beq.w	8008514 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8008684:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8008688:	f43f af44 	beq.w	8008514 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800868c:	2601      	movs	r6, #1
 800868e:	4635      	mov	r5, r6
 8008690:	e74a      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->OspiClockSelection)
 8008692:	2930      	cmp	r1, #48	@ 0x30
 8008694:	f43f af59 	beq.w	800854a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008698:	2601      	movs	r6, #1
 800869a:	4635      	mov	r5, r6
 800869c:	e75f      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Spi123ClockSelection)
 800869e:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80086a2:	f43f af7b 	beq.w	800859c <HAL_RCCEx_PeriphCLKConfig+0x190>
 80086a6:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80086aa:	f43f af77 	beq.w	800859c <HAL_RCCEx_PeriphCLKConfig+0x190>
 80086ae:	2601      	movs	r6, #1
 80086b0:	4635      	mov	r5, r6
 80086b2:	e77d      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi45ClockSelection)
 80086b4:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 80086b8:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 80086bc:	d092      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80086be:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 80086c2:	d08f      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80086c4:	2601      	movs	r6, #1
 80086c6:	4635      	mov	r5, r6
 80086c8:	e796      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80086ca:	bf00      	nop
 80086cc:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 80086d0:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 80086d4:	d0ab      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80086d6:	d94a      	bls.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80086d8:	f1b1 4fc0 	cmp.w	r1, #1610612736	@ 0x60000000
 80086dc:	d0a7      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80086de:	2601      	movs	r6, #1
 80086e0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086e2:	041f      	lsls	r7, r3, #16
 80086e4:	d5b0      	bpl.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    switch (PeriphClkInit->FdcanClockSelection)
 80086e6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80086e8:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80086ec:	f000 82e4 	beq.w	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 80086f0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80086f4:	f000 83c0 	beq.w	8008e78 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80086f8:	2900      	cmp	r1, #0
 80086fa:	f000 82e2 	beq.w	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 80086fe:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008700:	01d8      	lsls	r0, r3, #7
 8008702:	4635      	mov	r5, r6
 8008704:	d4a2      	bmi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x240>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008706:	0259      	lsls	r1, r3, #9
 8008708:	f100 8280 	bmi.w	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x800>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800870c:	07df      	lsls	r7, r3, #31
 800870e:	d53b      	bpl.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8008710:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8008714:	2928      	cmp	r1, #40	@ 0x28
 8008716:	d835      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008718:	e8df f011 	tbh	[pc, r1, lsl #1]
 800871c:	0034030e 	.word	0x0034030e
 8008720:	00340034 	.word	0x00340034
 8008724:	00340034 	.word	0x00340034
 8008728:	00340034 	.word	0x00340034
 800872c:	003402ff 	.word	0x003402ff
 8008730:	00340034 	.word	0x00340034
 8008734:	00340034 	.word	0x00340034
 8008738:	00340034 	.word	0x00340034
 800873c:	00340530 	.word	0x00340530
 8008740:	00340034 	.word	0x00340034
 8008744:	00340034 	.word	0x00340034
 8008748:	00340034 	.word	0x00340034
 800874c:	0034030e 	.word	0x0034030e
 8008750:	00340034 	.word	0x00340034
 8008754:	00340034 	.word	0x00340034
 8008758:	00340034 	.word	0x00340034
 800875c:	0034030e 	.word	0x0034030e
 8008760:	00340034 	.word	0x00340034
 8008764:	00340034 	.word	0x00340034
 8008768:	00340034 	.word	0x00340034
 800876c:	030e      	.short	0x030e
    switch (PeriphClkInit->Spi6ClockSelection)
 800876e:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8008772:	f43f af5c 	beq.w	800862e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008776:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800877a:	d1b0      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    if (ret == HAL_OK)
 800877c:	2d00      	cmp	r5, #0
 800877e:	f040 83bc 	bne.w	8008efa <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8008782:	e757      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8008784:	2601      	movs	r6, #1
 8008786:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008788:	0798      	lsls	r0, r3, #30
 800878a:	d51f      	bpl.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800878c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8008790:	2905      	cmp	r1, #5
 8008792:	f200 850c 	bhi.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8008796:	e8df f011 	tbh	[pc, r1, lsl #1]
 800879a:	0015      	.short	0x0015
 800879c:	04df0006 	.word	0x04df0006
 80087a0:	00150015 	.word	0x00150015
 80087a4:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087a6:	4911      	ldr	r1, [pc, #68]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087a8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80087aa:	f001 0103 	and.w	r1, r1, #3
 80087ae:	2903      	cmp	r1, #3
 80087b0:	f000 84fd 	beq.w	80091ae <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80087b4:	2101      	movs	r1, #1
 80087b6:	f104 0008 	add.w	r0, r4, #8
 80087ba:	f7ff fd43 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 80087be:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087c0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	f000 839b 	beq.w	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 80087ca:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087cc:	0759      	lsls	r1, r3, #29
 80087ce:	d522      	bpl.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80087d0:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80087d4:	2905      	cmp	r1, #5
 80087d6:	f200 84ee 	bhi.w	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80087da:	e8df f011 	tbh	[pc, r1, lsl #1]
 80087de:	0018      	.short	0x0018
 80087e0:	04ab0009 	.word	0x04ab0009
 80087e4:	00180018 	.word	0x00180018
 80087e8:	0018      	.short	0x0018
 80087ea:	bf00      	nop
 80087ec:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087f0:	49af      	ldr	r1, [pc, #700]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80087f2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80087f4:	f001 0103 	and.w	r1, r1, #3
 80087f8:	2903      	cmp	r1, #3
 80087fa:	f000 84dc 	beq.w	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80087fe:	2101      	movs	r1, #1
 8008800:	f104 0008 	add.w	r0, r4, #8
 8008804:	f7ff fd1e 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008808:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800880a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800880e:	2d00      	cmp	r5, #0
 8008810:	f000 8368 	beq.w	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008814:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008816:	069f      	lsls	r7, r3, #26
 8008818:	d526      	bpl.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800881a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800881e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8008822:	f000 8378 	beq.w	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008826:	f200 8192 	bhi.w	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x742>
 800882a:	b191      	cbz	r1, 8008852 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800882c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8008830:	f040 8197 	bne.w	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008834:	499e      	ldr	r1, [pc, #632]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008836:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008838:	f001 0103 	and.w	r1, r1, #3
 800883c:	2903      	cmp	r1, #3
 800883e:	f000 8190 	beq.w	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
 8008842:	2100      	movs	r1, #0
 8008844:	f104 0008 	add.w	r0, r4, #8
 8008848:	f7ff fcfc 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 800884c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800884e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008852:	2d00      	cmp	r5, #0
 8008854:	f040 834f 	bne.w	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008858:	4f95      	ldr	r7, [pc, #596]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800885a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800885e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008860:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8008864:	4301      	orrs	r1, r0
 8008866:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008868:	0658      	lsls	r0, r3, #25
 800886a:	d526      	bpl.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800886c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8008870:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8008874:	f000 8373 	beq.w	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8008878:	f200 8176 	bhi.w	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800887c:	b191      	cbz	r1, 80088a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800887e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008882:	f040 817b 	bne.w	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x770>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008886:	498a      	ldr	r1, [pc, #552]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008888:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800888a:	f001 0103 	and.w	r1, r1, #3
 800888e:	2903      	cmp	r1, #3
 8008890:	f000 8174 	beq.w	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8008894:	2100      	movs	r1, #0
 8008896:	f104 0008 	add.w	r0, r4, #8
 800889a:	f7ff fcd3 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 800889e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088a0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80088a4:	2d00      	cmp	r5, #0
 80088a6:	f040 8314 	bne.w	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088aa:	4f81      	ldr	r7, [pc, #516]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80088ac:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80088b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80088b2:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 80088b6:	4301      	orrs	r1, r0
 80088b8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088ba:	0619      	lsls	r1, r3, #24
 80088bc:	d526      	bpl.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80088be:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80088c2:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80088c6:	f000 8338 	beq.w	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80088ca:	f200 815a 	bhi.w	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80088ce:	b191      	cbz	r1, 80088f6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80088d0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80088d4:	f040 815f 	bne.w	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x78a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088d8:	4975      	ldr	r1, [pc, #468]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80088da:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80088dc:	f001 0103 	and.w	r1, r1, #3
 80088e0:	2903      	cmp	r1, #3
 80088e2:	f000 8158 	beq.w	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80088e6:	2100      	movs	r1, #0
 80088e8:	f104 0008 	add.w	r0, r4, #8
 80088ec:	f7ff fcaa 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 80088f0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088f2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	f040 82ef 	bne.w	8008eda <HAL_RCCEx_PeriphCLKConfig+0xace>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80088fc:	4f6c      	ldr	r7, [pc, #432]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80088fe:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8008902:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008904:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8008908:	4301      	orrs	r1, r0
 800890a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800890c:	071f      	lsls	r7, r3, #28
 800890e:	d50b      	bpl.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008910:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8008914:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8008918:	f000 8262 	beq.w	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800891c:	4f64      	ldr	r7, [pc, #400]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800891e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008920:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8008924:	4301      	orrs	r1, r0
 8008926:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008928:	06d8      	lsls	r0, r3, #27
 800892a:	d50b      	bpl.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800892c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8008930:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8008934:	f000 8268 	beq.w	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008938:	4f5d      	ldr	r7, [pc, #372]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800893a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800893c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8008940:	4301      	orrs	r1, r0
 8008942:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008944:	0319      	lsls	r1, r3, #12
 8008946:	d50e      	bpl.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8008948:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800894c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8008950:	f000 81c2 	beq.w	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8008954:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8008958:	f000 81cd 	beq.w	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800895c:	2900      	cmp	r1, #0
 800895e:	f000 827b 	beq.w	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8008962:	2601      	movs	r6, #1
 8008964:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008966:	035f      	lsls	r7, r3, #13
 8008968:	d50f      	bpl.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 800896a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800896e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8008972:	f000 832c 	beq.w	8008fce <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8008976:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800897a:	f000 8191 	beq.w	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800897e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008982:	f000 8188 	beq.w	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8008986:	2601      	movs	r6, #1
 8008988:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800898a:	03d8      	lsls	r0, r3, #15
 800898c:	d520      	bpl.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 800898e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008990:	2900      	cmp	r1, #0
 8008992:	f000 824e 	beq.w	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8008996:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800899a:	f040 8179 	bne.w	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x884>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800899e:	4944      	ldr	r1, [pc, #272]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80089a0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80089a2:	f001 0103 	and.w	r1, r1, #3
 80089a6:	2903      	cmp	r1, #3
 80089a8:	f000 8172 	beq.w	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x884>
 80089ac:	2102      	movs	r1, #2
 80089ae:	f104 0008 	add.w	r0, r4, #8
 80089b2:	f7ff fc47 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 80089b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80089bc:	2d00      	cmp	r5, #0
 80089be:	f040 8240 	bne.w	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xa36>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089c2:	4f3b      	ldr	r7, [pc, #236]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80089c4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80089c6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80089c8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80089cc:	4301      	orrs	r1, r0
 80089ce:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089d0:	0099      	lsls	r1, r3, #2
 80089d2:	d50e      	bpl.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089d4:	4936      	ldr	r1, [pc, #216]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80089d6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80089d8:	f001 0103 	and.w	r1, r1, #3
 80089dc:	2903      	cmp	r1, #3
 80089de:	d007      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80089e0:	2102      	movs	r1, #2
 80089e2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80089e6:	f7ff fc9f 	bl	8008328 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089ea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089ee:	b100      	cbz	r0, 80089f2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 80089f0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089f2:	039f      	lsls	r7, r3, #14
 80089f4:	f140 80de 	bpl.w	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 80089f8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80089fc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008a00:	f000 8221 	beq.w	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8008a04:	f240 80ca 	bls.w	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x790>
 8008a08:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8008a0c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008a10:	f000 80c7 	beq.w	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8008a14:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a16:	02d8      	lsls	r0, r3, #11
 8008a18:	d506      	bpl.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a1a:	4825      	ldr	r0, [pc, #148]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008a1c:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 8008a1e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8008a20:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8008a24:	4331      	orrs	r1, r6
 8008a26:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a28:	0299      	lsls	r1, r3, #10
 8008a2a:	d506      	bpl.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a2c:	4820      	ldr	r0, [pc, #128]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008a2e:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 8008a30:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8008a32:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8008a36:	4331      	orrs	r1, r6
 8008a38:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008a3a:	051f      	lsls	r7, r3, #20
 8008a3c:	d506      	bpl.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x640>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008a3e:	481c      	ldr	r0, [pc, #112]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008a40:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8008a42:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8008a44:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 8008a48:	4331      	orrs	r1, r6
 8008a4a:	6581      	str	r1, [r0, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a4c:	005e      	lsls	r6, r3, #1
 8008a4e:	d509      	bpl.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x658>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a50:	4917      	ldr	r1, [pc, #92]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008a52:	6908      	ldr	r0, [r1, #16]
 8008a54:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8008a58:	6108      	str	r0, [r1, #16]
 8008a5a:	6908      	ldr	r0, [r1, #16]
 8008a5c:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8008a60:	4330      	orrs	r0, r6
 8008a62:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da06      	bge.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a68:	4811      	ldr	r0, [pc, #68]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008a6a:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8008a6c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008a6e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8008a72:	4331      	orrs	r1, r6
 8008a74:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a76:	0218      	lsls	r0, r3, #8
 8008a78:	d507      	bpl.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a7a:	490d      	ldr	r1, [pc, #52]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008a7c:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8008a80:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8008a82:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008a86:	4303      	orrs	r3, r0
 8008a88:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a8a:	07d1      	lsls	r1, r2, #31
 8008a8c:	d512      	bpl.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a8e:	4b08      	ldr	r3, [pc, #32]	@ (8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8008a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	f000 8198 	beq.w	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	f104 0008 	add.w	r0, r4, #8
 8008aa2:	f7ff fbcf 	bl	8008244 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008aa6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f040 820e 	bne.w	8008eca <HAL_RCCEx_PeriphCLKConfig+0xabe>
 8008aae:	e001      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8008ab0:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008ab4:	0793      	lsls	r3, r2, #30
 8008ab6:	d50f      	bpl.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ab8:	4bb3      	ldr	r3, [pc, #716]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	f003 0303 	and.w	r3, r3, #3
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	f000 8185 	beq.w	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	f104 0008 	add.w	r0, r4, #8
 8008acc:	f7ff fbba 	bl	8008244 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008ad0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f040 81f5 	bne.w	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008ad8:	0757      	lsls	r7, r2, #29
 8008ada:	d50f      	bpl.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008adc:	4baa      	ldr	r3, [pc, #680]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae0:	f003 0303 	and.w	r3, r3, #3
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	f000 816f 	beq.w	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8008aea:	2102      	movs	r1, #2
 8008aec:	f104 0008 	add.w	r0, r4, #8
 8008af0:	f7ff fba8 	bl	8008244 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008af4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008af6:	2800      	cmp	r0, #0
 8008af8:	f040 81e5 	bne.w	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008afc:	0716      	lsls	r6, r2, #28
 8008afe:	d50f      	bpl.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b00:	4ba1      	ldr	r3, [pc, #644]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	f000 8167 	beq.w	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008b0e:	2100      	movs	r1, #0
 8008b10:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008b14:	f7ff fc08 	bl	8008328 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b18:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	f040 81d7 	bne.w	8008ece <HAL_RCCEx_PeriphCLKConfig+0xac2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b20:	06d0      	lsls	r0, r2, #27
 8008b22:	d54a      	bpl.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b24:	4b98      	ldr	r3, [pc, #608]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b26:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	f000 814f 	beq.w	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8008b36:	2101      	movs	r1, #1
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7ff fbf5 	bl	8008328 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d03a      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008b42:	6863      	ldr	r3, [r4, #4]
 8008b44:	069a      	lsls	r2, r3, #26
 8008b46:	f140 80e5 	bpl.w	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	e039      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008b4e:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8008b52:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008b56:	f43f ae7c 	beq.w	8008852 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008b5a:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8008b5e:	f43f ae78 	beq.w	8008852 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008b62:	2601      	movs	r6, #1
 8008b64:	4635      	mov	r5, r6
 8008b66:	e67f      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b68:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8008b6c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8008b70:	f43f ae98 	beq.w	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008b74:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8008b78:	f43f ae94 	beq.w	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008b7c:	2601      	movs	r6, #1
 8008b7e:	4635      	mov	r5, r6
 8008b80:	e69b      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b82:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8008b86:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008b8a:	f43f aeb4 	beq.w	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8008b8e:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8008b92:	f43f aeb0 	beq.w	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8008b96:	2601      	movs	r6, #1
 8008b98:	4635      	mov	r5, r6
 8008b9a:	e6b7      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->RngClockSelection)
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	f47f af39 	bne.w	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x608>
    if (ret == HAL_OK)
 8008ba2:	2d00      	cmp	r5, #0
 8008ba4:	f47f af37 	bne.w	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ba8:	4d77      	ldr	r5, [pc, #476]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008baa:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8008bac:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8008bb0:	4301      	orrs	r1, r0
 8008bb2:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8008bb4:	4635      	mov	r5, r6
 8008bb6:	e72e      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008bb8:	6862      	ldr	r2, [r4, #4]
 8008bba:	0693      	lsls	r3, r2, #26
 8008bbc:	d50f      	bpl.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bbe:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bc2:	4b71      	ldr	r3, [pc, #452]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	f000 80a2 	beq.w	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff fba8 	bl	8008328 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f040 809b 	bne.w	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x908>
  if (status == HAL_OK)
 8008bde:	1e28      	subs	r0, r5, #0
 8008be0:	bf18      	it	ne
 8008be2:	2001      	movne	r0, #1
}
 8008be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be8:	4867      	ldr	r0, [pc, #412]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008bea:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008bec:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008bf0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008bf2:	2d00      	cmp	r5, #0
 8008bf4:	f040 815a 	bne.w	8008eac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008bf8:	4f63      	ldr	r7, [pc, #396]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008bfa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8008bfc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008bfe:	f021 0103 	bic.w	r1, r1, #3
 8008c02:	4301      	orrs	r1, r0
 8008c04:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c06:	0259      	lsls	r1, r3, #9
 8008c08:	f57f ad80 	bpl.w	800870c <HAL_RCCEx_PeriphCLKConfig+0x300>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c0c:	4f5f      	ldr	r7, [pc, #380]	@ (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c14:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8008c16:	f7fb f8e5 	bl	8003de4 <HAL_GetTick>
 8008c1a:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c1c:	e006      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c1e:	f7fb f8e1 	bl	8003de4 <HAL_GetTick>
 8008c22:	eba0 0008 	sub.w	r0, r0, r8
 8008c26:	2864      	cmp	r0, #100	@ 0x64
 8008c28:	f200 82bb 	bhi.w	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xd96>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	05da      	lsls	r2, r3, #23
 8008c30:	d5f5      	bpl.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (ret == HAL_OK)
 8008c32:	2d00      	cmp	r5, #0
 8008c34:	f040 82b6 	bne.w	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008c38:	4a53      	ldr	r2, [pc, #332]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008c3a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8008c3e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8008c40:	4059      	eors	r1, r3
 8008c42:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8008c46:	d00b      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x854>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c48:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c4a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c4c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c50:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8008c54:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c56:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8008c58:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8008c5c:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8008c5e:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c64:	f000 82c2 	beq.w	80091ec <HAL_RCCEx_PeriphCLKConfig+0xde0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c68:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008c6c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8008c70:	f000 82d0 	beq.w	8009214 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8008c74:	4944      	ldr	r1, [pc, #272]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008c76:	690a      	ldr	r2, [r1, #16]
 8008c78:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8008c7c:	610a      	str	r2, [r1, #16]
 8008c7e:	4842      	ldr	r0, [pc, #264]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008c80:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8008c84:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8008c86:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c88:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c8c:	6701      	str	r1, [r0, #112]	@ 0x70
 8008c8e:	e53d      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008c90:	2601      	movs	r6, #1
 8008c92:	4635      	mov	r5, r6
 8008c94:	e69c      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c96:	483c      	ldr	r0, [pc, #240]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008c98:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008c9a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008c9e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008ca0:	2d00      	cmp	r5, #0
 8008ca2:	f040 80fe 	bne.w	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ca6:	4f38      	ldr	r7, [pc, #224]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008ca8:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008cac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cae:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8008cb2:	4301      	orrs	r1, r0
 8008cb4:	6579      	str	r1, [r7, #84]	@ 0x54
 8008cb6:	e668      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb8:	4833      	ldr	r0, [pc, #204]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008cba:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008cbc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008cc0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	f040 80ea 	bne.w	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xa90>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cc8:	4f2f      	ldr	r7, [pc, #188]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008cca:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8008ccc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008cce:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8008cd2:	4301      	orrs	r1, r0
 8008cd4:	6539      	str	r1, [r7, #80]	@ 0x50
 8008cd6:	e4b7      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cd8:	492b      	ldr	r1, [pc, #172]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008cda:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008cdc:	f001 0103 	and.w	r1, r1, #3
 8008ce0:	2903      	cmp	r1, #3
 8008ce2:	f43f ae3e 	beq.w	8008962 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8008ce6:	2102      	movs	r1, #2
 8008ce8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008cec:	f7ff fb1c 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8008cf0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cf2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	f040 80ed 	bne.w	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cfc:	4f22      	ldr	r7, [pc, #136]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008cfe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8008d02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008d04:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8008d08:	4301      	orrs	r1, r0
 8008d0a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d0c:	e62b      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008d0e:	2601      	movs	r6, #1
 8008d10:	f7ff bbac 	b.w	800846c <HAL_RCCEx_PeriphCLKConfig+0x60>
  return HAL_ERROR;
 8008d14:	2001      	movs	r0, #1
}
 8008d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d1a:	491b      	ldr	r1, [pc, #108]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008d1c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008d1e:	f001 0103 	and.w	r1, r1, #3
 8008d22:	2903      	cmp	r1, #3
 8008d24:	f43f ad2e 	beq.w	8008784 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008d28:	2101      	movs	r1, #1
 8008d2a:	f104 0008 	add.w	r0, r4, #8
 8008d2e:	f7ff fa89 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008d32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	f040 80ea 	bne.w	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d3e:	4f12      	ldr	r7, [pc, #72]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008d40:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8008d44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d46:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8008d4a:	4301      	orrs	r1, r0
 8008d4c:	6579      	str	r1, [r7, #84]	@ 0x54
 8008d4e:	e51b      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d50:	4d0d      	ldr	r5, [pc, #52]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008d52:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8008d54:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8008d58:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008d5a:	f7ff bb80 	b.w	800845e <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d5e:	480a      	ldr	r0, [pc, #40]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008d60:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008d62:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008d66:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	f040 80a4 	bne.w	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008d6e:	f7ff bbab 	b.w	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d72:	4805      	ldr	r0, [pc, #20]	@ (8008d88 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8008d74:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008d76:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008d7a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008d7c:	2d00      	cmp	r5, #0
 8008d7e:	f040 809d 	bne.w	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008d82:	f7ff bbca 	b.w	800851a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8008d86:	bf00      	nop
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d90:	48c0      	ldr	r0, [pc, #768]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008d92:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008d94:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008d98:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	f040 8088 	bne.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008da0:	f7ff bbff 	b.w	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da4:	48bb      	ldr	r0, [pc, #748]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008da6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008da8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008dac:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8008dae:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	f040 8197 	bne.w	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008db6:	4fb7      	ldr	r7, [pc, #732]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dbc:	f021 0107 	bic.w	r1, r1, #7
 8008dc0:	4301      	orrs	r1, r0
 8008dc2:	6539      	str	r1, [r7, #80]	@ 0x50
 8008dc4:	f7ff bb60 	b.w	8008488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    return HAL_ERROR;
 8008dc8:	2501      	movs	r5, #1
 8008dca:	e697      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8008dcc:	2501      	movs	r5, #1
 8008dce:	e671      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8008dd0:	2501      	movs	r5, #1
 8008dd2:	e681      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008dd4:	0691      	lsls	r1, r2, #26
 8008dd6:	d59d      	bpl.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x908>
    return HAL_ERROR;
 8008dd8:	2501      	movs	r5, #1
 8008dda:	e6f2      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 8008ddc:	2501      	movs	r5, #1
 8008dde:	e69f      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008de0:	49ac      	ldr	r1, [pc, #688]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008de2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008de4:	f001 0103 	and.w	r1, r1, #3
 8008de8:	2903      	cmp	r1, #3
 8008dea:	f000 81e8 	beq.w	80091be <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8008dee:	2102      	movs	r1, #2
 8008df0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008df4:	f7ff fa98 	bl	8008328 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	f040 81ec 	bne.w	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008dfe:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e02:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e06:	e589      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x510>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e08:	49a2      	ldr	r1, [pc, #648]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008e0a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008e0c:	f001 0103 	and.w	r1, r1, #3
 8008e10:	2903      	cmp	r1, #3
 8008e12:	f000 81d7 	beq.w	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8008e16:	2102      	movs	r1, #2
 8008e18:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008e1c:	f7ff fa84 	bl	8008328 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e20:	2800      	cmp	r0, #0
 8008e22:	f000 81d2 	beq.w	80091ca <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e26:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
        status = HAL_ERROR;
 8008e2a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e2c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e30:	e582      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e32:	4898      	ldr	r0, [pc, #608]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008e34:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008e36:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8008e3a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	f43f adc0 	beq.w	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8008e42:	462e      	mov	r6, r5
 8008e44:	e5c4      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e46:	4f93      	ldr	r7, [pc, #588]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008e48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e4a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8008e4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	f47f ade0 	bne.w	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8008e56:	e6a7      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e58:	488e      	ldr	r0, [pc, #568]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008e5a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8008e5c:	f000 0003 	and.w	r0, r0, #3
 8008e60:	2803      	cmp	r0, #3
 8008e62:	f43f ad7e 	beq.w	8008962 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8008e66:	f104 0008 	add.w	r0, r4, #8
 8008e6a:	f7ff f9eb 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008e6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008e74:	bb7d      	cbnz	r5, 8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8008e76:	e741      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e78:	4986      	ldr	r1, [pc, #536]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008e7a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008e7c:	f001 0103 	and.w	r1, r1, #3
 8008e80:	2903      	cmp	r1, #3
 8008e82:	f43f ac3c 	beq.w	80086fe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8008e86:	2101      	movs	r1, #1
 8008e88:	f104 0008 	add.w	r0, r4, #8
 8008e8c:	f7ff f9da 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008e90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	f43f af16 	beq.w	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008e9c:	462e      	mov	r6, r5
 8008e9e:	f7ff bbd3 	b.w	8008648 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8008ea2:	462e      	mov	r6, r5
 8008ea4:	e571      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8008ea6:	462e      	mov	r6, r5
 8008ea8:	f7ff bb59 	b.w	800855e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008eac:	462e      	mov	r6, r5
 8008eae:	e42a      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8008eb0:	462e      	mov	r6, r5
 8008eb2:	f7ff bb7d 	b.w	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008eb6:	462e      	mov	r6, r5
 8008eb8:	f7ff bb0d 	b.w	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8008ebc:	462e      	mov	r6, r5
 8008ebe:	f7ff bb33 	b.w	8008528 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	e608      	b.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	e618      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008eca:	4605      	mov	r5, r0
 8008ecc:	e5f2      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008ece:	4605      	mov	r5, r0
 8008ed0:	e626      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8008ed2:	462e      	mov	r6, r5
 8008ed4:	e4f1      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008ed6:	462e      	mov	r6, r5
 8008ed8:	e545      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8008eda:	462e      	mov	r6, r5
 8008edc:	e516      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008ede:	462e      	mov	r6, r5
 8008ee0:	f7ff bb8a 	b.w	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ee4:	4f6b      	ldr	r7, [pc, #428]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008ee6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8008eea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008eec:	f021 0107 	bic.w	r1, r1, #7
 8008ef0:	4301      	orrs	r1, r0
 8008ef2:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ef4:	e48f      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008ef6:	462e      	mov	r6, r5
 8008ef8:	e4b6      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8008efa:	462e      	mov	r6, r5
 8008efc:	f7ff bbf1 	b.w	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008f00:	4f64      	ldr	r7, [pc, #400]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008f02:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008f06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f08:	f021 0107 	bic.w	r1, r1, #7
 8008f0c:	4301      	orrs	r1, r0
 8008f0e:	6579      	str	r1, [r7, #84]	@ 0x54
 8008f10:	e45c      	b.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008f12:	462e      	mov	r6, r5
 8008f14:	e438      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f16:	495f      	ldr	r1, [pc, #380]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008f18:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008f1a:	f001 0103 	and.w	r1, r1, #3
 8008f1e:	2903      	cmp	r1, #3
 8008f20:	f43f ae1f 	beq.w	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x756>
 8008f24:	2102      	movs	r1, #2
 8008f26:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008f2a:	f7ff f9fd 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8008f2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008f34:	2d00      	cmp	r5, #0
 8008f36:	d1de      	bne.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8008f38:	e48e      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f3a:	4956      	ldr	r1, [pc, #344]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008f3c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008f3e:	f001 0103 	and.w	r1, r1, #3
 8008f42:	2903      	cmp	r1, #3
 8008f44:	f43f ae27 	beq.w	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8008f48:	2102      	movs	r1, #2
 8008f4a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008f4e:	f7ff f9eb 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8008f52:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f54:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	d1be      	bne.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xace>
 8008f5c:	e4ce      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f5e:	494d      	ldr	r1, [pc, #308]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008f60:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008f62:	f001 0103 	and.w	r1, r1, #3
 8008f66:	2903      	cmp	r1, #3
 8008f68:	f43f ae08 	beq.w	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8008f6c:	2102      	movs	r1, #2
 8008f6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008f72:	f7ff f9d9 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8008f76:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f78:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	d1a8      	bne.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8008f80:	e493      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x49e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f82:	4944      	ldr	r1, [pc, #272]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008f84:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008f86:	f001 0103 	and.w	r1, r1, #3
 8008f8a:	2903      	cmp	r1, #3
 8008f8c:	f43f ab84 	beq.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8008f90:	2102      	movs	r1, #2
 8008f92:	f104 0008 	add.w	r0, r4, #8
 8008f96:	f7ff f955 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 8008f9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f9c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	d180      	bne.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8008fa4:	f7ff bad4 	b.w	8008550 <HAL_RCCEx_PeriphCLKConfig+0x144>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fa8:	493a      	ldr	r1, [pc, #232]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008faa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008fac:	f001 0103 	and.w	r1, r1, #3
 8008fb0:	2903      	cmp	r1, #3
 8008fb2:	f43f ab94 	beq.w	80086de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008fbc:	f7ff f9b4 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8008fc0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008fc2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	d197      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8008fca:	f7ff bb33 	b.w	8008634 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fce:	4931      	ldr	r1, [pc, #196]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008fd0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008fd2:	f001 0103 	and.w	r1, r1, #3
 8008fd6:	2903      	cmp	r1, #3
 8008fd8:	f43f acd5 	beq.w	8008986 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008fdc:	2101      	movs	r1, #1
 8008fde:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8008fe2:	f7ff f9a1 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8008fe6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008fe8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	f47f af58 	bne.w	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008ff2:	e658      	b.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ff4:	4927      	ldr	r1, [pc, #156]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8008ff6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8008ff8:	f001 0103 	and.w	r1, r1, #3
 8008ffc:	2903      	cmp	r1, #3
 8008ffe:	f000 80f1 	beq.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8009002:	2102      	movs	r1, #2
 8009004:	f104 0008 	add.w	r0, r4, #8
 8009008:	f7ff f91c 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 800900c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800900e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009012:	2d00      	cmp	r5, #0
 8009014:	f47f af4a 	bne.w	8008eac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8009018:	e5ee      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800901a:	491e      	ldr	r1, [pc, #120]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800901c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800901e:	f001 0103 	and.w	r1, r1, #3
 8009022:	2903      	cmp	r1, #3
 8009024:	f43f ab4e 	beq.w	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009028:	2101      	movs	r1, #1
 800902a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800902e:	f7ff f97b 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8009032:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009034:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009038:	2d00      	cmp	r5, #0
 800903a:	f47f af50 	bne.w	8008ede <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800903e:	f7ff bad4 	b.w	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009042:	4914      	ldr	r1, [pc, #80]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8009044:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009046:	f001 0103 	and.w	r1, r1, #3
 800904a:	2903      	cmp	r1, #3
 800904c:	f43f ab11 	beq.w	8008672 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009050:	2100      	movs	r1, #0
 8009052:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009056:	f7ff f967 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 800905a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800905c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009060:	2d00      	cmp	r5, #0
 8009062:	f47f af28 	bne.w	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009066:	f7ff ba2f 	b.w	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800906a:	490a      	ldr	r1, [pc, #40]	@ (8009094 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800906c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800906e:	f001 0103 	and.w	r1, r1, #3
 8009072:	2903      	cmp	r1, #3
 8009074:	f43f ab1b 	beq.w	80086ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8009078:	2100      	movs	r1, #0
 800907a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800907e:	f7ff f953 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8009082:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009084:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009088:	2d00      	cmp	r5, #0
 800908a:	f47f af11 	bne.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800908e:	f7ff ba88 	b.w	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009098:	4966      	ldr	r1, [pc, #408]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800909a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800909c:	f001 0103 	and.w	r1, r1, #3
 80090a0:	2903      	cmp	r1, #3
 80090a2:	f43f aaf3 	beq.w	800868c <HAL_RCCEx_PeriphCLKConfig+0x280>
 80090a6:	2100      	movs	r1, #0
 80090a8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80090ac:	f7ff f93c 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 80090b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80090b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	f47f af00 	bne.w	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80090bc:	f7ff ba2d 	b.w	800851a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090c0:	495c      	ldr	r1, [pc, #368]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80090c2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80090c4:	f001 0103 	and.w	r1, r1, #3
 80090c8:	2903      	cmp	r1, #3
 80090ca:	f43f a9db 	beq.w	8008484 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80090ce:	2100      	movs	r1, #0
 80090d0:	f104 0008 	add.w	r0, r4, #8
 80090d4:	f7ff f8b6 	bl	8008244 <RCCEx_PLL2_Config.part.0>
 80090d8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80090da:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80090de:	2d00      	cmp	r5, #0
 80090e0:	f43f ae69 	beq.w	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 80090e4:	462e      	mov	r6, r5
 80090e6:	f7ff b9cf 	b.w	8008488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090ea:	4952      	ldr	r1, [pc, #328]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80090ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80090ee:	f001 0103 	and.w	r1, r1, #3
 80090f2:	2903      	cmp	r1, #3
 80090f4:	f43f a9c6 	beq.w	8008484 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80090f8:	2100      	movs	r1, #0
 80090fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80090fe:	f7ff f913 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8009102:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009104:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8009108:	e652      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800910a:	494a      	ldr	r1, [pc, #296]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800910c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800910e:	f001 0103 	and.w	r1, r1, #3
 8009112:	2903      	cmp	r1, #3
 8009114:	f43f adfb 	beq.w	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8009118:	2102      	movs	r1, #2
 800911a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800911e:	f7ff f903 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8009122:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009124:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009128:	2e00      	cmp	r6, #0
 800912a:	f47f a99f 	bne.w	800846c <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800912e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8009130:	f7ff b995 	b.w	800845e <HAL_RCCEx_PeriphCLKConfig+0x52>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009134:	493f      	ldr	r1, [pc, #252]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8009136:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009138:	f001 0103 	and.w	r1, r1, #3
 800913c:	2903      	cmp	r1, #3
 800913e:	d03a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8009140:	2101      	movs	r1, #1
 8009142:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009146:	f7ff f8ef 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 800914a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800914c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009150:	2d00      	cmp	r5, #0
 8009152:	f47f ab5f 	bne.w	8008814 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009156:	e6c5      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009158:	4936      	ldr	r1, [pc, #216]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800915a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800915c:	f001 0103 	and.w	r1, r1, #3
 8009160:	2903      	cmp	r1, #3
 8009162:	d024      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8009164:	2101      	movs	r1, #1
 8009166:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800916a:	f7ff f8dd 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 800916e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009170:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009174:	2d00      	cmp	r5, #0
 8009176:	f47f ab28 	bne.w	80087ca <HAL_RCCEx_PeriphCLKConfig+0x3be>
 800917a:	e6c1      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800917c:	492d      	ldr	r1, [pc, #180]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800917e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009180:	f001 0103 	and.w	r1, r1, #3
 8009184:	2903      	cmp	r1, #3
 8009186:	f43f aafd 	beq.w	8008784 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800918a:	2101      	movs	r1, #1
 800918c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009190:	f7ff f8ca 	bl	8008328 <RCCEx_PLL3_Config.part.0>
 8009194:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009196:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800919a:	2d00      	cmp	r5, #0
 800919c:	f47f aeb9 	bne.w	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xb06>
 80091a0:	e5cd      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = HAL_TIMEOUT;
 80091a2:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80091a4:	462e      	mov	r6, r5
 80091a6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80091aa:	f7ff baaf 	b.w	800870c <HAL_RCCEx_PeriphCLKConfig+0x300>
 80091ae:	2601      	movs	r6, #1
 80091b0:	4635      	mov	r5, r6
 80091b2:	f7ff bb0b 	b.w	80087cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80091b6:	2601      	movs	r6, #1
 80091b8:	4635      	mov	r5, r6
 80091ba:	f7ff bb2c 	b.w	8008816 <HAL_RCCEx_PeriphCLKConfig+0x40a>
        status = HAL_ERROR;
 80091be:	2601      	movs	r6, #1
 80091c0:	f7ff bbac 	b.w	800891c <HAL_RCCEx_PeriphCLKConfig+0x510>
        status = HAL_ERROR;
 80091c4:	2601      	movs	r6, #1
 80091c6:	f7ff bbb7 	b.w	8008938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091ca:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091ce:	e9d4 3200 	ldrd	r3, r2, [r4]
 80091d2:	f7ff bbb1 	b.w	8008938 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80091d6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
        status = HAL_ERROR;
 80091da:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80091e0:	f7ff bb9c 	b.w	800891c <HAL_RCCEx_PeriphCLKConfig+0x510>
 80091e4:	2601      	movs	r6, #1
 80091e6:	4635      	mov	r5, r6
 80091e8:	f7ff ba8d 	b.w	8008706 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        tickstart = HAL_GetTick();
 80091ec:	f7fa fdfa 	bl	8003de4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091f0:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        tickstart = HAL_GetTick();
 80091f4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091f6:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091fa:	e004      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091fc:	f7fa fdf2 	bl	8003de4 <HAL_GetTick>
 8009200:	1bc0      	subs	r0, r0, r7
 8009202:	4548      	cmp	r0, r9
 8009204:	d810      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009206:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800920a:	079b      	lsls	r3, r3, #30
 800920c:	d5f6      	bpl.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xdf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800920e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8009212:	e529      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8009214:	4807      	ldr	r0, [pc, #28]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8009216:	4a08      	ldr	r2, [pc, #32]	@ (8009238 <HAL_RCCEx_PeriphCLKConfig+0xe2c>)
 8009218:	6901      	ldr	r1, [r0, #16]
 800921a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800921e:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8009222:	430a      	orrs	r2, r1
 8009224:	6102      	str	r2, [r0, #16]
 8009226:	e52a      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x872>
        status = ret;
 8009228:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800922a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800922e:	4635      	mov	r5, r6
 8009230:	f7ff ba6c 	b.w	800870c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009234:	58024400 	.word	0x58024400
 8009238:	00ffffcf 	.word	0x00ffffcf

0800923c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800923c:	4a47      	ldr	r2, [pc, #284]	@ (800935c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800923e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009240:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009242:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009244:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8009246:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800924a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800924e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8009250:	d05b      	beq.n	800930a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009252:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009256:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800925a:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800925e:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009262:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8009266:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800926c:	ee06 1a90 	vmov	s13, r1
 8009270:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8009274:	d003      	beq.n	800927e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8009276:	2c02      	cmp	r4, #2
 8009278:	d06a      	beq.n	8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800927a:	2c00      	cmp	r4, #0
 800927c:	d04a      	beq.n	8009314 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800927e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8009282:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8009286:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8009288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928c:	ee07 3a90 	vmov	s15, r3
 8009290:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80092a0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80092a4:	4a2d      	ldr	r2, [pc, #180]	@ (800935c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80092a6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80092aa:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80092ac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80092b0:	ee07 3a10 	vmov	s14, r3
 80092b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80092b8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80092ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 80092be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092c2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80092c6:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80092ca:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80092cc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80092d0:	ee07 3a10 	vmov	s14, r3
 80092d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80092dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092e0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80092e4:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092e8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80092ea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80092ee:	ee06 3a90 	vmov	s13, r3
 80092f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80092f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80092fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80092fe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009302:	ee17 3a90 	vmov	r3, s15
 8009306:	6083      	str	r3, [r0, #8]
}
 8009308:	4770      	bx	lr
 800930a:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800930c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009310:	6083      	str	r3, [r0, #8]
}
 8009312:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009314:	6813      	ldr	r3, [r2, #0]
 8009316:	069b      	lsls	r3, r3, #26
 8009318:	d51d      	bpl.n	8009356 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800931a:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800931c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009320:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009322:	4910      	ldr	r1, [pc, #64]	@ (8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8009324:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009328:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800932c:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	ee06 1a10 	vmov	s12, r1
 8009336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800933a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800933e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8009342:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8009346:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800934a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800934e:	e7a9      	b.n	80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009350:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8009354:	e795      	b.n	8009282 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009356:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800936c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800935a:	e792      	b.n	8009282 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800935c:	58024400 	.word	0x58024400
 8009360:	4a742400 	.word	0x4a742400
 8009364:	03d09000 	.word	0x03d09000
 8009368:	4bbebc20 	.word	0x4bbebc20
 800936c:	4c742400 	.word	0x4c742400

08009370 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009370:	4a47      	ldr	r2, [pc, #284]	@ (8009490 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8009372:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009374:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009376:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009378:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800937a:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800937e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009382:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8009384:	d05b      	beq.n	800943e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009386:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800938a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800938e:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009392:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009396:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800939a:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800939c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093a0:	ee06 1a90 	vmov	s13, r1
 80093a4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80093a8:	d003      	beq.n	80093b2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80093aa:	2c02      	cmp	r4, #2
 80093ac:	d06a      	beq.n	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80093ae:	2c00      	cmp	r4, #0
 80093b0:	d04a      	beq.n	8009448 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093b2:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8009494 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80093b6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80093ba:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80093bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80093c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80093d4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80093d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009490 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 80093da:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80093de:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80093e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80093e4:	ee07 3a10 	vmov	s14, r3
 80093e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80093ec:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80093ee:	ee37 7a06 	vadd.f32	s14, s14, s12
 80093f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093f6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80093fa:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80093fe:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009400:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009404:	ee07 3a10 	vmov	s14, r3
 8009408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800940c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009410:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009414:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009418:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800941c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800941e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009422:	ee06 3a90 	vmov	s13, r3
 8009426:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800942a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800942e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009432:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009436:	ee17 3a90 	vmov	r3, s15
 800943a:	6083      	str	r3, [r0, #8]
}
 800943c:	4770      	bx	lr
 800943e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009440:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009444:	6083      	str	r3, [r0, #8]
}
 8009446:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009448:	6813      	ldr	r3, [r2, #0]
 800944a:	069b      	lsls	r3, r3, #26
 800944c:	d51d      	bpl.n	800948a <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800944e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009450:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009454:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009456:	4910      	ldr	r1, [pc, #64]	@ (8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8009458:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009460:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	ee06 1a10 	vmov	s12, r1
 800946a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800946e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009472:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8009476:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800947a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800947e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009482:	e7a9      	b.n	80093d8 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009484:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800949c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8009488:	e795      	b.n	80093b6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800948a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80094a0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800948e:	e792      	b.n	80093b6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8009490:	58024400 	.word	0x58024400
 8009494:	4a742400 	.word	0x4a742400
 8009498:	03d09000 	.word	0x03d09000
 800949c:	4bbebc20 	.word	0x4bbebc20
 80094a0:	4c742400 	.word	0x4c742400

080094a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094a4:	4a47      	ldr	r2, [pc, #284]	@ (80095c4 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 80094a6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094a8:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80094aa:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80094ac:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 80094ae:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80094b2:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094b6:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 80094b8:	d05b      	beq.n	8009572 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094ba:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80094be:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094c2:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094c6:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094ca:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80094ce:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094d4:	ee06 1a90 	vmov	s13, r1
 80094d8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80094dc:	d06f      	beq.n	80095be <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80094de:	2c02      	cmp	r4, #2
 80094e0:	d06a      	beq.n	80095b8 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 80094e2:	2c00      	cmp	r4, #0
 80094e4:	d04a      	beq.n	800957c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094e6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80094ea:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80094ee:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80094f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80094fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009504:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009508:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800950c:	4a2d      	ldr	r2, [pc, #180]	@ (80095c4 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 800950e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009512:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009514:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009518:	ee07 3a10 	vmov	s14, r3
 800951c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009520:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009522:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009526:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800952a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800952e:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009532:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009534:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009538:	ee07 3a10 	vmov	s14, r3
 800953c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009540:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009544:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009548:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800954c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009550:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009552:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009556:	ee06 3a90 	vmov	s13, r3
 800955a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800955e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009562:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009566:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800956a:	ee17 3a90 	vmov	r3, s15
 800956e:	6083      	str	r3, [r0, #8]
}
 8009570:	4770      	bx	lr
 8009572:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009574:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009578:	6083      	str	r3, [r0, #8]
}
 800957a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800957c:	6813      	ldr	r3, [r2, #0]
 800957e:	069b      	lsls	r3, r3, #26
 8009580:	d5b1      	bpl.n	80094e6 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009582:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009584:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009588:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800958a:	4910      	ldr	r1, [pc, #64]	@ (80095cc <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 800958c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009590:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009594:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	ee06 1a10 	vmov	s12, r1
 800959e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80095a6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80095aa:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80095ae:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80095b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095b6:	e7a9      	b.n	800950c <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095b8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80095d0 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 80095bc:	e795      	b.n	80094ea <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095be:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80095d4 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 80095c2:	e792      	b.n	80094ea <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 80095c4:	58024400 	.word	0x58024400
 80095c8:	4c742400 	.word	0x4c742400
 80095cc:	03d09000 	.word	0x03d09000
 80095d0:	4bbebc20 	.word	0x4bbebc20
 80095d4:	4a742400 	.word	0x4a742400

080095d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80095d8:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80095dc:	430b      	orrs	r3, r1
{
 80095de:	b500      	push	{lr}
 80095e0:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80095e2:	d071      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80095e4:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80095e8:	430b      	orrs	r3, r1
 80095ea:	d033      	beq.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80095ec:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80095f0:	430b      	orrs	r3, r1
 80095f2:	f000 80c6 	beq.w	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80095f6:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 80095fa:	430b      	orrs	r3, r1
 80095fc:	d078      	beq.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80095fe:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8009602:	430b      	orrs	r3, r1
 8009604:	f000 80d3 	beq.w	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009608:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800960c:	430b      	orrs	r3, r1
 800960e:	f000 812c 	beq.w	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009612:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8009616:	430b      	orrs	r3, r1
 8009618:	f000 8140 	beq.w	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800961c:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8009620:	430b      	orrs	r3, r1
 8009622:	f000 8103 	beq.w	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009626:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800962a:	4308      	orrs	r0, r1
 800962c:	d137      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800962e:	4b96      	ldr	r3, [pc, #600]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009632:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8009636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800963a:	d07f      	beq.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 800963c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009640:	f000 8167 	beq.w	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8009644:	bb5b      	cbnz	r3, 800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009646:	4b90      	ldr	r3, [pc, #576]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800964e:	d038      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = HSE_VALUE;
 8009650:	488e      	ldr	r0, [pc, #568]	@ (800988c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009652:	e036      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009654:	4a8c      	ldr	r2, [pc, #560]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009656:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009658:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 800965c:	2b80      	cmp	r3, #128	@ 0x80
 800965e:	f000 808b 	beq.w	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009662:	d920      	bls.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8009664:	2bc0      	cmp	r3, #192	@ 0xc0
 8009666:	d02b      	beq.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800966c:	d117      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800966e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009670:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009672:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009676:	0749      	lsls	r1, r1, #29
 8009678:	d502      	bpl.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80c9 	beq.w	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009680:	4a81      	ldr	r2, [pc, #516]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009682:	6812      	ldr	r2, [r2, #0]
 8009684:	05d0      	lsls	r0, r2, #23
 8009686:	d503      	bpl.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8009688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800968c:	f000 80cc 	beq.w	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009690:	4a7d      	ldr	r2, [pc, #500]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009692:	6812      	ldr	r2, [r2, #0]
 8009694:	0391      	lsls	r1, r2, #14
 8009696:	d502      	bpl.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8009698:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800969c:	d0d8      	beq.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800969e:	2000      	movs	r0, #0
}
 80096a0:	b005      	add	sp, #20
 80096a2:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d03f      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80096aa:	2b40      	cmp	r3, #64	@ 0x40
 80096ac:	d1f7      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096ae:	6810      	ldr	r0, [r2, #0]
 80096b0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80096b4:	d005      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b6:	a801      	add	r0, sp, #4
 80096b8:	f7ff fdc0 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096bc:	9801      	ldr	r0, [sp, #4]
 80096be:	e000      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = EXTERNAL_CLOCK_VALUE;
 80096c0:	4873      	ldr	r0, [pc, #460]	@ (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
}
 80096c2:	b005      	add	sp, #20
 80096c4:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80096c8:	4b6f      	ldr	r3, [pc, #444]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80096ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096cc:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d8e4      	bhi.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80096d4:	a201      	add	r2, pc, #4	@ (adr r2, 80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 80096d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096da:	bf00      	nop
 80096dc:	0800973d 	.word	0x0800973d
 80096e0:	08009749 	.word	0x08009749
 80096e4:	08009759 	.word	0x08009759
 80096e8:	080096c1 	.word	0x080096c1
 80096ec:	08009755 	.word	0x08009755
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80096f0:	4a65      	ldr	r2, [pc, #404]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80096f2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80096f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 80096f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096fc:	d03c      	beq.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 80096fe:	d935      	bls.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009700:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009704:	d0dc      	beq.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009706:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800970a:	d1c8      	bne.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800970c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800970e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009710:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009714:	0752      	lsls	r2, r2, #29
 8009716:	d5b3      	bpl.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1b1      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800971c:	4b5a      	ldr	r3, [pc, #360]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800971e:	485d      	ldr	r0, [pc, #372]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009726:	40d8      	lsrs	r0, r3
 8009728:	e7cb      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800972a:	6810      	ldr	r0, [r2, #0]
 800972c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8009730:	d0c7      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009732:	a801      	add	r0, sp, #4
 8009734:	f7ff feb6 	bl	80094a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009738:	9802      	ldr	r0, [sp, #8]
 800973a:	e7c2      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800973c:	4b52      	ldr	r3, [pc, #328]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8009744:	d0bd      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8009746:	e7f4      	b.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009748:	4b4f      	ldr	r3, [pc, #316]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009750:	d0b7      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8009752:	e7b0      	b.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009754:	4a4c      	ldr	r2, [pc, #304]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009756:	e78a      	b.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009758:	4b4b      	ldr	r3, [pc, #300]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8009760:	d0af      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009762:	a801      	add	r0, sp, #4
 8009764:	f7ff fe04 	bl	8009370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009768:	9801      	ldr	r0, [sp, #4]
 800976a:	e7aa      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0dc      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009774:	d09b      	beq.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8009776:	e792      	b.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009778:	6810      	ldr	r0, [r2, #0]
 800977a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800977e:	d0a0      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8009780:	e7ef      	b.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009782:	4a41      	ldr	r2, [pc, #260]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009784:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009786:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
    switch (saiclocksource)
 800978a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800978e:	d0f3      	beq.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009790:	d805      	bhi.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0c9      	beq.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800979a:	d088      	beq.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800979c:	e77f      	b.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800979e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80097a2:	d08d      	beq.n	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80097a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097a8:	f43f af61 	beq.w	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 80097ac:	e777      	b.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80097ae:	4a36      	ldr	r2, [pc, #216]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80097b0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80097b2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80097b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097ba:	d025      	beq.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80097bc:	d80f      	bhi.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80097be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097c2:	d048      	beq.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 80097c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c8:	d116      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097ca:	6810      	ldr	r0, [r2, #0]
 80097cc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80097d0:	f43f af77 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097d4:	a801      	add	r0, sp, #4
 80097d6:	f7ff fdcb 	bl	8009370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097da:	9802      	ldr	r0, [sp, #8]
 80097dc:	e771      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 80097de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097e2:	d01c      	beq.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80097e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097e8:	f47f af59 	bne.w	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097ec:	6810      	ldr	r0, [r2, #0]
 80097ee:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80097f2:	f43f af66 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 80097f6:	e72b      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f47f af50 	bne.w	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
}
 80097fe:	b005      	add	sp, #20
 8009800:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8009804:	f7fe bcd6 	b.w	80081b4 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009808:	6810      	ldr	r0, [r2, #0]
 800980a:	f010 0004 	ands.w	r0, r0, #4
 800980e:	f43f af58 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	481f      	ldr	r0, [pc, #124]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009816:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800981a:	40d8      	lsrs	r0, r3
 800981c:	e751      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800981e:	6810      	ldr	r0, [r2, #0]
 8009820:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8009824:	f43f af4d 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = CSI_VALUE;
 8009828:	481b      	ldr	r0, [pc, #108]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800982a:	e74a      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800982c:	4a16      	ldr	r2, [pc, #88]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800982e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009830:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8009834:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009838:	d072      	beq.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800983a:	d83e      	bhi.n	80098ba <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 800983c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009840:	d067      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8009842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009846:	d14b      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009848:	4b0f      	ldr	r3, [pc, #60]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8009850:	f43f af37 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8009854:	e7be      	b.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009856:	6810      	ldr	r0, [r2, #0]
 8009858:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800985c:	f43f af31 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009860:	a801      	add	r0, sp, #4
 8009862:	f7ff fceb 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009866:	9802      	ldr	r0, [sp, #8]
 8009868:	e72b      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800986a:	4a07      	ldr	r2, [pc, #28]	@ (8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800986c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800986e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8009872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009876:	d042      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800987c:	f43f af46 	beq.w	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009880:	2b00      	cmp	r3, #0
 8009882:	f47f af0c 	bne.w	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8009886:	e712      	b.n	80096ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8009888:	58024400 	.word	0x58024400
 800988c:	017d7840 	.word	0x017d7840
 8009890:	00bb8000 	.word	0x00bb8000
 8009894:	03d09000 	.word	0x03d09000
 8009898:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800989c:	4b23      	ldr	r3, [pc, #140]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800989e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 80098a0:	03d2      	lsls	r2, r2, #15
 80098a2:	f57f af4c 	bpl.w	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098a6:	6818      	ldr	r0, [r3, #0]
 80098a8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80098ac:	f43f af09 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098b0:	a801      	add	r0, sp, #4
 80098b2:	f7ff fcc3 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80098b6:	9803      	ldr	r0, [sp, #12]
 80098b8:	e703      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 80098ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098be:	f43f aec2 	beq.w	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80098c2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80098c6:	f43f aefb 	beq.w	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80098ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ce:	f47f aee6 	bne.w	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098d2:	4b16      	ldr	r3, [pc, #88]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80098da:	f43f aef2 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 80098de:	e7a3      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    switch (srcclk)
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f47f aedc 	bne.w	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80098e6:	f7fe fc25 	bl	8008134 <HAL_RCC_GetHCLKFreq>
 80098ea:	4b10      	ldr	r3, [pc, #64]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80098ec:	4a10      	ldr	r2, [pc, #64]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80098f4:	5cd3      	ldrb	r3, [r2, r3]
 80098f6:	f003 031f 	and.w	r3, r3, #31
 80098fa:	40d8      	lsrs	r0, r3
        break;
 80098fc:	e6e1      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098fe:	6810      	ldr	r0, [r2, #0]
 8009900:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8009904:	f43f aedd 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009908:	a801      	add	r0, sp, #4
 800990a:	f7ff fd31 	bl	8009370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800990e:	9803      	ldr	r0, [sp, #12]
 8009910:	e6d7      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009912:	4b06      	ldr	r3, [pc, #24]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800991a:	f43f aed2 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800991e:	e79f      	b.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009920:	6810      	ldr	r0, [r2, #0]
 8009922:	f010 0004 	ands.w	r0, r0, #4
 8009926:	f43f aecc 	beq.w	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800992a:	e6f7      	b.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800992c:	58024400 	.word	0x58024400
 8009930:	0800eebc 	.word	0x0800eebc

08009934 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009934:	6803      	ldr	r3, [r0, #0]
{
 8009936:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009938:	689c      	ldr	r4, [r3, #8]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800993a:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800993c:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800993e:	f3c0 000e 	ubfx	r0, r0, #0, #15

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009942:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8009946:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800994a:	f3c3 4506 	ubfx	r5, r3, #16, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800994e:	e9c1 4001 	strd	r4, r0, [r1, #4]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009952:	f3c3 4405 	ubfx	r4, r3, #16, #6
 8009956:	2000      	movs	r0, #0
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009958:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800995c:	f364 0007 	bfi	r0, r4, #0, #8
 8009960:	f36e 200f 	bfi	r0, lr, #8, #8
 8009964:	f36c 4017 	bfi	r0, ip, #16, #8
 8009968:	f363 601f 	bfi	r0, r3, #24, #8
 800996c:	6008      	str	r0, [r1, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800996e:	b9da      	cbnz	r2, 80099a8 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009970:	ea4f 131e 	mov.w	r3, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 8009974:	f00e 0e0f 	and.w	lr, lr, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009978:	0924      	lsrs	r4, r4, #4
  return (tmp + (Value & 0x0FU));
 800997a:	f005 050f 	and.w	r5, r5, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800997e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009982:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & 0x0FU));
 8009986:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800998a:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 800998e:	f00c 0c0f 	and.w	ip, ip, #15
 8009992:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009996:	f881 e001 	strb.w	lr, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800999a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800999e:	700d      	strb	r5, [r1, #0]
  return (tmp + (Value & 0x0FU));
 80099a0:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80099a4:	f881 c002 	strb.w	ip, [r1, #2]
}
 80099a8:	2000      	movs	r0, #0
 80099aa:	bd30      	pop	{r4, r5, pc}

080099ac <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80099ac:	6803      	ldr	r3, [r0, #0]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80099ae:	2000      	movs	r0, #0
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80099b0:	685b      	ldr	r3, [r3, #4]
{
 80099b2:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80099b4:	f3c3 3e42 	ubfx	lr, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80099b8:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80099bc:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80099c0:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80099c4:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80099c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80099cc:	f36e 200f 	bfi	r0, lr, #8, #8
 80099d0:	f363 4017 	bfi	r0, r3, #16, #8
 80099d4:	f36c 601f 	bfi	r0, ip, #24, #8
 80099d8:	6008      	str	r0, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80099da:	b9d2      	cbnz	r2, 8009a12 <HAL_RTC_GetDate+0x66>
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80099dc:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & 0x0FU));
 80099de:	f003 030f 	and.w	r3, r3, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80099e2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 80099e6:	f004 040f 	and.w	r4, r4, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80099ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80099ee:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (Value & 0x0FU));
 80099f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80099f6:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80099fa:	708b      	strb	r3, [r1, #2]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80099fc:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 8009a00:	f00c 0c0f 	and.w	ip, ip, #15
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009a04:	704c      	strb	r4, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009a06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 8009a0a:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009a0e:	f881 c003 	strb.w	ip, [r1, #3]
}
 8009a12:	2000      	movs	r0, #0
 8009a14:	bd10      	pop	{r4, pc}
 8009a16:	bf00      	nop

08009a18 <RTC_ExitInitMode>:
{
 8009a18:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009a1a:	4b20      	ldr	r3, [pc, #128]	@ (8009a9c <RTC_ExitInitMode+0x84>)
{
 8009a1c:	4604      	mov	r4, r0
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009a1e:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a26:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009a28:	699a      	ldr	r2, [r3, #24]
 8009a2a:	0690      	lsls	r0, r2, #26
 8009a2c:	d411      	bmi.n	8009a52 <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa0 <RTC_ExitInitMode+0x88>)
 8009a30:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8009a32:	f7fa f9d7 	bl	8003de4 <HAL_GetTick>
 8009a36:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a38:	e005      	b.n	8009a46 <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a3a:	f7fa f9d3 	bl	8003de4 <HAL_GetTick>
 8009a3e:	1b43      	subs	r3, r0, r5
 8009a40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a44:	d825      	bhi.n	8009a92 <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	069a      	lsls	r2, r3, #26
 8009a4c:	d5f5      	bpl.n	8009a3a <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8009a4e:	2000      	movs	r0, #0
}
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a52:	699a      	ldr	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009a54:	4812      	ldr	r0, [pc, #72]	@ (8009aa0 <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a56:	f022 0220 	bic.w	r2, r2, #32
 8009a5a:	619a      	str	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009a5c:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 8009a5e:	f7fa f9c1 	bl	8003de4 <HAL_GetTick>
 8009a62:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a64:	e005      	b.n	8009a72 <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a66:	f7fa f9bd 	bl	8003de4 <HAL_GetTick>
 8009a6a:	1b43      	subs	r3, r0, r5
 8009a6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a70:	d80a      	bhi.n	8009a88 <RTC_ExitInitMode+0x70>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	069b      	lsls	r3, r3, #26
 8009a78:	d5f5      	bpl.n	8009a66 <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 8009a7a:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a7c:	4a07      	ldr	r2, [pc, #28]	@ (8009a9c <RTC_ExitInitMode+0x84>)
 8009a7e:	6993      	ldr	r3, [r2, #24]
 8009a80:	f043 0320 	orr.w	r3, r3, #32
 8009a84:	6193      	str	r3, [r2, #24]
}
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8009a8a:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a8c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8009a90:	e7f4      	b.n	8009a7c <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8009a94:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a96:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	58004000 	.word	0x58004000
 8009aa0:	0001005f 	.word	0x0001005f

08009aa4 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d046      	beq.n	8009b36 <HAL_RTC_Init+0x92>
{
 8009aa8:	b570      	push	{r4, r5, r6, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009aaa:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009aae:	4604      	mov	r4, r0
 8009ab0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d039      	beq.n	8009b2c <HAL_RTC_Init+0x88>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009ab8:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009aba:	6822      	ldr	r2, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009abc:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009ac0:	68d3      	ldr	r3, [r2, #12]
 8009ac2:	06db      	lsls	r3, r3, #27
 8009ac4:	d504      	bpl.n	8009ad0 <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ad0:	21ca      	movs	r1, #202	@ 0xca
 8009ad2:	2353      	movs	r3, #83	@ 0x53
 8009ad4:	6251      	str	r1, [r2, #36]	@ 0x24
 8009ad6:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009ad8:	68d5      	ldr	r5, [r2, #12]
 8009ada:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 8009ade:	d02c      	beq.n	8009b3a <HAL_RTC_Init+0x96>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8009ae0:	6990      	ldr	r0, [r2, #24]
 8009ae2:	4929      	ldr	r1, [pc, #164]	@ (8009b88 <HAL_RTC_Init+0xe4>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ae4:	6863      	ldr	r3, [r4, #4]
 8009ae6:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8009ae8:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009aea:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8009aec:	6191      	str	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009aee:	69a1      	ldr	r1, [r4, #24]
 8009af0:	6990      	ldr	r0, [r2, #24]
 8009af2:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009af4:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009af6:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 8009af8:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009afa:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009afc:	68e3      	ldr	r3, [r4, #12]
 8009afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009b02:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8009b04:	f7ff ff88 	bl	8009a18 <RTC_ExitInitMode>
      if(status == HAL_OK)
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d133      	bne.n	8009b74 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8009b0c:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b0e:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8009b10:	6991      	ldr	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b12:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8009b16:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b1a:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8009b1c:	6191      	str	r1, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b1e:	21ff      	movs	r1, #255	@ 0xff
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b20:	4303      	orrs	r3, r0
 8009b22:	6990      	ldr	r0, [r2, #24]
 8009b24:	4303      	orrs	r3, r0
 8009b26:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b28:	6251      	str	r1, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 8009b2a:	e7cc      	b.n	8009ac6 <HAL_RTC_Init+0x22>
      hrtc->Lock = HAL_UNLOCKED;
 8009b2c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
      HAL_RTC_MspInit(hrtc);
 8009b30:	f7f9 ffea 	bl	8003b08 <HAL_RTC_MspInit>
 8009b34:	e7c0      	b.n	8009ab8 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b36:	2001      	movs	r0, #1
}
 8009b38:	4770      	bx	lr
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009b3a:	68d3      	ldr	r3, [r2, #12]
 8009b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b40:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8009b42:	f7fa f94f 	bl	8003de4 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 8009b46:	4629      	mov	r1, r5
    tickstart = HAL_GetTick();
 8009b48:	4606      	mov	r6, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b4a:	e008      	b.n	8009b5e <HAL_RTC_Init+0xba>
 8009b4c:	2903      	cmp	r1, #3
 8009b4e:	d00d      	beq.n	8009b6c <HAL_RTC_Init+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009b50:	f7fa f948 	bl	8003de4 <HAL_GetTick>
 8009b54:	1b80      	subs	r0, r0, r6
 8009b56:	4629      	mov	r1, r5
 8009b58:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009b5c:	d80e      	bhi.n	8009b7c <HAL_RTC_Init+0xd8>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b5e:	6822      	ldr	r2, [r4, #0]
 8009b60:	68d5      	ldr	r5, [r2, #12]
 8009b62:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 8009b66:	d0f1      	beq.n	8009b4c <HAL_RTC_Init+0xa8>
      if (status == HAL_OK)
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	d0b9      	beq.n	8009ae0 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b6c:	23ff      	movs	r3, #255	@ 0xff
 8009b6e:	2003      	movs	r0, #3
 8009b70:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	22ff      	movs	r2, #255	@ 0xff
 8009b78:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 8009b7e:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b80:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 8009b84:	e7eb      	b.n	8009b5e <HAL_RTC_Init+0xba>
 8009b86:	bf00      	nop
 8009b88:	fb8fffbf 	.word	0xfb8fffbf

08009b8c <HAL_RTC_SetTime>:
{
 8009b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8009b90:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d065      	beq.n	8009c64 <HAL_RTC_SetTime+0xd8>
 8009b98:	2301      	movs	r3, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b9a:	6805      	ldr	r5, [r0, #0]
 8009b9c:	4681      	mov	r9, r0
 8009b9e:	460f      	mov	r7, r1
  __HAL_LOCK(hrtc);
 8009ba0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	4616      	mov	r6, r2
 8009ba8:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bac:	23ca      	movs	r3, #202	@ 0xca
 8009bae:	626b      	str	r3, [r5, #36]	@ 0x24
 8009bb0:	2353      	movs	r3, #83	@ 0x53
 8009bb2:	626b      	str	r3, [r5, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009bb4:	68ec      	ldr	r4, [r5, #12]
 8009bb6:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8009bba:	d030      	beq.n	8009c1e <HAL_RTC_SetTime+0x92>
    if(Format == RTC_FORMAT_BIN)
 8009bbc:	2e00      	cmp	r6, #0
 8009bbe:	d154      	bne.n	8009c6a <HAL_RTC_SetTime+0xde>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009bc0:	69a8      	ldr	r0, [r5, #24]
 8009bc2:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8009bc6:	d07d      	beq.n	8009cc4 <HAL_RTC_SetTime+0x138>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009bc8:	78f8      	ldrb	r0, [r7, #3]
 8009bca:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009bcc:	783b      	ldrb	r3, [r7, #0]
  while (bcdlow >= 10U)
 8009bce:	2b09      	cmp	r3, #9
 8009bd0:	d908      	bls.n	8009be4 <HAL_RTC_SetTime+0x58>
  uint32_t bcdhigh = 0U;
 8009bd2:	2200      	movs	r2, #0
    bcdlow -= 10U;
 8009bd4:	3b0a      	subs	r3, #10
    bcdhigh++;
 8009bd6:	3201      	adds	r2, #1
    bcdlow -= 10U;
 8009bd8:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 8009bda:	2b09      	cmp	r3, #9
 8009bdc:	d8fa      	bhi.n	8009bd4 <HAL_RTC_SetTime+0x48>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009bde:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009be2:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009be4:	787a      	ldrb	r2, [r7, #1]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009be6:	041b      	lsls	r3, r3, #16
  while (bcdlow >= 10U)
 8009be8:	2a09      	cmp	r2, #9
 8009bea:	d908      	bls.n	8009bfe <HAL_RTC_SetTime+0x72>
  uint32_t bcdhigh = 0U;
 8009bec:	2100      	movs	r1, #0
    bcdlow -= 10U;
 8009bee:	3a0a      	subs	r2, #10
    bcdhigh++;
 8009bf0:	3101      	adds	r1, #1
    bcdlow -= 10U;
 8009bf2:	b2d2      	uxtb	r2, r2
  while (bcdlow >= 10U)
 8009bf4:	2a09      	cmp	r2, #9
 8009bf6:	d8fa      	bhi.n	8009bee <HAL_RTC_SetTime+0x62>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009bf8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8009bfc:	b2d2      	uxtb	r2, r2
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009bfe:	78b9      	ldrb	r1, [r7, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c00:	0212      	lsls	r2, r2, #8
  while (bcdlow >= 10U)
 8009c02:	2909      	cmp	r1, #9
 8009c04:	d907      	bls.n	8009c16 <HAL_RTC_SetTime+0x8a>
    bcdlow -= 10U;
 8009c06:	390a      	subs	r1, #10
    bcdhigh++;
 8009c08:	3601      	adds	r6, #1
    bcdlow -= 10U;
 8009c0a:	b2c9      	uxtb	r1, r1
  while (bcdlow >= 10U)
 8009c0c:	2909      	cmp	r1, #9
 8009c0e:	d8fa      	bhi.n	8009c06 <HAL_RTC_SetTime+0x7a>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009c10:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8009c14:	b2c9      	uxtb	r1, r1
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c16:	4303      	orrs	r3, r0
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	430b      	orrs	r3, r1
 8009c1c:	e033      	b.n	8009c86 <HAL_RTC_SetTime+0xfa>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009c1e:	68eb      	ldr	r3, [r5, #12]
 8009c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c24:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8009c26:	f7fa f8dd 	bl	8003de4 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 8009c2a:	4622      	mov	r2, r4
    tickstart = HAL_GetTick();
 8009c2c:	4680      	mov	r8, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009c2e:	e009      	b.n	8009c44 <HAL_RTC_SetTime+0xb8>
 8009c30:	2a03      	cmp	r2, #3
 8009c32:	d00f      	beq.n	8009c54 <HAL_RTC_SetTime+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009c34:	f7fa f8d6 	bl	8003de4 <HAL_GetTick>
 8009c38:	eba0 0308 	sub.w	r3, r0, r8
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c42:	d83a      	bhi.n	8009cba <HAL_RTC_SetTime+0x12e>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009c44:	f8d9 5000 	ldr.w	r5, [r9]
 8009c48:	68ec      	ldr	r4, [r5, #12]
 8009c4a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8009c4e:	d0ef      	beq.n	8009c30 <HAL_RTC_SetTime+0xa4>
  if (status == HAL_OK)
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	d0b3      	beq.n	8009bbc <HAL_RTC_SetTime+0x30>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c54:	23ff      	movs	r3, #255	@ 0xff
 8009c56:	2003      	movs	r0, #3
 8009c58:	626b      	str	r3, [r5, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
}
 8009c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8009c64:	2002      	movs	r0, #2
}
 8009c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c6a:	69aa      	ldr	r2, [r5, #24]
 8009c6c:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 8009c70:	d02a      	beq.n	8009cc8 <HAL_RTC_SetTime+0x13c>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	0592      	lsls	r2, r2, #22
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c76:	787b      	ldrb	r3, [r7, #1]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c78:	7839      	ldrb	r1, [r7, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c7a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009c80:	78b9      	ldrb	r1, [r7, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c82:	430b      	orrs	r3, r1
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c84:	4313      	orrs	r3, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c86:	4a11      	ldr	r2, [pc, #68]	@ (8009ccc <HAL_RTC_SetTime+0x140>)
    status = RTC_ExitInitMode(hrtc);
 8009c88:	4648      	mov	r0, r9
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c8a:	401a      	ands	r2, r3
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c8c:	e9d7 3103 	ldrd	r3, r1, [r7, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c90:	602a      	str	r2, [r5, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009c92:	69aa      	ldr	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c94:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009c96:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009c9a:	61aa      	str	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c9c:	69aa      	ldr	r2, [r5, #24]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	61ab      	str	r3, [r5, #24]
    status = RTC_ExitInitMode(hrtc);
 8009ca2:	f7ff feb9 	bl	8009a18 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ca6:	f8d9 3000 	ldr.w	r3, [r9]
 8009caa:	22ff      	movs	r2, #255	@ 0xff
 8009cac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d1d3      	bne.n	8009c5a <HAL_RTC_SetTime+0xce>
    hrtc->State = HAL_RTC_STATE_READY;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 8009cb8:	e7cf      	b.n	8009c5a <HAL_RTC_SetTime+0xce>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 8009cbc:	461a      	mov	r2, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cbe:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 8009cc2:	e7bf      	b.n	8009c44 <HAL_RTC_SetTime+0xb8>
        sTime->TimeFormat = 0x00U;
 8009cc4:	70fe      	strb	r6, [r7, #3]
 8009cc6:	e781      	b.n	8009bcc <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 8009cc8:	70fa      	strb	r2, [r7, #3]
 8009cca:	e7d4      	b.n	8009c76 <HAL_RTC_SetTime+0xea>
 8009ccc:	007f7f7f 	.word	0x007f7f7f

08009cd0 <HAL_RTC_SetDate>:
{
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8009cd2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	f000 808b 	beq.w	8009df2 <HAL_RTC_SetDate+0x122>
 8009cdc:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009cde:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8009ce0:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ce2:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_LOCK(hrtc);
 8009ce6:	f885 0024 	strb.w	r0, [r5, #36]	@ 0x24
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009cea:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009cec:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009cee:	f891 c001 	ldrb.w	ip, [r1, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009cf2:	0376      	lsls	r6, r6, #13
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009cf4:	7888      	ldrb	r0, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009cf6:	b1f2      	cbz	r2, 8009d36 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009cf8:	ea46 4403 	orr.w	r4, r6, r3, lsl #16
 8009cfc:	4304      	orrs	r4, r0
 8009cfe:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d02:	682a      	ldr	r2, [r5, #0]
 8009d04:	21ca      	movs	r1, #202	@ 0xca
 8009d06:	2353      	movs	r3, #83	@ 0x53
 8009d08:	6251      	str	r1, [r2, #36]	@ 0x24
 8009d0a:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009d0c:	68d6      	ldr	r6, [r2, #12]
 8009d0e:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 8009d12:	d049      	beq.n	8009da8 <HAL_RTC_SetDate+0xd8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d14:	4b39      	ldr	r3, [pc, #228]	@ (8009dfc <HAL_RTC_SetDate+0x12c>)
    status = RTC_ExitInitMode(hrtc);
 8009d16:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d18:	4023      	ands	r3, r4
 8009d1a:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8009d1c:	f7ff fe7c 	bl	8009a18 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	22ff      	movs	r2, #255	@ 0xff
 8009d24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8009d26:	b910      	cbnz	r0, 8009d2e <HAL_RTC_SetDate+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_UNLOCK(hrtc);
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
}
 8009d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009d36:	f01c 0f10 	tst.w	ip, #16
 8009d3a:	d052      	beq.n	8009de2 <HAL_RTC_SetDate+0x112>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009d3c:	f02c 0c10 	bic.w	ip, ip, #16
  while (bcdlow >= 10U)
 8009d40:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009d42:	f10c 0c0a 	add.w	ip, ip, #10
 8009d46:	fa5f fc8c 	uxtb.w	ip, ip
 8009d4a:	f881 c001 	strb.w	ip, [r1, #1]
  while (bcdlow >= 10U)
 8009d4e:	d952      	bls.n	8009df6 <HAL_RTC_SetDate+0x126>
  uint32_t bcdhigh = 0U;
 8009d50:	2100      	movs	r1, #0
    bcdlow -= 10U;
 8009d52:	3b0a      	subs	r3, #10
    bcdhigh++;
 8009d54:	3101      	adds	r1, #1
    bcdlow -= 10U;
 8009d56:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 8009d58:	2b09      	cmp	r3, #9
 8009d5a:	d8fa      	bhi.n	8009d52 <HAL_RTC_SetDate+0x82>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009d5c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8009d60:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 8009d62:	f1bc 0f09 	cmp.w	ip, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d66:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (bcdlow >= 10U)
 8009d6a:	d90c      	bls.n	8009d86 <HAL_RTC_SetDate+0xb6>
  uint32_t bcdhigh = 0U;
 8009d6c:	2300      	movs	r3, #0
    bcdlow -= 10U;
 8009d6e:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 8009d72:	3301      	adds	r3, #1
    bcdlow -= 10U;
 8009d74:	fa5f fc8c 	uxtb.w	ip, ip
  while (bcdlow >= 10U)
 8009d78:	f1bc 0f09 	cmp.w	ip, #9
 8009d7c:	d8f7      	bhi.n	8009d6e <HAL_RTC_SetDate+0x9e>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009d7e:	ea4c 1303 	orr.w	r3, ip, r3, lsl #4
 8009d82:	fa5f fc83 	uxtb.w	ip, r3
  while (bcdlow >= 10U)
 8009d86:	2809      	cmp	r0, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d88:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  while (bcdlow >= 10U)
 8009d8c:	d907      	bls.n	8009d9e <HAL_RTC_SetDate+0xce>
    bcdlow -= 10U;
 8009d8e:	380a      	subs	r0, #10
    bcdhigh++;
 8009d90:	3201      	adds	r2, #1
    bcdlow -= 10U;
 8009d92:	b2c0      	uxtb	r0, r0
  while (bcdlow >= 10U)
 8009d94:	2809      	cmp	r0, #9
 8009d96:	d8fa      	bhi.n	8009d8e <HAL_RTC_SetDate+0xbe>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009d98:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d9c:	b2d0      	uxtb	r0, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d9e:	4334      	orrs	r4, r6
 8009da0:	ea44 040c 	orr.w	r4, r4, ip
 8009da4:	4304      	orrs	r4, r0
 8009da6:	e7ac      	b.n	8009d02 <HAL_RTC_SetDate+0x32>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009da8:	68d3      	ldr	r3, [r2, #12]
 8009daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dae:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8009db0:	f7fa f818 	bl	8003de4 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 8009db4:	4631      	mov	r1, r6
    tickstart = HAL_GetTick();
 8009db6:	4607      	mov	r7, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009db8:	e008      	b.n	8009dcc <HAL_RTC_SetDate+0xfc>
 8009dba:	2903      	cmp	r1, #3
 8009dbc:	d00d      	beq.n	8009dda <HAL_RTC_SetDate+0x10a>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009dbe:	f7fa f811 	bl	8003de4 <HAL_GetTick>
 8009dc2:	1bc0      	subs	r0, r0, r7
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009dca:	d80d      	bhi.n	8009de8 <HAL_RTC_SetDate+0x118>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009dcc:	682a      	ldr	r2, [r5, #0]
 8009dce:	68d6      	ldr	r6, [r2, #12]
 8009dd0:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 8009dd4:	d0f1      	beq.n	8009dba <HAL_RTC_SetDate+0xea>
  if (status == HAL_OK)
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	d09c      	beq.n	8009d14 <HAL_RTC_SetDate+0x44>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dda:	23ff      	movs	r3, #255	@ 0xff
 8009ddc:	2003      	movs	r0, #3
 8009dde:	6253      	str	r3, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 8009de0:	e7a5      	b.n	8009d2e <HAL_RTC_SetDate+0x5e>
  while (bcdlow >= 10U)
 8009de2:	2b09      	cmp	r3, #9
 8009de4:	d8b4      	bhi.n	8009d50 <HAL_RTC_SetDate+0x80>
 8009de6:	e7bc      	b.n	8009d62 <HAL_RTC_SetDate+0x92>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 8009dea:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dec:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009df0:	e7ec      	b.n	8009dcc <HAL_RTC_SetDate+0xfc>
  __HAL_LOCK(hrtc);
 8009df2:	2002      	movs	r0, #2
}
 8009df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009df6:	041c      	lsls	r4, r3, #16
  while (bcdlow >= 10U)
 8009df8:	e7b8      	b.n	8009d6c <HAL_RTC_SetDate+0x9c>
 8009dfa:	bf00      	nop
 8009dfc:	00ffff3f 	.word	0x00ffff3f

08009e00 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	4605      	mov	r5, r0
 8009e06:	b086      	sub	sp, #24
 8009e08:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e0a:	f7f9 ffeb 	bl	8003de4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e0e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009e10:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e12:	6828      	ldr	r0, [r5, #0]
 8009e14:	f001 fa26 	bl	800b264 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e18:	4604      	mov	r4, r0
 8009e1a:	b118      	cbz	r0, 8009e24 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	b006      	add	sp, #24
 8009e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009e24:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8009e26:	6828      	ldr	r0, [r5, #0]
 8009e28:	0409      	lsls	r1, r1, #16
 8009e2a:	f001 ff93 	bl	800bd54 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	4604      	mov	r4, r0
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d1f3      	bne.n	8009e1c <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e3a:	4669      	mov	r1, sp
 8009e3c:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8009e3e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009e42:	2230      	movs	r2, #48	@ 0x30
 8009e44:	2302      	movs	r3, #2
 8009e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e52:	f001 f9f1 	bl	800b238 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009e56:	6828      	ldr	r0, [r5, #0]
 8009e58:	f002 f910 	bl	800c07c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d1dc      	bne.n	8009e1c <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009e62:	4682      	mov	sl, r0
 8009e64:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009e66:	f240 582a 	movw	r8, #1322	@ 0x52a
 8009e6a:	e004      	b.n	8009e76 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e6c:	f7f9 ffba 	bl	8003de4 <HAL_GetTick>
 8009e70:	1b83      	subs	r3, r0, r6
 8009e72:	3301      	adds	r3, #1
 8009e74:	d024      	beq.n	8009ec0 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009e76:	6828      	ldr	r0, [r5, #0]
 8009e78:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009e7a:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009e7e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009e80:	d10c      	bne.n	8009e9c <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009e82:	0319      	lsls	r1, r3, #12
 8009e84:	d4f2      	bmi.n	8009e6c <SD_FindSCR.constprop.0+0x6c>
 8009e86:	2c00      	cmp	r4, #0
 8009e88:	d1f0      	bne.n	8009e6c <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009e8a:	f001 f9bb 	bl	800b204 <SDMMC_ReadFIFO>
 8009e8e:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009e90:	6828      	ldr	r0, [r5, #0]
      index++;
 8009e92:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009e94:	f001 f9b6 	bl	800b204 <SDMMC_ReadFIFO>
 8009e98:	4682      	mov	sl, r0
      index++;
 8009e9a:	e7e7      	b.n	8009e6c <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e9c:	071a      	lsls	r2, r3, #28
 8009e9e:	d416      	bmi.n	8009ece <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ea0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009ea2:	079b      	lsls	r3, r3, #30
 8009ea4:	d40f      	bmi.n	8009ec6 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ea6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009ea8:	f014 0420 	ands.w	r4, r4, #32
 8009eac:	d113      	bne.n	8009ed6 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009eae:	fa9a f28a 	rev.w	r2, sl
 8009eb2:	fa99 f389 	rev.w	r3, r9
 8009eb6:	490a      	ldr	r1, [pc, #40]	@ (8009ee0 <SD_FindSCR.constprop.0+0xe0>)
 8009eb8:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009eba:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8009ebe:	e7ad      	b.n	8009e1c <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8009ec0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8009ec4:	e7aa      	b.n	8009e1c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009ec6:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ec8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009eca:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ecc:	e7a6      	b.n	8009e1c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ece:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ed0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ed2:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ed4:	e7a2      	b.n	8009e1c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009ed6:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8009ed8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009eda:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009edc:	e79e      	b.n	8009e1c <SD_FindSCR.constprop.0+0x1c>
 8009ede:	bf00      	nop
 8009ee0:	18000f3a 	.word	0x18000f3a

08009ee4 <HAL_SD_ReadBlocks>:
{
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	460d      	mov	r5, r1
 8009eea:	b086      	sub	sp, #24
 8009eec:	4604      	mov	r4, r0
 8009eee:	4691      	mov	r9, r2
 8009ef0:	461f      	mov	r7, r3
 8009ef2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 8009ef6:	f7f9 ff75 	bl	8003de4 <HAL_GetTick>
  if (NULL == pData)
 8009efa:	2d00      	cmp	r5, #0
 8009efc:	d065      	beq.n	8009fca <HAL_SD_ReadBlocks+0xe6>
  if (hsd->State == HAL_SD_STATE_READY)
 8009efe:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d152      	bne.n	8009fac <HAL_SD_ReadBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f06:	eb09 0307 	add.w	r3, r9, r7
 8009f0a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f0c:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f0e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f10:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f12:	d85f      	bhi.n	8009fd4 <HAL_SD_ReadBlocks+0xf0>
    hsd->State = HAL_SD_STATE_BUSY;
 8009f14:	2303      	movs	r3, #3
 8009f16:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8009f18:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f1a:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8009f1e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 8009f24:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f26:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f28:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f2a:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009f2e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f32:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8009f36:	bf18      	it	ne
 8009f38:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f3c:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009f3e:	027b      	lsls	r3, r7, #9
 8009f40:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f42:	2390      	movs	r3, #144	@ 0x90
 8009f44:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f48:	f001 f976 	bl	800b238 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009f4c:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 8009f4e:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009f50:	68c3      	ldr	r3, [r0, #12]
 8009f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f56:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8009f58:	d931      	bls.n	8009fbe <HAL_SD_ReadBlocks+0xda>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f5a:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009f5c:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f60:	f001 fad8 	bl	800b514 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f64:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d139      	bne.n	8009fde <HAL_SD_ReadBlocks+0xfa>
    dataremaining = config.DataLength;
 8009f6a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009f6e:	e005      	b.n	8009f7c <HAL_SD_ReadBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009f70:	f7f9 ff38 	bl	8003de4 <HAL_GetTick>
 8009f74:	1b82      	subs	r2, r0, r6
 8009f76:	4542      	cmp	r2, r8
 8009f78:	d25c      	bcs.n	800a034 <HAL_SD_ReadBlocks+0x150>
 8009f7a:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009f7c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009f7e:	4610      	mov	r0, r2
 8009f80:	f413 7f95 	tst.w	r3, #298	@ 0x12a
 8009f84:	d136      	bne.n	8009ff4 <HAL_SD_ReadBlocks+0x110>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009f86:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009f88:	041a      	lsls	r2, r3, #16
 8009f8a:	d5f1      	bpl.n	8009f70 <HAL_SD_ReadBlocks+0x8c>
 8009f8c:	f1b9 0f1f 	cmp.w	r9, #31
 8009f90:	d9ee      	bls.n	8009f70 <HAL_SD_ReadBlocks+0x8c>
 8009f92:	f105 0a20 	add.w	sl, r5, #32
 8009f96:	e000      	b.n	8009f9a <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	f001 f933 	bl	800b204 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009f9e:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8009fa2:	45aa      	cmp	sl, r5
 8009fa4:	d1f8      	bne.n	8009f98 <HAL_SD_ReadBlocks+0xb4>
        dataremaining -= 32U;
 8009fa6:	f1a9 0920 	sub.w	r9, r9, #32
 8009faa:	e7e1      	b.n	8009f70 <HAL_SD_ReadBlocks+0x8c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fb2:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	b006      	add	sp, #24
 8009fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009fbe:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009fc0:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009fc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009fc4:	f001 f9fa 	bl	800b3bc <SDMMC_CmdReadSingleBlock>
 8009fc8:	e7cc      	b.n	8009f64 <HAL_SD_ReadBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fd0:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8009fd2:	e7ef      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009fda:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8009fdc:	e7ea      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fde:	4b31      	ldr	r3, [pc, #196]	@ (800a0a4 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8009fe0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fe2:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009fe6:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 8009fe8:	4303      	orrs	r3, r0
 8009fea:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009fec:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009ff0:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8009ff2:	e7df      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009ff4:	68d3      	ldr	r3, [r2, #12]
 8009ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ffa:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009ffc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009ffe:	05db      	lsls	r3, r3, #23
 800a000:	d501      	bpl.n	800a006 <HAL_SD_ReadBlocks+0x122>
 800a002:	2f01      	cmp	r7, #1
 800a004:	d824      	bhi.n	800a050 <HAL_SD_ReadBlocks+0x16c>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a006:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a008:	f013 0308 	ands.w	r3, r3, #8
 800a00c:	d133      	bne.n	800a076 <HAL_SD_ReadBlocks+0x192>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a00e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a010:	f012 0202 	ands.w	r2, r2, #2
 800a014:	d124      	bne.n	800a060 <HAL_SD_ReadBlocks+0x17c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a016:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a018:	f013 0320 	ands.w	r3, r3, #32
 800a01c:	d037      	beq.n	800a08e <HAL_SD_ReadBlocks+0x1aa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a01e:	4b21      	ldr	r3, [pc, #132]	@ (800a0a4 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800a020:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a022:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a026:	f043 0320 	orr.w	r3, r3, #32
 800a02a:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a02c:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a030:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800a032:	e7bf      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a034:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800a036:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a038:	481a      	ldr	r0, [pc, #104]	@ (800a0a4 <HAL_SD_ReadBlocks+0x1c0>)
        hsd->Context = SD_CONTEXT_NONE;
 800a03a:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a03c:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a03e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a040:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a044:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800a048:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a04c:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a04e:	e7b2      	b.n	8009fb6 <HAL_SD_ReadBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a050:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a052:	2b03      	cmp	r3, #3
 800a054:	d0d7      	beq.n	800a006 <HAL_SD_ReadBlocks+0x122>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a056:	f001 fc61 	bl	800b91c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a05a:	b9f0      	cbnz	r0, 800a09a <HAL_SD_ReadBlocks+0x1b6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	e7d2      	b.n	800a006 <HAL_SD_ReadBlocks+0x122>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a060:	4a10      	ldr	r2, [pc, #64]	@ (800a0a4 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800a062:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a064:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a066:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a068:	f042 0202 	orr.w	r2, r2, #2
 800a06c:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a06e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a072:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800a074:	e79e      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a076:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a4 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800a078:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a07a:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a07c:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a07e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a080:	f043 0308 	orr.w	r3, r3, #8
 800a084:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a086:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a08a:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800a08c:	e792      	b.n	8009fb4 <HAL_SD_ReadBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a08e:	4906      	ldr	r1, [pc, #24]	@ (800a0a8 <HAL_SD_ReadBlocks+0x1c4>)
    hsd->State = HAL_SD_STATE_READY;
 800a090:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a092:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a094:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800a098:	e78d      	b.n	8009fb6 <HAL_SD_ReadBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a09a:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800a09c:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a09e:	4a01      	ldr	r2, [pc, #4]	@ (800a0a4 <HAL_SD_ReadBlocks+0x1c0>)
 800a0a0:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0a2:	e79f      	b.n	8009fe4 <HAL_SD_ReadBlocks+0x100>
 800a0a4:	1fe00fff 	.word	0x1fe00fff
 800a0a8:	18000f3a 	.word	0x18000f3a

0800a0ac <HAL_SD_WriteBlocks>:
{
 800a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b0:	460d      	mov	r5, r1
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	4691      	mov	r9, r2
 800a0b8:	461f      	mov	r7, r3
 800a0ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a0be:	f7f9 fe91 	bl	8003de4 <HAL_GetTick>
  if (NULL == pData)
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	d064      	beq.n	800a190 <HAL_SD_WriteBlocks+0xe4>
  if (hsd->State == HAL_SD_STATE_READY)
 800a0c6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d152      	bne.n	800a174 <HAL_SD_WriteBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0ce:	eb09 0307 	add.w	r3, r9, r7
 800a0d2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0d4:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0d6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0d8:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0da:	d85e      	bhi.n	800a19a <HAL_SD_WriteBlocks+0xee>
    hsd->State = HAL_SD_STATE_BUSY;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 800a0e0:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800a0e2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 800a0e8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0ea:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0ec:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a0ee:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0f2:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a0f6:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0f8:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 800a0fc:	bf18      	it	ne
 800a0fe:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a102:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a104:	027b      	lsls	r3, r7, #9
 800a106:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a108:	2390      	movs	r3, #144	@ 0x90
 800a10a:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a10c:	f001 f894 	bl	800b238 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a110:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 800a112:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a114:	4649      	mov	r1, r9
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a116:	68c3      	ldr	r3, [r0, #12]
 800a118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a11c:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 800a11e:	d932      	bls.n	800a186 <HAL_SD_WriteBlocks+0xda>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a120:	2320      	movs	r3, #32
 800a122:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a124:	f001 fb4e 	bl	800b7c4 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a128:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d13a      	bne.n	800a1a4 <HAL_SD_WriteBlocks+0xf8>
    dataremaining = config.DataLength;
 800a12e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a132:	e005      	b.n	800a140 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a134:	f7f9 fe56 	bl	8003de4 <HAL_GetTick>
 800a138:	1b82      	subs	r2, r0, r6
 800a13a:	4542      	cmp	r2, r8
 800a13c:	d25d      	bcs.n	800a1fa <HAL_SD_WriteBlocks+0x14e>
 800a13e:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a140:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800a142:	4610      	mov	r0, r2
 800a144:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
 800a148:	d137      	bne.n	800a1ba <HAL_SD_WriteBlocks+0x10e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a14a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800a14c:	045a      	lsls	r2, r3, #17
 800a14e:	d5f1      	bpl.n	800a134 <HAL_SD_WriteBlocks+0x88>
 800a150:	f1b9 0f1f 	cmp.w	r9, #31
 800a154:	d9ee      	bls.n	800a134 <HAL_SD_WriteBlocks+0x88>
 800a156:	f105 0a20 	add.w	sl, r5, #32
 800a15a:	e000      	b.n	800a15e <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a15c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a15e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a162:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a164:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a166:	f001 f851 	bl	800b20c <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800a16a:	4555      	cmp	r5, sl
 800a16c:	d1f6      	bne.n	800a15c <HAL_SD_WriteBlocks+0xb0>
        dataremaining -= 32U;
 800a16e:	f1a9 0920 	sub.w	r9, r9, #32
 800a172:	e7df      	b.n	800a134 <HAL_SD_WriteBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a176:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a17a:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
}
 800a17e:	4618      	mov	r0, r3
 800a180:	b008      	add	sp, #32
 800a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a186:	2310      	movs	r3, #16
 800a188:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a18a:	f001 fa6f 	bl	800b66c <SDMMC_CmdWriteSingleBlock>
 800a18e:	e7cb      	b.n	800a128 <HAL_SD_WriteBlocks+0x7c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a192:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a196:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800a198:	e7f0      	b.n	800a17c <HAL_SD_WriteBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a19a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a19c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a1a0:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800a1a2:	e7eb      	b.n	800a17c <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a4:	4b30      	ldr	r3, [pc, #192]	@ (800a268 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800a1a6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a8:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a1aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a1ac:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 800a1ae:	4303      	orrs	r3, r0
 800a1b0:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a1b2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a1b6:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800a1b8:	e7e0      	b.n	800a17c <HAL_SD_WriteBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a1ba:	68d3      	ldr	r3, [r2, #12]
 800a1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1c0:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a1c2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800a1c4:	05db      	lsls	r3, r3, #23
 800a1c6:	d501      	bpl.n	800a1cc <HAL_SD_WriteBlocks+0x120>
 800a1c8:	2f01      	cmp	r7, #1
 800a1ca:	d822      	bhi.n	800a212 <HAL_SD_WriteBlocks+0x166>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a1cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a1ce:	f013 0308 	ands.w	r3, r3, #8
 800a1d2:	d131      	bne.n	800a238 <HAL_SD_WriteBlocks+0x18c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a1d4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a1d6:	f012 0202 	ands.w	r2, r2, #2
 800a1da:	d122      	bne.n	800a222 <HAL_SD_WriteBlocks+0x176>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a1dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a1de:	f013 0310 	ands.w	r3, r3, #16
 800a1e2:	d035      	beq.n	800a250 <HAL_SD_WriteBlocks+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1e4:	4b20      	ldr	r3, [pc, #128]	@ (800a268 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800a1e6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1e8:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a1ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1ec:	f043 0310 	orr.w	r3, r3, #16
 800a1f0:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a1f2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a1f6:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800a1f8:	e7c0      	b.n	800a17c <HAL_SD_WriteBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1fa:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800a1fc:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1fe:	481a      	ldr	r0, [pc, #104]	@ (800a268 <HAL_SD_WriteBlocks+0x1bc>)
        hsd->Context = SD_CONTEXT_NONE;
 800a200:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a202:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a206:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800a20a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a20e:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a210:	e7b5      	b.n	800a17e <HAL_SD_WriteBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a212:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a214:	2b03      	cmp	r3, #3
 800a216:	d0d9      	beq.n	800a1cc <HAL_SD_WriteBlocks+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a218:	f001 fb80 	bl	800b91c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a21c:	b9f0      	cbnz	r0, 800a25c <HAL_SD_WriteBlocks+0x1b0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a21e:	6820      	ldr	r0, [r4, #0]
 800a220:	e7d4      	b.n	800a1cc <HAL_SD_WriteBlocks+0x120>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a222:	4a11      	ldr	r2, [pc, #68]	@ (800a268 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800a224:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a226:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a228:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a22a:	f042 0202 	orr.w	r2, r2, #2
 800a22e:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a230:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a234:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800a236:	e7a1      	b.n	800a17c <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a238:	4b0b      	ldr	r3, [pc, #44]	@ (800a268 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800a23a:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a23c:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a23e:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a240:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a242:	f043 0308 	orr.w	r3, r3, #8
 800a246:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a248:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a24c:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800a24e:	e795      	b.n	800a17c <HAL_SD_WriteBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a250:	4906      	ldr	r1, [pc, #24]	@ (800a26c <HAL_SD_WriteBlocks+0x1c0>)
    hsd->State = HAL_SD_STATE_READY;
 800a252:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a254:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a256:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800a25a:	e790      	b.n	800a17e <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a25c:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800a25e:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a260:	4a01      	ldr	r2, [pc, #4]	@ (800a268 <HAL_SD_WriteBlocks+0x1bc>)
 800a262:	639a      	str	r2, [r3, #56]	@ 0x38
 800a264:	e7a1      	b.n	800a1aa <HAL_SD_WriteBlocks+0xfe>
 800a266:	bf00      	nop
 800a268:	1fe00fff 	.word	0x1fe00fff
 800a26c:	18000f3a 	.word	0x18000f3a

0800a270 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a270:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 800a272:	4603      	mov	r3, r0
 800a274:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a276:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a27a:	0f94      	lsrs	r4, r2, #30
 800a27c:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a27e:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a282:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a284:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a288:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a28a:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a28c:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a290:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a292:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a294:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a296:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a298:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a29a:	0d14      	lsrs	r4, r2, #20
 800a29c:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a29e:	f3c2 4403 	ubfx	r4, r2, #16, #4
 800a2a2:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a2a4:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800a2a8:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2aa:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800a2ae:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2b0:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800a2b4:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2b6:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800a2ba:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2bc:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800a2be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d16f      	bne.n	800a3a4 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2c4:	f640 74fc 	movw	r4, #4092	@ 0xffc
 800a2c8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800a2ca:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a2ce:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a2d2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800a2d6:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a2d8:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a2dc:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a2de:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800a2e2:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a2e4:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a2e8:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a2ea:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a2ee:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a2f0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a2f2:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a2f4:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a2f6:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a2f8:	f002 0207 	and.w	r2, r2, #7
 800a2fc:	3202      	adds	r2, #2
 800a2fe:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a300:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a302:	649c      	str	r4, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a304:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a308:	f00c 0c0f 	and.w	ip, ip, #15
 800a30c:	fa02 f20c 	lsl.w	r2, r2, ip
 800a310:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a312:	0a52      	lsrs	r2, r2, #9
 800a314:	fb04 f202 	mul.w	r2, r4, r2
 800a318:	651a      	str	r2, [r3, #80]	@ 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a31a:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800a31e:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800a322:	655c      	str	r4, [r3, #84]	@ 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a324:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a328:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a32a:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a32e:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 800a330:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a332:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a336:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a338:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a33c:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a33e:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a342:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a344:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a348:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a34a:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a34e:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a350:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a354:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a358:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 800a35c:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a360:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a364:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a368:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a36c:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a370:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a374:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a378:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a37c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a380:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a384:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a388:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a38c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a390:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 800a394:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a396:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800a39a:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 800a39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a2:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3a4:	2801      	cmp	r0, #1
 800a3a6:	d10f      	bne.n	800a3c8 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a3a8:	0412      	lsls	r2, r2, #16
 800a3aa:	6e58      	ldr	r0, [r3, #100]	@ 0x64
    hsd->SdCard.BlockSize = 512U;
 800a3ac:	f44f 7400 	mov.w	r4, #512	@ 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a3b0:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800a3b4:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800a3b8:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3ba:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800a3bc:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3be:	3201      	adds	r2, #1
 800a3c0:	0292      	lsls	r2, r2, #10
 800a3c2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3c4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a3c6:	e7a8      	b.n	800a31a <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3c8:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a3ca:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3cc:	4805      	ldr	r0, [pc, #20]	@ (800a3e4 <HAL_SD_GetCardCSD+0x174>)
 800a3ce:	6390      	str	r0, [r2, #56]	@ 0x38
    return HAL_ERROR;
 800a3d0:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3d4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a3d8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a3da:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
}
 800a3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	1fe00fff 	.word	0x1fe00fff

0800a3e8 <HAL_SD_InitCard>:
{
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a3ea:	2200      	movs	r2, #0
{
 800a3ec:	b095      	sub	sp, #84	@ 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a3ee:	2300      	movs	r3, #0
{
 800a3f0:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a3f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a400:	f7ff f8ea 	bl	80095d8 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800a404:	b948      	cbnz	r0, 800a41a <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 800a406:	2201      	movs	r2, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a408:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800a40c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a410:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800a412:	2501      	movs	r5, #1
}
 800a414:	4628      	mov	r0, r5
 800a416:	b015      	add	sp, #84	@ 0x54
 800a418:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a41a:	0a06      	lsrs	r6, r0, #8
 800a41c:	4b8a      	ldr	r3, [pc, #552]	@ (800a648 <HAL_SD_InitCard+0x260>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800a41e:	aa07      	add	r2, sp, #28
 800a420:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a422:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800a426:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a428:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800a42a:	9608      	str	r6, [sp, #32]
 800a42c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a430:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a434:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a436:	6820      	ldr	r0, [r4, #0]
 800a438:	f000 fec8 	bl	800b1cc <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a43c:	6820      	ldr	r0, [r4, #0]
 800a43e:	f000 feeb 	bl	800b218 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800a442:	4b82      	ldr	r3, [pc, #520]	@ (800a64c <HAL_SD_InitCard+0x264>)
 800a444:	429d      	cmp	r5, r3
 800a446:	d902      	bls.n	800a44e <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a448:	0076      	lsls	r6, r6, #1
 800a44a:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a44e:	4880      	ldr	r0, [pc, #512]	@ (800a650 <HAL_SD_InitCard+0x268>)
 800a450:	fbb0 f0f5 	udiv	r0, r0, r5
 800a454:	3001      	adds	r0, #1
 800a456:	f7f9 fccb 	bl	8003df0 <HAL_Delay>
  __IO uint32_t count = 0U;
 800a45a:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a45c:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800a45e:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a460:	f001 fc0c 	bl	800bc7c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a464:	4605      	mov	r5, r0
 800a466:	bb70      	cbnz	r0, 800a4c6 <HAL_SD_InitCard+0xde>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a468:	6820      	ldr	r0, [r4, #0]
 800a46a:	f001 fc33 	bl	800bcd4 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a46e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800a472:	f000 80ce 	beq.w	800a612 <HAL_SD_InitCard+0x22a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a476:	2301      	movs	r3, #1
 800a478:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a47a:	2100      	movs	r1, #0
 800a47c:	6820      	ldr	r0, [r4, #0]
 800a47e:	f001 fc69 	bl	800bd54 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a482:	bb38      	cbnz	r0, 800a4d4 <HAL_SD_InitCard+0xec>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a484:	9b03      	ldr	r3, [sp, #12]
 800a486:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 800a48a:	42b3      	cmp	r3, r6
 800a48c:	f200 80d3 	bhi.w	800a636 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a490:	4f70      	ldr	r7, [pc, #448]	@ (800a654 <HAL_SD_InitCard+0x26c>)
 800a492:	e010      	b.n	800a4b6 <HAL_SD_InitCard+0xce>
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	f001 fd09 	bl	800beac <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a49a:	4601      	mov	r1, r0
 800a49c:	b9d0      	cbnz	r0, 800a4d4 <HAL_SD_InitCard+0xec>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	f000 fec6 	bl	800b230 <SDMMC_GetResponse>
    count++;
 800a4a4:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a4a6:	2800      	cmp	r0, #0
    count++;
 800a4a8:	f103 0301 	add.w	r3, r3, #1
 800a4ac:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	db13      	blt.n	800a4da <HAL_SD_InitCard+0xf2>
 800a4b2:	42b3      	cmp	r3, r6
 800a4b4:	d811      	bhi.n	800a4da <HAL_SD_InitCard+0xf2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	f001 fc4b 	bl	800bd54 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a4be:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d0e7      	beq.n	800a494 <HAL_SD_InitCard+0xac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a4c4:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_READY;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a4cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4ce:	432b      	orrs	r3, r5
 800a4d0:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800a4d2:	e79e      	b.n	800a412 <HAL_SD_InitCard+0x2a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800a4d8:	e7f5      	b.n	800a4c6 <HAL_SD_InitCard+0xde>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a4da:	9a03      	ldr	r2, [sp, #12]
 800a4dc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	f200 80ac 	bhi.w	800a63e <HAL_SD_InitCard+0x256>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a4e6:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800a4ea:	bf18      	it	ne
 800a4ec:	2501      	movne	r5, #1
  uint16_t sd_rca = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63a5      	str	r5, [r4, #56]	@ 0x38
 800a4f2:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800a4f6:	f7f9 fc75 	bl	8003de4 <HAL_GetTick>
 800a4fa:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a4fc:	6820      	ldr	r0, [r4, #0]
 800a4fe:	f000 fe93 	bl	800b228 <SDMMC_GetPowerState>
 800a502:	b348      	cbz	r0, 800a558 <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a504:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a506:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d12e      	bne.n	800a56a <HAL_SD_InitCard+0x182>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a50c:	2104      	movs	r1, #4
 800a50e:	f000 fe8f 	bl	800b230 <SDMMC_GetResponse>
 800a512:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a514:	a909      	add	r1, sp, #36	@ 0x24
 800a516:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a518:	0d1b      	lsrs	r3, r3, #20
 800a51a:	6423      	str	r3, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a51c:	f7ff fea8 	bl	800a270 <HAL_SD_GetCardCSD>
 800a520:	4605      	mov	r5, r0
 800a522:	2800      	cmp	r0, #0
 800a524:	f040 8081 	bne.w	800a62a <HAL_SD_InitCard+0x242>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a528:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a52a:	6820      	ldr	r0, [r4, #0]
 800a52c:	0409      	lsls	r1, r1, #16
 800a52e:	f001 faf9 	bl	800bb24 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a532:	b998      	cbnz	r0, 800a55c <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a534:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a538:	6820      	ldr	r0, [r4, #0]
 800a53a:	f000 fe93 	bl	800b264 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a53e:	2800      	cmp	r0, #0
 800a540:	f43f af68 	beq.w	800a414 <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a544:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a546:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a548:	4943      	ldr	r1, [pc, #268]	@ (800a658 <HAL_SD_InitCard+0x270>)
 800a54a:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a54c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a54e:	4303      	orrs	r3, r0
 800a550:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a552:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800a556:	e75c      	b.n	800a412 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a558:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a562:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a564:	4303      	orrs	r3, r0
 800a566:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800a568:	e753      	b.n	800a412 <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a56a:	f001 fe2d 	bl	800c1c8 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a56e:	2800      	cmp	r0, #0
 800a570:	d1f4      	bne.n	800a55c <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a572:	4601      	mov	r1, r0
 800a574:	6820      	ldr	r0, [r4, #0]
 800a576:	f000 fe5b 	bl	800b230 <SDMMC_GetResponse>
 800a57a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a57c:	2104      	movs	r1, #4
 800a57e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a580:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a582:	f000 fe55 	bl	800b230 <SDMMC_GetResponse>
 800a586:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a588:	2108      	movs	r1, #8
 800a58a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a58c:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a58e:	f000 fe4f 	bl	800b230 <SDMMC_GetResponse>
 800a592:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a594:	210c      	movs	r1, #12
 800a596:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a598:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a59a:	f000 fe49 	bl	800b230 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a59e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a5a0:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d04e      	beq.n	800a644 <HAL_SD_InitCard+0x25c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a5a6:	f241 3687 	movw	r6, #4999	@ 0x1387
 800a5aa:	e008      	b.n	800a5be <HAL_SD_InitCard+0x1d6>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a5ac:	f001 fe8a 	bl	800c2c4 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1d3      	bne.n	800a55c <HAL_SD_InitCard+0x174>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a5b4:	f7f9 fc16 	bl	8003de4 <HAL_GetTick>
 800a5b8:	1b43      	subs	r3, r0, r5
 800a5ba:	42b3      	cmp	r3, r6
 800a5bc:	d838      	bhi.n	800a630 <HAL_SD_InitCard+0x248>
    while (sd_rca == 0U)
 800a5be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a5c2:	f10d 010a 	add.w	r1, sp, #10
 800a5c6:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d0ef      	beq.n	800a5ac <HAL_SD_InitCard+0x1c4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a5ce:	2a03      	cmp	r2, #3
 800a5d0:	d09c      	beq.n	800a50c <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5d2:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 800a5d4:	6463      	str	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5d6:	f001 fe35 	bl	800c244 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d1be      	bne.n	800a55c <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5de:	4601      	mov	r1, r0
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	f000 fe25 	bl	800b230 <SDMMC_GetResponse>
 800a5e6:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5e8:	2104      	movs	r1, #4
 800a5ea:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5ec:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5ee:	f000 fe1f 	bl	800b230 <SDMMC_GetResponse>
 800a5f2:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a5f4:	2108      	movs	r1, #8
 800a5f6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5f8:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a5fa:	f000 fe19 	bl	800b230 <SDMMC_GetResponse>
 800a5fe:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a600:	210c      	movs	r1, #12
 800a602:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a604:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a606:	f000 fe13 	bl	800b230 <SDMMC_GetResponse>
 800a60a:	4603      	mov	r3, r0
 800a60c:	6820      	ldr	r0, [r4, #0]
 800a60e:	66a3      	str	r3, [r4, #104]	@ 0x68
 800a610:	e77c      	b.n	800a50c <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a612:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a614:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a616:	f001 fb31 	bl	800bc7c <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f47f af52 	bne.w	800a4c4 <HAL_SD_InitCard+0xdc>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a620:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a622:	2b01      	cmp	r3, #1
 800a624:	f47f af2e 	bne.w	800a484 <HAL_SD_InitCard+0x9c>
 800a628:	e727      	b.n	800a47a <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a62a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800a62e:	e795      	b.n	800a55c <HAL_SD_InitCard+0x174>
        return HAL_SD_ERROR_TIMEOUT;
 800a630:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800a634:	e792      	b.n	800a55c <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	42b3      	cmp	r3, r6
 800a63a:	f67f af58 	bls.w	800a4ee <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a63e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800a642:	e740      	b.n	800a4c6 <HAL_SD_InitCard+0xde>
 800a644:	6820      	ldr	r0, [r4, #0]
 800a646:	e761      	b.n	800a50c <HAL_SD_InitCard+0x124>
 800a648:	014f8b59 	.word	0x014f8b59
 800a64c:	000c34ff 	.word	0x000c34ff
 800a650:	00012110 	.word	0x00012110
 800a654:	c1100000 	.word	0xc1100000
 800a658:	1fe00fff 	.word	0x1fe00fff

0800a65c <HAL_SD_GetCardStatus>:
{
 800a65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 800a660:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 800a664:	b097      	sub	sp, #92	@ 0x5c
  if (hsd->State == HAL_SD_STATE_BUSY)
 800a666:	2b03      	cmp	r3, #3
 800a668:	d033      	beq.n	800a6d2 <HAL_SD_GetCardStatus+0x76>
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a66a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a66c:	460d      	mov	r5, r1
 800a66e:	f7f9 fbb9 	bl	8003de4 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a672:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800a674:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a676:	6820      	ldr	r0, [r4, #0]
 800a678:	f000 fdda 	bl	800b230 <SDMMC_GetResponse>
 800a67c:	0182      	lsls	r2, r0, #6
 800a67e:	d410      	bmi.n	800a6a2 <HAL_SD_GetCardStatus+0x46>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a680:	2140      	movs	r1, #64	@ 0x40
 800a682:	6820      	ldr	r0, [r4, #0]
 800a684:	f000 fdee 	bl	800b264 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a688:	4603      	mov	r3, r0
 800a68a:	b930      	cbnz	r0, 800a69a <HAL_SD_GetCardStatus+0x3e>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a68c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a68e:	6820      	ldr	r0, [r4, #0]
 800a690:	0409      	lsls	r1, r1, #16
 800a692:	f001 fb5f 	bl	800bd54 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a696:	4603      	mov	r3, r0
 800a698:	b300      	cbz	r0, 800a6dc <HAL_SD_GetCardStatus+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a69a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a69c:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a69e:	6362      	str	r2, [r4, #52]	@ 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6a0:	e002      	b.n	800a6a8 <HAL_SD_GetCardStatus+0x4c>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a6a2:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a6a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6a8:	4a54      	ldr	r2, [pc, #336]	@ (800a7fc <HAL_SD_GetCardStatus+0x1a0>)
    hsd->State = HAL_SD_STATE_READY;
 800a6aa:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6ac:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800a6ae:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 800a6b0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6b6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a6be:	f000 fdd1 	bl	800b264 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6c2:	b138      	cbz	r0, 800a6d4 <HAL_SD_GetCardStatus+0x78>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6c4:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a6c6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6c8:	494c      	ldr	r1, [pc, #304]	@ (800a7fc <HAL_SD_GetCardStatus+0x1a0>)
 800a6ca:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a6cc:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6ce:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800a6d2:	2601      	movs	r6, #1
}
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	b017      	add	sp, #92	@ 0x5c
 800a6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  config.DataLength    = 64U;
 800a6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e0:	2340      	movs	r3, #64	@ 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6e2:	4669      	mov	r1, sp
 800a6e4:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800a6e6:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a6ea:	2260      	movs	r2, #96	@ 0x60
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6fa:	f000 fd9d 	bl	800b238 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a6fe:	6820      	ldr	r0, [r4, #0]
 800a700:	f001 feec 	bl	800c4dc <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a704:	4603      	mov	r3, r0
 800a706:	2800      	cmp	r0, #0
 800a708:	d1c7      	bne.n	800a69a <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800a70a:	ae06      	add	r6, sp, #24
 800a70c:	e004      	b.n	800a718 <HAL_SD_GetCardStatus+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a70e:	f7f9 fb69 	bl	8003de4 <HAL_GetTick>
 800a712:	1bc0      	subs	r0, r0, r7
 800a714:	3001      	adds	r0, #1
 800a716:	d012      	beq.n	800a73e <HAL_SD_GetCardStatus+0xe2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a718:	6820      	ldr	r0, [r4, #0]
 800a71a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a71c:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a720:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a722:	d110      	bne.n	800a746 <HAL_SD_GetCardStatus+0xea>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a724:	041b      	lsls	r3, r3, #16
 800a726:	d5f2      	bpl.n	800a70e <HAL_SD_GetCardStatus+0xb2>
 800a728:	f106 0820 	add.w	r8, r6, #32
 800a72c:	e000      	b.n	800a730 <HAL_SD_GetCardStatus+0xd4>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a72e:	6820      	ldr	r0, [r4, #0]
 800a730:	f000 fd68 	bl	800b204 <SDMMC_ReadFIFO>
 800a734:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800a738:	4546      	cmp	r6, r8
 800a73a:	d1f8      	bne.n	800a72e <HAL_SD_GetCardStatus+0xd2>
 800a73c:	e7e7      	b.n	800a70e <HAL_SD_GetCardStatus+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a73e:	6820      	ldr	r0, [r4, #0]
 800a740:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a744:	e7b0      	b.n	800a6a8 <HAL_SD_GetCardStatus+0x4c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a746:	0719      	lsls	r1, r3, #28
 800a748:	d451      	bmi.n	800a7ee <HAL_SD_GetCardStatus+0x192>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a74a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a74c:	079a      	lsls	r2, r3, #30
 800a74e:	d450      	bmi.n	800a7f2 <HAL_SD_GetCardStatus+0x196>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a750:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a752:	069b      	lsls	r3, r3, #26
 800a754:	d50a      	bpl.n	800a76c <HAL_SD_GetCardStatus+0x110>
 800a756:	e04e      	b.n	800a7f6 <HAL_SD_GetCardStatus+0x19a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a758:	f000 fd54 	bl	800b204 <SDMMC_ReadFIFO>
 800a75c:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a760:	f7f9 fb40 	bl	8003de4 <HAL_GetTick>
 800a764:	1bc0      	subs	r0, r0, r7
 800a766:	3001      	adds	r0, #1
 800a768:	d0e9      	beq.n	800a73e <HAL_SD_GetCardStatus+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a76a:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a76c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a76e:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800a772:	d1f1      	bne.n	800a758 <HAL_SD_GetCardStatus+0xfc>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a774:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a776:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a778:	4a21      	ldr	r2, [pc, #132]	@ (800a800 <HAL_SD_GetCardStatus+0x1a4>)
 800a77a:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a77c:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a77e:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a782:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a786:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a78a:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a78e:	fa5f f883 	uxtb.w	r8, r3
 800a792:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a796:	fa1f f982 	uxth.w	r9, r2
 800a79a:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a79c:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a7a0:	f3c1 1881 	ubfx	r8, r1, #6, #2
 800a7a4:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a7a8:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a7ac:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a7b0:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a7b4:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a7b6:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a7ba:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a7be:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a7c0:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800a7c4:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a7c6:	f3cc 5203 	ubfx	r2, ip, #20, #4
 800a7ca:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a7cc:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a7d0:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a7d2:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a7d4:	f3c3 2201 	ubfx	r2, r3, #8, #2
 800a7d8:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a7da:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a7de:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a7e2:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a7e4:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a7e6:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 800a7ea:	74ab      	strb	r3, [r5, #18]
 800a7ec:	e765      	b.n	800a6ba <HAL_SD_GetCardStatus+0x5e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	e75a      	b.n	800a6a8 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e758      	b.n	800a6a8 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800a7f6:	2320      	movs	r3, #32
 800a7f8:	e756      	b.n	800a6a8 <HAL_SD_GetCardStatus+0x4c>
 800a7fa:	bf00      	nop
 800a7fc:	1fe00fff 	.word	0x1fe00fff
 800a800:	18000f3a 	.word	0x18000f3a

0800a804 <HAL_SD_GetCardInfo>:
{
 800a804:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a806:	e9d0 e30e 	ldrd	lr, r3, [r0, #56]	@ 0x38
 800a80a:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
 800a80e:	e9d0 5412 	ldrd	r5, r4, [r0, #72]	@ 0x48
 800a812:	e9d0 2014 	ldrd	r2, r0, [r0, #80]	@ 0x50
 800a816:	e9c1 e300 	strd	lr, r3, [r1]
 800a81a:	e9c1 2006 	strd	r2, r0, [r1, #24]
 800a81e:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 800a822:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a824:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 800a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82a:	bf00      	nop

0800a82c <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800a82c:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a82e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a830:	4293      	cmp	r3, r2
{
 800a832:	b530      	push	{r4, r5, lr}
 800a834:	4604      	mov	r4, r0
 800a836:	b089      	sub	sp, #36	@ 0x24
 800a838:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800a83a:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a83e:	d041      	beq.n	800a8c4 <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a840:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800a844:	d03e      	beq.n	800a8c4 <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a846:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800a84a:	d07e      	beq.n	800a94a <HAL_SD_ConfigWideBusOperation+0x11e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a84c:	2900      	cmp	r1, #0
 800a84e:	d05d      	beq.n	800a90c <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a850:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a852:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a856:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d139      	bne.n	800a8d2 <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a85e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a862:	2100      	movs	r1, #0
 800a864:	f7fe feb8 	bl	80095d8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800a868:	2800      	cmp	r0, #0
 800a86a:	d048      	beq.n	800a8fe <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a86c:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a86e:	4b50      	ldr	r3, [pc, #320]	@ (800a9b0 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a870:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800a872:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a874:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a876:	fba3 5300 	umull	r5, r3, r3, r0
 800a87a:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a87c:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a87e:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a882:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a884:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a888:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a88a:	d20e      	bcs.n	800a8aa <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a88c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800a88e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a892:	d00a      	beq.n	800a8aa <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a894:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a898:	d079      	beq.n	800a98e <HAL_SD_ConfigWideBusOperation+0x162>
        if (hsd->Init.ClockDiv == 0U)
 800a89a:	b112      	cbz	r2, 800a8a2 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a89c:	0053      	lsls	r3, r2, #1
 800a89e:	fbb0 f0f3 	udiv	r0, r0, r3
 800a8a2:	4b44      	ldr	r3, [pc, #272]	@ (800a9b4 <HAL_SD_ConfigWideBusOperation+0x188>)
 800a8a4:	4298      	cmp	r0, r3
 800a8a6:	bf88      	it	hi
 800a8a8:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800a8aa:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a8ac:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800a8ae:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a8b0:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800a8b2:	c903      	ldmia	r1, {r0, r1}
 800a8b4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a8b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8ba:	6820      	ldr	r0, [r4, #0]
 800a8bc:	f000 fc86 	bl	800b1cc <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a8c0:	6820      	ldr	r0, [r4, #0]
 800a8c2:	e00a      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8ca:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a8cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d0c5      	beq.n	800a85e <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8d2:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 800a8d4:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8d6:	4b38      	ldr	r3, [pc, #224]	@ (800a9b8 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a8d8:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a8da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a8de:	f000 fcc1 	bl	800b264 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8e2:	b130      	cbz	r0, 800a8f2 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8e4:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a8e6:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8e8:	4a33      	ldr	r2, [pc, #204]	@ (800a9b8 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a8ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a8ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ee:	4303      	orrs	r3, r0
 800a8f0:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 800a8f2:	2301      	movs	r3, #1
}
 800a8f4:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a8f6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 800a8fa:	b009      	add	sp, #36	@ 0x24
 800a8fc:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a8fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 800a900:	2501      	movs	r5, #1
      (void)SDMMC_Init(hsd->Instance, Init);
 800a902:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a904:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a908:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 800a90a:	e7e6      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0xae>
  uint32_t scr[2U] = {0UL, 0UL};
 800a90c:	2200      	movs	r2, #0
 800a90e:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a910:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a912:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a916:	f000 fc8b 	bl	800b230 <SDMMC_GetResponse>
 800a91a:	0182      	lsls	r2, r0, #6
 800a91c:	d434      	bmi.n	800a988 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800a91e:	a902      	add	r1, sp, #8
 800a920:	4620      	mov	r0, r4
 800a922:	f7ff fa6d 	bl	8009e00 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a926:	b960      	cbnz	r0, 800a942 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a928:	9b03      	ldr	r3, [sp, #12]
 800a92a:	03db      	lsls	r3, r3, #15
 800a92c:	d535      	bpl.n	800a99a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a92e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a930:	6820      	ldr	r0, [r4, #0]
 800a932:	0409      	lsls	r1, r1, #16
 800a934:	f001 fa0e 	bl	800bd54 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a938:	b918      	cbnz	r0, 800a942 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a93a:	4601      	mov	r1, r0
 800a93c:	6820      	ldr	r0, [r4, #0]
 800a93e:	f001 faf1 	bl	800bf24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a942:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a944:	4303      	orrs	r3, r0
 800a946:	6363      	str	r3, [r4, #52]	@ 0x34
 800a948:	e7c0      	b.n	800a8cc <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 800a94a:	2200      	movs	r2, #0
 800a94c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a94e:	2100      	movs	r1, #0
 800a950:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a952:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a956:	f000 fc6b 	bl	800b230 <SDMMC_GetResponse>
 800a95a:	0180      	lsls	r0, r0, #6
 800a95c:	d414      	bmi.n	800a988 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800a95e:	a902      	add	r1, sp, #8
 800a960:	4620      	mov	r0, r4
 800a962:	f7ff fa4d 	bl	8009e00 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a966:	2800      	cmp	r0, #0
 800a968:	d1eb      	bne.n	800a942 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	0359      	lsls	r1, r3, #13
 800a96e:	d514      	bpl.n	800a99a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a970:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a972:	6820      	ldr	r0, [r4, #0]
 800a974:	0409      	lsls	r1, r1, #16
 800a976:	f001 f9ed 	bl	800bd54 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d1e1      	bne.n	800a942 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a97e:	2102      	movs	r1, #2
 800a980:	6820      	ldr	r0, [r4, #0]
 800a982:	f001 facf 	bl	800bf24 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a986:	e7dc      	b.n	800a942 <HAL_SD_ConfigWideBusOperation+0x116>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a988:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a98c:	e7d9      	b.n	800a942 <HAL_SD_ConfigWideBusOperation+0x116>
        if (hsd->Init.ClockDiv == 0U)
 800a98e:	b93a      	cbnz	r2, 800a9a0 <HAL_SD_ConfigWideBusOperation+0x174>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a990:	490a      	ldr	r1, [pc, #40]	@ (800a9bc <HAL_SD_ConfigWideBusOperation+0x190>)
 800a992:	4288      	cmp	r0, r1
 800a994:	d989      	bls.n	800a8aa <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a996:	0e5a      	lsrs	r2, r3, #25
 800a998:	e787      	b.n	800a8aa <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a99a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800a99e:	e7d0      	b.n	800a942 <HAL_SD_ConfigWideBusOperation+0x116>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a9a0:	0051      	lsls	r1, r2, #1
 800a9a2:	fbb0 f1f1 	udiv	r1, r0, r1
 800a9a6:	4805      	ldr	r0, [pc, #20]	@ (800a9bc <HAL_SD_ConfigWideBusOperation+0x190>)
 800a9a8:	4281      	cmp	r1, r0
 800a9aa:	f67f af7e 	bls.w	800a8aa <HAL_SD_ConfigWideBusOperation+0x7e>
 800a9ae:	e7f2      	b.n	800a996 <HAL_SD_ConfigWideBusOperation+0x16a>
 800a9b0:	55e63b89 	.word	0x55e63b89
 800a9b4:	017d7840 	.word	0x017d7840
 800a9b8:	1fe00fff 	.word	0x1fe00fff
 800a9bc:	02faf080 	.word	0x02faf080

0800a9c0 <HAL_SD_Init>:
{
 800a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c2:	b087      	sub	sp, #28
  if (hsd == NULL)
 800a9c4:	b168      	cbz	r0, 800a9e2 <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 800a9c6:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d044      	beq.n	800aa5e <HAL_SD_Init+0x9e>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a9d4:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a9d6:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a9d8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a9dc:	f7ff fd04 	bl	800a3e8 <HAL_SD_InitCard>
 800a9e0:	b118      	cbz	r0, 800a9ea <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800a9e2:	2601      	movs	r6, #1
}
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	b007      	add	sp, #28
 800a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a9ea:	a901      	add	r1, sp, #4
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7ff fe35 	bl	800a65c <HAL_SD_GetCardStatus>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d1f5      	bne.n	800a9e2 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a9f6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800a9f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a9fc:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a9fe:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800aa02:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800aa04:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800aa06:	d02e      	beq.n	800aa66 <HAL_SD_Init+0xa6>
 800aa08:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800aa0a:	68e1      	ldr	r1, [r4, #12]
 800aa0c:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800aa0e:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800aa10:	f7ff ff0c 	bl	800a82c <HAL_SD_ConfigWideBusOperation>
 800aa14:	4606      	mov	r6, r0
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d1e3      	bne.n	800a9e2 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800aa1a:	f7f9 f9e3 	bl	8003de4 <HAL_GetTick>
 800aa1e:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800aa20:	e007      	b.n	800aa32 <HAL_SD_Init+0x72>
    hsd->ErrorCode |= errorstate;
 800aa22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa24:	4303      	orrs	r3, r0
 800aa26:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aa28:	f7f9 f9dc 	bl	8003de4 <HAL_GetTick>
 800aa2c:	1bc3      	subs	r3, r0, r7
 800aa2e:	3301      	adds	r3, #1
 800aa30:	d020      	beq.n	800aa74 <HAL_SD_Init+0xb4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa32:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aa34:	6820      	ldr	r0, [r4, #0]
 800aa36:	0409      	lsls	r1, r1, #16
 800aa38:	f001 fca4 	bl	800c384 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d1ef      	bne.n	800aa22 <HAL_SD_Init+0x62>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa42:	6820      	ldr	r0, [r4, #0]
 800aa44:	4629      	mov	r1, r5
 800aa46:	f000 fbf3 	bl	800b230 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aa4a:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800aa4e:	2804      	cmp	r0, #4
 800aa50:	d1ea      	bne.n	800aa28 <HAL_SD_Init+0x68>
  hsd->State = HAL_SD_STATE_READY;
 800aa52:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa54:	6365      	str	r5, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa56:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800aa58:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 800aa5c:	e7c2      	b.n	800a9e4 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800aa5e:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800aa60:	f7f8 ff48 	bl	80038f4 <HAL_SD_MspInit>
 800aa64:	e7b6      	b.n	800a9d4 <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800aa66:	4313      	orrs	r3, r2
 800aa68:	bf14      	ite	ne
 800aa6a:	f44f 7300 	movne.w	r3, #512	@ 0x200
 800aa6e:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 800aa72:	e7ca      	b.n	800aa0a <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aa74:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800aa78:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800aa7a:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800aa7c:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800aa7e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800aa82:	e7af      	b.n	800a9e4 <HAL_SD_Init+0x24>

0800aa84 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa84:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 800aa86:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa88:	0409      	lsls	r1, r1, #16
{
 800aa8a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa8c:	6800      	ldr	r0, [r0, #0]
 800aa8e:	f001 fc79 	bl	800c384 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa92:	4601      	mov	r1, r0
 800aa94:	b120      	cbz	r0, 800aaa0 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800aa96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa98:	2000      	movs	r0, #0
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800aa9e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aaa0:	6820      	ldr	r0, [r4, #0]
 800aaa2:	f000 fbc5 	bl	800b230 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aaa6:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800aaaa:	bd10      	pop	{r4, pc}

0800aaac <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800aaac:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aaae:	492c      	ldr	r1, [pc, #176]	@ (800ab60 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 800aab0:	695a      	ldr	r2, [r3, #20]
{
 800aab2:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aab4:	699c      	ldr	r4, [r3, #24]
 800aab6:	f044 0408 	orr.w	r4, r4, #8
 800aaba:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aabc:	699c      	ldr	r4, [r3, #24]
 800aabe:	f044 0410 	orr.w	r4, r4, #16
 800aac2:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 800aac4:	681c      	ldr	r4, [r3, #0]
 800aac6:	f024 0401 	bic.w	r4, r4, #1
 800aaca:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aacc:	691c      	ldr	r4, [r3, #16]
 800aace:	4021      	ands	r1, r4
 800aad0:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aad2:	6899      	ldr	r1, [r3, #8]
 800aad4:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 800aad8:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aada:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800aade:	2904      	cmp	r1, #4
 800aae0:	d001      	beq.n	800aae6 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aae2:	0691      	lsls	r1, r2, #26
 800aae4:	d430      	bmi.n	800ab48 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aae6:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800aaea:	2903      	cmp	r1, #3
 800aaec:	d001      	beq.n	800aaf2 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aaee:	0654      	lsls	r4, r2, #25
 800aaf0:	d41f      	bmi.n	800ab32 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aaf2:	0591      	lsls	r1, r2, #22
 800aaf4:	d509      	bpl.n	800ab0a <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aaf6:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800aafa:	f041 0101 	orr.w	r1, r1, #1
 800aafe:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab02:	6999      	ldr	r1, [r3, #24]
 800ab04:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800ab08:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ab0a:	05d2      	lsls	r2, r2, #23
 800ab0c:	d509      	bpl.n	800ab22 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ab0e:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800ab12:	f042 0208 	orr.w	r2, r2, #8
 800ab16:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab1a:	699a      	ldr	r2, [r3, #24]
 800ab1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab20:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ab22:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800ab24:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800ab28:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ab2c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 800ab30:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab32:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800ab36:	f041 0104 	orr.w	r1, r1, #4
 800ab3a:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab3e:	6999      	ldr	r1, [r3, #24]
 800ab40:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800ab44:	6199      	str	r1, [r3, #24]
 800ab46:	e7d4      	b.n	800aaf2 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ab48:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800ab4c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800ab50:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ab54:	6999      	ldr	r1, [r3, #24]
 800ab56:	f041 0120 	orr.w	r1, r1, #32
 800ab5a:	6199      	str	r1, [r3, #24]
 800ab5c:	e7c3      	b.n	800aae6 <SPI_CloseTransfer+0x3a>
 800ab5e:	bf00      	nop
 800ab60:	fffffc90 	.word	0xfffffc90

0800ab64 <HAL_SPI_Init>:
  if (hspi == NULL)
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f000 80c8 	beq.w	800acfa <HAL_SPI_Init+0x196>
{
 800ab6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab6e:	4604      	mov	r4, r0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab70:	4b67      	ldr	r3, [pc, #412]	@ (800ad10 <HAL_SPI_Init+0x1ac>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab72:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab74:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab76:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab78:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab7a:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab7c:	d016      	beq.n	800abac <HAL_SPI_Init+0x48>
 800ab7e:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d012      	beq.n	800abac <HAL_SPI_Init+0x48>
 800ab86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	f000 80ad 	beq.w	800acea <HAL_SPI_Init+0x186>
 800ab90:	290f      	cmp	r1, #15
 800ab92:	d808      	bhi.n	800aba6 <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab94:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab96:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab9a:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800ab9c:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800ab9e:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aba2:	2b08      	cmp	r3, #8
 800aba4:	d90a      	bls.n	800abbc <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 800aba6:	2001      	movs	r0, #1
}
 800aba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abac:	4b58      	ldr	r3, [pc, #352]	@ (800ad10 <HAL_SPI_Init+0x1ac>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800abae:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d06d      	beq.n	800ac90 <HAL_SPI_Init+0x12c>
 800abb4:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 800abb8:	429a      	cmp	r2, r3
 800abba:	d069      	beq.n	800ac90 <HAL_SPI_Init+0x12c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800abbc:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800abc0:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d071      	beq.n	800acac <HAL_SPI_Init+0x148>
 800abc8:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 800abcc:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800abce:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800abd0:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 800abd4:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800abd8:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 800abdc:	6813      	ldr	r3, [r2, #0]
 800abde:	f023 0301 	bic.w	r3, r3, #1
 800abe2:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800abe4:	6893      	ldr	r3, [r2, #8]
 800abe6:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800abea:	69a3      	ldr	r3, [r4, #24]
 800abec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abf0:	d067      	beq.n	800acc2 <HAL_SPI_Init+0x15e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800abf2:	f1b9 0f00 	cmp.w	r9, #0
 800abf6:	d001      	beq.n	800abfc <HAL_SPI_Init+0x98>
 800abf8:	2906      	cmp	r1, #6
 800abfa:	d86f      	bhi.n	800acdc <HAL_SPI_Init+0x178>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800abfc:	6817      	ldr	r7, [r2, #0]
 800abfe:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800ac02:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ac04:	4303      	orrs	r3, r0
 800ac06:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ac08:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ac0c:	ea43 030e 	orr.w	r3, r3, lr
 800ac10:	433b      	orrs	r3, r7
 800ac12:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800ac14:	433b      	orrs	r3, r7
 800ac16:	6927      	ldr	r7, [r4, #16]
 800ac18:	433b      	orrs	r3, r7
 800ac1a:	6967      	ldr	r7, [r4, #20]
 800ac1c:	433b      	orrs	r3, r7
 800ac1e:	6a27      	ldr	r7, [r4, #32]
 800ac20:	433b      	orrs	r3, r7
 800ac22:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800ac24:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ac26:	69e7      	ldr	r7, [r4, #28]
 800ac28:	4339      	orrs	r1, r7
 800ac2a:	4329      	orrs	r1, r5
 800ac2c:	ea41 010c 	orr.w	r1, r1, ip
 800ac30:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ac32:	68a1      	ldr	r1, [r4, #8]
 800ac34:	430b      	orrs	r3, r1
 800ac36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ac38:	430b      	orrs	r3, r1
 800ac3a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ac40:	b9c0      	cbnz	r0, 800ac74 <HAL_SPI_Init+0x110>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ac42:	6893      	ldr	r3, [r2, #8]
 800ac44:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800ac48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ac4c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ac4e:	6893      	ldr	r3, [r2, #8]
 800ac50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ac54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ac58:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac5a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ac5c:	f023 0301 	bic.w	r3, r3, #1
 800ac60:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac62:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800ac64:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac66:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 800ac6a:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 800ac6c:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 800ac70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac74:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ac76:	f023 0301 	bic.w	r3, r3, #1
 800ac7a:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ac7c:	f1b9 0f00 	cmp.w	r9, #0
 800ac80:	d0ef      	beq.n	800ac62 <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ac82:	68d3      	ldr	r3, [r2, #12]
 800ac84:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ac86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac8a:	430b      	orrs	r3, r1
 800ac8c:	60d3      	str	r3, [r2, #12]
 800ac8e:	e7e8      	b.n	800ac62 <HAL_SPI_Init+0xfe>
  data_size = (data_size + 7UL) / 8UL;
 800ac90:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac94:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800ac96:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800ac98:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac9c:	2b10      	cmp	r3, #16
 800ac9e:	d882      	bhi.n	800aba6 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800aca0:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800aca4:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d18d      	bne.n	800abc8 <HAL_SPI_Init+0x64>
    HAL_SPI_MspInit(hspi);
 800acac:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800acae:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800acb2:	f7f8 feb1 	bl	8003a18 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800acb6:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800acb8:	68e1      	ldr	r1, [r4, #12]
 800acba:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800acbe:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800acc0:	e784      	b.n	800abcc <HAL_SPI_Init+0x68>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800acc2:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 800acc6:	d01a      	beq.n	800acfe <HAL_SPI_Init+0x19a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800acc8:	2800      	cmp	r0, #0
 800acca:	d192      	bne.n	800abf2 <HAL_SPI_Init+0x8e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800accc:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 800acd0:	d194      	bne.n	800abfc <HAL_SPI_Init+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800acd2:	6817      	ldr	r7, [r2, #0]
 800acd4:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 800acd8:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800acda:	e78f      	b.n	800abfc <HAL_SPI_Init+0x98>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800acdc:	6817      	ldr	r7, [r2, #0]
 800acde:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 800ace0:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800ace4:	4337      	orrs	r7, r6
 800ace6:	6017      	str	r7, [r2, #0]
 800ace8:	e78c      	b.n	800ac04 <HAL_SPI_Init+0xa0>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800acea:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800acec:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800acf0:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800acf2:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800acf4:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acf8:	e7d0      	b.n	800ac9c <HAL_SPI_Init+0x138>
    return HAL_ERROR;
 800acfa:	2001      	movs	r0, #1
}
 800acfc:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800acfe:	f1be 0f00 	cmp.w	lr, #0
 800ad02:	f47f af79 	bne.w	800abf8 <HAL_SPI_Init+0x94>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad06:	6817      	ldr	r7, [r2, #0]
 800ad08:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 800ad0c:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ad0e:	e773      	b.n	800abf8 <HAL_SPI_Init+0x94>
 800ad10:	40013000 	.word	0x40013000

0800ad14 <HAL_SPI_Transmit_DMA>:
  if (hspi->State != HAL_SPI_STATE_READY)
 800ad14:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d17c      	bne.n	800ae16 <HAL_SPI_Transmit_DMA+0x102>
  if ((pData == NULL) || (Size == 0UL))
 800ad1c:	2900      	cmp	r1, #0
 800ad1e:	f000 80a8 	beq.w	800ae72 <HAL_SPI_Transmit_DMA+0x15e>
{
 800ad22:	b570      	push	{r4, r5, r6, lr}
 800ad24:	4615      	mov	r5, r2
 800ad26:	b2da      	uxtb	r2, r3
  if ((pData == NULL) || (Size == 0UL))
 800ad28:	fab5 f385 	clz	r3, r5
 800ad2c:	095b      	lsrs	r3, r3, #5
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	d079      	beq.n	800ae26 <HAL_SPI_Transmit_DMA+0x112>
 800ad32:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800ad34:	f890 0080 	ldrb.w	r0, [r0, #128]	@ 0x80
 800ad38:	2801      	cmp	r0, #1
 800ad3a:	f000 8098 	beq.w	800ae6e <HAL_SPI_Transmit_DMA+0x15a>
 800ad3e:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad42:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 800ad44:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad46:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->RxISR       = NULL;
 800ad4a:	6723      	str	r3, [r4, #112]	@ 0x70
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad4c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->RxISR       = NULL;
 800ad50:	6763      	str	r3, [r4, #116]	@ 0x74
  hspi->TxXferCount = Size;
 800ad52:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 800ad56:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800ad5a:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad5e:	68a3      	ldr	r3, [r4, #8]
    SPI_1LINE_TX(hspi);
 800ad60:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad62:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ad66:	65e1      	str	r1, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ad68:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad6c:	d05d      	beq.n	800ae2a <HAL_SPI_Transmit_DMA+0x116>
    SPI_2LINES_TX(hspi);
 800ad6e:	68d3      	ldr	r3, [r2, #12]
 800ad70:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800ad74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad78:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800ad7e:	2b0f      	cmp	r3, #15
 800ad80:	6986      	ldr	r6, [r0, #24]
 800ad82:	d84a      	bhi.n	800ae1a <HAL_SPI_Transmit_DMA+0x106>
 800ad84:	2b07      	cmp	r3, #7
 800ad86:	d861      	bhi.n	800ae4c <HAL_SPI_Transmit_DMA+0x138>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ad88:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800ad8c:	d067      	beq.n	800ae5e <HAL_SPI_Transmit_DMA+0x14a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ad8e:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800ad92:	d106      	bne.n	800ada2 <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ad94:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	3303      	adds	r3, #3
 800ad9c:	089b      	lsrs	r3, r3, #2
 800ad9e:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ada2:	4e35      	ldr	r6, [pc, #212]	@ (800ae78 <HAL_SPI_Transmit_DMA+0x164>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ada4:	3220      	adds	r2, #32
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ada6:	f852 3c18 	ldr.w	r3, [r2, #-24]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800adaa:	6406      	str	r6, [r0, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800adac:	4e33      	ldr	r6, [pc, #204]	@ (800ae7c <HAL_SPI_Transmit_DMA+0x168>)
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800adae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800adb2:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800adb4:	4e32      	ldr	r6, [pc, #200]	@ (800ae80 <HAL_SPI_Transmit_DMA+0x16c>)
 800adb6:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800adb8:	2600      	movs	r6, #0
 800adba:	6506      	str	r6, [r0, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800adbc:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
 800adc0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f7f9 fc49 	bl	800465c <HAL_DMA_Start_IT>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d132      	bne.n	800ae34 <HAL_SPI_Transmit_DMA+0x120>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800adce:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800add0:	6823      	ldr	r3, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800add2:	69d2      	ldr	r2, [r2, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800add4:	6859      	ldr	r1, [r3, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800add6:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800adda:	4a2a      	ldr	r2, [pc, #168]	@ (800ae84 <HAL_SPI_Transmit_DMA+0x170>)
 800addc:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ade0:	bf18      	it	ne
 800ade2:	432a      	orrne	r2, r5
 800ade4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ade6:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ade8:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800adea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adee:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800adf2:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800adf4:	691a      	ldr	r2, [r3, #16]
 800adf6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800adfa:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	f042 0201 	orr.w	r2, r2, #1
 800ae02:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae04:	d103      	bne.n	800ae0e <HAL_SPI_Transmit_DMA+0xfa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae0c:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800ae14:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800ae16:	2002      	movs	r0, #2
 800ae18:	4770      	bx	lr
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ae1a:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800ae1e:	d0c0      	beq.n	800ada2 <HAL_SPI_Transmit_DMA+0x8e>
    __HAL_UNLOCK(hspi);
 800ae20:	2300      	movs	r3, #0
 800ae22:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    return HAL_ERROR;
 800ae26:	2001      	movs	r0, #1
}
 800ae28:	bd70      	pop	{r4, r5, r6, pc}
    SPI_1LINE_TX(hspi);
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	e7a2      	b.n	800ad7a <HAL_SPI_Transmit_DMA+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae34:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ae38:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800ae3a:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae3e:	f043 0310 	orr.w	r3, r3, #16
 800ae42:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ae46:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    return HAL_ERROR;
 800ae4a:	e7ec      	b.n	800ae26 <HAL_SPI_Transmit_DMA+0x112>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ae4c:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800ae50:	d005      	beq.n	800ae5e <HAL_SPI_Transmit_DMA+0x14a>
 800ae52:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800ae56:	d1e3      	bne.n	800ae20 <HAL_SPI_Transmit_DMA+0x10c>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ae58:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800ae5c:	d1a1      	bne.n	800ada2 <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ae5e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	3301      	adds	r3, #1
 800ae66:	085b      	lsrs	r3, r3, #1
 800ae68:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800ae6c:	e799      	b.n	800ada2 <HAL_SPI_Transmit_DMA+0x8e>
    return HAL_BUSY;
 800ae6e:	2002      	movs	r0, #2
}
 800ae70:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800ae72:	2001      	movs	r0, #1
}
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	0800aebd 	.word	0x0800aebd
 800ae7c:	0800ae89 	.word	0x0800ae89
 800ae80:	0800aecd 	.word	0x0800aecd
 800ae84:	ffff0000 	.word	0xffff0000

0800ae88 <SPI_DMATransmitCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae88:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800ae8a:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ae8c:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800ae90:	2b07      	cmp	r3, #7
 800ae92:	d009      	beq.n	800aea8 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ae94:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae9c:	d005      	beq.n	800aeaa <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ae9e:	6802      	ldr	r2, [r0, #0]
 800aea0:	6913      	ldr	r3, [r2, #16]
 800aea2:	f043 0308 	orr.w	r3, r3, #8
 800aea6:	6113      	str	r3, [r2, #16]
}
 800aea8:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 800aeaa:	f7f8 fbf7 	bl	800369c <HAL_SPI_TxCpltCallback>
}
 800aeae:	bd08      	pop	{r3, pc}

0800aeb0 <HAL_SPI_RxCpltCallback>:
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop

0800aeb8 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop

0800aebc <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 800aebc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800aebe:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800aec0:	f7ff fffa 	bl	800aeb8 <HAL_SPI_TxHalfCpltCallback>
}
 800aec4:	bd08      	pop	{r3, pc}
 800aec6:	bf00      	nop

0800aec8 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop

0800aecc <SPI_DMAError>:
{
 800aecc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aece:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aed0:	f7fa fc6c 	bl	80057ac <HAL_DMA_GetError>
 800aed4:	2802      	cmp	r0, #2
 800aed6:	d100      	bne.n	800aeda <SPI_DMAError+0xe>
}
 800aed8:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800aeda:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aedc:	4930      	ldr	r1, [pc, #192]	@ (800afa0 <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
 800aede:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aee0:	6998      	ldr	r0, [r3, #24]
 800aee2:	f040 0008 	orr.w	r0, r0, #8
 800aee6:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aee8:	6998      	ldr	r0, [r3, #24]
 800aeea:	f040 0010 	orr.w	r0, r0, #16
 800aeee:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f020 0001 	bic.w	r0, r0, #1
 800aef6:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aef8:	6918      	ldr	r0, [r3, #16]
 800aefa:	4001      	ands	r1, r0
 800aefc:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aefe:	6899      	ldr	r1, [r3, #8]
 800af00:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 800af04:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af06:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800af0a:	2904      	cmp	r1, #4
 800af0c:	d001      	beq.n	800af12 <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800af0e:	0691      	lsls	r1, r2, #26
 800af10:	d43a      	bmi.n	800af88 <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af12:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800af16:	2903      	cmp	r1, #3
 800af18:	d001      	beq.n	800af1e <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800af1a:	0650      	lsls	r0, r2, #25
 800af1c:	d429      	bmi.n	800af72 <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800af1e:	0591      	lsls	r1, r2, #22
 800af20:	d509      	bpl.n	800af36 <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af22:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800af26:	f041 0101 	orr.w	r1, r1, #1
 800af2a:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af2e:	6999      	ldr	r1, [r3, #24]
 800af30:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800af34:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800af36:	05d2      	lsls	r2, r2, #23
 800af38:	d509      	bpl.n	800af4e <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af3a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800af3e:	f042 0208 	orr.w	r2, r2, #8
 800af42:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af46:	699a      	ldr	r2, [r3, #24]
 800af48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af4c:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800af4e:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800af50:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800af52:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800af54:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800af58:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af5c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800af60:	f043 0310 	orr.w	r3, r3, #16
 800af64:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800af68:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    HAL_SPI_ErrorCallback(hspi);
 800af6c:	f7ff ffac 	bl	800aec8 <HAL_SPI_ErrorCallback>
}
 800af70:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af72:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800af76:	f041 0104 	orr.w	r1, r1, #4
 800af7a:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af7e:	6999      	ldr	r1, [r3, #24]
 800af80:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800af84:	6199      	str	r1, [r3, #24]
 800af86:	e7ca      	b.n	800af1e <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af88:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800af8c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800af90:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af94:	6999      	ldr	r1, [r3, #24]
 800af96:	f041 0120 	orr.w	r1, r1, #32
 800af9a:	6199      	str	r1, [r3, #24]
 800af9c:	e7b9      	b.n	800af12 <SPI_DMAError+0x46>
 800af9e:	bf00      	nop
 800afa0:	fffffc90 	.word	0xfffffc90

0800afa4 <SPI_DMAAbortOnError>:
{
 800afa4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afa6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800afa8:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800afaa:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 800afac:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800afb0:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800afb4:	f880 2081 	strb.w	r2, [r0, #129]	@ 0x81
  HAL_SPI_ErrorCallback(hspi);
 800afb8:	f7ff ff86 	bl	800aec8 <HAL_SPI_ErrorCallback>
}
 800afbc:	bd08      	pop	{r3, pc}
 800afbe:	bf00      	nop

0800afc0 <HAL_SPI_SuspendCallback>:
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop

0800afc4 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 800afc4:	6803      	ldr	r3, [r0, #0]
{
 800afc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800afca:	691e      	ldr	r6, [r3, #16]
{
 800afcc:	4604      	mov	r4, r0
  uint32_t itflag   = hspi->Instance->SR;
 800afce:	6959      	ldr	r1, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800afd0:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 800afd4:	ea06 0201 	and.w	r2, r6, r1
  HAL_SPI_StateTypeDef State = hspi->State;
 800afd8:	f890 5081 	ldrb.w	r5, [r0, #129]	@ 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800afdc:	0509      	lsls	r1, r1, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800afde:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800afe0:	d502      	bpl.n	800afe8 <HAL_SPI_IRQHandler+0x24>
 800afe2:	0737      	lsls	r7, r6, #28
 800afe4:	f100 80cd 	bmi.w	800b182 <HAL_SPI_IRQHandler+0x1be>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800afe8:	f002 0164 	and.w	r1, r2, #100	@ 0x64
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800afec:	f002 0745 	and.w	r7, r2, #69	@ 0x45
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aff0:	f002 0626 	and.w	r6, r2, #38	@ 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aff4:	2904      	cmp	r1, #4
 800aff6:	d039      	beq.n	800b06c <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aff8:	2f01      	cmp	r7, #1
 800affa:	d03f      	beq.n	800b07c <HAL_SPI_IRQHandler+0xb8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800affc:	2e02      	cmp	r6, #2
 800affe:	f000 80d6 	beq.w	800b1ae <HAL_SPI_IRQHandler+0x1ea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b002:	0716      	lsls	r6, r2, #28
 800b004:	d557      	bpl.n	800b0b6 <HAL_SPI_IRQHandler+0xf2>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b006:	699a      	ldr	r2, [r3, #24]
 800b008:	f042 0208 	orr.w	r2, r2, #8
 800b00c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b00e:	699a      	ldr	r2, [r3, #24]
 800b010:	f042 0210 	orr.w	r2, r2, #16
 800b014:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b016:	699a      	ldr	r2, [r3, #24]
 800b018:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b01c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	f022 0208 	bic.w	r2, r2, #8
 800b024:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b026:	689a      	ldr	r2, [r3, #8]
 800b028:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 800b02c:	d12e      	bne.n	800b08c <HAL_SPI_IRQHandler+0xc8>
      while (hspi->RxXferCount != 0UL)
 800b02e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800b032:	b292      	uxth	r2, r2
 800b034:	b352      	cbz	r2, 800b08c <HAL_SPI_IRQHandler+0xc8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b036:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800b038:	e00e      	b.n	800b058 <HAL_SPI_IRQHandler+0x94>
 800b03a:	6822      	ldr	r2, [r4, #0]
 800b03c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b03e:	f841 2b04 	str.w	r2, [r1], #4
        hspi->RxXferCount--;
 800b042:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b046:	6661      	str	r1, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 800b048:	3a01      	subs	r2, #1
 800b04a:	b292      	uxth	r2, r2
 800b04c:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b050:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800b054:	b292      	uxth	r2, r2
 800b056:	b1ca      	cbz	r2, 800b08c <HAL_SPI_IRQHandler+0xc8>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b058:	68e2      	ldr	r2, [r4, #12]
 800b05a:	2a0f      	cmp	r2, #15
 800b05c:	d8ed      	bhi.n	800b03a <HAL_SPI_IRQHandler+0x76>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b05e:	2a07      	cmp	r2, #7
 800b060:	f240 809e 	bls.w	800b1a0 <HAL_SPI_IRQHandler+0x1dc>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b064:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800b066:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b06a:	e7ea      	b.n	800b042 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 800b06c:	4620      	mov	r0, r4
 800b06e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b070:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b072:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b074:	4620      	mov	r0, r4
 800b076:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b078:	2f01      	cmp	r7, #1
 800b07a:	d102      	bne.n	800b082 <HAL_SPI_IRQHandler+0xbe>
    hspi->RxISR(hspi);
 800b07c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b07e:	4620      	mov	r0, r4
 800b080:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b082:	2e02      	cmp	r6, #2
 800b084:	f000 8093 	beq.w	800b1ae <HAL_SPI_IRQHandler+0x1ea>
}
 800b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7ff fd0d 	bl	800aaac <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800b092:	2301      	movs	r3, #1
 800b094:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b098:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d17c      	bne.n	800b19a <HAL_SPI_IRQHandler+0x1d6>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b0a0:	2d05      	cmp	r5, #5
 800b0a2:	f000 8089 	beq.w	800b1b8 <HAL_SPI_IRQHandler+0x1f4>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b0a6:	2d04      	cmp	r5, #4
 800b0a8:	f000 8089 	beq.w	800b1be <HAL_SPI_IRQHandler+0x1fa>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b0ac:	2d03      	cmp	r5, #3
 800b0ae:	d1eb      	bne.n	800b088 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_TxCpltCallback(hspi);
 800b0b0:	f7f8 faf4 	bl	800369c <HAL_SPI_TxCpltCallback>
 800b0b4:	e7e8      	b.n	800b088 <HAL_SPI_IRQHandler+0xc4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b0b6:	f412 7f58 	tst.w	r2, #864	@ 0x360
 800b0ba:	d0e5      	beq.n	800b088 <HAL_SPI_IRQHandler+0xc4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b0bc:	0655      	lsls	r5, r2, #25
 800b0be:	d509      	bpl.n	800b0d4 <HAL_SPI_IRQHandler+0x110>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b0c0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800b0c4:	f041 0104 	orr.w	r1, r1, #4
 800b0c8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b0cc:	6999      	ldr	r1, [r3, #24]
 800b0ce:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800b0d2:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b0d4:	0590      	lsls	r0, r2, #22
 800b0d6:	d509      	bpl.n	800b0ec <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b0d8:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800b0dc:	f041 0101 	orr.w	r1, r1, #1
 800b0e0:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b0e4:	6999      	ldr	r1, [r3, #24]
 800b0e6:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800b0ea:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b0ec:	05d1      	lsls	r1, r2, #23
 800b0ee:	d509      	bpl.n	800b104 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b0f0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800b0f4:	f041 0108 	orr.w	r1, r1, #8
 800b0f8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b0fc:	6999      	ldr	r1, [r3, #24]
 800b0fe:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800b102:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b104:	0692      	lsls	r2, r2, #26
 800b106:	d509      	bpl.n	800b11c <HAL_SPI_IRQHandler+0x158>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b108:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800b10c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b110:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b114:	699a      	ldr	r2, [r3, #24]
 800b116:	f042 0220 	orr.w	r2, r2, #32
 800b11a:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b11c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800b120:	2a00      	cmp	r2, #0
 800b122:	d0b1      	beq.n	800b088 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE(hspi);
 800b124:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b126:	f40c 4c40 	and.w	ip, ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b12a:	4a26      	ldr	r2, [pc, #152]	@ (800b1c4 <HAL_SPI_IRQHandler+0x200>)
      __HAL_SPI_DISABLE(hspi);
 800b12c:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b130:	f5bc 4f40 	cmp.w	ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b134:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b136:	6919      	ldr	r1, [r3, #16]
 800b138:	ea02 0201 	and.w	r2, r2, r1
 800b13c:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b13e:	d128      	bne.n	800b192 <HAL_SPI_IRQHandler+0x1ce>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b140:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b142:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b144:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b148:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800b14a:	b150      	cbz	r0, 800b162 <HAL_SPI_IRQHandler+0x19e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b14c:	4b1e      	ldr	r3, [pc, #120]	@ (800b1c8 <HAL_SPI_IRQHandler+0x204>)
 800b14e:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b150:	f7f9 ff06 	bl	8004f60 <HAL_DMA_Abort_IT>
 800b154:	b128      	cbz	r0, 800b162 <HAL_SPI_IRQHandler+0x19e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b156:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b15a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b15e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        if (hspi->hdmatx != NULL)
 800b162:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800b164:	2800      	cmp	r0, #0
 800b166:	d08f      	beq.n	800b088 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b168:	4b17      	ldr	r3, [pc, #92]	@ (800b1c8 <HAL_SPI_IRQHandler+0x204>)
 800b16a:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b16c:	f7f9 fef8 	bl	8004f60 <HAL_DMA_Abort_IT>
 800b170:	2800      	cmp	r0, #0
 800b172:	d089      	beq.n	800b088 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b174:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800b178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b17c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800b180:	e782      	b.n	800b088 <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b182:	699a      	ldr	r2, [r3, #24]
 800b184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b188:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 800b18a:	f7ff ff19 	bl	800afc0 <HAL_SPI_SuspendCallback>
}
 800b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800b192:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800b194:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800b196:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b19a:	f7ff fe95 	bl	800aec8 <HAL_SPI_ErrorCallback>
 800b19e:	e773      	b.n	800b088 <HAL_SPI_IRQHandler+0xc4>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800b1a6:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1a8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800b1aa:	3101      	adds	r1, #1
 800b1ac:	e749      	b.n	800b042 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 800b1ae:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b1b0:	4620      	mov	r0, r4
}
 800b1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800b1b6:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800b1b8:	f7ff fe7c 	bl	800aeb4 <HAL_SPI_TxRxCpltCallback>
 800b1bc:	e764      	b.n	800b088 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_RxCpltCallback(hspi);
 800b1be:	f7ff fe77 	bl	800aeb0 <HAL_SPI_RxCpltCallback>
 800b1c2:	e761      	b.n	800b088 <HAL_SPI_IRQHandler+0xc4>
 800b1c4:	fffffc94 	.word	0xfffffc94
 800b1c8:	0800afa5 	.word	0x0800afa5

0800b1cc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	b410      	push	{r4}
 800b1d0:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b1d4:	4614      	mov	r4, r2
{
 800b1d6:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b1da:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800b1dc:	9904      	ldr	r1, [sp, #16]
{
 800b1de:	4602      	mov	r2, r0
             Init.BusWide             | \
 800b1e0:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800b1e2:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1e4:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800b1e6:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800b1e8:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800b1ea:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800b1ec:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800b1ee:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1f0:	4903      	ldr	r1, [pc, #12]	@ (800b200 <SDMMC_Init+0x34>)
 800b1f2:	4021      	ands	r1, r4
}
 800b1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1f8:	430b      	orrs	r3, r1
}
 800b1fa:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1fc:	6053      	str	r3, [r2, #4]
}
 800b1fe:	4770      	bx	lr
 800b200:	ffc02c00 	.word	0xffc02c00

0800b204 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b204:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop

0800b20c <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b20c:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b20e:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800b210:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800b212:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800b216:	4770      	bx	lr

0800b218 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b218:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800b21a:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	f042 0203 	orr.w	r2, r2, #3
 800b222:	601a      	str	r2, [r3, #0]
}
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop

0800b228 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b228:	6800      	ldr	r0, [r0, #0]
}
 800b22a:	f000 0003 	and.w	r0, r0, #3
 800b22e:	4770      	bx	lr

0800b230 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b230:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800b232:	5840      	ldr	r0, [r0, r1]
}
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop

0800b238 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b238:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b23a:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 800b23e:	690d      	ldr	r5, [r1, #16]
{
 800b240:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b242:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b244:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 800b246:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b248:	6250      	str	r0, [r2, #36]	@ 0x24
                       Data->TransferDir   | \
 800b24a:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800b24c:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 800b24e:	6294      	str	r4, [r2, #40]	@ 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b250:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
                       Data->TransferMode  | \
 800b252:	4303      	orrs	r3, r0

  return HAL_OK;

}
 800b254:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b256:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800b25a:	430b      	orrs	r3, r1
}
 800b25c:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b25e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop

0800b264 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b264:	4a4f      	ldr	r2, [pc, #316]	@ (800b3a4 <SDMMC_CmdBlockLength+0x140>)
{
 800b266:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b268:	4b4f      	ldr	r3, [pc, #316]	@ (800b3a8 <SDMMC_CmdBlockLength+0x144>)
 800b26a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b26c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b270:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b274:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b278:	484c      	ldr	r0, [pc, #304]	@ (800b3ac <SDMMC_CmdBlockLength+0x148>)
 800b27a:	f241 1310 	movw	r3, #4368	@ 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b27e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b280:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b282:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b286:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b288:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b28c:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800b290:	1e53      	subs	r3, r2, #1
 800b292:	b14a      	cbz	r2, 800b2a8 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b294:	4946      	ldr	r1, [pc, #280]	@ (800b3b0 <SDMMC_CmdBlockLength+0x14c>)
    sta_reg = SDMMCx->STA;
 800b296:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800b29a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b29c:	420a      	tst	r2, r1
 800b29e:	d001      	beq.n	800b2a4 <SDMMC_CmdBlockLength+0x40>
 800b2a0:	0492      	lsls	r2, r2, #18
 800b2a2:	d504      	bpl.n	800b2ae <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800b2a4:	1c58      	adds	r0, r3, #1
 800b2a6:	d1f6      	bne.n	800b296 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b2a8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b2ac:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2ae:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b2b2:	075b      	lsls	r3, r3, #29
 800b2b4:	d443      	bmi.n	800b33e <SDMMC_CmdBlockLength+0xda>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2b6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b2ba:	07d8      	lsls	r0, r3, #31
 800b2bc:	d409      	bmi.n	800b2d2 <SDMMC_CmdBlockLength+0x6e>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2be:	4b3d      	ldr	r3, [pc, #244]	@ (800b3b4 <SDMMC_CmdBlockLength+0x150>)
 800b2c0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2c4:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b10      	cmp	r3, #16
 800b2cc:	d005      	beq.n	800b2da <SDMMC_CmdBlockLength+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2ce:	2001      	movs	r0, #1
 800b2d0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2d8:	e7f9      	b.n	800b2ce <SDMMC_CmdBlockLength+0x6a>
  return (*(__IO uint32_t *) tmp);
 800b2da:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b2de:	4836      	ldr	r0, [pc, #216]	@ (800b3b8 <SDMMC_CmdBlockLength+0x154>)
 800b2e0:	4018      	ands	r0, r3
 800b2e2:	b358      	cbz	r0, 800b33c <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	db2f      	blt.n	800b348 <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b2e8:	0059      	lsls	r1, r3, #1
 800b2ea:	d430      	bmi.n	800b34e <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b2ec:	009a      	lsls	r2, r3, #2
 800b2ee:	d430      	bmi.n	800b352 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b2f0:	00d9      	lsls	r1, r3, #3
 800b2f2:	d430      	bmi.n	800b356 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b2f4:	011a      	lsls	r2, r3, #4
 800b2f6:	d431      	bmi.n	800b35c <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2f8:	0159      	lsls	r1, r3, #5
 800b2fa:	d432      	bmi.n	800b362 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2fc:	01da      	lsls	r2, r3, #7
 800b2fe:	d433      	bmi.n	800b368 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b300:	0219      	lsls	r1, r3, #8
 800b302:	d434      	bmi.n	800b36e <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b304:	025a      	lsls	r2, r3, #9
 800b306:	d435      	bmi.n	800b374 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b308:	0299      	lsls	r1, r3, #10
 800b30a:	d43f      	bmi.n	800b38c <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b30c:	02da      	lsls	r2, r3, #11
 800b30e:	d43a      	bmi.n	800b386 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b310:	0359      	lsls	r1, r3, #13
 800b312:	d435      	bmi.n	800b380 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b314:	039a      	lsls	r2, r3, #14
 800b316:	d430      	bmi.n	800b37a <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b318:	03d9      	lsls	r1, r3, #15
 800b31a:	d440      	bmi.n	800b39e <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b31c:	041a      	lsls	r2, r3, #16
 800b31e:	d43b      	bmi.n	800b398 <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b320:	0459      	lsls	r1, r3, #17
 800b322:	d436      	bmi.n	800b392 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b324:	049a      	lsls	r2, r3, #18
 800b326:	d407      	bmi.n	800b338 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b328:	f013 0f08 	tst.w	r3, #8
 800b32c:	bf0c      	ite	eq
 800b32e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800b332:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800b336:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b338:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800b33c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b33e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b340:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b342:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b346:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b348:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800b34c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b34e:	2040      	movs	r0, #64	@ 0x40
 800b350:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b352:	2080      	movs	r0, #128	@ 0x80
 800b354:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b356:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b35a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b35c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b360:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b362:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b366:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b368:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b36c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b36e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b372:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b374:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b378:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b37a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b37e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b380:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800b384:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b386:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b38a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b38c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b390:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b392:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b396:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b398:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b39c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b39e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b3a2:	4770      	bx	lr
 800b3a4:	2400000c 	.word	0x2400000c
 800b3a8:	10624dd3 	.word	0x10624dd3
 800b3ac:	fffee0c0 	.word	0xfffee0c0
 800b3b0:	00200045 	.word	0x00200045
 800b3b4:	002000c5 	.word	0x002000c5
 800b3b8:	fdffe008 	.word	0xfdffe008

0800b3bc <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b3bc:	4a4f      	ldr	r2, [pc, #316]	@ (800b4fc <SDMMC_CmdReadSingleBlock+0x140>)
{
 800b3be:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b3c0:	4b4f      	ldr	r3, [pc, #316]	@ (800b500 <SDMMC_CmdReadSingleBlock+0x144>)
 800b3c2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b3c4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b3c8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3cc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b3d0:	484c      	ldr	r0, [pc, #304]	@ (800b504 <SDMMC_CmdReadSingleBlock+0x148>)
 800b3d2:	f241 1311 	movw	r3, #4369	@ 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b3d6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3d8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b3da:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3de:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b3e0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3e4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b3e8:	1e53      	subs	r3, r2, #1
 800b3ea:	b14a      	cbz	r2, 800b400 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b3ec:	4946      	ldr	r1, [pc, #280]	@ (800b508 <SDMMC_CmdReadSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800b3ee:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800b3f2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3f4:	420a      	tst	r2, r1
 800b3f6:	d001      	beq.n	800b3fc <SDMMC_CmdReadSingleBlock+0x40>
 800b3f8:	0492      	lsls	r2, r2, #18
 800b3fa:	d504      	bpl.n	800b406 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800b3fc:	1c58      	adds	r0, r3, #1
 800b3fe:	d1f6      	bne.n	800b3ee <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b400:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b404:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b406:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b40a:	075b      	lsls	r3, r3, #29
 800b40c:	d443      	bmi.n	800b496 <SDMMC_CmdReadSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b40e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b412:	07d8      	lsls	r0, r3, #31
 800b414:	d409      	bmi.n	800b42a <SDMMC_CmdReadSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b416:	4b3d      	ldr	r3, [pc, #244]	@ (800b50c <SDMMC_CmdReadSingleBlock+0x150>)
 800b418:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b41c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b11      	cmp	r3, #17
 800b424:	d005      	beq.n	800b432 <SDMMC_CmdReadSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b426:	2001      	movs	r0, #1
 800b428:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b42a:	2301      	movs	r3, #1
 800b42c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b430:	e7f9      	b.n	800b426 <SDMMC_CmdReadSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800b432:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b436:	4836      	ldr	r0, [pc, #216]	@ (800b510 <SDMMC_CmdReadSingleBlock+0x154>)
 800b438:	4018      	ands	r0, r3
 800b43a:	b358      	cbz	r0, 800b494 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	db2f      	blt.n	800b4a0 <SDMMC_CmdReadSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b440:	0059      	lsls	r1, r3, #1
 800b442:	d430      	bmi.n	800b4a6 <SDMMC_CmdReadSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b444:	009a      	lsls	r2, r3, #2
 800b446:	d430      	bmi.n	800b4aa <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b448:	00d9      	lsls	r1, r3, #3
 800b44a:	d430      	bmi.n	800b4ae <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b44c:	011a      	lsls	r2, r3, #4
 800b44e:	d431      	bmi.n	800b4b4 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b450:	0159      	lsls	r1, r3, #5
 800b452:	d432      	bmi.n	800b4ba <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b454:	01da      	lsls	r2, r3, #7
 800b456:	d433      	bmi.n	800b4c0 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b458:	0219      	lsls	r1, r3, #8
 800b45a:	d434      	bmi.n	800b4c6 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b45c:	025a      	lsls	r2, r3, #9
 800b45e:	d435      	bmi.n	800b4cc <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b460:	0299      	lsls	r1, r3, #10
 800b462:	d43f      	bmi.n	800b4e4 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b464:	02da      	lsls	r2, r3, #11
 800b466:	d43a      	bmi.n	800b4de <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b468:	0359      	lsls	r1, r3, #13
 800b46a:	d435      	bmi.n	800b4d8 <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b46c:	039a      	lsls	r2, r3, #14
 800b46e:	d430      	bmi.n	800b4d2 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b470:	03d9      	lsls	r1, r3, #15
 800b472:	d440      	bmi.n	800b4f6 <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b474:	041a      	lsls	r2, r3, #16
 800b476:	d43b      	bmi.n	800b4f0 <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b478:	0459      	lsls	r1, r3, #17
 800b47a:	d436      	bmi.n	800b4ea <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b47c:	049a      	lsls	r2, r3, #18
 800b47e:	d407      	bmi.n	800b490 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b480:	f013 0f08 	tst.w	r3, #8
 800b484:	bf0c      	ite	eq
 800b486:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800b48a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800b48e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b490:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800b494:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b496:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b498:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b49a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b49e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b4a0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800b4a4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b4a6:	2040      	movs	r0, #64	@ 0x40
 800b4a8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b4aa:	2080      	movs	r0, #128	@ 0x80
 800b4ac:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b4ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b4b2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b4b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b4b8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b4ba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b4be:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b4c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b4c4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4c6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b4ca:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b4d0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b4d2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b4d6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b4d8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800b4dc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b4de:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b4e2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b4e4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b4e8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b4ea:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b4ee:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b4f0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b4f4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b4f6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b4fa:	4770      	bx	lr
 800b4fc:	2400000c 	.word	0x2400000c
 800b500:	10624dd3 	.word	0x10624dd3
 800b504:	fffee0c0 	.word	0xfffee0c0
 800b508:	00200045 	.word	0x00200045
 800b50c:	002000c5 	.word	0x002000c5
 800b510:	fdffe008 	.word	0xfdffe008

0800b514 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b514:	4a4f      	ldr	r2, [pc, #316]	@ (800b654 <SDMMC_CmdReadMultiBlock+0x140>)
{
 800b516:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b518:	4b4f      	ldr	r3, [pc, #316]	@ (800b658 <SDMMC_CmdReadMultiBlock+0x144>)
 800b51a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b51c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b520:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b524:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b528:	484c      	ldr	r0, [pc, #304]	@ (800b65c <SDMMC_CmdReadMultiBlock+0x148>)
 800b52a:	f241 1312 	movw	r3, #4370	@ 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b52e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b530:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b532:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b536:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b538:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b53c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b540:	1e53      	subs	r3, r2, #1
 800b542:	b14a      	cbz	r2, 800b558 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b544:	4946      	ldr	r1, [pc, #280]	@ (800b660 <SDMMC_CmdReadMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800b546:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800b54a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b54c:	420a      	tst	r2, r1
 800b54e:	d001      	beq.n	800b554 <SDMMC_CmdReadMultiBlock+0x40>
 800b550:	0492      	lsls	r2, r2, #18
 800b552:	d504      	bpl.n	800b55e <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800b554:	1c58      	adds	r0, r3, #1
 800b556:	d1f6      	bne.n	800b546 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b558:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b55c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b55e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b562:	075b      	lsls	r3, r3, #29
 800b564:	d443      	bmi.n	800b5ee <SDMMC_CmdReadMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b566:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b56a:	07d8      	lsls	r0, r3, #31
 800b56c:	d409      	bmi.n	800b582 <SDMMC_CmdReadMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b56e:	4b3d      	ldr	r3, [pc, #244]	@ (800b664 <SDMMC_CmdReadMultiBlock+0x150>)
 800b570:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b574:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b12      	cmp	r3, #18
 800b57c:	d005      	beq.n	800b58a <SDMMC_CmdReadMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b57e:	2001      	movs	r0, #1
 800b580:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b582:	2301      	movs	r3, #1
 800b584:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b588:	e7f9      	b.n	800b57e <SDMMC_CmdReadMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800b58a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b58e:	4836      	ldr	r0, [pc, #216]	@ (800b668 <SDMMC_CmdReadMultiBlock+0x154>)
 800b590:	4018      	ands	r0, r3
 800b592:	b358      	cbz	r0, 800b5ec <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b594:	2b00      	cmp	r3, #0
 800b596:	db2f      	blt.n	800b5f8 <SDMMC_CmdReadMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b598:	0059      	lsls	r1, r3, #1
 800b59a:	d430      	bmi.n	800b5fe <SDMMC_CmdReadMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b59c:	009a      	lsls	r2, r3, #2
 800b59e:	d430      	bmi.n	800b602 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5a0:	00d9      	lsls	r1, r3, #3
 800b5a2:	d430      	bmi.n	800b606 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b5a4:	011a      	lsls	r2, r3, #4
 800b5a6:	d431      	bmi.n	800b60c <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b5a8:	0159      	lsls	r1, r3, #5
 800b5aa:	d432      	bmi.n	800b612 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b5ac:	01da      	lsls	r2, r3, #7
 800b5ae:	d433      	bmi.n	800b618 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b5b0:	0219      	lsls	r1, r3, #8
 800b5b2:	d434      	bmi.n	800b61e <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b5b4:	025a      	lsls	r2, r3, #9
 800b5b6:	d435      	bmi.n	800b624 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b5b8:	0299      	lsls	r1, r3, #10
 800b5ba:	d43f      	bmi.n	800b63c <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b5bc:	02da      	lsls	r2, r3, #11
 800b5be:	d43a      	bmi.n	800b636 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b5c0:	0359      	lsls	r1, r3, #13
 800b5c2:	d435      	bmi.n	800b630 <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b5c4:	039a      	lsls	r2, r3, #14
 800b5c6:	d430      	bmi.n	800b62a <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b5c8:	03d9      	lsls	r1, r3, #15
 800b5ca:	d440      	bmi.n	800b64e <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b5cc:	041a      	lsls	r2, r3, #16
 800b5ce:	d43b      	bmi.n	800b648 <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b5d0:	0459      	lsls	r1, r3, #17
 800b5d2:	d436      	bmi.n	800b642 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b5d4:	049a      	lsls	r2, r3, #18
 800b5d6:	d407      	bmi.n	800b5e8 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b5d8:	f013 0f08 	tst.w	r3, #8
 800b5dc:	bf0c      	ite	eq
 800b5de:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800b5e2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800b5e6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b5e8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800b5ec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5ee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5f0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5f2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5f6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5f8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800b5fc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5fe:	2040      	movs	r0, #64	@ 0x40
 800b600:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b602:	2080      	movs	r0, #128	@ 0x80
 800b604:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b606:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b60a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b60c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b610:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b612:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b616:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b618:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b61c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b61e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b622:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b624:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b628:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b62a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b62e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b630:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800b634:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b636:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b63a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b63c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b640:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b642:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b646:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b648:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b64c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b64e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b652:	4770      	bx	lr
 800b654:	2400000c 	.word	0x2400000c
 800b658:	10624dd3 	.word	0x10624dd3
 800b65c:	fffee0c0 	.word	0xfffee0c0
 800b660:	00200045 	.word	0x00200045
 800b664:	002000c5 	.word	0x002000c5
 800b668:	fdffe008 	.word	0xfdffe008

0800b66c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b66c:	4a4f      	ldr	r2, [pc, #316]	@ (800b7ac <SDMMC_CmdWriteSingleBlock+0x140>)
{
 800b66e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b670:	4b4f      	ldr	r3, [pc, #316]	@ (800b7b0 <SDMMC_CmdWriteSingleBlock+0x144>)
 800b672:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b674:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b678:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b67c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b680:	484c      	ldr	r0, [pc, #304]	@ (800b7b4 <SDMMC_CmdWriteSingleBlock+0x148>)
 800b682:	f241 1318 	movw	r3, #4376	@ 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b686:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b688:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b68a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b68e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b690:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b694:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b698:	1e53      	subs	r3, r2, #1
 800b69a:	b14a      	cbz	r2, 800b6b0 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b69c:	4946      	ldr	r1, [pc, #280]	@ (800b7b8 <SDMMC_CmdWriteSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800b69e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800b6a2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b6a4:	420a      	tst	r2, r1
 800b6a6:	d001      	beq.n	800b6ac <SDMMC_CmdWriteSingleBlock+0x40>
 800b6a8:	0492      	lsls	r2, r2, #18
 800b6aa:	d504      	bpl.n	800b6b6 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800b6ac:	1c58      	adds	r0, r3, #1
 800b6ae:	d1f6      	bne.n	800b69e <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b6b0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b6b4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6b6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b6ba:	075b      	lsls	r3, r3, #29
 800b6bc:	d443      	bmi.n	800b746 <SDMMC_CmdWriteSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6be:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b6c2:	07d8      	lsls	r0, r3, #31
 800b6c4:	d409      	bmi.n	800b6da <SDMMC_CmdWriteSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6c6:	4b3d      	ldr	r3, [pc, #244]	@ (800b7bc <SDMMC_CmdWriteSingleBlock+0x150>)
 800b6c8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b6cc:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	2b18      	cmp	r3, #24
 800b6d4:	d005      	beq.n	800b6e2 <SDMMC_CmdWriteSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b6da:	2301      	movs	r3, #1
 800b6dc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6e0:	e7f9      	b.n	800b6d6 <SDMMC_CmdWriteSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800b6e2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b6e6:	4836      	ldr	r0, [pc, #216]	@ (800b7c0 <SDMMC_CmdWriteSingleBlock+0x154>)
 800b6e8:	4018      	ands	r0, r3
 800b6ea:	b358      	cbz	r0, 800b744 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	db2f      	blt.n	800b750 <SDMMC_CmdWriteSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b6f0:	0059      	lsls	r1, r3, #1
 800b6f2:	d430      	bmi.n	800b756 <SDMMC_CmdWriteSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6f4:	009a      	lsls	r2, r3, #2
 800b6f6:	d430      	bmi.n	800b75a <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6f8:	00d9      	lsls	r1, r3, #3
 800b6fa:	d430      	bmi.n	800b75e <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b6fc:	011a      	lsls	r2, r3, #4
 800b6fe:	d431      	bmi.n	800b764 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b700:	0159      	lsls	r1, r3, #5
 800b702:	d432      	bmi.n	800b76a <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b704:	01da      	lsls	r2, r3, #7
 800b706:	d433      	bmi.n	800b770 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b708:	0219      	lsls	r1, r3, #8
 800b70a:	d434      	bmi.n	800b776 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b70c:	025a      	lsls	r2, r3, #9
 800b70e:	d435      	bmi.n	800b77c <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b710:	0299      	lsls	r1, r3, #10
 800b712:	d43f      	bmi.n	800b794 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b714:	02da      	lsls	r2, r3, #11
 800b716:	d43a      	bmi.n	800b78e <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b718:	0359      	lsls	r1, r3, #13
 800b71a:	d435      	bmi.n	800b788 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b71c:	039a      	lsls	r2, r3, #14
 800b71e:	d430      	bmi.n	800b782 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b720:	03d9      	lsls	r1, r3, #15
 800b722:	d440      	bmi.n	800b7a6 <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b724:	041a      	lsls	r2, r3, #16
 800b726:	d43b      	bmi.n	800b7a0 <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b728:	0459      	lsls	r1, r3, #17
 800b72a:	d436      	bmi.n	800b79a <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b72c:	049a      	lsls	r2, r3, #18
 800b72e:	d407      	bmi.n	800b740 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b730:	f013 0f08 	tst.w	r3, #8
 800b734:	bf0c      	ite	eq
 800b736:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800b73a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800b73e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b740:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800b744:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b746:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b748:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b74a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b74e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b750:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800b754:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b756:	2040      	movs	r0, #64	@ 0x40
 800b758:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b75a:	2080      	movs	r0, #128	@ 0x80
 800b75c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b75e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b762:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b764:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b768:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b76a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b76e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b770:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b774:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b776:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b77a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b77c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b780:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b782:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b786:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b788:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800b78c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b78e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b792:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b794:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b798:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b79a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b79e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b7a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b7a4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b7a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b7aa:	4770      	bx	lr
 800b7ac:	2400000c 	.word	0x2400000c
 800b7b0:	10624dd3 	.word	0x10624dd3
 800b7b4:	fffee0c0 	.word	0xfffee0c0
 800b7b8:	00200045 	.word	0x00200045
 800b7bc:	002000c5 	.word	0x002000c5
 800b7c0:	fdffe008 	.word	0xfdffe008

0800b7c4 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7c4:	4a4f      	ldr	r2, [pc, #316]	@ (800b904 <SDMMC_CmdWriteMultiBlock+0x140>)
{
 800b7c6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7c8:	4b4f      	ldr	r3, [pc, #316]	@ (800b908 <SDMMC_CmdWriteMultiBlock+0x144>)
 800b7ca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b7cc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7d0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7d4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b7d8:	484c      	ldr	r0, [pc, #304]	@ (800b90c <SDMMC_CmdWriteMultiBlock+0x148>)
 800b7da:	f241 1319 	movw	r3, #4377	@ 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7e0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7e2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7e6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b7e8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b7ec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b7f0:	1e53      	subs	r3, r2, #1
 800b7f2:	b14a      	cbz	r2, 800b808 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b7f4:	4946      	ldr	r1, [pc, #280]	@ (800b910 <SDMMC_CmdWriteMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800b7f6:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800b7fa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b7fc:	420a      	tst	r2, r1
 800b7fe:	d001      	beq.n	800b804 <SDMMC_CmdWriteMultiBlock+0x40>
 800b800:	0492      	lsls	r2, r2, #18
 800b802:	d504      	bpl.n	800b80e <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800b804:	1c58      	adds	r0, r3, #1
 800b806:	d1f6      	bne.n	800b7f6 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b808:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b80c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b80e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b812:	075b      	lsls	r3, r3, #29
 800b814:	d443      	bmi.n	800b89e <SDMMC_CmdWriteMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b816:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800b81a:	07d8      	lsls	r0, r3, #31
 800b81c:	d409      	bmi.n	800b832 <SDMMC_CmdWriteMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b81e:	4b3d      	ldr	r3, [pc, #244]	@ (800b914 <SDMMC_CmdWriteMultiBlock+0x150>)
 800b820:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b824:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b19      	cmp	r3, #25
 800b82c:	d005      	beq.n	800b83a <SDMMC_CmdWriteMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b82e:	2001      	movs	r0, #1
 800b830:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b832:	2301      	movs	r3, #1
 800b834:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b838:	e7f9      	b.n	800b82e <SDMMC_CmdWriteMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800b83a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b83e:	4836      	ldr	r0, [pc, #216]	@ (800b918 <SDMMC_CmdWriteMultiBlock+0x154>)
 800b840:	4018      	ands	r0, r3
 800b842:	b358      	cbz	r0, 800b89c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b844:	2b00      	cmp	r3, #0
 800b846:	db2f      	blt.n	800b8a8 <SDMMC_CmdWriteMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b848:	0059      	lsls	r1, r3, #1
 800b84a:	d430      	bmi.n	800b8ae <SDMMC_CmdWriteMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b84c:	009a      	lsls	r2, r3, #2
 800b84e:	d430      	bmi.n	800b8b2 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b850:	00d9      	lsls	r1, r3, #3
 800b852:	d430      	bmi.n	800b8b6 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b854:	011a      	lsls	r2, r3, #4
 800b856:	d431      	bmi.n	800b8bc <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b858:	0159      	lsls	r1, r3, #5
 800b85a:	d432      	bmi.n	800b8c2 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b85c:	01da      	lsls	r2, r3, #7
 800b85e:	d433      	bmi.n	800b8c8 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b860:	0219      	lsls	r1, r3, #8
 800b862:	d434      	bmi.n	800b8ce <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b864:	025a      	lsls	r2, r3, #9
 800b866:	d435      	bmi.n	800b8d4 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b868:	0299      	lsls	r1, r3, #10
 800b86a:	d43f      	bmi.n	800b8ec <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b86c:	02da      	lsls	r2, r3, #11
 800b86e:	d43a      	bmi.n	800b8e6 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b870:	0359      	lsls	r1, r3, #13
 800b872:	d435      	bmi.n	800b8e0 <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b874:	039a      	lsls	r2, r3, #14
 800b876:	d430      	bmi.n	800b8da <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b878:	03d9      	lsls	r1, r3, #15
 800b87a:	d440      	bmi.n	800b8fe <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b87c:	041a      	lsls	r2, r3, #16
 800b87e:	d43b      	bmi.n	800b8f8 <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b880:	0459      	lsls	r1, r3, #17
 800b882:	d436      	bmi.n	800b8f2 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b884:	049a      	lsls	r2, r3, #18
 800b886:	d407      	bmi.n	800b898 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b888:	f013 0f08 	tst.w	r3, #8
 800b88c:	bf0c      	ite	eq
 800b88e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800b892:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800b896:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b898:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800b89c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b89e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8a0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8a2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8a6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b8a8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800b8ac:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b8ae:	2040      	movs	r0, #64	@ 0x40
 800b8b0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b8b2:	2080      	movs	r0, #128	@ 0x80
 800b8b4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b8b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b8ba:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b8bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b8c0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8c2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b8c6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b8cc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b8d2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b8d8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b8da:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b8de:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b8e0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800b8e4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b8e6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b8ea:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b8ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b8f0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b8f2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b8f6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b8f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b8fc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b8fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b902:	4770      	bx	lr
 800b904:	2400000c 	.word	0x2400000c
 800b908:	10624dd3 	.word	0x10624dd3
 800b90c:	fffee0c0 	.word	0xfffee0c0
 800b910:	00200045 	.word	0x00200045
 800b914:	002000c5 	.word	0x002000c5
 800b918:	fdffe008 	.word	0xfdffe008

0800b91c <SDMMC_CmdStopTransfer>:
{
 800b91c:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b91e:	4b7a      	ldr	r3, [pc, #488]	@ (800bb08 <SDMMC_CmdStopTransfer+0x1ec>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b920:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b922:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b924:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b928:	4b78      	ldr	r3, [pc, #480]	@ (800bb0c <SDMMC_CmdStopTransfer+0x1f0>)
{
 800b92a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b92c:	4c78      	ldr	r4, [pc, #480]	@ (800bb10 <SDMMC_CmdStopTransfer+0x1f4>)
  SDMMCx->ARG = Command->Argument;
 800b92e:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b930:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b932:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b936:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b938:	4c76      	ldr	r4, [pc, #472]	@ (800bb14 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b93a:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b93e:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b940:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b942:	f241 100c 	movw	r0, #4364	@ 0x110c
  SDMMCx->ARG = Command->Argument;
 800b946:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b948:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b94c:	68cc      	ldr	r4, [r1, #12]
 800b94e:	4023      	ands	r3, r4
 800b950:	4318      	orrs	r0, r3
 800b952:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800b954:	b14a      	cbz	r2, 800b96a <SDMMC_CmdStopTransfer+0x4e>
 800b956:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b958:	486f      	ldr	r0, [pc, #444]	@ (800bb18 <SDMMC_CmdStopTransfer+0x1fc>)
    sta_reg = SDMMCx->STA;
 800b95a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800b95c:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b95e:	4202      	tst	r2, r0
 800b960:	d001      	beq.n	800b966 <SDMMC_CmdStopTransfer+0x4a>
 800b962:	0492      	lsls	r2, r2, #18
 800b964:	d509      	bpl.n	800b97a <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800b966:	1c5c      	adds	r4, r3, #1
 800b968:	d1f7      	bne.n	800b95a <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b96a:	68cb      	ldr	r3, [r1, #12]
 800b96c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b974:	60cb      	str	r3, [r1, #12]
}
 800b976:	bc30      	pop	{r4, r5}
 800b978:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b97a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800b97c:	075b      	lsls	r3, r3, #29
 800b97e:	d44d      	bmi.n	800ba1c <SDMMC_CmdStopTransfer+0x100>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b980:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800b982:	f010 0001 	ands.w	r0, r0, #1
 800b986:	d13a      	bne.n	800b9fe <SDMMC_CmdStopTransfer+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b988:	4b64      	ldr	r3, [pc, #400]	@ (800bb1c <SDMMC_CmdStopTransfer+0x200>)
 800b98a:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b98c:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b0c      	cmp	r3, #12
 800b992:	d136      	bne.n	800ba02 <SDMMC_CmdStopTransfer+0xe6>
  return (*(__IO uint32_t *) tmp);
 800b994:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b996:	4a62      	ldr	r2, [pc, #392]	@ (800bb20 <SDMMC_CmdStopTransfer+0x204>)
 800b998:	401a      	ands	r2, r3
 800b99a:	2a00      	cmp	r2, #0
 800b99c:	d038      	beq.n	800ba10 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	db36      	blt.n	800ba10 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b9a2:	005d      	lsls	r5, r3, #1
 800b9a4:	d441      	bmi.n	800ba2a <SDMMC_CmdStopTransfer+0x10e>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b9a6:	009c      	lsls	r4, r3, #2
 800b9a8:	d445      	bmi.n	800ba36 <SDMMC_CmdStopTransfer+0x11a>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b9aa:	00d8      	lsls	r0, r3, #3
 800b9ac:	d449      	bmi.n	800ba42 <SDMMC_CmdStopTransfer+0x126>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b9ae:	011a      	lsls	r2, r3, #4
 800b9b0:	d44e      	bmi.n	800ba50 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b9b2:	015d      	lsls	r5, r3, #5
 800b9b4:	d453      	bmi.n	800ba5e <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b9b6:	01dc      	lsls	r4, r3, #7
 800b9b8:	d45f      	bmi.n	800ba7a <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9ba:	0218      	lsls	r0, r3, #8
 800b9bc:	d456      	bmi.n	800ba6c <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9be:	025a      	lsls	r2, r3, #9
 800b9c0:	d469      	bmi.n	800ba96 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9c2:	029d      	lsls	r5, r3, #10
 800b9c4:	d460      	bmi.n	800ba88 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9c6:	02dc      	lsls	r4, r3, #11
 800b9c8:	d47a      	bmi.n	800bac0 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9ca:	0358      	lsls	r0, r3, #13
 800b9cc:	d471      	bmi.n	800bab2 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9ce:	039a      	lsls	r2, r3, #14
 800b9d0:	d468      	bmi.n	800baa4 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9d2:	03dd      	lsls	r5, r3, #15
 800b9d4:	f100 8090 	bmi.w	800baf8 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9d8:	041c      	lsls	r4, r3, #16
 800b9da:	d47f      	bmi.n	800badc <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9dc:	0458      	lsls	r0, r3, #17
 800b9de:	d476      	bmi.n	800bace <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9e0:	049a      	lsls	r2, r3, #18
 800b9e2:	f100 8082 	bmi.w	800baea <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b9e6:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b9ea:	68cb      	ldr	r3, [r1, #12]
 800b9ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b9f0:	bf14      	ite	ne
 800b9f2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9f6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b9fa:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b9fc:	e7bb      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9fe:	2301      	movs	r3, #1
 800ba00:	638b      	str	r3, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba02:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba04:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800ba0a:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba0c:	60cb      	str	r3, [r1, #12]
}
 800ba0e:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba10:	68cb      	ldr	r3, [r1, #12]
 800ba12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800ba16:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba18:	60cb      	str	r3, [r1, #12]
}
 800ba1a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba1c:	2004      	movs	r0, #4
 800ba1e:	6388      	str	r0, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba20:	68cb      	ldr	r3, [r1, #12]
 800ba22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba26:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba28:	e7a5      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba2a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba2c:	2040      	movs	r0, #64	@ 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba32:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba34:	e79f      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba36:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba38:	2080      	movs	r0, #128	@ 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba3e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba40:	e799      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba42:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba44:	f44f 7080 	mov.w	r0, #256	@ 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba4c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba4e:	e792      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba50:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba52:	f44f 7000 	mov.w	r0, #512	@ 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba5a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba5c:	e78b      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba5e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba68:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba6a:	e784      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba6c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba6e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba76:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba78:	e77d      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba7a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba7c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba84:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba86:	e776      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba88:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba8a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba92:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ba94:	e76f      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba96:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baa0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800baa2:	e768      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baa4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800baa6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baae:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bab0:	e761      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bab2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bab4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800babc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800babe:	e75a      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bac0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800bac2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baca:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bacc:	e753      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bace:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bad0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bad8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bada:	e74c      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800badc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bade:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bae6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bae8:	e745      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baea:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800baec:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baf4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800baf6:	e73e      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baf8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bafa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bafe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb02:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb04:	e737      	b.n	800b976 <SDMMC_CmdStopTransfer+0x5a>
 800bb06:	bf00      	nop
 800bb08:	2400000c 	.word	0x2400000c
 800bb0c:	fffee0c0 	.word	0xfffee0c0
 800bb10:	10624dd3 	.word	0x10624dd3
 800bb14:	05f5e100 	.word	0x05f5e100
 800bb18:	00200045 	.word	0x00200045
 800bb1c:	002000c5 	.word	0x002000c5
 800bb20:	fdffe008 	.word	0xfdffe008

0800bb24 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb24:	4a4f      	ldr	r2, [pc, #316]	@ (800bc64 <SDMMC_CmdSelDesel+0x140>)
{
 800bb26:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb28:	4b4f      	ldr	r3, [pc, #316]	@ (800bc68 <SDMMC_CmdSelDesel+0x144>)
 800bb2a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bb2c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb30:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb34:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bb38:	484c      	ldr	r0, [pc, #304]	@ (800bc6c <SDMMC_CmdSelDesel+0x148>)
 800bb3a:	f241 1307 	movw	r3, #4359	@ 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb3e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb40:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb42:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb46:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb48:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bb4c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bb50:	1e53      	subs	r3, r2, #1
 800bb52:	b14a      	cbz	r2, 800bb68 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bb54:	4946      	ldr	r1, [pc, #280]	@ (800bc70 <SDMMC_CmdSelDesel+0x14c>)
    sta_reg = SDMMCx->STA;
 800bb56:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800bb5a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb5c:	420a      	tst	r2, r1
 800bb5e:	d001      	beq.n	800bb64 <SDMMC_CmdSelDesel+0x40>
 800bb60:	0492      	lsls	r2, r2, #18
 800bb62:	d504      	bpl.n	800bb6e <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800bb64:	1c58      	adds	r0, r3, #1
 800bb66:	d1f6      	bne.n	800bb56 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bb68:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800bb6c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb6e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800bb72:	075b      	lsls	r3, r3, #29
 800bb74:	d443      	bmi.n	800bbfe <SDMMC_CmdSelDesel+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb76:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800bb7a:	07d8      	lsls	r0, r3, #31
 800bb7c:	d409      	bmi.n	800bb92 <SDMMC_CmdSelDesel+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb7e:	4b3d      	ldr	r3, [pc, #244]	@ (800bc74 <SDMMC_CmdSelDesel+0x150>)
 800bb80:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bb84:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b07      	cmp	r3, #7
 800bb8c:	d005      	beq.n	800bb9a <SDMMC_CmdSelDesel+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb8e:	2001      	movs	r0, #1
 800bb90:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb92:	2301      	movs	r3, #1
 800bb94:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb98:	e7f9      	b.n	800bb8e <SDMMC_CmdSelDesel+0x6a>
  return (*(__IO uint32_t *) tmp);
 800bb9a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb9e:	4836      	ldr	r0, [pc, #216]	@ (800bc78 <SDMMC_CmdSelDesel+0x154>)
 800bba0:	4018      	ands	r0, r3
 800bba2:	b358      	cbz	r0, 800bbfc <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	db2f      	blt.n	800bc08 <SDMMC_CmdSelDesel+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bba8:	0059      	lsls	r1, r3, #1
 800bbaa:	d430      	bmi.n	800bc0e <SDMMC_CmdSelDesel+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bbac:	009a      	lsls	r2, r3, #2
 800bbae:	d430      	bmi.n	800bc12 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bbb0:	00d9      	lsls	r1, r3, #3
 800bbb2:	d430      	bmi.n	800bc16 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bbb4:	011a      	lsls	r2, r3, #4
 800bbb6:	d431      	bmi.n	800bc1c <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bbb8:	0159      	lsls	r1, r3, #5
 800bbba:	d432      	bmi.n	800bc22 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bbbc:	01da      	lsls	r2, r3, #7
 800bbbe:	d433      	bmi.n	800bc28 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bbc0:	0219      	lsls	r1, r3, #8
 800bbc2:	d434      	bmi.n	800bc2e <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bbc4:	025a      	lsls	r2, r3, #9
 800bbc6:	d435      	bmi.n	800bc34 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bbc8:	0299      	lsls	r1, r3, #10
 800bbca:	d43f      	bmi.n	800bc4c <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bbcc:	02da      	lsls	r2, r3, #11
 800bbce:	d43a      	bmi.n	800bc46 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbd0:	0359      	lsls	r1, r3, #13
 800bbd2:	d435      	bmi.n	800bc40 <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbd4:	039a      	lsls	r2, r3, #14
 800bbd6:	d430      	bmi.n	800bc3a <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bbd8:	03d9      	lsls	r1, r3, #15
 800bbda:	d440      	bmi.n	800bc5e <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bbdc:	041a      	lsls	r2, r3, #16
 800bbde:	d43b      	bmi.n	800bc58 <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bbe0:	0459      	lsls	r1, r3, #17
 800bbe2:	d436      	bmi.n	800bc52 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bbe4:	049a      	lsls	r2, r3, #18
 800bbe6:	d407      	bmi.n	800bbf8 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bbe8:	f013 0f08 	tst.w	r3, #8
 800bbec:	bf0c      	ite	eq
 800bbee:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800bbf2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800bbf6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bbf8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800bbfc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbfe:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc00:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc02:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc06:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bc08:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800bc0c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bc0e:	2040      	movs	r0, #64	@ 0x40
 800bc10:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bc12:	2080      	movs	r0, #128	@ 0x80
 800bc14:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bc16:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800bc1a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bc1c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bc20:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bc22:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800bc26:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc28:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bc2c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc2e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800bc32:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800bc38:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc3a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800bc3e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc40:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800bc44:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bc46:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bc4a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bc4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800bc50:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bc52:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800bc56:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bc58:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bc5c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc5e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bc62:	4770      	bx	lr
 800bc64:	2400000c 	.word	0x2400000c
 800bc68:	10624dd3 	.word	0x10624dd3
 800bc6c:	fffee0c0 	.word	0xfffee0c0
 800bc70:	00200045 	.word	0x00200045
 800bc74:	002000c5 	.word	0x002000c5
 800bc78:	fdffe008 	.word	0xfdffe008

0800bc7c <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc7c:	4b11      	ldr	r3, [pc, #68]	@ (800bcc4 <SDMMC_CmdGoIdleState+0x48>)
{
 800bc7e:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc80:	4a11      	ldr	r2, [pc, #68]	@ (800bcc8 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc82:	681b      	ldr	r3, [r3, #0]
{
 800bc84:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc86:	4c11      	ldr	r4, [pc, #68]	@ (800bccc <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800bc88:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc8a:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 800bc8e:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc90:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc92:	0a5b      	lsrs	r3, r3, #9
 800bc94:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc98:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc9a:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc9e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bca2:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bca4:	e002      	b.n	800bcac <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bca6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800bca8:	0612      	lsls	r2, r2, #24
 800bcaa:	d405      	bmi.n	800bcb8 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800bcac:	3b01      	subs	r3, #1
 800bcae:	d2fa      	bcs.n	800bca6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800bcb0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bcb4:	bc30      	pop	{r4, r5}
 800bcb6:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcb8:	4b05      	ldr	r3, [pc, #20]	@ (800bcd0 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800bcba:	2000      	movs	r0, #0
}
 800bcbc:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcbe:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	2400000c 	.word	0x2400000c
 800bcc8:	fffee0c0 	.word	0xfffee0c0
 800bccc:	10624dd3 	.word	0x10624dd3
 800bcd0:	002000c5 	.word	0x002000c5

0800bcd4 <SDMMC_CmdOperCond>:
{
 800bcd4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcd6:	4a1c      	ldr	r2, [pc, #112]	@ (800bd48 <SDMMC_CmdOperCond+0x74>)
 800bcd8:	4b1c      	ldr	r3, [pc, #112]	@ (800bd4c <SDMMC_CmdOperCond+0x78>)
 800bcda:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcdc:	481c      	ldr	r0, [pc, #112]	@ (800bd50 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcde:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bce2:	f241 1308 	movw	r3, #4360	@ 0x1108
{
 800bce6:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800bce8:	f44f 74d5 	mov.w	r4, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcec:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800bcee:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcf0:	68cc      	ldr	r4, [r1, #12]
 800bcf2:	4020      	ands	r0, r4
 800bcf4:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcf6:	f241 3088 	movw	r0, #5000	@ 0x1388
 800bcfa:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bcfe:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800bd00:	b14a      	cbz	r2, 800bd16 <SDMMC_CmdOperCond+0x42>
 800bd02:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bd04:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800bd06:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd08:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bd0c:	d001      	beq.n	800bd12 <SDMMC_CmdOperCond+0x3e>
 800bd0e:	0490      	lsls	r0, r2, #18
 800bd10:	d506      	bpl.n	800bd20 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800bd12:	1c5c      	adds	r4, r3, #1
 800bd14:	d1f6      	bne.n	800bd04 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800bd16:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd1e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd20:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bd22:	075a      	lsls	r2, r3, #29
 800bd24:	d40c      	bmi.n	800bd40 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd26:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800bd28:	f010 0001 	ands.w	r0, r0, #1
 800bd2c:	d105      	bne.n	800bd3a <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bd2e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800bd30:	065b      	lsls	r3, r3, #25
 800bd32:	d5f2      	bpl.n	800bd1a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bd34:	2340      	movs	r3, #64	@ 0x40
 800bd36:	638b      	str	r3, [r1, #56]	@ 0x38
 800bd38:	e7ef      	b.n	800bd1a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd3e:	e7ec      	b.n	800bd1a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd40:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd42:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd44:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd46:	e7e8      	b.n	800bd1a <SDMMC_CmdOperCond+0x46>
 800bd48:	2400000c 	.word	0x2400000c
 800bd4c:	10624dd3 	.word	0x10624dd3
 800bd50:	fffee0c0 	.word	0xfffee0c0

0800bd54 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd54:	4a4f      	ldr	r2, [pc, #316]	@ (800be94 <SDMMC_CmdAppCommand+0x140>)
{
 800bd56:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd58:	4b4f      	ldr	r3, [pc, #316]	@ (800be98 <SDMMC_CmdAppCommand+0x144>)
 800bd5a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bd5c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd60:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd64:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bd68:	484c      	ldr	r0, [pc, #304]	@ (800be9c <SDMMC_CmdAppCommand+0x148>)
 800bd6a:	f241 1337 	movw	r3, #4407	@ 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd6e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd70:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd72:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd76:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd78:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd7c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bd80:	1e53      	subs	r3, r2, #1
 800bd82:	b14a      	cbz	r2, 800bd98 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd84:	4946      	ldr	r1, [pc, #280]	@ (800bea0 <SDMMC_CmdAppCommand+0x14c>)
    sta_reg = SDMMCx->STA;
 800bd86:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800bd8a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd8c:	420a      	tst	r2, r1
 800bd8e:	d001      	beq.n	800bd94 <SDMMC_CmdAppCommand+0x40>
 800bd90:	0492      	lsls	r2, r2, #18
 800bd92:	d504      	bpl.n	800bd9e <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800bd94:	1c58      	adds	r0, r3, #1
 800bd96:	d1f6      	bne.n	800bd86 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bd98:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800bd9c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd9e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800bda2:	075b      	lsls	r3, r3, #29
 800bda4:	d443      	bmi.n	800be2e <SDMMC_CmdAppCommand+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bda6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800bdaa:	07d8      	lsls	r0, r3, #31
 800bdac:	d409      	bmi.n	800bdc2 <SDMMC_CmdAppCommand+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdae:	4b3d      	ldr	r3, [pc, #244]	@ (800bea4 <SDMMC_CmdAppCommand+0x150>)
 800bdb0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bdb4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b37      	cmp	r3, #55	@ 0x37
 800bdbc:	d005      	beq.n	800bdca <SDMMC_CmdAppCommand+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdbe:	2001      	movs	r0, #1
 800bdc0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdc8:	e7f9      	b.n	800bdbe <SDMMC_CmdAppCommand+0x6a>
  return (*(__IO uint32_t *) tmp);
 800bdca:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdce:	4836      	ldr	r0, [pc, #216]	@ (800bea8 <SDMMC_CmdAppCommand+0x154>)
 800bdd0:	4018      	ands	r0, r3
 800bdd2:	b358      	cbz	r0, 800be2c <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	db2f      	blt.n	800be38 <SDMMC_CmdAppCommand+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdd8:	0059      	lsls	r1, r3, #1
 800bdda:	d430      	bmi.n	800be3e <SDMMC_CmdAppCommand+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bddc:	009a      	lsls	r2, r3, #2
 800bdde:	d430      	bmi.n	800be42 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bde0:	00d9      	lsls	r1, r3, #3
 800bde2:	d430      	bmi.n	800be46 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bde4:	011a      	lsls	r2, r3, #4
 800bde6:	d431      	bmi.n	800be4c <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bde8:	0159      	lsls	r1, r3, #5
 800bdea:	d432      	bmi.n	800be52 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bdec:	01da      	lsls	r2, r3, #7
 800bdee:	d433      	bmi.n	800be58 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bdf0:	0219      	lsls	r1, r3, #8
 800bdf2:	d434      	bmi.n	800be5e <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bdf4:	025a      	lsls	r2, r3, #9
 800bdf6:	d435      	bmi.n	800be64 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bdf8:	0299      	lsls	r1, r3, #10
 800bdfa:	d43f      	bmi.n	800be7c <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bdfc:	02da      	lsls	r2, r3, #11
 800bdfe:	d43a      	bmi.n	800be76 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be00:	0359      	lsls	r1, r3, #13
 800be02:	d435      	bmi.n	800be70 <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be04:	039a      	lsls	r2, r3, #14
 800be06:	d430      	bmi.n	800be6a <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be08:	03d9      	lsls	r1, r3, #15
 800be0a:	d440      	bmi.n	800be8e <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be0c:	041a      	lsls	r2, r3, #16
 800be0e:	d43b      	bmi.n	800be88 <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be10:	0459      	lsls	r1, r3, #17
 800be12:	d436      	bmi.n	800be82 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be14:	049a      	lsls	r2, r3, #18
 800be16:	d407      	bmi.n	800be28 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800be18:	f013 0f08 	tst.w	r3, #8
 800be1c:	bf0c      	ite	eq
 800be1e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800be22:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800be26:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800be28:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800be2c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be2e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be30:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be32:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be36:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be38:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800be3c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be3e:	2040      	movs	r0, #64	@ 0x40
 800be40:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be42:	2080      	movs	r0, #128	@ 0x80
 800be44:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be46:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800be4a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be4c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800be50:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be52:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800be56:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800be5c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be5e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800be62:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800be68:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be6a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800be6e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be70:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800be74:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800be76:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800be7a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be7c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800be80:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be82:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800be86:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be88:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800be8c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be8e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800be92:	4770      	bx	lr
 800be94:	2400000c 	.word	0x2400000c
 800be98:	10624dd3 	.word	0x10624dd3
 800be9c:	fffee0c0 	.word	0xfffee0c0
 800bea0:	00200045 	.word	0x00200045
 800bea4:	002000c5 	.word	0x002000c5
 800bea8:	fdffe008 	.word	0xfdffe008

0800beac <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800beac:	4a19      	ldr	r2, [pc, #100]	@ (800bf14 <SDMMC_CmdAppOperCommand+0x68>)
{
 800beae:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800beb0:	4b19      	ldr	r3, [pc, #100]	@ (800bf18 <SDMMC_CmdAppOperCommand+0x6c>)
 800beb2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800beb4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800beb8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bebc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bec0:	4816      	ldr	r0, [pc, #88]	@ (800bf1c <SDMMC_CmdAppOperCommand+0x70>)
 800bec2:	f241 1329 	movw	r3, #4393	@ 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bec6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bec8:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800beca:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bece:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bed0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bed4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bed8:	1e53      	subs	r3, r2, #1
 800beda:	b14a      	cbz	r2, 800bef0 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800bedc:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800bee0:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bee2:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800bee6:	d001      	beq.n	800beec <SDMMC_CmdAppOperCommand+0x40>
 800bee8:	0492      	lsls	r2, r2, #18
 800beea:	d504      	bpl.n	800bef6 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800beec:	1c59      	adds	r1, r3, #1
 800beee:	d1f5      	bne.n	800bedc <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800bef0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800bef4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bef6:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800befa:	f010 0004 	ands.w	r0, r0, #4
 800befe:	d103      	bne.n	800bf08 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf00:	4b07      	ldr	r3, [pc, #28]	@ (800bf20 <SDMMC_CmdAppOperCommand+0x74>)
 800bf02:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800bf06:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf08:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf0a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf0c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	2400000c 	.word	0x2400000c
 800bf18:	10624dd3 	.word	0x10624dd3
 800bf1c:	fffee0c0 	.word	0xfffee0c0
 800bf20:	002000c5 	.word	0x002000c5

0800bf24 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bf24:	4a4f      	ldr	r2, [pc, #316]	@ (800c064 <SDMMC_CmdBusWidth+0x140>)
{
 800bf26:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bf28:	4b4f      	ldr	r3, [pc, #316]	@ (800c068 <SDMMC_CmdBusWidth+0x144>)
 800bf2a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bf2c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bf30:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf34:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bf38:	484c      	ldr	r0, [pc, #304]	@ (800c06c <SDMMC_CmdBusWidth+0x148>)
 800bf3a:	f241 1306 	movw	r3, #4358	@ 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bf3e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf40:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bf42:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf46:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bf48:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf4c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bf50:	1e53      	subs	r3, r2, #1
 800bf52:	b14a      	cbz	r2, 800bf68 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bf54:	4946      	ldr	r1, [pc, #280]	@ (800c070 <SDMMC_CmdBusWidth+0x14c>)
    sta_reg = SDMMCx->STA;
 800bf56:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800bf5a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf5c:	420a      	tst	r2, r1
 800bf5e:	d001      	beq.n	800bf64 <SDMMC_CmdBusWidth+0x40>
 800bf60:	0492      	lsls	r2, r2, #18
 800bf62:	d504      	bpl.n	800bf6e <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800bf64:	1c58      	adds	r0, r3, #1
 800bf66:	d1f6      	bne.n	800bf56 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bf68:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800bf6c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf6e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800bf72:	075b      	lsls	r3, r3, #29
 800bf74:	d443      	bmi.n	800bffe <SDMMC_CmdBusWidth+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf76:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800bf7a:	07d8      	lsls	r0, r3, #31
 800bf7c:	d409      	bmi.n	800bf92 <SDMMC_CmdBusWidth+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf7e:	4b3d      	ldr	r3, [pc, #244]	@ (800c074 <SDMMC_CmdBusWidth+0x150>)
 800bf80:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bf84:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b06      	cmp	r3, #6
 800bf8c:	d005      	beq.n	800bf9a <SDMMC_CmdBusWidth+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf8e:	2001      	movs	r0, #1
 800bf90:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf92:	2301      	movs	r3, #1
 800bf94:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf98:	e7f9      	b.n	800bf8e <SDMMC_CmdBusWidth+0x6a>
  return (*(__IO uint32_t *) tmp);
 800bf9a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bf9e:	4836      	ldr	r0, [pc, #216]	@ (800c078 <SDMMC_CmdBusWidth+0x154>)
 800bfa0:	4018      	ands	r0, r3
 800bfa2:	b358      	cbz	r0, 800bffc <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	db2f      	blt.n	800c008 <SDMMC_CmdBusWidth+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bfa8:	0059      	lsls	r1, r3, #1
 800bfaa:	d430      	bmi.n	800c00e <SDMMC_CmdBusWidth+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bfac:	009a      	lsls	r2, r3, #2
 800bfae:	d430      	bmi.n	800c012 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bfb0:	00d9      	lsls	r1, r3, #3
 800bfb2:	d430      	bmi.n	800c016 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bfb4:	011a      	lsls	r2, r3, #4
 800bfb6:	d431      	bmi.n	800c01c <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bfb8:	0159      	lsls	r1, r3, #5
 800bfba:	d432      	bmi.n	800c022 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bfbc:	01da      	lsls	r2, r3, #7
 800bfbe:	d433      	bmi.n	800c028 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bfc0:	0219      	lsls	r1, r3, #8
 800bfc2:	d434      	bmi.n	800c02e <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bfc4:	025a      	lsls	r2, r3, #9
 800bfc6:	d435      	bmi.n	800c034 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bfc8:	0299      	lsls	r1, r3, #10
 800bfca:	d43f      	bmi.n	800c04c <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bfcc:	02da      	lsls	r2, r3, #11
 800bfce:	d43a      	bmi.n	800c046 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bfd0:	0359      	lsls	r1, r3, #13
 800bfd2:	d435      	bmi.n	800c040 <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bfd4:	039a      	lsls	r2, r3, #14
 800bfd6:	d430      	bmi.n	800c03a <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bfd8:	03d9      	lsls	r1, r3, #15
 800bfda:	d440      	bmi.n	800c05e <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bfdc:	041a      	lsls	r2, r3, #16
 800bfde:	d43b      	bmi.n	800c058 <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bfe0:	0459      	lsls	r1, r3, #17
 800bfe2:	d436      	bmi.n	800c052 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bfe4:	049a      	lsls	r2, r3, #18
 800bfe6:	d407      	bmi.n	800bff8 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bfe8:	f013 0f08 	tst.w	r3, #8
 800bfec:	bf0c      	ite	eq
 800bfee:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800bff2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800bff6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bff8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800bffc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bffe:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c000:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c002:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c006:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c008:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800c00c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c00e:	2040      	movs	r0, #64	@ 0x40
 800c010:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c012:	2080      	movs	r0, #128	@ 0x80
 800c014:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c016:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c01a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c01c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c020:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c022:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800c026:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c028:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c02c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c02e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c032:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c034:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c038:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c03a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800c03e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c040:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800c044:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c046:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c04a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c04c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c050:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c052:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c056:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c058:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c05c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c05e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c062:	4770      	bx	lr
 800c064:	2400000c 	.word	0x2400000c
 800c068:	10624dd3 	.word	0x10624dd3
 800c06c:	fffee0c0 	.word	0xfffee0c0
 800c070:	00200045 	.word	0x00200045
 800c074:	002000c5 	.word	0x002000c5
 800c078:	fdffe008 	.word	0xfdffe008

0800c07c <SDMMC_CmdSendSCR>:
{
 800c07c:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c07e:	4a4c      	ldr	r2, [pc, #304]	@ (800c1b0 <SDMMC_CmdSendSCR+0x134>)
 800c080:	4b4c      	ldr	r3, [pc, #304]	@ (800c1b4 <SDMMC_CmdSendSCR+0x138>)
 800c082:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c084:	484c      	ldr	r0, [pc, #304]	@ (800c1b8 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c086:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c08a:	f241 1333 	movw	r3, #4403	@ 0x1133
{
 800c08e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c090:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c092:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800c094:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c096:	68cc      	ldr	r4, [r1, #12]
 800c098:	4020      	ands	r0, r4
 800c09a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c09c:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c0a0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c0a4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c0a6:	b14a      	cbz	r2, 800c0bc <SDMMC_CmdSendSCR+0x40>
 800c0a8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c0aa:	4844      	ldr	r0, [pc, #272]	@ (800c1bc <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 800c0ac:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800c0ae:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c0b0:	4202      	tst	r2, r0
 800c0b2:	d001      	beq.n	800c0b8 <SDMMC_CmdSendSCR+0x3c>
 800c0b4:	0492      	lsls	r2, r2, #18
 800c0b6:	d506      	bpl.n	800c0c6 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800c0b8:	1c5c      	adds	r4, r3, #1
 800c0ba:	d1f7      	bne.n	800c0ac <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c0bc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0c4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0c6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c0c8:	075c      	lsls	r4, r3, #29
 800c0ca:	d43c      	bmi.n	800c146 <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0cc:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c0ce:	07d8      	lsls	r0, r3, #31
 800c0d0:	d407      	bmi.n	800c0e2 <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0d2:	4b3b      	ldr	r3, [pc, #236]	@ (800c1c0 <SDMMC_CmdSendSCR+0x144>)
 800c0d4:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c0d6:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b33      	cmp	r3, #51	@ 0x33
 800c0dc:	d004      	beq.n	800c0e8 <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e7ee      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0e6:	e7fa      	b.n	800c0de <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 800c0e8:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c0ea:	4836      	ldr	r0, [pc, #216]	@ (800c1c4 <SDMMC_CmdSendSCR+0x148>)
 800c0ec:	4018      	ands	r0, r3
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d0e6      	beq.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	db2b      	blt.n	800c14e <SDMMC_CmdSendSCR+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0f6:	005a      	lsls	r2, r3, #1
 800c0f8:	d42c      	bmi.n	800c154 <SDMMC_CmdSendSCR+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c0fa:	009c      	lsls	r4, r3, #2
 800c0fc:	d42c      	bmi.n	800c158 <SDMMC_CmdSendSCR+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c0fe:	00d9      	lsls	r1, r3, #3
 800c100:	d42c      	bmi.n	800c15c <SDMMC_CmdSendSCR+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c102:	011a      	lsls	r2, r3, #4
 800c104:	d42d      	bmi.n	800c162 <SDMMC_CmdSendSCR+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c106:	015c      	lsls	r4, r3, #5
 800c108:	d42e      	bmi.n	800c168 <SDMMC_CmdSendSCR+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c10a:	01d9      	lsls	r1, r3, #7
 800c10c:	d42f      	bmi.n	800c16e <SDMMC_CmdSendSCR+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c10e:	021a      	lsls	r2, r3, #8
 800c110:	d430      	bmi.n	800c174 <SDMMC_CmdSendSCR+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c112:	025c      	lsls	r4, r3, #9
 800c114:	d431      	bmi.n	800c17a <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c116:	0299      	lsls	r1, r3, #10
 800c118:	d43b      	bmi.n	800c192 <SDMMC_CmdSendSCR+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c11a:	02da      	lsls	r2, r3, #11
 800c11c:	d436      	bmi.n	800c18c <SDMMC_CmdSendSCR+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c11e:	035c      	lsls	r4, r3, #13
 800c120:	d431      	bmi.n	800c186 <SDMMC_CmdSendSCR+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c122:	0399      	lsls	r1, r3, #14
 800c124:	d42c      	bmi.n	800c180 <SDMMC_CmdSendSCR+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c126:	03da      	lsls	r2, r3, #15
 800c128:	d43f      	bmi.n	800c1aa <SDMMC_CmdSendSCR+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c12a:	041c      	lsls	r4, r3, #16
 800c12c:	d43a      	bmi.n	800c1a4 <SDMMC_CmdSendSCR+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c12e:	0459      	lsls	r1, r3, #17
 800c130:	d435      	bmi.n	800c19e <SDMMC_CmdSendSCR+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c132:	049a      	lsls	r2, r3, #18
 800c134:	d430      	bmi.n	800c198 <SDMMC_CmdSendSCR+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c136:	f013 0f08 	tst.w	r3, #8
 800c13a:	bf0c      	ite	eq
 800c13c:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800c140:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800c144:	e7bc      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c146:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c148:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c14a:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c14c:	e7b8      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c14e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800c152:	e7b5      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c154:	2040      	movs	r0, #64	@ 0x40
 800c156:	e7b3      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c158:	2080      	movs	r0, #128	@ 0x80
 800c15a:	e7b1      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c15c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c160:	e7ae      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c162:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c166:	e7ab      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c168:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800c16c:	e7a8      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c16e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c172:	e7a5      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c174:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c178:	e7a2      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c17a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c17e:	e79f      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c180:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800c184:	e79c      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c186:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800c18a:	e799      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c18c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c190:	e796      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c192:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c196:	e793      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c198:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800c19c:	e790      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c19e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c1a2:	e78d      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c1a4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c1a8:	e78a      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1aa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c1ae:	e787      	b.n	800c0c0 <SDMMC_CmdSendSCR+0x44>
 800c1b0:	2400000c 	.word	0x2400000c
 800c1b4:	10624dd3 	.word	0x10624dd3
 800c1b8:	fffee0c0 	.word	0xfffee0c0
 800c1bc:	00200045 	.word	0x00200045
 800c1c0:	002000c5 	.word	0x002000c5
 800c1c4:	fdffe008 	.word	0xfdffe008

0800c1c8 <SDMMC_CmdSendCID>:
{
 800c1c8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1ca:	4a1a      	ldr	r2, [pc, #104]	@ (800c234 <SDMMC_CmdSendCID+0x6c>)
 800c1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c238 <SDMMC_CmdSendCID+0x70>)
 800c1ce:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1d0:	481a      	ldr	r0, [pc, #104]	@ (800c23c <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1d2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1d6:	f241 3302 	movw	r3, #4866	@ 0x1302
{
 800c1da:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c1dc:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1de:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800c1e0:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1e2:	68cc      	ldr	r4, [r1, #12]
 800c1e4:	4020      	ands	r0, r4
 800c1e6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1e8:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c1ec:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c1f0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c1f2:	b14a      	cbz	r2, 800c208 <SDMMC_CmdSendCID+0x40>
 800c1f4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c1f6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800c1f8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1fa:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c1fe:	d001      	beq.n	800c204 <SDMMC_CmdSendCID+0x3c>
 800c200:	0492      	lsls	r2, r2, #18
 800c202:	d506      	bpl.n	800c212 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800c204:	1c58      	adds	r0, r3, #1
 800c206:	d1f6      	bne.n	800c1f6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c208:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c20c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c210:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c212:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c214:	075b      	lsls	r3, r3, #29
 800c216:	d409      	bmi.n	800c22c <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c218:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800c21a:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c21e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c222:	bf14      	ite	ne
 800c224:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c226:	4b06      	ldreq	r3, [pc, #24]	@ (800c240 <SDMMC_CmdSendCID+0x78>)
 800c228:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800c22a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c22c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c22e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c230:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c232:	e7eb      	b.n	800c20c <SDMMC_CmdSendCID+0x44>
 800c234:	2400000c 	.word	0x2400000c
 800c238:	10624dd3 	.word	0x10624dd3
 800c23c:	fffee0c0 	.word	0xfffee0c0
 800c240:	002000c5 	.word	0x002000c5

0800c244 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c244:	4a1b      	ldr	r2, [pc, #108]	@ (800c2b4 <SDMMC_CmdSendCSD+0x70>)
{
 800c246:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c248:	4b1b      	ldr	r3, [pc, #108]	@ (800c2b8 <SDMMC_CmdSendCSD+0x74>)
 800c24a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c24c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c250:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c254:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c258:	4818      	ldr	r0, [pc, #96]	@ (800c2bc <SDMMC_CmdSendCSD+0x78>)
 800c25a:	f241 3309 	movw	r3, #4873	@ 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c25e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c260:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c262:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c266:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c268:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c26c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c270:	1e53      	subs	r3, r2, #1
 800c272:	b14a      	cbz	r2, 800c288 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800c274:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800c278:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c27a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c27e:	d001      	beq.n	800c284 <SDMMC_CmdSendCSD+0x40>
 800c280:	0492      	lsls	r2, r2, #18
 800c282:	d504      	bpl.n	800c28e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800c284:	1c59      	adds	r1, r3, #1
 800c286:	d1f5      	bne.n	800c274 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c288:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c28c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c28e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c292:	075b      	lsls	r3, r3, #29
 800c294:	d409      	bmi.n	800c2aa <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c296:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800c29a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c29e:	bf14      	ite	ne
 800c2a0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2a2:	4b07      	ldreq	r3, [pc, #28]	@ (800c2c0 <SDMMC_CmdSendCSD+0x7c>)
 800c2a4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800c2a8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2aa:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2ac:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2ae:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2b2:	4770      	bx	lr
 800c2b4:	2400000c 	.word	0x2400000c
 800c2b8:	10624dd3 	.word	0x10624dd3
 800c2bc:	fffee0c0 	.word	0xfffee0c0
 800c2c0:	002000c5 	.word	0x002000c5

0800c2c4 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800c2c4:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2c6:	4a2b      	ldr	r2, [pc, #172]	@ (800c374 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800c2c8:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2ca:	6812      	ldr	r2, [r2, #0]
{
 800c2cc:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c2ce:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2d0:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2d2:	4829      	ldr	r0, [pc, #164]	@ (800c378 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2d4:	4c29      	ldr	r4, [pc, #164]	@ (800c37c <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2d6:	fba0 0202 	umull	r0, r2, r0, r2
 800c2da:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2de:	401c      	ands	r4, r3
 800c2e0:	f241 1303 	movw	r3, #4355	@ 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2e4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2e6:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2e8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2ec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c2f0:	b152      	cbz	r2, 800c308 <SDMMC_CmdSetRelAdd+0x44>
 800c2f2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c2f4:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800c2f8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2fa:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c2fe:	d001      	beq.n	800c304 <SDMMC_CmdSetRelAdd+0x40>
 800c300:	0492      	lsls	r2, r2, #18
 800c302:	d506      	bpl.n	800c312 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800c304:	1c58      	adds	r0, r3, #1
 800c306:	d1f5      	bne.n	800c2f4 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c308:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c310:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c312:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c316:	075c      	lsls	r4, r3, #29
 800c318:	d420      	bmi.n	800c35c <SDMMC_CmdSetRelAdd+0x98>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c31a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c31e:	07d8      	lsls	r0, r3, #31
 800c320:	d406      	bmi.n	800c330 <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c322:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d005      	beq.n	800c338 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c32c:	2001      	movs	r0, #1
 800c32e:	e7ed      	b.n	800c30c <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c330:	2301      	movs	r3, #1
 800c332:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c336:	e7f9      	b.n	800c32c <SDMMC_CmdSetRelAdd+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c338:	4b11      	ldr	r3, [pc, #68]	@ (800c380 <SDMMC_CmdSetRelAdd+0xbc>)
 800c33a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800c33e:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c342:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800c346:	d011      	beq.n	800c36c <SDMMC_CmdSetRelAdd+0xa8>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c348:	045a      	lsls	r2, r3, #17
 800c34a:	d40c      	bmi.n	800c366 <SDMMC_CmdSetRelAdd+0xa2>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c34c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800c350:	bf0c      	ite	eq
 800c352:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800c356:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800c35a:	e7d7      	b.n	800c30c <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c35c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c35e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c360:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c364:	e7d2      	b.n	800c30c <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c366:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c36a:	e7cf      	b.n	800c30c <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c36c:	0c1b      	lsrs	r3, r3, #16
 800c36e:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800c370:	e7cc      	b.n	800c30c <SDMMC_CmdSetRelAdd+0x48>
 800c372:	bf00      	nop
 800c374:	2400000c 	.word	0x2400000c
 800c378:	10624dd3 	.word	0x10624dd3
 800c37c:	fffee0c0 	.word	0xfffee0c0
 800c380:	002000c5 	.word	0x002000c5

0800c384 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c384:	4a4f      	ldr	r2, [pc, #316]	@ (800c4c4 <SDMMC_CmdSendStatus+0x140>)
{
 800c386:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c388:	4b4f      	ldr	r3, [pc, #316]	@ (800c4c8 <SDMMC_CmdSendStatus+0x144>)
 800c38a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c38c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c390:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c394:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c398:	484c      	ldr	r0, [pc, #304]	@ (800c4cc <SDMMC_CmdSendStatus+0x148>)
 800c39a:	f241 130d 	movw	r3, #4365	@ 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c39e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3a0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c3a2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3a6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c3a8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3ac:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c3b0:	1e53      	subs	r3, r2, #1
 800c3b2:	b14a      	cbz	r2, 800c3c8 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c3b4:	4946      	ldr	r1, [pc, #280]	@ (800c4d0 <SDMMC_CmdSendStatus+0x14c>)
    sta_reg = SDMMCx->STA;
 800c3b6:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800c3ba:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c3bc:	420a      	tst	r2, r1
 800c3be:	d001      	beq.n	800c3c4 <SDMMC_CmdSendStatus+0x40>
 800c3c0:	0492      	lsls	r2, r2, #18
 800c3c2:	d504      	bpl.n	800c3ce <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800c3c4:	1c58      	adds	r0, r3, #1
 800c3c6:	d1f6      	bne.n	800c3b6 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c3c8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c3cc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3ce:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c3d2:	075b      	lsls	r3, r3, #29
 800c3d4:	d443      	bmi.n	800c45e <SDMMC_CmdSendStatus+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3d6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c3da:	07d8      	lsls	r0, r3, #31
 800c3dc:	d409      	bmi.n	800c3f2 <SDMMC_CmdSendStatus+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3de:	4b3d      	ldr	r3, [pc, #244]	@ (800c4d4 <SDMMC_CmdSendStatus+0x150>)
 800c3e0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c3e4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b0d      	cmp	r3, #13
 800c3ec:	d005      	beq.n	800c3fa <SDMMC_CmdSendStatus+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3ee:	2001      	movs	r0, #1
 800c3f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3f8:	e7f9      	b.n	800c3ee <SDMMC_CmdSendStatus+0x6a>
  return (*(__IO uint32_t *) tmp);
 800c3fa:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c3fe:	4836      	ldr	r0, [pc, #216]	@ (800c4d8 <SDMMC_CmdSendStatus+0x154>)
 800c400:	4018      	ands	r0, r3
 800c402:	b358      	cbz	r0, 800c45c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c404:	2b00      	cmp	r3, #0
 800c406:	db2f      	blt.n	800c468 <SDMMC_CmdSendStatus+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c408:	0059      	lsls	r1, r3, #1
 800c40a:	d430      	bmi.n	800c46e <SDMMC_CmdSendStatus+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c40c:	009a      	lsls	r2, r3, #2
 800c40e:	d430      	bmi.n	800c472 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c410:	00d9      	lsls	r1, r3, #3
 800c412:	d430      	bmi.n	800c476 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c414:	011a      	lsls	r2, r3, #4
 800c416:	d431      	bmi.n	800c47c <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c418:	0159      	lsls	r1, r3, #5
 800c41a:	d432      	bmi.n	800c482 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c41c:	01da      	lsls	r2, r3, #7
 800c41e:	d433      	bmi.n	800c488 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c420:	0219      	lsls	r1, r3, #8
 800c422:	d434      	bmi.n	800c48e <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c424:	025a      	lsls	r2, r3, #9
 800c426:	d435      	bmi.n	800c494 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c428:	0299      	lsls	r1, r3, #10
 800c42a:	d43f      	bmi.n	800c4ac <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c42c:	02da      	lsls	r2, r3, #11
 800c42e:	d43a      	bmi.n	800c4a6 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c430:	0359      	lsls	r1, r3, #13
 800c432:	d435      	bmi.n	800c4a0 <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c434:	039a      	lsls	r2, r3, #14
 800c436:	d430      	bmi.n	800c49a <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c438:	03d9      	lsls	r1, r3, #15
 800c43a:	d440      	bmi.n	800c4be <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c43c:	041a      	lsls	r2, r3, #16
 800c43e:	d43b      	bmi.n	800c4b8 <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c440:	0459      	lsls	r1, r3, #17
 800c442:	d436      	bmi.n	800c4b2 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c444:	049a      	lsls	r2, r3, #18
 800c446:	d407      	bmi.n	800c458 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c448:	f013 0f08 	tst.w	r3, #8
 800c44c:	bf0c      	ite	eq
 800c44e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800c452:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800c456:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c458:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800c45c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c45e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c460:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c462:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c466:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c468:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800c46c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c46e:	2040      	movs	r0, #64	@ 0x40
 800c470:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c472:	2080      	movs	r0, #128	@ 0x80
 800c474:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c476:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c47a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c47c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c480:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c482:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800c486:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c488:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c48c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c48e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c492:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c494:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c498:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c49a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800c49e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4a0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800c4a4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c4a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c4aa:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c4ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c4b0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c4b2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c4b6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4b8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c4bc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4be:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c4c2:	4770      	bx	lr
 800c4c4:	2400000c 	.word	0x2400000c
 800c4c8:	10624dd3 	.word	0x10624dd3
 800c4cc:	fffee0c0 	.word	0xfffee0c0
 800c4d0:	00200045 	.word	0x00200045
 800c4d4:	002000c5 	.word	0x002000c5
 800c4d8:	fdffe008 	.word	0xfdffe008

0800c4dc <SDMMC_CmdStatusRegister>:
{
 800c4dc:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c4de:	4a4c      	ldr	r2, [pc, #304]	@ (800c610 <SDMMC_CmdStatusRegister+0x134>)
 800c4e0:	4b4c      	ldr	r3, [pc, #304]	@ (800c614 <SDMMC_CmdStatusRegister+0x138>)
 800c4e2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4e4:	484c      	ldr	r0, [pc, #304]	@ (800c618 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c4e6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4ea:	f241 130d 	movw	r3, #4365	@ 0x110d
{
 800c4ee:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c4f0:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c4f2:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800c4f4:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4f6:	68cc      	ldr	r4, [r1, #12]
 800c4f8:	4020      	ands	r0, r4
 800c4fa:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c4fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c500:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c504:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c506:	b14a      	cbz	r2, 800c51c <SDMMC_CmdStatusRegister+0x40>
 800c508:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c50a:	4844      	ldr	r0, [pc, #272]	@ (800c61c <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 800c50c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800c50e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c510:	4202      	tst	r2, r0
 800c512:	d001      	beq.n	800c518 <SDMMC_CmdStatusRegister+0x3c>
 800c514:	0492      	lsls	r2, r2, #18
 800c516:	d506      	bpl.n	800c526 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800c518:	1c5c      	adds	r4, r3, #1
 800c51a:	d1f7      	bne.n	800c50c <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c51c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c520:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c524:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c526:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c528:	075c      	lsls	r4, r3, #29
 800c52a:	d43c      	bmi.n	800c5a6 <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c52c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c52e:	07d8      	lsls	r0, r3, #31
 800c530:	d407      	bmi.n	800c542 <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c532:	4b3b      	ldr	r3, [pc, #236]	@ (800c620 <SDMMC_CmdStatusRegister+0x144>)
 800c534:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c536:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b0d      	cmp	r3, #13
 800c53c:	d004      	beq.n	800c548 <SDMMC_CmdStatusRegister+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c53e:	2001      	movs	r0, #1
 800c540:	e7ee      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c542:	2301      	movs	r3, #1
 800c544:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c546:	e7fa      	b.n	800c53e <SDMMC_CmdStatusRegister+0x62>
  return (*(__IO uint32_t *) tmp);
 800c548:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c54a:	4836      	ldr	r0, [pc, #216]	@ (800c624 <SDMMC_CmdStatusRegister+0x148>)
 800c54c:	4018      	ands	r0, r3
 800c54e:	2800      	cmp	r0, #0
 800c550:	d0e6      	beq.n	800c520 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c552:	2b00      	cmp	r3, #0
 800c554:	db2b      	blt.n	800c5ae <SDMMC_CmdStatusRegister+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c556:	005a      	lsls	r2, r3, #1
 800c558:	d42c      	bmi.n	800c5b4 <SDMMC_CmdStatusRegister+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c55a:	009c      	lsls	r4, r3, #2
 800c55c:	d42c      	bmi.n	800c5b8 <SDMMC_CmdStatusRegister+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c55e:	00d9      	lsls	r1, r3, #3
 800c560:	d42c      	bmi.n	800c5bc <SDMMC_CmdStatusRegister+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c562:	011a      	lsls	r2, r3, #4
 800c564:	d42d      	bmi.n	800c5c2 <SDMMC_CmdStatusRegister+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c566:	015c      	lsls	r4, r3, #5
 800c568:	d42e      	bmi.n	800c5c8 <SDMMC_CmdStatusRegister+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c56a:	01d9      	lsls	r1, r3, #7
 800c56c:	d42f      	bmi.n	800c5ce <SDMMC_CmdStatusRegister+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c56e:	021a      	lsls	r2, r3, #8
 800c570:	d430      	bmi.n	800c5d4 <SDMMC_CmdStatusRegister+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c572:	025c      	lsls	r4, r3, #9
 800c574:	d431      	bmi.n	800c5da <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c576:	0299      	lsls	r1, r3, #10
 800c578:	d43b      	bmi.n	800c5f2 <SDMMC_CmdStatusRegister+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c57a:	02da      	lsls	r2, r3, #11
 800c57c:	d436      	bmi.n	800c5ec <SDMMC_CmdStatusRegister+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c57e:	035c      	lsls	r4, r3, #13
 800c580:	d431      	bmi.n	800c5e6 <SDMMC_CmdStatusRegister+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c582:	0399      	lsls	r1, r3, #14
 800c584:	d42c      	bmi.n	800c5e0 <SDMMC_CmdStatusRegister+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c586:	03da      	lsls	r2, r3, #15
 800c588:	d43f      	bmi.n	800c60a <SDMMC_CmdStatusRegister+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c58a:	041c      	lsls	r4, r3, #16
 800c58c:	d43a      	bmi.n	800c604 <SDMMC_CmdStatusRegister+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c58e:	0459      	lsls	r1, r3, #17
 800c590:	d435      	bmi.n	800c5fe <SDMMC_CmdStatusRegister+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c592:	049a      	lsls	r2, r3, #18
 800c594:	d430      	bmi.n	800c5f8 <SDMMC_CmdStatusRegister+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c596:	f013 0f08 	tst.w	r3, #8
 800c59a:	bf0c      	ite	eq
 800c59c:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800c5a0:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800c5a4:	e7bc      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5a6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5a8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5aa:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5ac:	e7b8      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c5ae:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800c5b2:	e7b5      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c5b4:	2040      	movs	r0, #64	@ 0x40
 800c5b6:	e7b3      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c5b8:	2080      	movs	r0, #128	@ 0x80
 800c5ba:	e7b1      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c5bc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c5c0:	e7ae      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c5c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c5c6:	e7ab      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c5c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800c5cc:	e7a8      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c5ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c5d2:	e7a5      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c5d8:	e7a2      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c5de:	e79f      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c5e0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800c5e4:	e79c      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c5e6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800c5ea:	e799      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c5ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c5f0:	e796      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c5f2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c5f6:	e793      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c5f8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800c5fc:	e790      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c5fe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c602:	e78d      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c604:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c608:	e78a      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c60a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c60e:	e787      	b.n	800c520 <SDMMC_CmdStatusRegister+0x44>
 800c610:	2400000c 	.word	0x2400000c
 800c614:	10624dd3 	.word	0x10624dd3
 800c618:	fffee0c0 	.word	0xfffee0c0
 800c61c:	00200045 	.word	0x00200045
 800c620:	002000c5 	.word	0x002000c5
 800c624:	fdffe008 	.word	0xfdffe008

0800c628 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800c628:	2000      	movs	r0, #0
 800c62a:	4770      	bx	lr

0800c62c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c62c:	b510      	push	{r4, lr}
 800c62e:	4694      	mov	ip, r2
 800c630:	b082      	sub	sp, #8
 800c632:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c634:	460a      	mov	r2, r1
 800c636:	4663      	mov	r3, ip
 800c638:	4601      	mov	r1, r0
 800c63a:	9400      	str	r4, [sp, #0]
 800c63c:	4803      	ldr	r0, [pc, #12]	@ (800c64c <BSP_SD_ReadBlocks+0x20>)
 800c63e:	f7fd fc51 	bl	8009ee4 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c642:	3800      	subs	r0, #0
 800c644:	bf18      	it	ne
 800c646:	2001      	movne	r0, #1
 800c648:	b002      	add	sp, #8
 800c64a:	bd10      	pop	{r4, pc}
 800c64c:	240002a0 	.word	0x240002a0

0800c650 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c650:	b510      	push	{r4, lr}
 800c652:	4694      	mov	ip, r2
 800c654:	b082      	sub	sp, #8
 800c656:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c658:	460a      	mov	r2, r1
 800c65a:	4663      	mov	r3, ip
 800c65c:	4601      	mov	r1, r0
 800c65e:	9400      	str	r4, [sp, #0]
 800c660:	4803      	ldr	r0, [pc, #12]	@ (800c670 <BSP_SD_WriteBlocks+0x20>)
 800c662:	f7fd fd23 	bl	800a0ac <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c666:	3800      	subs	r0, #0
 800c668:	bf18      	it	ne
 800c66a:	2001      	movne	r0, #1
 800c66c:	b002      	add	sp, #8
 800c66e:	bd10      	pop	{r4, pc}
 800c670:	240002a0 	.word	0x240002a0

0800c674 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c674:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c676:	4803      	ldr	r0, [pc, #12]	@ (800c684 <BSP_SD_GetCardState+0x10>)
 800c678:	f7fe fa04 	bl	800aa84 <HAL_SD_GetCardState>
}
 800c67c:	3804      	subs	r0, #4
 800c67e:	bf18      	it	ne
 800c680:	2001      	movne	r0, #1
 800c682:	bd08      	pop	{r3, pc}
 800c684:	240002a0 	.word	0x240002a0

0800c688 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c688:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c68a:	4801      	ldr	r0, [pc, #4]	@ (800c690 <BSP_SD_GetCardInfo+0x8>)
 800c68c:	f7fe b8ba 	b.w	800a804 <HAL_SD_GetCardInfo>
 800c690:	240002a0 	.word	0x240002a0

0800c694 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c694:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800c696:	2301      	movs	r3, #1
{
 800c698:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800c69a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c69e:	f000 f821 	bl	800c6e4 <BSP_PlatformIsDetected>
 800c6a2:	b908      	cbnz	r0, 800c6a8 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800c6a4:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800c6a8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800c6ac:	b003      	add	sp, #12
 800c6ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6b2:	bf00      	nop

0800c6b4 <BSP_SD_Init>:
{
 800c6b4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c6b6:	f7ff ffed 	bl	800c694 <BSP_SD_IsDetected>
 800c6ba:	2801      	cmp	r0, #1
 800c6bc:	d001      	beq.n	800c6c2 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800c6be:	2002      	movs	r0, #2
}
 800c6c0:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800c6c2:	4807      	ldr	r0, [pc, #28]	@ (800c6e0 <BSP_SD_Init+0x2c>)
 800c6c4:	f7fe f97c 	bl	800a9c0 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d1f9      	bne.n	800c6c0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c6cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800c6d0:	4803      	ldr	r0, [pc, #12]	@ (800c6e0 <BSP_SD_Init+0x2c>)
 800c6d2:	f7fe f8ab 	bl	800a82c <HAL_SD_ConfigWideBusOperation>
 800c6d6:	3800      	subs	r0, #0
 800c6d8:	bf18      	it	ne
 800c6da:	2001      	movne	r0, #1
}
 800c6dc:	bd08      	pop	{r3, pc}
 800c6de:	bf00      	nop
 800c6e0:	240002a0 	.word	0x240002a0

0800c6e4 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c6e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c6e8:	4803      	ldr	r0, [pc, #12]	@ (800c6f8 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800c6ea:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c6ec:	f7f9 fb40 	bl	8005d70 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800c6f0:	fab0 f080 	clz	r0, r0
 800c6f4:	0940      	lsrs	r0, r0, #5
 800c6f6:	bd08      	pop	{r3, pc}
 800c6f8:	58020000 	.word	0x58020000

0800c6fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c6fc:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800c6fe:	4c0a      	ldr	r4, [pc, #40]	@ (800c728 <SD_initialize+0x2c>)
 800c700:	2501      	movs	r5, #1
 800c702:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c704:	f7ff ffd6 	bl	800c6b4 <BSP_SD_Init>
 800c708:	b108      	cbz	r0, 800c70e <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c70a:	7820      	ldrb	r0, [r4, #0]
}
 800c70c:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800c70e:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c710:	f7ff ffb0 	bl	800c674 <BSP_SD_GetCardState>
 800c714:	b918      	cbnz	r0, 800c71e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800c716:	7823      	ldrb	r3, [r4, #0]
 800c718:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c71c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c71e:	7823      	ldrb	r3, [r4, #0]
 800c720:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800c722:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c724:	7820      	ldrb	r0, [r4, #0]
}
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	24000018 	.word	0x24000018

0800c72c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c72c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800c72e:	2301      	movs	r3, #1
 800c730:	4c05      	ldr	r4, [pc, #20]	@ (800c748 <SD_status+0x1c>)
 800c732:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c734:	f7ff ff9e 	bl	800c674 <BSP_SD_GetCardState>
 800c738:	b918      	cbnz	r0, 800c742 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800c73a:	7823      	ldrb	r3, [r4, #0]
 800c73c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800c740:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c742:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800c744:	bd10      	pop	{r4, pc}
 800c746:	bf00      	nop
 800c748:	24000018 	.word	0x24000018

0800c74c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c74c:	4b16      	ldr	r3, [pc, #88]	@ (800c7a8 <SD_ioctl+0x5c>)
{
 800c74e:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c750:	7818      	ldrb	r0, [r3, #0]
{
 800c752:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c754:	f010 0401 	ands.w	r4, r0, #1
 800c758:	d106      	bne.n	800c768 <SD_ioctl+0x1c>
 800c75a:	4615      	mov	r5, r2

  switch (cmd)
 800c75c:	2903      	cmp	r1, #3
 800c75e:	d820      	bhi.n	800c7a2 <SD_ioctl+0x56>
 800c760:	e8df f001 	tbb	[pc, r1]
 800c764:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c768:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800c76a:	4620      	mov	r0, r4
 800c76c:	b00b      	add	sp, #44	@ 0x2c
 800c76e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c770:	a801      	add	r0, sp, #4
 800c772:	f7ff ff89 	bl	800c688 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c776:	9b08      	ldr	r3, [sp, #32]
}
 800c778:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c77a:	0a5b      	lsrs	r3, r3, #9
 800c77c:	602b      	str	r3, [r5, #0]
}
 800c77e:	b00b      	add	sp, #44	@ 0x2c
 800c780:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c782:	a801      	add	r0, sp, #4
 800c784:	f7ff ff80 	bl	800c688 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c788:	9b07      	ldr	r3, [sp, #28]
}
 800c78a:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c78c:	602b      	str	r3, [r5, #0]
}
 800c78e:	b00b      	add	sp, #44	@ 0x2c
 800c790:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c792:	a801      	add	r0, sp, #4
 800c794:	f7ff ff78 	bl	800c688 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c798:	9b08      	ldr	r3, [sp, #32]
}
 800c79a:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c79c:	802b      	strh	r3, [r5, #0]
}
 800c79e:	b00b      	add	sp, #44	@ 0x2c
 800c7a0:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800c7a2:	2404      	movs	r4, #4
 800c7a4:	e7e1      	b.n	800c76a <SD_ioctl+0x1e>
 800c7a6:	bf00      	nop
 800c7a8:	24000018 	.word	0x24000018

0800c7ac <SD_read>:
{
 800c7ac:	b508      	push	{r3, lr}
 800c7ae:	4608      	mov	r0, r1
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b8:	f7ff ff38 	bl	800c62c <BSP_SD_ReadBlocks>
 800c7bc:	b108      	cbz	r0, 800c7c2 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800c7be:	2001      	movs	r0, #1
}
 800c7c0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c7c2:	f7ff ff57 	bl	800c674 <BSP_SD_GetCardState>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d0fa      	beq.n	800c7c0 <SD_read+0x14>
 800c7ca:	f7ff ff53 	bl	800c674 <BSP_SD_GetCardState>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d1f7      	bne.n	800c7c2 <SD_read+0x16>
 800c7d2:	e7f5      	b.n	800c7c0 <SD_read+0x14>

0800c7d4 <SD_write>:
{
 800c7d4:	b508      	push	{r3, lr}
 800c7d6:	4608      	mov	r0, r1
 800c7d8:	4611      	mov	r1, r2
 800c7da:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e0:	f7ff ff36 	bl	800c650 <BSP_SD_WriteBlocks>
 800c7e4:	b108      	cbz	r0, 800c7ea <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800c7e6:	2001      	movs	r0, #1
}
 800c7e8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c7ea:	f7ff ff43 	bl	800c674 <BSP_SD_GetCardState>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d0fa      	beq.n	800c7e8 <SD_write+0x14>
 800c7f2:	f7ff ff3f 	bl	800c674 <BSP_SD_GetCardState>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d1f7      	bne.n	800c7ea <SD_write+0x16>
 800c7fa:	e7f5      	b.n	800c7e8 <SD_write+0x14>

0800c7fc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c7fc:	4b03      	ldr	r3, [pc, #12]	@ (800c80c <disk_status+0x10>)
 800c7fe:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800c802:	4403      	add	r3, r0
 800c804:	6852      	ldr	r2, [r2, #4]
 800c806:	7a18      	ldrb	r0, [r3, #8]
 800c808:	6853      	ldr	r3, [r2, #4]
 800c80a:	4718      	bx	r3
 800c80c:	240ac7f8 	.word	0x240ac7f8

0800c810 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c810:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800c812:	4d09      	ldr	r5, [pc, #36]	@ (800c838 <disk_initialize+0x28>)
 800c814:	5c2b      	ldrb	r3, [r5, r0]
 800c816:	b10b      	cbz	r3, 800c81c <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800c818:	2000      	movs	r0, #0
    {
      disk.is_initialized[pdrv] = 1;
    }
  }
  return stat;
}
 800c81a:	bd38      	pop	{r3, r4, r5, pc}
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c81c:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800c820:	182b      	adds	r3, r5, r0
 800c822:	4604      	mov	r4, r0
 800c824:	6852      	ldr	r2, [r2, #4]
 800c826:	7a18      	ldrb	r0, [r3, #8]
 800c828:	6813      	ldr	r3, [r2, #0]
 800c82a:	4798      	blx	r3
    if(stat == RES_OK)
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d1f4      	bne.n	800c81a <disk_initialize+0xa>
      disk.is_initialized[pdrv] = 1;
 800c830:	2301      	movs	r3, #1
 800c832:	552b      	strb	r3, [r5, r4]
 800c834:	e7f0      	b.n	800c818 <disk_initialize+0x8>
 800c836:	bf00      	nop
 800c838:	240ac7f8 	.word	0x240ac7f8

0800c83c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c83c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c83e:	4c05      	ldr	r4, [pc, #20]	@ (800c854 <disk_read+0x18>)
 800c840:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800c844:	4404      	add	r4, r0
 800c846:	686d      	ldr	r5, [r5, #4]
 800c848:	7a20      	ldrb	r0, [r4, #8]
 800c84a:	68ac      	ldr	r4, [r5, #8]
 800c84c:	46a4      	mov	ip, r4
  return res;
}
 800c84e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c850:	4760      	bx	ip
 800c852:	bf00      	nop
 800c854:	240ac7f8 	.word	0x240ac7f8

0800c858 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c858:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c85a:	4c05      	ldr	r4, [pc, #20]	@ (800c870 <disk_write+0x18>)
 800c85c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800c860:	4404      	add	r4, r0
 800c862:	686d      	ldr	r5, [r5, #4]
 800c864:	7a20      	ldrb	r0, [r4, #8]
 800c866:	68ec      	ldr	r4, [r5, #12]
 800c868:	46a4      	mov	ip, r4
  return res;
}
 800c86a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c86c:	4760      	bx	ip
 800c86e:	bf00      	nop
 800c870:	240ac7f8 	.word	0x240ac7f8

0800c874 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c874:	4b04      	ldr	r3, [pc, #16]	@ (800c888 <disk_ioctl+0x14>)
 800c876:	eb03 0c00 	add.w	ip, r3, r0
 800c87a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	4718      	bx	r3
 800c888:	240ac7f8 	.word	0x240ac7f8

0800c88c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c88c:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800c88e:	4b28      	ldr	r3, [pc, #160]	@ (800c930 <inc_lock+0xa4>)
{
 800c890:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800c892:	6818      	ldr	r0, [r3, #0]
 800c894:	6814      	ldr	r4, [r2, #0]
 800c896:	4284      	cmp	r4, r0
 800c898:	d022      	beq.n	800c8e0 <inc_lock+0x54>
 800c89a:	691d      	ldr	r5, [r3, #16]
 800c89c:	42a5      	cmp	r5, r4
 800c89e:	d005      	beq.n	800c8ac <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8a0:	b370      	cbz	r0, 800c900 <inc_lock+0x74>
 800c8a2:	2d00      	cmp	r5, #0
 800c8a4:	d040      	beq.n	800c928 <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c8a6:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800c8a8:	bcf0      	pop	{r4, r5, r6, r7}
 800c8aa:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800c8ac:	695e      	ldr	r6, [r3, #20]
 800c8ae:	6897      	ldr	r7, [r2, #8]
 800c8b0:	42be      	cmp	r6, r7
 800c8b2:	d1f5      	bne.n	800c8a0 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800c8b4:	699e      	ldr	r6, [r3, #24]
 800c8b6:	6957      	ldr	r7, [r2, #20]
 800c8b8:	42be      	cmp	r6, r7
 800c8ba:	d1f1      	bne.n	800c8a0 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8bc:	f04f 0c01 	mov.w	ip, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c8c0:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800c8c4:	ea4f 150c 	mov.w	r5, ip, lsl #4
 800c8c8:	8992      	ldrh	r2, [r2, #12]
 800c8ca:	b1a1      	cbz	r1, 800c8f6 <inc_lock+0x6a>
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	d1ea      	bne.n	800c8a6 <inc_lock+0x1a>
	return i + 1;
 800c8d0:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c8d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c8d8:	442b      	add	r3, r5
}
 800c8da:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c8dc:	819a      	strh	r2, [r3, #12]
}
 800c8de:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800c8e0:	6895      	ldr	r5, [r2, #8]
 800c8e2:	685e      	ldr	r6, [r3, #4]
 800c8e4:	42ae      	cmp	r6, r5
 800c8e6:	d1d8      	bne.n	800c89a <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800c8e8:	6955      	ldr	r5, [r2, #20]
 800c8ea:	689e      	ldr	r6, [r3, #8]
 800c8ec:	42ae      	cmp	r6, r5
 800c8ee:	d1d4      	bne.n	800c89a <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c8f0:	f04f 0c00 	mov.w	ip, #0
 800c8f4:	e7e4      	b.n	800c8c0 <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c8f6:	3201      	adds	r2, #1
	return i + 1;
 800c8f8:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c8fc:	b292      	uxth	r2, r2
 800c8fe:	e7eb      	b.n	800c8d8 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c900:	4684      	mov	ip, r0
 800c902:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800c904:	ea4f 150c 	mov.w	r5, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c908:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800c90a:	eb03 110c 	add.w	r1, r3, ip, lsl #4
 800c90e:	515c      	str	r4, [r3, r5]
		Files[i].clu = dp->obj.sclust;
 800c910:	6894      	ldr	r4, [r2, #8]
 800c912:	6952      	ldr	r2, [r2, #20]
 800c914:	e9c1 4201 	strd	r4, r2, [r1, #4]
		Files[i].ctr = 0;
 800c918:	f04f 0200 	mov.w	r2, #0
 800c91c:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c91e:	bf14      	ite	ne
 800c920:	f44f 7280 	movne.w	r2, #256	@ 0x100
 800c924:	2201      	moveq	r2, #1
 800c926:	e7d7      	b.n	800c8d8 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c928:	2002      	movs	r0, #2
 800c92a:	f04f 0c01 	mov.w	ip, #1
 800c92e:	e7e9      	b.n	800c904 <inc_lock+0x78>
 800c930:	240ac7d0 	.word	0x240ac7d0

0800c934 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c934:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c936:	f04f 36ff 	mov.w	r6, #4294967295
 800c93a:	2300      	movs	r3, #0
{
 800c93c:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c93e:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c940:	70c3      	strb	r3, [r0, #3]
 800c942:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c944:	d122      	bne.n	800c98c <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c946:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c94a:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800c94e:	429a      	cmp	r2, r3
 800c950:	d11a      	bne.n	800c988 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c952:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800c956:	2be9      	cmp	r3, #233	@ 0xe9
 800c958:	d007      	beq.n	800c96a <check_fs+0x36>
 800c95a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c95c:	4a13      	ldr	r2, [pc, #76]	@ (800c9ac <check_fs+0x78>)
 800c95e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800c962:	4293      	cmp	r3, r2
 800c964:	d001      	beq.n	800c96a <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c966:	2002      	movs	r0, #2
}
 800c968:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800c96a:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c96e:	4a10      	ldr	r2, [pc, #64]	@ (800c9b0 <check_fs+0x7c>)
 800c970:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c974:	4293      	cmp	r3, r2
 800c976:	d017      	beq.n	800c9a8 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800c978:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c97c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b4 <check_fs+0x80>)
 800c97e:	1ac0      	subs	r0, r0, r3
 800c980:	bf18      	it	ne
 800c982:	2001      	movne	r0, #1
 800c984:	0040      	lsls	r0, r0, #1
}
 800c986:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c988:	2003      	movs	r0, #3
}
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c98c:	460d      	mov	r5, r1
 800c98e:	460a      	mov	r2, r1
 800c990:	2301      	movs	r3, #1
 800c992:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 800c996:	7840      	ldrb	r0, [r0, #1]
 800c998:	f7ff ff50 	bl	800c83c <disk_read>
 800c99c:	b110      	cbz	r0, 800c9a4 <check_fs+0x70>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c99e:	2004      	movs	r0, #4
			fs->winsect = sector;
 800c9a0:	62e6      	str	r6, [r4, #44]	@ 0x2c
}
 800c9a2:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800c9a4:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800c9a6:	e7ce      	b.n	800c946 <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9a8:	2000      	movs	r0, #0
}
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	009000eb 	.word	0x009000eb
 800c9b0:	00544146 	.word	0x00544146
 800c9b4:	33544146 	.word	0x33544146

0800c9b8 <sync_fs>:
{
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c9ba:	78c3      	ldrb	r3, [r0, #3]
{
 800c9bc:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c9be:	b95b      	cbnz	r3, 800c9d8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c9c0:	7823      	ldrb	r3, [r4, #0]
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d02a      	beq.n	800ca1c <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	7860      	ldrb	r0, [r4, #1]
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	f7ff ff52 	bl	800c874 <disk_ioctl>
 800c9d0:	3800      	subs	r0, #0
 800c9d2:	bf18      	it	ne
 800c9d4:	2001      	movne	r0, #1
}
 800c9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800c9d8:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c9da:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 800c9de:	2301      	movs	r3, #1
 800c9e0:	7840      	ldrb	r0, [r0, #1]
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7ff ff37 	bl	800c858 <disk_write>
 800c9ea:	b9a8      	cbnz	r0, 800ca18 <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c9ec:	6a22      	ldr	r2, [r4, #32]
 800c9ee:	69a3      	ldr	r3, [r4, #24]
 800c9f0:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800c9f2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d2e3      	bcs.n	800c9c0 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c9f8:	78a6      	ldrb	r6, [r4, #2]
 800c9fa:	2e01      	cmp	r6, #1
 800c9fc:	d801      	bhi.n	800ca02 <sync_fs+0x4a>
 800c9fe:	e7df      	b.n	800c9c0 <sync_fs+0x8>
					wsect += fs->fsize;
 800ca00:	69a3      	ldr	r3, [r4, #24]
 800ca02:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca04:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ca06:	2301      	movs	r3, #1
 800ca08:	4639      	mov	r1, r7
 800ca0a:	462a      	mov	r2, r5
 800ca0c:	7860      	ldrb	r0, [r4, #1]
 800ca0e:	f7ff ff23 	bl	800c858 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca12:	2e01      	cmp	r6, #1
 800ca14:	d1f4      	bne.n	800ca00 <sync_fs+0x48>
 800ca16:	e7d3      	b.n	800c9c0 <sync_fs+0x8>
			res = FR_DISK_ERR;
 800ca18:	2001      	movs	r0, #1
}
 800ca1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ca1c:	7925      	ldrb	r5, [r4, #4]
 800ca1e:	2d01      	cmp	r5, #1
 800ca20:	d1d1      	bne.n	800c9c6 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800ca22:	f104 0630 	add.w	r6, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 800ca26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f001 fda1 	bl	800e574 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800ca32:	480f      	ldr	r0, [pc, #60]	@ (800ca70 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800ca34:	f64a 2355 	movw	r3, #43605	@ 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800ca38:	6320      	str	r0, [r4, #48]	@ 0x30
 800ca3a:	f100 50ff 	add.w	r0, r0, #534773760	@ 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800ca3e:	f8a4 322e 	strh.w	r3, [r4, #558]	@ 0x22e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ca42:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800ca44:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800ca48:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800ca4c:	3020      	adds	r0, #32
 800ca4e:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
			fs->winsect = fs->volbase + 1;
 800ca52:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca54:	f8c4 121c 	str.w	r1, [r4, #540]	@ 0x21c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ca58:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800ca5a:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ca5c:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ca60:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800ca62:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ca64:	f7ff fef8 	bl	800c858 <disk_write>
			fs->fsi_flag = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	7123      	strb	r3, [r4, #4]
 800ca6c:	e7ab      	b.n	800c9c6 <sync_fs+0xe>
 800ca6e:	bf00      	nop
 800ca70:	41615252 	.word	0x41615252

0800ca74 <move_window>:
{
 800ca74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ca78:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800ca7a:	428e      	cmp	r6, r1
 800ca7c:	d102      	bne.n	800ca84 <move_window+0x10>
	FRESULT res = FR_OK;
 800ca7e:	2000      	movs	r0, #0
}
 800ca80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca84:	4604      	mov	r4, r0
 800ca86:	460d      	mov	r5, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca88:	7840      	ldrb	r0, [r0, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca8a:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca8c:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca90:	b95b      	cbnz	r3, 800caaa <move_window+0x36>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ca92:	2301      	movs	r3, #1
 800ca94:	4639      	mov	r1, r7
 800ca96:	462a      	mov	r2, r5
 800ca98:	f7ff fed0 	bl	800c83c <disk_read>
 800ca9c:	b110      	cbz	r0, 800caa4 <move_window+0x30>
				res = FR_DISK_ERR;
 800ca9e:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800caa0:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800caa4:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800caa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800caaa:	2301      	movs	r3, #1
 800caac:	4632      	mov	r2, r6
 800caae:	4639      	mov	r1, r7
 800cab0:	f7ff fed2 	bl	800c858 <disk_write>
 800cab4:	b9d0      	cbnz	r0, 800caec <move_window+0x78>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cab6:	6a22      	ldr	r2, [r4, #32]
 800cab8:	69a3      	ldr	r3, [r4, #24]
 800caba:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800cabc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d212      	bcs.n	800cae8 <move_window+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cac2:	f894 8002 	ldrb.w	r8, [r4, #2]
 800cac6:	f1b8 0f01 	cmp.w	r8, #1
 800caca:	d801      	bhi.n	800cad0 <move_window+0x5c>
 800cacc:	e00c      	b.n	800cae8 <move_window+0x74>
					wsect += fs->fsize;
 800cace:	69a3      	ldr	r3, [r4, #24]
 800cad0:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cad2:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800cad6:	2301      	movs	r3, #1
 800cad8:	4639      	mov	r1, r7
 800cada:	4632      	mov	r2, r6
 800cadc:	7860      	ldrb	r0, [r4, #1]
 800cade:	f7ff febb 	bl	800c858 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cae2:	f1b8 0f01 	cmp.w	r8, #1
 800cae6:	d1f2      	bne.n	800cace <move_window+0x5a>
 800cae8:	7860      	ldrb	r0, [r4, #1]
 800caea:	e7d2      	b.n	800ca92 <move_window+0x1e>
			res = FR_DISK_ERR;
 800caec:	2001      	movs	r0, #1
 800caee:	e7c7      	b.n	800ca80 <move_window+0xc>

0800caf0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800caf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800caf4:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 800caf6:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800caf8:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800cafa:	b18c      	cbz	r4, 800cb20 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cafc:	7825      	ldrb	r5, [r4, #0]
 800cafe:	2d20      	cmp	r5, #32
 800cb00:	d911      	bls.n	800cb26 <find_volume+0x36>
 800cb02:	2d3a      	cmp	r5, #58	@ 0x3a
 800cb04:	d00f      	beq.n	800cb26 <find_volume+0x36>
 800cb06:	46a4      	mov	ip, r4
 800cb08:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800cb0c:	2b20      	cmp	r3, #32
 800cb0e:	d90c      	bls.n	800cb2a <find_volume+0x3a>
 800cb10:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb12:	d1f9      	bne.n	800cb08 <find_volume+0x18>
			i = *tp++ - '0';
 800cb14:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cb16:	45a4      	cmp	ip, r4
 800cb18:	d102      	bne.n	800cb20 <find_volume+0x30>
 800cb1a:	2d30      	cmp	r5, #48	@ 0x30
 800cb1c:	f000 80e1 	beq.w	800cce2 <find_volume+0x1f2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb20:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800cb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cb26:	462b      	mov	r3, r5
 800cb28:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cb2a:	2b3a      	cmp	r3, #58	@ 0x3a
 800cb2c:	d0f2      	beq.n	800cb14 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb2e:	4ba1      	ldr	r3, [pc, #644]	@ (800cdb4 <find_volume+0x2c4>)
 800cb30:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb32:	2c00      	cmp	r4, #0
 800cb34:	f000 80c6 	beq.w	800ccc4 <find_volume+0x1d4>
	*rfs = fs;							/* Return pointer to the file system object */
 800cb38:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb3a:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb3e:	7823      	ldrb	r3, [r4, #0]
 800cb40:	b153      	cbz	r3, 800cb58 <find_volume+0x68>
		stat = disk_status(fs->drv);
 800cb42:	7860      	ldrb	r0, [r4, #1]
 800cb44:	f7ff fe5a 	bl	800c7fc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb48:	07c3      	lsls	r3, r0, #31
 800cb4a:	d405      	bmi.n	800cb58 <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb4c:	b115      	cbz	r5, 800cb54 <find_volume+0x64>
 800cb4e:	0747      	lsls	r7, r0, #29
 800cb50:	f100 80b5 	bmi.w	800ccbe <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 800cb54:	2000      	movs	r0, #0
 800cb56:	e08d      	b.n	800cc74 <find_volume+0x184>
	fs->fs_type = 0;					/* Clear the file system object */
 800cb58:	2000      	movs	r0, #0
 800cb5a:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cb5c:	f7ff fe58 	bl	800c810 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cb60:	07c6      	lsls	r6, r0, #31
 800cb62:	f100 8089 	bmi.w	800cc78 <find_volume+0x188>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cb66:	b115      	cbz	r5, 800cb6e <find_volume+0x7e>
 800cb68:	0745      	lsls	r5, r0, #29
 800cb6a:	f100 80a8 	bmi.w	800ccbe <find_volume+0x1ce>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cb6e:	2100      	movs	r1, #0
 800cb70:	4620      	mov	r0, r4
 800cb72:	f7ff fedf 	bl	800c934 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cb76:	2802      	cmp	r0, #2
 800cb78:	f000 8081 	beq.w	800cc7e <find_volume+0x18e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb7c:	2804      	cmp	r0, #4
 800cb7e:	f000 80ac 	beq.w	800ccda <find_volume+0x1ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb82:	2801      	cmp	r0, #1
 800cb84:	d875      	bhi.n	800cc72 <find_volume+0x182>
 800cb86:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb88:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800cb8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb90:	d16f      	bne.n	800cc72 <find_volume+0x182>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb92:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb96:	b901      	cbnz	r1, 800cb9a <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 800cb98:	6d61      	ldr	r1, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb9a:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800cb9e:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cba0:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cba2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d864      	bhi.n	800cc72 <find_volume+0x182>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cba8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800cbac:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d05f      	beq.n	800cc72 <find_volume+0x182>
 800cbb2:	1e58      	subs	r0, r3, #1
 800cbb4:	4218      	tst	r0, r3
 800cbb6:	d15c      	bne.n	800cc72 <find_volume+0x182>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cbb8:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cbbc:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cbbe:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cbc0:	d157      	bne.n	800cc72 <find_volume+0x182>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cbc2:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cbc6:	b900      	cbnz	r0, 800cbca <find_volume+0xda>
	rv = rv << 8 | ptr[0];
 800cbc8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cbca:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cbce:	f1bc 0f00 	cmp.w	ip, #0
 800cbd2:	d04e      	beq.n	800cc72 <find_volume+0x182>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cbd4:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cbd8:	eb0c 1617 	add.w	r6, ip, r7, lsr #4
 800cbdc:	4416      	add	r6, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cbde:	42b0      	cmp	r0, r6
 800cbe0:	d347      	bcc.n	800cc72 <find_volume+0x182>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cbe2:	1b80      	subs	r0, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cbe4:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cbe6:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cbea:	d342      	bcc.n	800cc72 <find_volume+0x182>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cbec:	eb0c 0305 	add.w	r3, ip, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbf0:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
		fs->database = bsect + sysect;					/* Data start sector */
 800cbf4:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cbf6:	f10e 0002 	add.w	r0, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbfa:	45e6      	cmp	lr, ip
 800cbfc:	f240 808f 	bls.w	800cd1e <find_volume+0x22e>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc00:	6223      	str	r3, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc02:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->database = bsect + sysect;					/* Data start sector */
 800cc06:	62a6      	str	r6, [r4, #40]	@ 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc08:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc0a:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cc0c:	61e5      	str	r5, [r4, #28]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc0e:	d130      	bne.n	800cc72 <find_volume+0x182>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc10:	0083      	lsls	r3, r0, #2
	rv = rv << 8 | ptr[0];
 800cc12:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc14:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc18:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cc1a:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800cc1e:	d328      	bcc.n	800cc72 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc20:	f8b4 2060 	ldrh.w	r2, [r4, #96]	@ 0x60
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc24:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800cc28:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc2a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800cc2c:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc2e:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc32:	f000 809c 	beq.w	800cd6e <find_volume+0x27e>
		fmt = FS_FAT32;
 800cc36:	2303      	movs	r3, #3
	fs->id = ++Fsid;		/* File system mount ID */
 800cc38:	495f      	ldr	r1, [pc, #380]	@ (800cdb8 <find_volume+0x2c8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800cc3a:	7023      	strb	r3, [r4, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc3c:	4a5f      	ldr	r2, [pc, #380]	@ (800cdbc <find_volume+0x2cc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800cc3e:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc40:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc42:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc44:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	800b      	strh	r3, [r1, #0]
 800cc4a:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cc4c:	f000 808c 	beq.w	800cd68 <find_volume+0x278>
 800cc50:	6913      	ldr	r3, [r2, #16]
 800cc52:	429c      	cmp	r4, r3
 800cc54:	f47f af7e 	bne.w	800cb54 <find_volume+0x64>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	6113      	str	r3, [r2, #16]
 800cc5c:	e77a      	b.n	800cb54 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 800cc5e:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	d14a      	bne.n	800ccfc <find_volume+0x20c>
 800cc66:	2f00      	cmp	r7, #0
 800cc68:	d151      	bne.n	800cd0e <find_volume+0x21e>
 800cc6a:	f1b8 0f00 	cmp.w	r8, #0
 800cc6e:	d13c      	bne.n	800ccea <find_volume+0x1fa>
 800cc70:	bb55      	cbnz	r5, 800ccc8 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cc72:	200d      	movs	r0, #13
}
 800cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cc78:	2003      	movs	r0, #3
}
 800cc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc7e:	f894 61f2 	ldrb.w	r6, [r4, #498]	@ 0x1f2
 800cc82:	b10e      	cbz	r6, 800cc88 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800cc84:	f8d4 61f6 	ldr.w	r6, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc88:	f894 7202 	ldrb.w	r7, [r4, #514]	@ 0x202
 800cc8c:	b10f      	cbz	r7, 800cc92 <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 800cc8e:	f8d4 7206 	ldr.w	r7, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc92:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 800cc96:	b313      	cbz	r3, 800ccde <find_volume+0x1ee>
	rv = rv << 8 | ptr[0];
 800cc98:	f8d4 8216 	ldr.w	r8, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc9c:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	d1dc      	bne.n	800cc5e <find_volume+0x16e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cca4:	bb56      	cbnz	r6, 800ccfc <find_volume+0x20c>
 800cca6:	bb8f      	cbnz	r7, 800cd0c <find_volume+0x21c>
 800cca8:	f1b8 0f00 	cmp.w	r8, #0
 800ccac:	d0e1      	beq.n	800cc72 <find_volume+0x182>
 800ccae:	4641      	mov	r1, r8
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	f7ff fe3f 	bl	800c934 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ccb6:	2801      	cmp	r0, #1
 800ccb8:	d8db      	bhi.n	800cc72 <find_volume+0x182>
			bsect = br[i];
 800ccba:	4645      	mov	r5, r8
 800ccbc:	e764      	b.n	800cb88 <find_volume+0x98>
				return FR_WRITE_PROTECTED;
 800ccbe:	200a      	movs	r0, #10
}
 800ccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ccc4:	200c      	movs	r0, #12
 800ccc6:	e7d5      	b.n	800cc74 <find_volume+0x184>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4620      	mov	r0, r4
 800cccc:	f7ff fe32 	bl	800c934 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ccd0:	2801      	cmp	r0, #1
 800ccd2:	f67f af59 	bls.w	800cb88 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ccd6:	2804      	cmp	r0, #4
 800ccd8:	d1cb      	bne.n	800cc72 <find_volume+0x182>
 800ccda:	2001      	movs	r0, #1
 800ccdc:	e7ca      	b.n	800cc74 <find_volume+0x184>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ccde:	4698      	mov	r8, r3
 800cce0:	e7dc      	b.n	800cc9c <find_volume+0x1ac>
					*path = ++tt;
 800cce2:	f10c 0301 	add.w	r3, ip, #1
 800cce6:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cce8:	e721      	b.n	800cb2e <find_volume+0x3e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ccea:	4641      	mov	r1, r8
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7ff fe21 	bl	800c934 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ccf2:	2801      	cmp	r0, #1
 800ccf4:	d9e1      	bls.n	800ccba <find_volume+0x1ca>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ccf6:	2d00      	cmp	r5, #0
 800ccf8:	d1e6      	bne.n	800ccc8 <find_volume+0x1d8>
 800ccfa:	e7ba      	b.n	800cc72 <find_volume+0x182>
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f7ff fe18 	bl	800c934 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cd04:	2801      	cmp	r0, #1
 800cd06:	d8ae      	bhi.n	800cc66 <find_volume+0x176>
			bsect = br[i];
 800cd08:	4635      	mov	r5, r6
 800cd0a:	e73d      	b.n	800cb88 <find_volume+0x98>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cd0c:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cd0e:	4639      	mov	r1, r7
 800cd10:	4620      	mov	r0, r4
 800cd12:	f7ff fe0f 	bl	800c934 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cd16:	2801      	cmp	r0, #1
 800cd18:	d8a7      	bhi.n	800cc6a <find_volume+0x17a>
			bsect = br[i];
 800cd1a:	463d      	mov	r5, r7
 800cd1c:	e734      	b.n	800cb88 <find_volume+0x98>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd1e:	f640 7cf5 	movw	ip, #4085	@ 0xff5
		fs->volbase = bsect;							/* Volume start sector */
 800cd22:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800cd24:	62a6      	str	r6, [r4, #40]	@ 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd26:	45e6      	cmp	lr, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd28:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd2a:	6223      	str	r3, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd2c:	d816      	bhi.n	800cd5c <find_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd2e:	2f00      	cmp	r7, #0
 800cd30:	d09f      	beq.n	800cc72 <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd32:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd34:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800cd38:	f000 0001 	and.w	r0, r0, #1
 800cd3c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800cd40:	2301      	movs	r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd42:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd46:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd48:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
 800cd4c:	d391      	bcc.n	800cc72 <find_volume+0x182>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd4e:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800cd52:	2180      	movs	r1, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd54:	e9c4 2203 	strd	r2, r2, [r4, #12]
		fs->fsi_flag = 0x80;
 800cd58:	7121      	strb	r1, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cd5a:	e76d      	b.n	800cc38 <find_volume+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd5c:	2f00      	cmp	r7, #0
 800cd5e:	d088      	beq.n	800cc72 <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd60:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd62:	0040      	lsls	r0, r0, #1
 800cd64:	2302      	movs	r3, #2
 800cd66:	e7ec      	b.n	800cd42 <find_volume+0x252>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	e770      	b.n	800cc50 <find_volume+0x160>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd6e:	1c69      	adds	r1, r5, #1
 800cd70:	4620      	mov	r0, r4
 800cd72:	f7ff fe7f 	bl	800ca74 <move_window>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f47f af5d 	bne.w	800cc36 <find_volume+0x146>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd7c:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800cd80:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 800cd84:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd86:	4291      	cmp	r1, r2
 800cd88:	f47f af55 	bne.w	800cc36 <find_volume+0x146>
	rv = rv << 8 | ptr[0];
 800cd8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd8e:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc0 <find_volume+0x2d0>)
 800cd90:	429a      	cmp	r2, r3
 800cd92:	f47f af50 	bne.w	800cc36 <find_volume+0x146>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd96:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 800cd9a:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800cda2:	3320      	adds	r3, #32
 800cda4:	429a      	cmp	r2, r3
 800cda6:	f47f af46 	bne.w	800cc36 <find_volume+0x146>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cdaa:	e9d4 2386 	ldrd	r2, r3, [r4, #536]	@ 0x218
 800cdae:	e9c4 3203 	strd	r3, r2, [r4, #12]
 800cdb2:	e740      	b.n	800cc36 <find_volume+0x146>
 800cdb4:	240ac7f4 	.word	0x240ac7f4
 800cdb8:	240ac7f0 	.word	0x240ac7f0
 800cdbc:	240ac7d0 	.word	0x240ac7d0
 800cdc0:	41615252 	.word	0x41615252

0800cdc4 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800cdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800cdc8:	f890 9000 	ldrb.w	r9, [r0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800cdcc:	4605      	mov	r5, r0
 800cdce:	460e      	mov	r6, r1
 800cdd0:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 800cdd2:	f1b9 0f02 	cmp.w	r9, #2
 800cdd6:	d008      	beq.n	800cdea <put_fat.part.0+0x26>
 800cdd8:	f1b9 0f03 	cmp.w	r9, #3
 800cddc:	d042      	beq.n	800ce64 <put_fat.part.0+0xa0>
 800cdde:	f1b9 0f01 	cmp.w	r9, #1
 800cde2:	d014      	beq.n	800ce0e <put_fat.part.0+0x4a>
 800cde4:	2002      	movs	r0, #2
}
 800cde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cdea:	6a01      	ldr	r1, [r0, #32]
 800cdec:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 800cdf0:	f7ff fe40 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d1f6      	bne.n	800cde6 <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cdf8:	0076      	lsls	r6, r6, #1
 800cdfa:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 800cdfe:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800ce02:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ce04:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800ce06:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800ce0a:	7054      	strb	r4, [r2, #1]
			break;
 800ce0c:	e03d      	b.n	800ce8a <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce0e:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800ce10:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce14:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800ce18:	f7ff fe2c 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d1e2      	bne.n	800cde6 <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 800ce20:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce24:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 800ce26:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800ce2a:	f105 0830 	add.w	r8, r5, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce2e:	ea4f 2157 	mov.w	r1, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce32:	d52f      	bpl.n	800ce94 <put_fat.part.0+0xd0>
 800ce34:	f818 2003 	ldrb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce38:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce3a:	f002 020f 	and.w	r2, r2, #15
 800ce3e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800ce42:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce46:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800ce48:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce4c:	4419      	add	r1, r3
 800ce4e:	f7ff fe11 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d1c7      	bne.n	800cde6 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800ce56:	f3c7 0208 	ubfx	r2, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce5a:	f3c4 1307 	ubfx	r3, r4, #4, #8
			p = fs->win + bc % SS(fs);
 800ce5e:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce60:	7013      	strb	r3, [r2, #0]
			break;
 800ce62:	e012      	b.n	800ce8a <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ce64:	6a01      	ldr	r1, [r0, #32]
 800ce66:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 800ce6a:	f7ff fe03 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d1b9      	bne.n	800cde6 <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ce72:	00b6      	lsls	r6, r6, #2
 800ce74:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800ce78:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 800ce7c:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800ce80:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ce82:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ce86:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800ce88:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 800ce8a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce8c:	2000      	movs	r0, #0
			fs->wflag = 1;
 800ce8e:	70eb      	strb	r3, [r5, #3]
}
 800ce90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce94:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce98:	4628      	mov	r0, r5
 800ce9a:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800ce9c:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cea0:	4419      	add	r1, r3
 800cea2:	f7ff fde7 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d19d      	bne.n	800cde6 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800ceaa:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ceae:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800ceb2:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 800ceb6:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ceba:	f023 030f 	bic.w	r3, r3, #15
 800cebe:	4323      	orrs	r3, r4
 800cec0:	7013      	strb	r3, [r2, #0]
			break;
 800cec2:	e7e2      	b.n	800ce8a <put_fat.part.0+0xc6>

0800cec4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cec4:	2901      	cmp	r1, #1
 800cec6:	d90e      	bls.n	800cee6 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ceca:	6943      	ldr	r3, [r0, #20]
 800cecc:	460c      	mov	r4, r1
 800cece:	4605      	mov	r5, r0
 800ced0:	4299      	cmp	r1, r3
 800ced2:	d206      	bcs.n	800cee2 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800ced4:	7803      	ldrb	r3, [r0, #0]
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	d021      	beq.n	800cf1e <get_fat.isra.0+0x5a>
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	d010      	beq.n	800cf00 <get_fat.isra.0+0x3c>
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d003      	beq.n	800ceea <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 800cee2:	2001      	movs	r0, #1
}
 800cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800cee6:	2001      	movs	r0, #1
}
 800cee8:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ceea:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800ceec:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cef0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800cef4:	f7ff fdbe 	bl	800ca74 <move_window>
 800cef8:	b1f0      	cbz	r0, 800cf38 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cefa:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf00:	6a01      	ldr	r1, [r0, #32]
 800cf02:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800cf06:	f7ff fdb5 	bl	800ca74 <move_window>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d1f5      	bne.n	800cefa <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cf0e:	00a4      	lsls	r4, r4, #2
 800cf10:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800cf14:	4425      	add	r5, r4
 800cf16:	6b28      	ldr	r0, [r5, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cf18:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 800cf1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf1e:	6a01      	ldr	r1, [r0, #32]
 800cf20:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800cf24:	f7ff fda6 	bl	800ca74 <move_window>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d1e6      	bne.n	800cefa <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cf2c:	0063      	lsls	r3, r4, #1
 800cf2e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cf32:	442b      	add	r3, r5
 800cf34:	8e18      	ldrh	r0, [r3, #48]	@ 0x30
}
 800cf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800cf38:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf3c:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800cf3e:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf40:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800cf42:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf44:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800cf48:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf4c:	f7ff fd92 	bl	800ca74 <move_window>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d1d2      	bne.n	800cefa <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cf54:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800cf58:	442f      	add	r7, r5
 800cf5a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800cf5e:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cf62:	07e3      	lsls	r3, r4, #31
 800cf64:	bf4c      	ite	mi
 800cf66:	0900      	lsrmi	r0, r0, #4
 800cf68:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800cf6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf6e:	bf00      	nop

0800cf70 <create_chain>:
{
 800cf70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf74:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800cf76:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 800cf78:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800cf7c:	2900      	cmp	r1, #0
 800cf7e:	f040 80a7 	bne.w	800d0d0 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cf82:	f8d8 600c 	ldr.w	r6, [r8, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cf86:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800cf8a:	b1c6      	cbz	r6, 800cfbe <create_chain+0x4e>
 800cf8c:	429e      	cmp	r6, r3
 800cf8e:	d216      	bcs.n	800cfbe <create_chain+0x4e>
			ncl++;							/* Next cluster */
 800cf90:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cf92:	42a3      	cmp	r3, r4
 800cf94:	f200 80b4 	bhi.w	800d100 <create_chain+0x190>
				if (ncl > scl) return 0;	/* No free cluster */
 800cf98:	2e01      	cmp	r6, #1
 800cf9a:	d013      	beq.n	800cfc4 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cf9c:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800cf9e:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cfa0:	696b      	ldr	r3, [r5, #20]
 800cfa2:	42a3      	cmp	r3, r4
 800cfa4:	d907      	bls.n	800cfb6 <create_chain+0x46>
		switch (fs->fs_type) {
 800cfa6:	782b      	ldrb	r3, [r5, #0]
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	f000 8083 	beq.w	800d0b4 <create_chain+0x144>
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d042      	beq.n	800d038 <create_chain+0xc8>
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d00a      	beq.n	800cfcc <create_chain+0x5c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cfb6:	2401      	movs	r4, #1
}
 800cfb8:	4620      	mov	r0, r4
 800cfba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	f200 809a 	bhi.w	800d0f8 <create_chain+0x188>
				if (ncl > scl) return 0;	/* No free cluster */
 800cfc4:	2400      	movs	r4, #0
}
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfcc:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 800cfce:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800cfd8:	f7ff fd4c 	bl	800ca74 <move_window>
 800cfdc:	bb38      	cbnz	r0, 800d02e <create_chain+0xbe>
			wc = fs->win[bc++ % SS(fs)];
 800cfde:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfe2:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800cfe4:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfe8:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800cfea:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfec:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800cff0:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cff4:	f7ff fd3e 	bl	800ca74 <move_window>
 800cff8:	b9c8      	cbnz	r0, 800d02e <create_chain+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cffa:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cffe:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800d000:	44ab      	add	fp, r5
 800d002:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 800d006:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d00a:	bf4c      	ite	mi
 800d00c:	091b      	lsrmi	r3, r3, #4
 800d00e:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800d012:	b313      	cbz	r3, 800d05a <create_chain+0xea>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d014:	2b01      	cmp	r3, #1
 800d016:	d0ce      	beq.n	800cfb6 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800d018:	42a6      	cmp	r6, r4
 800d01a:	d0d3      	beq.n	800cfc4 <create_chain+0x54>
			ncl++;							/* Next cluster */
 800d01c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d01e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d022:	429c      	cmp	r4, r3
 800d024:	d2b8      	bcs.n	800cf98 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d026:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d028:	e7ba      	b.n	800cfa0 <create_chain+0x30>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d02a:	2801      	cmp	r0, #1
 800d02c:	d1c3      	bne.n	800cfb6 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d02e:	f04f 34ff 	mov.w	r4, #4294967295
}
 800d032:	4620      	mov	r0, r4
 800d034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d038:	6a29      	ldr	r1, [r5, #32]
 800d03a:	4628      	mov	r0, r5
 800d03c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d040:	f7ff fd18 	bl	800ca74 <move_window>
 800d044:	2800      	cmp	r0, #0
 800d046:	d1f2      	bne.n	800d02e <create_chain+0xbe>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d048:	00a3      	lsls	r3, r4, #2
 800d04a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800d04e:	442b      	add	r3, r5
 800d050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d052:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1dc      	bne.n	800d014 <create_chain+0xa4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d05a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d05e:	42a3      	cmp	r3, r4
 800d060:	d9a9      	bls.n	800cfb6 <create_chain+0x46>
 800d062:	f04f 32ff 	mov.w	r2, #4294967295
 800d066:	4621      	mov	r1, r4
 800d068:	4640      	mov	r0, r8
 800d06a:	f7ff feab 	bl	800cdc4 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800d06e:	b970      	cbnz	r0, 800d08e <create_chain+0x11e>
 800d070:	f1b9 0f00 	cmp.w	r9, #0
 800d074:	d00b      	beq.n	800d08e <create_chain+0x11e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d076:	f1b9 0f01 	cmp.w	r9, #1
 800d07a:	d09c      	beq.n	800cfb6 <create_chain+0x46>
 800d07c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d080:	4599      	cmp	r9, r3
 800d082:	d298      	bcs.n	800cfb6 <create_chain+0x46>
 800d084:	4622      	mov	r2, r4
 800d086:	4649      	mov	r1, r9
 800d088:	4640      	mov	r0, r8
 800d08a:	f7ff fe9b 	bl	800cdc4 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d08e:	2800      	cmp	r0, #0
 800d090:	d1cb      	bne.n	800d02a <create_chain+0xba>
		fs->last_clst = ncl;
 800d092:	f8c8 400c 	str.w	r4, [r8, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d096:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800d09a:	3b02      	subs	r3, #2
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d802      	bhi.n	800d0a6 <create_chain+0x136>
 800d0a0:	3a01      	subs	r2, #1
 800d0a2:	f8c8 2010 	str.w	r2, [r8, #16]
		fs->fsi_flag |= 1;
 800d0a6:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d0aa:	f043 0301 	orr.w	r3, r3, #1
 800d0ae:	f888 3004 	strb.w	r3, [r8, #4]
 800d0b2:	e781      	b.n	800cfb8 <create_chain+0x48>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d0b4:	6a29      	ldr	r1, [r5, #32]
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d0bc:	f7ff fcda 	bl	800ca74 <move_window>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d1b4      	bne.n	800d02e <create_chain+0xbe>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d0c4:	0063      	lsls	r3, r4, #1
 800d0c6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d0ca:	442b      	add	r3, r5
 800d0cc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
			break;
 800d0ce:	e7a0      	b.n	800d012 <create_chain+0xa2>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d0d0:	4640      	mov	r0, r8
 800d0d2:	f7ff fef7 	bl	800cec4 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d0d6:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d0d8:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d0da:	f67f af6c 	bls.w	800cfb6 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d0de:	1c41      	adds	r1, r0, #1
 800d0e0:	d0a5      	beq.n	800d02e <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d0e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d0e6:	4283      	cmp	r3, r0
 800d0e8:	f63f af66 	bhi.w	800cfb8 <create_chain+0x48>
			ncl++;							/* Next cluster */
 800d0ec:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d807      	bhi.n	800d104 <create_chain+0x194>
 800d0f4:	464e      	mov	r6, r9
 800d0f6:	e74f      	b.n	800cf98 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d0f8:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d0fa:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 800d0fc:	2402      	movs	r4, #2
 800d0fe:	e74f      	b.n	800cfa0 <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d100:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d102:	e74d      	b.n	800cfa0 <create_chain+0x30>
 800d104:	2c01      	cmp	r4, #1
 800d106:	683d      	ldr	r5, [r7, #0]
 800d108:	f67f af55 	bls.w	800cfb6 <create_chain+0x46>
 800d10c:	464e      	mov	r6, r9
 800d10e:	e747      	b.n	800cfa0 <create_chain+0x30>

0800d110 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800d110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->dptr = ofs;				/* Set current offset */
 800d114:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d116:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800d118:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800d11a:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800d11c:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d11e:	b98c      	cbnz	r4, 800d144 <dir_sdi.constprop.0+0x34>
 800d120:	783b      	ldrb	r3, [r7, #0]
 800d122:	2b02      	cmp	r3, #2
 800d124:	d80a      	bhi.n	800d13c <dir_sdi.constprop.0+0x2c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d126:	893b      	ldrh	r3, [r7, #8]
 800d128:	b18b      	cbz	r3, 800d14e <dir_sdi.constprop.0+0x3e>
		dp->sect = fs->dirbase;
 800d12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 800d12c:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d130:	b16b      	cbz	r3, 800d14e <dir_sdi.constprop.0+0x3e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d132:	3730      	adds	r7, #48	@ 0x30
	return FR_OK;
 800d134:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d136:	6237      	str	r7, [r6, #32]
}
 800d138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 800d13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d0f1      	beq.n	800d126 <dir_sdi.constprop.0+0x16>
 800d142:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d144:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d146:	2b00      	cmp	r3, #0
 800d148:	d15c      	bne.n	800d204 <dir_sdi.constprop.0+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d14a:	2c01      	cmp	r4, #1
 800d14c:	d102      	bne.n	800d154 <dir_sdi.constprop.0+0x44>
		return FR_INT_ERR;
 800d14e:	2002      	movs	r0, #2
}
 800d150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d154:	463d      	mov	r5, r7
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d156:	696b      	ldr	r3, [r5, #20]
 800d158:	42a3      	cmp	r3, r4
 800d15a:	d9f8      	bls.n	800d14e <dir_sdi.constprop.0+0x3e>
		switch (fs->fs_type) {
 800d15c:	782b      	ldrb	r3, [r5, #0]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d025      	beq.n	800d1ae <dir_sdi.constprop.0+0x9e>
 800d162:	2b03      	cmp	r3, #3
 800d164:	d00d      	beq.n	800d182 <dir_sdi.constprop.0+0x72>
 800d166:	2b01      	cmp	r3, #1
 800d168:	d1f1      	bne.n	800d14e <dir_sdi.constprop.0+0x3e>
			bc = (UINT)clst; bc += bc / 2;
 800d16a:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d16e:	6a29      	ldr	r1, [r5, #32]
 800d170:	4628      	mov	r0, r5
 800d172:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800d176:	f7ff fc7d 	bl	800ca74 <move_window>
 800d17a:	b330      	cbz	r0, 800d1ca <dir_sdi.constprop.0+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d17c:	2001      	movs	r0, #1
}
 800d17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d182:	6a29      	ldr	r1, [r5, #32]
 800d184:	4628      	mov	r0, r5
 800d186:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d18a:	f7ff fc73 	bl	800ca74 <move_window>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d1f4      	bne.n	800d17c <dir_sdi.constprop.0+0x6c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d192:	00a3      	lsls	r3, r4, #2
 800d194:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800d198:	442b      	add	r3, r5
 800d19a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d19c:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d1a0:	2c01      	cmp	r4, #1
 800d1a2:	d9d4      	bls.n	800d14e <dir_sdi.constprop.0+0x3e>
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	429c      	cmp	r4, r3
 800d1a8:	d2d1      	bcs.n	800d14e <dir_sdi.constprop.0+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d1aa:	6835      	ldr	r5, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d1ac:	e7d3      	b.n	800d156 <dir_sdi.constprop.0+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d1ae:	6a29      	ldr	r1, [r5, #32]
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d1b6:	f7ff fc5d 	bl	800ca74 <move_window>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d1de      	bne.n	800d17c <dir_sdi.constprop.0+0x6c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d1be:	0063      	lsls	r3, r4, #1
 800d1c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d1c4:	442b      	add	r3, r5
 800d1c6:	8e1c      	ldrh	r4, [r3, #48]	@ 0x30
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d1c8:	e7ea      	b.n	800d1a0 <dir_sdi.constprop.0+0x90>
			wc = fs->win[bc++ % SS(fs)];
 800d1ca:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1ce:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800d1d0:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1d4:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d1d6:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1d8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d1dc:	f893 9030 	ldrb.w	r9, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1e0:	f7ff fc48 	bl	800ca74 <move_window>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d1c9      	bne.n	800d17c <dir_sdi.constprop.0+0x6c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d1e8:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800d1ec:	44a8      	add	r8, r5
 800d1ee:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800d1f2:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d1f6:	07e3      	lsls	r3, r4, #31
 800d1f8:	bf4c      	ite	mi
 800d1fa:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800d1fe:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d202:	e7cd      	b.n	800d1a0 <dir_sdi.constprop.0+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d204:	697a      	ldr	r2, [r7, #20]
	clst -= 2;
 800d206:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d208:	3a02      	subs	r2, #2
 800d20a:	4291      	cmp	r1, r2
 800d20c:	d203      	bcs.n	800d216 <dir_sdi.constprop.0+0x106>
	return clst * fs->csize + fs->database;
 800d20e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d210:	fb01 2303 	mla	r3, r1, r3, r2
 800d214:	e78a      	b.n	800d12c <dir_sdi.constprop.0+0x1c>
		dp->sect = fs->dirbase;
 800d216:	2300      	movs	r3, #0
 800d218:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d21c:	e797      	b.n	800d14e <dir_sdi.constprop.0+0x3e>
 800d21e:	bf00      	nop

0800d220 <follow_path>:
{
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d224:	780a      	ldrb	r2, [r1, #0]
{
 800d226:	b085      	sub	sp, #20
 800d228:	468b      	mov	fp, r1
 800d22a:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d22c:	2a2f      	cmp	r2, #47	@ 0x2f
	FATFS *fs = obj->fs;
 800d22e:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d230:	d001      	beq.n	800d236 <follow_path+0x16>
 800d232:	2a5c      	cmp	r2, #92	@ 0x5c
 800d234:	d105      	bne.n	800d242 <follow_path+0x22>
 800d236:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800d23a:	2b2f      	cmp	r3, #47	@ 0x2f
 800d23c:	d0fb      	beq.n	800d236 <follow_path+0x16>
 800d23e:	2b5c      	cmp	r3, #92	@ 0x5c
 800d240:	d0f9      	beq.n	800d236 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d242:	2200      	movs	r2, #0
 800d244:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d246:	f89b 2000 	ldrb.w	r2, [fp]
 800d24a:	2a1f      	cmp	r2, #31
 800d24c:	f240 816b 	bls.w	800d526 <follow_path+0x306>
 800d250:	465b      	mov	r3, fp
	p = *path; sfn = dp->fn;
 800d252:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 800d256:	46ab      	mov	fp, r5
		*d++ = (BYTE)val;
 800d258:	f04f 3a20 	mov.w	sl, #538976288	@ 0x20202020
 800d25c:	463e      	mov	r6, r7
 800d25e:	461d      	mov	r5, r3
 800d260:	2320      	movs	r3, #32
 800d262:	f242 0220 	movw	r2, #8224	@ 0x2020
 800d266:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 800d26a:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 800d26e:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800d270:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		c = (BYTE)p[si++];
 800d274:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d276:	2b20      	cmp	r3, #32
 800d278:	d95f      	bls.n	800d33a <follow_path+0x11a>
 800d27a:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 800d27c:	2700      	movs	r7, #0
 800d27e:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800d282:	2001      	movs	r0, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d284:	2b2f      	cmp	r3, #47	@ 0x2f
 800d286:	d066      	beq.n	800d356 <follow_path+0x136>
 800d288:	2b5c      	cmp	r3, #92	@ 0x5c
 800d28a:	d064      	beq.n	800d356 <follow_path+0x136>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d28c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d28e:	d001      	beq.n	800d294 <follow_path+0x74>
 800d290:	4567      	cmp	r7, ip
 800d292:	d345      	bcc.n	800d320 <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d294:	f1bc 0f0b 	cmp.w	ip, #11
 800d298:	d04f      	beq.n	800d33a <follow_path+0x11a>
 800d29a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d29c:	d14d      	bne.n	800d33a <follow_path+0x11a>
			i = 8; ni = 11;				/* Goto extension */
 800d29e:	2708      	movs	r7, #8
 800d2a0:	f04f 0c0b 	mov.w	ip, #11
		c = (BYTE)p[si++];
 800d2a4:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800d2a8:	3001      	adds	r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d2aa:	2b20      	cmp	r3, #32
 800d2ac:	d8ea      	bhi.n	800d284 <follow_path+0x64>
	*path = p + si;						/* Return pointer to the next segment */
 800d2ae:	4405      	add	r5, r0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d2b0:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800d2b4:	2ae5      	cmp	r2, #229	@ 0xe5
 800d2b6:	d102      	bne.n	800d2be <follow_path+0x9e>
 800d2b8:	2205      	movs	r2, #5
 800d2ba:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d2be:	2b20      	cmp	r3, #32
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d2c0:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800d2c2:	f8d4 8000 	ldr.w	r8, [r4]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d2c6:	bf8c      	ite	hi
 800d2c8:	2300      	movhi	r3, #0
 800d2ca:	2301      	movls	r3, #1
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d2d2:	f7ff ff1d 	bl	800d110 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	f040 80cc 	bne.w	800d476 <follow_path+0x256>
		res = move_window(fs, dp->sect);
 800d2de:	69e7      	ldr	r7, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2e0:	f108 0930 	add.w	r9, r8, #48	@ 0x30
 800d2e4:	e9cd b600 	strd	fp, r6, [sp]
 800d2e8:	46ab      	mov	fp, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d2ea:	f8d8 602c 	ldr.w	r6, [r8, #44]	@ 0x2c
 800d2ee:	42b7      	cmp	r7, r6
 800d2f0:	d046      	beq.n	800d380 <follow_path+0x160>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2f2:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2f6:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f040 80c1 	bne.w	800d482 <follow_path+0x262>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d300:	2301      	movs	r3, #1
 800d302:	463a      	mov	r2, r7
 800d304:	4649      	mov	r1, r9
 800d306:	f7ff fa99 	bl	800c83c <disk_read>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d036      	beq.n	800d37c <follow_path+0x15c>
				res = FR_DISK_ERR;
 800d30e:	2201      	movs	r2, #1
			fs->winsect = sector;
 800d310:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d314:	4610      	mov	r0, r2
			fs->winsect = sector;
 800d316:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
}
 800d31a:	b005      	add	sp, #20
 800d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
 800d320:	061a      	lsls	r2, r3, #24
 800d322:	d502      	bpl.n	800d32a <follow_path+0x10a>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d324:	3b80      	subs	r3, #128	@ 0x80
 800d326:	4a89      	ldr	r2, [pc, #548]	@ (800d54c <follow_path+0x32c>)
 800d328:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 800d32a:	2222      	movs	r2, #34	@ 0x22
 800d32c:	4988      	ldr	r1, [pc, #544]	@ (800d550 <follow_path+0x330>)
 800d32e:	e002      	b.n	800d336 <follow_path+0x116>
 800d330:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d334:	b132      	cbz	r2, 800d344 <follow_path+0x124>
 800d336:	4293      	cmp	r3, r2
 800d338:	d1fa      	bne.n	800d330 <follow_path+0x110>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d33a:	2206      	movs	r2, #6
}
 800d33c:	4610      	mov	r0, r2
 800d33e:	b005      	add	sp, #20
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d344:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d348:	2a19      	cmp	r2, #25
 800d34a:	d801      	bhi.n	800d350 <follow_path+0x130>
 800d34c:	3b20      	subs	r3, #32
 800d34e:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800d350:	55f3      	strb	r3, [r6, r7]
 800d352:	3701      	adds	r7, #1
 800d354:	e7a6      	b.n	800d2a4 <follow_path+0x84>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d356:	5c2a      	ldrb	r2, [r5, r0]
 800d358:	1829      	adds	r1, r5, r0
 800d35a:	2a2f      	cmp	r2, #47	@ 0x2f
 800d35c:	d002      	beq.n	800d364 <follow_path+0x144>
 800d35e:	2a5c      	cmp	r2, #92	@ 0x5c
 800d360:	f040 80ec 	bne.w	800d53c <follow_path+0x31c>
 800d364:	1c42      	adds	r2, r0, #1
 800d366:	442a      	add	r2, r5
 800d368:	4615      	mov	r5, r2
 800d36a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d36e:	292f      	cmp	r1, #47	@ 0x2f
 800d370:	d0fa      	beq.n	800d368 <follow_path+0x148>
 800d372:	295c      	cmp	r1, #92	@ 0x5c
 800d374:	d0f8      	beq.n	800d368 <follow_path+0x148>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d376:	2f00      	cmp	r7, #0
 800d378:	d19a      	bne.n	800d2b0 <follow_path+0x90>
 800d37a:	e7de      	b.n	800d33a <follow_path+0x11a>
			fs->winsect = sector;
 800d37c:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
		c = dp->dir[DIR_Name];
 800d380:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	2a00      	cmp	r2, #0
 800d386:	d075      	beq.n	800d474 <follow_path+0x254>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d388:	7ad9      	ldrb	r1, [r3, #11]
 800d38a:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 800d38e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d390:	7ada      	ldrb	r2, [r3, #11]
 800d392:	f012 0208 	ands.w	r2, r2, #8
 800d396:	d01b      	beq.n	800d3d0 <follow_path+0x1b0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d398:	6966      	ldr	r6, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d39a:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 800d39c:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d39e:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d3a0:	2f00      	cmp	r7, #0
 800d3a2:	d067      	beq.n	800d474 <follow_path+0x254>
 800d3a4:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
 800d3a8:	d264      	bcs.n	800d474 <follow_path+0x254>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d3aa:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800d3ae:	b953      	cbnz	r3, 800d3c6 <follow_path+0x1a6>
		dp->sect++;				/* Next sector */
 800d3b0:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 800d3b2:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d3b4:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d3b6:	2900      	cmp	r1, #0
 800d3b8:	f040 8087 	bne.w	800d4ca <follow_path+0x2aa>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d3bc:	892a      	ldrh	r2, [r5, #8]
 800d3be:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 800d3c2:	f240 809f 	bls.w	800d504 <follow_path+0x2e4>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d3c6:	3530      	adds	r5, #48	@ 0x30
	dp->dptr = ofs;						/* Current entry */
 800d3c8:	6166      	str	r6, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d3ca:	441d      	add	r5, r3
 800d3cc:	6225      	str	r5, [r4, #32]
	} while (res == FR_OK);
 800d3ce:	e78c      	b.n	800d2ea <follow_path+0xca>
	} while (--cnt && r == 0);
 800d3d0:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
 800d3d4:	7818      	ldrb	r0, [r3, #0]
 800d3d6:	4285      	cmp	r5, r0
 800d3d8:	d1de      	bne.n	800d398 <follow_path+0x178>
 800d3da:	785d      	ldrb	r5, [r3, #1]
 800d3dc:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800d3e0:	4285      	cmp	r5, r0
 800d3e2:	d1d9      	bne.n	800d398 <follow_path+0x178>
 800d3e4:	f894 5026 	ldrb.w	r5, [r4, #38]	@ 0x26
 800d3e8:	7898      	ldrb	r0, [r3, #2]
 800d3ea:	4285      	cmp	r5, r0
 800d3ec:	d1d4      	bne.n	800d398 <follow_path+0x178>
 800d3ee:	f894 5027 	ldrb.w	r5, [r4, #39]	@ 0x27
 800d3f2:	78d8      	ldrb	r0, [r3, #3]
 800d3f4:	4285      	cmp	r5, r0
 800d3f6:	d1cf      	bne.n	800d398 <follow_path+0x178>
 800d3f8:	791d      	ldrb	r5, [r3, #4]
 800d3fa:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800d3fe:	4285      	cmp	r5, r0
 800d400:	d1ca      	bne.n	800d398 <follow_path+0x178>
 800d402:	795d      	ldrb	r5, [r3, #5]
 800d404:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800d408:	4285      	cmp	r5, r0
 800d40a:	d1c5      	bne.n	800d398 <follow_path+0x178>
 800d40c:	799d      	ldrb	r5, [r3, #6]
 800d40e:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800d412:	4285      	cmp	r5, r0
 800d414:	d1c0      	bne.n	800d398 <follow_path+0x178>
 800d416:	79dd      	ldrb	r5, [r3, #7]
 800d418:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
 800d41c:	4285      	cmp	r5, r0
 800d41e:	d1bb      	bne.n	800d398 <follow_path+0x178>
 800d420:	7a1d      	ldrb	r5, [r3, #8]
 800d422:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800d426:	4285      	cmp	r5, r0
 800d428:	d1b6      	bne.n	800d398 <follow_path+0x178>
 800d42a:	7a5d      	ldrb	r5, [r3, #9]
 800d42c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800d430:	4285      	cmp	r5, r0
 800d432:	d1b1      	bne.n	800d398 <follow_path+0x178>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d434:	7a98      	ldrb	r0, [r3, #10]
 800d436:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800d43a:	4298      	cmp	r0, r3
 800d43c:	d1ac      	bne.n	800d398 <follow_path+0x178>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d43e:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800d442:	465d      	mov	r5, fp
 800d444:	9e01      	ldr	r6, [sp, #4]
 800d446:	0758      	lsls	r0, r3, #29
 800d448:	f8dd b000 	ldr.w	fp, [sp]
 800d44c:	f53f af76 	bmi.w	800d33c <follow_path+0x11c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d450:	06cb      	lsls	r3, r1, #27
 800d452:	d553      	bpl.n	800d4fc <follow_path+0x2dc>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d454:	6962      	ldr	r2, [r4, #20]
 800d456:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
	if (fs->fs_type == FS_FAT32) {
 800d45a:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d45e:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800d462:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d464:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800d466:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800d468:	d102      	bne.n	800d470 <follow_path+0x250>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d46a:	8a9b      	ldrh	r3, [r3, #20]
 800d46c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d470:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d472:	e6f5      	b.n	800d260 <follow_path+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d474:	2204      	movs	r2, #4
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d476:	2a04      	cmp	r2, #4
			ns = dp->fn[NSFLAG];
 800d478:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d47c:	f47f af5e 	bne.w	800d33c <follow_path+0x11c>
 800d480:	e03a      	b.n	800d4f8 <follow_path+0x2d8>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d482:	2301      	movs	r3, #1
 800d484:	4632      	mov	r2, r6
 800d486:	4649      	mov	r1, r9
 800d488:	f7ff f9e6 	bl	800c858 <disk_write>
 800d48c:	bbc0      	cbnz	r0, 800d500 <follow_path+0x2e0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d48e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800d492:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d496:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800d498:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d211      	bcs.n	800d4c4 <follow_path+0x2a4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4a0:	f898 5002 	ldrb.w	r5, [r8, #2]
 800d4a4:	2d01      	cmp	r5, #1
 800d4a6:	d802      	bhi.n	800d4ae <follow_path+0x28e>
 800d4a8:	e00c      	b.n	800d4c4 <follow_path+0x2a4>
					wsect += fs->fsize;
 800d4aa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d4ae:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4b0:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d4bc:	f7ff f9cc 	bl	800c858 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4c0:	2d01      	cmp	r5, #1
 800d4c2:	d1f2      	bne.n	800d4aa <follow_path+0x28a>
 800d4c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d4c8:	e71a      	b.n	800d300 <follow_path+0xe0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d4ca:	896a      	ldrh	r2, [r5, #10]
 800d4cc:	3a01      	subs	r2, #1
 800d4ce:	ea12 2256 	ands.w	r2, r2, r6, lsr #9
 800d4d2:	f47f af78 	bne.w	800d3c6 <follow_path+0x1a6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d4dc:	f7ff fcf2 	bl	800cec4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d4e0:	2801      	cmp	r0, #1
 800d4e2:	d91e      	bls.n	800d522 <follow_path+0x302>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d4e4:	1c47      	adds	r7, r0, #1
 800d4e6:	d00b      	beq.n	800d500 <follow_path+0x2e0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d4e8:	6969      	ldr	r1, [r5, #20]
 800d4ea:	9b02      	ldr	r3, [sp, #8]
 800d4ec:	4288      	cmp	r0, r1
 800d4ee:	d30d      	bcc.n	800d50c <follow_path+0x2ec>
			ns = dp->fn[NSFLAG];
 800d4f0:	9a03      	ldr	r2, [sp, #12]
 800d4f2:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
						dp->sect = 0; return FR_NO_FILE;
 800d4f6:	61e2      	str	r2, [r4, #28]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d4f8:	075a      	lsls	r2, r3, #29
 800d4fa:	d424      	bmi.n	800d546 <follow_path+0x326>
 800d4fc:	2205      	movs	r2, #5
 800d4fe:	e71d      	b.n	800d33c <follow_path+0x11c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d500:	2201      	movs	r2, #1
 800d502:	e7b8      	b.n	800d476 <follow_path+0x256>
			ns = dp->fn[NSFLAG];
 800d504:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				dp->sect = 0; return FR_NO_FILE;
 800d508:	61e1      	str	r1, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 800d50a:	e7f5      	b.n	800d4f8 <follow_path+0x2d8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d50c:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800d50e:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800d510:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d512:	4288      	cmp	r0, r1
 800d514:	d210      	bcs.n	800d538 <follow_path+0x318>
	return clst * fs->csize + fs->database;
 800d516:	896a      	ldrh	r2, [r5, #10]
 800d518:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800d51a:	fb00 7702 	mla	r7, r0, r2, r7
				dp->sect = clust2sect(fs, clst);
 800d51e:	61e7      	str	r7, [r4, #28]
 800d520:	e751      	b.n	800d3c6 <follow_path+0x1a6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d522:	2202      	movs	r2, #2
 800d524:	e7a7      	b.n	800d476 <follow_path+0x256>
		dp->fn[NSFLAG] = NS_NONAME;
 800d526:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 800d528:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800d52a:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
}
 800d52e:	b005      	add	sp, #20
 800d530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800d534:	f7ff bdec 	b.w	800d110 <dir_sdi.constprop.0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d538:	461f      	mov	r7, r3
 800d53a:	e7f0      	b.n	800d51e <follow_path+0x2fe>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d53c:	460d      	mov	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d53e:	2f00      	cmp	r7, #0
 800d540:	f47f aeb6 	bne.w	800d2b0 <follow_path+0x90>
 800d544:	e6f9      	b.n	800d33a <follow_path+0x11a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d546:	2204      	movs	r2, #4
	return res;
 800d548:	e6f8      	b.n	800d33c <follow_path+0x11c>
 800d54a:	bf00      	nop
 800d54c:	0800f158 	.word	0x0800f158
 800d550:	0800f148 	.word	0x0800f148

0800d554 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d554:	2901      	cmp	r1, #1
{
 800d556:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800d55c:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d55e:	d909      	bls.n	800d574 <remove_chain+0x20>
 800d560:	6973      	ldr	r3, [r6, #20]
 800d562:	428b      	cmp	r3, r1
 800d564:	d906      	bls.n	800d574 <remove_chain+0x20>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d566:	4605      	mov	r5, r0
 800d568:	4611      	mov	r1, r2
 800d56a:	b932      	cbnz	r2, 800d57a <remove_chain+0x26>
 800d56c:	46b1      	mov	r9, r6
			fs->wflag = 1;
 800d56e:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d570:	429c      	cmp	r4, r3
 800d572:	d312      	bcc.n	800d59a <remove_chain+0x46>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d574:	2002      	movs	r0, #2
}
 800d576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d9fa      	bls.n	800d574 <remove_chain+0x20>
 800d57e:	2a01      	cmp	r2, #1
 800d580:	d0f8      	beq.n	800d574 <remove_chain+0x20>
 800d582:	f04f 32ff 	mov.w	r2, #4294967295
 800d586:	4630      	mov	r0, r6
 800d588:	f7ff fc1c 	bl	800cdc4 <put_fat.part.0>
		if (res != FR_OK) return res;
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d1f2      	bne.n	800d576 <remove_chain+0x22>
 800d590:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d594:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d598:	e7e9      	b.n	800d56e <remove_chain+0x1a>
		switch (fs->fs_type) {
 800d59a:	f899 3000 	ldrb.w	r3, [r9]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	f000 8098 	beq.w	800d6d4 <remove_chain+0x180>
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d010      	beq.n	800d5ca <remove_chain+0x76>
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d1e3      	bne.n	800d574 <remove_chain+0x20>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5ac:	f8d9 1020 	ldr.w	r1, [r9, #32]
			bc = (UINT)clst; bc += bc / 2;
 800d5b0:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5b4:	4648      	mov	r0, r9
 800d5b6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800d5ba:	f7ff fa5b 	bl	800ca74 <move_window>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	f000 80b3 	beq.w	800d72a <remove_chain+0x1d6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d5c4:	2001      	movs	r0, #1
}
 800d5c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d5ca:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800d5ce:	4648      	mov	r0, r9
 800d5d0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d5d4:	f7ff fa4e 	bl	800ca74 <move_window>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d1f3      	bne.n	800d5c4 <remove_chain+0x70>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d5dc:	00a3      	lsls	r3, r4, #2
 800d5de:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800d5e2:	444b      	add	r3, r9
 800d5e4:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800d5e8:	f038 4870 	bics.w	r8, r8, #4026531840	@ 0xf0000000
 800d5ec:	f000 80bb 	beq.w	800d766 <remove_chain+0x212>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d5f0:	f1b8 0f01 	cmp.w	r8, #1
 800d5f4:	d0be      	beq.n	800d574 <remove_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d5f6:	6973      	ldr	r3, [r6, #20]
 800d5f8:	429c      	cmp	r4, r3
 800d5fa:	d2bb      	bcs.n	800d574 <remove_chain+0x20>
		switch (fs->fs_type) {
 800d5fc:	f896 9000 	ldrb.w	r9, [r6]
 800d600:	f1b9 0f02 	cmp.w	r9, #2
 800d604:	d02e      	beq.n	800d664 <remove_chain+0x110>
 800d606:	f1b9 0f03 	cmp.w	r9, #3
 800d60a:	d04c      	beq.n	800d6a6 <remove_chain+0x152>
 800d60c:	f1b9 0f01 	cmp.w	r9, #1
 800d610:	d1b0      	bne.n	800d574 <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d612:	6a31      	ldr	r1, [r6, #32]
			bc = (UINT)clst; bc += bc / 2;
 800d614:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d618:	4630      	mov	r0, r6
 800d61a:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800d61e:	f7ff fa29 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800d622:	2800      	cmp	r0, #0
 800d624:	d1a7      	bne.n	800d576 <remove_chain+0x22>
			p = fs->win + bc++ % SS(fs);
 800d626:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d62a:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 800d62c:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800d630:	f106 0a30 	add.w	sl, r6, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d634:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d638:	d561      	bpl.n	800d6fe <remove_chain+0x1aa>
 800d63a:	f81a 1003 	ldrb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d63e:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d640:	f001 010f 	and.w	r1, r1, #15
 800d644:	f80a 1003 	strb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d648:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800d64a:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d64e:	4411      	add	r1, r2
 800d650:	f7ff fa10 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800d654:	2800      	cmp	r0, #0
 800d656:	d18e      	bne.n	800d576 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800d658:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800d65c:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d660:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800d662:	e00c      	b.n	800d67e <remove_chain+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d664:	6a31      	ldr	r1, [r6, #32]
 800d666:	4630      	mov	r0, r6
 800d668:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d66c:	f7ff fa02 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800d670:	2800      	cmp	r0, #0
 800d672:	d180      	bne.n	800d576 <remove_chain+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d674:	0064      	lsls	r4, r4, #1
 800d676:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800d67a:	4434      	add	r4, r6
 800d67c:	8620      	strh	r0, [r4, #48]	@ 0x30
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d67e:	6972      	ldr	r2, [r6, #20]
 800d680:	6933      	ldr	r3, [r6, #16]
 800d682:	1e91      	subs	r1, r2, #2
			fs->wflag = 1;
 800d684:	70f7      	strb	r7, [r6, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d686:	428b      	cmp	r3, r1
 800d688:	d205      	bcs.n	800d696 <remove_chain+0x142>
			fs->free_clst++;
 800d68a:	3301      	adds	r3, #1
 800d68c:	6133      	str	r3, [r6, #16]
			fs->fsi_flag |= 1;
 800d68e:	7933      	ldrb	r3, [r6, #4]
 800d690:	f043 0301 	orr.w	r3, r3, #1
 800d694:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d696:	4542      	cmp	r2, r8
 800d698:	d965      	bls.n	800d766 <remove_chain+0x212>
 800d69a:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d69e:	4644      	mov	r4, r8
 800d6a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d6a4:	e764      	b.n	800d570 <remove_chain+0x1c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d6a6:	6a31      	ldr	r1, [r6, #32]
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d6ae:	f7ff f9e1 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	f47f af5f 	bne.w	800d576 <remove_chain+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6b8:	00a4      	lsls	r4, r4, #2
 800d6ba:	f106 0230 	add.w	r2, r6, #48	@ 0x30
 800d6be:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800d6c2:	5911      	ldr	r1, [r2, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800d6c4:	5310      	strh	r0, [r2, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6c6:	4422      	add	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800d6c8:	0e0b      	lsrs	r3, r1, #24
 800d6ca:	7090      	strb	r0, [r2, #2]
 800d6cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 800d6d0:	70d3      	strb	r3, [r2, #3]
			if (res != FR_OK) return res;
 800d6d2:	e7d4      	b.n	800d67e <remove_chain+0x12a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d6d4:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800d6d8:	4648      	mov	r0, r9
 800d6da:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d6de:	f7ff f9c9 	bl	800ca74 <move_window>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	f47f af6e 	bne.w	800d5c4 <remove_chain+0x70>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d6e8:	0063      	lsls	r3, r4, #1
 800d6ea:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d6ee:	444b      	add	r3, r9
 800d6f0:	f8b3 8030 	ldrh.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800d6f4:	f1b8 0f00 	cmp.w	r8, #0
 800d6f8:	f47f af7a 	bne.w	800d5f0 <remove_chain+0x9c>
 800d6fc:	e033      	b.n	800d766 <remove_chain+0x212>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d6fe:	f80a 0003 	strb.w	r0, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d702:	4630      	mov	r0, r6
 800d704:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800d706:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d70a:	4411      	add	r1, r2
 800d70c:	f7ff f9b2 	bl	800ca74 <move_window>
			if (res != FR_OK) break;
 800d710:	2800      	cmp	r0, #0
 800d712:	f47f af30 	bne.w	800d576 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800d716:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800d71a:	f81a 000b 	ldrb.w	r0, [sl, fp]
 800d71e:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d722:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 800d726:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800d728:	e7a9      	b.n	800d67e <remove_chain+0x12a>
			wc = fs->win[bc++ % SS(fs)];
 800d72a:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d72e:	f8d9 1020 	ldr.w	r1, [r9, #32]
			wc = fs->win[bc++ % SS(fs)];
 800d732:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d736:	4648      	mov	r0, r9
			wc = fs->win[bc++ % SS(fs)];
 800d738:	444b      	add	r3, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d73a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d73e:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d742:	f7ff f997 	bl	800ca74 <move_window>
 800d746:	2800      	cmp	r0, #0
 800d748:	f47f af3c 	bne.w	800d5c4 <remove_chain+0x70>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d74c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d750:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800d752:	44c8      	add	r8, r9
 800d754:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800d758:	ea4a 2803 	orr.w	r8, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d75c:	d505      	bpl.n	800d76a <remove_chain+0x216>
		if (nxt == 0) break;				/* Empty cluster? */
 800d75e:	ea5f 1818 	movs.w	r8, r8, lsr #4
 800d762:	f47f af45 	bne.w	800d5f0 <remove_chain+0x9c>
	return FR_OK;
 800d766:	2000      	movs	r0, #0
 800d768:	e705      	b.n	800d576 <remove_chain+0x22>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d76a:	f3c8 080b 	ubfx	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800d76e:	f1b8 0f00 	cmp.w	r8, #0
 800d772:	f47f af3d 	bne.w	800d5f0 <remove_chain+0x9c>
 800d776:	e7f6      	b.n	800d766 <remove_chain+0x212>

0800d778 <dir_register>:
{
 800d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	b085      	sub	sp, #20
 800d77e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d780:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800d782:	f7ff fcc5 	bl	800d110 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800d786:	2800      	cmp	r0, #0
 800d788:	f040 80b2 	bne.w	800d8f0 <dir_register+0x178>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d78c:	f8d6 b02c 	ldr.w	fp, [r6, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d790:	f106 0330 	add.w	r3, r6, #48	@ 0x30
			res = move_window(fs, dp->sect);
 800d794:	f8d4 a01c 	ldr.w	sl, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	465b      	mov	r3, fp
 800d79c:	46d3      	mov	fp, sl
 800d79e:	469a      	mov	sl, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d7a0:	45d3      	cmp	fp, sl
 800d7a2:	d014      	beq.n	800d7ce <dir_register+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7a4:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7a6:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d15c      	bne.n	800d866 <dir_register+0xee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	465a      	mov	r2, fp
 800d7b0:	9900      	ldr	r1, [sp, #0]
 800d7b2:	f7ff f843 	bl	800c83c <disk_read>
 800d7b6:	b138      	cbz	r0, 800d7c8 <dir_register+0x50>
			fs->winsect = sector;
 800d7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7bc:	62f3      	str	r3, [r6, #44]	@ 0x2c
				res = FR_DISK_ERR;
 800d7be:	2501      	movs	r5, #1
}
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	b005      	add	sp, #20
 800d7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800d7c8:	46da      	mov	sl, fp
 800d7ca:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d7ce:	6a23      	ldr	r3, [r4, #32]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2be5      	cmp	r3, #229	@ 0xe5
 800d7d4:	d000      	beq.n	800d7d8 <dir_register+0x60>
 800d7d6:	bb2b      	cbnz	r3, 800d824 <dir_register+0xac>
		res = move_window(fs, dp->sect);
 800d7d8:	69e1      	ldr	r1, [r4, #28]
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff f94a 	bl	800ca74 <move_window>
		if (res == FR_OK) {
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d1ec      	bne.n	800d7c0 <dir_register+0x48>
		*d++ = (BYTE)val;
 800d7e6:	2220      	movs	r2, #32
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	6a20      	ldr	r0, [r4, #32]
 800d7ec:	f000 fec2 	bl	800e574 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d7f0:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d7f2:	f104 0225 	add.w	r2, r4, #37	@ 0x25
 800d7f6:	1a9a      	subs	r2, r3, r2
 800d7f8:	2a02      	cmp	r2, #2
 800d7fa:	f240 80db 	bls.w	800d9b4 <dir_register+0x23c>
			*d++ = *s++;
 800d7fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d804:	605a      	str	r2, [r3, #4]
 800d806:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
}
 800d80a:	4628      	mov	r0, r5
			*d++ = *s++;
 800d80c:	721a      	strb	r2, [r3, #8]
 800d80e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800d812:	725a      	strb	r2, [r3, #9]
			fs->wflag = 1;
 800d814:	2201      	movs	r2, #1
			*d++ = *s++;
 800d816:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 800d81a:	7299      	strb	r1, [r3, #10]
			fs->wflag = 1;
 800d81c:	70f2      	strb	r2, [r6, #3]
}
 800d81e:	b005      	add	sp, #20
 800d820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d824:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800d826:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d828:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d82a:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800d82e:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800d832:	d265      	bcs.n	800d900 <dir_register+0x188>
 800d834:	f1bb 0f00 	cmp.w	fp, #0
 800d838:	d062      	beq.n	800d900 <dir_register+0x188>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d83a:	f3c5 0908 	ubfx	r9, r5, #0, #9
 800d83e:	f1b9 0f00 	cmp.w	r9, #0
 800d842:	d109      	bne.n	800d858 <dir_register+0xe0>
		dp->sect++;				/* Next sector */
 800d844:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 800d848:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d84a:	f8c4 b01c 	str.w	fp, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d84e:	bb51      	cbnz	r1, 800d8a6 <dir_register+0x12e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d850:	893b      	ldrh	r3, [r7, #8]
 800d852:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800d856:	d952      	bls.n	800d8fe <dir_register+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d858:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d85c:	eb08 0309 	add.w	r3, r8, r9
	dp->dptr = ofs;						/* Current entry */
 800d860:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d862:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d864:	e79c      	b.n	800d7a0 <dir_register+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d866:	2301      	movs	r3, #1
 800d868:	4652      	mov	r2, sl
 800d86a:	9900      	ldr	r1, [sp, #0]
 800d86c:	f7fe fff4 	bl	800c858 <disk_write>
 800d870:	2800      	cmp	r0, #0
 800d872:	d1a4      	bne.n	800d7be <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d874:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800d876:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d878:	ebaa 0103 	sub.w	r1, sl, r3
 800d87c:	69b3      	ldr	r3, [r6, #24]
 800d87e:	4299      	cmp	r1, r3
 800d880:	d20f      	bcs.n	800d8a2 <dir_register+0x12a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d882:	78b5      	ldrb	r5, [r6, #2]
 800d884:	2d01      	cmp	r5, #1
 800d886:	d90c      	bls.n	800d8a2 <dir_register+0x12a>
 800d888:	9f00      	ldr	r7, [sp, #0]
 800d88a:	e000      	b.n	800d88e <dir_register+0x116>
					wsect += fs->fsize;
 800d88c:	69b3      	ldr	r3, [r6, #24]
 800d88e:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d890:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800d892:	2301      	movs	r3, #1
 800d894:	4639      	mov	r1, r7
 800d896:	4652      	mov	r2, sl
 800d898:	7870      	ldrb	r0, [r6, #1]
 800d89a:	f7fe ffdd 	bl	800c858 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d89e:	2d01      	cmp	r5, #1
 800d8a0:	d1f4      	bne.n	800d88c <dir_register+0x114>
 800d8a2:	7870      	ldrb	r0, [r6, #1]
 800d8a4:	e782      	b.n	800d7ac <dir_register+0x34>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d8a6:	897b      	ldrh	r3, [r7, #10]
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800d8ae:	d1d3      	bne.n	800d858 <dir_register+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	f7ff fb07 	bl	800cec4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d8b6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d8b8:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d8ba:	d979      	bls.n	800d9b0 <dir_register+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d8bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d8c0:	f43f af7d 	beq.w	800d7be <dir_register+0x46>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	4298      	cmp	r0, r3
 800d8c8:	d21c      	bcs.n	800d904 <dir_register+0x18c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d8ca:	3b02      	subs	r3, #2
	clst -= 2;
 800d8cc:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d8d0:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d8d4:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 800d8d6:	f8c4 a018 	str.w	sl, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d8da:	f240 8084 	bls.w	800d9e6 <dir_register+0x26e>
	return clst * fs->csize + fs->database;
 800d8de:	897a      	ldrh	r2, [r7, #10]
 800d8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e2:	fb0b 3b02 	mla	fp, fp, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d8e6:	f8d6 a02c 	ldr.w	sl, [r6, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 800d8ea:	f8c4 b01c 	str.w	fp, [r4, #28]
 800d8ee:	e7b5      	b.n	800d85c <dir_register+0xe4>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d8f0:	2804      	cmp	r0, #4
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	d004      	beq.n	800d900 <dir_register+0x188>
}
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	b005      	add	sp, #20
 800d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 800d8fe:	61e1      	str	r1, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d900:	2507      	movs	r5, #7
	return res;
 800d902:	e75d      	b.n	800d7c0 <dir_register+0x48>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d904:	69a1      	ldr	r1, [r4, #24]
 800d906:	4620      	mov	r0, r4
 800d908:	f7ff fb32 	bl	800cf70 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d90c:	4682      	mov	sl, r0
 800d90e:	2800      	cmp	r0, #0
 800d910:	d0f6      	beq.n	800d900 <dir_register+0x188>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d912:	2801      	cmp	r0, #1
 800d914:	d04c      	beq.n	800d9b0 <dir_register+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d916:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d91a:	f43f af50 	beq.w	800d7be <dir_register+0x46>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d91e:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d920:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d924:	2b00      	cmp	r3, #0
 800d926:	d16a      	bne.n	800d9fe <dir_register+0x286>
		*d++ = (BYTE)val;
 800d928:	2100      	movs	r1, #0
 800d92a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d92e:	4640      	mov	r0, r8
	clst -= 2;
 800d930:	f1aa 0b02 	sub.w	fp, sl, #2
		*d++ = (BYTE)val;
 800d934:	f000 fe1e 	bl	800e574 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d938:	697b      	ldr	r3, [r7, #20]
	return clst * fs->csize + fs->database;
 800d93a:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d93c:	3b02      	subs	r3, #2
 800d93e:	459b      	cmp	fp, r3
 800d940:	f080 8086 	bcs.w	800da50 <dir_register+0x2d8>
	return clst * fs->csize + fs->database;
 800d944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d946:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d94a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d94c:	2900      	cmp	r1, #0
 800d94e:	d054      	beq.n	800d9fa <dir_register+0x282>
 800d950:	2100      	movs	r1, #0
 800d952:	9403      	str	r4, [sp, #12]
 800d954:	4614      	mov	r4, r2
 800d956:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800d95a:	460e      	mov	r6, r1
						fs->wflag = 1;
 800d95c:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d960:	4622      	mov	r2, r4
 800d962:	4641      	mov	r1, r8
 800d964:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800d966:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d968:	2301      	movs	r3, #1
 800d96a:	f7fe ff75 	bl	800c858 <disk_write>
 800d96e:	2800      	cmp	r0, #0
 800d970:	f47f af25 	bne.w	800d7be <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d974:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 800d976:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d978:	1ae1      	subs	r1, r4, r3
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	4299      	cmp	r1, r3
 800d97e:	d20e      	bcs.n	800d99e <dir_register+0x226>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d980:	78bd      	ldrb	r5, [r7, #2]
 800d982:	2d01      	cmp	r5, #1
 800d984:	d801      	bhi.n	800d98a <dir_register+0x212>
 800d986:	e00a      	b.n	800d99e <dir_register+0x226>
					wsect += fs->fsize;
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d98c:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800d98e:	2301      	movs	r3, #1
 800d990:	4641      	mov	r1, r8
 800d992:	4622      	mov	r2, r4
 800d994:	7878      	ldrb	r0, [r7, #1]
 800d996:	f7fe ff5f 	bl	800c858 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d99a:	2d01      	cmp	r5, #1
 800d99c:	d1f4      	bne.n	800d988 <dir_register+0x210>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d99e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9a0:	1c73      	adds	r3, r6, #1
 800d9a2:	8979      	ldrh	r1, [r7, #10]
 800d9a4:	1c44      	adds	r4, r0, #1
 800d9a6:	428b      	cmp	r3, r1
 800d9a8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800d9aa:	d21f      	bcs.n	800d9ec <dir_register+0x274>
 800d9ac:	461e      	mov	r6, r3
 800d9ae:	e7d5      	b.n	800d95c <dir_register+0x1e4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d9b0:	2502      	movs	r5, #2
 800d9b2:	e705      	b.n	800d7c0 <dir_register+0x48>
			*d++ = *s++;
 800d9b4:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 800d9be:	705a      	strb	r2, [r3, #1]
 800d9c0:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800d9c4:	709a      	strb	r2, [r3, #2]
 800d9c6:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 800d9ca:	70da      	strb	r2, [r3, #3]
 800d9cc:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800d9d0:	711a      	strb	r2, [r3, #4]
 800d9d2:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800d9d6:	715a      	strb	r2, [r3, #5]
 800d9d8:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800d9dc:	719a      	strb	r2, [r3, #6]
 800d9de:	f894 202b 	ldrb.w	r2, [r4, #43]	@ 0x2b
 800d9e2:	71da      	strb	r2, [r3, #7]
 800d9e4:	e70f      	b.n	800d806 <dir_register+0x8e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d9e6:	f04f 0b00 	mov.w	fp, #0
 800d9ea:	e77c      	b.n	800d8e6 <dir_register+0x16e>
					fs->winsect -= n;							/* Restore window offset */
 800d9ec:	4631      	mov	r1, r6
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d9ee:	697b      	ldr	r3, [r7, #20]
					fs->winsect -= n;							/* Restore window offset */
 800d9f0:	9d02      	ldr	r5, [sp, #8]
 800d9f2:	9e01      	ldr	r6, [sp, #4]
 800d9f4:	1a42      	subs	r2, r0, r1
 800d9f6:	9c03      	ldr	r4, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d9f8:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800d9fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d9fc:	e76a      	b.n	800d8d4 <dir_register+0x15c>
		wsect = fs->winsect;	/* Current sector number */
 800d9fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da00:	2301      	movs	r3, #1
 800da02:	4641      	mov	r1, r8
 800da04:	7878      	ldrb	r0, [r7, #1]
 800da06:	9201      	str	r2, [sp, #4]
 800da08:	f7fe ff26 	bl	800c858 <disk_write>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f47f aed6 	bne.w	800d7be <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	9a01      	ldr	r2, [sp, #4]
			fs->wflag = 0;
 800da16:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da18:	1ad1      	subs	r1, r2, r3
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	4299      	cmp	r1, r3
 800da1e:	d283      	bcs.n	800d928 <dir_register+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da20:	f897 b002 	ldrb.w	fp, [r7, #2]
 800da24:	f1bb 0f01 	cmp.w	fp, #1
 800da28:	f67f af7e 	bls.w	800d928 <dir_register+0x1b0>
 800da2c:	9401      	str	r4, [sp, #4]
 800da2e:	4614      	mov	r4, r2
 800da30:	e000      	b.n	800da34 <dir_register+0x2bc>
					wsect += fs->fsize;
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da36:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800da3a:	2301      	movs	r3, #1
 800da3c:	4641      	mov	r1, r8
 800da3e:	4622      	mov	r2, r4
 800da40:	7878      	ldrb	r0, [r7, #1]
 800da42:	f7fe ff09 	bl	800c858 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da46:	f1bb 0f01 	cmp.w	fp, #1
 800da4a:	d1f2      	bne.n	800da32 <dir_register+0x2ba>
 800da4c:	9c01      	ldr	r4, [sp, #4]
 800da4e:	e76b      	b.n	800d928 <dir_register+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da50:	2200      	movs	r2, #0
 800da52:	e77a      	b.n	800d94a <dir_register+0x1d2>

0800da54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da54:	b510      	push	{r4, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800da5c:	b1a1      	cbz	r1, 800da88 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da5e:	f891 c000 	ldrb.w	ip, [r1]
 800da62:	f1bc 0f20 	cmp.w	ip, #32
 800da66:	d912      	bls.n	800da8e <f_mount+0x3a>
 800da68:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 800da6c:	d00f      	beq.n	800da8e <f_mount+0x3a>
 800da6e:	4608      	mov	r0, r1
 800da70:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800da74:	2b20      	cmp	r3, #32
 800da76:	d90c      	bls.n	800da92 <f_mount+0x3e>
 800da78:	2b3a      	cmp	r3, #58	@ 0x3a
 800da7a:	d1f9      	bne.n	800da70 <f_mount+0x1c>
			i = *tp++ - '0';
 800da7c:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da7e:	4288      	cmp	r0, r1
 800da80:	d102      	bne.n	800da88 <f_mount+0x34>
 800da82:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800da86:	d006      	beq.n	800da96 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800da88:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800da8a:	b002      	add	sp, #8
 800da8c:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da8e:	4663      	mov	r3, ip
 800da90:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da92:	2b3a      	cmp	r3, #58	@ 0x3a
 800da94:	d0f2      	beq.n	800da7c <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800da96:	4913      	ldr	r1, [pc, #76]	@ (800dae4 <f_mount+0x90>)
 800da98:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800da9a:	b143      	cbz	r3, 800daae <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800da9c:	4812      	ldr	r0, [pc, #72]	@ (800dae8 <f_mount+0x94>)
 800da9e:	6804      	ldr	r4, [r0, #0]
 800daa0:	42a3      	cmp	r3, r4
 800daa2:	d019      	beq.n	800dad8 <f_mount+0x84>
 800daa4:	6904      	ldr	r4, [r0, #16]
 800daa6:	429c      	cmp	r4, r3
 800daa8:	d013      	beq.n	800dad2 <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800daaa:	2000      	movs	r0, #0
 800daac:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800daae:	9b01      	ldr	r3, [sp, #4]
 800dab0:	b15b      	cbz	r3, 800daca <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800dab2:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dab4:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800dab6:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800dab8:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800daba:	d107      	bne.n	800dacc <f_mount+0x78>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dabc:	4602      	mov	r2, r0
 800dabe:	a901      	add	r1, sp, #4
 800dac0:	4668      	mov	r0, sp
 800dac2:	f7ff f815 	bl	800caf0 <find_volume>
}
 800dac6:	b002      	add	sp, #8
 800dac8:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800daca:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dacc:	2000      	movs	r0, #0
}
 800dace:	b002      	add	sp, #8
 800dad0:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dad2:	2400      	movs	r4, #0
 800dad4:	6104      	str	r4, [r0, #16]
 800dad6:	e7e8      	b.n	800daaa <f_mount+0x56>
 800dad8:	2400      	movs	r4, #0
 800dada:	6004      	str	r4, [r0, #0]
 800dadc:	6904      	ldr	r4, [r0, #16]
 800dade:	429c      	cmp	r4, r3
 800dae0:	d1e3      	bne.n	800daaa <f_mount+0x56>
 800dae2:	e7f6      	b.n	800dad2 <f_mount+0x7e>
 800dae4:	240ac7f4 	.word	0x240ac7f4
 800dae8:	240ac7d0 	.word	0x240ac7d0

0800daec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800daec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf0:	b090      	sub	sp, #64	@ 0x40
 800daf2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d036      	beq.n	800db66 <f_open+0x7a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800daf8:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800dafc:	4616      	mov	r6, r2
 800dafe:	4604      	mov	r4, r0
 800db00:	a903      	add	r1, sp, #12
 800db02:	a801      	add	r0, sp, #4
 800db04:	463a      	mov	r2, r7
 800db06:	f7fe fff3 	bl	800caf0 <find_volume>
	if (res == FR_OK) {
 800db0a:	4605      	mov	r5, r0
 800db0c:	b128      	cbz	r0, 800db1a <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800db0e:	2300      	movs	r3, #0
 800db10:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800db12:	4628      	mov	r0, r5
 800db14:	b010      	add	sp, #64	@ 0x40
 800db16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800db1a:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800db1e:	a804      	add	r0, sp, #16
 800db20:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800db22:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800db26:	f7ff fb7b 	bl	800d220 <follow_path>
		if (res == FR_OK) {
 800db2a:	b9a8      	cbnz	r0, 800db58 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800db2c:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 800db30:	2b00      	cmp	r3, #0
 800db32:	db1d      	blt.n	800db70 <f_open+0x84>
		if (Files[i].fs) {	/* Existing entry */
 800db34:	4ba8      	ldr	r3, [pc, #672]	@ (800ddd8 <f_open+0x2ec>)
 800db36:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db3a:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	2800      	cmp	r0, #0
 800db40:	f000 8109 	beq.w	800dd56 <f_open+0x26a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db44:	4290      	cmp	r0, r2
 800db46:	d060      	beq.n	800dc0a <f_open+0x11e>
		if (Files[i].fs) {	/* Existing entry */
 800db48:	6919      	ldr	r1, [r3, #16]
 800db4a:	2900      	cmp	r1, #0
 800db4c:	d06d      	beq.n	800dc2a <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db4e:	4291      	cmp	r1, r2
 800db50:	f000 8116 	beq.w	800dd80 <f_open+0x294>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800db54:	2512      	movs	r5, #18
 800db56:	e7da      	b.n	800db0e <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800db58:	f016 0f1c 	tst.w	r6, #28
 800db5c:	d001      	beq.n	800db62 <f_open+0x76>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800db5e:	2804      	cmp	r0, #4
 800db60:	d008      	beq.n	800db74 <f_open+0x88>
 800db62:	4605      	mov	r5, r0
 800db64:	e7d3      	b.n	800db0e <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800db66:	2509      	movs	r5, #9
}
 800db68:	4628      	mov	r0, r5
 800db6a:	b010      	add	sp, #64	@ 0x40
 800db6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800db70:	2506      	movs	r5, #6
 800db72:	e7cc      	b.n	800db0e <f_open+0x22>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800db74:	4b98      	ldr	r3, [pc, #608]	@ (800ddd8 <f_open+0x2ec>)
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	2a00      	cmp	r2, #0
 800db7a:	f000 80f9 	beq.w	800dd70 <f_open+0x284>
 800db7e:	691b      	ldr	r3, [r3, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1e7      	bne.n	800db54 <f_open+0x68>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800db84:	a804      	add	r0, sp, #16
 800db86:	f7ff fdf7 	bl	800d778 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800db8a:	4603      	mov	r3, r0
 800db8c:	2800      	cmp	r0, #0
 800db8e:	f040 811c 	bne.w	800ddca <f_open+0x2de>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800db92:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 800db96:	f7fe fd47 	bl	800c628 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800db9a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db9e:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800dba0:	f8c9 000e 	str.w	r0, [r9, #14]
 800dba4:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dba8:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 800dbac:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800dbb0:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800dbb4:	2b03      	cmp	r3, #3
 800dbb6:	d103      	bne.n	800dbc0 <f_open+0xd4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dbb8:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800dbbc:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800dbc6:	f898 2000 	ldrb.w	r2, [r8]
 800dbca:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800dbcc:	f04f 0200 	mov.w	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800dbd0:	bf08      	it	eq
 800dbd2:	f8a9 3014 	strheq.w	r3, [r9, #20]
					fs->wflag = 1;
 800dbd6:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800dbd8:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 800dbdc:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800dbe0:	2e00      	cmp	r6, #0
 800dbe2:	f040 80de 	bne.w	800dda2 <f_open+0x2b6>
				mode |= FA_MODIFIED;
 800dbe6:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbea:	2f01      	cmp	r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dbec:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbf0:	a804      	add	r0, sp, #16
 800dbf2:	bf94      	ite	ls
 800dbf4:	2100      	movls	r1, #0
 800dbf6:	2101      	movhi	r1, #1
			fp->dir_ptr = dj.dir;
 800dbf8:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbfc:	f7fe fe46 	bl	800c88c <inc_lock>
 800dc00:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d143      	bne.n	800dc8e <f_open+0x1a2>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dc06:	2502      	movs	r5, #2
 800dc08:	e781      	b.n	800db0e <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	f8dd e018 	ldr.w	lr, [sp, #24]
 800dc10:	4572      	cmp	r2, lr
 800dc12:	f000 80b9 	beq.w	800dd88 <f_open+0x29c>
		if (Files[i].fs) {	/* Existing entry */
 800dc16:	691a      	ldr	r2, [r3, #16]
 800dc18:	b13a      	cbz	r2, 800dc2a <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dc1a:	4282      	cmp	r2, r0
 800dc1c:	d19a      	bne.n	800db54 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dc1e:	4628      	mov	r0, r5
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dc20:	695a      	ldr	r2, [r3, #20]
 800dc22:	4572      	cmp	r2, lr
 800dc24:	d00d      	beq.n	800dc42 <f_open+0x156>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d094      	beq.n	800db54 <f_open+0x68>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc2a:	f016 0f1c 	tst.w	r6, #28
 800dc2e:	d018      	beq.n	800dc62 <f_open+0x176>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc30:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800dc34:	f013 0f11 	tst.w	r3, #17
 800dc38:	d120      	bne.n	800dc7c <f_open+0x190>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc3a:	0773      	lsls	r3, r6, #29
 800dc3c:	d520      	bpl.n	800dc80 <f_open+0x194>
 800dc3e:	2508      	movs	r5, #8
 800dc40:	e765      	b.n	800db0e <f_open+0x22>
				Files[i].clu == dp->obj.sclust &&
 800dc42:	6999      	ldr	r1, [r3, #24]
 800dc44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc46:	4291      	cmp	r1, r2
 800dc48:	d1ed      	bne.n	800dc26 <f_open+0x13a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dc4a:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dc4c:	f1bc 0f00 	cmp.w	ip, #0
 800dc50:	d105      	bne.n	800dc5e <f_open+0x172>
 800dc52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800dc56:	899b      	ldrh	r3, [r3, #12]
 800dc58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc5c:	d1e5      	bne.n	800dc2a <f_open+0x13e>
 800dc5e:	2510      	movs	r5, #16
 800dc60:	e755      	b.n	800db0e <f_open+0x22>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dc62:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800dc66:	06d8      	lsls	r0, r3, #27
 800dc68:	d40f      	bmi.n	800dc8a <f_open+0x19e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dc6a:	07b2      	lsls	r2, r6, #30
 800dc6c:	d501      	bpl.n	800dc72 <f_open+0x186>
 800dc6e:	07db      	lsls	r3, r3, #31
 800dc70:	d404      	bmi.n	800dc7c <f_open+0x190>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dc72:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 800dc74:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dc78:	d5b7      	bpl.n	800dbea <f_open+0xfe>
 800dc7a:	e7b4      	b.n	800dbe6 <f_open+0xfa>
					res = FR_DENIED;
 800dc7c:	2507      	movs	r5, #7
 800dc7e:	e746      	b.n	800db0e <f_open+0x22>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc80:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800dc82:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc86:	d5b0      	bpl.n	800dbea <f_open+0xfe>
 800dc88:	e785      	b.n	800db96 <f_open+0xaa>
					res = FR_NO_FILE;
 800dc8a:	2504      	movs	r5, #4
 800dc8c:	e73f      	b.n	800db0e <f_open+0x22>
	if (fs->fs_type == FS_FAT32) {
 800dc8e:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800dc92:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	d103      	bne.n	800dca2 <f_open+0x1b6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc9a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800dc9e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dca2:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 800dca4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dca8:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dcaa:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
	rv = rv << 8 | ptr[0];
 800dcae:	f8d9 901c 	ldr.w	r9, [r9, #28]
		*d++ = (BYTE)val;
 800dcb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dcb6:	62e1      	str	r1, [r4, #44]	@ 0x2c
		*d++ = (BYTE)val;
 800dcb8:	4650      	mov	r0, sl
			fp->err = 0;			/* Clear error flag */
 800dcba:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dcbc:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dcbe:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dcc0:	f8c4 8000 	str.w	r8, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dcc4:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->obj.id = fs->id;
 800dcc8:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcca:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 800dccc:	f000 fc52 	bl	800e574 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dcd0:	06b9      	lsls	r1, r7, #26
 800dcd2:	f57f af1e 	bpl.w	800db12 <f_open+0x26>
 800dcd6:	f1b9 0f00 	cmp.w	r9, #0
 800dcda:	f43f af1a 	beq.w	800db12 <f_open+0x26>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dcde:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dce2:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dce6:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dcea:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcee:	d96e      	bls.n	800ddce <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800dcf0:	4631      	mov	r1, r6
 800dcf2:	6820      	ldr	r0, [r4, #0]
 800dcf4:	f7ff f8e6 	bl	800cec4 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800dcf8:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcfa:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800dcfe:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800dd00:	d934      	bls.n	800dd6c <f_open+0x280>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd02:	1c42      	adds	r2, r0, #1
 800dd04:	d001      	beq.n	800dd0a <f_open+0x21e>
 800dd06:	454f      	cmp	r7, r9
 800dd08:	d3f2      	bcc.n	800dcf0 <f_open+0x204>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd0a:	1c73      	adds	r3, r6, #1
				fp->clust = clst;
 800dd0c:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd0e:	d020      	beq.n	800dd52 <f_open+0x266>
 800dd10:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f43f aefc 	beq.w	800db12 <f_open+0x26>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd1a:	f8d8 3014 	ldr.w	r3, [r8, #20]
	clst -= 2;
 800dd1e:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd20:	3b02      	subs	r3, #2
 800dd22:	429e      	cmp	r6, r3
 800dd24:	f4bf af6f 	bcs.w	800dc06 <f_open+0x11a>
	return clst * fs->csize + fs->database;
 800dd28:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800dd2c:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800dd30:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	f43f af66 	beq.w	800dc06 <f_open+0x11a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd3a:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd3e:	4651      	mov	r1, sl
 800dd40:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd42:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd44:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dd48:	f7fe fd78 	bl	800c83c <disk_read>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	f43f aee0 	beq.w	800db12 <f_open+0x26>
 800dd52:	2501      	movs	r5, #1
 800dd54:	e6db      	b.n	800db0e <f_open+0x22>
		if (Files[i].fs) {	/* Existing entry */
 800dd56:	6919      	ldr	r1, [r3, #16]
 800dd58:	2900      	cmp	r1, #0
 800dd5a:	f43f af66 	beq.w	800dc2a <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dd5e:	4291      	cmp	r1, r2
 800dd60:	f47f af63 	bne.w	800dc2a <f_open+0x13e>
			be = 1;
 800dd64:	2001      	movs	r0, #1
 800dd66:	f8dd e018 	ldr.w	lr, [sp, #24]
 800dd6a:	e759      	b.n	800dc20 <f_open+0x134>
				fp->clust = clst;
 800dd6c:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd6e:	e74a      	b.n	800dc06 <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dd70:	a804      	add	r0, sp, #16
 800dd72:	f7ff fd01 	bl	800d778 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f43f af0b 	beq.w	800db92 <f_open+0xa6>
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	e6c6      	b.n	800db0e <f_open+0x22>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dd80:	4628      	mov	r0, r5
 800dd82:	f8dd e018 	ldr.w	lr, [sp, #24]
 800dd86:	e74b      	b.n	800dc20 <f_open+0x134>
				Files[i].clu == dp->obj.sclust &&
 800dd88:	689a      	ldr	r2, [r3, #8]
 800dd8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd8c:	4291      	cmp	r1, r2
 800dd8e:	d020      	beq.n	800ddd2 <f_open+0x2e6>
		if (Files[i].fs) {	/* Existing entry */
 800dd90:	691a      	ldr	r2, [r3, #16]
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	f43f af49 	beq.w	800dc2a <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dd98:	4290      	cmp	r0, r2
 800dd9a:	f47f aedb 	bne.w	800db54 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dd9e:	2000      	movs	r0, #0
 800dda0:	e73e      	b.n	800dc20 <f_open+0x134>
						res = remove_chain(&dj.obj, cl, 0);
 800dda2:	4631      	mov	r1, r6
 800dda4:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800dda6:	f8d8 a02c 	ldr.w	sl, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800ddaa:	f7ff fbd3 	bl	800d554 <remove_chain>
						if (res == FR_OK) {
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	f47f aed7 	bne.w	800db62 <f_open+0x76>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ddb4:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800ddb6:	4651      	mov	r1, sl
 800ddb8:	4640      	mov	r0, r8
 800ddba:	f7fe fe5b 	bl	800ca74 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ddbe:	f8c8 600c 	str.w	r6, [r8, #12]
		if (res == FR_OK) {
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	f43f af0e 	beq.w	800dbe6 <f_open+0xfa>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ddca:	461d      	mov	r5, r3
 800ddcc:	e69f      	b.n	800db0e <f_open+0x22>
				fp->clust = clst;
 800ddce:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ddd0:	e79e      	b.n	800dd10 <f_open+0x224>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ddd2:	462a      	mov	r2, r5
 800ddd4:	e73a      	b.n	800dc4c <f_open+0x160>
 800ddd6:	bf00      	nop
 800ddd8:	240ac7d0 	.word	0x240ac7d0

0800dddc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde0:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800dde2:	2300      	movs	r3, #0
{
 800dde4:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800dde6:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dde8:	b150      	cbz	r0, 800de00 <f_read+0x24>
 800ddea:	6803      	ldr	r3, [r0, #0]
 800ddec:	4604      	mov	r4, r0
 800ddee:	b13b      	cbz	r3, 800de00 <f_read+0x24>
 800ddf0:	4691      	mov	r9, r2
 800ddf2:	781a      	ldrb	r2, [r3, #0]
 800ddf4:	b122      	cbz	r2, 800de00 <f_read+0x24>
 800ddf6:	460e      	mov	r6, r1
 800ddf8:	88da      	ldrh	r2, [r3, #6]
 800ddfa:	8881      	ldrh	r1, [r0, #4]
 800ddfc:	4291      	cmp	r1, r2
 800ddfe:	d004      	beq.n	800de0a <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 800de00:	2509      	movs	r5, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800de02:	4628      	mov	r0, r5
 800de04:	b003      	add	sp, #12
 800de06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800de0a:	7858      	ldrb	r0, [r3, #1]
 800de0c:	f7fe fcf6 	bl	800c7fc <disk_status>
 800de10:	07c2      	lsls	r2, r0, #31
 800de12:	d4f5      	bmi.n	800de00 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800de14:	7d65      	ldrb	r5, [r4, #21]
 800de16:	2d00      	cmp	r5, #0
 800de18:	d1f3      	bne.n	800de02 <f_read+0x26>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800de1a:	7d23      	ldrb	r3, [r4, #20]
 800de1c:	f013 0b01 	ands.w	fp, r3, #1
 800de20:	f000 80d9 	beq.w	800dfd6 <f_read+0x1fa>
	remain = fp->obj.objsize - fp->fptr;
 800de24:	69a0      	ldr	r0, [r4, #24]
 800de26:	68e3      	ldr	r3, [r4, #12]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800de28:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 800de2c:	eba3 0800 	sub.w	r8, r3, r0
 800de30:	45c8      	cmp	r8, r9
 800de32:	bf28      	it	cs
 800de34:	46c8      	movcs	r8, r9
	for ( ;  btr;								/* Repeat until all data read */
 800de36:	f1b8 0f00 	cmp.w	r8, #0
 800de3a:	d0e2      	beq.n	800de02 <f_read+0x26>
 800de3c:	9500      	str	r5, [sp, #0]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800de3e:	f3c0 0c08 	ubfx	ip, r0, #0, #9
 800de42:	f1bc 0f00 	cmp.w	ip, #0
 800de46:	d152      	bne.n	800deee <f_read+0x112>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800de48:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800de4c:	0a43      	lsrs	r3, r0, #9
 800de4e:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800de50:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 800de54:	d036      	beq.n	800dec4 <f_read+0xe8>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800de56:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800de58:	f8da 3014 	ldr.w	r3, [sl, #20]
	clst -= 2;
 800de5c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800de5e:	3b02      	subs	r3, #2
 800de60:	4298      	cmp	r0, r3
 800de62:	d23d      	bcs.n	800dee0 <f_read+0x104>
	return clst * fs->csize + fs->database;
 800de64:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800de68:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 800de6c:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800de70:	2b00      	cmp	r3, #0
 800de72:	d035      	beq.n	800dee0 <f_read+0x104>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800de74:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
			sect += csect;
 800de78:	eb02 0903 	add.w	r9, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800de7c:	d378      	bcc.n	800df70 <f_read+0x194>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800de7e:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800de82:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800de86:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de88:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 800de8c:	bf88      	it	hi
 800de8e:	1a8d      	subhi	r5, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de90:	464a      	mov	r2, r9
 800de92:	4631      	mov	r1, r6
 800de94:	462b      	mov	r3, r5
 800de96:	f7fe fcd1 	bl	800c83c <disk_read>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	f040 8094 	bne.w	800dfc8 <f_read+0x1ec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dea0:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800dea4:	2a00      	cmp	r2, #0
 800dea6:	f2c0 80ad 	blt.w	800e004 <f_read+0x228>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800deaa:	026a      	lsls	r2, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800deac:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800deae:	ebb8 0802 	subs.w	r8, r8, r2
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	4416      	add	r6, r2
 800deb6:	4410      	add	r0, r2
 800deb8:	4413      	add	r3, r2
 800deba:	61a0      	str	r0, [r4, #24]
 800debc:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800debe:	d1be      	bne.n	800de3e <f_read+0x62>
 800dec0:	9d00      	ldr	r5, [sp, #0]
 800dec2:	e79e      	b.n	800de02 <f_read+0x26>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d16b      	bne.n	800dfa0 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dec8:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800deca:	2801      	cmp	r0, #1
 800decc:	d908      	bls.n	800dee0 <f_read+0x104>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dece:	1c43      	adds	r3, r0, #1
 800ded0:	d07a      	beq.n	800dfc8 <f_read+0x1ec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ded2:	f8da 3014 	ldr.w	r3, [sl, #20]
				fp->clust = clst;				/* Update current cluster */
 800ded6:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800ded8:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800deda:	3b02      	subs	r3, #2
 800dedc:	4298      	cmp	r0, r3
 800dede:	d3c1      	bcc.n	800de64 <f_read+0x88>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dee0:	2302      	movs	r3, #2
 800dee2:	461d      	mov	r5, r3
 800dee4:	7563      	strb	r3, [r4, #21]
}
 800dee6:	4628      	mov	r0, r5
 800dee8:	b003      	add	sp, #12
 800deea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800deee:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800def2:	f5cc 7300 	rsb	r3, ip, #512	@ 0x200
 800def6:	4543      	cmp	r3, r8
 800def8:	bf28      	it	cs
 800defa:	4643      	movcs	r3, r8
 800defc:	461a      	mov	r2, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800defe:	eb01 030c 	add.w	r3, r1, ip
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800df02:	1e50      	subs	r0, r2, #1
 800df04:	2805      	cmp	r0, #5
 800df06:	d905      	bls.n	800df14 <f_read+0x138>
 800df08:	f10c 0c01 	add.w	ip, ip, #1
 800df0c:	4461      	add	r1, ip
 800df0e:	1a71      	subs	r1, r6, r1
 800df10:	2902      	cmp	r1, #2
 800df12:	d809      	bhi.n	800df28 <f_read+0x14c>
 800df14:	1e71      	subs	r1, r6, #1
 800df16:	eb03 0c02 	add.w	ip, r3, r2
			*d++ = *s++;
 800df1a:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800df1e:	4563      	cmp	r3, ip
			*d++ = *s++;
 800df20:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800df24:	d1f9      	bne.n	800df1a <f_read+0x13e>
 800df26:	e7c1      	b.n	800deac <f_read+0xd0>
 800df28:	f022 0e03 	bic.w	lr, r2, #3
 800df2c:	4619      	mov	r1, r3
 800df2e:	4630      	mov	r0, r6
 800df30:	449e      	add	lr, r3
			*d++ = *s++;
 800df32:	f851 5b04 	ldr.w	r5, [r1], #4
 800df36:	4571      	cmp	r1, lr
 800df38:	f840 5b04 	str.w	r5, [r0], #4
		} while (--cnt);
 800df3c:	d1f9      	bne.n	800df32 <f_read+0x156>
 800df3e:	f022 0103 	bic.w	r1, r2, #3
 800df42:	0795      	lsls	r5, r2, #30
 800df44:	f002 0003 	and.w	r0, r2, #3
 800df48:	eb06 0c01 	add.w	ip, r6, r1
 800df4c:	eb03 0e01 	add.w	lr, r3, r1
 800df50:	d0ac      	beq.n	800deac <f_read+0xd0>
			*d++ = *s++;
 800df52:	5c5b      	ldrb	r3, [r3, r1]
		} while (--cnt);
 800df54:	2801      	cmp	r0, #1
			*d++ = *s++;
 800df56:	5473      	strb	r3, [r6, r1]
		} while (--cnt);
 800df58:	d0a8      	beq.n	800deac <f_read+0xd0>
			*d++ = *s++;
 800df5a:	f89e 3001 	ldrb.w	r3, [lr, #1]
		} while (--cnt);
 800df5e:	2802      	cmp	r0, #2
			*d++ = *s++;
 800df60:	f88c 3001 	strb.w	r3, [ip, #1]
		} while (--cnt);
 800df64:	d0a2      	beq.n	800deac <f_read+0xd0>
			*d++ = *s++;
 800df66:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800df6a:	f88c 3002 	strb.w	r3, [ip, #2]
		} while (--cnt);
 800df6e:	e79d      	b.n	800deac <f_read+0xd0>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800df70:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800df72:	f104 0130 	add.w	r1, r4, #48	@ 0x30
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800df76:	454a      	cmp	r2, r9
 800df78:	d00c      	beq.n	800df94 <f_read+0x1b8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800df7a:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df7e:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800df82:	2b00      	cmp	r3, #0
 800df84:	db30      	blt.n	800dfe8 <f_read+0x20c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800df86:	2301      	movs	r3, #1
 800df88:	464a      	mov	r2, r9
 800df8a:	9101      	str	r1, [sp, #4]
 800df8c:	f7fe fc56 	bl	800c83c <disk_read>
 800df90:	9901      	ldr	r1, [sp, #4]
 800df92:	b9c8      	cbnz	r0, 800dfc8 <f_read+0x1ec>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800df94:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800df96:	f8c4 9020 	str.w	r9, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800df9a:	f3c3 0c08 	ubfx	ip, r3, #0, #9
 800df9e:	e7a8      	b.n	800def2 <f_read+0x116>
					if (fp->cltbl) {
 800dfa0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	FATFS *fs = fp->obj.fs;
 800dfa2:	6821      	ldr	r1, [r4, #0]
					if (fp->cltbl) {
 800dfa4:	b1c8      	cbz	r0, 800dfda <f_read+0x1fe>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dfa6:	8949      	ldrh	r1, [r1, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dfa8:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dfaa:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfae:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dfb0:	b929      	cbnz	r1, 800dfbe <f_read+0x1e2>
 800dfb2:	e795      	b.n	800dee0 <f_read+0x104>
		cl -= ncl; tbl++;		/* Next fragment */
 800dfb4:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfb6:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dfba:	2900      	cmp	r1, #0
 800dfbc:	d090      	beq.n	800dee0 <f_read+0x104>
		if (cl < ncl) break;	/* In this fragment? */
 800dfbe:	428b      	cmp	r3, r1
 800dfc0:	d2f8      	bcs.n	800dfb4 <f_read+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 800dfc2:	6840      	ldr	r0, [r0, #4]
 800dfc4:	4418      	add	r0, r3
 800dfc6:	e780      	b.n	800deca <f_read+0xee>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfc8:	465d      	mov	r5, fp
 800dfca:	2301      	movs	r3, #1
}
 800dfcc:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfce:	7563      	strb	r3, [r4, #21]
}
 800dfd0:	b003      	add	sp, #12
 800dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dfd6:	2507      	movs	r5, #7
 800dfd8:	e713      	b.n	800de02 <f_read+0x26>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dfda:	4608      	mov	r0, r1
 800dfdc:	69e1      	ldr	r1, [r4, #28]
 800dfde:	9201      	str	r2, [sp, #4]
 800dfe0:	f7fe ff70 	bl	800cec4 <get_fat.isra.0>
 800dfe4:	9a01      	ldr	r2, [sp, #4]
 800dfe6:	e770      	b.n	800deca <f_read+0xee>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfe8:	2301      	movs	r3, #1
 800dfea:	9101      	str	r1, [sp, #4]
 800dfec:	f7fe fc34 	bl	800c858 <disk_write>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d1e9      	bne.n	800dfc8 <f_read+0x1ec>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dff4:	7d23      	ldrb	r3, [r4, #20]
 800dff6:	9901      	ldr	r1, [sp, #4]
 800dff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dffc:	7523      	strb	r3, [r4, #20]
 800dffe:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800e002:	e7c0      	b.n	800df86 <f_read+0x1aa>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e004:	6a22      	ldr	r2, [r4, #32]
 800e006:	eba2 0209 	sub.w	r2, r2, r9
 800e00a:	42aa      	cmp	r2, r5
 800e00c:	f4bf af4d 	bcs.w	800deaa <f_read+0xce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e010:	eb06 2242 	add.w	r2, r6, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e014:	f104 0131 	add.w	r1, r4, #49	@ 0x31
 800e018:	1a51      	subs	r1, r2, r1
 800e01a:	2902      	cmp	r1, #2
 800e01c:	d90a      	bls.n	800e034 <f_read+0x258>
 800e01e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e022:	f502 7c00 	add.w	ip, r2, #512	@ 0x200
			*d++ = *s++;
 800e026:	f851 3b04 	ldr.w	r3, [r1], #4
 800e02a:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800e02e:	4562      	cmp	r2, ip
 800e030:	d1f9      	bne.n	800e026 <f_read+0x24a>
 800e032:	e73a      	b.n	800deaa <f_read+0xce>
 800e034:	3a01      	subs	r2, #1
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e036:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e03a:	f504 7c0c 	add.w	ip, r4, #560	@ 0x230
			*d++ = *s++;
 800e03e:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800e042:	458c      	cmp	ip, r1
			*d++ = *s++;
 800e044:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800e048:	d1f9      	bne.n	800e03e <f_read+0x262>
 800e04a:	e72e      	b.n	800deaa <f_read+0xce>

0800e04c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e04c:	b158      	cbz	r0, 800e066 <f_close+0x1a>
 800e04e:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e050:	b570      	push	{r4, r5, r6, lr}
 800e052:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e054:	b12b      	cbz	r3, 800e062 <f_close+0x16>
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	b11a      	cbz	r2, 800e062 <f_close+0x16>
 800e05a:	8881      	ldrh	r1, [r0, #4]
 800e05c:	88da      	ldrh	r2, [r3, #6]
 800e05e:	4291      	cmp	r1, r2
 800e060:	d003      	beq.n	800e06a <f_close+0x1e>
{
 800e062:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800e064:	bd70      	pop	{r4, r5, r6, pc}
{
 800e066:	2009      	movs	r0, #9
}
 800e068:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e06a:	7858      	ldrb	r0, [r3, #1]
 800e06c:	f7fe fbc6 	bl	800c7fc <disk_status>
 800e070:	07c1      	lsls	r1, r0, #31
 800e072:	d4f6      	bmi.n	800e062 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e074:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e076:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e078:	065a      	lsls	r2, r3, #25
 800e07a:	d52e      	bpl.n	800e0da <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e07c:	061b      	lsls	r3, r3, #24
 800e07e:	d451      	bmi.n	800e124 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800e080:	f7fe fad2 	bl	800c628 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800e084:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 800e086:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800e088:	4628      	mov	r0, r5
 800e08a:	f7fe fcf3 	bl	800ca74 <move_window>
				if (res == FR_OK) {
 800e08e:	2800      	cmp	r0, #0
 800e090:	d1e8      	bne.n	800e064 <f_close+0x18>
					dir = fp->dir_ptr;
 800e092:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e094:	7ada      	ldrb	r2, [r3, #11]
 800e096:	f042 0220 	orr.w	r2, r2, #32
 800e09a:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e09c:	68a2      	ldr	r2, [r4, #8]
 800e09e:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0a0:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800e0a4:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800e0a6:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800e0a8:	7809      	ldrb	r1, [r1, #0]
 800e0aa:	2903      	cmp	r1, #3
 800e0ac:	d103      	bne.n	800e0b6 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e0ae:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800e0b0:	751a      	strb	r2, [r3, #20]
 800e0b2:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800e0b4:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0b6:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0b8:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800e0ba:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e0be:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800e0c0:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0c2:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e0c8:	f7fe fc76 	bl	800c9b8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e0cc:	7d23      	ldrb	r3, [r4, #20]
 800e0ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0d2:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d1c5      	bne.n	800e064 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e0d8:	6825      	ldr	r5, [r4, #0]
 800e0da:	2d00      	cmp	r5, #0
 800e0dc:	d0c1      	beq.n	800e062 <f_close+0x16>
 800e0de:	782b      	ldrb	r3, [r5, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d0be      	beq.n	800e062 <f_close+0x16>
 800e0e4:	88a2      	ldrh	r2, [r4, #4]
 800e0e6:	88eb      	ldrh	r3, [r5, #6]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d1ba      	bne.n	800e062 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e0ec:	7868      	ldrb	r0, [r5, #1]
 800e0ee:	f7fe fb85 	bl	800c7fc <disk_status>
 800e0f2:	f010 0001 	ands.w	r0, r0, #1
 800e0f6:	d1b4      	bne.n	800e062 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e0f8:	6923      	ldr	r3, [r4, #16]
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d81e      	bhi.n	800e13e <f_close+0xf2>
		n = Files[i].ctr;
 800e100:	4912      	ldr	r1, [pc, #72]	@ (800e14c <f_close+0x100>)
 800e102:	011d      	lsls	r5, r3, #4
 800e104:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800e108:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e10a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800e10e:	d01a      	beq.n	800e146 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800e110:	b11a      	cbz	r2, 800e11a <f_close+0xce>
 800e112:	3a01      	subs	r2, #1
 800e114:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800e116:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e118:	b90a      	cbnz	r2, 800e11e <f_close+0xd2>
 800e11a:	2300      	movs	r3, #0
 800e11c:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800e11e:	2300      	movs	r3, #0
 800e120:	6023      	str	r3, [r4, #0]
}
 800e122:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e124:	2301      	movs	r3, #1
 800e126:	6a22      	ldr	r2, [r4, #32]
 800e128:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e12c:	7868      	ldrb	r0, [r5, #1]
 800e12e:	f7fe fb93 	bl	800c858 <disk_write>
 800e132:	b930      	cbnz	r0, 800e142 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e134:	7d23      	ldrb	r3, [r4, #20]
 800e136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e13a:	7523      	strb	r3, [r4, #20]
 800e13c:	e7a0      	b.n	800e080 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e13e:	2002      	movs	r0, #2
}
 800e140:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e142:	2001      	movs	r0, #1
}
 800e144:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800e146:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e148:	e7e7      	b.n	800e11a <f_close+0xce>
 800e14a:	bf00      	nop
 800e14c:	240ac7d0 	.word	0x240ac7d0

0800e150 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e156:	b148      	cbz	r0, 800e16c <f_lseek+0x1c>
 800e158:	6803      	ldr	r3, [r0, #0]
 800e15a:	4604      	mov	r4, r0
 800e15c:	b133      	cbz	r3, 800e16c <f_lseek+0x1c>
 800e15e:	781a      	ldrb	r2, [r3, #0]
 800e160:	b122      	cbz	r2, 800e16c <f_lseek+0x1c>
 800e162:	460e      	mov	r6, r1
 800e164:	88da      	ldrh	r2, [r3, #6]
 800e166:	8881      	ldrh	r1, [r0, #4]
 800e168:	4291      	cmp	r1, r2
 800e16a:	d004      	beq.n	800e176 <f_lseek+0x26>
	FRESULT res = FR_INVALID_OBJECT;
 800e16c:	2509      	movs	r5, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800e16e:	4628      	mov	r0, r5
 800e170:	b005      	add	sp, #20
 800e172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e176:	7858      	ldrb	r0, [r3, #1]
 800e178:	f7fe fb40 	bl	800c7fc <disk_status>
 800e17c:	07c3      	lsls	r3, r0, #31
 800e17e:	d4f5      	bmi.n	800e16c <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e180:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e182:	2d00      	cmp	r5, #0
 800e184:	d1f3      	bne.n	800e16e <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 800e186:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e188:	f8d4 9000 	ldr.w	r9, [r4]
	if (fp->cltbl) {	/* Fast seek */
 800e18c:	b1f8      	cbz	r0, 800e1ce <f_lseek+0x7e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e18e:	1c77      	adds	r7, r6, #1
 800e190:	d05d      	beq.n	800e24e <f_lseek+0xfe>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e192:	68e3      	ldr	r3, [r4, #12]
 800e194:	429e      	cmp	r6, r3
 800e196:	bf28      	it	cs
 800e198:	461e      	movcs	r6, r3
			fp->fptr = ofs;				/* Set file pointer */
 800e19a:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800e19c:	2e00      	cmp	r6, #0
 800e19e:	d0e6      	beq.n	800e16e <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e1a0:	f106 3cff 	add.w	ip, r6, #4294967295
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e1a4:	f8b9 700a 	ldrh.w	r7, [r9, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1a8:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e1aa:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e1ac:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
 800e1b0:	fbbc f1f7 	udiv	r1, ip, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e1b4:	b92b      	cbnz	r3, 800e1c2 <f_lseek+0x72>
 800e1b6:	e05f      	b.n	800e278 <f_lseek+0x128>
		cl -= ncl; tbl++;		/* Next fragment */
 800e1b8:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1ba:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d05a      	beq.n	800e278 <f_lseek+0x128>
		if (cl < ncl) break;	/* In this fragment? */
 800e1c2:	428b      	cmp	r3, r1
 800e1c4:	d9f8      	bls.n	800e1b8 <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 800e1c6:	6853      	ldr	r3, [r2, #4]
 800e1c8:	440b      	add	r3, r1
	clst -= 2;
 800e1ca:	1e99      	subs	r1, r3, #2
	return cl + *tbl;	/* Return the cluster number */
 800e1cc:	e056      	b.n	800e27c <f_lseek+0x12c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e1ce:	68e2      	ldr	r2, [r4, #12]
		ifptr = fp->fptr;
 800e1d0:	69a3      	ldr	r3, [r4, #24]
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e1d2:	42b2      	cmp	r2, r6
 800e1d4:	d204      	bcs.n	800e1e0 <f_lseek+0x90>
 800e1d6:	7d21      	ldrb	r1, [r4, #20]
 800e1d8:	0788      	lsls	r0, r1, #30
 800e1da:	f100 809b 	bmi.w	800e314 <f_lseek+0x1c4>
 800e1de:	4616      	mov	r6, r2
		fp->fptr = nsect = 0;
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800e1e4:	2e00      	cmp	r6, #0
 800e1e6:	d0c2      	beq.n	800e16e <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e1e8:	f8b9 800a 	ldrh.w	r8, [r9, #10]
 800e1ec:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d16e      	bne.n	800e2d2 <f_lseek+0x182>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e1f4:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e1f6:	2f00      	cmp	r7, #0
 800e1f8:	f000 811e 	beq.w	800e438 <f_lseek+0x2e8>
				fp->clust = clst;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	61e7      	str	r7, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e200:	45b0      	cmp	r8, r6
 800e202:	f080 8155 	bcs.w	800e4b0 <f_lseek+0x360>
 800e206:	4639      	mov	r1, r7
 800e208:	e014      	b.n	800e234 <f_lseek+0xe4>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e20a:	f7fe feb1 	bl	800cf70 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e20e:	4601      	mov	r1, r0
 800e210:	2800      	cmp	r0, #0
 800e212:	f000 8148 	beq.w	800e4a6 <f_lseek+0x356>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e216:	1c4b      	adds	r3, r1, #1
 800e218:	f000 80c7 	beq.w	800e3aa <f_lseek+0x25a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e21c:	2901      	cmp	r1, #1
 800e21e:	d91d      	bls.n	800e25c <f_lseek+0x10c>
 800e220:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e224:	428b      	cmp	r3, r1
 800e226:	d919      	bls.n	800e25c <f_lseek+0x10c>
				fp->fptr += ofs;
 800e228:	69a2      	ldr	r2, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800e22a:	45b0      	cmp	r8, r6
					fp->clust = clst;
 800e22c:	61e1      	str	r1, [r4, #28]
				fp->fptr += ofs;
 800e22e:	4613      	mov	r3, r2
				while (ofs > bcs) {						/* Cluster following loop */
 800e230:	f080 8120 	bcs.w	800e474 <f_lseek+0x324>
					ofs -= bcs; fp->fptr += bcs;
 800e234:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e236:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800e238:	eba6 0608 	sub.w	r6, r6, r8
 800e23c:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e23e:	7d23      	ldrb	r3, [r4, #20]
 800e240:	079a      	lsls	r2, r3, #30
 800e242:	d4e2      	bmi.n	800e20a <f_lseek+0xba>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e244:	6820      	ldr	r0, [r4, #0]
 800e246:	f7fe fe3d 	bl	800cec4 <get_fat.isra.0>
 800e24a:	4601      	mov	r1, r0
 800e24c:	e7e3      	b.n	800e216 <f_lseek+0xc6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e24e:	4680      	mov	r8, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e250:	68a2      	ldr	r2, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e252:	f858 1b04 	ldr.w	r1, [r8], #4
			if (cl) {
 800e256:	b12a      	cbz	r2, 800e264 <f_lseek+0x114>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e258:	2a01      	cmp	r2, #1
 800e25a:	d15f      	bne.n	800e31c <f_lseek+0x1cc>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e25c:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e25e:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e260:	7563      	strb	r3, [r4, #21]
 800e262:	e784      	b.n	800e16e <f_lseek+0x1e>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e264:	f04f 0a02 	mov.w	sl, #2
			if (ulen <= tlen) {
 800e268:	458a      	cmp	sl, r1
			*fp->cltbl = ulen;	/* Number of items used */
 800e26a:	f8c0 a000 	str.w	sl, [r0]
			if (ulen <= tlen) {
 800e26e:	d853      	bhi.n	800e318 <f_lseek+0x1c8>
				*tbl = 0;		/* Terminate table */
 800e270:	2300      	movs	r3, #0
 800e272:	f8c8 3000 	str.w	r3, [r8]
 800e276:	e77a      	b.n	800e16e <f_lseek+0x1e>
 800e278:	f06f 0101 	mvn.w	r1, #1
				fp->clust = clmt_clust(fp, ofs - 1);
 800e27c:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e27e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e282:	3b02      	subs	r3, #2
 800e284:	428b      	cmp	r3, r1
 800e286:	d9e9      	bls.n	800e25c <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800e288:	f8d9 2028 	ldr.w	r2, [r9, #40]	@ 0x28
 800e28c:	fb01 2207 	mla	r2, r1, r7, r2
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e290:	2a00      	cmp	r2, #0
 800e292:	d0e3      	beq.n	800e25c <f_lseek+0x10c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e294:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800e298:	2e00      	cmp	r6, #0
 800e29a:	f43f af68 	beq.w	800e16e <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e29e:	3f01      	subs	r7, #1
 800e2a0:	ea07 070c 	and.w	r7, r7, ip
 800e2a4:	4417      	add	r7, r2
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e2a6:	6a22      	ldr	r2, [r4, #32]
 800e2a8:	42ba      	cmp	r2, r7
 800e2aa:	f43f af60 	beq.w	800e16e <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e2ae:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2b2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2b6:	f899 0001 	ldrb.w	r0, [r9, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f2c0 80af 	blt.w	800e41e <f_lseek+0x2ce>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	463a      	mov	r2, r7
 800e2c6:	f7fe fab9 	bl	800c83c <disk_read>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d16d      	bne.n	800e3aa <f_lseek+0x25a>
			fp->sect = nsect;
 800e2ce:	6227      	str	r7, [r4, #32]
 800e2d0:	e74d      	b.n	800e16e <f_lseek+0x1e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	1e72      	subs	r2, r6, #1
 800e2d6:	fbb3 f1f8 	udiv	r1, r3, r8
 800e2da:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 800e2de:	428a      	cmp	r2, r1
 800e2e0:	d388      	bcc.n	800e1f4 <f_lseek+0xa4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e2e2:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 800e2e6:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e2e8:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800e2ea:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e2ec:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 800e2ee:	2f00      	cmp	r7, #0
 800e2f0:	d186      	bne.n	800e200 <f_lseek+0xb0>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e2f2:	68e2      	ldr	r2, [r4, #12]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d204      	bcs.n	800e302 <f_lseek+0x1b2>
			fp->flag |= FA_MODIFIED;
 800e2f8:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800e2fa:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800e2fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e300:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e306:	2b00      	cmp	r3, #0
 800e308:	f43f af31 	beq.w	800e16e <f_lseek+0x1e>
 800e30c:	6a22      	ldr	r2, [r4, #32]
 800e30e:	42ba      	cmp	r2, r7
 800e310:	d1cd      	bne.n	800e2ae <f_lseek+0x15e>
 800e312:	e72c      	b.n	800e16e <f_lseek+0x1e>
		fp->fptr = nsect = 0;
 800e314:	61a5      	str	r5, [r4, #24]
		if (ofs) {
 800e316:	e767      	b.n	800e1e8 <f_lseek+0x98>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e318:	2511      	movs	r5, #17
 800e31a:	e728      	b.n	800e16e <f_lseek+0x1e>
 800e31c:	464f      	mov	r7, r9
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e31e:	f04f 0a02 	mov.w	sl, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e322:	46c3      	mov	fp, r8
 800e324:	4616      	mov	r6, r2
 800e326:	9102      	str	r1, [sp, #8]
 800e328:	9503      	str	r5, [sp, #12]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e32a:	4635      	mov	r5, r6
						pcl = cl; ncl++;
 800e32c:	f04f 0801 	mov.w	r8, #1
 800e330:	9600      	str	r6, [sp, #0]
 800e332:	e033      	b.n	800e39c <f_lseek+0x24c>
		switch (fs->fs_type) {
 800e334:	783b      	ldrb	r3, [r7, #0]
 800e336:	2b02      	cmp	r3, #2
 800e338:	d04e      	beq.n	800e3d8 <f_lseek+0x288>
 800e33a:	2b03      	cmp	r3, #3
 800e33c:	d039      	beq.n	800e3b2 <f_lseek+0x262>
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d18c      	bne.n	800e25c <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e342:	6a39      	ldr	r1, [r7, #32]
			bc = (UINT)clst; bc += bc / 2;
 800e344:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e348:	4638      	mov	r0, r7
 800e34a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800e34e:	f7fe fb91 	bl	800ca74 <move_window>
 800e352:	bb50      	cbnz	r0, 800e3aa <f_lseek+0x25a>
			wc = fs->win[bc++ % SS(fs)];
 800e354:	f3c6 0208 	ubfx	r2, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e358:	6a39      	ldr	r1, [r7, #32]
			wc = fs->win[bc++ % SS(fs)];
 800e35a:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e35c:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800e35e:	443a      	add	r2, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e360:	eb01 2156 	add.w	r1, r1, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e364:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800e368:	9301      	str	r3, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e36a:	f7fe fb83 	bl	800ca74 <move_window>
 800e36e:	b9e0      	cbnz	r0, 800e3aa <f_lseek+0x25a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e370:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800e374:	9a01      	ldr	r2, [sp, #4]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e376:	07ee      	lsls	r6, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e378:	443b      	add	r3, r7
 800e37a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e37e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e382:	d570      	bpl.n	800e466 <f_lseek+0x316>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e384:	2a1f      	cmp	r2, #31
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e386:	ea4f 1312 	mov.w	r3, r2, lsr #4
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e38a:	f67f af67 	bls.w	800e25c <f_lseek+0x10c>
					} while (cl == pcl + 1);
 800e38e:	3501      	adds	r5, #1
 800e390:	429d      	cmp	r5, r3
 800e392:	d131      	bne.n	800e3f8 <f_lseek+0x2a8>
						pcl = cl; ncl++;
 800e394:	f108 0801 	add.w	r8, r8, #1
 800e398:	461d      	mov	r5, r3
 800e39a:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	42ab      	cmp	r3, r5
 800e3a0:	d8c8      	bhi.n	800e334 <f_lseek+0x1e4>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e3a2:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e3a4:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e3a6:	7563      	strb	r3, [r4, #21]
 800e3a8:	e6e1      	b.n	800e16e <f_lseek+0x1e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	461d      	mov	r5, r3
 800e3ae:	7563      	strb	r3, [r4, #21]
 800e3b0:	e6dd      	b.n	800e16e <f_lseek+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e3b2:	6a39      	ldr	r1, [r7, #32]
 800e3b4:	4638      	mov	r0, r7
 800e3b6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800e3ba:	f7fe fb5b 	bl	800ca74 <move_window>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d1f3      	bne.n	800e3aa <f_lseek+0x25a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e3c2:	00ab      	lsls	r3, r5, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e3c4:	493e      	ldr	r1, [pc, #248]	@ (800e4c0 <f_lseek+0x370>)
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e3c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e3ca:	443b      	add	r3, r7
 800e3cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e3ce:	420a      	tst	r2, r1
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e3d0:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e3d4:	d1db      	bne.n	800e38e <f_lseek+0x23e>
 800e3d6:	e741      	b.n	800e25c <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e3d8:	6a39      	ldr	r1, [r7, #32]
 800e3da:	4638      	mov	r0, r7
 800e3dc:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800e3e0:	f7fe fb48 	bl	800ca74 <move_window>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d1e0      	bne.n	800e3aa <f_lseek+0x25a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e3e8:	006b      	lsls	r3, r5, #1
 800e3ea:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e3ee:	443b      	add	r3, r7
 800e3f0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d8cb      	bhi.n	800e38e <f_lseek+0x23e>
 800e3f6:	e731      	b.n	800e25c <f_lseek+0x10c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e3f8:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e3fc:	9a02      	ldr	r2, [sp, #8]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e3fe:	9e00      	ldr	r6, [sp, #0]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e400:	4552      	cmp	r2, sl
 800e402:	d327      	bcc.n	800e454 <f_lseek+0x304>
						*tbl++ = ncl; *tbl++ = tcl;
 800e404:	465a      	mov	r2, fp
 800e406:	f842 8b08 	str.w	r8, [r2], #8
 800e40a:	f8cb 6004 	str.w	r6, [fp, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e40e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800e412:	4299      	cmp	r1, r3
 800e414:	d950      	bls.n	800e4b8 <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 800e416:	4693      	mov	fp, r2
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e418:	461e      	mov	r6, r3
 800e41a:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e41c:	e785      	b.n	800e32a <f_lseek+0x1da>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e41e:	2301      	movs	r3, #1
 800e420:	4631      	mov	r1, r6
 800e422:	f7fe fa19 	bl	800c858 <disk_write>
 800e426:	2800      	cmp	r0, #0
 800e428:	d1bf      	bne.n	800e3aa <f_lseek+0x25a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e42a:	7d23      	ldrb	r3, [r4, #20]
 800e42c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e430:	7523      	strb	r3, [r4, #20]
 800e432:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e436:	e743      	b.n	800e2c0 <f_lseek+0x170>
					clst = create_chain(&fp->obj, 0);
 800e438:	4639      	mov	r1, r7
 800e43a:	4620      	mov	r0, r4
 800e43c:	f7fe fd98 	bl	800cf70 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e440:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800e442:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e444:	f43f af0a 	beq.w	800e25c <f_lseek+0x10c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e448:	1c41      	adds	r1, r0, #1
 800e44a:	d0ae      	beq.n	800e3aa <f_lseek+0x25a>
				fp->fptr += ofs;
 800e44c:	69a3      	ldr	r3, [r4, #24]
					fp->obj.sclust = clst;
 800e44e:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
 800e450:	61e0      	str	r0, [r4, #28]
 800e452:	e74c      	b.n	800e2ee <f_lseek+0x19e>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e454:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d8dd      	bhi.n	800e418 <f_lseek+0x2c8>
 800e45c:	46d8      	mov	r8, fp
 800e45e:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
			*fp->cltbl = ulen;	/* Number of items used */
 800e462:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e464:	e700      	b.n	800e268 <f_lseek+0x118>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e466:	f640 71fe 	movw	r1, #4094	@ 0xffe
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e46a:	f3c2 030b 	ubfx	r3, r2, #0, #12
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e46e:	420a      	tst	r2, r1
 800e470:	d18d      	bne.n	800e38e <f_lseek+0x23e>
 800e472:	e6f3      	b.n	800e25c <f_lseek+0x10c>
				if (ofs % SS(fs)) {
 800e474:	460f      	mov	r7, r1
 800e476:	f3c6 0108 	ubfx	r1, r6, #0, #9
				fp->fptr += ofs;
 800e47a:	18b3      	adds	r3, r6, r2
 800e47c:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800e47e:	b1a9      	cbz	r1, 800e4ac <f_lseek+0x35c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e480:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 800e484:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e486:	3a02      	subs	r2, #2
 800e488:	4291      	cmp	r1, r2
 800e48a:	f4bf aee7 	bcs.w	800e25c <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800e48e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800e492:	f8d9 7028 	ldr.w	r7, [r9, #40]	@ 0x28
 800e496:	fb01 7702 	mla	r7, r1, r2, r7
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e49a:	2f00      	cmp	r7, #0
 800e49c:	f43f aede 	beq.w	800e25c <f_lseek+0x10c>
					nsect += (DWORD)(ofs / SS(fs));
 800e4a0:	eb07 2756 	add.w	r7, r7, r6, lsr #9
 800e4a4:	e725      	b.n	800e2f2 <f_lseek+0x1a2>
 800e4a6:	4607      	mov	r7, r0
				fp->fptr += ofs;
 800e4a8:	69a3      	ldr	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800e4aa:	e722      	b.n	800e2f2 <f_lseek+0x1a2>
		fp->fptr = nsect = 0;
 800e4ac:	460f      	mov	r7, r1
 800e4ae:	e720      	b.n	800e2f2 <f_lseek+0x1a2>
				if (ofs % SS(fs)) {
 800e4b0:	f3c6 0108 	ubfx	r1, r6, #0, #9
 800e4b4:	69a2      	ldr	r2, [r4, #24]
 800e4b6:	e7e0      	b.n	800e47a <f_lseek+0x32a>
						*tbl++ = ncl; *tbl++ = tcl;
 800e4b8:	9902      	ldr	r1, [sp, #8]
 800e4ba:	4690      	mov	r8, r2
 800e4bc:	9d03      	ldr	r5, [sp, #12]
 800e4be:	e7d0      	b.n	800e462 <f_lseek+0x312>
 800e4c0:	0ffffffe 	.word	0x0ffffffe

0800e4c4 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800e4c4:	4b10      	ldr	r3, [pc, #64]	@ (800e508 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e4c6:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800e4c8:	7a5c      	ldrb	r4, [r3, #9]
 800e4ca:	b9cc      	cbnz	r4, 800e500 <FATFS_LinkDriver+0x3c>
 800e4cc:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800e4ce:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800e4d2:	7a5c      	ldrb	r4, [r3, #9]
 800e4d4:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800e4d6:	7a5c      	ldrb	r4, [r3, #9]
 800e4d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4dc:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800e4de:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800e4e0:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800e4e2:	441c      	add	r4, r3
 800e4e4:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800e4e6:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800e4e8:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800e4ea:	b2e4      	uxtb	r4, r4
 800e4ec:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800e4ee:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 800e4f0:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 800e4f2:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800e4f4:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 800e4f6:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800e4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800e4fc:	708b      	strb	r3, [r1, #2]
}
 800e4fe:	4770      	bx	lr
  uint8_t ret = 1;
 800e500:	2001      	movs	r0, #1
}
 800e502:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	240ac7f8 	.word	0x240ac7f8

0800e50c <sniprintf>:
 800e50c:	b40c      	push	{r2, r3}
 800e50e:	b530      	push	{r4, r5, lr}
 800e510:	4b17      	ldr	r3, [pc, #92]	@ (800e570 <sniprintf+0x64>)
 800e512:	1e0c      	subs	r4, r1, #0
 800e514:	681d      	ldr	r5, [r3, #0]
 800e516:	b09d      	sub	sp, #116	@ 0x74
 800e518:	da08      	bge.n	800e52c <sniprintf+0x20>
 800e51a:	238b      	movs	r3, #139	@ 0x8b
 800e51c:	602b      	str	r3, [r5, #0]
 800e51e:	f04f 30ff 	mov.w	r0, #4294967295
 800e522:	b01d      	add	sp, #116	@ 0x74
 800e524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e528:	b002      	add	sp, #8
 800e52a:	4770      	bx	lr
 800e52c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e530:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e534:	bf14      	ite	ne
 800e536:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e53a:	4623      	moveq	r3, r4
 800e53c:	9304      	str	r3, [sp, #16]
 800e53e:	9307      	str	r3, [sp, #28]
 800e540:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e544:	9002      	str	r0, [sp, #8]
 800e546:	9006      	str	r0, [sp, #24]
 800e548:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e54c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e54e:	ab21      	add	r3, sp, #132	@ 0x84
 800e550:	a902      	add	r1, sp, #8
 800e552:	4628      	mov	r0, r5
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	f000 f995 	bl	800e884 <_svfiprintf_r>
 800e55a:	1c43      	adds	r3, r0, #1
 800e55c:	bfbc      	itt	lt
 800e55e:	238b      	movlt	r3, #139	@ 0x8b
 800e560:	602b      	strlt	r3, [r5, #0]
 800e562:	2c00      	cmp	r4, #0
 800e564:	d0dd      	beq.n	800e522 <sniprintf+0x16>
 800e566:	9b02      	ldr	r3, [sp, #8]
 800e568:	2200      	movs	r2, #0
 800e56a:	701a      	strb	r2, [r3, #0]
 800e56c:	e7d9      	b.n	800e522 <sniprintf+0x16>
 800e56e:	bf00      	nop
 800e570:	2400001c 	.word	0x2400001c

0800e574 <memset>:
 800e574:	4402      	add	r2, r0
 800e576:	4603      	mov	r3, r0
 800e578:	4293      	cmp	r3, r2
 800e57a:	d100      	bne.n	800e57e <memset+0xa>
 800e57c:	4770      	bx	lr
 800e57e:	f803 1b01 	strb.w	r1, [r3], #1
 800e582:	e7f9      	b.n	800e578 <memset+0x4>

0800e584 <__errno>:
 800e584:	4b01      	ldr	r3, [pc, #4]	@ (800e58c <__errno+0x8>)
 800e586:	6818      	ldr	r0, [r3, #0]
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	2400001c 	.word	0x2400001c

0800e590 <__libc_init_array>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	4d0d      	ldr	r5, [pc, #52]	@ (800e5c8 <__libc_init_array+0x38>)
 800e594:	4c0d      	ldr	r4, [pc, #52]	@ (800e5cc <__libc_init_array+0x3c>)
 800e596:	1b64      	subs	r4, r4, r5
 800e598:	10a4      	asrs	r4, r4, #2
 800e59a:	2600      	movs	r6, #0
 800e59c:	42a6      	cmp	r6, r4
 800e59e:	d109      	bne.n	800e5b4 <__libc_init_array+0x24>
 800e5a0:	4d0b      	ldr	r5, [pc, #44]	@ (800e5d0 <__libc_init_array+0x40>)
 800e5a2:	4c0c      	ldr	r4, [pc, #48]	@ (800e5d4 <__libc_init_array+0x44>)
 800e5a4:	f000 fc66 	bl	800ee74 <_init>
 800e5a8:	1b64      	subs	r4, r4, r5
 800e5aa:	10a4      	asrs	r4, r4, #2
 800e5ac:	2600      	movs	r6, #0
 800e5ae:	42a6      	cmp	r6, r4
 800e5b0:	d105      	bne.n	800e5be <__libc_init_array+0x2e>
 800e5b2:	bd70      	pop	{r4, r5, r6, pc}
 800e5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5b8:	4798      	blx	r3
 800e5ba:	3601      	adds	r6, #1
 800e5bc:	e7ee      	b.n	800e59c <__libc_init_array+0xc>
 800e5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5c2:	4798      	blx	r3
 800e5c4:	3601      	adds	r6, #1
 800e5c6:	e7f2      	b.n	800e5ae <__libc_init_array+0x1e>
 800e5c8:	0800f214 	.word	0x0800f214
 800e5cc:	0800f214 	.word	0x0800f214
 800e5d0:	0800f214 	.word	0x0800f214
 800e5d4:	0800f218 	.word	0x0800f218

0800e5d8 <__retarget_lock_acquire_recursive>:
 800e5d8:	4770      	bx	lr

0800e5da <__retarget_lock_release_recursive>:
 800e5da:	4770      	bx	lr

0800e5dc <_free_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4605      	mov	r5, r0
 800e5e0:	2900      	cmp	r1, #0
 800e5e2:	d041      	beq.n	800e668 <_free_r+0x8c>
 800e5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5e8:	1f0c      	subs	r4, r1, #4
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	bfb8      	it	lt
 800e5ee:	18e4      	addlt	r4, r4, r3
 800e5f0:	f000 f8e0 	bl	800e7b4 <__malloc_lock>
 800e5f4:	4a1d      	ldr	r2, [pc, #116]	@ (800e66c <_free_r+0x90>)
 800e5f6:	6813      	ldr	r3, [r2, #0]
 800e5f8:	b933      	cbnz	r3, 800e608 <_free_r+0x2c>
 800e5fa:	6063      	str	r3, [r4, #4]
 800e5fc:	6014      	str	r4, [r2, #0]
 800e5fe:	4628      	mov	r0, r5
 800e600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e604:	f000 b8dc 	b.w	800e7c0 <__malloc_unlock>
 800e608:	42a3      	cmp	r3, r4
 800e60a:	d908      	bls.n	800e61e <_free_r+0x42>
 800e60c:	6820      	ldr	r0, [r4, #0]
 800e60e:	1821      	adds	r1, r4, r0
 800e610:	428b      	cmp	r3, r1
 800e612:	bf01      	itttt	eq
 800e614:	6819      	ldreq	r1, [r3, #0]
 800e616:	685b      	ldreq	r3, [r3, #4]
 800e618:	1809      	addeq	r1, r1, r0
 800e61a:	6021      	streq	r1, [r4, #0]
 800e61c:	e7ed      	b.n	800e5fa <_free_r+0x1e>
 800e61e:	461a      	mov	r2, r3
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	b10b      	cbz	r3, 800e628 <_free_r+0x4c>
 800e624:	42a3      	cmp	r3, r4
 800e626:	d9fa      	bls.n	800e61e <_free_r+0x42>
 800e628:	6811      	ldr	r1, [r2, #0]
 800e62a:	1850      	adds	r0, r2, r1
 800e62c:	42a0      	cmp	r0, r4
 800e62e:	d10b      	bne.n	800e648 <_free_r+0x6c>
 800e630:	6820      	ldr	r0, [r4, #0]
 800e632:	4401      	add	r1, r0
 800e634:	1850      	adds	r0, r2, r1
 800e636:	4283      	cmp	r3, r0
 800e638:	6011      	str	r1, [r2, #0]
 800e63a:	d1e0      	bne.n	800e5fe <_free_r+0x22>
 800e63c:	6818      	ldr	r0, [r3, #0]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	6053      	str	r3, [r2, #4]
 800e642:	4408      	add	r0, r1
 800e644:	6010      	str	r0, [r2, #0]
 800e646:	e7da      	b.n	800e5fe <_free_r+0x22>
 800e648:	d902      	bls.n	800e650 <_free_r+0x74>
 800e64a:	230c      	movs	r3, #12
 800e64c:	602b      	str	r3, [r5, #0]
 800e64e:	e7d6      	b.n	800e5fe <_free_r+0x22>
 800e650:	6820      	ldr	r0, [r4, #0]
 800e652:	1821      	adds	r1, r4, r0
 800e654:	428b      	cmp	r3, r1
 800e656:	bf04      	itt	eq
 800e658:	6819      	ldreq	r1, [r3, #0]
 800e65a:	685b      	ldreq	r3, [r3, #4]
 800e65c:	6063      	str	r3, [r4, #4]
 800e65e:	bf04      	itt	eq
 800e660:	1809      	addeq	r1, r1, r0
 800e662:	6021      	streq	r1, [r4, #0]
 800e664:	6054      	str	r4, [r2, #4]
 800e666:	e7ca      	b.n	800e5fe <_free_r+0x22>
 800e668:	bd38      	pop	{r3, r4, r5, pc}
 800e66a:	bf00      	nop
 800e66c:	240ac948 	.word	0x240ac948

0800e670 <sbrk_aligned>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	4e0f      	ldr	r6, [pc, #60]	@ (800e6b0 <sbrk_aligned+0x40>)
 800e674:	460c      	mov	r4, r1
 800e676:	6831      	ldr	r1, [r6, #0]
 800e678:	4605      	mov	r5, r0
 800e67a:	b911      	cbnz	r1, 800e682 <sbrk_aligned+0x12>
 800e67c:	f000 fba6 	bl	800edcc <_sbrk_r>
 800e680:	6030      	str	r0, [r6, #0]
 800e682:	4621      	mov	r1, r4
 800e684:	4628      	mov	r0, r5
 800e686:	f000 fba1 	bl	800edcc <_sbrk_r>
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	d103      	bne.n	800e696 <sbrk_aligned+0x26>
 800e68e:	f04f 34ff 	mov.w	r4, #4294967295
 800e692:	4620      	mov	r0, r4
 800e694:	bd70      	pop	{r4, r5, r6, pc}
 800e696:	1cc4      	adds	r4, r0, #3
 800e698:	f024 0403 	bic.w	r4, r4, #3
 800e69c:	42a0      	cmp	r0, r4
 800e69e:	d0f8      	beq.n	800e692 <sbrk_aligned+0x22>
 800e6a0:	1a21      	subs	r1, r4, r0
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 fb92 	bl	800edcc <_sbrk_r>
 800e6a8:	3001      	adds	r0, #1
 800e6aa:	d1f2      	bne.n	800e692 <sbrk_aligned+0x22>
 800e6ac:	e7ef      	b.n	800e68e <sbrk_aligned+0x1e>
 800e6ae:	bf00      	nop
 800e6b0:	240ac944 	.word	0x240ac944

0800e6b4 <_malloc_r>:
 800e6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6b8:	1ccd      	adds	r5, r1, #3
 800e6ba:	f025 0503 	bic.w	r5, r5, #3
 800e6be:	3508      	adds	r5, #8
 800e6c0:	2d0c      	cmp	r5, #12
 800e6c2:	bf38      	it	cc
 800e6c4:	250c      	movcc	r5, #12
 800e6c6:	2d00      	cmp	r5, #0
 800e6c8:	4606      	mov	r6, r0
 800e6ca:	db01      	blt.n	800e6d0 <_malloc_r+0x1c>
 800e6cc:	42a9      	cmp	r1, r5
 800e6ce:	d904      	bls.n	800e6da <_malloc_r+0x26>
 800e6d0:	230c      	movs	r3, #12
 800e6d2:	6033      	str	r3, [r6, #0]
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e7b0 <_malloc_r+0xfc>
 800e6de:	f000 f869 	bl	800e7b4 <__malloc_lock>
 800e6e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e6e6:	461c      	mov	r4, r3
 800e6e8:	bb44      	cbnz	r4, 800e73c <_malloc_r+0x88>
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7ff ffbf 	bl	800e670 <sbrk_aligned>
 800e6f2:	1c43      	adds	r3, r0, #1
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	d158      	bne.n	800e7aa <_malloc_r+0xf6>
 800e6f8:	f8d8 4000 	ldr.w	r4, [r8]
 800e6fc:	4627      	mov	r7, r4
 800e6fe:	2f00      	cmp	r7, #0
 800e700:	d143      	bne.n	800e78a <_malloc_r+0xd6>
 800e702:	2c00      	cmp	r4, #0
 800e704:	d04b      	beq.n	800e79e <_malloc_r+0xea>
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	4639      	mov	r1, r7
 800e70a:	4630      	mov	r0, r6
 800e70c:	eb04 0903 	add.w	r9, r4, r3
 800e710:	f000 fb5c 	bl	800edcc <_sbrk_r>
 800e714:	4581      	cmp	r9, r0
 800e716:	d142      	bne.n	800e79e <_malloc_r+0xea>
 800e718:	6821      	ldr	r1, [r4, #0]
 800e71a:	1a6d      	subs	r5, r5, r1
 800e71c:	4629      	mov	r1, r5
 800e71e:	4630      	mov	r0, r6
 800e720:	f7ff ffa6 	bl	800e670 <sbrk_aligned>
 800e724:	3001      	adds	r0, #1
 800e726:	d03a      	beq.n	800e79e <_malloc_r+0xea>
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	442b      	add	r3, r5
 800e72c:	6023      	str	r3, [r4, #0]
 800e72e:	f8d8 3000 	ldr.w	r3, [r8]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	bb62      	cbnz	r2, 800e790 <_malloc_r+0xdc>
 800e736:	f8c8 7000 	str.w	r7, [r8]
 800e73a:	e00f      	b.n	800e75c <_malloc_r+0xa8>
 800e73c:	6822      	ldr	r2, [r4, #0]
 800e73e:	1b52      	subs	r2, r2, r5
 800e740:	d420      	bmi.n	800e784 <_malloc_r+0xd0>
 800e742:	2a0b      	cmp	r2, #11
 800e744:	d917      	bls.n	800e776 <_malloc_r+0xc2>
 800e746:	1961      	adds	r1, r4, r5
 800e748:	42a3      	cmp	r3, r4
 800e74a:	6025      	str	r5, [r4, #0]
 800e74c:	bf18      	it	ne
 800e74e:	6059      	strne	r1, [r3, #4]
 800e750:	6863      	ldr	r3, [r4, #4]
 800e752:	bf08      	it	eq
 800e754:	f8c8 1000 	streq.w	r1, [r8]
 800e758:	5162      	str	r2, [r4, r5]
 800e75a:	604b      	str	r3, [r1, #4]
 800e75c:	4630      	mov	r0, r6
 800e75e:	f000 f82f 	bl	800e7c0 <__malloc_unlock>
 800e762:	f104 000b 	add.w	r0, r4, #11
 800e766:	1d23      	adds	r3, r4, #4
 800e768:	f020 0007 	bic.w	r0, r0, #7
 800e76c:	1ac2      	subs	r2, r0, r3
 800e76e:	bf1c      	itt	ne
 800e770:	1a1b      	subne	r3, r3, r0
 800e772:	50a3      	strne	r3, [r4, r2]
 800e774:	e7af      	b.n	800e6d6 <_malloc_r+0x22>
 800e776:	6862      	ldr	r2, [r4, #4]
 800e778:	42a3      	cmp	r3, r4
 800e77a:	bf0c      	ite	eq
 800e77c:	f8c8 2000 	streq.w	r2, [r8]
 800e780:	605a      	strne	r2, [r3, #4]
 800e782:	e7eb      	b.n	800e75c <_malloc_r+0xa8>
 800e784:	4623      	mov	r3, r4
 800e786:	6864      	ldr	r4, [r4, #4]
 800e788:	e7ae      	b.n	800e6e8 <_malloc_r+0x34>
 800e78a:	463c      	mov	r4, r7
 800e78c:	687f      	ldr	r7, [r7, #4]
 800e78e:	e7b6      	b.n	800e6fe <_malloc_r+0x4a>
 800e790:	461a      	mov	r2, r3
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	42a3      	cmp	r3, r4
 800e796:	d1fb      	bne.n	800e790 <_malloc_r+0xdc>
 800e798:	2300      	movs	r3, #0
 800e79a:	6053      	str	r3, [r2, #4]
 800e79c:	e7de      	b.n	800e75c <_malloc_r+0xa8>
 800e79e:	230c      	movs	r3, #12
 800e7a0:	6033      	str	r3, [r6, #0]
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	f000 f80c 	bl	800e7c0 <__malloc_unlock>
 800e7a8:	e794      	b.n	800e6d4 <_malloc_r+0x20>
 800e7aa:	6005      	str	r5, [r0, #0]
 800e7ac:	e7d6      	b.n	800e75c <_malloc_r+0xa8>
 800e7ae:	bf00      	nop
 800e7b0:	240ac948 	.word	0x240ac948

0800e7b4 <__malloc_lock>:
 800e7b4:	4801      	ldr	r0, [pc, #4]	@ (800e7bc <__malloc_lock+0x8>)
 800e7b6:	f7ff bf0f 	b.w	800e5d8 <__retarget_lock_acquire_recursive>
 800e7ba:	bf00      	nop
 800e7bc:	240ac940 	.word	0x240ac940

0800e7c0 <__malloc_unlock>:
 800e7c0:	4801      	ldr	r0, [pc, #4]	@ (800e7c8 <__malloc_unlock+0x8>)
 800e7c2:	f7ff bf0a 	b.w	800e5da <__retarget_lock_release_recursive>
 800e7c6:	bf00      	nop
 800e7c8:	240ac940 	.word	0x240ac940

0800e7cc <__ssputs_r>:
 800e7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d0:	688e      	ldr	r6, [r1, #8]
 800e7d2:	461f      	mov	r7, r3
 800e7d4:	42be      	cmp	r6, r7
 800e7d6:	680b      	ldr	r3, [r1, #0]
 800e7d8:	4682      	mov	sl, r0
 800e7da:	460c      	mov	r4, r1
 800e7dc:	4690      	mov	r8, r2
 800e7de:	d82d      	bhi.n	800e83c <__ssputs_r+0x70>
 800e7e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e7e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e7e8:	d026      	beq.n	800e838 <__ssputs_r+0x6c>
 800e7ea:	6965      	ldr	r5, [r4, #20]
 800e7ec:	6909      	ldr	r1, [r1, #16]
 800e7ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7f2:	eba3 0901 	sub.w	r9, r3, r1
 800e7f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7fa:	1c7b      	adds	r3, r7, #1
 800e7fc:	444b      	add	r3, r9
 800e7fe:	106d      	asrs	r5, r5, #1
 800e800:	429d      	cmp	r5, r3
 800e802:	bf38      	it	cc
 800e804:	461d      	movcc	r5, r3
 800e806:	0553      	lsls	r3, r2, #21
 800e808:	d527      	bpl.n	800e85a <__ssputs_r+0x8e>
 800e80a:	4629      	mov	r1, r5
 800e80c:	f7ff ff52 	bl	800e6b4 <_malloc_r>
 800e810:	4606      	mov	r6, r0
 800e812:	b360      	cbz	r0, 800e86e <__ssputs_r+0xa2>
 800e814:	6921      	ldr	r1, [r4, #16]
 800e816:	464a      	mov	r2, r9
 800e818:	f000 fae8 	bl	800edec <memcpy>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e826:	81a3      	strh	r3, [r4, #12]
 800e828:	6126      	str	r6, [r4, #16]
 800e82a:	6165      	str	r5, [r4, #20]
 800e82c:	444e      	add	r6, r9
 800e82e:	eba5 0509 	sub.w	r5, r5, r9
 800e832:	6026      	str	r6, [r4, #0]
 800e834:	60a5      	str	r5, [r4, #8]
 800e836:	463e      	mov	r6, r7
 800e838:	42be      	cmp	r6, r7
 800e83a:	d900      	bls.n	800e83e <__ssputs_r+0x72>
 800e83c:	463e      	mov	r6, r7
 800e83e:	6820      	ldr	r0, [r4, #0]
 800e840:	4632      	mov	r2, r6
 800e842:	4641      	mov	r1, r8
 800e844:	f000 faa8 	bl	800ed98 <memmove>
 800e848:	68a3      	ldr	r3, [r4, #8]
 800e84a:	1b9b      	subs	r3, r3, r6
 800e84c:	60a3      	str	r3, [r4, #8]
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	4433      	add	r3, r6
 800e852:	6023      	str	r3, [r4, #0]
 800e854:	2000      	movs	r0, #0
 800e856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e85a:	462a      	mov	r2, r5
 800e85c:	f000 fad4 	bl	800ee08 <_realloc_r>
 800e860:	4606      	mov	r6, r0
 800e862:	2800      	cmp	r0, #0
 800e864:	d1e0      	bne.n	800e828 <__ssputs_r+0x5c>
 800e866:	6921      	ldr	r1, [r4, #16]
 800e868:	4650      	mov	r0, sl
 800e86a:	f7ff feb7 	bl	800e5dc <_free_r>
 800e86e:	230c      	movs	r3, #12
 800e870:	f8ca 3000 	str.w	r3, [sl]
 800e874:	89a3      	ldrh	r3, [r4, #12]
 800e876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e87a:	81a3      	strh	r3, [r4, #12]
 800e87c:	f04f 30ff 	mov.w	r0, #4294967295
 800e880:	e7e9      	b.n	800e856 <__ssputs_r+0x8a>
	...

0800e884 <_svfiprintf_r>:
 800e884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e888:	4698      	mov	r8, r3
 800e88a:	898b      	ldrh	r3, [r1, #12]
 800e88c:	061b      	lsls	r3, r3, #24
 800e88e:	b09d      	sub	sp, #116	@ 0x74
 800e890:	4607      	mov	r7, r0
 800e892:	460d      	mov	r5, r1
 800e894:	4614      	mov	r4, r2
 800e896:	d510      	bpl.n	800e8ba <_svfiprintf_r+0x36>
 800e898:	690b      	ldr	r3, [r1, #16]
 800e89a:	b973      	cbnz	r3, 800e8ba <_svfiprintf_r+0x36>
 800e89c:	2140      	movs	r1, #64	@ 0x40
 800e89e:	f7ff ff09 	bl	800e6b4 <_malloc_r>
 800e8a2:	6028      	str	r0, [r5, #0]
 800e8a4:	6128      	str	r0, [r5, #16]
 800e8a6:	b930      	cbnz	r0, 800e8b6 <_svfiprintf_r+0x32>
 800e8a8:	230c      	movs	r3, #12
 800e8aa:	603b      	str	r3, [r7, #0]
 800e8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b0:	b01d      	add	sp, #116	@ 0x74
 800e8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b6:	2340      	movs	r3, #64	@ 0x40
 800e8b8:	616b      	str	r3, [r5, #20]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8be:	2320      	movs	r3, #32
 800e8c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e8c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8c8:	2330      	movs	r3, #48	@ 0x30
 800e8ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea68 <_svfiprintf_r+0x1e4>
 800e8ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e8d2:	f04f 0901 	mov.w	r9, #1
 800e8d6:	4623      	mov	r3, r4
 800e8d8:	469a      	mov	sl, r3
 800e8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8de:	b10a      	cbz	r2, 800e8e4 <_svfiprintf_r+0x60>
 800e8e0:	2a25      	cmp	r2, #37	@ 0x25
 800e8e2:	d1f9      	bne.n	800e8d8 <_svfiprintf_r+0x54>
 800e8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800e8e8:	d00b      	beq.n	800e902 <_svfiprintf_r+0x7e>
 800e8ea:	465b      	mov	r3, fp
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	f7ff ff6b 	bl	800e7cc <__ssputs_r>
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	f000 80a7 	beq.w	800ea4a <_svfiprintf_r+0x1c6>
 800e8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8fe:	445a      	add	r2, fp
 800e900:	9209      	str	r2, [sp, #36]	@ 0x24
 800e902:	f89a 3000 	ldrb.w	r3, [sl]
 800e906:	2b00      	cmp	r3, #0
 800e908:	f000 809f 	beq.w	800ea4a <_svfiprintf_r+0x1c6>
 800e90c:	2300      	movs	r3, #0
 800e90e:	f04f 32ff 	mov.w	r2, #4294967295
 800e912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e916:	f10a 0a01 	add.w	sl, sl, #1
 800e91a:	9304      	str	r3, [sp, #16]
 800e91c:	9307      	str	r3, [sp, #28]
 800e91e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e922:	931a      	str	r3, [sp, #104]	@ 0x68
 800e924:	4654      	mov	r4, sl
 800e926:	2205      	movs	r2, #5
 800e928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92c:	484e      	ldr	r0, [pc, #312]	@ (800ea68 <_svfiprintf_r+0x1e4>)
 800e92e:	f7f1 fcdf 	bl	80002f0 <memchr>
 800e932:	9a04      	ldr	r2, [sp, #16]
 800e934:	b9d8      	cbnz	r0, 800e96e <_svfiprintf_r+0xea>
 800e936:	06d0      	lsls	r0, r2, #27
 800e938:	bf44      	itt	mi
 800e93a:	2320      	movmi	r3, #32
 800e93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e940:	0711      	lsls	r1, r2, #28
 800e942:	bf44      	itt	mi
 800e944:	232b      	movmi	r3, #43	@ 0x2b
 800e946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e94a:	f89a 3000 	ldrb.w	r3, [sl]
 800e94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e950:	d015      	beq.n	800e97e <_svfiprintf_r+0xfa>
 800e952:	9a07      	ldr	r2, [sp, #28]
 800e954:	4654      	mov	r4, sl
 800e956:	2000      	movs	r0, #0
 800e958:	f04f 0c0a 	mov.w	ip, #10
 800e95c:	4621      	mov	r1, r4
 800e95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e962:	3b30      	subs	r3, #48	@ 0x30
 800e964:	2b09      	cmp	r3, #9
 800e966:	d94b      	bls.n	800ea00 <_svfiprintf_r+0x17c>
 800e968:	b1b0      	cbz	r0, 800e998 <_svfiprintf_r+0x114>
 800e96a:	9207      	str	r2, [sp, #28]
 800e96c:	e014      	b.n	800e998 <_svfiprintf_r+0x114>
 800e96e:	eba0 0308 	sub.w	r3, r0, r8
 800e972:	fa09 f303 	lsl.w	r3, r9, r3
 800e976:	4313      	orrs	r3, r2
 800e978:	9304      	str	r3, [sp, #16]
 800e97a:	46a2      	mov	sl, r4
 800e97c:	e7d2      	b.n	800e924 <_svfiprintf_r+0xa0>
 800e97e:	9b03      	ldr	r3, [sp, #12]
 800e980:	1d19      	adds	r1, r3, #4
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	9103      	str	r1, [sp, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	bfbb      	ittet	lt
 800e98a:	425b      	neglt	r3, r3
 800e98c:	f042 0202 	orrlt.w	r2, r2, #2
 800e990:	9307      	strge	r3, [sp, #28]
 800e992:	9307      	strlt	r3, [sp, #28]
 800e994:	bfb8      	it	lt
 800e996:	9204      	strlt	r2, [sp, #16]
 800e998:	7823      	ldrb	r3, [r4, #0]
 800e99a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e99c:	d10a      	bne.n	800e9b4 <_svfiprintf_r+0x130>
 800e99e:	7863      	ldrb	r3, [r4, #1]
 800e9a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9a2:	d132      	bne.n	800ea0a <_svfiprintf_r+0x186>
 800e9a4:	9b03      	ldr	r3, [sp, #12]
 800e9a6:	1d1a      	adds	r2, r3, #4
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	9203      	str	r2, [sp, #12]
 800e9ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9b0:	3402      	adds	r4, #2
 800e9b2:	9305      	str	r3, [sp, #20]
 800e9b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea78 <_svfiprintf_r+0x1f4>
 800e9b8:	7821      	ldrb	r1, [r4, #0]
 800e9ba:	2203      	movs	r2, #3
 800e9bc:	4650      	mov	r0, sl
 800e9be:	f7f1 fc97 	bl	80002f0 <memchr>
 800e9c2:	b138      	cbz	r0, 800e9d4 <_svfiprintf_r+0x150>
 800e9c4:	9b04      	ldr	r3, [sp, #16]
 800e9c6:	eba0 000a 	sub.w	r0, r0, sl
 800e9ca:	2240      	movs	r2, #64	@ 0x40
 800e9cc:	4082      	lsls	r2, r0
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	3401      	adds	r4, #1
 800e9d2:	9304      	str	r3, [sp, #16]
 800e9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9d8:	4824      	ldr	r0, [pc, #144]	@ (800ea6c <_svfiprintf_r+0x1e8>)
 800e9da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e9de:	2206      	movs	r2, #6
 800e9e0:	f7f1 fc86 	bl	80002f0 <memchr>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d036      	beq.n	800ea56 <_svfiprintf_r+0x1d2>
 800e9e8:	4b21      	ldr	r3, [pc, #132]	@ (800ea70 <_svfiprintf_r+0x1ec>)
 800e9ea:	bb1b      	cbnz	r3, 800ea34 <_svfiprintf_r+0x1b0>
 800e9ec:	9b03      	ldr	r3, [sp, #12]
 800e9ee:	3307      	adds	r3, #7
 800e9f0:	f023 0307 	bic.w	r3, r3, #7
 800e9f4:	3308      	adds	r3, #8
 800e9f6:	9303      	str	r3, [sp, #12]
 800e9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9fa:	4433      	add	r3, r6
 800e9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9fe:	e76a      	b.n	800e8d6 <_svfiprintf_r+0x52>
 800ea00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea04:	460c      	mov	r4, r1
 800ea06:	2001      	movs	r0, #1
 800ea08:	e7a8      	b.n	800e95c <_svfiprintf_r+0xd8>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	3401      	adds	r4, #1
 800ea0e:	9305      	str	r3, [sp, #20]
 800ea10:	4619      	mov	r1, r3
 800ea12:	f04f 0c0a 	mov.w	ip, #10
 800ea16:	4620      	mov	r0, r4
 800ea18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea1c:	3a30      	subs	r2, #48	@ 0x30
 800ea1e:	2a09      	cmp	r2, #9
 800ea20:	d903      	bls.n	800ea2a <_svfiprintf_r+0x1a6>
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d0c6      	beq.n	800e9b4 <_svfiprintf_r+0x130>
 800ea26:	9105      	str	r1, [sp, #20]
 800ea28:	e7c4      	b.n	800e9b4 <_svfiprintf_r+0x130>
 800ea2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea2e:	4604      	mov	r4, r0
 800ea30:	2301      	movs	r3, #1
 800ea32:	e7f0      	b.n	800ea16 <_svfiprintf_r+0x192>
 800ea34:	ab03      	add	r3, sp, #12
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ea74 <_svfiprintf_r+0x1f0>)
 800ea3c:	a904      	add	r1, sp, #16
 800ea3e:	4638      	mov	r0, r7
 800ea40:	f3af 8000 	nop.w
 800ea44:	1c42      	adds	r2, r0, #1
 800ea46:	4606      	mov	r6, r0
 800ea48:	d1d6      	bne.n	800e9f8 <_svfiprintf_r+0x174>
 800ea4a:	89ab      	ldrh	r3, [r5, #12]
 800ea4c:	065b      	lsls	r3, r3, #25
 800ea4e:	f53f af2d 	bmi.w	800e8ac <_svfiprintf_r+0x28>
 800ea52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea54:	e72c      	b.n	800e8b0 <_svfiprintf_r+0x2c>
 800ea56:	ab03      	add	r3, sp, #12
 800ea58:	9300      	str	r3, [sp, #0]
 800ea5a:	462a      	mov	r2, r5
 800ea5c:	4b05      	ldr	r3, [pc, #20]	@ (800ea74 <_svfiprintf_r+0x1f0>)
 800ea5e:	a904      	add	r1, sp, #16
 800ea60:	4638      	mov	r0, r7
 800ea62:	f000 f879 	bl	800eb58 <_printf_i>
 800ea66:	e7ed      	b.n	800ea44 <_svfiprintf_r+0x1c0>
 800ea68:	0800f1d8 	.word	0x0800f1d8
 800ea6c:	0800f1e2 	.word	0x0800f1e2
 800ea70:	00000000 	.word	0x00000000
 800ea74:	0800e7cd 	.word	0x0800e7cd
 800ea78:	0800f1de 	.word	0x0800f1de

0800ea7c <_printf_common>:
 800ea7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea80:	4616      	mov	r6, r2
 800ea82:	4698      	mov	r8, r3
 800ea84:	688a      	ldr	r2, [r1, #8]
 800ea86:	690b      	ldr	r3, [r1, #16]
 800ea88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	bfb8      	it	lt
 800ea90:	4613      	movlt	r3, r2
 800ea92:	6033      	str	r3, [r6, #0]
 800ea94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea98:	4607      	mov	r7, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	b10a      	cbz	r2, 800eaa2 <_printf_common+0x26>
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	6033      	str	r3, [r6, #0]
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	0699      	lsls	r1, r3, #26
 800eaa6:	bf42      	ittt	mi
 800eaa8:	6833      	ldrmi	r3, [r6, #0]
 800eaaa:	3302      	addmi	r3, #2
 800eaac:	6033      	strmi	r3, [r6, #0]
 800eaae:	6825      	ldr	r5, [r4, #0]
 800eab0:	f015 0506 	ands.w	r5, r5, #6
 800eab4:	d106      	bne.n	800eac4 <_printf_common+0x48>
 800eab6:	f104 0a19 	add.w	sl, r4, #25
 800eaba:	68e3      	ldr	r3, [r4, #12]
 800eabc:	6832      	ldr	r2, [r6, #0]
 800eabe:	1a9b      	subs	r3, r3, r2
 800eac0:	42ab      	cmp	r3, r5
 800eac2:	dc26      	bgt.n	800eb12 <_printf_common+0x96>
 800eac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eac8:	6822      	ldr	r2, [r4, #0]
 800eaca:	3b00      	subs	r3, #0
 800eacc:	bf18      	it	ne
 800eace:	2301      	movne	r3, #1
 800ead0:	0692      	lsls	r2, r2, #26
 800ead2:	d42b      	bmi.n	800eb2c <_printf_common+0xb0>
 800ead4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ead8:	4641      	mov	r1, r8
 800eada:	4638      	mov	r0, r7
 800eadc:	47c8      	blx	r9
 800eade:	3001      	adds	r0, #1
 800eae0:	d01e      	beq.n	800eb20 <_printf_common+0xa4>
 800eae2:	6823      	ldr	r3, [r4, #0]
 800eae4:	6922      	ldr	r2, [r4, #16]
 800eae6:	f003 0306 	and.w	r3, r3, #6
 800eaea:	2b04      	cmp	r3, #4
 800eaec:	bf02      	ittt	eq
 800eaee:	68e5      	ldreq	r5, [r4, #12]
 800eaf0:	6833      	ldreq	r3, [r6, #0]
 800eaf2:	1aed      	subeq	r5, r5, r3
 800eaf4:	68a3      	ldr	r3, [r4, #8]
 800eaf6:	bf0c      	ite	eq
 800eaf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eafc:	2500      	movne	r5, #0
 800eafe:	4293      	cmp	r3, r2
 800eb00:	bfc4      	itt	gt
 800eb02:	1a9b      	subgt	r3, r3, r2
 800eb04:	18ed      	addgt	r5, r5, r3
 800eb06:	2600      	movs	r6, #0
 800eb08:	341a      	adds	r4, #26
 800eb0a:	42b5      	cmp	r5, r6
 800eb0c:	d11a      	bne.n	800eb44 <_printf_common+0xc8>
 800eb0e:	2000      	movs	r0, #0
 800eb10:	e008      	b.n	800eb24 <_printf_common+0xa8>
 800eb12:	2301      	movs	r3, #1
 800eb14:	4652      	mov	r2, sl
 800eb16:	4641      	mov	r1, r8
 800eb18:	4638      	mov	r0, r7
 800eb1a:	47c8      	blx	r9
 800eb1c:	3001      	adds	r0, #1
 800eb1e:	d103      	bne.n	800eb28 <_printf_common+0xac>
 800eb20:	f04f 30ff 	mov.w	r0, #4294967295
 800eb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb28:	3501      	adds	r5, #1
 800eb2a:	e7c6      	b.n	800eaba <_printf_common+0x3e>
 800eb2c:	18e1      	adds	r1, r4, r3
 800eb2e:	1c5a      	adds	r2, r3, #1
 800eb30:	2030      	movs	r0, #48	@ 0x30
 800eb32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb36:	4422      	add	r2, r4
 800eb38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb40:	3302      	adds	r3, #2
 800eb42:	e7c7      	b.n	800ead4 <_printf_common+0x58>
 800eb44:	2301      	movs	r3, #1
 800eb46:	4622      	mov	r2, r4
 800eb48:	4641      	mov	r1, r8
 800eb4a:	4638      	mov	r0, r7
 800eb4c:	47c8      	blx	r9
 800eb4e:	3001      	adds	r0, #1
 800eb50:	d0e6      	beq.n	800eb20 <_printf_common+0xa4>
 800eb52:	3601      	adds	r6, #1
 800eb54:	e7d9      	b.n	800eb0a <_printf_common+0x8e>
	...

0800eb58 <_printf_i>:
 800eb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5c:	7e0f      	ldrb	r7, [r1, #24]
 800eb5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb60:	2f78      	cmp	r7, #120	@ 0x78
 800eb62:	4691      	mov	r9, r2
 800eb64:	4680      	mov	r8, r0
 800eb66:	460c      	mov	r4, r1
 800eb68:	469a      	mov	sl, r3
 800eb6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb6e:	d807      	bhi.n	800eb80 <_printf_i+0x28>
 800eb70:	2f62      	cmp	r7, #98	@ 0x62
 800eb72:	d80a      	bhi.n	800eb8a <_printf_i+0x32>
 800eb74:	2f00      	cmp	r7, #0
 800eb76:	f000 80d2 	beq.w	800ed1e <_printf_i+0x1c6>
 800eb7a:	2f58      	cmp	r7, #88	@ 0x58
 800eb7c:	f000 80b9 	beq.w	800ecf2 <_printf_i+0x19a>
 800eb80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb88:	e03a      	b.n	800ec00 <_printf_i+0xa8>
 800eb8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb8e:	2b15      	cmp	r3, #21
 800eb90:	d8f6      	bhi.n	800eb80 <_printf_i+0x28>
 800eb92:	a101      	add	r1, pc, #4	@ (adr r1, 800eb98 <_printf_i+0x40>)
 800eb94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb98:	0800ebf1 	.word	0x0800ebf1
 800eb9c:	0800ec05 	.word	0x0800ec05
 800eba0:	0800eb81 	.word	0x0800eb81
 800eba4:	0800eb81 	.word	0x0800eb81
 800eba8:	0800eb81 	.word	0x0800eb81
 800ebac:	0800eb81 	.word	0x0800eb81
 800ebb0:	0800ec05 	.word	0x0800ec05
 800ebb4:	0800eb81 	.word	0x0800eb81
 800ebb8:	0800eb81 	.word	0x0800eb81
 800ebbc:	0800eb81 	.word	0x0800eb81
 800ebc0:	0800eb81 	.word	0x0800eb81
 800ebc4:	0800ed05 	.word	0x0800ed05
 800ebc8:	0800ec2f 	.word	0x0800ec2f
 800ebcc:	0800ecbf 	.word	0x0800ecbf
 800ebd0:	0800eb81 	.word	0x0800eb81
 800ebd4:	0800eb81 	.word	0x0800eb81
 800ebd8:	0800ed27 	.word	0x0800ed27
 800ebdc:	0800eb81 	.word	0x0800eb81
 800ebe0:	0800ec2f 	.word	0x0800ec2f
 800ebe4:	0800eb81 	.word	0x0800eb81
 800ebe8:	0800eb81 	.word	0x0800eb81
 800ebec:	0800ecc7 	.word	0x0800ecc7
 800ebf0:	6833      	ldr	r3, [r6, #0]
 800ebf2:	1d1a      	adds	r2, r3, #4
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	6032      	str	r2, [r6, #0]
 800ebf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec00:	2301      	movs	r3, #1
 800ec02:	e09d      	b.n	800ed40 <_printf_i+0x1e8>
 800ec04:	6833      	ldr	r3, [r6, #0]
 800ec06:	6820      	ldr	r0, [r4, #0]
 800ec08:	1d19      	adds	r1, r3, #4
 800ec0a:	6031      	str	r1, [r6, #0]
 800ec0c:	0606      	lsls	r6, r0, #24
 800ec0e:	d501      	bpl.n	800ec14 <_printf_i+0xbc>
 800ec10:	681d      	ldr	r5, [r3, #0]
 800ec12:	e003      	b.n	800ec1c <_printf_i+0xc4>
 800ec14:	0645      	lsls	r5, r0, #25
 800ec16:	d5fb      	bpl.n	800ec10 <_printf_i+0xb8>
 800ec18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec1c:	2d00      	cmp	r5, #0
 800ec1e:	da03      	bge.n	800ec28 <_printf_i+0xd0>
 800ec20:	232d      	movs	r3, #45	@ 0x2d
 800ec22:	426d      	negs	r5, r5
 800ec24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec28:	4859      	ldr	r0, [pc, #356]	@ (800ed90 <_printf_i+0x238>)
 800ec2a:	230a      	movs	r3, #10
 800ec2c:	e011      	b.n	800ec52 <_printf_i+0xfa>
 800ec2e:	6821      	ldr	r1, [r4, #0]
 800ec30:	6833      	ldr	r3, [r6, #0]
 800ec32:	0608      	lsls	r0, r1, #24
 800ec34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec38:	d402      	bmi.n	800ec40 <_printf_i+0xe8>
 800ec3a:	0649      	lsls	r1, r1, #25
 800ec3c:	bf48      	it	mi
 800ec3e:	b2ad      	uxthmi	r5, r5
 800ec40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec42:	4853      	ldr	r0, [pc, #332]	@ (800ed90 <_printf_i+0x238>)
 800ec44:	6033      	str	r3, [r6, #0]
 800ec46:	bf14      	ite	ne
 800ec48:	230a      	movne	r3, #10
 800ec4a:	2308      	moveq	r3, #8
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec52:	6866      	ldr	r6, [r4, #4]
 800ec54:	60a6      	str	r6, [r4, #8]
 800ec56:	2e00      	cmp	r6, #0
 800ec58:	bfa2      	ittt	ge
 800ec5a:	6821      	ldrge	r1, [r4, #0]
 800ec5c:	f021 0104 	bicge.w	r1, r1, #4
 800ec60:	6021      	strge	r1, [r4, #0]
 800ec62:	b90d      	cbnz	r5, 800ec68 <_printf_i+0x110>
 800ec64:	2e00      	cmp	r6, #0
 800ec66:	d04b      	beq.n	800ed00 <_printf_i+0x1a8>
 800ec68:	4616      	mov	r6, r2
 800ec6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec6e:	fb03 5711 	mls	r7, r3, r1, r5
 800ec72:	5dc7      	ldrb	r7, [r0, r7]
 800ec74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec78:	462f      	mov	r7, r5
 800ec7a:	42bb      	cmp	r3, r7
 800ec7c:	460d      	mov	r5, r1
 800ec7e:	d9f4      	bls.n	800ec6a <_printf_i+0x112>
 800ec80:	2b08      	cmp	r3, #8
 800ec82:	d10b      	bne.n	800ec9c <_printf_i+0x144>
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	07df      	lsls	r7, r3, #31
 800ec88:	d508      	bpl.n	800ec9c <_printf_i+0x144>
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	6861      	ldr	r1, [r4, #4]
 800ec8e:	4299      	cmp	r1, r3
 800ec90:	bfde      	ittt	le
 800ec92:	2330      	movle	r3, #48	@ 0x30
 800ec94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec9c:	1b92      	subs	r2, r2, r6
 800ec9e:	6122      	str	r2, [r4, #16]
 800eca0:	f8cd a000 	str.w	sl, [sp]
 800eca4:	464b      	mov	r3, r9
 800eca6:	aa03      	add	r2, sp, #12
 800eca8:	4621      	mov	r1, r4
 800ecaa:	4640      	mov	r0, r8
 800ecac:	f7ff fee6 	bl	800ea7c <_printf_common>
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d14a      	bne.n	800ed4a <_printf_i+0x1f2>
 800ecb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb8:	b004      	add	sp, #16
 800ecba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	f043 0320 	orr.w	r3, r3, #32
 800ecc4:	6023      	str	r3, [r4, #0]
 800ecc6:	4833      	ldr	r0, [pc, #204]	@ (800ed94 <_printf_i+0x23c>)
 800ecc8:	2778      	movs	r7, #120	@ 0x78
 800ecca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	6831      	ldr	r1, [r6, #0]
 800ecd2:	061f      	lsls	r7, r3, #24
 800ecd4:	f851 5b04 	ldr.w	r5, [r1], #4
 800ecd8:	d402      	bmi.n	800ece0 <_printf_i+0x188>
 800ecda:	065f      	lsls	r7, r3, #25
 800ecdc:	bf48      	it	mi
 800ecde:	b2ad      	uxthmi	r5, r5
 800ece0:	6031      	str	r1, [r6, #0]
 800ece2:	07d9      	lsls	r1, r3, #31
 800ece4:	bf44      	itt	mi
 800ece6:	f043 0320 	orrmi.w	r3, r3, #32
 800ecea:	6023      	strmi	r3, [r4, #0]
 800ecec:	b11d      	cbz	r5, 800ecf6 <_printf_i+0x19e>
 800ecee:	2310      	movs	r3, #16
 800ecf0:	e7ac      	b.n	800ec4c <_printf_i+0xf4>
 800ecf2:	4827      	ldr	r0, [pc, #156]	@ (800ed90 <_printf_i+0x238>)
 800ecf4:	e7e9      	b.n	800ecca <_printf_i+0x172>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	f023 0320 	bic.w	r3, r3, #32
 800ecfc:	6023      	str	r3, [r4, #0]
 800ecfe:	e7f6      	b.n	800ecee <_printf_i+0x196>
 800ed00:	4616      	mov	r6, r2
 800ed02:	e7bd      	b.n	800ec80 <_printf_i+0x128>
 800ed04:	6833      	ldr	r3, [r6, #0]
 800ed06:	6825      	ldr	r5, [r4, #0]
 800ed08:	6961      	ldr	r1, [r4, #20]
 800ed0a:	1d18      	adds	r0, r3, #4
 800ed0c:	6030      	str	r0, [r6, #0]
 800ed0e:	062e      	lsls	r6, r5, #24
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	d501      	bpl.n	800ed18 <_printf_i+0x1c0>
 800ed14:	6019      	str	r1, [r3, #0]
 800ed16:	e002      	b.n	800ed1e <_printf_i+0x1c6>
 800ed18:	0668      	lsls	r0, r5, #25
 800ed1a:	d5fb      	bpl.n	800ed14 <_printf_i+0x1bc>
 800ed1c:	8019      	strh	r1, [r3, #0]
 800ed1e:	2300      	movs	r3, #0
 800ed20:	6123      	str	r3, [r4, #16]
 800ed22:	4616      	mov	r6, r2
 800ed24:	e7bc      	b.n	800eca0 <_printf_i+0x148>
 800ed26:	6833      	ldr	r3, [r6, #0]
 800ed28:	1d1a      	adds	r2, r3, #4
 800ed2a:	6032      	str	r2, [r6, #0]
 800ed2c:	681e      	ldr	r6, [r3, #0]
 800ed2e:	6862      	ldr	r2, [r4, #4]
 800ed30:	2100      	movs	r1, #0
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7f1 fadc 	bl	80002f0 <memchr>
 800ed38:	b108      	cbz	r0, 800ed3e <_printf_i+0x1e6>
 800ed3a:	1b80      	subs	r0, r0, r6
 800ed3c:	6060      	str	r0, [r4, #4]
 800ed3e:	6863      	ldr	r3, [r4, #4]
 800ed40:	6123      	str	r3, [r4, #16]
 800ed42:	2300      	movs	r3, #0
 800ed44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed48:	e7aa      	b.n	800eca0 <_printf_i+0x148>
 800ed4a:	6923      	ldr	r3, [r4, #16]
 800ed4c:	4632      	mov	r2, r6
 800ed4e:	4649      	mov	r1, r9
 800ed50:	4640      	mov	r0, r8
 800ed52:	47d0      	blx	sl
 800ed54:	3001      	adds	r0, #1
 800ed56:	d0ad      	beq.n	800ecb4 <_printf_i+0x15c>
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	079b      	lsls	r3, r3, #30
 800ed5c:	d413      	bmi.n	800ed86 <_printf_i+0x22e>
 800ed5e:	68e0      	ldr	r0, [r4, #12]
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	4298      	cmp	r0, r3
 800ed64:	bfb8      	it	lt
 800ed66:	4618      	movlt	r0, r3
 800ed68:	e7a6      	b.n	800ecb8 <_printf_i+0x160>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	4649      	mov	r1, r9
 800ed70:	4640      	mov	r0, r8
 800ed72:	47d0      	blx	sl
 800ed74:	3001      	adds	r0, #1
 800ed76:	d09d      	beq.n	800ecb4 <_printf_i+0x15c>
 800ed78:	3501      	adds	r5, #1
 800ed7a:	68e3      	ldr	r3, [r4, #12]
 800ed7c:	9903      	ldr	r1, [sp, #12]
 800ed7e:	1a5b      	subs	r3, r3, r1
 800ed80:	42ab      	cmp	r3, r5
 800ed82:	dcf2      	bgt.n	800ed6a <_printf_i+0x212>
 800ed84:	e7eb      	b.n	800ed5e <_printf_i+0x206>
 800ed86:	2500      	movs	r5, #0
 800ed88:	f104 0619 	add.w	r6, r4, #25
 800ed8c:	e7f5      	b.n	800ed7a <_printf_i+0x222>
 800ed8e:	bf00      	nop
 800ed90:	0800f1e9 	.word	0x0800f1e9
 800ed94:	0800f1fa 	.word	0x0800f1fa

0800ed98 <memmove>:
 800ed98:	4288      	cmp	r0, r1
 800ed9a:	b510      	push	{r4, lr}
 800ed9c:	eb01 0402 	add.w	r4, r1, r2
 800eda0:	d902      	bls.n	800eda8 <memmove+0x10>
 800eda2:	4284      	cmp	r4, r0
 800eda4:	4623      	mov	r3, r4
 800eda6:	d807      	bhi.n	800edb8 <memmove+0x20>
 800eda8:	1e43      	subs	r3, r0, #1
 800edaa:	42a1      	cmp	r1, r4
 800edac:	d008      	beq.n	800edc0 <memmove+0x28>
 800edae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edb6:	e7f8      	b.n	800edaa <memmove+0x12>
 800edb8:	4402      	add	r2, r0
 800edba:	4601      	mov	r1, r0
 800edbc:	428a      	cmp	r2, r1
 800edbe:	d100      	bne.n	800edc2 <memmove+0x2a>
 800edc0:	bd10      	pop	{r4, pc}
 800edc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edca:	e7f7      	b.n	800edbc <memmove+0x24>

0800edcc <_sbrk_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d06      	ldr	r5, [pc, #24]	@ (800ede8 <_sbrk_r+0x1c>)
 800edd0:	2300      	movs	r3, #0
 800edd2:	4604      	mov	r4, r0
 800edd4:	4608      	mov	r0, r1
 800edd6:	602b      	str	r3, [r5, #0]
 800edd8:	f7f4 fefe 	bl	8003bd8 <_sbrk>
 800eddc:	1c43      	adds	r3, r0, #1
 800edde:	d102      	bne.n	800ede6 <_sbrk_r+0x1a>
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	b103      	cbz	r3, 800ede6 <_sbrk_r+0x1a>
 800ede4:	6023      	str	r3, [r4, #0]
 800ede6:	bd38      	pop	{r3, r4, r5, pc}
 800ede8:	240ac93c 	.word	0x240ac93c

0800edec <memcpy>:
 800edec:	440a      	add	r2, r1
 800edee:	4291      	cmp	r1, r2
 800edf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800edf4:	d100      	bne.n	800edf8 <memcpy+0xc>
 800edf6:	4770      	bx	lr
 800edf8:	b510      	push	{r4, lr}
 800edfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee02:	4291      	cmp	r1, r2
 800ee04:	d1f9      	bne.n	800edfa <memcpy+0xe>
 800ee06:	bd10      	pop	{r4, pc}

0800ee08 <_realloc_r>:
 800ee08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0c:	4680      	mov	r8, r0
 800ee0e:	4615      	mov	r5, r2
 800ee10:	460c      	mov	r4, r1
 800ee12:	b921      	cbnz	r1, 800ee1e <_realloc_r+0x16>
 800ee14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee18:	4611      	mov	r1, r2
 800ee1a:	f7ff bc4b 	b.w	800e6b4 <_malloc_r>
 800ee1e:	b92a      	cbnz	r2, 800ee2c <_realloc_r+0x24>
 800ee20:	f7ff fbdc 	bl	800e5dc <_free_r>
 800ee24:	2400      	movs	r4, #0
 800ee26:	4620      	mov	r0, r4
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	f000 f81a 	bl	800ee64 <_malloc_usable_size_r>
 800ee30:	4285      	cmp	r5, r0
 800ee32:	4606      	mov	r6, r0
 800ee34:	d802      	bhi.n	800ee3c <_realloc_r+0x34>
 800ee36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee3a:	d8f4      	bhi.n	800ee26 <_realloc_r+0x1e>
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	4640      	mov	r0, r8
 800ee40:	f7ff fc38 	bl	800e6b4 <_malloc_r>
 800ee44:	4607      	mov	r7, r0
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d0ec      	beq.n	800ee24 <_realloc_r+0x1c>
 800ee4a:	42b5      	cmp	r5, r6
 800ee4c:	462a      	mov	r2, r5
 800ee4e:	4621      	mov	r1, r4
 800ee50:	bf28      	it	cs
 800ee52:	4632      	movcs	r2, r6
 800ee54:	f7ff ffca 	bl	800edec <memcpy>
 800ee58:	4621      	mov	r1, r4
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	f7ff fbbe 	bl	800e5dc <_free_r>
 800ee60:	463c      	mov	r4, r7
 800ee62:	e7e0      	b.n	800ee26 <_realloc_r+0x1e>

0800ee64 <_malloc_usable_size_r>:
 800ee64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee68:	1f18      	subs	r0, r3, #4
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	bfbc      	itt	lt
 800ee6e:	580b      	ldrlt	r3, [r1, r0]
 800ee70:	18c0      	addlt	r0, r0, r3
 800ee72:	4770      	bx	lr

0800ee74 <_init>:
 800ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee76:	bf00      	nop
 800ee78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee7a:	bc08      	pop	{r3}
 800ee7c:	469e      	mov	lr, r3
 800ee7e:	4770      	bx	lr

0800ee80 <_fini>:
 800ee80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee82:	bf00      	nop
 800ee84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee86:	bc08      	pop	{r3}
 800ee88:	469e      	mov	lr, r3
 800ee8a:	4770      	bx	lr
