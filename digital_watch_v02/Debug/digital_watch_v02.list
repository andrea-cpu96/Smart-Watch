
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cddc  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800d08c  0800d08c  0000e08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d428  0800d428  0000e428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d430  0800d430  0000e430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d434  0800d434  0000e434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  0800d438  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00075af4  24000068  0800d4a0  0000f068  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  24075b5c  0800d4a0  0000fb5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a0cf  00000000  00000000  0000f096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ddc  00000000  00000000  00049165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000251c7  00000000  00000000  0004ef41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016e0  00000000  00000000  00074108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003cbe  00000000  00000000  000757e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000089f1  00000000  00000000  000794a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003e449  00000000  00000000  00081e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014ebc7  00000000  00000000  000c02e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0020eea7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004d28  00000000  00000000  0020eeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006c  00000000  00000000  00213c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d074 	.word	0x0800d074

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	0800d074 	.word	0x0800d074

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <FXLS8974_I2C_Init>:
static int i2c_register_get(fxls8974_i2c_sensorhandle_t *pSensorHandle, uint8_t reg_addr, uint8_t *reg_data);

// Global Functions

int FXLS8974_I2C_Init(fxls8974_i2c_sensorhandle_t *pSensorHandle, void *instance, void *pI2C_funTx, void *pI2C_funRx, uint16_t sAddress, uint8_t *whoami)
{
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	460d      	mov	r5, r1
 80003a6:	f8bd 1020 	ldrh.w	r1, [sp, #32]

    int32_t status;


    /*! Check the input parameters. */
    if(( pSensorHandle == NULL ) || ( instance == NULL ) || ( pI2C_funTx == NULL ) || ( pI2C_funRx == NULL ))
 80003aa:	b1f8      	cbz	r0, 80003ec <FXLS8974_I2C_Init+0x4c>
 80003ac:	b1f5      	cbz	r5, 80003ec <FXLS8974_I2C_Init+0x4c>
 80003ae:	4616      	mov	r6, r2
 80003b0:	b1e2      	cbz	r2, 80003ec <FXLS8974_I2C_Init+0x4c>
 80003b2:	b1db      	cbz	r3, 80003ec <FXLS8974_I2C_Init+0x4c>
        return 0;

    pSensorHandle->pI2C_instance = instance;
 80003b4:	4604      	mov	r4, r0
 80003b6:	6005      	str	r5, [r0, #0]
{

	uint8_t status;


    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80003b8:	4628      	mov	r0, r5
 80003ba:	f04f 35ff 	mov.w	r5, #4294967295
    pSensorHandle->slaveAddress = sAddress;
 80003be:	80a1      	strh	r1, [r4, #4]
    pSensorHandle->pI2C_data_Rx = pI2C_funRx;
 80003c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
    status = i2c_register_get(pSensorHandle, FXLS8974_WHO_AM_I, &pSensorHandle->data_reg);
 80003c4:	2313      	movs	r3, #19
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80003c6:	f10d 020f 	add.w	r2, sp, #15
 80003ca:	9500      	str	r5, [sp, #0]
 80003cc:	f88d 300f 	strb.w	r3, [sp, #15]
 80003d0:	2301      	movs	r3, #1
 80003d2:	47b0      	blx	r6
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 80003d4:	68e6      	ldr	r6, [r4, #12]
 80003d6:	9500      	str	r5, [sp, #0]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80003d8:	4605      	mov	r5, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 80003da:	2301      	movs	r3, #1
 80003dc:	f104 0210 	add.w	r2, r4, #16
 80003e0:	88a1      	ldrh	r1, [r4, #4]
 80003e2:	6820      	ldr	r0, [r4, #0]
 80003e4:	47b0      	blx	r6
 80003e6:	4005      	ands	r5, r0
    if(HAL_OK != status)
 80003e8:	b2ed      	uxtb	r5, r5
 80003ea:	b915      	cbnz	r5, 80003f2 <FXLS8974_I2C_Init+0x52>
        return 0;
 80003ec:	2000      	movs	r0, #0
}
 80003ee:	b004      	add	sp, #16
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
    (*whoami) = pSensorHandle->data_reg;
 80003f2:	7c23      	ldrb	r3, [r4, #16]
 80003f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    if(FXLS8974_WHOAMI_VALUE != pSensorHandle->data_reg)
 80003f6:	f1a3 0086 	sub.w	r0, r3, #134	@ 0x86
    (*whoami) = pSensorHandle->data_reg;
 80003fa:	7013      	strb	r3, [r2, #0]
    if(FXLS8974_WHOAMI_VALUE != pSensorHandle->data_reg)
 80003fc:	fab0 f080 	clz	r0, r0
 8000400:	0940      	lsrs	r0, r0, #5
}
 8000402:	b004      	add	sp, #16
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	bf00      	nop

08000408 <FXLS8974_I2C_Configure>:
    if(pSensorHandle == NULL)
 8000408:	2800      	cmp	r0, #0
 800040a:	f000 80e3 	beq.w	80005d4 <FXLS8974_I2C_Configure+0x1cc>
	data_buff[0] = reg_addr;
 800040e:	2315      	movs	r3, #21
{
 8000410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000414:	f04f 35ff 	mov.w	r5, #4294967295
{
 8000418:	b085      	sub	sp, #20
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800041a:	6886      	ldr	r6, [r0, #8]
 800041c:	4604      	mov	r4, r0
 800041e:	9500      	str	r5, [sp, #0]
 8000420:	aa03      	add	r2, sp, #12
 8000422:	8881      	ldrh	r1, [r0, #4]
	data_buff[0] = reg_addr;
 8000424:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000428:	2302      	movs	r3, #2
 800042a:	6800      	ldr	r0, [r0, #0]
 800042c:	47b0      	blx	r6
    if(HAL_OK != status)
 800042e:	2800      	cmp	r0, #0
 8000430:	f040 80cc 	bne.w	80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 8000434:	f240 2315 	movw	r3, #533	@ 0x215
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000438:	68a6      	ldr	r6, [r4, #8]
 800043a:	aa03      	add	r2, sp, #12
 800043c:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 800043e:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000442:	2302      	movs	r3, #2
 8000444:	88a1      	ldrh	r1, [r4, #4]
 8000446:	6820      	ldr	r0, [r4, #0]
 8000448:	47b0      	blx	r6
    if(HAL_OK != status)
 800044a:	2800      	cmp	r0, #0
 800044c:	f040 80be 	bne.w	80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 8000450:	f245 5317 	movw	r3, #21783	@ 0x5517
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000454:	68a6      	ldr	r6, [r4, #8]
 8000456:	aa03      	add	r2, sp, #12
 8000458:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 800045a:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800045e:	2302      	movs	r3, #2
 8000460:	88a1      	ldrh	r1, [r4, #4]
 8000462:	6820      	ldr	r0, [r4, #0]
 8000464:	47b0      	blx	r6
    if(HAL_OK != status)
 8000466:	2800      	cmp	r0, #0
 8000468:	f040 80b0 	bne.w	80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 800046c:	f242 032f 	movw	r3, #8239	@ 0x202f
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000470:	68a6      	ldr	r6, [r4, #8]
 8000472:	aa03      	add	r2, sp, #12
 8000474:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 8000476:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800047a:	2302      	movs	r3, #2
 800047c:	88a1      	ldrh	r1, [r4, #4]
 800047e:	6820      	ldr	r0, [r4, #0]
 8000480:	47b0      	blx	r6
    if(HAL_OK != status)
 8000482:	2800      	cmp	r0, #0
 8000484:	f040 80a2 	bne.w	80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 8000488:	f24f 0330 	movw	r3, #61488	@ 0xf030
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800048c:	68a6      	ldr	r6, [r4, #8]
 800048e:	aa03      	add	r2, sp, #12
 8000490:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 8000492:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000496:	2302      	movs	r3, #2
 8000498:	88a1      	ldrh	r1, [r4, #4]
 800049a:	6820      	ldr	r0, [r4, #0]
 800049c:	47b0      	blx	r6
    if(HAL_OK != status)
 800049e:	2800      	cmp	r0, #0
 80004a0:	f040 8094 	bne.w	80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 80004a4:	f240 6331 	movw	r3, #1585	@ 0x631
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80004a8:	68a6      	ldr	r6, [r4, #8]
 80004aa:	aa03      	add	r2, sp, #12
 80004ac:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 80004ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80004b2:	2302      	movs	r3, #2
 80004b4:	88a1      	ldrh	r1, [r4, #4]
 80004b6:	6820      	ldr	r0, [r4, #0]
 80004b8:	47b0      	blx	r6
    if(HAL_OK != status)
 80004ba:	2800      	cmp	r0, #0
 80004bc:	f040 8086 	bne.w	80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 80004c0:	f64f 6233 	movw	r2, #65075	@ 0xfe33
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80004c4:	68a6      	ldr	r6, [r4, #8]
 80004c6:	2302      	movs	r3, #2
 80004c8:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 80004ca:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80004ce:	aa03      	add	r2, sp, #12
 80004d0:	88a1      	ldrh	r1, [r4, #4]
 80004d2:	6820      	ldr	r0, [r4, #0]
 80004d4:	47b0      	blx	r6
	data_buff[0] = reg_addr;
 80004d6:	f64f 2334 	movw	r3, #64052	@ 0xfa34
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80004da:	9500      	str	r5, [sp, #0]
 80004dc:	aa03      	add	r2, sp, #12
 80004de:	68a6      	ldr	r6, [r4, #8]
 80004e0:	4680      	mov	r8, r0
 80004e2:	88a1      	ldrh	r1, [r4, #4]
	data_buff[0] = reg_addr;
 80004e4:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80004e8:	2302      	movs	r3, #2
 80004ea:	6820      	ldr	r0, [r4, #0]
 80004ec:	47b0      	blx	r6
	data_buff[0] = reg_addr;
 80004ee:	f240 2335 	movw	r3, #565	@ 0x235
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80004f2:	9500      	str	r5, [sp, #0]
 80004f4:	aa03      	add	r2, sp, #12
 80004f6:	88a1      	ldrh	r1, [r4, #4]
 80004f8:	4607      	mov	r7, r0
 80004fa:	68a6      	ldr	r6, [r4, #8]
	data_buff[0] = reg_addr;
 80004fc:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000500:	2302      	movs	r3, #2
 8000502:	6820      	ldr	r0, [r4, #0]
 8000504:	47b0      	blx	r6
	data_buff[0] = reg_addr;
 8000506:	f240 5336 	movw	r3, #1334	@ 0x536
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800050a:	9500      	str	r5, [sp, #0]
 800050c:	4681      	mov	r9, r0
	data_buff[0] = reg_addr;
 800050e:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000512:	aa03      	add	r2, sp, #12
 8000514:	2302      	movs	r3, #2
 8000516:	88a1      	ldrh	r1, [r4, #4]
 8000518:	6820      	ldr	r0, [r4, #0]
 800051a:	68a6      	ldr	r6, [r4, #8]
 800051c:	47b0      	blx	r6
    if(HAL_OK != status)
 800051e:	2800      	cmp	r0, #0
 8000520:	d154      	bne.n	80005cc <FXLS8974_I2C_Configure+0x1c4>
	if(1 != status)
 8000522:	ea47 0708 	orr.w	r7, r7, r8
 8000526:	ea49 0607 	orr.w	r6, r9, r7
 800052a:	b2f6      	uxtb	r6, r6
 800052c:	2e00      	cmp	r6, #0
 800052e:	d14d      	bne.n	80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 8000530:	f44f 738c 	mov.w	r3, #280	@ 0x118
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000534:	68a6      	ldr	r6, [r4, #8]
 8000536:	aa03      	add	r2, sp, #12
 8000538:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 800053a:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800053e:	2302      	movs	r3, #2
 8000540:	88a1      	ldrh	r1, [r4, #4]
 8000542:	6820      	ldr	r0, [r4, #0]
 8000544:	47b0      	blx	r6
    if(HAL_OK != status)
 8000546:	2800      	cmp	r0, #0
 8000548:	d140      	bne.n	80005cc <FXLS8974_I2C_Configure+0x1c4>
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800054a:	f04f 35ff 	mov.w	r5, #4294967295
	data_buff[0] = reg_addr;
 800054e:	f643 721e 	movw	r2, #16158	@ 0x3f1e
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000552:	68a6      	ldr	r6, [r4, #8]
 8000554:	2302      	movs	r3, #2
 8000556:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 8000558:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800055c:	aa03      	add	r2, sp, #12
 800055e:	88a1      	ldrh	r1, [r4, #4]
 8000560:	6820      	ldr	r0, [r4, #0]
 8000562:	47b0      	blx	r6
	data_buff[0] = reg_addr;
 8000564:	f240 231f 	movw	r3, #543	@ 0x21f
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000568:	9500      	str	r5, [sp, #0]
 800056a:	4606      	mov	r6, r0
	data_buff[0] = reg_addr;
 800056c:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000570:	aa03      	add	r2, sp, #12
 8000572:	68a7      	ldr	r7, [r4, #8]
 8000574:	2302      	movs	r3, #2
 8000576:	88a1      	ldrh	r1, [r4, #4]
 8000578:	6820      	ldr	r0, [r4, #0]
 800057a:	47b8      	blx	r7
    if(HAL_OK != status)
 800057c:	bb30      	cbnz	r0, 80005cc <FXLS8974_I2C_Configure+0x1c4>
	if(1 != status)
 800057e:	bb2e      	cbnz	r6, 80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 8000580:	f44f 7290 	mov.w	r2, #288	@ 0x120
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000584:	68a6      	ldr	r6, [r4, #8]
 8000586:	2302      	movs	r3, #2
 8000588:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 800058a:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 800058e:	aa03      	add	r2, sp, #12
 8000590:	88a1      	ldrh	r1, [r4, #4]
 8000592:	6820      	ldr	r0, [r4, #0]
 8000594:	47b0      	blx	r6
	data_buff[0] = reg_addr;
 8000596:	2321      	movs	r3, #33	@ 0x21
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 8000598:	9500      	str	r5, [sp, #0]
 800059a:	4606      	mov	r6, r0
	data_buff[0] = reg_addr;
 800059c:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80005a0:	aa03      	add	r2, sp, #12
 80005a2:	68a7      	ldr	r7, [r4, #8]
 80005a4:	2302      	movs	r3, #2
 80005a6:	88a1      	ldrh	r1, [r4, #4]
 80005a8:	6820      	ldr	r0, [r4, #0]
 80005aa:	47b8      	blx	r7
    if(HAL_OK != status)
 80005ac:	b970      	cbnz	r0, 80005cc <FXLS8974_I2C_Configure+0x1c4>
	if(1 != status)
 80005ae:	b96e      	cbnz	r6, 80005cc <FXLS8974_I2C_Configure+0x1c4>
	data_buff[0] = reg_addr;
 80005b0:	f240 1315 	movw	r3, #277	@ 0x115
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80005b4:	68a6      	ldr	r6, [r4, #8]
 80005b6:	aa03      	add	r2, sp, #12
 80005b8:	9500      	str	r5, [sp, #0]
	data_buff[0] = reg_addr;
 80005ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, HAL_MAX_DELAY);
 80005be:	2302      	movs	r3, #2
 80005c0:	88a1      	ldrh	r1, [r4, #4]
 80005c2:	6820      	ldr	r0, [r4, #0]
 80005c4:	47b0      	blx	r6
    if(HAL_OK != status)
 80005c6:	b908      	cbnz	r0, 80005cc <FXLS8974_I2C_Configure+0x1c4>
    return 1;
 80005c8:	2001      	movs	r0, #1
 80005ca:	e000      	b.n	80005ce <FXLS8974_I2C_Configure+0x1c6>
        return 0;
 80005cc:	2000      	movs	r0, #0
}
 80005ce:	b005      	add	sp, #20
 80005d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return 0;
 80005d4:	2000      	movs	r0, #0
}
 80005d6:	4770      	bx	lr

080005d8 <FXLS8974_I2C_ReadData>:
    if(pSensorHandle == NULL)
 80005d8:	2800      	cmp	r0, #0
 80005da:	f000 80bb 	beq.w	8000754 <FXLS8974_I2C_ReadData+0x17c>
    status = i2c_register_get(pSensorHandle, FXLS8974_SYS_MODE, &pSensorHandle->data_reg);
 80005de:	2314      	movs	r3, #20
{
 80005e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80005e4:	f04f 36ff 	mov.w	r6, #4294967295
{
 80005e8:	b085      	sub	sp, #20
 80005ea:	4604      	mov	r4, r0
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80005ec:	6885      	ldr	r5, [r0, #8]
 80005ee:	f10d 020f 	add.w	r2, sp, #15
 80005f2:	9600      	str	r6, [sp, #0]
 80005f4:	f88d 300f 	strb.w	r3, [sp, #15]
 80005f8:	2301      	movs	r3, #1
 80005fa:	8881      	ldrh	r1, [r0, #4]
 80005fc:	6800      	ldr	r0, [r0, #0]
 80005fe:	47a8      	blx	r5
 8000600:	4605      	mov	r5, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 8000602:	68e7      	ldr	r7, [r4, #12]
 8000604:	2301      	movs	r3, #1
 8000606:	9600      	str	r6, [sp, #0]
 8000608:	f104 0210 	add.w	r2, r4, #16
 800060c:	88a1      	ldrh	r1, [r4, #4]
 800060e:	6820      	ldr	r0, [r4, #0]
 8000610:	47b8      	blx	r7
 8000612:	4005      	ands	r5, r0
    if(HAL_OK != status)
 8000614:	b2ed      	uxtb	r5, r5
 8000616:	2d00      	cmp	r5, #0
 8000618:	f040 8098 	bne.w	800074c <FXLS8974_I2C_ReadData+0x174>
    status = i2c_register_get(pSensorHandle, FXLS8974_OUT_X_LSB, &pSensorHandle->axis_data.x.arr[0]);
 800061c:	2204      	movs	r2, #4
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 800061e:	68a5      	ldr	r5, [r4, #8]
 8000620:	2301      	movs	r3, #1
 8000622:	9600      	str	r6, [sp, #0]
 8000624:	f88d 200f 	strb.w	r2, [sp, #15]
 8000628:	f10d 020f 	add.w	r2, sp, #15
 800062c:	88a1      	ldrh	r1, [r4, #4]
 800062e:	6820      	ldr	r0, [r4, #0]
 8000630:	47a8      	blx	r5
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 8000632:	68e5      	ldr	r5, [r4, #12]
 8000634:	2301      	movs	r3, #1
 8000636:	9600      	str	r6, [sp, #0]
 8000638:	f104 0212 	add.w	r2, r4, #18
 800063c:	88a1      	ldrh	r1, [r4, #4]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 800063e:	4681      	mov	r9, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 8000640:	6820      	ldr	r0, [r4, #0]
 8000642:	47a8      	blx	r5
 8000644:	2305      	movs	r3, #5
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 8000646:	9600      	str	r6, [sp, #0]
 8000648:	f10d 020f 	add.w	r2, sp, #15
 800064c:	88a1      	ldrh	r1, [r4, #4]
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 800064e:	4680      	mov	r8, r0
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 8000650:	68a5      	ldr	r5, [r4, #8]
 8000652:	f88d 300f 	strb.w	r3, [sp, #15]
 8000656:	2301      	movs	r3, #1
 8000658:	6820      	ldr	r0, [r4, #0]
 800065a:	47a8      	blx	r5
 800065c:	4605      	mov	r5, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 800065e:	9600      	str	r6, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	f104 0213 	add.w	r2, r4, #19
 8000666:	88a1      	ldrh	r1, [r4, #4]
 8000668:	6820      	ldr	r0, [r4, #0]
 800066a:	68e7      	ldr	r7, [r4, #12]
 800066c:	47b8      	blx	r7
 800066e:	4005      	ands	r5, r0
    if(HAL_OK != status)
 8000670:	b2ed      	uxtb	r5, r5
 8000672:	2d00      	cmp	r5, #0
 8000674:	d16a      	bne.n	800074c <FXLS8974_I2C_ReadData+0x174>
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 8000676:	ea09 0708 	and.w	r7, r9, r8
	if(1 != status)
 800067a:	b2ff      	uxtb	r7, r7
 800067c:	2f00      	cmp	r7, #0
 800067e:	d165      	bne.n	800074c <FXLS8974_I2C_ReadData+0x174>
    status = i2c_register_get(pSensorHandle, FXLS8974_OUT_Y_LSB, &pSensorHandle->axis_data.y.arr[0]);
 8000680:	2206      	movs	r2, #6
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 8000682:	68a5      	ldr	r5, [r4, #8]
 8000684:	2301      	movs	r3, #1
 8000686:	9600      	str	r6, [sp, #0]
 8000688:	f88d 200f 	strb.w	r2, [sp, #15]
 800068c:	f10d 020f 	add.w	r2, sp, #15
 8000690:	88a1      	ldrh	r1, [r4, #4]
 8000692:	6820      	ldr	r0, [r4, #0]
 8000694:	47a8      	blx	r5
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 8000696:	68e5      	ldr	r5, [r4, #12]
 8000698:	2301      	movs	r3, #1
 800069a:	9600      	str	r6, [sp, #0]
 800069c:	f104 0214 	add.w	r2, r4, #20
 80006a0:	88a1      	ldrh	r1, [r4, #4]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80006a2:	4680      	mov	r8, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 80006a4:	6820      	ldr	r0, [r4, #0]
 80006a6:	47a8      	blx	r5
 80006a8:	2307      	movs	r3, #7
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80006aa:	9600      	str	r6, [sp, #0]
 80006ac:	f10d 020f 	add.w	r2, sp, #15
 80006b0:	88a1      	ldrh	r1, [r4, #4]
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 80006b2:	4681      	mov	r9, r0
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80006b4:	68a5      	ldr	r5, [r4, #8]
 80006b6:	f88d 300f 	strb.w	r3, [sp, #15]
 80006ba:	2301      	movs	r3, #1
 80006bc:	6820      	ldr	r0, [r4, #0]
 80006be:	47a8      	blx	r5
 80006c0:	4605      	mov	r5, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 80006c2:	9600      	str	r6, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	68e7      	ldr	r7, [r4, #12]
 80006c8:	f104 0215 	add.w	r2, r4, #21
 80006cc:	88a1      	ldrh	r1, [r4, #4]
 80006ce:	6820      	ldr	r0, [r4, #0]
 80006d0:	47b8      	blx	r7
 80006d2:	4005      	ands	r5, r0
    if(HAL_OK != status)
 80006d4:	b2ed      	uxtb	r5, r5
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d138      	bne.n	800074c <FXLS8974_I2C_ReadData+0x174>
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 80006da:	ea08 0809 	and.w	r8, r8, r9
	if(1 != status)
 80006de:	fa5f f388 	uxtb.w	r3, r8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d132      	bne.n	800074c <FXLS8974_I2C_ReadData+0x174>
    status = i2c_register_get(pSensorHandle, FXLS8974_OUT_Z_LSB, &pSensorHandle->axis_data.z.arr[0]);
 80006e6:	2208      	movs	r2, #8
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 80006e8:	68a5      	ldr	r5, [r4, #8]
 80006ea:	2301      	movs	r3, #1
 80006ec:	9600      	str	r6, [sp, #0]
 80006ee:	f88d 200f 	strb.w	r2, [sp, #15]
 80006f2:	f10d 020f 	add.w	r2, sp, #15
 80006f6:	88a1      	ldrh	r1, [r4, #4]
 80006f8:	6820      	ldr	r0, [r4, #0]
 80006fa:	47a8      	blx	r5
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 80006fc:	68e7      	ldr	r7, [r4, #12]
 80006fe:	2301      	movs	r3, #1
 8000700:	9600      	str	r6, [sp, #0]
 8000702:	f104 0216 	add.w	r2, r4, #22
 8000706:	88a1      	ldrh	r1, [r4, #4]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 8000708:	4605      	mov	r5, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 800070a:	6820      	ldr	r0, [r4, #0]
 800070c:	47b8      	blx	r7
 800070e:	2309      	movs	r3, #9
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 8000710:	9600      	str	r6, [sp, #0]
 8000712:	f10d 020f 	add.w	r2, sp, #15
 8000716:	88a1      	ldrh	r1, [r4, #4]
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 8000718:	4680      	mov	r8, r0
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 800071a:	68a7      	ldr	r7, [r4, #8]
 800071c:	f88d 300f 	strb.w	r3, [sp, #15]
 8000720:	2301      	movs	r3, #1
 8000722:	6820      	ldr	r0, [r4, #0]
 8000724:	47b8      	blx	r7
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 8000726:	9600      	str	r6, [sp, #0]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, HAL_MAX_DELAY);
 8000728:	4606      	mov	r6, r0
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 800072a:	68e7      	ldr	r7, [r4, #12]
 800072c:	2301      	movs	r3, #1
 800072e:	f104 0217 	add.w	r2, r4, #23
 8000732:	88a1      	ldrh	r1, [r4, #4]
 8000734:	6820      	ldr	r0, [r4, #0]
 8000736:	47b8      	blx	r7
 8000738:	4006      	ands	r6, r0
    if(HAL_OK != status)
 800073a:	b2f6      	uxtb	r6, r6
 800073c:	b936      	cbnz	r6, 800074c <FXLS8974_I2C_ReadData+0x174>
    status &= pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, HAL_MAX_DELAY);
 800073e:	ea05 0008 	and.w	r0, r5, r8
    if(HAL_OK != status)
 8000742:	b2c0      	uxtb	r0, r0
 8000744:	fab0 f080 	clz	r0, r0
 8000748:	0940      	lsrs	r0, r0, #5
	if(1 != status)
 800074a:	e000      	b.n	800074e <FXLS8974_I2C_ReadData+0x176>
        return 0;
 800074c:	2000      	movs	r0, #0
}
 800074e:	b005      	add	sp, #20
 8000750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return 0;
 8000754:	2000      	movs	r0, #0
}
 8000756:	4770      	bx	lr

08000758 <GC9A01_write_data.constprop.0.isra.0>:

    return ret;

}

int GC9A01_write_data(uint8_t *data, size_t len)
 8000758:	b570      	push	{r4, r5, r6, lr}
	while(spi_dma_not_ready)
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <GC9A01_write_data.constprop.0.isra.0+0x7c>)
int GC9A01_write_data(uint8_t *data, size_t len)
 800075c:	4605      	mov	r5, r0
 800075e:	4c1e      	ldr	r4, [pc, #120]	@ (80007d8 <GC9A01_write_data.constprop.0.isra.0+0x80>)
	while(spi_dma_not_ready)
 8000760:	e001      	b.n	8000766 <GC9A01_write_data.constprop.0.isra.0+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000762:	3b01      	subs	r3, #1
 8000764:	d002      	beq.n	800076c <GC9A01_write_data.constprop.0.isra.0+0x14>
	while(spi_dma_not_ready)
 8000766:	7822      	ldrb	r2, [r4, #0]
 8000768:	2a00      	cmp	r2, #0
 800076a:	d1fa      	bne.n	8000762 <GC9A01_write_data.constprop.0.isra.0+0xa>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2102      	movs	r1, #2
 8000770:	481a      	ldr	r0, [pc, #104]	@ (80007dc <GC9A01_write_data.constprop.0.isra.0+0x84>)
 8000772:	f003 fb3b 	bl	8003dec <HAL_GPIO_WritePin>
}
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <GC9A01_write_data.constprop.0.isra.0+0x7c>)
 8000778:	e001      	b.n	800077e <GC9A01_write_data.constprop.0.isra.0+0x26>
		if(count_iter >= MAX_ITERATIONS_NUM)
 800077a:	3b01      	subs	r3, #1
 800077c:	d002      	beq.n	8000784 <GC9A01_write_data.constprop.0.isra.0+0x2c>
	while(spi_dma_not_ready)
 800077e:	7822      	ldrb	r2, [r4, #0]
 8000780:	2a00      	cmp	r2, #0
 8000782:	d1fa      	bne.n	800077a <GC9A01_write_data.constprop.0.isra.0+0x22>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000784:	4e16      	ldr	r6, [pc, #88]	@ (80007e0 <GC9A01_write_data.constprop.0.isra.0+0x88>)
 8000786:	2101      	movs	r1, #1
 8000788:	2200      	movs	r2, #0
 800078a:	4814      	ldr	r0, [pc, #80]	@ (80007dc <GC9A01_write_data.constprop.0.isra.0+0x84>)
 800078c:	f003 fb2e 	bl	8003dec <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join)
	{

		count_iter++;

		if(count_iter >= MAX_ITERATIONS_NUM)
 8000790:	4914      	ldr	r1, [pc, #80]	@ (80007e4 <GC9A01_write_data.constprop.0.isra.0+0x8c>)
 8000792:	6833      	ldr	r3, [r6, #0]
 8000794:	e001      	b.n	800079a <GC9A01_write_data.constprop.0.isra.0+0x42>
 8000796:	428b      	cmp	r3, r1
 8000798:	d81a      	bhi.n	80007d0 <GC9A01_write_data.constprop.0.isra.0+0x78>
	while(spi_dma_not_ready && !join)
 800079a:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 800079c:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 800079e:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 80007a2:	2a00      	cmp	r2, #0
 80007a4:	d1f7      	bne.n	8000796 <GC9A01_write_data.constprop.0.isra.0+0x3e>

	}

	count_iter = 0;

	spi_dma_not_ready = 1;
 80007a6:	2201      	movs	r2, #1
	count_iter = 0;
 80007a8:	6030      	str	r0, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80007aa:	4629      	mov	r1, r5
 80007ac:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <GC9A01_write_data.constprop.0.isra.0+0x90>)
	spi_dma_not_ready = 1;
 80007ae:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80007b0:	f008 fd42 	bl	8009238 <HAL_SPI_Transmit_DMA>
}
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <GC9A01_write_data.constprop.0.isra.0+0x7c>)
 80007b6:	e001      	b.n	80007bc <GC9A01_write_data.constprop.0.isra.0+0x64>
		if(count_iter >= MAX_ITERATIONS_NUM)
 80007b8:	3b01      	subs	r3, #1
 80007ba:	d002      	beq.n	80007c2 <GC9A01_write_data.constprop.0.isra.0+0x6a>
	while(spi_dma_not_ready)
 80007bc:	7822      	ldrb	r2, [r4, #0]
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d1fa      	bne.n	80007b8 <GC9A01_write_data.constprop.0.isra.0+0x60>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <GC9A01_write_data.constprop.0.isra.0+0x84>)
 80007c6:	4611      	mov	r1, r2
}
 80007c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007cc:	f003 bb0e 	b.w	8003dec <HAL_GPIO_WritePin>
 80007d0:	6033      	str	r3, [r6, #0]
 80007d2:	e7ef      	b.n	80007b4 <GC9A01_write_data.constprop.0.isra.0+0x5c>
 80007d4:	000f4240 	.word	0x000f4240
 80007d8:	24000088 	.word	0x24000088
 80007dc:	58020400 	.word	0x58020400
 80007e0:	24000084 	.word	0x24000084
 80007e4:	000f423f 	.word	0x000f423f
 80007e8:	24000218 	.word	0x24000218

080007ec <GC9A01_set_data_command>:
{
 80007ec:	b410      	push	{r4}
	while(spi_dma_not_ready)
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <GC9A01_set_data_command+0x24>)
{
 80007f0:	4602      	mov	r2, r0
 80007f2:	4c08      	ldr	r4, [pc, #32]	@ (8000814 <GC9A01_set_data_command+0x28>)
	while(spi_dma_not_ready)
 80007f4:	e001      	b.n	80007fa <GC9A01_set_data_command+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 80007f6:	3b01      	subs	r3, #1
 80007f8:	d002      	beq.n	8000800 <GC9A01_set_data_command+0x14>
	while(spi_dma_not_ready)
 80007fa:	7821      	ldrb	r1, [r4, #0]
 80007fc:	2900      	cmp	r1, #0
 80007fe:	d1fa      	bne.n	80007f6 <GC9A01_set_data_command+0xa>
	if(val==0)
 8000800:	b102      	cbz	r2, 8000804 <GC9A01_set_data_command+0x18>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <GC9A01_set_data_command+0x2c>)
}
 8000808:	f85d 4b04 	ldr.w	r4, [sp], #4
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800080c:	f003 baee 	b.w	8003dec <HAL_GPIO_WritePin>
 8000810:	000f4240 	.word	0x000f4240
 8000814:	24000088 	.word	0x24000088
 8000818:	58020400 	.word	0x58020400

0800081c <GC9A01_set_chip_select>:
{
 800081c:	b410      	push	{r4}
	while(spi_dma_not_ready)
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <GC9A01_set_chip_select+0x30>)
{
 8000820:	4602      	mov	r2, r0
 8000822:	4c0b      	ldr	r4, [pc, #44]	@ (8000850 <GC9A01_set_chip_select+0x34>)
	while(spi_dma_not_ready)
 8000824:	e001      	b.n	800082a <GC9A01_set_chip_select+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000826:	3b01      	subs	r3, #1
 8000828:	d002      	beq.n	8000830 <GC9A01_set_chip_select+0x14>
	while(spi_dma_not_ready)
 800082a:	7821      	ldrb	r1, [r4, #0]
 800082c:	2900      	cmp	r1, #0
 800082e:	d1fa      	bne.n	8000826 <GC9A01_set_chip_select+0xa>
    if (val==0)
 8000830:	b92a      	cbnz	r2, 800083e <GC9A01_set_chip_select+0x22>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000832:	2101      	movs	r1, #1
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <GC9A01_set_chip_select+0x38>)
}
 8000836:	f85d 4b04 	ldr.w	r4, [sp], #4
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800083a:	f003 bad7 	b.w	8003dec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800083e:	2201      	movs	r2, #1
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <GC9A01_set_chip_select+0x38>)
}
 8000842:	f85d 4b04 	ldr.w	r4, [sp], #4
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000846:	4611      	mov	r1, r2
 8000848:	f003 bad0 	b.w	8003dec <HAL_GPIO_WritePin>
 800084c:	000f4240 	.word	0x000f4240
 8000850:	24000088 	.word	0x24000088
 8000854:	58020400 	.word	0x58020400

08000858 <GC9A01_write_command>:
{
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <GC9A01_write_command+0x8c>)
 800085e:	4c22      	ldr	r4, [pc, #136]	@ (80008e8 <GC9A01_write_command+0x90>)
 8000860:	f88d 0007 	strb.w	r0, [sp, #7]
 8000864:	e001      	b.n	800086a <GC9A01_write_command+0x12>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000866:	3b01      	subs	r3, #1
 8000868:	d002      	beq.n	8000870 <GC9A01_write_command+0x18>
	while(spi_dma_not_ready)
 800086a:	7822      	ldrb	r2, [r4, #0]
 800086c:	2a00      	cmp	r2, #0
 800086e:	d1fa      	bne.n	8000866 <GC9A01_write_command+0xe>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2102      	movs	r1, #2
 8000874:	481d      	ldr	r0, [pc, #116]	@ (80008ec <GC9A01_write_command+0x94>)
 8000876:	f003 fab9 	bl	8003dec <HAL_GPIO_WritePin>
}
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <GC9A01_write_command+0x8c>)
 800087c:	e001      	b.n	8000882 <GC9A01_write_command+0x2a>
		if(count_iter >= MAX_ITERATIONS_NUM)
 800087e:	3b01      	subs	r3, #1
 8000880:	d002      	beq.n	8000888 <GC9A01_write_command+0x30>
	while(spi_dma_not_ready)
 8000882:	7822      	ldrb	r2, [r4, #0]
 8000884:	2a00      	cmp	r2, #0
 8000886:	d1fa      	bne.n	800087e <GC9A01_write_command+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000888:	4e19      	ldr	r6, [pc, #100]	@ (80008f0 <GC9A01_write_command+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	4817      	ldr	r0, [pc, #92]	@ (80008ec <GC9A01_write_command+0x94>)
 800088e:	2101      	movs	r1, #1
 8000890:	f003 faac 	bl	8003dec <HAL_GPIO_WritePin>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000894:	4817      	ldr	r0, [pc, #92]	@ (80008f4 <GC9A01_write_command+0x9c>)
 8000896:	6833      	ldr	r3, [r6, #0]
}
 8000898:	e001      	b.n	800089e <GC9A01_write_command+0x46>
		if(count_iter >= MAX_ITERATIONS_NUM)
 800089a:	4283      	cmp	r3, r0
 800089c:	d81e      	bhi.n	80008dc <GC9A01_write_command+0x84>
	while(spi_dma_not_ready && !join)
 800089e:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 80008a0:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 80008a2:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	d1f7      	bne.n	800089a <GC9A01_write_command+0x42>
	spi_dma_not_ready = 1;
 80008aa:	2501      	movs	r5, #1
	count_iter = 0;
 80008ac:	6031      	str	r1, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80008ae:	4812      	ldr	r0, [pc, #72]	@ (80008f8 <GC9A01_write_command+0xa0>)
 80008b0:	f10d 0107 	add.w	r1, sp, #7
 80008b4:	462a      	mov	r2, r5
	spi_dma_not_ready = 1;
 80008b6:	7025      	strb	r5, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80008b8:	f008 fcbe 	bl	8009238 <HAL_SPI_Transmit_DMA>

#else
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
#endif

	if(ret != HAL_OK)
 80008bc:	b978      	cbnz	r0, 80008de <GC9A01_write_command+0x86>
		return -1;

	return 1;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <GC9A01_write_command+0x8c>)
 80008c0:	e001      	b.n	80008c6 <GC9A01_write_command+0x6e>
		if(count_iter >= MAX_ITERATIONS_NUM)
 80008c2:	3b01      	subs	r3, #1
 80008c4:	d002      	beq.n	80008cc <GC9A01_write_command+0x74>
	while(spi_dma_not_ready)
 80008c6:	7821      	ldrb	r1, [r4, #0]
 80008c8:	2900      	cmp	r1, #0
 80008ca:	d1fa      	bne.n	80008c2 <GC9A01_write_command+0x6a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	4807      	ldr	r0, [pc, #28]	@ (80008ec <GC9A01_write_command+0x94>)
 80008d0:	4611      	mov	r1, r2
 80008d2:	f003 fa8b 	bl	8003dec <HAL_GPIO_WritePin>
}
 80008d6:	4628      	mov	r0, r5
 80008d8:	b002      	add	sp, #8
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	6033      	str	r3, [r6, #0]
			return -1;
 80008de:	f04f 35ff 	mov.w	r5, #4294967295
 80008e2:	e7ec      	b.n	80008be <GC9A01_write_command+0x66>
 80008e4:	000f4240 	.word	0x000f4240
 80008e8:	24000088 	.word	0x24000088
 80008ec:	58020400 	.word	0x58020400
 80008f0:	24000084 	.word	0x24000084
 80008f4:	000f423f 	.word	0x000f423f
 80008f8:	24000218 	.word	0x24000218

080008fc <GC9A01_write_data>:
{
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <GC9A01_write_data+0x88>)
 8000900:	4605      	mov	r5, r0
 8000902:	4c21      	ldr	r4, [pc, #132]	@ (8000988 <GC9A01_write_data+0x8c>)
 8000904:	460e      	mov	r6, r1
 8000906:	e001      	b.n	800090c <GC9A01_write_data+0x10>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000908:	3b01      	subs	r3, #1
 800090a:	d002      	beq.n	8000912 <GC9A01_write_data+0x16>
	while(spi_dma_not_ready)
 800090c:	7822      	ldrb	r2, [r4, #0]
 800090e:	2a00      	cmp	r2, #0
 8000910:	d1fa      	bne.n	8000908 <GC9A01_write_data+0xc>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2102      	movs	r1, #2
 8000916:	481d      	ldr	r0, [pc, #116]	@ (800098c <GC9A01_write_data+0x90>)
 8000918:	f003 fa68 	bl	8003dec <HAL_GPIO_WritePin>
}
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <GC9A01_write_data+0x88>)
 800091e:	e001      	b.n	8000924 <GC9A01_write_data+0x28>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000920:	3b01      	subs	r3, #1
 8000922:	d002      	beq.n	800092a <GC9A01_write_data+0x2e>
	while(spi_dma_not_ready)
 8000924:	7822      	ldrb	r2, [r4, #0]
 8000926:	2a00      	cmp	r2, #0
 8000928:	d1fa      	bne.n	8000920 <GC9A01_write_data+0x24>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800092a:	4f19      	ldr	r7, [pc, #100]	@ (8000990 <GC9A01_write_data+0x94>)
 800092c:	2101      	movs	r1, #1
 800092e:	2200      	movs	r2, #0
 8000930:	4816      	ldr	r0, [pc, #88]	@ (800098c <GC9A01_write_data+0x90>)
 8000932:	f003 fa5b 	bl	8003dec <HAL_GPIO_WritePin>
int GC9A01_spi_tx(uint8_t *data, uint16_t size, uint8_t join)
 8000936:	683b      	ldr	r3, [r7, #0]
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000938:	4916      	ldr	r1, [pc, #88]	@ (8000994 <GC9A01_write_data+0x98>)
 800093a:	e001      	b.n	8000940 <GC9A01_write_data+0x44>
 800093c:	428b      	cmp	r3, r1
 800093e:	d81c      	bhi.n	800097a <GC9A01_write_data+0x7e>
	while(spi_dma_not_ready && !join)
 8000940:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 8000942:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8000944:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 8000948:	2a00      	cmp	r2, #0
 800094a:	d1f7      	bne.n	800093c <GC9A01_write_data+0x40>
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800094c:	4629      	mov	r1, r5
	spi_dma_not_ready = 1;
 800094e:	2501      	movs	r5, #1
	count_iter = 0;
 8000950:	6038      	str	r0, [r7, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000952:	b2b2      	uxth	r2, r6
 8000954:	4810      	ldr	r0, [pc, #64]	@ (8000998 <GC9A01_write_data+0x9c>)
	spi_dma_not_ready = 1;
 8000956:	7025      	strb	r5, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000958:	f008 fc6e 	bl	8009238 <HAL_SPI_Transmit_DMA>
	if(ret != HAL_OK)
 800095c:	b970      	cbnz	r0, 800097c <GC9A01_write_data+0x80>
	return 1;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <GC9A01_write_data+0x88>)
 8000960:	e001      	b.n	8000966 <GC9A01_write_data+0x6a>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000962:	3b01      	subs	r3, #1
 8000964:	d002      	beq.n	800096c <GC9A01_write_data+0x70>
	while(spi_dma_not_ready)
 8000966:	7822      	ldrb	r2, [r4, #0]
 8000968:	2a00      	cmp	r2, #0
 800096a:	d1fa      	bne.n	8000962 <GC9A01_write_data+0x66>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800096c:	2201      	movs	r2, #1
 800096e:	4807      	ldr	r0, [pc, #28]	@ (800098c <GC9A01_write_data+0x90>)
 8000970:	4611      	mov	r1, r2
 8000972:	f003 fa3b 	bl	8003dec <HAL_GPIO_WritePin>
}
 8000976:	4628      	mov	r0, r5
 8000978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097a:	603b      	str	r3, [r7, #0]
			return -1;
 800097c:	f04f 35ff 	mov.w	r5, #4294967295
 8000980:	e7ed      	b.n	800095e <GC9A01_write_data+0x62>
 8000982:	bf00      	nop
 8000984:	000f4240 	.word	0x000f4240
 8000988:	24000088 	.word	0x24000088
 800098c:	58020400 	.word	0x58020400
 8000990:	24000084 	.word	0x24000084
 8000994:	000f423f 	.word	0x000f423f
 8000998:	24000218 	.word	0x24000218

0800099c <GC9A01_Init>:
void GC9A01_Init(void) {
 800099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <GC9A01_Init+0x48>)
 80009a2:	b083      	sub	sp, #12
 80009a4:	4c10      	ldr	r4, [pc, #64]	@ (80009e8 <GC9A01_Init+0x4c>)
 80009a6:	e001      	b.n	80009ac <GC9A01_Init+0x10>
		if(count_iter >= MAX_ITERATIONS_NUM)
 80009a8:	3b01      	subs	r3, #1
 80009aa:	d002      	beq.n	80009b2 <GC9A01_Init+0x16>
	while(spi_dma_not_ready)
 80009ac:	7822      	ldrb	r2, [r4, #0]
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d1fa      	bne.n	80009a8 <GC9A01_Init+0xc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	480d      	ldr	r0, [pc, #52]	@ (80009ec <GC9A01_Init+0x50>)
 80009b6:	4611      	mov	r1, r2
 80009b8:	f003 fa18 	bl	8003dec <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80009bc:	2005      	movs	r0, #5
 80009be:	f001 fb4f 	bl	8002060 <HAL_Delay>
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <GC9A01_Init+0x48>)
 80009c4:	e001      	b.n	80009ca <GC9A01_Init+0x2e>
		if(count_iter >= MAX_ITERATIONS_NUM)
 80009c6:	3b01      	subs	r3, #1
 80009c8:	d002      	beq.n	80009d0 <GC9A01_Init+0x34>
	while(spi_dma_not_ready)
 80009ca:	7822      	ldrb	r2, [r4, #0]
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d1fa      	bne.n	80009c6 <GC9A01_Init+0x2a>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <GC9A01_Init+0x50>)
 80009d6:	f003 fa09 	bl	8003dec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f001 fb40 	bl	8002060 <HAL_Delay>
 80009e0:	4b00      	ldr	r3, [pc, #0]	@ (80009e4 <GC9A01_Init+0x48>)
 80009e2:	e007      	b.n	80009f4 <GC9A01_Init+0x58>
 80009e4:	000f4240 	.word	0x000f4240
 80009e8:	24000088 	.word	0x24000088
 80009ec:	58020400 	.word	0x58020400
		if(count_iter >= MAX_ITERATIONS_NUM)
 80009f0:	3b01      	subs	r3, #1
 80009f2:	d002      	beq.n	80009fa <GC9A01_Init+0x5e>
	while(spi_dma_not_ready)
 80009f4:	7822      	ldrb	r2, [r4, #0]
 80009f6:	2a00      	cmp	r2, #0
 80009f8:	d1fa      	bne.n	80009f0 <GC9A01_Init+0x54>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2104      	movs	r1, #4
 80009fe:	48fe      	ldr	r0, [pc, #1016]	@ (8000df8 <GC9A01_Init+0x45c>)
 8000a00:	f04f 0414 	mov.w	r4, #20
 8000a04:	f003 f9f2 	bl	8003dec <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000a08:	2078      	movs	r0, #120	@ 0x78
 8000a0a:	f001 fb29 	bl	8002060 <HAL_Delay>
    GC9A01_write_command(0xEF);
 8000a0e:	20ef      	movs	r0, #239	@ 0xef
 8000a10:	f7ff ff22 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000a14:	20eb      	movs	r0, #235	@ 0xeb
 8000a16:	f7ff ff1f 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000a1a:	f10d 0007 	add.w	r0, sp, #7
 8000a1e:	f88d 4007 	strb.w	r4, [sp, #7]
 8000a22:	f7ff fe99 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xFE);
 8000a26:	20fe      	movs	r0, #254	@ 0xfe
 8000a28:	25ff      	movs	r5, #255	@ 0xff
 8000a2a:	f7ff ff15 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000a2e:	20ef      	movs	r0, #239	@ 0xef
 8000a30:	f7ff ff12 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000a34:	20eb      	movs	r0, #235	@ 0xeb
 8000a36:	f7ff ff0f 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000a3a:	f10d 0007 	add.w	r0, sp, #7
 8000a3e:	f88d 4007 	strb.w	r4, [sp, #7]
 8000a42:	f7ff fe89 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x84);
 8000a46:	2084      	movs	r0, #132	@ 0x84
 8000a48:	f04f 0821 	mov.w	r8, #33	@ 0x21
 8000a4c:	f7ff ff04 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000a50:	2340      	movs	r3, #64	@ 0x40
    return GC9A01_write_data(&val, sizeof(val));
 8000a52:	f10d 0007 	add.w	r0, sp, #7
 8000a56:	2400      	movs	r4, #0
 8000a58:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a5c:	f7ff fe7c 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x85);
 8000a60:	2085      	movs	r0, #133	@ 0x85
 8000a62:	f04f 0b01 	mov.w	fp, #1
 8000a66:	f7ff fef7 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000a6a:	f10d 0007 	add.w	r0, sp, #7
 8000a6e:	f88d 5007 	strb.w	r5, [sp, #7]
 8000a72:	f7ff fe71 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x86);
 8000a76:	2086      	movs	r0, #134	@ 0x86
 8000a78:	2718      	movs	r7, #24
 8000a7a:	f7ff feed 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000a7e:	f10d 0007 	add.w	r0, sp, #7
 8000a82:	f88d 5007 	strb.w	r5, [sp, #7]
 8000a86:	f7ff fe67 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x87);
 8000a8a:	2087      	movs	r0, #135	@ 0x87
 8000a8c:	2608      	movs	r6, #8
 8000a8e:	f7ff fee3 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000a92:	f10d 0007 	add.w	r0, sp, #7
 8000a96:	f88d 5007 	strb.w	r5, [sp, #7]
 8000a9a:	f7ff fe5d 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x88);
 8000a9e:	2088      	movs	r0, #136	@ 0x88
 8000aa0:	f04f 0910 	mov.w	r9, #16
 8000aa4:	f7ff fed8 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000aa8:	230a      	movs	r3, #10
    return GC9A01_write_data(&val, sizeof(val));
 8000aaa:	f10d 0007 	add.w	r0, sp, #7
 8000aae:	f04f 0a45 	mov.w	sl, #69	@ 0x45
 8000ab2:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ab6:	f7ff fe4f 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x89);
 8000aba:	2089      	movs	r0, #137	@ 0x89
 8000abc:	f7ff fecc 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ac0:	f10d 0007 	add.w	r0, sp, #7
 8000ac4:	f88d 8007 	strb.w	r8, [sp, #7]
 8000ac8:	f7ff fe46 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8A);
 8000acc:	208a      	movs	r0, #138	@ 0x8a
 8000ace:	f7ff fec3 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ad2:	f10d 0007 	add.w	r0, sp, #7
 8000ad6:	f88d 4007 	strb.w	r4, [sp, #7]
 8000ada:	f7ff fe3d 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8B);
 8000ade:	208b      	movs	r0, #139	@ 0x8b
 8000ae0:	f7ff feba 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000ae4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
    return GC9A01_write_data(&val, sizeof(val));
 8000ae8:	f10d 0007 	add.w	r0, sp, #7
 8000aec:	f88d 3007 	strb.w	r3, [sp, #7]
 8000af0:	f7ff fe32 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8C);
 8000af4:	208c      	movs	r0, #140	@ 0x8c
 8000af6:	f7ff feaf 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000afa:	f10d 0007 	add.w	r0, sp, #7
 8000afe:	f88d b007 	strb.w	fp, [sp, #7]
 8000b02:	f7ff fe29 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8D);
 8000b06:	208d      	movs	r0, #141	@ 0x8d
 8000b08:	f7ff fea6 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000b0c:	f10d 0007 	add.w	r0, sp, #7
 8000b10:	f88d b007 	strb.w	fp, [sp, #7]
 8000b14:	f7ff fe20 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8E);
 8000b18:	208e      	movs	r0, #142	@ 0x8e
 8000b1a:	f7ff fe9d 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000b1e:	f10d 0007 	add.w	r0, sp, #7
 8000b22:	f88d 5007 	strb.w	r5, [sp, #7]
 8000b26:	f7ff fe17 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8F);
 8000b2a:	208f      	movs	r0, #143	@ 0x8f
 8000b2c:	f7ff fe94 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000b30:	f10d 0007 	add.w	r0, sp, #7
 8000b34:	f88d 5007 	strb.w	r5, [sp, #7]
 8000b38:	f7ff fe0e 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xB6);
 8000b3c:	20b6      	movs	r0, #182	@ 0xb6
 8000b3e:	f7ff fe8b 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000b42:	f10d 0007 	add.w	r0, sp, #7
 8000b46:	f88d 4007 	strb.w	r4, [sp, #7]
 8000b4a:	f7ff fe05 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000b4e:	f10d 0007 	add.w	r0, sp, #7
 8000b52:	f88d 4007 	strb.w	r4, [sp, #7]
 8000b56:	f7ff fdff 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x36);
 8000b5a:	2036      	movs	r0, #54	@ 0x36
 8000b5c:	f7ff fe7c 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000b60:	f10d 0007 	add.w	r0, sp, #7
 8000b64:	f88d 7007 	strb.w	r7, [sp, #7]
 8000b68:	f7ff fdf6 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(COLOR_MODE);
 8000b6c:	203a      	movs	r0, #58	@ 0x3a
 8000b6e:	f7ff fe73 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000b72:	2305      	movs	r3, #5
    return GC9A01_write_data(&val, sizeof(val));
 8000b74:	f10d 0007 	add.w	r0, sp, #7
 8000b78:	f88d 3007 	strb.w	r3, [sp, #7]
 8000b7c:	f7ff fdec 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x90);
 8000b80:	2090      	movs	r0, #144	@ 0x90
 8000b82:	f7ff fe69 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000b86:	f10d 0007 	add.w	r0, sp, #7
 8000b8a:	f88d 6007 	strb.w	r6, [sp, #7]
 8000b8e:	f7ff fde3 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000b92:	f10d 0007 	add.w	r0, sp, #7
 8000b96:	f88d 6007 	strb.w	r6, [sp, #7]
 8000b9a:	f7ff fddd 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000b9e:	f10d 0007 	add.w	r0, sp, #7
 8000ba2:	f88d 6007 	strb.w	r6, [sp, #7]
 8000ba6:	f7ff fdd7 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000baa:	f10d 0007 	add.w	r0, sp, #7
 8000bae:	f88d 6007 	strb.w	r6, [sp, #7]
 8000bb2:	f7ff fdd1 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBD);
 8000bb6:	20bd      	movs	r0, #189	@ 0xbd
 8000bb8:	f7ff fe4e 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000bbc:	2306      	movs	r3, #6
    return GC9A01_write_data(&val, sizeof(val));
 8000bbe:	f10d 0007 	add.w	r0, sp, #7
 8000bc2:	f88d 3007 	strb.w	r3, [sp, #7]
 8000bc6:	f7ff fdc7 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBC);
 8000bca:	20bc      	movs	r0, #188	@ 0xbc
 8000bcc:	f7ff fe44 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000bd0:	f10d 0007 	add.w	r0, sp, #7
 8000bd4:	f88d 4007 	strb.w	r4, [sp, #7]
 8000bd8:	f7ff fdbe 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xFF);
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f04f 0513 	mov.w	r5, #19
 8000be2:	f7ff fe39 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000be6:	2360      	movs	r3, #96	@ 0x60
    return GC9A01_write_data(&val, sizeof(val));
 8000be8:	f10d 0007 	add.w	r0, sp, #7
 8000bec:	f88d 3007 	strb.w	r3, [sp, #7]
 8000bf0:	f7ff fdb2 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000bf4:	f10d 0007 	add.w	r0, sp, #7
 8000bf8:	f88d b007 	strb.w	fp, [sp, #7]
 8000bfc:	f7ff fdac 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000c00:	f10d 0107 	add.w	r1, sp, #7
 8000c04:	f04f 0204 	mov.w	r2, #4
 8000c08:	4608      	mov	r0, r1
 8000c0a:	f88d 2007 	strb.w	r2, [sp, #7]
 8000c0e:	f7ff fda3 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC3);
 8000c12:	20c3      	movs	r0, #195	@ 0xc3
 8000c14:	f7ff fe20 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000c18:	f10d 0107 	add.w	r1, sp, #7
 8000c1c:	f88d 5007 	strb.w	r5, [sp, #7]
 8000c20:	4608      	mov	r0, r1
 8000c22:	f7ff fd99 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC4);
 8000c26:	20c4      	movs	r0, #196	@ 0xc4
 8000c28:	f7ff fe16 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000c2c:	f10d 0107 	add.w	r1, sp, #7
 8000c30:	f88d 5007 	strb.w	r5, [sp, #7]
 8000c34:	2570      	movs	r5, #112	@ 0x70
 8000c36:	4608      	mov	r0, r1
 8000c38:	f7ff fd8e 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC9);
 8000c3c:	20c9      	movs	r0, #201	@ 0xc9
 8000c3e:	f7ff fe0b 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000c42:	f10d 0107 	add.w	r1, sp, #7
 8000c46:	2322      	movs	r3, #34	@ 0x22
 8000c48:	4608      	mov	r0, r1
 8000c4a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c4e:	f7ff fd83 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBE);
 8000c52:	20be      	movs	r0, #190	@ 0xbe
 8000c54:	f7ff fe00 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000c58:	f04f 0111 	mov.w	r1, #17
    return GC9A01_write_data(&val, sizeof(val));
 8000c5c:	f10d 0007 	add.w	r0, sp, #7
 8000c60:	f88d 1007 	strb.w	r1, [sp, #7]
 8000c64:	f7ff fd78 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xE1);
 8000c68:	20e1      	movs	r0, #225	@ 0xe1
 8000c6a:	f7ff fdf5 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000c6e:	f10d 0007 	add.w	r0, sp, #7
 8000c72:	f88d 9007 	strb.w	r9, [sp, #7]
 8000c76:	f7ff fd6f 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0E);
 8000c7a:	f04f 0c0e 	mov.w	ip, #14
    return GC9A01_write_data(&val, sizeof(val));
 8000c7e:	f10d 0007 	add.w	r0, sp, #7
 8000c82:	f04f 0937 	mov.w	r9, #55	@ 0x37
 8000c86:	f88d c007 	strb.w	ip, [sp, #7]
 8000c8a:	f7ff fd65 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xDF);
 8000c8e:	20df      	movs	r0, #223	@ 0xdf
 8000c90:	f7ff fde2 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000c94:	f10d 0007 	add.w	r0, sp, #7
 8000c98:	f88d 8007 	strb.w	r8, [sp, #7]
 8000c9c:	f7ff fd5c 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0c);
 8000ca0:	230c      	movs	r3, #12
    return GC9A01_write_data(&val, sizeof(val));
 8000ca2:	f10d 0007 	add.w	r0, sp, #7
 8000ca6:	f04f 086f 	mov.w	r8, #111	@ 0x6f
 8000caa:	f88d 3007 	strb.w	r3, [sp, #7]
 8000cae:	f7ff fd53 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x02);
 8000cb2:	2302      	movs	r3, #2
    return GC9A01_write_data(&val, sizeof(val));
 8000cb4:	f10d 0007 	add.w	r0, sp, #7
 8000cb8:	f88d 3007 	strb.w	r3, [sp, #7]
 8000cbc:	f7ff fd4c 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF0);
 8000cc0:	20f0      	movs	r0, #240	@ 0xf0
 8000cc2:	f7ff fdc9 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000cc6:	f10d 0007 	add.w	r0, sp, #7
 8000cca:	f88d a007 	strb.w	sl, [sp, #7]
 8000cce:	f7ff fd43 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 8000cd2:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 8000cd6:	f10d 0007 	add.w	r0, sp, #7
 8000cda:	f04f 0a36 	mov.w	sl, #54	@ 0x36
 8000cde:	f88d 1007 	strb.w	r1, [sp, #7]
 8000ce2:	f7ff fd39 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000ce6:	f10d 0007 	add.w	r0, sp, #7
 8000cea:	f88d 6007 	strb.w	r6, [sp, #7]
 8000cee:	f7ff fd33 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000cf2:	f10d 0007 	add.w	r0, sp, #7
 8000cf6:	f88d 6007 	strb.w	r6, [sp, #7]
 8000cfa:	f7ff fd2d 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000cfe:	2126      	movs	r1, #38	@ 0x26
 8000d00:	f10d 0007 	add.w	r0, sp, #7
 8000d04:	f88d 1007 	strb.w	r1, [sp, #7]
 8000d08:	f7ff fd26 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000d0c:	222a      	movs	r2, #42	@ 0x2a
 8000d0e:	f10d 0007 	add.w	r0, sp, #7
 8000d12:	f88d 2007 	strb.w	r2, [sp, #7]
 8000d16:	f7ff fd1f 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF1);
 8000d1a:	20f1      	movs	r0, #241	@ 0xf1
 8000d1c:	f7ff fd9c 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000d20:	f04f 0e43 	mov.w	lr, #67	@ 0x43
    return GC9A01_write_data(&val, sizeof(val));
 8000d24:	f10d 0007 	add.w	r0, sp, #7
 8000d28:	f88d e007 	strb.w	lr, [sp, #7]
 8000d2c:	f7ff fd14 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000d30:	f10d 0007 	add.w	r0, sp, #7
 8000d34:	f88d 5007 	strb.w	r5, [sp, #7]
 8000d38:	f7ff fd0e 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000d3c:	2372      	movs	r3, #114	@ 0x72
 8000d3e:	f10d 0007 	add.w	r0, sp, #7
 8000d42:	f88d 3007 	strb.w	r3, [sp, #7]
 8000d46:	f7ff fd07 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000d4a:	f10d 0007 	add.w	r0, sp, #7
 8000d4e:	f88d a007 	strb.w	sl, [sp, #7]
 8000d52:	f7ff fd01 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000d56:	f10d 0007 	add.w	r0, sp, #7
 8000d5a:	f88d 9007 	strb.w	r9, [sp, #7]
 8000d5e:	f7ff fcfb 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000d62:	f10d 0007 	add.w	r0, sp, #7
 8000d66:	f88d 8007 	strb.w	r8, [sp, #7]
 8000d6a:	f7ff fcf5 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF2);
 8000d6e:	20f2      	movs	r0, #242	@ 0xf2
 8000d70:	f7ff fd72 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000d74:	f04f 0345 	mov.w	r3, #69	@ 0x45
    return GC9A01_write_data(&val, sizeof(val));
 8000d78:	f10d 0007 	add.w	r0, sp, #7
 8000d7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000d80:	f7ff fcea 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 8000d84:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 8000d88:	f10d 0007 	add.w	r0, sp, #7
 8000d8c:	f88d 1007 	strb.w	r1, [sp, #7]
 8000d90:	f7ff fce2 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000d94:	f10d 0007 	add.w	r0, sp, #7
 8000d98:	f88d 6007 	strb.w	r6, [sp, #7]
 8000d9c:	f7ff fcdc 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000da0:	f10d 0007 	add.w	r0, sp, #7
 8000da4:	f88d 6007 	strb.w	r6, [sp, #7]
 8000da8:	f7ff fcd6 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x26);
 8000dac:	2126      	movs	r1, #38	@ 0x26
    return GC9A01_write_data(&val, sizeof(val));
 8000dae:	f10d 0007 	add.w	r0, sp, #7
 8000db2:	f88d 1007 	strb.w	r1, [sp, #7]
 8000db6:	f7ff fccf 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x2A);
 8000dba:	222a      	movs	r2, #42	@ 0x2a
    return GC9A01_write_data(&val, sizeof(val));
 8000dbc:	f10d 0007 	add.w	r0, sp, #7
 8000dc0:	f88d 2007 	strb.w	r2, [sp, #7]
 8000dc4:	f7ff fcc8 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF3);
 8000dc8:	20f3      	movs	r0, #243	@ 0xf3
 8000dca:	f7ff fd45 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000dce:	f04f 0e43 	mov.w	lr, #67	@ 0x43
    return GC9A01_write_data(&val, sizeof(val));
 8000dd2:	f10d 0007 	add.w	r0, sp, #7
 8000dd6:	f88d e007 	strb.w	lr, [sp, #7]
 8000dda:	f7ff fcbd 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000dde:	f10d 0007 	add.w	r0, sp, #7
 8000de2:	f88d 5007 	strb.w	r5, [sp, #7]
 8000de6:	f7ff fcb7 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x72);
 8000dea:	2372      	movs	r3, #114	@ 0x72
    return GC9A01_write_data(&val, sizeof(val));
 8000dec:	f10d 0007 	add.w	r0, sp, #7
 8000df0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000df4:	e002      	b.n	8000dfc <GC9A01_Init+0x460>
 8000df6:	bf00      	nop
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	f7ff fcac 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000e00:	f10d 0007 	add.w	r0, sp, #7
 8000e04:	f88d a007 	strb.w	sl, [sp, #7]
 8000e08:	f7ff fca6 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000e0c:	f10d 0007 	add.w	r0, sp, #7
 8000e10:	f88d 9007 	strb.w	r9, [sp, #7]
 8000e14:	f7ff fca0 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000e18:	f10d 0007 	add.w	r0, sp, #7
 8000e1c:	f88d 8007 	strb.w	r8, [sp, #7]
 8000e20:	f7ff fc9a 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xED);
 8000e24:	20ed      	movs	r0, #237	@ 0xed
 8000e26:	f7ff fd17 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000e2a:	231b      	movs	r3, #27
    return GC9A01_write_data(&val, sizeof(val));
 8000e2c:	f10d 0007 	add.w	r0, sp, #7
 8000e30:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8000e34:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e38:	f7ff fc8e 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0B);
 8000e3c:	230b      	movs	r3, #11
    return GC9A01_write_data(&val, sizeof(val));
 8000e3e:	f10d 0007 	add.w	r0, sp, #7
 8000e42:	f04f 0807 	mov.w	r8, #7
 8000e46:	f04f 0a0f 	mov.w	sl, #15
 8000e4a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e4e:	f7ff fc83 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xAE);
 8000e52:	20ae      	movs	r0, #174	@ 0xae
 8000e54:	f7ff fd00 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000e58:	2377      	movs	r3, #119	@ 0x77
    return GC9A01_write_data(&val, sizeof(val));
 8000e5a:	f10d 0007 	add.w	r0, sp, #7
 8000e5e:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e62:	f7ff fc79 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xCD);
 8000e66:	20cd      	movs	r0, #205	@ 0xcd
 8000e68:	f7ff fcf6 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e6c:	f10d 0007 	add.w	r0, sp, #7
 8000e70:	f88d 9007 	strb.w	r9, [sp, #7]
 8000e74:	f7ff fc70 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x70);
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f7ff fced 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e7e:	eb0d 0008 	add.w	r0, sp, r8
 8000e82:	f88d 8007 	strb.w	r8, [sp, #7]
 8000e86:	f7ff fc67 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000e8a:	eb0d 0008 	add.w	r0, sp, r8
 8000e8e:	f88d 8007 	strb.w	r8, [sp, #7]
 8000e92:	f7ff fc61 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x04);
 8000e96:	f04f 0004 	mov.w	r0, #4
 8000e9a:	f88d 0007 	strb.w	r0, [sp, #7]
    return GC9A01_write_data(&val, sizeof(val));
 8000e9e:	eb0d 0008 	add.w	r0, sp, r8
 8000ea2:	f7ff fc59 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0E);
 8000ea6:	f04f 0c0e 	mov.w	ip, #14
    return GC9A01_write_data(&val, sizeof(val));
 8000eaa:	eb0d 0008 	add.w	r0, sp, r8
 8000eae:	f88d c007 	strb.w	ip, [sp, #7]
 8000eb2:	f7ff fc51 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000eb6:	eb0d 0008 	add.w	r0, sp, r8
 8000eba:	f88d a007 	strb.w	sl, [sp, #7]
 8000ebe:	f7ff fc4b 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 8000ec2:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 8000ec6:	eb0d 0008 	add.w	r0, sp, r8
 8000eca:	f88d 1007 	strb.w	r1, [sp, #7]
 8000ece:	f7ff fc43 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000ed2:	eb0d 0008 	add.w	r0, sp, r8
 8000ed6:	f88d 8007 	strb.w	r8, [sp, #7]
 8000eda:	f7ff fc3d 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000ede:	eb0d 0008 	add.w	r0, sp, r8
 8000ee2:	f88d 6007 	strb.w	r6, [sp, #7]
 8000ee6:	f7ff fc37 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x03);
 8000eea:	2303      	movs	r3, #3
    return GC9A01_write_data(&val, sizeof(val));
 8000eec:	eb0d 0008 	add.w	r0, sp, r8
 8000ef0:	2671      	movs	r6, #113	@ 0x71
 8000ef2:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ef6:	f7ff fc2f 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xE8);
 8000efa:	20e8      	movs	r0, #232	@ 0xe8
 8000efc:	f7ff fcac 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000f00:	2334      	movs	r3, #52	@ 0x34
    return GC9A01_write_data(&val, sizeof(val));
 8000f02:	eb0d 0008 	add.w	r0, sp, r8
 8000f06:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f0a:	f7ff fc25 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x62);
 8000f0e:	2062      	movs	r0, #98	@ 0x62
 8000f10:	f7ff fca2 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f14:	eb0d 0008 	add.w	r0, sp, r8
 8000f18:	f88d 7007 	strb.w	r7, [sp, #7]
 8000f1c:	f7ff fc1c 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0D);
 8000f20:	230d      	movs	r3, #13
    return GC9A01_write_data(&val, sizeof(val));
 8000f22:	eb0d 0008 	add.w	r0, sp, r8
 8000f26:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f2a:	f7ff fc15 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000f2e:	eb0d 0008 	add.w	r0, sp, r8
 8000f32:	f88d 6007 	strb.w	r6, [sp, #7]
 8000f36:	f7ff fc0f 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xED);
 8000f3a:	23ed      	movs	r3, #237	@ 0xed
    return GC9A01_write_data(&val, sizeof(val));
 8000f3c:	eb0d 0008 	add.w	r0, sp, r8
 8000f40:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f44:	f7ff fc08 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000f48:	eb0d 0008 	add.w	r0, sp, r8
 8000f4c:	f88d 5007 	strb.w	r5, [sp, #7]
 8000f50:	f7ff fc02 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000f54:	eb0d 0008 	add.w	r0, sp, r8
 8000f58:	f88d 5007 	strb.w	r5, [sp, #7]
 8000f5c:	f7ff fbfc 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000f60:	eb0d 0008 	add.w	r0, sp, r8
 8000f64:	f88d 7007 	strb.w	r7, [sp, #7]
 8000f68:	f7ff fbf6 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000f6c:	eb0d 0008 	add.w	r0, sp, r8
 8000f70:	f88d a007 	strb.w	sl, [sp, #7]
 8000f74:	f7ff fbf0 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000f78:	eb0d 0008 	add.w	r0, sp, r8
 8000f7c:	f88d 6007 	strb.w	r6, [sp, #7]
 8000f80:	f7ff fbea 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xEF);
 8000f84:	23ef      	movs	r3, #239	@ 0xef
    return GC9A01_write_data(&val, sizeof(val));
 8000f86:	eb0d 0008 	add.w	r0, sp, r8
 8000f8a:	f04f 0a45 	mov.w	sl, #69	@ 0x45
 8000f8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f92:	f7ff fbe1 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000f96:	eb0d 0008 	add.w	r0, sp, r8
 8000f9a:	f88d 5007 	strb.w	r5, [sp, #7]
 8000f9e:	f7ff fbdb 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000fa2:	eb0d 0008 	add.w	r0, sp, r8
 8000fa6:	f88d 5007 	strb.w	r5, [sp, #7]
 8000faa:	f7ff fbd5 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x63);
 8000fae:	4648      	mov	r0, r9
 8000fb0:	f04f 09f1 	mov.w	r9, #241	@ 0xf1
 8000fb4:	f7ff fc50 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000fb8:	eb0d 0008 	add.w	r0, sp, r8
 8000fbc:	f88d 7007 	strb.w	r7, [sp, #7]
 8000fc0:	f7ff fbca 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x11);
 8000fc4:	f04f 0111 	mov.w	r1, #17
    return GC9A01_write_data(&val, sizeof(val));
 8000fc8:	eb0d 0008 	add.w	r0, sp, r8
 8000fcc:	f88d 1007 	strb.w	r1, [sp, #7]
 8000fd0:	f7ff fbc2 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000fd4:	eb0d 0008 	add.w	r0, sp, r8
 8000fd8:	f88d 6007 	strb.w	r6, [sp, #7]
 8000fdc:	f7ff fbbc 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000fe0:	eb0d 0008 	add.w	r0, sp, r8
 8000fe4:	f88d 9007 	strb.w	r9, [sp, #7]
 8000fe8:	f7ff fbb6 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000fec:	eb0d 0008 	add.w	r0, sp, r8
 8000ff0:	f88d 5007 	strb.w	r5, [sp, #7]
 8000ff4:	f7ff fbb0 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8000ff8:	eb0d 0008 	add.w	r0, sp, r8
 8000ffc:	f88d 5007 	strb.w	r5, [sp, #7]
 8001000:	f7ff fbaa 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001004:	eb0d 0008 	add.w	r0, sp, r8
 8001008:	f88d 7007 	strb.w	r7, [sp, #7]
 800100c:	f7ff fba4 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x13);
 8001010:	f04f 0213 	mov.w	r2, #19
    return GC9A01_write_data(&val, sizeof(val));
 8001014:	eb0d 0008 	add.w	r0, sp, r8
 8001018:	2767      	movs	r7, #103	@ 0x67
 800101a:	f88d 2007 	strb.w	r2, [sp, #7]
 800101e:	f7ff fb9b 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001022:	eb0d 0008 	add.w	r0, sp, r8
 8001026:	f88d 6007 	strb.w	r6, [sp, #7]
 800102a:	f7ff fb95 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xF3);
 800102e:	23f3      	movs	r3, #243	@ 0xf3
    return GC9A01_write_data(&val, sizeof(val));
 8001030:	eb0d 0008 	add.w	r0, sp, r8
 8001034:	2629      	movs	r6, #41	@ 0x29
 8001036:	f88d 3007 	strb.w	r3, [sp, #7]
 800103a:	f7ff fb8d 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800103e:	eb0d 0008 	add.w	r0, sp, r8
 8001042:	f88d 5007 	strb.w	r5, [sp, #7]
 8001046:	f7ff fb87 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800104a:	eb0d 0008 	add.w	r0, sp, r8
 800104e:	f88d 5007 	strb.w	r5, [sp, #7]
 8001052:	f7ff fb81 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x64);
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	253c      	movs	r5, #60	@ 0x3c
 800105a:	f7ff fbfd 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800105e:	2328      	movs	r3, #40	@ 0x28
    return GC9A01_write_data(&val, sizeof(val));
 8001060:	eb0d 0008 	add.w	r0, sp, r8
 8001064:	f88d 3007 	strb.w	r3, [sp, #7]
 8001068:	f7ff fb76 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800106c:	eb0d 0008 	add.w	r0, sp, r8
 8001070:	f88d 6007 	strb.w	r6, [sp, #7]
 8001074:	f7ff fb70 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001078:	eb0d 0008 	add.w	r0, sp, r8
 800107c:	f88d 9007 	strb.w	r9, [sp, #7]
 8001080:	f7ff fb6a 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001084:	eb0d 0008 	add.w	r0, sp, r8
 8001088:	f88d b007 	strb.w	fp, [sp, #7]
 800108c:	f7ff fb64 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001090:	eb0d 0008 	add.w	r0, sp, r8
 8001094:	f88d 9007 	strb.w	r9, [sp, #7]
 8001098:	f7ff fb5e 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800109c:	eb0d 0008 	add.w	r0, sp, r8
 80010a0:	f88d 4007 	strb.w	r4, [sp, #7]
 80010a4:	f7ff fb58 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80010a8:	eb0d 0008 	add.w	r0, sp, r8
 80010ac:	f88d 8007 	strb.w	r8, [sp, #7]
 80010b0:	f7ff fb52 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x66);
 80010b4:	2066      	movs	r0, #102	@ 0x66
 80010b6:	f04f 0910 	mov.w	r9, #16
 80010ba:	f7ff fbcd 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 80010be:	eb0d 0008 	add.w	r0, sp, r8
 80010c2:	f88d 5007 	strb.w	r5, [sp, #7]
 80010c6:	f7ff fb47 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80010ca:	eb0d 0008 	add.w	r0, sp, r8
 80010ce:	f88d 4007 	strb.w	r4, [sp, #7]
 80010d2:	f7ff fb41 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xCD);
 80010d6:	23cd      	movs	r3, #205	@ 0xcd
    return GC9A01_write_data(&val, sizeof(val));
 80010d8:	eb0d 0008 	add.w	r0, sp, r8
 80010dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80010e0:	f7ff fb3a 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80010e4:	eb0d 0008 	add.w	r0, sp, r8
 80010e8:	f88d 7007 	strb.w	r7, [sp, #7]
 80010ec:	f7ff fb34 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80010f0:	eb0d 0008 	add.w	r0, sp, r8
 80010f4:	f88d a007 	strb.w	sl, [sp, #7]
 80010f8:	f7ff fb2e 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80010fc:	eb0d 0008 	add.w	r0, sp, r8
 8001100:	f88d a007 	strb.w	sl, [sp, #7]
 8001104:	f7ff fb28 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001108:	eb0d 0008 	add.w	r0, sp, r8
 800110c:	f88d 9007 	strb.w	r9, [sp, #7]
 8001110:	f7ff fb22 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001114:	eb0d 0008 	add.w	r0, sp, r8
 8001118:	f88d 4007 	strb.w	r4, [sp, #7]
 800111c:	f7ff fb1c 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001120:	eb0d 0008 	add.w	r0, sp, r8
 8001124:	f88d 4007 	strb.w	r4, [sp, #7]
 8001128:	f7ff fb16 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800112c:	eb0d 0008 	add.w	r0, sp, r8
 8001130:	f88d 4007 	strb.w	r4, [sp, #7]
 8001134:	f7ff fb10 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x67);
 8001138:	4638      	mov	r0, r7
 800113a:	f7ff fb8d 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 800113e:	eb0d 0008 	add.w	r0, sp, r8
 8001142:	f88d 4007 	strb.w	r4, [sp, #7]
 8001146:	f7ff fb07 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800114a:	eb0d 0008 	add.w	r0, sp, r8
 800114e:	f88d 5007 	strb.w	r5, [sp, #7]
 8001152:	f7ff fb01 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001156:	eb0d 0008 	add.w	r0, sp, r8
 800115a:	f88d 4007 	strb.w	r4, [sp, #7]
 800115e:	f7ff fafb 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001162:	eb0d 0008 	add.w	r0, sp, r8
 8001166:	f88d 4007 	strb.w	r4, [sp, #7]
 800116a:	f7ff faf5 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800116e:	eb0d 0008 	add.w	r0, sp, r8
 8001172:	f88d 4007 	strb.w	r4, [sp, #7]
 8001176:	f7ff faef 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 800117a:	eb0d 0008 	add.w	r0, sp, r8
 800117e:	f88d b007 	strb.w	fp, [sp, #7]
 8001182:	f7ff fae9 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x54);
 8001186:	2354      	movs	r3, #84	@ 0x54
    return GC9A01_write_data(&val, sizeof(val));
 8001188:	eb0d 0008 	add.w	r0, sp, r8
 800118c:	2598      	movs	r5, #152	@ 0x98
 800118e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001192:	f7ff fae1 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001196:	eb0d 0008 	add.w	r0, sp, r8
 800119a:	f88d 9007 	strb.w	r9, [sp, #7]
 800119e:	f7ff fadb 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x32);
 80011a2:	2332      	movs	r3, #50	@ 0x32
    return GC9A01_write_data(&val, sizeof(val));
 80011a4:	eb0d 0008 	add.w	r0, sp, r8
 80011a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80011ac:	f7ff fad4 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80011b0:	eb0d 0008 	add.w	r0, sp, r8
 80011b4:	f88d 5007 	strb.w	r5, [sp, #7]
 80011b8:	f7ff face 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x74);
 80011bc:	2074      	movs	r0, #116	@ 0x74
 80011be:	f7ff fb4b 	bl	8000858 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 80011c2:	eb0d 0008 	add.w	r0, sp, r8
 80011c6:	f88d 9007 	strb.w	r9, [sp, #7]
 80011ca:	f7ff fac5 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x85);
 80011ce:	2385      	movs	r3, #133	@ 0x85
    return GC9A01_write_data(&val, sizeof(val));
 80011d0:	eb0d 0008 	add.w	r0, sp, r8
 80011d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80011d8:	f7ff fabe 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x80);
 80011dc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
    return GC9A01_write_data(&val, sizeof(val));
 80011e0:	eb0d 0008 	add.w	r0, sp, r8
 80011e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80011e8:	f7ff fab6 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80011ec:	eb0d 0008 	add.w	r0, sp, r8
 80011f0:	f88d 4007 	strb.w	r4, [sp, #7]
 80011f4:	f7ff fab0 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 80011f8:	eb0d 0008 	add.w	r0, sp, r8
 80011fc:	f88d 4007 	strb.w	r4, [sp, #7]
 8001200:	f7ff faaa 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x4E);
 8001204:	234e      	movs	r3, #78	@ 0x4e
    return GC9A01_write_data(&val, sizeof(val));
 8001206:	eb0d 0008 	add.w	r0, sp, r8
 800120a:	f88d 3007 	strb.w	r3, [sp, #7]
 800120e:	f7ff faa3 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001212:	eb0d 0008 	add.w	r0, sp, r8
 8001216:	f88d 4007 	strb.w	r4, [sp, #7]
 800121a:	f7ff fa9d 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x98);
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff fb1a 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 8001224:	233e      	movs	r3, #62	@ 0x3e
    return GC9A01_write_data(&val, sizeof(val));
 8001226:	eb0d 0008 	add.w	r0, sp, r8
 800122a:	f88d 3007 	strb.w	r3, [sp, #7]
 800122e:	f7ff fa93 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
 8001232:	eb0d 0008 	add.w	r0, sp, r8
 8001236:	f88d 8007 	strb.w	r8, [sp, #7]
 800123a:	f7ff fa8d 	bl	8000758 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x35);
 800123e:	2035      	movs	r0, #53	@ 0x35
 8001240:	f7ff fb0a 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001244:	2021      	movs	r0, #33	@ 0x21
 8001246:	f7ff fb07 	bl	8000858 <GC9A01_write_command>
    GC9A01_write_command(0x11);
 800124a:	2011      	movs	r0, #17
 800124c:	f7ff fb04 	bl	8000858 <GC9A01_write_command>
    HAL_Delay(120);
 8001250:	2078      	movs	r0, #120	@ 0x78
 8001252:	f000 ff05 	bl	8002060 <HAL_Delay>
    GC9A01_write_command(0x29);
 8001256:	4630      	mov	r0, r6
 8001258:	f7ff fafe 	bl	8000858 <GC9A01_write_command>
    HAL_Delay(20);
 800125c:	2014      	movs	r0, #20
}
 800125e:	b003      	add	sp, #12
 8001260:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(20);
 8001264:	f000 befc 	b.w	8002060 <HAL_Delay>

08001268 <GC9A01_set_frame>:
{
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	466b      	mov	r3, sp
 800126e:	e883 0003 	stmia.w	r3, {r0, r1}
    if(GC9A01_write_command(COL_ADDR_SET) != 1)
 8001272:	202a      	movs	r0, #42	@ 0x2a
 8001274:	f8bd 5000 	ldrh.w	r5, [sp]
 8001278:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800127c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8001280:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 8001284:	f7ff fae8 	bl	8000858 <GC9A01_write_command>
 8001288:	2801      	cmp	r0, #1
 800128a:	d003      	beq.n	8001294 <GC9A01_set_frame+0x2c>
    	return -1;
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001290:	b005      	add	sp, #20
 8001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data[0] = (frame.start.X >> 8) & 0xFF;
 8001294:	0a2a      	lsrs	r2, r5, #8
 8001296:	2300      	movs	r3, #0
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 8001298:	2104      	movs	r1, #4
 800129a:	a803      	add	r0, sp, #12
    data[0] = (frame.start.X >> 8) & 0xFF;
 800129c:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.X >> 8) & 0xFF;
 80012a0:	0a22      	lsrs	r2, r4, #8
    data[0] = (frame.start.X >> 8) & 0xFF;
 80012a2:	f365 230f 	bfi	r3, r5, #8, #8
 80012a6:	f362 4317 	bfi	r3, r2, #16, #8
 80012aa:	f364 631f 	bfi	r3, r4, #24, #8
 80012ae:	9303      	str	r3, [sp, #12]
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 80012b0:	f7ff fb24 	bl	80008fc <GC9A01_write_data>
 80012b4:	2801      	cmp	r0, #1
 80012b6:	d1e9      	bne.n	800128c <GC9A01_set_frame+0x24>
    if(GC9A01_write_command(ROW_ADDR_SET) != 1)
 80012b8:	202b      	movs	r0, #43	@ 0x2b
 80012ba:	f7ff facd 	bl	8000858 <GC9A01_write_command>
 80012be:	2801      	cmp	r0, #1
 80012c0:	d1e4      	bne.n	800128c <GC9A01_set_frame+0x24>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80012c2:	0a3a      	lsrs	r2, r7, #8
 80012c4:	2300      	movs	r3, #0
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 80012c6:	a803      	add	r0, sp, #12
 80012c8:	2104      	movs	r1, #4
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80012ca:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.Y >> 8) & 0xFF;
 80012ce:	0a32      	lsrs	r2, r6, #8
    data[0] = (frame.start.Y >> 8) & 0xFF;
 80012d0:	f367 230f 	bfi	r3, r7, #8, #8
 80012d4:	f362 4317 	bfi	r3, r2, #16, #8
 80012d8:	f366 631f 	bfi	r3, r6, #24, #8
 80012dc:	9303      	str	r3, [sp, #12]
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 80012de:	f7ff fb0d 	bl	80008fc <GC9A01_write_data>
 80012e2:	2801      	cmp	r0, #1
 80012e4:	d1d2      	bne.n	800128c <GC9A01_set_frame+0x24>
 80012e6:	e7d3      	b.n	8001290 <GC9A01_set_frame+0x28>

080012e8 <GC9A01_spi_tx>:
{
 80012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ea:	f8df c050 	ldr.w	ip, [pc, #80]	@ 800133c <GC9A01_spi_tx+0x54>
	while(spi_dma_not_ready && !join)
 80012ee:	fab2 f582 	clz	r5, r2
 80012f2:	4e0f      	ldr	r6, [pc, #60]	@ (8001330 <GC9A01_spi_tx+0x48>)
{
 80012f4:	460a      	mov	r2, r1
 80012f6:	f8dc 3000 	ldr.w	r3, [ip]
	while(spi_dma_not_ready && !join)
 80012fa:	096d      	lsrs	r5, r5, #5
		if(count_iter >= MAX_ITERATIONS_NUM)
 80012fc:	4f0d      	ldr	r7, [pc, #52]	@ (8001334 <GC9A01_spi_tx+0x4c>)
	while(spi_dma_not_ready && !join)
 80012fe:	e002      	b.n	8001306 <GC9A01_spi_tx+0x1e>
 8001300:	b12d      	cbz	r5, 800130e <GC9A01_spi_tx+0x26>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8001302:	42bb      	cmp	r3, r7
 8001304:	d80f      	bhi.n	8001326 <GC9A01_spi_tx+0x3e>
	while(spi_dma_not_ready && !join)
 8001306:	7834      	ldrb	r4, [r6, #0]
		count_iter++;
 8001308:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 800130a:	2c00      	cmp	r4, #0
 800130c:	d1f8      	bne.n	8001300 <GC9A01_spi_tx+0x18>
	count_iter = 0;
 800130e:	2300      	movs	r3, #0
	spi_dma_not_ready = 1;
 8001310:	2401      	movs	r4, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001312:	4601      	mov	r1, r0
 8001314:	4808      	ldr	r0, [pc, #32]	@ (8001338 <GC9A01_spi_tx+0x50>)
	count_iter = 0;
 8001316:	f8cc 3000 	str.w	r3, [ip]
	spi_dma_not_ready = 1;
 800131a:	7034      	strb	r4, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800131c:	f007 ff8c 	bl	8009238 <HAL_SPI_Transmit_DMA>
	if(ret != HAL_OK)
 8001320:	b918      	cbnz	r0, 800132a <GC9A01_spi_tx+0x42>
	return 1;
 8001322:	4620      	mov	r0, r4

}
 8001324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001326:	f8cc 3000 	str.w	r3, [ip]
			return -1;
 800132a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001330:	24000088 	.word	0x24000088
 8001334:	000f423f 	.word	0x000f423f
 8001338:	24000218 	.word	0x24000218
 800133c:	24000084 	.word	0x24000084

08001340 <HAL_JPEG_InfoReadyCallback>:
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8001344:	b410      	push	{r4}
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 8001346:	4c0e      	ldr	r4, [pc, #56]	@ (8001380 <HAL_JPEG_GetDataCallback+0x3c>)
{
 8001348:	468c      	mov	ip, r1
  if( Input_frameIndex < Input_frameSize)
 800134a:	4a0e      	ldr	r2, [pc, #56]	@ (8001384 <HAL_JPEG_GetDataCallback+0x40>)
  Input_frameIndex += NbDecodedData;
 800134c:	6823      	ldr	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 800134e:	6812      	ldr	r2, [r2, #0]
  Input_frameIndex += NbDecodedData;
 8001350:	440b      	add	r3, r1
 8001352:	6023      	str	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 8001354:	4293      	cmp	r3, r2
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8001356:	4c0c      	ldr	r4, [pc, #48]	@ (8001388 <HAL_JPEG_GetDataCallback+0x44>)
 8001358:	6821      	ldr	r1, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 800135a:	d20b      	bcs.n	8001374 <HAL_JPEG_GetDataCallback+0x30>
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800135c:	1ad2      	subs	r2, r2, r3
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800135e:	4461      	add	r1, ip
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8001360:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8001364:	6021      	str	r1, [r4, #0]
  {
    inDataLength = 0; 
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
  
}
 8001366:	f85d 4b04 	ldr.w	r4, [sp], #4
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800136a:	bf28      	it	cs
 800136c:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 8001370:	f003 be20 	b.w	8004fb4 <HAL_JPEG_ConfigInputBuffer>
    inDataLength = 0; 
 8001374:	2200      	movs	r2, #0
}
 8001376:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800137a:	f003 be1b 	b.w	8004fb4 <HAL_JPEG_ConfigInputBuffer>
 800137e:	bf00      	nop
 8001380:	2400008c 	.word	0x2400008c
 8001384:	24000090 	.word	0x24000090
 8001388:	24000094 	.word	0x24000094

0800138c <HAL_JPEG_DataReadyCallback>:
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_JPEG_DataReadyCallback+0x18>)
{
 800138e:	4611      	mov	r1, r2

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8001390:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
{
 8001394:	b410      	push	{r4}
  FrameBufferAddress += OutDataLength;
 8001396:	681c      	ldr	r4, [r3, #0]
 8001398:	4421      	add	r1, r4
}
 800139a:	f85d 4b04 	ldr.w	r4, [sp], #4
  FrameBufferAddress += OutDataLength;
 800139e:	6019      	str	r1, [r3, #0]
  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80013a0:	f003 be0c 	b.w	8004fbc <HAL_JPEG_ConfigOutputBuffer>
 80013a4:	24000098 	.word	0x24000098

080013a8 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
  Jpeg_HWDecodingEnd = 1; 
 80013a8:	4b01      	ldr	r3, [pc, #4]	@ (80013b0 <HAL_JPEG_DecodeCpltCallback+0x8>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
}
 80013ae:	4770      	bx	lr
 80013b0:	2400009c 	.word	0x2400009c

080013b4 <print_log.isra.0>:
 	 return 1;

}


static int print_log(FIL *log_file, TEST_STATUS_t status, char *test_name)
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
{

	 char buff[50];
	 char res[20];
	 unsigned int bw = 0;
 80013b6:	2300      	movs	r3, #0
static int print_log(FIL *log_file, TEST_STATUS_t status, char *test_name)
 80013b8:	b097      	sub	sp, #92	@ 0x5c
 80013ba:	4604      	mov	r4, r0
 80013bc:	4616      	mov	r6, r2
	 unsigned int bw = 0;
 80013be:	9303      	str	r3, [sp, #12]
	 unsigned int btw = 0;

	 if(status == NA)
 80013c0:	b1e9      	cbz	r1, 80013fe <print_log.isra.0+0x4a>

	 }
	 else
	 {

		 snprintf(res, sizeof(res), "%s", ( status == PASSED ) ? "PASSED" : "NOT PASSED");
 80013c2:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <print_log.isra.0+0x6c>)
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <print_log.isra.0+0x70>)
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 80013c8:	ad09      	add	r5, sp, #36	@ 0x24
		 snprintf(res, sizeof(res), "%s", ( status == PASSED ) ? "PASSED" : "NOT PASSED");
 80013ca:	4638      	mov	r0, r7
 80013cc:	2901      	cmp	r1, #1
 80013ce:	bf18      	it	ne
 80013d0:	4613      	movne	r3, r2
 80013d2:	4a15      	ldr	r2, [pc, #84]	@ (8001428 <print_log.isra.0+0x74>)
 80013d4:	2114      	movs	r1, #20
 80013d6:	f00b f999 	bl	800c70c <sniprintf>
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 80013da:	4633      	mov	r3, r6
 80013dc:	4a13      	ldr	r2, [pc, #76]	@ (800142c <print_log.isra.0+0x78>)
 80013de:	2132      	movs	r1, #50	@ 0x32
 80013e0:	4628      	mov	r0, r5
 80013e2:	9700      	str	r7, [sp, #0]
 80013e4:	f00b f992 	bl	800c70c <sniprintf>

	 }

 	 btw = strlen(buff);
 80013e8:	4628      	mov	r0, r5
 80013ea:	f7fe ff81 	bl	80002f0 <strlen>
 	 if(f_write(log_file, buff, btw, &bw) != FR_OK)
 80013ee:	ab03      	add	r3, sp, #12
 	 btw = strlen(buff);
 80013f0:	4602      	mov	r2, r0
 	 if(f_write(log_file, buff, btw, &bw) != FR_OK)
 80013f2:	4629      	mov	r1, r5
 80013f4:	4620      	mov	r0, r4
 80013f6:	f00a ff83 	bl	800c300 <f_write>
 	 if(bw != btw)
 		return -1;

 	 return 1;

}
 80013fa:	b017      	add	sp, #92	@ 0x5c
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		 snprintf(res, sizeof(res), "%s", "NA");
 80013fe:	490c      	ldr	r1, [pc, #48]	@ (8001430 <print_log.isra.0+0x7c>)
 8001400:	aa04      	add	r2, sp, #16
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 8001402:	4633      	mov	r3, r6
		 snprintf(res, sizeof(res), "%s", "NA");
 8001404:	6808      	ldr	r0, [r1, #0]
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 8001406:	2132      	movs	r1, #50	@ 0x32
 8001408:	9200      	str	r2, [sp, #0]
		 snprintf(res, sizeof(res), "%s", "NA");
 800140a:	0c05      	lsrs	r5, r0, #16
 800140c:	f8ad 0010 	strh.w	r0, [sp, #16]
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 8001410:	4a06      	ldr	r2, [pc, #24]	@ (800142c <print_log.isra.0+0x78>)
		 snprintf(res, sizeof(res), "%s", "NA");
 8001412:	f88d 5012 	strb.w	r5, [sp, #18]
		 snprintf(buff, sizeof(buff), "%-20s%20s\n\n", test_name, res);
 8001416:	ad09      	add	r5, sp, #36	@ 0x24
 8001418:	4628      	mov	r0, r5
 800141a:	f00b f977 	bl	800c70c <sniprintf>
 800141e:	e7e3      	b.n	80013e8 <print_log.isra.0+0x34>
 8001420:	0800d08c 	.word	0x0800d08c
 8001424:	0800d090 	.word	0x0800d090
 8001428:	0800d0a8 	.word	0x0800d0a8
 800142c:	0800d09c 	.word	0x0800d09c
 8001430:	0800d098 	.word	0x0800d098

08001434 <SystemClock_Config>:
{
 8001434:	b510      	push	{r4, lr}
 8001436:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001438:	224c      	movs	r2, #76	@ 0x4c
 800143a:	2100      	movs	r1, #0
 800143c:	a80a      	add	r0, sp, #40	@ 0x28
 800143e:	f00b f999 	bl	800c774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001442:	2220      	movs	r2, #32
 8001444:	2100      	movs	r1, #0
 8001446:	a802      	add	r0, sp, #8
 8001448:	f00b f994 	bl	800c774 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <SystemClock_Config+0xb8>)
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001452:	2002      	movs	r0, #2
  RCC->CKGAENR = 0xFFFFFFFF;
 8001454:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001458:	f004 fc3e 	bl	8005cd8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800145c:	4a24      	ldr	r2, [pc, #144]	@ (80014f0 <SystemClock_Config+0xbc>)
 800145e:	2300      	movs	r3, #0
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	6993      	ldr	r3, [r2, #24]
 8001464:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	6993      	ldr	r3, [r2, #24]
 800146c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001474:	6993      	ldr	r3, [r2, #24]
 8001476:	049b      	lsls	r3, r3, #18
 8001478:	d5fc      	bpl.n	8001474 <SystemClock_Config+0x40>
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800147a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147e:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8001480:	2406      	movs	r4, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001482:	910c      	str	r1, [sp, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 8001486:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001488:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800148a:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800148c:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800148e:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001490:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001492:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001494:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001496:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001498:	9219      	str	r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLM = 4;
 800149a:	9415      	str	r4, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800149c:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149e:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 22;
 80014a2:	2216      	movs	r2, #22
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014a4:	e9cd 131a 	strd	r1, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLN = 22;
 80014a8:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	f004 fcab 	bl	8005e04 <HAL_RCC_OscConfig>
 80014ae:	b9a8      	cbnz	r0, 80014dc <SystemClock_Config+0xa8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	213f      	movs	r1, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b2:	2203      	movs	r2, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014b6:	2340      	movs	r3, #64	@ 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014b8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014be:	2108      	movs	r1, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014c4:	e9cd 4104 	strd	r4, r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c8:	2102      	movs	r1, #2
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014ca:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d2:	f005 f809 	bl	80064e8 <HAL_RCC_ClockConfig>
 80014d6:	b920      	cbnz	r0, 80014e2 <SystemClock_Config+0xae>
}
 80014d8:	b01e      	add	sp, #120	@ 0x78
 80014da:	bd10      	pop	{r4, pc}
  while (1)
  {
  }
#else

  HAL_NVIC_SystemReset();
 80014dc:	f000 fe40 	bl	8002160 <HAL_NVIC_SystemReset>

#endif

  /* USER CODE END Error_Handler_Debug */
}
 80014e0:	e7e6      	b.n	80014b0 <SystemClock_Config+0x7c>
  HAL_NVIC_SystemReset();
 80014e2:	f000 fe3d 	bl	8002160 <HAL_NVIC_SystemReset>
}
 80014e6:	b01e      	add	sp, #120	@ 0x78
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	bf00      	nop
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58024800 	.word	0x58024800

080014f4 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014f4:	4acb      	ldr	r2, [pc, #812]	@ (8001824 <main+0x330>)
 80014f6:	6953      	ldr	r3, [r2, #20]
 80014f8:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 8001502:	d111      	bne.n	8001528 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001504:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001508:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800150c:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001510:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001514:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001518:	6953      	ldr	r3, [r2, #20]
 800151a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001520:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001524:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001528:	f000 fd58 	bl	8001fdc <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	2400      	movs	r4, #0
  SystemClock_Config();
 800152e:	f7ff ff81 	bl	8001434 <SystemClock_Config>
  HAL_Delay(500);
 8001532:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001536:	f000 fd93 	bl	8002060 <HAL_Delay>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153a:	4bbb      	ldr	r3, [pc, #748]	@ (8001828 <main+0x334>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	a91e      	add	r1, sp, #120	@ 0x78
 800153e:	48bb      	ldr	r0, [pc, #748]	@ (800182c <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 8001542:	2507      	movs	r5, #7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
 8001548:	e9cd 4421 	strd	r4, r4, [sp, #132]	@ 0x84
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001550:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001554:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001558:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800155c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001560:	9204      	str	r2, [sp, #16]
 8001562:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001568:	f042 0201 	orr.w	r2, r2, #1
 800156c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001570:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001574:	f002 0201 	and.w	r2, r2, #1
 8001578:	9205      	str	r2, [sp, #20]
 800157a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001580:	f042 0202 	orr.w	r2, r2, #2
 8001584:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001588:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800158c:	f002 0202 	and.w	r2, r2, #2
 8001590:	9206      	str	r2, [sp, #24]
 8001592:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001598:	f042 0204 	orr.w	r2, r2, #4
 800159c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80015a0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80015a4:	f002 0204 	and.w	r2, r2, #4
 80015a8:	9207      	str	r2, [sp, #28]
 80015aa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ac:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80015b0:	f042 0208 	orr.w	r2, r2, #8
 80015b4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80015b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	9a08      	ldr	r2, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015c8:	931e      	str	r3, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f002 fac7 	bl	8003b5c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 80015ce:	4622      	mov	r2, r4
 80015d0:	2103      	movs	r1, #3
 80015d2:	4897      	ldr	r0, [pc, #604]	@ (8001830 <main+0x33c>)
 80015d4:	f002 fc0a 	bl	8003dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f240 4104 	movw	r1, #1028	@ 0x404
 80015de:	4894      	ldr	r0, [pc, #592]	@ (8001830 <main+0x33c>)
 80015e0:	f002 fc04 	bl	8003dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2107      	movs	r1, #7
 80015e8:	4892      	ldr	r0, [pc, #584]	@ (8001834 <main+0x340>)
 80015ea:	f002 fbff 	bl	8003dec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80015ee:	f240 4307 	movw	r3, #1031	@ 0x407
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	a91e      	add	r1, sp, #120	@ 0x78
 80015f4:	488e      	ldr	r0, [pc, #568]	@ (8001830 <main+0x33c>)
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80015f6:	931e      	str	r3, [sp, #120]	@ 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	9421      	str	r4, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	e9cd 641f 	strd	r6, r4, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f002 faad 	bl	8003b5c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001602:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	a91e      	add	r1, sp, #120	@ 0x78
 8001608:	488a      	ldr	r0, [pc, #552]	@ (8001834 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	9620      	str	r6, [sp, #128]	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160c:	e9cd 531e 	strd	r5, r3, [sp, #120]	@ 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001610:	f002 faa4 	bl	8003b5c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001614:	4622      	mov	r2, r4
 8001616:	4621      	mov	r1, r4
 8001618:	2006      	movs	r0, #6
 800161a:	f000 fd45 	bl	80020a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800161e:	2006      	movs	r0, #6
 8001620:	f000 fd7e 	bl	8002120 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001624:	4622      	mov	r2, r4
 8001626:	4621      	mov	r1, r4
 8001628:	4628      	mov	r0, r5
 800162a:	f000 fd3d 	bl	80020a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800162e:	4628      	mov	r0, r5
 8001630:	f000 fd76 	bl	8002120 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001634:	4622      	mov	r2, r4
 8001636:	4621      	mov	r1, r4
 8001638:	2008      	movs	r0, #8
 800163a:	f000 fd35 	bl	80020a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800163e:	2008      	movs	r0, #8
 8001640:	f000 fd6e 	bl	8002120 <HAL_NVIC_EnableIRQ>
  DMA2D_Handle.Instance = DMA2D;
 8001644:	487c      	ldr	r0, [pc, #496]	@ (8001838 <main+0x344>)
 8001646:	4b7d      	ldr	r3, [pc, #500]	@ (800183c <main+0x348>)
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001648:	65c4      	str	r4, [r0, #92]	@ 0x5c
  DMA2D_Handle.Instance = DMA2D;
 800164a:	e9c0 3400 	strd	r3, r4, [r0]
  DMA2D_Handle.Init.OutputOffset = 0;
 800164e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001652:	e9c0 4411 	strd	r4, r4, [r0, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8001656:	e9c0 4413 	strd	r4, r4, [r0, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800165a:	e9c0 4415 	strd	r4, r4, [r0, #84]	@ 0x54
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 800165e:	f002 f9d3 	bl	8003a08 <HAL_DMA2D_Init>
 8001662:	2800      	cmp	r0, #0
 8001664:	f040 8120 	bne.w	80018a8 <main+0x3b4>
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8001668:	2101      	movs	r1, #1
 800166a:	4873      	ldr	r0, [pc, #460]	@ (8001838 <main+0x344>)
 800166c:	f002 fa0c 	bl	8003a88 <HAL_DMA2D_ConfigLayer>
 8001670:	2800      	cmp	r0, #0
 8001672:	f040 8116 	bne.w	80018a2 <main+0x3ae>
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001676:	2400      	movs	r4, #0
  hsd1.Instance = SDMMC1;
 8001678:	4b71      	ldr	r3, [pc, #452]	@ (8001840 <main+0x34c>)
 __HAL_RCC_DMA1_CLK_ENABLE();
 800167a:	4a6b      	ldr	r2, [pc, #428]	@ (8001828 <main+0x334>)
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800167c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001680:	4970      	ldr	r1, [pc, #448]	@ (8001844 <main+0x350>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001682:	609c      	str	r4, [r3, #8]
  hsd1.Init.ClockDiv = 0;
 8001684:	615c      	str	r4, [r3, #20]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001686:	e9c3 1400 	strd	r1, r4, [r3]
 __HAL_RCC_DMA1_CLK_ENABLE();
 800168a:	f8d2 1138 	ldr.w	r1, [r2, #312]	@ 0x138
 800168e:	f041 0101 	orr.w	r1, r1, #1
 8001692:	f8c2 1138 	str.w	r1, [r2, #312]	@ 0x138
 8001696:	f8d2 2138 	ldr.w	r2, [r2, #312]	@ 0x138
 800169a:	f002 0201 	and.w	r2, r2, #1
 800169e:	9203      	str	r2, [sp, #12]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016a0:	4622      	mov	r2, r4
 __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	9903      	ldr	r1, [sp, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80016a4:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80016a8:	e9c3 0103 	strd	r0, r1, [r3, #12]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016ac:	4621      	mov	r1, r4
 80016ae:	200b      	movs	r0, #11
 80016b0:	f000 fcfa 	bl	80020a8 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016b4:	200b      	movs	r0, #11
 80016b6:	f000 fd33 	bl	8002120 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80016ba:	4863      	ldr	r0, [pc, #396]	@ (8001848 <main+0x354>)
 80016bc:	4a63      	ldr	r2, [pc, #396]	@ (800184c <main+0x358>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  hspi1.Init.CRCPolynomial = 0x0;
 80016c2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c4:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80016c8:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016cc:	2307      	movs	r3, #7
 80016ce:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016da:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016de:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e2:	e9c0 4409 	strd	r4, r4, [r0, #36]	@ 0x24
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e6:	6182      	str	r2, [r0, #24]
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016e8:	e9c0 340d 	strd	r3, r4, [r0, #52]	@ 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ec:	e9c0 440f 	strd	r4, r4, [r0, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016f0:	e9c0 4411 	strd	r4, r4, [r0, #68]	@ 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016f4:	e9c0 4413 	strd	r4, r4, [r0, #76]	@ 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016f8:	e9c0 4415 	strd	r4, r4, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016fc:	f007 fcc4 	bl	8009088 <HAL_SPI_Init>
 8001700:	2800      	cmp	r0, #0
 8001702:	f040 80cb 	bne.w	800189c <main+0x3a8>
  hrtc.Instance = RTC;
 8001706:	4852      	ldr	r0, [pc, #328]	@ (8001850 <main+0x35c>)
  RTC_TimeTypeDef sTime = {0};
 8001708:	2300      	movs	r3, #0
  hrtc.Instance = RTC;
 800170a:	4a52      	ldr	r2, [pc, #328]	@ (8001854 <main+0x360>)
  RTC_TimeTypeDef sTime = {0};
 800170c:	9322      	str	r3, [sp, #136]	@ 0x88
  hrtc.Instance = RTC;
 800170e:	6002      	str	r2, [r0, #0]
  hrtc.Init.AsynchPrediv = 127;
 8001710:	227f      	movs	r2, #127	@ 0x7f
  RTC_DateTypeDef sDate = {0};
 8001712:	9309      	str	r3, [sp, #36]	@ 0x24
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001714:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001716:	6103      	str	r3, [r0, #16]
  hrtc.Init.AsynchPrediv = 127;
 8001718:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800171a:	22ff      	movs	r2, #255	@ 0xff
  RTC_TimeTypeDef sTime = {0};
 800171c:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 8001720:	e9cd 3320 	strd	r3, r3, [sp, #128]	@ 0x80
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001724:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001728:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hrtc.Init.SynchPrediv = 255;
 800172c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800172e:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001730:	f006 fc4a 	bl	8007fc8 <HAL_RTC_Init>
 8001734:	2800      	cmp	r0, #0
 8001736:	f040 80ae 	bne.w	8001896 <main+0x3a2>
  sTime.Hours = 0;
 800173a:	2200      	movs	r2, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800173c:	a91e      	add	r1, sp, #120	@ 0x78
 800173e:	4844      	ldr	r0, [pc, #272]	@ (8001850 <main+0x35c>)
  sTime.Hours = 0;
 8001740:	f8ad 2078 	strh.w	r2, [sp, #120]	@ 0x78
  sTime.Seconds = 0;
 8001744:	f88d 207a 	strb.w	r2, [sp, #122]	@ 0x7a
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001748:	e9cd 2221 	strd	r2, r2, [sp, #132]	@ 0x84
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800174c:	f006 fcb0 	bl	80080b0 <HAL_RTC_SetTime>
 8001750:	2800      	cmp	r0, #0
 8001752:	f040 809d 	bne.w	8001890 <main+0x39c>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001756:	4b40      	ldr	r3, [pc, #256]	@ (8001858 <main+0x364>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001758:	2200      	movs	r2, #0
 800175a:	a909      	add	r1, sp, #36	@ 0x24
 800175c:	483c      	ldr	r0, [pc, #240]	@ (8001850 <main+0x35c>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800175e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001760:	f006 fd48 	bl	80081f4 <HAL_RTC_SetDate>
 8001764:	2800      	cmp	r0, #0
 8001766:	f040 8090 	bne.w	800188a <main+0x396>
  JPEG_Handle.Instance = JPEG;
 800176a:	483c      	ldr	r0, [pc, #240]	@ (800185c <main+0x368>)
 800176c:	4b3c      	ldr	r3, [pc, #240]	@ (8001860 <main+0x36c>)
 800176e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 8001770:	f003 faee 	bl	8004d50 <HAL_JPEG_Init>
 8001774:	2800      	cmp	r0, #0
 8001776:	f040 8085 	bne.w	8001884 <main+0x390>
  HAL_Delay(500);
 800177a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800177e:	4c39      	ldr	r4, [pc, #228]	@ (8001864 <main+0x370>)
 8001780:	f000 fc6e 	bl	8002060 <HAL_Delay>
  for(int i = 0 ; i < ( LCD_X_SIZE * LCD_Y_SIZE * 2 ) ; i++)
 8001784:	2300      	movs	r3, #0
	  outputData[i] = 0xff;
 8001786:	21ff      	movs	r1, #255	@ 0xff
 8001788:	6822      	ldr	r2, [r4, #0]
 800178a:	54d1      	strb	r1, [r2, r3]
  for(int i = 0 ; i < ( LCD_X_SIZE * LCD_Y_SIZE * 2 ) ; i++)
 800178c:	3301      	adds	r3, #1
 800178e:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8001792:	d1f9      	bne.n	8001788 <main+0x294>
  lcd_draw(outputData);
 8001794:	6820      	ldr	r0, [r4, #0]
 8001796:	f000 f8c1 	bl	800191c <lcd_draw>
  HAL_Delay(500);
 800179a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800179e:	f000 fc5f 	bl	8002060 <HAL_Delay>
  GC9A01_Init();
 80017a2:	f7ff f8fb 	bl	800099c <GC9A01_Init>
  lcd_draw(outputData);
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	f000 f8b8 	bl	800191c <lcd_draw>
  HAL_Delay(500);
 80017ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017b0:	f000 fc56 	bl	8002060 <HAL_Delay>
  FXLS8974_I2C_Init(&pSensorHandle, &hi2c, HAL_I2C_Master_Transmit, HAL_I2C_Master_Receive, FXLS8974_DEVICE_ADDRESS_SA0_0, &whoami);
 80017b4:	f10d 000b 	add.w	r0, sp, #11
 80017b8:	2218      	movs	r2, #24
 80017ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <main+0x374>)
 80017bc:	a909      	add	r1, sp, #36	@ 0x24
 80017be:	e9cd 2000 	strd	r2, r0, [sp]
 80017c2:	4a2a      	ldr	r2, [pc, #168]	@ (800186c <main+0x378>)
 80017c4:	482a      	ldr	r0, [pc, #168]	@ (8001870 <main+0x37c>)
 80017c6:	f7fe fdeb 	bl	80003a0 <FXLS8974_I2C_Init>
  while(smart_watch_init() != OK)
 80017ca:	e001      	b.n	80017d0 <main+0x2dc>
	  HAL_Delay(500);
 80017cc:	f000 fc48 	bl	8002060 <HAL_Delay>
  while(smart_watch_init() != OK)
 80017d0:	f000 f870 	bl	80018b4 <smart_watch_init>
 80017d4:	4603      	mov	r3, r0
	  HAL_Delay(500);
 80017d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
  while(smart_watch_init() != OK)
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d1f6      	bne.n	80017cc <main+0x2d8>
  HAL_Delay(500);
 80017de:	f000 fc3f 	bl	8002060 <HAL_Delay>
		 pass.mjpeg_pass = (TEST_STATUS_t)smart_watch_test_accelerometer(&pSensorHandle);
 80017e2:	4823      	ldr	r0, [pc, #140]	@ (8001870 <main+0x37c>)
 80017e4:	f000 f8c4 	bl	8001970 <smart_watch_test_accelerometer>
	 if(f_open(&log, "log.txt", ( FA_WRITE | FA_CREATE_ALWAYS )) != FR_OK)
 80017e8:	220a      	movs	r2, #10
		 pass.mjpeg_pass = (TEST_STATUS_t)smart_watch_test_accelerometer(&pSensorHandle);
 80017ea:	4605      	mov	r5, r0
	 if(f_open(&log, "log.txt", ( FA_WRITE | FA_CREATE_ALWAYS )) != FR_OK)
 80017ec:	4921      	ldr	r1, [pc, #132]	@ (8001874 <main+0x380>)
 80017ee:	a81e      	add	r0, sp, #120	@ 0x78
 80017f0:	f00a fc0e 	bl	800c010 <f_open>
 80017f4:	4604      	mov	r4, r0
 80017f6:	b110      	cbz	r0, 80017fe <main+0x30a>
  HAL_NVIC_SystemReset();
 80017f8:	f000 fcb2 	bl	8002160 <HAL_NVIC_SystemReset>
  while (1)
 80017fc:	e7fe      	b.n	80017fc <main+0x308>
	 print_log(&log, pass.display_pass, "DISPLAY_TEST");
 80017fe:	4601      	mov	r1, r0
 8001800:	4a1d      	ldr	r2, [pc, #116]	@ (8001878 <main+0x384>)
 8001802:	a81e      	add	r0, sp, #120	@ 0x78
 8001804:	f7ff fdd6 	bl	80013b4 <print_log.isra.0>
	 print_log(&log, pass.sd_pass, "SD_TEST");
 8001808:	4621      	mov	r1, r4
 800180a:	a81e      	add	r0, sp, #120	@ 0x78
 800180c:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <main+0x388>)
 800180e:	f7ff fdd1 	bl	80013b4 <print_log.isra.0>
	 print_log(&log, pass.mjpeg_pass, "MJPEG_TEST");
 8001812:	a81e      	add	r0, sp, #120	@ 0x78
 8001814:	4a1a      	ldr	r2, [pc, #104]	@ (8001880 <main+0x38c>)
 8001816:	b269      	sxtb	r1, r5
 8001818:	f7ff fdcc 	bl	80013b4 <print_log.isra.0>
 	 f_close(&log);
 800181c:	a81e      	add	r0, sp, #120	@ 0x78
 800181e:	f00a fecf 	bl	800c5c0 <f_close>
 	 return 1;
 8001822:	e7eb      	b.n	80017fc <main+0x308>
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	58024400 	.word	0x58024400
 800182c:	58020000 	.word	0x58020000
 8001830:	58020400 	.word	0x58020400
 8001834:	58020800 	.word	0x58020800
 8001838:	240000e0 	.word	0x240000e0
 800183c:	52001000 	.word	0x52001000
 8001840:	240002a0 	.word	0x240002a0
 8001844:	52007000 	.word	0x52007000
 8001848:	24000218 	.word	0x24000218
 800184c:	40013000 	.word	0x40013000
 8001850:	240000b8 	.word	0x240000b8
 8001854:	58004000 	.word	0x58004000
 8001858:	00010101 	.word	0x00010101
 800185c:	24000148 	.word	0x24000148
 8001860:	52003000 	.word	0x52003000
 8001864:	24000000 	.word	0x24000000
 8001868:	080046d5 	.word	0x080046d5
 800186c:	080043e9 	.word	0x080043e9
 8001870:	240000a0 	.word	0x240000a0
 8001874:	0800d0ac 	.word	0x0800d0ac
 8001878:	0800d0b4 	.word	0x0800d0b4
 800187c:	0800d0c4 	.word	0x0800d0c4
 8001880:	0800d0cc 	.word	0x0800d0cc
  HAL_NVIC_SystemReset();
 8001884:	f000 fc6c 	bl	8002160 <HAL_NVIC_SystemReset>
}
 8001888:	e777      	b.n	800177a <main+0x286>
  HAL_NVIC_SystemReset();
 800188a:	f000 fc69 	bl	8002160 <HAL_NVIC_SystemReset>
}
 800188e:	e76c      	b.n	800176a <main+0x276>
  HAL_NVIC_SystemReset();
 8001890:	f000 fc66 	bl	8002160 <HAL_NVIC_SystemReset>
}
 8001894:	e75f      	b.n	8001756 <main+0x262>
  HAL_NVIC_SystemReset();
 8001896:	f000 fc63 	bl	8002160 <HAL_NVIC_SystemReset>
}
 800189a:	e74e      	b.n	800173a <main+0x246>
  HAL_NVIC_SystemReset();
 800189c:	f000 fc60 	bl	8002160 <HAL_NVIC_SystemReset>
}
 80018a0:	e731      	b.n	8001706 <main+0x212>
  HAL_NVIC_SystemReset();
 80018a2:	f000 fc5d 	bl	8002160 <HAL_NVIC_SystemReset>
}
 80018a6:	e6e6      	b.n	8001676 <main+0x182>
  HAL_NVIC_SystemReset();
 80018a8:	f000 fc5a 	bl	8002160 <HAL_NVIC_SystemReset>
}
 80018ac:	e6dc      	b.n	8001668 <main+0x174>
 80018ae:	bf00      	nop

080018b0 <Error_Handler>:
  HAL_NVIC_SystemReset();
 80018b0:	f000 bc56 	b.w	8002160 <HAL_NVIC_SystemReset>

080018b4 <smart_watch_init>:
#endif

/************************** GLOBAL FUNCTIONS **************************/

int smart_watch_init(void)
{
 80018b4:	b538      	push	{r3, r4, r5, lr}

	video.file_idx = 0;
	video.FrameType = 0;

	video.frameToSkip = 0;
	video.frame_time = 0.0;
 80018b6:	2000      	movs	r0, #0
	video.width = 0;
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <smart_watch_init+0x54>)
	video.actual_time = 0;
	video.tick_offset = 0;
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80018ba:	4914      	ldr	r1, [pc, #80]	@ (800190c <smart_watch_init+0x58>)
	video.width = 0;
 80018bc:	2400      	movs	r4, #0

	video.display_ts = video.time.Seconds;

	video.display_status = DISPLAY_ON;
 80018be:	2201      	movs	r2, #1
	video.frame_time = 0.0;
 80018c0:	6298      	str	r0, [r3, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80018c2:	6359      	str	r1, [r3, #52]	@ 0x34
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80018c4:	4812      	ldr	r0, [pc, #72]	@ (8001910 <smart_watch_init+0x5c>)
 80018c6:	4913      	ldr	r1, [pc, #76]	@ (8001914 <smart_watch_init+0x60>)
	video.time.Hours = 0;
 80018c8:	801c      	strh	r4, [r3, #0]
	video.time.Seconds = 0;
 80018ca:	709c      	strb	r4, [r3, #2]
	video.file_idx = 0;
 80018cc:	829c      	strh	r4, [r3, #20]
	video.FrameType = 0;
 80018ce:	75dc      	strb	r4, [r3, #23]
	video.frameToSkip = 0;
 80018d0:	625c      	str	r4, [r3, #36]	@ 0x24
	video.display_ts = video.time.Seconds;
 80018d2:	63dc      	str	r4, [r3, #60]	@ 0x3c
	video.display_status = DISPLAY_ON;
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	video.frameCount = 0;
 80018d8:	621c      	str	r4, [r3, #32]
	video.video_mode = SETTING_MODE;
 80018da:	871c      	strh	r4, [r3, #56]	@ 0x38
	video.width = 0;
 80018dc:	e9c3 4406 	strd	r4, r4, [r3, #24]
	video.tick_offset = 0;
 80018e0:	e9c3 440b 	strd	r4, r4, [r3, #44]	@ 0x2c
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80018e4:	f00a feee 	bl	800c6c4 <FATFS_LinkDriver>
 80018e8:	b108      	cbz	r0, 80018ee <smart_watch_init+0x3a>
	    	return 0;
 80018ea:	4620      	mov	r0, r4
}
 80018ec:	bd38      	pop	{r3, r4, r5, pc}
}

static void SD_Initialize(void)
{

	BSP_SD_Init();
 80018ee:	4605      	mov	r5, r0
 80018f0:	f009 f972 	bl	800abd8 <BSP_SD_Init>
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80018f4:	4907      	ldr	r1, [pc, #28]	@ (8001914 <smart_watch_init+0x60>)
 80018f6:	462a      	mov	r2, r5
 80018f8:	4807      	ldr	r0, [pc, #28]	@ (8001918 <smart_watch_init+0x64>)
 80018fa:	f00a fb3d 	bl	800bf78 <f_mount>
 80018fe:	fab0 f080 	clz	r0, r0
 8001902:	0940      	lsrs	r0, r0, #5
}
 8001904:	bd38      	pop	{r3, r4, r5, pc}
 8001906:	bf00      	nop
 8001908:	24075680 	.word	0x24075680
 800190c:	2402a680 	.word	0x2402a680
 8001910:	0800d350 	.word	0x0800d350
 8001914:	240759dc 	.word	0x240759dc
 8001918:	240756c4 	.word	0x240756c4

0800191c <lcd_draw>:
{
 800191c:	b530      	push	{r4, r5, lr}
       frame.start.X = 0;
 800191e:	f04f 13ef 	mov.w	r3, #15663343	@ 0xef00ef
{
 8001922:	b083      	sub	sp, #12
       frame.start.X = 0;
 8001924:	2500      	movs	r5, #0
{
 8001926:	4604      	mov	r4, r0
       frame.start.X = 0;
 8001928:	e9cd 5300 	strd	r5, r3, [sp]
	   GC9A01_set_frame(frame);
 800192c:	ab02      	add	r3, sp, #8
 800192e:	e913 0003 	ldmdb	r3, {r0, r1}
 8001932:	f7ff fc99 	bl	8001268 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8001936:	202c      	movs	r0, #44	@ 0x2c
 8001938:	f7fe ff8e 	bl	8000858 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 800193c:	2001      	movs	r0, #1
 800193e:	f7fe ff55 	bl	80007ec <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8001942:	4628      	mov	r0, r5
 8001944:	f7fe ff6a 	bl	800081c <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fcca 	bl	80012e8 <GC9A01_spi_tx>
	   if(ret != 1)
 8001954:	2801      	cmp	r0, #1
 8001956:	d001      	beq.n	800195c <lcd_draw+0x40>
}
 8001958:	b003      	add	sp, #12
 800195a:	bd30      	pop	{r4, r5, pc}
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 800195c:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8001960:	462a      	mov	r2, r5
 8001962:	1860      	adds	r0, r4, r1
}
 8001964:	b003      	add	sp, #12
 8001966:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 800196a:	f7ff bcbd 	b.w	80012e8 <GC9A01_spi_tx>
 800196e:	bf00      	nop

08001970 <smart_watch_test_accelerometer>:
{
 8001970:	b538      	push	{r3, r4, r5, lr}
 8001972:	4605      	mov	r5, r0
	if(FXLS8974_I2C_Configure(pSensorHandle) != 1)
 8001974:	f7fe fd48 	bl	8000408 <FXLS8974_I2C_Configure>
 8001978:	2801      	cmp	r0, #1
 800197a:	d002      	beq.n	8001982 <smart_watch_test_accelerometer+0x12>
		return -1;
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001980:	bd38      	pop	{r3, r4, r5, pc}
	HAL_Delay(500);
 8001982:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001986:	240a      	movs	r4, #10
 8001988:	f000 fb6a 	bl	8002060 <HAL_Delay>
		if(FXLS8974_I2C_ReadData(pSensorHandle) != 1)
 800198c:	4628      	mov	r0, r5
 800198e:	f7fe fe23 	bl	80005d8 <FXLS8974_I2C_ReadData>
 8001992:	2801      	cmp	r0, #1
 8001994:	d1f2      	bne.n	800197c <smart_watch_test_accelerometer+0xc>
	for(int i = 0 ; i < 10 ; i++)
 8001996:	3c01      	subs	r4, #1
 8001998:	d1f8      	bne.n	800198c <smart_watch_test_accelerometer+0x1c>
}
 800199a:	bd38      	pop	{r3, r4, r5, pc}

0800199c <HAL_GPIO_EXTI_Callback>:
}

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800199c:	b508      	push	{r3, lr}

	if(video.video_mode == SETTING_MODE)
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80019a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019a4:	b103      	cbz	r3, 80019a8 <HAL_GPIO_EXTI_Callback+0xc>

		disable_btn_int();

	}

}
 80019a6:	bd08      	pop	{r3, pc}
		if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 80019a8:	2104      	movs	r1, #4
 80019aa:	4813      	ldr	r0, [pc, #76]	@ (80019f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80019ac:	f002 fa18 	bl	8003de0 <HAL_GPIO_ReadPin>
 80019b0:	b968      	cbnz	r0, 80019ce <HAL_GPIO_EXTI_Callback+0x32>
			btn_status = BTN_PLUS;
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_GPIO_EXTI_Callback+0x60>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80019b8:	2006      	movs	r0, #6
 80019ba:	f000 fbbf 	bl	800213c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80019be:	2007      	movs	r0, #7
 80019c0:	f000 fbbc 	bl	800213c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80019c4:	2008      	movs	r0, #8
}
 80019c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80019ca:	f000 bbb7 	b.w	800213c <HAL_NVIC_DisableIRQ>
		else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 80019ce:	2102      	movs	r1, #2
 80019d0:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80019d2:	f002 fa05 	bl	8003de0 <HAL_GPIO_ReadPin>
 80019d6:	b918      	cbnz	r0, 80019e0 <HAL_GPIO_EXTI_Callback+0x44>
			btn_status = BTN_SET;
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_GPIO_EXTI_Callback+0x60>)
 80019da:	2202      	movs	r2, #2
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e7eb      	b.n	80019b8 <HAL_GPIO_EXTI_Callback+0x1c>
		else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 80019e0:	2101      	movs	r1, #1
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80019e4:	f002 f9fc 	bl	8003de0 <HAL_GPIO_ReadPin>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1e5      	bne.n	80019b8 <HAL_GPIO_EXTI_Callback+0x1c>
			btn_status = BTN_MINUS;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_GPIO_EXTI_Callback+0x60>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	e7e1      	b.n	80019b8 <HAL_GPIO_EXTI_Callback+0x1c>
 80019f4:	24075680 	.word	0x24075680
 80019f8:	58020800 	.word	0x58020800
 80019fc:	240758f4 	.word	0x240758f4

08001a00 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{

	spi_dma_not_ready = 0;
 8001a00:	4b01      	ldr	r3, [pc, #4]	@ (8001a08 <HAL_SPI_TxCpltCallback+0x8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]

}
 8001a06:	4770      	bx	lr
 8001a08:	24000088 	.word	0x24000088

08001a0c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0c:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <HAL_MspInit+0x20>)
{
 8001a0e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a10:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8001a14:	f042 0202 	orr.w	r2, r2, #2
 8001a18:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8001a1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a28:	b002      	add	sp, #8
 8001a2a:	4770      	bx	lr
 8001a2c:	58024400 	.word	0x58024400

08001a30 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_DMA2D_MspInit+0x2c>)
 8001a32:	6802      	ldr	r2, [r0, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d000      	beq.n	8001a3a <HAL_DMA2D_MspInit+0xa>
 8001a38:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_DMA2D_MspInit+0x30>)
{
 8001a3c:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a3e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001a42:	f042 0210 	orr.w	r2, r2, #16
 8001a46:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8001a4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a56:	b002      	add	sp, #8
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	52001000 	.word	0x52001000
 8001a60:	58024400 	.word	0x58024400

08001a64 <HAL_JPEG_MspInit>:
{
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_JPEG_MspInit+0xec>)

	  __HAL_RCC_MDMA_CLK_ENABLE();

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8001a66:	2107      	movs	r1, #7
 8001a68:	220f      	movs	r2, #15
{
 8001a6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8001a6e:	f8d3 4134 	ldr.w	r4, [r3, #308]	@ 0x134
{
 8001a72:	4606      	mov	r6, r0
 8001a74:	b083      	sub	sp, #12
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a76:	2500      	movs	r5, #0
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8001a78:	f044 0420 	orr.w	r4, r4, #32
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
	  hmdmaIn.Init.BufferTransferLength = 32;
 8001a7c:	2720      	movs	r7, #32
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8001a7e:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8001a82:	f44f 48a0 	mov.w	r8, #20480	@ 0x5000
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8001a86:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
 8001a8a:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8001a8e:	4c31      	ldr	r4, [pc, #196]	@ (8001b54 <HAL_JPEG_MspInit+0xf0>)
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8001a90:	f000 0020 	and.w	r0, r0, #32
 8001a94:	9000      	str	r0, [sp, #0]
 8001a96:	9800      	ldr	r0, [sp, #0]
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8001a98:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 8001a9c:	f040 0001 	orr.w	r0, r0, #1
 8001aa0:	f8c3 0134 	str.w	r0, [r3, #308]	@ 0x134
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8001aa4:	2079      	movs	r0, #121	@ 0x79
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8001aa6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8001ab2:	f000 faf9 	bl	80020a8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001ab6:	2079      	movs	r0, #121	@ 0x79
 8001ab8:	f000 fb32 	bl	8002120 <HAL_NVIC_EnableIRQ>
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8001abc:	2380      	movs	r3, #128	@ 0x80
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8001abe:	2202      	movs	r2, #2

	  hmdmaIn.Instance = MDMA_Channel1;

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);

	  HAL_MDMA_DeInit(&hmdmaIn);
 8001ac0:	4620      	mov	r0, r4
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 8001ac2:	6223      	str	r3, [r4, #32]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8001ac4:	6162      	str	r2, [r4, #20]
	  hmdmaIn.Instance = MDMA_Channel1;
 8001ac6:	2211      	movs	r2, #17
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8001ac8:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001acc:	60a5      	str	r5, [r4, #8]
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8001ace:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaIn.Init.BufferTransferLength = 32;
 8001ad2:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001ad4:	e9c4 3503 	strd	r3, r5, [r4, #12]
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8001ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001adc:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaIn.Instance = MDMA_Channel1;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_JPEG_MspInit+0xf4>)
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8001ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8001ae4:	6334      	str	r4, [r6, #48]	@ 0x30
 8001ae6:	6426      	str	r6, [r4, #64]	@ 0x40
	  hmdmaIn.Instance = MDMA_Channel1;
 8001ae8:	e9c4 3200 	strd	r3, r2, [r4]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 8001aec:	e9c4 5506 	strd	r5, r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaIn);
 8001af0:	f003 fffc 	bl	8005aec <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8001af4:	4620      	mov	r0, r4
 8001af6:	f003 ff7f 	bl	80059f8 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8001afa:	4c18      	ldr	r4, [pc, #96]	@ (8001b5c <HAL_JPEG_MspInit+0xf8>)
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8001afc:	f44f 3320 	mov.w	r3, #163840	@ 0x28000

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
	  hmdmaOut.Init.BufferTransferLength = 32;

	  hmdmaOut.Instance = MDMA_Channel0;
 8001b00:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <HAL_JPEG_MspInit+0xfc>)
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8001b02:	60a5      	str	r5, [r4, #8]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8001b04:	4620      	mov	r0, r4
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8001b06:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001b08:	2313      	movs	r3, #19
	  hmdmaOut.Instance = MDMA_Channel0;
 8001b0a:	6022      	str	r2, [r4, #0]
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001b0c:	6063      	str	r3, [r4, #4]
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8001b0e:	23c0      	movs	r3, #192	@ 0xc0
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 8001b10:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8001b14:	60e3      	str	r3, [r4, #12]
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8001b16:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaOut.Init.BufferTransferLength = 32;
 8001b1a:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 8001b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8001b20:	e9c4 7507 	strd	r7, r5, [r4, #28]
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8001b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 8001b28:	2508      	movs	r5, #8
 8001b2a:	61a5      	str	r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaOut);
 8001b2c:	f003 ffde 	bl	8005aec <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 8001b30:	4620      	mov	r0, r4
 8001b32:	f003 ff61 	bl	80059f8 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8001b36:	6374      	str	r4, [r6, #52]	@ 0x34


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8001b38:	220f      	movs	r2, #15
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	207a      	movs	r0, #122	@ 0x7a
	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8001b3e:	6426      	str	r6, [r4, #64]	@ 0x40
	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8001b40:	f000 fab2 	bl	80020a8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001b44:	207a      	movs	r0, #122	@ 0x7a
}
 8001b46:	b003      	add	sp, #12
 8001b48:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001b4c:	f000 bae8 	b.w	8002120 <HAL_NVIC_EnableIRQ>
 8001b50:	58024400 	.word	0x58024400
 8001b54:	24075968 	.word	0x24075968
 8001b58:	52000080 	.word	0x52000080
 8001b5c:	240758f8 	.word	0x240758f8
 8001b60:	52000040 	.word	0x52000040

08001b64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b64:	b5d0      	push	{r4, r6, r7, lr}
 8001b66:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	2100      	movs	r1, #0
{
 8001b6a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b6c:	22c0      	movs	r2, #192	@ 0xc0
 8001b6e:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	9108      	str	r1, [sp, #32]
 8001b72:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001b76:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7a:	f00a fdfb 	bl	800c774 <memset>
  if(hsd->Instance==SDMMC1)
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <HAL_SD_MspInit+0x110>)
 8001b80:	6822      	ldr	r2, [r4, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_SD_MspInit+0x26>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001b86:	b03a      	add	sp, #232	@ 0xe8
 8001b88:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001b8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b8e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b90:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001b92:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	f004 ff3d 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d166      	bne.n	8001c6c <HAL_SD_MspInit+0x108>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b9e:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <HAL_SD_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ba0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ba4:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ba6:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ba8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bac:	2601      	movs	r6, #1
 8001bae:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001bb0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001bb4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8001bb8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001bbc:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8001bc0:	9200      	str	r2, [sp, #0]
 8001bc2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001bc8:	f042 0202 	orr.w	r2, r2, #2
 8001bcc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001bd0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001bd4:	f002 0202 	and.w	r2, r2, #2
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001be0:	f042 0204 	orr.w	r2, r2, #4
 8001be4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001be8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001bec:	f002 0204 	and.w	r2, r2, #4
 8001bf0:	9202      	str	r2, [sp, #8]
 8001bf2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001bf8:	f042 0208 	orr.w	r2, r2, #8
 8001bfc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001c00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c04:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c06:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	a904      	add	r1, sp, #16
 8001c12:	481a      	ldr	r0, [pc, #104]	@ (8001c7c <HAL_SD_MspInit+0x118>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c14:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c16:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f001 ff9f 	bl	8003b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c1e:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8001c22:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	a904      	add	r1, sp, #16
 8001c26:	4816      	ldr	r0, [pc, #88]	@ (8001c80 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c28:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c2e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f001 ff93 	bl	8003b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c3a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	a904      	add	r1, sp, #16
 8001c3e:	4810      	ldr	r0, [pc, #64]	@ (8001c80 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c40:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c46:	2200      	movs	r2, #0
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f001 ff85 	bl	8003b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c52:	2204      	movs	r2, #4
 8001c54:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c56:	a904      	add	r1, sp, #16
 8001c58:	480a      	ldr	r0, [pc, #40]	@ (8001c84 <HAL_SD_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c5a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c5c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8001c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c64:	f001 ff7a 	bl	8003b5c <HAL_GPIO_Init>
}
 8001c68:	b03a      	add	sp, #232	@ 0xe8
 8001c6a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001c6c:	f7ff fe20 	bl	80018b0 <Error_Handler>
 8001c70:	e795      	b.n	8001b9e <HAL_SD_MspInit+0x3a>
 8001c72:	bf00      	nop
 8001c74:	52007000 	.word	0x52007000
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58020400 	.word	0x58020400
 8001c80:	58020800 	.word	0x58020800
 8001c84:	58020c00 	.word	0x58020c00

08001c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c88:	b530      	push	{r4, r5, lr}
 8001c8a:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	2100      	movs	r1, #0
{
 8001c8e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	22c0      	movs	r2, #192	@ 0xc0
 8001c92:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	9106      	str	r1, [sp, #24]
 8001c96:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001c9a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c9e:	f00a fd69 	bl	800c774 <memset>
  if(hspi->Instance==SPI1)
 8001ca2:	4b30      	ldr	r3, [pc, #192]	@ (8001d64 <HAL_SPI_MspInit+0xdc>)
 8001ca4:	6822      	ldr	r2, [r4, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_SPI_MspInit+0x26>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001caa:	b039      	add	sp, #228	@ 0xe4
 8001cac:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001cae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cb2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001cb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cba:	f004 feab 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d14a      	bne.n	8001d58 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cc2:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc4:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cc8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8001ccc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cd0:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 8001cd4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8001cd8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001cdc:	9200      	str	r2, [sp, #0]
 8001cde:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cec:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf2:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	481c      	ldr	r0, [pc, #112]	@ (8001d6c <HAL_SPI_MspInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cfc:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	9d01      	ldr	r5, [sp, #4]
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001d00:	4d1b      	ldr	r5, [pc, #108]	@ (8001d70 <HAL_SPI_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d06:	2200      	movs	r2, #0
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f001 ff25 	bl	8003b5c <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001d12:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001d14:	4917      	ldr	r1, [pc, #92]	@ (8001d74 <HAL_SPI_MspInit+0xec>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001d16:	2226      	movs	r2, #38	@ 0x26
 8001d18:	2040      	movs	r0, #64	@ 0x40
 8001d1a:	60eb      	str	r3, [r5, #12]
 8001d1c:	616b      	str	r3, [r5, #20]
 8001d1e:	60a8      	str	r0, [r5, #8]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d20:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001d22:	e9c5 1200 	strd	r1, r2, [r5]
 8001d26:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8001d2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d2e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d32:	2304      	movs	r3, #4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001d34:	6129      	str	r1, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d36:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d3a:	f000 fb21 	bl	8002380 <HAL_DMA_Init>
 8001d3e:	b970      	cbnz	r0, 8001d5e <HAL_SPI_MspInit+0xd6>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2023      	movs	r0, #35	@ 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d44:	67a5      	str	r5, [r4, #120]	@ 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d46:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d48:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d4a:	f000 f9ad 	bl	80020a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d4e:	2023      	movs	r0, #35	@ 0x23
 8001d50:	f000 f9e6 	bl	8002120 <HAL_NVIC_EnableIRQ>
}
 8001d54:	b039      	add	sp, #228	@ 0xe4
 8001d56:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001d58:	f7ff fdaa 	bl	80018b0 <Error_Handler>
 8001d5c:	e7b1      	b.n	8001cc2 <HAL_SPI_MspInit+0x3a>
      Error_Handler();
 8001d5e:	f7ff fda7 	bl	80018b0 <Error_Handler>
 8001d62:	e7ed      	b.n	8001d40 <HAL_SPI_MspInit+0xb8>
 8001d64:	40013000 	.word	0x40013000
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58020000 	.word	0x58020000
 8001d70:	240001a0 	.word	0x240001a0
 8001d74:	40020010 	.word	0x40020010

08001d78 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	b0b0      	sub	sp, #192	@ 0xc0
 8001d7c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7e:	22c0      	movs	r2, #192	@ 0xc0
 8001d80:	2100      	movs	r1, #0
 8001d82:	4668      	mov	r0, sp
 8001d84:	f00a fcf6 	bl	800c774 <memset>
  if(hrtc->Instance==RTC)
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <HAL_RTC_MspInit+0x50>)
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RTC_MspInit+0x1c>

    __HAL_RCC_RTC_ENABLE();

  }

}
 8001d90:	b030      	add	sp, #192	@ 0xc0
 8001d92:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d94:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8001dc0 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9c:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d9e:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001da2:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da4:	f004 fe36 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	b930      	cbnz	r0, 8001db8 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8001daa:	4a08      	ldr	r2, [pc, #32]	@ (8001dcc <HAL_RTC_MspInit+0x54>)
 8001dac:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db2:	6713      	str	r3, [r2, #112]	@ 0x70
}
 8001db4:	b030      	add	sp, #192	@ 0xc0
 8001db6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001db8:	f7ff fd7a 	bl	80018b0 <Error_Handler>
 8001dbc:	e7f5      	b.n	8001daa <HAL_RTC_MspInit+0x32>
 8001dbe:	bf00      	nop
 8001dc0:	00400000 	.word	0x00400000
 8001dc4:	00000000 	.word	0x00000000
 8001dc8:	58004000 	.word	0x58004000
 8001dcc:	58024400 	.word	0x58024400

08001dd0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler>
 8001dd2:	bf00      	nop

08001dd4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <HardFault_Handler>
 8001dd6:	bf00      	nop

08001dd8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler>
 8001dda:	bf00      	nop

08001ddc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <BusFault_Handler>
 8001dde:	bf00      	nop

08001de0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler>
 8001de2:	bf00      	nop

08001de4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop

08001de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop

08001dec <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df0:	f000 b924 	b.w	800203c <HAL_IncTick>

08001df4 <JPEG_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8001df4:	4801      	ldr	r0, [pc, #4]	@ (8001dfc <JPEG_IRQHandler+0x8>)
 8001df6:	f003 bd63 	b.w	80058c0 <HAL_JPEG_IRQHandler>
 8001dfa:	bf00      	nop
 8001dfc:	24000148 	.word	0x24000148

08001e00 <MDMA_IRQHandler>:
}

void MDMA_IRQHandler()
{
 8001e00:	b510      	push	{r4, lr}
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8001e02:	4c04      	ldr	r4, [pc, #16]	@ (8001e14 <MDMA_IRQHandler+0x14>)
 8001e04:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001e06:	f003 fea9 	bl	8005b5c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8001e0a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8001e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8001e10:	f003 bea4 	b.w	8005b5c <HAL_MDMA_IRQHandler>
 8001e14:	24000148 	.word	0x24000148

08001e18 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler()
{

	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e18:	4801      	ldr	r0, [pc, #4]	@ (8001e20 <DMA1_Stream0_IRQHandler+0x8>)
 8001e1a:	f001 ba75 	b.w	8003308 <HAL_DMA_IRQHandler>
 8001e1e:	bf00      	nop
 8001e20:	240001a0 	.word	0x240001a0

08001e24 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e24:	4801      	ldr	r0, [pc, #4]	@ (8001e2c <SPI1_IRQHandler+0x8>)
 8001e26:	f007 bb5f 	b.w	80094e8 <HAL_SPI_IRQHandler>
 8001e2a:	bf00      	nop
 8001e2c:	24000218 	.word	0x24000218

08001e30 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f001 bfdf 	b.w	8003df4 <HAL_GPIO_EXTI_IRQHandler>
 8001e36:	bf00      	nop

08001e38 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f001 bfdb 	b.w	8003df4 <HAL_GPIO_EXTI_IRQHandler>
 8001e3e:	bf00      	nop

08001e40 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 8001e40:	2004      	movs	r0, #4
 8001e42:	f001 bfd7 	b.w	8003df4 <HAL_GPIO_EXTI_IRQHandler>
 8001e46:	bf00      	nop

08001e48 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	490d      	ldr	r1, [pc, #52]	@ (8001e80 <_sbrk+0x38>)
{
 8001e4a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001e4e:	6808      	ldr	r0, [r1, #0]
{
 8001e50:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e52:	4c0d      	ldr	r4, [pc, #52]	@ (8001e88 <_sbrk+0x40>)
 8001e54:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001e56:	b120      	cbz	r0, 8001e62 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e58:	4403      	add	r3, r0
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d807      	bhi.n	8001e6e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e5e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001e60:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e62:	4c0a      	ldr	r4, [pc, #40]	@ (8001e8c <_sbrk+0x44>)
 8001e64:	4620      	mov	r0, r4
 8001e66:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001e68:	4403      	add	r3, r0
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d9f7      	bls.n	8001e5e <_sbrk+0x16>
    errno = ENOMEM;
 8001e6e:	f00a fc89 	bl	800c784 <__errno>
 8001e72:	220c      	movs	r2, #12
 8001e74:	4603      	mov	r3, r0
    return (void *)-1;
 8001e76:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	bf00      	nop
 8001e80:	240759d4 	.word	0x240759d4
 8001e84:	24100000 	.word	0x24100000
 8001e88:	00000800 	.word	0x00000800
 8001e8c:	24075b60 	.word	0x24075b60

08001e90 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e90:	4922      	ldr	r1, [pc, #136]	@ (8001f1c <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e92:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e94:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001e9c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d805      	bhi.n	8001eb8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eac:	6813      	ldr	r3, [r2, #0]
 8001eae:	f023 030f 	bic.w	r3, r3, #15
 8001eb2:	f043 0303 	orr.w	r3, r3, #3
 8001eb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001eba:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f28 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8001ebe:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ec0:	4817      	ldr	r0, [pc, #92]	@ (8001f20 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8001ec2:	f041 0101 	orr.w	r1, r1, #1
 8001ec6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001ec8:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	400a      	ands	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ed0:	6803      	ldr	r3, [r0, #0]
 8001ed2:	f013 0f0c 	tst.w	r3, #12
 8001ed6:	d005      	beq.n	8001ee4 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ed8:	6803      	ldr	r3, [r0, #0]
 8001eda:	f023 030f 	bic.w	r3, r3, #15
 8001ede:	f043 0303 	orr.w	r3, r3, #3
 8001ee2:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <SystemInit+0x94>)
 8001ee6:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ee8:	4910      	ldr	r1, [pc, #64]	@ (8001f2c <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001eea:	4c11      	ldr	r4, [pc, #68]	@ (8001f30 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001eec:	4811      	ldr	r0, [pc, #68]	@ (8001f34 <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 8001eee:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8001ef0:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8001ef2:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001ef4:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ef6:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001efa:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001efc:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001efe:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001f00:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001f02:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001f04:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001f06:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8001f08:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f0a:	480b      	ldr	r0, [pc, #44]	@ (8001f38 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8001f0c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001f10:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001f12:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f14:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00
 8001f20:	52002000 	.word	0x52002000
 8001f24:	58024400 	.word	0x58024400
 8001f28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f2c:	01010280 	.word	0x01010280
 8001f30:	02020200 	.word	0x02020200
 8001f34:	01ff0000 	.word	0x01ff0000
 8001f38:	52004000 	.word	0x52004000

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f40:	f7ff ffa6 	bl	8001e90 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f46:	490d      	ldr	r1, [pc, #52]	@ (8001f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f00a fc11 	bl	800c790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7ff fac1 	bl	80014f4 <main>
  bx  lr
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f7c:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001f80:	0800d438 	.word	0x0800d438
  ldr r2, =_sbss
 8001f84:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8001f88:	24075b5c 	.word	0x24075b5c

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <HAL_InitTick+0x40>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b90b      	cbnz	r3, 8001f9a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001f96:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001f98:	4770      	bx	lr
{
 8001f9a:	b510      	push	{r4, lr}
 8001f9c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <HAL_InitTick+0x44>)
 8001fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa8:	6810      	ldr	r0, [r2, #0]
 8001faa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fae:	f000 f8e9 	bl	8002184 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	b908      	cbnz	r0, 8001fb8 <HAL_InitTick+0x28>
 8001fb4:	2c0f      	cmp	r4, #15
 8001fb6:	d901      	bls.n	8001fbc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001fb8:	2001      	movs	r0, #1
}
 8001fba:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f000 f870 	bl	80020a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <HAL_InitTick+0x48>)
 8001fca:	2000      	movs	r0, #0
 8001fcc:	601c      	str	r4, [r3, #0]
}
 8001fce:	bd10      	pop	{r4, pc}
 8001fd0:	2400000c 	.word	0x2400000c
 8001fd4:	24000008 	.word	0x24000008
 8001fd8:	24000010 	.word	0x24000010

08001fdc <HAL_Init>:
{
 8001fdc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fde:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001fe0:	4c12      	ldr	r4, [pc, #72]	@ (800202c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe2:	f000 f84f 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001fe6:	f004 f9f1 	bl	80063cc <HAL_RCC_GetSysClockFreq>
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_Init+0x54>)
 8001fec:	4911      	ldr	r1, [pc, #68]	@ (8002034 <HAL_Init+0x58>)
 8001fee:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ff0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ff2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ff6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ffa:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ffc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ffe:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8002002:	490d      	ldr	r1, [pc, #52]	@ (8002038 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002004:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002008:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800200a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800200e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002010:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002012:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002014:	f7ff ffbc 	bl	8001f90 <HAL_InitTick>
 8002018:	b110      	cbz	r0, 8002020 <HAL_Init+0x44>
    return HAL_ERROR;
 800201a:	2401      	movs	r4, #1
}
 800201c:	4620      	mov	r0, r4
 800201e:	bd10      	pop	{r4, pc}
 8002020:	4604      	mov	r4, r0
  HAL_MspInit();
 8002022:	f7ff fcf3 	bl	8001a0c <HAL_MspInit>
}
 8002026:	4620      	mov	r0, r4
 8002028:	bd10      	pop	{r4, pc}
 800202a:	bf00      	nop
 800202c:	24000004 	.word	0x24000004
 8002030:	58024400 	.word	0x58024400
 8002034:	0800d0d8 	.word	0x0800d0d8
 8002038:	24000008 	.word	0x24000008

0800203c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800203c:	4a03      	ldr	r2, [pc, #12]	@ (800204c <HAL_IncTick+0x10>)
 800203e:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <HAL_IncTick+0x14>)
 8002040:	6811      	ldr	r1, [r2, #0]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	440b      	add	r3, r1
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	240759d8 	.word	0x240759d8
 8002050:	2400000c 	.word	0x2400000c

08002054 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002054:	4b01      	ldr	r3, [pc, #4]	@ (800205c <HAL_GetTick+0x8>)
 8002056:	6818      	ldr	r0, [r3, #0]
}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	240759d8 	.word	0x240759d8

08002060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fff6 	bl	8002054 <HAL_GetTick>
 8002068:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	1c63      	adds	r3, r4, #1
 800206c:	d002      	beq.n	8002074 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <HAL_Delay+0x20>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002074:	f7ff ffee 	bl	8002054 <HAL_GetTick>
 8002078:	1b40      	subs	r0, r0, r5
 800207a:	42a0      	cmp	r0, r4
 800207c:	d3fa      	bcc.n	8002074 <HAL_Delay+0x14>
  {
  }
}
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	2400000c 	.word	0x2400000c

08002084 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002094:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800209a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800209c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00
 80020a4:	05fa0000 	.word	0x05fa0000

080020a8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <HAL_NVIC_SetPriority+0x6c>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ba:	f1be 0f04 	cmp.w	lr, #4
 80020be:	bf28      	it	cs
 80020c0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c4:	f1bc 0f06 	cmp.w	ip, #6
 80020c8:	d91a      	bls.n	8002100 <HAL_NVIC_SetPriority+0x58>
 80020ca:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	fa03 f30c 	lsl.w	r3, r3, ip
 80020d6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80020de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	fa03 f30e 	lsl.w	r3, r3, lr
 80020e4:	ea21 0303 	bic.w	r3, r1, r3
 80020e8:	fa03 f30c 	lsl.w	r3, r3, ip
 80020ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80020f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80020f6:	db06      	blt.n	8002106 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	4a07      	ldr	r2, [pc, #28]	@ (8002118 <HAL_NVIC_SetPriority+0x70>)
 80020fa:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002100:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	4694      	mov	ip, r2
 8002104:	e7e9      	b.n	80020da <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	f000 000f 	and.w	r0, r0, #15
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_NVIC_SetPriority+0x74>)
 800210c:	5413      	strb	r3, [r2, r0]
 800210e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00
 8002118:	e000e400 	.word	0xe000e400
 800211c:	e000ed14 	.word	0xe000ed14

08002120 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002120:	2800      	cmp	r0, #0
 8002122:	db07      	blt.n	8002134 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002124:	2301      	movs	r3, #1
 8002126:	f000 011f 	and.w	r1, r0, #31
 800212a:	4a03      	ldr	r2, [pc, #12]	@ (8002138 <HAL_NVIC_EnableIRQ+0x18>)
 800212c:	0940      	lsrs	r0, r0, #5
 800212e:	408b      	lsls	r3, r1
 8002130:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800213c:	2800      	cmp	r0, #0
 800213e:	db0c      	blt.n	800215a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002140:	0943      	lsrs	r3, r0, #5
 8002142:	2201      	movs	r2, #1
 8002144:	f000 001f 	and.w	r0, r0, #31
 8002148:	4904      	ldr	r1, [pc, #16]	@ (800215c <HAL_NVIC_DisableIRQ+0x20>)
 800214a:	3320      	adds	r3, #32
 800214c:	4082      	lsls	r2, r0
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002152:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002156:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100

08002160 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8002160:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002164:	4905      	ldr	r1, [pc, #20]	@ (800217c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002168:	68ca      	ldr	r2, [r1, #12]
 800216a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800216e:	4313      	orrs	r3, r2
 8002170:	60cb      	str	r3, [r1, #12]
 8002172:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002176:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002178:	e7fd      	b.n	8002176 <HAL_NVIC_SystemReset+0x16>
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	05fa0004 	.word	0x05fa0004

08002184 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	1e43      	subs	r3, r0, #1
 8002186:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800218a:	d301      	bcc.n	8002190 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800218e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002190:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	4905      	ldr	r1, [pc, #20]	@ (80021ac <HAL_SYSTICK_Config+0x28>)
 8002198:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021b0:	4936      	ldr	r1, [pc, #216]	@ (800228c <DMA_CalcBaseAndBitshift+0xdc>)
{
 80021b2:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021b4:	6803      	ldr	r3, [r0, #0]
 80021b6:	428b      	cmp	r3, r1
 80021b8:	d033      	beq.n	8002222 <DMA_CalcBaseAndBitshift+0x72>
 80021ba:	3118      	adds	r1, #24
 80021bc:	1a59      	subs	r1, r3, r1
 80021be:	fab1 f181 	clz	r1, r1
 80021c2:	0949      	lsrs	r1, r1, #5
 80021c4:	bb69      	cbnz	r1, 8002222 <DMA_CalcBaseAndBitshift+0x72>
 80021c6:	4832      	ldr	r0, [pc, #200]	@ (8002290 <DMA_CalcBaseAndBitshift+0xe0>)
 80021c8:	4283      	cmp	r3, r0
 80021ca:	d03e      	beq.n	800224a <DMA_CalcBaseAndBitshift+0x9a>
 80021cc:	3018      	adds	r0, #24
 80021ce:	4283      	cmp	r3, r0
 80021d0:	d03e      	beq.n	8002250 <DMA_CalcBaseAndBitshift+0xa0>
 80021d2:	3018      	adds	r0, #24
 80021d4:	4283      	cmp	r3, r0
 80021d6:	d034      	beq.n	8002242 <DMA_CalcBaseAndBitshift+0x92>
 80021d8:	3018      	adds	r0, #24
 80021da:	4283      	cmp	r3, r0
 80021dc:	d03b      	beq.n	8002256 <DMA_CalcBaseAndBitshift+0xa6>
 80021de:	3018      	adds	r0, #24
 80021e0:	4283      	cmp	r3, r0
 80021e2:	d03e      	beq.n	8002262 <DMA_CalcBaseAndBitshift+0xb2>
 80021e4:	3018      	adds	r0, #24
 80021e6:	4283      	cmp	r3, r0
 80021e8:	d02a      	beq.n	8002240 <DMA_CalcBaseAndBitshift+0x90>
 80021ea:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80021ee:	4283      	cmp	r3, r0
 80021f0:	d035      	beq.n	800225e <DMA_CalcBaseAndBitshift+0xae>
 80021f2:	4928      	ldr	r1, [pc, #160]	@ (8002294 <DMA_CalcBaseAndBitshift+0xe4>)
 80021f4:	428b      	cmp	r3, r1
 80021f6:	d031      	beq.n	800225c <DMA_CalcBaseAndBitshift+0xac>
 80021f8:	3118      	adds	r1, #24
 80021fa:	428b      	cmp	r3, r1
 80021fc:	d034      	beq.n	8002268 <DMA_CalcBaseAndBitshift+0xb8>
 80021fe:	3118      	adds	r1, #24
 8002200:	428b      	cmp	r3, r1
 8002202:	d034      	beq.n	800226e <DMA_CalcBaseAndBitshift+0xbe>
 8002204:	3118      	adds	r1, #24
 8002206:	428b      	cmp	r3, r1
 8002208:	d034      	beq.n	8002274 <DMA_CalcBaseAndBitshift+0xc4>
 800220a:	3118      	adds	r1, #24
 800220c:	428b      	cmp	r3, r1
 800220e:	d034      	beq.n	800227a <DMA_CalcBaseAndBitshift+0xca>
 8002210:	3118      	adds	r1, #24
 8002212:	428b      	cmp	r3, r1
 8002214:	d034      	beq.n	8002280 <DMA_CalcBaseAndBitshift+0xd0>
 8002216:	3118      	adds	r1, #24
 8002218:	428b      	cmp	r3, r1
 800221a:	d034      	beq.n	8002286 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800221c:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8002220:	e011      	b.n	8002246 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002222:	b2db      	uxtb	r3, r3
 8002224:	491c      	ldr	r1, [pc, #112]	@ (8002298 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002226:	481d      	ldr	r0, [pc, #116]	@ (800229c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002228:	3b10      	subs	r3, #16
 800222a:	fba1 1303 	umull	r1, r3, r1, r3
{
 800222e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002230:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002232:	4c1b      	ldr	r4, [pc, #108]	@ (80022a0 <DMA_CalcBaseAndBitshift+0xf0>)
 8002234:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8002236:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800223a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 800223e:	4770      	bx	lr
 8002240:	2116      	movs	r1, #22
 8002242:	4818      	ldr	r0, [pc, #96]	@ (80022a4 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002244:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002246:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8002248:	4770      	bx	lr
 800224a:	2110      	movs	r1, #16
 800224c:	4813      	ldr	r0, [pc, #76]	@ (800229c <DMA_CalcBaseAndBitshift+0xec>)
 800224e:	e7f9      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 8002250:	2116      	movs	r1, #22
 8002252:	4812      	ldr	r0, [pc, #72]	@ (800229c <DMA_CalcBaseAndBitshift+0xec>)
 8002254:	e7f6      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 8002256:	2106      	movs	r1, #6
 8002258:	4812      	ldr	r0, [pc, #72]	@ (80022a4 <DMA_CalcBaseAndBitshift+0xf4>)
 800225a:	e7f3      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 800225c:	2106      	movs	r1, #6
 800225e:	4812      	ldr	r0, [pc, #72]	@ (80022a8 <DMA_CalcBaseAndBitshift+0xf8>)
 8002260:	e7f0      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 8002262:	2110      	movs	r1, #16
 8002264:	480f      	ldr	r0, [pc, #60]	@ (80022a4 <DMA_CalcBaseAndBitshift+0xf4>)
 8002266:	e7ed      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 8002268:	2110      	movs	r1, #16
 800226a:	480f      	ldr	r0, [pc, #60]	@ (80022a8 <DMA_CalcBaseAndBitshift+0xf8>)
 800226c:	e7ea      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 800226e:	2116      	movs	r1, #22
 8002270:	480d      	ldr	r0, [pc, #52]	@ (80022a8 <DMA_CalcBaseAndBitshift+0xf8>)
 8002272:	e7e7      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 8002274:	2100      	movs	r1, #0
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <DMA_CalcBaseAndBitshift+0xfc>)
 8002278:	e7e4      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 800227a:	2106      	movs	r1, #6
 800227c:	480b      	ldr	r0, [pc, #44]	@ (80022ac <DMA_CalcBaseAndBitshift+0xfc>)
 800227e:	e7e1      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 8002280:	2110      	movs	r1, #16
 8002282:	480a      	ldr	r0, [pc, #40]	@ (80022ac <DMA_CalcBaseAndBitshift+0xfc>)
 8002284:	e7de      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 8002286:	2116      	movs	r1, #22
 8002288:	4808      	ldr	r0, [pc, #32]	@ (80022ac <DMA_CalcBaseAndBitshift+0xfc>)
 800228a:	e7db      	b.n	8002244 <DMA_CalcBaseAndBitshift+0x94>
 800228c:	40020010 	.word	0x40020010
 8002290:	40020040 	.word	0x40020040
 8002294:	40020428 	.word	0x40020428
 8002298:	aaaaaaab 	.word	0xaaaaaaab
 800229c:	40020000 	.word	0x40020000
 80022a0:	0800d0e8 	.word	0x0800d0e8
 80022a4:	40020004 	.word	0x40020004
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020404 	.word	0x40020404

080022b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80022b0:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022b2:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80022b4:	4927      	ldr	r1, [pc, #156]	@ (8002354 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80022b6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022b8:	4d27      	ldr	r5, [pc, #156]	@ (8002358 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80022ba:	4c28      	ldr	r4, [pc, #160]	@ (800235c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80022bc:	42aa      	cmp	r2, r5
 80022be:	bf18      	it	ne
 80022c0:	429a      	cmpne	r2, r3
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	428a      	cmp	r2, r1
 80022ca:	bf08      	it	eq
 80022cc:	f043 0301 	orreq.w	r3, r3, #1
 80022d0:	3128      	adds	r1, #40	@ 0x28
 80022d2:	42a2      	cmp	r2, r4
 80022d4:	bf08      	it	eq
 80022d6:	f043 0301 	orreq.w	r3, r3, #1
 80022da:	3428      	adds	r4, #40	@ 0x28
 80022dc:	428a      	cmp	r2, r1
 80022de:	bf08      	it	eq
 80022e0:	f043 0301 	orreq.w	r3, r3, #1
 80022e4:	3128      	adds	r1, #40	@ 0x28
 80022e6:	42a2      	cmp	r2, r4
 80022e8:	bf08      	it	eq
 80022ea:	f043 0301 	orreq.w	r3, r3, #1
 80022ee:	428a      	cmp	r2, r1
 80022f0:	bf08      	it	eq
 80022f2:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80022f6:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022f8:	b913      	cbnz	r3, 8002300 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 80022fa:	4b19      	ldr	r3, [pc, #100]	@ (8002360 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d112      	bne.n	8002326 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002300:	f1a1 0308 	sub.w	r3, r1, #8
 8002304:	4917      	ldr	r1, [pc, #92]	@ (8002364 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002306:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002308:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800230c:	2101      	movs	r1, #1
 800230e:	4c17      	ldr	r4, [pc, #92]	@ (800236c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002310:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002314:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002318:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800231a:	4099      	lsls	r1, r3
 800231c:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800231e:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002322:	bc30      	pop	{r4, r5}
 8002324:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002326:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800232a:	4911      	ldr	r1, [pc, #68]	@ (8002370 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800232c:	4c11      	ldr	r4, [pc, #68]	@ (8002374 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800232e:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002330:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002334:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002336:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800233a:	d800      	bhi.n	800233e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800233c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800233e:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002340:	f003 041f 	and.w	r4, r3, #31
 8002344:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002346:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002348:	40a1      	lsls	r1, r4
 800234a:	4c0c      	ldr	r4, [pc, #48]	@ (800237c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800234c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800234e:	e7e5      	b.n	800231c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8002350:	58025408 	.word	0x58025408
 8002354:	58025430 	.word	0x58025430
 8002358:	5802541c 	.word	0x5802541c
 800235c:	58025444 	.word	0x58025444
 8002360:	58025494 	.word	0x58025494
 8002364:	cccccccd 	.word	0xcccccccd
 8002368:	16009600 	.word	0x16009600
 800236c:	58025880 	.word	0x58025880
 8002370:	bffdfbf0 	.word	0xbffdfbf0
 8002374:	aaaaaaab 	.word	0xaaaaaaab
 8002378:	10008200 	.word	0x10008200
 800237c:	40020880 	.word	0x40020880

08002380 <HAL_DMA_Init>:
{
 8002380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002384:	4605      	mov	r5, r0
 8002386:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff fe64 	bl	8002054 <HAL_GetTick>
  if(hdma == NULL)
 800238c:	2d00      	cmp	r5, #0
 800238e:	f000 8237 	beq.w	8002800 <HAL_DMA_Init+0x480>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002392:	4e8e      	ldr	r6, [pc, #568]	@ (80025cc <HAL_DMA_Init+0x24c>)
 8002394:	4607      	mov	r7, r0
 8002396:	682c      	ldr	r4, [r5, #0]
 8002398:	4b8d      	ldr	r3, [pc, #564]	@ (80025d0 <HAL_DMA_Init+0x250>)
 800239a:	429c      	cmp	r4, r3
 800239c:	bf18      	it	ne
 800239e:	42b4      	cmpne	r4, r6
 80023a0:	bf0c      	ite	eq
 80023a2:	2601      	moveq	r6, #1
 80023a4:	2600      	movne	r6, #0
 80023a6:	f040 8129 	bne.w	80025fc <HAL_DMA_Init+0x27c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80023b0:	2300      	movs	r3, #0
 80023b2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	e006      	b.n	80023ce <HAL_DMA_Init+0x4e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c0:	f7ff fe48 	bl	8002054 <HAL_GetTick>
 80023c4:	1bc0      	subs	r0, r0, r7
 80023c6:	2805      	cmp	r0, #5
 80023c8:	f200 8215 	bhi.w	80027f6 <HAL_DMA_Init+0x476>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023cc:	682c      	ldr	r4, [r5, #0]
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	07de      	lsls	r6, r3, #31
 80023d2:	d4f5      	bmi.n	80023c0 <HAL_DMA_Init+0x40>
    registerValue |=  hdma->Init.Direction           |
 80023d4:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 80023da:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023dc:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023de:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6969      	ldr	r1, [r5, #20]
 80023e4:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	69e9      	ldr	r1, [r5, #28]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ec:	4979      	ldr	r1, [pc, #484]	@ (80025d4 <HAL_DMA_Init+0x254>)
 80023ee:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	6a28      	ldr	r0, [r5, #32]
 80023f2:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 80023f4:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80023f8:	2904      	cmp	r1, #4
 80023fa:	d103      	bne.n	8002404 <HAL_DMA_Init+0x84>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023fc:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 8002400:	4330      	orrs	r0, r6
 8002402:	4303      	orrs	r3, r0
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002404:	6868      	ldr	r0, [r5, #4]
 8002406:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 800240a:	2e1f      	cmp	r6, #31
 800240c:	f240 81fc 	bls.w	8002808 <HAL_DMA_Init+0x488>
 8002410:	f1a0 064f 	sub.w	r6, r0, #79	@ 0x4f
 8002414:	2e03      	cmp	r6, #3
 8002416:	f200 820e 	bhi.w	8002836 <HAL_DMA_Init+0x4b6>
        registerValue |= DMA_SxCR_TRBUFF;
 800241a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800241e:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002420:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002422:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002424:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002428:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242c:	d10d      	bne.n	800244a <HAL_DMA_Init+0xca>
      registerValue |= hdma->Init.FIFOThreshold;
 800242e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002430:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002432:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002434:	b148      	cbz	r0, 800244a <HAL_DMA_Init+0xca>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002436:	2a00      	cmp	r2, #0
 8002438:	f040 81ec 	bne.w	8002814 <HAL_DMA_Init+0x494>
    switch (hdma->Init.FIFOThreshold)
 800243c:	2901      	cmp	r1, #1
 800243e:	f000 820d 	beq.w	800285c <HAL_DMA_Init+0x4dc>
 8002442:	f031 0202 	bics.w	r2, r1, #2
 8002446:	f000 81ed 	beq.w	8002824 <HAL_DMA_Init+0x4a4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800244a:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244c:	4628      	mov	r0, r5
 800244e:	f7ff feaf 	bl	80021b0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002452:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002454:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002456:	4e5e      	ldr	r6, [pc, #376]	@ (80025d0 <HAL_DMA_Init+0x250>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002458:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800245c:	4f5e      	ldr	r7, [pc, #376]	@ (80025d8 <HAL_DMA_Init+0x258>)
 800245e:	495f      	ldr	r1, [pc, #380]	@ (80025dc <HAL_DMA_Init+0x25c>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002460:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002462:	4a5f      	ldr	r2, [pc, #380]	@ (80025e0 <HAL_DMA_Init+0x260>)
 8002464:	1a61      	subs	r1, r4, r1
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002466:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002468:	1aa2      	subs	r2, r4, r2
 800246a:	4b58      	ldr	r3, [pc, #352]	@ (80025cc <HAL_DMA_Init+0x24c>)
 800246c:	fab1 f181 	clz	r1, r1
 8002470:	485c      	ldr	r0, [pc, #368]	@ (80025e4 <HAL_DMA_Init+0x264>)
 8002472:	fab2 f282 	clz	r2, r2
 8002476:	429c      	cmp	r4, r3
 8002478:	bf18      	it	ne
 800247a:	42b4      	cmpne	r4, r6
 800247c:	eba4 0307 	sub.w	r3, r4, r7
 8002480:	eba4 0900 	sub.w	r9, r4, r0
 8002484:	f100 0014 	add.w	r0, r0, #20
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	bf08      	it	eq
 800248e:	2601      	moveq	r6, #1
 8002490:	eba4 0a00 	sub.w	sl, r4, r0
 8002494:	fab9 f989 	clz	r9, r9
 8002498:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800249c:	bf18      	it	ne
 800249e:	2600      	movne	r6, #0
 80024a0:	faba fa8a 	clz	sl, sl
 80024a4:	0952      	lsrs	r2, r2, #5
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	0949      	lsrs	r1, r1, #5
 80024aa:	4b4f      	ldr	r3, [pc, #316]	@ (80025e8 <HAL_DMA_Init+0x268>)
 80024ac:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80024b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80024b4:	eba4 0b03 	sub.w	fp, r4, r3
 80024b8:	3328      	adds	r3, #40	@ 0x28
 80024ba:	eba4 0803 	sub.w	r8, r4, r3
 80024be:	3328      	adds	r3, #40	@ 0x28
 80024c0:	fabb fb8b 	clz	fp, fp
 80024c4:	1ae3      	subs	r3, r4, r3
 80024c6:	fab8 f888 	clz	r8, r8
 80024ca:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	430b      	orrs	r3, r1
 80024da:	ea4b 0b03 	orr.w	fp, fp, r3
 80024de:	9b00      	ldr	r3, [sp, #0]
 80024e0:	ea4a 0a0b 	orr.w	sl, sl, fp
 80024e4:	ea49 090a 	orr.w	r9, r9, sl
 80024e8:	ea48 0809 	orr.w	r8, r8, r9
 80024ec:	ea43 0708 	orr.w	r7, r3, r8
 80024f0:	4317      	orrs	r7, r2
 80024f2:	4a3e      	ldr	r2, [pc, #248]	@ (80025ec <HAL_DMA_Init+0x26c>)
 80024f4:	ea47 0306 	orr.w	r3, r7, r6
 80024f8:	4294      	cmp	r4, r2
 80024fa:	bf08      	it	eq
 80024fc:	f043 0301 	orreq.w	r3, r3, #1
 8002500:	3218      	adds	r2, #24
 8002502:	4294      	cmp	r4, r2
 8002504:	bf08      	it	eq
 8002506:	f043 0301 	orreq.w	r3, r3, #1
 800250a:	3218      	adds	r2, #24
 800250c:	4294      	cmp	r4, r2
 800250e:	bf08      	it	eq
 8002510:	f043 0301 	orreq.w	r3, r3, #1
 8002514:	3218      	adds	r2, #24
 8002516:	4294      	cmp	r4, r2
 8002518:	bf08      	it	eq
 800251a:	f043 0301 	orreq.w	r3, r3, #1
 800251e:	3218      	adds	r2, #24
 8002520:	4294      	cmp	r4, r2
 8002522:	bf08      	it	eq
 8002524:	f043 0301 	orreq.w	r3, r3, #1
 8002528:	3218      	adds	r2, #24
 800252a:	4294      	cmp	r4, r2
 800252c:	bf08      	it	eq
 800252e:	f043 0301 	orreq.w	r3, r3, #1
 8002532:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002536:	4294      	cmp	r4, r2
 8002538:	bf08      	it	eq
 800253a:	f043 0301 	orreq.w	r3, r3, #1
 800253e:	3218      	adds	r2, #24
 8002540:	4294      	cmp	r4, r2
 8002542:	bf08      	it	eq
 8002544:	f043 0301 	orreq.w	r3, r3, #1
 8002548:	3218      	adds	r2, #24
 800254a:	4294      	cmp	r4, r2
 800254c:	bf08      	it	eq
 800254e:	f043 0301 	orreq.w	r3, r3, #1
 8002552:	3218      	adds	r2, #24
 8002554:	4294      	cmp	r4, r2
 8002556:	bf08      	it	eq
 8002558:	f043 0301 	orreq.w	r3, r3, #1
 800255c:	3218      	adds	r2, #24
 800255e:	4294      	cmp	r4, r2
 8002560:	bf08      	it	eq
 8002562:	f043 0301 	orreq.w	r3, r3, #1
 8002566:	3218      	adds	r2, #24
 8002568:	4294      	cmp	r4, r2
 800256a:	bf08      	it	eq
 800256c:	f043 0301 	orreq.w	r3, r3, #1
 8002570:	3218      	adds	r2, #24
 8002572:	4294      	cmp	r4, r2
 8002574:	bf08      	it	eq
 8002576:	f043 0301 	orreq.w	r3, r3, #1
 800257a:	b91b      	cbnz	r3, 8002584 <HAL_DMA_Init+0x204>
 800257c:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <HAL_DMA_Init+0x270>)
 800257e:	429c      	cmp	r4, r3
 8002580:	f040 8130 	bne.w	80027e4 <HAL_DMA_Init+0x464>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002584:	4628      	mov	r0, r5
 8002586:	f7ff fe93 	bl	80022b0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800258a:	68ab      	ldr	r3, [r5, #8]
 800258c:	2b80      	cmp	r3, #128	@ 0x80
 800258e:	f000 811e 	beq.w	80027ce <HAL_DMA_Init+0x44e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002592:	686b      	ldr	r3, [r5, #4]
 8002594:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8002596:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002598:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800259a:	600a      	str	r2, [r1, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800259c:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800259e:	e9d5 1019 	ldrd	r1, r0, [r5, #100]	@ 0x64
 80025a2:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025a4:	f200 811a 	bhi.w	80027dc <HAL_DMA_Init+0x45c>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80025a8:	1e50      	subs	r0, r2, #1
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025aa:	2f00      	cmp	r7, #0
 80025ac:	f000 815b 	beq.w	8002866 <HAL_DMA_Init+0x4e6>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80025b0:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_DMA_Init+0x274>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80025b2:	4911      	ldr	r1, [pc, #68]	@ (80025f8 <HAL_DMA_Init+0x278>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80025b4:	4413      	add	r3, r2
 80025b6:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80025b8:	2301      	movs	r3, #1
 80025ba:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025bc:	2000      	movs	r0, #0
 80025be:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80025c2:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025c4:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025c6:	604b      	str	r3, [r1, #4]
 80025c8:	e10c      	b.n	80027e4 <HAL_DMA_Init+0x464>
 80025ca:	bf00      	nop
 80025cc:	40020010 	.word	0x40020010
 80025d0:	40020028 	.word	0x40020028
 80025d4:	fe10803f 	.word	0xfe10803f
 80025d8:	58025494 	.word	0x58025494
 80025dc:	58025444 	.word	0x58025444
 80025e0:	5802541c 	.word	0x5802541c
 80025e4:	5802546c 	.word	0x5802546c
 80025e8:	58025408 	.word	0x58025408
 80025ec:	40020040 	.word	0x40020040
 80025f0:	400204b8 	.word	0x400204b8
 80025f4:	1600963f 	.word	0x1600963f
 80025f8:	58025940 	.word	0x58025940
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025fc:	3318      	adds	r3, #24
 80025fe:	429c      	cmp	r4, r3
 8002600:	f43f aed3 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 8002604:	3318      	adds	r3, #24
 8002606:	429c      	cmp	r4, r3
 8002608:	f43f aecf 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 800260c:	3318      	adds	r3, #24
 800260e:	429c      	cmp	r4, r3
 8002610:	f43f aecb 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 8002614:	3318      	adds	r3, #24
 8002616:	429c      	cmp	r4, r3
 8002618:	f43f aec7 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 800261c:	3318      	adds	r3, #24
 800261e:	429c      	cmp	r4, r3
 8002620:	f43f aec3 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 8002624:	3318      	adds	r3, #24
 8002626:	429c      	cmp	r4, r3
 8002628:	f43f aebf 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 800262c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002630:	429c      	cmp	r4, r3
 8002632:	f43f aeba 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 8002636:	3318      	adds	r3, #24
 8002638:	429c      	cmp	r4, r3
 800263a:	f43f aeb6 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 800263e:	3318      	adds	r3, #24
 8002640:	429c      	cmp	r4, r3
 8002642:	f43f aeb2 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 8002646:	3318      	adds	r3, #24
 8002648:	429c      	cmp	r4, r3
 800264a:	f43f aeae 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 800264e:	3318      	adds	r3, #24
 8002650:	429c      	cmp	r4, r3
 8002652:	f43f aeaa 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 8002656:	3318      	adds	r3, #24
 8002658:	429c      	cmp	r4, r3
 800265a:	f43f aea6 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 800265e:	3318      	adds	r3, #24
 8002660:	429c      	cmp	r4, r3
 8002662:	f43f aea2 	beq.w	80023aa <HAL_DMA_Init+0x2a>
 8002666:	3318      	adds	r3, #24
 8002668:	429c      	cmp	r4, r3
 800266a:	f43f ae9e 	beq.w	80023aa <HAL_DMA_Init+0x2a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800266e:	4b84      	ldr	r3, [pc, #528]	@ (8002880 <HAL_DMA_Init+0x500>)
 8002670:	4884      	ldr	r0, [pc, #528]	@ (8002884 <HAL_DMA_Init+0x504>)
 8002672:	eba4 0b03 	sub.w	fp, r4, r3
 8002676:	4b84      	ldr	r3, [pc, #528]	@ (8002888 <HAL_DMA_Init+0x508>)
 8002678:	4a84      	ldr	r2, [pc, #528]	@ (800288c <HAL_DMA_Init+0x50c>)
 800267a:	429c      	cmp	r4, r3
 800267c:	bf18      	it	ne
 800267e:	4284      	cmpne	r4, r0
 8002680:	f103 0314 	add.w	r3, r3, #20
 8002684:	fabb fb8b 	clz	fp, fp
 8002688:	eba4 0202 	sub.w	r2, r4, r2
 800268c:	bf0c      	ite	eq
 800268e:	2001      	moveq	r0, #1
 8002690:	2000      	movne	r0, #0
 8002692:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	429c      	cmp	r4, r3
 800269c:	bf08      	it	eq
 800269e:	f040 0001 	orreq.w	r0, r0, #1
 80026a2:	3314      	adds	r3, #20
 80026a4:	497a      	ldr	r1, [pc, #488]	@ (8002890 <HAL_DMA_Init+0x510>)
 80026a6:	0952      	lsrs	r2, r2, #5
 80026a8:	429c      	cmp	r4, r3
 80026aa:	bf08      	it	eq
 80026ac:	f040 0001 	orreq.w	r0, r0, #1
 80026b0:	3314      	adds	r3, #20
 80026b2:	1a61      	subs	r1, r4, r1
 80026b4:	4f77      	ldr	r7, [pc, #476]	@ (8002894 <HAL_DMA_Init+0x514>)
 80026b6:	429c      	cmp	r4, r3
 80026b8:	bf08      	it	eq
 80026ba:	f040 0001 	orreq.w	r0, r0, #1
 80026be:	3314      	adds	r3, #20
 80026c0:	fab1 f181 	clz	r1, r1
 80026c4:	eba4 0907 	sub.w	r9, r4, r7
 80026c8:	429c      	cmp	r4, r3
 80026ca:	bf08      	it	eq
 80026cc:	f040 0001 	orreq.w	r0, r0, #1
 80026d0:	3314      	adds	r3, #20
 80026d2:	3714      	adds	r7, #20
 80026d4:	0949      	lsrs	r1, r1, #5
 80026d6:	429c      	cmp	r4, r3
 80026d8:	bf08      	it	eq
 80026da:	f040 0001 	orreq.w	r0, r0, #1
 80026de:	3314      	adds	r3, #20
 80026e0:	eba4 0a07 	sub.w	sl, r4, r7
 80026e4:	fab9 f989 	clz	r9, r9
 80026e8:	429c      	cmp	r4, r3
 80026ea:	bf08      	it	eq
 80026ec:	f040 0001 	orreq.w	r0, r0, #1
 80026f0:	4b69      	ldr	r3, [pc, #420]	@ (8002898 <HAL_DMA_Init+0x518>)
 80026f2:	3714      	adds	r7, #20
 80026f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80026f8:	eba4 0803 	sub.w	r8, r4, r3
 80026fc:	ea4b 0000 	orr.w	r0, fp, r0
 8002700:	3328      	adds	r3, #40	@ 0x28
 8002702:	faba fa8a 	clz	sl, sl
 8002706:	fab8 f888 	clz	r8, r8
 800270a:	4310      	orrs	r0, r2
 800270c:	1ae3      	subs	r3, r4, r3
 800270e:	1be7      	subs	r7, r4, r7
 8002710:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800271c:	ea48 0000 	orr.w	r0, r8, r0
 8002720:	fab7 f787 	clz	r7, r7
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	4308      	orrs	r0, r1
 8002728:	097f      	lsrs	r7, r7, #5
 800272a:	4318      	orrs	r0, r3
 800272c:	9700      	str	r7, [sp, #0]
 800272e:	ea49 0000 	orr.w	r0, r9, r0
 8002732:	ea5a 0000 	orrs.w	r0, sl, r0
 8002736:	d102      	bne.n	800273e <HAL_DMA_Init+0x3be>
 8002738:	2f00      	cmp	r7, #0
 800273a:	f000 809b 	beq.w	8002874 <HAL_DMA_Init+0x4f4>
    hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	2002      	movs	r0, #2
 8002740:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002744:	2000      	movs	r0, #0
 8002746:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800274a:	4854      	ldr	r0, [pc, #336]	@ (800289c <HAL_DMA_Init+0x51c>)
 800274c:	4607      	mov	r7, r0
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800274e:	6820      	ldr	r0, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002750:	4038      	ands	r0, r7
 8002752:	4607      	mov	r7, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002754:	68a8      	ldr	r0, [r5, #8]
 8002756:	2840      	cmp	r0, #64	@ 0x40
 8002758:	f000 808a 	beq.w	8002870 <HAL_DMA_Init+0x4f0>
 800275c:	f1a0 0080 	sub.w	r0, r0, #128	@ 0x80
 8002760:	fab0 f080 	clz	r0, r0
 8002764:	0940      	lsrs	r0, r0, #5
 8002766:	0380      	lsls	r0, r0, #14
 8002768:	9301      	str	r3, [sp, #4]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800276a:	692b      	ldr	r3, [r5, #16]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800276c:	f8df e140 	ldr.w	lr, [pc, #320]	@ 80028b0 <HAL_DMA_Init+0x530>
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002770:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002774:	68eb      	ldr	r3, [r5, #12]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002776:	44a6      	add	lr, r4
 8002778:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 800277c:	696b      	ldr	r3, [r5, #20]
 800277e:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8002782:	69ab      	ldr	r3, [r5, #24]
 8002784:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8002788:	69eb      	ldr	r3, [r5, #28]
 800278a:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 800278e:	6a2b      	ldr	r3, [r5, #32]
 8002790:	ea4c 1c13 	orr.w	ip, ip, r3, lsr #4
 8002794:	ea4c 0c07 	orr.w	ip, ip, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002798:	ea40 000c 	orr.w	r0, r0, ip
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800279c:	6020      	str	r0, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800279e:	4840      	ldr	r0, [pc, #256]	@ (80028a0 <HAL_DMA_Init+0x520>)
 80027a0:	fba0 c00e 	umull	ip, r0, r0, lr
 80027a4:	0900      	lsrs	r0, r0, #4
 80027a6:	0080      	lsls	r0, r0, #2
 80027a8:	65e8      	str	r0, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027aa:	4628      	mov	r0, r5
 80027ac:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80027b0:	f7ff fcfe 	bl	80021b0 <DMA_CalcBaseAndBitshift>
 80027b4:	4684      	mov	ip, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027b6:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 80027b8:	9b01      	ldr	r3, [sp, #4]
 80027ba:	f000 0e1f 	and.w	lr, r0, #31
 80027be:	2001      	movs	r0, #1
 80027c0:	fa00 f00e 	lsl.w	r0, r0, lr
 80027c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80027c8:	f8cc 0004 	str.w	r0, [ip, #4]
 80027cc:	e684      	b.n	80024d8 <HAL_DMA_Init+0x158>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027ce:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d0:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80027d2:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027d6:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027d8:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027da:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80027e2:	676b      	str	r3, [r5, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e4:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80027e6:	2201      	movs	r2, #1
  return HAL_OK;
 80027e8:	4618      	mov	r0, r3
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ea:	656b      	str	r3, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80027ec:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
}
 80027f0:	b005      	add	sp, #20
 80027f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f6:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80027f8:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027fa:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80027fc:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002800:	2001      	movs	r0, #1
}
 8002802:	b005      	add	sp, #20
 8002804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002808:	4826      	ldr	r0, [pc, #152]	@ (80028a4 <HAL_DMA_Init+0x524>)
 800280a:	40f0      	lsrs	r0, r6
 800280c:	07c0      	lsls	r0, r0, #31
 800280e:	f53f ae04 	bmi.w	800241a <HAL_DMA_Init+0x9a>
 8002812:	e604      	b.n	800241e <HAL_DMA_Init+0x9e>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002814:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002818:	d012      	beq.n	8002840 <HAL_DMA_Init+0x4c0>
    switch (hdma->Init.FIFOThreshold)
 800281a:	2902      	cmp	r1, #2
 800281c:	d905      	bls.n	800282a <HAL_DMA_Init+0x4aa>
 800281e:	2903      	cmp	r1, #3
 8002820:	f47f ae13 	bne.w	800244a <HAL_DMA_Init+0xca>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002824:	01c2      	lsls	r2, r0, #7
 8002826:	f57f ae10 	bpl.w	800244a <HAL_DMA_Init+0xca>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800282a:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 800282c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800282e:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002830:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8002834:	e7e4      	b.n	8002800 <HAL_DMA_Init+0x480>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002836:	3874      	subs	r0, #116	@ 0x74
 8002838:	2803      	cmp	r0, #3
 800283a:	f67f adee 	bls.w	800241a <HAL_DMA_Init+0x9a>
 800283e:	e5ee      	b.n	800241e <HAL_DMA_Init+0x9e>
    switch (hdma->Init.FIFOThreshold)
 8002840:	2903      	cmp	r1, #3
 8002842:	f63f ae02 	bhi.w	800244a <HAL_DMA_Init+0xca>
 8002846:	a201      	add	r2, pc, #4	@ (adr r2, 800284c <HAL_DMA_Init+0x4cc>)
 8002848:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800284c:	0800282b 	.word	0x0800282b
 8002850:	08002825 	.word	0x08002825
 8002854:	0800282b 	.word	0x0800282b
 8002858:	0800285d 	.word	0x0800285d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800285c:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8002860:	f47f adf3 	bne.w	800244a <HAL_DMA_Init+0xca>
 8002864:	e7e1      	b.n	800282a <HAL_DMA_Init+0x4aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_DMA_Init+0x528>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002868:	4910      	ldr	r1, [pc, #64]	@ (80028ac <HAL_DMA_Init+0x52c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800286a:	4413      	add	r3, r2
 800286c:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800286e:	e6a3      	b.n	80025b8 <HAL_DMA_Init+0x238>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002870:	2010      	movs	r0, #16
 8002872:	e779      	b.n	8002768 <HAL_DMA_Init+0x3e8>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002874:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002876:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002878:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800287a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 800287e:	e7bf      	b.n	8002800 <HAL_DMA_Init+0x480>
 8002880:	58025408 	.word	0x58025408
 8002884:	48022c08 	.word	0x48022c08
 8002888:	48022c1c 	.word	0x48022c1c
 800288c:	5802541c 	.word	0x5802541c
 8002890:	58025444 	.word	0x58025444
 8002894:	5802546c 	.word	0x5802546c
 8002898:	58025430 	.word	0x58025430
 800289c:	fffe000f 	.word	0xfffe000f
 80028a0:	cccccccd 	.word	0xcccccccd
 80028a4:	c3c0003f 	.word	0xc3c0003f
 80028a8:	1000823f 	.word	0x1000823f
 80028ac:	40020940 	.word	0x40020940
 80028b0:	a7fdabf8 	.word	0xa7fdabf8

080028b4 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80028b4:	2800      	cmp	r0, #0
 80028b6:	f000 8267 	beq.w	8002d88 <HAL_DMA_Start_IT+0x4d4>
{
 80028ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hdma);
 80028be:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
{
 80028c2:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 80028c4:	2c01      	cmp	r4, #1
 80028c6:	f000 825b 	beq.w	8002d80 <HAL_DMA_Start_IT+0x4cc>
 80028ca:	2401      	movs	r4, #1
 80028cc:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d0:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80028d4:	2c01      	cmp	r4, #1
 80028d6:	d009      	beq.n	80028ec <HAL_DMA_Start_IT+0x38>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 80028dc:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028de:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80028e0:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
}
 80028e6:	b003      	add	sp, #12
 80028e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ec:	2402      	movs	r4, #2
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028ee:	4e87      	ldr	r6, [pc, #540]	@ (8002b0c <HAL_DMA_Start_IT+0x258>)
 80028f0:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 8002b14 <HAL_DMA_Start_IT+0x260>
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f4:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f8:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 80028fa:	4d85      	ldr	r5, [pc, #532]	@ (8002b10 <HAL_DMA_Start_IT+0x25c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fc:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80028fe:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002900:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8002b18 <HAL_DMA_Start_IT+0x264>
 8002904:	4544      	cmp	r4, r8
 8002906:	bf18      	it	ne
 8002908:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 800290a:	f8df c220 	ldr.w	ip, [pc, #544]	@ 8002b2c <HAL_DMA_Start_IT+0x278>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 8002910:	bf0c      	ite	eq
 8002912:	f04f 0b01 	moveq.w	fp, #1
 8002916:	f04f 0b00 	movne.w	fp, #0
 800291a:	9601      	str	r6, [sp, #4]
 800291c:	454c      	cmp	r4, r9
 800291e:	bf14      	ite	ne
 8002920:	46de      	movne	lr, fp
 8002922:	f04b 0e01 	orreq.w	lr, fp, #1
    __HAL_DMA_DISABLE(hdma);
 8002926:	42ac      	cmp	r4, r5
 8002928:	bf18      	it	ne
 800292a:	4564      	cmpne	r4, ip
 800292c:	bf0c      	ite	eq
 800292e:	2501      	moveq	r5, #1
 8002930:	2500      	movne	r5, #0
 8002932:	f040 80fd 	bne.w	8002b30 <HAL_DMA_Start_IT+0x27c>
 8002936:	f8d4 c000 	ldr.w	ip, [r4]
 800293a:	f02c 0c01 	bic.w	ip, ip, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800293e:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8002942:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002946:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800294a:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800294c:	f1bc 0f00 	cmp.w	ip, #0
 8002950:	d002      	beq.n	8002958 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002952:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8002956:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002958:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 800295a:	f04f 083f 	mov.w	r8, #63	@ 0x3f
 800295e:	9e01      	ldr	r6, [sp, #4]
 8002960:	f007 091f 	and.w	r9, r7, #31
 8002964:	fa08 f809 	lsl.w	r8, r8, r9
 8002968:	f8c6 8008 	str.w	r8, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800296c:	6827      	ldr	r7, [r4, #0]
 800296e:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8002972:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002974:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002976:	6883      	ldr	r3, [r0, #8]
 8002978:	2b40      	cmp	r3, #64	@ 0x40
 800297a:	f000 8207 	beq.w	8002d8c <HAL_DMA_Start_IT+0x4d8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800297e:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002980:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002982:	2d00      	cmp	r5, #0
 8002984:	f040 81e6 	bne.w	8002d54 <HAL_DMA_Start_IT+0x4a0>
 8002988:	4a62      	ldr	r2, [pc, #392]	@ (8002b14 <HAL_DMA_Start_IT+0x260>)
      if(hdma->XferHalfCpltCallback != NULL)
 800298a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800298c:	4294      	cmp	r4, r2
 800298e:	f000 8223 	beq.w	8002dd8 <HAL_DMA_Start_IT+0x524>
 8002992:	4a61      	ldr	r2, [pc, #388]	@ (8002b18 <HAL_DMA_Start_IT+0x264>)
 8002994:	4294      	cmp	r4, r2
 8002996:	f000 8251 	beq.w	8002e3c <HAL_DMA_Start_IT+0x588>
 800299a:	f1bb 0f00 	cmp.w	fp, #0
 800299e:	f040 820c 	bne.w	8002dba <HAL_DMA_Start_IT+0x506>
 80029a2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <HAL_DMA_Start_IT+0x268>)
      if(hdma->XferHalfCpltCallback != NULL)
 80029a4:	4619      	mov	r1, r3
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029a6:	4294      	cmp	r4, r2
 80029a8:	f000 8252 	beq.w	8002e50 <HAL_DMA_Start_IT+0x59c>
 80029ac:	4a5c      	ldr	r2, [pc, #368]	@ (8002b20 <HAL_DMA_Start_IT+0x26c>)
 80029ae:	4294      	cmp	r4, r2
 80029b0:	f000 8282 	beq.w	8002eb8 <HAL_DMA_Start_IT+0x604>
 80029b4:	3218      	adds	r2, #24
 80029b6:	4294      	cmp	r4, r2
 80029b8:	f000 829f 	beq.w	8002efa <HAL_DMA_Start_IT+0x646>
 80029bc:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80029c0:	4294      	cmp	r4, r2
 80029c2:	f000 82a7 	beq.w	8002f14 <HAL_DMA_Start_IT+0x660>
 80029c6:	4b57      	ldr	r3, [pc, #348]	@ (8002b24 <HAL_DMA_Start_IT+0x270>)
 80029c8:	429c      	cmp	r4, r3
 80029ca:	f000 8340 	beq.w	800304e <HAL_DMA_Start_IT+0x79a>
 80029ce:	3318      	adds	r3, #24
 80029d0:	429c      	cmp	r4, r3
 80029d2:	f000 8347 	beq.w	8003064 <HAL_DMA_Start_IT+0x7b0>
 80029d6:	3318      	adds	r3, #24
 80029d8:	429c      	cmp	r4, r3
 80029da:	f000 8357 	beq.w	800308c <HAL_DMA_Start_IT+0x7d8>
 80029de:	3318      	adds	r3, #24
 80029e0:	429c      	cmp	r4, r3
 80029e2:	f000 8370 	beq.w	80030c6 <HAL_DMA_Start_IT+0x812>
 80029e6:	3318      	adds	r3, #24
 80029e8:	429c      	cmp	r4, r3
 80029ea:	f000 839b 	beq.w	8003124 <HAL_DMA_Start_IT+0x870>
 80029ee:	3318      	adds	r3, #24
 80029f0:	429c      	cmp	r4, r3
 80029f2:	f000 83ad 	beq.w	8003150 <HAL_DMA_Start_IT+0x89c>
 80029f6:	3318      	adds	r3, #24
 80029f8:	429c      	cmp	r4, r3
 80029fa:	f000 83bf 	beq.w	800317c <HAL_DMA_Start_IT+0x8c8>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	f023 030e 	bic.w	r3, r3, #14
 8002a04:	f043 030a 	orr.w	r3, r3, #10
 8002a08:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	b119      	cbz	r1, 8002a14 <HAL_DMA_Start_IT+0x160>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a14:	4b42      	ldr	r3, [pc, #264]	@ (8002b20 <HAL_DMA_Start_IT+0x26c>)
 8002a16:	4a41      	ldr	r2, [pc, #260]	@ (8002b1c <HAL_DMA_Start_IT+0x268>)
 8002a18:	4294      	cmp	r4, r2
 8002a1a:	bf18      	it	ne
 8002a1c:	429c      	cmpne	r4, r3
 8002a1e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	4294      	cmp	r4, r2
 8002a2a:	bf08      	it	eq
 8002a2c:	f043 0301 	orreq.w	r3, r3, #1
 8002a30:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002a34:	4294      	cmp	r4, r2
 8002a36:	bf08      	it	eq
 8002a38:	f043 0301 	orreq.w	r3, r3, #1
 8002a3c:	3218      	adds	r2, #24
 8002a3e:	4294      	cmp	r4, r2
 8002a40:	bf08      	it	eq
 8002a42:	f043 0301 	orreq.w	r3, r3, #1
 8002a46:	3218      	adds	r2, #24
 8002a48:	4294      	cmp	r4, r2
 8002a4a:	bf08      	it	eq
 8002a4c:	f043 0301 	orreq.w	r3, r3, #1
 8002a50:	3218      	adds	r2, #24
 8002a52:	4294      	cmp	r4, r2
 8002a54:	bf08      	it	eq
 8002a56:	f043 0301 	orreq.w	r3, r3, #1
 8002a5a:	3218      	adds	r2, #24
 8002a5c:	4294      	cmp	r4, r2
 8002a5e:	bf08      	it	eq
 8002a60:	f043 0301 	orreq.w	r3, r3, #1
 8002a64:	3218      	adds	r2, #24
 8002a66:	4294      	cmp	r4, r2
 8002a68:	bf08      	it	eq
 8002a6a:	f043 0301 	orreq.w	r3, r3, #1
 8002a6e:	3218      	adds	r2, #24
 8002a70:	4294      	cmp	r4, r2
 8002a72:	bf08      	it	eq
 8002a74:	f043 0301 	orreq.w	r3, r3, #1
 8002a78:	3218      	adds	r2, #24
 8002a7a:	4294      	cmp	r4, r2
 8002a7c:	bf08      	it	eq
 8002a7e:	f043 0301 	orreq.w	r3, r3, #1
 8002a82:	4a29      	ldr	r2, [pc, #164]	@ (8002b28 <HAL_DMA_Start_IT+0x274>)
 8002a84:	4294      	cmp	r4, r2
 8002a86:	bf08      	it	eq
 8002a88:	f043 0301 	orreq.w	r3, r3, #1
 8002a8c:	3214      	adds	r2, #20
 8002a8e:	4294      	cmp	r4, r2
 8002a90:	bf08      	it	eq
 8002a92:	f043 0301 	orreq.w	r3, r3, #1
 8002a96:	3214      	adds	r2, #20
 8002a98:	4294      	cmp	r4, r2
 8002a9a:	bf08      	it	eq
 8002a9c:	f043 0301 	orreq.w	r3, r3, #1
 8002aa0:	3214      	adds	r2, #20
 8002aa2:	4294      	cmp	r4, r2
 8002aa4:	bf08      	it	eq
 8002aa6:	f043 0301 	orreq.w	r3, r3, #1
 8002aaa:	3214      	adds	r2, #20
 8002aac:	4294      	cmp	r4, r2
 8002aae:	bf08      	it	eq
 8002ab0:	f043 0301 	orreq.w	r3, r3, #1
 8002ab4:	3214      	adds	r2, #20
 8002ab6:	4294      	cmp	r4, r2
 8002ab8:	bf08      	it	eq
 8002aba:	f043 0301 	orreq.w	r3, r3, #1
 8002abe:	3214      	adds	r2, #20
 8002ac0:	4294      	cmp	r4, r2
 8002ac2:	bf08      	it	eq
 8002ac4:	f043 0301 	orreq.w	r3, r3, #1
 8002ac8:	3214      	adds	r2, #20
 8002aca:	4294      	cmp	r4, r2
 8002acc:	bf08      	it	eq
 8002ace:	f043 0301 	orreq.w	r3, r3, #1
 8002ad2:	b913      	cbnz	r3, 8002ada <HAL_DMA_Start_IT+0x226>
 8002ad4:	f1be 0f00 	cmp.w	lr, #0
 8002ad8:	d00f      	beq.n	8002afa <HAL_DMA_Start_IT+0x246>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ada:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002adc:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	03d2      	lsls	r2, r2, #15
 8002ae4:	f100 8147 	bmi.w	8002d76 <HAL_DMA_Start_IT+0x4c2>
      if(hdma->DMAmuxRequestGen != 0U)
 8002ae8:	f1bc 0f00 	cmp.w	ip, #0
 8002aec:	d005      	beq.n	8002afa <HAL_DMA_Start_IT+0x246>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002aee:	f8dc 3000 	ldr.w	r3, [ip]
 8002af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af6:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8002afa:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6023      	str	r3, [r4, #0]
}
 8002b04:	b003      	add	sp, #12
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40020070 	.word	0x40020070
 8002b10:	40020028 	.word	0x40020028
 8002b14:	40020040 	.word	0x40020040
 8002b18:	40020058 	.word	0x40020058
 8002b1c:	40020088 	.word	0x40020088
 8002b20:	400200a0 	.word	0x400200a0
 8002b24:	40020428 	.word	0x40020428
 8002b28:	58025408 	.word	0x58025408
 8002b2c:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8002b30:	4544      	cmp	r4, r8
 8002b32:	f000 815b 	beq.w	8002dec <HAL_DMA_Start_IT+0x538>
 8002b36:	454c      	cmp	r4, r9
 8002b38:	f000 816c 	beq.w	8002e14 <HAL_DMA_Start_IT+0x560>
 8002b3c:	f1bb 0f00 	cmp.w	fp, #0
 8002b40:	f040 8127 	bne.w	8002d92 <HAL_DMA_Start_IT+0x4de>
 8002b44:	f8df c59c 	ldr.w	ip, [pc, #1436]	@ 80030e4 <HAL_DMA_Start_IT+0x830>
 8002b48:	4564      	cmp	r4, ip
 8002b4a:	f000 818d 	beq.w	8002e68 <HAL_DMA_Start_IT+0x5b4>
 8002b4e:	f10c 0c18 	add.w	ip, ip, #24
 8002b52:	4564      	cmp	r4, ip
 8002b54:	f000 819c 	beq.w	8002e90 <HAL_DMA_Start_IT+0x5dc>
 8002b58:	f10c 0c18 	add.w	ip, ip, #24
 8002b5c:	4564      	cmp	r4, ip
 8002b5e:	f000 81b8 	beq.w	8002ed2 <HAL_DMA_Start_IT+0x61e>
 8002b62:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8002b66:	4564      	cmp	r4, ip
 8002b68:	f000 81df 	beq.w	8002f2a <HAL_DMA_Start_IT+0x676>
 8002b6c:	f10c 0c18 	add.w	ip, ip, #24
 8002b70:	4564      	cmp	r4, ip
 8002b72:	f000 8263 	beq.w	800303c <HAL_DMA_Start_IT+0x788>
 8002b76:	f10c 0c18 	add.w	ip, ip, #24
 8002b7a:	4564      	cmp	r4, ip
 8002b7c:	f000 827d 	beq.w	800307a <HAL_DMA_Start_IT+0x7c6>
 8002b80:	f10c 0c18 	add.w	ip, ip, #24
 8002b84:	4564      	cmp	r4, ip
 8002b86:	f000 828c 	beq.w	80030a2 <HAL_DMA_Start_IT+0x7ee>
 8002b8a:	f10c 0c18 	add.w	ip, ip, #24
 8002b8e:	4564      	cmp	r4, ip
 8002b90:	f000 8290 	beq.w	80030b4 <HAL_DMA_Start_IT+0x800>
 8002b94:	f10c 0c18 	add.w	ip, ip, #24
 8002b98:	4564      	cmp	r4, ip
 8002b9a:	f000 82d0 	beq.w	800313e <HAL_DMA_Start_IT+0x88a>
 8002b9e:	f10c 0c18 	add.w	ip, ip, #24
 8002ba2:	4564      	cmp	r4, ip
 8002ba4:	f000 82e1 	beq.w	800316a <HAL_DMA_Start_IT+0x8b6>
 8002ba8:	f10c 0c18 	add.w	ip, ip, #24
 8002bac:	4564      	cmp	r4, ip
 8002bae:	f000 82f2 	beq.w	8003196 <HAL_DMA_Start_IT+0x8e2>
 8002bb2:	f8d4 c000 	ldr.w	ip, [r4]
 8002bb6:	f02c 0c01 	bic.w	ip, ip, #1
 8002bba:	f8c4 c000 	str.w	ip, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bbe:	f8df c528 	ldr.w	ip, [pc, #1320]	@ 80030e8 <HAL_DMA_Start_IT+0x834>
 8002bc2:	4564      	cmp	r4, ip
 8002bc4:	f040 81c8 	bne.w	8002f58 <HAL_DMA_Start_IT+0x6a4>
    if(hdma->DMAmuxRequestGen != 0U)
 8002bc8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bcc:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8002bd0:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002bd2:	f1bc 0f00 	cmp.w	ip, #0
 8002bd6:	f43f aebf 	beq.w	8002958 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bda:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8002bde:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002be0:	f8df 8500 	ldr.w	r8, [pc, #1280]	@ 80030e4 <HAL_DMA_Start_IT+0x830>
 8002be4:	f8df 9504 	ldr.w	r9, [pc, #1284]	@ 80030ec <HAL_DMA_Start_IT+0x838>
 8002be8:	454c      	cmp	r4, r9
 8002bea:	bf18      	it	ne
 8002bec:	4544      	cmpne	r4, r8
 8002bee:	f109 0918 	add.w	r9, r9, #24
 8002bf2:	bf0c      	ite	eq
 8002bf4:	f04f 0801 	moveq.w	r8, #1
 8002bf8:	f04f 0800 	movne.w	r8, #0
 8002bfc:	454c      	cmp	r4, r9
 8002bfe:	bf08      	it	eq
 8002c00:	f048 0801 	orreq.w	r8, r8, #1
 8002c04:	f509 7956 	add.w	r9, r9, #856	@ 0x358
 8002c08:	454c      	cmp	r4, r9
 8002c0a:	bf08      	it	eq
 8002c0c:	f048 0801 	orreq.w	r8, r8, #1
 8002c10:	f109 0918 	add.w	r9, r9, #24
 8002c14:	454c      	cmp	r4, r9
 8002c16:	bf08      	it	eq
 8002c18:	f048 0801 	orreq.w	r8, r8, #1
 8002c1c:	f109 0918 	add.w	r9, r9, #24
 8002c20:	454c      	cmp	r4, r9
 8002c22:	bf08      	it	eq
 8002c24:	f048 0801 	orreq.w	r8, r8, #1
 8002c28:	f109 0918 	add.w	r9, r9, #24
 8002c2c:	454c      	cmp	r4, r9
 8002c2e:	bf08      	it	eq
 8002c30:	f048 0801 	orreq.w	r8, r8, #1
 8002c34:	f109 0918 	add.w	r9, r9, #24
 8002c38:	454c      	cmp	r4, r9
 8002c3a:	bf08      	it	eq
 8002c3c:	f048 0801 	orreq.w	r8, r8, #1
 8002c40:	f109 0918 	add.w	r9, r9, #24
 8002c44:	454c      	cmp	r4, r9
 8002c46:	bf08      	it	eq
 8002c48:	f048 0801 	orreq.w	r8, r8, #1
 8002c4c:	f109 0918 	add.w	r9, r9, #24
 8002c50:	454c      	cmp	r4, r9
 8002c52:	bf08      	it	eq
 8002c54:	f048 0801 	orreq.w	r8, r8, #1
 8002c58:	f1b8 0f00 	cmp.w	r8, #0
 8002c5c:	f47f ae7c 	bne.w	8002958 <HAL_DMA_Start_IT+0xa4>
 8002c60:	f8df 848c 	ldr.w	r8, [pc, #1164]	@ 80030f0 <HAL_DMA_Start_IT+0x83c>
 8002c64:	4544      	cmp	r4, r8
 8002c66:	f43f ae77 	beq.w	8002958 <HAL_DMA_Start_IT+0xa4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c6a:	f8df c488 	ldr.w	ip, [pc, #1160]	@ 80030f4 <HAL_DMA_Start_IT+0x840>
 8002c6e:	f8df 8488 	ldr.w	r8, [pc, #1160]	@ 80030f8 <HAL_DMA_Start_IT+0x844>
 8002c72:	4544      	cmp	r4, r8
 8002c74:	bf18      	it	ne
 8002c76:	4564      	cmpne	r4, ip
 8002c78:	f108 0814 	add.w	r8, r8, #20
 8002c7c:	bf0c      	ite	eq
 8002c7e:	f04f 0c01 	moveq.w	ip, #1
 8002c82:	f04f 0c00 	movne.w	ip, #0
 8002c86:	4544      	cmp	r4, r8
 8002c88:	bf08      	it	eq
 8002c8a:	f04c 0c01 	orreq.w	ip, ip, #1
 8002c8e:	f108 0814 	add.w	r8, r8, #20
 8002c92:	4544      	cmp	r4, r8
 8002c94:	bf08      	it	eq
 8002c96:	f04c 0c01 	orreq.w	ip, ip, #1
 8002c9a:	f108 0814 	add.w	r8, r8, #20
 8002c9e:	4544      	cmp	r4, r8
 8002ca0:	bf08      	it	eq
 8002ca2:	f04c 0c01 	orreq.w	ip, ip, #1
 8002ca6:	f108 0814 	add.w	r8, r8, #20
 8002caa:	4544      	cmp	r4, r8
 8002cac:	bf08      	it	eq
 8002cae:	f04c 0c01 	orreq.w	ip, ip, #1
 8002cb2:	f108 0814 	add.w	r8, r8, #20
 8002cb6:	4544      	cmp	r4, r8
 8002cb8:	bf08      	it	eq
 8002cba:	f04c 0c01 	orreq.w	ip, ip, #1
 8002cbe:	f108 0814 	add.w	r8, r8, #20
 8002cc2:	4544      	cmp	r4, r8
 8002cc4:	bf08      	it	eq
 8002cc6:	f04c 0c01 	orreq.w	ip, ip, #1
 8002cca:	f8df 8430 	ldr.w	r8, [pc, #1072]	@ 80030fc <HAL_DMA_Start_IT+0x848>
 8002cce:	4544      	cmp	r4, r8
 8002cd0:	bf08      	it	eq
 8002cd2:	f04c 0c01 	orreq.w	ip, ip, #1
 8002cd6:	f108 0814 	add.w	r8, r8, #20
 8002cda:	4544      	cmp	r4, r8
 8002cdc:	bf08      	it	eq
 8002cde:	f04c 0c01 	orreq.w	ip, ip, #1
 8002ce2:	f108 0814 	add.w	r8, r8, #20
 8002ce6:	4544      	cmp	r4, r8
 8002ce8:	bf08      	it	eq
 8002cea:	f04c 0c01 	orreq.w	ip, ip, #1
 8002cee:	f108 0814 	add.w	r8, r8, #20
 8002cf2:	4544      	cmp	r4, r8
 8002cf4:	bf08      	it	eq
 8002cf6:	f04c 0c01 	orreq.w	ip, ip, #1
 8002cfa:	f108 0814 	add.w	r8, r8, #20
 8002cfe:	4544      	cmp	r4, r8
 8002d00:	bf08      	it	eq
 8002d02:	f04c 0c01 	orreq.w	ip, ip, #1
 8002d06:	f108 0814 	add.w	r8, r8, #20
 8002d0a:	4544      	cmp	r4, r8
 8002d0c:	bf08      	it	eq
 8002d0e:	f04c 0c01 	orreq.w	ip, ip, #1
 8002d12:	f108 0814 	add.w	r8, r8, #20
 8002d16:	4544      	cmp	r4, r8
 8002d18:	bf08      	it	eq
 8002d1a:	f04c 0c01 	orreq.w	ip, ip, #1
 8002d1e:	f1bc 0f00 	cmp.w	ip, #0
 8002d22:	d104      	bne.n	8002d2e <HAL_DMA_Start_IT+0x47a>
 8002d24:	f8df c3d8 	ldr.w	ip, [pc, #984]	@ 8003100 <HAL_DMA_Start_IT+0x84c>
 8002d28:	4564      	cmp	r4, ip
 8002d2a:	f040 823f 	bne.w	80031ac <HAL_DMA_Start_IT+0x8f8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002d2e:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8002d30:	f04f 0c01 	mov.w	ip, #1
 8002d34:	f006 081f 	and.w	r8, r6, #31
 8002d38:	9e01      	ldr	r6, [sp, #4]
 8002d3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8002d3e:	f8c6 c004 	str.w	ip, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002d42:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d44:	6883      	ldr	r3, [r0, #8]
 8002d46:	2b40      	cmp	r3, #64	@ 0x40
 8002d48:	f000 822e 	beq.w	80031a8 <HAL_DMA_Start_IT+0x8f4>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002d4c:	60a1      	str	r1, [r4, #8]
      if(hdma->XferHalfCpltCallback != NULL)
 8002d4e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002d50:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d52:	e61e      	b.n	8002992 <HAL_DMA_Start_IT+0xde>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	f023 031e 	bic.w	r3, r3, #30
 8002d5a:	f043 0316 	orr.w	r3, r3, #22
 8002d5e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d62:	b11b      	cbz	r3, 8002d6c <HAL_DMA_Start_IT+0x4b8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f043 0308 	orr.w	r3, r3, #8
 8002d6a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d6c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	03d2      	lsls	r2, r2, #15
 8002d72:	f57f aeb9 	bpl.w	8002ae8 <HAL_DMA_Start_IT+0x234>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e6b3      	b.n	8002ae8 <HAL_DMA_Start_IT+0x234>
  __HAL_LOCK(hdma);
 8002d80:	2002      	movs	r0, #2
}
 8002d82:	b003      	add	sp, #12
 8002d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8002d88:	2001      	movs	r0, #1
}
 8002d8a:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002d8c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002d8e:	60e1      	str	r1, [r4, #12]
 8002d90:	e5f7      	b.n	8002982 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8002d92:	f8df a348 	ldr.w	sl, [pc, #840]	@ 80030dc <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d96:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8002d9a:	f8da 8070 	ldr.w	r8, [sl, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8002d9e:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8002da2:	f028 0801 	bic.w	r8, r8, #1
 8002da6:	f8ca 8070 	str.w	r8, [sl, #112]	@ 0x70
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002daa:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8002dac:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002db0:	f1bc 0f00 	cmp.w	ip, #0
 8002db4:	f47f adcd 	bne.w	8002952 <HAL_DMA_Start_IT+0x9e>
 8002db8:	e5ce      	b.n	8002958 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002dba:	49c8      	ldr	r1, [pc, #800]	@ (80030dc <HAL_DMA_Start_IT+0x828>)
 8002dbc:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 8002dbe:	f022 021e 	bic.w	r2, r2, #30
 8002dc2:	f042 0216 	orr.w	r2, r2, #22
 8002dc6:	670a      	str	r2, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f43f ae86 	beq.w	8002ada <HAL_DMA_Start_IT+0x226>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dd6:	e61d      	b.n	8002a14 <HAL_DMA_Start_IT+0x160>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002dd8:	49c0      	ldr	r1, [pc, #768]	@ (80030dc <HAL_DMA_Start_IT+0x828>)
 8002dda:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002ddc:	f022 021e 	bic.w	r2, r2, #30
 8002de0:	f042 0216 	orr.w	r2, r2, #22
 8002de4:	640a      	str	r2, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f1      	bne.n	8002dce <HAL_DMA_Start_IT+0x51a>
 8002dea:	e7bf      	b.n	8002d6c <HAL_DMA_Start_IT+0x4b8>
    __HAL_DMA_DISABLE(hdma);
 8002dec:	f8df a2ec 	ldr.w	sl, [pc, #748]	@ 80030dc <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df0:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8002df4:	f8da 8040 	ldr.w	r8, [sl, #64]	@ 0x40
    if(hdma->DMAmuxRequestGen != 0U)
 8002df8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8002dfc:	f028 0801 	bic.w	r8, r8, #1
 8002e00:	f8ca 8040 	str.w	r8, [sl, #64]	@ 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e04:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8002e06:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002e0a:	f1bc 0f00 	cmp.w	ip, #0
 8002e0e:	f47f ada0 	bne.w	8002952 <HAL_DMA_Start_IT+0x9e>
 8002e12:	e5a1      	b.n	8002958 <HAL_DMA_Start_IT+0xa4>
    __HAL_DMA_DISABLE(hdma);
 8002e14:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 80030dc <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e18:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8002e1c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
    if(hdma->DMAmuxRequestGen != 0U)
 8002e20:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8002e24:	f028 0801 	bic.w	r8, r8, #1
 8002e28:	f8ca 8058 	str.w	r8, [sl, #88]	@ 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e2c:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8002e2e:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002e32:	f1bc 0f00 	cmp.w	ip, #0
 8002e36:	f47f ad8c 	bne.w	8002952 <HAL_DMA_Start_IT+0x9e>
 8002e3a:	e58d      	b.n	8002958 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e3c:	49a7      	ldr	r1, [pc, #668]	@ (80030dc <HAL_DMA_Start_IT+0x828>)
 8002e3e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8002e40:	f022 021e 	bic.w	r2, r2, #30
 8002e44:	f042 0216 	orr.w	r2, r2, #22
 8002e48:	658a      	str	r2, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1bf      	bne.n	8002dce <HAL_DMA_Start_IT+0x51a>
 8002e4e:	e644      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e50:	49a2      	ldr	r1, [pc, #648]	@ (80030dc <HAL_DMA_Start_IT+0x828>)
 8002e52:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002e56:	f022 021e 	bic.w	r2, r2, #30
 8002e5a:	f042 0216 	orr.w	r2, r2, #22
 8002e5e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1b3      	bne.n	8002dce <HAL_DMA_Start_IT+0x51a>
 8002e66:	e638      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8002e68:	f8df a270 	ldr.w	sl, [pc, #624]	@ 80030dc <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e6c:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8002e70:	f8da 8088 	ldr.w	r8, [sl, #136]	@ 0x88
    if(hdma->DMAmuxRequestGen != 0U)
 8002e74:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8002e78:	f028 0801 	bic.w	r8, r8, #1
 8002e7c:	f8ca 8088 	str.w	r8, [sl, #136]	@ 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e80:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8002e82:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002e86:	f1bc 0f00 	cmp.w	ip, #0
 8002e8a:	f47f aea6 	bne.w	8002bda <HAL_DMA_Start_IT+0x326>
 8002e8e:	e6a7      	b.n	8002be0 <HAL_DMA_Start_IT+0x32c>
    __HAL_DMA_DISABLE(hdma);
 8002e90:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80030dc <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e94:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8002e98:	f8da 80a0 	ldr.w	r8, [sl, #160]	@ 0xa0
    if(hdma->DMAmuxRequestGen != 0U)
 8002e9c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8002ea0:	f028 0801 	bic.w	r8, r8, #1
 8002ea4:	f8ca 80a0 	str.w	r8, [sl, #160]	@ 0xa0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ea8:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8002eaa:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002eae:	f1bc 0f00 	cmp.w	ip, #0
 8002eb2:	f47f ae92 	bne.w	8002bda <HAL_DMA_Start_IT+0x326>
 8002eb6:	e693      	b.n	8002be0 <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002eb8:	4988      	ldr	r1, [pc, #544]	@ (80030dc <HAL_DMA_Start_IT+0x828>)
 8002eba:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8002ebe:	f022 021e 	bic.w	r2, r2, #30
 8002ec2:	f042 0216 	orr.w	r2, r2, #22
 8002ec6:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f47f af7f 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 8002ed0:	e603      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	f8df a208 	ldr.w	sl, [pc, #520]	@ 80030dc <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed6:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8002eda:	f8da 80b8 	ldr.w	r8, [sl, #184]	@ 0xb8
    if(hdma->DMAmuxRequestGen != 0U)
 8002ede:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8002ee2:	f028 0801 	bic.w	r8, r8, #1
 8002ee6:	f8ca 80b8 	str.w	r8, [sl, #184]	@ 0xb8
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eea:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8002eec:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002ef0:	f1bc 0f00 	cmp.w	ip, #0
 8002ef4:	f47f ae71 	bne.w	8002bda <HAL_DMA_Start_IT+0x326>
 8002ef8:	e672      	b.n	8002be0 <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002efa:	4978      	ldr	r1, [pc, #480]	@ (80030dc <HAL_DMA_Start_IT+0x828>)
 8002efc:	f8d1 20b8 	ldr.w	r2, [r1, #184]	@ 0xb8
 8002f00:	f022 021e 	bic.w	r2, r2, #30
 8002f04:	f042 0216 	orr.w	r2, r2, #22
 8002f08:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f af5e 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 8002f12:	e5e2      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f14:	4972      	ldr	r1, [pc, #456]	@ (80030e0 <HAL_DMA_Start_IT+0x82c>)
 8002f16:	690a      	ldr	r2, [r1, #16]
 8002f18:	f022 021e 	bic.w	r2, r2, #30
 8002f1c:	f042 0216 	orr.w	r2, r2, #22
 8002f20:	610a      	str	r2, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f47f af53 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 8002f28:	e5d7      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80030e0 <HAL_DMA_Start_IT+0x82c>
 8002f2e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8002f32:	f02c 0c01 	bic.w	ip, ip, #1
 8002f36:	f8c8 c010 	str.w	ip, [r8, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f3a:	f8df c1c8 	ldr.w	ip, [pc, #456]	@ 8003104 <HAL_DMA_Start_IT+0x850>
 8002f3e:	4564      	cmp	r4, ip
 8002f40:	f43f ae42 	beq.w	8002bc8 <HAL_DMA_Start_IT+0x314>
 8002f44:	f10c 0c18 	add.w	ip, ip, #24
 8002f48:	4564      	cmp	r4, ip
 8002f4a:	f43f ae3d 	beq.w	8002bc8 <HAL_DMA_Start_IT+0x314>
 8002f4e:	f10c 0c18 	add.w	ip, ip, #24
 8002f52:	4564      	cmp	r4, ip
 8002f54:	f43f ae38 	beq.w	8002bc8 <HAL_DMA_Start_IT+0x314>
 8002f58:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8003108 <HAL_DMA_Start_IT+0x854>
 8002f5c:	4564      	cmp	r4, ip
 8002f5e:	f43f ae33 	beq.w	8002bc8 <HAL_DMA_Start_IT+0x314>
 8002f62:	f10c 0c18 	add.w	ip, ip, #24
 8002f66:	4564      	cmp	r4, ip
 8002f68:	f43f ae2e 	beq.w	8002bc8 <HAL_DMA_Start_IT+0x314>
 8002f6c:	f10c 0c18 	add.w	ip, ip, #24
 8002f70:	4564      	cmp	r4, ip
 8002f72:	f43f ae29 	beq.w	8002bc8 <HAL_DMA_Start_IT+0x314>
 8002f76:	f10c 0c18 	add.w	ip, ip, #24
 8002f7a:	4564      	cmp	r4, ip
 8002f7c:	f43f ae24 	beq.w	8002bc8 <HAL_DMA_Start_IT+0x314>
 8002f80:	f8df c178 	ldr.w	ip, [pc, #376]	@ 80030fc <HAL_DMA_Start_IT+0x848>
 8002f84:	4564      	cmp	r4, ip
 8002f86:	f000 80c3 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
 8002f8a:	f10c 0c14 	add.w	ip, ip, #20
 8002f8e:	4564      	cmp	r4, ip
 8002f90:	f000 80be 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
 8002f94:	f10c 0c14 	add.w	ip, ip, #20
 8002f98:	4564      	cmp	r4, ip
 8002f9a:	f000 80b9 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
 8002f9e:	f10c 0c14 	add.w	ip, ip, #20
 8002fa2:	4564      	cmp	r4, ip
 8002fa4:	f000 80b4 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
 8002fa8:	f10c 0c14 	add.w	ip, ip, #20
 8002fac:	4564      	cmp	r4, ip
 8002fae:	f000 80af 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
 8002fb2:	f10c 0c14 	add.w	ip, ip, #20
 8002fb6:	4564      	cmp	r4, ip
 8002fb8:	f000 80aa 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
 8002fbc:	f10c 0c14 	add.w	ip, ip, #20
 8002fc0:	4564      	cmp	r4, ip
 8002fc2:	f000 80a5 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
 8002fc6:	f10c 0c14 	add.w	ip, ip, #20
 8002fca:	4564      	cmp	r4, ip
 8002fcc:	f000 80a0 	beq.w	8003110 <HAL_DMA_Start_IT+0x85c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fd0:	f8df c124 	ldr.w	ip, [pc, #292]	@ 80030f8 <HAL_DMA_Start_IT+0x844>
 8002fd4:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80030f4 <HAL_DMA_Start_IT+0x840>
 8002fd8:	4544      	cmp	r4, r8
 8002fda:	bf18      	it	ne
 8002fdc:	4564      	cmpne	r4, ip
 8002fde:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 8002fe2:	bf0c      	ite	eq
 8002fe4:	f04f 0c01 	moveq.w	ip, #1
 8002fe8:	f04f 0c00 	movne.w	ip, #0
 8002fec:	4544      	cmp	r4, r8
 8002fee:	bf08      	it	eq
 8002ff0:	f04c 0c01 	orreq.w	ip, ip, #1
 8002ff4:	f108 0814 	add.w	r8, r8, #20
 8002ff8:	4544      	cmp	r4, r8
 8002ffa:	bf08      	it	eq
 8002ffc:	f04c 0c01 	orreq.w	ip, ip, #1
 8003000:	f108 0814 	add.w	r8, r8, #20
 8003004:	4544      	cmp	r4, r8
 8003006:	bf08      	it	eq
 8003008:	f04c 0c01 	orreq.w	ip, ip, #1
 800300c:	f108 0814 	add.w	r8, r8, #20
 8003010:	4544      	cmp	r4, r8
 8003012:	bf08      	it	eq
 8003014:	f04c 0c01 	orreq.w	ip, ip, #1
 8003018:	f108 0814 	add.w	r8, r8, #20
 800301c:	4544      	cmp	r4, r8
 800301e:	bf08      	it	eq
 8003020:	f04c 0c01 	orreq.w	ip, ip, #1
 8003024:	f1bc 0f00 	cmp.w	ip, #0
 8003028:	f47f ae81 	bne.w	8002d2e <HAL_DMA_Start_IT+0x47a>
 800302c:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 800310c <HAL_DMA_Start_IT+0x858>
 8003030:	4564      	cmp	r4, ip
      if(hdma->XferHalfCpltCallback != NULL)
 8003032:	bf18      	it	ne
 8003034:	6c01      	ldrne	r1, [r0, #64]	@ 0x40
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003036:	f43f ae7a 	beq.w	8002d2e <HAL_DMA_Start_IT+0x47a>
 800303a:	e4c4      	b.n	80029c6 <HAL_DMA_Start_IT+0x112>
    __HAL_DMA_DISABLE(hdma);
 800303c:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80030e0 <HAL_DMA_Start_IT+0x82c>
 8003040:	f8d8 c028 	ldr.w	ip, [r8, #40]	@ 0x28
 8003044:	f02c 0c01 	bic.w	ip, ip, #1
 8003048:	f8c8 c028 	str.w	ip, [r8, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800304c:	e5bc      	b.n	8002bc8 <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800304e:	4a24      	ldr	r2, [pc, #144]	@ (80030e0 <HAL_DMA_Start_IT+0x82c>)
 8003050:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8003052:	f023 031e 	bic.w	r3, r3, #30
 8003056:	f043 0316 	orr.w	r3, r3, #22
 800305a:	6293      	str	r3, [r2, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 800305c:	2900      	cmp	r1, #0
 800305e:	f47f aeb6 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 8003062:	e53a      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003064:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <HAL_DMA_Start_IT+0x82c>)
 8003066:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003068:	f023 031e 	bic.w	r3, r3, #30
 800306c:	f043 0316 	orr.w	r3, r3, #22
 8003070:	6413      	str	r3, [r2, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8003072:	2900      	cmp	r1, #0
 8003074:	f47f aeab 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 8003078:	e52f      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800307a:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80030e0 <HAL_DMA_Start_IT+0x82c>
 800307e:	f8d8 c040 	ldr.w	ip, [r8, #64]	@ 0x40
 8003082:	f02c 0c01 	bic.w	ip, ip, #1
 8003086:	f8c8 c040 	str.w	ip, [r8, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308a:	e59d      	b.n	8002bc8 <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800308c:	4a14      	ldr	r2, [pc, #80]	@ (80030e0 <HAL_DMA_Start_IT+0x82c>)
 800308e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003090:	f023 031e 	bic.w	r3, r3, #30
 8003094:	f043 0316 	orr.w	r3, r3, #22
 8003098:	6593      	str	r3, [r2, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 800309a:	2900      	cmp	r1, #0
 800309c:	f47f ae97 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 80030a0:	e51b      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80030a2:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 80030e0 <HAL_DMA_Start_IT+0x82c>
 80030a6:	f8d8 c058 	ldr.w	ip, [r8, #88]	@ 0x58
 80030aa:	f02c 0c01 	bic.w	ip, ip, #1
 80030ae:	f8c8 c058 	str.w	ip, [r8, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030b2:	e584      	b.n	8002bbe <HAL_DMA_Start_IT+0x30a>
    __HAL_DMA_DISABLE(hdma);
 80030b4:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 80030e0 <HAL_DMA_Start_IT+0x82c>
 80030b8:	f8d8 c070 	ldr.w	ip, [r8, #112]	@ 0x70
 80030bc:	f02c 0c01 	bic.w	ip, ip, #1
 80030c0:	f8c8 c070 	str.w	ip, [r8, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c4:	e748      	b.n	8002f58 <HAL_DMA_Start_IT+0x6a4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80030c6:	4a06      	ldr	r2, [pc, #24]	@ (80030e0 <HAL_DMA_Start_IT+0x82c>)
 80030c8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80030ca:	f023 031e 	bic.w	r3, r3, #30
 80030ce:	f043 0316 	orr.w	r3, r3, #22
 80030d2:	6713      	str	r3, [r2, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 80030d4:	2900      	cmp	r1, #0
 80030d6:	f47f ae7a 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 80030da:	e4fe      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
 80030dc:	40020000 	.word	0x40020000
 80030e0:	40020400 	.word	0x40020400
 80030e4:	40020088 	.word	0x40020088
 80030e8:	40020458 	.word	0x40020458
 80030ec:	400200a0 	.word	0x400200a0
 80030f0:	400204b8 	.word	0x400204b8
 80030f4:	48022c08 	.word	0x48022c08
 80030f8:	48022c1c 	.word	0x48022c1c
 80030fc:	58025408 	.word	0x58025408
 8003100:	58025494 	.word	0x58025494
 8003104:	40020410 	.word	0x40020410
 8003108:	40020470 	.word	0x40020470
 800310c:	48022c94 	.word	0x48022c94
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003110:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 8003114:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003118:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800311a:	f1bc 0f00 	cmp.w	ip, #0
 800311e:	f47f ad5c 	bne.w	8002bda <HAL_DMA_Start_IT+0x326>
 8003122:	e5a2      	b.n	8002c6a <HAL_DMA_Start_IT+0x3b6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003124:	4a23      	ldr	r2, [pc, #140]	@ (80031b4 <HAL_DMA_Start_IT+0x900>)
 8003126:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800312a:	f023 031e 	bic.w	r3, r3, #30
 800312e:	f043 0316 	orr.w	r3, r3, #22
 8003132:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8003136:	2900      	cmp	r1, #0
 8003138:	f47f ae49 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 800313c:	e4cd      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800313e:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80031b4 <HAL_DMA_Start_IT+0x900>
 8003142:	f8d8 c088 	ldr.w	ip, [r8, #136]	@ 0x88
 8003146:	f02c 0c01 	bic.w	ip, ip, #1
 800314a:	f8c8 c088 	str.w	ip, [r8, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800314e:	e536      	b.n	8002bbe <HAL_DMA_Start_IT+0x30a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003150:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <HAL_DMA_Start_IT+0x900>)
 8003152:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8003156:	f023 031e 	bic.w	r3, r3, #30
 800315a:	f043 0316 	orr.w	r3, r3, #22
 800315e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8003162:	2900      	cmp	r1, #0
 8003164:	f47f ae33 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 8003168:	e4b7      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800316a:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 80031b4 <HAL_DMA_Start_IT+0x900>
 800316e:	f8d8 c0a0 	ldr.w	ip, [r8, #160]	@ 0xa0
 8003172:	f02c 0c01 	bic.w	ip, ip, #1
 8003176:	f8c8 c0a0 	str.w	ip, [r8, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800317a:	e6de      	b.n	8002f3a <HAL_DMA_Start_IT+0x686>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800317c:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <HAL_DMA_Start_IT+0x900>)
 800317e:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 8003182:	f023 031e 	bic.w	r3, r3, #30
 8003186:	f043 0316 	orr.w	r3, r3, #22
 800318a:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 800318e:	2900      	cmp	r1, #0
 8003190:	f47f ae1d 	bne.w	8002dce <HAL_DMA_Start_IT+0x51a>
 8003194:	e4a1      	b.n	8002ada <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8003196:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 80031b4 <HAL_DMA_Start_IT+0x900>
 800319a:	f8d8 c0b8 	ldr.w	ip, [r8, #184]	@ 0xb8
 800319e:	f02c 0c01 	bic.w	ip, ip, #1
 80031a2:	f8c8 c0b8 	str.w	ip, [r8, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031a6:	e6c8      	b.n	8002f3a <HAL_DMA_Start_IT+0x686>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80031a8:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80031aa:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80031ae:	f7ff bbf8 	b.w	80029a2 <HAL_DMA_Start_IT+0xee>
 80031b2:	bf00      	nop
 80031b4:	40020400 	.word	0x40020400

080031b8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	f000 8096 	beq.w	80032ea <HAL_DMA_Abort_IT+0x132>
{
 80031be:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c0:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 8083 	bne.w	80032d0 <HAL_DMA_Abort_IT+0x118>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	4a48      	ldr	r2, [pc, #288]	@ (80032f0 <HAL_DMA_Abort_IT+0x138>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	f000 8082 	beq.w	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031d4:	3218      	adds	r2, #24
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d07e      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031da:	3218      	adds	r2, #24
 80031dc:	4293      	cmp	r3, r2
 80031de:	d07b      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031e0:	3218      	adds	r2, #24
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d078      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031e6:	3218      	adds	r2, #24
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d075      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031ec:	3218      	adds	r2, #24
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d072      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031f2:	3218      	adds	r2, #24
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d06f      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031f8:	3218      	adds	r2, #24
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d06c      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 80031fe:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003202:	4293      	cmp	r3, r2
 8003204:	d068      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 8003206:	3218      	adds	r2, #24
 8003208:	4293      	cmp	r3, r2
 800320a:	d065      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 800320c:	3218      	adds	r2, #24
 800320e:	4293      	cmp	r3, r2
 8003210:	d062      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 8003212:	3218      	adds	r2, #24
 8003214:	4293      	cmp	r3, r2
 8003216:	d05f      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 8003218:	3218      	adds	r2, #24
 800321a:	4293      	cmp	r3, r2
 800321c:	d05c      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 800321e:	3218      	adds	r2, #24
 8003220:	4293      	cmp	r3, r2
 8003222:	d059      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 8003224:	3218      	adds	r2, #24
 8003226:	4293      	cmp	r3, r2
 8003228:	d056      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
 800322a:	3218      	adds	r2, #24
 800322c:	4293      	cmp	r3, r2
 800322e:	d053      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x120>
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003230:	4a30      	ldr	r2, [pc, #192]	@ (80032f4 <HAL_DMA_Abort_IT+0x13c>)
 8003232:	4d31      	ldr	r5, [pc, #196]	@ (80032f8 <HAL_DMA_Abort_IT+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003234:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003236:	42ab      	cmp	r3, r5
 8003238:	bf18      	it	ne
 800323a:	4293      	cmpne	r3, r2
 800323c:	4c2f      	ldr	r4, [pc, #188]	@ (80032fc <HAL_DMA_Abort_IT+0x144>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800323e:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003242:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8003246:	bf0c      	ite	eq
 8003248:	2201      	moveq	r2, #1
 800324a:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800324c:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800324e:	42a3      	cmp	r3, r4
 8003250:	bf08      	it	eq
 8003252:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003256:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003258:	3428      	adds	r4, #40	@ 0x28
 800325a:	42ab      	cmp	r3, r5
 800325c:	bf08      	it	eq
 800325e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003262:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003266:	42a3      	cmp	r3, r4
 8003268:	bf08      	it	eq
 800326a:	f042 0201 	orreq.w	r2, r2, #1
 800326e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003270:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003272:	42a3      	cmp	r3, r4
 8003274:	bf08      	it	eq
 8003276:	f042 0201 	orreq.w	r2, r2, #1
 800327a:	4921      	ldr	r1, [pc, #132]	@ (8003300 <HAL_DMA_Abort_IT+0x148>)
 800327c:	428b      	cmp	r3, r1
 800327e:	bf08      	it	eq
 8003280:	f042 0201 	orreq.w	r2, r2, #1
 8003284:	b912      	cbnz	r2, 800328c <HAL_DMA_Abort_IT+0xd4>
 8003286:	4a1f      	ldr	r2, [pc, #124]	@ (8003304 <HAL_DMA_Abort_IT+0x14c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d117      	bne.n	80032bc <HAL_DMA_Abort_IT+0x104>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800328c:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800328e:	6d84      	ldr	r4, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003290:	e9d0 1517 	ldrd	r1, r5, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003294:	682a      	ldr	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003296:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800329a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800329e:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032a0:	602a      	str	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032a2:	6063      	str	r3, [r4, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80032a4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a6:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 80032aa:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80032ac:	b133      	cbz	r3, 80032bc <HAL_DMA_Abort_IT+0x104>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032ae:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b0:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ba:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80032bc:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 80032be:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 80032c0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80032c2:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80032c6:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 80032ca:	b163      	cbz	r3, 80032e6 <HAL_DMA_Abort_IT+0x12e>
        hdma->XferAbortCallback(hdma);
 80032cc:	4798      	blx	r3
 80032ce:	e00a      	b.n	80032e6 <HAL_DMA_Abort_IT+0x12e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d0:	2380      	movs	r3, #128	@ 0x80
 80032d2:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80032d4:	2001      	movs	r0, #1
}
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 80032d8:	2204      	movs	r2, #4
 80032da:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80032e6:	2000      	movs	r0, #0
}
 80032e8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80032ea:	2001      	movs	r0, #1
}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40020010 	.word	0x40020010
 80032f4:	5802541c 	.word	0x5802541c
 80032f8:	58025408 	.word	0x58025408
 80032fc:	58025430 	.word	0x58025430
 8003300:	58025480 	.word	0x58025480
 8003304:	58025494 	.word	0x58025494

08003308 <HAL_DMA_IRQHandler>:
{
 8003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800330c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800330e:	4b5a      	ldr	r3, [pc, #360]	@ (8003478 <HAL_DMA_IRQHandler+0x170>)
{
 8003310:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003312:	6d84      	ldr	r4, [r0, #88]	@ 0x58
{
 8003314:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003316:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8003318:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800331a:	6803      	ldr	r3, [r0, #0]
 800331c:	4a57      	ldr	r2, [pc, #348]	@ (800347c <HAL_DMA_IRQHandler+0x174>)
 800331e:	4858      	ldr	r0, [pc, #352]	@ (8003480 <HAL_DMA_IRQHandler+0x178>)
  tmpisr_dma  = regs_dma->ISR;
 8003320:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003322:	4293      	cmp	r3, r2
 8003324:	bf18      	it	ne
 8003326:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8003328:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800332a:	bf0c      	ite	eq
 800332c:	2001      	moveq	r0, #1
 800332e:	2000      	movne	r0, #0
 8003330:	f000 80b0 	beq.w	8003494 <HAL_DMA_IRQHandler+0x18c>
 8003334:	3218      	adds	r2, #24
 8003336:	4293      	cmp	r3, r2
 8003338:	f000 82a6 	beq.w	8003888 <HAL_DMA_IRQHandler+0x580>
 800333c:	3218      	adds	r2, #24
 800333e:	4293      	cmp	r3, r2
 8003340:	f000 82a2 	beq.w	8003888 <HAL_DMA_IRQHandler+0x580>
 8003344:	3218      	adds	r2, #24
 8003346:	4293      	cmp	r3, r2
 8003348:	f000 82af 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 800334c:	3218      	adds	r2, #24
 800334e:	4293      	cmp	r3, r2
 8003350:	f000 82ab 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 8003354:	3218      	adds	r2, #24
 8003356:	4293      	cmp	r3, r2
 8003358:	f000 82a7 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 800335c:	3218      	adds	r2, #24
 800335e:	4293      	cmp	r3, r2
 8003360:	f000 82a3 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 8003364:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003368:	4293      	cmp	r3, r2
 800336a:	f000 829e 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 800336e:	3218      	adds	r2, #24
 8003370:	4293      	cmp	r3, r2
 8003372:	f000 829a 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 8003376:	3218      	adds	r2, #24
 8003378:	4293      	cmp	r3, r2
 800337a:	f000 8296 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 800337e:	3218      	adds	r2, #24
 8003380:	4293      	cmp	r3, r2
 8003382:	f000 8292 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 8003386:	3218      	adds	r2, #24
 8003388:	4293      	cmp	r3, r2
 800338a:	f000 828e 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 800338e:	3218      	adds	r2, #24
 8003390:	4293      	cmp	r3, r2
 8003392:	f000 828a 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 8003396:	3218      	adds	r2, #24
 8003398:	4293      	cmp	r3, r2
 800339a:	f000 8286 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
 800339e:	3218      	adds	r2, #24
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f000 8282 	beq.w	80038aa <HAL_DMA_IRQHandler+0x5a2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033a6:	4a37      	ldr	r2, [pc, #220]	@ (8003484 <HAL_DMA_IRQHandler+0x17c>)
 80033a8:	4837      	ldr	r0, [pc, #220]	@ (8003488 <HAL_DMA_IRQHandler+0x180>)
 80033aa:	4283      	cmp	r3, r0
 80033ac:	bf18      	it	ne
 80033ae:	4293      	cmpne	r3, r2
 80033b0:	f100 0014 	add.w	r0, r0, #20
 80033b4:	bf0c      	ite	eq
 80033b6:	2201      	moveq	r2, #1
 80033b8:	2200      	movne	r2, #0
 80033ba:	4283      	cmp	r3, r0
 80033bc:	bf08      	it	eq
 80033be:	f042 0201 	orreq.w	r2, r2, #1
 80033c2:	3014      	adds	r0, #20
 80033c4:	4283      	cmp	r3, r0
 80033c6:	bf08      	it	eq
 80033c8:	f042 0201 	orreq.w	r2, r2, #1
 80033cc:	3014      	adds	r0, #20
 80033ce:	4283      	cmp	r3, r0
 80033d0:	bf08      	it	eq
 80033d2:	f042 0201 	orreq.w	r2, r2, #1
 80033d6:	3014      	adds	r0, #20
 80033d8:	4283      	cmp	r3, r0
 80033da:	bf08      	it	eq
 80033dc:	f042 0201 	orreq.w	r2, r2, #1
 80033e0:	3014      	adds	r0, #20
 80033e2:	4283      	cmp	r3, r0
 80033e4:	bf08      	it	eq
 80033e6:	f042 0201 	orreq.w	r2, r2, #1
 80033ea:	3014      	adds	r0, #20
 80033ec:	4283      	cmp	r3, r0
 80033ee:	bf08      	it	eq
 80033f0:	f042 0201 	orreq.w	r2, r2, #1
 80033f4:	4825      	ldr	r0, [pc, #148]	@ (800348c <HAL_DMA_IRQHandler+0x184>)
 80033f6:	4283      	cmp	r3, r0
 80033f8:	bf08      	it	eq
 80033fa:	f042 0201 	orreq.w	r2, r2, #1
 80033fe:	3014      	adds	r0, #20
 8003400:	4283      	cmp	r3, r0
 8003402:	bf08      	it	eq
 8003404:	f042 0201 	orreq.w	r2, r2, #1
 8003408:	3014      	adds	r0, #20
 800340a:	4283      	cmp	r3, r0
 800340c:	bf08      	it	eq
 800340e:	f042 0201 	orreq.w	r2, r2, #1
 8003412:	3014      	adds	r0, #20
 8003414:	4283      	cmp	r3, r0
 8003416:	bf08      	it	eq
 8003418:	f042 0201 	orreq.w	r2, r2, #1
 800341c:	3014      	adds	r0, #20
 800341e:	4283      	cmp	r3, r0
 8003420:	bf08      	it	eq
 8003422:	f042 0201 	orreq.w	r2, r2, #1
 8003426:	3014      	adds	r0, #20
 8003428:	4283      	cmp	r3, r0
 800342a:	bf08      	it	eq
 800342c:	f042 0201 	orreq.w	r2, r2, #1
 8003430:	3014      	adds	r0, #20
 8003432:	4283      	cmp	r3, r0
 8003434:	bf08      	it	eq
 8003436:	f042 0201 	orreq.w	r2, r2, #1
 800343a:	b912      	cbnz	r2, 8003442 <HAL_DMA_IRQHandler+0x13a>
 800343c:	4a14      	ldr	r2, [pc, #80]	@ (8003490 <HAL_DMA_IRQHandler+0x188>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d116      	bne.n	8003470 <HAL_DMA_IRQHandler+0x168>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003442:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 8003444:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003446:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003448:	f000 001f 	and.w	r0, r0, #31
 800344c:	4085      	lsls	r5, r0
 800344e:	420d      	tst	r5, r1
 8003450:	f000 8285 	beq.w	800395e <HAL_DMA_IRQHandler+0x656>
 8003454:	0757      	lsls	r7, r2, #29
 8003456:	f140 8282 	bpl.w	800395e <HAL_DMA_IRQHandler+0x656>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345a:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800345c:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345e:	f140 82b1 	bpl.w	80039c4 <HAL_DMA_IRQHandler+0x6bc>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003462:	03d1      	lsls	r1, r2, #15
 8003464:	f100 82b4 	bmi.w	80039d0 <HAL_DMA_IRQHandler+0x6c8>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003468:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 81f6 	bne.w	800385c <HAL_DMA_IRQHandler+0x554>
}
 8003470:	b002      	add	sp, #8
 8003472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003476:	bf00      	nop
 8003478:	24000008 	.word	0x24000008
 800347c:	40020028 	.word	0x40020028
 8003480:	40020010 	.word	0x40020010
 8003484:	48022c08 	.word	0x48022c08
 8003488:	48022c1c 	.word	0x48022c1c
 800348c:	58025408 	.word	0x58025408
 8003490:	58025494 	.word	0x58025494
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003494:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8003498:	f04f 0c08 	mov.w	ip, #8
 800349c:	f00e 021f 	and.w	r2, lr, #31
 80034a0:	fa0c f102 	lsl.w	r1, ip, r2
 80034a4:	420f      	tst	r7, r1
 80034a6:	f000 81de 	beq.w	8003866 <HAL_DMA_IRQHandler+0x55e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80034aa:	f8d3 c000 	ldr.w	ip, [r3]
 80034ae:	f01c 0f04 	tst.w	ip, #4
 80034b2:	d00a      	beq.n	80034ca <HAL_DMA_IRQHandler+0x1c2>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034b4:	f8d3 c000 	ldr.w	ip, [r3]
 80034b8:	f02c 0c04 	bic.w	ip, ip, #4
 80034bc:	f8c3 c000 	str.w	ip, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034c0:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034c2:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 80034c4:	f041 0101 	orr.w	r1, r1, #1
 80034c8:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034ca:	fa27 f102 	lsr.w	r1, r7, r2
 80034ce:	07c9      	lsls	r1, r1, #31
 80034d0:	d55b      	bpl.n	800358a <HAL_DMA_IRQHandler+0x282>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d14f      	bne.n	8003576 <HAL_DMA_IRQHandler+0x26e>
 80034d6:	49a2      	ldr	r1, [pc, #648]	@ (8003760 <HAL_DMA_IRQHandler+0x458>)
 80034d8:	f8df c298 	ldr.w	ip, [pc, #664]	@ 8003774 <HAL_DMA_IRQHandler+0x46c>
 80034dc:	4563      	cmp	r3, ip
 80034de:	bf18      	it	ne
 80034e0:	428b      	cmpne	r3, r1
 80034e2:	f10c 0c18 	add.w	ip, ip, #24
 80034e6:	bf0c      	ite	eq
 80034e8:	2101      	moveq	r1, #1
 80034ea:	2100      	movne	r1, #0
 80034ec:	4563      	cmp	r3, ip
 80034ee:	bf08      	it	eq
 80034f0:	f041 0101 	orreq.w	r1, r1, #1
 80034f4:	f10c 0c18 	add.w	ip, ip, #24
 80034f8:	4563      	cmp	r3, ip
 80034fa:	bf08      	it	eq
 80034fc:	f041 0101 	orreq.w	r1, r1, #1
 8003500:	f10c 0c18 	add.w	ip, ip, #24
 8003504:	4563      	cmp	r3, ip
 8003506:	bf08      	it	eq
 8003508:	f041 0101 	orreq.w	r1, r1, #1
 800350c:	f10c 0c18 	add.w	ip, ip, #24
 8003510:	4563      	cmp	r3, ip
 8003512:	bf08      	it	eq
 8003514:	f041 0101 	orreq.w	r1, r1, #1
 8003518:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 800351c:	4563      	cmp	r3, ip
 800351e:	bf08      	it	eq
 8003520:	f041 0101 	orreq.w	r1, r1, #1
 8003524:	f10c 0c18 	add.w	ip, ip, #24
 8003528:	4563      	cmp	r3, ip
 800352a:	bf08      	it	eq
 800352c:	f041 0101 	orreq.w	r1, r1, #1
 8003530:	f10c 0c18 	add.w	ip, ip, #24
 8003534:	4563      	cmp	r3, ip
 8003536:	bf08      	it	eq
 8003538:	f041 0101 	orreq.w	r1, r1, #1
 800353c:	f10c 0c18 	add.w	ip, ip, #24
 8003540:	4563      	cmp	r3, ip
 8003542:	bf08      	it	eq
 8003544:	f041 0101 	orreq.w	r1, r1, #1
 8003548:	f10c 0c18 	add.w	ip, ip, #24
 800354c:	4563      	cmp	r3, ip
 800354e:	bf08      	it	eq
 8003550:	f041 0101 	orreq.w	r1, r1, #1
 8003554:	f10c 0c18 	add.w	ip, ip, #24
 8003558:	4563      	cmp	r3, ip
 800355a:	bf08      	it	eq
 800355c:	f041 0101 	orreq.w	r1, r1, #1
 8003560:	f10c 0c18 	add.w	ip, ip, #24
 8003564:	4563      	cmp	r3, ip
 8003566:	bf08      	it	eq
 8003568:	f041 0101 	orreq.w	r1, r1, #1
 800356c:	b919      	cbnz	r1, 8003576 <HAL_DMA_IRQHandler+0x26e>
 800356e:	497d      	ldr	r1, [pc, #500]	@ (8003764 <HAL_DMA_IRQHandler+0x45c>)
 8003570:	428b      	cmp	r3, r1
 8003572:	f040 81e3 	bne.w	800393c <HAL_DMA_IRQHandler+0x634>
 8003576:	6959      	ldr	r1, [r3, #20]
 8003578:	0609      	lsls	r1, r1, #24
 800357a:	d506      	bpl.n	800358a <HAL_DMA_IRQHandler+0x282>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800357c:	2101      	movs	r1, #1
 800357e:	4091      	lsls	r1, r2
 8003580:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003582:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8003584:	f041 0102 	orr.w	r1, r1, #2
 8003588:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800358a:	2104      	movs	r1, #4
 800358c:	4091      	lsls	r1, r2
 800358e:	4239      	tst	r1, r7
 8003590:	d05f      	beq.n	8003652 <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003592:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8003760 <HAL_DMA_IRQHandler+0x458>
 8003596:	4563      	cmp	r3, ip
 8003598:	d051      	beq.n	800363e <HAL_DMA_IRQHandler+0x336>
 800359a:	2800      	cmp	r0, #0
 800359c:	d14f      	bne.n	800363e <HAL_DMA_IRQHandler+0x336>
 800359e:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80035a2:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 8003774 <HAL_DMA_IRQHandler+0x46c>
 80035a6:	4543      	cmp	r3, r8
 80035a8:	bf18      	it	ne
 80035aa:	4563      	cmpne	r3, ip
 80035ac:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 80035b0:	bf0c      	ite	eq
 80035b2:	f04f 0c01 	moveq.w	ip, #1
 80035b6:	f04f 0c00 	movne.w	ip, #0
 80035ba:	4543      	cmp	r3, r8
 80035bc:	bf08      	it	eq
 80035be:	f04c 0c01 	orreq.w	ip, ip, #1
 80035c2:	f108 0818 	add.w	r8, r8, #24
 80035c6:	4543      	cmp	r3, r8
 80035c8:	bf08      	it	eq
 80035ca:	f04c 0c01 	orreq.w	ip, ip, #1
 80035ce:	f108 0818 	add.w	r8, r8, #24
 80035d2:	4543      	cmp	r3, r8
 80035d4:	bf08      	it	eq
 80035d6:	f04c 0c01 	orreq.w	ip, ip, #1
 80035da:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 80035de:	4543      	cmp	r3, r8
 80035e0:	bf08      	it	eq
 80035e2:	f04c 0c01 	orreq.w	ip, ip, #1
 80035e6:	f108 0818 	add.w	r8, r8, #24
 80035ea:	4543      	cmp	r3, r8
 80035ec:	bf08      	it	eq
 80035ee:	f04c 0c01 	orreq.w	ip, ip, #1
 80035f2:	f108 0818 	add.w	r8, r8, #24
 80035f6:	4543      	cmp	r3, r8
 80035f8:	bf08      	it	eq
 80035fa:	f04c 0c01 	orreq.w	ip, ip, #1
 80035fe:	f108 0818 	add.w	r8, r8, #24
 8003602:	4543      	cmp	r3, r8
 8003604:	bf08      	it	eq
 8003606:	f04c 0c01 	orreq.w	ip, ip, #1
 800360a:	f108 0818 	add.w	r8, r8, #24
 800360e:	4543      	cmp	r3, r8
 8003610:	bf08      	it	eq
 8003612:	f04c 0c01 	orreq.w	ip, ip, #1
 8003616:	f108 0818 	add.w	r8, r8, #24
 800361a:	4543      	cmp	r3, r8
 800361c:	bf08      	it	eq
 800361e:	f04c 0c01 	orreq.w	ip, ip, #1
 8003622:	f108 0818 	add.w	r8, r8, #24
 8003626:	4543      	cmp	r3, r8
 8003628:	bf08      	it	eq
 800362a:	f04c 0c01 	orreq.w	ip, ip, #1
 800362e:	f1bc 0f00 	cmp.w	ip, #0
 8003632:	d104      	bne.n	800363e <HAL_DMA_IRQHandler+0x336>
 8003634:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8003764 <HAL_DMA_IRQHandler+0x45c>
 8003638:	4563      	cmp	r3, ip
 800363a:	f040 8185 	bne.w	8003948 <HAL_DMA_IRQHandler+0x640>
 800363e:	f8d3 c000 	ldr.w	ip, [r3]
 8003642:	f01c 0f02 	tst.w	ip, #2
 8003646:	d004      	beq.n	8003652 <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003648:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800364a:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 800364c:	f041 0104 	orr.w	r1, r1, #4
 8003650:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003652:	2110      	movs	r1, #16
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	423a      	tst	r2, r7
 800365a:	d05b      	beq.n	8003714 <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800365c:	4940      	ldr	r1, [pc, #256]	@ (8003760 <HAL_DMA_IRQHandler+0x458>)
 800365e:	428b      	cmp	r3, r1
 8003660:	d042      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x3e0>
 8003662:	2800      	cmp	r0, #0
 8003664:	d140      	bne.n	80036e8 <HAL_DMA_IRQHandler+0x3e0>
 8003666:	3118      	adds	r1, #24
 8003668:	483f      	ldr	r0, [pc, #252]	@ (8003768 <HAL_DMA_IRQHandler+0x460>)
 800366a:	4283      	cmp	r3, r0
 800366c:	bf18      	it	ne
 800366e:	428b      	cmpne	r3, r1
 8003670:	f100 0018 	add.w	r0, r0, #24
 8003674:	bf0c      	ite	eq
 8003676:	2101      	moveq	r1, #1
 8003678:	2100      	movne	r1, #0
 800367a:	4283      	cmp	r3, r0
 800367c:	bf08      	it	eq
 800367e:	f041 0101 	orreq.w	r1, r1, #1
 8003682:	3018      	adds	r0, #24
 8003684:	4283      	cmp	r3, r0
 8003686:	bf08      	it	eq
 8003688:	f041 0101 	orreq.w	r1, r1, #1
 800368c:	3018      	adds	r0, #24
 800368e:	4283      	cmp	r3, r0
 8003690:	bf08      	it	eq
 8003692:	f041 0101 	orreq.w	r1, r1, #1
 8003696:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800369a:	4283      	cmp	r3, r0
 800369c:	bf08      	it	eq
 800369e:	f041 0101 	orreq.w	r1, r1, #1
 80036a2:	3018      	adds	r0, #24
 80036a4:	4283      	cmp	r3, r0
 80036a6:	bf08      	it	eq
 80036a8:	f041 0101 	orreq.w	r1, r1, #1
 80036ac:	3018      	adds	r0, #24
 80036ae:	4283      	cmp	r3, r0
 80036b0:	bf08      	it	eq
 80036b2:	f041 0101 	orreq.w	r1, r1, #1
 80036b6:	3018      	adds	r0, #24
 80036b8:	4283      	cmp	r3, r0
 80036ba:	bf08      	it	eq
 80036bc:	f041 0101 	orreq.w	r1, r1, #1
 80036c0:	3018      	adds	r0, #24
 80036c2:	4283      	cmp	r3, r0
 80036c4:	bf08      	it	eq
 80036c6:	f041 0101 	orreq.w	r1, r1, #1
 80036ca:	3018      	adds	r0, #24
 80036cc:	4283      	cmp	r3, r0
 80036ce:	bf08      	it	eq
 80036d0:	f041 0101 	orreq.w	r1, r1, #1
 80036d4:	3018      	adds	r0, #24
 80036d6:	4283      	cmp	r3, r0
 80036d8:	bf08      	it	eq
 80036da:	f041 0101 	orreq.w	r1, r1, #1
 80036de:	b919      	cbnz	r1, 80036e8 <HAL_DMA_IRQHandler+0x3e0>
 80036e0:	4920      	ldr	r1, [pc, #128]	@ (8003764 <HAL_DMA_IRQHandler+0x45c>)
 80036e2:	428b      	cmp	r3, r1
 80036e4:	f040 8137 	bne.w	8003956 <HAL_DMA_IRQHandler+0x64e>
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80036ee:	b189      	cbz	r1, 8003714 <HAL_DMA_IRQHandler+0x40c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036f0:	60a2      	str	r2, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	0350      	lsls	r0, r2, #13
 80036f6:	f100 80e7 	bmi.w	80038c8 <HAL_DMA_IRQHandler+0x5c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	05d2      	lsls	r2, r2, #23
 80036fe:	d403      	bmi.n	8003708 <HAL_DMA_IRQHandler+0x400>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	f022 0208 	bic.w	r2, r2, #8
 8003706:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003708:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 800370a:	b11b      	cbz	r3, 8003714 <HAL_DMA_IRQHandler+0x40c>
            hdma->XferHalfCpltCallback(hdma);
 800370c:	4630      	mov	r0, r6
 800370e:	4798      	blx	r3
 8003710:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003714:	f00e 011f 	and.w	r1, lr, #31
 8003718:	2020      	movs	r0, #32
 800371a:	4088      	lsls	r0, r1
 800371c:	4238      	tst	r0, r7
 800371e:	d073      	beq.n	8003808 <HAL_DMA_IRQHandler+0x500>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003720:	6832      	ldr	r2, [r6, #0]
 8003722:	4b12      	ldr	r3, [pc, #72]	@ (800376c <HAL_DMA_IRQHandler+0x464>)
 8003724:	4f12      	ldr	r7, [pc, #72]	@ (8003770 <HAL_DMA_IRQHandler+0x468>)
 8003726:	42ba      	cmp	r2, r7
 8003728:	bf18      	it	ne
 800372a:	429a      	cmpne	r2, r3
 800372c:	f107 0718 	add.w	r7, r7, #24
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	42ba      	cmp	r2, r7
 8003738:	bf08      	it	eq
 800373a:	f043 0301 	orreq.w	r3, r3, #1
 800373e:	3718      	adds	r7, #24
 8003740:	42ba      	cmp	r2, r7
 8003742:	bf08      	it	eq
 8003744:	f043 0301 	orreq.w	r3, r3, #1
 8003748:	3718      	adds	r7, #24
 800374a:	42ba      	cmp	r2, r7
 800374c:	bf08      	it	eq
 800374e:	f043 0301 	orreq.w	r3, r3, #1
 8003752:	3718      	adds	r7, #24
 8003754:	42ba      	cmp	r2, r7
 8003756:	bf08      	it	eq
 8003758:	f043 0301 	orreq.w	r3, r3, #1
 800375c:	3718      	adds	r7, #24
 800375e:	e00b      	b.n	8003778 <HAL_DMA_IRQHandler+0x470>
 8003760:	40020040 	.word	0x40020040
 8003764:	400204b8 	.word	0x400204b8
 8003768:	40020070 	.word	0x40020070
 800376c:	40020010 	.word	0x40020010
 8003770:	40020028 	.word	0x40020028
 8003774:	40020058 	.word	0x40020058
 8003778:	42ba      	cmp	r2, r7
 800377a:	bf08      	it	eq
 800377c:	f043 0301 	orreq.w	r3, r3, #1
 8003780:	3718      	adds	r7, #24
 8003782:	42ba      	cmp	r2, r7
 8003784:	bf08      	it	eq
 8003786:	f043 0301 	orreq.w	r3, r3, #1
 800378a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800378e:	42ba      	cmp	r2, r7
 8003790:	bf08      	it	eq
 8003792:	f043 0301 	orreq.w	r3, r3, #1
 8003796:	3718      	adds	r7, #24
 8003798:	42ba      	cmp	r2, r7
 800379a:	bf08      	it	eq
 800379c:	f043 0301 	orreq.w	r3, r3, #1
 80037a0:	3718      	adds	r7, #24
 80037a2:	42ba      	cmp	r2, r7
 80037a4:	bf08      	it	eq
 80037a6:	f043 0301 	orreq.w	r3, r3, #1
 80037aa:	3718      	adds	r7, #24
 80037ac:	42ba      	cmp	r2, r7
 80037ae:	bf08      	it	eq
 80037b0:	f043 0301 	orreq.w	r3, r3, #1
 80037b4:	3718      	adds	r7, #24
 80037b6:	42ba      	cmp	r2, r7
 80037b8:	bf08      	it	eq
 80037ba:	f043 0301 	orreq.w	r3, r3, #1
 80037be:	3718      	adds	r7, #24
 80037c0:	42ba      	cmp	r2, r7
 80037c2:	bf08      	it	eq
 80037c4:	f043 0301 	orreq.w	r3, r3, #1
 80037c8:	3718      	adds	r7, #24
 80037ca:	42ba      	cmp	r2, r7
 80037cc:	bf08      	it	eq
 80037ce:	f043 0301 	orreq.w	r3, r3, #1
 80037d2:	b91b      	cbnz	r3, 80037dc <HAL_DMA_IRQHandler+0x4d4>
 80037d4:	4b89      	ldr	r3, [pc, #548]	@ (80039fc <HAL_DMA_IRQHandler+0x6f4>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	f040 80f0 	bne.w	80039bc <HAL_DMA_IRQHandler+0x6b4>
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037e2:	b18b      	cbz	r3, 8003808 <HAL_DMA_IRQHandler+0x500>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037e4:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037e6:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 80037ea:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ec:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ee:	d074      	beq.n	80038da <HAL_DMA_IRQHandler+0x5d2>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037f0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037f4:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037f6:	f000 808a 	beq.w	800390e <HAL_DMA_IRQHandler+0x606>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037fa:	031f      	lsls	r7, r3, #12
 80037fc:	f140 8095 	bpl.w	800392a <HAL_DMA_IRQHandler+0x622>
          if(hdma->XferCpltCallback != NULL)
 8003800:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8003802:	b10b      	cbz	r3, 8003808 <HAL_DMA_IRQHandler+0x500>
            hdma->XferCpltCallback(hdma);
 8003804:	4630      	mov	r0, r6
 8003806:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003808:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800380a:	2b00      	cmp	r3, #0
 800380c:	f43f ae30 	beq.w	8003470 <HAL_DMA_IRQHandler+0x168>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003810:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8003812:	07dc      	lsls	r4, r3, #31
 8003814:	d51e      	bpl.n	8003854 <HAL_DMA_IRQHandler+0x54c>
        __HAL_DMA_DISABLE(hdma);
 8003816:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003818:	2104      	movs	r1, #4
 800381a:	f886 1035 	strb.w	r1, [r6, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 800381e:	4978      	ldr	r1, [pc, #480]	@ (8003a00 <HAL_DMA_IRQHandler+0x6f8>)
        __HAL_DMA_DISABLE(hdma);
 8003820:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003822:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8003826:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800382a:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e002      	b.n	8003836 <HAL_DMA_IRQHandler+0x52e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	07d8      	lsls	r0, r3, #31
 8003834:	d504      	bpl.n	8003840 <HAL_DMA_IRQHandler+0x538>
          if (++count > timeout)
 8003836:	9b01      	ldr	r3, [sp, #4]
 8003838:	3301      	adds	r3, #1
 800383a:	428b      	cmp	r3, r1
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	d9f7      	bls.n	8003830 <HAL_DMA_IRQHandler+0x528>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003840:	6813      	ldr	r3, [r2, #0]
 8003842:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003844:	bf4c      	ite	mi
 8003846:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003848:	2301      	movpl	r3, #1
 800384a:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800384e:	2300      	movs	r3, #0
 8003850:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8003854:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8003856:	2b00      	cmp	r3, #0
 8003858:	f43f ae0a 	beq.w	8003470 <HAL_DMA_IRQHandler+0x168>
          hdma->XferCpltCallback(hdma);
 800385c:	4630      	mov	r0, r6
}
 800385e:	b002      	add	sp, #8
 8003860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8003864:	4718      	bx	r3
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003866:	fa27 f102 	lsr.w	r1, r7, r2
 800386a:	07c9      	lsls	r1, r1, #31
 800386c:	f53f ae83 	bmi.w	8003576 <HAL_DMA_IRQHandler+0x26e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003870:	2104      	movs	r1, #4
 8003872:	4091      	lsls	r1, r2
 8003874:	420f      	tst	r7, r1
 8003876:	f47f aee2 	bne.w	800363e <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800387a:	2110      	movs	r1, #16
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	4217      	tst	r7, r2
 8003882:	f47f af31 	bne.w	80036e8 <HAL_DMA_IRQHandler+0x3e0>
 8003886:	e745      	b.n	8003714 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003888:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 800388c:	f04f 0c08 	mov.w	ip, #8
 8003890:	f00e 021f 	and.w	r2, lr, #31
 8003894:	fa0c f102 	lsl.w	r1, ip, r2
 8003898:	420f      	tst	r7, r1
 800389a:	f47f ae06 	bne.w	80034aa <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800389e:	fa27 f102 	lsr.w	r1, r7, r2
 80038a2:	07c9      	lsls	r1, r1, #31
 80038a4:	f53f ae67 	bmi.w	8003576 <HAL_DMA_IRQHandler+0x26e>
 80038a8:	e66f      	b.n	800358a <HAL_DMA_IRQHandler+0x282>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038aa:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 80038ae:	2108      	movs	r1, #8
 80038b0:	f00e 021f 	and.w	r2, lr, #31
 80038b4:	4091      	lsls	r1, r2
 80038b6:	420f      	tst	r7, r1
 80038b8:	f47f adf7 	bne.w	80034aa <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038bc:	fa27 f102 	lsr.w	r1, r7, r2
 80038c0:	07c9      	lsls	r1, r1, #31
 80038c2:	f53f ae58 	bmi.w	8003576 <HAL_DMA_IRQHandler+0x26e>
 80038c6:	e660      	b.n	800358a <HAL_DMA_IRQHandler+0x282>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0319      	lsls	r1, r3, #12
 80038cc:	f57f af1c 	bpl.w	8003708 <HAL_DMA_IRQHandler+0x400>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038d0:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f47f af1a 	bne.w	800370c <HAL_DMA_IRQHandler+0x404>
 80038d8:	e71c      	b.n	8003714 <HAL_DMA_IRQHandler+0x40c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038da:	f023 0316 	bic.w	r3, r3, #22
 80038de:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038e0:	6953      	ldr	r3, [r2, #20]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e6:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e8:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80038ea:	b31b      	cbz	r3, 8003934 <HAL_DMA_IRQHandler+0x62c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	f023 0308 	bic.w	r3, r3, #8
 80038f2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038f4:	233f      	movs	r3, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80038f6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 80038f8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038fa:	408b      	lsls	r3, r1
 80038fc:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 80038fe:	6d33      	ldr	r3, [r6, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003900:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003904:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1a7      	bne.n	800385c <HAL_DMA_IRQHandler+0x554>
 800390c:	e5b0      	b.n	8003470 <HAL_DMA_IRQHandler+0x168>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800390e:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003912:	f47f af75 	bne.w	8003800 <HAL_DMA_IRQHandler+0x4f8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003916:	6811      	ldr	r1, [r2, #0]
 8003918:	f021 0110 	bic.w	r1, r1, #16
 800391c:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800391e:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8003920:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003924:	f886 2035 	strb.w	r2, [r6, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8003928:	e76a      	b.n	8003800 <HAL_DMA_IRQHandler+0x4f8>
            if(hdma->XferM1CpltCallback != NULL)
 800392a:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f af69 	bne.w	8003804 <HAL_DMA_IRQHandler+0x4fc>
 8003932:	e769      	b.n	8003808 <HAL_DMA_IRQHandler+0x500>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003934:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1d8      	bne.n	80038ec <HAL_DMA_IRQHandler+0x5e4>
 800393a:	e7db      	b.n	80038f4 <HAL_DMA_IRQHandler+0x5ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800393c:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800393e:	2104      	movs	r1, #4
 8003940:	4091      	lsls	r1, r2
 8003942:	4239      	tst	r1, r7
 8003944:	f43f ae85 	beq.w	8003652 <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003948:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800394a:	2110      	movs	r1, #16
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	4217      	tst	r7, r2
 8003952:	f43f aedf 	beq.w	8003714 <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800395c:	e6c7      	b.n	80036ee <HAL_DMA_IRQHandler+0x3e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800395e:	2502      	movs	r5, #2
 8003960:	4085      	lsls	r5, r0
 8003962:	420d      	tst	r5, r1
 8003964:	d00b      	beq.n	800397e <HAL_DMA_IRQHandler+0x676>
 8003966:	0797      	lsls	r7, r2, #30
 8003968:	d509      	bpl.n	800397e <HAL_DMA_IRQHandler+0x676>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800396a:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800396c:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800396e:	d534      	bpl.n	80039da <HAL_DMA_IRQHandler+0x6d2>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003970:	03d7      	lsls	r7, r2, #15
 8003972:	d43e      	bmi.n	80039f2 <HAL_DMA_IRQHandler+0x6ea>
          if(hdma->XferM1CpltCallback != NULL)
 8003974:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f af70 	bne.w	800385c <HAL_DMA_IRQHandler+0x554>
 800397c:	e578      	b.n	8003470 <HAL_DMA_IRQHandler+0x168>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800397e:	2508      	movs	r5, #8
 8003980:	4085      	lsls	r5, r0
 8003982:	420d      	tst	r5, r1
 8003984:	f43f ad74 	beq.w	8003470 <HAL_DMA_IRQHandler+0x168>
 8003988:	0715      	lsls	r5, r2, #28
 800398a:	f57f ad71 	bpl.w	8003470 <HAL_DMA_IRQHandler+0x168>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398e:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8003990:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003998:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800399a:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800399c:	fa03 f000 	lsl.w	r0, r3, r0
 80039a0:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039a2:	6573      	str	r3, [r6, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 80039a4:	f886 1034 	strb.w	r1, [r6, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80039a8:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 80039ac:	2a00      	cmp	r2, #0
 80039ae:	f43f ad5f 	beq.w	8003470 <HAL_DMA_IRQHandler+0x168>
        hdma->XferErrorCallback(hdma);
 80039b2:	4630      	mov	r0, r6
}
 80039b4:	b002      	add	sp, #8
 80039b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80039ba:	4710      	bx	r2
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039bc:	6813      	ldr	r3, [r2, #0]
 80039be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039c2:	e70e      	b.n	80037e2 <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039c4:	0692      	lsls	r2, r2, #26
 80039c6:	d403      	bmi.n	80039d0 <HAL_DMA_IRQHandler+0x6c8>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	f022 0204 	bic.w	r2, r2, #4
 80039ce:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80039d0:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f47f af42 	bne.w	800385c <HAL_DMA_IRQHandler+0x554>
 80039d8:	e54a      	b.n	8003470 <HAL_DMA_IRQHandler+0x168>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039da:	f012 0220 	ands.w	r2, r2, #32
 80039de:	d108      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x6ea>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039e0:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80039e2:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039e4:	f021 010a 	bic.w	r1, r1, #10
 80039e8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80039ea:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80039ee:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80039f2:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f af31 	bne.w	800385c <HAL_DMA_IRQHandler+0x554>
 80039fa:	e539      	b.n	8003470 <HAL_DMA_IRQHandler+0x168>
 80039fc:	400204b8 	.word	0x400204b8
 8003a00:	1b4e81b5 	.word	0x1b4e81b5

08003a04 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003a04:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8003a06:	4770      	bx	lr

08003a08 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d035      	beq.n	8003a78 <HAL_DMA2D_Init+0x70>
{
 8003a0c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a0e:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8003a12:	4604      	mov	r4, r0
 8003a14:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a18:	b34b      	cbz	r3, 8003a6e <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a1a:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a1c:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a1e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a20:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a24:	69e1      	ldr	r1, [r4, #28]
 8003a26:	681d      	ldr	r5, [r3, #0]
 8003a28:	4814      	ldr	r0, [pc, #80]	@ (8003a7c <HAL_DMA2D_Init+0x74>)
 8003a2a:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a2c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a2e:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a30:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a32:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a34:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8003a36:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a38:	4302      	orrs	r2, r0
 8003a3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a3c:	4810      	ldr	r0, [pc, #64]	@ (8003a80 <HAL_DMA2D_Init+0x78>)
 8003a3e:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a40:	4910      	ldr	r1, [pc, #64]	@ (8003a84 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8003a42:	4302      	orrs	r2, r0
 8003a44:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a48:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a4a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a4e:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a50:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a52:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a56:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a5a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003a5c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003a60:	430a      	orrs	r2, r1
 8003a62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a64:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a66:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a68:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8003a6c:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003a6e:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8003a72:	f7fd ffdd 	bl	8001a30 <HAL_DMA2D_MspInit>
 8003a76:	e7d0      	b.n	8003a1a <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8003a78:	2001      	movs	r0, #1
}
 8003a7a:	4770      	bx	lr
 8003a7c:	fff8ffbf 	.word	0xfff8ffbf
 8003a80:	fffffef8 	.word	0xfffffef8
 8003a84:	ffff0000 	.word	0xffff0000

08003a88 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a88:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 8003a8c:	2a01      	cmp	r2, #1
 8003a8e:	d05f      	beq.n	8003b50 <HAL_DMA2D_ConfigLayer+0xc8>
 8003a90:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a92:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a96:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003a98:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8003a9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8003aa0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8003aa2:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003aa4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 8003aa8:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003aac:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003aae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003ab0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003ab2:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ab4:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003ab6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aba:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003abe:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003ac0:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ac2:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003ac6:	ea42 5244 	orr.w	r2, r2, r4, lsl #21

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003aca:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003acc:	d923      	bls.n	8003b16 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003ace:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ad2:	b971      	cbnz	r1, 8003af2 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ad4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003ad6:	491f      	ldr	r1, [pc, #124]	@ (8003b54 <HAL_DMA2D_ConfigLayer+0xcc>)
 8003ad8:	4001      	ands	r1, r0

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ada:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003adc:	4311      	orrs	r1, r2
 8003ade:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ae0:	61a0      	str	r0, [r4, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ae2:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ae4:	2101      	movs	r1, #1

  return HAL_OK;
 8003ae6:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ae8:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 8003aec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8003af2:	2d0b      	cmp	r5, #11
 8003af4:	d12a      	bne.n	8003b4c <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8003af6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003af8:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8003afc:	4816      	ldr	r0, [pc, #88]	@ (8003b58 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003afe:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b02:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b04:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b08:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b0a:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b12:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b14:	e7e5      	b.n	8003ae2 <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b16:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 8003b1a:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b1c:	b959      	cbnz	r1, 8003b36 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b1e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003b20:	490c      	ldr	r1, [pc, #48]	@ (8003b54 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b22:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b24:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b26:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b28:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b2a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b2e:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b30:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b32:	62a0      	str	r0, [r4, #40]	@ 0x28
 8003b34:	e7d5      	b.n	8003ae2 <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b36:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b38:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b3c:	4905      	ldr	r1, [pc, #20]	@ (8003b54 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b3e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b40:	4029      	ands	r1, r5
 8003b42:	4311      	orrs	r1, r2
 8003b44:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b46:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b48:	6226      	str	r6, [r4, #32]
 8003b4a:	e7ca      	b.n	8003ae2 <HAL_DMA2D_ConfigLayer+0x5a>
 8003b4c:	4801      	ldr	r0, [pc, #4]	@ (8003b54 <HAL_DMA2D_ConfigLayer+0xcc>)
 8003b4e:	e7d6      	b.n	8003afe <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 8003b50:	2002      	movs	r0, #2
}
 8003b52:	4770      	bx	lr
 8003b54:	00ccfff0 	.word	0x00ccfff0
 8003b58:	00c0fff0 	.word	0x00c0fff0

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b60:	680c      	ldr	r4, [r1, #0]
{
 8003b62:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b64:	2c00      	cmp	r4, #0
 8003b66:	f000 80a5 	beq.w	8003cb4 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 8003b6a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b6c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b70:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b74:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b76:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 8003b7a:	ea1c 0a04 	ands.w	sl, ip, r4
 8003b7e:	f000 8094 	beq.w	8003caa <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b82:	9900      	ldr	r1, [sp, #0]
 8003b84:	005f      	lsls	r7, r3, #1
 8003b86:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b88:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b8a:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b8e:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b92:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b96:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b98:	f1b8 0f01 	cmp.w	r8, #1
 8003b9c:	f240 808d 	bls.w	8003cba <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba0:	2a03      	cmp	r2, #3
 8003ba2:	f040 80cb 	bne.w	8003d3c <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003ba8:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003baa:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bae:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb2:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8003bb6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb8:	d077      	beq.n	8003caa <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bba:	4e7f      	ldr	r6, [pc, #508]	@ (8003db8 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bbc:	f003 0703 	and.w	r7, r3, #3
 8003bc0:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bc6:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc8:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bcc:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bd0:	497a      	ldr	r1, [pc, #488]	@ (8003dbc <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	f8c6 2154 	str.w	r2, [r6, #340]	@ 0x154
 8003bd6:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
 8003bda:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bde:	4288      	cmp	r0, r1
 8003be0:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be4:	f002 0202 	and.w	r2, r2, #2
 8003be8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003bec:	9203      	str	r2, [sp, #12]
 8003bee:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf0:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bf2:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bf6:	d031      	beq.n	8003c5c <HAL_GPIO_Init+0x100>
 8003bf8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003bfc:	4288      	cmp	r0, r1
 8003bfe:	f000 80b0 	beq.w	8003d62 <HAL_GPIO_Init+0x206>
 8003c02:	496f      	ldr	r1, [pc, #444]	@ (8003dc0 <HAL_GPIO_Init+0x264>)
 8003c04:	4288      	cmp	r0, r1
 8003c06:	f000 80b2 	beq.w	8003d6e <HAL_GPIO_Init+0x212>
 8003c0a:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8003dc4 <HAL_GPIO_Init+0x268>
 8003c0e:	4560      	cmp	r0, ip
 8003c10:	f000 80a1 	beq.w	8003d56 <HAL_GPIO_Init+0x1fa>
 8003c14:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8003dc8 <HAL_GPIO_Init+0x26c>
 8003c18:	4560      	cmp	r0, ip
 8003c1a:	f000 80b4 	beq.w	8003d86 <HAL_GPIO_Init+0x22a>
 8003c1e:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8003dcc <HAL_GPIO_Init+0x270>
 8003c22:	4560      	cmp	r0, ip
 8003c24:	f000 80b5 	beq.w	8003d92 <HAL_GPIO_Init+0x236>
 8003c28:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8003dd0 <HAL_GPIO_Init+0x274>
 8003c2c:	4560      	cmp	r0, ip
 8003c2e:	f000 80a4 	beq.w	8003d7a <HAL_GPIO_Init+0x21e>
 8003c32:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8003dd4 <HAL_GPIO_Init+0x278>
 8003c36:	4560      	cmp	r0, ip
 8003c38:	f000 80b1 	beq.w	8003d9e <HAL_GPIO_Init+0x242>
 8003c3c:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8003dd8 <HAL_GPIO_Init+0x27c>
 8003c40:	4560      	cmp	r0, ip
 8003c42:	f000 80b2 	beq.w	8003daa <HAL_GPIO_Init+0x24e>
 8003c46:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8003ddc <HAL_GPIO_Init+0x280>
 8003c4a:	4560      	cmp	r0, ip
 8003c4c:	bf0c      	ite	eq
 8003c4e:	f04f 0c09 	moveq.w	ip, #9
 8003c52:	f04f 0c0a 	movne.w	ip, #10
 8003c56:	fa0c f707 	lsl.w	r7, ip, r7
 8003c5a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c5c:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c5e:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8003c60:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8003c64:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8003c68:	bf4c      	ite	mi
 8003c6a:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8003c6e:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c70:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8003c72:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8003c76:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8003c7a:	bf54      	ite	pl
 8003c7c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003c7e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c82:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8003c84:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003c88:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003c8c:	bf54      	ite	pl
 8003c8e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003c90:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c94:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003c96:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003c9a:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003c9e:	bf54      	ite	pl
 8003ca0:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003ca2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ca6:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8003caa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cac:	fa34 f203 	lsrs.w	r2, r4, r3
 8003cb0:	f47f af61 	bne.w	8003b76 <HAL_GPIO_Init+0x1a>
  }
}
 8003cb4:	b005      	add	sp, #20
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cba:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbc:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8003cbe:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc2:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cc4:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc8:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ccc:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cce:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd2:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8003cd4:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd8:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003cdc:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce0:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ce4:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce8:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003cec:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf0:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8003cf4:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf8:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cfc:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003d00:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d04:	f47f af4f 	bne.w	8003ba6 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d08:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d0c:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8003d0e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d12:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d16:	6909      	ldr	r1, [r1, #16]
 8003d18:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003d1c:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8003d20:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d24:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d26:	210f      	movs	r1, #15
 8003d28:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d2c:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d2e:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d32:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003d36:	f8c8 c020 	str.w	ip, [r8, #32]
 8003d3a:	e734      	b.n	8003ba6 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3c:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8003d3e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d42:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d44:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d48:	fa01 fc07 	lsl.w	ip, r1, r7
 8003d4c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003d50:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d54:	e727      	b.n	8003ba6 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d56:	f04f 0c03 	mov.w	ip, #3
 8003d5a:	fa0c f707 	lsl.w	r7, ip, r7
 8003d5e:	433a      	orrs	r2, r7
 8003d60:	e77c      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003d62:	f04f 0c01 	mov.w	ip, #1
 8003d66:	fa0c f707 	lsl.w	r7, ip, r7
 8003d6a:	433a      	orrs	r2, r7
 8003d6c:	e776      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003d6e:	f04f 0c02 	mov.w	ip, #2
 8003d72:	fa0c f707 	lsl.w	r7, ip, r7
 8003d76:	433a      	orrs	r2, r7
 8003d78:	e770      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003d7a:	f04f 0c06 	mov.w	ip, #6
 8003d7e:	fa0c f707 	lsl.w	r7, ip, r7
 8003d82:	433a      	orrs	r2, r7
 8003d84:	e76a      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003d86:	f04f 0c04 	mov.w	ip, #4
 8003d8a:	fa0c f707 	lsl.w	r7, ip, r7
 8003d8e:	433a      	orrs	r2, r7
 8003d90:	e764      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003d92:	f04f 0c05 	mov.w	ip, #5
 8003d96:	fa0c f707 	lsl.w	r7, ip, r7
 8003d9a:	433a      	orrs	r2, r7
 8003d9c:	e75e      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003d9e:	f04f 0c07 	mov.w	ip, #7
 8003da2:	fa0c f707 	lsl.w	r7, ip, r7
 8003da6:	433a      	orrs	r2, r7
 8003da8:	e758      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003daa:	f04f 0c08 	mov.w	ip, #8
 8003dae:	fa0c f707 	lsl.w	r7, ip, r7
 8003db2:	433a      	orrs	r2, r7
 8003db4:	e752      	b.n	8003c5c <HAL_GPIO_Init+0x100>
 8003db6:	bf00      	nop
 8003db8:	58024400 	.word	0x58024400
 8003dbc:	58020000 	.word	0x58020000
 8003dc0:	58020800 	.word	0x58020800
 8003dc4:	58020c00 	.word	0x58020c00
 8003dc8:	58021000 	.word	0x58021000
 8003dcc:	58021400 	.word	0x58021400
 8003dd0:	58021800 	.word	0x58021800
 8003dd4:	58021c00 	.word	0x58021c00
 8003dd8:	58022000 	.word	0x58022000
 8003ddc:	58022400 	.word	0x58022400

08003de0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003de0:	6903      	ldr	r3, [r0, #16]
 8003de2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003de4:	bf14      	ite	ne
 8003de6:	2001      	movne	r0, #1
 8003de8:	2000      	moveq	r0, #0
 8003dea:	4770      	bx	lr

08003dec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dec:	b902      	cbnz	r2, 8003df0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dee:	0409      	lsls	r1, r1, #16
 8003df0:	6181      	str	r1, [r0, #24]
  }
}
 8003df2:	4770      	bx	lr

08003df4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8003dfc:	4201      	tst	r1, r0
 8003dfe:	d100      	bne.n	8003e02 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8003e00:	4770      	bx	lr
{
 8003e02:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e04:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e08:	f7fd fdc8 	bl	800199c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e0c:	bd08      	pop	{r3, pc}
 8003e0e:	bf00      	nop

08003e10 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8003e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                                                    uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	0414      	lsls	r4, r2, #16
 8003e1a:	f140 8088 	bpl.w	8003f2e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11e>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4688      	mov	r8, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e22:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e26:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e28:	f016 0610 	ands.w	r6, r6, #16
 8003e2c:	f000 8082 	beq.w	8003f34 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x124>
  uint32_t error_code = 0;
 8003e30:	2600      	movs	r6, #0
  uint32_t tickstart = Tickstart;
 8003e32:	4645      	mov	r5, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	f8c3 901c 	str.w	r9, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	4637      	mov	r7, r6

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	0692      	lsls	r2, r2, #26
 8003e3e:	d427      	bmi.n	8003e90 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x80>
 8003e40:	bb4f      	cbnz	r7, 8003e96 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe f907 	bl	8002054 <HAL_GetTick>
 8003e46:	1b40      	subs	r0, r0, r5
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e48:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	2819      	cmp	r0, #25
 8003e4c:	d9f5      	bls.n	8003e3a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e4e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003e50:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e54:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8003e56:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e58:	0409      	lsls	r1, r1, #16
 8003e5a:	d50b      	bpl.n	8003e74 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp1 != I2C_CR2_STOP) && \
 8003e5c:	0440      	lsls	r0, r0, #17
 8003e5e:	d409      	bmi.n	8003e74 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
 8003e60:	2a20      	cmp	r2, #32
 8003e62:	d007      	beq.n	8003e74 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e6a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e6c:	f7fe f8f2 	bl	8002054 <HAL_GetTick>
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e70:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003e72:	4605      	mov	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	0691      	lsls	r1, r2, #26
 8003e78:	d4df      	bmi.n	8003e3a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x2a>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e7a:	f7fe f8eb 	bl	8002054 <HAL_GetTick>
 8003e7e:	1b40      	subs	r0, r0, r5
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e80:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e82:	2819      	cmp	r0, #25
 8003e84:	d9f6      	bls.n	8003e74 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x64>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e86:	699a      	ldr	r2, [r3, #24]
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	2620      	movs	r6, #32

              status = HAL_ERROR;
 8003e8a:	2701      	movs	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e8c:	0692      	lsls	r2, r2, #26
 8003e8e:	d5d7      	bpl.n	8003e40 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x30>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e90:	b90f      	cbnz	r7, 8003e96 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x86>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e92:	2220      	movs	r2, #32
 8003e94:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e96:	f046 0604 	orr.w	r6, r6, #4

    status = HAL_ERROR;
 8003e9a:	2501      	movs	r5, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e9c:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e9e:	05d7      	lsls	r7, r2, #23
 8003ea0:	d531      	bpl.n	8003f06 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xf6>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ea2:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ea6:	0550      	lsls	r0, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8003ea8:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eac:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003eae:	d504      	bpl.n	8003eba <I2C_WaitOnFlagUntilTimeout.constprop.0+0xaa>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003eb4:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eb8:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003eba:	0592      	lsls	r2, r2, #22
 8003ebc:	d504      	bpl.n	8003ec8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ec2:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ec6:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	0795      	lsls	r5, r2, #30
 8003ecc:	d501      	bpl.n	8003ed2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xc2>
    hi2c->Instance->TXDR = 0x00U;
 8003ece:	2200      	movs	r2, #0
 8003ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	07d0      	lsls	r0, r2, #31
 8003ed6:	d403      	bmi.n	8003ee0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ee0:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 8003ee4:	4d19      	ldr	r5, [pc, #100]	@ (8003f4c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x13c>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8003ee8:	402a      	ands	r2, r5
 8003eea:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8003eec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003eee:	4333      	orrs	r3, r6
 8003ef0:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8003efa:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003efc:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8003efe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f06:	0551      	lsls	r1, r2, #21
 8003f08:	d4d2      	bmi.n	8003eb0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f0a:	0597      	lsls	r7, r2, #22
 8003f0c:	d4d7      	bmi.n	8003ebe <I2C_WaitOnFlagUntilTimeout.constprop.0+0xae>
  if (status != HAL_OK)
 8003f0e:	2d00      	cmp	r5, #0
 8003f10:	d1da      	bne.n	8003ec8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fe f89f 	bl	8002054 <HAL_GetTick>
 8003f16:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f1a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1c:	2819      	cmp	r0, #25
 8003f1e:	d902      	bls.n	8003f26 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x116>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	0411      	lsls	r1, r2, #16
 8003f24:	d408      	bmi.n	8003f38 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	0412      	lsls	r2, r2, #16
 8003f2a:	f53f af7c 	bmi.w	8003e26 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x16>
  return HAL_OK;
 8003f2e:	2000      	movs	r0, #0
}
 8003f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	4635      	mov	r5, r6
 8003f36:	e7b1      	b.n	8003e9c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x8c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	2220      	movs	r2, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8003f48:	e7d7      	b.n	8003efa <I2C_WaitOnFlagUntilTimeout.constprop.0+0xea>
 8003f4a:	bf00      	nop
 8003f4c:	fe00e800 	.word	0xfe00e800

08003f50 <I2C_WaitOnFlagUntilTimeout>:
{
 8003f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	461c      	mov	r4, r3
 8003f56:	4683      	mov	fp, r0
 8003f58:	460e      	mov	r6, r1
 8003f5a:	4615      	mov	r5, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5c:	6803      	ldr	r3, [r0, #0]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5e:	f04f 0810 	mov.w	r8, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	ea36 0202 	bics.w	r2, r6, r2
 8003f68:	bf0c      	ite	eq
 8003f6a:	2201      	moveq	r2, #1
 8003f6c:	2200      	movne	r2, #0
 8003f6e:	42aa      	cmp	r2, r5
 8003f70:	f040 80af 	bne.w	80040d2 <I2C_WaitOnFlagUntilTimeout+0x182>
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f74:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f76:	f012 0c10 	ands.w	ip, r2, #16
 8003f7a:	d07d      	beq.n	8004078 <I2C_WaitOnFlagUntilTimeout+0x128>
  uint32_t error_code = 0;
 8003f7c:	f04f 0900 	mov.w	r9, #0
  uint32_t tickstart = Tickstart;
 8003f80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	f8c3 801c 	str.w	r8, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	464f      	mov	r7, r9
 8003f8a:	1c60      	adds	r0, r4, #1
 8003f8c:	d001      	beq.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003f8e:	e041      	b.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xc4>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f90:	b92f      	cbnz	r7, 8003f9e <I2C_WaitOnFlagUntilTimeout+0x4e>
 8003f92:	699a      	ldr	r2, [r3, #24]
 8003f94:	0691      	lsls	r1, r2, #26
 8003f96:	d5fb      	bpl.n	8003f90 <I2C_WaitOnFlagUntilTimeout+0x40>
    if (status == HAL_OK)
 8003f98:	b90f      	cbnz	r7, 8003f9e <I2C_WaitOnFlagUntilTimeout+0x4e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8003f9e:	699a      	ldr	r2, [r3, #24]
    error_code |= HAL_I2C_ERROR_AF;
 8003fa0:	f049 0c04 	orr.w	ip, r9, #4
    status = HAL_ERROR;
 8003fa4:	2101      	movs	r1, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fa6:	05d7      	lsls	r7, r2, #23
 8003fa8:	d56a      	bpl.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003faa:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fae:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8003fb0:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fb4:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fb6:	d504      	bpl.n	8003fc2 <I2C_WaitOnFlagUntilTimeout+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003fbc:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fc0:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fc2:	0592      	lsls	r2, r2, #22
 8003fc4:	d504      	bpl.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fca:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fce:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	0790      	lsls	r0, r2, #30
 8003fd4:	d501      	bpl.n	8003fda <I2C_WaitOnFlagUntilTimeout+0x8a>
    hi2c->Instance->TXDR = 0x00U;
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	07d1      	lsls	r1, r2, #31
 8003fde:	d403      	bmi.n	8003fe8 <I2C_WaitOnFlagUntilTimeout+0x98>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8003fe8:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 8003fec:	4c3a      	ldr	r4, [pc, #232]	@ (80040d8 <I2C_WaitOnFlagUntilTimeout+0x188>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8003ff0:	4022      	ands	r2, r4
 8003ff2:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8003ff4:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
 8003ff8:	ea43 030c 	orr.w	r3, r3, ip
 8003ffc:	f8cb 3044 	str.w	r3, [fp, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	f88b 0041 	strb.w	r0, [fp, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	f88b 1042 	strb.w	r1, [fp, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8004008:	2300      	movs	r3, #0
      return HAL_ERROR;
 800400a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800400c:	f88b 3040 	strb.w	r3, [fp, #64]	@ 0x40
}
 8004010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	0692      	lsls	r2, r2, #26
 8004018:	d4be      	bmi.n	8003f98 <I2C_WaitOnFlagUntilTimeout+0x48>
 800401a:	2f00      	cmp	r7, #0
 800401c:	d1bf      	bne.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0x4e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe f819 	bl	8002054 <HAL_GetTick>
 8004022:	eba0 000a 	sub.w	r0, r0, sl
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004026:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800402a:	4284      	cmp	r4, r0
 800402c:	d301      	bcc.n	8004032 <I2C_WaitOnFlagUntilTimeout+0xe2>
 800402e:	2c00      	cmp	r4, #0
 8004030:	d1f0      	bne.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xc4>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004032:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004034:	f89b 2042 	ldrb.w	r2, [fp, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004038:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800403a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800403c:	0400      	lsls	r0, r0, #16
 800403e:	d50c      	bpl.n	800405a <I2C_WaitOnFlagUntilTimeout+0x10a>
              (tmp1 != I2C_CR2_STOP) && \
 8004040:	0449      	lsls	r1, r1, #17
 8004042:	d40a      	bmi.n	800405a <I2C_WaitOnFlagUntilTimeout+0x10a>
 8004044:	2a20      	cmp	r2, #32
 8004046:	d008      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x10a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800404e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004050:	f7fe f800 	bl	8002054 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004054:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8004058:	4682      	mov	sl, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	0692      	lsls	r2, r2, #26
 800405e:	d494      	bmi.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0x3a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004060:	f7fd fff8 	bl	8002054 <HAL_GetTick>
 8004064:	eba0 000a 	sub.w	r0, r0, sl
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004068:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800406c:	2819      	cmp	r0, #25
 800406e:	d9f4      	bls.n	800405a <I2C_WaitOnFlagUntilTimeout+0x10a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004070:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
 8004074:	2701      	movs	r7, #1
 8004076:	e788      	b.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0x3a>
  itflag = hi2c->Instance->ISR;
 8004078:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	4661      	mov	r1, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800407c:	05d7      	lsls	r7, r2, #23
 800407e:	d494      	bmi.n	8003faa <I2C_WaitOnFlagUntilTimeout+0x5a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004080:	0550      	lsls	r0, r2, #21
 8004082:	d499      	bmi.n	8003fb8 <I2C_WaitOnFlagUntilTimeout+0x68>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004084:	0597      	lsls	r7, r2, #22
 8004086:	d49e      	bmi.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  if (status != HAL_OK)
 8004088:	2900      	cmp	r1, #0
 800408a:	d1a1      	bne.n	8003fd0 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 800408c:	1c62      	adds	r2, r4, #1
 800408e:	f43f af68 	beq.w	8003f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fd ffdf 	bl	8002054 <HAL_GetTick>
 8004096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004098:	1ac3      	subs	r3, r0, r3
 800409a:	42a3      	cmp	r3, r4
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800409c:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	d802      	bhi.n	80040a8 <I2C_WaitOnFlagUntilTimeout+0x158>
 80040a2:	2c00      	cmp	r4, #0
 80040a4:	f47f af5d 	bne.w	8003f62 <I2C_WaitOnFlagUntilTimeout+0x12>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	ea36 0202 	bics.w	r2, r6, r2
 80040ae:	bf0c      	ite	eq
 80040b0:	2201      	moveq	r2, #1
 80040b2:	2200      	movne	r2, #0
 80040b4:	42aa      	cmp	r2, r5
 80040b6:	f47f af54 	bne.w	8003f62 <I2C_WaitOnFlagUntilTimeout+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ba:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040be:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c2:	430b      	orrs	r3, r1
 80040c4:	f8cb 3044 	str.w	r3, [fp, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	f88b 1041 	strb.w	r1, [fp, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	f88b 2042 	strb.w	r2, [fp, #66]	@ 0x42
          return HAL_ERROR;
 80040d0:	e79a      	b.n	8004008 <I2C_WaitOnFlagUntilTimeout+0xb8>
  return HAL_OK;
 80040d2:	2000      	movs	r0, #0
}
 80040d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d8:	fe00e800 	.word	0xfe00e800

080040dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040dc:	6803      	ldr	r3, [r0, #0]
{
 80040de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e2:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	0694      	lsls	r4, r2, #26
 80040e8:	f100 8092 	bmi.w	8004210 <I2C_WaitOnSTOPFlagUntilTimeout+0x134>
 80040ec:	4605      	mov	r5, r0
 80040ee:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f0:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80040f4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040f6:	f012 0c10 	ands.w	ip, r2, #16
 80040fa:	f000 808c 	beq.w	8004216 <I2C_WaitOnSTOPFlagUntilTimeout+0x13a>
  uint32_t error_code = 0;
 80040fe:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8004100:	46b9      	mov	r9, r7
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004102:	f8c3 801c 	str.w	r8, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	46a2      	mov	sl, r4
 8004108:	1c70      	adds	r0, r6, #1
 800410a:	d003      	beq.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800410c:	e043      	b.n	8004196 <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800410e:	f1ba 0f00 	cmp.w	sl, #0
 8004112:	d107      	bne.n	8004124 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	0691      	lsls	r1, r2, #26
 8004118:	d5f9      	bpl.n	800410e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    if (status == HAL_OK)
 800411a:	f1ba 0f00 	cmp.w	sl, #0
 800411e:	d101      	bne.n	8004124 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004120:	2220      	movs	r2, #32
 8004122:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004124:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 8004128:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800412a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800412c:	05d0      	lsls	r0, r2, #23
 800412e:	d55a      	bpl.n	80041e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004130:	f44f 7180 	mov.w	r1, #256	@ 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004134:	0554      	lsls	r4, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8004136:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800413a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800413c:	d504      	bpl.n	8004148 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800413e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004142:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004146:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004148:	0596      	lsls	r6, r2, #22
 800414a:	d504      	bpl.n	8004156 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800414c:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004150:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004154:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	0790      	lsls	r0, r2, #30
 800415a:	d501      	bpl.n	8004160 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
 800415c:	2200      	movs	r2, #0
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	07d1      	lsls	r1, r2, #31
 8004164:	d403      	bmi.n	800416e <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800416e:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004170:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 8004172:	4c33      	ldr	r4, [pc, #204]	@ (8004240 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8004176:	4022      	ands	r2, r4
 8004178:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800417a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800417c:	ea43 030c 	orr.w	r3, r3, ip
 8004180:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004182:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800418a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800418c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800418e:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
}
 8004192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	0692      	lsls	r2, r2, #26
 800419a:	d4be      	bmi.n	800411a <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
 800419c:	f1ba 0f00 	cmp.w	sl, #0
 80041a0:	d1c0      	bne.n	8004124 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fd ff57 	bl	8002054 <HAL_GetTick>
 80041a6:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041aa:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	4286      	cmp	r6, r0
 80041ae:	d301      	bcc.n	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xd8>
 80041b0:	2e00      	cmp	r6, #0
 80041b2:	d1f0      	bne.n	8004196 <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041b4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80041b6:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041ba:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80041bc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041be:	0409      	lsls	r1, r1, #16
 80041c0:	d503      	bpl.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
              (tmp1 != I2C_CR2_STOP) && \
 80041c2:	0441      	lsls	r1, r0, #17
 80041c4:	d401      	bmi.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 80041c6:	2a20      	cmp	r2, #32
 80041c8:	d130      	bne.n	800422c <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	0692      	lsls	r2, r2, #26
 80041ce:	d49b      	bmi.n	8004108 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041d0:	f7fd ff40 	bl	8002054 <HAL_GetTick>
 80041d4:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041d8:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041da:	2819      	cmp	r0, #25
 80041dc:	d9f5      	bls.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80041e0:	f04f 0a01 	mov.w	sl, #1
 80041e4:	e790      	b.n	8004108 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041e6:	0550      	lsls	r0, r2, #21
 80041e8:	d4a9      	bmi.n	800413e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041ea:	0594      	lsls	r4, r2, #22
 80041ec:	d4ae      	bmi.n	800414c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d1b1      	bne.n	8004156 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fd ff2f 	bl	8002054 <HAL_GetTick>
 80041f6:	1bc0      	subs	r0, r0, r7
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041f8:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	42b0      	cmp	r0, r6
 80041fc:	d800      	bhi.n	8004200 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 80041fe:	b91e      	cbnz	r6, 8004208 <I2C_WaitOnSTOPFlagUntilTimeout+0x12c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	f012 0220 	ands.w	r2, r2, #32
 8004206:	d008      	beq.n	800421a <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	0692      	lsls	r2, r2, #26
 800420c:	f57f af72 	bpl.w	80040f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 8004210:	2000      	movs	r0, #0
}
 8004212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	4661      	mov	r1, ip
 8004218:	e787      	b.n	800412a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800421c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421e:	430b      	orrs	r3, r1
 8004220:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004222:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004226:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 800422a:	e7ae      	b.n	800418a <I2C_WaitOnSTOPFlagUntilTimeout+0xae>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004232:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004234:	f7fd ff0e 	bl	8002054 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004238:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800423a:	4681      	mov	r9, r0
 800423c:	e7c5      	b.n	80041ca <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 800423e:	bf00      	nop
 8004240:	fe00e800 	.word	0xfe00e800

08004244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004244:	6803      	ldr	r3, [r0, #0]
{
 8004246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424a:	4692      	mov	sl, r2
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	0754      	lsls	r4, r2, #29
 8004250:	f100 80bc 	bmi.w	80043cc <I2C_WaitOnRXNEFlagUntilTimeout+0x188>
 8004254:	4605      	mov	r5, r0
 8004256:	460e      	mov	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004258:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800425c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800425e:	f012 0c10 	ands.w	ip, r2, #16
 8004262:	f000 8096 	beq.w	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0x14e>
  uint32_t error_code = 0;
 8004266:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8004268:	46d1      	mov	r9, sl
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426a:	f8c3 801c 	str.w	r8, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	4627      	mov	r7, r4
 8004270:	1c70      	adds	r0, r6, #1
 8004272:	d001      	beq.n	8004278 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8004274:	e045      	b.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004276:	b92f      	cbnz	r7, 8004284 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	0691      	lsls	r1, r2, #26
 800427c:	d5fb      	bpl.n	8004276 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if (status == HAL_OK)
 800427e:	b90f      	cbnz	r7, 8004284 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004280:	2220      	movs	r2, #32
 8004282:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004284:	f044 0c04 	orr.w	ip, r4, #4
    status = HAL_ERROR;
 8004288:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800428a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800428c:	05d0      	lsls	r0, r2, #23
 800428e:	d55e      	bpl.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004290:	f44f 7180 	mov.w	r1, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004294:	f04c 0c01 	orr.w	ip, ip, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004298:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800429a:	0551      	lsls	r1, r2, #21
 800429c:	d504      	bpl.n	80042a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800429e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80042a2:	f04c 0c08 	orr.w	ip, ip, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042a6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042a8:	0594      	lsls	r4, r2, #22
 80042aa:	d504      	bpl.n	80042b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80042b0:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042b4:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	0792      	lsls	r2, r2, #30
 80042ba:	d501      	bpl.n	80042c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    hi2c->Instance->TXDR = 0x00U;
 80042bc:	2200      	movs	r2, #0
 80042be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c0:	699a      	ldr	r2, [r3, #24]
 80042c2:	07d7      	lsls	r7, r2, #31
 80042c4:	d403      	bmi.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80042ce:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 80042d2:	4c44      	ldr	r4, [pc, #272]	@ (80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a0>)
    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	2020      	movs	r0, #32
    I2C_RESET_CR2(hi2c);
 80042d6:	4022      	ands	r2, r4
 80042d8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80042da:	6c6a      	ldr	r2, [r5, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042dc:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
    hi2c->ErrorCode |= error_code;
 80042e0:	ea42 020c 	orr.w	r2, r2, ip
 80042e4:	646a      	str	r2, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ea:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	069e      	lsls	r6, r3, #26
 80042f2:	d449      	bmi.n	8004388 <I2C_WaitOnRXNEFlagUntilTimeout+0x144>
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80042f4:	f7fd feae 	bl	8002054 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
    status = HAL_ERROR;
 80042fc:	2001      	movs	r0, #1
}
 80042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	0692      	lsls	r2, r2, #26
 8004306:	d4ba      	bmi.n	800427e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8004308:	2f00      	cmp	r7, #0
 800430a:	d1bb      	bne.n	8004284 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800430c:	f7fd fea2 	bl	8002054 <HAL_GetTick>
 8004310:	eba0 0009 	sub.w	r0, r0, r9
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004314:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004316:	4286      	cmp	r6, r0
 8004318:	d301      	bcc.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xda>
 800431a:	2e00      	cmp	r6, #0
 800431c:	d1f1      	bne.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800431e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8004320:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004324:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8004326:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004328:	0409      	lsls	r1, r1, #16
 800432a:	d503      	bpl.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
              (tmp1 != I2C_CR2_STOP) && \
 800432c:	0441      	lsls	r1, r0, #17
 800432e:	d401      	bmi.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
 8004330:	2a20      	cmp	r2, #32
 8004332:	d14d      	bne.n	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x18c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	0692      	lsls	r2, r2, #26
 8004338:	d49a      	bmi.n	8004270 <I2C_WaitOnRXNEFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800433a:	f7fd fe8b 	bl	8002054 <HAL_GetTick>
 800433e:	eba0 0009 	sub.w	r0, r0, r9
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004342:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004344:	2819      	cmp	r0, #25
 8004346:	d9f5      	bls.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800434a:	2701      	movs	r7, #1
 800434c:	e790      	b.n	8004270 <I2C_WaitOnRXNEFlagUntilTimeout+0x2c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800434e:	0557      	lsls	r7, r2, #21
 8004350:	d4a5      	bmi.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004352:	0590      	lsls	r0, r2, #22
 8004354:	d4aa      	bmi.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
  if (status != HAL_OK)
 8004356:	2900      	cmp	r1, #0
 8004358:	d1ad      	bne.n	80042b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	0694      	lsls	r4, r2, #26
 800435e:	d51b      	bpl.n	8004398 <I2C_WaitOnRXNEFlagUntilTimeout+0x154>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004360:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	06d0      	lsls	r0, r2, #27
 8004366:	d516      	bpl.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0x152>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004368:	2020      	movs	r0, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436a:	2410      	movs	r4, #16
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800436c:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	61dc      	str	r4, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004370:	646a      	str	r2, [r5, #68]	@ 0x44
        I2C_RESET_CR2(hi2c);
 8004372:	4c1c      	ldr	r4, [pc, #112]	@ (80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a0>)
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004374:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	4022      	ands	r2, r4
 800437a:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800437c:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8004380:	f885 1040 	strb.w	r1, [r5, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	f885 1042 	strb.w	r1, [r5, #66]	@ 0x42
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004388:	f7fd fe64 	bl	8002054 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	e7b4      	b.n	80042fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	4661      	mov	r1, ip
 8004394:	e779      	b.n	800428a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004396:	6469      	str	r1, [r5, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004398:	f7fd fe5c 	bl	8002054 <HAL_GetTick>
 800439c:	eba0 000a 	sub.w	r0, r0, sl
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043a0:	682b      	ldr	r3, [r5, #0]
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80043a2:	4286      	cmp	r6, r0
 80043a4:	d300      	bcc.n	80043a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x164>
 80043a6:	b96e      	cbnz	r6, 80043c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x180>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	f012 0204 	ands.w	r2, r2, #4
 80043ae:	d109      	bne.n	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x180>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b0:	6c69      	ldr	r1, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	2020      	movs	r0, #32
        __HAL_UNLOCK(hi2c);
 80043b4:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	4301      	orrs	r1, r0
 80043ba:	6469      	str	r1, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	f885 0041 	strb.w	r0, [r5, #65]	@ 0x41
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	e79b      	b.n	80042fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	0752      	lsls	r2, r2, #29
 80043c8:	f57f af48 	bpl.w	800425c <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
    status = HAL_ERROR;
 80043cc:	2000      	movs	r0, #0
  return status;
 80043ce:	e796      	b.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80043d8:	f7fd fe3c 	bl	8002054 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043dc:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80043de:	4681      	mov	r9, r0
 80043e0:	e7a8      	b.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
 80043e2:	bf00      	nop
 80043e4:	fe00e800 	.word	0xfe00e800

080043e8 <HAL_I2C_Master_Transmit>:
{
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	4615      	mov	r5, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ee:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80043f2:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f4:	2a20      	cmp	r2, #32
{
 80043f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f8:	f040 808c 	bne.w	8004514 <HAL_I2C_Master_Transmit+0x12c>
 80043fc:	461f      	mov	r7, r3
    __HAL_LOCK(hi2c);
 80043fe:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8004402:	4604      	mov	r4, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	f000 8085 	beq.w	8004514 <HAL_I2C_Master_Transmit+0x12c>
 800440a:	2301      	movs	r3, #1
 800440c:	4689      	mov	r9, r1
 800440e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8004412:	f7fd fe1f 	bl	8002054 <HAL_GetTick>
 8004416:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004418:	4620      	mov	r0, r4
 800441a:	4641      	mov	r1, r8
 800441c:	f7ff fcf8 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 8004420:	2800      	cmp	r0, #0
 8004422:	d173      	bne.n	800450c <HAL_I2C_Master_Transmit+0x124>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004424:	2321      	movs	r3, #33	@ 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004426:	f3c9 0909 	ubfx	r9, r9, #0, #10
    hi2c->pBuffPtr  = pData;
 800442a:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800442c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004430:	2310      	movs	r3, #16
    hi2c->XferISR   = NULL;
 8004432:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004434:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004438:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 800443a:	8567      	strh	r7, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800443c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800443e:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004440:	b292      	uxth	r2, r2
 8004442:	2aff      	cmp	r2, #255	@ 0xff
 8004444:	f200 8098 	bhi.w	8004578 <HAL_I2C_Master_Transmit+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8004448:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800444a:	b292      	uxth	r2, r2
      xfermode = I2C_AUTOEND_MODE;
 800444c:	8522      	strh	r2, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 800444e:	2a00      	cmp	r2, #0
 8004450:	f040 812d 	bne.w	80046ae <HAL_I2C_Master_Transmit+0x2c6>
  MODIFY_REG(hi2c->Instance->CR2, \
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	499a      	ldr	r1, [pc, #616]	@ (80046c0 <HAL_I2C_Master_Transmit+0x2d8>)
 8004458:	400a      	ands	r2, r1
 800445a:	499a      	ldr	r1, [pc, #616]	@ (80046c4 <HAL_I2C_Master_Transmit+0x2dc>)
 800445c:	ea42 0209 	orr.w	r2, r2, r9
 8004460:	4311      	orrs	r1, r2
 8004462:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
 8004464:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004466:	b292      	uxth	r2, r2
 8004468:	2a00      	cmp	r2, #0
 800446a:	f000 80a6 	beq.w	80045ba <HAL_I2C_Master_Transmit+0x1d2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446e:	f04f 0b10 	mov.w	fp, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004472:	699d      	ldr	r5, [r3, #24]
 8004474:	f015 0502 	ands.w	r5, r5, #2
 8004478:	f040 80dc 	bne.w	8004634 <HAL_I2C_Master_Transmit+0x24c>
  uint32_t itflag   = hi2c->Instance->ISR;
 800447c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800447e:	f012 0210 	ands.w	r2, r2, #16
 8004482:	f000 80d5 	beq.w	8004630 <HAL_I2C_Master_Transmit+0x248>
  uint32_t tickstart = Tickstart;
 8004486:	46c2      	mov	sl, r8
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	462f      	mov	r7, r5
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800448a:	f8c3 b01c 	str.w	fp, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800448e:	1c70      	adds	r0, r6, #1
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Transmit+0xae>
 8004492:	e043      	b.n	800451c <HAL_I2C_Master_Transmit+0x134>
 8004494:	b92f      	cbnz	r7, 80044a2 <HAL_I2C_Master_Transmit+0xba>
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	0691      	lsls	r1, r2, #26
 800449a:	d5fb      	bpl.n	8004494 <HAL_I2C_Master_Transmit+0xac>
    if (status == HAL_OK)
 800449c:	b90f      	cbnz	r7, 80044a2 <HAL_I2C_Master_Transmit+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800449e:	2220      	movs	r2, #32
 80044a0:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80044a2:	f045 0204 	orr.w	r2, r5, #4
    status = HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80044a8:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044aa:	05cd      	lsls	r5, r1, #23
 80044ac:	f140 809a 	bpl.w	80045e4 <HAL_I2C_Master_Transmit+0x1fc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80044b4:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044b8:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044ba:	0548      	lsls	r0, r1, #21
 80044bc:	d504      	bpl.n	80044c8 <HAL_I2C_Master_Transmit+0xe0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044be:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80044c2:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044c6:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044c8:	058e      	lsls	r6, r1, #22
 80044ca:	d504      	bpl.n	80044d6 <HAL_I2C_Master_Transmit+0xee>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80044d0:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044d4:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d6:	6999      	ldr	r1, [r3, #24]
 80044d8:	0788      	lsls	r0, r1, #30
 80044da:	d501      	bpl.n	80044e0 <HAL_I2C_Master_Transmit+0xf8>
    hi2c->Instance->TXDR = 0x00U;
 80044dc:	2100      	movs	r1, #0
 80044de:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	07c9      	lsls	r1, r1, #31
 80044e4:	d403      	bmi.n	80044ee <HAL_I2C_Master_Transmit+0x106>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044e6:	6999      	ldr	r1, [r3, #24]
 80044e8:	f041 0101 	orr.w	r1, r1, #1
 80044ec:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80044ee:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 80044f2:	4e75      	ldr	r6, [pc, #468]	@ (80046c8 <HAL_I2C_Master_Transmit+0x2e0>)
    hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 80044f6:	4031      	ands	r1, r6
 80044f8:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80044fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80044fc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->ErrorCode |= error_code;
 8004500:	4313      	orrs	r3, r2
 8004502:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004504:	f884 5041 	strb.w	r5, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004508:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800450c:	2001      	movs	r0, #1
}
 800450e:	b003      	add	sp, #12
 8004510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004514:	2002      	movs	r0, #2
}
 8004516:	b003      	add	sp, #12
 8004518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	0692      	lsls	r2, r2, #26
 8004520:	d4bc      	bmi.n	800449c <HAL_I2C_Master_Transmit+0xb4>
 8004522:	2f00      	cmp	r7, #0
 8004524:	d1bd      	bne.n	80044a2 <HAL_I2C_Master_Transmit+0xba>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fd fd95 	bl	8002054 <HAL_GetTick>
 800452a:	eba0 000a 	sub.w	r0, r0, sl
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800452e:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004530:	4286      	cmp	r6, r0
 8004532:	d301      	bcc.n	8004538 <HAL_I2C_Master_Transmit+0x150>
 8004534:	2e00      	cmp	r6, #0
 8004536:	d1f1      	bne.n	800451c <HAL_I2C_Master_Transmit+0x134>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004538:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800453a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800453e:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8004540:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004542:	0409      	lsls	r1, r1, #16
 8004544:	d50b      	bpl.n	800455e <HAL_I2C_Master_Transmit+0x176>
              (tmp1 != I2C_CR2_STOP) && \
 8004546:	0441      	lsls	r1, r0, #17
 8004548:	d409      	bmi.n	800455e <HAL_I2C_Master_Transmit+0x176>
 800454a:	2a20      	cmp	r2, #32
 800454c:	d007      	beq.n	800455e <HAL_I2C_Master_Transmit+0x176>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004554:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004556:	f7fd fd7d 	bl	8002054 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800455a:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800455c:	4682      	mov	sl, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	0692      	lsls	r2, r2, #26
 8004562:	d494      	bmi.n	800448e <HAL_I2C_Master_Transmit+0xa6>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004564:	f7fd fd76 	bl	8002054 <HAL_GetTick>
 8004568:	eba0 000a 	sub.w	r0, r0, sl
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800456c:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800456e:	2819      	cmp	r0, #25
 8004570:	d9f5      	bls.n	800455e <HAL_I2C_Master_Transmit+0x176>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	2520      	movs	r5, #32
              status = HAL_ERROR;
 8004574:	2701      	movs	r7, #1
 8004576:	e78a      	b.n	800448e <HAL_I2C_Master_Transmit+0xa6>
 8004578:	22ff      	movs	r2, #255	@ 0xff
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800457a:	f44f 017f 	mov.w	r1, #16711680	@ 0xff0000
 800457e:	20fe      	movs	r0, #254	@ 0xfe
      xfermode = I2C_RELOAD_MODE;
 8004580:	f04f 7780 	mov.w	r7, #16777216	@ 0x1000000
 8004584:	8522      	strh	r2, [r4, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004586:	ea41 0209 	orr.w	r2, r1, r9
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800458a:	f815 1b01 	ldrb.w	r1, [r5], #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800458e:	f8df c130 	ldr.w	ip, [pc, #304]	@ 80046c0 <HAL_I2C_Master_Transmit+0x2d8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004592:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004594:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8004596:	6265      	str	r5, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004598:	3901      	subs	r1, #1
      hi2c->XferSize--;
 800459a:	8520      	strh	r0, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800459c:	b289      	uxth	r1, r1
 800459e:	8561      	strh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80045a0:	6859      	ldr	r1, [r3, #4]
 80045a2:	ea01 010c 	and.w	r1, r1, ip
 80045a6:	430a      	orrs	r2, r1
 80045a8:	433a      	orrs	r2, r7
 80045aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045ae:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 80045b0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80045b2:	b292      	uxth	r2, r2
 80045b4:	2a00      	cmp	r2, #0
 80045b6:	f47f af5a 	bne.w	800446e <HAL_I2C_Master_Transmit+0x86>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ba:	4642      	mov	r2, r8
 80045bc:	4631      	mov	r1, r6
 80045be:	4620      	mov	r0, r4
 80045c0:	f7ff fd8c 	bl	80040dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d1a1      	bne.n	800450c <HAL_I2C_Master_Transmit+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80045cc:	4d3e      	ldr	r5, [pc, #248]	@ (80046c8 <HAL_I2C_Master_Transmit+0x2e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ce:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	402a      	ands	r2, r5
 80045d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80045da:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045de:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80045e2:	e794      	b.n	800450e <HAL_I2C_Master_Transmit+0x126>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045e4:	054f      	lsls	r7, r1, #21
 80045e6:	f53f af6a 	bmi.w	80044be <HAL_I2C_Master_Transmit+0xd6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ea:	058d      	lsls	r5, r1, #22
 80045ec:	f53f af6e 	bmi.w	80044cc <HAL_I2C_Master_Transmit+0xe4>
  if (status != HAL_OK)
 80045f0:	2800      	cmp	r0, #0
 80045f2:	f47f af70 	bne.w	80044d6 <HAL_I2C_Master_Transmit+0xee>
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	1c72      	adds	r2, r6, #1
 80045f8:	f43f af3b 	beq.w	8004472 <HAL_I2C_Master_Transmit+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fc:	f7fd fd2a 	bl	8002054 <HAL_GetTick>
 8004600:	eba0 0308 	sub.w	r3, r0, r8
 8004604:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004606:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	d302      	bcc.n	8004610 <HAL_I2C_Master_Transmit+0x228>
 800460a:	2e00      	cmp	r6, #0
 800460c:	f47f af2f 	bne.w	800446e <HAL_I2C_Master_Transmit+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	f012 0202 	ands.w	r2, r2, #2
 8004616:	f47f af2a 	bne.w	800446e <HAL_I2C_Master_Transmit+0x86>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800461a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800461c:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800461e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004622:	430b      	orrs	r3, r1
 8004624:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004626:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800462a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          return HAL_ERROR;
 800462e:	e76d      	b.n	800450c <HAL_I2C_Master_Transmit+0x124>
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	4610      	mov	r0, r2
 8004632:	e739      	b.n	80044a8 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004634:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004636:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004638:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 800463c:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463e:	6299      	str	r1, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004640:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004642:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8004644:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004646:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8004648:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800464a:	b289      	uxth	r1, r1
 800464c:	8561      	strh	r1, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800464e:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8004650:	b289      	uxth	r1, r1
 8004652:	2a00      	cmp	r2, #0
 8004654:	f47f af06 	bne.w	8004464 <HAL_I2C_Master_Transmit+0x7c>
 8004658:	2900      	cmp	r1, #0
 800465a:	f43f af03 	beq.w	8004464 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800465e:	4633      	mov	r3, r6
 8004660:	2180      	movs	r1, #128	@ 0x80
 8004662:	4620      	mov	r0, r4
 8004664:	f8cd 8000 	str.w	r8, [sp]
 8004668:	f7ff fc72 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 800466c:	2800      	cmp	r0, #0
 800466e:	f47f af4d 	bne.w	800450c <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004672:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004674:	6823      	ldr	r3, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004676:	b292      	uxth	r2, r2
 8004678:	2aff      	cmp	r2, #255	@ 0xff
 800467a:	d90a      	bls.n	8004692 <HAL_I2C_Master_Transmit+0x2aa>
  MODIFY_REG(hi2c->Instance->CR2, \
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4913      	ldr	r1, [pc, #76]	@ (80046cc <HAL_I2C_Master_Transmit+0x2e4>)
 8004680:	400a      	ands	r2, r1
 8004682:	4913      	ldr	r1, [pc, #76]	@ (80046d0 <HAL_I2C_Master_Transmit+0x2e8>)
 8004684:	ea42 0209 	orr.w	r2, r2, r9
 8004688:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800468a:	22ff      	movs	r2, #255	@ 0xff
 800468c:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800468e:	6059      	str	r1, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004690:	e6e8      	b.n	8004464 <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 8004692:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004694:	480d      	ldr	r0, [pc, #52]	@ (80046cc <HAL_I2C_Master_Transmit+0x2e4>)
          hi2c->XferSize = hi2c->XferCount;
 8004696:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8004698:	6859      	ldr	r1, [r3, #4]
          hi2c->XferSize = hi2c->XferCount;
 800469a:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800469c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800469e:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046a0:	ea49 4202 	orr.w	r2, r9, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80046a4:	430a      	orrs	r2, r1
 80046a6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80046aa:	605a      	str	r2, [r3, #4]
}
 80046ac:	e6da      	b.n	8004464 <HAL_I2C_Master_Transmit+0x7c>
      hi2c->XferSize--;
 80046ae:	3a01      	subs	r2, #1
      xfermode = I2C_AUTOEND_MODE;
 80046b0:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
      hi2c->XferSize--;
 80046b4:	b290      	uxth	r0, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80046b6:	1c41      	adds	r1, r0, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046b8:	b2c9      	uxtb	r1, r1
 80046ba:	0409      	lsls	r1, r1, #16
 80046bc:	e763      	b.n	8004586 <HAL_I2C_Master_Transmit+0x19e>
 80046be:	bf00      	nop
 80046c0:	fc009800 	.word	0xfc009800
 80046c4:	02002000 	.word	0x02002000
 80046c8:	fe00e800 	.word	0xfe00e800
 80046cc:	fc009c00 	.word	0xfc009c00
 80046d0:	01ff0000 	.word	0x01ff0000

080046d4 <HAL_I2C_Master_Receive>:
{
 80046d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046d8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046da:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
{
 80046de:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e0:	2820      	cmp	r0, #32
{
 80046e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e4:	f040 808f 	bne.w	8004806 <HAL_I2C_Master_Receive+0x132>
 80046e8:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 80046ea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	f000 8089 	beq.w	8004806 <HAL_I2C_Master_Receive+0x132>
 80046f4:	2301      	movs	r3, #1
 80046f6:	460f      	mov	r7, r1
 80046f8:	4691      	mov	r9, r2
 80046fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80046fe:	f7fd fca9 	bl	8002054 <HAL_GetTick>
 8004702:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004704:	4620      	mov	r0, r4
 8004706:	4629      	mov	r1, r5
 8004708:	f7ff fb82 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800470c:	2800      	cmp	r0, #0
 800470e:	d176      	bne.n	80047fe <HAL_I2C_Master_Receive+0x12a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004710:	2322      	movs	r3, #34	@ 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004712:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8004716:	6822      	ldr	r2, [r4, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004718:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800471c:	2310      	movs	r3, #16
    hi2c->pBuffPtr  = pData;
 800471e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004722:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004726:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8004728:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800472c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800472e:	6360      	str	r0, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004730:	b29b      	uxth	r3, r3
 8004732:	2bff      	cmp	r3, #255	@ 0xff
 8004734:	d86b      	bhi.n	800480e <HAL_I2C_Master_Receive+0x13a>
      hi2c->XferSize = hi2c->XferCount;
 8004736:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004738:	4840      	ldr	r0, [pc, #256]	@ (800483c <HAL_I2C_Master_Receive+0x168>)
      hi2c->XferSize = hi2c->XferCount;
 800473a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800473c:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 800473e:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004740:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8004742:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004744:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004748:	430b      	orrs	r3, r1
 800474a:	493d      	ldr	r1, [pc, #244]	@ (8004840 <HAL_I2C_Master_Receive+0x16c>)
 800474c:	4319      	orrs	r1, r3
 800474e:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 8004750:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004752:	462a      	mov	r2, r5
 8004754:	4631      	mov	r1, r6
 8004756:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03e      	beq.n	80047dc <HAL_I2C_Master_Receive+0x108>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475e:	f7ff fd71 	bl	8004244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004762:	2800      	cmp	r0, #0
 8004764:	d14b      	bne.n	80047fe <HAL_I2C_Master_Receive+0x12a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800476a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800476c:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 800476e:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004772:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004774:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004776:	f10c 3cff 	add.w	ip, ip, #4294967295
      hi2c->XferSize--;
 800477a:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800477c:	3101      	adds	r1, #1
      hi2c->XferCount--;
 800477e:	fa1f fc8c 	uxth.w	ip, ip
      hi2c->XferSize--;
 8004782:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8004784:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004786:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800478a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800478c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800478e:	b289      	uxth	r1, r1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1dd      	bne.n	8004750 <HAL_I2C_Master_Receive+0x7c>
 8004794:	2900      	cmp	r1, #0
 8004796:	d0db      	beq.n	8004750 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004798:	4602      	mov	r2, r0
 800479a:	4633      	mov	r3, r6
 800479c:	2180      	movs	r1, #128	@ 0x80
 800479e:	4620      	mov	r0, r4
 80047a0:	9500      	str	r5, [sp, #0]
 80047a2:	f7ff fbd5 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047aa:	bb40      	cbnz	r0, 80047fe <HAL_I2C_Master_Receive+0x12a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80047ae:	f8df e0a0 	ldr.w	lr, [pc, #160]	@ 8004850 <HAL_I2C_Master_Receive+0x17c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b2:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80047b4:	4923      	ldr	r1, [pc, #140]	@ (8004844 <HAL_I2C_Master_Receive+0x170>)
 80047b6:	4670      	mov	r0, lr
 80047b8:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ba:	4563      	cmp	r3, ip
 80047bc:	d931      	bls.n	8004822 <HAL_I2C_Master_Receive+0x14e>
  MODIFY_REG(hi2c->Instance->CR2, \
 80047be:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c0:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047c2:	f8a4 c028 	strh.w	ip, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c6:	ea03 030e 	and.w	r3, r3, lr
 80047ca:	433b      	orrs	r3, r7
 80047cc:	4319      	orrs	r1, r3
 80047ce:	6051      	str	r1, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d0:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
 80047d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d4:	4631      	mov	r1, r6
    while (hi2c->XferCount > 0U)
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1c0      	bne.n	800475e <HAL_I2C_Master_Receive+0x8a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047dc:	f7ff fc7e 	bl	80040dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80047e0:	b968      	cbnz	r0, 80047fe <HAL_I2C_Master_Receive+0x12a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80047e6:	4d18      	ldr	r5, [pc, #96]	@ (8004848 <HAL_I2C_Master_Receive+0x174>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	402a      	ands	r2, r5
 80047ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80047f4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047f8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80047fc:	e000      	b.n	8004800 <HAL_I2C_Master_Receive+0x12c>
      return HAL_ERROR;
 80047fe:	2001      	movs	r0, #1
}
 8004800:	b003      	add	sp, #12
 8004802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8004806:	2002      	movs	r0, #2
}
 8004808:	b003      	add	sp, #12
 800480a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 800480e:	6853      	ldr	r3, [r2, #4]
 8004810:	490a      	ldr	r1, [pc, #40]	@ (800483c <HAL_I2C_Master_Receive+0x168>)
 8004812:	400b      	ands	r3, r1
 8004814:	490d      	ldr	r1, [pc, #52]	@ (800484c <HAL_I2C_Master_Receive+0x178>)
 8004816:	433b      	orrs	r3, r7
 8004818:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800481a:	23ff      	movs	r3, #255	@ 0xff
 800481c:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800481e:	6051      	str	r1, [r2, #4]
}
 8004820:	e796      	b.n	8004750 <HAL_I2C_Master_Receive+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 8004822:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004824:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8004826:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8004828:	4001      	ands	r1, r0
          hi2c->XferSize = hi2c->XferCount;
 800482a:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800482c:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800482e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004832:	430b      	orrs	r3, r1
 8004834:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004838:	6053      	str	r3, [r2, #4]
}
 800483a:	e789      	b.n	8004750 <HAL_I2C_Master_Receive+0x7c>
 800483c:	fc009800 	.word	0xfc009800
 8004840:	02002400 	.word	0x02002400
 8004844:	01ff0000 	.word	0x01ff0000
 8004848:	fe00e800 	.word	0xfe00e800
 800484c:	01ff2400 	.word	0x01ff2400
 8004850:	fc009c00 	.word	0xfc009c00

08004854 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004858:	4699      	mov	r9, r3
 800485a:	4680      	mov	r8, r0
 800485c:	460d      	mov	r5, r1
 800485e:	4614      	mov	r4, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8004860:	7803      	ldrb	r3, [r0, #0]
 8004862:	2601      	movs	r6, #1
  p = 0;
 8004864:	2700      	movs	r7, #0
 8004866:	e005      	b.n	8004874 <JPEG_Bits_To_SizeCodes+0x20>
    i = (uint32_t)Bits[l];
 8004868:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    if ((p + i) > 256UL)
 800486c:	19da      	adds	r2, r3, r7
 800486e:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8004872:	d83a      	bhi.n	80048ea <JPEG_Bits_To_SizeCodes+0x96>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004874:	19e8      	adds	r0, r5, r7
 8004876:	461a      	mov	r2, r3
 8004878:	4631      	mov	r1, r6
    while (i != 0UL)
 800487a:	b113      	cbz	r3, 8004882 <JPEG_Bits_To_SizeCodes+0x2e>
      p++;
 800487c:	441f      	add	r7, r3
      Huffsize[p] = (uint8_t) l + 1U;
 800487e:	f007 ff79 	bl	800c774 <memset>
  for (l = 0; l < 16UL; l++)
 8004882:	2e10      	cmp	r6, #16
    if ((p + i) > 256UL)
 8004884:	f106 0601 	add.w	r6, r6, #1
  for (l = 0; l < 16UL; l++)
 8004888:	d1ee      	bne.n	8004868 <JPEG_Bits_To_SizeCodes+0x14>
      i--;
    }
  }
  Huffsize[p] = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	55eb      	strb	r3, [r5, r7]
  *LastK = p;
 800488e:	f8c9 7000 	str.w	r7, [r9]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
 8004892:	7829      	ldrb	r1, [r5, #0]
 8004894:	460a      	mov	r2, r1
  p = 0;
  while (Huffsize[p] != 0U)
 8004896:	b329      	cbz	r1, 80048e4 <JPEG_Bits_To_SizeCodes+0x90>
  code = 0;
 8004898:	4699      	mov	r9, r3
 800489a:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800489e:	2701      	movs	r7, #1
  p = 0;
 80048a0:	461e      	mov	r6, r3
    while (((uint32_t) Huffsize[p]) == si)
 80048a2:	4291      	cmp	r1, r2
 80048a4:	d124      	bne.n	80048f0 <JPEG_Bits_To_SizeCodes+0x9c>
 80048a6:	eb06 0008 	add.w	r0, r6, r8
 80048aa:	eb05 0c06 	add.w	ip, r5, r6
 80048ae:	464b      	mov	r3, r9
 80048b0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      Huffcode[p] = code;
 80048b4:	f840 3f04 	str.w	r3, [r0, #4]!
      code++;
 80048b8:	4619      	mov	r1, r3
    while (((uint32_t) Huffsize[p]) == si)
 80048ba:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
 80048be:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 80048c0:	4596      	cmp	lr, r2
 80048c2:	d0f7      	beq.n	80048b4 <JPEG_Bits_To_SizeCodes+0x60>
 80048c4:	3601      	adds	r6, #1
 80048c6:	eba6 0609 	sub.w	r6, r6, r9
      p++;
 80048ca:	440e      	add	r6, r1
    if(si > 31UL)
 80048cc:	2a1f      	cmp	r2, #31
 80048ce:	d80c      	bhi.n	80048ea <JPEG_Bits_To_SizeCodes+0x96>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80048d0:	fa07 f102 	lsl.w	r1, r7, r2
 80048d4:	4299      	cmp	r1, r3
 80048d6:	d908      	bls.n	80048ea <JPEG_Bits_To_SizeCodes+0x96>
  while (Huffsize[p] != 0U)
 80048d8:	5da9      	ldrb	r1, [r5, r6]
    {
      return HAL_ERROR;
    }
    code <<= 1;
 80048da:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 80048de:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d1de      	bne.n	80048a2 <JPEG_Bits_To_SizeCodes+0x4e>
  }
  /* Return function status */
  return HAL_OK;
 80048e4:	2000      	movs	r0, #0
}
 80048e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80048ea:	2001      	movs	r0, #1
}
 80048ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (((uint32_t) Huffsize[p]) == si)
 80048f0:	464b      	mov	r3, r9
 80048f2:	e7eb      	b.n	80048cc <JPEG_Bits_To_SizeCodes+0x78>

080048f4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 80048fa:	460d      	mov	r5, r1
 80048fc:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80048fe:	ab01      	add	r3, sp, #4
 8004900:	aa43      	add	r2, sp, #268	@ 0x10c
 8004902:	a902      	add	r1, sp, #8
 8004904:	f7ff ffa6 	bl	8004854 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8004908:	b9d0      	cbnz	r0, 8004940 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800490a:	9f01      	ldr	r7, [sp, #4]
 800490c:	b1c7      	cbz	r7, 8004940 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
 800490e:	370f      	adds	r7, #15
 8004910:	f50d 7e86 	add.w	lr, sp, #268	@ 0x10c
 8004914:	a902      	add	r1, sp, #8
 8004916:	f104 0c0f 	add.w	ip, r4, #15
 800491a:	4427      	add	r7, r4
 800491c:	e009      	b.n	8004932 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800491e:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
 8004922:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004924:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004928:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800492c:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800492e:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 8004930:	d006      	beq.n	8004940 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
 8004932:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004936:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004938:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800493c:	d9ef      	bls.n	800491e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800493e:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8004940:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8004944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004946:	bf00      	nop

08004948 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800494c:	6804      	ldr	r4, [r0, #0]
{
 800494e:	b093      	sub	sp, #76	@ 0x4c
 8004950:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004952:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8004956:	429a      	cmp	r2, r3
 8004958:	f000 809d 	beq.w	8004a96 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800495c:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8004960:	429a      	cmp	r2, r3
 8004962:	d003      	beq.n	800496c <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8004964:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8004966:	b013      	add	sp, #76	@ 0x4c
 8004968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800496c:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004970:	a903      	add	r1, sp, #12
 8004972:	f7ff ffbf 	bl	80048f4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8004976:	2800      	cmp	r0, #0
 8004978:	d1f5      	bne.n	8004966 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
 800497a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800497e:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004982:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
 8004986:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004988:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
 800498c:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800498e:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8004992:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004996:	f40a 6a70 	and.w	sl, sl, #3840	@ 0xf00
 800499a:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800499e:	f40e 6e70 	and.w	lr, lr, #3840	@ 0xf00
 80049a2:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049a4:	f89d 9015 	ldrb.w	r9, [sp, #21]
 80049a8:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049ac:	f89d c014 	ldrb.w	ip, [sp, #20]
 80049b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049b4:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049b8:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049bc:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049c0:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049c2:	f409 6970 	and.w	r9, r9, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049c6:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80049ca:	f40c 6c70 	and.w	ip, ip, #3840	@ 0xf00
 80049ce:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049d2:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049d6:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049da:	f89d 7011 	ldrb.w	r7, [sp, #17]
 80049de:	f408 6870 	and.w	r8, r8, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049e2:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
 80049e4:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049e8:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80049ec:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049f0:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
 80049f2:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049f6:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80049f8:	f89d e03c 	ldrb.w	lr, [sp, #60]	@ 0x3c
 80049fc:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a00:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a04:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8004a08:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a0c:	f89d e038 	ldrb.w	lr, [sp, #56]	@ 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a10:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a18:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8004a1c:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a20:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
 8004a24:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a28:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
 8004a2a:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a2e:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a32:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8004a36:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a3a:	f40b 6b70 	and.w	fp, fp, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a3e:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a42:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 8004a46:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
 8004a4a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004a4e:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a52:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8004a56:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a58:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8004a5c:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
 8004a5e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004a62:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a66:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8004a6a:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a6c:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8004a70:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
 8004a72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004a76:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a7a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004a7e:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004a80:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004a84:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
 8004a88:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004a8c:	f844 3c18 	str.w	r3, [r4, #-24]
}
 8004a90:	b013      	add	sp, #76	@ 0x4c
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004a96:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
  if (HuffTableDC != NULL)
 8004a9a:	e769      	b.n	8004970 <JPEG_Set_HuffDC_Mem+0x28>

08004a9c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004aa0:	6804      	ldr	r4, [r0, #0]
{
 8004aa2:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 8004aa6:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004aa8:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d041      	beq.n	8004b34 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004ab0:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d004      	beq.n	8004ac2 <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8004ab8:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8004aba:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 8004abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004ac2:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	466b      	mov	r3, sp
 8004aca:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8004ace:	a901      	add	r1, sp, #4
 8004ad0:	f7ff fec0 	bl	8004854 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d1f0      	bne.n	8004aba <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 8004ad8:	9b00      	ldr	r3, [sp, #0]
 8004ada:	b373      	cbz	r3, 8004b3a <JPEG_Set_HuffAC_Mem+0x9e>
 8004adc:	330f      	adds	r3, #15
 8004ade:	f20d 4c34 	addw	ip, sp, #1076	@ 0x434
 8004ae2:	af01      	add	r7, sp, #4
 8004ae4:	f105 020f 	add.w	r2, r5, #15
 8004ae8:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004aec:	ae42      	add	r6, sp, #264	@ 0x108
 8004aee:	e011      	b.n	8004b14 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
 8004af0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8004af4:	2ba1      	cmp	r3, #161	@ 0xa1
 8004af6:	d8df      	bhi.n	8004ab8 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004af8:	f817 5b01 	ldrb.w	r5, [r7], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004afc:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 8004b00:	f85c 1b04 	ldr.w	r1, [ip], #4
  while (k < lastK)
 8004b04:	4572      	cmp	r2, lr
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004b06:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004b0a:	46b1      	mov	r9, r6
 8004b0c:	f8c8 10a4 	str.w	r1, [r8, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004b10:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
 8004b12:	d014      	beq.n	8004b3e <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
 8004b14:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
 8004b18:	23a0      	movs	r3, #160	@ 0xa0
    if (l == 0UL)
 8004b1a:	2900      	cmp	r1, #0
 8004b1c:	d0ec      	beq.n	8004af8 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
 8004b1e:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
 8004b20:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004b24:	29f0      	cmp	r1, #240	@ 0xf0
      l = (msb * 10UL) + lsb - 1UL;
 8004b26:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004b2a:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8004b2e:	d1df      	bne.n	8004af0 <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
 8004b30:	23a1      	movs	r3, #161	@ 0xa1
 8004b32:	e7e1      	b.n	8004af8 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004b34:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  if (HuffTableAC != NULL)
 8004b38:	e7c5      	b.n	8004ac6 <JPEG_Set_HuffAC_Mem+0x2a>
 8004b3a:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
      *addressDef = 0x0FFF0FFF;
 8004b3e:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
    *addressDef = 0x0FD10FD0;
 8004b42:	4a1a      	ldr	r2, [pc, #104]	@ (8004bac <JPEG_Set_HuffAC_Mem+0x110>)
 8004b44:	eba9 0c89 	sub.w	ip, r9, r9, lsl #2
 8004b48:	4649      	mov	r1, r9
      *addressDef = 0x0FFF0FFF;
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	f10d 0566 	add.w	r5, sp, #102	@ 0x66
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 8004b56:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
 8004b58:	f103 33d3 	add.w	r3, r3, #3553874899	@ 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
 8004b5c:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8004b5e:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
 8004b62:	f103 232c 	add.w	r3, r3, #738208768	@ 0x2c002c00
 8004b66:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8004b68:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8004b6c:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8004b6e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8004b72:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b74:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b78:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b7c:	0212      	lsls	r2, r2, #8
 8004b7e:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b88:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    while (i > 1UL)
 8004b8c:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b8e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b92:	433a      	orrs	r2, r7
    while (i > 1UL)
 8004b94:	42a9      	cmp	r1, r5
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004b96:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
 8004b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b9e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8004ba2:	d1e7      	bne.n	8004b74 <JPEG_Set_HuffAC_Mem+0xd8>
}
 8004ba4:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 8004ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bac:	0fd10fd0 	.word	0x0fd10fd0

08004bb0 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8004bb0:	6803      	ldr	r3, [r0, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	f002 0203 	and.w	r2, r2, #3
 8004bb8:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
 8004bba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bbe:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8004bc0:	d018      	beq.n	8004bf4 <HAL_JPEG_GetInfo.part.0+0x44>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	f012 0203 	ands.w	r2, r2, #3
 8004bc8:	d10b      	bne.n	8004be2 <HAL_JPEG_GetInfo.part.0+0x32>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004bca:	6859      	ldr	r1, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004bcc:	f8c9 2000 	str.w	r2, [r9]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004bd0:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004bd2:	0c09      	lsrs	r1, r1, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004bd4:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004bd6:	f8c9 1008 	str.w	r1, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004bda:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8004bde:	2100      	movs	r1, #0
 8004be0:	e02f      	b.n	8004c42 <HAL_JPEG_GetInfo.part.0+0x92>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	f002 0203 	and.w	r2, r2, #3
 8004be8:	2a03      	cmp	r2, #3
 8004bea:	f000 8097 	beq.w	8004d1c <HAL_JPEG_GetInfo.part.0+0x16c>
    return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
}
 8004bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bf4:	2110      	movs	r1, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004bf6:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004bf8:	f8c9 1000 	str.w	r1, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004bfc:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004bfe:	68d9      	ldr	r1, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004c00:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004c04:	0c09      	lsrs	r1, r1, #16
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004c06:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004c08:	695c      	ldr	r4, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004c0a:	f8c9 100c 	str.w	r1, [r9, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004c0e:	0916      	lsrs	r6, r2, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004c10:	6999      	ldr	r1, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004c12:	f014 0ff0 	tst.w	r4, #240	@ 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004c16:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004c1a:	ea4f 1714 	mov.w	r7, r4, lsr #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004c1e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004c22:	d105      	bne.n	8004c30 <HAL_JPEG_GetInfo.part.0+0x80>
 8004c24:	2a01      	cmp	r2, #1
 8004c26:	d103      	bne.n	8004c30 <HAL_JPEG_GetInfo.part.0+0x80>
 8004c28:	070d      	lsls	r5, r1, #28
 8004c2a:	d1d8      	bne.n	8004bde <HAL_JPEG_GetInfo.part.0+0x2e>
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	e008      	b.n	8004c42 <HAL_JPEG_GetInfo.part.0+0x92>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004c30:	433e      	orrs	r6, r7
 8004c32:	0734      	lsls	r4, r6, #28
 8004c34:	d0d3      	beq.n	8004bde <HAL_JPEG_GetInfo.part.0+0x2e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004c36:	430f      	orrs	r7, r1
 8004c38:	0739      	lsls	r1, r7, #28
 8004c3a:	d1d0      	bne.n	8004bde <HAL_JPEG_GetInfo.part.0+0x2e>
 8004c3c:	2a03      	cmp	r2, #3
 8004c3e:	d1ce      	bne.n	8004bde <HAL_JPEG_GetInfo.part.0+0x2e>
 8004c40:	2101      	movs	r1, #1
 8004c42:	4a42      	ldr	r2, [pc, #264]	@ (8004d4c <HAL_JPEG_GetInfo.part.0+0x19c>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004c44:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8004c48:	f8c9 1004 	str.w	r1, [r9, #4]
  uint32_t quality = 0;
 8004c4c:	2600      	movs	r6, #0
 8004c4e:	f102 0440 	add.w	r4, r2, #64	@ 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004c52:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8004c56:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004c5a:	e033      	b.n	8004cc4 <HAL_JPEG_GetInfo.part.0+0x114>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004c5c:	f892 8001 	ldrb.w	r8, [r2, #1]
 8004c60:	fb0e f707 	mul.w	r7, lr, r7
 8004c64:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004c66:	f815 8008 	ldrb.w	r8, [r5, r8]
 8004c6a:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8004c6e:	2f64      	cmp	r7, #100	@ 0x64
 8004c70:	d958      	bls.n	8004d24 <HAL_JPEG_GetInfo.part.0+0x174>
          quality += 5000UL / scale;
 8004c72:	fbb1 f7f7 	udiv	r7, r1, r7
 8004c76:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004c78:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
 8004c7c:	2f01      	cmp	r7, #1
 8004c7e:	d03d      	beq.n	8004cfc <HAL_JPEG_GetInfo.part.0+0x14c>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004c80:	f892 8002 	ldrb.w	r8, [r2, #2]
 8004c84:	fb0e f707 	mul.w	r7, lr, r7
 8004c88:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004c8a:	f815 8008 	ldrb.w	r8, [r5, r8]
 8004c8e:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8004c92:	2f64      	cmp	r7, #100	@ 0x64
 8004c94:	d955      	bls.n	8004d42 <HAL_JPEG_GetInfo.part.0+0x192>
          quality += 5000UL / scale;
 8004c96:	fbb1 f7f7 	udiv	r7, r1, r7
 8004c9a:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004c9c:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d030      	beq.n	8004d04 <HAL_JPEG_GetInfo.part.0+0x154>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004ca2:	78d7      	ldrb	r7, [r2, #3]
 8004ca4:	fb0e f303 	mul.w	r3, lr, r3
 8004ca8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004caa:	5def      	ldrb	r7, [r5, r7]
 8004cac:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
 8004cb0:	2b64      	cmp	r3, #100	@ 0x64
 8004cb2:	d93c      	bls.n	8004d2e <HAL_JPEG_GetInfo.part.0+0x17e>
          quality += 5000UL / scale;
 8004cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb8:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004cba:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
 8004cbc:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004cc0:	4294      	cmp	r4, r2
 8004cc2:	d025      	beq.n	8004d10 <HAL_JPEG_GetInfo.part.0+0x160>
    quantRow = *tableAddress;
 8004cc4:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004cc8:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
 8004cca:	2f01      	cmp	r7, #1
 8004ccc:	d028      	beq.n	8004d20 <HAL_JPEG_GetInfo.part.0+0x170>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004cce:	f892 8000 	ldrb.w	r8, [r2]
 8004cd2:	fb0e f707 	mul.w	r7, lr, r7
 8004cd6:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004cd8:	f815 8008 	ldrb.w	r8, [r5, r8]
 8004cdc:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8004ce0:	2f64      	cmp	r7, #100	@ 0x64
 8004ce2:	d929      	bls.n	8004d38 <HAL_JPEG_GetInfo.part.0+0x188>
          quality += 5000UL / scale;
 8004ce4:	fbb1 f7f7 	udiv	r7, r1, r7
 8004ce8:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004cea:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
 8004cee:	2f01      	cmp	r7, #1
 8004cf0:	d1b4      	bne.n	8004c5c <HAL_JPEG_GetInfo.part.0+0xac>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004cf2:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
 8004cf6:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8004cf8:	2f01      	cmp	r7, #1
 8004cfa:	d1c1      	bne.n	8004c80 <HAL_JPEG_GetInfo.part.0+0xd0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004cfc:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
 8004cfe:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d1ce      	bne.n	8004ca2 <HAL_JPEG_GetInfo.part.0+0xf2>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004d04:	3204      	adds	r2, #4
        quality += 100UL;
 8004d06:	3664      	adds	r6, #100	@ 0x64
    tableAddress ++;
 8004d08:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004d0c:	4294      	cmp	r4, r2
 8004d0e:	d1d9      	bne.n	8004cc4 <HAL_JPEG_GetInfo.part.0+0x114>
  }

  return (quality / 64UL);
 8004d10:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
 8004d12:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8004d14:	f8c9 6010 	str.w	r6, [r9, #16]
}
 8004d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d1c:	2130      	movs	r1, #48	@ 0x30
 8004d1e:	e76a      	b.n	8004bf6 <HAL_JPEG_GetInfo.part.0+0x46>
        quality += 100UL;
 8004d20:	3664      	adds	r6, #100	@ 0x64
 8004d22:	e7e2      	b.n	8004cea <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += (200UL - scale) / 2UL;
 8004d24:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004d28:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004d2c:	e7a4      	b.n	8004c78 <HAL_JPEG_GetInfo.part.0+0xc8>
 8004d2e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004d32:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 8004d36:	e7c0      	b.n	8004cba <HAL_JPEG_GetInfo.part.0+0x10a>
 8004d38:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004d3c:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004d40:	e7d3      	b.n	8004cea <HAL_JPEG_GetInfo.part.0+0x13a>
 8004d42:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004d46:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004d4a:	e7a7      	b.n	8004c9c <HAL_JPEG_GetInfo.part.0+0xec>
 8004d4c:	0800d170 	.word	0x0800d170

08004d50 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 8004d50:	2800      	cmp	r0, #0
 8004d52:	f000 8107 	beq.w	8004f64 <HAL_JPEG_Init+0x214>
{
 8004d56:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004d58:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80f9 	beq.w	8004f5a <HAL_JPEG_Init+0x20a>
  __HAL_JPEG_ENABLE(hjpeg);
 8004d68:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004d6a:	2202      	movs	r2, #2
  hjpeg->QuantTable2 = NULL;
 8004d6c:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004d6e:	497e      	ldr	r1, [pc, #504]	@ (8004f68 <HAL_JPEG_Init+0x218>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004d70:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 8004d74:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	6022      	str	r2, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004d84:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004d86:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004d8a:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004d8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004d8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d92:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004d94:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004d96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d9a:	6322      	str	r2, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004d9c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004d9e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004da2:	63a2      	str	r2, [r4, #56]	@ 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004da4:	4a71      	ldr	r2, [pc, #452]	@ (8004f6c <HAL_JPEG_Init+0x21c>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004da6:	63e9      	str	r1, [r5, #60]	@ 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004da8:	2101      	movs	r1, #1
  hjpeg->QuantTable2 = NULL;
 8004daa:	64ab      	str	r3, [r5, #72]	@ 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004dac:	e9c5 2310 	strd	r2, r3, [r5, #64]	@ 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004db0:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
 8004db4:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004db8:	4b6d      	ldr	r3, [pc, #436]	@ (8004f70 <HAL_JPEG_Init+0x220>)
 8004dba:	f8c4 1368 	str.w	r1, [r4, #872]	@ 0x368
 8004dbe:	f8c4 2364 	str.w	r2, [r4, #868]	@ 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004dc2:	496c      	ldr	r1, [pc, #432]	@ (8004f74 <HAL_JPEG_Init+0x224>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004dc4:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f78 <HAL_JPEG_Init+0x228>)
 8004dca:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
 8004dce:	4a6b      	ldr	r2, [pc, #428]	@ (8004f7c <HAL_JPEG_Init+0x22c>)
 8004dd0:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f80 <HAL_JPEG_Init+0x230>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004dd6:	f8c4 2370 	str.w	r2, [r4, #880]	@ 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004dda:	496a      	ldr	r1, [pc, #424]	@ (8004f84 <HAL_JPEG_Init+0x234>)
 8004ddc:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
 8004de0:	4a69      	ldr	r2, [pc, #420]	@ (8004f88 <HAL_JPEG_Init+0x238>)
 8004de2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f8c <HAL_JPEG_Init+0x23c>)
 8004de4:	f8c4 1384 	str.w	r1, [r4, #900]	@ 0x384
 8004de8:	f8c4 2380 	str.w	r2, [r4, #896]	@ 0x380
 8004dec:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004df0:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
  value = *address & 0xFFFF0000U;
 8004df4:	f8d4 142c 	ldr.w	r1, [r4, #1068]	@ 0x42c
 8004df8:	4a65      	ldr	r2, [pc, #404]	@ (8004f90 <HAL_JPEG_Init+0x240>)
 8004dfa:	400a      	ands	r2, r1
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004dfc:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004e00:	4313      	orrs	r3, r2
  *address = value;
 8004e02:	4a64      	ldr	r2, [pc, #400]	@ (8004f94 <HAL_JPEG_Init+0x244>)
 8004e04:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
 8004e08:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e0c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8004e10:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e12:	f892 e0b3 	ldrb.w	lr, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e16:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004e18:	f892 c0b0 	ldrb.w	ip, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e1c:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
  while (index > 3UL)
 8004e20:	4296      	cmp	r6, r2
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e22:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e26:	ea43 030c 	orr.w	r3, r3, ip
 8004e2a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e2e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8004e32:	d1eb      	bne.n	8004e0c <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
 8004e34:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004e38:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
  value = *address & 0xFFFF0000U;
 8004e3c:	4954      	ldr	r1, [pc, #336]	@ (8004f90 <HAL_JPEG_Init+0x240>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004e3e:	2001      	movs	r0, #1
  value = *address & 0x0000FFFFU;
 8004e40:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004e42:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8004e46:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8004e4a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8004e4e:	400b      	ands	r3, r1
  *address = value;
 8004e50:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004e54:	f8c4 0438 	str.w	r0, [r4, #1080]	@ 0x438
 8004e58:	f8c4 2434 	str.w	r2, [r4, #1076]	@ 0x434
 8004e5c:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004e60:	f640 320a 	movw	r2, #2826	@ 0xb0a
  value = *address & 0x0000FFFFUL;
 8004e64:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8004e68:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8004e6e:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8004e72:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8004e76:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004e78:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004e7a:	4b47      	ldr	r3, [pc, #284]	@ (8004f98 <HAL_JPEG_Init+0x248>)
  *address = value;
 8004e7c:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004e80:	f247 7202 	movw	r2, #30466	@ 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004e84:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8004e88:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8004e8c:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8004e90:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8004e94:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004e96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8004e9a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8004e9e:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8004ea2:	400b      	ands	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ea4:	493d      	ldr	r1, [pc, #244]	@ (8004f9c <HAL_JPEG_Init+0x24c>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004ea6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004ea8:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa0 <HAL_JPEG_Init+0x250>)
  *address = value;
 8004eaa:	f8c4 2458 	str.w	r2, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004eae:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa4 <HAL_JPEG_Init+0x254>)
 8004eb0:	f8c4 1454 	str.w	r1, [r4, #1108]	@ 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
 8004eb4:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004eb8:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
 8004ebc:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8004ec0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004ec4:	4a38      	ldr	r2, [pc, #224]	@ (8004fa8 <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFUL;
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004ecc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8004ed0:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004ed4:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8004ed8:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004eda:	f892 e0b5 	ldrb.w	lr, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004ede:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004ee0:	f892 c0b2 	ldrb.w	ip, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004ee4:	f892 00b3 	ldrb.w	r0, [r2, #179]	@ 0xb3
  while (index > 3UL)
 8004ee8:	4296      	cmp	r6, r2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004eea:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8004eee:	ea43 030c 	orr.w	r3, r3, ip
 8004ef2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004ef6:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8004efa:	d1eb      	bne.n	8004ed4 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004efc:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8004f00:	4924      	ldr	r1, [pc, #144]	@ (8004f94 <HAL_JPEG_Init+0x244>)
 8004f02:	4628      	mov	r0, r5
 8004f04:	f7ff fdca 	bl	8004a9c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8004f08:	b118      	cbz	r0, 8004f12 <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004f0a:	2301      	movs	r3, #1
    return HAL_ERROR;
 8004f0c:	2001      	movs	r0, #1
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004f0e:	652b      	str	r3, [r5, #80]	@ 0x50
}
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004f12:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8004f16:	4924      	ldr	r1, [pc, #144]	@ (8004fa8 <HAL_JPEG_Init+0x258>)
 8004f18:	4628      	mov	r0, r5
 8004f1a:	f7ff fdbf 	bl	8004a9c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d1f3      	bne.n	8004f0a <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004f22:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8004f26:	4921      	ldr	r1, [pc, #132]	@ (8004fac <HAL_JPEG_Init+0x25c>)
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f7ff fd0d 	bl	8004948 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	d1eb      	bne.n	8004f0a <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004f32:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8004f36:	491e      	ldr	r1, [pc, #120]	@ (8004fb0 <HAL_JPEG_Init+0x260>)
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7ff fd05 	bl	8004948 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d1e3      	bne.n	8004f0a <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004f42:	6863      	ldr	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004f44:	2201      	movs	r2, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f4a:	6063      	str	r3, [r4, #4]
  hjpeg->JpegInCount = 0;
 8004f4c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8004f4e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004f50:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004f54:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8004f56:	6568      	str	r0, [r5, #84]	@ 0x54
}
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 8004f5a:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8004f5e:	f7fc fd81 	bl	8001a64 <HAL_JPEG_MspInit>
 8004f62:	e701      	b.n	8004d68 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
 8004f64:	2001      	movs	r0, #1
}
 8004f66:	4770      	bx	lr
 8004f68:	0800d130 	.word	0x0800d130
 8004f6c:	0800d0f0 	.word	0x0800d0f0
 8004f70:	01050100 	.word	0x01050100
 8004f74:	0b0a0908 	.word	0x0b0a0908
 8004f78:	07060504 	.word	0x07060504
 8004f7c:	03020100 	.word	0x03020100
 8004f80:	7d010000 	.word	0x7d010000
 8004f84:	04040505 	.word	0x04040505
 8004f88:	03040203 	.word	0x03040203
 8004f8c:	03010200 	.word	0x03010200
 8004f90:	ffff0000 	.word	0xffff0000
 8004f94:	0800d264 	.word	0x0800d264
 8004f98:	09080706 	.word	0x09080706
 8004f9c:	01000404 	.word	0x01000404
 8004fa0:	04040201 	.word	0x04040201
 8004fa4:	05070403 	.word	0x05070403
 8004fa8:	0800d1b0 	.word	0x0800d1b0
 8004fac:	0800d334 	.word	0x0800d334
 8004fb0:	0800d318 	.word	0x0800d318

08004fb4 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8004fb4:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8004fb6:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop

08004fbc <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8004fbc:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8004fbe:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop

08004fc4 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <JPEG_DMA_PollResidualData>:
{
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004fca:	6802      	ldr	r2, [r0, #0]
 8004fcc:	2610      	movs	r6, #16
{
 8004fce:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004fd0:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8004fd2:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8004fd6:	d11d      	bne.n	8005014 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004fd8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004fda:	06df      	lsls	r7, r3, #27
 8004fdc:	d51a      	bpl.n	8005014 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
 8004fde:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004fe0:	69e7      	ldr	r7, [r4, #28]
 8004fe2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004fe4:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004fe6:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8004fe8:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004fea:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8004fec:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8004fee:	69e2      	ldr	r2, [r4, #28]
 8004ff0:	443a      	add	r2, r7
 8004ff2:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8004ff4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004ff6:	69e2      	ldr	r2, [r4, #28]
 8004ff8:	4402      	add	r2, r0
 8004ffa:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8004ffc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004ffe:	69e2      	ldr	r2, [r4, #28]
 8005000:	440a      	add	r2, r1
 8005002:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8005004:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005006:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hjpeg->JpegOutCount += 4UL;
 8005008:	3304      	adds	r3, #4
 800500a:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800500c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800500e:	4293      	cmp	r3, r2
 8005010:	d021      	beq.n	8005056 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8005012:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005014:	3e01      	subs	r6, #1
 8005016:	d1db      	bne.n	8004fd0 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 8005018:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800501a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800501c:	06d8      	lsls	r0, r3, #27
 800501e:	d501      	bpl.n	8005024 <JPEG_DMA_PollResidualData+0x5c>
 8005020:	048b      	lsls	r3, r1, #18
 8005022:	d417      	bmi.n	8005054 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005024:	6813      	ldr	r3, [r2, #0]
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800502c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800502e:	b9eb      	cbnz	r3, 800506c <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
 8005030:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8005032:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005034:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005036:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005038:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 800503c:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005040:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005044:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005046:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005048:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800504a:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800504e:	d00a      	beq.n	8005066 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005050:	f7ff ffb8 	bl	8004fc4 <HAL_JPEG_EncodeCpltCallback>
}
 8005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005056:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005058:	4620      	mov	r0, r4
 800505a:	69e1      	ldr	r1, [r4, #28]
 800505c:	f7fc f996 	bl	800138c <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8005060:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
 8005062:	6265      	str	r5, [r4, #36]	@ 0x24
 8005064:	e7d6      	b.n	8005014 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005066:	f7fc f99f 	bl	80013a8 <HAL_JPEG_DecodeCpltCallback>
}
 800506a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800506c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800506e:	4620      	mov	r0, r4
 8005070:	69e1      	ldr	r1, [r4, #28]
 8005072:	f7fc f98b 	bl	800138c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	6263      	str	r3, [r4, #36]	@ 0x24
 800507a:	e7d9      	b.n	8005030 <JPEG_DMA_PollResidualData+0x68>

0800507c <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800507c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800507e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005080:	f002 0203 	and.w	r2, r2, #3
 8005084:	2a02      	cmp	r2, #2
{
 8005086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508a:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800508c:	d01e      	beq.n	80050cc <JPEG_Process+0x50>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800508e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005090:	04d7      	lsls	r7, r2, #19
 8005092:	d407      	bmi.n	80050a4 <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8005094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005096:	0796      	lsls	r6, r2, #30
 8005098:	f100 811b 	bmi.w	80052d2 <JPEG_Process+0x256>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800509c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800509e:	0750      	lsls	r0, r2, #29
 80050a0:	f100 81cc 	bmi.w	800543c <JPEG_Process+0x3c0>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80050a4:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 80050a6:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80050aa:	d107      	bne.n	80050bc <JPEG_Process+0x40>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80050ac:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80050ae:	f016 0608 	ands.w	r6, r6, #8
 80050b2:	d14a      	bne.n	800514a <JPEG_Process+0xce>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80050b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050b6:	06d2      	lsls	r2, r2, #27
 80050b8:	f100 81fe 	bmi.w	80054b8 <JPEG_Process+0x43c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80050bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050be:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80050c2:	2a20      	cmp	r2, #32
 80050c4:	d019      	beq.n	80050fa <JPEG_Process+0x7e>
  return JPEG_PROCESS_ONGOING;
 80050c6:	2000      	movs	r0, #0
}
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80050cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ce:	0652      	lsls	r2, r2, #25
 80050d0:	d5dd      	bpl.n	800508e <JPEG_Process+0x12>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80050d2:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 80050d4:	4629      	mov	r1, r5
 80050d6:	f7ff fd6b 	bl	8004bb0 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 80050da:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80050dc:	4629      	mov	r1, r5
 80050de:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80050e0:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80050e2:	f7fc f92d 	bl	8001340 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80050f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80050f8:	e7c9      	b.n	800508e <JPEG_Process+0x12>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005102:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005104:	f002 020c 	and.w	r2, r2, #12
 8005108:	2a08      	cmp	r2, #8
 800510a:	f000 8201 	beq.w	8005510 <JPEG_Process+0x494>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800510e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005110:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005114:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8005116:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	f040 81fe 	bne.w	800551a <JPEG_Process+0x49e>
    tmpContext = hjpeg->Context;
 800511e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8005120:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005122:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005124:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005126:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 800512a:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800512e:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005132:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005134:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005136:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005138:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800513c:	f000 81e5 	beq.w	800550a <JPEG_Process+0x48e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005140:	f7ff ff40 	bl	8004fc4 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8005144:	2001      	movs	r0, #1
}
 8005146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800514a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800514c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800514e:	3220      	adds	r2, #32
 8005150:	4296      	cmp	r6, r2
 8005152:	f0c0 8200 	bcc.w	8005556 <JPEG_Process+0x4da>
      dataword = hjpeg->Instance->DOR;
 8005156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005158:	69e1      	ldr	r1, [r4, #28]
 800515a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800515c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800515e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005160:	69e2      	ldr	r2, [r4, #28]
 8005162:	440a      	add	r2, r1
 8005164:	0a19      	lsrs	r1, r3, #8
 8005166:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005168:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800516a:	69e2      	ldr	r2, [r4, #28]
 800516c:	440a      	add	r2, r1
 800516e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005170:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005172:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005174:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005176:	69e2      	ldr	r2, [r4, #28]
 8005178:	440a      	add	r2, r1
 800517a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800517c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800517e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005180:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005182:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8005184:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8005186:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005188:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800518a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800518c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800518e:	69e2      	ldr	r2, [r4, #28]
 8005190:	440a      	add	r2, r1
 8005192:	0a19      	lsrs	r1, r3, #8
 8005194:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005196:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005198:	69e2      	ldr	r2, [r4, #28]
 800519a:	440a      	add	r2, r1
 800519c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800519e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051a0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051a4:	69e2      	ldr	r2, [r4, #28]
 80051a6:	440a      	add	r2, r1
 80051a8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80051aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80051ac:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80051ae:	3304      	adds	r3, #4
 80051b0:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80051b2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80051b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80051b6:	69e1      	ldr	r1, [r4, #28]
 80051b8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80051ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051bc:	69e2      	ldr	r2, [r4, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	0a19      	lsrs	r1, r3, #8
 80051c2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051c6:	69e2      	ldr	r2, [r4, #28]
 80051c8:	440a      	add	r2, r1
 80051ca:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051cc:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051ce:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051d2:	69e2      	ldr	r2, [r4, #28]
 80051d4:	440a      	add	r2, r1
 80051d6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80051d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80051da:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80051dc:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80051de:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80051e0:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80051e2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80051e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80051e6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80051e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051ea:	69e2      	ldr	r2, [r4, #28]
 80051ec:	440a      	add	r2, r1
 80051ee:	0a19      	lsrs	r1, r3, #8
 80051f0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051f4:	69e2      	ldr	r2, [r4, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051fa:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80051fc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80051fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005200:	69e2      	ldr	r2, [r4, #28]
 8005202:	440a      	add	r2, r1
 8005204:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005206:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005208:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 800520a:	3304      	adds	r3, #4
 800520c:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800520e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005210:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005212:	69e1      	ldr	r1, [r4, #28]
 8005214:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005216:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005218:	69e2      	ldr	r2, [r4, #28]
 800521a:	440a      	add	r2, r1
 800521c:	0a19      	lsrs	r1, r3, #8
 800521e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005220:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005222:	69e2      	ldr	r2, [r4, #28]
 8005224:	440a      	add	r2, r1
 8005226:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005228:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800522a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800522c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800522e:	69e2      	ldr	r2, [r4, #28]
 8005230:	440a      	add	r2, r1
 8005232:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005234:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005236:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005238:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800523a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 800523c:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800523e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005240:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005242:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005244:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005246:	69e2      	ldr	r2, [r4, #28]
 8005248:	440a      	add	r2, r1
 800524a:	0a19      	lsrs	r1, r3, #8
 800524c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800524e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005250:	69e2      	ldr	r2, [r4, #28]
 8005252:	440a      	add	r2, r1
 8005254:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005256:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005258:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800525a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800525c:	69e2      	ldr	r2, [r4, #28]
 800525e:	440a      	add	r2, r1
 8005260:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005262:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005264:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005266:	3304      	adds	r3, #4
 8005268:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800526a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800526c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800526e:	69e1      	ldr	r1, [r4, #28]
 8005270:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005272:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005274:	69e2      	ldr	r2, [r4, #28]
 8005276:	440a      	add	r2, r1
 8005278:	0a19      	lsrs	r1, r3, #8
 800527a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800527c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800527e:	69e2      	ldr	r2, [r4, #28]
 8005280:	440a      	add	r2, r1
 8005282:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005284:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005286:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005288:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800528a:	69e2      	ldr	r2, [r4, #28]
 800528c:	440a      	add	r2, r1
 800528e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005290:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005292:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005294:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005296:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8005298:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800529a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800529c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800529e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80052a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052a2:	69e2      	ldr	r2, [r4, #28]
 80052a4:	440a      	add	r2, r1
 80052a6:	0a19      	lsrs	r1, r3, #8
 80052a8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80052aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052ac:	69e2      	ldr	r2, [r4, #28]
 80052ae:	440a      	add	r2, r1
 80052b0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80052b2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80052b4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80052b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052b8:	69e2      	ldr	r2, [r4, #28]
 80052ba:	440a      	add	r2, r1
 80052bc:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80052be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052c0:	3304      	adds	r3, #4
 80052c2:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80052c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80052c8:	429a      	cmp	r2, r3
 80052ca:	f000 8258 	beq.w	800577e <JPEG_Process+0x702>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	e6f4      	b.n	80050bc <JPEG_Process+0x40>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80052d2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	f000 8128 	beq.w	800552a <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80052da:	6a21      	ldr	r1, [r4, #32]
 80052dc:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80052de:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80052e0:	f240 81b9 	bls.w	8005656 <JPEG_Process+0x5da>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80052e4:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80052e6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80052e8:	04cd      	lsls	r5, r1, #19
 80052ea:	f53f aedb 	bmi.w	80050a4 <JPEG_Process+0x28>
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	f43f aed8 	beq.w	80050a4 <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 80052f4:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
 80052f6:	ea4f 0092 	mov.w	r0, r2, lsr #2
    if (nb_words >= nbRequestWords)
 80052fa:	f200 8248 	bhi.w	800578e <JPEG_Process+0x712>
      if (nb_words > 0UL)
 80052fe:	2a03      	cmp	r2, #3
 8005300:	f240 82c0 	bls.w	8005884 <JPEG_Process+0x808>
          input_count = hjpeg->JpegInCount;
 8005304:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005306:	2801      	cmp	r0, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005308:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800530a:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800530e:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005310:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005312:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005314:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005318:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800531a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800531e:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005322:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005326:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005328:	6a21      	ldr	r1, [r4, #32]
 800532a:	f101 0104 	add.w	r1, r1, #4
 800532e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005330:	f43f aeb8 	beq.w	80050a4 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005334:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005336:	2802      	cmp	r0, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005338:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800533c:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800533e:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005340:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005342:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005346:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005348:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800534c:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005350:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005354:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005356:	6a21      	ldr	r1, [r4, #32]
 8005358:	f101 0104 	add.w	r1, r1, #4
 800535c:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800535e:	f43f aea1 	beq.w	80050a4 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005362:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005364:	2803      	cmp	r0, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005366:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800536a:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800536c:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800536e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005370:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005374:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005376:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800537a:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800537e:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005382:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005384:	6a21      	ldr	r1, [r4, #32]
 8005386:	f101 0104 	add.w	r1, r1, #4
 800538a:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800538c:	f43f ae8a 	beq.w	80050a4 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005390:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005392:	2804      	cmp	r0, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005394:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005398:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800539a:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800539c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800539e:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80053a2:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053a4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80053a8:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053ac:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80053b0:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80053b2:	6a21      	ldr	r1, [r4, #32]
 80053b4:	f101 0104 	add.w	r1, r1, #4
 80053b8:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80053ba:	f43f ae73 	beq.w	80050a4 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80053be:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80053c0:	2805      	cmp	r0, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053c2:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80053c6:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053c8:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053ca:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053cc:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80053d0:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053d2:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80053d6:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053da:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80053de:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80053e0:	6a21      	ldr	r1, [r4, #32]
 80053e2:	f101 0104 	add.w	r1, r1, #4
 80053e6:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80053e8:	f43f ae5c 	beq.w	80050a4 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80053ec:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80053ee:	2807      	cmp	r0, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053f0:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80053f4:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053f6:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80053f8:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80053fa:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80053fe:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005400:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005404:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005408:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800540c:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800540e:	6a21      	ldr	r1, [r4, #32]
 8005410:	f101 0104 	add.w	r1, r1, #4
 8005414:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005416:	f47f ae45 	bne.w	80050a4 <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 800541a:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800541c:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800541e:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005420:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005422:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005424:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005426:	7849      	ldrb	r1, [r1, #1]
 8005428:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800542c:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800542e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005432:	641a      	str	r2, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005434:	6a22      	ldr	r2, [r4, #32]
 8005436:	3204      	adds	r2, #4
 8005438:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800543a:	e633      	b.n	80050a4 <JPEG_Process+0x28>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800543c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800543e:	2a00      	cmp	r2, #0
 8005440:	d073      	beq.n	800552a <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005442:	6a21      	ldr	r1, [r4, #32]
 8005444:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005446:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005448:	f200 8182 	bhi.w	8005750 <JPEG_Process+0x6d4>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800544c:	428a      	cmp	r2, r1
 800544e:	f040 8104 	bne.w	800565a <JPEG_Process+0x5de>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8005452:	6a21      	ldr	r1, [r4, #32]
 8005454:	4620      	mov	r0, r4
 8005456:	f7fb ff75 	bl	8001344 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800545a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800545c:	2a04      	cmp	r2, #4
 800545e:	d902      	bls.n	8005466 <JPEG_Process+0x3ea>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005460:	f022 0203 	bic.w	r2, r2, #3
 8005464:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8005466:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005468:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 800546a:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800546c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800546e:	04c9      	lsls	r1, r1, #19
 8005470:	f53f ae18 	bmi.w	80050a4 <JPEG_Process+0x28>
 8005474:	2a00      	cmp	r2, #0
 8005476:	f43f ae15 	beq.w	80050a4 <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 800547a:	0891      	lsrs	r1, r2, #2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800547c:	69a0      	ldr	r0, [r4, #24]
    if (nb_words >= nbRequestWords)
 800547e:	f040 8177 	bne.w	8005770 <JPEG_Process+0x6f4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005482:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005484:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 8005486:	6a25      	ldr	r5, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005488:	5c41      	ldrb	r1, [r0, r1]
          hjpeg->JpegInCount++;
 800548a:	f105 0501 	add.w	r5, r5, #1
 800548e:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005490:	d010      	beq.n	80054b4 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005492:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005494:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005496:	5d45      	ldrb	r5, [r0, r5]
 8005498:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
          hjpeg->JpegInCount++;
 800549c:	6a25      	ldr	r5, [r4, #32]
 800549e:	f105 0501 	add.w	r5, r5, #1
 80054a2:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80054a4:	d106      	bne.n	80054b4 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80054a6:	6a22      	ldr	r2, [r4, #32]
 80054a8:	5c80      	ldrb	r0, [r0, r2]
          hjpeg->JpegInCount++;
 80054aa:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80054ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 80054b0:	3201      	adds	r2, #1
 80054b2:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 80054b4:	6419      	str	r1, [r3, #64]	@ 0x40
 80054b6:	e5f5      	b.n	80050a4 <JPEG_Process+0x28>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80054b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80054ba:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80054bc:	3204      	adds	r2, #4
 80054be:	4295      	cmp	r5, r2
 80054c0:	f0c0 80cd 	bcc.w	800565e <JPEG_Process+0x5e2>
      dataword = hjpeg->Instance->DOR;
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80054c6:	69e1      	ldr	r1, [r4, #28]
 80054c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80054ca:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80054cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80054ce:	69e2      	ldr	r2, [r4, #28]
 80054d0:	440a      	add	r2, r1
 80054d2:	0a19      	lsrs	r1, r3, #8
 80054d4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80054d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80054d8:	69e2      	ldr	r2, [r4, #28]
 80054da:	440a      	add	r2, r1
 80054dc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80054de:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80054e0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80054e2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80054e4:	69e2      	ldr	r2, [r4, #28]
 80054e6:	440a      	add	r2, r1
 80054e8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80054ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80054ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      hjpeg->JpegOutCount += 4UL;
 80054ee:	3304      	adds	r3, #4
 80054f0:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80054f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80054f4:	429a      	cmp	r2, r3
 80054f6:	f47f aeea 	bne.w	80052ce <JPEG_Process+0x252>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80054fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80054fc:	4620      	mov	r0, r4
 80054fe:	69e1      	ldr	r1, [r4, #28]
 8005500:	f7fb ff44 	bl	800138c <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005504:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8005506:	6266      	str	r6, [r4, #36]	@ 0x24
 8005508:	e5d8      	b.n	80050bc <JPEG_Process+0x40>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800550a:	f7fb ff4d 	bl	80013a8 <HAL_JPEG_DecodeCpltCallback>
 800550e:	e619      	b.n	8005144 <JPEG_Process+0xc8>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005512:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30
 8005518:	e5f9      	b.n	800510e <JPEG_Process+0x92>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800551a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800551c:	4620      	mov	r0, r4
 800551e:	69e1      	ldr	r1, [r4, #28]
 8005520:	f7fb ff34 	bl	800138c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	6263      	str	r3, [r4, #36]	@ 0x24
 8005528:	e5f9      	b.n	800511e <JPEG_Process+0xa2>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800552a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800552c:	f002 020c 	and.w	r2, r2, #12
 8005530:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005532:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005534:	f000 811e 	beq.w	8005774 <JPEG_Process+0x6f8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005538:	f002 020c 	and.w	r2, r2, #12
 800553c:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800553e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005540:	f47f adb0 	bne.w	80050a4 <JPEG_Process+0x28>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005544:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005548:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800554a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800554c:	f022 0206 	bic.w	r2, r2, #6
 8005550:	631a      	str	r2, [r3, #48]	@ 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8005552:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005554:	e5a6      	b.n	80050a4 <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8005556:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005558:	4296      	cmp	r6, r2
 800555a:	f67f adaf 	bls.w	80050bc <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800555e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005560:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
 8005562:	0880      	lsrs	r0, r0, #2
 8005564:	d020      	beq.n	80055a8 <JPEG_Process+0x52c>
 8005566:	4629      	mov	r1, r5
 8005568:	e000      	b.n	800556c <JPEG_Process+0x4f0>
      dataword = hjpeg->Instance->DOR;
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 800556e:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005570:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005572:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8005574:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005576:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005578:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800557a:	69e2      	ldr	r2, [r4, #28]
 800557c:	4432      	add	r2, r6
 800557e:	ea4f 2613 	mov.w	r6, r3, lsr #8
 8005582:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005584:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005586:	69e2      	ldr	r2, [r4, #28]
 8005588:	4432      	add	r2, r6
 800558a:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800558e:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005592:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005594:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005596:	69e2      	ldr	r2, [r4, #28]
 8005598:	4432      	add	r2, r6
 800559a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800559c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800559e:	f103 0304 	add.w	r3, r3, #4
 80055a2:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80055a4:	d1e1      	bne.n	800556a <JPEG_Process+0x4ee>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80055a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80055aa:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80055ac:	429e      	cmp	r6, r3
 80055ae:	f000 8161 	beq.w	8005874 <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80055b2:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80055b6:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 80055b8:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
 80055bc:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80055be:	d00e      	beq.n	80055de <JPEG_Process+0x562>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80055c0:	f005 0303 	and.w	r3, r5, #3
 80055c4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80055c6:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80055c8:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 80055ca:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80055cc:	fa27 f303 	lsr.w	r3, r7, r3
 80055d0:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 80055d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80055d4:	69e1      	ldr	r1, [r4, #28]
 80055d6:	f103 0301 	add.w	r3, r3, #1
 80055da:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80055dc:	d1f0      	bne.n	80055c0 <JPEG_Process+0x544>
      nb_bytes = 4UL - nb_bytes;
 80055de:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80055e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80055e4:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
 80055e6:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80055ea:	f7fb fecf 	bl	800138c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80055ee:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 80055f0:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
 80055f2:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80055f4:	f63f ae6b 	bhi.w	80052ce <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80055f8:	ea4f 02c6 	mov.w	r2, r6, lsl #3
 80055fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055fe:	69e0      	ldr	r0, [r4, #28]
 8005600:	fa27 f502 	lsr.w	r5, r7, r2
 8005604:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 8005606:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005608:	f101 0101 	add.w	r1, r1, #1
 800560c:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800560e:	f43f ae5e 	beq.w	80052ce <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005612:	f102 0108 	add.w	r1, r2, #8
 8005616:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005618:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800561a:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800561c:	fa27 f101 	lsr.w	r1, r7, r1
 8005620:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 8005622:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005624:	f101 0101 	add.w	r1, r1, #1
 8005628:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800562a:	f43f ae50 	beq.w	80052ce <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800562e:	3210      	adds	r2, #16
 8005630:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005632:	69e0      	ldr	r0, [r4, #28]
 8005634:	fa27 f202 	lsr.w	r2, r7, r2
 8005638:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800563a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800563c:	3201      	adds	r2, #1
 800563e:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005640:	2e00      	cmp	r6, #0
 8005642:	f47f ae44 	bne.w	80052ce <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005646:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005648:	0e3f      	lsrs	r7, r7, #24
 800564a:	69e2      	ldr	r2, [r4, #28]
 800564c:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
 800564e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005650:	3301      	adds	r3, #1
 8005652:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005654:	e63b      	b.n	80052ce <JPEG_Process+0x252>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8005656:	428a      	cmp	r2, r1
 8005658:	d07c      	beq.n	8005754 <JPEG_Process+0x6d8>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800565a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800565c:	e522      	b.n	80050a4 <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800565e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005660:	4295      	cmp	r5, r2
 8005662:	f67f ad2b 	bls.w	80050bc <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8005666:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005668:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
 800566a:	0880      	lsrs	r0, r0, #2
 800566c:	d020      	beq.n	80056b0 <JPEG_Process+0x634>
 800566e:	4631      	mov	r1, r6
 8005670:	e000      	b.n	8005674 <JPEG_Process+0x5f8>
      dataword = hjpeg->Instance->DOR;
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 8005676:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005678:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800567a:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800567c:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800567e:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005680:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005682:	69e2      	ldr	r2, [r4, #28]
 8005684:	442a      	add	r2, r5
 8005686:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800568a:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800568c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800568e:	69e2      	ldr	r2, [r4, #28]
 8005690:	442a      	add	r2, r5
 8005692:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005696:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800569a:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800569c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800569e:	69e2      	ldr	r2, [r4, #28]
 80056a0:	442a      	add	r2, r5
 80056a2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80056a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056a6:	f103 0304 	add.w	r3, r3, #4
 80056aa:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80056ac:	d1e1      	bne.n	8005672 <JPEG_Process+0x5f6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80056ae:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80056b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80056b2:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80056b4:	429d      	cmp	r5, r3
 80056b6:	f000 80dd 	beq.w	8005874 <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80056ba:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80056be:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 80056c0:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
 80056c4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80056c6:	d00e      	beq.n	80056e6 <JPEG_Process+0x66a>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80056c8:	f006 0303 	and.w	r3, r6, #3
 80056cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80056ce:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80056d0:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 80056d2:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80056d4:	fa27 f303 	lsr.w	r3, r7, r3
 80056d8:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 80056da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056dc:	69e1      	ldr	r1, [r4, #28]
 80056de:	f103 0301 	add.w	r3, r3, #1
 80056e2:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80056e4:	d1f0      	bne.n	80056c8 <JPEG_Process+0x64c>
      nb_bytes = 4UL - nb_bytes;
 80056e6:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80056ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7fb fe4d 	bl	800138c <HAL_JPEG_DataReadyCallback>
      nb_bytes = 4UL - nb_bytes;
 80056f2:	eba8 0305 	sub.w	r3, r8, r5
      hjpeg->JpegOutCount = 0;
 80056f6:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 80056f8:	2b03      	cmp	r3, #3
      hjpeg->JpegOutCount = 0;
 80056fa:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80056fc:	f63f ade7 	bhi.w	80052ce <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005700:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 8005704:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005706:	69e0      	ldr	r0, [r4, #28]
 8005708:	fa27 f502 	lsr.w	r5, r7, r2
 800570c:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 800570e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005710:	f101 0101 	add.w	r1, r1, #1
 8005714:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005716:	f43f adda 	beq.w	80052ce <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800571a:	f102 0108 	add.w	r1, r2, #8
 800571e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005720:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8005722:	2b02      	cmp	r3, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005724:	fa27 f101 	lsr.w	r1, r7, r1
 8005728:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 800572a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800572c:	f101 0101 	add.w	r1, r1, #1
 8005730:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005732:	f43f adcc 	beq.w	80052ce <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005736:	3210      	adds	r2, #16
 8005738:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800573a:	69e0      	ldr	r0, [r4, #28]
 800573c:	fa27 f202 	lsr.w	r2, r7, r2
 8005740:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8005742:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005744:	3201      	adds	r2, #1
 8005746:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005748:	2b00      	cmp	r3, #0
 800574a:	f43f af7c 	beq.w	8005646 <JPEG_Process+0x5ca>
 800574e:	e5be      	b.n	80052ce <JPEG_Process+0x252>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005750:	1a52      	subs	r2, r2, r1
 8005752:	e68b      	b.n	800546c <JPEG_Process+0x3f0>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8005754:	6a21      	ldr	r1, [r4, #32]
 8005756:	4620      	mov	r0, r4
 8005758:	f7fb fdf4 	bl	8001344 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800575c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800575e:	2a04      	cmp	r2, #4
 8005760:	d902      	bls.n	8005768 <JPEG_Process+0x6ec>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005762:	f022 0203 	bic.w	r2, r2, #3
 8005766:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8005768:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800576a:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 800576c:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800576e:	e5ba      	b.n	80052e6 <JPEG_Process+0x26a>
        input_count = hjpeg->JpegInCount;
 8005770:	6a22      	ldr	r2, [r4, #32]
 8005772:	e653      	b.n	800541c <JPEG_Process+0x3a0>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005774:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005778:	6562      	str	r2, [r4, #84]	@ 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800577a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800577c:	e492      	b.n	80050a4 <JPEG_Process+0x28>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800577e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005780:	4620      	mov	r0, r4
 8005782:	69e1      	ldr	r1, [r4, #28]
 8005784:	f7fb fe02 	bl	800138c <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005788:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 800578a:	6265      	str	r5, [r4, #36]	@ 0x24
 800578c:	e496      	b.n	80050bc <JPEG_Process+0x40>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800578e:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
 8005790:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005792:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005794:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005796:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005798:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800579a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800579c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800579e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80057a2:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057a4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057a8:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80057aa:	6a21      	ldr	r1, [r4, #32]
 80057ac:	3104      	adds	r1, #4
 80057ae:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80057b0:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057b2:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057b4:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057b6:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057b8:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057ba:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80057bc:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057be:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80057c2:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057c4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057c8:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80057ca:	6a21      	ldr	r1, [r4, #32]
 80057cc:	3104      	adds	r1, #4
 80057ce:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80057d0:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057d2:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057d4:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057d6:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057d8:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057da:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80057dc:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057de:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80057e2:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057e4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057e8:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80057ea:	6a21      	ldr	r1, [r4, #32]
 80057ec:	3104      	adds	r1, #4
 80057ee:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80057f0:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057f2:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80057f4:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057f6:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057f8:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80057fa:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80057fc:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80057fe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8005802:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005804:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005808:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800580a:	6a21      	ldr	r1, [r4, #32]
 800580c:	3104      	adds	r1, #4
 800580e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005810:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005812:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005814:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005816:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005818:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800581a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800581c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800581e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8005822:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005824:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005828:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800582a:	6a21      	ldr	r1, [r4, #32]
 800582c:	3104      	adds	r1, #4
 800582e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005830:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005832:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005834:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005836:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005838:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800583a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800583c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800583e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8005842:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005844:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005848:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800584a:	6a21      	ldr	r1, [r4, #32]
 800584c:	3104      	adds	r1, #4
 800584e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005850:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005852:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005854:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005856:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005858:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800585a:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800585c:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800585e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8005862:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005864:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005868:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800586a:	6a21      	ldr	r1, [r4, #32]
 800586c:	3104      	adds	r1, #4
 800586e:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005870:	6a20      	ldr	r0, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005872:	e5d3      	b.n	800541c <JPEG_Process+0x3a0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005874:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005876:	4620      	mov	r0, r4
 8005878:	f7fb fd88 	bl	800138c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800587c:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800587e:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8005880:	6262      	str	r2, [r4, #36]	@ 0x24
 8005882:	e41b      	b.n	80050bc <JPEG_Process+0x40>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005884:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005886:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 8005888:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800588a:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
 800588c:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005890:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
 8005892:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8005894:	f43f ae0e 	beq.w	80054b4 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8005898:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800589a:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800589c:	5c28      	ldrb	r0, [r5, r0]
 800589e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
 80058a2:	6a20      	ldr	r0, [r4, #32]
 80058a4:	f100 0001 	add.w	r0, r0, #1
 80058a8:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80058aa:	f47f ae03 	bne.w	80054b4 <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80058ae:	6a22      	ldr	r2, [r4, #32]
 80058b0:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
 80058b2:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80058b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 80058b8:	3201      	adds	r2, #1
 80058ba:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 80058bc:	e5fa      	b.n	80054b4 <JPEG_Process+0x438>
 80058be:	bf00      	nop

080058c0 <HAL_JPEG_IRQHandler>:
{
 80058c0:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 80058c2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80058c6:	3b03      	subs	r3, #3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d900      	bls.n	80058ce <HAL_JPEG_IRQHandler+0xe>
}
 80058cc:	bd38      	pop	{r3, r4, r5, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80058ce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80058d0:	4604      	mov	r4, r0
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d050      	beq.n	800597c <HAL_JPEG_IRQHandler+0xbc>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80058da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80058dc:	f003 030c 	and.w	r3, r3, #12
 80058e0:	2b0c      	cmp	r3, #12
 80058e2:	d1f3      	bne.n	80058cc <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80058e4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80058e6:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80058e8:	f002 0203 	and.w	r2, r2, #3
 80058ec:	2a02      	cmp	r2, #2
 80058ee:	d049      	beq.n	8005984 <HAL_JPEG_IRQHandler+0xc4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80058f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058f2:	0692      	lsls	r2, r2, #26
 80058f4:	d5ea      	bpl.n	80058cc <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80058f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80058f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80058fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058fe:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800590a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005912:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005916:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8005918:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800591c:	2b02      	cmp	r3, #2
 800591e:	d054      	beq.n	80059ca <HAL_JPEG_IRQHandler+0x10a>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8005920:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005922:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005926:	2b02      	cmp	r3, #2
 8005928:	d043      	beq.n	80059b2 <HAL_JPEG_IRQHandler+0xf2>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800592a:	6803      	ldr	r3, [r0, #0]
 800592c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005938:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800593a:	429a      	cmp	r2, r3
 800593c:	d048      	beq.n	80059d0 <HAL_JPEG_IRQHandler+0x110>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8005942:	f015 0510 	ands.w	r5, r5, #16
 8005946:	d138      	bne.n	80059ba <HAL_JPEG_IRQHandler+0xfa>
    if (hjpeg->JpegOutCount > 0UL)
 8005948:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800594a:	2b00      	cmp	r3, #0
 800594c:	d14b      	bne.n	80059e6 <HAL_JPEG_IRQHandler+0x126>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800594e:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8005950:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005952:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800595a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800595c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800595e:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8005962:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005966:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800596a:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800596c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800596e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005970:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005974:	d034      	beq.n	80059e0 <HAL_JPEG_IRQHandler+0x120>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005976:	f7ff fb25 	bl	8004fc4 <HAL_JPEG_EncodeCpltCallback>
}
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void) JPEG_Process(hjpeg);
 8005980:	f7ff bb7c 	b.w	800507c <JPEG_Process>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005986:	0651      	lsls	r1, r2, #25
 8005988:	d5b2      	bpl.n	80058f0 <HAL_JPEG_IRQHandler+0x30>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800598a:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 800598c:	4629      	mov	r1, r5
 800598e:	f7ff f90f 	bl	8004bb0 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 8005992:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005994:	4629      	mov	r1, r5
 8005996:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8005998:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800599a:	f7fb fcd1 	bl	8001340 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80059a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80059b0:	e79e      	b.n	80058f0 <HAL_JPEG_IRQHandler+0x30>
}
 80059b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80059b6:	f000 b8bd 	b.w	8005b34 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80059ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80059bc:	049b      	lsls	r3, r3, #18
 80059be:	d485      	bmi.n	80058cc <HAL_JPEG_IRQHandler+0xc>
    JPEG_DMA_PollResidualData(hjpeg);
 80059c0:	4620      	mov	r0, r4
}
 80059c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 80059c6:	f7ff baff 	b.w	8004fc8 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80059ca:	f000 f8b3 	bl	8005b34 <HAL_MDMA_Abort_IT>
 80059ce:	e7a7      	b.n	8005920 <HAL_JPEG_IRQHandler+0x60>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80059d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80059d2:	4620      	mov	r0, r4
 80059d4:	69e1      	ldr	r1, [r4, #28]
 80059d6:	f7fb fcd9 	bl	800138c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80059de:	e7ae      	b.n	800593e <HAL_JPEG_IRQHandler+0x7e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80059e0:	f7fb fce2 	bl	80013a8 <HAL_JPEG_DecodeCpltCallback>
}
 80059e4:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80059e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80059e8:	4620      	mov	r0, r4
 80059ea:	69e1      	ldr	r1, [r4, #28]
 80059ec:	f7fb fcce 	bl	800138c <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80059f0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80059f2:	6265      	str	r5, [r4, #36]	@ 0x24
 80059f4:	e7ab      	b.n	800594e <HAL_JPEG_IRQHandler+0x8e>
 80059f6:	bf00      	nop

080059f8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059fc:	f7fc fb2a 	bl	8002054 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005a00:	2c00      	cmp	r4, #0
 8005a02:	d058      	beq.n	8005ab6 <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005a04:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005a06:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005a0c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8005a10:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	f022 0201 	bic.w	r2, r2, #1
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005a1c:	e005      	b.n	8005a2a <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005a1e:	f7fc fb19 	bl	8002054 <HAL_GetTick>
 8005a22:	1b43      	subs	r3, r0, r5
 8005a24:	2b05      	cmp	r3, #5
 8005a26:	d841      	bhi.n	8005aac <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	07d2      	lsls	r2, r2, #31
 8005a2e:	d4f6      	bmi.n	8005a1e <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005a30:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 8005a34:	69e0      	ldr	r0, [r4, #28]
 8005a36:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005a38:	68e1      	ldr	r1, [r4, #12]
 8005a3a:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005a3c:	4302      	orrs	r2, r0
 8005a3e:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005a40:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005a42:	4302      	orrs	r2, r0
 8005a44:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005a46:	4302      	orrs	r2, r0
 8005a48:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005a4a:	4302      	orrs	r2, r0
 8005a4c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005a4e:	4302      	orrs	r2, r0
 8005a50:	68a0      	ldr	r0, [r4, #8]
 8005a52:	4302      	orrs	r2, r0
 8005a54:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005a56:	3801      	subs	r0, #1
 8005a58:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005a5c:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005a5e:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005a60:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005a64:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005a66:	d103      	bne.n	8005a70 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8005a6e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8005a70:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005a72:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005a74:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 8005a76:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005a78:	db1f      	blt.n	8005aba <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8005a7e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	db24      	blt.n	8005ace <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005a84:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005a86:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005a8a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005a8e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005a90:	d029      	beq.n	8005ae6 <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8005a92:	b2c0      	uxtb	r0, r0
 8005a94:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8005a96:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8005a98:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8005a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 8005a9c:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005a9e:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8005aa0:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8005aa2:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005aa6:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005aac:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005aae:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005ab0:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005ab2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8005ab6:	2001      	movs	r0, #1
}
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005aba:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8005abc:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005abe:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8005ac2:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005ac4:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8005ac6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8005ac8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	dada      	bge.n	8005a84 <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005ace:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8005ad0:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005ad2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005ad6:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8005ada:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005adc:	6a19      	ldr	r1, [r3, #32]
 8005ade:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005ae2:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005ae4:	d1d5      	bne.n	8005a92 <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aea:	e7d4      	b.n	8005a96 <HAL_MDMA_Init+0x9e>

08005aec <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8005aec:	b1f8      	cbz	r0, 8005b2e <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 8005aee:	6802      	ldr	r2, [r0, #0]
 8005af0:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 8005af2:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8005af4:	68d0      	ldr	r0, [r2, #12]
{
 8005af6:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 8005af8:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8005afc:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 8005afe:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 8005b00:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 8005b02:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8005b04:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8005b06:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8005b08:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8005b0a:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8005b0c:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8005b0e:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8005b10:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8005b12:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8005b14:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8005b16:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005b18:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 8005b1a:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8005b1e:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 8005b22:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 8005b26:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005b28:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 8005b2c:	4770      	bx	lr
    return HAL_ERROR;
 8005b2e:	2001      	movs	r0, #1
}
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop

08005b34 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8005b34:	4603      	mov	r3, r0
 8005b36:	b128      	cbz	r0, 8005b44 <HAL_MDMA_Abort_IT+0x10>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8005b38:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8005b3c:	2a02      	cmp	r2, #2
 8005b3e:	d003      	beq.n	8005b48 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005b40:	2280      	movs	r2, #128	@ 0x80
 8005b42:	6682      	str	r2, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8005b44:	2001      	movs	r0, #1
 8005b46:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8005b48:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005b4a:	2104      	movs	r1, #4
  return HAL_OK;
 8005b4c:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005b4e:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8005b52:	68d3      	ldr	r3, [r2, #12]
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	60d3      	str	r3, [r2, #12]
}
 8005b5a:	4770      	bx	lr

08005b5c <HAL_MDMA_IRQHandler>:
{
 8005b5c:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 8005b5e:	2300      	movs	r3, #0
{
 8005b60:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005b62:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 8005b66:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005b68:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005b6a:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b6c:	4b57      	ldr	r3, [pc, #348]	@ (8005ccc <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005b6e:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005b70:	4a57      	ldr	r2, [pc, #348]	@ (8005cd0 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b72:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	441a      	add	r2, r3
 8005b78:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8005b7c:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005b80:	4202      	tst	r2, r0
 8005b82:	f000 80a0 	beq.w	8005cc6 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	07d1      	lsls	r1, r2, #31
 8005b8a:	d529      	bpl.n	8005be0 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	0792      	lsls	r2, r2, #30
 8005b90:	d526      	bpl.n	8005be0 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	f022 0202 	bic.w	r2, r2, #2
 8005b98:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8005b9a:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005b9c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8005b9e:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005ba0:	bf54      	ite	pl
 8005ba2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005ba6:	f041 0102 	orrmi.w	r1, r1, #2
 8005baa:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8005bac:	0591      	lsls	r1, r2, #22
 8005bae:	d503      	bpl.n	8005bb8 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005bb0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005bb2:	f041 0104 	orr.w	r1, r1, #4
 8005bb6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005bb8:	05d0      	lsls	r0, r2, #23
 8005bba:	d503      	bpl.n	8005bc4 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8005bbc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005bbe:	f041 0108 	orr.w	r1, r1, #8
 8005bc2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8005bc4:	0551      	lsls	r1, r2, #21
 8005bc6:	d503      	bpl.n	8005bd0 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8005bc8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005bca:	f041 0110 	orr.w	r1, r1, #16
 8005bce:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8005bd0:	0510      	lsls	r0, r2, #20
 8005bd2:	d503      	bpl.n	8005bdc <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8005bd4:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005bd6:	f042 0220 	orr.w	r2, r2, #32
 8005bda:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8005bdc:	2201      	movs	r2, #1
 8005bde:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	06d1      	lsls	r1, r2, #27
 8005be4:	d509      	bpl.n	8005bfa <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d506      	bpl.n	8005bfa <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005bec:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 8005bee:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005bf0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8005bf2:	b112      	cbz	r2, 8005bfa <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	0710      	lsls	r0, r2, #28
 8005bfe:	d509      	bpl.n	8005c14 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	06d1      	lsls	r1, r2, #27
 8005c04:	d506      	bpl.n	8005c14 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005c06:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 8005c08:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005c0a:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8005c0c:	b112      	cbz	r2, 8005c14 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	0752      	lsls	r2, r2, #29
 8005c18:	d509      	bpl.n	8005c2e <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	0710      	lsls	r0, r2, #28
 8005c1e:	d506      	bpl.n	8005c2e <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005c20:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005c22:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005c24:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005c26:	b112      	cbz	r2, 8005c2e <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8005c28:	4620      	mov	r0, r4
 8005c2a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	0791      	lsls	r1, r2, #30
 8005c32:	d516      	bpl.n	8005c62 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	0752      	lsls	r2, r2, #29
 8005c38:	d513      	bpl.n	8005c62 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8005c40:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8005c42:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8005c46:	2a04      	cmp	r2, #4
 8005c48:	d034      	beq.n	8005cb4 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005c4a:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 8005c4c:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005c4e:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8005c50:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 8005c52:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 8005c54:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8005c58:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8005c5c:	b10b      	cbz	r3, 8005c62 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8005c62:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02e      	beq.n	8005cc6 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 8005c68:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005c6a:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c6c:	4b19      	ldr	r3, [pc, #100]	@ (8005cd4 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005c6e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c72:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 8005c76:	68cb      	ldr	r3, [r1, #12]
 8005c78:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c7c:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 8005c7e:	60cb      	str	r3, [r1, #12]
 8005c80:	e002      	b.n	8005c88 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8005c82:	68cb      	ldr	r3, [r1, #12]
 8005c84:	07d8      	lsls	r0, r3, #31
 8005c86:	d504      	bpl.n	8005c92 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	d9f7      	bls.n	8005c82 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 8005c92:	2300      	movs	r3, #0
 8005c94:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005c98:	68cb      	ldr	r3, [r1, #12]
 8005c9a:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005c9c:	bf4c      	ite	mi
 8005c9e:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8005ca0:	2301      	movpl	r3, #1
 8005ca2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8005ca6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005ca8:	b16b      	cbz	r3, 8005cc6 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 8005caa:	4620      	mov	r0, r4
}
 8005cac:	b003      	add	sp, #12
 8005cae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8005cb2:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 8005cb4:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 8005cb6:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 8005cb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 8005cba:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8005cbe:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f1      	bne.n	8005caa <HAL_MDMA_IRQHandler+0x14e>
}
 8005cc6:	b003      	add	sp, #12
 8005cc8:	bd30      	pop	{r4, r5, pc}
 8005cca:	bf00      	nop
 8005ccc:	24000008 	.word	0x24000008
 8005cd0:	adffffc0 	.word	0xadffffc0
 8005cd4:	1b4e81b5 	.word	0x1b4e81b5

08005cd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cd8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005cda:	4c10      	ldr	r4, [pc, #64]	@ (8005d1c <HAL_PWREx_ConfigSupply+0x44>)
 8005cdc:	68e3      	ldr	r3, [r4, #12]
 8005cde:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ce2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ce4:	d105      	bne.n	8005cf2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	1a18      	subs	r0, r3, r0
 8005cec:	bf18      	it	ne
 8005cee:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005cf0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	4303      	orrs	r3, r0
 8005cf8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8005cfa:	f7fc f9ab 	bl	8002054 <HAL_GetTick>
 8005cfe:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d00:	e005      	b.n	8005d0e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d02:	f7fc f9a7 	bl	8002054 <HAL_GetTick>
 8005d06:	1b40      	subs	r0, r0, r5
 8005d08:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005d0c:	d804      	bhi.n	8005d18 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d0e:	6863      	ldr	r3, [r4, #4]
 8005d10:	049b      	lsls	r3, r3, #18
 8005d12:	d5f6      	bpl.n	8005d02 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8005d14:	2000      	movs	r0, #0
}
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005d18:	2001      	movs	r0, #1
}
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	58024800 	.word	0x58024800

08005d20 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d20:	4b33      	ldr	r3, [pc, #204]	@ (8005df0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8005d22:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d24:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d26:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d28:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8005d2a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d30:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005d34:	d036      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d36:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d3a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d3e:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d42:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d46:	fb05 f202 	mul.w	r2, r5, r2
 8005d4a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d50:	ee06 2a90 	vmov	s13, r2
 8005d54:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005d58:	d002      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8005d5a:	2902      	cmp	r1, #2
 8005d5c:	d042      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8005d5e:	b319      	cbz	r1, 8005da8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d60:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8005df4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8005d64:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005d82:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d8e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d90:	ee07 3a10 	vmov	s14, r3
 8005d94:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d9c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005da0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8005da4:	bc30      	pop	{r4, r5}
 8005da6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	0692      	lsls	r2, r2, #26
 8005dac:	d51d      	bpl.n	8005dea <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dae:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005db0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db4:	4a10      	ldr	r2, [pc, #64]	@ (8005df8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dc0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc2:	ee07 3a90 	vmov	s15, r3
 8005dc6:	ee06 2a10 	vmov	s12, r2
 8005dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005dd2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005dd6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8005dda:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de2:	e7d0      	b.n	8005d86 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005dfc <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8005de8:	e7bc      	b.n	8005d64 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dea:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005e00 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8005dee:	e7b9      	b.n	8005d64 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8005df0:	58024400 	.word	0x58024400
 8005df4:	4a742400 	.word	0x4a742400
 8005df8:	03d09000 	.word	0x03d09000
 8005dfc:	4bbebc20 	.word	0x4bbebc20
 8005e00:	4c742400 	.word	0x4c742400

08005e04 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f000 82dc 	beq.w	80063c2 <HAL_RCC_OscConfig+0x5be>
{
 8005e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e0c:	6803      	ldr	r3, [r0, #0]
 8005e0e:	4604      	mov	r4, r0
 8005e10:	07d9      	lsls	r1, r3, #31
 8005e12:	d53b      	bpl.n	8005e8c <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e14:	499e      	ldr	r1, [pc, #632]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8005e16:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e18:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e1e:	2a10      	cmp	r2, #16
 8005e20:	f000 80e4 	beq.w	8005fec <HAL_RCC_OscConfig+0x1e8>
 8005e24:	2a18      	cmp	r2, #24
 8005e26:	f000 80dc 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e2a:	6863      	ldr	r3, [r4, #4]
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e30:	d018      	beq.n	8005e64 <HAL_RCC_OscConfig+0x60>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8154 	beq.w	80060e0 <HAL_RCC_OscConfig+0x2dc>
 8005e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e3c:	f000 8270 	beq.w	8006320 <HAL_RCC_OscConfig+0x51c>
 8005e40:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005e44:	4b92      	ldr	r3, [pc, #584]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	f000 8211 	beq.w	800626e <HAL_RCC_OscConfig+0x46a>
 8005e4c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005e60:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e62:	e004      	b.n	8005e6e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e64:	4a8a      	ldr	r2, [pc, #552]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e6e:	f7fc f8f1 	bl	8002054 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e72:	4e87      	ldr	r6, [pc, #540]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8005e74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e76:	e005      	b.n	8005e84 <HAL_RCC_OscConfig+0x80>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fc f8ec 	bl	8002054 <HAL_GetTick>
 8005e7c:	1b40      	subs	r0, r0, r5
 8005e7e:	2864      	cmp	r0, #100	@ 0x64
 8005e80:	f200 812c 	bhi.w	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e84:	6833      	ldr	r3, [r6, #0]
 8005e86:	039b      	lsls	r3, r3, #14
 8005e88:	d5f6      	bpl.n	8005e78 <HAL_RCC_OscConfig+0x74>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	079d      	lsls	r5, r3, #30
 8005e8e:	d464      	bmi.n	8005f5a <HAL_RCC_OscConfig+0x156>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e90:	06d9      	lsls	r1, r3, #27
 8005e92:	d528      	bpl.n	8005ee6 <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e94:	497e      	ldr	r1, [pc, #504]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8005e96:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e98:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e9a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e9e:	2a08      	cmp	r2, #8
 8005ea0:	f000 80b4 	beq.w	800600c <HAL_RCC_OscConfig+0x208>
 8005ea4:	2a18      	cmp	r2, #24
 8005ea6:	f000 80ac 	beq.w	8006002 <HAL_RCC_OscConfig+0x1fe>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005eaa:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8005eac:	4d78      	ldr	r5, [pc, #480]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8152 	beq.w	8006158 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005ebc:	f7fc f8ca 	bl	8002054 <HAL_GetTick>
 8005ec0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ec2:	e005      	b.n	8005ed0 <HAL_RCC_OscConfig+0xcc>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ec4:	f7fc f8c6 	bl	8002054 <HAL_GetTick>
 8005ec8:	1b80      	subs	r0, r0, r6
 8005eca:	2802      	cmp	r0, #2
 8005ecc:	f200 8106 	bhi.w	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	05db      	lsls	r3, r3, #23
 8005ed4:	d5f6      	bpl.n	8005ec4 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ed6:	68eb      	ldr	r3, [r5, #12]
 8005ed8:	6a22      	ldr	r2, [r4, #32]
 8005eda:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005ede:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ee2:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	071d      	lsls	r5, r3, #28
 8005ee8:	d516      	bpl.n	8005f18 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eea:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8005eec:	4d68      	ldr	r5, [pc, #416]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8110 	beq.w	8006114 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8005ef4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8005efc:	f7fc f8aa 	bl	8002054 <HAL_GetTick>
 8005f00:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f02:	e005      	b.n	8005f10 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f04:	f7fc f8a6 	bl	8002054 <HAL_GetTick>
 8005f08:	1b80      	subs	r0, r0, r6
 8005f0a:	2802      	cmp	r0, #2
 8005f0c:	f200 80e6 	bhi.w	80060dc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f10:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8005f12:	0798      	lsls	r0, r3, #30
 8005f14:	d5f6      	bpl.n	8005f04 <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	069a      	lsls	r2, r3, #26
 8005f1a:	d516      	bpl.n	8005f4a <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f1c:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8005f1e:	4d5c      	ldr	r5, [pc, #368]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8108 	beq.w	8006136 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f2c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005f2e:	f7fc f891 	bl	8002054 <HAL_GetTick>
 8005f32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f34:	e005      	b.n	8005f42 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f36:	f7fc f88d 	bl	8002054 <HAL_GetTick>
 8005f3a:	1b80      	subs	r0, r0, r6
 8005f3c:	2802      	cmp	r0, #2
 8005f3e:	f200 80cd 	bhi.w	80060dc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f42:	682b      	ldr	r3, [r5, #0]
 8005f44:	049f      	lsls	r7, r3, #18
 8005f46:	d5f6      	bpl.n	8005f36 <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	0759      	lsls	r1, r3, #29
 8005f4c:	d46e      	bmi.n	800602c <HAL_RCC_OscConfig+0x228>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f040 80aa 	bne.w	80060aa <HAL_RCC_OscConfig+0x2a6>
  return HAL_OK;
 8005f56:	2000      	movs	r0, #0
}
 8005f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5a:	4a4d      	ldr	r2, [pc, #308]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8005f5c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f5e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f60:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8005f64:	d122      	bne.n	8005fac <HAL_RCC_OscConfig+0x1a8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f66:	4b4a      	ldr	r3, [pc, #296]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f68:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	0759      	lsls	r1, r3, #29
 8005f6e:	d501      	bpl.n	8005f74 <HAL_RCC_OscConfig+0x170>
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	d044      	beq.n	8005ffe <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f74:	4d46      	ldr	r5, [pc, #280]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8005f76:	682b      	ldr	r3, [r5, #0]
 8005f78:	f023 0319 	bic.w	r3, r3, #25
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f80:	f7fc f868 	bl	8002054 <HAL_GetTick>
 8005f84:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f86:	e005      	b.n	8005f94 <HAL_RCC_OscConfig+0x190>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f88:	f7fc f864 	bl	8002054 <HAL_GetTick>
 8005f8c:	1b80      	subs	r0, r0, r6
 8005f8e:	2802      	cmp	r0, #2
 8005f90:	f200 80a4 	bhi.w	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	075b      	lsls	r3, r3, #29
 8005f98:	d5f6      	bpl.n	8005f88 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9a:	686b      	ldr	r3, [r5, #4]
 8005f9c:	6922      	ldr	r2, [r4, #16]
 8005f9e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005fa2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fa6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	e771      	b.n	8005e90 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fac:	2b18      	cmp	r3, #24
 8005fae:	f000 80f6 	beq.w	800619e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fb2:	4d37      	ldr	r5, [pc, #220]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fb4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fb6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	f000 80df 	beq.w	800617c <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005fbe:	f023 0319 	bic.w	r3, r3, #25
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005fc6:	f7fc f845 	bl	8002054 <HAL_GetTick>
 8005fca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fcc:	e005      	b.n	8005fda <HAL_RCC_OscConfig+0x1d6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fce:	f7fc f841 	bl	8002054 <HAL_GetTick>
 8005fd2:	1b80      	subs	r0, r0, r6
 8005fd4:	2802      	cmp	r0, #2
 8005fd6:	f200 8081 	bhi.w	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fda:	682b      	ldr	r3, [r5, #0]
 8005fdc:	075f      	lsls	r7, r3, #29
 8005fde:	d5f6      	bpl.n	8005fce <HAL_RCC_OscConfig+0x1ca>
 8005fe0:	e7db      	b.n	8005f9a <HAL_RCC_OscConfig+0x196>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fe2:	f001 0103 	and.w	r1, r1, #3
 8005fe6:	2902      	cmp	r1, #2
 8005fe8:	f47f af1f 	bne.w	8005e2a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	4a28      	ldr	r2, [pc, #160]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	0392      	lsls	r2, r2, #14
 8005ff2:	f57f af4b 	bpl.w	8005e8c <HAL_RCC_OscConfig+0x88>
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	f47f af47 	bne.w	8005e8c <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8005ffe:	2001      	movs	r0, #1
}
 8006000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006002:	f001 0103 	and.w	r1, r1, #3
 8006006:	2901      	cmp	r1, #1
 8006008:	f47f af4f 	bne.w	8005eaa <HAL_RCC_OscConfig+0xa6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800600c:	4a20      	ldr	r2, [pc, #128]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	05d2      	lsls	r2, r2, #23
 8006012:	d502      	bpl.n	800601a <HAL_RCC_OscConfig+0x216>
 8006014:	69e2      	ldr	r2, [r4, #28]
 8006016:	2a80      	cmp	r2, #128	@ 0x80
 8006018:	d1f1      	bne.n	8005ffe <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800601a:	491d      	ldr	r1, [pc, #116]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 800601c:	6a20      	ldr	r0, [r4, #32]
 800601e:	68ca      	ldr	r2, [r1, #12]
 8006020:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8006024:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8006028:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800602a:	e75c      	b.n	8005ee6 <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 800602c:	4d19      	ldr	r5, [pc, #100]	@ (8006094 <HAL_RCC_OscConfig+0x290>)
 800602e:	682b      	ldr	r3, [r5, #0]
 8006030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006034:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006036:	f7fc f80d 	bl	8002054 <HAL_GetTick>
 800603a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800603c:	e004      	b.n	8006048 <HAL_RCC_OscConfig+0x244>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603e:	f7fc f809 	bl	8002054 <HAL_GetTick>
 8006042:	1b80      	subs	r0, r0, r6
 8006044:	2864      	cmp	r0, #100	@ 0x64
 8006046:	d849      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	05da      	lsls	r2, r3, #23
 800604c:	d5f7      	bpl.n	800603e <HAL_RCC_OscConfig+0x23a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800604e:	68a3      	ldr	r3, [r4, #8]
 8006050:	2b01      	cmp	r3, #1
 8006052:	f000 8196 	beq.w	8006382 <HAL_RCC_OscConfig+0x57e>
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8176 	beq.w	8006348 <HAL_RCC_OscConfig+0x544>
 800605c:	2b05      	cmp	r3, #5
 800605e:	f000 8196 	beq.w	800638e <HAL_RCC_OscConfig+0x58a>
 8006062:	2b85      	cmp	r3, #133	@ 0x85
 8006064:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
 8006066:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006068:	f000 819f 	beq.w	80063aa <HAL_RCC_OscConfig+0x5a6>
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	671a      	str	r2, [r3, #112]	@ 0x70
 8006072:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006074:	f022 0204 	bic.w	r2, r2, #4
 8006078:	671a      	str	r2, [r3, #112]	@ 0x70
 800607a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800607c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006080:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8006082:	f7fb ffe7 	bl	8002054 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006086:	4e02      	ldr	r6, [pc, #8]	@ (8006090 <HAL_RCC_OscConfig+0x28c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006088:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800608c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x29e>
 8006090:	58024400 	.word	0x58024400
 8006094:	58024800 	.word	0x58024800
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006098:	f7fb ffdc 	bl	8002054 <HAL_GetTick>
 800609c:	1b40      	subs	r0, r0, r5
 800609e:	42b8      	cmp	r0, r7
 80060a0:	d81c      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80060a4:	079b      	lsls	r3, r3, #30
 80060a6:	d5f7      	bpl.n	8006098 <HAL_RCC_OscConfig+0x294>
 80060a8:	e751      	b.n	8005f4e <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060aa:	4da4      	ldr	r5, [pc, #656]	@ (800633c <HAL_RCC_OscConfig+0x538>)
 80060ac:	692a      	ldr	r2, [r5, #16]
 80060ae:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80060b2:	2a18      	cmp	r2, #24
 80060b4:	f000 80e7 	beq.w	8006286 <HAL_RCC_OscConfig+0x482>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060c0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c2:	d070      	beq.n	80061a6 <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 80060c4:	f7fb ffc6 	bl	8002054 <HAL_GetTick>
 80060c8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	019b      	lsls	r3, r3, #6
 80060ce:	f57f af42 	bpl.w	8005f56 <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d2:	f7fb ffbf 	bl	8002054 <HAL_GetTick>
 80060d6:	1b00      	subs	r0, r0, r4
 80060d8:	2802      	cmp	r0, #2
 80060da:	d9f6      	bls.n	80060ca <HAL_RCC_OscConfig+0x2c6>
            return HAL_TIMEOUT;
 80060dc:	2003      	movs	r0, #3
}
 80060de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060e0:	4d96      	ldr	r5, [pc, #600]	@ (800633c <HAL_RCC_OscConfig+0x538>)
 80060e2:	682b      	ldr	r3, [r5, #0]
 80060e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e8:	602b      	str	r3, [r5, #0]
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	682b      	ldr	r3, [r5, #0]
 80060f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80060fa:	f7fb ffab 	bl	8002054 <HAL_GetTick>
 80060fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006100:	e004      	b.n	800610c <HAL_RCC_OscConfig+0x308>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006102:	f7fb ffa7 	bl	8002054 <HAL_GetTick>
 8006106:	1b80      	subs	r0, r0, r6
 8006108:	2864      	cmp	r0, #100	@ 0x64
 800610a:	d8e7      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	039f      	lsls	r7, r3, #14
 8006110:	d4f7      	bmi.n	8006102 <HAL_RCC_OscConfig+0x2fe>
 8006112:	e6ba      	b.n	8005e8a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8006114:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800611c:	f7fb ff9a 	bl	8002054 <HAL_GetTick>
 8006120:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006122:	e004      	b.n	800612e <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006124:	f7fb ff96 	bl	8002054 <HAL_GetTick>
 8006128:	1b80      	subs	r0, r0, r6
 800612a:	2802      	cmp	r0, #2
 800612c:	d8d6      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800612e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006130:	0799      	lsls	r1, r3, #30
 8006132:	d4f7      	bmi.n	8006124 <HAL_RCC_OscConfig+0x320>
 8006134:	e6ef      	b.n	8005f16 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 8006136:	682b      	ldr	r3, [r5, #0]
 8006138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800613c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800613e:	f7fb ff89 	bl	8002054 <HAL_GetTick>
 8006142:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006144:	e004      	b.n	8006150 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006146:	f7fb ff85 	bl	8002054 <HAL_GetTick>
 800614a:	1b80      	subs	r0, r0, r6
 800614c:	2802      	cmp	r0, #2
 800614e:	d8c5      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	0498      	lsls	r0, r3, #18
 8006154:	d4f7      	bmi.n	8006146 <HAL_RCC_OscConfig+0x342>
 8006156:	e6f7      	b.n	8005f48 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800615e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006160:	f7fb ff78 	bl	8002054 <HAL_GetTick>
 8006164:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006166:	e004      	b.n	8006172 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006168:	f7fb ff74 	bl	8002054 <HAL_GetTick>
 800616c:	1b80      	subs	r0, r0, r6
 800616e:	2802      	cmp	r0, #2
 8006170:	d8b4      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	05df      	lsls	r7, r3, #23
 8006176:	d4f7      	bmi.n	8006168 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	e6b4      	b.n	8005ee6 <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006182:	f7fb ff67 	bl	8002054 <HAL_GetTick>
 8006186:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006188:	e004      	b.n	8006194 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618a:	f7fb ff63 	bl	8002054 <HAL_GetTick>
 800618e:	1b80      	subs	r0, r0, r6
 8006190:	2802      	cmp	r0, #2
 8006192:	d8a3      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	0758      	lsls	r0, r3, #29
 8006198:	d4f7      	bmi.n	800618a <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	e678      	b.n	8005e90 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800619e:	0790      	lsls	r0, r2, #30
 80061a0:	f47f af07 	bne.w	8005fb2 <HAL_RCC_OscConfig+0x1ae>
 80061a4:	e6df      	b.n	8005f66 <HAL_RCC_OscConfig+0x162>
        tickstart = HAL_GetTick();
 80061a6:	f7fb ff55 	bl	8002054 <HAL_GetTick>
 80061aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ac:	e004      	b.n	80061b8 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fb ff51 	bl	8002054 <HAL_GetTick>
 80061b2:	1b80      	subs	r0, r0, r6
 80061b4:	2802      	cmp	r0, #2
 80061b6:	d891      	bhi.n	80060dc <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	0199      	lsls	r1, r3, #6
 80061bc:	d4f7      	bmi.n	80061ae <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061be:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80061c0:	4b5f      	ldr	r3, [pc, #380]	@ (8006340 <HAL_RCC_OscConfig+0x53c>)
 80061c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80061c4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061c6:	495f      	ldr	r1, [pc, #380]	@ (8006344 <HAL_RCC_OscConfig+0x540>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061c8:	4e5c      	ldr	r6, [pc, #368]	@ (800633c <HAL_RCC_OscConfig+0x538>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061ca:	4313      	orrs	r3, r2
 80061cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80061ce:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80061d2:	62ab      	str	r3, [r5, #40]	@ 0x28
 80061d4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80061d8:	3b01      	subs	r3, #1
 80061da:	3a01      	subs	r2, #1
 80061dc:	025b      	lsls	r3, r3, #9
 80061de:	0412      	lsls	r2, r2, #16
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80061e6:	4313      	orrs	r3, r2
 80061e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80061ea:	3a01      	subs	r2, #1
 80061ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f0:	4313      	orrs	r3, r2
 80061f2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80061f4:	3a01      	subs	r2, #1
 80061f6:	0612      	lsls	r2, r2, #24
 80061f8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80061fc:	4313      	orrs	r3, r2
 80061fe:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8006200:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006208:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800620a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800620c:	4011      	ands	r1, r2
 800620e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006212:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006214:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006216:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006218:	f023 030c 	bic.w	r3, r3, #12
 800621c:	4313      	orrs	r3, r2
 800621e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006220:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006222:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006224:	f023 0302 	bic.w	r3, r3, #2
 8006228:	4313      	orrs	r3, r2
 800622a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800622c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800623c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800623e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006242:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8006244:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006252:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006254:	f7fb fefe 	bl	8002054 <HAL_GetTick>
 8006258:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800625a:	6833      	ldr	r3, [r6, #0]
 800625c:	019a      	lsls	r2, r3, #6
 800625e:	f53f ae7a 	bmi.w	8005f56 <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006262:	f7fb fef7 	bl	8002054 <HAL_GetTick>
 8006266:	1b00      	subs	r0, r0, r4
 8006268:	2802      	cmp	r0, #2
 800626a:	d9f6      	bls.n	800625a <HAL_RCC_OscConfig+0x456>
 800626c:	e736      	b.n	80060dc <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800626e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006282:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006284:	e5f3      	b.n	8005e6e <HAL_RCC_OscConfig+0x6a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006286:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006288:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800628a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800628c:	f43f aeb7 	beq.w	8005ffe <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006290:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006294:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006296:	428b      	cmp	r3, r1
 8006298:	f47f aeb1 	bne.w	8005ffe <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800629c:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80062a2:	429a      	cmp	r2, r3
 80062a4:	f47f aeab 	bne.w	8005ffe <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80062aa:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80062ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	f47f aea4 	bne.w	8005ffe <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062b8:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80062bc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062be:	429a      	cmp	r2, r3
 80062c0:	f47f ae9d 	bne.w	8005ffe <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80062c6:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80062ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	f47f ae96 	bne.w	8005ffe <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80062d4:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80062d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062da:	4298      	cmp	r0, r3
 80062dc:	f47f ae8f 	bne.w	8005ffe <HAL_RCC_OscConfig+0x1fa>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062e0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062e2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062e4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062e8:	429a      	cmp	r2, r3
 80062ea:	f43f ae34 	beq.w	8005f56 <HAL_RCC_OscConfig+0x152>
          __HAL_RCC_PLLFRACN_DISABLE();
 80062ee:	4a13      	ldr	r2, [pc, #76]	@ (800633c <HAL_RCC_OscConfig+0x538>)
 80062f0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80062f8:	f7fb feac 	bl	8002054 <HAL_GetTick>
 80062fc:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062fe:	f7fb fea9 	bl	8002054 <HAL_GetTick>
 8006302:	42a8      	cmp	r0, r5
 8006304:	d0fb      	beq.n	80062fe <HAL_RCC_OscConfig+0x4fa>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006306:	4a0d      	ldr	r2, [pc, #52]	@ (800633c <HAL_RCC_OscConfig+0x538>)
 8006308:	4b0e      	ldr	r3, [pc, #56]	@ (8006344 <HAL_RCC_OscConfig+0x540>)
 800630a:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800630c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800630e:	4003      	ands	r3, r0
 8006310:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006314:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8006316:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800631e:	e61a      	b.n	8005f56 <HAL_RCC_OscConfig+0x152>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006320:	4b06      	ldr	r3, [pc, #24]	@ (800633c <HAL_RCC_OscConfig+0x538>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006338:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800633a:	e598      	b.n	8005e6e <HAL_RCC_OscConfig+0x6a>
 800633c:	58024400 	.word	0x58024400
 8006340:	fffffc0c 	.word	0xfffffc0c
 8006344:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006348:	4d1f      	ldr	r5, [pc, #124]	@ (80063c8 <HAL_RCC_OscConfig+0x5c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800634a:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	672b      	str	r3, [r5, #112]	@ 0x70
 8006356:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800635c:	672b      	str	r3, [r5, #112]	@ 0x70
 800635e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006360:	f023 0304 	bic.w	r3, r3, #4
 8006364:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8006366:	f7fb fe75 	bl	8002054 <HAL_GetTick>
 800636a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800636c:	e005      	b.n	800637a <HAL_RCC_OscConfig+0x576>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fb fe71 	bl	8002054 <HAL_GetTick>
 8006372:	1b80      	subs	r0, r0, r6
 8006374:	42b8      	cmp	r0, r7
 8006376:	f63f aeb1 	bhi.w	80060dc <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800637a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800637c:	0798      	lsls	r0, r3, #30
 800637e:	d4f6      	bmi.n	800636e <HAL_RCC_OscConfig+0x56a>
 8006380:	e5e5      	b.n	8005f4e <HAL_RCC_OscConfig+0x14a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006382:	4a11      	ldr	r2, [pc, #68]	@ (80063c8 <HAL_RCC_OscConfig+0x5c4>)
 8006384:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800638c:	e679      	b.n	8006082 <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638e:	4b0e      	ldr	r3, [pc, #56]	@ (80063c8 <HAL_RCC_OscConfig+0x5c4>)
 8006390:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006392:	f042 0204 	orr.w	r2, r2, #4
 8006396:	671a      	str	r2, [r3, #112]	@ 0x70
 8006398:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800639a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800639e:	671a      	str	r2, [r3, #112]	@ 0x70
 80063a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063a8:	e66b      	b.n	8006082 <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063aa:	f042 0204 	orr.w	r2, r2, #4
 80063ae:	671a      	str	r2, [r3, #112]	@ 0x70
 80063b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80063b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063c0:	e65f      	b.n	8006082 <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 80063c2:	2001      	movs	r0, #1
}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	58024400 	.word	0x58024400

080063cc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063cc:	4a3f      	ldr	r2, [pc, #252]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x100>)
 80063ce:	6913      	ldr	r3, [r2, #16]
 80063d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d004      	beq.n	80063e2 <HAL_RCC_GetSysClockFreq+0x16>
 80063d8:	2b18      	cmp	r3, #24
 80063da:	d00d      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x2c>
 80063dc:	b11b      	cbz	r3, 80063e6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80063de:	483c      	ldr	r0, [pc, #240]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80063e0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063e2:	483c      	ldr	r0, [pc, #240]	@ (80064d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80063e4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	0699      	lsls	r1, r3, #26
 80063ea:	d548      	bpl.n	800647e <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063ec:	6813      	ldr	r3, [r2, #0]
 80063ee:	483a      	ldr	r0, [pc, #232]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80063f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80063f4:	40d8      	lsrs	r0, r3
 80063f6:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 80063fa:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80063fc:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063fe:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8006400:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006404:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006406:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800640a:	d036      	beq.n	800647a <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800640c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006410:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006414:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006418:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800641c:	fb05 f303 	mul.w	r3, r5, r3
 8006420:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006426:	ee06 3a90 	vmov	s13, r3
 800642a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800642e:	d002      	beq.n	8006436 <HAL_RCC_GetSysClockFreq+0x6a>
 8006430:	2902      	cmp	r1, #2
 8006432:	d026      	beq.n	8006482 <HAL_RCC_GetSysClockFreq+0xb6>
 8006434:	b341      	cbz	r1, 8006488 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006436:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80064dc <HAL_RCC_GetSysClockFreq+0x110>
 800643a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800643e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006444:	ee07 3a10 	vmov	s14, r3
 8006448:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800644c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006450:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006454:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006458:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800645c:	4b1b      	ldr	r3, [pc, #108]	@ (80064cc <HAL_RCC_GetSysClockFreq+0x100>)
 800645e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006460:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006464:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800646e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006476:	ee17 0a90 	vmov	r0, s15
}
 800647a:	bc30      	pop	{r4, r5}
 800647c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800647e:	4816      	ldr	r0, [pc, #88]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8006480:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006482:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80064e0 <HAL_RCC_GetSysClockFreq+0x114>
 8006486:	e7d8      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	069b      	lsls	r3, r3, #26
 800648c:	d51a      	bpl.n	80064c4 <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800648e:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006490:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006494:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006496:	4910      	ldr	r1, [pc, #64]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006498:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800649c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064a0:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064a2:	ee07 3a10 	vmov	s14, r3
 80064a6:	ee06 1a10 	vmov	s12, r1
 80064aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064ae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80064b2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80064b6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80064ba:	ee76 7aa5 	vadd.f32	s15, s13, s11
 80064be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064c2:	e7cb      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80064e4 <HAL_RCC_GetSysClockFreq+0x118>
 80064c8:	e7b7      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x6e>
 80064ca:	bf00      	nop
 80064cc:	58024400 	.word	0x58024400
 80064d0:	003d0900 	.word	0x003d0900
 80064d4:	017d7840 	.word	0x017d7840
 80064d8:	03d09000 	.word	0x03d09000
 80064dc:	4a742400 	.word	0x4a742400
 80064e0:	4bbebc20 	.word	0x4bbebc20
 80064e4:	4c742400 	.word	0x4c742400

080064e8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f000 810e 	beq.w	800670a <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064ee:	4a8d      	ldr	r2, [pc, #564]	@ (8006724 <HAL_RCC_ClockConfig+0x23c>)
 80064f0:	6813      	ldr	r3, [r2, #0]
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	428b      	cmp	r3, r1
{
 80064f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fc:	4604      	mov	r4, r0
 80064fe:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006500:	d20c      	bcs.n	800651c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	f023 030f 	bic.w	r3, r3, #15
 8006508:	430b      	orrs	r3, r1
 800650a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800650c:	6813      	ldr	r3, [r2, #0]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	428b      	cmp	r3, r1
 8006514:	d002      	beq.n	800651c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006516:	2001      	movs	r0, #1
}
 8006518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	0758      	lsls	r0, r3, #29
 8006520:	d50b      	bpl.n	800653a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006522:	4981      	ldr	r1, [pc, #516]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 8006524:	6920      	ldr	r0, [r4, #16]
 8006526:	698a      	ldr	r2, [r1, #24]
 8006528:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800652c:	4290      	cmp	r0, r2
 800652e:	d904      	bls.n	800653a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006530:	698a      	ldr	r2, [r1, #24]
 8006532:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006536:	4302      	orrs	r2, r0
 8006538:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653a:	0719      	lsls	r1, r3, #28
 800653c:	d50b      	bpl.n	8006556 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800653e:	497a      	ldr	r1, [pc, #488]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 8006540:	6960      	ldr	r0, [r4, #20]
 8006542:	69ca      	ldr	r2, [r1, #28]
 8006544:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006548:	4290      	cmp	r0, r2
 800654a:	d904      	bls.n	8006556 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800654c:	69ca      	ldr	r2, [r1, #28]
 800654e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006552:	4302      	orrs	r2, r0
 8006554:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006556:	06da      	lsls	r2, r3, #27
 8006558:	d50b      	bpl.n	8006572 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800655a:	4973      	ldr	r1, [pc, #460]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 800655c:	69a0      	ldr	r0, [r4, #24]
 800655e:	69ca      	ldr	r2, [r1, #28]
 8006560:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006564:	4290      	cmp	r0, r2
 8006566:	d904      	bls.n	8006572 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006568:	69ca      	ldr	r2, [r1, #28]
 800656a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800656e:	4302      	orrs	r2, r0
 8006570:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006572:	069f      	lsls	r7, r3, #26
 8006574:	d50b      	bpl.n	800658e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006576:	496c      	ldr	r1, [pc, #432]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 8006578:	69e0      	ldr	r0, [r4, #28]
 800657a:	6a0a      	ldr	r2, [r1, #32]
 800657c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006580:	4290      	cmp	r0, r2
 8006582:	d904      	bls.n	800658e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006584:	6a0a      	ldr	r2, [r1, #32]
 8006586:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800658a:	4302      	orrs	r2, r0
 800658c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800658e:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006590:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006594:	f140 80ab 	bpl.w	80066ee <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006598:	4e63      	ldr	r6, [pc, #396]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	69b1      	ldr	r1, [r6, #24]
 800659e:	f001 010f 	and.w	r1, r1, #15
 80065a2:	4288      	cmp	r0, r1
 80065a4:	d904      	bls.n	80065b0 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a6:	69b1      	ldr	r1, [r6, #24]
 80065a8:	f021 010f 	bic.w	r1, r1, #15
 80065ac:	4301      	orrs	r1, r0
 80065ae:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d030      	beq.n	8006616 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80065b4:	4a5c      	ldr	r2, [pc, #368]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 80065b6:	68a1      	ldr	r1, [r4, #8]
 80065b8:	6993      	ldr	r3, [r2, #24]
 80065ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80065be:	430b      	orrs	r3, r1
 80065c0:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065c4:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c6:	2902      	cmp	r1, #2
 80065c8:	f000 80a1 	beq.w	800670e <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065cc:	2903      	cmp	r1, #3
 80065ce:	f000 8098 	beq.w	8006702 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065d2:	2901      	cmp	r1, #1
 80065d4:	f000 80a1 	beq.w	800671a <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065d8:	075f      	lsls	r7, r3, #29
 80065da:	d59c      	bpl.n	8006516 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065dc:	4e52      	ldr	r6, [pc, #328]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065de:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065e2:	6933      	ldr	r3, [r6, #16]
 80065e4:	f023 0307 	bic.w	r3, r3, #7
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80065ec:	f7fb fd32 	bl	8002054 <HAL_GetTick>
 80065f0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f2:	e005      	b.n	8006600 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f4:	f7fb fd2e 	bl	8002054 <HAL_GetTick>
 80065f8:	1bc0      	subs	r0, r0, r7
 80065fa:	4540      	cmp	r0, r8
 80065fc:	f200 808b 	bhi.w	8006716 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006600:	6933      	ldr	r3, [r6, #16]
 8006602:	6862      	ldr	r2, [r4, #4]
 8006604:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006608:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800660c:	d1f2      	bne.n	80065f4 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	079e      	lsls	r6, r3, #30
 8006612:	d506      	bpl.n	8006622 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006614:	68e0      	ldr	r0, [r4, #12]
 8006616:	4944      	ldr	r1, [pc, #272]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 8006618:	698a      	ldr	r2, [r1, #24]
 800661a:	f002 020f 	and.w	r2, r2, #15
 800661e:	4282      	cmp	r2, r0
 8006620:	d869      	bhi.n	80066f6 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006622:	4940      	ldr	r1, [pc, #256]	@ (8006724 <HAL_RCC_ClockConfig+0x23c>)
 8006624:	680a      	ldr	r2, [r1, #0]
 8006626:	f002 020f 	and.w	r2, r2, #15
 800662a:	42aa      	cmp	r2, r5
 800662c:	d90a      	bls.n	8006644 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	680a      	ldr	r2, [r1, #0]
 8006630:	f022 020f 	bic.w	r2, r2, #15
 8006634:	432a      	orrs	r2, r5
 8006636:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006638:	680a      	ldr	r2, [r1, #0]
 800663a:	f002 020f 	and.w	r2, r2, #15
 800663e:	42aa      	cmp	r2, r5
 8006640:	f47f af69 	bne.w	8006516 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006644:	0758      	lsls	r0, r3, #29
 8006646:	d50b      	bpl.n	8006660 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006648:	4937      	ldr	r1, [pc, #220]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 800664a:	6920      	ldr	r0, [r4, #16]
 800664c:	698a      	ldr	r2, [r1, #24]
 800664e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006652:	4290      	cmp	r0, r2
 8006654:	d204      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006656:	698a      	ldr	r2, [r1, #24]
 8006658:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800665c:	4302      	orrs	r2, r0
 800665e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006660:	0719      	lsls	r1, r3, #28
 8006662:	d50b      	bpl.n	800667c <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006664:	4930      	ldr	r1, [pc, #192]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 8006666:	6960      	ldr	r0, [r4, #20]
 8006668:	69ca      	ldr	r2, [r1, #28]
 800666a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800666e:	4290      	cmp	r0, r2
 8006670:	d204      	bcs.n	800667c <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006672:	69ca      	ldr	r2, [r1, #28]
 8006674:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006678:	4302      	orrs	r2, r0
 800667a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667c:	06da      	lsls	r2, r3, #27
 800667e:	d50b      	bpl.n	8006698 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006680:	4929      	ldr	r1, [pc, #164]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 8006682:	69a0      	ldr	r0, [r4, #24]
 8006684:	69ca      	ldr	r2, [r1, #28]
 8006686:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800668a:	4290      	cmp	r0, r2
 800668c:	d204      	bcs.n	8006698 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800668e:	69ca      	ldr	r2, [r1, #28]
 8006690:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006694:	4302      	orrs	r2, r0
 8006696:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006698:	069b      	lsls	r3, r3, #26
 800669a:	d50b      	bpl.n	80066b4 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800669c:	4a22      	ldr	r2, [pc, #136]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 800669e:	69e1      	ldr	r1, [r4, #28]
 80066a0:	6a13      	ldr	r3, [r2, #32]
 80066a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066a6:	4299      	cmp	r1, r3
 80066a8:	d204      	bcs.n	80066b4 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066aa:	6a13      	ldr	r3, [r2, #32]
 80066ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b0:	430b      	orrs	r3, r1
 80066b2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80066b4:	f7ff fe8a 	bl	80063cc <HAL_RCC_GetSysClockFreq>
 80066b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006728 <HAL_RCC_ClockConfig+0x240>)
 80066ba:	4603      	mov	r3, r0
 80066bc:	481b      	ldr	r0, [pc, #108]	@ (800672c <HAL_RCC_ClockConfig+0x244>)
 80066be:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80066c0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80066c2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80066c6:	4d1a      	ldr	r5, [pc, #104]	@ (8006730 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80066c8:	f002 020f 	and.w	r2, r2, #15
 80066cc:	4c19      	ldr	r4, [pc, #100]	@ (8006734 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80066ce:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80066d0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80066d2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80066d6:	4818      	ldr	r0, [pc, #96]	@ (8006738 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80066d8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80066dc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80066de:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80066e0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80066e2:	40d3      	lsrs	r3, r2
 80066e4:	6023      	str	r3, [r4, #0]
}
 80066e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80066ea:	f7fb bc51 	b.w	8001f90 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ee:	2a00      	cmp	r2, #0
 80066f0:	f47f af60 	bne.w	80065b4 <HAL_RCC_ClockConfig+0xcc>
 80066f4:	e795      	b.n	8006622 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f6:	698a      	ldr	r2, [r1, #24]
 80066f8:	f022 020f 	bic.w	r2, r2, #15
 80066fc:	4302      	orrs	r2, r0
 80066fe:	618a      	str	r2, [r1, #24]
 8006700:	e78f      	b.n	8006622 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006702:	019a      	lsls	r2, r3, #6
 8006704:	f53f af6a 	bmi.w	80065dc <HAL_RCC_ClockConfig+0xf4>
 8006708:	e705      	b.n	8006516 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800670a:	2001      	movs	r0, #1
}
 800670c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800670e:	0398      	lsls	r0, r3, #14
 8006710:	f53f af64 	bmi.w	80065dc <HAL_RCC_ClockConfig+0xf4>
 8006714:	e6ff      	b.n	8006516 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8006716:	2003      	movs	r0, #3
 8006718:	e6fe      	b.n	8006518 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800671a:	05db      	lsls	r3, r3, #23
 800671c:	f53f af5e 	bmi.w	80065dc <HAL_RCC_ClockConfig+0xf4>
 8006720:	e6f9      	b.n	8006516 <HAL_RCC_ClockConfig+0x2e>
 8006722:	bf00      	nop
 8006724:	52002000 	.word	0x52002000
 8006728:	58024400 	.word	0x58024400
 800672c:	0800d0d8 	.word	0x0800d0d8
 8006730:	24000008 	.word	0x24000008
 8006734:	24000004 	.word	0x24000004
 8006738:	24000010 	.word	0x24000010

0800673c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800673c:	4a18      	ldr	r2, [pc, #96]	@ (80067a0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800673e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006740:	6913      	ldr	r3, [r2, #16]
 8006742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006746:	2b10      	cmp	r3, #16
 8006748:	d019      	beq.n	800677e <HAL_RCC_GetHCLKFreq+0x42>
 800674a:	2b18      	cmp	r3, #24
 800674c:	d022      	beq.n	8006794 <HAL_RCC_GetHCLKFreq+0x58>
 800674e:	b1c3      	cbz	r3, 8006782 <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8006750:	4b14      	ldr	r3, [pc, #80]	@ (80067a4 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006752:	4913      	ldr	r1, [pc, #76]	@ (80067a0 <HAL_RCC_GetHCLKFreq+0x64>)
 8006754:	4814      	ldr	r0, [pc, #80]	@ (80067a8 <HAL_RCC_GetHCLKFreq+0x6c>)
 8006756:	698a      	ldr	r2, [r1, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006758:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800675a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800675e:	4c13      	ldr	r4, [pc, #76]	@ (80067ac <HAL_RCC_GetHCLKFreq+0x70>)
 8006760:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006764:	4d12      	ldr	r5, [pc, #72]	@ (80067b0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006766:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006768:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800676a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800676e:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006772:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006774:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8006778:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800677a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800677c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800677e:	4b0d      	ldr	r3, [pc, #52]	@ (80067b4 <HAL_RCC_GetHCLKFreq+0x78>)
 8006780:	e7e7      	b.n	8006752 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	069b      	lsls	r3, r3, #26
 8006786:	d509      	bpl.n	800679c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800678c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006790:	40d3      	lsrs	r3, r2
 8006792:	e7de      	b.n	8006752 <HAL_RCC_GetHCLKFreq+0x16>
 8006794:	f7ff fac4 	bl	8005d20 <HAL_RCC_GetSysClockFreq.part.0>
 8006798:	4603      	mov	r3, r0
 800679a:	e7da      	b.n	8006752 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800679c:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800679e:	e7d8      	b.n	8006752 <HAL_RCC_GetHCLKFreq+0x16>
 80067a0:	58024400 	.word	0x58024400
 80067a4:	003d0900 	.word	0x003d0900
 80067a8:	0800d0d8 	.word	0x0800d0d8
 80067ac:	24000004 	.word	0x24000004
 80067b0:	24000008 	.word	0x24000008
 80067b4:	017d7840 	.word	0x017d7840
 80067b8:	03d09000 	.word	0x03d09000

080067bc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006830 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067be:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067c0:	6913      	ldr	r3, [r2, #16]
 80067c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067c6:	2b10      	cmp	r3, #16
 80067c8:	d020      	beq.n	800680c <HAL_RCC_GetPCLK1Freq+0x50>
 80067ca:	2b18      	cmp	r3, #24
 80067cc:	d029      	beq.n	8006822 <HAL_RCC_GetPCLK1Freq+0x66>
 80067ce:	b1fb      	cbz	r3, 8006810 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 80067d0:	4b18      	ldr	r3, [pc, #96]	@ (8006834 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80067d2:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <HAL_RCC_GetPCLK1Freq+0x74>)
 80067d4:	4918      	ldr	r1, [pc, #96]	@ (8006838 <HAL_RCC_GetPCLK1Freq+0x7c>)
 80067d6:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80067d8:	4d18      	ldr	r5, [pc, #96]	@ (800683c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80067da:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067de:	4c18      	ldr	r4, [pc, #96]	@ (8006840 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80067e0:	5c08      	ldrb	r0, [r1, r0]
 80067e2:	f000 001f 	and.w	r0, r0, #31
 80067e6:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067e8:	6990      	ldr	r0, [r2, #24]
 80067ea:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80067ee:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067f0:	5c08      	ldrb	r0, [r1, r0]
 80067f2:	f000 001f 	and.w	r0, r0, #31
 80067f6:	40c3      	lsrs	r3, r0
 80067f8:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80067fa:	69d2      	ldr	r2, [r2, #28]
 80067fc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006800:	5c88      	ldrb	r0, [r1, r2]
 8006802:	f000 001f 	and.w	r0, r0, #31
#endif
}
 8006806:	fa23 f000 	lsr.w	r0, r3, r0
 800680a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800680c:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <HAL_RCC_GetPCLK1Freq+0x88>)
 800680e:	e7e0      	b.n	80067d2 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006810:	6813      	ldr	r3, [r2, #0]
 8006812:	069b      	lsls	r3, r3, #26
 8006814:	d509      	bpl.n	800682a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	4b0b      	ldr	r3, [pc, #44]	@ (8006848 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800681a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800681e:	40d3      	lsrs	r3, r2
 8006820:	e7d7      	b.n	80067d2 <HAL_RCC_GetPCLK1Freq+0x16>
 8006822:	f7ff fa7d 	bl	8005d20 <HAL_RCC_GetSysClockFreq.part.0>
 8006826:	4603      	mov	r3, r0
 8006828:	e7d3      	b.n	80067d2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800682a:	4b07      	ldr	r3, [pc, #28]	@ (8006848 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800682c:	e7d1      	b.n	80067d2 <HAL_RCC_GetPCLK1Freq+0x16>
 800682e:	bf00      	nop
 8006830:	58024400 	.word	0x58024400
 8006834:	003d0900 	.word	0x003d0900
 8006838:	0800d0d8 	.word	0x0800d0d8
 800683c:	24000008 	.word	0x24000008
 8006840:	24000004 	.word	0x24000004
 8006844:	017d7840 	.word	0x017d7840
 8006848:	03d09000 	.word	0x03d09000

0800684c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800684e:	4c36      	ldr	r4, [pc, #216]	@ (8006928 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800685a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800685c:	f7fb fbfa 	bl	8002054 <HAL_GetTick>
 8006860:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006862:	e004      	b.n	800686e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006864:	f7fb fbf6 	bl	8002054 <HAL_GetTick>
 8006868:	1b40      	subs	r0, r0, r5
 800686a:	2802      	cmp	r0, #2
 800686c:	d856      	bhi.n	800691c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	011a      	lsls	r2, r3, #4
 8006872:	d4f7      	bmi.n	8006864 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006874:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006876:	6832      	ldr	r2, [r6, #0]
 8006878:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800687c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006880:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006882:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006886:	3b01      	subs	r3, #1
 8006888:	3a01      	subs	r2, #1
 800688a:	025b      	lsls	r3, r3, #9
 800688c:	0412      	lsls	r2, r2, #16
 800688e:	b29b      	uxth	r3, r3
 8006890:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006894:	4313      	orrs	r3, r2
 8006896:	6872      	ldr	r2, [r6, #4]
 8006898:	3a01      	subs	r2, #1
 800689a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800689e:	4313      	orrs	r3, r2
 80068a0:	6932      	ldr	r2, [r6, #16]
 80068a2:	3a01      	subs	r2, #1
 80068a4:	0612      	lsls	r2, r2, #24
 80068a6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80068aa:	4313      	orrs	r3, r2
 80068ac:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80068b0:	6972      	ldr	r2, [r6, #20]
 80068b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068b6:	4313      	orrs	r3, r2
 80068b8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80068bc:	69b3      	ldr	r3, [r6, #24]
 80068be:	f022 0220 	bic.w	r2, r2, #32
 80068c2:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068c4:	4b19      	ldr	r3, [pc, #100]	@ (800692c <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80068c6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068c8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80068ca:	f022 0210 	bic.w	r2, r2, #16
 80068ce:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068d0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80068d2:	69f2      	ldr	r2, [r6, #28]
 80068d4:	400b      	ands	r3, r1
 80068d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80068da:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80068dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80068de:	f043 0310 	orr.w	r3, r3, #16
 80068e2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80068e6:	b1df      	cbz	r7, 8006920 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068e8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068ea:	bf0c      	ite	eq
 80068ec:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068f0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80068f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006928 <RCCEx_PLL2_Config.part.0+0xdc>)
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006900:	f7fb fba8 	bl	8002054 <HAL_GetTick>
 8006904:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006906:	e004      	b.n	8006912 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006908:	f7fb fba4 	bl	8002054 <HAL_GetTick>
 800690c:	1b40      	subs	r0, r0, r5
 800690e:	2802      	cmp	r0, #2
 8006910:	d804      	bhi.n	800691c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	d5f7      	bpl.n	8006908 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8006918:	2000      	movs	r0, #0
}
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800691c:	2003      	movs	r0, #3
}
 800691e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006920:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006926:	e7e6      	b.n	80068f6 <RCCEx_PLL2_Config.part.0+0xaa>
 8006928:	58024400 	.word	0x58024400
 800692c:	ffff0007 	.word	0xffff0007

08006930 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006932:	4c36      	ldr	r4, [pc, #216]	@ (8006a0c <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006934:	4606      	mov	r6, r0
 8006936:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800693e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006940:	f7fb fb88 	bl	8002054 <HAL_GetTick>
 8006944:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006946:	e004      	b.n	8006952 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006948:	f7fb fb84 	bl	8002054 <HAL_GetTick>
 800694c:	1b40      	subs	r0, r0, r5
 800694e:	2802      	cmp	r0, #2
 8006950:	d856      	bhi.n	8006a00 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	009a      	lsls	r2, r3, #2
 8006956:	d4f7      	bmi.n	8006948 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006958:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800695a:	6832      	ldr	r2, [r6, #0]
 800695c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006960:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006964:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006966:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800696a:	3b01      	subs	r3, #1
 800696c:	3a01      	subs	r2, #1
 800696e:	025b      	lsls	r3, r3, #9
 8006970:	0412      	lsls	r2, r2, #16
 8006972:	b29b      	uxth	r3, r3
 8006974:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006978:	4313      	orrs	r3, r2
 800697a:	6872      	ldr	r2, [r6, #4]
 800697c:	3a01      	subs	r2, #1
 800697e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006982:	4313      	orrs	r3, r2
 8006984:	6932      	ldr	r2, [r6, #16]
 8006986:	3a01      	subs	r2, #1
 8006988:	0612      	lsls	r2, r2, #24
 800698a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800698e:	4313      	orrs	r3, r2
 8006990:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006992:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006994:	6972      	ldr	r2, [r6, #20]
 8006996:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800699a:	4313      	orrs	r3, r2
 800699c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800699e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80069a0:	69b3      	ldr	r3, [r6, #24]
 80069a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80069a6:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069a8:	4b19      	ldr	r3, [pc, #100]	@ (8006a10 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069aa:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80069ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80069b2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80069b6:	69f2      	ldr	r2, [r6, #28]
 80069b8:	400b      	ands	r3, r1
 80069ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80069be:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80069c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069c6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80069ca:	b1df      	cbz	r7, 8006a04 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069cc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069ce:	bf0c      	ite	eq
 80069d0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069d4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80069d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069da:	4c0c      	ldr	r4, [pc, #48]	@ (8006a0c <RCCEx_PLL3_Config.part.0+0xdc>)
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e4:	f7fb fb36 	bl	8002054 <HAL_GetTick>
 80069e8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069ea:	e004      	b.n	80069f6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069ec:	f7fb fb32 	bl	8002054 <HAL_GetTick>
 80069f0:	1b40      	subs	r0, r0, r5
 80069f2:	2802      	cmp	r0, #2
 80069f4:	d804      	bhi.n	8006a00 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	d5f7      	bpl.n	80069ec <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80069fc:	2000      	movs	r0, #0
}
 80069fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006a00:	2003      	movs	r0, #3
}
 8006a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a0a:	e7e6      	b.n	80069da <RCCEx_PLL3_Config.part.0+0xaa>
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	ffff0007 	.word	0xffff0007

08006a14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a18:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8006a1c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a1e:	0118      	lsls	r0, r3, #4
 8006a20:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8006a24:	d526      	bpl.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a26:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8006a28:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006a2c:	f000 8671 	beq.w	8007712 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006a30:	d815      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006a32:	2900      	cmp	r1, #0
 8006a34:	f000 8490 	beq.w	8007358 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006a38:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006a3c:	f040 846b 	bne.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x902>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a40:	49a4      	ldr	r1, [pc, #656]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006a42:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006a44:	f001 0103 	and.w	r1, r1, #3
 8006a48:	2903      	cmp	r1, #3
 8006a4a:	f000 8464 	beq.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8006a4e:	2102      	movs	r1, #2
 8006a50:	f104 0008 	add.w	r0, r4, #8
 8006a54:	f7ff fefa 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006a58:	4606      	mov	r6, r0
        break;
 8006a5a:	f000 be67 	b.w	800772c <HAL_RCCEx_PeriphCLKConfig+0xd18>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a5e:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8006a62:	f040 8458 	bne.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a66:	4d9b      	ldr	r5, [pc, #620]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a68:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a6a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8006a6c:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8006a70:	4301      	orrs	r1, r0
 8006a72:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a74:	05d9      	lsls	r1, r3, #23
 8006a76:	d50a      	bpl.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a78:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006a7a:	2904      	cmp	r1, #4
 8006a7c:	d806      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006a7e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006a82:	0495      	.short	0x0495
 8006a84:	06380623 	.word	0x06380623
 8006a88:	049a049a 	.word	0x049a049a
 8006a8c:	2601      	movs	r6, #1
 8006a8e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006a90:	059f      	lsls	r7, r3, #22
 8006a92:	d524      	bpl.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2AClockSelection)
 8006a94:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8006a96:	2980      	cmp	r1, #128	@ 0x80
 8006a98:	f000 85d7 	beq.w	800764a <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8006a9c:	f200 80e4 	bhi.w	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	f000 8460 	beq.w	8007366 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006aa6:	2940      	cmp	r1, #64	@ 0x40
 8006aa8:	f040 80e7 	bne.w	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x266>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aac:	4989      	ldr	r1, [pc, #548]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006aae:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ab0:	f001 0103 	and.w	r1, r1, #3
 8006ab4:	2903      	cmp	r1, #3
 8006ab6:	f000 80e0 	beq.w	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006aba:	2100      	movs	r1, #0
 8006abc:	f104 0008 	add.w	r0, r4, #8
 8006ac0:	f7ff fec4 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006ac4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006ac6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	f040 84f7 	bne.w	80074be <HAL_RCCEx_PeriphCLKConfig+0xaaa>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006ad0:	4f80      	ldr	r7, [pc, #512]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006ad2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8006ad4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ad6:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8006ada:	4301      	orrs	r1, r0
 8006adc:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006ade:	0558      	lsls	r0, r3, #21
 8006ae0:	d526      	bpl.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai2BClockSelection)
 8006ae2:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006ae4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ae8:	f000 85da 	beq.w	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 8006aec:	f200 80c8 	bhi.w	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006af0:	2900      	cmp	r1, #0
 8006af2:	f000 8442 	beq.w	800737a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006af6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006afa:	f040 80cb 	bne.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006afe:	4975      	ldr	r1, [pc, #468]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006b00:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006b02:	f001 0103 	and.w	r1, r1, #3
 8006b06:	2903      	cmp	r1, #3
 8006b08:	f000 80c4 	beq.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	f104 0008 	add.w	r0, r4, #8
 8006b12:	f7ff fe9b 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006b16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	f040 84d1 	bne.w	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006b22:	4f6c      	ldr	r7, [pc, #432]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006b24:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8006b26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b28:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8006b2c:	4301      	orrs	r1, r0
 8006b2e:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b30:	0199      	lsls	r1, r3, #6
 8006b32:	d518      	bpl.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->OspiClockSelection)
 8006b34:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8006b36:	2920      	cmp	r1, #32
 8006b38:	f000 8527 	beq.w	800758a <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8006b3c:	f200 80ad 	bhi.w	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006b40:	b139      	cbz	r1, 8006b52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006b42:	2910      	cmp	r1, #16
 8006b44:	f040 80ac 	bne.w	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b48:	4862      	ldr	r0, [pc, #392]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006b4a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006b4c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006b50:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	f040 84ab 	bne.w	80074ae <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006b58:	4f5e      	ldr	r7, [pc, #376]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006b5a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006b5c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006b5e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006b62:	4301      	orrs	r1, r0
 8006b64:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b66:	04df      	lsls	r7, r3, #19
 8006b68:	d526      	bpl.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b6a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006b6c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006b70:	f000 857f 	beq.w	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8006b74:	f200 8097 	bhi.w	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	f000 840d 	beq.w	8007398 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006b7e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006b82:	f040 8098 	bne.w	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b86:	4953      	ldr	r1, [pc, #332]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006b88:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006b8a:	f001 0103 	and.w	r1, r1, #3
 8006b8e:	2903      	cmp	r1, #3
 8006b90:	f000 8091 	beq.w	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006b94:	2100      	movs	r1, #0
 8006b96:	f104 0008 	add.w	r0, r4, #8
 8006b9a:	f7ff fe57 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006b9e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ba0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	f040 8487 	bne.w	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006baa:	4f4a      	ldr	r7, [pc, #296]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006bac:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8006bae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bb0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006bb4:	4301      	orrs	r1, r0
 8006bb6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bb8:	0498      	lsls	r0, r3, #18
 8006bba:	d521      	bpl.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006bbc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8006bbe:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8006bc2:	f000 852e 	beq.w	8007622 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8006bc6:	d879      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006bc8:	b181      	cbz	r1, 8006bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006bca:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006bce:	d17d      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bd0:	4940      	ldr	r1, [pc, #256]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006bd2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006bd4:	f001 0103 	and.w	r1, r1, #3
 8006bd8:	2903      	cmp	r1, #3
 8006bda:	d077      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006bdc:	2101      	movs	r1, #1
 8006bde:	f104 0008 	add.w	r0, r4, #8
 8006be2:	f7ff fe33 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006be6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006be8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006bec:	2d00      	cmp	r5, #0
 8006bee:	f040 847a 	bne.w	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006bf2:	4f38      	ldr	r7, [pc, #224]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006bf4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8006bf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006bf8:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006bfc:	4301      	orrs	r1, r0
 8006bfe:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c00:	0459      	lsls	r1, r3, #17
 8006c02:	d572      	bpl.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c04:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8006c08:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006c0c:	f000 84d0 	beq.w	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006c10:	d862      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8006c12:	b181      	cbz	r1, 8006c36 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006c14:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006c18:	d165      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c1a:	492e      	ldr	r1, [pc, #184]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c1c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c1e:	f001 0103 	and.w	r1, r1, #3
 8006c22:	2903      	cmp	r1, #3
 8006c24:	d05f      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006c26:	2101      	movs	r1, #1
 8006c28:	f104 0008 	add.w	r0, r4, #8
 8006c2c:	f7ff fe0e 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006c30:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c32:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	f040 8463 	bne.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0xaee>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c3c:	4f25      	ldr	r7, [pc, #148]	@ (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c3e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8006c42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c44:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8006c48:	4301      	orrs	r1, r0
 8006c4a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c4c:	041f      	lsls	r7, r3, #16
 8006c4e:	d44e      	bmi.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c50:	01d8      	lsls	r0, r3, #7
 8006c52:	d55c      	bpl.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch (PeriphClkInit->FmcClockSelection)
 8006c54:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006c56:	2903      	cmp	r1, #3
 8006c58:	f200 85c8 	bhi.w	80077ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8006c5c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006c60:	02c802cd 	.word	0x02c802cd
 8006c64:	02cd04ce 	.word	0x02cd04ce
    switch (PeriphClkInit->Sai2AClockSelection)
 8006c68:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8006c6c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006c70:	f43f af2b 	beq.w	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8006c74:	29c0      	cmp	r1, #192	@ 0xc0
 8006c76:	f43f af28 	beq.w	8006aca <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8006c7a:	2601      	movs	r6, #1
 8006c7c:	4635      	mov	r5, r6
 8006c7e:	e72e      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2BClockSelection)
 8006c80:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8006c84:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8006c88:	f43f af48 	beq.w	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8006c8c:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8006c90:	f43f af44 	beq.w	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8006c94:	2601      	movs	r6, #1
 8006c96:	4635      	mov	r5, r6
 8006c98:	e74a      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->OspiClockSelection)
 8006c9a:	2930      	cmp	r1, #48	@ 0x30
 8006c9c:	f43f af59 	beq.w	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006ca0:	2601      	movs	r6, #1
 8006ca2:	4635      	mov	r5, r6
 8006ca4:	e75f      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006ca6:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8006caa:	f43f af7b 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006cae:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006cb2:	f43f af77 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006cb6:	2601      	movs	r6, #1
 8006cb8:	4635      	mov	r5, r6
 8006cba:	e77d      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006cbc:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8006cc0:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8006cc4:	d092      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006cc6:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8006cca:	d08f      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006ccc:	2601      	movs	r6, #1
 8006cce:	4635      	mov	r5, r6
 8006cd0:	e796      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8006cd2:	bf00      	nop
 8006cd4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 8006cd8:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 8006cdc:	d0ab      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006cde:	d94a      	bls.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006ce0:	f1b1 4fc0 	cmp.w	r1, #1610612736	@ 0x60000000
 8006ce4:	d0a7      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006ce6:	2601      	movs	r6, #1
 8006ce8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cea:	041f      	lsls	r7, r3, #16
 8006cec:	d5b0      	bpl.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    switch (PeriphClkInit->FdcanClockSelection)
 8006cee:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8006cf0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006cf4:	f000 82e4 	beq.w	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8006cf8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006cfc:	f000 83c0 	beq.w	8007480 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006d00:	2900      	cmp	r1, #0
 8006d02:	f000 82e2 	beq.w	80072ca <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8006d06:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d08:	01d8      	lsls	r0, r3, #7
 8006d0a:	4635      	mov	r5, r6
 8006d0c:	d4a2      	bmi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x240>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d0e:	0259      	lsls	r1, r3, #9
 8006d10:	f100 8280 	bmi.w	8007214 <HAL_RCCEx_PeriphCLKConfig+0x800>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d14:	07df      	lsls	r7, r3, #31
 8006d16:	d53b      	bpl.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8006d18:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8006d1c:	2928      	cmp	r1, #40	@ 0x28
 8006d1e:	d835      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006d20:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006d24:	0034030e 	.word	0x0034030e
 8006d28:	00340034 	.word	0x00340034
 8006d2c:	00340034 	.word	0x00340034
 8006d30:	00340034 	.word	0x00340034
 8006d34:	003402ff 	.word	0x003402ff
 8006d38:	00340034 	.word	0x00340034
 8006d3c:	00340034 	.word	0x00340034
 8006d40:	00340034 	.word	0x00340034
 8006d44:	00340530 	.word	0x00340530
 8006d48:	00340034 	.word	0x00340034
 8006d4c:	00340034 	.word	0x00340034
 8006d50:	00340034 	.word	0x00340034
 8006d54:	0034030e 	.word	0x0034030e
 8006d58:	00340034 	.word	0x00340034
 8006d5c:	00340034 	.word	0x00340034
 8006d60:	00340034 	.word	0x00340034
 8006d64:	0034030e 	.word	0x0034030e
 8006d68:	00340034 	.word	0x00340034
 8006d6c:	00340034 	.word	0x00340034
 8006d70:	00340034 	.word	0x00340034
 8006d74:	030e      	.short	0x030e
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d76:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8006d7a:	f43f af5c 	beq.w	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006d7e:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006d82:	d1b0      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    if (ret == HAL_OK)
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	f040 83bc 	bne.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006d8a:	e757      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006d8c:	2601      	movs	r6, #1
 8006d8e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d90:	0798      	lsls	r0, r3, #30
 8006d92:	d51f      	bpl.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006d94:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8006d98:	2905      	cmp	r1, #5
 8006d9a:	f200 850c 	bhi.w	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8006d9e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006da2:	0015      	.short	0x0015
 8006da4:	04df0006 	.word	0x04df0006
 8006da8:	00150015 	.word	0x00150015
 8006dac:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dae:	4911      	ldr	r1, [pc, #68]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006db2:	f001 0103 	and.w	r1, r1, #3
 8006db6:	2903      	cmp	r1, #3
 8006db8:	f000 84fd 	beq.w	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	f104 0008 	add.w	r0, r4, #8
 8006dc2:	f7ff fd43 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006dc6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dc8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	f000 839b 	beq.w	8007508 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 8006dd2:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dd4:	0759      	lsls	r1, r3, #29
 8006dd6:	d522      	bpl.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006dd8:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8006ddc:	2905      	cmp	r1, #5
 8006dde:	f200 84ee 	bhi.w	80077be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8006de2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006de6:	0018      	.short	0x0018
 8006de8:	04ab0009 	.word	0x04ab0009
 8006dec:	00180018 	.word	0x00180018
 8006df0:	0018      	.short	0x0018
 8006df2:	bf00      	nop
 8006df4:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006df8:	49af      	ldr	r1, [pc, #700]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006dfa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006dfc:	f001 0103 	and.w	r1, r1, #3
 8006e00:	2903      	cmp	r1, #3
 8006e02:	f000 84dc 	beq.w	80077be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8006e06:	2101      	movs	r1, #1
 8006e08:	f104 0008 	add.w	r0, r4, #8
 8006e0c:	f7ff fd1e 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006e10:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e12:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e16:	2d00      	cmp	r5, #0
 8006e18:	f000 8368 	beq.w	80074ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006e1c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e1e:	069f      	lsls	r7, r3, #26
 8006e20:	d526      	bpl.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006e22:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8006e26:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006e2a:	f000 8378 	beq.w	800751e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006e2e:	f200 8192 	bhi.w	8007156 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8006e32:	b191      	cbz	r1, 8006e5a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006e34:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006e38:	f040 8197 	bne.w	800716a <HAL_RCCEx_PeriphCLKConfig+0x756>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e3c:	499e      	ldr	r1, [pc, #632]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006e3e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e40:	f001 0103 	and.w	r1, r1, #3
 8006e44:	2903      	cmp	r1, #3
 8006e46:	f000 8190 	beq.w	800716a <HAL_RCCEx_PeriphCLKConfig+0x756>
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	f104 0008 	add.w	r0, r4, #8
 8006e50:	f7ff fcfc 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006e54:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e56:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	f040 834f 	bne.w	80074fe <HAL_RCCEx_PeriphCLKConfig+0xaea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e60:	4f95      	ldr	r7, [pc, #596]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006e62:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8006e66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e68:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8006e6c:	4301      	orrs	r1, r0
 8006e6e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e70:	0658      	lsls	r0, r3, #25
 8006e72:	d526      	bpl.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e74:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8006e78:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006e7c:	f000 8373 	beq.w	8007566 <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8006e80:	f200 8176 	bhi.w	8007170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8006e84:	b191      	cbz	r1, 8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006e86:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e8a:	f040 817b 	bne.w	8007184 <HAL_RCCEx_PeriphCLKConfig+0x770>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e8e:	498a      	ldr	r1, [pc, #552]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006e90:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e92:	f001 0103 	and.w	r1, r1, #3
 8006e96:	2903      	cmp	r1, #3
 8006e98:	f000 8174 	beq.w	8007184 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f104 0008 	add.w	r0, r4, #8
 8006ea2:	f7ff fcd3 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006ea6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ea8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006eac:	2d00      	cmp	r5, #0
 8006eae:	f040 8314 	bne.w	80074da <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eb2:	4f81      	ldr	r7, [pc, #516]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006eb4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8006eb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006eba:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8006ebe:	4301      	orrs	r1, r0
 8006ec0:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ec2:	0619      	lsls	r1, r3, #24
 8006ec4:	d526      	bpl.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ec6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8006eca:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006ece:	f000 8338 	beq.w	8007542 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006ed2:	f200 815a 	bhi.w	800718a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8006ed6:	b191      	cbz	r1, 8006efe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8006ed8:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006edc:	f040 815f 	bne.w	800719e <HAL_RCCEx_PeriphCLKConfig+0x78a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ee0:	4975      	ldr	r1, [pc, #468]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006ee2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ee4:	f001 0103 	and.w	r1, r1, #3
 8006ee8:	2903      	cmp	r1, #3
 8006eea:	f000 8158 	beq.w	800719e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8006eee:	2100      	movs	r1, #0
 8006ef0:	f104 0008 	add.w	r0, r4, #8
 8006ef4:	f7ff fcaa 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006ef8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006efa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	f040 82ef 	bne.w	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xace>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f04:	4f6c      	ldr	r7, [pc, #432]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006f06:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8006f0a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f0c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8006f10:	4301      	orrs	r1, r0
 8006f12:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f14:	071f      	lsls	r7, r3, #28
 8006f16:	d50b      	bpl.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006f18:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8006f1c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006f20:	f000 8262 	beq.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f24:	4f64      	ldr	r7, [pc, #400]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006f26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f28:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006f2c:	4301      	orrs	r1, r0
 8006f2e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f30:	06d8      	lsls	r0, r3, #27
 8006f32:	d50b      	bpl.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x538>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f34:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8006f38:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006f3c:	f000 8268 	beq.w	8007410 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f40:	4f5d      	ldr	r7, [pc, #372]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006f42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f44:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8006f48:	4301      	orrs	r1, r0
 8006f4a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f4c:	0319      	lsls	r1, r3, #12
 8006f4e:	d50e      	bpl.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8006f50:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8006f54:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006f58:	f000 81c2 	beq.w	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8006f5c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8006f60:	f000 81cd 	beq.w	80072fe <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8006f64:	2900      	cmp	r1, #0
 8006f66:	f000 827b 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006f6a:	2601      	movs	r6, #1
 8006f6c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f6e:	035f      	lsls	r7, r3, #13
 8006f70:	d50f      	bpl.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 8006f72:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8006f76:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006f7a:	f000 832c 	beq.w	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8006f7e:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8006f82:	f000 8191 	beq.w	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8006f86:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006f8a:	f000 8188 	beq.w	800729e <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8006f8e:	2601      	movs	r6, #1
 8006f90:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f92:	03d8      	lsls	r0, r3, #15
 8006f94:	d520      	bpl.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8006f96:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	f000 824e 	beq.w	800743a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8006f9e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006fa2:	f040 8179 	bne.w	8007298 <HAL_RCCEx_PeriphCLKConfig+0x884>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fa6:	4944      	ldr	r1, [pc, #272]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006fa8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006faa:	f001 0103 	and.w	r1, r1, #3
 8006fae:	2903      	cmp	r1, #3
 8006fb0:	f000 8172 	beq.w	8007298 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	f104 0008 	add.w	r0, r4, #8
 8006fba:	f7ff fc47 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8006fbe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fc0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	f040 8240 	bne.w	800744a <HAL_RCCEx_PeriphCLKConfig+0xa36>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fca:	4f3b      	ldr	r7, [pc, #236]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006fcc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8006fce:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006fd0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006fd4:	4301      	orrs	r1, r0
 8006fd6:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fd8:	0099      	lsls	r1, r3, #2
 8006fda:	d50e      	bpl.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fdc:	4936      	ldr	r1, [pc, #216]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8006fde:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006fe0:	f001 0103 	and.w	r1, r1, #3
 8006fe4:	2903      	cmp	r1, #3
 8006fe6:	d007      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8006fe8:	2102      	movs	r1, #2
 8006fea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006fee:	f7ff fc9f 	bl	8006930 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ff2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ff6:	b100      	cbz	r0, 8006ffa <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8006ff8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ffa:	039f      	lsls	r7, r3, #14
 8006ffc:	f140 80de 	bpl.w	80071bc <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 8007000:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8007004:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007008:	f000 8221 	beq.w	800744e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800700c:	f240 80ca 	bls.w	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8007010:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8007014:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007018:	f000 80c7 	beq.w	80071aa <HAL_RCCEx_PeriphCLKConfig+0x796>
 800701c:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800701e:	02d8      	lsls	r0, r3, #11
 8007020:	d506      	bpl.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007022:	4825      	ldr	r0, [pc, #148]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007024:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 8007026:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007028:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800702c:	4331      	orrs	r1, r6
 800702e:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007030:	0299      	lsls	r1, r3, #10
 8007032:	d506      	bpl.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007034:	4820      	ldr	r0, [pc, #128]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007036:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 8007038:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800703a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800703e:	4331      	orrs	r1, r6
 8007040:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007042:	051f      	lsls	r7, r3, #20
 8007044:	d506      	bpl.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x640>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007046:	481c      	ldr	r0, [pc, #112]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007048:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800704a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800704c:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 8007050:	4331      	orrs	r1, r6
 8007052:	6581      	str	r1, [r0, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007054:	005e      	lsls	r6, r3, #1
 8007056:	d509      	bpl.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x658>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007058:	4917      	ldr	r1, [pc, #92]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800705a:	6908      	ldr	r0, [r1, #16]
 800705c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8007060:	6108      	str	r0, [r1, #16]
 8007062:	6908      	ldr	r0, [r1, #16]
 8007064:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8007068:	4330      	orrs	r0, r6
 800706a:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800706c:	2b00      	cmp	r3, #0
 800706e:	da06      	bge.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x66a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007070:	4811      	ldr	r0, [pc, #68]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007072:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8007074:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007076:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800707a:	4331      	orrs	r1, r6
 800707c:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800707e:	0218      	lsls	r0, r3, #8
 8007080:	d507      	bpl.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007082:	490d      	ldr	r1, [pc, #52]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007084:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8007088:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800708a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800708e:	4303      	orrs	r3, r0
 8007090:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007092:	07d1      	lsls	r1, r2, #31
 8007094:	d512      	bpl.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007096:	4b08      	ldr	r3, [pc, #32]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b03      	cmp	r3, #3
 80070a0:	f000 8198 	beq.w	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 80070a4:	2100      	movs	r1, #0
 80070a6:	f104 0008 	add.w	r0, r4, #8
 80070aa:	f7ff fbcf 	bl	800684c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070ae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f040 820e 	bne.w	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 80070b6:	e001      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80070b8:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80070bc:	0793      	lsls	r3, r2, #30
 80070be:	d50f      	bpl.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070c0:	4bb3      	ldr	r3, [pc, #716]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	f000 8185 	beq.w	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 80070ce:	2101      	movs	r1, #1
 80070d0:	f104 0008 	add.w	r0, r4, #8
 80070d4:	f7ff fbba 	bl	800684c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80070d8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80070da:	2800      	cmp	r0, #0
 80070dc:	f040 81f5 	bne.w	80074ca <HAL_RCCEx_PeriphCLKConfig+0xab6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80070e0:	0757      	lsls	r7, r2, #29
 80070e2:	d50f      	bpl.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070e4:	4baa      	ldr	r3, [pc, #680]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	f003 0303 	and.w	r3, r3, #3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	f000 816f 	beq.w	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 80070f2:	2102      	movs	r1, #2
 80070f4:	f104 0008 	add.w	r0, r4, #8
 80070f8:	f7ff fba8 	bl	800684c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80070fc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80070fe:	2800      	cmp	r0, #0
 8007100:	f040 81e5 	bne.w	80074ce <HAL_RCCEx_PeriphCLKConfig+0xaba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007104:	0716      	lsls	r6, r2, #28
 8007106:	d50f      	bpl.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007108:	4ba1      	ldr	r3, [pc, #644]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b03      	cmp	r3, #3
 8007112:	f000 8167 	beq.w	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007116:	2100      	movs	r1, #0
 8007118:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800711c:	f7ff fc08 	bl	8006930 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007120:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007122:	2800      	cmp	r0, #0
 8007124:	f040 81d7 	bne.w	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xac2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007128:	06d0      	lsls	r0, r2, #27
 800712a:	d54a      	bpl.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800712c:	4b98      	ldr	r3, [pc, #608]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800712e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	2b03      	cmp	r3, #3
 800713a:	f000 814f 	beq.w	80073dc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800713e:	2101      	movs	r1, #1
 8007140:	4630      	mov	r0, r6
 8007142:	f7ff fbf5 	bl	8006930 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8007146:	2800      	cmp	r0, #0
 8007148:	d03a      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800714a:	6863      	ldr	r3, [r4, #4]
 800714c:	069a      	lsls	r2, r3, #26
 800714e:	f140 80e5 	bpl.w	800731c <HAL_RCCEx_PeriphCLKConfig+0x908>
 8007152:	4605      	mov	r5, r0
 8007154:	e039      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007156:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800715a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800715e:	f43f ae7c 	beq.w	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007162:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8007166:	f43f ae78 	beq.w	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x446>
 800716a:	2601      	movs	r6, #1
 800716c:	4635      	mov	r5, r6
 800716e:	e67f      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007170:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8007174:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8007178:	f43f ae98 	beq.w	8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>
 800717c:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8007180:	f43f ae94 	beq.w	8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007184:	2601      	movs	r6, #1
 8007186:	4635      	mov	r5, r6
 8007188:	e69b      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800718a:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800718e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007192:	f43f aeb4 	beq.w	8006efe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007196:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800719a:	f43f aeb0 	beq.w	8006efe <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800719e:	2601      	movs	r6, #1
 80071a0:	4635      	mov	r5, r6
 80071a2:	e6b7      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->RngClockSelection)
 80071a4:	2900      	cmp	r1, #0
 80071a6:	f47f af39 	bne.w	800701c <HAL_RCCEx_PeriphCLKConfig+0x608>
    if (ret == HAL_OK)
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	f47f af37 	bne.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071b0:	4d77      	ldr	r5, [pc, #476]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80071b2:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80071b4:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80071b8:	4301      	orrs	r1, r0
 80071ba:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 80071bc:	4635      	mov	r5, r6
 80071be:	e72e      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80071c0:	6862      	ldr	r2, [r4, #4]
 80071c2:	0693      	lsls	r3, r2, #26
 80071c4:	d50f      	bpl.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071c6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071ca:	4b71      	ldr	r3, [pc, #452]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80071cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	f000 80a2 	beq.w	800731c <HAL_RCCEx_PeriphCLKConfig+0x908>
 80071d8:	2102      	movs	r1, #2
 80071da:	4630      	mov	r0, r6
 80071dc:	f7ff fba8 	bl	8006930 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f040 809b 	bne.w	800731c <HAL_RCCEx_PeriphCLKConfig+0x908>
  if (status == HAL_OK)
 80071e6:	1e28      	subs	r0, r5, #0
 80071e8:	bf18      	it	ne
 80071ea:	2001      	movne	r0, #1
}
 80071ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f0:	4867      	ldr	r0, [pc, #412]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80071f2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80071f4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80071f8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	f040 815a 	bne.w	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007200:	4f63      	ldr	r7, [pc, #396]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007202:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8007204:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007206:	f021 0103 	bic.w	r1, r1, #3
 800720a:	4301      	orrs	r1, r0
 800720c:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800720e:	0259      	lsls	r1, r3, #9
 8007210:	f57f ad80 	bpl.w	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x300>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007214:	4f5f      	ldr	r7, [pc, #380]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x980>)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800721c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800721e:	f7fa ff19 	bl	8002054 <HAL_GetTick>
 8007222:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007224:	e006      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x820>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007226:	f7fa ff15 	bl	8002054 <HAL_GetTick>
 800722a:	eba0 0008 	sub.w	r0, r0, r8
 800722e:	2864      	cmp	r0, #100	@ 0x64
 8007230:	f200 82bb 	bhi.w	80077aa <HAL_RCCEx_PeriphCLKConfig+0xd96>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	05da      	lsls	r2, r3, #23
 8007238:	d5f5      	bpl.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (ret == HAL_OK)
 800723a:	2d00      	cmp	r5, #0
 800723c:	f040 82b6 	bne.w	80077ac <HAL_RCCEx_PeriphCLKConfig+0xd98>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007240:	4a53      	ldr	r2, [pc, #332]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007242:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8007246:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8007248:	4059      	eors	r1, r3
 800724a:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800724e:	d00b      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x854>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007250:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007252:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007254:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007258:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800725c:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800725e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8007260:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8007264:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8007266:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800726c:	f000 82c2 	beq.w	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007270:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007274:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8007278:	f000 82d0 	beq.w	800781c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800727c:	4944      	ldr	r1, [pc, #272]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800727e:	690a      	ldr	r2, [r1, #16]
 8007280:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8007284:	610a      	str	r2, [r1, #16]
 8007286:	4842      	ldr	r0, [pc, #264]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007288:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800728c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800728e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007290:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007294:	6701      	str	r1, [r0, #112]	@ 0x70
 8007296:	e53d      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007298:	2601      	movs	r6, #1
 800729a:	4635      	mov	r5, r6
 800729c:	e69c      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729e:	483c      	ldr	r0, [pc, #240]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072a0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80072a2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80072a6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	f040 80fe 	bne.w	80074aa <HAL_RCCEx_PeriphCLKConfig+0xa96>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072ae:	4f38      	ldr	r7, [pc, #224]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072b0:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80072b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072b6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80072ba:	4301      	orrs	r1, r0
 80072bc:	6579      	str	r1, [r7, #84]	@ 0x54
 80072be:	e668      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c0:	4833      	ldr	r0, [pc, #204]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072c2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80072c4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80072c8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	f040 80ea 	bne.w	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072d0:	4f2f      	ldr	r7, [pc, #188]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072d2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80072d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072d6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80072da:	4301      	orrs	r1, r0
 80072dc:	6539      	str	r1, [r7, #80]	@ 0x50
 80072de:	e4b7      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072e0:	492b      	ldr	r1, [pc, #172]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80072e2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80072e4:	f001 0103 	and.w	r1, r1, #3
 80072e8:	2903      	cmp	r1, #3
 80072ea:	f43f ae3e 	beq.w	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x556>
 80072ee:	2102      	movs	r1, #2
 80072f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80072f4:	f7ff fb1c 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 80072f8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80072fe:	2d00      	cmp	r5, #0
 8007300:	f040 80ed 	bne.w	80074de <HAL_RCCEx_PeriphCLKConfig+0xaca>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007304:	4f22      	ldr	r7, [pc, #136]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007306:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800730a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800730c:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8007310:	4301      	orrs	r1, r0
 8007312:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007314:	e62b      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007316:	2601      	movs	r6, #1
 8007318:	f7ff bbac 	b.w	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x60>
  return HAL_ERROR;
 800731c:	2001      	movs	r0, #1
}
 800731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007322:	491b      	ldr	r1, [pc, #108]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007324:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007326:	f001 0103 	and.w	r1, r1, #3
 800732a:	2903      	cmp	r1, #3
 800732c:	f43f ad2e 	beq.w	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007330:	2101      	movs	r1, #1
 8007332:	f104 0008 	add.w	r0, r4, #8
 8007336:	f7ff fa89 	bl	800684c <RCCEx_PLL2_Config.part.0>
 800733a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800733c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007340:	2d00      	cmp	r5, #0
 8007342:	f040 80ea 	bne.w	800751a <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007346:	4f12      	ldr	r7, [pc, #72]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007348:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800734c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800734e:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8007352:	4301      	orrs	r1, r0
 8007354:	6579      	str	r1, [r7, #84]	@ 0x54
 8007356:	e51b      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007358:	4d0d      	ldr	r5, [pc, #52]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800735a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800735c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8007360:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007362:	f7ff bb80 	b.w	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007366:	480a      	ldr	r0, [pc, #40]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007368:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800736a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800736e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007370:	2d00      	cmp	r5, #0
 8007372:	f040 80a4 	bne.w	80074be <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007376:	f7ff bbab 	b.w	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800737a:	4805      	ldr	r0, [pc, #20]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800737c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800737e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007382:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007384:	2d00      	cmp	r5, #0
 8007386:	f040 809d 	bne.w	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800738a:	f7ff bbca 	b.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800738e:	bf00      	nop
 8007390:	58024400 	.word	0x58024400
 8007394:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007398:	48c0      	ldr	r0, [pc, #768]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800739a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800739c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80073a0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	f040 8088 	bne.w	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80073a8:	f7ff bbff 	b.w	8006baa <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ac:	48bb      	ldr	r0, [pc, #748]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80073ae:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80073b0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80073b4:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 80073b6:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 80073b8:	2d00      	cmp	r5, #0
 80073ba:	f040 8197 	bne.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0xcd8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073be:	4fb7      	ldr	r7, [pc, #732]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80073c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073c4:	f021 0107 	bic.w	r1, r1, #7
 80073c8:	4301      	orrs	r1, r0
 80073ca:	6539      	str	r1, [r7, #80]	@ 0x50
 80073cc:	f7ff bb60 	b.w	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    return HAL_ERROR;
 80073d0:	2501      	movs	r5, #1
 80073d2:	e697      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80073d4:	2501      	movs	r5, #1
 80073d6:	e671      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80073d8:	2501      	movs	r5, #1
 80073da:	e681      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073dc:	0691      	lsls	r1, r2, #26
 80073de:	d59d      	bpl.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x908>
    return HAL_ERROR;
 80073e0:	2501      	movs	r5, #1
 80073e2:	e6f2      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 80073e4:	2501      	movs	r5, #1
 80073e6:	e69f      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073e8:	49ac      	ldr	r1, [pc, #688]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80073ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80073ec:	f001 0103 	and.w	r1, r1, #3
 80073f0:	2903      	cmp	r1, #3
 80073f2:	f000 81e8 	beq.w	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 80073f6:	2102      	movs	r1, #2
 80073f8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80073fc:	f7ff fa98 	bl	8006930 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007400:	2800      	cmp	r0, #0
 8007402:	f040 81ec 	bne.w	80077de <HAL_RCCEx_PeriphCLKConfig+0xdca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007406:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800740a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800740e:	e589      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x510>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007410:	49a2      	ldr	r1, [pc, #648]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007412:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007414:	f001 0103 	and.w	r1, r1, #3
 8007418:	2903      	cmp	r1, #3
 800741a:	f000 81d7 	beq.w	80077cc <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 800741e:	2102      	movs	r1, #2
 8007420:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007424:	f7ff fa84 	bl	8006930 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007428:	2800      	cmp	r0, #0
 800742a:	f000 81d2 	beq.w	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800742e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
        status = HAL_ERROR;
 8007432:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007434:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007438:	e582      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743a:	4898      	ldr	r0, [pc, #608]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800743c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800743e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007442:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007444:	2d00      	cmp	r5, #0
 8007446:	f43f adc0 	beq.w	8006fca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800744a:	462e      	mov	r6, r5
 800744c:	e5c4      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800744e:	4f93      	ldr	r7, [pc, #588]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007450:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007452:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8007456:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007458:	2d00      	cmp	r5, #0
 800745a:	f47f ade0 	bne.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800745e:	e6a7      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007460:	488e      	ldr	r0, [pc, #568]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007462:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007464:	f000 0003 	and.w	r0, r0, #3
 8007468:	2803      	cmp	r0, #3
 800746a:	f43f ad7e 	beq.w	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x556>
 800746e:	f104 0008 	add.w	r0, r4, #8
 8007472:	f7ff f9eb 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8007476:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007478:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800747c:	bb7d      	cbnz	r5, 80074de <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800747e:	e741      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007480:	4986      	ldr	r1, [pc, #536]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007482:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007484:	f001 0103 	and.w	r1, r1, #3
 8007488:	2903      	cmp	r1, #3
 800748a:	f43f ac3c 	beq.w	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 800748e:	2101      	movs	r1, #1
 8007490:	f104 0008 	add.w	r0, r4, #8
 8007494:	f7ff f9da 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8007498:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800749a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800749e:	2d00      	cmp	r5, #0
 80074a0:	f43f af16 	beq.w	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80074a4:	462e      	mov	r6, r5
 80074a6:	f7ff bbd3 	b.w	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80074aa:	462e      	mov	r6, r5
 80074ac:	e571      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80074ae:	462e      	mov	r6, r5
 80074b0:	f7ff bb59 	b.w	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80074b4:	462e      	mov	r6, r5
 80074b6:	e42a      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80074b8:	462e      	mov	r6, r5
 80074ba:	f7ff bb7d 	b.w	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80074be:	462e      	mov	r6, r5
 80074c0:	f7ff bb0d 	b.w	8006ade <HAL_RCCEx_PeriphCLKConfig+0xca>
 80074c4:	462e      	mov	r6, r5
 80074c6:	f7ff bb33 	b.w	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80074ca:	4605      	mov	r5, r0
 80074cc:	e608      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074ce:	4605      	mov	r5, r0
 80074d0:	e618      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80074d2:	4605      	mov	r5, r0
 80074d4:	e5f2      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074d6:	4605      	mov	r5, r0
 80074d8:	e626      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x714>
 80074da:	462e      	mov	r6, r5
 80074dc:	e4f1      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80074de:	462e      	mov	r6, r5
 80074e0:	e545      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80074e2:	462e      	mov	r6, r5
 80074e4:	e516      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80074e6:	462e      	mov	r6, r5
 80074e8:	f7ff bb8a 	b.w	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074ec:	4f6b      	ldr	r7, [pc, #428]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80074ee:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80074f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80074f4:	f021 0107 	bic.w	r1, r1, #7
 80074f8:	4301      	orrs	r1, r0
 80074fa:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074fc:	e48f      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80074fe:	462e      	mov	r6, r5
 8007500:	e4b6      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8007502:	462e      	mov	r6, r5
 8007504:	f7ff bbf1 	b.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007508:	4f64      	ldr	r7, [pc, #400]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800750a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800750e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007510:	f021 0107 	bic.w	r1, r1, #7
 8007514:	4301      	orrs	r1, r0
 8007516:	6579      	str	r1, [r7, #84]	@ 0x54
 8007518:	e45c      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800751a:	462e      	mov	r6, r5
 800751c:	e438      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800751e:	495f      	ldr	r1, [pc, #380]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007520:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007522:	f001 0103 	and.w	r1, r1, #3
 8007526:	2903      	cmp	r1, #3
 8007528:	f43f ae1f 	beq.w	800716a <HAL_RCCEx_PeriphCLKConfig+0x756>
 800752c:	2102      	movs	r1, #2
 800752e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007532:	f7ff f9fd 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 8007536:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007538:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800753c:	2d00      	cmp	r5, #0
 800753e:	d1de      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8007540:	e48e      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007542:	4956      	ldr	r1, [pc, #344]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007544:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007546:	f001 0103 	and.w	r1, r1, #3
 800754a:	2903      	cmp	r1, #3
 800754c:	f43f ae27 	beq.w	800719e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8007550:	2102      	movs	r1, #2
 8007552:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007556:	f7ff f9eb 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 800755a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800755c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007560:	2d00      	cmp	r5, #0
 8007562:	d1be      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8007564:	e4ce      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007566:	494d      	ldr	r1, [pc, #308]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007568:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800756a:	f001 0103 	and.w	r1, r1, #3
 800756e:	2903      	cmp	r1, #3
 8007570:	f43f ae08 	beq.w	8007184 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8007574:	2102      	movs	r1, #2
 8007576:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800757a:	f7ff f9d9 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 800757e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007580:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007584:	2d00      	cmp	r5, #0
 8007586:	d1a8      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8007588:	e493      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x49e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800758a:	4944      	ldr	r1, [pc, #272]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800758c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800758e:	f001 0103 	and.w	r1, r1, #3
 8007592:	2903      	cmp	r1, #3
 8007594:	f43f ab84 	beq.w	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007598:	2102      	movs	r1, #2
 800759a:	f104 0008 	add.w	r0, r4, #8
 800759e:	f7ff f955 	bl	800684c <RCCEx_PLL2_Config.part.0>
 80075a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	d180      	bne.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 80075ac:	f7ff bad4 	b.w	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x144>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075b0:	493a      	ldr	r1, [pc, #232]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80075b2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80075b4:	f001 0103 	and.w	r1, r1, #3
 80075b8:	2903      	cmp	r1, #3
 80075ba:	f43f ab94 	beq.w	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075be:	2101      	movs	r1, #1
 80075c0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80075c4:	f7ff f9b4 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 80075c8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075ca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	d197      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80075d2:	f7ff bb33 	b.w	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075d6:	4931      	ldr	r1, [pc, #196]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80075d8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80075da:	f001 0103 	and.w	r1, r1, #3
 80075de:	2903      	cmp	r1, #3
 80075e0:	f43f acd5 	beq.w	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80075e4:	2101      	movs	r1, #1
 80075e6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80075ea:	f7ff f9a1 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 80075ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	f47f af58 	bne.w	80074aa <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80075fa:	e658      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x89a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075fc:	4927      	ldr	r1, [pc, #156]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80075fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007600:	f001 0103 	and.w	r1, r1, #3
 8007604:	2903      	cmp	r1, #3
 8007606:	f000 80f1 	beq.w	80077ec <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800760a:	2102      	movs	r1, #2
 800760c:	f104 0008 	add.w	r0, r4, #8
 8007610:	f7ff f91c 	bl	800684c <RCCEx_PLL2_Config.part.0>
 8007614:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007616:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800761a:	2d00      	cmp	r5, #0
 800761c:	f47f af4a 	bne.w	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8007620:	e5ee      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007622:	491e      	ldr	r1, [pc, #120]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007624:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007626:	f001 0103 	and.w	r1, r1, #3
 800762a:	2903      	cmp	r1, #3
 800762c:	f43f ab4e 	beq.w	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007630:	2101      	movs	r1, #1
 8007632:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007636:	f7ff f97b 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 800763a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800763c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007640:	2d00      	cmp	r5, #0
 8007642:	f47f af50 	bne.w	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8007646:	f7ff bad4 	b.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800764a:	4914      	ldr	r1, [pc, #80]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800764c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800764e:	f001 0103 	and.w	r1, r1, #3
 8007652:	2903      	cmp	r1, #3
 8007654:	f43f ab11 	beq.w	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x266>
 8007658:	2100      	movs	r1, #0
 800765a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800765e:	f7ff f967 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 8007662:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007664:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007668:	2d00      	cmp	r5, #0
 800766a:	f47f af28 	bne.w	80074be <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800766e:	f7ff ba2f 	b.w	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007672:	490a      	ldr	r1, [pc, #40]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007674:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007676:	f001 0103 	and.w	r1, r1, #3
 800767a:	2903      	cmp	r1, #3
 800767c:	f43f ab1b 	beq.w	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8007680:	2100      	movs	r1, #0
 8007682:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007686:	f7ff f953 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 800768a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800768c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007690:	2d00      	cmp	r5, #0
 8007692:	f47f af11 	bne.w	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007696:	f7ff ba88 	b.w	8006baa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076a0:	4966      	ldr	r1, [pc, #408]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80076a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076a4:	f001 0103 	and.w	r1, r1, #3
 80076a8:	2903      	cmp	r1, #3
 80076aa:	f43f aaf3 	beq.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80076ae:	2100      	movs	r1, #0
 80076b0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80076b4:	f7ff f93c 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 80076b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80076ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80076be:	2d00      	cmp	r5, #0
 80076c0:	f47f af00 	bne.w	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80076c4:	f7ff ba2d 	b.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076c8:	495c      	ldr	r1, [pc, #368]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80076ca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076cc:	f001 0103 	and.w	r1, r1, #3
 80076d0:	2903      	cmp	r1, #3
 80076d2:	f43f a9db 	beq.w	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80076d6:	2100      	movs	r1, #0
 80076d8:	f104 0008 	add.w	r0, r4, #8
 80076dc:	f7ff f8b6 	bl	800684c <RCCEx_PLL2_Config.part.0>
 80076e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80076e2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	f43f ae69 	beq.w	80073be <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 80076ec:	462e      	mov	r6, r5
 80076ee:	f7ff b9cf 	b.w	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076f2:	4952      	ldr	r1, [pc, #328]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80076f4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076f6:	f001 0103 	and.w	r1, r1, #3
 80076fa:	2903      	cmp	r1, #3
 80076fc:	f43f a9c6 	beq.w	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007700:	2100      	movs	r1, #0
 8007702:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007706:	f7ff f913 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 800770a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800770c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007710:	e652      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007712:	494a      	ldr	r1, [pc, #296]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8007714:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007716:	f001 0103 	and.w	r1, r1, #3
 800771a:	2903      	cmp	r1, #3
 800771c:	f43f adfb 	beq.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007720:	2102      	movs	r1, #2
 8007722:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007726:	f7ff f903 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 800772a:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800772c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007730:	2e00      	cmp	r6, #0
 8007732:	f47f a99f 	bne.w	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007736:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8007738:	f7ff b995 	b.w	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x52>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800773c:	493f      	ldr	r1, [pc, #252]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800773e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007740:	f001 0103 	and.w	r1, r1, #3
 8007744:	2903      	cmp	r1, #3
 8007746:	d03a      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8007748:	2101      	movs	r1, #1
 800774a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800774e:	f7ff f8ef 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 8007752:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007754:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007758:	2d00      	cmp	r5, #0
 800775a:	f47f ab5f 	bne.w	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800775e:	e6c5      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007760:	4936      	ldr	r1, [pc, #216]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8007762:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007764:	f001 0103 	and.w	r1, r1, #3
 8007768:	2903      	cmp	r1, #3
 800776a:	d024      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800776c:	2101      	movs	r1, #1
 800776e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007772:	f7ff f8dd 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 8007776:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007778:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800777c:	2d00      	cmp	r5, #0
 800777e:	f47f ab28 	bne.w	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8007782:	e6c1      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007784:	492d      	ldr	r1, [pc, #180]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8007786:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007788:	f001 0103 	and.w	r1, r1, #3
 800778c:	2903      	cmp	r1, #3
 800778e:	f43f aafd 	beq.w	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007792:	2101      	movs	r1, #1
 8007794:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007798:	f7ff f8ca 	bl	8006930 <RCCEx_PLL3_Config.part.0>
 800779c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800779e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	f47f aeb9 	bne.w	800751a <HAL_RCCEx_PeriphCLKConfig+0xb06>
 80077a8:	e5cd      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = HAL_TIMEOUT;
 80077aa:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80077ac:	462e      	mov	r6, r5
 80077ae:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077b2:	f7ff baaf 	b.w	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80077b6:	2601      	movs	r6, #1
 80077b8:	4635      	mov	r5, r6
 80077ba:	f7ff bb0b 	b.w	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80077be:	2601      	movs	r6, #1
 80077c0:	4635      	mov	r5, r6
 80077c2:	f7ff bb2c 	b.w	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
        status = HAL_ERROR;
 80077c6:	2601      	movs	r6, #1
 80077c8:	f7ff bbac 	b.w	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x510>
        status = HAL_ERROR;
 80077cc:	2601      	movs	r6, #1
 80077ce:	f7ff bbb7 	b.w	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077d2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077d6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077da:	f7ff bbb1 	b.w	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077de:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
        status = HAL_ERROR;
 80077e2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077e8:	f7ff bb9c 	b.w	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80077ec:	2601      	movs	r6, #1
 80077ee:	4635      	mov	r5, r6
 80077f0:	f7ff ba8d 	b.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        tickstart = HAL_GetTick();
 80077f4:	f7fa fc2e 	bl	8002054 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077f8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>
        tickstart = HAL_GetTick();
 80077fc:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077fe:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007802:	e004      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xdfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007804:	f7fa fc26 	bl	8002054 <HAL_GetTick>
 8007808:	1bc0      	subs	r0, r0, r7
 800780a:	4548      	cmp	r0, r9
 800780c:	d810      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800780e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8007812:	079b      	lsls	r3, r3, #30
 8007814:	d5f6      	bpl.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007816:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800781a:	e529      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800781c:	4807      	ldr	r0, [pc, #28]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800781e:	4a08      	ldr	r2, [pc, #32]	@ (8007840 <HAL_RCCEx_PeriphCLKConfig+0xe2c>)
 8007820:	6901      	ldr	r1, [r0, #16]
 8007822:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007826:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800782a:	430a      	orrs	r2, r1
 800782c:	6102      	str	r2, [r0, #16]
 800782e:	e52a      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x872>
        status = ret;
 8007830:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007832:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007836:	4635      	mov	r5, r6
 8007838:	f7ff ba6c 	b.w	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800783c:	58024400 	.word	0x58024400
 8007840:	00ffffcf 	.word	0x00ffffcf

08007844 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007844:	4a47      	ldr	r2, [pc, #284]	@ (8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8007846:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007848:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800784a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800784c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800784e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007852:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007856:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8007858:	d05b      	beq.n	8007912 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800785a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800785e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007862:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007866:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800786a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800786e:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007874:	ee06 1a90 	vmov	s13, r1
 8007878:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800787c:	d003      	beq.n	8007886 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800787e:	2c02      	cmp	r4, #2
 8007880:	d06a      	beq.n	8007958 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8007882:	2c00      	cmp	r4, #0
 8007884:	d04a      	beq.n	800791c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007886:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007968 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800788a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800788e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007894:	ee07 3a90 	vmov	s15, r3
 8007898:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800789c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80078a8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80078ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 80078ae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80078b2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80078b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80078b8:	ee07 3a10 	vmov	s14, r3
 80078bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80078c0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80078c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80078c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80078ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80078ce:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80078d2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80078d4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80078d8:	ee07 3a10 	vmov	s14, r3
 80078dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80078e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80078e8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80078ec:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80078f0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80078f2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80078f6:	ee06 3a90 	vmov	s13, r3
 80078fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80078fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007902:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007906:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800790a:	ee17 3a90 	vmov	r3, s15
 800790e:	6083      	str	r3, [r0, #8]
}
 8007910:	4770      	bx	lr
 8007912:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007914:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007918:	6083      	str	r3, [r0, #8]
}
 800791a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800791c:	6813      	ldr	r3, [r2, #0]
 800791e:	069b      	lsls	r3, r3, #26
 8007920:	d51d      	bpl.n	800795e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007922:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007924:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007928:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800792a:	4910      	ldr	r1, [pc, #64]	@ (800796c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800792c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007930:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007934:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	ee06 1a10 	vmov	s12, r1
 800793e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007942:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007946:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800794a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800794e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007956:	e7a9      	b.n	80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007958:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800795c:	e795      	b.n	800788a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800795e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007974 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8007962:	e792      	b.n	800788a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8007964:	58024400 	.word	0x58024400
 8007968:	4a742400 	.word	0x4a742400
 800796c:	03d09000 	.word	0x03d09000
 8007970:	4bbebc20 	.word	0x4bbebc20
 8007974:	4c742400 	.word	0x4c742400

08007978 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007978:	4a47      	ldr	r2, [pc, #284]	@ (8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800797a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800797c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800797e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007980:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8007982:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007986:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800798a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 800798c:	d05b      	beq.n	8007a46 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800798e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007992:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007996:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800799a:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800799e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80079a2:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079a8:	ee06 1a90 	vmov	s13, r1
 80079ac:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80079b0:	d003      	beq.n	80079ba <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80079b2:	2c02      	cmp	r4, #2
 80079b4:	d06a      	beq.n	8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	d04a      	beq.n	8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079ba:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80079be:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80079c2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80079c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80079d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80079dc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 80079e2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80079e6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80079e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80079ec:	ee07 3a10 	vmov	s14, r3
 80079f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80079f4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80079fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80079fe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007a02:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a06:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007a08:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007a0c:	ee07 3a10 	vmov	s14, r3
 8007a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a14:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007a1c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007a20:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a24:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007a26:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007a2a:	ee06 3a90 	vmov	s13, r3
 8007a2e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007a32:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007a36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a3a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007a3e:	ee17 3a90 	vmov	r3, s15
 8007a42:	6083      	str	r3, [r0, #8]
}
 8007a44:	4770      	bx	lr
 8007a46:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a48:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a4c:	6083      	str	r3, [r0, #8]
}
 8007a4e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a50:	6813      	ldr	r3, [r2, #0]
 8007a52:	069b      	lsls	r3, r3, #26
 8007a54:	d51d      	bpl.n	8007a92 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a56:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a58:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007a5c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a5e:	4910      	ldr	r1, [pc, #64]	@ (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8007a60:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a68:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	ee06 1a10 	vmov	s12, r1
 8007a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a76:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007a7a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007a7e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007a82:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a8a:	e7a9      	b.n	80079e0 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a8c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8007a90:	e795      	b.n	80079be <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a92:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8007a96:	e792      	b.n	80079be <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	4a742400 	.word	0x4a742400
 8007aa0:	03d09000 	.word	0x03d09000
 8007aa4:	4bbebc20 	.word	0x4bbebc20
 8007aa8:	4c742400 	.word	0x4c742400

08007aac <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aac:	4a47      	ldr	r2, [pc, #284]	@ (8007bcc <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8007aae:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ab0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007ab2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ab4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8007ab6:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007aba:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007abe:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8007ac0:	d05b      	beq.n	8007b7a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ac2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ac6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aca:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ace:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ad2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007ad6:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007adc:	ee06 1a90 	vmov	s13, r1
 8007ae0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007ae4:	d06f      	beq.n	8007bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8007ae6:	2c02      	cmp	r4, #2
 8007ae8:	d06a      	beq.n	8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	d04a      	beq.n	8007b84 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aee:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8007af2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007af6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afc:	ee07 3a90 	vmov	s15, r3
 8007b00:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007b10:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b14:	4a2d      	ldr	r2, [pc, #180]	@ (8007bcc <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8007b16:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007b1a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007b1c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007b20:	ee07 3a10 	vmov	s14, r3
 8007b24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007b28:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b32:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007b36:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b3a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007b3c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007b40:	ee07 3a10 	vmov	s14, r3
 8007b44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b50:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007b54:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007b58:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007b5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007b5e:	ee06 3a90 	vmov	s13, r3
 8007b62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007b66:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007b6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007b6e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007b72:	ee17 3a90 	vmov	r3, s15
 8007b76:	6083      	str	r3, [r0, #8]
}
 8007b78:	4770      	bx	lr
 8007b7a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b7c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007b80:	6083      	str	r3, [r0, #8]
}
 8007b82:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b84:	6813      	ldr	r3, [r2, #0]
 8007b86:	069b      	lsls	r3, r3, #26
 8007b88:	d5b1      	bpl.n	8007aee <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b8a:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b8c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007b90:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b92:	4910      	ldr	r1, [pc, #64]	@ (8007bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8007b94:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b9c:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	ee06 1a10 	vmov	s12, r1
 8007ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007baa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007bae:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007bb2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007bb6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bbe:	e7a9      	b.n	8007b14 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bc0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007bc4:	e795      	b.n	8007af2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bc6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007bdc <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8007bca:	e792      	b.n	8007af2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	4c742400 	.word	0x4c742400
 8007bd4:	03d09000 	.word	0x03d09000
 8007bd8:	4bbebc20 	.word	0x4bbebc20
 8007bdc:	4a742400 	.word	0x4a742400

08007be0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007be0:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8007be4:	430b      	orrs	r3, r1
{
 8007be6:	b500      	push	{lr}
 8007be8:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007bea:	d071      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007bec:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	d033      	beq.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007bf4:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	f000 80c6 	beq.w	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007bfe:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8007c02:	430b      	orrs	r3, r1
 8007c04:	d078      	beq.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007c06:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	f000 80d3 	beq.w	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007c10:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8007c14:	430b      	orrs	r3, r1
 8007c16:	f000 812c 	beq.w	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c1a:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	f000 8140 	beq.w	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007c24:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	f000 8103 	beq.w	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007c2e:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8007c32:	4308      	orrs	r0, r1
 8007c34:	d137      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007c36:	4b96      	ldr	r3, [pc, #600]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8007c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c42:	d07f      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c48:	f000 8167 	beq.w	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8007c4c:	bb5b      	cbnz	r3, 8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007c4e:	4b90      	ldr	r3, [pc, #576]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007c56:	d038      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = HSE_VALUE;
 8007c58:	488e      	ldr	r0, [pc, #568]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007c5a:	e036      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007c5c:	4a8c      	ldr	r2, [pc, #560]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007c5e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007c60:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8007c64:	2b80      	cmp	r3, #128	@ 0x80
 8007c66:	f000 808b 	beq.w	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007c6a:	d920      	bls.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8007c6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c6e:	d02b      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c74:	d117      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c76:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c78:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c7e:	0749      	lsls	r1, r1, #29
 8007c80:	d502      	bpl.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80c9 	beq.w	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c88:	4a81      	ldr	r2, [pc, #516]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007c8a:	6812      	ldr	r2, [r2, #0]
 8007c8c:	05d0      	lsls	r0, r2, #23
 8007c8e:	d503      	bpl.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c94:	f000 80cc 	beq.w	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c98:	4a7d      	ldr	r2, [pc, #500]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	0391      	lsls	r1, r2, #14
 8007c9e:	d502      	bpl.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ca4:	d0d8      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 8007ca6:	2000      	movs	r0, #0
}
 8007ca8:	b005      	add	sp, #20
 8007caa:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d03f      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007cb2:	2b40      	cmp	r3, #64	@ 0x40
 8007cb4:	d1f7      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cb6:	6810      	ldr	r0, [r2, #0]
 8007cb8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007cbc:	d005      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cbe:	a801      	add	r0, sp, #4
 8007cc0:	f7ff fdc0 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cc4:	9801      	ldr	r0, [sp, #4]
 8007cc6:	e000      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cc8:	4873      	ldr	r0, [pc, #460]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
}
 8007cca:	b005      	add	sp, #20
 8007ccc:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd4:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d8e4      	bhi.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007d45 	.word	0x08007d45
 8007ce8:	08007d51 	.word	0x08007d51
 8007cec:	08007d61 	.word	0x08007d61
 8007cf0:	08007cc9 	.word	0x08007cc9
 8007cf4:	08007d5d 	.word	0x08007d5d
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007cf8:	4a65      	ldr	r2, [pc, #404]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007cfa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007cfc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8007d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d04:	d03c      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007d06:	d935      	bls.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007d08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d0c:	d0dc      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007d0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d12:	d1c8      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d14:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d16:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d1c:	0752      	lsls	r2, r2, #29
 8007d1e:	d5b3      	bpl.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1b1      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d24:	4b5a      	ldr	r3, [pc, #360]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d26:	485d      	ldr	r0, [pc, #372]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007d2e:	40d8      	lsrs	r0, r3
 8007d30:	e7cb      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d32:	6810      	ldr	r0, [r2, #0]
 8007d34:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8007d38:	d0c7      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d3a:	a801      	add	r0, sp, #4
 8007d3c:	f7ff feb6 	bl	8007aac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d40:	9802      	ldr	r0, [sp, #8]
 8007d42:	e7c2      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d44:	4b52      	ldr	r3, [pc, #328]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8007d4c:	d0bd      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007d4e:	e7f4      	b.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d50:	4b4f      	ldr	r3, [pc, #316]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007d58:	d0b7      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007d5a:	e7b0      	b.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d5e:	e78a      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d60:	4b4b      	ldr	r3, [pc, #300]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007d68:	d0af      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d6a:	a801      	add	r0, sp, #4
 8007d6c:	f7ff fe04 	bl	8007978 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d70:	9801      	ldr	r0, [sp, #4]
 8007d72:	e7aa      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0dc      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d7c:	d09b      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007d7e:	e792      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d80:	6810      	ldr	r0, [r2, #0]
 8007d82:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007d86:	d0a0      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007d88:	e7ef      	b.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007d8a:	4a41      	ldr	r2, [pc, #260]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007d8c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007d8e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
    switch (saiclocksource)
 8007d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d96:	d0f3      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007d98:	d805      	bhi.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0c9      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da2:	d088      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007da4:	e77f      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007da6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007daa:	d08d      	beq.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007db0:	f43f af61 	beq.w	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8007db4:	e777      	b.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007db6:	4a36      	ldr	r2, [pc, #216]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007db8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007dba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8007dbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007dc2:	d025      	beq.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8007dc4:	d80f      	bhi.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8007dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dca:	d048      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8007dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dd0:	d116      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dd2:	6810      	ldr	r0, [r2, #0]
 8007dd4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007dd8:	f43f af77 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ddc:	a801      	add	r0, sp, #4
 8007dde:	f7ff fdcb 	bl	8007978 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007de2:	9802      	ldr	r0, [sp, #8]
 8007de4:	e771      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 8007de6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007dea:	d01c      	beq.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8007dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007df0:	f47f af59 	bne.w	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007df4:	6810      	ldr	r0, [r2, #0]
 8007df6:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007dfa:	f43f af66 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007dfe:	e72b      	b.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f47f af50 	bne.w	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
}
 8007e06:	b005      	add	sp, #20
 8007e08:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e0c:	f7fe bcd6 	b.w	80067bc <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e10:	6810      	ldr	r0, [r2, #0]
 8007e12:	f010 0004 	ands.w	r0, r0, #4
 8007e16:	f43f af58 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	481f      	ldr	r0, [pc, #124]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e1e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007e22:	40d8      	lsrs	r0, r3
 8007e24:	e751      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e26:	6810      	ldr	r0, [r2, #0]
 8007e28:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8007e2c:	f43f af4d 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = CSI_VALUE;
 8007e30:	481b      	ldr	r0, [pc, #108]	@ (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007e32:	e74a      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007e34:	4a16      	ldr	r2, [pc, #88]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e36:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007e38:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8007e3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e40:	d072      	beq.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8007e42:	d83e      	bhi.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8007e44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e48:	d067      	beq.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8007e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e4e:	d14b      	bne.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e50:	4b0f      	ldr	r3, [pc, #60]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007e58:	f43f af37 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007e5c:	e7be      	b.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e5e:	6810      	ldr	r0, [r2, #0]
 8007e60:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007e64:	f43f af31 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e68:	a801      	add	r0, sp, #4
 8007e6a:	f7ff fceb 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e6e:	9802      	ldr	r0, [sp, #8]
 8007e70:	e72b      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007e72:	4a07      	ldr	r2, [pc, #28]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007e74:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007e76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8007e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7e:	d042      	beq.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e84:	f43f af46 	beq.w	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f47f af0c 	bne.w	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007e8e:	e712      	b.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007e90:	58024400 	.word	0x58024400
 8007e94:	017d7840 	.word	0x017d7840
 8007e98:	00bb8000 	.word	0x00bb8000
 8007e9c:	03d09000 	.word	0x03d09000
 8007ea0:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007ea4:	4b23      	ldr	r3, [pc, #140]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007ea6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8007ea8:	03d2      	lsls	r2, r2, #15
 8007eaa:	f57f af4c 	bpl.w	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007eb4:	f43f af09 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb8:	a801      	add	r0, sp, #4
 8007eba:	f7ff fcc3 	bl	8007844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007ebe:	9803      	ldr	r0, [sp, #12]
 8007ec0:	e703      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 8007ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ec6:	f43f aec2 	beq.w	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007eca:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007ece:	f43f aefb 	beq.w	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed6:	f47f aee6 	bne.w	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007eda:	4b16      	ldr	r3, [pc, #88]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8007ee2:	f43f aef2 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007ee6:	e7a3      	b.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    switch (srcclk)
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f47f aedc 	bne.w	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007eee:	f7fe fc25 	bl	800673c <HAL_RCC_GetHCLKFreq>
 8007ef2:	4b10      	ldr	r3, [pc, #64]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007ef4:	4a10      	ldr	r2, [pc, #64]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007efc:	5cd3      	ldrb	r3, [r2, r3]
 8007efe:	f003 031f 	and.w	r3, r3, #31
 8007f02:	40d8      	lsrs	r0, r3
        break;
 8007f04:	e6e1      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f06:	6810      	ldr	r0, [r2, #0]
 8007f08:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007f0c:	f43f aedd 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f10:	a801      	add	r0, sp, #4
 8007f12:	f7ff fd31 	bl	8007978 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f16:	9803      	ldr	r0, [sp, #12]
 8007f18:	e6d7      	b.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f1a:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007f22:	f43f aed2 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007f26:	e79f      	b.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f28:	6810      	ldr	r0, [r2, #0]
 8007f2a:	f010 0004 	ands.w	r0, r0, #4
 8007f2e:	f43f aecc 	beq.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007f32:	e6f7      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8007f34:	58024400 	.word	0x58024400
 8007f38:	0800d0d8 	.word	0x0800d0d8

08007f3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f3c:	b538      	push	{r3, r4, r5, lr}

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007f3e:	4b20      	ldr	r3, [pc, #128]	@ (8007fc0 <RTC_ExitInitMode+0x84>)
{
 8007f40:	4604      	mov	r4, r0
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007f42:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f4a:	60da      	str	r2, [r3, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	0690      	lsls	r0, r2, #26
 8007f50:	d411      	bmi.n	8007f76 <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007f52:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc4 <RTC_ExitInitMode+0x88>)
 8007f54:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8007f56:	f7fa f87d 	bl	8002054 <HAL_GetTick>
 8007f5a:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007f5c:	e005      	b.n	8007f6a <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f5e:	f7fa f879 	bl	8002054 <HAL_GetTick>
 8007f62:	1b43      	subs	r3, r0, r5
 8007f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f68:	d825      	bhi.n	8007fb6 <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	069a      	lsls	r2, r3, #26
 8007f70:	d5f5      	bpl.n	8007f5e <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8007f72:	2000      	movs	r0, #0
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007f76:	699a      	ldr	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007f78:	4812      	ldr	r0, [pc, #72]	@ (8007fc4 <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007f7a:	f022 0220 	bic.w	r2, r2, #32
 8007f7e:	619a      	str	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007f80:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 8007f82:	f7fa f867 	bl	8002054 <HAL_GetTick>
 8007f86:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007f88:	e005      	b.n	8007f96 <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f8a:	f7fa f863 	bl	8002054 <HAL_GetTick>
 8007f8e:	1b43      	subs	r3, r0, r5
 8007f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f94:	d80a      	bhi.n	8007fac <RTC_ExitInitMode+0x70>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	069b      	lsls	r3, r3, #26
 8007f9c:	d5f5      	bpl.n	8007f8a <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 8007f9e:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007fa0:	4a07      	ldr	r2, [pc, #28]	@ (8007fc0 <RTC_ExitInitMode+0x84>)
 8007fa2:	6993      	ldr	r3, [r2, #24]
 8007fa4:	f043 0320 	orr.w	r3, r3, #32
 8007fa8:	6193      	str	r3, [r2, #24]
}
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8007fae:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fb0:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8007fb4:	e7f4      	b.n	8007fa0 <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8007fb8:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fba:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	58004000 	.word	0x58004000
 8007fc4:	0001005f 	.word	0x0001005f

08007fc8 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d046      	beq.n	800805a <HAL_RTC_Init+0x92>
{
 8007fcc:	b570      	push	{r4, r5, r6, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007fce:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d039      	beq.n	8008050 <HAL_RTC_Init+0x88>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007fdc:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007fde:	6822      	ldr	r2, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007fe0:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007fe4:	68d3      	ldr	r3, [r2, #12]
 8007fe6:	06db      	lsls	r3, r3, #27
 8007fe8:	d504      	bpl.n	8007ff4 <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 8007fea:	2301      	movs	r3, #1
 8007fec:	2000      	movs	r0, #0
 8007fee:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ff4:	21ca      	movs	r1, #202	@ 0xca
 8007ff6:	2353      	movs	r3, #83	@ 0x53
 8007ff8:	6251      	str	r1, [r2, #36]	@ 0x24
 8007ffa:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8007ffc:	68d5      	ldr	r5, [r2, #12]
 8007ffe:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 8008002:	d02c      	beq.n	800805e <HAL_RTC_Init+0x96>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008004:	6990      	ldr	r0, [r2, #24]
 8008006:	4929      	ldr	r1, [pc, #164]	@ (80080ac <HAL_RTC_Init+0xe4>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800800c:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800800e:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008010:	6191      	str	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008012:	69a1      	ldr	r1, [r4, #24]
 8008014:	6990      	ldr	r0, [r2, #24]
 8008016:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008018:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800801a:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 800801c:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800801e:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008020:	68e3      	ldr	r3, [r4, #12]
 8008022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008026:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8008028:	f7ff ff88 	bl	8007f3c <RTC_ExitInitMode>
      if(status == HAL_OK)
 800802c:	2800      	cmp	r0, #0
 800802e:	d133      	bne.n	8008098 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008030:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008032:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008034:	6991      	ldr	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008036:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800803a:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800803e:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008040:	6191      	str	r1, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008042:	21ff      	movs	r1, #255	@ 0xff
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008044:	4303      	orrs	r3, r0
 8008046:	6990      	ldr	r0, [r2, #24]
 8008048:	4303      	orrs	r3, r0
 800804a:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800804c:	6251      	str	r1, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 800804e:	e7cc      	b.n	8007fea <HAL_RTC_Init+0x22>
      hrtc->Lock = HAL_UNLOCKED;
 8008050:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
      HAL_RTC_MspInit(hrtc);
 8008054:	f7f9 fe90 	bl	8001d78 <HAL_RTC_MspInit>
 8008058:	e7c0      	b.n	8007fdc <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 800805a:	2001      	movs	r0, #1
}
 800805c:	4770      	bx	lr
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800805e:	68d3      	ldr	r3, [r2, #12]
 8008060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008064:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8008066:	f7f9 fff5 	bl	8002054 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800806a:	4629      	mov	r1, r5
    tickstart = HAL_GetTick();
 800806c:	4606      	mov	r6, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800806e:	e008      	b.n	8008082 <HAL_RTC_Init+0xba>
 8008070:	2903      	cmp	r1, #3
 8008072:	d00d      	beq.n	8008090 <HAL_RTC_Init+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008074:	f7f9 ffee 	bl	8002054 <HAL_GetTick>
 8008078:	1b80      	subs	r0, r0, r6
 800807a:	4629      	mov	r1, r5
 800807c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008080:	d80e      	bhi.n	80080a0 <HAL_RTC_Init+0xd8>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	68d5      	ldr	r5, [r2, #12]
 8008086:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 800808a:	d0f1      	beq.n	8008070 <HAL_RTC_Init+0xa8>
      if (status == HAL_OK)
 800808c:	2900      	cmp	r1, #0
 800808e:	d0b9      	beq.n	8008004 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008090:	23ff      	movs	r3, #255	@ 0xff
 8008092:	2003      	movs	r0, #3
 8008094:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8008096:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	22ff      	movs	r2, #255	@ 0xff
 800809c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800809e:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 80080a2:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a4:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 80080a8:	e7eb      	b.n	8008082 <HAL_RTC_Init+0xba>
 80080aa:	bf00      	nop
 80080ac:	fb8fffbf 	.word	0xfb8fffbf

080080b0 <HAL_RTC_SetTime>:
{
 80080b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 80080b4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d065      	beq.n	8008188 <HAL_RTC_SetTime+0xd8>
 80080bc:	2301      	movs	r3, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080be:	6805      	ldr	r5, [r0, #0]
 80080c0:	4681      	mov	r9, r0
 80080c2:	460f      	mov	r7, r1
  __HAL_LOCK(hrtc);
 80080c4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 80080c8:	2302      	movs	r3, #2
 80080ca:	4616      	mov	r6, r2
 80080cc:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080d0:	23ca      	movs	r3, #202	@ 0xca
 80080d2:	626b      	str	r3, [r5, #36]	@ 0x24
 80080d4:	2353      	movs	r3, #83	@ 0x53
 80080d6:	626b      	str	r3, [r5, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80080d8:	68ec      	ldr	r4, [r5, #12]
 80080da:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 80080de:	d030      	beq.n	8008142 <HAL_RTC_SetTime+0x92>
    if(Format == RTC_FORMAT_BIN)
 80080e0:	2e00      	cmp	r6, #0
 80080e2:	d154      	bne.n	800818e <HAL_RTC_SetTime+0xde>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80080e4:	69a8      	ldr	r0, [r5, #24]
 80080e6:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 80080ea:	d07d      	beq.n	80081e8 <HAL_RTC_SetTime+0x138>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80080ec:	78f8      	ldrb	r0, [r7, #3]
 80080ee:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80080f0:	783b      	ldrb	r3, [r7, #0]
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t  bcdlow  = Value;

  while (bcdlow >= 10U)
 80080f2:	2b09      	cmp	r3, #9
 80080f4:	d908      	bls.n	8008108 <HAL_RTC_SetTime+0x58>
  uint32_t bcdhigh = 0U;
 80080f6:	2200      	movs	r2, #0
  {
    bcdhigh++;
    bcdlow -= 10U;
 80080f8:	3b0a      	subs	r3, #10
    bcdhigh++;
 80080fa:	3201      	adds	r2, #1
    bcdlow -= 10U;
 80080fc:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 80080fe:	2b09      	cmp	r3, #9
 8008100:	d8fa      	bhi.n	80080f8 <HAL_RTC_SetTime+0x48>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008102:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008106:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008108:	787a      	ldrb	r2, [r7, #1]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800810a:	041b      	lsls	r3, r3, #16
  while (bcdlow >= 10U)
 800810c:	2a09      	cmp	r2, #9
 800810e:	d908      	bls.n	8008122 <HAL_RTC_SetTime+0x72>
  uint32_t bcdhigh = 0U;
 8008110:	2100      	movs	r1, #0
    bcdlow -= 10U;
 8008112:	3a0a      	subs	r2, #10
    bcdhigh++;
 8008114:	3101      	adds	r1, #1
    bcdlow -= 10U;
 8008116:	b2d2      	uxtb	r2, r2
  while (bcdlow >= 10U)
 8008118:	2a09      	cmp	r2, #9
 800811a:	d8fa      	bhi.n	8008112 <HAL_RTC_SetTime+0x62>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800811c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8008120:	b2d2      	uxtb	r2, r2
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008122:	78b9      	ldrb	r1, [r7, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008124:	0212      	lsls	r2, r2, #8
  while (bcdlow >= 10U)
 8008126:	2909      	cmp	r1, #9
 8008128:	d907      	bls.n	800813a <HAL_RTC_SetTime+0x8a>
    bcdlow -= 10U;
 800812a:	390a      	subs	r1, #10
    bcdhigh++;
 800812c:	3601      	adds	r6, #1
    bcdlow -= 10U;
 800812e:	b2c9      	uxtb	r1, r1
  while (bcdlow >= 10U)
 8008130:	2909      	cmp	r1, #9
 8008132:	d8fa      	bhi.n	800812a <HAL_RTC_SetTime+0x7a>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008134:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8008138:	b2c9      	uxtb	r1, r1
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800813a:	4303      	orrs	r3, r0
 800813c:	4313      	orrs	r3, r2
 800813e:	430b      	orrs	r3, r1
 8008140:	e033      	b.n	80081aa <HAL_RTC_SetTime+0xfa>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008142:	68eb      	ldr	r3, [r5, #12]
 8008144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008148:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800814a:	f7f9 ff83 	bl	8002054 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800814e:	4622      	mov	r2, r4
    tickstart = HAL_GetTick();
 8008150:	4680      	mov	r8, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008152:	e009      	b.n	8008168 <HAL_RTC_SetTime+0xb8>
 8008154:	2a03      	cmp	r2, #3
 8008156:	d00f      	beq.n	8008178 <HAL_RTC_SetTime+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008158:	f7f9 ff7c 	bl	8002054 <HAL_GetTick>
 800815c:	eba0 0308 	sub.w	r3, r0, r8
 8008160:	4622      	mov	r2, r4
 8008162:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008166:	d83a      	bhi.n	80081de <HAL_RTC_SetTime+0x12e>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008168:	f8d9 5000 	ldr.w	r5, [r9]
 800816c:	68ec      	ldr	r4, [r5, #12]
 800816e:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8008172:	d0ef      	beq.n	8008154 <HAL_RTC_SetTime+0xa4>
  if (status == HAL_OK)
 8008174:	2a00      	cmp	r2, #0
 8008176:	d0b3      	beq.n	80080e0 <HAL_RTC_SetTime+0x30>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008178:	23ff      	movs	r3, #255	@ 0xff
 800817a:	2003      	movs	r0, #3
 800817c:	626b      	str	r3, [r5, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800817e:	2300      	movs	r3, #0
 8008180:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
}
 8008184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 8008188:	2002      	movs	r0, #2
}
 800818a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800818e:	69aa      	ldr	r2, [r5, #24]
 8008190:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 8008194:	d02a      	beq.n	80081ec <HAL_RTC_SetTime+0x13c>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	0592      	lsls	r2, r2, #22
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800819a:	787b      	ldrb	r3, [r7, #1]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800819c:	7839      	ldrb	r1, [r7, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800819e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80081a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80081a4:	78b9      	ldrb	r1, [r7, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80081a6:	430b      	orrs	r3, r1
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80081a8:	4313      	orrs	r3, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80081aa:	4a11      	ldr	r2, [pc, #68]	@ (80081f0 <HAL_RTC_SetTime+0x140>)
    status = RTC_ExitInitMode(hrtc);
 80081ac:	4648      	mov	r0, r9
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80081ae:	401a      	ands	r2, r3
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80081b0:	e9d7 3103 	ldrd	r3, r1, [r7, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80081b4:	602a      	str	r2, [r5, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80081b6:	69aa      	ldr	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80081b8:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80081ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80081be:	61aa      	str	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80081c0:	69aa      	ldr	r2, [r5, #24]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	61ab      	str	r3, [r5, #24]
    status = RTC_ExitInitMode(hrtc);
 80081c6:	f7ff feb9 	bl	8007f3c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ca:	f8d9 3000 	ldr.w	r3, [r9]
 80081ce:	22ff      	movs	r2, #255	@ 0xff
 80081d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d1d3      	bne.n	800817e <HAL_RTC_SetTime+0xce>
    hrtc->State = HAL_RTC_STATE_READY;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 80081dc:	e7cf      	b.n	800817e <HAL_RTC_SetTime+0xce>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081de:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 80081e0:	461a      	mov	r2, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081e2:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 80081e6:	e7bf      	b.n	8008168 <HAL_RTC_SetTime+0xb8>
        sTime->TimeFormat = 0x00U;
 80081e8:	70fe      	strb	r6, [r7, #3]
 80081ea:	e781      	b.n	80080f0 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 80081ec:	70fa      	strb	r2, [r7, #3]
 80081ee:	e7d4      	b.n	800819a <HAL_RTC_SetTime+0xea>
 80081f0:	007f7f7f 	.word	0x007f7f7f

080081f4 <HAL_RTC_SetDate>:
{
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80081f6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	f000 808b 	beq.w	8008316 <HAL_RTC_SetDate+0x122>
 8008200:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008202:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8008204:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008206:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_LOCK(hrtc);
 800820a:	f885 0024 	strb.w	r0, [r5, #36]	@ 0x24
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800820e:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008210:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008212:	f891 c001 	ldrb.w	ip, [r1, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008216:	0376      	lsls	r6, r6, #13
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008218:	7888      	ldrb	r0, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800821a:	b1f2      	cbz	r2, 800825a <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800821c:	ea46 4403 	orr.w	r4, r6, r3, lsl #16
 8008220:	4304      	orrs	r4, r0
 8008222:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008226:	682a      	ldr	r2, [r5, #0]
 8008228:	21ca      	movs	r1, #202	@ 0xca
 800822a:	2353      	movs	r3, #83	@ 0x53
 800822c:	6251      	str	r1, [r2, #36]	@ 0x24
 800822e:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008230:	68d6      	ldr	r6, [r2, #12]
 8008232:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 8008236:	d049      	beq.n	80082cc <HAL_RTC_SetDate+0xd8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008238:	4b39      	ldr	r3, [pc, #228]	@ (8008320 <HAL_RTC_SetDate+0x12c>)
    status = RTC_ExitInitMode(hrtc);
 800823a:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800823c:	4023      	ands	r3, r4
 800823e:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8008240:	f7ff fe7c 	bl	8007f3c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	22ff      	movs	r2, #255	@ 0xff
 8008248:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800824a:	b910      	cbnz	r0, 8008252 <HAL_RTC_SetDate+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 800824c:	2301      	movs	r3, #1
 800824e:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_UNLOCK(hrtc);
 8008252:	2300      	movs	r3, #0
 8008254:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
}
 8008258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800825a:	f01c 0f10 	tst.w	ip, #16
 800825e:	d052      	beq.n	8008306 <HAL_RTC_SetDate+0x112>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008260:	f02c 0c10 	bic.w	ip, ip, #16
  while (bcdlow >= 10U)
 8008264:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008266:	f10c 0c0a 	add.w	ip, ip, #10
 800826a:	fa5f fc8c 	uxtb.w	ip, ip
 800826e:	f881 c001 	strb.w	ip, [r1, #1]
  while (bcdlow >= 10U)
 8008272:	d952      	bls.n	800831a <HAL_RTC_SetDate+0x126>
  uint32_t bcdhigh = 0U;
 8008274:	2100      	movs	r1, #0
    bcdlow -= 10U;
 8008276:	3b0a      	subs	r3, #10
    bcdhigh++;
 8008278:	3101      	adds	r1, #1
    bcdlow -= 10U;
 800827a:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800827c:	2b09      	cmp	r3, #9
 800827e:	d8fa      	bhi.n	8008276 <HAL_RTC_SetDate+0x82>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008280:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8008284:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 8008286:	f1bc 0f09 	cmp.w	ip, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800828a:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (bcdlow >= 10U)
 800828e:	d90c      	bls.n	80082aa <HAL_RTC_SetDate+0xb6>
  uint32_t bcdhigh = 0U;
 8008290:	2300      	movs	r3, #0
    bcdlow -= 10U;
 8008292:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 8008296:	3301      	adds	r3, #1
    bcdlow -= 10U;
 8008298:	fa5f fc8c 	uxtb.w	ip, ip
  while (bcdlow >= 10U)
 800829c:	f1bc 0f09 	cmp.w	ip, #9
 80082a0:	d8f7      	bhi.n	8008292 <HAL_RTC_SetDate+0x9e>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80082a2:	ea4c 1303 	orr.w	r3, ip, r3, lsl #4
 80082a6:	fa5f fc83 	uxtb.w	ip, r3
  while (bcdlow >= 10U)
 80082aa:	2809      	cmp	r0, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80082ac:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  while (bcdlow >= 10U)
 80082b0:	d907      	bls.n	80082c2 <HAL_RTC_SetDate+0xce>
    bcdlow -= 10U;
 80082b2:	380a      	subs	r0, #10
    bcdhigh++;
 80082b4:	3201      	adds	r2, #1
    bcdlow -= 10U;
 80082b6:	b2c0      	uxtb	r0, r0
  while (bcdlow >= 10U)
 80082b8:	2809      	cmp	r0, #9
 80082ba:	d8fa      	bhi.n	80082b2 <HAL_RTC_SetDate+0xbe>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80082bc:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80082c0:	b2d0      	uxtb	r0, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80082c2:	4334      	orrs	r4, r6
 80082c4:	ea44 040c 	orr.w	r4, r4, ip
 80082c8:	4304      	orrs	r4, r0
 80082ca:	e7ac      	b.n	8008226 <HAL_RTC_SetDate+0x32>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80082cc:	68d3      	ldr	r3, [r2, #12]
 80082ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d2:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80082d4:	f7f9 febe 	bl	8002054 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 80082d8:	4631      	mov	r1, r6
    tickstart = HAL_GetTick();
 80082da:	4607      	mov	r7, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80082dc:	e008      	b.n	80082f0 <HAL_RTC_SetDate+0xfc>
 80082de:	2903      	cmp	r1, #3
 80082e0:	d00d      	beq.n	80082fe <HAL_RTC_SetDate+0x10a>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80082e2:	f7f9 feb7 	bl	8002054 <HAL_GetTick>
 80082e6:	1bc0      	subs	r0, r0, r7
 80082e8:	4631      	mov	r1, r6
 80082ea:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80082ee:	d80d      	bhi.n	800830c <HAL_RTC_SetDate+0x118>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80082f0:	682a      	ldr	r2, [r5, #0]
 80082f2:	68d6      	ldr	r6, [r2, #12]
 80082f4:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 80082f8:	d0f1      	beq.n	80082de <HAL_RTC_SetDate+0xea>
  if (status == HAL_OK)
 80082fa:	2900      	cmp	r1, #0
 80082fc:	d09c      	beq.n	8008238 <HAL_RTC_SetDate+0x44>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082fe:	23ff      	movs	r3, #255	@ 0xff
 8008300:	2003      	movs	r0, #3
 8008302:	6253      	str	r3, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 8008304:	e7a5      	b.n	8008252 <HAL_RTC_SetDate+0x5e>
  while (bcdlow >= 10U)
 8008306:	2b09      	cmp	r3, #9
 8008308:	d8b4      	bhi.n	8008274 <HAL_RTC_SetDate+0x80>
 800830a:	e7bc      	b.n	8008286 <HAL_RTC_SetDate+0x92>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800830c:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800830e:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008310:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8008314:	e7ec      	b.n	80082f0 <HAL_RTC_SetDate+0xfc>
  __HAL_LOCK(hrtc);
 8008316:	2002      	movs	r0, #2
}
 8008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800831a:	041c      	lsls	r4, r3, #16
  while (bcdlow >= 10U)
 800831c:	e7b8      	b.n	8008290 <HAL_RTC_SetDate+0x9c>
 800831e:	bf00      	nop
 8008320:	00ffff3f 	.word	0x00ffff3f

08008324 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	4605      	mov	r5, r0
 800832a:	b086      	sub	sp, #24
 800832c:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800832e:	f7f9 fe91 	bl	8002054 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008332:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8008334:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008336:	6828      	ldr	r0, [r5, #0]
 8008338:	f001 fa26 	bl	8009788 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800833c:	4604      	mov	r4, r0
 800833e:	b118      	cbz	r0, 8008348 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8008340:	4620      	mov	r0, r4
 8008342:	b006      	add	sp, #24
 8008344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008348:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 800834a:	6828      	ldr	r0, [r5, #0]
 800834c:	0409      	lsls	r1, r1, #16
 800834e:	f001 ff93 	bl	800a278 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008352:	4604      	mov	r4, r0
 8008354:	2800      	cmp	r0, #0
 8008356:	d1f3      	bne.n	8008340 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 8008358:	f04f 32ff 	mov.w	r2, #4294967295
 800835c:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800835e:	4669      	mov	r1, sp
 8008360:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8008362:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008366:	2230      	movs	r2, #48	@ 0x30
 8008368:	2302      	movs	r3, #2
 800836a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800836e:	2200      	movs	r2, #0
 8008370:	2301      	movs	r3, #1
 8008372:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008376:	f001 f9f1 	bl	800975c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800837a:	6828      	ldr	r0, [r5, #0]
 800837c:	f002 f910 	bl	800a5a0 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008380:	4604      	mov	r4, r0
 8008382:	2800      	cmp	r0, #0
 8008384:	d1dc      	bne.n	8008340 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008386:	4682      	mov	sl, r0
 8008388:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800838a:	f240 582a 	movw	r8, #1322	@ 0x52a
 800838e:	e004      	b.n	800839a <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008390:	f7f9 fe60 	bl	8002054 <HAL_GetTick>
 8008394:	1b83      	subs	r3, r0, r6
 8008396:	3301      	adds	r3, #1
 8008398:	d024      	beq.n	80083e4 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800839a:	6828      	ldr	r0, [r5, #0]
 800839c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800839e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80083a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80083a4:	d10c      	bne.n	80083c0 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80083a6:	0319      	lsls	r1, r3, #12
 80083a8:	d4f2      	bmi.n	8008390 <SD_FindSCR.constprop.0+0x6c>
 80083aa:	2c00      	cmp	r4, #0
 80083ac:	d1f0      	bne.n	8008390 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80083ae:	f001 f9bb 	bl	8009728 <SDMMC_ReadFIFO>
 80083b2:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80083b4:	6828      	ldr	r0, [r5, #0]
      index++;
 80083b6:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80083b8:	f001 f9b6 	bl	8009728 <SDMMC_ReadFIFO>
 80083bc:	4682      	mov	sl, r0
      index++;
 80083be:	e7e7      	b.n	8008390 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083c0:	071a      	lsls	r2, r3, #28
 80083c2:	d416      	bmi.n	80083f2 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80083c4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80083c6:	079b      	lsls	r3, r3, #30
 80083c8:	d40f      	bmi.n	80083ea <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80083ca:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80083cc:	f014 0420 	ands.w	r4, r4, #32
 80083d0:	d113      	bne.n	80083fa <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083d2:	fa9a f28a 	rev.w	r2, sl
 80083d6:	fa99 f389 	rev.w	r3, r9
 80083da:	490a      	ldr	r1, [pc, #40]	@ (8008404 <SD_FindSCR.constprop.0+0xe0>)
 80083dc:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80083de:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 80083e2:	e7ad      	b.n	8008340 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 80083e4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80083e8:	e7aa      	b.n	8008340 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80083ea:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083ec:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80083ee:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083f0:	e7a6      	b.n	8008340 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80083f2:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083f4:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80083f6:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083f8:	e7a2      	b.n	8008340 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80083fa:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 80083fc:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80083fe:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8008400:	e79e      	b.n	8008340 <SD_FindSCR.constprop.0+0x1c>
 8008402:	bf00      	nop
 8008404:	18000f3a 	.word	0x18000f3a

08008408 <HAL_SD_ReadBlocks>:
{
 8008408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	460d      	mov	r5, r1
 800840e:	b086      	sub	sp, #24
 8008410:	4604      	mov	r4, r0
 8008412:	4691      	mov	r9, r2
 8008414:	461f      	mov	r7, r3
 8008416:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 800841a:	f7f9 fe1b 	bl	8002054 <HAL_GetTick>
  if (NULL == pData)
 800841e:	2d00      	cmp	r5, #0
 8008420:	d065      	beq.n	80084ee <HAL_SD_ReadBlocks+0xe6>
  if (hsd->State == HAL_SD_STATE_READY)
 8008422:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008426:	2b01      	cmp	r3, #1
 8008428:	d152      	bne.n	80084d0 <HAL_SD_ReadBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800842a:	eb09 0307 	add.w	r3, r9, r7
 800842e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008430:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008432:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008434:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008436:	d85f      	bhi.n	80084f8 <HAL_SD_ReadBlocks+0xf0>
    hsd->State = HAL_SD_STATE_BUSY;
 8008438:	2303      	movs	r3, #3
 800843a:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 800843c:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800843e:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8008442:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008446:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 8008448:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800844a:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800844c:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800844e:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008452:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008456:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 800845a:	bf18      	it	ne
 800845c:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008460:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008462:	027b      	lsls	r3, r7, #9
 8008464:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008466:	2390      	movs	r3, #144	@ 0x90
 8008468:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800846c:	f001 f976 	bl	800975c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008470:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 8008472:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008474:	68c3      	ldr	r3, [r0, #12]
 8008476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847a:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 800847c:	d931      	bls.n	80084e2 <HAL_SD_ReadBlocks+0xda>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800847e:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008480:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008484:	f001 fad8 	bl	8009a38 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008488:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800848a:	2800      	cmp	r0, #0
 800848c:	d139      	bne.n	8008502 <HAL_SD_ReadBlocks+0xfa>
    dataremaining = config.DataLength;
 800848e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008492:	e005      	b.n	80084a0 <HAL_SD_ReadBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008494:	f7f9 fdde 	bl	8002054 <HAL_GetTick>
 8008498:	1b82      	subs	r2, r0, r6
 800849a:	4542      	cmp	r2, r8
 800849c:	d25c      	bcs.n	8008558 <HAL_SD_ReadBlocks+0x150>
 800849e:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084a0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80084a2:	4610      	mov	r0, r2
 80084a4:	f413 7f95 	tst.w	r3, #298	@ 0x12a
 80084a8:	d136      	bne.n	8008518 <HAL_SD_ReadBlocks+0x110>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80084aa:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80084ac:	041a      	lsls	r2, r3, #16
 80084ae:	d5f1      	bpl.n	8008494 <HAL_SD_ReadBlocks+0x8c>
 80084b0:	f1b9 0f1f 	cmp.w	r9, #31
 80084b4:	d9ee      	bls.n	8008494 <HAL_SD_ReadBlocks+0x8c>
 80084b6:	f105 0a20 	add.w	sl, r5, #32
 80084ba:	e000      	b.n	80084be <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 80084bc:	6820      	ldr	r0, [r4, #0]
 80084be:	f001 f933 	bl	8009728 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80084c2:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 80084c6:	45aa      	cmp	sl, r5
 80084c8:	d1f8      	bne.n	80084bc <HAL_SD_ReadBlocks+0xb4>
        dataremaining -= 32U;
 80084ca:	f1a9 0920 	sub.w	r9, r9, #32
 80084ce:	e7e1      	b.n	8008494 <HAL_SD_ReadBlocks+0x8c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80084d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084d6:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
}
 80084da:	4618      	mov	r0, r3
 80084dc:	b006      	add	sp, #24
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80084e2:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084e4:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80084e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084e8:	f001 f9fa 	bl	80098e0 <SDMMC_CmdReadSingleBlock>
 80084ec:	e7cc      	b.n	8008488 <HAL_SD_ReadBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084f4:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80084f6:	e7ef      	b.n	80084d8 <HAL_SD_ReadBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80084fe:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8008500:	e7ea      	b.n	80084d8 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008502:	4b31      	ldr	r3, [pc, #196]	@ (80085c8 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8008504:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008506:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800850a:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 800850c:	4303      	orrs	r3, r0
 800850e:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008510:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008514:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8008516:	e7df      	b.n	80084d8 <HAL_SD_ReadBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008518:	68d3      	ldr	r3, [r2, #12]
 800851a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800851e:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008520:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008522:	05db      	lsls	r3, r3, #23
 8008524:	d501      	bpl.n	800852a <HAL_SD_ReadBlocks+0x122>
 8008526:	2f01      	cmp	r7, #1
 8008528:	d824      	bhi.n	8008574 <HAL_SD_ReadBlocks+0x16c>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800852a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800852c:	f013 0308 	ands.w	r3, r3, #8
 8008530:	d133      	bne.n	800859a <HAL_SD_ReadBlocks+0x192>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008532:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008534:	f012 0202 	ands.w	r2, r2, #2
 8008538:	d124      	bne.n	8008584 <HAL_SD_ReadBlocks+0x17c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800853a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800853c:	f013 0320 	ands.w	r3, r3, #32
 8008540:	d037      	beq.n	80085b2 <HAL_SD_ReadBlocks+0x1aa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008542:	4b21      	ldr	r3, [pc, #132]	@ (80085c8 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8008544:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008546:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800854a:	f043 0320 	orr.w	r3, r3, #32
 800854e:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008550:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008554:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008556:	e7bf      	b.n	80084d8 <HAL_SD_ReadBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008558:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800855a:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800855c:	481a      	ldr	r0, [pc, #104]	@ (80085c8 <HAL_SD_ReadBlocks+0x1c0>)
        hsd->Context = SD_CONTEXT_NONE;
 800855e:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008560:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008562:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008564:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008568:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800856c:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008570:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008572:	e7b2      	b.n	80084da <HAL_SD_ReadBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008574:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008576:	2b03      	cmp	r3, #3
 8008578:	d0d7      	beq.n	800852a <HAL_SD_ReadBlocks+0x122>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800857a:	f001 fc61 	bl	8009e40 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800857e:	b9f0      	cbnz	r0, 80085be <HAL_SD_ReadBlocks+0x1b6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	e7d2      	b.n	800852a <HAL_SD_ReadBlocks+0x122>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008584:	4a10      	ldr	r2, [pc, #64]	@ (80085c8 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8008586:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008588:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800858a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800858c:	f042 0202 	orr.w	r2, r2, #2
 8008590:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008592:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008596:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008598:	e79e      	b.n	80084d8 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800859a:	4b0b      	ldr	r3, [pc, #44]	@ (80085c8 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800859c:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800859e:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085a0:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085a4:	f043 0308 	orr.w	r3, r3, #8
 80085a8:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085aa:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085ae:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 80085b0:	e792      	b.n	80084d8 <HAL_SD_ReadBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085b2:	4906      	ldr	r1, [pc, #24]	@ (80085cc <HAL_SD_ReadBlocks+0x1c4>)
    hsd->State = HAL_SD_STATE_READY;
 80085b4:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085b6:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085b8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 80085bc:	e78d      	b.n	80084da <HAL_SD_ReadBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085be:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80085c0:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085c2:	4a01      	ldr	r2, [pc, #4]	@ (80085c8 <HAL_SD_ReadBlocks+0x1c0>)
 80085c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80085c6:	e79f      	b.n	8008508 <HAL_SD_ReadBlocks+0x100>
 80085c8:	1fe00fff 	.word	0x1fe00fff
 80085cc:	18000f3a 	.word	0x18000f3a

080085d0 <HAL_SD_WriteBlocks>:
{
 80085d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	460d      	mov	r5, r1
 80085d6:	b088      	sub	sp, #32
 80085d8:	4604      	mov	r4, r0
 80085da:	4691      	mov	r9, r2
 80085dc:	461f      	mov	r7, r3
 80085de:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80085e2:	f7f9 fd37 	bl	8002054 <HAL_GetTick>
  if (NULL == pData)
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	d064      	beq.n	80086b4 <HAL_SD_WriteBlocks+0xe4>
  if (hsd->State == HAL_SD_STATE_READY)
 80085ea:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d152      	bne.n	8008698 <HAL_SD_WriteBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085f2:	eb09 0307 	add.w	r3, r9, r7
 80085f6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085f8:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085fa:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085fc:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085fe:	d85e      	bhi.n	80086be <HAL_SD_WriteBlocks+0xee>
    hsd->State = HAL_SD_STATE_BUSY;
 8008600:	2303      	movs	r3, #3
 8008602:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8008604:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8008606:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800860a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 800860c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800860e:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008610:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008612:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008616:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800861a:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800861c:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8008620:	bf18      	it	ne
 8008622:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008626:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008628:	027b      	lsls	r3, r7, #9
 800862a:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800862c:	2390      	movs	r3, #144	@ 0x90
 800862e:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008630:	f001 f894 	bl	800975c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008634:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 8008636:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008638:	4649      	mov	r1, r9
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800863a:	68c3      	ldr	r3, [r0, #12]
 800863c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008640:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8008642:	d932      	bls.n	80086aa <HAL_SD_WriteBlocks+0xda>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008644:	2320      	movs	r3, #32
 8008646:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008648:	f001 fb4e 	bl	8009ce8 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800864c:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800864e:	2800      	cmp	r0, #0
 8008650:	d13a      	bne.n	80086c8 <HAL_SD_WriteBlocks+0xf8>
    dataremaining = config.DataLength;
 8008652:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008656:	e005      	b.n	8008664 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008658:	f7f9 fcfc 	bl	8002054 <HAL_GetTick>
 800865c:	1b82      	subs	r2, r0, r6
 800865e:	4542      	cmp	r2, r8
 8008660:	d25d      	bcs.n	800871e <HAL_SD_WriteBlocks+0x14e>
 8008662:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008664:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008666:	4610      	mov	r0, r2
 8008668:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
 800866c:	d137      	bne.n	80086de <HAL_SD_WriteBlocks+0x10e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800866e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008670:	045a      	lsls	r2, r3, #17
 8008672:	d5f1      	bpl.n	8008658 <HAL_SD_WriteBlocks+0x88>
 8008674:	f1b9 0f1f 	cmp.w	r9, #31
 8008678:	d9ee      	bls.n	8008658 <HAL_SD_WriteBlocks+0x88>
 800867a:	f105 0a20 	add.w	sl, r5, #32
 800867e:	e000      	b.n	8008682 <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008680:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008682:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008686:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008688:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800868a:	f001 f851 	bl	8009730 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800868e:	4555      	cmp	r5, sl
 8008690:	d1f6      	bne.n	8008680 <HAL_SD_WriteBlocks+0xb0>
        dataremaining -= 32U;
 8008692:	f1a9 0920 	sub.w	r9, r9, #32
 8008696:	e7df      	b.n	8008658 <HAL_SD_WriteBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800869a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800869e:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	b008      	add	sp, #32
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80086aa:	2310      	movs	r3, #16
 80086ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086ae:	f001 fa6f 	bl	8009b90 <SDMMC_CmdWriteSingleBlock>
 80086b2:	e7cb      	b.n	800864c <HAL_SD_WriteBlocks+0x7c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086ba:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80086bc:	e7f0      	b.n	80086a0 <HAL_SD_WriteBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80086c4:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 80086c6:	e7eb      	b.n	80086a0 <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086c8:	4b30      	ldr	r3, [pc, #192]	@ (800878c <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 80086ca:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80086ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80086d0:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 80086d2:	4303      	orrs	r3, r0
 80086d4:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80086d6:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80086da:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80086dc:	e7e0      	b.n	80086a0 <HAL_SD_WriteBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80086de:	68d3      	ldr	r3, [r2, #12]
 80086e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086e4:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086e6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80086e8:	05db      	lsls	r3, r3, #23
 80086ea:	d501      	bpl.n	80086f0 <HAL_SD_WriteBlocks+0x120>
 80086ec:	2f01      	cmp	r7, #1
 80086ee:	d822      	bhi.n	8008736 <HAL_SD_WriteBlocks+0x166>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80086f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80086f2:	f013 0308 	ands.w	r3, r3, #8
 80086f6:	d131      	bne.n	800875c <HAL_SD_WriteBlocks+0x18c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80086f8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80086fa:	f012 0202 	ands.w	r2, r2, #2
 80086fe:	d122      	bne.n	8008746 <HAL_SD_WriteBlocks+0x176>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008700:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008702:	f013 0310 	ands.w	r3, r3, #16
 8008706:	d035      	beq.n	8008774 <HAL_SD_WriteBlocks+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008708:	4b20      	ldr	r3, [pc, #128]	@ (800878c <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800870a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800870c:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800870e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008710:	f043 0310 	orr.w	r3, r3, #16
 8008714:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008716:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800871a:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800871c:	e7c0      	b.n	80086a0 <HAL_SD_WriteBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800871e:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8008720:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008722:	481a      	ldr	r0, [pc, #104]	@ (800878c <HAL_SD_WriteBlocks+0x1bc>)
        hsd->Context = SD_CONTEXT_NONE;
 8008724:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008726:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008728:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800872a:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800872e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008732:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008734:	e7b5      	b.n	80086a2 <HAL_SD_WriteBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008736:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008738:	2b03      	cmp	r3, #3
 800873a:	d0d9      	beq.n	80086f0 <HAL_SD_WriteBlocks+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800873c:	f001 fb80 	bl	8009e40 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8008740:	b9f0      	cbnz	r0, 8008780 <HAL_SD_WriteBlocks+0x1b0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008742:	6820      	ldr	r0, [r4, #0]
 8008744:	e7d4      	b.n	80086f0 <HAL_SD_WriteBlocks+0x120>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008746:	4a11      	ldr	r2, [pc, #68]	@ (800878c <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 8008748:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800874a:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800874c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800874e:	f042 0202 	orr.w	r2, r2, #2
 8008752:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008754:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008758:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800875a:	e7a1      	b.n	80086a0 <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800875c:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800875e:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8008760:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008762:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008764:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008766:	f043 0308 	orr.w	r3, r3, #8
 800876a:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800876c:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008770:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008772:	e795      	b.n	80086a0 <HAL_SD_WriteBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008774:	4906      	ldr	r1, [pc, #24]	@ (8008790 <HAL_SD_WriteBlocks+0x1c0>)
    hsd->State = HAL_SD_STATE_READY;
 8008776:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008778:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800877a:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800877e:	e790      	b.n	80086a2 <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008780:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8008782:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008784:	4a01      	ldr	r2, [pc, #4]	@ (800878c <HAL_SD_WriteBlocks+0x1bc>)
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38
 8008788:	e7a1      	b.n	80086ce <HAL_SD_WriteBlocks+0xfe>
 800878a:	bf00      	nop
 800878c:	1fe00fff 	.word	0x1fe00fff
 8008790:	18000f3a 	.word	0x18000f3a

08008794 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008794:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 8008796:	4603      	mov	r3, r0
 8008798:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800879a:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800879e:	0f94      	lsrs	r4, r2, #30
 80087a0:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80087a2:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087a6:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80087a8:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80087ac:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80087ae:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80087b0:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80087b4:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80087b6:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80087b8:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80087ba:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80087bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80087be:	0d14      	lsrs	r4, r2, #20
 80087c0:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80087c2:	f3c2 4403 	ubfx	r4, r2, #16, #4
 80087c6:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80087c8:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 80087cc:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80087ce:	f3c2 3480 	ubfx	r4, r2, #14, #1
 80087d2:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80087d4:	f3c2 3440 	ubfx	r4, r2, #13, #1
 80087d8:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80087da:	f3c2 3400 	ubfx	r4, r2, #12, #1
 80087de:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80087e0:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80087e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d16f      	bne.n	80088c8 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80087e8:	f640 74fc 	movw	r4, #4092	@ 0xffc
 80087ec:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80087ee:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80087f2:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80087f6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80087fa:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80087fc:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008800:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008802:	f3c0 6402 	ubfx	r4, r0, #24, #3
 8008806:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008808:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800880c:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800880e:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008812:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008814:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008816:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008818:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800881a:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800881c:	f002 0207 	and.w	r2, r2, #7
 8008820:	3202      	adds	r2, #2
 8008822:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008824:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008826:	649c      	str	r4, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008828:	f891 c008 	ldrb.w	ip, [r1, #8]
 800882c:	f00c 0c0f 	and.w	ip, ip, #15
 8008830:	fa02 f20c 	lsl.w	r2, r2, ip
 8008834:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008836:	0a52      	lsrs	r2, r2, #9
 8008838:	fb04 f202 	mul.w	r2, r4, r2
 800883c:	651a      	str	r2, [r3, #80]	@ 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800883e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8008842:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8008846:	655c      	str	r4, [r3, #84]	@ 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008848:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800884c:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800884e:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008852:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 8008854:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008856:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800885a:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800885c:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008860:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008862:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008866:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008868:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800886c:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800886e:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008872:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008874:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008878:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800887c:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8008880:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008884:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008888:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800888c:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008890:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008894:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008898:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800889c:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80088a0:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80088a4:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80088a8:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80088ac:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80088b0:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80088b4:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 80088b8:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80088ba:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 80088be:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 80088c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c6:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80088c8:	2801      	cmp	r0, #1
 80088ca:	d10f      	bne.n	80088ec <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80088cc:	0412      	lsls	r2, r2, #16
 80088ce:	6e58      	ldr	r0, [r3, #100]	@ 0x64
    hsd->SdCard.BlockSize = 512U;
 80088d0:	f44f 7400 	mov.w	r4, #512	@ 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80088d4:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 80088d8:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80088dc:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80088de:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80088e0:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80088e2:	3201      	adds	r2, #1
 80088e4:	0292      	lsls	r2, r2, #10
 80088e6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80088e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80088ea:	e7a8      	b.n	800883e <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088ec:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80088ee:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088f0:	4805      	ldr	r0, [pc, #20]	@ (8008908 <HAL_SD_GetCardCSD+0x174>)
 80088f2:	6390      	str	r0, [r2, #56]	@ 0x38
    return HAL_ERROR;
 80088f4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088f8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80088fc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80088fe:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
}
 8008902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	1fe00fff 	.word	0x1fe00fff

0800890c <HAL_SD_InitCard>:
{
 800890c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800890e:	2200      	movs	r2, #0
{
 8008910:	b095      	sub	sp, #84	@ 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008912:	2300      	movs	r3, #0
{
 8008914:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008916:	2100      	movs	r1, #0
 8008918:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800891c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008920:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008924:	f7ff f95c 	bl	8007be0 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8008928:	b948      	cbnz	r0, 800893e <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 800892a:	2201      	movs	r2, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800892c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8008930:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008934:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008936:	2501      	movs	r5, #1
}
 8008938:	4628      	mov	r0, r5
 800893a:	b015      	add	sp, #84	@ 0x54
 800893c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800893e:	0a06      	lsrs	r6, r0, #8
 8008940:	4b8a      	ldr	r3, [pc, #552]	@ (8008b6c <HAL_SD_InitCard+0x260>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8008942:	aa07      	add	r2, sp, #28
 8008944:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008946:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800894a:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800894c:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800894e:	9608      	str	r6, [sp, #32]
 8008950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008954:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800895a:	6820      	ldr	r0, [r4, #0]
 800895c:	f000 fec8 	bl	80096f0 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	f000 feeb 	bl	800973c <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8008966:	4b82      	ldr	r3, [pc, #520]	@ (8008b70 <HAL_SD_InitCard+0x264>)
 8008968:	429d      	cmp	r5, r3
 800896a:	d902      	bls.n	8008972 <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800896c:	0076      	lsls	r6, r6, #1
 800896e:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008972:	4880      	ldr	r0, [pc, #512]	@ (8008b74 <HAL_SD_InitCard+0x268>)
 8008974:	fbb0 f0f5 	udiv	r0, r0, r5
 8008978:	3001      	adds	r0, #1
 800897a:	f7f9 fb71 	bl	8002060 <HAL_Delay>
  __IO uint32_t count = 0U;
 800897e:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008980:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8008982:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008984:	f001 fc0c 	bl	800a1a0 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008988:	4605      	mov	r5, r0
 800898a:	bb70      	cbnz	r0, 80089ea <HAL_SD_InitCard+0xde>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	f001 fc33 	bl	800a1f8 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008992:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008996:	f000 80ce 	beq.w	8008b36 <HAL_SD_InitCard+0x22a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800899a:	2301      	movs	r3, #1
 800899c:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800899e:	2100      	movs	r1, #0
 80089a0:	6820      	ldr	r0, [r4, #0]
 80089a2:	f001 fc69 	bl	800a278 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80089a6:	bb38      	cbnz	r0, 80089f8 <HAL_SD_InitCard+0xec>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089a8:	9b03      	ldr	r3, [sp, #12]
 80089aa:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 80089ae:	42b3      	cmp	r3, r6
 80089b0:	f200 80d3 	bhi.w	8008b5a <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80089b4:	4f70      	ldr	r7, [pc, #448]	@ (8008b78 <HAL_SD_InitCard+0x26c>)
 80089b6:	e010      	b.n	80089da <HAL_SD_InitCard+0xce>
 80089b8:	6820      	ldr	r0, [r4, #0]
 80089ba:	f001 fd09 	bl	800a3d0 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80089be:	4601      	mov	r1, r0
 80089c0:	b9d0      	cbnz	r0, 80089f8 <HAL_SD_InitCard+0xec>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089c2:	6820      	ldr	r0, [r4, #0]
 80089c4:	f000 fec6 	bl	8009754 <SDMMC_GetResponse>
    count++;
 80089c8:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089ca:	2800      	cmp	r0, #0
    count++;
 80089cc:	f103 0301 	add.w	r3, r3, #1
 80089d0:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	db13      	blt.n	80089fe <HAL_SD_InitCard+0xf2>
 80089d6:	42b3      	cmp	r3, r6
 80089d8:	d811      	bhi.n	80089fe <HAL_SD_InitCard+0xf2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089da:	2100      	movs	r1, #0
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	f001 fc4b 	bl	800a278 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80089e2:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d0e7      	beq.n	80089b8 <HAL_SD_InitCard+0xac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089e8:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_READY;
 80089ea:	2301      	movs	r3, #1
 80089ec:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80089f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089f2:	432b      	orrs	r3, r5
 80089f4:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80089f6:	e79e      	b.n	8008936 <HAL_SD_InitCard+0x2a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089f8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80089fc:	e7f5      	b.n	80089ea <HAL_SD_InitCard+0xde>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80089fe:	9a03      	ldr	r2, [sp, #12]
 8008a00:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008a04:	429a      	cmp	r2, r3
 8008a06:	f200 80ac 	bhi.w	8008b62 <HAL_SD_InitCard+0x256>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a0a:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8008a0e:	bf18      	it	ne
 8008a10:	2501      	movne	r5, #1
  uint16_t sd_rca = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63a5      	str	r5, [r4, #56]	@ 0x38
 8008a16:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8008a1a:	f7f9 fb1b 	bl	8002054 <HAL_GetTick>
 8008a1e:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a20:	6820      	ldr	r0, [r4, #0]
 8008a22:	f000 fe93 	bl	800974c <SDMMC_GetPowerState>
 8008a26:	b348      	cbz	r0, 8008a7c <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008a2a:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d12e      	bne.n	8008a8e <HAL_SD_InitCard+0x182>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a30:	2104      	movs	r1, #4
 8008a32:	f000 fe8f 	bl	8009754 <SDMMC_GetResponse>
 8008a36:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a38:	a909      	add	r1, sp, #36	@ 0x24
 8008a3a:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008a3c:	0d1b      	lsrs	r3, r3, #20
 8008a3e:	6423      	str	r3, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a40:	f7ff fea8 	bl	8008794 <HAL_SD_GetCardCSD>
 8008a44:	4605      	mov	r5, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f040 8081 	bne.w	8008b4e <HAL_SD_InitCard+0x242>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008a4e:	6820      	ldr	r0, [r4, #0]
 8008a50:	0409      	lsls	r1, r1, #16
 8008a52:	f001 faf9 	bl	800a048 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a56:	b998      	cbnz	r0, 8008a80 <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	f000 fe93 	bl	8009788 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a62:	2800      	cmp	r0, #0
 8008a64:	f43f af68 	beq.w	8008938 <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a68:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008a6a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a6c:	4943      	ldr	r1, [pc, #268]	@ (8008b7c <HAL_SD_InitCard+0x270>)
 8008a6e:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008a70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a72:	4303      	orrs	r3, r0
 8008a74:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a76:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8008a7a:	e75c      	b.n	8008936 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a7c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008a86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a88:	4303      	orrs	r3, r0
 8008a8a:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008a8c:	e753      	b.n	8008936 <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008a8e:	f001 fe2d 	bl	800a6ec <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d1f4      	bne.n	8008a80 <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a96:	4601      	mov	r1, r0
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	f000 fe5b 	bl	8009754 <SDMMC_GetResponse>
 8008a9e:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008aa0:	2104      	movs	r1, #4
 8008aa2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008aa4:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008aa6:	f000 fe55 	bl	8009754 <SDMMC_GetResponse>
 8008aaa:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008aac:	2108      	movs	r1, #8
 8008aae:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ab0:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ab2:	f000 fe4f 	bl	8009754 <SDMMC_GetResponse>
 8008ab6:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ab8:	210c      	movs	r1, #12
 8008aba:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008abc:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008abe:	f000 fe49 	bl	8009754 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ac2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ac4:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d04e      	beq.n	8008b68 <HAL_SD_InitCard+0x25c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008aca:	f241 3687 	movw	r6, #4999	@ 0x1387
 8008ace:	e008      	b.n	8008ae2 <HAL_SD_InitCard+0x1d6>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ad0:	f001 fe8a 	bl	800a7e8 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1d3      	bne.n	8008a80 <HAL_SD_InitCard+0x174>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008ad8:	f7f9 fabc 	bl	8002054 <HAL_GetTick>
 8008adc:	1b43      	subs	r3, r0, r5
 8008ade:	42b3      	cmp	r3, r6
 8008ae0:	d838      	bhi.n	8008b54 <HAL_SD_InitCard+0x248>
    while (sd_rca == 0U)
 8008ae2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ae6:	f10d 010a 	add.w	r1, sp, #10
 8008aea:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0ef      	beq.n	8008ad0 <HAL_SD_InitCard+0x1c4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008af0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008af2:	2a03      	cmp	r2, #3
 8008af4:	d09c      	beq.n	8008a30 <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008af6:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 8008af8:	6463      	str	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008afa:	f001 fe35 	bl	800a768 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1be      	bne.n	8008a80 <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b02:	4601      	mov	r1, r0
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	f000 fe25 	bl	8009754 <SDMMC_GetResponse>
 8008b0a:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b0c:	2104      	movs	r1, #4
 8008b0e:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b10:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b12:	f000 fe1f 	bl	8009754 <SDMMC_GetResponse>
 8008b16:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b18:	2108      	movs	r1, #8
 8008b1a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b1c:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b1e:	f000 fe19 	bl	8009754 <SDMMC_GetResponse>
 8008b22:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b24:	210c      	movs	r1, #12
 8008b26:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b28:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b2a:	f000 fe13 	bl	8009754 <SDMMC_GetResponse>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	66a3      	str	r3, [r4, #104]	@ 0x68
 8008b34:	e77c      	b.n	8008a30 <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b36:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008b38:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b3a:	f001 fb31 	bl	800a1a0 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f47f af52 	bne.w	80089e8 <HAL_SD_InitCard+0xdc>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008b44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	f47f af2e 	bne.w	80089a8 <HAL_SD_InitCard+0x9c>
 8008b4c:	e727      	b.n	800899e <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b4e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8008b52:	e795      	b.n	8008a80 <HAL_SD_InitCard+0x174>
        return HAL_SD_ERROR_TIMEOUT;
 8008b54:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b58:	e792      	b.n	8008a80 <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	42b3      	cmp	r3, r6
 8008b5e:	f67f af58 	bls.w	8008a12 <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008b62:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8008b66:	e740      	b.n	80089ea <HAL_SD_InitCard+0xde>
 8008b68:	6820      	ldr	r0, [r4, #0]
 8008b6a:	e761      	b.n	8008a30 <HAL_SD_InitCard+0x124>
 8008b6c:	014f8b59 	.word	0x014f8b59
 8008b70:	000c34ff 	.word	0x000c34ff
 8008b74:	00012110 	.word	0x00012110
 8008b78:	c1100000 	.word	0xc1100000
 8008b7c:	1fe00fff 	.word	0x1fe00fff

08008b80 <HAL_SD_GetCardStatus>:
{
 8008b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 8008b84:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 8008b88:	b097      	sub	sp, #92	@ 0x5c
  if (hsd->State == HAL_SD_STATE_BUSY)
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d033      	beq.n	8008bf6 <HAL_SD_GetCardStatus+0x76>
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008b8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008b90:	460d      	mov	r5, r1
 8008b92:	f7f9 fa5f 	bl	8002054 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b96:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8008b98:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b9a:	6820      	ldr	r0, [r4, #0]
 8008b9c:	f000 fdda 	bl	8009754 <SDMMC_GetResponse>
 8008ba0:	0182      	lsls	r2, r0, #6
 8008ba2:	d410      	bmi.n	8008bc6 <HAL_SD_GetCardStatus+0x46>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008ba4:	2140      	movs	r1, #64	@ 0x40
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	f000 fdee 	bl	8009788 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bac:	4603      	mov	r3, r0
 8008bae:	b930      	cbnz	r0, 8008bbe <HAL_SD_GetCardStatus+0x3e>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008bb2:	6820      	ldr	r0, [r4, #0]
 8008bb4:	0409      	lsls	r1, r1, #16
 8008bb6:	f001 fb5f 	bl	800a278 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bba:	4603      	mov	r3, r0
 8008bbc:	b300      	cbz	r0, 8008c00 <HAL_SD_GetCardStatus+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008bbe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bc0:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008bc2:	6362      	str	r2, [r4, #52]	@ 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bc4:	e002      	b.n	8008bcc <HAL_SD_GetCardStatus+0x4c>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008bc6:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008bc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bcc:	4a54      	ldr	r2, [pc, #336]	@ (8008d20 <HAL_SD_GetCardStatus+0x1a0>)
    hsd->State = HAL_SD_STATE_READY;
 8008bce:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bd0:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8008bd2:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 8008bd4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008bda:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008be2:	f000 fdd1 	bl	8009788 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008be6:	b138      	cbz	r0, 8008bf8 <HAL_SD_GetCardStatus+0x78>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008be8:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008bea:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bec:	494c      	ldr	r1, [pc, #304]	@ (8008d20 <HAL_SD_GetCardStatus+0x1a0>)
 8008bee:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008bf0:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008bf2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8008bf6:	2601      	movs	r6, #1
}
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	b017      	add	sp, #92	@ 0x5c
 8008bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  config.DataLength    = 64U;
 8008c00:	f04f 32ff 	mov.w	r2, #4294967295
 8008c04:	2340      	movs	r3, #64	@ 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c06:	4669      	mov	r1, sp
 8008c08:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8008c0a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c0e:	2260      	movs	r2, #96	@ 0x60
 8008c10:	2302      	movs	r3, #2
 8008c12:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c16:	2301      	movs	r3, #1
 8008c18:	2200      	movs	r2, #0
 8008c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c1e:	f000 fd9d 	bl	800975c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	f001 feec 	bl	800aa00 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1c7      	bne.n	8008bbe <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 8008c2e:	ae06      	add	r6, sp, #24
 8008c30:	e004      	b.n	8008c3c <HAL_SD_GetCardStatus+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c32:	f7f9 fa0f 	bl	8002054 <HAL_GetTick>
 8008c36:	1bc0      	subs	r0, r0, r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d012      	beq.n	8008c62 <HAL_SD_GetCardStatus+0xe2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c40:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008c44:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008c46:	d110      	bne.n	8008c6a <HAL_SD_GetCardStatus+0xea>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	d5f2      	bpl.n	8008c32 <HAL_SD_GetCardStatus+0xb2>
 8008c4c:	f106 0820 	add.w	r8, r6, #32
 8008c50:	e000      	b.n	8008c54 <HAL_SD_GetCardStatus+0xd4>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c52:	6820      	ldr	r0, [r4, #0]
 8008c54:	f000 fd68 	bl	8009728 <SDMMC_ReadFIFO>
 8008c58:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8008c5c:	4546      	cmp	r6, r8
 8008c5e:	d1f8      	bne.n	8008c52 <HAL_SD_GetCardStatus+0xd2>
 8008c60:	e7e7      	b.n	8008c32 <HAL_SD_GetCardStatus+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008c68:	e7b0      	b.n	8008bcc <HAL_SD_GetCardStatus+0x4c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008c6a:	0719      	lsls	r1, r3, #28
 8008c6c:	d451      	bmi.n	8008d12 <HAL_SD_GetCardStatus+0x192>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008c6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c70:	079a      	lsls	r2, r3, #30
 8008c72:	d450      	bmi.n	8008d16 <HAL_SD_GetCardStatus+0x196>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008c74:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c76:	069b      	lsls	r3, r3, #26
 8008c78:	d50a      	bpl.n	8008c90 <HAL_SD_GetCardStatus+0x110>
 8008c7a:	e04e      	b.n	8008d1a <HAL_SD_GetCardStatus+0x19a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008c7c:	f000 fd54 	bl	8009728 <SDMMC_ReadFIFO>
 8008c80:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c84:	f7f9 f9e6 	bl	8002054 <HAL_GetTick>
 8008c88:	1bc0      	subs	r0, r0, r7
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d0e9      	beq.n	8008c62 <HAL_SD_GetCardStatus+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c8e:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008c90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008c92:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008c96:	d1f1      	bne.n	8008c7c <HAL_SD_GetCardStatus+0xfc>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008c98:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008c9a:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c9c:	4a21      	ldr	r2, [pc, #132]	@ (8008d24 <HAL_SD_GetCardStatus+0x1a4>)
 8008c9e:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008ca0:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008ca2:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008ca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008cae:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008cb2:	fa5f f883 	uxtb.w	r8, r3
 8008cb6:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008cba:	fa1f f982 	uxth.w	r9, r2
 8008cbe:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008cc0:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008cc4:	f3c1 1881 	ubfx	r8, r1, #6, #2
 8008cc8:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008ccc:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008cd0:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008cd4:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008cd8:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008cda:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008cde:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008ce2:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008ce4:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8008ce8:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008cea:	f3cc 5203 	ubfx	r2, ip, #20, #4
 8008cee:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008cf0:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008cf4:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008cf6:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008cf8:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8008cfc:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008cfe:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008d02:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008d06:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008d08:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008d0a:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8008d0e:	74ab      	strb	r3, [r5, #18]
 8008d10:	e765      	b.n	8008bde <HAL_SD_GetCardStatus+0x5e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d12:	2308      	movs	r3, #8
 8008d14:	e75a      	b.n	8008bcc <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d16:	2302      	movs	r3, #2
 8008d18:	e758      	b.n	8008bcc <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8008d1a:	2320      	movs	r3, #32
 8008d1c:	e756      	b.n	8008bcc <HAL_SD_GetCardStatus+0x4c>
 8008d1e:	bf00      	nop
 8008d20:	1fe00fff 	.word	0x1fe00fff
 8008d24:	18000f3a 	.word	0x18000f3a

08008d28 <HAL_SD_GetCardInfo>:
{
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d2a:	e9d0 e30e 	ldrd	lr, r3, [r0, #56]	@ 0x38
 8008d2e:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
 8008d32:	e9d0 5412 	ldrd	r5, r4, [r0, #72]	@ 0x48
 8008d36:	e9d0 2014 	ldrd	r2, r0, [r0, #80]	@ 0x50
 8008d3a:	e9c1 e300 	strd	lr, r3, [r1]
 8008d3e:	e9c1 2006 	strd	r2, r0, [r1, #24]
 8008d42:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 8008d46:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d48:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 8008d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4e:	bf00      	nop

08008d50 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8008d50:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d52:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008d54:	4293      	cmp	r3, r2
{
 8008d56:	b530      	push	{r4, r5, lr}
 8008d58:	4604      	mov	r4, r0
 8008d5a:	b089      	sub	sp, #36	@ 0x24
 8008d5c:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8008d5e:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d62:	d041      	beq.n	8008de8 <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008d64:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8008d68:	d03e      	beq.n	8008de8 <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008d6a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8008d6e:	d07e      	beq.n	8008e6e <HAL_SD_ConfigWideBusOperation+0x11e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008d70:	2900      	cmp	r1, #0
 8008d72:	d05d      	beq.n	8008e30 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d74:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008d76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d7a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d139      	bne.n	8008df6 <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008d82:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008d86:	2100      	movs	r1, #0
 8008d88:	f7fe ff2a 	bl	8007be0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d048      	beq.n	8008e22 <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d90:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008d92:	4b50      	ldr	r3, [pc, #320]	@ (8008ed4 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d94:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 8008d96:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d98:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008d9a:	fba3 5300 	umull	r5, r3, r3, r0
 8008d9e:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008da0:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008da2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008da6:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008da8:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008dac:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008dae:	d20e      	bcs.n	8008dce <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008db0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8008db2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008db6:	d00a      	beq.n	8008dce <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008db8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8008dbc:	d079      	beq.n	8008eb2 <HAL_SD_ConfigWideBusOperation+0x162>
        if (hsd->Init.ClockDiv == 0U)
 8008dbe:	b112      	cbz	r2, 8008dc6 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008dc0:	0053      	lsls	r3, r2, #1
 8008dc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8008dc6:	4b44      	ldr	r3, [pc, #272]	@ (8008ed8 <HAL_SD_ConfigWideBusOperation+0x188>)
 8008dc8:	4298      	cmp	r0, r3
 8008dca:	bf88      	it	hi
 8008dcc:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 8008dce:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008dd0:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 8008dd2:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008dd4:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 8008dd6:	c903      	ldmia	r1, {r0, r1}
 8008dd8:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	f000 fc86 	bl	80096f0 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008de4:	6820      	ldr	r0, [r4, #0]
 8008de6:	e00a      	b.n	8008dfe <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008de8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dee:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008df0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0c5      	beq.n	8008d82 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008df6:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 8008df8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dfa:	4b38      	ldr	r3, [pc, #224]	@ (8008edc <HAL_SD_ConfigWideBusOperation+0x18c>)
 8008dfc:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008dfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e02:	f000 fcc1 	bl	8009788 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e06:	b130      	cbz	r0, 8008e16 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e08:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8008e0a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e0c:	4a33      	ldr	r2, [pc, #204]	@ (8008edc <HAL_SD_ConfigWideBusOperation+0x18c>)
 8008e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e12:	4303      	orrs	r3, r0
 8008e14:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 8008e16:	2301      	movs	r3, #1
}
 8008e18:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8008e1a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8008e1e:	b009      	add	sp, #36	@ 0x24
 8008e20:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008e22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8008e24:	2501      	movs	r5, #1
      (void)SDMMC_Init(hsd->Instance, Init);
 8008e26:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008e28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e2c:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 8008e2e:	e7e6      	b.n	8008dfe <HAL_SD_ConfigWideBusOperation+0xae>
  uint32_t scr[2U] = {0UL, 0UL};
 8008e30:	2200      	movs	r2, #0
 8008e32:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e34:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e36:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e3a:	f000 fc8b 	bl	8009754 <SDMMC_GetResponse>
 8008e3e:	0182      	lsls	r2, r0, #6
 8008e40:	d434      	bmi.n	8008eac <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 8008e42:	a902      	add	r1, sp, #8
 8008e44:	4620      	mov	r0, r4
 8008e46:	f7ff fa6d 	bl	8008324 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e4a:	b960      	cbnz	r0, 8008e66 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	03db      	lsls	r3, r3, #15
 8008e50:	d535      	bpl.n	8008ebe <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e52:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	0409      	lsls	r1, r1, #16
 8008e58:	f001 fa0e 	bl	800a278 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e5c:	b918      	cbnz	r0, 8008e66 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008e5e:	4601      	mov	r1, r0
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	f001 faf1 	bl	800a448 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8008e66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e68:	4303      	orrs	r3, r0
 8008e6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e6c:	e7c0      	b.n	8008df0 <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e72:	2100      	movs	r1, #0
 8008e74:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8008e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e7a:	f000 fc6b 	bl	8009754 <SDMMC_GetResponse>
 8008e7e:	0180      	lsls	r0, r0, #6
 8008e80:	d414      	bmi.n	8008eac <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 8008e82:	a902      	add	r1, sp, #8
 8008e84:	4620      	mov	r0, r4
 8008e86:	f7ff fa4d 	bl	8008324 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d1eb      	bne.n	8008e66 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	0359      	lsls	r1, r3, #13
 8008e92:	d514      	bpl.n	8008ebe <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008e96:	6820      	ldr	r0, [r4, #0]
 8008e98:	0409      	lsls	r1, r1, #16
 8008e9a:	f001 f9ed 	bl	800a278 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d1e1      	bne.n	8008e66 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008ea2:	2102      	movs	r1, #2
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	f001 facf 	bl	800a448 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008eaa:	e7dc      	b.n	8008e66 <HAL_SD_ConfigWideBusOperation+0x116>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008eac:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008eb0:	e7d9      	b.n	8008e66 <HAL_SD_ConfigWideBusOperation+0x116>
        if (hsd->Init.ClockDiv == 0U)
 8008eb2:	b93a      	cbnz	r2, 8008ec4 <HAL_SD_ConfigWideBusOperation+0x174>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008eb4:	490a      	ldr	r1, [pc, #40]	@ (8008ee0 <HAL_SD_ConfigWideBusOperation+0x190>)
 8008eb6:	4288      	cmp	r0, r1
 8008eb8:	d989      	bls.n	8008dce <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008eba:	0e5a      	lsrs	r2, r3, #25
 8008ebc:	e787      	b.n	8008dce <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ebe:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8008ec2:	e7d0      	b.n	8008e66 <HAL_SD_ConfigWideBusOperation+0x116>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008ec4:	0051      	lsls	r1, r2, #1
 8008ec6:	fbb0 f1f1 	udiv	r1, r0, r1
 8008eca:	4805      	ldr	r0, [pc, #20]	@ (8008ee0 <HAL_SD_ConfigWideBusOperation+0x190>)
 8008ecc:	4281      	cmp	r1, r0
 8008ece:	f67f af7e 	bls.w	8008dce <HAL_SD_ConfigWideBusOperation+0x7e>
 8008ed2:	e7f2      	b.n	8008eba <HAL_SD_ConfigWideBusOperation+0x16a>
 8008ed4:	55e63b89 	.word	0x55e63b89
 8008ed8:	017d7840 	.word	0x017d7840
 8008edc:	1fe00fff 	.word	0x1fe00fff
 8008ee0:	02faf080 	.word	0x02faf080

08008ee4 <HAL_SD_Init>:
{
 8008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee6:	b087      	sub	sp, #28
  if (hsd == NULL)
 8008ee8:	b168      	cbz	r0, 8008f06 <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 8008eea:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8008eee:	4604      	mov	r4, r0
 8008ef0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d044      	beq.n	8008f82 <HAL_SD_Init+0x9e>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008ef8:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008efa:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008efc:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008f00:	f7ff fd04 	bl	800890c <HAL_SD_InitCard>
 8008f04:	b118      	cbz	r0, 8008f0e <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 8008f06:	2601      	movs	r6, #1
}
 8008f08:	4630      	mov	r0, r6
 8008f0a:	b007      	add	sp, #28
 8008f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008f0e:	a901      	add	r1, sp, #4
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7ff fe35 	bl	8008b80 <HAL_SD_GetCardStatus>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d1f5      	bne.n	8008f06 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008f1a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 8008f1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008f20:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008f22:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8008f26:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008f28:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008f2a:	d02e      	beq.n	8008f8a <HAL_SD_Init+0xa6>
 8008f2c:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008f2e:	68e1      	ldr	r1, [r4, #12]
 8008f30:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008f32:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008f34:	f7ff ff0c 	bl	8008d50 <HAL_SD_ConfigWideBusOperation>
 8008f38:	4606      	mov	r6, r0
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d1e3      	bne.n	8008f06 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 8008f3e:	f7f9 f889 	bl	8002054 <HAL_GetTick>
 8008f42:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008f44:	e007      	b.n	8008f56 <HAL_SD_Init+0x72>
    hsd->ErrorCode |= errorstate;
 8008f46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f48:	4303      	orrs	r3, r0
 8008f4a:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f4c:	f7f9 f882 	bl	8002054 <HAL_GetTick>
 8008f50:	1bc3      	subs	r3, r0, r7
 8008f52:	3301      	adds	r3, #1
 8008f54:	d020      	beq.n	8008f98 <HAL_SD_Init+0xb4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f56:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	0409      	lsls	r1, r1, #16
 8008f5c:	f001 fca4 	bl	800a8a8 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f60:	4605      	mov	r5, r0
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d1ef      	bne.n	8008f46 <HAL_SD_Init+0x62>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f66:	6820      	ldr	r0, [r4, #0]
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f000 fbf3 	bl	8009754 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f6e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008f72:	2804      	cmp	r0, #4
 8008f74:	d1ea      	bne.n	8008f4c <HAL_SD_Init+0x68>
  hsd->State = HAL_SD_STATE_READY;
 8008f76:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f78:	6365      	str	r5, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f7a:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8008f7c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 8008f80:	e7c2      	b.n	8008f08 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 8008f82:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 8008f84:	f7f8 fdee 	bl	8001b64 <HAL_SD_MspInit>
 8008f88:	e7b6      	b.n	8008ef8 <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	bf14      	ite	ne
 8008f8e:	f44f 7300 	movne.w	r3, #512	@ 0x200
 8008f92:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8008f96:	e7ca      	b.n	8008f2e <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008f98:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8008f9c:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8008f9e:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008fa0:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008fa2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008fa6:	e7af      	b.n	8008f08 <HAL_SD_Init+0x24>

08008fa8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fa8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 8008faa:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fac:	0409      	lsls	r1, r1, #16
{
 8008fae:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fb0:	6800      	ldr	r0, [r0, #0]
 8008fb2:	f001 fc79 	bl	800a8a8 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	b120      	cbz	r0, 8008fc4 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8008fba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8008fc2:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fc4:	6820      	ldr	r0, [r4, #0]
 8008fc6:	f000 fbc5 	bl	8009754 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008fca:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8008fce:	bd10      	pop	{r4, pc}

08008fd0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8008fd0:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008fd2:	492c      	ldr	r1, [pc, #176]	@ (8009084 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8008fd4:	695a      	ldr	r2, [r3, #20]
{
 8008fd6:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008fd8:	699c      	ldr	r4, [r3, #24]
 8008fda:	f044 0408 	orr.w	r4, r4, #8
 8008fde:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008fe0:	699c      	ldr	r4, [r3, #24]
 8008fe2:	f044 0410 	orr.w	r4, r4, #16
 8008fe6:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8008fe8:	681c      	ldr	r4, [r3, #0]
 8008fea:	f024 0401 	bic.w	r4, r4, #1
 8008fee:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008ff0:	691c      	ldr	r4, [r3, #16]
 8008ff2:	4021      	ands	r1, r4
 8008ff4:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ff6:	6899      	ldr	r1, [r3, #8]
 8008ff8:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8008ffc:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ffe:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 8009002:	2904      	cmp	r1, #4
 8009004:	d001      	beq.n	800900a <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009006:	0691      	lsls	r1, r2, #26
 8009008:	d430      	bmi.n	800906c <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800900a:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800900e:	2903      	cmp	r1, #3
 8009010:	d001      	beq.n	8009016 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009012:	0654      	lsls	r4, r2, #25
 8009014:	d41f      	bmi.n	8009056 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009016:	0591      	lsls	r1, r2, #22
 8009018:	d509      	bpl.n	800902e <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800901a:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800901e:	f041 0101 	orr.w	r1, r1, #1
 8009022:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009026:	6999      	ldr	r1, [r3, #24]
 8009028:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800902c:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800902e:	05d2      	lsls	r2, r2, #23
 8009030:	d509      	bpl.n	8009046 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009032:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8009036:	f042 0208 	orr.w	r2, r2, #8
 800903a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800903e:	699a      	ldr	r2, [r3, #24]
 8009040:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009044:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009046:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8009048:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800904c:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009050:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 8009054:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009056:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800905a:	f041 0104 	orr.w	r1, r1, #4
 800905e:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009062:	6999      	ldr	r1, [r3, #24]
 8009064:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8009068:	6199      	str	r1, [r3, #24]
 800906a:	e7d4      	b.n	8009016 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800906c:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8009070:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009074:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009078:	6999      	ldr	r1, [r3, #24]
 800907a:	f041 0120 	orr.w	r1, r1, #32
 800907e:	6199      	str	r1, [r3, #24]
 8009080:	e7c3      	b.n	800900a <SPI_CloseTransfer+0x3a>
 8009082:	bf00      	nop
 8009084:	fffffc90 	.word	0xfffffc90

08009088 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009088:	2800      	cmp	r0, #0
 800908a:	f000 80c8 	beq.w	800921e <HAL_SPI_Init+0x196>
{
 800908e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009092:	4604      	mov	r4, r0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009094:	4b67      	ldr	r3, [pc, #412]	@ (8009234 <HAL_SPI_Init+0x1ac>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009096:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009098:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800909a:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800909c:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800909e:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80090a0:	d016      	beq.n	80090d0 <HAL_SPI_Init+0x48>
 80090a2:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d012      	beq.n	80090d0 <HAL_SPI_Init+0x48>
 80090aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090ae:	429a      	cmp	r2, r3
 80090b0:	f000 80ad 	beq.w	800920e <HAL_SPI_Init+0x186>
 80090b4:	290f      	cmp	r1, #15
 80090b6:	d808      	bhi.n	80090ca <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80090b8:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80090ba:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80090be:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 80090c0:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80090c2:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d90a      	bls.n	80090e0 <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 80090ca:	2001      	movs	r0, #1
}
 80090cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090d0:	4b58      	ldr	r3, [pc, #352]	@ (8009234 <HAL_SPI_Init+0x1ac>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80090d2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d06d      	beq.n	80091b4 <HAL_SPI_Init+0x12c>
 80090d8:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 80090dc:	429a      	cmp	r2, r3
 80090de:	d069      	beq.n	80091b4 <HAL_SPI_Init+0x12c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80090e0:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80090e4:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d071      	beq.n	80091d0 <HAL_SPI_Init+0x148>
 80090ec:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 80090f0:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80090f2:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80090f4:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 80090f8:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80090fc:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 8009100:	6813      	ldr	r3, [r2, #0]
 8009102:	f023 0301 	bic.w	r3, r3, #1
 8009106:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009108:	6893      	ldr	r3, [r2, #8]
 800910a:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800910e:	69a3      	ldr	r3, [r4, #24]
 8009110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009114:	d067      	beq.n	80091e6 <HAL_SPI_Init+0x15e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009116:	f1b9 0f00 	cmp.w	r9, #0
 800911a:	d001      	beq.n	8009120 <HAL_SPI_Init+0x98>
 800911c:	2906      	cmp	r1, #6
 800911e:	d86f      	bhi.n	8009200 <HAL_SPI_Init+0x178>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009120:	6817      	ldr	r7, [r2, #0]
 8009122:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8009126:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009128:	4303      	orrs	r3, r0
 800912a:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800912c:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009130:	ea43 030e 	orr.w	r3, r3, lr
 8009134:	433b      	orrs	r3, r7
 8009136:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8009138:	433b      	orrs	r3, r7
 800913a:	6927      	ldr	r7, [r4, #16]
 800913c:	433b      	orrs	r3, r7
 800913e:	6967      	ldr	r7, [r4, #20]
 8009140:	433b      	orrs	r3, r7
 8009142:	6a27      	ldr	r7, [r4, #32]
 8009144:	433b      	orrs	r3, r7
 8009146:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8009148:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800914a:	69e7      	ldr	r7, [r4, #28]
 800914c:	4339      	orrs	r1, r7
 800914e:	4329      	orrs	r1, r5
 8009150:	ea41 010c 	orr.w	r1, r1, ip
 8009154:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009156:	68a1      	ldr	r1, [r4, #8]
 8009158:	430b      	orrs	r3, r1
 800915a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800915c:	430b      	orrs	r3, r1
 800915e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009160:	430b      	orrs	r3, r1
 8009162:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009164:	b9c0      	cbnz	r0, 8009198 <HAL_SPI_Init+0x110>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009166:	6893      	ldr	r3, [r2, #8]
 8009168:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800916c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009170:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009172:	6893      	ldr	r3, [r2, #8]
 8009174:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009178:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800917c:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800917e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009180:	f023 0301 	bic.w	r3, r3, #1
 8009184:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009186:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009188:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800918a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 800918e:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 8009190:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 8009194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009198:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800919a:	f023 0301 	bic.w	r3, r3, #1
 800919e:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80091a0:	f1b9 0f00 	cmp.w	r9, #0
 80091a4:	d0ef      	beq.n	8009186 <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80091a6:	68d3      	ldr	r3, [r2, #12]
 80091a8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80091aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091ae:	430b      	orrs	r3, r1
 80091b0:	60d3      	str	r3, [r2, #12]
 80091b2:	e7e8      	b.n	8009186 <HAL_SPI_Init+0xfe>
  data_size = (data_size + 7UL) / 8UL;
 80091b4:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80091b8:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 80091ba:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 80091bc:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80091c0:	2b10      	cmp	r3, #16
 80091c2:	d882      	bhi.n	80090ca <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80091c4:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80091c8:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d18d      	bne.n	80090ec <HAL_SPI_Init+0x64>
    HAL_SPI_MspInit(hspi);
 80091d0:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80091d2:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 80091d6:	f7f8 fd57 	bl	8001c88 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80091da:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80091dc:	68e1      	ldr	r1, [r4, #12]
 80091de:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 80091e2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80091e4:	e784      	b.n	80090f0 <HAL_SPI_Init+0x68>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80091e6:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 80091ea:	d01a      	beq.n	8009222 <HAL_SPI_Init+0x19a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d192      	bne.n	8009116 <HAL_SPI_Init+0x8e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80091f0:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 80091f4:	d194      	bne.n	8009120 <HAL_SPI_Init+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80091f6:	6817      	ldr	r7, [r2, #0]
 80091f8:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 80091fc:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80091fe:	e78f      	b.n	8009120 <HAL_SPI_Init+0x98>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009200:	6817      	ldr	r7, [r2, #0]
 8009202:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 8009204:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8009208:	4337      	orrs	r7, r6
 800920a:	6017      	str	r7, [r2, #0]
 800920c:	e78c      	b.n	8009128 <HAL_SPI_Init+0xa0>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800920e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8009210:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009214:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8009216:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8009218:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800921c:	e7d0      	b.n	80091c0 <HAL_SPI_Init+0x138>
    return HAL_ERROR;
 800921e:	2001      	movs	r0, #1
}
 8009220:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009222:	f1be 0f00 	cmp.w	lr, #0
 8009226:	f47f af79 	bne.w	800911c <HAL_SPI_Init+0x94>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800922a:	6817      	ldr	r7, [r2, #0]
 800922c:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8009230:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009232:	e773      	b.n	800911c <HAL_SPI_Init+0x94>
 8009234:	40013000 	.word	0x40013000

08009238 <HAL_SPI_Transmit_DMA>:
  if (hspi->State != HAL_SPI_STATE_READY)
 8009238:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800923c:	2b01      	cmp	r3, #1
 800923e:	d17c      	bne.n	800933a <HAL_SPI_Transmit_DMA+0x102>
  if ((pData == NULL) || (Size == 0UL))
 8009240:	2900      	cmp	r1, #0
 8009242:	f000 80a8 	beq.w	8009396 <HAL_SPI_Transmit_DMA+0x15e>
{
 8009246:	b570      	push	{r4, r5, r6, lr}
 8009248:	4615      	mov	r5, r2
 800924a:	b2da      	uxtb	r2, r3
  if ((pData == NULL) || (Size == 0UL))
 800924c:	fab5 f385 	clz	r3, r5
 8009250:	095b      	lsrs	r3, r3, #5
 8009252:	2d00      	cmp	r5, #0
 8009254:	d079      	beq.n	800934a <HAL_SPI_Transmit_DMA+0x112>
 8009256:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8009258:	f890 0080 	ldrb.w	r0, [r0, #128]	@ 0x80
 800925c:	2801      	cmp	r0, #1
 800925e:	f000 8098 	beq.w	8009392 <HAL_SPI_Transmit_DMA+0x15a>
 8009262:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009266:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 8009268:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800926a:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->RxISR       = NULL;
 800926e:	6723      	str	r3, [r4, #112]	@ 0x70
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009270:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->RxISR       = NULL;
 8009274:	6763      	str	r3, [r4, #116]	@ 0x74
  hspi->TxXferCount = Size;
 8009276:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 800927a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800927e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009282:	68a3      	ldr	r3, [r4, #8]
    SPI_1LINE_TX(hspi);
 8009284:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009286:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800928a:	65e1      	str	r1, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800928c:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009290:	d05d      	beq.n	800934e <HAL_SPI_Transmit_DMA+0x116>
    SPI_2LINES_TX(hspi);
 8009292:	68d3      	ldr	r3, [r2, #12]
 8009294:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8009298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800929c:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800929e:	68e3      	ldr	r3, [r4, #12]
 80092a0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80092a2:	2b0f      	cmp	r3, #15
 80092a4:	6986      	ldr	r6, [r0, #24]
 80092a6:	d84a      	bhi.n	800933e <HAL_SPI_Transmit_DMA+0x106>
 80092a8:	2b07      	cmp	r3, #7
 80092aa:	d861      	bhi.n	8009370 <HAL_SPI_Transmit_DMA+0x138>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092ac:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 80092b0:	d067      	beq.n	8009382 <HAL_SPI_Transmit_DMA+0x14a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80092b2:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 80092b6:	d106      	bne.n	80092c6 <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80092b8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80092bc:	b29b      	uxth	r3, r3
 80092be:	3303      	adds	r3, #3
 80092c0:	089b      	lsrs	r3, r3, #2
 80092c2:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80092c6:	4e35      	ldr	r6, [pc, #212]	@ (800939c <HAL_SPI_Transmit_DMA+0x164>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80092c8:	3220      	adds	r2, #32
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80092ca:	f852 3c18 	ldr.w	r3, [r2, #-24]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80092ce:	6406      	str	r6, [r0, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80092d0:	4e33      	ldr	r6, [pc, #204]	@ (80093a0 <HAL_SPI_Transmit_DMA+0x168>)
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80092d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80092d6:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80092d8:	4e32      	ldr	r6, [pc, #200]	@ (80093a4 <HAL_SPI_Transmit_DMA+0x16c>)
 80092da:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80092dc:	2600      	movs	r6, #0
 80092de:	6506      	str	r6, [r0, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80092e0:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
 80092e4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f7f9 fae3 	bl	80028b4 <HAL_DMA_Start_IT>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d132      	bne.n	8009358 <HAL_SPI_Transmit_DMA+0x120>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80092f2:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80092f4:	6823      	ldr	r3, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80092f6:	69d2      	ldr	r2, [r2, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80092f8:	6859      	ldr	r1, [r3, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80092fa:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80092fe:	4a2a      	ldr	r2, [pc, #168]	@ (80093a8 <HAL_SPI_Transmit_DMA+0x170>)
 8009300:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009304:	bf18      	it	ne
 8009306:	432a      	orrne	r2, r5
 8009308:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800930a:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800930c:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800930e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009312:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009316:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009318:	691a      	ldr	r2, [r3, #16]
 800931a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800931e:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009328:	d103      	bne.n	8009332 <HAL_SPI_Transmit_DMA+0xfa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009330:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8009332:	2300      	movs	r3, #0
 8009334:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8009338:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800933a:	2002      	movs	r0, #2
 800933c:	4770      	bx	lr
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800933e:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 8009342:	d0c0      	beq.n	80092c6 <HAL_SPI_Transmit_DMA+0x8e>
    __HAL_UNLOCK(hspi);
 8009344:	2300      	movs	r3, #0
 8009346:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    return HAL_ERROR;
 800934a:	2001      	movs	r0, #1
}
 800934c:	bd70      	pop	{r4, r5, r6, pc}
    SPI_1LINE_TX(hspi);
 800934e:	6813      	ldr	r3, [r2, #0]
 8009350:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	e7a2      	b.n	800929e <HAL_SPI_Transmit_DMA+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009358:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800935c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800935e:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009362:	f043 0310 	orr.w	r3, r3, #16
 8009366:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800936a:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    return HAL_ERROR;
 800936e:	e7ec      	b.n	800934a <HAL_SPI_Transmit_DMA+0x112>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009370:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 8009374:	d005      	beq.n	8009382 <HAL_SPI_Transmit_DMA+0x14a>
 8009376:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800937a:	d1e3      	bne.n	8009344 <HAL_SPI_Transmit_DMA+0x10c>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800937c:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 8009380:	d1a1      	bne.n	80092c6 <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009382:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8009386:	b29b      	uxth	r3, r3
 8009388:	3301      	adds	r3, #1
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8009390:	e799      	b.n	80092c6 <HAL_SPI_Transmit_DMA+0x8e>
    return HAL_BUSY;
 8009392:	2002      	movs	r0, #2
}
 8009394:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009396:	2001      	movs	r0, #1
}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	080093e1 	.word	0x080093e1
 80093a0:	080093ad 	.word	0x080093ad
 80093a4:	080093f1 	.word	0x080093f1
 80093a8:	ffff0000 	.word	0xffff0000

080093ac <SPI_DMATransmitCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ac:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80093ae:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80093b0:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 80093b4:	2b07      	cmp	r3, #7
 80093b6:	d009      	beq.n	80093cc <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80093b8:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093c0:	d005      	beq.n	80093ce <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80093c2:	6802      	ldr	r2, [r0, #0]
 80093c4:	6913      	ldr	r3, [r2, #16]
 80093c6:	f043 0308 	orr.w	r3, r3, #8
 80093ca:	6113      	str	r3, [r2, #16]
}
 80093cc:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 80093ce:	f7f8 fb17 	bl	8001a00 <HAL_SPI_TxCpltCallback>
}
 80093d2:	bd08      	pop	{r3, pc}

080093d4 <HAL_SPI_RxCpltCallback>:
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop

080093d8 <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop

080093dc <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop

080093e0 <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 80093e0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80093e2:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80093e4:	f7ff fffa 	bl	80093dc <HAL_SPI_TxHalfCpltCallback>
}
 80093e8:	bd08      	pop	{r3, pc}
 80093ea:	bf00      	nop

080093ec <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop

080093f0 <SPI_DMAError>:
{
 80093f0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80093f4:	f7fa fb06 	bl	8003a04 <HAL_DMA_GetError>
 80093f8:	2802      	cmp	r0, #2
 80093fa:	d100      	bne.n	80093fe <SPI_DMAError+0xe>
}
 80093fc:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 80093fe:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009400:	4930      	ldr	r1, [pc, #192]	@ (80094c4 <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
 8009402:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009404:	6998      	ldr	r0, [r3, #24]
 8009406:	f040 0008 	orr.w	r0, r0, #8
 800940a:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800940c:	6998      	ldr	r0, [r3, #24]
 800940e:	f040 0010 	orr.w	r0, r0, #16
 8009412:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	f020 0001 	bic.w	r0, r0, #1
 800941a:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800941c:	6918      	ldr	r0, [r3, #16]
 800941e:	4001      	ands	r1, r0
 8009420:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009422:	6899      	ldr	r1, [r3, #8]
 8009424:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8009428:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800942a:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800942e:	2904      	cmp	r1, #4
 8009430:	d001      	beq.n	8009436 <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009432:	0691      	lsls	r1, r2, #26
 8009434:	d43a      	bmi.n	80094ac <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009436:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800943a:	2903      	cmp	r1, #3
 800943c:	d001      	beq.n	8009442 <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800943e:	0650      	lsls	r0, r2, #25
 8009440:	d429      	bmi.n	8009496 <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009442:	0591      	lsls	r1, r2, #22
 8009444:	d509      	bpl.n	800945a <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009446:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800944a:	f041 0101 	orr.w	r1, r1, #1
 800944e:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009452:	6999      	ldr	r1, [r3, #24]
 8009454:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8009458:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800945a:	05d2      	lsls	r2, r2, #23
 800945c:	d509      	bpl.n	8009472 <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800945e:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8009462:	f042 0208 	orr.w	r2, r2, #8
 8009466:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800946a:	699a      	ldr	r2, [r3, #24]
 800946c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009470:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8009472:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8009474:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8009476:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8009478:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800947c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009480:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009484:	f043 0310 	orr.w	r3, r3, #16
 8009488:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800948c:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    HAL_SPI_ErrorCallback(hspi);
 8009490:	f7ff ffac 	bl	80093ec <HAL_SPI_ErrorCallback>
}
 8009494:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009496:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800949a:	f041 0104 	orr.w	r1, r1, #4
 800949e:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094a2:	6999      	ldr	r1, [r3, #24]
 80094a4:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80094a8:	6199      	str	r1, [r3, #24]
 80094aa:	e7ca      	b.n	8009442 <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80094ac:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80094b0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80094b4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80094b8:	6999      	ldr	r1, [r3, #24]
 80094ba:	f041 0120 	orr.w	r1, r1, #32
 80094be:	6199      	str	r1, [r3, #24]
 80094c0:	e7b9      	b.n	8009436 <SPI_DMAError+0x46>
 80094c2:	bf00      	nop
 80094c4:	fffffc90 	.word	0xfffffc90

080094c8 <SPI_DMAAbortOnError>:
{
 80094c8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ca:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 80094cc:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80094ce:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 80094d0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80094d4:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80094d8:	f880 2081 	strb.w	r2, [r0, #129]	@ 0x81
  HAL_SPI_ErrorCallback(hspi);
 80094dc:	f7ff ff86 	bl	80093ec <HAL_SPI_ErrorCallback>
}
 80094e0:	bd08      	pop	{r3, pc}
 80094e2:	bf00      	nop

080094e4 <HAL_SPI_SuspendCallback>:
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop

080094e8 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 80094e8:	6803      	ldr	r3, [r0, #0]
{
 80094ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 80094ee:	691e      	ldr	r6, [r3, #16]
{
 80094f0:	4604      	mov	r4, r0
  uint32_t itflag   = hspi->Instance->SR;
 80094f2:	6959      	ldr	r1, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80094f4:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 80094f8:	ea06 0201 	and.w	r2, r6, r1
  HAL_SPI_StateTypeDef State = hspi->State;
 80094fc:	f890 5081 	ldrb.w	r5, [r0, #129]	@ 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009500:	0509      	lsls	r1, r1, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 8009502:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009504:	d502      	bpl.n	800950c <HAL_SPI_IRQHandler+0x24>
 8009506:	0737      	lsls	r7, r6, #28
 8009508:	f100 80cd 	bmi.w	80096a6 <HAL_SPI_IRQHandler+0x1be>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800950c:	f002 0164 	and.w	r1, r2, #100	@ 0x64
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009510:	f002 0745 	and.w	r7, r2, #69	@ 0x45
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009514:	f002 0626 	and.w	r6, r2, #38	@ 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009518:	2904      	cmp	r1, #4
 800951a:	d039      	beq.n	8009590 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800951c:	2f01      	cmp	r7, #1
 800951e:	d03f      	beq.n	80095a0 <HAL_SPI_IRQHandler+0xb8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009520:	2e02      	cmp	r6, #2
 8009522:	f000 80d6 	beq.w	80096d2 <HAL_SPI_IRQHandler+0x1ea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009526:	0716      	lsls	r6, r2, #28
 8009528:	d557      	bpl.n	80095da <HAL_SPI_IRQHandler+0xf2>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800952a:	699a      	ldr	r2, [r3, #24]
 800952c:	f042 0208 	orr.w	r2, r2, #8
 8009530:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009532:	699a      	ldr	r2, [r3, #24]
 8009534:	f042 0210 	orr.w	r2, r2, #16
 8009538:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009540:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	f022 0208 	bic.w	r2, r2, #8
 8009548:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 8009550:	d12e      	bne.n	80095b0 <HAL_SPI_IRQHandler+0xc8>
      while (hspi->RxXferCount != 0UL)
 8009552:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8009556:	b292      	uxth	r2, r2
 8009558:	b352      	cbz	r2, 80095b0 <HAL_SPI_IRQHandler+0xc8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800955a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800955c:	e00e      	b.n	800957c <HAL_SPI_IRQHandler+0x94>
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009562:	f841 2b04 	str.w	r2, [r1], #4
        hspi->RxXferCount--;
 8009566:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800956a:	6661      	str	r1, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 800956c:	3a01      	subs	r2, #1
 800956e:	b292      	uxth	r2, r2
 8009570:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009574:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8009578:	b292      	uxth	r2, r2
 800957a:	b1ca      	cbz	r2, 80095b0 <HAL_SPI_IRQHandler+0xc8>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800957c:	68e2      	ldr	r2, [r4, #12]
 800957e:	2a0f      	cmp	r2, #15
 8009580:	d8ed      	bhi.n	800955e <HAL_SPI_IRQHandler+0x76>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009582:	2a07      	cmp	r2, #7
 8009584:	f240 809e 	bls.w	80096c4 <HAL_SPI_IRQHandler+0x1dc>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009588:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800958a:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800958e:	e7ea      	b.n	8009566 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 8009590:	4620      	mov	r0, r4
 8009592:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009594:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009596:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009598:	4620      	mov	r0, r4
 800959a:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800959c:	2f01      	cmp	r7, #1
 800959e:	d102      	bne.n	80095a6 <HAL_SPI_IRQHandler+0xbe>
    hspi->RxISR(hspi);
 80095a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80095a2:	4620      	mov	r0, r4
 80095a4:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80095a6:	2e02      	cmp	r6, #2
 80095a8:	f000 8093 	beq.w	80096d2 <HAL_SPI_IRQHandler+0x1ea>
}
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 80095b0:	4620      	mov	r0, r4
 80095b2:	f7ff fd0d 	bl	8008fd0 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d17c      	bne.n	80096be <HAL_SPI_IRQHandler+0x1d6>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80095c4:	2d05      	cmp	r5, #5
 80095c6:	f000 8089 	beq.w	80096dc <HAL_SPI_IRQHandler+0x1f4>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80095ca:	2d04      	cmp	r5, #4
 80095cc:	f000 8089 	beq.w	80096e2 <HAL_SPI_IRQHandler+0x1fa>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80095d0:	2d03      	cmp	r5, #3
 80095d2:	d1eb      	bne.n	80095ac <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_TxCpltCallback(hspi);
 80095d4:	f7f8 fa14 	bl	8001a00 <HAL_SPI_TxCpltCallback>
 80095d8:	e7e8      	b.n	80095ac <HAL_SPI_IRQHandler+0xc4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80095da:	f412 7f58 	tst.w	r2, #864	@ 0x360
 80095de:	d0e5      	beq.n	80095ac <HAL_SPI_IRQHandler+0xc4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80095e0:	0655      	lsls	r5, r2, #25
 80095e2:	d509      	bpl.n	80095f8 <HAL_SPI_IRQHandler+0x110>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095e4:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80095e8:	f041 0104 	orr.w	r1, r1, #4
 80095ec:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095f0:	6999      	ldr	r1, [r3, #24]
 80095f2:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80095f6:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80095f8:	0590      	lsls	r0, r2, #22
 80095fa:	d509      	bpl.n	8009610 <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095fc:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8009600:	f041 0101 	orr.w	r1, r1, #1
 8009604:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009608:	6999      	ldr	r1, [r3, #24]
 800960a:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800960e:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009610:	05d1      	lsls	r1, r2, #23
 8009612:	d509      	bpl.n	8009628 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009614:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8009618:	f041 0108 	orr.w	r1, r1, #8
 800961c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009620:	6999      	ldr	r1, [r3, #24]
 8009622:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8009626:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009628:	0692      	lsls	r2, r2, #26
 800962a:	d509      	bpl.n	8009640 <HAL_SPI_IRQHandler+0x158>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800962c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8009630:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009634:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009638:	699a      	ldr	r2, [r3, #24]
 800963a:	f042 0220 	orr.w	r2, r2, #32
 800963e:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009640:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8009644:	2a00      	cmp	r2, #0
 8009646:	d0b1      	beq.n	80095ac <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE(hspi);
 8009648:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800964a:	f40c 4c40 	and.w	ip, ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800964e:	4a26      	ldr	r2, [pc, #152]	@ (80096e8 <HAL_SPI_IRQHandler+0x200>)
      __HAL_SPI_DISABLE(hspi);
 8009650:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009654:	f5bc 4f40 	cmp.w	ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE(hspi);
 8009658:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800965a:	6919      	ldr	r1, [r3, #16]
 800965c:	ea02 0201 	and.w	r2, r2, r1
 8009660:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009662:	d128      	bne.n	80096b6 <HAL_SPI_IRQHandler+0x1ce>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009664:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 8009666:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009668:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800966c:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800966e:	b150      	cbz	r0, 8009686 <HAL_SPI_IRQHandler+0x19e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009670:	4b1e      	ldr	r3, [pc, #120]	@ (80096ec <HAL_SPI_IRQHandler+0x204>)
 8009672:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009674:	f7f9 fda0 	bl	80031b8 <HAL_DMA_Abort_IT>
 8009678:	b128      	cbz	r0, 8009686 <HAL_SPI_IRQHandler+0x19e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800967a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800967e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009682:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        if (hspi->hdmatx != NULL)
 8009686:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8009688:	2800      	cmp	r0, #0
 800968a:	d08f      	beq.n	80095ac <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800968c:	4b17      	ldr	r3, [pc, #92]	@ (80096ec <HAL_SPI_IRQHandler+0x204>)
 800968e:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009690:	f7f9 fd92 	bl	80031b8 <HAL_DMA_Abort_IT>
 8009694:	2800      	cmp	r0, #0
 8009696:	d089      	beq.n	80095ac <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009698:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800969c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80096a4:	e782      	b.n	80095ac <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80096a6:	699a      	ldr	r2, [r3, #24]
 80096a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096ac:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 80096ae:	f7ff ff19 	bl	80094e4 <HAL_SPI_SuspendCallback>
}
 80096b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 80096b6:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 80096b8:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 80096ba:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80096be:	f7ff fe95 	bl	80093ec <HAL_SPI_ErrorCallback>
 80096c2:	e773      	b.n	80095ac <HAL_SPI_IRQHandler+0xc4>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80096ca:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80096cc:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80096ce:	3101      	adds	r1, #1
 80096d0:	e749      	b.n	8009566 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 80096d2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80096d4:	4620      	mov	r0, r4
}
 80096d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 80096da:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 80096dc:	f7ff fe7c 	bl	80093d8 <HAL_SPI_TxRxCpltCallback>
 80096e0:	e764      	b.n	80095ac <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_RxCpltCallback(hspi);
 80096e2:	f7ff fe77 	bl	80093d4 <HAL_SPI_RxCpltCallback>
 80096e6:	e761      	b.n	80095ac <HAL_SPI_IRQHandler+0xc4>
 80096e8:	fffffc94 	.word	0xfffffc94
 80096ec:	080094c9 	.word	0x080094c9

080096f0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80096f0:	b084      	sub	sp, #16
 80096f2:	b410      	push	{r4}
 80096f4:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80096f8:	4614      	mov	r4, r2
{
 80096fa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 80096fe:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 8009700:	9904      	ldr	r1, [sp, #16]
{
 8009702:	4602      	mov	r2, r0
             Init.BusWide             | \
 8009704:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 8009706:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009708:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800970a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800970c:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800970e:	4303      	orrs	r3, r0

  return HAL_OK;
}
 8009710:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 8009712:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009714:	4903      	ldr	r1, [pc, #12]	@ (8009724 <SDMMC_Init+0x34>)
 8009716:	4021      	ands	r1, r4
}
 8009718:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800971c:	430b      	orrs	r3, r1
}
 800971e:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009720:	6053      	str	r3, [r2, #4]
}
 8009722:	4770      	bx	lr
 8009724:	ffc02c00 	.word	0xffc02c00

08009728 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009728:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop

08009730 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009730:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009732:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8009734:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8009736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800973a:	4770      	bx	lr

0800973c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800973c:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800973e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	f042 0203 	orr.w	r2, r2, #3
 8009746:	601a      	str	r2, [r3, #0]
}
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop

0800974c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800974c:	6800      	ldr	r0, [r0, #0]
}
 800974e:	f000 0003 	and.w	r0, r0, #3
 8009752:	4770      	bx	lr

08009754 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009754:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8009756:	5840      	ldr	r0, [r0, r1]
}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop

0800975c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800975c:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800975e:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 8009762:	690d      	ldr	r5, [r1, #16]
{
 8009764:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009766:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009768:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 800976a:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800976c:	6250      	str	r0, [r2, #36]	@ 0x24
                       Data->TransferDir   | \
 800976e:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 8009770:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 8009772:	6294      	str	r4, [r2, #40]	@ 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009774:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
                       Data->TransferMode  | \
 8009776:	4303      	orrs	r3, r0

  return HAL_OK;

}
 8009778:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800977a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800977e:	430b      	orrs	r3, r1
}
 8009780:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009782:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop

08009788 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009788:	4a4f      	ldr	r2, [pc, #316]	@ (80098c8 <SDMMC_CmdBlockLength+0x140>)
{
 800978a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800978c:	4b4f      	ldr	r3, [pc, #316]	@ (80098cc <SDMMC_CmdBlockLength+0x144>)
 800978e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009790:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009794:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009798:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800979c:	484c      	ldr	r0, [pc, #304]	@ (80098d0 <SDMMC_CmdBlockLength+0x148>)
 800979e:	f241 1310 	movw	r3, #4368	@ 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097a2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097a4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097a6:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097aa:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097ac:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097b0:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 80097b4:	1e53      	subs	r3, r2, #1
 80097b6:	b14a      	cbz	r2, 80097cc <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80097b8:	4946      	ldr	r1, [pc, #280]	@ (80098d4 <SDMMC_CmdBlockLength+0x14c>)
    sta_reg = SDMMCx->STA;
 80097ba:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 80097be:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097c0:	420a      	tst	r2, r1
 80097c2:	d001      	beq.n	80097c8 <SDMMC_CmdBlockLength+0x40>
 80097c4:	0492      	lsls	r2, r2, #18
 80097c6:	d504      	bpl.n	80097d2 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 80097c8:	1c58      	adds	r0, r3, #1
 80097ca:	d1f6      	bne.n	80097ba <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80097cc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80097d0:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097d2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80097d6:	075b      	lsls	r3, r3, #29
 80097d8:	d443      	bmi.n	8009862 <SDMMC_CmdBlockLength+0xda>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097da:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80097de:	07d8      	lsls	r0, r3, #31
 80097e0:	d409      	bmi.n	80097f6 <SDMMC_CmdBlockLength+0x6e>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097e2:	4b3d      	ldr	r3, [pc, #244]	@ (80098d8 <SDMMC_CmdBlockLength+0x150>)
 80097e4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80097e8:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b10      	cmp	r3, #16
 80097f0:	d005      	beq.n	80097fe <SDMMC_CmdBlockLength+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097f2:	2001      	movs	r0, #1
 80097f4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097f6:	2301      	movs	r3, #1
 80097f8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097fc:	e7f9      	b.n	80097f2 <SDMMC_CmdBlockLength+0x6a>
  return (*(__IO uint32_t *) tmp);
 80097fe:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009802:	4836      	ldr	r0, [pc, #216]	@ (80098dc <SDMMC_CmdBlockLength+0x154>)
 8009804:	4018      	ands	r0, r3
 8009806:	b358      	cbz	r0, 8009860 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009808:	2b00      	cmp	r3, #0
 800980a:	db2f      	blt.n	800986c <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800980c:	0059      	lsls	r1, r3, #1
 800980e:	d430      	bmi.n	8009872 <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009810:	009a      	lsls	r2, r3, #2
 8009812:	d430      	bmi.n	8009876 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009814:	00d9      	lsls	r1, r3, #3
 8009816:	d430      	bmi.n	800987a <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009818:	011a      	lsls	r2, r3, #4
 800981a:	d431      	bmi.n	8009880 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800981c:	0159      	lsls	r1, r3, #5
 800981e:	d432      	bmi.n	8009886 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009820:	01da      	lsls	r2, r3, #7
 8009822:	d433      	bmi.n	800988c <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009824:	0219      	lsls	r1, r3, #8
 8009826:	d434      	bmi.n	8009892 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009828:	025a      	lsls	r2, r3, #9
 800982a:	d435      	bmi.n	8009898 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800982c:	0299      	lsls	r1, r3, #10
 800982e:	d43f      	bmi.n	80098b0 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009830:	02da      	lsls	r2, r3, #11
 8009832:	d43a      	bmi.n	80098aa <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009834:	0359      	lsls	r1, r3, #13
 8009836:	d435      	bmi.n	80098a4 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009838:	039a      	lsls	r2, r3, #14
 800983a:	d430      	bmi.n	800989e <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800983c:	03d9      	lsls	r1, r3, #15
 800983e:	d440      	bmi.n	80098c2 <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009840:	041a      	lsls	r2, r3, #16
 8009842:	d43b      	bmi.n	80098bc <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009844:	0459      	lsls	r1, r3, #17
 8009846:	d436      	bmi.n	80098b6 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009848:	049a      	lsls	r2, r3, #18
 800984a:	d407      	bmi.n	800985c <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800984c:	f013 0f08 	tst.w	r3, #8
 8009850:	bf0c      	ite	eq
 8009852:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009856:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800985a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800985c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009860:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009862:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009864:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009866:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800986a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800986c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009870:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009872:	2040      	movs	r0, #64	@ 0x40
 8009874:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009876:	2080      	movs	r0, #128	@ 0x80
 8009878:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800987a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800987e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009880:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009884:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009886:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800988a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800988c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009890:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009892:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009896:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009898:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800989c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800989e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80098a2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80098a4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80098a8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80098aa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80098ae:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80098b0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80098b4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80098b6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80098ba:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80098bc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80098c0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80098c2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80098c6:	4770      	bx	lr
 80098c8:	24000008 	.word	0x24000008
 80098cc:	10624dd3 	.word	0x10624dd3
 80098d0:	fffee0c0 	.word	0xfffee0c0
 80098d4:	00200045 	.word	0x00200045
 80098d8:	002000c5 	.word	0x002000c5
 80098dc:	fdffe008 	.word	0xfdffe008

080098e0 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098e0:	4a4f      	ldr	r2, [pc, #316]	@ (8009a20 <SDMMC_CmdReadSingleBlock+0x140>)
{
 80098e2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098e4:	4b4f      	ldr	r3, [pc, #316]	@ (8009a24 <SDMMC_CmdReadSingleBlock+0x144>)
 80098e6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80098e8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098ec:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098f0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80098f4:	484c      	ldr	r0, [pc, #304]	@ (8009a28 <SDMMC_CmdReadSingleBlock+0x148>)
 80098f6:	f241 1311 	movw	r3, #4369	@ 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098fa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098fc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098fe:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009902:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009904:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009908:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800990c:	1e53      	subs	r3, r2, #1
 800990e:	b14a      	cbz	r2, 8009924 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009910:	4946      	ldr	r1, [pc, #280]	@ (8009a2c <SDMMC_CmdReadSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009912:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009916:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009918:	420a      	tst	r2, r1
 800991a:	d001      	beq.n	8009920 <SDMMC_CmdReadSingleBlock+0x40>
 800991c:	0492      	lsls	r2, r2, #18
 800991e:	d504      	bpl.n	800992a <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8009920:	1c58      	adds	r0, r3, #1
 8009922:	d1f6      	bne.n	8009912 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009924:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009928:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800992a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800992e:	075b      	lsls	r3, r3, #29
 8009930:	d443      	bmi.n	80099ba <SDMMC_CmdReadSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009932:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009936:	07d8      	lsls	r0, r3, #31
 8009938:	d409      	bmi.n	800994e <SDMMC_CmdReadSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800993a:	4b3d      	ldr	r3, [pc, #244]	@ (8009a30 <SDMMC_CmdReadSingleBlock+0x150>)
 800993c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009940:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b11      	cmp	r3, #17
 8009948:	d005      	beq.n	8009956 <SDMMC_CmdReadSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800994a:	2001      	movs	r0, #1
 800994c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800994e:	2301      	movs	r3, #1
 8009950:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009954:	e7f9      	b.n	800994a <SDMMC_CmdReadSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009956:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800995a:	4836      	ldr	r0, [pc, #216]	@ (8009a34 <SDMMC_CmdReadSingleBlock+0x154>)
 800995c:	4018      	ands	r0, r3
 800995e:	b358      	cbz	r0, 80099b8 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009960:	2b00      	cmp	r3, #0
 8009962:	db2f      	blt.n	80099c4 <SDMMC_CmdReadSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009964:	0059      	lsls	r1, r3, #1
 8009966:	d430      	bmi.n	80099ca <SDMMC_CmdReadSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009968:	009a      	lsls	r2, r3, #2
 800996a:	d430      	bmi.n	80099ce <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800996c:	00d9      	lsls	r1, r3, #3
 800996e:	d430      	bmi.n	80099d2 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009970:	011a      	lsls	r2, r3, #4
 8009972:	d431      	bmi.n	80099d8 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009974:	0159      	lsls	r1, r3, #5
 8009976:	d432      	bmi.n	80099de <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009978:	01da      	lsls	r2, r3, #7
 800997a:	d433      	bmi.n	80099e4 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800997c:	0219      	lsls	r1, r3, #8
 800997e:	d434      	bmi.n	80099ea <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009980:	025a      	lsls	r2, r3, #9
 8009982:	d435      	bmi.n	80099f0 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009984:	0299      	lsls	r1, r3, #10
 8009986:	d43f      	bmi.n	8009a08 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009988:	02da      	lsls	r2, r3, #11
 800998a:	d43a      	bmi.n	8009a02 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800998c:	0359      	lsls	r1, r3, #13
 800998e:	d435      	bmi.n	80099fc <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009990:	039a      	lsls	r2, r3, #14
 8009992:	d430      	bmi.n	80099f6 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009994:	03d9      	lsls	r1, r3, #15
 8009996:	d440      	bmi.n	8009a1a <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009998:	041a      	lsls	r2, r3, #16
 800999a:	d43b      	bmi.n	8009a14 <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800999c:	0459      	lsls	r1, r3, #17
 800999e:	d436      	bmi.n	8009a0e <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80099a0:	049a      	lsls	r2, r3, #18
 80099a2:	d407      	bmi.n	80099b4 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80099a4:	f013 0f08 	tst.w	r3, #8
 80099a8:	bf0c      	ite	eq
 80099aa:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80099ae:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80099b2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80099b4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 80099b8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099ba:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099bc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099be:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099c2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80099c4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80099c8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80099ca:	2040      	movs	r0, #64	@ 0x40
 80099cc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80099ce:	2080      	movs	r0, #128	@ 0x80
 80099d0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80099d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80099d6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80099d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80099dc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80099de:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80099e2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80099e4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80099e8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099ea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80099ee:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80099f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80099f4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099f6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80099fa:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099fc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009a00:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009a02:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009a06:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009a08:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009a0c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a0e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009a12:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a14:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009a18:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a1a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009a1e:	4770      	bx	lr
 8009a20:	24000008 	.word	0x24000008
 8009a24:	10624dd3 	.word	0x10624dd3
 8009a28:	fffee0c0 	.word	0xfffee0c0
 8009a2c:	00200045 	.word	0x00200045
 8009a30:	002000c5 	.word	0x002000c5
 8009a34:	fdffe008 	.word	0xfdffe008

08009a38 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a38:	4a4f      	ldr	r2, [pc, #316]	@ (8009b78 <SDMMC_CmdReadMultiBlock+0x140>)
{
 8009a3a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8009b7c <SDMMC_CmdReadMultiBlock+0x144>)
 8009a3e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009a40:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a44:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a48:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009a4c:	484c      	ldr	r0, [pc, #304]	@ (8009b80 <SDMMC_CmdReadMultiBlock+0x148>)
 8009a4e:	f241 1312 	movw	r3, #4370	@ 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a52:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a54:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a56:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a5a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a5c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a60:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009a64:	1e53      	subs	r3, r2, #1
 8009a66:	b14a      	cbz	r2, 8009a7c <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009a68:	4946      	ldr	r1, [pc, #280]	@ (8009b84 <SDMMC_CmdReadMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009a6a:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009a6e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a70:	420a      	tst	r2, r1
 8009a72:	d001      	beq.n	8009a78 <SDMMC_CmdReadMultiBlock+0x40>
 8009a74:	0492      	lsls	r2, r2, #18
 8009a76:	d504      	bpl.n	8009a82 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 8009a78:	1c58      	adds	r0, r3, #1
 8009a7a:	d1f6      	bne.n	8009a6a <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009a7c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009a80:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a82:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009a86:	075b      	lsls	r3, r3, #29
 8009a88:	d443      	bmi.n	8009b12 <SDMMC_CmdReadMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a8a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009a8e:	07d8      	lsls	r0, r3, #31
 8009a90:	d409      	bmi.n	8009aa6 <SDMMC_CmdReadMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a92:	4b3d      	ldr	r3, [pc, #244]	@ (8009b88 <SDMMC_CmdReadMultiBlock+0x150>)
 8009a94:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a98:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b12      	cmp	r3, #18
 8009aa0:	d005      	beq.n	8009aae <SDMMC_CmdReadMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aac:	e7f9      	b.n	8009aa2 <SDMMC_CmdReadMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009aae:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009ab2:	4836      	ldr	r0, [pc, #216]	@ (8009b8c <SDMMC_CmdReadMultiBlock+0x154>)
 8009ab4:	4018      	ands	r0, r3
 8009ab6:	b358      	cbz	r0, 8009b10 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	db2f      	blt.n	8009b1c <SDMMC_CmdReadMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009abc:	0059      	lsls	r1, r3, #1
 8009abe:	d430      	bmi.n	8009b22 <SDMMC_CmdReadMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ac0:	009a      	lsls	r2, r3, #2
 8009ac2:	d430      	bmi.n	8009b26 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ac4:	00d9      	lsls	r1, r3, #3
 8009ac6:	d430      	bmi.n	8009b2a <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ac8:	011a      	lsls	r2, r3, #4
 8009aca:	d431      	bmi.n	8009b30 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009acc:	0159      	lsls	r1, r3, #5
 8009ace:	d432      	bmi.n	8009b36 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ad0:	01da      	lsls	r2, r3, #7
 8009ad2:	d433      	bmi.n	8009b3c <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ad4:	0219      	lsls	r1, r3, #8
 8009ad6:	d434      	bmi.n	8009b42 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ad8:	025a      	lsls	r2, r3, #9
 8009ada:	d435      	bmi.n	8009b48 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009adc:	0299      	lsls	r1, r3, #10
 8009ade:	d43f      	bmi.n	8009b60 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ae0:	02da      	lsls	r2, r3, #11
 8009ae2:	d43a      	bmi.n	8009b5a <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ae4:	0359      	lsls	r1, r3, #13
 8009ae6:	d435      	bmi.n	8009b54 <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ae8:	039a      	lsls	r2, r3, #14
 8009aea:	d430      	bmi.n	8009b4e <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009aec:	03d9      	lsls	r1, r3, #15
 8009aee:	d440      	bmi.n	8009b72 <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009af0:	041a      	lsls	r2, r3, #16
 8009af2:	d43b      	bmi.n	8009b6c <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009af4:	0459      	lsls	r1, r3, #17
 8009af6:	d436      	bmi.n	8009b66 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009af8:	049a      	lsls	r2, r3, #18
 8009afa:	d407      	bmi.n	8009b0c <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009afc:	f013 0f08 	tst.w	r3, #8
 8009b00:	bf0c      	ite	eq
 8009b02:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009b06:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009b0a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009b0c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009b10:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b12:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b14:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b16:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b1a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009b1c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009b20:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009b22:	2040      	movs	r0, #64	@ 0x40
 8009b24:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009b26:	2080      	movs	r0, #128	@ 0x80
 8009b28:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009b2a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009b2e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009b30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009b34:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009b36:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009b3a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009b3c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009b40:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b42:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009b46:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b48:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009b4c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b4e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009b52:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009b54:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009b58:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009b5a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009b5e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009b60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009b64:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b66:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009b6a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009b6c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009b70:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009b72:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009b76:	4770      	bx	lr
 8009b78:	24000008 	.word	0x24000008
 8009b7c:	10624dd3 	.word	0x10624dd3
 8009b80:	fffee0c0 	.word	0xfffee0c0
 8009b84:	00200045 	.word	0x00200045
 8009b88:	002000c5 	.word	0x002000c5
 8009b8c:	fdffe008 	.word	0xfdffe008

08009b90 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b90:	4a4f      	ldr	r2, [pc, #316]	@ (8009cd0 <SDMMC_CmdWriteSingleBlock+0x140>)
{
 8009b92:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b94:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd4 <SDMMC_CmdWriteSingleBlock+0x144>)
 8009b96:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009b98:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b9c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ba0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009ba4:	484c      	ldr	r0, [pc, #304]	@ (8009cd8 <SDMMC_CmdWriteSingleBlock+0x148>)
 8009ba6:	f241 1318 	movw	r3, #4376	@ 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009baa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009bac:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bae:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009bb2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009bb4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009bb8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009bbc:	1e53      	subs	r3, r2, #1
 8009bbe:	b14a      	cbz	r2, 8009bd4 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009bc0:	4946      	ldr	r1, [pc, #280]	@ (8009cdc <SDMMC_CmdWriteSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009bc2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009bc6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009bc8:	420a      	tst	r2, r1
 8009bca:	d001      	beq.n	8009bd0 <SDMMC_CmdWriteSingleBlock+0x40>
 8009bcc:	0492      	lsls	r2, r2, #18
 8009bce:	d504      	bpl.n	8009bda <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 8009bd0:	1c58      	adds	r0, r3, #1
 8009bd2:	d1f6      	bne.n	8009bc2 <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009bd4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009bd8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bda:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009bde:	075b      	lsls	r3, r3, #29
 8009be0:	d443      	bmi.n	8009c6a <SDMMC_CmdWriteSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009be2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009be6:	07d8      	lsls	r0, r3, #31
 8009be8:	d409      	bmi.n	8009bfe <SDMMC_CmdWriteSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bea:	4b3d      	ldr	r3, [pc, #244]	@ (8009ce0 <SDMMC_CmdWriteSingleBlock+0x150>)
 8009bec:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009bf0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b18      	cmp	r3, #24
 8009bf8:	d005      	beq.n	8009c06 <SDMMC_CmdWriteSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c04:	e7f9      	b.n	8009bfa <SDMMC_CmdWriteSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009c06:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009c0a:	4836      	ldr	r0, [pc, #216]	@ (8009ce4 <SDMMC_CmdWriteSingleBlock+0x154>)
 8009c0c:	4018      	ands	r0, r3
 8009c0e:	b358      	cbz	r0, 8009c68 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	db2f      	blt.n	8009c74 <SDMMC_CmdWriteSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009c14:	0059      	lsls	r1, r3, #1
 8009c16:	d430      	bmi.n	8009c7a <SDMMC_CmdWriteSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009c18:	009a      	lsls	r2, r3, #2
 8009c1a:	d430      	bmi.n	8009c7e <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c1c:	00d9      	lsls	r1, r3, #3
 8009c1e:	d430      	bmi.n	8009c82 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c20:	011a      	lsls	r2, r3, #4
 8009c22:	d431      	bmi.n	8009c88 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c24:	0159      	lsls	r1, r3, #5
 8009c26:	d432      	bmi.n	8009c8e <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c28:	01da      	lsls	r2, r3, #7
 8009c2a:	d433      	bmi.n	8009c94 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c2c:	0219      	lsls	r1, r3, #8
 8009c2e:	d434      	bmi.n	8009c9a <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c30:	025a      	lsls	r2, r3, #9
 8009c32:	d435      	bmi.n	8009ca0 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c34:	0299      	lsls	r1, r3, #10
 8009c36:	d43f      	bmi.n	8009cb8 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c38:	02da      	lsls	r2, r3, #11
 8009c3a:	d43a      	bmi.n	8009cb2 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c3c:	0359      	lsls	r1, r3, #13
 8009c3e:	d435      	bmi.n	8009cac <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c40:	039a      	lsls	r2, r3, #14
 8009c42:	d430      	bmi.n	8009ca6 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c44:	03d9      	lsls	r1, r3, #15
 8009c46:	d440      	bmi.n	8009cca <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c48:	041a      	lsls	r2, r3, #16
 8009c4a:	d43b      	bmi.n	8009cc4 <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c4c:	0459      	lsls	r1, r3, #17
 8009c4e:	d436      	bmi.n	8009cbe <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c50:	049a      	lsls	r2, r3, #18
 8009c52:	d407      	bmi.n	8009c64 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c54:	f013 0f08 	tst.w	r3, #8
 8009c58:	bf0c      	ite	eq
 8009c5a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009c5e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009c62:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009c64:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009c68:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c6a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c6c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c6e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c72:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c74:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009c78:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c7a:	2040      	movs	r0, #64	@ 0x40
 8009c7c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c7e:	2080      	movs	r0, #128	@ 0x80
 8009c80:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c82:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009c86:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c88:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009c8c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c8e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009c92:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c94:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009c98:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c9a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009c9e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ca0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009ca4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009ca6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009caa:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009cac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009cb0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009cb2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009cb6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009cb8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009cbc:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009cbe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009cc2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009cc4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009cc8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009cca:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009cce:	4770      	bx	lr
 8009cd0:	24000008 	.word	0x24000008
 8009cd4:	10624dd3 	.word	0x10624dd3
 8009cd8:	fffee0c0 	.word	0xfffee0c0
 8009cdc:	00200045 	.word	0x00200045
 8009ce0:	002000c5 	.word	0x002000c5
 8009ce4:	fdffe008 	.word	0xfdffe008

08009ce8 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8009e28 <SDMMC_CmdWriteMultiBlock+0x140>)
{
 8009cea:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cec:	4b4f      	ldr	r3, [pc, #316]	@ (8009e2c <SDMMC_CmdWriteMultiBlock+0x144>)
 8009cee:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009cf0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cf4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cf8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009cfc:	484c      	ldr	r0, [pc, #304]	@ (8009e30 <SDMMC_CmdWriteMultiBlock+0x148>)
 8009cfe:	f241 1319 	movw	r3, #4377	@ 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009d02:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009d04:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009d06:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009d0a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009d0c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009d10:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009d14:	1e53      	subs	r3, r2, #1
 8009d16:	b14a      	cbz	r2, 8009d2c <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009d18:	4946      	ldr	r1, [pc, #280]	@ (8009e34 <SDMMC_CmdWriteMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009d1a:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009d1e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009d20:	420a      	tst	r2, r1
 8009d22:	d001      	beq.n	8009d28 <SDMMC_CmdWriteMultiBlock+0x40>
 8009d24:	0492      	lsls	r2, r2, #18
 8009d26:	d504      	bpl.n	8009d32 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 8009d28:	1c58      	adds	r0, r3, #1
 8009d2a:	d1f6      	bne.n	8009d1a <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009d2c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009d30:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d32:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009d36:	075b      	lsls	r3, r3, #29
 8009d38:	d443      	bmi.n	8009dc2 <SDMMC_CmdWriteMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d3a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009d3e:	07d8      	lsls	r0, r3, #31
 8009d40:	d409      	bmi.n	8009d56 <SDMMC_CmdWriteMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d42:	4b3d      	ldr	r3, [pc, #244]	@ (8009e38 <SDMMC_CmdWriteMultiBlock+0x150>)
 8009d44:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009d48:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b19      	cmp	r3, #25
 8009d50:	d005      	beq.n	8009d5e <SDMMC_CmdWriteMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d52:	2001      	movs	r0, #1
 8009d54:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d56:	2301      	movs	r3, #1
 8009d58:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d5c:	e7f9      	b.n	8009d52 <SDMMC_CmdWriteMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009d5e:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d62:	4836      	ldr	r0, [pc, #216]	@ (8009e3c <SDMMC_CmdWriteMultiBlock+0x154>)
 8009d64:	4018      	ands	r0, r3
 8009d66:	b358      	cbz	r0, 8009dc0 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	db2f      	blt.n	8009dcc <SDMMC_CmdWriteMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d6c:	0059      	lsls	r1, r3, #1
 8009d6e:	d430      	bmi.n	8009dd2 <SDMMC_CmdWriteMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d70:	009a      	lsls	r2, r3, #2
 8009d72:	d430      	bmi.n	8009dd6 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d74:	00d9      	lsls	r1, r3, #3
 8009d76:	d430      	bmi.n	8009dda <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d78:	011a      	lsls	r2, r3, #4
 8009d7a:	d431      	bmi.n	8009de0 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d7c:	0159      	lsls	r1, r3, #5
 8009d7e:	d432      	bmi.n	8009de6 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d80:	01da      	lsls	r2, r3, #7
 8009d82:	d433      	bmi.n	8009dec <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d84:	0219      	lsls	r1, r3, #8
 8009d86:	d434      	bmi.n	8009df2 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d88:	025a      	lsls	r2, r3, #9
 8009d8a:	d435      	bmi.n	8009df8 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d8c:	0299      	lsls	r1, r3, #10
 8009d8e:	d43f      	bmi.n	8009e10 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d90:	02da      	lsls	r2, r3, #11
 8009d92:	d43a      	bmi.n	8009e0a <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d94:	0359      	lsls	r1, r3, #13
 8009d96:	d435      	bmi.n	8009e04 <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d98:	039a      	lsls	r2, r3, #14
 8009d9a:	d430      	bmi.n	8009dfe <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d9c:	03d9      	lsls	r1, r3, #15
 8009d9e:	d440      	bmi.n	8009e22 <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009da0:	041a      	lsls	r2, r3, #16
 8009da2:	d43b      	bmi.n	8009e1c <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009da4:	0459      	lsls	r1, r3, #17
 8009da6:	d436      	bmi.n	8009e16 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009da8:	049a      	lsls	r2, r3, #18
 8009daa:	d407      	bmi.n	8009dbc <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009dac:	f013 0f08 	tst.w	r3, #8
 8009db0:	bf0c      	ite	eq
 8009db2:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009db6:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009dba:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009dbc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009dc0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009dc2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dc4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009dc6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dca:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009dcc:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009dd0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009dd2:	2040      	movs	r0, #64	@ 0x40
 8009dd4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009dd6:	2080      	movs	r0, #128	@ 0x80
 8009dd8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009dda:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009dde:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009de0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009de4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009de6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009dea:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009df0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009df2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009df6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009df8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009dfc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009dfe:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009e02:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e04:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009e08:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009e0a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009e0e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009e10:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009e14:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e16:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009e1a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e1c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009e20:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e22:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009e26:	4770      	bx	lr
 8009e28:	24000008 	.word	0x24000008
 8009e2c:	10624dd3 	.word	0x10624dd3
 8009e30:	fffee0c0 	.word	0xfffee0c0
 8009e34:	00200045 	.word	0x00200045
 8009e38:	002000c5 	.word	0x002000c5
 8009e3c:	fdffe008 	.word	0xfdffe008

08009e40 <SDMMC_CmdStopTransfer>:
{
 8009e40:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e42:	4b7a      	ldr	r3, [pc, #488]	@ (800a02c <SDMMC_CmdStopTransfer+0x1ec>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009e44:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e46:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009e48:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e4c:	4b78      	ldr	r3, [pc, #480]	@ (800a030 <SDMMC_CmdStopTransfer+0x1f0>)
{
 8009e4e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e50:	4c78      	ldr	r4, [pc, #480]	@ (800a034 <SDMMC_CmdStopTransfer+0x1f4>)
  SDMMCx->ARG = Command->Argument;
 8009e52:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009e54:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e56:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009e5a:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e5c:	4c76      	ldr	r4, [pc, #472]	@ (800a038 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009e5e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e62:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009e64:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e66:	f241 100c 	movw	r0, #4364	@ 0x110c
  SDMMCx->ARG = Command->Argument;
 8009e6a:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e6c:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e70:	68cc      	ldr	r4, [r1, #12]
 8009e72:	4023      	ands	r3, r4
 8009e74:	4318      	orrs	r0, r3
 8009e76:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8009e78:	b14a      	cbz	r2, 8009e8e <SDMMC_CmdStopTransfer+0x4e>
 8009e7a:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009e7c:	486f      	ldr	r0, [pc, #444]	@ (800a03c <SDMMC_CmdStopTransfer+0x1fc>)
    sta_reg = SDMMCx->STA;
 8009e7e:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 8009e80:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e82:	4202      	tst	r2, r0
 8009e84:	d001      	beq.n	8009e8a <SDMMC_CmdStopTransfer+0x4a>
 8009e86:	0492      	lsls	r2, r2, #18
 8009e88:	d509      	bpl.n	8009e9e <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8009e8a:	1c5c      	adds	r4, r3, #1
 8009e8c:	d1f7      	bne.n	8009e7e <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009e8e:	68cb      	ldr	r3, [r1, #12]
 8009e90:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009e94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e98:	60cb      	str	r3, [r1, #12]
}
 8009e9a:	bc30      	pop	{r4, r5}
 8009e9c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e9e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009ea0:	075b      	lsls	r3, r3, #29
 8009ea2:	d44d      	bmi.n	8009f40 <SDMMC_CmdStopTransfer+0x100>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ea4:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009ea6:	f010 0001 	ands.w	r0, r0, #1
 8009eaa:	d13a      	bne.n	8009f22 <SDMMC_CmdStopTransfer+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009eac:	4b64      	ldr	r3, [pc, #400]	@ (800a040 <SDMMC_CmdStopTransfer+0x200>)
 8009eae:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009eb0:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b0c      	cmp	r3, #12
 8009eb6:	d136      	bne.n	8009f26 <SDMMC_CmdStopTransfer+0xe6>
  return (*(__IO uint32_t *) tmp);
 8009eb8:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009eba:	4a62      	ldr	r2, [pc, #392]	@ (800a044 <SDMMC_CmdStopTransfer+0x204>)
 8009ebc:	401a      	ands	r2, r3
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	d038      	beq.n	8009f34 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	db36      	blt.n	8009f34 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ec6:	005d      	lsls	r5, r3, #1
 8009ec8:	d441      	bmi.n	8009f4e <SDMMC_CmdStopTransfer+0x10e>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009eca:	009c      	lsls	r4, r3, #2
 8009ecc:	d445      	bmi.n	8009f5a <SDMMC_CmdStopTransfer+0x11a>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009ece:	00d8      	lsls	r0, r3, #3
 8009ed0:	d449      	bmi.n	8009f66 <SDMMC_CmdStopTransfer+0x126>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009ed2:	011a      	lsls	r2, r3, #4
 8009ed4:	d44e      	bmi.n	8009f74 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ed6:	015d      	lsls	r5, r3, #5
 8009ed8:	d453      	bmi.n	8009f82 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009eda:	01dc      	lsls	r4, r3, #7
 8009edc:	d45f      	bmi.n	8009f9e <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ede:	0218      	lsls	r0, r3, #8
 8009ee0:	d456      	bmi.n	8009f90 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ee2:	025a      	lsls	r2, r3, #9
 8009ee4:	d469      	bmi.n	8009fba <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ee6:	029d      	lsls	r5, r3, #10
 8009ee8:	d460      	bmi.n	8009fac <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009eea:	02dc      	lsls	r4, r3, #11
 8009eec:	d47a      	bmi.n	8009fe4 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009eee:	0358      	lsls	r0, r3, #13
 8009ef0:	d471      	bmi.n	8009fd6 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ef2:	039a      	lsls	r2, r3, #14
 8009ef4:	d468      	bmi.n	8009fc8 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009ef6:	03dd      	lsls	r5, r3, #15
 8009ef8:	f100 8090 	bmi.w	800a01c <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009efc:	041c      	lsls	r4, r3, #16
 8009efe:	d47f      	bmi.n	800a000 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f00:	0458      	lsls	r0, r3, #17
 8009f02:	d476      	bmi.n	8009ff2 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f04:	049a      	lsls	r2, r3, #18
 8009f06:	f100 8082 	bmi.w	800a00e <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f0a:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f0e:	68cb      	ldr	r3, [r1, #12]
 8009f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f14:	bf14      	ite	ne
 8009f16:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f1a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f1e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f20:	e7bb      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f22:	2301      	movs	r3, #1
 8009f24:	638b      	str	r3, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f26:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f28:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 8009f2e:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f30:	60cb      	str	r3, [r1, #12]
}
 8009f32:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f34:	68cb      	ldr	r3, [r1, #12]
 8009f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 8009f3a:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f3c:	60cb      	str	r3, [r1, #12]
}
 8009f3e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f40:	2004      	movs	r0, #4
 8009f42:	6388      	str	r0, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f44:	68cb      	ldr	r3, [r1, #12]
 8009f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f4a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f4c:	e7a5      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f4e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009f50:	2040      	movs	r0, #64	@ 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f56:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f58:	e79f      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f5a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009f5c:	2080      	movs	r0, #128	@ 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f62:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f64:	e799      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f66:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009f68:	f44f 7080 	mov.w	r0, #256	@ 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f70:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f72:	e792      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f74:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009f76:	f44f 7000 	mov.w	r0, #512	@ 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f7e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f80:	e78b      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f82:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009f84:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f8c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f8e:	e784      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f90:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f92:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f9a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009f9c:	e77d      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009f9e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009fa0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fa8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009faa:	e776      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fac:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009fae:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fb6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009fb8:	e76f      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fba:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fc4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009fc6:	e768      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fc8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009fca:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fd2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009fd4:	e761      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fd6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009fd8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fe0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009fe2:	e75a      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fe4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 8009fe6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fee:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ff0:	e753      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ff2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ff4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ffc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ffe:	e74c      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a000:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a002:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a00a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a00c:	e745      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a00e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800a010:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a018:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a01a:	e73e      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a01c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a01e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a026:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a028:	e737      	b.n	8009e9a <SDMMC_CmdStopTransfer+0x5a>
 800a02a:	bf00      	nop
 800a02c:	24000008 	.word	0x24000008
 800a030:	fffee0c0 	.word	0xfffee0c0
 800a034:	10624dd3 	.word	0x10624dd3
 800a038:	05f5e100 	.word	0x05f5e100
 800a03c:	00200045 	.word	0x00200045
 800a040:	002000c5 	.word	0x002000c5
 800a044:	fdffe008 	.word	0xfdffe008

0800a048 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a048:	4a4f      	ldr	r2, [pc, #316]	@ (800a188 <SDMMC_CmdSelDesel+0x140>)
{
 800a04a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a04c:	4b4f      	ldr	r3, [pc, #316]	@ (800a18c <SDMMC_CmdSelDesel+0x144>)
 800a04e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a050:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a054:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a058:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a05c:	484c      	ldr	r0, [pc, #304]	@ (800a190 <SDMMC_CmdSelDesel+0x148>)
 800a05e:	f241 1307 	movw	r3, #4359	@ 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a062:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a064:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a066:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a06a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a06c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a070:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a074:	1e53      	subs	r3, r2, #1
 800a076:	b14a      	cbz	r2, 800a08c <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a078:	4946      	ldr	r1, [pc, #280]	@ (800a194 <SDMMC_CmdSelDesel+0x14c>)
    sta_reg = SDMMCx->STA;
 800a07a:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a07e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a080:	420a      	tst	r2, r1
 800a082:	d001      	beq.n	800a088 <SDMMC_CmdSelDesel+0x40>
 800a084:	0492      	lsls	r2, r2, #18
 800a086:	d504      	bpl.n	800a092 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800a088:	1c58      	adds	r0, r3, #1
 800a08a:	d1f6      	bne.n	800a07a <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a08c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a090:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a092:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a096:	075b      	lsls	r3, r3, #29
 800a098:	d443      	bmi.n	800a122 <SDMMC_CmdSelDesel+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a09a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a09e:	07d8      	lsls	r0, r3, #31
 800a0a0:	d409      	bmi.n	800a0b6 <SDMMC_CmdSelDesel+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0a2:	4b3d      	ldr	r3, [pc, #244]	@ (800a198 <SDMMC_CmdSelDesel+0x150>)
 800a0a4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a0a8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b07      	cmp	r3, #7
 800a0b0:	d005      	beq.n	800a0be <SDMMC_CmdSelDesel+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0bc:	e7f9      	b.n	800a0b2 <SDMMC_CmdSelDesel+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a0be:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a0c2:	4836      	ldr	r0, [pc, #216]	@ (800a19c <SDMMC_CmdSelDesel+0x154>)
 800a0c4:	4018      	ands	r0, r3
 800a0c6:	b358      	cbz	r0, 800a120 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	db2f      	blt.n	800a12c <SDMMC_CmdSelDesel+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a0cc:	0059      	lsls	r1, r3, #1
 800a0ce:	d430      	bmi.n	800a132 <SDMMC_CmdSelDesel+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0d0:	009a      	lsls	r2, r3, #2
 800a0d2:	d430      	bmi.n	800a136 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0d4:	00d9      	lsls	r1, r3, #3
 800a0d6:	d430      	bmi.n	800a13a <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0d8:	011a      	lsls	r2, r3, #4
 800a0da:	d431      	bmi.n	800a140 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0dc:	0159      	lsls	r1, r3, #5
 800a0de:	d432      	bmi.n	800a146 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0e0:	01da      	lsls	r2, r3, #7
 800a0e2:	d433      	bmi.n	800a14c <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a0e4:	0219      	lsls	r1, r3, #8
 800a0e6:	d434      	bmi.n	800a152 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a0e8:	025a      	lsls	r2, r3, #9
 800a0ea:	d435      	bmi.n	800a158 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a0ec:	0299      	lsls	r1, r3, #10
 800a0ee:	d43f      	bmi.n	800a170 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a0f0:	02da      	lsls	r2, r3, #11
 800a0f2:	d43a      	bmi.n	800a16a <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a0f4:	0359      	lsls	r1, r3, #13
 800a0f6:	d435      	bmi.n	800a164 <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a0f8:	039a      	lsls	r2, r3, #14
 800a0fa:	d430      	bmi.n	800a15e <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a0fc:	03d9      	lsls	r1, r3, #15
 800a0fe:	d440      	bmi.n	800a182 <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a100:	041a      	lsls	r2, r3, #16
 800a102:	d43b      	bmi.n	800a17c <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a104:	0459      	lsls	r1, r3, #17
 800a106:	d436      	bmi.n	800a176 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a108:	049a      	lsls	r2, r3, #18
 800a10a:	d407      	bmi.n	800a11c <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a10c:	f013 0f08 	tst.w	r3, #8
 800a110:	bf0c      	ite	eq
 800a112:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a116:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a11a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a11c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a120:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a122:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a124:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a126:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a12a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a12c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a130:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a132:	2040      	movs	r0, #64	@ 0x40
 800a134:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a136:	2080      	movs	r0, #128	@ 0x80
 800a138:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a13a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a13e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a140:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a144:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a146:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a14a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a14c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a150:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a152:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a156:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a158:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a15c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a15e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a162:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a164:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a168:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a16a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a16e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a170:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a174:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a176:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a17a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a17c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a180:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a182:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a186:	4770      	bx	lr
 800a188:	24000008 	.word	0x24000008
 800a18c:	10624dd3 	.word	0x10624dd3
 800a190:	fffee0c0 	.word	0xfffee0c0
 800a194:	00200045 	.word	0x00200045
 800a198:	002000c5 	.word	0x002000c5
 800a19c:	fdffe008 	.word	0xfdffe008

0800a1a0 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1a0:	4b11      	ldr	r3, [pc, #68]	@ (800a1e8 <SDMMC_CmdGoIdleState+0x48>)
{
 800a1a2:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1a4:	4a11      	ldr	r2, [pc, #68]	@ (800a1ec <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1a6:	681b      	ldr	r3, [r3, #0]
{
 800a1a8:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1aa:	4c11      	ldr	r4, [pc, #68]	@ (800a1f0 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800a1ac:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1ae:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 800a1b2:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1b4:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1b6:	0a5b      	lsrs	r3, r3, #9
 800a1b8:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1bc:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1be:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a1c6:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1c8:	e002      	b.n	800a1d0 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a1ca:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800a1cc:	0612      	lsls	r2, r2, #24
 800a1ce:	d405      	bmi.n	800a1dc <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	d2fa      	bcs.n	800a1ca <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800a1d4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a1d8:	bc30      	pop	{r4, r5}
 800a1da:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1dc:	4b05      	ldr	r3, [pc, #20]	@ (800a1f4 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800a1de:	2000      	movs	r0, #0
}
 800a1e0:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1e2:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	24000008 	.word	0x24000008
 800a1ec:	fffee0c0 	.word	0xfffee0c0
 800a1f0:	10624dd3 	.word	0x10624dd3
 800a1f4:	002000c5 	.word	0x002000c5

0800a1f8 <SDMMC_CmdOperCond>:
{
 800a1f8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1fa:	4a1c      	ldr	r2, [pc, #112]	@ (800a26c <SDMMC_CmdOperCond+0x74>)
 800a1fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a270 <SDMMC_CmdOperCond+0x78>)
 800a1fe:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a200:	481c      	ldr	r0, [pc, #112]	@ (800a274 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a202:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a206:	f241 1308 	movw	r3, #4360	@ 0x1108
{
 800a20a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a20c:	f44f 74d5 	mov.w	r4, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a210:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a212:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a214:	68cc      	ldr	r4, [r1, #12]
 800a216:	4020      	ands	r0, r4
 800a218:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a21a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a21e:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a222:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a224:	b14a      	cbz	r2, 800a23a <SDMMC_CmdOperCond+0x42>
 800a226:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a228:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a22a:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a22c:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a230:	d001      	beq.n	800a236 <SDMMC_CmdOperCond+0x3e>
 800a232:	0490      	lsls	r0, r2, #18
 800a234:	d506      	bpl.n	800a244 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800a236:	1c5c      	adds	r4, r3, #1
 800a238:	d1f6      	bne.n	800a228 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a23a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a242:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a244:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a246:	075a      	lsls	r2, r3, #29
 800a248:	d40c      	bmi.n	800a264 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a24a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800a24c:	f010 0001 	ands.w	r0, r0, #1
 800a250:	d105      	bne.n	800a25e <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a252:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a254:	065b      	lsls	r3, r3, #25
 800a256:	d5f2      	bpl.n	800a23e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a258:	2340      	movs	r3, #64	@ 0x40
 800a25a:	638b      	str	r3, [r1, #56]	@ 0x38
 800a25c:	e7ef      	b.n	800a23e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a25e:	2301      	movs	r3, #1
 800a260:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a262:	e7ec      	b.n	800a23e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a264:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a266:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a268:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a26a:	e7e8      	b.n	800a23e <SDMMC_CmdOperCond+0x46>
 800a26c:	24000008 	.word	0x24000008
 800a270:	10624dd3 	.word	0x10624dd3
 800a274:	fffee0c0 	.word	0xfffee0c0

0800a278 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a278:	4a4f      	ldr	r2, [pc, #316]	@ (800a3b8 <SDMMC_CmdAppCommand+0x140>)
{
 800a27a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a27c:	4b4f      	ldr	r3, [pc, #316]	@ (800a3bc <SDMMC_CmdAppCommand+0x144>)
 800a27e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a280:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a284:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a288:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a28c:	484c      	ldr	r0, [pc, #304]	@ (800a3c0 <SDMMC_CmdAppCommand+0x148>)
 800a28e:	f241 1337 	movw	r3, #4407	@ 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a292:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a294:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a296:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a29a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a29c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a2a0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a2a4:	1e53      	subs	r3, r2, #1
 800a2a6:	b14a      	cbz	r2, 800a2bc <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a2a8:	4946      	ldr	r1, [pc, #280]	@ (800a3c4 <SDMMC_CmdAppCommand+0x14c>)
    sta_reg = SDMMCx->STA;
 800a2aa:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a2ae:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a2b0:	420a      	tst	r2, r1
 800a2b2:	d001      	beq.n	800a2b8 <SDMMC_CmdAppCommand+0x40>
 800a2b4:	0492      	lsls	r2, r2, #18
 800a2b6:	d504      	bpl.n	800a2c2 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800a2b8:	1c58      	adds	r0, r3, #1
 800a2ba:	d1f6      	bne.n	800a2aa <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a2bc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a2c0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2c2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a2c6:	075b      	lsls	r3, r3, #29
 800a2c8:	d443      	bmi.n	800a352 <SDMMC_CmdAppCommand+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a2ca:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a2ce:	07d8      	lsls	r0, r3, #31
 800a2d0:	d409      	bmi.n	800a2e6 <SDMMC_CmdAppCommand+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2d2:	4b3d      	ldr	r3, [pc, #244]	@ (800a3c8 <SDMMC_CmdAppCommand+0x150>)
 800a2d4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a2d8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b37      	cmp	r3, #55	@ 0x37
 800a2e0:	d005      	beq.n	800a2ee <SDMMC_CmdAppCommand+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2ec:	e7f9      	b.n	800a2e2 <SDMMC_CmdAppCommand+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a2ee:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2f2:	4836      	ldr	r0, [pc, #216]	@ (800a3cc <SDMMC_CmdAppCommand+0x154>)
 800a2f4:	4018      	ands	r0, r3
 800a2f6:	b358      	cbz	r0, 800a350 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	db2f      	blt.n	800a35c <SDMMC_CmdAppCommand+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a2fc:	0059      	lsls	r1, r3, #1
 800a2fe:	d430      	bmi.n	800a362 <SDMMC_CmdAppCommand+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a300:	009a      	lsls	r2, r3, #2
 800a302:	d430      	bmi.n	800a366 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a304:	00d9      	lsls	r1, r3, #3
 800a306:	d430      	bmi.n	800a36a <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a308:	011a      	lsls	r2, r3, #4
 800a30a:	d431      	bmi.n	800a370 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a30c:	0159      	lsls	r1, r3, #5
 800a30e:	d432      	bmi.n	800a376 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a310:	01da      	lsls	r2, r3, #7
 800a312:	d433      	bmi.n	800a37c <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a314:	0219      	lsls	r1, r3, #8
 800a316:	d434      	bmi.n	800a382 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a318:	025a      	lsls	r2, r3, #9
 800a31a:	d435      	bmi.n	800a388 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a31c:	0299      	lsls	r1, r3, #10
 800a31e:	d43f      	bmi.n	800a3a0 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a320:	02da      	lsls	r2, r3, #11
 800a322:	d43a      	bmi.n	800a39a <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a324:	0359      	lsls	r1, r3, #13
 800a326:	d435      	bmi.n	800a394 <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a328:	039a      	lsls	r2, r3, #14
 800a32a:	d430      	bmi.n	800a38e <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a32c:	03d9      	lsls	r1, r3, #15
 800a32e:	d440      	bmi.n	800a3b2 <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a330:	041a      	lsls	r2, r3, #16
 800a332:	d43b      	bmi.n	800a3ac <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a334:	0459      	lsls	r1, r3, #17
 800a336:	d436      	bmi.n	800a3a6 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a338:	049a      	lsls	r2, r3, #18
 800a33a:	d407      	bmi.n	800a34c <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a33c:	f013 0f08 	tst.w	r3, #8
 800a340:	bf0c      	ite	eq
 800a342:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a346:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a34a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a34c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a350:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a352:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a354:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a356:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a35a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a35c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a360:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a362:	2040      	movs	r0, #64	@ 0x40
 800a364:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a366:	2080      	movs	r0, #128	@ 0x80
 800a368:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a36a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a36e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a370:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a374:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a376:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a37a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a37c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a380:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a382:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a386:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a388:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a38c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a38e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a392:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a394:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a398:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a39a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a39e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a3a0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a3a4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3a6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a3aa:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a3ac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a3b0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a3b2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a3b6:	4770      	bx	lr
 800a3b8:	24000008 	.word	0x24000008
 800a3bc:	10624dd3 	.word	0x10624dd3
 800a3c0:	fffee0c0 	.word	0xfffee0c0
 800a3c4:	00200045 	.word	0x00200045
 800a3c8:	002000c5 	.word	0x002000c5
 800a3cc:	fdffe008 	.word	0xfdffe008

0800a3d0 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3d0:	4a19      	ldr	r2, [pc, #100]	@ (800a438 <SDMMC_CmdAppOperCommand+0x68>)
{
 800a3d2:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3d4:	4b19      	ldr	r3, [pc, #100]	@ (800a43c <SDMMC_CmdAppOperCommand+0x6c>)
 800a3d6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a3d8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3dc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3e0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a3e4:	4816      	ldr	r0, [pc, #88]	@ (800a440 <SDMMC_CmdAppOperCommand+0x70>)
 800a3e6:	f241 1329 	movw	r3, #4393	@ 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3ea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3ec:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3ee:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3f2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3f4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3f8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a3fc:	1e53      	subs	r3, r2, #1
 800a3fe:	b14a      	cbz	r2, 800a414 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800a400:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a404:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a406:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a40a:	d001      	beq.n	800a410 <SDMMC_CmdAppOperCommand+0x40>
 800a40c:	0492      	lsls	r2, r2, #18
 800a40e:	d504      	bpl.n	800a41a <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800a410:	1c59      	adds	r1, r3, #1
 800a412:	d1f5      	bne.n	800a400 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a414:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a418:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a41a:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800a41e:	f010 0004 	ands.w	r0, r0, #4
 800a422:	d103      	bne.n	800a42c <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a424:	4b07      	ldr	r3, [pc, #28]	@ (800a444 <SDMMC_CmdAppOperCommand+0x74>)
 800a426:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800a42a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a42c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a42e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a430:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	24000008 	.word	0x24000008
 800a43c:	10624dd3 	.word	0x10624dd3
 800a440:	fffee0c0 	.word	0xfffee0c0
 800a444:	002000c5 	.word	0x002000c5

0800a448 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a448:	4a4f      	ldr	r2, [pc, #316]	@ (800a588 <SDMMC_CmdBusWidth+0x140>)
{
 800a44a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a44c:	4b4f      	ldr	r3, [pc, #316]	@ (800a58c <SDMMC_CmdBusWidth+0x144>)
 800a44e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a450:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a454:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a458:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a45c:	484c      	ldr	r0, [pc, #304]	@ (800a590 <SDMMC_CmdBusWidth+0x148>)
 800a45e:	f241 1306 	movw	r3, #4358	@ 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a462:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a464:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a466:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a46a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a46c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a470:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a474:	1e53      	subs	r3, r2, #1
 800a476:	b14a      	cbz	r2, 800a48c <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a478:	4946      	ldr	r1, [pc, #280]	@ (800a594 <SDMMC_CmdBusWidth+0x14c>)
    sta_reg = SDMMCx->STA;
 800a47a:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a47e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a480:	420a      	tst	r2, r1
 800a482:	d001      	beq.n	800a488 <SDMMC_CmdBusWidth+0x40>
 800a484:	0492      	lsls	r2, r2, #18
 800a486:	d504      	bpl.n	800a492 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800a488:	1c58      	adds	r0, r3, #1
 800a48a:	d1f6      	bne.n	800a47a <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a48c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a490:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a492:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a496:	075b      	lsls	r3, r3, #29
 800a498:	d443      	bmi.n	800a522 <SDMMC_CmdBusWidth+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a49a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a49e:	07d8      	lsls	r0, r3, #31
 800a4a0:	d409      	bmi.n	800a4b6 <SDMMC_CmdBusWidth+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4a2:	4b3d      	ldr	r3, [pc, #244]	@ (800a598 <SDMMC_CmdBusWidth+0x150>)
 800a4a4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a4a8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b06      	cmp	r3, #6
 800a4b0:	d005      	beq.n	800a4be <SDMMC_CmdBusWidth+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4bc:	e7f9      	b.n	800a4b2 <SDMMC_CmdBusWidth+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a4be:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a4c2:	4836      	ldr	r0, [pc, #216]	@ (800a59c <SDMMC_CmdBusWidth+0x154>)
 800a4c4:	4018      	ands	r0, r3
 800a4c6:	b358      	cbz	r0, 800a520 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	db2f      	blt.n	800a52c <SDMMC_CmdBusWidth+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a4cc:	0059      	lsls	r1, r3, #1
 800a4ce:	d430      	bmi.n	800a532 <SDMMC_CmdBusWidth+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a4d0:	009a      	lsls	r2, r3, #2
 800a4d2:	d430      	bmi.n	800a536 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a4d4:	00d9      	lsls	r1, r3, #3
 800a4d6:	d430      	bmi.n	800a53a <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a4d8:	011a      	lsls	r2, r3, #4
 800a4da:	d431      	bmi.n	800a540 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a4dc:	0159      	lsls	r1, r3, #5
 800a4de:	d432      	bmi.n	800a546 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a4e0:	01da      	lsls	r2, r3, #7
 800a4e2:	d433      	bmi.n	800a54c <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a4e4:	0219      	lsls	r1, r3, #8
 800a4e6:	d434      	bmi.n	800a552 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a4e8:	025a      	lsls	r2, r3, #9
 800a4ea:	d435      	bmi.n	800a558 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a4ec:	0299      	lsls	r1, r3, #10
 800a4ee:	d43f      	bmi.n	800a570 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4f0:	02da      	lsls	r2, r3, #11
 800a4f2:	d43a      	bmi.n	800a56a <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a4f4:	0359      	lsls	r1, r3, #13
 800a4f6:	d435      	bmi.n	800a564 <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4f8:	039a      	lsls	r2, r3, #14
 800a4fa:	d430      	bmi.n	800a55e <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4fc:	03d9      	lsls	r1, r3, #15
 800a4fe:	d440      	bmi.n	800a582 <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a500:	041a      	lsls	r2, r3, #16
 800a502:	d43b      	bmi.n	800a57c <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a504:	0459      	lsls	r1, r3, #17
 800a506:	d436      	bmi.n	800a576 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a508:	049a      	lsls	r2, r3, #18
 800a50a:	d407      	bmi.n	800a51c <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a50c:	f013 0f08 	tst.w	r3, #8
 800a510:	bf0c      	ite	eq
 800a512:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a516:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a51a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a51c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a520:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a522:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a524:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a526:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a52a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a52c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a530:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a532:	2040      	movs	r0, #64	@ 0x40
 800a534:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a536:	2080      	movs	r0, #128	@ 0x80
 800a538:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a53a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a53e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a540:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a544:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a546:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a54a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a54c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a550:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a552:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a556:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a558:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a55c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a55e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a562:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a564:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a568:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a56a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a56e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a570:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a574:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a576:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a57a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a57c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a580:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a582:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a586:	4770      	bx	lr
 800a588:	24000008 	.word	0x24000008
 800a58c:	10624dd3 	.word	0x10624dd3
 800a590:	fffee0c0 	.word	0xfffee0c0
 800a594:	00200045 	.word	0x00200045
 800a598:	002000c5 	.word	0x002000c5
 800a59c:	fdffe008 	.word	0xfdffe008

0800a5a0 <SDMMC_CmdSendSCR>:
{
 800a5a0:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a5a2:	4a4c      	ldr	r2, [pc, #304]	@ (800a6d4 <SDMMC_CmdSendSCR+0x134>)
 800a5a4:	4b4c      	ldr	r3, [pc, #304]	@ (800a6d8 <SDMMC_CmdSendSCR+0x138>)
 800a5a6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a5a8:	484c      	ldr	r0, [pc, #304]	@ (800a6dc <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a5aa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a5ae:	f241 1333 	movw	r3, #4403	@ 0x1133
{
 800a5b2:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a5b4:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a5b6:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a5b8:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a5ba:	68cc      	ldr	r4, [r1, #12]
 800a5bc:	4020      	ands	r0, r4
 800a5be:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a5c0:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a5c4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a5c8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a5ca:	b14a      	cbz	r2, 800a5e0 <SDMMC_CmdSendSCR+0x40>
 800a5cc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a5ce:	4844      	ldr	r0, [pc, #272]	@ (800a6e0 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 800a5d0:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a5d2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a5d4:	4202      	tst	r2, r0
 800a5d6:	d001      	beq.n	800a5dc <SDMMC_CmdSendSCR+0x3c>
 800a5d8:	0492      	lsls	r2, r2, #18
 800a5da:	d506      	bpl.n	800a5ea <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800a5dc:	1c5c      	adds	r4, r3, #1
 800a5de:	d1f7      	bne.n	800a5d0 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a5e0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5e8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5ea:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a5ec:	075c      	lsls	r4, r3, #29
 800a5ee:	d43c      	bmi.n	800a66a <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5f0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a5f2:	07d8      	lsls	r0, r3, #31
 800a5f4:	d407      	bmi.n	800a606 <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5f6:	4b3b      	ldr	r3, [pc, #236]	@ (800a6e4 <SDMMC_CmdSendSCR+0x144>)
 800a5f8:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5fa:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b33      	cmp	r3, #51	@ 0x33
 800a600:	d004      	beq.n	800a60c <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a602:	2001      	movs	r0, #1
 800a604:	e7ee      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a606:	2301      	movs	r3, #1
 800a608:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a60a:	e7fa      	b.n	800a602 <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 800a60c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a60e:	4836      	ldr	r0, [pc, #216]	@ (800a6e8 <SDMMC_CmdSendSCR+0x148>)
 800a610:	4018      	ands	r0, r3
 800a612:	2800      	cmp	r0, #0
 800a614:	d0e6      	beq.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a616:	2b00      	cmp	r3, #0
 800a618:	db2b      	blt.n	800a672 <SDMMC_CmdSendSCR+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a61a:	005a      	lsls	r2, r3, #1
 800a61c:	d42c      	bmi.n	800a678 <SDMMC_CmdSendSCR+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a61e:	009c      	lsls	r4, r3, #2
 800a620:	d42c      	bmi.n	800a67c <SDMMC_CmdSendSCR+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a622:	00d9      	lsls	r1, r3, #3
 800a624:	d42c      	bmi.n	800a680 <SDMMC_CmdSendSCR+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a626:	011a      	lsls	r2, r3, #4
 800a628:	d42d      	bmi.n	800a686 <SDMMC_CmdSendSCR+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a62a:	015c      	lsls	r4, r3, #5
 800a62c:	d42e      	bmi.n	800a68c <SDMMC_CmdSendSCR+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a62e:	01d9      	lsls	r1, r3, #7
 800a630:	d42f      	bmi.n	800a692 <SDMMC_CmdSendSCR+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a632:	021a      	lsls	r2, r3, #8
 800a634:	d430      	bmi.n	800a698 <SDMMC_CmdSendSCR+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a636:	025c      	lsls	r4, r3, #9
 800a638:	d431      	bmi.n	800a69e <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a63a:	0299      	lsls	r1, r3, #10
 800a63c:	d43b      	bmi.n	800a6b6 <SDMMC_CmdSendSCR+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a63e:	02da      	lsls	r2, r3, #11
 800a640:	d436      	bmi.n	800a6b0 <SDMMC_CmdSendSCR+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a642:	035c      	lsls	r4, r3, #13
 800a644:	d431      	bmi.n	800a6aa <SDMMC_CmdSendSCR+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a646:	0399      	lsls	r1, r3, #14
 800a648:	d42c      	bmi.n	800a6a4 <SDMMC_CmdSendSCR+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a64a:	03da      	lsls	r2, r3, #15
 800a64c:	d43f      	bmi.n	800a6ce <SDMMC_CmdSendSCR+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a64e:	041c      	lsls	r4, r3, #16
 800a650:	d43a      	bmi.n	800a6c8 <SDMMC_CmdSendSCR+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a652:	0459      	lsls	r1, r3, #17
 800a654:	d435      	bmi.n	800a6c2 <SDMMC_CmdSendSCR+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a656:	049a      	lsls	r2, r3, #18
 800a658:	d430      	bmi.n	800a6bc <SDMMC_CmdSendSCR+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a65a:	f013 0f08 	tst.w	r3, #8
 800a65e:	bf0c      	ite	eq
 800a660:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a664:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a668:	e7bc      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a66a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a66c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a66e:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a670:	e7b8      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a672:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a676:	e7b5      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a678:	2040      	movs	r0, #64	@ 0x40
 800a67a:	e7b3      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a67c:	2080      	movs	r0, #128	@ 0x80
 800a67e:	e7b1      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a680:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a684:	e7ae      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a686:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a68a:	e7ab      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a68c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a690:	e7a8      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a692:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a696:	e7a5      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a698:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a69c:	e7a2      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a69e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a6a2:	e79f      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a6a4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a6a8:	e79c      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a6aa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a6ae:	e799      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800a6b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a6b4:	e796      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a6b6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a6ba:	e793      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800a6bc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800a6c0:	e790      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a6c2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a6c6:	e78d      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a6c8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a6cc:	e78a      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a6ce:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a6d2:	e787      	b.n	800a5e4 <SDMMC_CmdSendSCR+0x44>
 800a6d4:	24000008 	.word	0x24000008
 800a6d8:	10624dd3 	.word	0x10624dd3
 800a6dc:	fffee0c0 	.word	0xfffee0c0
 800a6e0:	00200045 	.word	0x00200045
 800a6e4:	002000c5 	.word	0x002000c5
 800a6e8:	fdffe008 	.word	0xfdffe008

0800a6ec <SDMMC_CmdSendCID>:
{
 800a6ec:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a758 <SDMMC_CmdSendCID+0x6c>)
 800a6f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a75c <SDMMC_CmdSendCID+0x70>)
 800a6f2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6f4:	481a      	ldr	r0, [pc, #104]	@ (800a760 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6f6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6fa:	f241 3302 	movw	r3, #4866	@ 0x1302
{
 800a6fe:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a700:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a702:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a704:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a706:	68cc      	ldr	r4, [r1, #12]
 800a708:	4020      	ands	r0, r4
 800a70a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a70c:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a710:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a714:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a716:	b14a      	cbz	r2, 800a72c <SDMMC_CmdSendCID+0x40>
 800a718:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a71a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a71c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a71e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a722:	d001      	beq.n	800a728 <SDMMC_CmdSendCID+0x3c>
 800a724:	0492      	lsls	r2, r2, #18
 800a726:	d506      	bpl.n	800a736 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800a728:	1c58      	adds	r0, r3, #1
 800a72a:	d1f6      	bne.n	800a71a <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a72c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a734:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a736:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a738:	075b      	lsls	r3, r3, #29
 800a73a:	d409      	bmi.n	800a750 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a73c:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800a73e:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a742:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a746:	bf14      	ite	ne
 800a748:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a74a:	4b06      	ldreq	r3, [pc, #24]	@ (800a764 <SDMMC_CmdSendCID+0x78>)
 800a74c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800a74e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a750:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a752:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a754:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a756:	e7eb      	b.n	800a730 <SDMMC_CmdSendCID+0x44>
 800a758:	24000008 	.word	0x24000008
 800a75c:	10624dd3 	.word	0x10624dd3
 800a760:	fffee0c0 	.word	0xfffee0c0
 800a764:	002000c5 	.word	0x002000c5

0800a768 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a768:	4a1b      	ldr	r2, [pc, #108]	@ (800a7d8 <SDMMC_CmdSendCSD+0x70>)
{
 800a76a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a76c:	4b1b      	ldr	r3, [pc, #108]	@ (800a7dc <SDMMC_CmdSendCSD+0x74>)
 800a76e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a770:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a774:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a778:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a77c:	4818      	ldr	r0, [pc, #96]	@ (800a7e0 <SDMMC_CmdSendCSD+0x78>)
 800a77e:	f241 3309 	movw	r3, #4873	@ 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a782:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a784:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a786:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a78a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a78c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a790:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a794:	1e53      	subs	r3, r2, #1
 800a796:	b14a      	cbz	r2, 800a7ac <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800a798:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a79c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a79e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a7a2:	d001      	beq.n	800a7a8 <SDMMC_CmdSendCSD+0x40>
 800a7a4:	0492      	lsls	r2, r2, #18
 800a7a6:	d504      	bpl.n	800a7b2 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800a7a8:	1c59      	adds	r1, r3, #1
 800a7aa:	d1f5      	bne.n	800a798 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a7ac:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a7b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7b2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a7b6:	075b      	lsls	r3, r3, #29
 800a7b8:	d409      	bmi.n	800a7ce <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a7ba:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800a7be:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7c2:	bf14      	ite	ne
 800a7c4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7c6:	4b07      	ldreq	r3, [pc, #28]	@ (800a7e4 <SDMMC_CmdSendCSD+0x7c>)
 800a7c8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800a7cc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7ce:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7d0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7d2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7d6:	4770      	bx	lr
 800a7d8:	24000008 	.word	0x24000008
 800a7dc:	10624dd3 	.word	0x10624dd3
 800a7e0:	fffee0c0 	.word	0xfffee0c0
 800a7e4:	002000c5 	.word	0x002000c5

0800a7e8 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800a7e8:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7ea:	4a2b      	ldr	r2, [pc, #172]	@ (800a898 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800a7ec:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7ee:	6812      	ldr	r2, [r2, #0]
{
 800a7f0:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a7f2:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a7f4:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7f6:	4829      	ldr	r0, [pc, #164]	@ (800a89c <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a7f8:	4c29      	ldr	r4, [pc, #164]	@ (800a8a0 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7fa:	fba0 0202 	umull	r0, r2, r0, r2
 800a7fe:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a802:	401c      	ands	r4, r3
 800a804:	f241 1303 	movw	r3, #4355	@ 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a808:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a80a:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a80c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a810:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a814:	b152      	cbz	r2, 800a82c <SDMMC_CmdSetRelAdd+0x44>
 800a816:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a818:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a81c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a81e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a822:	d001      	beq.n	800a828 <SDMMC_CmdSetRelAdd+0x40>
 800a824:	0492      	lsls	r2, r2, #18
 800a826:	d506      	bpl.n	800a836 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800a828:	1c58      	adds	r0, r3, #1
 800a82a:	d1f5      	bne.n	800a818 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a82c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a830:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a834:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a836:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a83a:	075c      	lsls	r4, r3, #29
 800a83c:	d420      	bmi.n	800a880 <SDMMC_CmdSetRelAdd+0x98>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a83e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a842:	07d8      	lsls	r0, r3, #31
 800a844:	d406      	bmi.n	800a854 <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800a846:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d005      	beq.n	800a85c <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a850:	2001      	movs	r0, #1
 800a852:	e7ed      	b.n	800a830 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a854:	2301      	movs	r3, #1
 800a856:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a85a:	e7f9      	b.n	800a850 <SDMMC_CmdSetRelAdd+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a85c:	4b11      	ldr	r3, [pc, #68]	@ (800a8a4 <SDMMC_CmdSetRelAdd+0xbc>)
 800a85e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800a862:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a866:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800a86a:	d011      	beq.n	800a890 <SDMMC_CmdSetRelAdd+0xa8>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a86c:	045a      	lsls	r2, r3, #17
 800a86e:	d40c      	bmi.n	800a88a <SDMMC_CmdSetRelAdd+0xa2>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a870:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a874:	bf0c      	ite	eq
 800a876:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a87a:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800a87e:	e7d7      	b.n	800a830 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a880:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a882:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a884:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a888:	e7d2      	b.n	800a830 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a88a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a88e:	e7cf      	b.n	800a830 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a890:	0c1b      	lsrs	r3, r3, #16
 800a892:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800a894:	e7cc      	b.n	800a830 <SDMMC_CmdSetRelAdd+0x48>
 800a896:	bf00      	nop
 800a898:	24000008 	.word	0x24000008
 800a89c:	10624dd3 	.word	0x10624dd3
 800a8a0:	fffee0c0 	.word	0xfffee0c0
 800a8a4:	002000c5 	.word	0x002000c5

0800a8a8 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a8a8:	4a4f      	ldr	r2, [pc, #316]	@ (800a9e8 <SDMMC_CmdSendStatus+0x140>)
{
 800a8aa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a8ac:	4b4f      	ldr	r3, [pc, #316]	@ (800a9ec <SDMMC_CmdSendStatus+0x144>)
 800a8ae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a8b0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a8b4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a8b8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a8bc:	484c      	ldr	r0, [pc, #304]	@ (800a9f0 <SDMMC_CmdSendStatus+0x148>)
 800a8be:	f241 130d 	movw	r3, #4365	@ 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a8c2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a8c4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a8c6:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a8ca:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a8cc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a8d0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a8d4:	1e53      	subs	r3, r2, #1
 800a8d6:	b14a      	cbz	r2, 800a8ec <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a8d8:	4946      	ldr	r1, [pc, #280]	@ (800a9f4 <SDMMC_CmdSendStatus+0x14c>)
    sta_reg = SDMMCx->STA;
 800a8da:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a8de:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a8e0:	420a      	tst	r2, r1
 800a8e2:	d001      	beq.n	800a8e8 <SDMMC_CmdSendStatus+0x40>
 800a8e4:	0492      	lsls	r2, r2, #18
 800a8e6:	d504      	bpl.n	800a8f2 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800a8e8:	1c58      	adds	r0, r3, #1
 800a8ea:	d1f6      	bne.n	800a8da <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a8ec:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a8f0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a8f2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a8f6:	075b      	lsls	r3, r3, #29
 800a8f8:	d443      	bmi.n	800a982 <SDMMC_CmdSendStatus+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a8fa:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a8fe:	07d8      	lsls	r0, r3, #31
 800a900:	d409      	bmi.n	800a916 <SDMMC_CmdSendStatus+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a902:	4b3d      	ldr	r3, [pc, #244]	@ (800a9f8 <SDMMC_CmdSendStatus+0x150>)
 800a904:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a908:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b0d      	cmp	r3, #13
 800a910:	d005      	beq.n	800a91e <SDMMC_CmdSendStatus+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a912:	2001      	movs	r0, #1
 800a914:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a916:	2301      	movs	r3, #1
 800a918:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a91c:	e7f9      	b.n	800a912 <SDMMC_CmdSendStatus+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a91e:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a922:	4836      	ldr	r0, [pc, #216]	@ (800a9fc <SDMMC_CmdSendStatus+0x154>)
 800a924:	4018      	ands	r0, r3
 800a926:	b358      	cbz	r0, 800a980 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a928:	2b00      	cmp	r3, #0
 800a92a:	db2f      	blt.n	800a98c <SDMMC_CmdSendStatus+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a92c:	0059      	lsls	r1, r3, #1
 800a92e:	d430      	bmi.n	800a992 <SDMMC_CmdSendStatus+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a930:	009a      	lsls	r2, r3, #2
 800a932:	d430      	bmi.n	800a996 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a934:	00d9      	lsls	r1, r3, #3
 800a936:	d430      	bmi.n	800a99a <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a938:	011a      	lsls	r2, r3, #4
 800a93a:	d431      	bmi.n	800a9a0 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a93c:	0159      	lsls	r1, r3, #5
 800a93e:	d432      	bmi.n	800a9a6 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a940:	01da      	lsls	r2, r3, #7
 800a942:	d433      	bmi.n	800a9ac <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a944:	0219      	lsls	r1, r3, #8
 800a946:	d434      	bmi.n	800a9b2 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a948:	025a      	lsls	r2, r3, #9
 800a94a:	d435      	bmi.n	800a9b8 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a94c:	0299      	lsls	r1, r3, #10
 800a94e:	d43f      	bmi.n	800a9d0 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a950:	02da      	lsls	r2, r3, #11
 800a952:	d43a      	bmi.n	800a9ca <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a954:	0359      	lsls	r1, r3, #13
 800a956:	d435      	bmi.n	800a9c4 <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a958:	039a      	lsls	r2, r3, #14
 800a95a:	d430      	bmi.n	800a9be <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a95c:	03d9      	lsls	r1, r3, #15
 800a95e:	d440      	bmi.n	800a9e2 <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a960:	041a      	lsls	r2, r3, #16
 800a962:	d43b      	bmi.n	800a9dc <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a964:	0459      	lsls	r1, r3, #17
 800a966:	d436      	bmi.n	800a9d6 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a968:	049a      	lsls	r2, r3, #18
 800a96a:	d407      	bmi.n	800a97c <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a96c:	f013 0f08 	tst.w	r3, #8
 800a970:	bf0c      	ite	eq
 800a972:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a976:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a97a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a97c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a980:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a982:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a984:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a986:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a98a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a98c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a990:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a992:	2040      	movs	r0, #64	@ 0x40
 800a994:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a996:	2080      	movs	r0, #128	@ 0x80
 800a998:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a99a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a99e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a9a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a9a4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a9a6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a9aa:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a9ac:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a9b0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9b2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a9b6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a9bc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a9be:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a9c2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a9c4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a9c8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a9ca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a9ce:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a9d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a9d4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a9d6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a9da:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a9dc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a9e0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a9e2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a9e6:	4770      	bx	lr
 800a9e8:	24000008 	.word	0x24000008
 800a9ec:	10624dd3 	.word	0x10624dd3
 800a9f0:	fffee0c0 	.word	0xfffee0c0
 800a9f4:	00200045 	.word	0x00200045
 800a9f8:	002000c5 	.word	0x002000c5
 800a9fc:	fdffe008 	.word	0xfdffe008

0800aa00 <SDMMC_CmdStatusRegister>:
{
 800aa00:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa02:	4a4c      	ldr	r2, [pc, #304]	@ (800ab34 <SDMMC_CmdStatusRegister+0x134>)
 800aa04:	4b4c      	ldr	r3, [pc, #304]	@ (800ab38 <SDMMC_CmdStatusRegister+0x138>)
 800aa06:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aa08:	484c      	ldr	r0, [pc, #304]	@ (800ab3c <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa0a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aa0e:	f241 130d 	movw	r3, #4365	@ 0x110d
{
 800aa12:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800aa14:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa16:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800aa18:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aa1a:	68cc      	ldr	r4, [r1, #12]
 800aa1c:	4020      	ands	r0, r4
 800aa1e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa20:	f241 3088 	movw	r0, #5000	@ 0x1388
 800aa24:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aa28:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800aa2a:	b14a      	cbz	r2, 800aa40 <SDMMC_CmdStatusRegister+0x40>
 800aa2c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800aa2e:	4844      	ldr	r0, [pc, #272]	@ (800ab40 <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 800aa30:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800aa32:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aa34:	4202      	tst	r2, r0
 800aa36:	d001      	beq.n	800aa3c <SDMMC_CmdStatusRegister+0x3c>
 800aa38:	0492      	lsls	r2, r2, #18
 800aa3a:	d506      	bpl.n	800aa4a <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800aa3c:	1c5c      	adds	r4, r3, #1
 800aa3e:	d1f7      	bne.n	800aa30 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800aa40:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800aa44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa48:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa4a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800aa4c:	075c      	lsls	r4, r3, #29
 800aa4e:	d43c      	bmi.n	800aaca <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa50:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800aa52:	07d8      	lsls	r0, r3, #31
 800aa54:	d407      	bmi.n	800aa66 <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa56:	4b3b      	ldr	r3, [pc, #236]	@ (800ab44 <SDMMC_CmdStatusRegister+0x144>)
 800aa58:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa5a:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b0d      	cmp	r3, #13
 800aa60:	d004      	beq.n	800aa6c <SDMMC_CmdStatusRegister+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa62:	2001      	movs	r0, #1
 800aa64:	e7ee      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa66:	2301      	movs	r3, #1
 800aa68:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa6a:	e7fa      	b.n	800aa62 <SDMMC_CmdStatusRegister+0x62>
  return (*(__IO uint32_t *) tmp);
 800aa6c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa6e:	4836      	ldr	r0, [pc, #216]	@ (800ab48 <SDMMC_CmdStatusRegister+0x148>)
 800aa70:	4018      	ands	r0, r3
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0e6      	beq.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	db2b      	blt.n	800aad2 <SDMMC_CmdStatusRegister+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa7a:	005a      	lsls	r2, r3, #1
 800aa7c:	d42c      	bmi.n	800aad8 <SDMMC_CmdStatusRegister+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa7e:	009c      	lsls	r4, r3, #2
 800aa80:	d42c      	bmi.n	800aadc <SDMMC_CmdStatusRegister+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa82:	00d9      	lsls	r1, r3, #3
 800aa84:	d42c      	bmi.n	800aae0 <SDMMC_CmdStatusRegister+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aa86:	011a      	lsls	r2, r3, #4
 800aa88:	d42d      	bmi.n	800aae6 <SDMMC_CmdStatusRegister+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa8a:	015c      	lsls	r4, r3, #5
 800aa8c:	d42e      	bmi.n	800aaec <SDMMC_CmdStatusRegister+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa8e:	01d9      	lsls	r1, r3, #7
 800aa90:	d42f      	bmi.n	800aaf2 <SDMMC_CmdStatusRegister+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa92:	021a      	lsls	r2, r3, #8
 800aa94:	d430      	bmi.n	800aaf8 <SDMMC_CmdStatusRegister+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa96:	025c      	lsls	r4, r3, #9
 800aa98:	d431      	bmi.n	800aafe <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa9a:	0299      	lsls	r1, r3, #10
 800aa9c:	d43b      	bmi.n	800ab16 <SDMMC_CmdStatusRegister+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa9e:	02da      	lsls	r2, r3, #11
 800aaa0:	d436      	bmi.n	800ab10 <SDMMC_CmdStatusRegister+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aaa2:	035c      	lsls	r4, r3, #13
 800aaa4:	d431      	bmi.n	800ab0a <SDMMC_CmdStatusRegister+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aaa6:	0399      	lsls	r1, r3, #14
 800aaa8:	d42c      	bmi.n	800ab04 <SDMMC_CmdStatusRegister+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aaaa:	03da      	lsls	r2, r3, #15
 800aaac:	d43f      	bmi.n	800ab2e <SDMMC_CmdStatusRegister+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aaae:	041c      	lsls	r4, r3, #16
 800aab0:	d43a      	bmi.n	800ab28 <SDMMC_CmdStatusRegister+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aab2:	0459      	lsls	r1, r3, #17
 800aab4:	d435      	bmi.n	800ab22 <SDMMC_CmdStatusRegister+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aab6:	049a      	lsls	r2, r3, #18
 800aab8:	d430      	bmi.n	800ab1c <SDMMC_CmdStatusRegister+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aaba:	f013 0f08 	tst.w	r3, #8
 800aabe:	bf0c      	ite	eq
 800aac0:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800aac4:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800aac8:	e7bc      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aaca:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aacc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aace:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aad0:	e7b8      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aad2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800aad6:	e7b5      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aad8:	2040      	movs	r0, #64	@ 0x40
 800aada:	e7b3      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aadc:	2080      	movs	r0, #128	@ 0x80
 800aade:	e7b1      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aae0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800aae4:	e7ae      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aae6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800aaea:	e7ab      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aaec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800aaf0:	e7a8      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aaf2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800aaf6:	e7a5      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aaf8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800aafc:	e7a2      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aafe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ab02:	e79f      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab04:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ab08:	e79c      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab0a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800ab0e:	e799      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800ab10:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ab14:	e796      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab16:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ab1a:	e793      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800ab1c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800ab20:	e790      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab22:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ab26:	e78d      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab28:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ab2c:	e78a      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab2e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ab32:	e787      	b.n	800aa44 <SDMMC_CmdStatusRegister+0x44>
 800ab34:	24000008 	.word	0x24000008
 800ab38:	10624dd3 	.word	0x10624dd3
 800ab3c:	fffee0c0 	.word	0xfffee0c0
 800ab40:	00200045 	.word	0x00200045
 800ab44:	002000c5 	.word	0x002000c5
 800ab48:	fdffe008 	.word	0xfdffe008

0800ab4c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	4770      	bx	lr

0800ab50 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ab50:	b510      	push	{r4, lr}
 800ab52:	4694      	mov	ip, r2
 800ab54:	b082      	sub	sp, #8
 800ab56:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ab58:	460a      	mov	r2, r1
 800ab5a:	4663      	mov	r3, ip
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	9400      	str	r4, [sp, #0]
 800ab60:	4803      	ldr	r0, [pc, #12]	@ (800ab70 <BSP_SD_ReadBlocks+0x20>)
 800ab62:	f7fd fc51 	bl	8008408 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ab66:	3800      	subs	r0, #0
 800ab68:	bf18      	it	ne
 800ab6a:	2001      	movne	r0, #1
 800ab6c:	b002      	add	sp, #8
 800ab6e:	bd10      	pop	{r4, pc}
 800ab70:	240002a0 	.word	0x240002a0

0800ab74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ab74:	b510      	push	{r4, lr}
 800ab76:	4694      	mov	ip, r2
 800ab78:	b082      	sub	sp, #8
 800ab7a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ab7c:	460a      	mov	r2, r1
 800ab7e:	4663      	mov	r3, ip
 800ab80:	4601      	mov	r1, r0
 800ab82:	9400      	str	r4, [sp, #0]
 800ab84:	4803      	ldr	r0, [pc, #12]	@ (800ab94 <BSP_SD_WriteBlocks+0x20>)
 800ab86:	f7fd fd23 	bl	80085d0 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ab8a:	3800      	subs	r0, #0
 800ab8c:	bf18      	it	ne
 800ab8e:	2001      	movne	r0, #1
 800ab90:	b002      	add	sp, #8
 800ab92:	bd10      	pop	{r4, pc}
 800ab94:	240002a0 	.word	0x240002a0

0800ab98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ab98:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ab9a:	4803      	ldr	r0, [pc, #12]	@ (800aba8 <BSP_SD_GetCardState+0x10>)
 800ab9c:	f7fe fa04 	bl	8008fa8 <HAL_SD_GetCardState>
}
 800aba0:	3804      	subs	r0, #4
 800aba2:	bf18      	it	ne
 800aba4:	2001      	movne	r0, #1
 800aba6:	bd08      	pop	{r3, pc}
 800aba8:	240002a0 	.word	0x240002a0

0800abac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800abac:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800abae:	4801      	ldr	r0, [pc, #4]	@ (800abb4 <BSP_SD_GetCardInfo+0x8>)
 800abb0:	f7fe b8ba 	b.w	8008d28 <HAL_SD_GetCardInfo>
 800abb4:	240002a0 	.word	0x240002a0

0800abb8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800abb8:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800abba:	2301      	movs	r3, #1
{
 800abbc:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800abbe:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800abc2:	f000 f821 	bl	800ac08 <BSP_PlatformIsDetected>
 800abc6:	b908      	cbnz	r0, 800abcc <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800abc8:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800abcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800abd0:	b003      	add	sp, #12
 800abd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800abd6:	bf00      	nop

0800abd8 <BSP_SD_Init>:
{
 800abd8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abda:	f7ff ffed 	bl	800abb8 <BSP_SD_IsDetected>
 800abde:	2801      	cmp	r0, #1
 800abe0:	d001      	beq.n	800abe6 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800abe2:	2002      	movs	r0, #2
}
 800abe4:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800abe6:	4807      	ldr	r0, [pc, #28]	@ (800ac04 <BSP_SD_Init+0x2c>)
 800abe8:	f7fe f97c 	bl	8008ee4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800abec:	2800      	cmp	r0, #0
 800abee:	d1f9      	bne.n	800abe4 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800abf0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800abf4:	4803      	ldr	r0, [pc, #12]	@ (800ac04 <BSP_SD_Init+0x2c>)
 800abf6:	f7fe f8ab 	bl	8008d50 <HAL_SD_ConfigWideBusOperation>
 800abfa:	3800      	subs	r0, #0
 800abfc:	bf18      	it	ne
 800abfe:	2001      	movne	r0, #1
}
 800ac00:	bd08      	pop	{r3, pc}
 800ac02:	bf00      	nop
 800ac04:	240002a0 	.word	0x240002a0

0800ac08 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ac08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ac0c:	4803      	ldr	r0, [pc, #12]	@ (800ac1c <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800ac0e:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ac10:	f7f9 f8e6 	bl	8003de0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800ac14:	fab0 f080 	clz	r0, r0
 800ac18:	0940      	lsrs	r0, r0, #5
 800ac1a:	bd08      	pop	{r3, pc}
 800ac1c:	58020000 	.word	0x58020000

0800ac20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ac20:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800ac22:	4c0a      	ldr	r4, [pc, #40]	@ (800ac4c <SD_initialize+0x2c>)
 800ac24:	2501      	movs	r5, #1
 800ac26:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ac28:	f7ff ffd6 	bl	800abd8 <BSP_SD_Init>
 800ac2c:	b108      	cbz	r0, 800ac32 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ac2e:	7820      	ldrb	r0, [r4, #0]
}
 800ac30:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800ac32:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ac34:	f7ff ffb0 	bl	800ab98 <BSP_SD_GetCardState>
 800ac38:	b918      	cbnz	r0, 800ac42 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800ac3a:	7823      	ldrb	r3, [r4, #0]
 800ac3c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ac40:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ac42:	7823      	ldrb	r3, [r4, #0]
 800ac44:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800ac46:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ac48:	7820      	ldrb	r0, [r4, #0]
}
 800ac4a:	bd38      	pop	{r3, r4, r5, pc}
 800ac4c:	24000014 	.word	0x24000014

0800ac50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ac50:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800ac52:	2301      	movs	r3, #1
 800ac54:	4c05      	ldr	r4, [pc, #20]	@ (800ac6c <SD_status+0x1c>)
 800ac56:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ac58:	f7ff ff9e 	bl	800ab98 <BSP_SD_GetCardState>
 800ac5c:	b918      	cbnz	r0, 800ac66 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800ac5e:	7823      	ldrb	r3, [r4, #0]
 800ac60:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ac64:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ac66:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800ac68:	bd10      	pop	{r4, pc}
 800ac6a:	bf00      	nop
 800ac6c:	24000014 	.word	0x24000014

0800ac70 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac70:	4b16      	ldr	r3, [pc, #88]	@ (800accc <SD_ioctl+0x5c>)
{
 800ac72:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac74:	7818      	ldrb	r0, [r3, #0]
{
 800ac76:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac78:	f010 0401 	ands.w	r4, r0, #1
 800ac7c:	d106      	bne.n	800ac8c <SD_ioctl+0x1c>
 800ac7e:	4615      	mov	r5, r2

  switch (cmd)
 800ac80:	2903      	cmp	r1, #3
 800ac82:	d820      	bhi.n	800acc6 <SD_ioctl+0x56>
 800ac84:	e8df f001 	tbb	[pc, r1]
 800ac88:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ac8c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ac8e:	4620      	mov	r0, r4
 800ac90:	b00b      	add	sp, #44	@ 0x2c
 800ac92:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ac94:	a801      	add	r0, sp, #4
 800ac96:	f7ff ff89 	bl	800abac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac9a:	9b08      	ldr	r3, [sp, #32]
}
 800ac9c:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ac9e:	0a5b      	lsrs	r3, r3, #9
 800aca0:	602b      	str	r3, [r5, #0]
}
 800aca2:	b00b      	add	sp, #44	@ 0x2c
 800aca4:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800aca6:	a801      	add	r0, sp, #4
 800aca8:	f7ff ff80 	bl	800abac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800acac:	9b07      	ldr	r3, [sp, #28]
}
 800acae:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800acb0:	602b      	str	r3, [r5, #0]
}
 800acb2:	b00b      	add	sp, #44	@ 0x2c
 800acb4:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800acb6:	a801      	add	r0, sp, #4
 800acb8:	f7ff ff78 	bl	800abac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800acbc:	9b08      	ldr	r3, [sp, #32]
}
 800acbe:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800acc0:	802b      	strh	r3, [r5, #0]
}
 800acc2:	b00b      	add	sp, #44	@ 0x2c
 800acc4:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800acc6:	2404      	movs	r4, #4
 800acc8:	e7e1      	b.n	800ac8e <SD_ioctl+0x1e>
 800acca:	bf00      	nop
 800accc:	24000014 	.word	0x24000014

0800acd0 <SD_read>:
{
 800acd0:	b508      	push	{r3, lr}
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800acd8:	f04f 33ff 	mov.w	r3, #4294967295
 800acdc:	f7ff ff38 	bl	800ab50 <BSP_SD_ReadBlocks>
 800ace0:	b108      	cbz	r0, 800ace6 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800ace2:	2001      	movs	r0, #1
}
 800ace4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ace6:	f7ff ff57 	bl	800ab98 <BSP_SD_GetCardState>
 800acea:	2800      	cmp	r0, #0
 800acec:	d0fa      	beq.n	800ace4 <SD_read+0x14>
 800acee:	f7ff ff53 	bl	800ab98 <BSP_SD_GetCardState>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d1f7      	bne.n	800ace6 <SD_read+0x16>
 800acf6:	e7f5      	b.n	800ace4 <SD_read+0x14>

0800acf8 <SD_write>:
{
 800acf8:	b508      	push	{r3, lr}
 800acfa:	4608      	mov	r0, r1
 800acfc:	4611      	mov	r1, r2
 800acfe:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ad00:	f04f 33ff 	mov.w	r3, #4294967295
 800ad04:	f7ff ff36 	bl	800ab74 <BSP_SD_WriteBlocks>
 800ad08:	b108      	cbz	r0, 800ad0e <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800ad0a:	2001      	movs	r0, #1
}
 800ad0c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ad0e:	f7ff ff43 	bl	800ab98 <BSP_SD_GetCardState>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d0fa      	beq.n	800ad0c <SD_write+0x14>
 800ad16:	f7ff ff3f 	bl	800ab98 <BSP_SD_GetCardState>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d1f7      	bne.n	800ad0e <SD_write+0x16>
 800ad1e:	e7f5      	b.n	800ad0c <SD_write+0x14>

0800ad20 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ad20:	4b03      	ldr	r3, [pc, #12]	@ (800ad30 <disk_status+0x10>)
 800ad22:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ad26:	4403      	add	r3, r0
 800ad28:	6852      	ldr	r2, [r2, #4]
 800ad2a:	7a18      	ldrb	r0, [r3, #8]
 800ad2c:	6853      	ldr	r3, [r2, #4]
 800ad2e:	4718      	bx	r3
 800ad30:	24075a08 	.word	0x24075a08

0800ad34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ad34:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800ad36:	4d09      	ldr	r5, [pc, #36]	@ (800ad5c <disk_initialize+0x28>)
 800ad38:	5c2b      	ldrb	r3, [r5, r0]
 800ad3a:	b10b      	cbz	r3, 800ad40 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800ad3c:	2000      	movs	r0, #0
    {
      disk.is_initialized[pdrv] = 1;
    }
  }
  return stat;
}
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ad40:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800ad44:	182b      	adds	r3, r5, r0
 800ad46:	4604      	mov	r4, r0
 800ad48:	6852      	ldr	r2, [r2, #4]
 800ad4a:	7a18      	ldrb	r0, [r3, #8]
 800ad4c:	6813      	ldr	r3, [r2, #0]
 800ad4e:	4798      	blx	r3
    if(stat == RES_OK)
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d1f4      	bne.n	800ad3e <disk_initialize+0xa>
      disk.is_initialized[pdrv] = 1;
 800ad54:	2301      	movs	r3, #1
 800ad56:	552b      	strb	r3, [r5, r4]
 800ad58:	e7f0      	b.n	800ad3c <disk_initialize+0x8>
 800ad5a:	bf00      	nop
 800ad5c:	24075a08 	.word	0x24075a08

0800ad60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ad60:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ad62:	4c05      	ldr	r4, [pc, #20]	@ (800ad78 <disk_read+0x18>)
 800ad64:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ad68:	4404      	add	r4, r0
 800ad6a:	686d      	ldr	r5, [r5, #4]
 800ad6c:	7a20      	ldrb	r0, [r4, #8]
 800ad6e:	68ac      	ldr	r4, [r5, #8]
 800ad70:	46a4      	mov	ip, r4
  return res;
}
 800ad72:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ad74:	4760      	bx	ip
 800ad76:	bf00      	nop
 800ad78:	24075a08 	.word	0x24075a08

0800ad7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ad7c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad7e:	4c05      	ldr	r4, [pc, #20]	@ (800ad94 <disk_write+0x18>)
 800ad80:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ad84:	4404      	add	r4, r0
 800ad86:	686d      	ldr	r5, [r5, #4]
 800ad88:	7a20      	ldrb	r0, [r4, #8]
 800ad8a:	68ec      	ldr	r4, [r5, #12]
 800ad8c:	46a4      	mov	ip, r4
  return res;
}
 800ad8e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad90:	4760      	bx	ip
 800ad92:	bf00      	nop
 800ad94:	24075a08 	.word	0x24075a08

0800ad98 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ad98:	4b04      	ldr	r3, [pc, #16]	@ (800adac <disk_ioctl+0x14>)
 800ad9a:	eb03 0c00 	add.w	ip, r3, r0
 800ad9e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	4718      	bx	r3
 800adac:	24075a08 	.word	0x24075a08

0800adb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800adb0:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800adb2:	4b28      	ldr	r3, [pc, #160]	@ (800ae54 <inc_lock+0xa4>)
{
 800adb4:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800adb6:	6818      	ldr	r0, [r3, #0]
 800adb8:	6814      	ldr	r4, [r2, #0]
 800adba:	4284      	cmp	r4, r0
 800adbc:	d022      	beq.n	800ae04 <inc_lock+0x54>
 800adbe:	691d      	ldr	r5, [r3, #16]
 800adc0:	42a5      	cmp	r5, r4
 800adc2:	d005      	beq.n	800add0 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800adc4:	b370      	cbz	r0, 800ae24 <inc_lock+0x74>
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	d040      	beq.n	800ae4c <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800adca:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800adcc:	bcf0      	pop	{r4, r5, r6, r7}
 800adce:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800add0:	695e      	ldr	r6, [r3, #20]
 800add2:	6897      	ldr	r7, [r2, #8]
 800add4:	42be      	cmp	r6, r7
 800add6:	d1f5      	bne.n	800adc4 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800add8:	699e      	ldr	r6, [r3, #24]
 800adda:	6957      	ldr	r7, [r2, #20]
 800addc:	42be      	cmp	r6, r7
 800adde:	d1f1      	bne.n	800adc4 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ade0:	f04f 0c01 	mov.w	ip, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ade4:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800ade8:	ea4f 150c 	mov.w	r5, ip, lsl #4
 800adec:	8992      	ldrh	r2, [r2, #12]
 800adee:	b1a1      	cbz	r1, 800ae1a <inc_lock+0x6a>
 800adf0:	2a00      	cmp	r2, #0
 800adf2:	d1ea      	bne.n	800adca <inc_lock+0x1a>
	return i + 1;
 800adf4:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800adf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800adfc:	442b      	add	r3, r5
}
 800adfe:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae00:	819a      	strh	r2, [r3, #12]
}
 800ae02:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800ae04:	6895      	ldr	r5, [r2, #8]
 800ae06:	685e      	ldr	r6, [r3, #4]
 800ae08:	42ae      	cmp	r6, r5
 800ae0a:	d1d8      	bne.n	800adbe <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800ae0c:	6955      	ldr	r5, [r2, #20]
 800ae0e:	689e      	ldr	r6, [r3, #8]
 800ae10:	42ae      	cmp	r6, r5
 800ae12:	d1d4      	bne.n	800adbe <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae14:	f04f 0c00 	mov.w	ip, #0
 800ae18:	e7e4      	b.n	800ade4 <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae1a:	3201      	adds	r2, #1
	return i + 1;
 800ae1c:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae20:	b292      	uxth	r2, r2
 800ae22:	e7eb      	b.n	800adfc <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae24:	4684      	mov	ip, r0
 800ae26:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800ae28:	ea4f 150c 	mov.w	r5, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae2c:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800ae2e:	eb03 110c 	add.w	r1, r3, ip, lsl #4
 800ae32:	515c      	str	r4, [r3, r5]
		Files[i].clu = dp->obj.sclust;
 800ae34:	6894      	ldr	r4, [r2, #8]
 800ae36:	6952      	ldr	r2, [r2, #20]
 800ae38:	e9c1 4201 	strd	r4, r2, [r1, #4]
		Files[i].ctr = 0;
 800ae3c:	f04f 0200 	mov.w	r2, #0
 800ae40:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae42:	bf14      	ite	ne
 800ae44:	f44f 7280 	movne.w	r2, #256	@ 0x100
 800ae48:	2201      	moveq	r2, #1
 800ae4a:	e7d7      	b.n	800adfc <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae4c:	2002      	movs	r0, #2
 800ae4e:	f04f 0c01 	mov.w	ip, #1
 800ae52:	e7e9      	b.n	800ae28 <inc_lock+0x78>
 800ae54:	240759e0 	.word	0x240759e0

0800ae58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ae58:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae5a:	f04f 36ff 	mov.w	r6, #4294967295
 800ae5e:	2300      	movs	r3, #0
{
 800ae60:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae62:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae64:	70c3      	strb	r3, [r0, #3]
 800ae66:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae68:	d122      	bne.n	800aeb0 <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae6a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ae6e:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d11a      	bne.n	800aeac <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae76:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800ae7a:	2be9      	cmp	r3, #233	@ 0xe9
 800ae7c:	d007      	beq.n	800ae8e <check_fs+0x36>
 800ae7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ae80:	4a13      	ldr	r2, [pc, #76]	@ (800aed0 <check_fs+0x78>)
 800ae82:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d001      	beq.n	800ae8e <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae8a:	2002      	movs	r0, #2
}
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800ae8e:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae92:	4a10      	ldr	r2, [pc, #64]	@ (800aed4 <check_fs+0x7c>)
 800ae94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d017      	beq.n	800aecc <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800ae9c:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aea0:	4b0d      	ldr	r3, [pc, #52]	@ (800aed8 <check_fs+0x80>)
 800aea2:	1ac0      	subs	r0, r0, r3
 800aea4:	bf18      	it	ne
 800aea6:	2001      	movne	r0, #1
 800aea8:	0040      	lsls	r0, r0, #1
}
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aeac:	2003      	movs	r0, #3
}
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aeb0:	460d      	mov	r5, r1
 800aeb2:	460a      	mov	r2, r1
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 800aeba:	7840      	ldrb	r0, [r0, #1]
 800aebc:	f7ff ff50 	bl	800ad60 <disk_read>
 800aec0:	b110      	cbz	r0, 800aec8 <check_fs+0x70>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aec2:	2004      	movs	r0, #4
			fs->winsect = sector;
 800aec4:	62e6      	str	r6, [r4, #44]	@ 0x2c
}
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800aec8:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800aeca:	e7ce      	b.n	800ae6a <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aecc:	2000      	movs	r0, #0
}
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	009000eb 	.word	0x009000eb
 800aed4:	00544146 	.word	0x00544146
 800aed8:	33544146 	.word	0x33544146

0800aedc <sync_fs>:
{
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aede:	78c3      	ldrb	r3, [r0, #3]
{
 800aee0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aee2:	b95b      	cbnz	r3, 800aefc <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aee4:	7823      	ldrb	r3, [r4, #0]
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d02a      	beq.n	800af40 <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aeea:	2200      	movs	r2, #0
 800aeec:	7860      	ldrb	r0, [r4, #1]
 800aeee:	4611      	mov	r1, r2
 800aef0:	f7ff ff52 	bl	800ad98 <disk_ioctl>
 800aef4:	3800      	subs	r0, #0
 800aef6:	bf18      	it	ne
 800aef8:	2001      	movne	r0, #1
}
 800aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800aefc:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aefe:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 800af02:	2301      	movs	r3, #1
 800af04:	7840      	ldrb	r0, [r0, #1]
 800af06:	462a      	mov	r2, r5
 800af08:	4639      	mov	r1, r7
 800af0a:	f7ff ff37 	bl	800ad7c <disk_write>
 800af0e:	b9a8      	cbnz	r0, 800af3c <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af10:	6a22      	ldr	r2, [r4, #32]
 800af12:	69a3      	ldr	r3, [r4, #24]
 800af14:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800af16:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af18:	429a      	cmp	r2, r3
 800af1a:	d2e3      	bcs.n	800aee4 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af1c:	78a6      	ldrb	r6, [r4, #2]
 800af1e:	2e01      	cmp	r6, #1
 800af20:	d801      	bhi.n	800af26 <sync_fs+0x4a>
 800af22:	e7df      	b.n	800aee4 <sync_fs+0x8>
					wsect += fs->fsize;
 800af24:	69a3      	ldr	r3, [r4, #24]
 800af26:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af28:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800af2a:	2301      	movs	r3, #1
 800af2c:	4639      	mov	r1, r7
 800af2e:	462a      	mov	r2, r5
 800af30:	7860      	ldrb	r0, [r4, #1]
 800af32:	f7ff ff23 	bl	800ad7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800af36:	2e01      	cmp	r6, #1
 800af38:	d1f4      	bne.n	800af24 <sync_fs+0x48>
 800af3a:	e7d3      	b.n	800aee4 <sync_fs+0x8>
			res = FR_DISK_ERR;
 800af3c:	2001      	movs	r0, #1
}
 800af3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800af40:	7925      	ldrb	r5, [r4, #4]
 800af42:	2d01      	cmp	r5, #1
 800af44:	d1d1      	bne.n	800aeea <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800af46:	f104 0630 	add.w	r6, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 800af4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af4e:	2100      	movs	r1, #0
 800af50:	4630      	mov	r0, r6
 800af52:	f001 fc0f 	bl	800c774 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800af56:	480f      	ldr	r0, [pc, #60]	@ (800af94 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800af58:	f64a 2355 	movw	r3, #43605	@ 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800af5c:	6320      	str	r0, [r4, #48]	@ 0x30
 800af5e:	f100 50ff 	add.w	r0, r0, #534773760	@ 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800af62:	f8a4 322e 	strh.w	r3, [r4, #558]	@ 0x22e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af66:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800af68:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800af6c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800af70:	3020      	adds	r0, #32
 800af72:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
			fs->winsect = fs->volbase + 1;
 800af76:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800af78:	f8c4 121c 	str.w	r1, [r4, #540]	@ 0x21c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af7c:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800af7e:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800af80:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af84:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800af86:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af88:	f7ff fef8 	bl	800ad7c <disk_write>
			fs->fsi_flag = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	7123      	strb	r3, [r4, #4]
 800af90:	e7ab      	b.n	800aeea <sync_fs+0xe>
 800af92:	bf00      	nop
 800af94:	41615252 	.word	0x41615252

0800af98 <move_window>:
{
 800af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800af9c:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800af9e:	428e      	cmp	r6, r1
 800afa0:	d102      	bne.n	800afa8 <move_window+0x10>
	FRESULT res = FR_OK;
 800afa2:	2000      	movs	r0, #0
}
 800afa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800afa8:	4604      	mov	r4, r0
 800afaa:	460d      	mov	r5, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800afac:	7840      	ldrb	r0, [r0, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800afae:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800afb0:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800afb4:	b95b      	cbnz	r3, 800afce <move_window+0x36>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800afb6:	2301      	movs	r3, #1
 800afb8:	4639      	mov	r1, r7
 800afba:	462a      	mov	r2, r5
 800afbc:	f7ff fed0 	bl	800ad60 <disk_read>
 800afc0:	b110      	cbz	r0, 800afc8 <move_window+0x30>
				res = FR_DISK_ERR;
 800afc2:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800afc4:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800afc8:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800afca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800afce:	2301      	movs	r3, #1
 800afd0:	4632      	mov	r2, r6
 800afd2:	4639      	mov	r1, r7
 800afd4:	f7ff fed2 	bl	800ad7c <disk_write>
 800afd8:	b9d0      	cbnz	r0, 800b010 <move_window+0x78>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800afda:	6a22      	ldr	r2, [r4, #32]
 800afdc:	69a3      	ldr	r3, [r4, #24]
 800afde:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800afe0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d212      	bcs.n	800b00c <move_window+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afe6:	f894 8002 	ldrb.w	r8, [r4, #2]
 800afea:	f1b8 0f01 	cmp.w	r8, #1
 800afee:	d801      	bhi.n	800aff4 <move_window+0x5c>
 800aff0:	e00c      	b.n	800b00c <move_window+0x74>
					wsect += fs->fsize;
 800aff2:	69a3      	ldr	r3, [r4, #24]
 800aff4:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aff6:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800affa:	2301      	movs	r3, #1
 800affc:	4639      	mov	r1, r7
 800affe:	4632      	mov	r2, r6
 800b000:	7860      	ldrb	r0, [r4, #1]
 800b002:	f7ff febb 	bl	800ad7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b006:	f1b8 0f01 	cmp.w	r8, #1
 800b00a:	d1f2      	bne.n	800aff2 <move_window+0x5a>
 800b00c:	7860      	ldrb	r0, [r4, #1]
 800b00e:	e7d2      	b.n	800afb6 <move_window+0x1e>
			res = FR_DISK_ERR;
 800b010:	2001      	movs	r0, #1
 800b012:	e7c7      	b.n	800afa4 <move_window+0xc>

0800b014 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b018:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 800b01a:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800b01c:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800b01e:	b18c      	cbz	r4, 800b044 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b020:	7825      	ldrb	r5, [r4, #0]
 800b022:	2d20      	cmp	r5, #32
 800b024:	d911      	bls.n	800b04a <find_volume+0x36>
 800b026:	2d3a      	cmp	r5, #58	@ 0x3a
 800b028:	d00f      	beq.n	800b04a <find_volume+0x36>
 800b02a:	46a4      	mov	ip, r4
 800b02c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800b030:	2b20      	cmp	r3, #32
 800b032:	d90c      	bls.n	800b04e <find_volume+0x3a>
 800b034:	2b3a      	cmp	r3, #58	@ 0x3a
 800b036:	d1f9      	bne.n	800b02c <find_volume+0x18>
			i = *tp++ - '0';
 800b038:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b03a:	45a4      	cmp	ip, r4
 800b03c:	d102      	bne.n	800b044 <find_volume+0x30>
 800b03e:	2d30      	cmp	r5, #48	@ 0x30
 800b040:	f000 80e1 	beq.w	800b206 <find_volume+0x1f2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800b044:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800b046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b04a:	462b      	mov	r3, r5
 800b04c:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b04e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b050:	d0f2      	beq.n	800b038 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b052:	4ba1      	ldr	r3, [pc, #644]	@ (800b2d8 <find_volume+0x2c4>)
 800b054:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b056:	2c00      	cmp	r4, #0
 800b058:	f000 80c6 	beq.w	800b1e8 <find_volume+0x1d4>
	*rfs = fs;							/* Return pointer to the file system object */
 800b05c:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b05e:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b062:	7823      	ldrb	r3, [r4, #0]
 800b064:	b153      	cbz	r3, 800b07c <find_volume+0x68>
		stat = disk_status(fs->drv);
 800b066:	7860      	ldrb	r0, [r4, #1]
 800b068:	f7ff fe5a 	bl	800ad20 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b06c:	07c3      	lsls	r3, r0, #31
 800b06e:	d405      	bmi.n	800b07c <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b070:	b115      	cbz	r5, 800b078 <find_volume+0x64>
 800b072:	0747      	lsls	r7, r0, #29
 800b074:	f100 80b5 	bmi.w	800b1e2 <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 800b078:	2000      	movs	r0, #0
 800b07a:	e08d      	b.n	800b198 <find_volume+0x184>
	fs->fs_type = 0;					/* Clear the file system object */
 800b07c:	2000      	movs	r0, #0
 800b07e:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b080:	f7ff fe58 	bl	800ad34 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b084:	07c6      	lsls	r6, r0, #31
 800b086:	f100 8089 	bmi.w	800b19c <find_volume+0x188>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b08a:	b115      	cbz	r5, 800b092 <find_volume+0x7e>
 800b08c:	0745      	lsls	r5, r0, #29
 800b08e:	f100 80a8 	bmi.w	800b1e2 <find_volume+0x1ce>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b092:	2100      	movs	r1, #0
 800b094:	4620      	mov	r0, r4
 800b096:	f7ff fedf 	bl	800ae58 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b09a:	2802      	cmp	r0, #2
 800b09c:	f000 8081 	beq.w	800b1a2 <find_volume+0x18e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b0a0:	2804      	cmp	r0, #4
 800b0a2:	f000 80ac 	beq.w	800b1fe <find_volume+0x1ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b0a6:	2801      	cmp	r0, #1
 800b0a8:	d875      	bhi.n	800b196 <find_volume+0x182>
 800b0aa:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b0ac:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800b0b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0b4:	d16f      	bne.n	800b196 <find_volume+0x182>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b0b6:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b0ba:	b901      	cbnz	r1, 800b0be <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 800b0bc:	6d61      	ldr	r1, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b0be:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800b0c2:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b0c4:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b0c6:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d864      	bhi.n	800b196 <find_volume+0x182>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b0cc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800b0d0:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d05f      	beq.n	800b196 <find_volume+0x182>
 800b0d6:	1e58      	subs	r0, r3, #1
 800b0d8:	4218      	tst	r0, r3
 800b0da:	d15c      	bne.n	800b196 <find_volume+0x182>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0dc:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0e0:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0e2:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0e4:	d157      	bne.n	800b196 <find_volume+0x182>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b0e6:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0ea:	b900      	cbnz	r0, 800b0ee <find_volume+0xda>
	rv = rv << 8 | ptr[0];
 800b0ec:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b0ee:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0f2:	f1bc 0f00 	cmp.w	ip, #0
 800b0f6:	d04e      	beq.n	800b196 <find_volume+0x182>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b0f8:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0fc:	eb0c 1617 	add.w	r6, ip, r7, lsr #4
 800b100:	4416      	add	r6, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b102:	42b0      	cmp	r0, r6
 800b104:	d347      	bcc.n	800b196 <find_volume+0x182>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b106:	1b80      	subs	r0, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b108:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b10a:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b10e:	d342      	bcc.n	800b196 <find_volume+0x182>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b110:	eb0c 0305 	add.w	r3, ip, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b114:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
		fs->database = bsect + sysect;					/* Data start sector */
 800b118:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b11a:	f10e 0002 	add.w	r0, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b11e:	45e6      	cmp	lr, ip
 800b120:	f240 808f 	bls.w	800b242 <find_volume+0x22e>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b124:	6223      	str	r3, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b126:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->database = bsect + sysect;					/* Data start sector */
 800b12a:	62a6      	str	r6, [r4, #40]	@ 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b12c:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b12e:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b130:	61e5      	str	r5, [r4, #28]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b132:	d130      	bne.n	800b196 <find_volume+0x182>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b134:	0083      	lsls	r3, r0, #2
	rv = rv << 8 | ptr[0];
 800b136:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b138:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b13c:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b13e:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800b142:	d328      	bcc.n	800b196 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b144:	f8b4 2060 	ldrh.w	r2, [r4, #96]	@ 0x60
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b148:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b14c:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b14e:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800b150:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b152:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b156:	f000 809c 	beq.w	800b292 <find_volume+0x27e>
		fmt = FS_FAT32;
 800b15a:	2303      	movs	r3, #3
	fs->id = ++Fsid;		/* File system mount ID */
 800b15c:	495f      	ldr	r1, [pc, #380]	@ (800b2dc <find_volume+0x2c8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800b15e:	7023      	strb	r3, [r4, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b160:	4a5f      	ldr	r2, [pc, #380]	@ (800b2e0 <find_volume+0x2cc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800b162:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b164:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b166:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b168:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	800b      	strh	r3, [r1, #0]
 800b16e:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b170:	f000 808c 	beq.w	800b28c <find_volume+0x278>
 800b174:	6913      	ldr	r3, [r2, #16]
 800b176:	429c      	cmp	r4, r3
 800b178:	f47f af7e 	bne.w	800b078 <find_volume+0x64>
 800b17c:	2300      	movs	r3, #0
 800b17e:	6113      	str	r3, [r2, #16]
 800b180:	e77a      	b.n	800b078 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 800b182:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b186:	2e00      	cmp	r6, #0
 800b188:	d14a      	bne.n	800b220 <find_volume+0x20c>
 800b18a:	2f00      	cmp	r7, #0
 800b18c:	d151      	bne.n	800b232 <find_volume+0x21e>
 800b18e:	f1b8 0f00 	cmp.w	r8, #0
 800b192:	d13c      	bne.n	800b20e <find_volume+0x1fa>
 800b194:	bb55      	cbnz	r5, 800b1ec <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b196:	200d      	movs	r0, #13
}
 800b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b19c:	2003      	movs	r0, #3
}
 800b19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1a2:	f894 61f2 	ldrb.w	r6, [r4, #498]	@ 0x1f2
 800b1a6:	b10e      	cbz	r6, 800b1ac <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800b1a8:	f8d4 61f6 	ldr.w	r6, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1ac:	f894 7202 	ldrb.w	r7, [r4, #514]	@ 0x202
 800b1b0:	b10f      	cbz	r7, 800b1b6 <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 800b1b2:	f8d4 7206 	ldr.w	r7, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1b6:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 800b1ba:	b313      	cbz	r3, 800b202 <find_volume+0x1ee>
	rv = rv << 8 | ptr[0];
 800b1bc:	f8d4 8216 	ldr.w	r8, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b1c0:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 800b1c4:	2d00      	cmp	r5, #0
 800b1c6:	d1dc      	bne.n	800b182 <find_volume+0x16e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1c8:	bb56      	cbnz	r6, 800b220 <find_volume+0x20c>
 800b1ca:	bb8f      	cbnz	r7, 800b230 <find_volume+0x21c>
 800b1cc:	f1b8 0f00 	cmp.w	r8, #0
 800b1d0:	d0e1      	beq.n	800b196 <find_volume+0x182>
 800b1d2:	4641      	mov	r1, r8
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f7ff fe3f 	bl	800ae58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1da:	2801      	cmp	r0, #1
 800b1dc:	d8db      	bhi.n	800b196 <find_volume+0x182>
			bsect = br[i];
 800b1de:	4645      	mov	r5, r8
 800b1e0:	e764      	b.n	800b0ac <find_volume+0x98>
				return FR_WRITE_PROTECTED;
 800b1e2:	200a      	movs	r0, #10
}
 800b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b1e8:	200c      	movs	r0, #12
 800b1ea:	e7d5      	b.n	800b198 <find_volume+0x184>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f7ff fe32 	bl	800ae58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1f4:	2801      	cmp	r0, #1
 800b1f6:	f67f af59 	bls.w	800b0ac <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1fa:	2804      	cmp	r0, #4
 800b1fc:	d1cb      	bne.n	800b196 <find_volume+0x182>
 800b1fe:	2001      	movs	r0, #1
 800b200:	e7ca      	b.n	800b198 <find_volume+0x184>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b202:	4698      	mov	r8, r3
 800b204:	e7dc      	b.n	800b1c0 <find_volume+0x1ac>
					*path = ++tt;
 800b206:	f10c 0301 	add.w	r3, ip, #1
 800b20a:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b20c:	e721      	b.n	800b052 <find_volume+0x3e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b20e:	4641      	mov	r1, r8
 800b210:	4620      	mov	r0, r4
 800b212:	f7ff fe21 	bl	800ae58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b216:	2801      	cmp	r0, #1
 800b218:	d9e1      	bls.n	800b1de <find_volume+0x1ca>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b21a:	2d00      	cmp	r5, #0
 800b21c:	d1e6      	bne.n	800b1ec <find_volume+0x1d8>
 800b21e:	e7ba      	b.n	800b196 <find_volume+0x182>
 800b220:	4631      	mov	r1, r6
 800b222:	4620      	mov	r0, r4
 800b224:	f7ff fe18 	bl	800ae58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b228:	2801      	cmp	r0, #1
 800b22a:	d8ae      	bhi.n	800b18a <find_volume+0x176>
			bsect = br[i];
 800b22c:	4635      	mov	r5, r6
 800b22e:	e73d      	b.n	800b0ac <find_volume+0x98>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b230:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b232:	4639      	mov	r1, r7
 800b234:	4620      	mov	r0, r4
 800b236:	f7ff fe0f 	bl	800ae58 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b23a:	2801      	cmp	r0, #1
 800b23c:	d8a7      	bhi.n	800b18e <find_volume+0x17a>
			bsect = br[i];
 800b23e:	463d      	mov	r5, r7
 800b240:	e734      	b.n	800b0ac <find_volume+0x98>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b242:	f640 7cf5 	movw	ip, #4085	@ 0xff5
		fs->volbase = bsect;							/* Volume start sector */
 800b246:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800b248:	62a6      	str	r6, [r4, #40]	@ 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b24a:	45e6      	cmp	lr, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b24c:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b24e:	6223      	str	r3, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b250:	d816      	bhi.n	800b280 <find_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b252:	2f00      	cmp	r7, #0
 800b254:	d09f      	beq.n	800b196 <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b256:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b258:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800b25c:	f000 0001 	and.w	r0, r0, #1
 800b260:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b264:	2301      	movs	r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b266:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b26a:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b26c:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
 800b270:	d391      	bcc.n	800b196 <find_volume+0x182>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b272:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800b276:	2180      	movs	r1, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b278:	e9c4 2203 	strd	r2, r2, [r4, #12]
		fs->fsi_flag = 0x80;
 800b27c:	7121      	strb	r1, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b27e:	e76d      	b.n	800b15c <find_volume+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b280:	2f00      	cmp	r7, #0
 800b282:	d088      	beq.n	800b196 <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b284:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b286:	0040      	lsls	r0, r0, #1
 800b288:	2302      	movs	r3, #2
 800b28a:	e7ec      	b.n	800b266 <find_volume+0x252>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	e770      	b.n	800b174 <find_volume+0x160>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b292:	1c69      	adds	r1, r5, #1
 800b294:	4620      	mov	r0, r4
 800b296:	f7ff fe7f 	bl	800af98 <move_window>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	f47f af5d 	bne.w	800b15a <find_volume+0x146>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2a0:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800b2a4:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 800b2a8:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2aa:	4291      	cmp	r1, r2
 800b2ac:	f47f af55 	bne.w	800b15a <find_volume+0x146>
	rv = rv << 8 | ptr[0];
 800b2b0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e4 <find_volume+0x2d0>)
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	f47f af50 	bne.w	800b15a <find_volume+0x146>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2ba:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 800b2be:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b2c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b2c6:	3320      	adds	r3, #32
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	f47f af46 	bne.w	800b15a <find_volume+0x146>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2ce:	e9d4 2386 	ldrd	r2, r3, [r4, #536]	@ 0x218
 800b2d2:	e9c4 3203 	strd	r3, r2, [r4, #12]
 800b2d6:	e740      	b.n	800b15a <find_volume+0x146>
 800b2d8:	24075a04 	.word	0x24075a04
 800b2dc:	24075a00 	.word	0x24075a00
 800b2e0:	240759e0 	.word	0x240759e0
 800b2e4:	41615252 	.word	0x41615252

0800b2e8 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800b2ec:	f890 9000 	ldrb.w	r9, [r0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	460e      	mov	r6, r1
 800b2f4:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 800b2f6:	f1b9 0f02 	cmp.w	r9, #2
 800b2fa:	d008      	beq.n	800b30e <put_fat.part.0+0x26>
 800b2fc:	f1b9 0f03 	cmp.w	r9, #3
 800b300:	d042      	beq.n	800b388 <put_fat.part.0+0xa0>
 800b302:	f1b9 0f01 	cmp.w	r9, #1
 800b306:	d014      	beq.n	800b332 <put_fat.part.0+0x4a>
 800b308:	2002      	movs	r0, #2
}
 800b30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b30e:	6a01      	ldr	r1, [r0, #32]
 800b310:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 800b314:	f7ff fe40 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800b318:	2800      	cmp	r0, #0
 800b31a:	d1f6      	bne.n	800b30a <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b31c:	0076      	lsls	r6, r6, #1
 800b31e:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 800b322:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800b326:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b328:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800b32a:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800b32e:	7054      	strb	r4, [r2, #1]
			break;
 800b330:	e03d      	b.n	800b3ae <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b332:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b334:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b338:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b33c:	f7ff fe2c 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800b340:	2800      	cmp	r0, #0
 800b342:	d1e2      	bne.n	800b30a <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 800b344:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b348:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 800b34a:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800b34e:	f105 0830 	add.w	r8, r5, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b352:	ea4f 2157 	mov.w	r1, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b356:	d52f      	bpl.n	800b3b8 <put_fat.part.0+0xd0>
 800b358:	f818 2003 	ldrb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b35c:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b35e:	f002 020f 	and.w	r2, r2, #15
 800b362:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800b366:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b36a:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800b36c:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b370:	4419      	add	r1, r3
 800b372:	f7ff fe11 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800b376:	2800      	cmp	r0, #0
 800b378:	d1c7      	bne.n	800b30a <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800b37a:	f3c7 0208 	ubfx	r2, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b37e:	f3c4 1307 	ubfx	r3, r4, #4, #8
			p = fs->win + bc % SS(fs);
 800b382:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b384:	7013      	strb	r3, [r2, #0]
			break;
 800b386:	e012      	b.n	800b3ae <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b388:	6a01      	ldr	r1, [r0, #32]
 800b38a:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 800b38e:	f7ff fe03 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800b392:	2800      	cmp	r0, #0
 800b394:	d1b9      	bne.n	800b30a <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b396:	00b6      	lsls	r6, r6, #2
 800b398:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800b39c:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 800b3a0:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b3a4:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b3a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b3aa:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800b3ac:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 800b3ae:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3b0:	2000      	movs	r0, #0
			fs->wflag = 1;
 800b3b2:	70eb      	strb	r3, [r5, #3]
}
 800b3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b3b8:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3bc:	4628      	mov	r0, r5
 800b3be:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800b3c0:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3c4:	4419      	add	r1, r3
 800b3c6:	f7ff fde7 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d19d      	bne.n	800b30a <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800b3ce:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b3d2:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800b3d6:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 800b3da:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b3de:	f023 030f 	bic.w	r3, r3, #15
 800b3e2:	4323      	orrs	r3, r4
 800b3e4:	7013      	strb	r3, [r2, #0]
			break;
 800b3e6:	e7e2      	b.n	800b3ae <put_fat.part.0+0xc6>

0800b3e8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b3e8:	2901      	cmp	r1, #1
 800b3ea:	d90e      	bls.n	800b40a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b3ee:	6943      	ldr	r3, [r0, #20]
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	4299      	cmp	r1, r3
 800b3f6:	d206      	bcs.n	800b406 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800b3f8:	7803      	ldrb	r3, [r0, #0]
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d021      	beq.n	800b442 <get_fat.isra.0+0x5a>
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d010      	beq.n	800b424 <get_fat.isra.0+0x3c>
 800b402:	2b01      	cmp	r3, #1
 800b404:	d003      	beq.n	800b40e <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 800b406:	2001      	movs	r0, #1
}
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b40a:	2001      	movs	r0, #1
}
 800b40c:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b40e:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b410:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b414:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800b418:	f7ff fdbe 	bl	800af98 <move_window>
 800b41c:	b1f0      	cbz	r0, 800b45c <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b41e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b424:	6a01      	ldr	r1, [r0, #32]
 800b426:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b42a:	f7ff fdb5 	bl	800af98 <move_window>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d1f5      	bne.n	800b41e <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b432:	00a4      	lsls	r4, r4, #2
 800b434:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b438:	4425      	add	r5, r4
 800b43a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b43c:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 800b440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b442:	6a01      	ldr	r1, [r0, #32]
 800b444:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b448:	f7ff fda6 	bl	800af98 <move_window>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d1e6      	bne.n	800b41e <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b450:	0063      	lsls	r3, r4, #1
 800b452:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b456:	442b      	add	r3, r5
 800b458:	8e18      	ldrh	r0, [r3, #48]	@ 0x30
}
 800b45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800b45c:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b460:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b462:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b464:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b466:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b468:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b46c:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b470:	f7ff fd92 	bl	800af98 <move_window>
 800b474:	2800      	cmp	r0, #0
 800b476:	d1d2      	bne.n	800b41e <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b478:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800b47c:	442f      	add	r7, r5
 800b47e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800b482:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b486:	07e3      	lsls	r3, r4, #31
 800b488:	bf4c      	ite	mi
 800b48a:	0900      	lsrmi	r0, r0, #4
 800b48c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b492:	bf00      	nop

0800b494 <create_chain>:
{
 800b494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b498:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800b49a:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 800b49c:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	f040 80a7 	bne.w	800b5f4 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b4a6:	f8d8 600c 	ldr.w	r6, [r8, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b4aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b4ae:	b1c6      	cbz	r6, 800b4e2 <create_chain+0x4e>
 800b4b0:	429e      	cmp	r6, r3
 800b4b2:	d216      	bcs.n	800b4e2 <create_chain+0x4e>
			ncl++;							/* Next cluster */
 800b4b4:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4b6:	42a3      	cmp	r3, r4
 800b4b8:	f200 80b4 	bhi.w	800b624 <create_chain+0x190>
				if (ncl > scl) return 0;	/* No free cluster */
 800b4bc:	2e01      	cmp	r6, #1
 800b4be:	d013      	beq.n	800b4e8 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b4c0:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800b4c2:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b4c4:	696b      	ldr	r3, [r5, #20]
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	d907      	bls.n	800b4da <create_chain+0x46>
		switch (fs->fs_type) {
 800b4ca:	782b      	ldrb	r3, [r5, #0]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	f000 8083 	beq.w	800b5d8 <create_chain+0x144>
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d042      	beq.n	800b55c <create_chain+0xc8>
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d00a      	beq.n	800b4f0 <create_chain+0x5c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b4da:	2401      	movs	r4, #1
}
 800b4dc:	4620      	mov	r0, r4
 800b4de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	f200 809a 	bhi.w	800b61c <create_chain+0x188>
				if (ncl > scl) return 0;	/* No free cluster */
 800b4e8:	2400      	movs	r4, #0
}
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4f0:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b4f2:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800b4fc:	f7ff fd4c 	bl	800af98 <move_window>
 800b500:	bb38      	cbnz	r0, 800b552 <create_chain+0xbe>
			wc = fs->win[bc++ % SS(fs)];
 800b502:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b506:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b508:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b50c:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b50e:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b510:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b514:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b518:	f7ff fd3e 	bl	800af98 <move_window>
 800b51c:	b9c8      	cbnz	r0, 800b552 <create_chain+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b51e:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b522:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b524:	44ab      	add	fp, r5
 800b526:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 800b52a:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b52e:	bf4c      	ite	mi
 800b530:	091b      	lsrmi	r3, r3, #4
 800b532:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800b536:	b313      	cbz	r3, 800b57e <create_chain+0xea>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d0ce      	beq.n	800b4da <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800b53c:	42a6      	cmp	r6, r4
 800b53e:	d0d3      	beq.n	800b4e8 <create_chain+0x54>
			ncl++;							/* Next cluster */
 800b540:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b542:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b546:	429c      	cmp	r4, r3
 800b548:	d2b8      	bcs.n	800b4bc <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b54a:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b54c:	e7ba      	b.n	800b4c4 <create_chain+0x30>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b54e:	2801      	cmp	r0, #1
 800b550:	d1c3      	bne.n	800b4da <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b552:	f04f 34ff 	mov.w	r4, #4294967295
}
 800b556:	4620      	mov	r0, r4
 800b558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b55c:	6a29      	ldr	r1, [r5, #32]
 800b55e:	4628      	mov	r0, r5
 800b560:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b564:	f7ff fd18 	bl	800af98 <move_window>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1f2      	bne.n	800b552 <create_chain+0xbe>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b56c:	00a3      	lsls	r3, r4, #2
 800b56e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b572:	442b      	add	r3, r5
 800b574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b576:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1dc      	bne.n	800b538 <create_chain+0xa4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b57e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b582:	42a3      	cmp	r3, r4
 800b584:	d9a9      	bls.n	800b4da <create_chain+0x46>
 800b586:	f04f 32ff 	mov.w	r2, #4294967295
 800b58a:	4621      	mov	r1, r4
 800b58c:	4640      	mov	r0, r8
 800b58e:	f7ff feab 	bl	800b2e8 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800b592:	b970      	cbnz	r0, 800b5b2 <create_chain+0x11e>
 800b594:	f1b9 0f00 	cmp.w	r9, #0
 800b598:	d00b      	beq.n	800b5b2 <create_chain+0x11e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b59a:	f1b9 0f01 	cmp.w	r9, #1
 800b59e:	d09c      	beq.n	800b4da <create_chain+0x46>
 800b5a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b5a4:	4599      	cmp	r9, r3
 800b5a6:	d298      	bcs.n	800b4da <create_chain+0x46>
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	4649      	mov	r1, r9
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	f7ff fe9b 	bl	800b2e8 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d1cb      	bne.n	800b54e <create_chain+0xba>
		fs->last_clst = ncl;
 800b5b6:	f8c8 400c 	str.w	r4, [r8, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b5ba:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800b5be:	3b02      	subs	r3, #2
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d802      	bhi.n	800b5ca <create_chain+0x136>
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	f8c8 2010 	str.w	r2, [r8, #16]
		fs->fsi_flag |= 1;
 800b5ca:	f898 3004 	ldrb.w	r3, [r8, #4]
 800b5ce:	f043 0301 	orr.w	r3, r3, #1
 800b5d2:	f888 3004 	strb.w	r3, [r8, #4]
 800b5d6:	e781      	b.n	800b4dc <create_chain+0x48>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5d8:	6a29      	ldr	r1, [r5, #32]
 800b5da:	4628      	mov	r0, r5
 800b5dc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b5e0:	f7ff fcda 	bl	800af98 <move_window>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d1b4      	bne.n	800b552 <create_chain+0xbe>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b5e8:	0063      	lsls	r3, r4, #1
 800b5ea:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b5ee:	442b      	add	r3, r5
 800b5f0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
			break;
 800b5f2:	e7a0      	b.n	800b536 <create_chain+0xa2>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	f7ff fef7 	bl	800b3e8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b5fa:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b5fc:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b5fe:	f67f af6c 	bls.w	800b4da <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b602:	1c41      	adds	r1, r0, #1
 800b604:	d0a5      	beq.n	800b552 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b606:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b60a:	4283      	cmp	r3, r0
 800b60c:	f63f af66 	bhi.w	800b4dc <create_chain+0x48>
			ncl++;							/* Next cluster */
 800b610:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b614:	42a3      	cmp	r3, r4
 800b616:	d807      	bhi.n	800b628 <create_chain+0x194>
 800b618:	464e      	mov	r6, r9
 800b61a:	e74f      	b.n	800b4bc <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b61c:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b61e:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 800b620:	2402      	movs	r4, #2
 800b622:	e74f      	b.n	800b4c4 <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b624:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b626:	e74d      	b.n	800b4c4 <create_chain+0x30>
 800b628:	2c01      	cmp	r4, #1
 800b62a:	683d      	ldr	r5, [r7, #0]
 800b62c:	f67f af55 	bls.w	800b4da <create_chain+0x46>
 800b630:	464e      	mov	r6, r9
 800b632:	e747      	b.n	800b4c4 <create_chain+0x30>

0800b634 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800b634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->dptr = ofs;				/* Set current offset */
 800b638:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b63a:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800b63c:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800b63e:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800b640:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b642:	b98c      	cbnz	r4, 800b668 <dir_sdi.constprop.0+0x34>
 800b644:	783b      	ldrb	r3, [r7, #0]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d80a      	bhi.n	800b660 <dir_sdi.constprop.0+0x2c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b64a:	893b      	ldrh	r3, [r7, #8]
 800b64c:	b18b      	cbz	r3, 800b672 <dir_sdi.constprop.0+0x3e>
		dp->sect = fs->dirbase;
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 800b650:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b654:	b16b      	cbz	r3, 800b672 <dir_sdi.constprop.0+0x3e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b656:	3730      	adds	r7, #48	@ 0x30
	return FR_OK;
 800b658:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b65a:	6237      	str	r7, [r6, #32]
}
 800b65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 800b660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0f1      	beq.n	800b64a <dir_sdi.constprop.0+0x16>
 800b666:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b668:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d15c      	bne.n	800b728 <dir_sdi.constprop.0+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b66e:	2c01      	cmp	r4, #1
 800b670:	d102      	bne.n	800b678 <dir_sdi.constprop.0+0x44>
		return FR_INT_ERR;
 800b672:	2002      	movs	r0, #2
}
 800b674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b678:	463d      	mov	r5, r7
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b67a:	696b      	ldr	r3, [r5, #20]
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	d9f8      	bls.n	800b672 <dir_sdi.constprop.0+0x3e>
		switch (fs->fs_type) {
 800b680:	782b      	ldrb	r3, [r5, #0]
 800b682:	2b02      	cmp	r3, #2
 800b684:	d025      	beq.n	800b6d2 <dir_sdi.constprop.0+0x9e>
 800b686:	2b03      	cmp	r3, #3
 800b688:	d00d      	beq.n	800b6a6 <dir_sdi.constprop.0+0x72>
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d1f1      	bne.n	800b672 <dir_sdi.constprop.0+0x3e>
			bc = (UINT)clst; bc += bc / 2;
 800b68e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b692:	6a29      	ldr	r1, [r5, #32]
 800b694:	4628      	mov	r0, r5
 800b696:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b69a:	f7ff fc7d 	bl	800af98 <move_window>
 800b69e:	b330      	cbz	r0, 800b6ee <dir_sdi.constprop.0+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b6a0:	2001      	movs	r0, #1
}
 800b6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6a6:	6a29      	ldr	r1, [r5, #32]
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b6ae:	f7ff fc73 	bl	800af98 <move_window>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d1f4      	bne.n	800b6a0 <dir_sdi.constprop.0+0x6c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b6b6:	00a3      	lsls	r3, r4, #2
 800b6b8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b6bc:	442b      	add	r3, r5
 800b6be:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b6c0:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b6c4:	2c01      	cmp	r4, #1
 800b6c6:	d9d4      	bls.n	800b672 <dir_sdi.constprop.0+0x3e>
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	429c      	cmp	r4, r3
 800b6cc:	d2d1      	bcs.n	800b672 <dir_sdi.constprop.0+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b6ce:	6835      	ldr	r5, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b6d0:	e7d3      	b.n	800b67a <dir_sdi.constprop.0+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6d2:	6a29      	ldr	r1, [r5, #32]
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b6da:	f7ff fc5d 	bl	800af98 <move_window>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d1de      	bne.n	800b6a0 <dir_sdi.constprop.0+0x6c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b6e2:	0063      	lsls	r3, r4, #1
 800b6e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b6e8:	442b      	add	r3, r5
 800b6ea:	8e1c      	ldrh	r4, [r3, #48]	@ 0x30
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b6ec:	e7ea      	b.n	800b6c4 <dir_sdi.constprop.0+0x90>
			wc = fs->win[bc++ % SS(fs)];
 800b6ee:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6f2:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b6f4:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6f8:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b6fa:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6fc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b700:	f893 9030 	ldrb.w	r9, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b704:	f7ff fc48 	bl	800af98 <move_window>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1c9      	bne.n	800b6a0 <dir_sdi.constprop.0+0x6c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b70c:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800b710:	44a8      	add	r8, r5
 800b712:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800b716:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b71a:	07e3      	lsls	r3, r4, #31
 800b71c:	bf4c      	ite	mi
 800b71e:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800b722:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b726:	e7cd      	b.n	800b6c4 <dir_sdi.constprop.0+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b728:	697a      	ldr	r2, [r7, #20]
	clst -= 2;
 800b72a:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b72c:	3a02      	subs	r2, #2
 800b72e:	4291      	cmp	r1, r2
 800b730:	d203      	bcs.n	800b73a <dir_sdi.constprop.0+0x106>
	return clst * fs->csize + fs->database;
 800b732:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b734:	fb01 2303 	mla	r3, r1, r3, r2
 800b738:	e78a      	b.n	800b650 <dir_sdi.constprop.0+0x1c>
		dp->sect = fs->dirbase;
 800b73a:	2300      	movs	r3, #0
 800b73c:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b740:	e797      	b.n	800b672 <dir_sdi.constprop.0+0x3e>
 800b742:	bf00      	nop

0800b744 <follow_path>:
{
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b748:	780a      	ldrb	r2, [r1, #0]
{
 800b74a:	b085      	sub	sp, #20
 800b74c:	468b      	mov	fp, r1
 800b74e:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b750:	2a2f      	cmp	r2, #47	@ 0x2f
	FATFS *fs = obj->fs;
 800b752:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b754:	d001      	beq.n	800b75a <follow_path+0x16>
 800b756:	2a5c      	cmp	r2, #92	@ 0x5c
 800b758:	d105      	bne.n	800b766 <follow_path+0x22>
 800b75a:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800b75e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b760:	d0fb      	beq.n	800b75a <follow_path+0x16>
 800b762:	2b5c      	cmp	r3, #92	@ 0x5c
 800b764:	d0f9      	beq.n	800b75a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b766:	2200      	movs	r2, #0
 800b768:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b76a:	f89b 2000 	ldrb.w	r2, [fp]
 800b76e:	2a1f      	cmp	r2, #31
 800b770:	f240 816b 	bls.w	800ba4a <follow_path+0x306>
 800b774:	465b      	mov	r3, fp
	p = *path; sfn = dp->fn;
 800b776:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 800b77a:	46ab      	mov	fp, r5
		*d++ = (BYTE)val;
 800b77c:	f04f 3a20 	mov.w	sl, #538976288	@ 0x20202020
 800b780:	463e      	mov	r6, r7
 800b782:	461d      	mov	r5, r3
 800b784:	2320      	movs	r3, #32
 800b786:	f242 0220 	movw	r2, #8224	@ 0x2020
 800b78a:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 800b78e:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 800b792:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800b794:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		c = (BYTE)p[si++];
 800b798:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b79a:	2b20      	cmp	r3, #32
 800b79c:	d95f      	bls.n	800b85e <follow_path+0x11a>
 800b79e:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 800b7a0:	2700      	movs	r7, #0
 800b7a2:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800b7a6:	2001      	movs	r0, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b7a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800b7aa:	d066      	beq.n	800b87a <follow_path+0x136>
 800b7ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800b7ae:	d064      	beq.n	800b87a <follow_path+0x136>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b7b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7b2:	d001      	beq.n	800b7b8 <follow_path+0x74>
 800b7b4:	4567      	cmp	r7, ip
 800b7b6:	d345      	bcc.n	800b844 <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b7b8:	f1bc 0f0b 	cmp.w	ip, #11
 800b7bc:	d04f      	beq.n	800b85e <follow_path+0x11a>
 800b7be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7c0:	d14d      	bne.n	800b85e <follow_path+0x11a>
			i = 8; ni = 11;				/* Goto extension */
 800b7c2:	2708      	movs	r7, #8
 800b7c4:	f04f 0c0b 	mov.w	ip, #11
		c = (BYTE)p[si++];
 800b7c8:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800b7cc:	3001      	adds	r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d8ea      	bhi.n	800b7a8 <follow_path+0x64>
	*path = p + si;						/* Return pointer to the next segment */
 800b7d2:	4405      	add	r5, r0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b7d4:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800b7d8:	2ae5      	cmp	r2, #229	@ 0xe5
 800b7da:	d102      	bne.n	800b7e2 <follow_path+0x9e>
 800b7dc:	2205      	movs	r2, #5
 800b7de:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b7e2:	2b20      	cmp	r3, #32
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b7e4:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800b7e6:	f8d4 8000 	ldr.w	r8, [r4]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b7ea:	bf8c      	ite	hi
 800b7ec:	2300      	movhi	r3, #0
 800b7ee:	2301      	movls	r3, #1
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b7f6:	f7ff ff1d 	bl	800b634 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	f040 80cc 	bne.w	800b99a <follow_path+0x256>
		res = move_window(fs, dp->sect);
 800b802:	69e7      	ldr	r7, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b804:	f108 0930 	add.w	r9, r8, #48	@ 0x30
 800b808:	e9cd b600 	strd	fp, r6, [sp]
 800b80c:	46ab      	mov	fp, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b80e:	f8d8 602c 	ldr.w	r6, [r8, #44]	@ 0x2c
 800b812:	42b7      	cmp	r7, r6
 800b814:	d046      	beq.n	800b8a4 <follow_path+0x160>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b816:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b81a:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f040 80c1 	bne.w	800b9a6 <follow_path+0x262>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b824:	2301      	movs	r3, #1
 800b826:	463a      	mov	r2, r7
 800b828:	4649      	mov	r1, r9
 800b82a:	f7ff fa99 	bl	800ad60 <disk_read>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d036      	beq.n	800b8a0 <follow_path+0x15c>
				res = FR_DISK_ERR;
 800b832:	2201      	movs	r2, #1
			fs->winsect = sector;
 800b834:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b838:	4610      	mov	r0, r2
			fs->winsect = sector;
 800b83a:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
}
 800b83e:	b005      	add	sp, #20
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
 800b844:	061a      	lsls	r2, r3, #24
 800b846:	d502      	bpl.n	800b84e <follow_path+0x10a>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b848:	3b80      	subs	r3, #128	@ 0x80
 800b84a:	4a89      	ldr	r2, [pc, #548]	@ (800ba70 <follow_path+0x32c>)
 800b84c:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 800b84e:	2222      	movs	r2, #34	@ 0x22
 800b850:	4988      	ldr	r1, [pc, #544]	@ (800ba74 <follow_path+0x330>)
 800b852:	e002      	b.n	800b85a <follow_path+0x116>
 800b854:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b858:	b132      	cbz	r2, 800b868 <follow_path+0x124>
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d1fa      	bne.n	800b854 <follow_path+0x110>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b85e:	2206      	movs	r2, #6
}
 800b860:	4610      	mov	r0, r2
 800b862:	b005      	add	sp, #20
 800b864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b868:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b86c:	2a19      	cmp	r2, #25
 800b86e:	d801      	bhi.n	800b874 <follow_path+0x130>
 800b870:	3b20      	subs	r3, #32
 800b872:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800b874:	55f3      	strb	r3, [r6, r7]
 800b876:	3701      	adds	r7, #1
 800b878:	e7a6      	b.n	800b7c8 <follow_path+0x84>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b87a:	5c2a      	ldrb	r2, [r5, r0]
 800b87c:	1829      	adds	r1, r5, r0
 800b87e:	2a2f      	cmp	r2, #47	@ 0x2f
 800b880:	d002      	beq.n	800b888 <follow_path+0x144>
 800b882:	2a5c      	cmp	r2, #92	@ 0x5c
 800b884:	f040 80ec 	bne.w	800ba60 <follow_path+0x31c>
 800b888:	1c42      	adds	r2, r0, #1
 800b88a:	442a      	add	r2, r5
 800b88c:	4615      	mov	r5, r2
 800b88e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b892:	292f      	cmp	r1, #47	@ 0x2f
 800b894:	d0fa      	beq.n	800b88c <follow_path+0x148>
 800b896:	295c      	cmp	r1, #92	@ 0x5c
 800b898:	d0f8      	beq.n	800b88c <follow_path+0x148>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b89a:	2f00      	cmp	r7, #0
 800b89c:	d19a      	bne.n	800b7d4 <follow_path+0x90>
 800b89e:	e7de      	b.n	800b85e <follow_path+0x11a>
			fs->winsect = sector;
 800b8a0:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
		c = dp->dir[DIR_Name];
 800b8a4:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b8a6:	781a      	ldrb	r2, [r3, #0]
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	d075      	beq.n	800b998 <follow_path+0x254>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b8ac:	7ad9      	ldrb	r1, [r3, #11]
 800b8ae:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 800b8b2:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b8b4:	7ada      	ldrb	r2, [r3, #11]
 800b8b6:	f012 0208 	ands.w	r2, r2, #8
 800b8ba:	d01b      	beq.n	800b8f4 <follow_path+0x1b0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8bc:	6966      	ldr	r6, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8be:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 800b8c0:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8c2:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8c4:	2f00      	cmp	r7, #0
 800b8c6:	d067      	beq.n	800b998 <follow_path+0x254>
 800b8c8:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
 800b8cc:	d264      	bcs.n	800b998 <follow_path+0x254>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b8ce:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800b8d2:	b953      	cbnz	r3, 800b8ea <follow_path+0x1a6>
		dp->sect++;				/* Next sector */
 800b8d4:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 800b8d6:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800b8d8:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800b8da:	2900      	cmp	r1, #0
 800b8dc:	f040 8087 	bne.w	800b9ee <follow_path+0x2aa>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b8e0:	892a      	ldrh	r2, [r5, #8]
 800b8e2:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 800b8e6:	f240 809f 	bls.w	800ba28 <follow_path+0x2e4>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b8ea:	3530      	adds	r5, #48	@ 0x30
	dp->dptr = ofs;						/* Current entry */
 800b8ec:	6166      	str	r6, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b8ee:	441d      	add	r5, r3
 800b8f0:	6225      	str	r5, [r4, #32]
	} while (res == FR_OK);
 800b8f2:	e78c      	b.n	800b80e <follow_path+0xca>
	} while (--cnt && r == 0);
 800b8f4:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
 800b8f8:	7818      	ldrb	r0, [r3, #0]
 800b8fa:	4285      	cmp	r5, r0
 800b8fc:	d1de      	bne.n	800b8bc <follow_path+0x178>
 800b8fe:	785d      	ldrb	r5, [r3, #1]
 800b900:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800b904:	4285      	cmp	r5, r0
 800b906:	d1d9      	bne.n	800b8bc <follow_path+0x178>
 800b908:	f894 5026 	ldrb.w	r5, [r4, #38]	@ 0x26
 800b90c:	7898      	ldrb	r0, [r3, #2]
 800b90e:	4285      	cmp	r5, r0
 800b910:	d1d4      	bne.n	800b8bc <follow_path+0x178>
 800b912:	f894 5027 	ldrb.w	r5, [r4, #39]	@ 0x27
 800b916:	78d8      	ldrb	r0, [r3, #3]
 800b918:	4285      	cmp	r5, r0
 800b91a:	d1cf      	bne.n	800b8bc <follow_path+0x178>
 800b91c:	791d      	ldrb	r5, [r3, #4]
 800b91e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800b922:	4285      	cmp	r5, r0
 800b924:	d1ca      	bne.n	800b8bc <follow_path+0x178>
 800b926:	795d      	ldrb	r5, [r3, #5]
 800b928:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800b92c:	4285      	cmp	r5, r0
 800b92e:	d1c5      	bne.n	800b8bc <follow_path+0x178>
 800b930:	799d      	ldrb	r5, [r3, #6]
 800b932:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800b936:	4285      	cmp	r5, r0
 800b938:	d1c0      	bne.n	800b8bc <follow_path+0x178>
 800b93a:	79dd      	ldrb	r5, [r3, #7]
 800b93c:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
 800b940:	4285      	cmp	r5, r0
 800b942:	d1bb      	bne.n	800b8bc <follow_path+0x178>
 800b944:	7a1d      	ldrb	r5, [r3, #8]
 800b946:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800b94a:	4285      	cmp	r5, r0
 800b94c:	d1b6      	bne.n	800b8bc <follow_path+0x178>
 800b94e:	7a5d      	ldrb	r5, [r3, #9]
 800b950:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800b954:	4285      	cmp	r5, r0
 800b956:	d1b1      	bne.n	800b8bc <follow_path+0x178>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b958:	7a98      	ldrb	r0, [r3, #10]
 800b95a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800b95e:	4298      	cmp	r0, r3
 800b960:	d1ac      	bne.n	800b8bc <follow_path+0x178>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b962:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800b966:	465d      	mov	r5, fp
 800b968:	9e01      	ldr	r6, [sp, #4]
 800b96a:	0758      	lsls	r0, r3, #29
 800b96c:	f8dd b000 	ldr.w	fp, [sp]
 800b970:	f53f af76 	bmi.w	800b860 <follow_path+0x11c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b974:	06cb      	lsls	r3, r1, #27
 800b976:	d553      	bpl.n	800ba20 <follow_path+0x2dc>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b978:	6962      	ldr	r2, [r4, #20]
 800b97a:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
	if (fs->fs_type == FS_FAT32) {
 800b97e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b982:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800b986:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b988:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800b98a:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800b98c:	d102      	bne.n	800b994 <follow_path+0x250>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b98e:	8a9b      	ldrh	r3, [r3, #20]
 800b990:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b994:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b996:	e6f5      	b.n	800b784 <follow_path+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b998:	2204      	movs	r2, #4
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b99a:	2a04      	cmp	r2, #4
			ns = dp->fn[NSFLAG];
 800b99c:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b9a0:	f47f af5e 	bne.w	800b860 <follow_path+0x11c>
 800b9a4:	e03a      	b.n	800ba1c <follow_path+0x2d8>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7ff f9e6 	bl	800ad7c <disk_write>
 800b9b0:	bbc0      	cbnz	r0, 800ba24 <follow_path+0x2e0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b9b2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b9b6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b9ba:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800b9bc:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d211      	bcs.n	800b9e8 <follow_path+0x2a4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9c4:	f898 5002 	ldrb.w	r5, [r8, #2]
 800b9c8:	2d01      	cmp	r5, #1
 800b9ca:	d802      	bhi.n	800b9d2 <follow_path+0x28e>
 800b9cc:	e00c      	b.n	800b9e8 <follow_path+0x2a4>
					wsect += fs->fsize;
 800b9ce:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b9d2:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9d4:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	4649      	mov	r1, r9
 800b9da:	4632      	mov	r2, r6
 800b9dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b9e0:	f7ff f9cc 	bl	800ad7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9e4:	2d01      	cmp	r5, #1
 800b9e6:	d1f2      	bne.n	800b9ce <follow_path+0x28a>
 800b9e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b9ec:	e71a      	b.n	800b824 <follow_path+0xe0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b9ee:	896a      	ldrh	r2, [r5, #10]
 800b9f0:	3a01      	subs	r2, #1
 800b9f2:	ea12 2256 	ands.w	r2, r2, r6, lsr #9
 800b9f6:	f47f af78 	bne.w	800b8ea <follow_path+0x1a6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ba00:	f7ff fcf2 	bl	800b3e8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba04:	2801      	cmp	r0, #1
 800ba06:	d91e      	bls.n	800ba46 <follow_path+0x302>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba08:	1c47      	adds	r7, r0, #1
 800ba0a:	d00b      	beq.n	800ba24 <follow_path+0x2e0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba0c:	6969      	ldr	r1, [r5, #20]
 800ba0e:	9b02      	ldr	r3, [sp, #8]
 800ba10:	4288      	cmp	r0, r1
 800ba12:	d30d      	bcc.n	800ba30 <follow_path+0x2ec>
			ns = dp->fn[NSFLAG];
 800ba14:	9a03      	ldr	r2, [sp, #12]
 800ba16:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
						dp->sect = 0; return FR_NO_FILE;
 800ba1a:	61e2      	str	r2, [r4, #28]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba1c:	075a      	lsls	r2, r3, #29
 800ba1e:	d424      	bmi.n	800ba6a <follow_path+0x326>
 800ba20:	2205      	movs	r2, #5
 800ba22:	e71d      	b.n	800b860 <follow_path+0x11c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba24:	2201      	movs	r2, #1
 800ba26:	e7b8      	b.n	800b99a <follow_path+0x256>
			ns = dp->fn[NSFLAG];
 800ba28:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				dp->sect = 0; return FR_NO_FILE;
 800ba2c:	61e1      	str	r1, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba2e:	e7f5      	b.n	800ba1c <follow_path+0x2d8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba30:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba32:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800ba34:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba36:	4288      	cmp	r0, r1
 800ba38:	d210      	bcs.n	800ba5c <follow_path+0x318>
	return clst * fs->csize + fs->database;
 800ba3a:	896a      	ldrh	r2, [r5, #10]
 800ba3c:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800ba3e:	fb00 7702 	mla	r7, r0, r2, r7
				dp->sect = clust2sect(fs, clst);
 800ba42:	61e7      	str	r7, [r4, #28]
 800ba44:	e751      	b.n	800b8ea <follow_path+0x1a6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba46:	2202      	movs	r2, #2
 800ba48:	e7a7      	b.n	800b99a <follow_path+0x256>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba4a:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 800ba4c:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800ba4e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
}
 800ba52:	b005      	add	sp, #20
 800ba54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800ba58:	f7ff bdec 	b.w	800b634 <dir_sdi.constprop.0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ba5c:	461f      	mov	r7, r3
 800ba5e:	e7f0      	b.n	800ba42 <follow_path+0x2fe>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ba60:	460d      	mov	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ba62:	2f00      	cmp	r7, #0
 800ba64:	f47f aeb6 	bne.w	800b7d4 <follow_path+0x90>
 800ba68:	e6f9      	b.n	800b85e <follow_path+0x11a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba6a:	2204      	movs	r2, #4
	return res;
 800ba6c:	e6f8      	b.n	800b860 <follow_path+0x11c>
 800ba6e:	bf00      	nop
 800ba70:	0800d374 	.word	0x0800d374
 800ba74:	0800d364 	.word	0x0800d364

0800ba78 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba78:	2901      	cmp	r1, #1
{
 800ba7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7e:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800ba80:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba82:	d909      	bls.n	800ba98 <remove_chain+0x20>
 800ba84:	6973      	ldr	r3, [r6, #20]
 800ba86:	428b      	cmp	r3, r1
 800ba88:	d906      	bls.n	800ba98 <remove_chain+0x20>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	b932      	cbnz	r2, 800ba9e <remove_chain+0x26>
 800ba90:	46b1      	mov	r9, r6
			fs->wflag = 1;
 800ba92:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ba94:	429c      	cmp	r4, r3
 800ba96:	d312      	bcc.n	800babe <remove_chain+0x46>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba98:	2002      	movs	r0, #2
}
 800ba9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d9fa      	bls.n	800ba98 <remove_chain+0x20>
 800baa2:	2a01      	cmp	r2, #1
 800baa4:	d0f8      	beq.n	800ba98 <remove_chain+0x20>
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	4630      	mov	r0, r6
 800baac:	f7ff fc1c 	bl	800b2e8 <put_fat.part.0>
		if (res != FR_OK) return res;
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d1f2      	bne.n	800ba9a <remove_chain+0x22>
 800bab4:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bab8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800babc:	e7e9      	b.n	800ba92 <remove_chain+0x1a>
		switch (fs->fs_type) {
 800babe:	f899 3000 	ldrb.w	r3, [r9]
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	f000 8098 	beq.w	800bbf8 <remove_chain+0x180>
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d010      	beq.n	800baee <remove_chain+0x76>
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d1e3      	bne.n	800ba98 <remove_chain+0x20>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bad0:	f8d9 1020 	ldr.w	r1, [r9, #32]
			bc = (UINT)clst; bc += bc / 2;
 800bad4:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bad8:	4648      	mov	r0, r9
 800bada:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800bade:	f7ff fa5b 	bl	800af98 <move_window>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f000 80b3 	beq.w	800bc4e <remove_chain+0x1d6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bae8:	2001      	movs	r0, #1
}
 800baea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800baee:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800baf2:	4648      	mov	r0, r9
 800baf4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800baf8:	f7ff fa4e 	bl	800af98 <move_window>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d1f3      	bne.n	800bae8 <remove_chain+0x70>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bb00:	00a3      	lsls	r3, r4, #2
 800bb02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800bb06:	444b      	add	r3, r9
 800bb08:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800bb0c:	f038 4870 	bics.w	r8, r8, #4026531840	@ 0xf0000000
 800bb10:	f000 80bb 	beq.w	800bc8a <remove_chain+0x212>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bb14:	f1b8 0f01 	cmp.w	r8, #1
 800bb18:	d0be      	beq.n	800ba98 <remove_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bb1a:	6973      	ldr	r3, [r6, #20]
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	d2bb      	bcs.n	800ba98 <remove_chain+0x20>
		switch (fs->fs_type) {
 800bb20:	f896 9000 	ldrb.w	r9, [r6]
 800bb24:	f1b9 0f02 	cmp.w	r9, #2
 800bb28:	d02e      	beq.n	800bb88 <remove_chain+0x110>
 800bb2a:	f1b9 0f03 	cmp.w	r9, #3
 800bb2e:	d04c      	beq.n	800bbca <remove_chain+0x152>
 800bb30:	f1b9 0f01 	cmp.w	r9, #1
 800bb34:	d1b0      	bne.n	800ba98 <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb36:	6a31      	ldr	r1, [r6, #32]
			bc = (UINT)clst; bc += bc / 2;
 800bb38:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800bb42:	f7ff fa29 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d1a7      	bne.n	800ba9a <remove_chain+0x22>
			p = fs->win + bc++ % SS(fs);
 800bb4a:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb4e:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 800bb50:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800bb54:	f106 0a30 	add.w	sl, r6, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb58:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb5c:	d561      	bpl.n	800bc22 <remove_chain+0x1aa>
 800bb5e:	f81a 1003 	ldrb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb62:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb64:	f001 010f 	and.w	r1, r1, #15
 800bb68:	f80a 1003 	strb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb6c:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800bb6e:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb72:	4411      	add	r1, r2
 800bb74:	f7ff fa10 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d18e      	bne.n	800ba9a <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800bb7c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800bb80:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bb84:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800bb86:	e00c      	b.n	800bba2 <remove_chain+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bb88:	6a31      	ldr	r1, [r6, #32]
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800bb90:	f7ff fa02 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d180      	bne.n	800ba9a <remove_chain+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bb98:	0064      	lsls	r4, r4, #1
 800bb9a:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800bb9e:	4434      	add	r4, r6
 800bba0:	8620      	strh	r0, [r4, #48]	@ 0x30
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bba2:	6972      	ldr	r2, [r6, #20]
 800bba4:	6933      	ldr	r3, [r6, #16]
 800bba6:	1e91      	subs	r1, r2, #2
			fs->wflag = 1;
 800bba8:	70f7      	strb	r7, [r6, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbaa:	428b      	cmp	r3, r1
 800bbac:	d205      	bcs.n	800bbba <remove_chain+0x142>
			fs->free_clst++;
 800bbae:	3301      	adds	r3, #1
 800bbb0:	6133      	str	r3, [r6, #16]
			fs->fsi_flag |= 1;
 800bbb2:	7933      	ldrb	r3, [r6, #4]
 800bbb4:	f043 0301 	orr.w	r3, r3, #1
 800bbb8:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bbba:	4542      	cmp	r2, r8
 800bbbc:	d965      	bls.n	800bc8a <remove_chain+0x212>
 800bbbe:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bbc2:	4644      	mov	r4, r8
 800bbc4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bbc8:	e764      	b.n	800ba94 <remove_chain+0x1c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bbca:	6a31      	ldr	r1, [r6, #32]
 800bbcc:	4630      	mov	r0, r6
 800bbce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800bbd2:	f7ff f9e1 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f47f af5f 	bne.w	800ba9a <remove_chain+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bbdc:	00a4      	lsls	r4, r4, #2
 800bbde:	f106 0230 	add.w	r2, r6, #48	@ 0x30
 800bbe2:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800bbe6:	5911      	ldr	r1, [r2, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbe8:	5310      	strh	r0, [r2, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bbea:	4422      	add	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800bbec:	0e0b      	lsrs	r3, r1, #24
 800bbee:	7090      	strb	r0, [r2, #2]
 800bbf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 800bbf4:	70d3      	strb	r3, [r2, #3]
			if (res != FR_OK) return res;
 800bbf6:	e7d4      	b.n	800bba2 <remove_chain+0x12a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbf8:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800bbfc:	4648      	mov	r0, r9
 800bbfe:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800bc02:	f7ff f9c9 	bl	800af98 <move_window>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f47f af6e 	bne.w	800bae8 <remove_chain+0x70>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bc0c:	0063      	lsls	r3, r4, #1
 800bc0e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bc12:	444b      	add	r3, r9
 800bc14:	f8b3 8030 	ldrh.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800bc18:	f1b8 0f00 	cmp.w	r8, #0
 800bc1c:	f47f af7a 	bne.w	800bb14 <remove_chain+0x9c>
 800bc20:	e033      	b.n	800bc8a <remove_chain+0x212>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc22:	f80a 0003 	strb.w	r0, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc26:	4630      	mov	r0, r6
 800bc28:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800bc2a:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc2e:	4411      	add	r1, r2
 800bc30:	f7ff f9b2 	bl	800af98 <move_window>
			if (res != FR_OK) break;
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f47f af30 	bne.w	800ba9a <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800bc3a:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800bc3e:	f81a 000b 	ldrb.w	r0, [sl, fp]
 800bc42:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bc46:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 800bc4a:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800bc4c:	e7a9      	b.n	800bba2 <remove_chain+0x12a>
			wc = fs->win[bc++ % SS(fs)];
 800bc4e:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc52:	f8d9 1020 	ldr.w	r1, [r9, #32]
			wc = fs->win[bc++ % SS(fs)];
 800bc56:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc5a:	4648      	mov	r0, r9
			wc = fs->win[bc++ % SS(fs)];
 800bc5c:	444b      	add	r3, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc5e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800bc62:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc66:	f7ff f997 	bl	800af98 <move_window>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	f47f af3c 	bne.w	800bae8 <remove_chain+0x70>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc70:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc74:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc76:	44c8      	add	r8, r9
 800bc78:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800bc7c:	ea4a 2803 	orr.w	r8, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc80:	d505      	bpl.n	800bc8e <remove_chain+0x216>
		if (nxt == 0) break;				/* Empty cluster? */
 800bc82:	ea5f 1818 	movs.w	r8, r8, lsr #4
 800bc86:	f47f af45 	bne.w	800bb14 <remove_chain+0x9c>
	return FR_OK;
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	e705      	b.n	800ba9a <remove_chain+0x22>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc8e:	f3c8 080b 	ubfx	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800bc92:	f1b8 0f00 	cmp.w	r8, #0
 800bc96:	f47f af3d 	bne.w	800bb14 <remove_chain+0x9c>
 800bc9a:	e7f6      	b.n	800bc8a <remove_chain+0x212>

0800bc9c <dir_register>:
{
 800bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	b085      	sub	sp, #20
 800bca2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800bca4:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800bca6:	f7ff fcc5 	bl	800b634 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	f040 80b2 	bne.w	800be14 <dir_register+0x178>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bcb0:	f8d6 b02c 	ldr.w	fp, [r6, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bcb4:	f106 0330 	add.w	r3, r6, #48	@ 0x30
			res = move_window(fs, dp->sect);
 800bcb8:	f8d4 a01c 	ldr.w	sl, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	465b      	mov	r3, fp
 800bcc0:	46d3      	mov	fp, sl
 800bcc2:	469a      	mov	sl, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bcc4:	45d3      	cmp	fp, sl
 800bcc6:	d014      	beq.n	800bcf2 <dir_register+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bcc8:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bcca:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d15c      	bne.n	800bd8a <dir_register+0xee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	465a      	mov	r2, fp
 800bcd4:	9900      	ldr	r1, [sp, #0]
 800bcd6:	f7ff f843 	bl	800ad60 <disk_read>
 800bcda:	b138      	cbz	r0, 800bcec <dir_register+0x50>
			fs->winsect = sector;
 800bcdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bce0:	62f3      	str	r3, [r6, #44]	@ 0x2c
				res = FR_DISK_ERR;
 800bce2:	2501      	movs	r5, #1
}
 800bce4:	4628      	mov	r0, r5
 800bce6:	b005      	add	sp, #20
 800bce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800bcec:	46da      	mov	sl, fp
 800bcee:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bcf2:	6a23      	ldr	r3, [r4, #32]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2be5      	cmp	r3, #229	@ 0xe5
 800bcf8:	d000      	beq.n	800bcfc <dir_register+0x60>
 800bcfa:	bb2b      	cbnz	r3, 800bd48 <dir_register+0xac>
		res = move_window(fs, dp->sect);
 800bcfc:	69e1      	ldr	r1, [r4, #28]
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff f94a 	bl	800af98 <move_window>
		if (res == FR_OK) {
 800bd04:	4605      	mov	r5, r0
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d1ec      	bne.n	800bce4 <dir_register+0x48>
		*d++ = (BYTE)val;
 800bd0a:	2220      	movs	r2, #32
 800bd0c:	4601      	mov	r1, r0
 800bd0e:	6a20      	ldr	r0, [r4, #32]
 800bd10:	f000 fd30 	bl	800c774 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd14:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd16:	f104 0225 	add.w	r2, r4, #37	@ 0x25
 800bd1a:	1a9a      	subs	r2, r3, r2
 800bd1c:	2a02      	cmp	r2, #2
 800bd1e:	f240 80db 	bls.w	800bed8 <dir_register+0x23c>
			*d++ = *s++;
 800bd22:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bd28:	605a      	str	r2, [r3, #4]
 800bd2a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
}
 800bd2e:	4628      	mov	r0, r5
			*d++ = *s++;
 800bd30:	721a      	strb	r2, [r3, #8]
 800bd32:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800bd36:	725a      	strb	r2, [r3, #9]
			fs->wflag = 1;
 800bd38:	2201      	movs	r2, #1
			*d++ = *s++;
 800bd3a:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 800bd3e:	7299      	strb	r1, [r3, #10]
			fs->wflag = 1;
 800bd40:	70f2      	strb	r2, [r6, #3]
}
 800bd42:	b005      	add	sp, #20
 800bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bd48:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800bd4a:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bd4c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bd4e:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800bd52:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800bd56:	d265      	bcs.n	800be24 <dir_register+0x188>
 800bd58:	f1bb 0f00 	cmp.w	fp, #0
 800bd5c:	d062      	beq.n	800be24 <dir_register+0x188>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bd5e:	f3c5 0908 	ubfx	r9, r5, #0, #9
 800bd62:	f1b9 0f00 	cmp.w	r9, #0
 800bd66:	d109      	bne.n	800bd7c <dir_register+0xe0>
		dp->sect++;				/* Next sector */
 800bd68:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 800bd6c:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800bd6e:	f8c4 b01c 	str.w	fp, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800bd72:	bb51      	cbnz	r1, 800bdca <dir_register+0x12e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bd74:	893b      	ldrh	r3, [r7, #8]
 800bd76:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800bd7a:	d952      	bls.n	800be22 <dir_register+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd7c:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bd80:	eb08 0309 	add.w	r3, r8, r9
	dp->dptr = ofs;						/* Current entry */
 800bd84:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bd86:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bd88:	e79c      	b.n	800bcc4 <dir_register+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	4652      	mov	r2, sl
 800bd8e:	9900      	ldr	r1, [sp, #0]
 800bd90:	f7fe fff4 	bl	800ad7c <disk_write>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d1a4      	bne.n	800bce2 <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd98:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800bd9a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd9c:	ebaa 0103 	sub.w	r1, sl, r3
 800bda0:	69b3      	ldr	r3, [r6, #24]
 800bda2:	4299      	cmp	r1, r3
 800bda4:	d20f      	bcs.n	800bdc6 <dir_register+0x12a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bda6:	78b5      	ldrb	r5, [r6, #2]
 800bda8:	2d01      	cmp	r5, #1
 800bdaa:	d90c      	bls.n	800bdc6 <dir_register+0x12a>
 800bdac:	9f00      	ldr	r7, [sp, #0]
 800bdae:	e000      	b.n	800bdb2 <dir_register+0x116>
					wsect += fs->fsize;
 800bdb0:	69b3      	ldr	r3, [r6, #24]
 800bdb2:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdb4:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	4639      	mov	r1, r7
 800bdba:	4652      	mov	r2, sl
 800bdbc:	7870      	ldrb	r0, [r6, #1]
 800bdbe:	f7fe ffdd 	bl	800ad7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdc2:	2d01      	cmp	r5, #1
 800bdc4:	d1f4      	bne.n	800bdb0 <dir_register+0x114>
 800bdc6:	7870      	ldrb	r0, [r6, #1]
 800bdc8:	e782      	b.n	800bcd0 <dir_register+0x34>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bdca:	897b      	ldrh	r3, [r7, #10]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800bdd2:	d1d3      	bne.n	800bd7c <dir_register+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f7ff fb07 	bl	800b3e8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bdda:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bddc:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bdde:	d979      	bls.n	800bed4 <dir_register+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bde0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bde4:	f43f af7d 	beq.w	800bce2 <dir_register+0x46>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	4298      	cmp	r0, r3
 800bdec:	d21c      	bcs.n	800be28 <dir_register+0x18c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdee:	3b02      	subs	r3, #2
	clst -= 2;
 800bdf0:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdf4:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdf8:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 800bdfa:	f8c4 a018 	str.w	sl, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bdfe:	f240 8084 	bls.w	800bf0a <dir_register+0x26e>
	return clst * fs->csize + fs->database;
 800be02:	897a      	ldrh	r2, [r7, #10]
 800be04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be06:	fb0b 3b02 	mla	fp, fp, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800be0a:	f8d6 a02c 	ldr.w	sl, [r6, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 800be0e:	f8c4 b01c 	str.w	fp, [r4, #28]
 800be12:	e7b5      	b.n	800bd80 <dir_register+0xe4>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800be14:	2804      	cmp	r0, #4
 800be16:	4605      	mov	r5, r0
 800be18:	d004      	beq.n	800be24 <dir_register+0x188>
}
 800be1a:	4628      	mov	r0, r5
 800be1c:	b005      	add	sp, #20
 800be1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 800be22:	61e1      	str	r1, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be24:	2507      	movs	r5, #7
	return res;
 800be26:	e75d      	b.n	800bce4 <dir_register+0x48>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be28:	69a1      	ldr	r1, [r4, #24]
 800be2a:	4620      	mov	r0, r4
 800be2c:	f7ff fb32 	bl	800b494 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800be30:	4682      	mov	sl, r0
 800be32:	2800      	cmp	r0, #0
 800be34:	d0f6      	beq.n	800be24 <dir_register+0x188>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800be36:	2801      	cmp	r0, #1
 800be38:	d04c      	beq.n	800bed4 <dir_register+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be3a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be3e:	f43f af50 	beq.w	800bce2 <dir_register+0x46>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800be42:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be44:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d16a      	bne.n	800bf22 <dir_register+0x286>
		*d++ = (BYTE)val;
 800be4c:	2100      	movs	r1, #0
 800be4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be52:	4640      	mov	r0, r8
	clst -= 2;
 800be54:	f1aa 0b02 	sub.w	fp, sl, #2
		*d++ = (BYTE)val;
 800be58:	f000 fc8c 	bl	800c774 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be5c:	697b      	ldr	r3, [r7, #20]
	return clst * fs->csize + fs->database;
 800be5e:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be60:	3b02      	subs	r3, #2
 800be62:	459b      	cmp	fp, r3
 800be64:	f080 8086 	bcs.w	800bf74 <dir_register+0x2d8>
	return clst * fs->csize + fs->database;
 800be68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be6a:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800be6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be70:	2900      	cmp	r1, #0
 800be72:	d054      	beq.n	800bf1e <dir_register+0x282>
 800be74:	2100      	movs	r1, #0
 800be76:	9403      	str	r4, [sp, #12]
 800be78:	4614      	mov	r4, r2
 800be7a:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800be7e:	460e      	mov	r6, r1
						fs->wflag = 1;
 800be80:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be84:	4622      	mov	r2, r4
 800be86:	4641      	mov	r1, r8
 800be88:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800be8a:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be8c:	2301      	movs	r3, #1
 800be8e:	f7fe ff75 	bl	800ad7c <disk_write>
 800be92:	2800      	cmp	r0, #0
 800be94:	f47f af25 	bne.w	800bce2 <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be98:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 800be9a:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be9c:	1ae1      	subs	r1, r4, r3
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	4299      	cmp	r1, r3
 800bea2:	d20e      	bcs.n	800bec2 <dir_register+0x226>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bea4:	78bd      	ldrb	r5, [r7, #2]
 800bea6:	2d01      	cmp	r5, #1
 800bea8:	d801      	bhi.n	800beae <dir_register+0x212>
 800beaa:	e00a      	b.n	800bec2 <dir_register+0x226>
					wsect += fs->fsize;
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800beb0:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800beb2:	2301      	movs	r3, #1
 800beb4:	4641      	mov	r1, r8
 800beb6:	4622      	mov	r2, r4
 800beb8:	7878      	ldrb	r0, [r7, #1]
 800beba:	f7fe ff5f 	bl	800ad7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bebe:	2d01      	cmp	r5, #1
 800bec0:	d1f4      	bne.n	800beac <dir_register+0x210>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bec2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bec4:	1c73      	adds	r3, r6, #1
 800bec6:	8979      	ldrh	r1, [r7, #10]
 800bec8:	1c44      	adds	r4, r0, #1
 800beca:	428b      	cmp	r3, r1
 800becc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800bece:	d21f      	bcs.n	800bf10 <dir_register+0x274>
 800bed0:	461e      	mov	r6, r3
 800bed2:	e7d5      	b.n	800be80 <dir_register+0x1e4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bed4:	2502      	movs	r5, #2
 800bed6:	e705      	b.n	800bce4 <dir_register+0x48>
			*d++ = *s++;
 800bed8:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 800bee2:	705a      	strb	r2, [r3, #1]
 800bee4:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800bee8:	709a      	strb	r2, [r3, #2]
 800beea:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 800beee:	70da      	strb	r2, [r3, #3]
 800bef0:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800bef4:	711a      	strb	r2, [r3, #4]
 800bef6:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800befa:	715a      	strb	r2, [r3, #5]
 800befc:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800bf00:	719a      	strb	r2, [r3, #6]
 800bf02:	f894 202b 	ldrb.w	r2, [r4, #43]	@ 0x2b
 800bf06:	71da      	strb	r2, [r3, #7]
 800bf08:	e70f      	b.n	800bd2a <dir_register+0x8e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf0a:	f04f 0b00 	mov.w	fp, #0
 800bf0e:	e77c      	b.n	800be0a <dir_register+0x16e>
					fs->winsect -= n;							/* Restore window offset */
 800bf10:	4631      	mov	r1, r6
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf12:	697b      	ldr	r3, [r7, #20]
					fs->winsect -= n;							/* Restore window offset */
 800bf14:	9d02      	ldr	r5, [sp, #8]
 800bf16:	9e01      	ldr	r6, [sp, #4]
 800bf18:	1a42      	subs	r2, r0, r1
 800bf1a:	9c03      	ldr	r4, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf1c:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800bf1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf20:	e76a      	b.n	800bdf8 <dir_register+0x15c>
		wsect = fs->winsect;	/* Current sector number */
 800bf22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf24:	2301      	movs	r3, #1
 800bf26:	4641      	mov	r1, r8
 800bf28:	7878      	ldrb	r0, [r7, #1]
 800bf2a:	9201      	str	r2, [sp, #4]
 800bf2c:	f7fe ff26 	bl	800ad7c <disk_write>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	f47f aed6 	bne.w	800bce2 <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	9a01      	ldr	r2, [sp, #4]
			fs->wflag = 0;
 800bf3a:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf3c:	1ad1      	subs	r1, r2, r3
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	4299      	cmp	r1, r3
 800bf42:	d283      	bcs.n	800be4c <dir_register+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf44:	f897 b002 	ldrb.w	fp, [r7, #2]
 800bf48:	f1bb 0f01 	cmp.w	fp, #1
 800bf4c:	f67f af7e 	bls.w	800be4c <dir_register+0x1b0>
 800bf50:	9401      	str	r4, [sp, #4]
 800bf52:	4614      	mov	r4, r2
 800bf54:	e000      	b.n	800bf58 <dir_register+0x2bc>
					wsect += fs->fsize;
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf5a:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf5e:	2301      	movs	r3, #1
 800bf60:	4641      	mov	r1, r8
 800bf62:	4622      	mov	r2, r4
 800bf64:	7878      	ldrb	r0, [r7, #1]
 800bf66:	f7fe ff09 	bl	800ad7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf6a:	f1bb 0f01 	cmp.w	fp, #1
 800bf6e:	d1f2      	bne.n	800bf56 <dir_register+0x2ba>
 800bf70:	9c01      	ldr	r4, [sp, #4]
 800bf72:	e76b      	b.n	800be4c <dir_register+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf74:	2200      	movs	r2, #0
 800bf76:	e77a      	b.n	800be6e <dir_register+0x1d2>

0800bf78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800bf80:	b1a1      	cbz	r1, 800bfac <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf82:	f891 c000 	ldrb.w	ip, [r1]
 800bf86:	f1bc 0f20 	cmp.w	ip, #32
 800bf8a:	d912      	bls.n	800bfb2 <f_mount+0x3a>
 800bf8c:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 800bf90:	d00f      	beq.n	800bfb2 <f_mount+0x3a>
 800bf92:	4608      	mov	r0, r1
 800bf94:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d90c      	bls.n	800bfb6 <f_mount+0x3e>
 800bf9c:	2b3a      	cmp	r3, #58	@ 0x3a
 800bf9e:	d1f9      	bne.n	800bf94 <f_mount+0x1c>
			i = *tp++ - '0';
 800bfa0:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfa2:	4288      	cmp	r0, r1
 800bfa4:	d102      	bne.n	800bfac <f_mount+0x34>
 800bfa6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bfaa:	d006      	beq.n	800bfba <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800bfac:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800bfae:	b002      	add	sp, #8
 800bfb0:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bfb2:	4663      	mov	r3, ip
 800bfb4:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfb6:	2b3a      	cmp	r3, #58	@ 0x3a
 800bfb8:	d0f2      	beq.n	800bfa0 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bfba:	4913      	ldr	r1, [pc, #76]	@ (800c008 <f_mount+0x90>)
 800bfbc:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800bfbe:	b143      	cbz	r3, 800bfd2 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfc0:	4812      	ldr	r0, [pc, #72]	@ (800c00c <f_mount+0x94>)
 800bfc2:	6804      	ldr	r4, [r0, #0]
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	d019      	beq.n	800bffc <f_mount+0x84>
 800bfc8:	6904      	ldr	r4, [r0, #16]
 800bfca:	429c      	cmp	r4, r3
 800bfcc:	d013      	beq.n	800bff6 <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800bfce:	2000      	movs	r0, #0
 800bfd0:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800bfd2:	9b01      	ldr	r3, [sp, #4]
 800bfd4:	b15b      	cbz	r3, 800bfee <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800bfd6:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bfd8:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800bfda:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800bfdc:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bfde:	d107      	bne.n	800bff0 <f_mount+0x78>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	a901      	add	r1, sp, #4
 800bfe4:	4668      	mov	r0, sp
 800bfe6:	f7ff f815 	bl	800b014 <find_volume>
}
 800bfea:	b002      	add	sp, #8
 800bfec:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800bfee:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bff0:	2000      	movs	r0, #0
}
 800bff2:	b002      	add	sp, #8
 800bff4:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bff6:	2400      	movs	r4, #0
 800bff8:	6104      	str	r4, [r0, #16]
 800bffa:	e7e8      	b.n	800bfce <f_mount+0x56>
 800bffc:	2400      	movs	r4, #0
 800bffe:	6004      	str	r4, [r0, #0]
 800c000:	6904      	ldr	r4, [r0, #16]
 800c002:	429c      	cmp	r4, r3
 800c004:	d1e3      	bne.n	800bfce <f_mount+0x56>
 800c006:	e7f6      	b.n	800bff6 <f_mount+0x7e>
 800c008:	24075a04 	.word	0x24075a04
 800c00c:	240759e0 	.word	0x240759e0

0800c010 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c014:	b090      	sub	sp, #64	@ 0x40
 800c016:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c018:	2800      	cmp	r0, #0
 800c01a:	d036      	beq.n	800c08a <f_open+0x7a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c01c:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800c020:	4616      	mov	r6, r2
 800c022:	4604      	mov	r4, r0
 800c024:	a903      	add	r1, sp, #12
 800c026:	a801      	add	r0, sp, #4
 800c028:	463a      	mov	r2, r7
 800c02a:	f7fe fff3 	bl	800b014 <find_volume>
	if (res == FR_OK) {
 800c02e:	4605      	mov	r5, r0
 800c030:	b128      	cbz	r0, 800c03e <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c032:	2300      	movs	r3, #0
 800c034:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800c036:	4628      	mov	r0, r5
 800c038:	b010      	add	sp, #64	@ 0x40
 800c03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800c03e:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c042:	a804      	add	r0, sp, #16
 800c044:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800c046:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c04a:	f7ff fb7b 	bl	800b744 <follow_path>
		if (res == FR_OK) {
 800c04e:	b9a8      	cbnz	r0, 800c07c <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c050:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 800c054:	2b00      	cmp	r3, #0
 800c056:	db1d      	blt.n	800c094 <f_open+0x84>
		if (Files[i].fs) {	/* Existing entry */
 800c058:	4ba8      	ldr	r3, [pc, #672]	@ (800c2fc <f_open+0x2ec>)
 800c05a:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c05e:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800c060:	6818      	ldr	r0, [r3, #0]
 800c062:	2800      	cmp	r0, #0
 800c064:	f000 8109 	beq.w	800c27a <f_open+0x26a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c068:	4290      	cmp	r0, r2
 800c06a:	d060      	beq.n	800c12e <f_open+0x11e>
		if (Files[i].fs) {	/* Existing entry */
 800c06c:	6919      	ldr	r1, [r3, #16]
 800c06e:	2900      	cmp	r1, #0
 800c070:	d06d      	beq.n	800c14e <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c072:	4291      	cmp	r1, r2
 800c074:	f000 8116 	beq.w	800c2a4 <f_open+0x294>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c078:	2512      	movs	r5, #18
 800c07a:	e7da      	b.n	800c032 <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c07c:	f016 0f1c 	tst.w	r6, #28
 800c080:	d001      	beq.n	800c086 <f_open+0x76>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c082:	2804      	cmp	r0, #4
 800c084:	d008      	beq.n	800c098 <f_open+0x88>
 800c086:	4605      	mov	r5, r0
 800c088:	e7d3      	b.n	800c032 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800c08a:	2509      	movs	r5, #9
}
 800c08c:	4628      	mov	r0, r5
 800c08e:	b010      	add	sp, #64	@ 0x40
 800c090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800c094:	2506      	movs	r5, #6
 800c096:	e7cc      	b.n	800c032 <f_open+0x22>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c098:	4b98      	ldr	r3, [pc, #608]	@ (800c2fc <f_open+0x2ec>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	2a00      	cmp	r2, #0
 800c09e:	f000 80f9 	beq.w	800c294 <f_open+0x284>
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1e7      	bne.n	800c078 <f_open+0x68>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c0a8:	a804      	add	r0, sp, #16
 800c0aa:	f7ff fdf7 	bl	800bc9c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	f040 811c 	bne.w	800c2ee <f_open+0x2de>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c0b6:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 800c0ba:	f7fe fd47 	bl	800ab4c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c0be:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c0c2:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800c0c4:	f8c9 000e 	str.w	r0, [r9, #14]
 800c0c8:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c0cc:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 800c0d0:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800c0d4:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d103      	bne.n	800c0e4 <f_open+0xd4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c0dc:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800c0e0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c0ea:	f898 2000 	ldrb.w	r2, [r8]
 800c0ee:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800c0f0:	f04f 0200 	mov.w	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800c0f4:	bf08      	it	eq
 800c0f6:	f8a9 3014 	strheq.w	r3, [r9, #20]
					fs->wflag = 1;
 800c0fa:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800c0fc:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 800c100:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800c104:	2e00      	cmp	r6, #0
 800c106:	f040 80de 	bne.w	800c2c6 <f_open+0x2b6>
				mode |= FA_MODIFIED;
 800c10a:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c10e:	2f01      	cmp	r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c110:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c114:	a804      	add	r0, sp, #16
 800c116:	bf94      	ite	ls
 800c118:	2100      	movls	r1, #0
 800c11a:	2101      	movhi	r1, #1
			fp->dir_ptr = dj.dir;
 800c11c:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c120:	f7fe fe46 	bl	800adb0 <inc_lock>
 800c124:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c126:	2800      	cmp	r0, #0
 800c128:	d143      	bne.n	800c1b2 <f_open+0x1a2>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c12a:	2502      	movs	r5, #2
 800c12c:	e781      	b.n	800c032 <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c134:	4572      	cmp	r2, lr
 800c136:	f000 80b9 	beq.w	800c2ac <f_open+0x29c>
		if (Files[i].fs) {	/* Existing entry */
 800c13a:	691a      	ldr	r2, [r3, #16]
 800c13c:	b13a      	cbz	r2, 800c14e <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c13e:	4282      	cmp	r2, r0
 800c140:	d19a      	bne.n	800c078 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c142:	4628      	mov	r0, r5
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c144:	695a      	ldr	r2, [r3, #20]
 800c146:	4572      	cmp	r2, lr
 800c148:	d00d      	beq.n	800c166 <f_open+0x156>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d094      	beq.n	800c078 <f_open+0x68>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c14e:	f016 0f1c 	tst.w	r6, #28
 800c152:	d018      	beq.n	800c186 <f_open+0x176>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c154:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c158:	f013 0f11 	tst.w	r3, #17
 800c15c:	d120      	bne.n	800c1a0 <f_open+0x190>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c15e:	0773      	lsls	r3, r6, #29
 800c160:	d520      	bpl.n	800c1a4 <f_open+0x194>
 800c162:	2508      	movs	r5, #8
 800c164:	e765      	b.n	800c032 <f_open+0x22>
				Files[i].clu == dp->obj.sclust &&
 800c166:	6999      	ldr	r1, [r3, #24]
 800c168:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c16a:	4291      	cmp	r1, r2
 800c16c:	d1ed      	bne.n	800c14a <f_open+0x13a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c16e:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c170:	f1bc 0f00 	cmp.w	ip, #0
 800c174:	d105      	bne.n	800c182 <f_open+0x172>
 800c176:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800c17a:	899b      	ldrh	r3, [r3, #12]
 800c17c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c180:	d1e5      	bne.n	800c14e <f_open+0x13e>
 800c182:	2510      	movs	r5, #16
 800c184:	e755      	b.n	800c032 <f_open+0x22>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c186:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c18a:	06d8      	lsls	r0, r3, #27
 800c18c:	d40f      	bmi.n	800c1ae <f_open+0x19e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c18e:	07b2      	lsls	r2, r6, #30
 800c190:	d501      	bpl.n	800c196 <f_open+0x186>
 800c192:	07db      	lsls	r3, r3, #31
 800c194:	d404      	bmi.n	800c1a0 <f_open+0x190>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c196:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 800c198:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c19c:	d5b7      	bpl.n	800c10e <f_open+0xfe>
 800c19e:	e7b4      	b.n	800c10a <f_open+0xfa>
					res = FR_DENIED;
 800c1a0:	2507      	movs	r5, #7
 800c1a2:	e746      	b.n	800c032 <f_open+0x22>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c1a4:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800c1a6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c1aa:	d5b0      	bpl.n	800c10e <f_open+0xfe>
 800c1ac:	e785      	b.n	800c0ba <f_open+0xaa>
					res = FR_NO_FILE;
 800c1ae:	2504      	movs	r5, #4
 800c1b0:	e73f      	b.n	800c032 <f_open+0x22>
	if (fs->fs_type == FS_FAT32) {
 800c1b2:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800c1b6:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d103      	bne.n	800c1c6 <f_open+0x1b6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c1be:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800c1c2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c1c6:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 800c1c8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c1cc:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c1ce:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
	rv = rv << 8 | ptr[0];
 800c1d2:	f8d9 901c 	ldr.w	r9, [r9, #28]
		*d++ = (BYTE)val;
 800c1d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c1da:	62e1      	str	r1, [r4, #44]	@ 0x2c
		*d++ = (BYTE)val;
 800c1dc:	4650      	mov	r0, sl
			fp->err = 0;			/* Clear error flag */
 800c1de:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c1e0:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c1e2:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c1e4:	f8c4 8000 	str.w	r8, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c1e8:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->obj.id = fs->id;
 800c1ec:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800c1ee:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 800c1f0:	f000 fac0 	bl	800c774 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c1f4:	06b9      	lsls	r1, r7, #26
 800c1f6:	f57f af1e 	bpl.w	800c036 <f_open+0x26>
 800c1fa:	f1b9 0f00 	cmp.w	r9, #0
 800c1fe:	f43f af1a 	beq.w	800c036 <f_open+0x26>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c202:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c206:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c20a:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c20e:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c212:	d96e      	bls.n	800c2f2 <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800c214:	4631      	mov	r1, r6
 800c216:	6820      	ldr	r0, [r4, #0]
 800c218:	f7ff f8e6 	bl	800b3e8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800c21c:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c21e:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800c222:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800c224:	d934      	bls.n	800c290 <f_open+0x280>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c226:	1c42      	adds	r2, r0, #1
 800c228:	d001      	beq.n	800c22e <f_open+0x21e>
 800c22a:	454f      	cmp	r7, r9
 800c22c:	d3f2      	bcc.n	800c214 <f_open+0x204>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c22e:	1c73      	adds	r3, r6, #1
				fp->clust = clst;
 800c230:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c232:	d020      	beq.n	800c276 <f_open+0x266>
 800c234:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f43f aefc 	beq.w	800c036 <f_open+0x26>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c23e:	f8d8 3014 	ldr.w	r3, [r8, #20]
	clst -= 2;
 800c242:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c244:	3b02      	subs	r3, #2
 800c246:	429e      	cmp	r6, r3
 800c248:	f4bf af6f 	bcs.w	800c12a <f_open+0x11a>
	return clst * fs->csize + fs->database;
 800c24c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c250:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800c254:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c258:	2a00      	cmp	r2, #0
 800c25a:	f43f af66 	beq.w	800c12a <f_open+0x11a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c25e:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c262:	4651      	mov	r1, sl
 800c264:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c266:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c268:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c26c:	f7fe fd78 	bl	800ad60 <disk_read>
 800c270:	2800      	cmp	r0, #0
 800c272:	f43f aee0 	beq.w	800c036 <f_open+0x26>
 800c276:	2501      	movs	r5, #1
 800c278:	e6db      	b.n	800c032 <f_open+0x22>
		if (Files[i].fs) {	/* Existing entry */
 800c27a:	6919      	ldr	r1, [r3, #16]
 800c27c:	2900      	cmp	r1, #0
 800c27e:	f43f af66 	beq.w	800c14e <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c282:	4291      	cmp	r1, r2
 800c284:	f47f af63 	bne.w	800c14e <f_open+0x13e>
			be = 1;
 800c288:	2001      	movs	r0, #1
 800c28a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c28e:	e759      	b.n	800c144 <f_open+0x134>
				fp->clust = clst;
 800c290:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c292:	e74a      	b.n	800c12a <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c294:	a804      	add	r0, sp, #16
 800c296:	f7ff fd01 	bl	800bc9c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c29a:	2800      	cmp	r0, #0
 800c29c:	f43f af0b 	beq.w	800c0b6 <f_open+0xa6>
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	e6c6      	b.n	800c032 <f_open+0x22>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c2aa:	e74b      	b.n	800c144 <f_open+0x134>
				Files[i].clu == dp->obj.sclust &&
 800c2ac:	689a      	ldr	r2, [r3, #8]
 800c2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2b0:	4291      	cmp	r1, r2
 800c2b2:	d020      	beq.n	800c2f6 <f_open+0x2e6>
		if (Files[i].fs) {	/* Existing entry */
 800c2b4:	691a      	ldr	r2, [r3, #16]
 800c2b6:	2a00      	cmp	r2, #0
 800c2b8:	f43f af49 	beq.w	800c14e <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c2bc:	4290      	cmp	r0, r2
 800c2be:	f47f aedb 	bne.w	800c078 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	e73e      	b.n	800c144 <f_open+0x134>
						res = remove_chain(&dj.obj, cl, 0);
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800c2ca:	f8d8 a02c 	ldr.w	sl, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800c2ce:	f7ff fbd3 	bl	800ba78 <remove_chain>
						if (res == FR_OK) {
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	f47f aed7 	bne.w	800c086 <f_open+0x76>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c2d8:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800c2da:	4651      	mov	r1, sl
 800c2dc:	4640      	mov	r0, r8
 800c2de:	f7fe fe5b 	bl	800af98 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c2e2:	f8c8 600c 	str.w	r6, [r8, #12]
		if (res == FR_OK) {
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	f43f af0e 	beq.w	800c10a <f_open+0xfa>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c2ee:	461d      	mov	r5, r3
 800c2f0:	e69f      	b.n	800c032 <f_open+0x22>
				fp->clust = clst;
 800c2f2:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c2f4:	e79e      	b.n	800c234 <f_open+0x224>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c2f6:	462a      	mov	r2, r5
 800c2f8:	e73a      	b.n	800c170 <f_open+0x160>
 800c2fa:	bf00      	nop
 800c2fc:	240759e0 	.word	0x240759e0

0800c300 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800c306:	2300      	movs	r3, #0
{
 800c308:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 800c30a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c30c:	b150      	cbz	r0, 800c324 <f_write+0x24>
 800c30e:	6803      	ldr	r3, [r0, #0]
 800c310:	4604      	mov	r4, r0
 800c312:	b13b      	cbz	r3, 800c324 <f_write+0x24>
 800c314:	4616      	mov	r6, r2
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	b122      	cbz	r2, 800c324 <f_write+0x24>
 800c31a:	460d      	mov	r5, r1
 800c31c:	88da      	ldrh	r2, [r3, #6]
 800c31e:	8881      	ldrh	r1, [r0, #4]
 800c320:	4291      	cmp	r1, r2
 800c322:	d005      	beq.n	800c330 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800c324:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800c328:	4640      	mov	r0, r8
 800c32a:	b003      	add	sp, #12
 800c32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c330:	7858      	ldrb	r0, [r3, #1]
 800c332:	f7fe fcf5 	bl	800ad20 <disk_status>
 800c336:	07c0      	lsls	r0, r0, #31
 800c338:	d4f4      	bmi.n	800c324 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c33a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c33e:	f1b8 0f00 	cmp.w	r8, #0
 800c342:	d1f1      	bne.n	800c328 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c344:	7d22      	ldrb	r2, [r4, #20]
 800c346:	0791      	lsls	r1, r2, #30
 800c348:	f140 80fa 	bpl.w	800c540 <f_write+0x240>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c34c:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c34e:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c352:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c354:	bf28      	it	cs
 800c356:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 800c358:	2e00      	cmp	r6, #0
 800c35a:	d061      	beq.n	800c420 <f_write+0x120>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c35c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c360:	2800      	cmp	r0, #0
 800c362:	d161      	bne.n	800c428 <f_write+0x128>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c364:	f8b9 a00a 	ldrh.w	sl, [r9, #10]
 800c368:	0a5a      	lsrs	r2, r3, #9
 800c36a:	f10a 3aff 	add.w	sl, sl, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 800c36e:	ea1a 2a53 	ands.w	sl, sl, r3, lsr #9
 800c372:	d110      	bne.n	800c396 <f_write+0x96>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c374:	2b00      	cmp	r3, #0
 800c376:	f040 80b7 	bne.w	800c4e8 <f_write+0x1e8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c37a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800c37c:	2800      	cmp	r0, #0
 800c37e:	f000 80ea 	beq.w	800c556 <f_write+0x256>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c382:	2801      	cmp	r0, #1
 800c384:	f000 809c 	beq.w	800c4c0 <f_write+0x1c0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	f000 80d2 	beq.w	800c532 <f_write+0x232>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c38e:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800c390:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c392:	b903      	cbnz	r3, 800c396 <f_write+0x96>
 800c394:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c396:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f2c0 80bb 	blt.w	800c516 <f_write+0x216>
	clst -= 2;
 800c3a0:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c3a2:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 800c3a6:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c3a8:	3a02      	subs	r2, #2
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	f080 8088 	bcs.w	800c4c0 <f_write+0x1c0>
	return clst * fs->csize + fs->database;
 800c3b0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800c3b4:	f8d9 2028 	ldr.w	r2, [r9, #40]	@ 0x28
 800c3b8:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	d07f      	beq.n	800c4c0 <f_write+0x1c0>
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c3c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 800c3c4:	4452      	add	r2, sl
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c3c6:	f0c0 8082 	bcc.w	800c4ce <f_write+0x1ce>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c3ca:	eb0a 2356 	add.w	r3, sl, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3ce:	f899 0001 	ldrb.w	r0, [r9, #1]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c3d2:	ea4f 2b56 	mov.w	fp, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3d6:	9201      	str	r2, [sp, #4]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c3d8:	428b      	cmp	r3, r1
					cc = fs->csize - csect;
 800c3da:	bf88      	it	hi
 800c3dc:	eba1 0b0a 	subhi.w	fp, r1, sl
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	465b      	mov	r3, fp
 800c3e4:	f7fe fcca 	bl	800ad7c <disk_write>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f040 80a2 	bne.w	800c532 <f_write+0x232>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c3ee:	6a23      	ldr	r3, [r4, #32]
 800c3f0:	9a01      	ldr	r2, [sp, #4]
 800c3f2:	1a9b      	subs	r3, r3, r2
 800c3f4:	455b      	cmp	r3, fp
 800c3f6:	f0c0 80c2 	bcc.w	800c57e <f_write+0x27e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c3fa:	eb05 2c4b 	add.w	ip, r5, fp, lsl #9
 800c3fe:	ea4f 204b 	mov.w	r0, fp, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c402:	69a3      	ldr	r3, [r4, #24]
 800c404:	4665      	mov	r5, ip
 800c406:	68e2      	ldr	r2, [r4, #12]
 800c408:	4403      	add	r3, r0
 800c40a:	429a      	cmp	r2, r3
 800c40c:	61a3      	str	r3, [r4, #24]
 800c40e:	bf38      	it	cc
 800c410:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 800c412:	1a36      	subs	r6, r6, r0
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c414:	60e2      	str	r2, [r4, #12]
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	4402      	add	r2, r0
 800c41a:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800c41c:	d19e      	bne.n	800c35c <f_write+0x5c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c41e:	7d22      	ldrb	r2, [r4, #20]
 800c420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c424:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800c426:	e77f      	b.n	800c328 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c428:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c42c:	eb0a 0300 	add.w	r3, sl, r0
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c430:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 800c434:	42b0      	cmp	r0, r6
 800c436:	bf28      	it	cs
 800c438:	4630      	movcs	r0, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c43a:	1e42      	subs	r2, r0, #1
 800c43c:	2a05      	cmp	r2, #5
 800c43e:	d903      	bls.n	800c448 <f_write+0x148>
 800c440:	1c6a      	adds	r2, r5, #1
 800c442:	1a9a      	subs	r2, r3, r2
 800c444:	2a02      	cmp	r2, #2
 800c446:	d80e      	bhi.n	800c466 <f_write+0x166>
 800c448:	3b01      	subs	r3, #1
 800c44a:	eb05 0c00 	add.w	ip, r5, r0
{
 800c44e:	4629      	mov	r1, r5
			*d++ = *s++;
 800c450:	f811 2b01 	ldrb.w	r2, [r1], #1
		} while (--cnt);
 800c454:	4561      	cmp	r1, ip
			*d++ = *s++;
 800c456:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 800c45a:	d1f9      	bne.n	800c450 <f_write+0x150>
		fp->flag |= FA_DIRTY;
 800c45c:	7d23      	ldrb	r3, [r4, #20]
 800c45e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c462:	7523      	strb	r3, [r4, #20]
 800c464:	e7cd      	b.n	800c402 <f_write+0x102>
 800c466:	f020 0e03 	bic.w	lr, r0, #3
 800c46a:	461a      	mov	r2, r3
 800c46c:	4629      	mov	r1, r5
 800c46e:	449e      	add	lr, r3
			*d++ = *s++;
 800c470:	f851 cb04 	ldr.w	ip, [r1], #4
 800c474:	f842 cb04 	str.w	ip, [r2], #4
		} while (--cnt);
 800c478:	4596      	cmp	lr, r2
 800c47a:	d1f9      	bne.n	800c470 <f_write+0x170>
 800c47c:	f020 0203 	bic.w	r2, r0, #3
 800c480:	f010 0f03 	tst.w	r0, #3
 800c484:	f000 0103 	and.w	r1, r0, #3
 800c488:	eb03 0a02 	add.w	sl, r3, r2
 800c48c:	eb05 0c02 	add.w	ip, r5, r2
 800c490:	d00f      	beq.n	800c4b2 <f_write+0x1b2>
			*d++ = *s++;
 800c492:	f815 e002 	ldrb.w	lr, [r5, r2]
		} while (--cnt);
 800c496:	2901      	cmp	r1, #1
			*d++ = *s++;
 800c498:	f803 e002 	strb.w	lr, [r3, r2]
		} while (--cnt);
 800c49c:	d009      	beq.n	800c4b2 <f_write+0x1b2>
			*d++ = *s++;
 800c49e:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 800c4a2:	2902      	cmp	r1, #2
			*d++ = *s++;
 800c4a4:	f88a 3001 	strb.w	r3, [sl, #1]
 800c4a8:	bf1c      	itt	ne
 800c4aa:	f89c 3002 	ldrbne.w	r3, [ip, #2]
 800c4ae:	f88a 3002 	strbne.w	r3, [sl, #2]
		fp->flag |= FA_DIRTY;
 800c4b2:	7d23      	ldrb	r3, [r4, #20]
 800c4b4:	eb05 0c00 	add.w	ip, r5, r0
 800c4b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c4bc:	7523      	strb	r3, [r4, #20]
 800c4be:	e7a0      	b.n	800c402 <f_write+0x102>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	4698      	mov	r8, r3
 800c4c4:	7563      	strb	r3, [r4, #21]
}
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	b003      	add	sp, #12
 800c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c4ce:	6a23      	ldr	r3, [r4, #32]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4d0:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
				fp->fptr < fp->obj.objsize &&
 800c4d4:	69a0      	ldr	r0, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d002      	beq.n	800c4e0 <f_write+0x1e0>
 800c4da:	68e3      	ldr	r3, [r4, #12]
 800c4dc:	4283      	cmp	r3, r0
 800c4de:	d842      	bhi.n	800c566 <f_write+0x266>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c4e0:	f3c0 0008 	ubfx	r0, r0, #0, #9
			fp->sect = sect;
 800c4e4:	6222      	str	r2, [r4, #32]
 800c4e6:	e7a1      	b.n	800c42c <f_write+0x12c>
					if (fp->cltbl) {
 800c4e8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c4ea:	b361      	cbz	r1, 800c546 <f_write+0x246>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c4ec:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c4ee:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c4f0:	895b      	ldrh	r3, [r3, #10]
 800c4f2:	fbb2 f3f3 	udiv	r3, r2, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4f6:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c4f8:	b92a      	cbnz	r2, 800c506 <f_write+0x206>
 800c4fa:	e790      	b.n	800c41e <f_write+0x11e>
		cl -= ncl; tbl++;		/* Next fragment */
 800c4fc:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c4fe:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c502:	2a00      	cmp	r2, #0
 800c504:	d08b      	beq.n	800c41e <f_write+0x11e>
		if (cl < ncl) break;	/* In this fragment? */
 800c506:	4293      	cmp	r3, r2
 800c508:	d2f8      	bcs.n	800c4fc <f_write+0x1fc>
	return cl + *tbl;	/* Return the cluster number */
 800c50a:	6848      	ldr	r0, [r1, #4]
 800c50c:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c50e:	2800      	cmp	r0, #0
 800c510:	f47f af37 	bne.w	800c382 <f_write+0x82>
 800c514:	e783      	b.n	800c41e <f_write+0x11e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c516:	2301      	movs	r3, #1
 800c518:	6a22      	ldr	r2, [r4, #32]
 800c51a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c51e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c522:	f7fe fc2b 	bl	800ad7c <disk_write>
 800c526:	b920      	cbnz	r0, 800c532 <f_write+0x232>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c528:	7d23      	ldrb	r3, [r4, #20]
 800c52a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c52e:	7523      	strb	r3, [r4, #20]
 800c530:	e736      	b.n	800c3a0 <f_write+0xa0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c532:	2301      	movs	r3, #1
 800c534:	4698      	mov	r8, r3
 800c536:	7563      	strb	r3, [r4, #21]
}
 800c538:	4640      	mov	r0, r8
 800c53a:	b003      	add	sp, #12
 800c53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c540:	f04f 0807 	mov.w	r8, #7
 800c544:	e6f0      	b.n	800c328 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c546:	69e1      	ldr	r1, [r4, #28]
 800c548:	4620      	mov	r0, r4
 800c54a:	f7fe ffa3 	bl	800b494 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c54e:	2800      	cmp	r0, #0
 800c550:	f47f af17 	bne.w	800c382 <f_write+0x82>
 800c554:	e763      	b.n	800c41e <f_write+0x11e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c556:	4651      	mov	r1, sl
 800c558:	4620      	mov	r0, r4
 800c55a:	f7fe ff9b 	bl	800b494 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c55e:	2800      	cmp	r0, #0
 800c560:	f47f af0f 	bne.w	800c382 <f_write+0x82>
 800c564:	e75b      	b.n	800c41e <f_write+0x11e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c566:	2301      	movs	r3, #1
 800c568:	4651      	mov	r1, sl
 800c56a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c56e:	9201      	str	r2, [sp, #4]
 800c570:	f7fe fbf6 	bl	800ad60 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800c574:	2800      	cmp	r0, #0
 800c576:	d1dc      	bne.n	800c532 <f_write+0x232>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c578:	69a0      	ldr	r0, [r4, #24]
 800c57a:	9a01      	ldr	r2, [sp, #4]
 800c57c:	e7b0      	b.n	800c4e0 <f_write+0x1e0>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c57e:	eb05 2143 	add.w	r1, r5, r3, lsl #9
 800c582:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800c586:	460a      	mov	r2, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c588:	3101      	adds	r1, #1
 800c58a:	1a59      	subs	r1, r3, r1
 800c58c:	2902      	cmp	r1, #2
 800c58e:	d90c      	bls.n	800c5aa <f_write+0x2aa>
 800c590:	f504 700c 	add.w	r0, r4, #560	@ 0x230
			*d++ = *s++;
 800c594:	f852 1b04 	ldr.w	r1, [r2], #4
 800c598:	f843 1b04 	str.w	r1, [r3], #4
		} while (--cnt);
 800c59c:	4283      	cmp	r3, r0
 800c59e:	d1f9      	bne.n	800c594 <f_write+0x294>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c5a0:	7d23      	ldrb	r3, [r4, #20]
 800c5a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5a6:	7523      	strb	r3, [r4, #20]
 800c5a8:	e727      	b.n	800c3fa <f_write+0xfa>
 800c5aa:	f104 032f 	add.w	r3, r4, #47	@ 0x2f
 800c5ae:	f502 7000 	add.w	r0, r2, #512	@ 0x200
			*d++ = *s++;
 800c5b2:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 800c5b6:	4290      	cmp	r0, r2
			*d++ = *s++;
 800c5b8:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800c5bc:	d1f9      	bne.n	800c5b2 <f_write+0x2b2>
 800c5be:	e7ef      	b.n	800c5a0 <f_write+0x2a0>

0800c5c0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c5c0:	b158      	cbz	r0, 800c5da <f_close+0x1a>
 800c5c2:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c5c8:	b12b      	cbz	r3, 800c5d6 <f_close+0x16>
 800c5ca:	781a      	ldrb	r2, [r3, #0]
 800c5cc:	b11a      	cbz	r2, 800c5d6 <f_close+0x16>
 800c5ce:	8881      	ldrh	r1, [r0, #4]
 800c5d0:	88da      	ldrh	r2, [r3, #6]
 800c5d2:	4291      	cmp	r1, r2
 800c5d4:	d003      	beq.n	800c5de <f_close+0x1e>
{
 800c5d6:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
{
 800c5da:	2009      	movs	r0, #9
}
 800c5dc:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c5de:	7858      	ldrb	r0, [r3, #1]
 800c5e0:	f7fe fb9e 	bl	800ad20 <disk_status>
 800c5e4:	07c1      	lsls	r1, r0, #31
 800c5e6:	d4f6      	bmi.n	800c5d6 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c5e8:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c5ea:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c5ec:	065a      	lsls	r2, r3, #25
 800c5ee:	d52e      	bpl.n	800c64e <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c5f0:	061b      	lsls	r3, r3, #24
 800c5f2:	d451      	bmi.n	800c698 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800c5f4:	f7fe faaa 	bl	800ab4c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800c5f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 800c5fa:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f7fe fccb 	bl	800af98 <move_window>
				if (res == FR_OK) {
 800c602:	2800      	cmp	r0, #0
 800c604:	d1e8      	bne.n	800c5d8 <f_close+0x18>
					dir = fp->dir_ptr;
 800c606:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c608:	7ada      	ldrb	r2, [r3, #11]
 800c60a:	f042 0220 	orr.w	r2, r2, #32
 800c60e:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c610:	68a2      	ldr	r2, [r4, #8]
 800c612:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c614:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800c618:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800c61a:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800c61c:	7809      	ldrb	r1, [r1, #0]
 800c61e:	2903      	cmp	r1, #3
 800c620:	d103      	bne.n	800c62a <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c622:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c624:	751a      	strb	r2, [r3, #20]
 800c626:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800c628:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800c62a:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800c62c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800c62e:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c632:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800c634:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800c636:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800c638:	2301      	movs	r3, #1
 800c63a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c63c:	f7fe fc4e 	bl	800aedc <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c640:	7d23      	ldrb	r3, [r4, #20]
 800c642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c646:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800c648:	2800      	cmp	r0, #0
 800c64a:	d1c5      	bne.n	800c5d8 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c64c:	6825      	ldr	r5, [r4, #0]
 800c64e:	2d00      	cmp	r5, #0
 800c650:	d0c1      	beq.n	800c5d6 <f_close+0x16>
 800c652:	782b      	ldrb	r3, [r5, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d0be      	beq.n	800c5d6 <f_close+0x16>
 800c658:	88a2      	ldrh	r2, [r4, #4]
 800c65a:	88eb      	ldrh	r3, [r5, #6]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d1ba      	bne.n	800c5d6 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c660:	7868      	ldrb	r0, [r5, #1]
 800c662:	f7fe fb5d 	bl	800ad20 <disk_status>
 800c666:	f010 0001 	ands.w	r0, r0, #1
 800c66a:	d1b4      	bne.n	800c5d6 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c66c:	6923      	ldr	r3, [r4, #16]
 800c66e:	3b01      	subs	r3, #1
 800c670:	2b01      	cmp	r3, #1
 800c672:	d81e      	bhi.n	800c6b2 <f_close+0xf2>
		n = Files[i].ctr;
 800c674:	4912      	ldr	r1, [pc, #72]	@ (800c6c0 <f_close+0x100>)
 800c676:	011d      	lsls	r5, r3, #4
 800c678:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800c67c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c67e:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800c682:	d01a      	beq.n	800c6ba <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800c684:	b11a      	cbz	r2, 800c68e <f_close+0xce>
 800c686:	3a01      	subs	r2, #1
 800c688:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800c68a:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c68c:	b90a      	cbnz	r2, 800c692 <f_close+0xd2>
 800c68e:	2300      	movs	r3, #0
 800c690:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800c692:	2300      	movs	r3, #0
 800c694:	6023      	str	r3, [r4, #0]
}
 800c696:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c698:	2301      	movs	r3, #1
 800c69a:	6a22      	ldr	r2, [r4, #32]
 800c69c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c6a0:	7868      	ldrb	r0, [r5, #1]
 800c6a2:	f7fe fb6b 	bl	800ad7c <disk_write>
 800c6a6:	b930      	cbnz	r0, 800c6b6 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c6a8:	7d23      	ldrb	r3, [r4, #20]
 800c6aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6ae:	7523      	strb	r3, [r4, #20]
 800c6b0:	e7a0      	b.n	800c5f4 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c6b2:	2002      	movs	r0, #2
}
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c6b6:	2001      	movs	r0, #1
}
 800c6b8:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800c6ba:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c6bc:	e7e7      	b.n	800c68e <f_close+0xce>
 800c6be:	bf00      	nop
 800c6c0:	240759e0 	.word	0x240759e0

0800c6c4 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800c6c4:	4b10      	ldr	r3, [pc, #64]	@ (800c708 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6c6:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800c6c8:	7a5c      	ldrb	r4, [r3, #9]
 800c6ca:	b9cc      	cbnz	r4, 800c700 <FATFS_LinkDriver+0x3c>
 800c6cc:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800c6ce:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800c6d2:	7a5c      	ldrb	r4, [r3, #9]
 800c6d4:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800c6d6:	7a5c      	ldrb	r4, [r3, #9]
 800c6d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c6dc:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800c6de:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800c6e0:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800c6e2:	441c      	add	r4, r3
 800c6e4:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800c6e6:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800c6e8:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800c6ea:	b2e4      	uxtb	r4, r4
 800c6ec:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800c6ee:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 800c6f0:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 800c6f2:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800c6f4:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 800c6f6:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800c6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800c6fc:	708b      	strb	r3, [r1, #2]
}
 800c6fe:	4770      	bx	lr
  uint8_t ret = 1;
 800c700:	2001      	movs	r0, #1
}
 800c702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	24075a08 	.word	0x24075a08

0800c70c <sniprintf>:
 800c70c:	b40c      	push	{r2, r3}
 800c70e:	b530      	push	{r4, r5, lr}
 800c710:	4b17      	ldr	r3, [pc, #92]	@ (800c770 <sniprintf+0x64>)
 800c712:	1e0c      	subs	r4, r1, #0
 800c714:	681d      	ldr	r5, [r3, #0]
 800c716:	b09d      	sub	sp, #116	@ 0x74
 800c718:	da08      	bge.n	800c72c <sniprintf+0x20>
 800c71a:	238b      	movs	r3, #139	@ 0x8b
 800c71c:	602b      	str	r3, [r5, #0]
 800c71e:	f04f 30ff 	mov.w	r0, #4294967295
 800c722:	b01d      	add	sp, #116	@ 0x74
 800c724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c728:	b002      	add	sp, #8
 800c72a:	4770      	bx	lr
 800c72c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c730:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c734:	bf14      	ite	ne
 800c736:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c73a:	4623      	moveq	r3, r4
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	9307      	str	r3, [sp, #28]
 800c740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c744:	9002      	str	r0, [sp, #8]
 800c746:	9006      	str	r0, [sp, #24]
 800c748:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c74c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c74e:	ab21      	add	r3, sp, #132	@ 0x84
 800c750:	a902      	add	r1, sp, #8
 800c752:	4628      	mov	r0, r5
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	f000 f995 	bl	800ca84 <_svfiprintf_r>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	bfbc      	itt	lt
 800c75e:	238b      	movlt	r3, #139	@ 0x8b
 800c760:	602b      	strlt	r3, [r5, #0]
 800c762:	2c00      	cmp	r4, #0
 800c764:	d0dd      	beq.n	800c722 <sniprintf+0x16>
 800c766:	9b02      	ldr	r3, [sp, #8]
 800c768:	2200      	movs	r2, #0
 800c76a:	701a      	strb	r2, [r3, #0]
 800c76c:	e7d9      	b.n	800c722 <sniprintf+0x16>
 800c76e:	bf00      	nop
 800c770:	24000018 	.word	0x24000018

0800c774 <memset>:
 800c774:	4402      	add	r2, r0
 800c776:	4603      	mov	r3, r0
 800c778:	4293      	cmp	r3, r2
 800c77a:	d100      	bne.n	800c77e <memset+0xa>
 800c77c:	4770      	bx	lr
 800c77e:	f803 1b01 	strb.w	r1, [r3], #1
 800c782:	e7f9      	b.n	800c778 <memset+0x4>

0800c784 <__errno>:
 800c784:	4b01      	ldr	r3, [pc, #4]	@ (800c78c <__errno+0x8>)
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	24000018 	.word	0x24000018

0800c790 <__libc_init_array>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	4d0d      	ldr	r5, [pc, #52]	@ (800c7c8 <__libc_init_array+0x38>)
 800c794:	4c0d      	ldr	r4, [pc, #52]	@ (800c7cc <__libc_init_array+0x3c>)
 800c796:	1b64      	subs	r4, r4, r5
 800c798:	10a4      	asrs	r4, r4, #2
 800c79a:	2600      	movs	r6, #0
 800c79c:	42a6      	cmp	r6, r4
 800c79e:	d109      	bne.n	800c7b4 <__libc_init_array+0x24>
 800c7a0:	4d0b      	ldr	r5, [pc, #44]	@ (800c7d0 <__libc_init_array+0x40>)
 800c7a2:	4c0c      	ldr	r4, [pc, #48]	@ (800c7d4 <__libc_init_array+0x44>)
 800c7a4:	f000 fc66 	bl	800d074 <_init>
 800c7a8:	1b64      	subs	r4, r4, r5
 800c7aa:	10a4      	asrs	r4, r4, #2
 800c7ac:	2600      	movs	r6, #0
 800c7ae:	42a6      	cmp	r6, r4
 800c7b0:	d105      	bne.n	800c7be <__libc_init_array+0x2e>
 800c7b2:	bd70      	pop	{r4, r5, r6, pc}
 800c7b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7b8:	4798      	blx	r3
 800c7ba:	3601      	adds	r6, #1
 800c7bc:	e7ee      	b.n	800c79c <__libc_init_array+0xc>
 800c7be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c2:	4798      	blx	r3
 800c7c4:	3601      	adds	r6, #1
 800c7c6:	e7f2      	b.n	800c7ae <__libc_init_array+0x1e>
 800c7c8:	0800d430 	.word	0x0800d430
 800c7cc:	0800d430 	.word	0x0800d430
 800c7d0:	0800d430 	.word	0x0800d430
 800c7d4:	0800d434 	.word	0x0800d434

0800c7d8 <__retarget_lock_acquire_recursive>:
 800c7d8:	4770      	bx	lr

0800c7da <__retarget_lock_release_recursive>:
 800c7da:	4770      	bx	lr

0800c7dc <_free_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4605      	mov	r5, r0
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	d041      	beq.n	800c868 <_free_r+0x8c>
 800c7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7e8:	1f0c      	subs	r4, r1, #4
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	bfb8      	it	lt
 800c7ee:	18e4      	addlt	r4, r4, r3
 800c7f0:	f000 f8e0 	bl	800c9b4 <__malloc_lock>
 800c7f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c86c <_free_r+0x90>)
 800c7f6:	6813      	ldr	r3, [r2, #0]
 800c7f8:	b933      	cbnz	r3, 800c808 <_free_r+0x2c>
 800c7fa:	6063      	str	r3, [r4, #4]
 800c7fc:	6014      	str	r4, [r2, #0]
 800c7fe:	4628      	mov	r0, r5
 800c800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c804:	f000 b8dc 	b.w	800c9c0 <__malloc_unlock>
 800c808:	42a3      	cmp	r3, r4
 800c80a:	d908      	bls.n	800c81e <_free_r+0x42>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	1821      	adds	r1, r4, r0
 800c810:	428b      	cmp	r3, r1
 800c812:	bf01      	itttt	eq
 800c814:	6819      	ldreq	r1, [r3, #0]
 800c816:	685b      	ldreq	r3, [r3, #4]
 800c818:	1809      	addeq	r1, r1, r0
 800c81a:	6021      	streq	r1, [r4, #0]
 800c81c:	e7ed      	b.n	800c7fa <_free_r+0x1e>
 800c81e:	461a      	mov	r2, r3
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	b10b      	cbz	r3, 800c828 <_free_r+0x4c>
 800c824:	42a3      	cmp	r3, r4
 800c826:	d9fa      	bls.n	800c81e <_free_r+0x42>
 800c828:	6811      	ldr	r1, [r2, #0]
 800c82a:	1850      	adds	r0, r2, r1
 800c82c:	42a0      	cmp	r0, r4
 800c82e:	d10b      	bne.n	800c848 <_free_r+0x6c>
 800c830:	6820      	ldr	r0, [r4, #0]
 800c832:	4401      	add	r1, r0
 800c834:	1850      	adds	r0, r2, r1
 800c836:	4283      	cmp	r3, r0
 800c838:	6011      	str	r1, [r2, #0]
 800c83a:	d1e0      	bne.n	800c7fe <_free_r+0x22>
 800c83c:	6818      	ldr	r0, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	6053      	str	r3, [r2, #4]
 800c842:	4408      	add	r0, r1
 800c844:	6010      	str	r0, [r2, #0]
 800c846:	e7da      	b.n	800c7fe <_free_r+0x22>
 800c848:	d902      	bls.n	800c850 <_free_r+0x74>
 800c84a:	230c      	movs	r3, #12
 800c84c:	602b      	str	r3, [r5, #0]
 800c84e:	e7d6      	b.n	800c7fe <_free_r+0x22>
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	1821      	adds	r1, r4, r0
 800c854:	428b      	cmp	r3, r1
 800c856:	bf04      	itt	eq
 800c858:	6819      	ldreq	r1, [r3, #0]
 800c85a:	685b      	ldreq	r3, [r3, #4]
 800c85c:	6063      	str	r3, [r4, #4]
 800c85e:	bf04      	itt	eq
 800c860:	1809      	addeq	r1, r1, r0
 800c862:	6021      	streq	r1, [r4, #0]
 800c864:	6054      	str	r4, [r2, #4]
 800c866:	e7ca      	b.n	800c7fe <_free_r+0x22>
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	bf00      	nop
 800c86c:	24075b58 	.word	0x24075b58

0800c870 <sbrk_aligned>:
 800c870:	b570      	push	{r4, r5, r6, lr}
 800c872:	4e0f      	ldr	r6, [pc, #60]	@ (800c8b0 <sbrk_aligned+0x40>)
 800c874:	460c      	mov	r4, r1
 800c876:	6831      	ldr	r1, [r6, #0]
 800c878:	4605      	mov	r5, r0
 800c87a:	b911      	cbnz	r1, 800c882 <sbrk_aligned+0x12>
 800c87c:	f000 fba6 	bl	800cfcc <_sbrk_r>
 800c880:	6030      	str	r0, [r6, #0]
 800c882:	4621      	mov	r1, r4
 800c884:	4628      	mov	r0, r5
 800c886:	f000 fba1 	bl	800cfcc <_sbrk_r>
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	d103      	bne.n	800c896 <sbrk_aligned+0x26>
 800c88e:	f04f 34ff 	mov.w	r4, #4294967295
 800c892:	4620      	mov	r0, r4
 800c894:	bd70      	pop	{r4, r5, r6, pc}
 800c896:	1cc4      	adds	r4, r0, #3
 800c898:	f024 0403 	bic.w	r4, r4, #3
 800c89c:	42a0      	cmp	r0, r4
 800c89e:	d0f8      	beq.n	800c892 <sbrk_aligned+0x22>
 800c8a0:	1a21      	subs	r1, r4, r0
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	f000 fb92 	bl	800cfcc <_sbrk_r>
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	d1f2      	bne.n	800c892 <sbrk_aligned+0x22>
 800c8ac:	e7ef      	b.n	800c88e <sbrk_aligned+0x1e>
 800c8ae:	bf00      	nop
 800c8b0:	24075b54 	.word	0x24075b54

0800c8b4 <_malloc_r>:
 800c8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b8:	1ccd      	adds	r5, r1, #3
 800c8ba:	f025 0503 	bic.w	r5, r5, #3
 800c8be:	3508      	adds	r5, #8
 800c8c0:	2d0c      	cmp	r5, #12
 800c8c2:	bf38      	it	cc
 800c8c4:	250c      	movcc	r5, #12
 800c8c6:	2d00      	cmp	r5, #0
 800c8c8:	4606      	mov	r6, r0
 800c8ca:	db01      	blt.n	800c8d0 <_malloc_r+0x1c>
 800c8cc:	42a9      	cmp	r1, r5
 800c8ce:	d904      	bls.n	800c8da <_malloc_r+0x26>
 800c8d0:	230c      	movs	r3, #12
 800c8d2:	6033      	str	r3, [r6, #0]
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c9b0 <_malloc_r+0xfc>
 800c8de:	f000 f869 	bl	800c9b4 <__malloc_lock>
 800c8e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c8e6:	461c      	mov	r4, r3
 800c8e8:	bb44      	cbnz	r4, 800c93c <_malloc_r+0x88>
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff ffbf 	bl	800c870 <sbrk_aligned>
 800c8f2:	1c43      	adds	r3, r0, #1
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	d158      	bne.n	800c9aa <_malloc_r+0xf6>
 800c8f8:	f8d8 4000 	ldr.w	r4, [r8]
 800c8fc:	4627      	mov	r7, r4
 800c8fe:	2f00      	cmp	r7, #0
 800c900:	d143      	bne.n	800c98a <_malloc_r+0xd6>
 800c902:	2c00      	cmp	r4, #0
 800c904:	d04b      	beq.n	800c99e <_malloc_r+0xea>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	4639      	mov	r1, r7
 800c90a:	4630      	mov	r0, r6
 800c90c:	eb04 0903 	add.w	r9, r4, r3
 800c910:	f000 fb5c 	bl	800cfcc <_sbrk_r>
 800c914:	4581      	cmp	r9, r0
 800c916:	d142      	bne.n	800c99e <_malloc_r+0xea>
 800c918:	6821      	ldr	r1, [r4, #0]
 800c91a:	1a6d      	subs	r5, r5, r1
 800c91c:	4629      	mov	r1, r5
 800c91e:	4630      	mov	r0, r6
 800c920:	f7ff ffa6 	bl	800c870 <sbrk_aligned>
 800c924:	3001      	adds	r0, #1
 800c926:	d03a      	beq.n	800c99e <_malloc_r+0xea>
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	442b      	add	r3, r5
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	f8d8 3000 	ldr.w	r3, [r8]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	bb62      	cbnz	r2, 800c990 <_malloc_r+0xdc>
 800c936:	f8c8 7000 	str.w	r7, [r8]
 800c93a:	e00f      	b.n	800c95c <_malloc_r+0xa8>
 800c93c:	6822      	ldr	r2, [r4, #0]
 800c93e:	1b52      	subs	r2, r2, r5
 800c940:	d420      	bmi.n	800c984 <_malloc_r+0xd0>
 800c942:	2a0b      	cmp	r2, #11
 800c944:	d917      	bls.n	800c976 <_malloc_r+0xc2>
 800c946:	1961      	adds	r1, r4, r5
 800c948:	42a3      	cmp	r3, r4
 800c94a:	6025      	str	r5, [r4, #0]
 800c94c:	bf18      	it	ne
 800c94e:	6059      	strne	r1, [r3, #4]
 800c950:	6863      	ldr	r3, [r4, #4]
 800c952:	bf08      	it	eq
 800c954:	f8c8 1000 	streq.w	r1, [r8]
 800c958:	5162      	str	r2, [r4, r5]
 800c95a:	604b      	str	r3, [r1, #4]
 800c95c:	4630      	mov	r0, r6
 800c95e:	f000 f82f 	bl	800c9c0 <__malloc_unlock>
 800c962:	f104 000b 	add.w	r0, r4, #11
 800c966:	1d23      	adds	r3, r4, #4
 800c968:	f020 0007 	bic.w	r0, r0, #7
 800c96c:	1ac2      	subs	r2, r0, r3
 800c96e:	bf1c      	itt	ne
 800c970:	1a1b      	subne	r3, r3, r0
 800c972:	50a3      	strne	r3, [r4, r2]
 800c974:	e7af      	b.n	800c8d6 <_malloc_r+0x22>
 800c976:	6862      	ldr	r2, [r4, #4]
 800c978:	42a3      	cmp	r3, r4
 800c97a:	bf0c      	ite	eq
 800c97c:	f8c8 2000 	streq.w	r2, [r8]
 800c980:	605a      	strne	r2, [r3, #4]
 800c982:	e7eb      	b.n	800c95c <_malloc_r+0xa8>
 800c984:	4623      	mov	r3, r4
 800c986:	6864      	ldr	r4, [r4, #4]
 800c988:	e7ae      	b.n	800c8e8 <_malloc_r+0x34>
 800c98a:	463c      	mov	r4, r7
 800c98c:	687f      	ldr	r7, [r7, #4]
 800c98e:	e7b6      	b.n	800c8fe <_malloc_r+0x4a>
 800c990:	461a      	mov	r2, r3
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	42a3      	cmp	r3, r4
 800c996:	d1fb      	bne.n	800c990 <_malloc_r+0xdc>
 800c998:	2300      	movs	r3, #0
 800c99a:	6053      	str	r3, [r2, #4]
 800c99c:	e7de      	b.n	800c95c <_malloc_r+0xa8>
 800c99e:	230c      	movs	r3, #12
 800c9a0:	6033      	str	r3, [r6, #0]
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f000 f80c 	bl	800c9c0 <__malloc_unlock>
 800c9a8:	e794      	b.n	800c8d4 <_malloc_r+0x20>
 800c9aa:	6005      	str	r5, [r0, #0]
 800c9ac:	e7d6      	b.n	800c95c <_malloc_r+0xa8>
 800c9ae:	bf00      	nop
 800c9b0:	24075b58 	.word	0x24075b58

0800c9b4 <__malloc_lock>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	@ (800c9bc <__malloc_lock+0x8>)
 800c9b6:	f7ff bf0f 	b.w	800c7d8 <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	24075b50 	.word	0x24075b50

0800c9c0 <__malloc_unlock>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	@ (800c9c8 <__malloc_unlock+0x8>)
 800c9c2:	f7ff bf0a 	b.w	800c7da <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	24075b50 	.word	0x24075b50

0800c9cc <__ssputs_r>:
 800c9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d0:	688e      	ldr	r6, [r1, #8]
 800c9d2:	461f      	mov	r7, r3
 800c9d4:	42be      	cmp	r6, r7
 800c9d6:	680b      	ldr	r3, [r1, #0]
 800c9d8:	4682      	mov	sl, r0
 800c9da:	460c      	mov	r4, r1
 800c9dc:	4690      	mov	r8, r2
 800c9de:	d82d      	bhi.n	800ca3c <__ssputs_r+0x70>
 800c9e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c9e8:	d026      	beq.n	800ca38 <__ssputs_r+0x6c>
 800c9ea:	6965      	ldr	r5, [r4, #20]
 800c9ec:	6909      	ldr	r1, [r1, #16]
 800c9ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9f2:	eba3 0901 	sub.w	r9, r3, r1
 800c9f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9fa:	1c7b      	adds	r3, r7, #1
 800c9fc:	444b      	add	r3, r9
 800c9fe:	106d      	asrs	r5, r5, #1
 800ca00:	429d      	cmp	r5, r3
 800ca02:	bf38      	it	cc
 800ca04:	461d      	movcc	r5, r3
 800ca06:	0553      	lsls	r3, r2, #21
 800ca08:	d527      	bpl.n	800ca5a <__ssputs_r+0x8e>
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7ff ff52 	bl	800c8b4 <_malloc_r>
 800ca10:	4606      	mov	r6, r0
 800ca12:	b360      	cbz	r0, 800ca6e <__ssputs_r+0xa2>
 800ca14:	6921      	ldr	r1, [r4, #16]
 800ca16:	464a      	mov	r2, r9
 800ca18:	f000 fae8 	bl	800cfec <memcpy>
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca26:	81a3      	strh	r3, [r4, #12]
 800ca28:	6126      	str	r6, [r4, #16]
 800ca2a:	6165      	str	r5, [r4, #20]
 800ca2c:	444e      	add	r6, r9
 800ca2e:	eba5 0509 	sub.w	r5, r5, r9
 800ca32:	6026      	str	r6, [r4, #0]
 800ca34:	60a5      	str	r5, [r4, #8]
 800ca36:	463e      	mov	r6, r7
 800ca38:	42be      	cmp	r6, r7
 800ca3a:	d900      	bls.n	800ca3e <__ssputs_r+0x72>
 800ca3c:	463e      	mov	r6, r7
 800ca3e:	6820      	ldr	r0, [r4, #0]
 800ca40:	4632      	mov	r2, r6
 800ca42:	4641      	mov	r1, r8
 800ca44:	f000 faa8 	bl	800cf98 <memmove>
 800ca48:	68a3      	ldr	r3, [r4, #8]
 800ca4a:	1b9b      	subs	r3, r3, r6
 800ca4c:	60a3      	str	r3, [r4, #8]
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	4433      	add	r3, r6
 800ca52:	6023      	str	r3, [r4, #0]
 800ca54:	2000      	movs	r0, #0
 800ca56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5a:	462a      	mov	r2, r5
 800ca5c:	f000 fad4 	bl	800d008 <_realloc_r>
 800ca60:	4606      	mov	r6, r0
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d1e0      	bne.n	800ca28 <__ssputs_r+0x5c>
 800ca66:	6921      	ldr	r1, [r4, #16]
 800ca68:	4650      	mov	r0, sl
 800ca6a:	f7ff feb7 	bl	800c7dc <_free_r>
 800ca6e:	230c      	movs	r3, #12
 800ca70:	f8ca 3000 	str.w	r3, [sl]
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca7a:	81a3      	strh	r3, [r4, #12]
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	e7e9      	b.n	800ca56 <__ssputs_r+0x8a>
	...

0800ca84 <_svfiprintf_r>:
 800ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca88:	4698      	mov	r8, r3
 800ca8a:	898b      	ldrh	r3, [r1, #12]
 800ca8c:	061b      	lsls	r3, r3, #24
 800ca8e:	b09d      	sub	sp, #116	@ 0x74
 800ca90:	4607      	mov	r7, r0
 800ca92:	460d      	mov	r5, r1
 800ca94:	4614      	mov	r4, r2
 800ca96:	d510      	bpl.n	800caba <_svfiprintf_r+0x36>
 800ca98:	690b      	ldr	r3, [r1, #16]
 800ca9a:	b973      	cbnz	r3, 800caba <_svfiprintf_r+0x36>
 800ca9c:	2140      	movs	r1, #64	@ 0x40
 800ca9e:	f7ff ff09 	bl	800c8b4 <_malloc_r>
 800caa2:	6028      	str	r0, [r5, #0]
 800caa4:	6128      	str	r0, [r5, #16]
 800caa6:	b930      	cbnz	r0, 800cab6 <_svfiprintf_r+0x32>
 800caa8:	230c      	movs	r3, #12
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	f04f 30ff 	mov.w	r0, #4294967295
 800cab0:	b01d      	add	sp, #116	@ 0x74
 800cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab6:	2340      	movs	r3, #64	@ 0x40
 800cab8:	616b      	str	r3, [r5, #20]
 800caba:	2300      	movs	r3, #0
 800cabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cabe:	2320      	movs	r3, #32
 800cac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cac4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac8:	2330      	movs	r3, #48	@ 0x30
 800caca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cc68 <_svfiprintf_r+0x1e4>
 800cace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cad2:	f04f 0901 	mov.w	r9, #1
 800cad6:	4623      	mov	r3, r4
 800cad8:	469a      	mov	sl, r3
 800cada:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cade:	b10a      	cbz	r2, 800cae4 <_svfiprintf_r+0x60>
 800cae0:	2a25      	cmp	r2, #37	@ 0x25
 800cae2:	d1f9      	bne.n	800cad8 <_svfiprintf_r+0x54>
 800cae4:	ebba 0b04 	subs.w	fp, sl, r4
 800cae8:	d00b      	beq.n	800cb02 <_svfiprintf_r+0x7e>
 800caea:	465b      	mov	r3, fp
 800caec:	4622      	mov	r2, r4
 800caee:	4629      	mov	r1, r5
 800caf0:	4638      	mov	r0, r7
 800caf2:	f7ff ff6b 	bl	800c9cc <__ssputs_r>
 800caf6:	3001      	adds	r0, #1
 800caf8:	f000 80a7 	beq.w	800cc4a <_svfiprintf_r+0x1c6>
 800cafc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cafe:	445a      	add	r2, fp
 800cb00:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb02:	f89a 3000 	ldrb.w	r3, [sl]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 809f 	beq.w	800cc4a <_svfiprintf_r+0x1c6>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb16:	f10a 0a01 	add.w	sl, sl, #1
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	9307      	str	r3, [sp, #28]
 800cb1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb22:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb24:	4654      	mov	r4, sl
 800cb26:	2205      	movs	r2, #5
 800cb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2c:	484e      	ldr	r0, [pc, #312]	@ (800cc68 <_svfiprintf_r+0x1e4>)
 800cb2e:	f7f3 fbe7 	bl	8000300 <memchr>
 800cb32:	9a04      	ldr	r2, [sp, #16]
 800cb34:	b9d8      	cbnz	r0, 800cb6e <_svfiprintf_r+0xea>
 800cb36:	06d0      	lsls	r0, r2, #27
 800cb38:	bf44      	itt	mi
 800cb3a:	2320      	movmi	r3, #32
 800cb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb40:	0711      	lsls	r1, r2, #28
 800cb42:	bf44      	itt	mi
 800cb44:	232b      	movmi	r3, #43	@ 0x2b
 800cb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb4a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb50:	d015      	beq.n	800cb7e <_svfiprintf_r+0xfa>
 800cb52:	9a07      	ldr	r2, [sp, #28]
 800cb54:	4654      	mov	r4, sl
 800cb56:	2000      	movs	r0, #0
 800cb58:	f04f 0c0a 	mov.w	ip, #10
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb62:	3b30      	subs	r3, #48	@ 0x30
 800cb64:	2b09      	cmp	r3, #9
 800cb66:	d94b      	bls.n	800cc00 <_svfiprintf_r+0x17c>
 800cb68:	b1b0      	cbz	r0, 800cb98 <_svfiprintf_r+0x114>
 800cb6a:	9207      	str	r2, [sp, #28]
 800cb6c:	e014      	b.n	800cb98 <_svfiprintf_r+0x114>
 800cb6e:	eba0 0308 	sub.w	r3, r0, r8
 800cb72:	fa09 f303 	lsl.w	r3, r9, r3
 800cb76:	4313      	orrs	r3, r2
 800cb78:	9304      	str	r3, [sp, #16]
 800cb7a:	46a2      	mov	sl, r4
 800cb7c:	e7d2      	b.n	800cb24 <_svfiprintf_r+0xa0>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	1d19      	adds	r1, r3, #4
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	9103      	str	r1, [sp, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	bfbb      	ittet	lt
 800cb8a:	425b      	neglt	r3, r3
 800cb8c:	f042 0202 	orrlt.w	r2, r2, #2
 800cb90:	9307      	strge	r3, [sp, #28]
 800cb92:	9307      	strlt	r3, [sp, #28]
 800cb94:	bfb8      	it	lt
 800cb96:	9204      	strlt	r2, [sp, #16]
 800cb98:	7823      	ldrb	r3, [r4, #0]
 800cb9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb9c:	d10a      	bne.n	800cbb4 <_svfiprintf_r+0x130>
 800cb9e:	7863      	ldrb	r3, [r4, #1]
 800cba0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cba2:	d132      	bne.n	800cc0a <_svfiprintf_r+0x186>
 800cba4:	9b03      	ldr	r3, [sp, #12]
 800cba6:	1d1a      	adds	r2, r3, #4
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	9203      	str	r2, [sp, #12]
 800cbac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbb0:	3402      	adds	r4, #2
 800cbb2:	9305      	str	r3, [sp, #20]
 800cbb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cc78 <_svfiprintf_r+0x1f4>
 800cbb8:	7821      	ldrb	r1, [r4, #0]
 800cbba:	2203      	movs	r2, #3
 800cbbc:	4650      	mov	r0, sl
 800cbbe:	f7f3 fb9f 	bl	8000300 <memchr>
 800cbc2:	b138      	cbz	r0, 800cbd4 <_svfiprintf_r+0x150>
 800cbc4:	9b04      	ldr	r3, [sp, #16]
 800cbc6:	eba0 000a 	sub.w	r0, r0, sl
 800cbca:	2240      	movs	r2, #64	@ 0x40
 800cbcc:	4082      	lsls	r2, r0
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	3401      	adds	r4, #1
 800cbd2:	9304      	str	r3, [sp, #16]
 800cbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd8:	4824      	ldr	r0, [pc, #144]	@ (800cc6c <_svfiprintf_r+0x1e8>)
 800cbda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbde:	2206      	movs	r2, #6
 800cbe0:	f7f3 fb8e 	bl	8000300 <memchr>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d036      	beq.n	800cc56 <_svfiprintf_r+0x1d2>
 800cbe8:	4b21      	ldr	r3, [pc, #132]	@ (800cc70 <_svfiprintf_r+0x1ec>)
 800cbea:	bb1b      	cbnz	r3, 800cc34 <_svfiprintf_r+0x1b0>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	3307      	adds	r3, #7
 800cbf0:	f023 0307 	bic.w	r3, r3, #7
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbfa:	4433      	add	r3, r6
 800cbfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbfe:	e76a      	b.n	800cad6 <_svfiprintf_r+0x52>
 800cc00:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc04:	460c      	mov	r4, r1
 800cc06:	2001      	movs	r0, #1
 800cc08:	e7a8      	b.n	800cb5c <_svfiprintf_r+0xd8>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	3401      	adds	r4, #1
 800cc0e:	9305      	str	r3, [sp, #20]
 800cc10:	4619      	mov	r1, r3
 800cc12:	f04f 0c0a 	mov.w	ip, #10
 800cc16:	4620      	mov	r0, r4
 800cc18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1c:	3a30      	subs	r2, #48	@ 0x30
 800cc1e:	2a09      	cmp	r2, #9
 800cc20:	d903      	bls.n	800cc2a <_svfiprintf_r+0x1a6>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d0c6      	beq.n	800cbb4 <_svfiprintf_r+0x130>
 800cc26:	9105      	str	r1, [sp, #20]
 800cc28:	e7c4      	b.n	800cbb4 <_svfiprintf_r+0x130>
 800cc2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc2e:	4604      	mov	r4, r0
 800cc30:	2301      	movs	r3, #1
 800cc32:	e7f0      	b.n	800cc16 <_svfiprintf_r+0x192>
 800cc34:	ab03      	add	r3, sp, #12
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	462a      	mov	r2, r5
 800cc3a:	4b0e      	ldr	r3, [pc, #56]	@ (800cc74 <_svfiprintf_r+0x1f0>)
 800cc3c:	a904      	add	r1, sp, #16
 800cc3e:	4638      	mov	r0, r7
 800cc40:	f3af 8000 	nop.w
 800cc44:	1c42      	adds	r2, r0, #1
 800cc46:	4606      	mov	r6, r0
 800cc48:	d1d6      	bne.n	800cbf8 <_svfiprintf_r+0x174>
 800cc4a:	89ab      	ldrh	r3, [r5, #12]
 800cc4c:	065b      	lsls	r3, r3, #25
 800cc4e:	f53f af2d 	bmi.w	800caac <_svfiprintf_r+0x28>
 800cc52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc54:	e72c      	b.n	800cab0 <_svfiprintf_r+0x2c>
 800cc56:	ab03      	add	r3, sp, #12
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	462a      	mov	r2, r5
 800cc5c:	4b05      	ldr	r3, [pc, #20]	@ (800cc74 <_svfiprintf_r+0x1f0>)
 800cc5e:	a904      	add	r1, sp, #16
 800cc60:	4638      	mov	r0, r7
 800cc62:	f000 f879 	bl	800cd58 <_printf_i>
 800cc66:	e7ed      	b.n	800cc44 <_svfiprintf_r+0x1c0>
 800cc68:	0800d3f4 	.word	0x0800d3f4
 800cc6c:	0800d3fe 	.word	0x0800d3fe
 800cc70:	00000000 	.word	0x00000000
 800cc74:	0800c9cd 	.word	0x0800c9cd
 800cc78:	0800d3fa 	.word	0x0800d3fa

0800cc7c <_printf_common>:
 800cc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc80:	4616      	mov	r6, r2
 800cc82:	4698      	mov	r8, r3
 800cc84:	688a      	ldr	r2, [r1, #8]
 800cc86:	690b      	ldr	r3, [r1, #16]
 800cc88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	bfb8      	it	lt
 800cc90:	4613      	movlt	r3, r2
 800cc92:	6033      	str	r3, [r6, #0]
 800cc94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cc98:	4607      	mov	r7, r0
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	b10a      	cbz	r2, 800cca2 <_printf_common+0x26>
 800cc9e:	3301      	adds	r3, #1
 800cca0:	6033      	str	r3, [r6, #0]
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	0699      	lsls	r1, r3, #26
 800cca6:	bf42      	ittt	mi
 800cca8:	6833      	ldrmi	r3, [r6, #0]
 800ccaa:	3302      	addmi	r3, #2
 800ccac:	6033      	strmi	r3, [r6, #0]
 800ccae:	6825      	ldr	r5, [r4, #0]
 800ccb0:	f015 0506 	ands.w	r5, r5, #6
 800ccb4:	d106      	bne.n	800ccc4 <_printf_common+0x48>
 800ccb6:	f104 0a19 	add.w	sl, r4, #25
 800ccba:	68e3      	ldr	r3, [r4, #12]
 800ccbc:	6832      	ldr	r2, [r6, #0]
 800ccbe:	1a9b      	subs	r3, r3, r2
 800ccc0:	42ab      	cmp	r3, r5
 800ccc2:	dc26      	bgt.n	800cd12 <_printf_common+0x96>
 800ccc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ccc8:	6822      	ldr	r2, [r4, #0]
 800ccca:	3b00      	subs	r3, #0
 800cccc:	bf18      	it	ne
 800ccce:	2301      	movne	r3, #1
 800ccd0:	0692      	lsls	r2, r2, #26
 800ccd2:	d42b      	bmi.n	800cd2c <_printf_common+0xb0>
 800ccd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ccd8:	4641      	mov	r1, r8
 800ccda:	4638      	mov	r0, r7
 800ccdc:	47c8      	blx	r9
 800ccde:	3001      	adds	r0, #1
 800cce0:	d01e      	beq.n	800cd20 <_printf_common+0xa4>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	6922      	ldr	r2, [r4, #16]
 800cce6:	f003 0306 	and.w	r3, r3, #6
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	bf02      	ittt	eq
 800ccee:	68e5      	ldreq	r5, [r4, #12]
 800ccf0:	6833      	ldreq	r3, [r6, #0]
 800ccf2:	1aed      	subeq	r5, r5, r3
 800ccf4:	68a3      	ldr	r3, [r4, #8]
 800ccf6:	bf0c      	ite	eq
 800ccf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccfc:	2500      	movne	r5, #0
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	bfc4      	itt	gt
 800cd02:	1a9b      	subgt	r3, r3, r2
 800cd04:	18ed      	addgt	r5, r5, r3
 800cd06:	2600      	movs	r6, #0
 800cd08:	341a      	adds	r4, #26
 800cd0a:	42b5      	cmp	r5, r6
 800cd0c:	d11a      	bne.n	800cd44 <_printf_common+0xc8>
 800cd0e:	2000      	movs	r0, #0
 800cd10:	e008      	b.n	800cd24 <_printf_common+0xa8>
 800cd12:	2301      	movs	r3, #1
 800cd14:	4652      	mov	r2, sl
 800cd16:	4641      	mov	r1, r8
 800cd18:	4638      	mov	r0, r7
 800cd1a:	47c8      	blx	r9
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d103      	bne.n	800cd28 <_printf_common+0xac>
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd28:	3501      	adds	r5, #1
 800cd2a:	e7c6      	b.n	800ccba <_printf_common+0x3e>
 800cd2c:	18e1      	adds	r1, r4, r3
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	2030      	movs	r0, #48	@ 0x30
 800cd32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd36:	4422      	add	r2, r4
 800cd38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd40:	3302      	adds	r3, #2
 800cd42:	e7c7      	b.n	800ccd4 <_printf_common+0x58>
 800cd44:	2301      	movs	r3, #1
 800cd46:	4622      	mov	r2, r4
 800cd48:	4641      	mov	r1, r8
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	47c8      	blx	r9
 800cd4e:	3001      	adds	r0, #1
 800cd50:	d0e6      	beq.n	800cd20 <_printf_common+0xa4>
 800cd52:	3601      	adds	r6, #1
 800cd54:	e7d9      	b.n	800cd0a <_printf_common+0x8e>
	...

0800cd58 <_printf_i>:
 800cd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd5c:	7e0f      	ldrb	r7, [r1, #24]
 800cd5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd60:	2f78      	cmp	r7, #120	@ 0x78
 800cd62:	4691      	mov	r9, r2
 800cd64:	4680      	mov	r8, r0
 800cd66:	460c      	mov	r4, r1
 800cd68:	469a      	mov	sl, r3
 800cd6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd6e:	d807      	bhi.n	800cd80 <_printf_i+0x28>
 800cd70:	2f62      	cmp	r7, #98	@ 0x62
 800cd72:	d80a      	bhi.n	800cd8a <_printf_i+0x32>
 800cd74:	2f00      	cmp	r7, #0
 800cd76:	f000 80d2 	beq.w	800cf1e <_printf_i+0x1c6>
 800cd7a:	2f58      	cmp	r7, #88	@ 0x58
 800cd7c:	f000 80b9 	beq.w	800cef2 <_printf_i+0x19a>
 800cd80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cd88:	e03a      	b.n	800ce00 <_printf_i+0xa8>
 800cd8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cd8e:	2b15      	cmp	r3, #21
 800cd90:	d8f6      	bhi.n	800cd80 <_printf_i+0x28>
 800cd92:	a101      	add	r1, pc, #4	@ (adr r1, 800cd98 <_printf_i+0x40>)
 800cd94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd98:	0800cdf1 	.word	0x0800cdf1
 800cd9c:	0800ce05 	.word	0x0800ce05
 800cda0:	0800cd81 	.word	0x0800cd81
 800cda4:	0800cd81 	.word	0x0800cd81
 800cda8:	0800cd81 	.word	0x0800cd81
 800cdac:	0800cd81 	.word	0x0800cd81
 800cdb0:	0800ce05 	.word	0x0800ce05
 800cdb4:	0800cd81 	.word	0x0800cd81
 800cdb8:	0800cd81 	.word	0x0800cd81
 800cdbc:	0800cd81 	.word	0x0800cd81
 800cdc0:	0800cd81 	.word	0x0800cd81
 800cdc4:	0800cf05 	.word	0x0800cf05
 800cdc8:	0800ce2f 	.word	0x0800ce2f
 800cdcc:	0800cebf 	.word	0x0800cebf
 800cdd0:	0800cd81 	.word	0x0800cd81
 800cdd4:	0800cd81 	.word	0x0800cd81
 800cdd8:	0800cf27 	.word	0x0800cf27
 800cddc:	0800cd81 	.word	0x0800cd81
 800cde0:	0800ce2f 	.word	0x0800ce2f
 800cde4:	0800cd81 	.word	0x0800cd81
 800cde8:	0800cd81 	.word	0x0800cd81
 800cdec:	0800cec7 	.word	0x0800cec7
 800cdf0:	6833      	ldr	r3, [r6, #0]
 800cdf2:	1d1a      	adds	r2, r3, #4
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	6032      	str	r2, [r6, #0]
 800cdf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce00:	2301      	movs	r3, #1
 800ce02:	e09d      	b.n	800cf40 <_printf_i+0x1e8>
 800ce04:	6833      	ldr	r3, [r6, #0]
 800ce06:	6820      	ldr	r0, [r4, #0]
 800ce08:	1d19      	adds	r1, r3, #4
 800ce0a:	6031      	str	r1, [r6, #0]
 800ce0c:	0606      	lsls	r6, r0, #24
 800ce0e:	d501      	bpl.n	800ce14 <_printf_i+0xbc>
 800ce10:	681d      	ldr	r5, [r3, #0]
 800ce12:	e003      	b.n	800ce1c <_printf_i+0xc4>
 800ce14:	0645      	lsls	r5, r0, #25
 800ce16:	d5fb      	bpl.n	800ce10 <_printf_i+0xb8>
 800ce18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce1c:	2d00      	cmp	r5, #0
 800ce1e:	da03      	bge.n	800ce28 <_printf_i+0xd0>
 800ce20:	232d      	movs	r3, #45	@ 0x2d
 800ce22:	426d      	negs	r5, r5
 800ce24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce28:	4859      	ldr	r0, [pc, #356]	@ (800cf90 <_printf_i+0x238>)
 800ce2a:	230a      	movs	r3, #10
 800ce2c:	e011      	b.n	800ce52 <_printf_i+0xfa>
 800ce2e:	6821      	ldr	r1, [r4, #0]
 800ce30:	6833      	ldr	r3, [r6, #0]
 800ce32:	0608      	lsls	r0, r1, #24
 800ce34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce38:	d402      	bmi.n	800ce40 <_printf_i+0xe8>
 800ce3a:	0649      	lsls	r1, r1, #25
 800ce3c:	bf48      	it	mi
 800ce3e:	b2ad      	uxthmi	r5, r5
 800ce40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce42:	4853      	ldr	r0, [pc, #332]	@ (800cf90 <_printf_i+0x238>)
 800ce44:	6033      	str	r3, [r6, #0]
 800ce46:	bf14      	ite	ne
 800ce48:	230a      	movne	r3, #10
 800ce4a:	2308      	moveq	r3, #8
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce52:	6866      	ldr	r6, [r4, #4]
 800ce54:	60a6      	str	r6, [r4, #8]
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	bfa2      	ittt	ge
 800ce5a:	6821      	ldrge	r1, [r4, #0]
 800ce5c:	f021 0104 	bicge.w	r1, r1, #4
 800ce60:	6021      	strge	r1, [r4, #0]
 800ce62:	b90d      	cbnz	r5, 800ce68 <_printf_i+0x110>
 800ce64:	2e00      	cmp	r6, #0
 800ce66:	d04b      	beq.n	800cf00 <_printf_i+0x1a8>
 800ce68:	4616      	mov	r6, r2
 800ce6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce6e:	fb03 5711 	mls	r7, r3, r1, r5
 800ce72:	5dc7      	ldrb	r7, [r0, r7]
 800ce74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce78:	462f      	mov	r7, r5
 800ce7a:	42bb      	cmp	r3, r7
 800ce7c:	460d      	mov	r5, r1
 800ce7e:	d9f4      	bls.n	800ce6a <_printf_i+0x112>
 800ce80:	2b08      	cmp	r3, #8
 800ce82:	d10b      	bne.n	800ce9c <_printf_i+0x144>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	07df      	lsls	r7, r3, #31
 800ce88:	d508      	bpl.n	800ce9c <_printf_i+0x144>
 800ce8a:	6923      	ldr	r3, [r4, #16]
 800ce8c:	6861      	ldr	r1, [r4, #4]
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	bfde      	ittt	le
 800ce92:	2330      	movle	r3, #48	@ 0x30
 800ce94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce9c:	1b92      	subs	r2, r2, r6
 800ce9e:	6122      	str	r2, [r4, #16]
 800cea0:	f8cd a000 	str.w	sl, [sp]
 800cea4:	464b      	mov	r3, r9
 800cea6:	aa03      	add	r2, sp, #12
 800cea8:	4621      	mov	r1, r4
 800ceaa:	4640      	mov	r0, r8
 800ceac:	f7ff fee6 	bl	800cc7c <_printf_common>
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	d14a      	bne.n	800cf4a <_printf_i+0x1f2>
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb8:	b004      	add	sp, #16
 800ceba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	f043 0320 	orr.w	r3, r3, #32
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	4833      	ldr	r0, [pc, #204]	@ (800cf94 <_printf_i+0x23c>)
 800cec8:	2778      	movs	r7, #120	@ 0x78
 800ceca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	6831      	ldr	r1, [r6, #0]
 800ced2:	061f      	lsls	r7, r3, #24
 800ced4:	f851 5b04 	ldr.w	r5, [r1], #4
 800ced8:	d402      	bmi.n	800cee0 <_printf_i+0x188>
 800ceda:	065f      	lsls	r7, r3, #25
 800cedc:	bf48      	it	mi
 800cede:	b2ad      	uxthmi	r5, r5
 800cee0:	6031      	str	r1, [r6, #0]
 800cee2:	07d9      	lsls	r1, r3, #31
 800cee4:	bf44      	itt	mi
 800cee6:	f043 0320 	orrmi.w	r3, r3, #32
 800ceea:	6023      	strmi	r3, [r4, #0]
 800ceec:	b11d      	cbz	r5, 800cef6 <_printf_i+0x19e>
 800ceee:	2310      	movs	r3, #16
 800cef0:	e7ac      	b.n	800ce4c <_printf_i+0xf4>
 800cef2:	4827      	ldr	r0, [pc, #156]	@ (800cf90 <_printf_i+0x238>)
 800cef4:	e7e9      	b.n	800ceca <_printf_i+0x172>
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	f023 0320 	bic.w	r3, r3, #32
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	e7f6      	b.n	800ceee <_printf_i+0x196>
 800cf00:	4616      	mov	r6, r2
 800cf02:	e7bd      	b.n	800ce80 <_printf_i+0x128>
 800cf04:	6833      	ldr	r3, [r6, #0]
 800cf06:	6825      	ldr	r5, [r4, #0]
 800cf08:	6961      	ldr	r1, [r4, #20]
 800cf0a:	1d18      	adds	r0, r3, #4
 800cf0c:	6030      	str	r0, [r6, #0]
 800cf0e:	062e      	lsls	r6, r5, #24
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	d501      	bpl.n	800cf18 <_printf_i+0x1c0>
 800cf14:	6019      	str	r1, [r3, #0]
 800cf16:	e002      	b.n	800cf1e <_printf_i+0x1c6>
 800cf18:	0668      	lsls	r0, r5, #25
 800cf1a:	d5fb      	bpl.n	800cf14 <_printf_i+0x1bc>
 800cf1c:	8019      	strh	r1, [r3, #0]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	6123      	str	r3, [r4, #16]
 800cf22:	4616      	mov	r6, r2
 800cf24:	e7bc      	b.n	800cea0 <_printf_i+0x148>
 800cf26:	6833      	ldr	r3, [r6, #0]
 800cf28:	1d1a      	adds	r2, r3, #4
 800cf2a:	6032      	str	r2, [r6, #0]
 800cf2c:	681e      	ldr	r6, [r3, #0]
 800cf2e:	6862      	ldr	r2, [r4, #4]
 800cf30:	2100      	movs	r1, #0
 800cf32:	4630      	mov	r0, r6
 800cf34:	f7f3 f9e4 	bl	8000300 <memchr>
 800cf38:	b108      	cbz	r0, 800cf3e <_printf_i+0x1e6>
 800cf3a:	1b80      	subs	r0, r0, r6
 800cf3c:	6060      	str	r0, [r4, #4]
 800cf3e:	6863      	ldr	r3, [r4, #4]
 800cf40:	6123      	str	r3, [r4, #16]
 800cf42:	2300      	movs	r3, #0
 800cf44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf48:	e7aa      	b.n	800cea0 <_printf_i+0x148>
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	4649      	mov	r1, r9
 800cf50:	4640      	mov	r0, r8
 800cf52:	47d0      	blx	sl
 800cf54:	3001      	adds	r0, #1
 800cf56:	d0ad      	beq.n	800ceb4 <_printf_i+0x15c>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	079b      	lsls	r3, r3, #30
 800cf5c:	d413      	bmi.n	800cf86 <_printf_i+0x22e>
 800cf5e:	68e0      	ldr	r0, [r4, #12]
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	4298      	cmp	r0, r3
 800cf64:	bfb8      	it	lt
 800cf66:	4618      	movlt	r0, r3
 800cf68:	e7a6      	b.n	800ceb8 <_printf_i+0x160>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	4649      	mov	r1, r9
 800cf70:	4640      	mov	r0, r8
 800cf72:	47d0      	blx	sl
 800cf74:	3001      	adds	r0, #1
 800cf76:	d09d      	beq.n	800ceb4 <_printf_i+0x15c>
 800cf78:	3501      	adds	r5, #1
 800cf7a:	68e3      	ldr	r3, [r4, #12]
 800cf7c:	9903      	ldr	r1, [sp, #12]
 800cf7e:	1a5b      	subs	r3, r3, r1
 800cf80:	42ab      	cmp	r3, r5
 800cf82:	dcf2      	bgt.n	800cf6a <_printf_i+0x212>
 800cf84:	e7eb      	b.n	800cf5e <_printf_i+0x206>
 800cf86:	2500      	movs	r5, #0
 800cf88:	f104 0619 	add.w	r6, r4, #25
 800cf8c:	e7f5      	b.n	800cf7a <_printf_i+0x222>
 800cf8e:	bf00      	nop
 800cf90:	0800d405 	.word	0x0800d405
 800cf94:	0800d416 	.word	0x0800d416

0800cf98 <memmove>:
 800cf98:	4288      	cmp	r0, r1
 800cf9a:	b510      	push	{r4, lr}
 800cf9c:	eb01 0402 	add.w	r4, r1, r2
 800cfa0:	d902      	bls.n	800cfa8 <memmove+0x10>
 800cfa2:	4284      	cmp	r4, r0
 800cfa4:	4623      	mov	r3, r4
 800cfa6:	d807      	bhi.n	800cfb8 <memmove+0x20>
 800cfa8:	1e43      	subs	r3, r0, #1
 800cfaa:	42a1      	cmp	r1, r4
 800cfac:	d008      	beq.n	800cfc0 <memmove+0x28>
 800cfae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfb6:	e7f8      	b.n	800cfaa <memmove+0x12>
 800cfb8:	4402      	add	r2, r0
 800cfba:	4601      	mov	r1, r0
 800cfbc:	428a      	cmp	r2, r1
 800cfbe:	d100      	bne.n	800cfc2 <memmove+0x2a>
 800cfc0:	bd10      	pop	{r4, pc}
 800cfc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfca:	e7f7      	b.n	800cfbc <memmove+0x24>

0800cfcc <_sbrk_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d06      	ldr	r5, [pc, #24]	@ (800cfe8 <_sbrk_r+0x1c>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	f7f4 ff36 	bl	8001e48 <_sbrk>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_sbrk_r+0x1a>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_sbrk_r+0x1a>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	24075b4c 	.word	0x24075b4c

0800cfec <memcpy>:
 800cfec:	440a      	add	r2, r1
 800cfee:	4291      	cmp	r1, r2
 800cff0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cff4:	d100      	bne.n	800cff8 <memcpy+0xc>
 800cff6:	4770      	bx	lr
 800cff8:	b510      	push	{r4, lr}
 800cffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d002:	4291      	cmp	r1, r2
 800d004:	d1f9      	bne.n	800cffa <memcpy+0xe>
 800d006:	bd10      	pop	{r4, pc}

0800d008 <_realloc_r>:
 800d008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d00c:	4680      	mov	r8, r0
 800d00e:	4615      	mov	r5, r2
 800d010:	460c      	mov	r4, r1
 800d012:	b921      	cbnz	r1, 800d01e <_realloc_r+0x16>
 800d014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	4611      	mov	r1, r2
 800d01a:	f7ff bc4b 	b.w	800c8b4 <_malloc_r>
 800d01e:	b92a      	cbnz	r2, 800d02c <_realloc_r+0x24>
 800d020:	f7ff fbdc 	bl	800c7dc <_free_r>
 800d024:	2400      	movs	r4, #0
 800d026:	4620      	mov	r0, r4
 800d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d02c:	f000 f81a 	bl	800d064 <_malloc_usable_size_r>
 800d030:	4285      	cmp	r5, r0
 800d032:	4606      	mov	r6, r0
 800d034:	d802      	bhi.n	800d03c <_realloc_r+0x34>
 800d036:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d03a:	d8f4      	bhi.n	800d026 <_realloc_r+0x1e>
 800d03c:	4629      	mov	r1, r5
 800d03e:	4640      	mov	r0, r8
 800d040:	f7ff fc38 	bl	800c8b4 <_malloc_r>
 800d044:	4607      	mov	r7, r0
 800d046:	2800      	cmp	r0, #0
 800d048:	d0ec      	beq.n	800d024 <_realloc_r+0x1c>
 800d04a:	42b5      	cmp	r5, r6
 800d04c:	462a      	mov	r2, r5
 800d04e:	4621      	mov	r1, r4
 800d050:	bf28      	it	cs
 800d052:	4632      	movcs	r2, r6
 800d054:	f7ff ffca 	bl	800cfec <memcpy>
 800d058:	4621      	mov	r1, r4
 800d05a:	4640      	mov	r0, r8
 800d05c:	f7ff fbbe 	bl	800c7dc <_free_r>
 800d060:	463c      	mov	r4, r7
 800d062:	e7e0      	b.n	800d026 <_realloc_r+0x1e>

0800d064 <_malloc_usable_size_r>:
 800d064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d068:	1f18      	subs	r0, r3, #4
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bfbc      	itt	lt
 800d06e:	580b      	ldrlt	r3, [r1, r0]
 800d070:	18c0      	addlt	r0, r0, r3
 800d072:	4770      	bx	lr

0800d074 <_init>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	bf00      	nop
 800d078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d07a:	bc08      	pop	{r3}
 800d07c:	469e      	mov	lr, r3
 800d07e:	4770      	bx	lr

0800d080 <_fini>:
 800d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d082:	bf00      	nop
 800d084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d086:	bc08      	pop	{r3}
 800d088:	469e      	mov	lr, r3
 800d08a:	4770      	bx	lr
