
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001027c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0801052c  0801052c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080108b8  080108b8  000118b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080108c0  080108c0  000118c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080108c4  080108c4  000118c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080108c8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000ac9c4  24000070  08010934  00012070  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  240aca34  08010934  00012a34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000441d3  00000000  00000000  0001209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c1e  00000000  00000000  0005626d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00029a20  00000000  00000000  0005ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a78  00000000  00000000  000868b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000046b3  00000000  00000000  00088328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a689  00000000  00000000  0008c9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004855f  00000000  00000000  000c7064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00163b6a  00000000  00000000  0010f5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0027312d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000057d0  00000000  00000000  00273170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006c  00000000  00000000  00278940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010514 	.word	0x08010514

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	08010514 	.word	0x08010514

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	461d      	mov	r5, r3
 8000398:	460e      	mov	r6, r1
 800039a:	4604      	mov	r4, r0
 800039c:	9b08      	ldr	r3, [sp, #32]
  uint32_t readSize= 0;
 800039e:	2100      	movs	r1, #0
  
  pavi->pVideoBuffer = pVideoBuffer;
 80003a0:	6342      	str	r2, [r0, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;

  pavi->pAudioBuffer = pAudioBuffer;
 80003a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
{
 80003a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  pavi->VideoBufferSize = VideoBufferSize;
 80003a6:	6385      	str	r5, [r0, #56]	@ 0x38
  pavi->AudioBufferSize = AudioBufferSize;
 80003a8:	6403      	str	r3, [r0, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80003aa:	4630      	mov	r0, r6
  uint32_t readSize= 0;
 80003ac:	9101      	str	r1, [sp, #4]
  f_lseek(file, 0 );
 80003ae:	f00f fa1f 	bl	800f7f0 <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80003b2:	ab01      	add	r3, sp, #4
 80003b4:	462a      	mov	r2, r5
 80003b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80003b8:	4630      	mov	r0, r6
 80003ba:	f00f f85f 	bl	800f47c <f_read>
  if(readSize != VideoBufferSize)
 80003be:	9b01      	ldr	r3, [sp, #4]
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d104      	bne.n	80003ce <AVI_ParserInit+0x3e>
  {
    return 1;
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 80003c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  if(aviheader->RiffID != AVI_RIFF_ID)
 80003c6:	4a86      	ldr	r2, [pc, #536]	@ (80005e0 <AVI_ParserInit+0x250>)
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	4291      	cmp	r1, r2
 80003cc:	d003      	beq.n	80003d6 <AVI_ParserInit+0x46>
    return 1;
 80003ce:	2001      	movs	r0, #1

  pavi->FileSize= f_size(file);
  pavi->CurrentImage=0;
  
  return  0;
}
 80003d0:	b002      	add	sp, #8
 80003d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(aviheader->AviID != AVI_AVI_ID)
 80003d6:	4a83      	ldr	r2, [pc, #524]	@ (80005e4 <AVI_ParserInit+0x254>)
 80003d8:	6899      	ldr	r1, [r3, #8]
 80003da:	4291      	cmp	r1, r2
 80003dc:	d1f7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListID != AVI_LIST_ID)
 80003de:	4982      	ldr	r1, [pc, #520]	@ (80005e8 <AVI_ParserInit+0x258>)
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	428a      	cmp	r2, r1
 80003e4:	d1f3      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_HDRL_ID)
 80003e6:	4981      	ldr	r1, [pc, #516]	@ (80005ec <AVI_ParserInit+0x25c>)
 80003e8:	6958      	ldr	r0, [r3, #20]
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d1ef      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(avihheader->BlockID != AVI_AVIH_ID)
 80003ee:	f1a1 6181 	sub.w	r1, r1, #67633152	@ 0x4080000
 80003f2:	6998      	ldr	r0, [r3, #24]
 80003f4:	f5a1 416e 	sub.w	r1, r1, #60928	@ 0xee00
 80003f8:	3907      	subs	r1, #7
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d1e7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 80003fe:	6a18      	ldr	r0, [r3, #32]
 8000400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000402:	e9c4 0100 	strd	r0, r1, [r4]
  buf+=avihheader->BlockSize+8;            
 8000406:	69d9      	ldr	r1, [r3, #28]
 8000408:	3120      	adds	r1, #32
  if(listheader->ListID != AVI_LIST_ID)
 800040a:	5858      	ldr	r0, [r3, r1]
  buf+=avihheader->BlockSize+8;            
 800040c:	4419      	add	r1, r3
  if(listheader->ListID != AVI_LIST_ID)
 800040e:	4290      	cmp	r0, r2
 8000410:	d1dd      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_STRL_ID)
 8000412:	4a77      	ldr	r2, [pc, #476]	@ (80005f0 <AVI_ParserInit+0x260>)
 8000414:	6888      	ldr	r0, [r1, #8]
 8000416:	4290      	cmp	r0, r2
 8000418:	d1d9      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->BlockID != AVI_STRH_ID)
 800041a:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
 800041e:	68c8      	ldr	r0, [r1, #12]
 8000420:	4290      	cmp	r0, r2
 8000422:	d1d4      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 8000424:	694a      	ldr	r2, [r1, #20]
 8000426:	4873      	ldr	r0, [pc, #460]	@ (80005f4 <AVI_ParserInit+0x264>)
 8000428:	4282      	cmp	r2, r0
 800042a:	d02a      	beq.n	8000482 <AVI_ParserInit+0xf2>
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800042c:	4872      	ldr	r0, [pc, #456]	@ (80005f8 <AVI_ParserInit+0x268>)
 800042e:	4282      	cmp	r2, r0
 8000430:	d047      	beq.n	80004c2 <AVI_ParserInit+0x132>
  for(i=0;i<size;i++)
 8000432:	3d04      	subs	r5, #4
 8000434:	d0cb      	beq.n	80003ce <AVI_ParserInit+0x3e>
 8000436:	2200      	movs	r2, #0
 8000438:	4611      	mov	r1, r2
 800043a:	e002      	b.n	8000442 <AVI_ParserInit+0xb2>
 800043c:	4295      	cmp	r5, r2
 800043e:	4611      	mov	r1, r2
 8000440:	d9c5      	bls.n	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 8000442:	5c58      	ldrb	r0, [r3, r1]
  for(i=0;i<size;i++)
 8000444:	3201      	adds	r2, #1
    if(buf[i] == id[0])
 8000446:	eb03 0c01 	add.w	ip, r3, r1
 800044a:	286d      	cmp	r0, #109	@ 0x6d
  for(i=0;i<size;i++)
 800044c:	b292      	uxth	r2, r2
    if(buf[i] == id[0])
 800044e:	d1f5      	bne.n	800043c <AVI_ParserInit+0xac>
      if(buf[i+1] == id[1])
 8000450:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8000454:	286f      	cmp	r0, #111	@ 0x6f
 8000456:	d1f1      	bne.n	800043c <AVI_ParserInit+0xac>
        if(buf[i+2] == id[2])  
 8000458:	f89c 0002 	ldrb.w	r0, [ip, #2]
 800045c:	2876      	cmp	r0, #118	@ 0x76
 800045e:	d1ed      	bne.n	800043c <AVI_ParserInit+0xac>
          if(buf[i+3] == id[3])
 8000460:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8000464:	2869      	cmp	r0, #105	@ 0x69
 8000466:	d1e9      	bne.n	800043c <AVI_ParserInit+0xac>
  if(offset == 0)
 8000468:	2900      	cmp	r1, #0
 800046a:	d0b0      	beq.n	80003ce <AVI_ParserInit+0x3e>
  if(pavi->aviInfo.SampleRate)
 800046c:	6963      	ldr	r3, [r4, #20]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d169      	bne.n	8000546 <AVI_ParserInit+0x1b6>
  pavi->CurrentImage=0;
 8000472:	2300      	movs	r3, #0
  pavi->FileSize= f_size(file);
 8000474:	68f2      	ldr	r2, [r6, #12]
  return  0;
 8000476:	4618      	mov	r0, r3
  pavi->FileSize= f_size(file);
 8000478:	6462      	str	r2, [r4, #68]	@ 0x44
  pavi->CurrentImage=0;
 800047a:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800047c:	b002      	add	sp, #8
 800047e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000482:	4a5e      	ldr	r2, [pc, #376]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000484:	6988      	ldr	r0, [r1, #24]
 8000486:	4290      	cmp	r0, r2
 8000488:	d1a1      	bne.n	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048a:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800048c:	485c      	ldr	r0, [pc, #368]	@ (8000600 <AVI_ParserInit+0x270>)
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048e:	3214      	adds	r2, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000490:	4f5c      	ldr	r7, [pc, #368]	@ (8000604 <AVI_ParserInit+0x274>)
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000492:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 8000494:	485c      	ldr	r0, [pc, #368]	@ (8000608 <AVI_ParserInit+0x278>)
 8000496:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000498:	5888      	ldr	r0, [r1, r2]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800049a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800049c:	42b8      	cmp	r0, r7
 800049e:	d196      	bne.n	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80004a0:	e9d2 7203 	ldrd	r7, r2, [r2, #12]
 80004a4:	e9c4 7203 	strd	r7, r2, [r4, #12]
    buf+=listheader->BlockSize+8;          
 80004a8:	684a      	ldr	r2, [r1, #4]
    if(listheader->ListID != AVI_LIST_ID)
 80004aa:	4f4f      	ldr	r7, [pc, #316]	@ (80005e8 <AVI_ParserInit+0x258>)
    buf+=listheader->BlockSize+8;          
 80004ac:	3208      	adds	r2, #8
    if(listheader->ListID != AVI_LIST_ID)
 80004ae:	f851 c002 	ldr.w	ip, [r1, r2]
    buf+=listheader->BlockSize+8;          
 80004b2:	440a      	add	r2, r1
    if(listheader->ListID != AVI_LIST_ID)
 80004b4:	45bc      	cmp	ip, r7
 80004b6:	d070      	beq.n	800059a <AVI_ParserInit+0x20a>
      pavi->aviInfo.SampleRate=0;          
 80004b8:	2200      	movs	r2, #0
 80004ba:	6162      	str	r2, [r4, #20]
      pavi->aviInfo.Channels=0;          
 80004bc:	8322      	strh	r2, [r4, #24]
      pavi->aviInfo.AudioType=0;          
 80004be:	83a2      	strh	r2, [r4, #28]
 80004c0:	e7b7      	b.n	8000432 <AVI_ParserInit+0xa2>
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c2:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c4:	4851      	ldr	r0, [pc, #324]	@ (800060c <AVI_ParserInit+0x27c>)
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c6:	3214      	adds	r2, #20
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c8:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004ca:	4851      	ldr	r0, [pc, #324]	@ (8000610 <AVI_ParserInit+0x280>)
    if(wavheader->BlockID != AVI_STRF_ID)
 80004cc:	f851 c002 	ldr.w	ip, [r1, r2]
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004d0:	440a      	add	r2, r1
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004d2:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(wavheader->BlockID != AVI_STRF_ID)
 80004d4:	484b      	ldr	r0, [pc, #300]	@ (8000604 <AVI_ParserInit+0x274>)
 80004d6:	4584      	cmp	ip, r0
 80004d8:	f47f af79 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004dc:	68d7      	ldr	r7, [r2, #12]
    buf+=listheader->BlockSize+8;          
 80004de:	6848      	ldr	r0, [r1, #4]
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004e0:	6167      	str	r7, [r4, #20]
    buf+=listheader->BlockSize+8;          
 80004e2:	3008      	adds	r0, #8
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004e4:	8957      	ldrh	r7, [r2, #10]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004e6:	8912      	ldrh	r2, [r2, #8]
    if(listheader->ListID != AVI_LIST_ID)
 80004e8:	f851 e000 	ldr.w	lr, [r1, r0]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004ec:	8327      	strh	r7, [r4, #24]
    if(listheader->ListID != AVI_LIST_ID)
 80004ee:	4f3e      	ldr	r7, [pc, #248]	@ (80005e8 <AVI_ParserInit+0x258>)
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004f0:	83a2      	strh	r2, [r4, #28]
    buf+=listheader->BlockSize+8;          
 80004f2:	180a      	adds	r2, r1, r0
    if(listheader->ListID != AVI_LIST_ID)
 80004f4:	45be      	cmp	lr, r7
 80004f6:	f47f af6a 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(listheader->ListType != AVI_STRL_ID)
 80004fa:	493d      	ldr	r1, [pc, #244]	@ (80005f0 <AVI_ParserInit+0x260>)
 80004fc:	6890      	ldr	r0, [r2, #8]
 80004fe:	4288      	cmp	r0, r1
 8000500:	f47f af65 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->BlockID != AVI_STRH_ID)
 8000504:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 8000508:	68d0      	ldr	r0, [r2, #12]
 800050a:	4288      	cmp	r0, r1
 800050c:	f47f af5f 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000510:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 8000514:	6950      	ldr	r0, [r2, #20]
 8000516:	f501 31fa 	add.w	r1, r1, #128000	@ 0x1f400
 800051a:	f201 1103 	addw	r1, r1, #259	@ 0x103
 800051e:	4288      	cmp	r0, r1
 8000520:	f47f af55 	bne.w	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000524:	6911      	ldr	r1, [r2, #16]
 8000526:	3114      	adds	r1, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000528:	5850      	ldr	r0, [r2, r1]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800052a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800052c:	4560      	cmp	r0, ip
 800052e:	f47f af4e 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000532:	4932      	ldr	r1, [pc, #200]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000534:	6990      	ldr	r0, [r2, #24]
 8000536:	4288      	cmp	r0, r1
 8000538:	f47f af49 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800053c:	e9d2 1203 	ldrd	r1, r2, [r2, #12]
 8000540:	e9c4 1203 	strd	r1, r2, [r4, #12]
 8000544:	e775      	b.n	8000432 <AVI_ParserInit+0xa2>
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000546:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
  for(i=0;i<size;i++)
 800054a:	2300      	movs	r3, #0
    if(buf[i] == id[0])
 800054c:	f898 0000 	ldrb.w	r0, [r8]
  for(i=0;i<size;i++)
 8000550:	4619      	mov	r1, r3
 8000552:	e003      	b.n	800055c <AVI_ParserInit+0x1cc>
 8000554:	429d      	cmp	r5, r3
 8000556:	4619      	mov	r1, r3
 8000558:	f67f af39 	bls.w	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 800055c:	f81c 2001 	ldrb.w	r2, [ip, r1]
  for(i=0;i<size;i++)
 8000560:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 8000562:	4282      	cmp	r2, r0
  for(i=0;i<size;i++)
 8000564:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000566:	d1f5      	bne.n	8000554 <AVI_ParserInit+0x1c4>
      if(buf[i+1] == id[1])
 8000568:	eb0c 0201 	add.w	r2, ip, r1
 800056c:	f898 e001 	ldrb.w	lr, [r8, #1]
 8000570:	7857      	ldrb	r7, [r2, #1]
 8000572:	4577      	cmp	r7, lr
 8000574:	d1ee      	bne.n	8000554 <AVI_ParserInit+0x1c4>
        if(buf[i+2] == id[2])  
 8000576:	f892 e002 	ldrb.w	lr, [r2, #2]
 800057a:	f898 7002 	ldrb.w	r7, [r8, #2]
 800057e:	45be      	cmp	lr, r7
 8000580:	d1e8      	bne.n	8000554 <AVI_ParserInit+0x1c4>
          if(buf[i+3] == id[3])
 8000582:	f892 e003 	ldrb.w	lr, [r2, #3]
 8000586:	f898 7003 	ldrb.w	r7, [r8, #3]
 800058a:	45be      	cmp	lr, r7
 800058c:	d1e2      	bne.n	8000554 <AVI_ParserInit+0x1c4>
    if(offset == 0)
 800058e:	2900      	cmp	r1, #0
 8000590:	f43f af1d 	beq.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000594:	8893      	ldrh	r3, [r2, #4]
 8000596:	8363      	strh	r3, [r4, #26]
 8000598:	e76b      	b.n	8000472 <AVI_ParserInit+0xe2>
      if(listheader->ListType != AVI_STRL_ID)
 800059a:	4915      	ldr	r1, [pc, #84]	@ (80005f0 <AVI_ParserInit+0x260>)
 800059c:	6897      	ldr	r7, [r2, #8]
 800059e:	428f      	cmp	r7, r1
 80005a0:	f47f af15 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->BlockID != AVI_STRH_ID)
 80005a4:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 80005a8:	68d7      	ldr	r7, [r2, #12]
 80005aa:	428f      	cmp	r7, r1
 80005ac:	f47f af0f 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 80005b0:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 80005b4:	6957      	ldr	r7, [r2, #20]
 80005b6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 80005ba:	31ee      	adds	r1, #238	@ 0xee
 80005bc:	428f      	cmp	r7, r1
 80005be:	f47f af06 	bne.w	80003ce <AVI_ParserInit+0x3e>
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c2:	6911      	ldr	r1, [r2, #16]
 80005c4:	3114      	adds	r1, #20
      if(wavheader->BlockID != AVI_STRF_ID)
 80005c6:	5857      	ldr	r7, [r2, r1]
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c8:	440a      	add	r2, r1
      if(wavheader->BlockID != AVI_STRF_ID)
 80005ca:	4287      	cmp	r7, r0
 80005cc:	f47f aeff 	bne.w	80003ce <AVI_ParserInit+0x3e>
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 80005d0:	68d1      	ldr	r1, [r2, #12]
 80005d2:	6161      	str	r1, [r4, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d4:	8951      	ldrh	r1, [r2, #10]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005d6:	8912      	ldrh	r2, [r2, #8]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d8:	8321      	strh	r1, [r4, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005da:	83a2      	strh	r2, [r4, #28]
 80005dc:	e729      	b.n	8000432 <AVI_ParserInit+0xa2>
 80005de:	bf00      	nop
 80005e0:	46464952 	.word	0x46464952
 80005e4:	20495641 	.word	0x20495641
 80005e8:	5453494c 	.word	0x5453494c
 80005ec:	6c726468 	.word	0x6c726468
 80005f0:	6c727473 	.word	0x6c727473
 80005f4:	73646976 	.word	0x73646976
 80005f8:	73647561 	.word	0x73647561
 80005fc:	47504a4d 	.word	0x47504a4d
 8000600:	0801052c 	.word	0x0801052c
 8000604:	66727473 	.word	0x66727473
 8000608:	08010534 	.word	0x08010534
 800060c:	0801053c 	.word	0x0801053c
 8000610:	08010544 	.word	0x08010544

08000614 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000616:	2300      	movs	r3, #0
{
 8000618:	b083      	sub	sp, #12
  
  if(pavi->CurrentImage== 0 )
 800061a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
{
 800061c:	4605      	mov	r5, r0
 800061e:	460e      	mov	r6, r1
 8000620:	4617      	mov	r7, r2
  uint32_t readSize = 0;
 8000622:	9301      	str	r3, [sp, #4]
  if(pavi->CurrentImage== 0 )
 8000624:	b164      	cbz	r4, 8000640 <AVI_GetFrame+0x2c>
    f_lseek(file, offset + 12 );
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000626:	8beb      	ldrh	r3, [r5, #30]
 8000628:	f246 4263 	movw	r2, #25699	@ 0x6463
 800062c:	4293      	cmp	r3, r2
 800062e:	d046      	beq.n	80006be <AVI_GetFrame+0xaa>

	}
    
    return AVI_VIDEO_FRAME;
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000630:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000634:	4293      	cmp	r3, r2
 8000636:	f000 808c 	beq.w	8000752 <AVI_GetFrame+0x13e>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
    
  }
  
  return 0;
 800063a:	2000      	movs	r0, #0
}
 800063c:	b003      	add	sp, #12
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(file, 0 ); /* Go to the file start */
 8000640:	4621      	mov	r1, r4
 8000642:	4630      	mov	r0, r6
 8000644:	f00f f8d4 	bl	800f7f0 <f_lseek>
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 8000648:	ab01      	add	r3, sp, #4
 800064a:	4630      	mov	r0, r6
 800064c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	@ 0x34
 8000650:	f00e ff14 	bl	800f47c <f_read>
  size-=4;
 8000654:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	@ 0x34
  for(i=0;i<size;i++)
 8000658:	3904      	subs	r1, #4
 800065a:	d01d      	beq.n	8000698 <AVI_GetFrame+0x84>
 800065c:	4623      	mov	r3, r4
 800065e:	e002      	b.n	8000666 <AVI_GetFrame+0x52>
 8000660:	4299      	cmp	r1, r3
 8000662:	461c      	mov	r4, r3
 8000664:	d918      	bls.n	8000698 <AVI_GetFrame+0x84>
    if(buf[i] == id[0])
 8000666:	f812 c004 	ldrb.w	ip, [r2, r4]
  for(i=0;i<size;i++)
 800066a:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 800066c:	f1bc 0f6d 	cmp.w	ip, #109	@ 0x6d
  for(i=0;i<size;i++)
 8000670:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000672:	d1f5      	bne.n	8000660 <AVI_GetFrame+0x4c>
      if(buf[i+1] == id[1])
 8000674:	1910      	adds	r0, r2, r4
 8000676:	f890 c001 	ldrb.w	ip, [r0, #1]
 800067a:	f1bc 0f6f 	cmp.w	ip, #111	@ 0x6f
 800067e:	d1ef      	bne.n	8000660 <AVI_GetFrame+0x4c>
        if(buf[i+2] == id[2])  
 8000680:	f890 c002 	ldrb.w	ip, [r0, #2]
 8000684:	f1bc 0f76 	cmp.w	ip, #118	@ 0x76
 8000688:	d1ea      	bne.n	8000660 <AVI_GetFrame+0x4c>
          if(buf[i+3] == id[3])
 800068a:	78c0      	ldrb	r0, [r0, #3]
 800068c:	2869      	cmp	r0, #105	@ 0x69
 800068e:	d1e7      	bne.n	8000660 <AVI_GetFrame+0x4c>
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000690:	1d23      	adds	r3, r4, #4
    f_lseek(file, offset + 12 );
 8000692:	f104 010c 	add.w	r1, r4, #12
 8000696:	e001      	b.n	800069c <AVI_GetFrame+0x88>
  for(i=0;i<size;i++)
 8000698:	210c      	movs	r1, #12
 800069a:	2304      	movs	r3, #4
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800069c:	441a      	add	r2, r3
    f_lseek(file, offset + 12 );
 800069e:	4630      	mov	r0, r6
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006a0:	8853      	ldrh	r3, [r2, #2]
 80006a2:	ba5b      	rev16	r3, r3
 80006a4:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006a6:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006a8:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 80006aa:	bf48      	it	mi
 80006ac:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006ae:	622b      	str	r3, [r5, #32]
    f_lseek(file, offset + 12 );
 80006b0:	f00f f89e 	bl	800f7f0 <f_lseek>
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80006b4:	8beb      	ldrh	r3, [r5, #30]
 80006b6:	f246 4263 	movw	r2, #25699	@ 0x6463
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d1b8      	bne.n	8000630 <AVI_GetFrame+0x1c>
	if(skipFlag == 1)
 80006be:	2f01      	cmp	r7, #1
 80006c0:	d018      	beq.n	80006f4 <AVI_GetFrame+0xe0>
	else if(skipFlag == 2)
 80006c2:	2f02      	cmp	r7, #2
 80006c4:	d02d      	beq.n	8000722 <AVI_GetFrame+0x10e>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006c6:	6a29      	ldr	r1, [r5, #32]
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006c8:	ab01      	add	r3, sp, #4
 80006ca:	4630      	mov	r0, r6
 80006cc:	f101 0208 	add.w	r2, r1, #8
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006d0:	6329      	str	r1, [r5, #48]	@ 0x30
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006d2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80006d4:	f00e fed2 	bl	800f47c <f_read>
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 80006d8:	6a2a      	ldr	r2, [r5, #32]
 80006da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80006dc:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006de:	885a      	ldrh	r2, [r3, #2]
 80006e0:	ba52      	rev16	r2, r2
 80006e2:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006e4:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006e6:	07d9      	lsls	r1, r3, #31
 80006e8:	461a      	mov	r2, r3
 80006ea:	d518      	bpl.n	800071e <AVI_GetFrame+0x10a>
    pavi->aviInfo.StreamSize++;
 80006ec:	3301      	adds	r3, #1
 80006ee:	622b      	str	r3, [r5, #32]
    return AVI_VIDEO_FRAME;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7a3      	b.n	800063c <AVI_GetFrame+0x28>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006f4:	6a2b      	ldr	r3, [r5, #32]
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006f6:	4630      	mov	r0, r6
 80006f8:	69b1      	ldr	r1, [r6, #24]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006fa:	632b      	str	r3, [r5, #48]	@ 0x30
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006fc:	4419      	add	r1, r3
 80006fe:	f00f f877 	bl	800f7f0 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000702:	ab01      	add	r3, sp, #4
 8000704:	2208      	movs	r2, #8
 8000706:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000708:	4630      	mov	r0, r6
 800070a:	f00e feb7 	bl	800f47c <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800070e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000710:	8853      	ldrh	r3, [r2, #2]
 8000712:	ba5b      	rev16	r3, r3
 8000714:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000716:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000718:	07dc      	lsls	r4, r3, #31
 800071a:	461a      	mov	r2, r3
 800071c:	d4e6      	bmi.n	80006ec <AVI_GetFrame+0xd8>
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800071e:	622a      	str	r2, [r5, #32]
 8000720:	e7e6      	b.n	80006f0 <AVI_GetFrame+0xdc>
		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 8000722:	69b3      	ldr	r3, [r6, #24]
 8000724:	4630      	mov	r0, r6
 8000726:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8000728:	3b10      	subs	r3, #16
 800072a:	1a59      	subs	r1, r3, r1
 800072c:	f00f f860 	bl	800f7f0 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000730:	ab01      	add	r3, sp, #4
 8000732:	2208      	movs	r2, #8
 8000734:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000736:	4630      	mov	r0, r6
 8000738:	f00e fea0 	bl	800f47c <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800073c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800073e:	8853      	ldrh	r3, [r2, #2]
 8000740:	ba5b      	rev16	r3, r3
 8000742:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000744:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000746:	07d8      	lsls	r0, r3, #31
    pavi->aviInfo.StreamSize++;
 8000748:	bf48      	it	mi
 800074a:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800074c:	622b      	str	r3, [r5, #32]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800074e:	632b      	str	r3, [r5, #48]	@ 0x30
 8000750:	e7ce      	b.n	80006f0 <AVI_GetFrame+0xdc>
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000752:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000754:	ab01      	add	r3, sp, #4
 8000756:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8000758:	4630      	mov	r0, r6
 800075a:	3208      	adds	r2, #8
 800075c:	f00e fe8e 	bl	800f47c <f_read>
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000760:	6a2a      	ldr	r2, [r5, #32]
 8000762:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return AVI_AUDIO_FRAME;
 8000764:	2002      	movs	r0, #2
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000766:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000768:	885a      	ldrh	r2, [r3, #2]
 800076a:	ba52      	rev16	r2, r2
 800076c:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800076e:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000770:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 8000772:	bf48      	it	mi
 8000774:	3301      	addmi	r3, #1
 8000776:	622b      	str	r3, [r5, #32]
 8000778:	e760      	b.n	800063c <AVI_GetFrame+0x28>
 800077a:	bf00      	nop

0800077c <i2c_register_get>:
    return 1;

}

static int i2c_register_get(fxls8974_i2c_sensorhandle_t *pSensorHandle, uint8_t reg_addr, uint8_t *reg_data)
{
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t status;
	uint32_t count_iter = 0;


	i2c_repeated_start = 1;
 800077e:	2301      	movs	r3, #1
{
 8000780:	b085      	sub	sp, #20
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 8000782:	2600      	movs	r6, #0
{
 8000784:	4605      	mov	r5, r0
	i2c_repeated_start = 1;
 8000786:	4c18      	ldr	r4, [pc, #96]	@ (80007e8 <i2c_register_get+0x6c>)
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 8000788:	9600      	str	r6, [sp, #0]
{
 800078a:	4616      	mov	r6, r2
 800078c:	f88d 100f 	strb.w	r1, [sp, #15]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 8000790:	f10d 020f 	add.w	r2, sp, #15
 8000794:	8881      	ldrh	r1, [r0, #4]
 8000796:	68af      	ldr	r7, [r5, #8]
 8000798:	6800      	ldr	r0, [r0, #0]
	i2c_repeated_start = 1;
 800079a:	7023      	strb	r3, [r4, #0]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, &reg_addr, 1, I2C_FIRST_FRAME);
 800079c:	47b8      	blx	r7
    if(HAL_OK != status)
 800079e:	bb00      	cbnz	r0, 80007e2 <i2c_register_get+0x66>
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <i2c_register_get+0x70>)
 80007a2:	e001      	b.n	80007a8 <i2c_register_get+0x2c>

    while(i2c_repeated_start)
    {

    	count_iter++;
    	if(count_iter > MAX_ITERATIONS_NUM)
 80007a4:	3b01      	subs	r3, #1
 80007a6:	d01c      	beq.n	80007e2 <i2c_register_get+0x66>
    while(i2c_repeated_start)
 80007a8:	7821      	ldrb	r1, [r4, #0]
 80007aa:	2900      	cmp	r1, #0
 80007ac:	d1fa      	bne.n	80007a4 <i2c_register_get+0x28>
    		return 0;

    }

    status = pSensorHandle->pI2C_data_Rx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, reg_data, 1, I2C_LAST_FRAME);
 80007ae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80007b2:	68ec      	ldr	r4, [r5, #12]
 80007b4:	2301      	movs	r3, #1
 80007b6:	4632      	mov	r2, r6
 80007b8:	9100      	str	r1, [sp, #0]
 80007ba:	88a9      	ldrh	r1, [r5, #4]
 80007bc:	6828      	ldr	r0, [r5, #0]
 80007be:	47a0      	blx	r4
    if(HAL_OK != status)
 80007c0:	b978      	cbnz	r0, 80007e2 <i2c_register_get+0x66>
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <i2c_register_get+0x70>)
 80007c4:	490a      	ldr	r1, [pc, #40]	@ (80007f0 <i2c_register_get+0x74>)
 80007c6:	e001      	b.n	80007cc <i2c_register_get+0x50>
    count_iter = 0;
    while(i2c_rx_cplt == 0)
    {

    	count_iter++;
    	if(count_iter > MAX_ITERATIONS_NUM)
 80007c8:	3b01      	subs	r3, #1
 80007ca:	d00a      	beq.n	80007e2 <i2c_register_get+0x66>
    while(i2c_rx_cplt == 0)
 80007cc:	780a      	ldrb	r2, [r1, #0]
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d0fa      	beq.n	80007c8 <i2c_register_get+0x4c>
    		return 0;

    }

    i2c_rx_cplt = 0;
 80007d2:	2300      	movs	r3, #0

    HAL_Delay(100);
 80007d4:	2064      	movs	r0, #100	@ 0x64
    i2c_rx_cplt = 0;
 80007d6:	700b      	strb	r3, [r1, #0]
    HAL_Delay(100);
 80007d8:	f002 fee4 	bl	80035a4 <HAL_Delay>

    return 1;
 80007dc:	2001      	movs	r0, #1

}
 80007de:	b005      	add	sp, #20
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
 80007e2:	2000      	movs	r0, #0
}
 80007e4:	b005      	add	sp, #20
 80007e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e8:	2400008c 	.word	0x2400008c
 80007ec:	000f4241 	.word	0x000f4241
 80007f0:	2400008d 	.word	0x2400008d

080007f4 <i2c_register_set.constprop.0>:
static int i2c_register_set(fxls8974_i2c_sensorhandle_t *pSensorHandle, uint8_t reg_addr, uint8_t val, uint8_t mask, uint8_t shift)
 80007f4:	b530      	push	{r4, r5, lr}
	reg_data = ( REG_SET(val, shift) & mask );
 80007f6:	401a      	ands	r2, r3
static int i2c_register_set(fxls8974_i2c_sensorhandle_t *pSensorHandle, uint8_t reg_addr, uint8_t val, uint8_t mask, uint8_t shift)
 80007f8:	b085      	sub	sp, #20
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80007fa:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 80007fe:	6884      	ldr	r4, [r0, #8]
	data_buff[0] = reg_addr;
 8000800:	f88d 100c 	strb.w	r1, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000804:	2302      	movs	r3, #2
 8000806:	9500      	str	r5, [sp, #0]
	data_buff[1] = reg_data;
 8000808:	f88d 200d 	strb.w	r2, [sp, #13]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 800080c:	aa03      	add	r2, sp, #12
 800080e:	8881      	ldrh	r1, [r0, #4]
 8000810:	6800      	ldr	r0, [r0, #0]
 8000812:	47a0      	blx	r4
    if(HAL_OK != status)
 8000814:	b978      	cbnz	r0, 8000836 <i2c_register_set.constprop.0+0x42>
 8000816:	4809      	ldr	r0, [pc, #36]	@ (800083c <i2c_register_set.constprop.0+0x48>)
 8000818:	4a09      	ldr	r2, [pc, #36]	@ (8000840 <i2c_register_set.constprop.0+0x4c>)
 800081a:	e001      	b.n	8000820 <i2c_register_set.constprop.0+0x2c>
    	if(count_iter > MAX_ITERATIONS_NUM)
 800081c:	3801      	subs	r0, #1
 800081e:	d008      	beq.n	8000832 <i2c_register_set.constprop.0+0x3e>
    while(i2c_tx_cplt == 0)
 8000820:	7813      	ldrb	r3, [r2, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0fa      	beq.n	800081c <i2c_register_set.constprop.0+0x28>
    i2c_tx_cplt = 0;
 8000826:	2300      	movs	r3, #0
    HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 800082a:	7013      	strb	r3, [r2, #0]
    HAL_Delay(100);
 800082c:	f002 feba 	bl	80035a4 <HAL_Delay>
 8000830:	2001      	movs	r0, #1
}
 8000832:	b005      	add	sp, #20
 8000834:	bd30      	pop	{r4, r5, pc}
        return 0;
 8000836:	2000      	movs	r0, #0
}
 8000838:	b005      	add	sp, #20
 800083a:	bd30      	pop	{r4, r5, pc}
 800083c:	000f4241 	.word	0x000f4241
 8000840:	2400008e 	.word	0x2400008e

08000844 <FXLS8974_I2C_Init>:
{
 8000844:	b510      	push	{r4, lr}
 8000846:	f8bd c008 	ldrh.w	ip, [sp, #8]
    if(( pSensorHandle == NULL ) || ( instance == NULL ) || ( pI2C_funTx == NULL ) || ( pI2C_funRx == NULL ))
 800084a:	b178      	cbz	r0, 800086c <FXLS8974_I2C_Init+0x28>
 800084c:	b171      	cbz	r1, 800086c <FXLS8974_I2C_Init+0x28>
 800084e:	b16a      	cbz	r2, 800086c <FXLS8974_I2C_Init+0x28>
 8000850:	b163      	cbz	r3, 800086c <FXLS8974_I2C_Init+0x28>
    pSensorHandle->pI2C_instance = instance;
 8000852:	6001      	str	r1, [r0, #0]
    status = i2c_register_get(pSensorHandle, FXLS8974_WHO_AM_I, &pSensorHandle->data_reg);
 8000854:	2113      	movs	r1, #19
    pSensorHandle->pI2C_data_Tx = pI2C_funTx;
 8000856:	6082      	str	r2, [r0, #8]
    status = i2c_register_get(pSensorHandle, FXLS8974_WHO_AM_I, &pSensorHandle->data_reg);
 8000858:	f100 0210 	add.w	r2, r0, #16
    pSensorHandle->pI2C_data_Rx = pI2C_funRx;
 800085c:	60c3      	str	r3, [r0, #12]
    pSensorHandle->slaveAddress = sAddress;
 800085e:	4604      	mov	r4, r0
 8000860:	f8a0 c004 	strh.w	ip, [r0, #4]
    status = i2c_register_get(pSensorHandle, FXLS8974_WHO_AM_I, &pSensorHandle->data_reg);
 8000864:	f7ff ff8a 	bl	800077c <i2c_register_get>
    if(1 != status)
 8000868:	2801      	cmp	r0, #1
 800086a:	d001      	beq.n	8000870 <FXLS8974_I2C_Init+0x2c>
        return 0;
 800086c:	2000      	movs	r0, #0
}
 800086e:	bd10      	pop	{r4, pc}
    if(FXLS8974_WHOAMI_VALUE != whoami)
 8000870:	7c20      	ldrb	r0, [r4, #16]
 8000872:	f1a0 0086 	sub.w	r0, r0, #134	@ 0x86
 8000876:	fab0 f080 	clz	r0, r0
 800087a:	0940      	lsrs	r0, r0, #5
}
 800087c:	bd10      	pop	{r4, pc}
 800087e:	bf00      	nop

08000880 <FXLS8974_I2C_Configure>:
    if(pSensorHandle == NULL)
 8000880:	2800      	cmp	r0, #0
 8000882:	f000 812b 	beq.w	8000adc <FXLS8974_I2C_Configure+0x25c>
	data_buff[0] = reg_addr;
 8000886:	2215      	movs	r2, #21
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000888:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
{
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	b085      	sub	sp, #20
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000890:	6884      	ldr	r4, [r0, #8]
 8000892:	4605      	mov	r5, r0
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2302      	movs	r3, #2
 8000898:	8881      	ldrh	r1, [r0, #4]
	data_buff[0] = reg_addr;
 800089a:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 800089e:	aa03      	add	r2, sp, #12
 80008a0:	6800      	ldr	r0, [r0, #0]
 80008a2:	47a0      	blx	r4
    if(HAL_OK != status)
 80008a4:	2800      	cmp	r0, #0
 80008a6:	f040 8116 	bne.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
 80008aa:	4b91      	ldr	r3, [pc, #580]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 80008ac:	4c91      	ldr	r4, [pc, #580]	@ (8000af4 <FXLS8974_I2C_Configure+0x274>)
 80008ae:	e002      	b.n	80008b6 <FXLS8974_I2C_Configure+0x36>
    	if(count_iter > MAX_ITERATIONS_NUM)
 80008b0:	3b01      	subs	r3, #1
 80008b2:	f000 8110 	beq.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
    while(i2c_tx_cplt == 0)
 80008b6:	7822      	ldrb	r2, [r4, #0]
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	d0f9      	beq.n	80008b0 <FXLS8974_I2C_Configure+0x30>
    i2c_tx_cplt = 0;
 80008bc:	2300      	movs	r3, #0
    HAL_Delay(100);
 80008be:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 80008c0:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 80008c2:	f002 fe6f 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 80008c6:	f245 5217 	movw	r2, #21783	@ 0x5517
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
	data_buff[0] = reg_addr;
 80008ce:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80008d2:	aa03      	add	r2, sp, #12
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2302      	movs	r3, #2
 80008d8:	88a9      	ldrh	r1, [r5, #4]
 80008da:	6828      	ldr	r0, [r5, #0]
 80008dc:	68ae      	ldr	r6, [r5, #8]
 80008de:	47b0      	blx	r6
    if(HAL_OK != status)
 80008e0:	2800      	cmp	r0, #0
 80008e2:	f040 80f8 	bne.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
 80008e6:	4b82      	ldr	r3, [pc, #520]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 80008e8:	e002      	b.n	80008f0 <FXLS8974_I2C_Configure+0x70>
    	if(count_iter > MAX_ITERATIONS_NUM)
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f000 80f3 	beq.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
    while(i2c_tx_cplt == 0)
 80008f0:	7822      	ldrb	r2, [r4, #0]
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d0f9      	beq.n	80008ea <FXLS8974_I2C_Configure+0x6a>
    i2c_tx_cplt = 0;
 80008f6:	2300      	movs	r3, #0
    HAL_Delay(100);
 80008f8:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 80008fa:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 80008fc:	f002 fe52 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 8000900:	f241 022f 	movw	r2, #4143	@ 0x102f
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
	data_buff[0] = reg_addr;
 8000908:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 800090c:	aa03      	add	r2, sp, #12
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2302      	movs	r3, #2
 8000912:	88a9      	ldrh	r1, [r5, #4]
 8000914:	6828      	ldr	r0, [r5, #0]
 8000916:	68ae      	ldr	r6, [r5, #8]
 8000918:	47b0      	blx	r6
    if(HAL_OK != status)
 800091a:	2800      	cmp	r0, #0
 800091c:	f040 80db 	bne.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
 8000920:	4b73      	ldr	r3, [pc, #460]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 8000922:	e002      	b.n	800092a <FXLS8974_I2C_Configure+0xaa>
    	if(count_iter > MAX_ITERATIONS_NUM)
 8000924:	3b01      	subs	r3, #1
 8000926:	f000 80d6 	beq.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
    while(i2c_tx_cplt == 0)
 800092a:	7822      	ldrb	r2, [r4, #0]
 800092c:	2a00      	cmp	r2, #0
 800092e:	d0f9      	beq.n	8000924 <FXLS8974_I2C_Configure+0xa4>
    i2c_tx_cplt = 0;
 8000930:	2300      	movs	r3, #0
    HAL_Delay(100);
 8000932:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 8000934:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8000936:	f002 fe35 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 800093a:	f24f 0230 	movw	r2, #61488	@ 0xf030
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 800093e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
	data_buff[0] = reg_addr;
 8000942:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000946:	aa03      	add	r2, sp, #12
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2302      	movs	r3, #2
 800094c:	68ae      	ldr	r6, [r5, #8]
 800094e:	88a9      	ldrh	r1, [r5, #4]
 8000950:	6828      	ldr	r0, [r5, #0]
 8000952:	47b0      	blx	r6
    if(HAL_OK != status)
 8000954:	2800      	cmp	r0, #0
 8000956:	f040 80be 	bne.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
 800095a:	4b65      	ldr	r3, [pc, #404]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 800095c:	e002      	b.n	8000964 <FXLS8974_I2C_Configure+0xe4>
    	if(count_iter > MAX_ITERATIONS_NUM)
 800095e:	3b01      	subs	r3, #1
 8000960:	f000 80b9 	beq.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
    while(i2c_tx_cplt == 0)
 8000964:	7822      	ldrb	r2, [r4, #0]
 8000966:	2a00      	cmp	r2, #0
 8000968:	d0f9      	beq.n	800095e <FXLS8974_I2C_Configure+0xde>
    i2c_tx_cplt = 0;
 800096a:	2300      	movs	r3, #0
    HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 800096e:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8000970:	f002 fe18 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 8000974:	f240 6231 	movw	r2, #1585	@ 0x631
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
	data_buff[0] = reg_addr;
 800097c:	f8ad 200c 	strh.w	r2, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000980:	aa03      	add	r2, sp, #12
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2302      	movs	r3, #2
 8000986:	68ae      	ldr	r6, [r5, #8]
 8000988:	88a9      	ldrh	r1, [r5, #4]
 800098a:	6828      	ldr	r0, [r5, #0]
 800098c:	47b0      	blx	r6
    if(HAL_OK != status)
 800098e:	2800      	cmp	r0, #0
 8000990:	f040 80a1 	bne.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
 8000994:	4b56      	ldr	r3, [pc, #344]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 8000996:	e002      	b.n	800099e <FXLS8974_I2C_Configure+0x11e>
    	if(count_iter > MAX_ITERATIONS_NUM)
 8000998:	3b01      	subs	r3, #1
 800099a:	f000 809c 	beq.w	8000ad6 <FXLS8974_I2C_Configure+0x256>
    while(i2c_tx_cplt == 0)
 800099e:	7822      	ldrb	r2, [r4, #0]
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	d0f9      	beq.n	8000998 <FXLS8974_I2C_Configure+0x118>
    i2c_tx_cplt = 0;
 80009a4:	2600      	movs	r6, #0
    HAL_Delay(100);
 80009a6:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 80009a8:	7026      	strb	r6, [r4, #0]
    HAL_Delay(100);
 80009aa:	f002 fdfb 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 80009ae:	2333      	movs	r3, #51	@ 0x33
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80009b0:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 80009b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80009b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2302      	movs	r3, #2
 80009be:	88a9      	ldrh	r1, [r5, #4]
 80009c0:	6828      	ldr	r0, [r5, #0]
 80009c2:	68af      	ldr	r7, [r5, #8]
 80009c4:	47b8      	blx	r7
    if(HAL_OK != status)
 80009c6:	b960      	cbnz	r0, 80009e2 <FXLS8974_I2C_Configure+0x162>
 80009c8:	4e49      	ldr	r6, [pc, #292]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 80009ca:	e001      	b.n	80009d0 <FXLS8974_I2C_Configure+0x150>
    	if(count_iter > MAX_ITERATIONS_NUM)
 80009cc:	3e01      	subs	r6, #1
 80009ce:	d008      	beq.n	80009e2 <FXLS8974_I2C_Configure+0x162>
    while(i2c_tx_cplt == 0)
 80009d0:	7823      	ldrb	r3, [r4, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0fa      	beq.n	80009cc <FXLS8974_I2C_Configure+0x14c>
    i2c_tx_cplt = 0;
 80009d6:	2300      	movs	r3, #0
    HAL_Delay(100);
 80009d8:	2601      	movs	r6, #1
 80009da:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 80009dc:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 80009de:	f002 fde1 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 80009e2:	f44f 734d 	mov.w	r3, #820	@ 0x334
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80009e6:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 80009e8:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 80009ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2302      	movs	r3, #2
 80009f4:	88a9      	ldrh	r1, [r5, #4]
 80009f6:	6828      	ldr	r0, [r5, #0]
 80009f8:	68af      	ldr	r7, [r5, #8]
 80009fa:	47b8      	blx	r7
    if(HAL_OK != status)
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d171      	bne.n	8000ae4 <FXLS8974_I2C_Configure+0x264>
 8000a00:	4b3b      	ldr	r3, [pc, #236]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 8000a02:	e001      	b.n	8000a08 <FXLS8974_I2C_Configure+0x188>
    	if(count_iter > MAX_ITERATIONS_NUM)
 8000a04:	3b01      	subs	r3, #1
 8000a06:	d071      	beq.n	8000aec <FXLS8974_I2C_Configure+0x26c>
    while(i2c_tx_cplt == 0)
 8000a08:	7822      	ldrb	r2, [r4, #0]
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d0fa      	beq.n	8000a04 <FXLS8974_I2C_Configure+0x184>
    i2c_tx_cplt = 0;
 8000a0e:	2300      	movs	r3, #0
    HAL_Delay(100);
 8000a10:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 8000a12:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8000a14:	f002 fdc6 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 8000a18:	2335      	movs	r3, #53	@ 0x35
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000a1a:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 8000a1c:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2302      	movs	r3, #2
 8000a28:	88a9      	ldrh	r1, [r5, #4]
 8000a2a:	6828      	ldr	r0, [r5, #0]
 8000a2c:	68af      	ldr	r7, [r5, #8]
 8000a2e:	47b8      	blx	r7
    if(HAL_OK != status)
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d155      	bne.n	8000ae0 <FXLS8974_I2C_Configure+0x260>
 8000a34:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 8000a36:	e001      	b.n	8000a3c <FXLS8974_I2C_Configure+0x1bc>
    	if(count_iter > MAX_ITERATIONS_NUM)
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	d055      	beq.n	8000ae8 <FXLS8974_I2C_Configure+0x268>
    while(i2c_tx_cplt == 0)
 8000a3c:	7822      	ldrb	r2, [r4, #0]
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d0fa      	beq.n	8000a38 <FXLS8974_I2C_Configure+0x1b8>
    i2c_tx_cplt = 0;
 8000a42:	2300      	movs	r3, #0
    HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 8000a46:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8000a48:	f002 fdac 	bl	80035a4 <HAL_Delay>
	data_buff[0] = reg_addr;
 8000a4c:	f240 5336 	movw	r3, #1334	@ 0x536
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000a50:	aa03      	add	r2, sp, #12
	data_buff[0] = reg_addr;
 8000a52:	f8ad 300c 	strh.w	r3, [sp, #12]
    status = pSensorHandle->pI2C_data_Tx(pSensorHandle->pI2C_instance, pSensorHandle->slaveAddress, data_buff, 2, I2C_LAST_FRAME);
 8000a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	88a9      	ldrh	r1, [r5, #4]
 8000a60:	6828      	ldr	r0, [r5, #0]
 8000a62:	68af      	ldr	r7, [r5, #8]
 8000a64:	47b8      	blx	r7
    if(HAL_OK != status)
 8000a66:	bbb0      	cbnz	r0, 8000ad6 <FXLS8974_I2C_Configure+0x256>
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <FXLS8974_I2C_Configure+0x270>)
 8000a6a:	e001      	b.n	8000a70 <FXLS8974_I2C_Configure+0x1f0>
    	if(count_iter > MAX_ITERATIONS_NUM)
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	d032      	beq.n	8000ad6 <FXLS8974_I2C_Configure+0x256>
    while(i2c_tx_cplt == 0)
 8000a70:	7822      	ldrb	r2, [r4, #0]
 8000a72:	2a00      	cmp	r2, #0
 8000a74:	d0fa      	beq.n	8000a6c <FXLS8974_I2C_Configure+0x1ec>
    i2c_tx_cplt = 0;
 8000a76:	2300      	movs	r3, #0
    HAL_Delay(100);
 8000a78:	2064      	movs	r0, #100	@ 0x64
    i2c_tx_cplt = 0;
 8000a7a:	7023      	strb	r3, [r4, #0]
    HAL_Delay(100);
 8000a7c:	f002 fd92 	bl	80035a4 <HAL_Delay>
    if(1 != status)
 8000a80:	b34e      	cbz	r6, 8000ad6 <FXLS8974_I2C_Configure+0x256>
    status = i2c_register_set(pSensorHandle, FXLS8974_SENS_CONFIG4, ( FXLS8974_SENS_CONFIG4_INT_POL_ACT_HIGH ), ( FXLS8974_SENS_CONFIG4_INT_POL_MASK ), 0);
 8000a82:	4633      	mov	r3, r6
 8000a84:	4632      	mov	r2, r6
 8000a86:	2118      	movs	r1, #24
 8000a88:	4628      	mov	r0, r5
 8000a8a:	f7ff feb3 	bl	80007f4 <i2c_register_set.constprop.0>
    if(1 != status)
 8000a8e:	2801      	cmp	r0, #1
 8000a90:	d121      	bne.n	8000ad6 <FXLS8974_I2C_Configure+0x256>
    status = i2c_register_set(pSensorHandle, FXLS8974_ASLP_COUNT_LSB, 0x3f, 0xff, 0);
 8000a92:	23ff      	movs	r3, #255	@ 0xff
 8000a94:	223f      	movs	r2, #63	@ 0x3f
 8000a96:	211e      	movs	r1, #30
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f7ff feab 	bl	80007f4 <i2c_register_set.constprop.0>
 8000a9e:	4604      	mov	r4, r0
    status &= i2c_register_set(pSensorHandle, FXLS8974_ASLP_COUNT_MSB, 0x02, 0xff, 0);
 8000aa0:	23ff      	movs	r3, #255	@ 0xff
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	211f      	movs	r1, #31
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	f7ff fea4 	bl	80007f4 <i2c_register_set.constprop.0>
 8000aac:	4004      	ands	r4, r0
    if(1 != status)
 8000aae:	2c01      	cmp	r4, #1
 8000ab0:	d111      	bne.n	8000ad6 <FXLS8974_I2C_Configure+0x256>
    status = i2c_register_set(pSensorHandle, FXLS8974_INT_EN, FXLS8974_INT_EN_SDCD_OT_EN_EN, FXLS8974_INT_EN_SDCD_OT_EN_MASK, 0);
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f7ff fe9b 	bl	80007f4 <i2c_register_set.constprop.0>
    if(1 != status)
 8000abe:	2801      	cmp	r0, #1
 8000ac0:	d109      	bne.n	8000ad6 <FXLS8974_I2C_Configure+0x256>
    status = i2c_register_set(pSensorHandle, FXLS8974_SENS_CONFIG1, FXLS8974_SENS_CONFIG1_ACTIVE_ACTIVE, FXLS8974_SENS_CONFIG1_ACTIVE_MASK, 0);
 8000ac2:	4633      	mov	r3, r6
 8000ac4:	4632      	mov	r2, r6
 8000ac6:	2115      	movs	r1, #21
 8000ac8:	4628      	mov	r0, r5
 8000aca:	f7ff fe93 	bl	80007f4 <i2c_register_set.constprop.0>
    if(1 != status)
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4258      	negs	r0, r3
 8000ad2:	4158      	adcs	r0, r3
 8000ad4:	e000      	b.n	8000ad8 <FXLS8974_I2C_Configure+0x258>
        return 0;
 8000ad6:	2000      	movs	r0, #0
}
 8000ad8:	b005      	add	sp, #20
 8000ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
 8000adc:	2000      	movs	r0, #0
}
 8000ade:	4770      	bx	lr
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	e7b3      	b.n	8000a4c <FXLS8974_I2C_Configure+0x1cc>
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	e797      	b.n	8000a18 <FXLS8974_I2C_Configure+0x198>
 8000ae8:	461e      	mov	r6, r3
 8000aea:	e7af      	b.n	8000a4c <FXLS8974_I2C_Configure+0x1cc>
 8000aec:	461e      	mov	r6, r3
 8000aee:	e793      	b.n	8000a18 <FXLS8974_I2C_Configure+0x198>
 8000af0:	000f4241 	.word	0x000f4241
 8000af4:	2400008e 	.word	0x2400008e

08000af8 <HAL_I2C_MasterTxCpltCallback>:
// CallBacks Functions

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{

	i2c_tx_cplt = 1;
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_I2C_MasterTxCpltCallback+0x14>)
 8000afa:	2101      	movs	r1, #1

	if(i2c_repeated_start == 1)
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <HAL_I2C_MasterTxCpltCallback+0x18>)
	i2c_tx_cplt = 1;
 8000afe:	7011      	strb	r1, [r2, #0]
	if(i2c_repeated_start == 1)
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	428a      	cmp	r2, r1
 8000b04:	d101      	bne.n	8000b0a <HAL_I2C_MasterTxCpltCallback+0x12>
		i2c_repeated_start = 0;
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]

}
 8000b0a:	4770      	bx	lr
 8000b0c:	2400008e 	.word	0x2400008e
 8000b10:	2400008c 	.word	0x2400008c

08000b14 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{

	i2c_rx_cplt = 1;
 8000b14:	4b01      	ldr	r3, [pc, #4]	@ (8000b1c <HAL_I2C_MasterRxCpltCallback+0x8>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]

}
 8000b1a:	4770      	bx	lr
 8000b1c:	2400008d 	.word	0x2400008d

08000b20 <GC9A01_write_data.constprop.0.isra.0>:

    return ret;

}

int GC9A01_write_data(uint8_t *data, size_t len)
 8000b20:	b570      	push	{r4, r5, r6, lr}
	while(spi_dma_not_ready)
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <GC9A01_write_data.constprop.0.isra.0+0x7c>)
int GC9A01_write_data(uint8_t *data, size_t len)
 8000b24:	4605      	mov	r5, r0
 8000b26:	4c1e      	ldr	r4, [pc, #120]	@ (8000ba0 <GC9A01_write_data.constprop.0.isra.0+0x80>)
	while(spi_dma_not_ready)
 8000b28:	e001      	b.n	8000b2e <GC9A01_write_data.constprop.0.isra.0+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	d002      	beq.n	8000b34 <GC9A01_write_data.constprop.0.isra.0+0x14>
	while(spi_dma_not_ready)
 8000b2e:	7822      	ldrb	r2, [r4, #0]
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d1fa      	bne.n	8000b2a <GC9A01_write_data.constprop.0.isra.0+0xa>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2102      	movs	r1, #2
 8000b38:	481a      	ldr	r0, [pc, #104]	@ (8000ba4 <GC9A01_write_data.constprop.0.isra.0+0x84>)
 8000b3a:	f005 fd3f 	bl	80065bc <HAL_GPIO_WritePin>
}
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <GC9A01_write_data.constprop.0.isra.0+0x7c>)
 8000b40:	e001      	b.n	8000b46 <GC9A01_write_data.constprop.0.isra.0+0x26>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000b42:	3b01      	subs	r3, #1
 8000b44:	d002      	beq.n	8000b4c <GC9A01_write_data.constprop.0.isra.0+0x2c>
	while(spi_dma_not_ready)
 8000b46:	7822      	ldrb	r2, [r4, #0]
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d1fa      	bne.n	8000b42 <GC9A01_write_data.constprop.0.isra.0+0x22>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b4c:	4e16      	ldr	r6, [pc, #88]	@ (8000ba8 <GC9A01_write_data.constprop.0.isra.0+0x88>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2200      	movs	r2, #0
 8000b52:	4814      	ldr	r0, [pc, #80]	@ (8000ba4 <GC9A01_write_data.constprop.0.isra.0+0x84>)
 8000b54:	f005 fd32 	bl	80065bc <HAL_GPIO_WritePin>
	while(spi_dma_not_ready && !join)
	{

		count_iter++;

		if(count_iter >= MAX_ITERATIONS_NUM)
 8000b58:	4914      	ldr	r1, [pc, #80]	@ (8000bac <GC9A01_write_data.constprop.0.isra.0+0x8c>)
 8000b5a:	6833      	ldr	r3, [r6, #0]
 8000b5c:	e001      	b.n	8000b62 <GC9A01_write_data.constprop.0.isra.0+0x42>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d81a      	bhi.n	8000b98 <GC9A01_write_data.constprop.0.isra.0+0x78>
	while(spi_dma_not_ready && !join)
 8000b62:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 8000b64:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8000b66:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d1f7      	bne.n	8000b5e <GC9A01_write_data.constprop.0.isra.0+0x3e>

	}

	count_iter = 0;

	spi_dma_not_ready = 1;
 8000b6e:	2201      	movs	r2, #1
	count_iter = 0;
 8000b70:	6030      	str	r0, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000b72:	4629      	mov	r1, r5
 8000b74:	480e      	ldr	r0, [pc, #56]	@ (8000bb0 <GC9A01_write_data.constprop.0.isra.0+0x90>)
	spi_dma_not_ready = 1;
 8000b76:	7022      	strb	r2, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000b78:	f00b fc1c 	bl	800c3b4 <HAL_SPI_Transmit_DMA>
}
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <GC9A01_write_data.constprop.0.isra.0+0x7c>)
 8000b7e:	e001      	b.n	8000b84 <GC9A01_write_data.constprop.0.isra.0+0x64>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000b80:	3b01      	subs	r3, #1
 8000b82:	d002      	beq.n	8000b8a <GC9A01_write_data.constprop.0.isra.0+0x6a>
	while(spi_dma_not_ready)
 8000b84:	7822      	ldrb	r2, [r4, #0]
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d1fa      	bne.n	8000b80 <GC9A01_write_data.constprop.0.isra.0+0x60>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <GC9A01_write_data.constprop.0.isra.0+0x84>)
 8000b8e:	4611      	mov	r1, r2
}
 8000b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b94:	f005 bd12 	b.w	80065bc <HAL_GPIO_WritePin>
 8000b98:	6033      	str	r3, [r6, #0]
 8000b9a:	e7ef      	b.n	8000b7c <GC9A01_write_data.constprop.0.isra.0+0x5c>
 8000b9c:	000f4240 	.word	0x000f4240
 8000ba0:	24000094 	.word	0x24000094
 8000ba4:	58020400 	.word	0x58020400
 8000ba8:	24000090 	.word	0x24000090
 8000bac:	000f423f 	.word	0x000f423f
 8000bb0:	240002f0 	.word	0x240002f0

08000bb4 <GC9A01_set_data_command>:
{
 8000bb4:	b410      	push	{r4}
	while(spi_dma_not_ready)
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <GC9A01_set_data_command+0x24>)
{
 8000bb8:	4602      	mov	r2, r0
 8000bba:	4c08      	ldr	r4, [pc, #32]	@ (8000bdc <GC9A01_set_data_command+0x28>)
	while(spi_dma_not_ready)
 8000bbc:	e001      	b.n	8000bc2 <GC9A01_set_data_command+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	d002      	beq.n	8000bc8 <GC9A01_set_data_command+0x14>
	while(spi_dma_not_ready)
 8000bc2:	7821      	ldrb	r1, [r4, #0]
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	d1fa      	bne.n	8000bbe <GC9A01_set_data_command+0xa>
	if(val==0)
 8000bc8:	b102      	cbz	r2, 8000bcc <GC9A01_set_data_command+0x18>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <GC9A01_set_data_command+0x2c>)
}
 8000bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000bd4:	f005 bcf2 	b.w	80065bc <HAL_GPIO_WritePin>
 8000bd8:	000f4240 	.word	0x000f4240
 8000bdc:	24000094 	.word	0x24000094
 8000be0:	58020400 	.word	0x58020400

08000be4 <GC9A01_set_chip_select>:
{
 8000be4:	b410      	push	{r4}
	while(spi_dma_not_ready)
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <GC9A01_set_chip_select+0x30>)
{
 8000be8:	4602      	mov	r2, r0
 8000bea:	4c0b      	ldr	r4, [pc, #44]	@ (8000c18 <GC9A01_set_chip_select+0x34>)
	while(spi_dma_not_ready)
 8000bec:	e001      	b.n	8000bf2 <GC9A01_set_chip_select+0xe>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	d002      	beq.n	8000bf8 <GC9A01_set_chip_select+0x14>
	while(spi_dma_not_ready)
 8000bf2:	7821      	ldrb	r1, [r4, #0]
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d1fa      	bne.n	8000bee <GC9A01_set_chip_select+0xa>
    if (val==0)
 8000bf8:	b92a      	cbnz	r2, 8000c06 <GC9A01_set_chip_select+0x22>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <GC9A01_set_chip_select+0x38>)
}
 8000bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c02:	f005 bcdb 	b.w	80065bc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <GC9A01_set_chip_select+0x38>)
}
 8000c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c0e:	4611      	mov	r1, r2
 8000c10:	f005 bcd4 	b.w	80065bc <HAL_GPIO_WritePin>
 8000c14:	000f4240 	.word	0x000f4240
 8000c18:	24000094 	.word	0x24000094
 8000c1c:	58020400 	.word	0x58020400

08000c20 <GC9A01_write_command>:
{
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <GC9A01_write_command+0x8c>)
 8000c26:	4c22      	ldr	r4, [pc, #136]	@ (8000cb0 <GC9A01_write_command+0x90>)
 8000c28:	f88d 0007 	strb.w	r0, [sp, #7]
 8000c2c:	e001      	b.n	8000c32 <GC9A01_write_command+0x12>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	d002      	beq.n	8000c38 <GC9A01_write_command+0x18>
	while(spi_dma_not_ready)
 8000c32:	7822      	ldrb	r2, [r4, #0]
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d1fa      	bne.n	8000c2e <GC9A01_write_command+0xe>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	481d      	ldr	r0, [pc, #116]	@ (8000cb4 <GC9A01_write_command+0x94>)
 8000c3e:	f005 fcbd 	bl	80065bc <HAL_GPIO_WritePin>
}
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <GC9A01_write_command+0x8c>)
 8000c44:	e001      	b.n	8000c4a <GC9A01_write_command+0x2a>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c46:	3b01      	subs	r3, #1
 8000c48:	d002      	beq.n	8000c50 <GC9A01_write_command+0x30>
	while(spi_dma_not_ready)
 8000c4a:	7822      	ldrb	r2, [r4, #0]
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d1fa      	bne.n	8000c46 <GC9A01_write_command+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c50:	4e19      	ldr	r6, [pc, #100]	@ (8000cb8 <GC9A01_write_command+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <GC9A01_write_command+0x94>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	f005 fcb0 	bl	80065bc <HAL_GPIO_WritePin>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c5c:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <GC9A01_write_command+0x9c>)
 8000c5e:	6833      	ldr	r3, [r6, #0]
}
 8000c60:	e001      	b.n	8000c66 <GC9A01_write_command+0x46>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c62:	4283      	cmp	r3, r0
 8000c64:	d81e      	bhi.n	8000ca4 <GC9A01_write_command+0x84>
	while(spi_dma_not_ready && !join)
 8000c66:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 8000c68:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8000c6a:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d1f7      	bne.n	8000c62 <GC9A01_write_command+0x42>
	spi_dma_not_ready = 1;
 8000c72:	2501      	movs	r5, #1
	count_iter = 0;
 8000c74:	6031      	str	r1, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c76:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <GC9A01_write_command+0xa0>)
 8000c78:	f10d 0107 	add.w	r1, sp, #7
 8000c7c:	462a      	mov	r2, r5
	spi_dma_not_ready = 1;
 8000c7e:	7025      	strb	r5, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000c80:	f00b fb98 	bl	800c3b4 <HAL_SPI_Transmit_DMA>

#else
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
#endif

	if(ret != HAL_OK)
 8000c84:	b978      	cbnz	r0, 8000ca6 <GC9A01_write_command+0x86>
		return -1;

	return 1;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <GC9A01_write_command+0x8c>)
 8000c88:	e001      	b.n	8000c8e <GC9A01_write_command+0x6e>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	d002      	beq.n	8000c94 <GC9A01_write_command+0x74>
	while(spi_dma_not_ready)
 8000c8e:	7821      	ldrb	r1, [r4, #0]
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d1fa      	bne.n	8000c8a <GC9A01_write_command+0x6a>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <GC9A01_write_command+0x94>)
 8000c98:	4611      	mov	r1, r2
 8000c9a:	f005 fc8f 	bl	80065bc <HAL_GPIO_WritePin>
}
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
 8000ca4:	6033      	str	r3, [r6, #0]
			return -1;
 8000ca6:	f04f 35ff 	mov.w	r5, #4294967295
 8000caa:	e7ec      	b.n	8000c86 <GC9A01_write_command+0x66>
 8000cac:	000f4240 	.word	0x000f4240
 8000cb0:	24000094 	.word	0x24000094
 8000cb4:	58020400 	.word	0x58020400
 8000cb8:	24000090 	.word	0x24000090
 8000cbc:	000f423f 	.word	0x000f423f
 8000cc0:	240002f0 	.word	0x240002f0

08000cc4 <GC9A01_write_data>:
{
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <GC9A01_write_data+0x88>)
 8000cc8:	4605      	mov	r5, r0
 8000cca:	4c21      	ldr	r4, [pc, #132]	@ (8000d50 <GC9A01_write_data+0x8c>)
 8000ccc:	460e      	mov	r6, r1
 8000cce:	e001      	b.n	8000cd4 <GC9A01_write_data+0x10>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	d002      	beq.n	8000cda <GC9A01_write_data+0x16>
	while(spi_dma_not_ready)
 8000cd4:	7822      	ldrb	r2, [r4, #0]
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d1fa      	bne.n	8000cd0 <GC9A01_write_data+0xc>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2102      	movs	r1, #2
 8000cde:	481d      	ldr	r0, [pc, #116]	@ (8000d54 <GC9A01_write_data+0x90>)
 8000ce0:	f005 fc6c 	bl	80065bc <HAL_GPIO_WritePin>
}
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <GC9A01_write_data+0x88>)
 8000ce6:	e001      	b.n	8000cec <GC9A01_write_data+0x28>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	d002      	beq.n	8000cf2 <GC9A01_write_data+0x2e>
	while(spi_dma_not_ready)
 8000cec:	7822      	ldrb	r2, [r4, #0]
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d1fa      	bne.n	8000ce8 <GC9A01_write_data+0x24>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000cf2:	4f19      	ldr	r7, [pc, #100]	@ (8000d58 <GC9A01_write_data+0x94>)
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4816      	ldr	r0, [pc, #88]	@ (8000d54 <GC9A01_write_data+0x90>)
 8000cfa:	f005 fc5f 	bl	80065bc <HAL_GPIO_WritePin>
int GC9A01_spi_tx(uint8_t *data, uint16_t size, uint8_t join)
 8000cfe:	683b      	ldr	r3, [r7, #0]
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000d00:	4916      	ldr	r1, [pc, #88]	@ (8000d5c <GC9A01_write_data+0x98>)
 8000d02:	e001      	b.n	8000d08 <GC9A01_write_data+0x44>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d81c      	bhi.n	8000d42 <GC9A01_write_data+0x7e>
	while(spi_dma_not_ready && !join)
 8000d08:	7822      	ldrb	r2, [r4, #0]
		count_iter++;
 8000d0a:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 8000d0c:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
 8000d10:	2a00      	cmp	r2, #0
 8000d12:	d1f7      	bne.n	8000d04 <GC9A01_write_data+0x40>
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000d14:	4629      	mov	r1, r5
	spi_dma_not_ready = 1;
 8000d16:	2501      	movs	r5, #1
	count_iter = 0;
 8000d18:	6038      	str	r0, [r7, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000d1a:	b2b2      	uxth	r2, r6
 8000d1c:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <GC9A01_write_data+0x9c>)
	spi_dma_not_ready = 1;
 8000d1e:	7025      	strb	r5, [r4, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000d20:	f00b fb48 	bl	800c3b4 <HAL_SPI_Transmit_DMA>
	if(ret != HAL_OK)
 8000d24:	b970      	cbnz	r0, 8000d44 <GC9A01_write_data+0x80>
	return 1;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <GC9A01_write_data+0x88>)
 8000d28:	e001      	b.n	8000d2e <GC9A01_write_data+0x6a>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	d002      	beq.n	8000d34 <GC9A01_write_data+0x70>
	while(spi_dma_not_ready)
 8000d2e:	7822      	ldrb	r2, [r4, #0]
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d1fa      	bne.n	8000d2a <GC9A01_write_data+0x66>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <GC9A01_write_data+0x90>)
 8000d38:	4611      	mov	r1, r2
 8000d3a:	f005 fc3f 	bl	80065bc <HAL_GPIO_WritePin>
}
 8000d3e:	4628      	mov	r0, r5
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d42:	603b      	str	r3, [r7, #0]
			return -1;
 8000d44:	f04f 35ff 	mov.w	r5, #4294967295
 8000d48:	e7ed      	b.n	8000d26 <GC9A01_write_data+0x62>
 8000d4a:	bf00      	nop
 8000d4c:	000f4240 	.word	0x000f4240
 8000d50:	24000094 	.word	0x24000094
 8000d54:	58020400 	.word	0x58020400
 8000d58:	24000090 	.word	0x24000090
 8000d5c:	000f423f 	.word	0x000f423f
 8000d60:	240002f0 	.word	0x240002f0

08000d64 <GC9A01_Init>:
void GC9A01_Init(void) {
 8000d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d68:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <GC9A01_Init+0x48>)
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	4c10      	ldr	r4, [pc, #64]	@ (8000db0 <GC9A01_Init+0x4c>)
 8000d6e:	e001      	b.n	8000d74 <GC9A01_Init+0x10>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000d70:	3b01      	subs	r3, #1
 8000d72:	d002      	beq.n	8000d7a <GC9A01_Init+0x16>
	while(spi_dma_not_ready)
 8000d74:	7822      	ldrb	r2, [r4, #0]
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d1fa      	bne.n	8000d70 <GC9A01_Init+0xc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <GC9A01_Init+0x50>)
 8000d7e:	4611      	mov	r1, r2
 8000d80:	f005 fc1c 	bl	80065bc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000d84:	2005      	movs	r0, #5
 8000d86:	f002 fc0d 	bl	80035a4 <HAL_Delay>
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <GC9A01_Init+0x48>)
 8000d8c:	e001      	b.n	8000d92 <GC9A01_Init+0x2e>
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	d002      	beq.n	8000d98 <GC9A01_Init+0x34>
	while(spi_dma_not_ready)
 8000d92:	7822      	ldrb	r2, [r4, #0]
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d1fa      	bne.n	8000d8e <GC9A01_Init+0x2a>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <GC9A01_Init+0x50>)
 8000d9e:	f005 fc0d 	bl	80065bc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000da2:	200a      	movs	r0, #10
 8000da4:	f002 fbfe 	bl	80035a4 <HAL_Delay>
 8000da8:	4b00      	ldr	r3, [pc, #0]	@ (8000dac <GC9A01_Init+0x48>)
 8000daa:	e007      	b.n	8000dbc <GC9A01_Init+0x58>
 8000dac:	000f4240 	.word	0x000f4240
 8000db0:	24000094 	.word	0x24000094
 8000db4:	58020400 	.word	0x58020400
		if(count_iter >= MAX_ITERATIONS_NUM)
 8000db8:	3b01      	subs	r3, #1
 8000dba:	d002      	beq.n	8000dc2 <GC9A01_Init+0x5e>
	while(spi_dma_not_ready)
 8000dbc:	7822      	ldrb	r2, [r4, #0]
 8000dbe:	2a00      	cmp	r2, #0
 8000dc0:	d1fa      	bne.n	8000db8 <GC9A01_Init+0x54>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	48fe      	ldr	r0, [pc, #1016]	@ (80011c0 <GC9A01_Init+0x45c>)
 8000dc8:	f04f 0414 	mov.w	r4, #20
 8000dcc:	f005 fbf6 	bl	80065bc <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000dd0:	2078      	movs	r0, #120	@ 0x78
 8000dd2:	f002 fbe7 	bl	80035a4 <HAL_Delay>
    GC9A01_write_command(0xEF);
 8000dd6:	20ef      	movs	r0, #239	@ 0xef
 8000dd8:	f7ff ff22 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000ddc:	20eb      	movs	r0, #235	@ 0xeb
 8000dde:	f7ff ff1f 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000de2:	f10d 0007 	add.w	r0, sp, #7
 8000de6:	f88d 4007 	strb.w	r4, [sp, #7]
 8000dea:	f7ff fe99 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xFE);
 8000dee:	20fe      	movs	r0, #254	@ 0xfe
 8000df0:	25ff      	movs	r5, #255	@ 0xff
 8000df2:	f7ff ff15 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 8000df6:	20ef      	movs	r0, #239	@ 0xef
 8000df8:	f7ff ff12 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000dfc:	20eb      	movs	r0, #235	@ 0xeb
 8000dfe:	f7ff ff0f 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e02:	f10d 0007 	add.w	r0, sp, #7
 8000e06:	f88d 4007 	strb.w	r4, [sp, #7]
 8000e0a:	f7ff fe89 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x84);
 8000e0e:	2084      	movs	r0, #132	@ 0x84
 8000e10:	f04f 0821 	mov.w	r8, #33	@ 0x21
 8000e14:	f7ff ff04 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000e18:	2340      	movs	r3, #64	@ 0x40
    return GC9A01_write_data(&val, sizeof(val));
 8000e1a:	f10d 0007 	add.w	r0, sp, #7
 8000e1e:	2400      	movs	r4, #0
 8000e20:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e24:	f7ff fe7c 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x85);
 8000e28:	2085      	movs	r0, #133	@ 0x85
 8000e2a:	f04f 0b01 	mov.w	fp, #1
 8000e2e:	f7ff fef7 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e32:	f10d 0007 	add.w	r0, sp, #7
 8000e36:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e3a:	f7ff fe71 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x86);
 8000e3e:	2086      	movs	r0, #134	@ 0x86
 8000e40:	2718      	movs	r7, #24
 8000e42:	f7ff feed 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e46:	f10d 0007 	add.w	r0, sp, #7
 8000e4a:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e4e:	f7ff fe67 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x87);
 8000e52:	2087      	movs	r0, #135	@ 0x87
 8000e54:	2608      	movs	r6, #8
 8000e56:	f7ff fee3 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e5a:	f10d 0007 	add.w	r0, sp, #7
 8000e5e:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e62:	f7ff fe5d 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x88);
 8000e66:	2088      	movs	r0, #136	@ 0x88
 8000e68:	f04f 0910 	mov.w	r9, #16
 8000e6c:	f7ff fed8 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000e70:	230a      	movs	r3, #10
    return GC9A01_write_data(&val, sizeof(val));
 8000e72:	f10d 0007 	add.w	r0, sp, #7
 8000e76:	f04f 0a45 	mov.w	sl, #69	@ 0x45
 8000e7a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e7e:	f7ff fe4f 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x89);
 8000e82:	2089      	movs	r0, #137	@ 0x89
 8000e84:	f7ff fecc 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e88:	f10d 0007 	add.w	r0, sp, #7
 8000e8c:	f88d 8007 	strb.w	r8, [sp, #7]
 8000e90:	f7ff fe46 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8A);
 8000e94:	208a      	movs	r0, #138	@ 0x8a
 8000e96:	f7ff fec3 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000e9a:	f10d 0007 	add.w	r0, sp, #7
 8000e9e:	f88d 4007 	strb.w	r4, [sp, #7]
 8000ea2:	f7ff fe3d 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8B);
 8000ea6:	208b      	movs	r0, #139	@ 0x8b
 8000ea8:	f7ff feba 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000eac:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
    return GC9A01_write_data(&val, sizeof(val));
 8000eb0:	f10d 0007 	add.w	r0, sp, #7
 8000eb4:	f88d 3007 	strb.w	r3, [sp, #7]
 8000eb8:	f7ff fe32 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8C);
 8000ebc:	208c      	movs	r0, #140	@ 0x8c
 8000ebe:	f7ff feaf 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ec2:	f10d 0007 	add.w	r0, sp, #7
 8000ec6:	f88d b007 	strb.w	fp, [sp, #7]
 8000eca:	f7ff fe29 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8D);
 8000ece:	208d      	movs	r0, #141	@ 0x8d
 8000ed0:	f7ff fea6 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ed4:	f10d 0007 	add.w	r0, sp, #7
 8000ed8:	f88d b007 	strb.w	fp, [sp, #7]
 8000edc:	f7ff fe20 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8E);
 8000ee0:	208e      	movs	r0, #142	@ 0x8e
 8000ee2:	f7ff fe9d 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ee6:	f10d 0007 	add.w	r0, sp, #7
 8000eea:	f88d 5007 	strb.w	r5, [sp, #7]
 8000eee:	f7ff fe17 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x8F);
 8000ef2:	208f      	movs	r0, #143	@ 0x8f
 8000ef4:	f7ff fe94 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ef8:	f10d 0007 	add.w	r0, sp, #7
 8000efc:	f88d 5007 	strb.w	r5, [sp, #7]
 8000f00:	f7ff fe0e 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xB6);
 8000f04:	20b6      	movs	r0, #182	@ 0xb6
 8000f06:	f7ff fe8b 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f0a:	f10d 0007 	add.w	r0, sp, #7
 8000f0e:	f88d 4007 	strb.w	r4, [sp, #7]
 8000f12:	f7ff fe05 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8000f16:	f10d 0007 	add.w	r0, sp, #7
 8000f1a:	f88d 4007 	strb.w	r4, [sp, #7]
 8000f1e:	f7ff fdff 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x36);
 8000f22:	2036      	movs	r0, #54	@ 0x36
 8000f24:	f7ff fe7c 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f28:	f10d 0007 	add.w	r0, sp, #7
 8000f2c:	f88d 7007 	strb.w	r7, [sp, #7]
 8000f30:	f7ff fdf6 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(COLOR_MODE);
 8000f34:	203a      	movs	r0, #58	@ 0x3a
 8000f36:	f7ff fe73 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000f3a:	2305      	movs	r3, #5
    return GC9A01_write_data(&val, sizeof(val));
 8000f3c:	f10d 0007 	add.w	r0, sp, #7
 8000f40:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f44:	f7ff fdec 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x90);
 8000f48:	2090      	movs	r0, #144	@ 0x90
 8000f4a:	f7ff fe69 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f4e:	f10d 0007 	add.w	r0, sp, #7
 8000f52:	f88d 6007 	strb.w	r6, [sp, #7]
 8000f56:	f7ff fde3 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8000f5a:	f10d 0007 	add.w	r0, sp, #7
 8000f5e:	f88d 6007 	strb.w	r6, [sp, #7]
 8000f62:	f7ff fddd 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8000f66:	f10d 0007 	add.w	r0, sp, #7
 8000f6a:	f88d 6007 	strb.w	r6, [sp, #7]
 8000f6e:	f7ff fdd7 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8000f72:	f10d 0007 	add.w	r0, sp, #7
 8000f76:	f88d 6007 	strb.w	r6, [sp, #7]
 8000f7a:	f7ff fdd1 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBD);
 8000f7e:	20bd      	movs	r0, #189	@ 0xbd
 8000f80:	f7ff fe4e 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000f84:	2306      	movs	r3, #6
    return GC9A01_write_data(&val, sizeof(val));
 8000f86:	f10d 0007 	add.w	r0, sp, #7
 8000f8a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f8e:	f7ff fdc7 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBC);
 8000f92:	20bc      	movs	r0, #188	@ 0xbc
 8000f94:	f7ff fe44 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000f98:	f10d 0007 	add.w	r0, sp, #7
 8000f9c:	f88d 4007 	strb.w	r4, [sp, #7]
 8000fa0:	f7ff fdbe 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xFF);
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f04f 0513 	mov.w	r5, #19
 8000faa:	f7ff fe39 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000fae:	2360      	movs	r3, #96	@ 0x60
    return GC9A01_write_data(&val, sizeof(val));
 8000fb0:	f10d 0007 	add.w	r0, sp, #7
 8000fb4:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fb8:	f7ff fdb2 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8000fbc:	f10d 0007 	add.w	r0, sp, #7
 8000fc0:	f88d b007 	strb.w	fp, [sp, #7]
 8000fc4:	f7ff fdac 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8000fc8:	f10d 0107 	add.w	r1, sp, #7
 8000fcc:	f04f 0204 	mov.w	r2, #4
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	f88d 2007 	strb.w	r2, [sp, #7]
 8000fd6:	f7ff fda3 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC3);
 8000fda:	20c3      	movs	r0, #195	@ 0xc3
 8000fdc:	f7ff fe20 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000fe0:	f10d 0107 	add.w	r1, sp, #7
 8000fe4:	f88d 5007 	strb.w	r5, [sp, #7]
 8000fe8:	4608      	mov	r0, r1
 8000fea:	f7ff fd99 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC4);
 8000fee:	20c4      	movs	r0, #196	@ 0xc4
 8000ff0:	f7ff fe16 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8000ff4:	f10d 0107 	add.w	r1, sp, #7
 8000ff8:	f88d 5007 	strb.w	r5, [sp, #7]
 8000ffc:	2570      	movs	r5, #112	@ 0x70
 8000ffe:	4608      	mov	r0, r1
 8001000:	f7ff fd8e 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xC9);
 8001004:	20c9      	movs	r0, #201	@ 0xc9
 8001006:	f7ff fe0b 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 800100a:	f10d 0107 	add.w	r1, sp, #7
 800100e:	2322      	movs	r3, #34	@ 0x22
 8001010:	4608      	mov	r0, r1
 8001012:	f88d 3007 	strb.w	r3, [sp, #7]
 8001016:	f7ff fd83 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xBE);
 800101a:	20be      	movs	r0, #190	@ 0xbe
 800101c:	f7ff fe00 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8001020:	f04f 0111 	mov.w	r1, #17
    return GC9A01_write_data(&val, sizeof(val));
 8001024:	f10d 0007 	add.w	r0, sp, #7
 8001028:	f88d 1007 	strb.w	r1, [sp, #7]
 800102c:	f7ff fd78 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xE1);
 8001030:	20e1      	movs	r0, #225	@ 0xe1
 8001032:	f7ff fdf5 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001036:	f10d 0007 	add.w	r0, sp, #7
 800103a:	f88d 9007 	strb.w	r9, [sp, #7]
 800103e:	f7ff fd6f 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0E);
 8001042:	f04f 0c0e 	mov.w	ip, #14
    return GC9A01_write_data(&val, sizeof(val));
 8001046:	f10d 0007 	add.w	r0, sp, #7
 800104a:	f04f 0937 	mov.w	r9, #55	@ 0x37
 800104e:	f88d c007 	strb.w	ip, [sp, #7]
 8001052:	f7ff fd65 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xDF);
 8001056:	20df      	movs	r0, #223	@ 0xdf
 8001058:	f7ff fde2 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 800105c:	f10d 0007 	add.w	r0, sp, #7
 8001060:	f88d 8007 	strb.w	r8, [sp, #7]
 8001064:	f7ff fd5c 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0c);
 8001068:	230c      	movs	r3, #12
    return GC9A01_write_data(&val, sizeof(val));
 800106a:	f10d 0007 	add.w	r0, sp, #7
 800106e:	f04f 086f 	mov.w	r8, #111	@ 0x6f
 8001072:	f88d 3007 	strb.w	r3, [sp, #7]
 8001076:	f7ff fd53 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x02);
 800107a:	2302      	movs	r3, #2
    return GC9A01_write_data(&val, sizeof(val));
 800107c:	f10d 0007 	add.w	r0, sp, #7
 8001080:	f88d 3007 	strb.w	r3, [sp, #7]
 8001084:	f7ff fd4c 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF0);
 8001088:	20f0      	movs	r0, #240	@ 0xf0
 800108a:	f7ff fdc9 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 800108e:	f10d 0007 	add.w	r0, sp, #7
 8001092:	f88d a007 	strb.w	sl, [sp, #7]
 8001096:	f7ff fd43 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 800109a:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 800109e:	f10d 0007 	add.w	r0, sp, #7
 80010a2:	f04f 0a36 	mov.w	sl, #54	@ 0x36
 80010a6:	f88d 1007 	strb.w	r1, [sp, #7]
 80010aa:	f7ff fd39 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80010ae:	f10d 0007 	add.w	r0, sp, #7
 80010b2:	f88d 6007 	strb.w	r6, [sp, #7]
 80010b6:	f7ff fd33 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80010ba:	f10d 0007 	add.w	r0, sp, #7
 80010be:	f88d 6007 	strb.w	r6, [sp, #7]
 80010c2:	f7ff fd2d 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80010c6:	2126      	movs	r1, #38	@ 0x26
 80010c8:	f10d 0007 	add.w	r0, sp, #7
 80010cc:	f88d 1007 	strb.w	r1, [sp, #7]
 80010d0:	f7ff fd26 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80010d4:	222a      	movs	r2, #42	@ 0x2a
 80010d6:	f10d 0007 	add.w	r0, sp, #7
 80010da:	f88d 2007 	strb.w	r2, [sp, #7]
 80010de:	f7ff fd1f 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF1);
 80010e2:	20f1      	movs	r0, #241	@ 0xf1
 80010e4:	f7ff fd9c 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 80010e8:	f04f 0e43 	mov.w	lr, #67	@ 0x43
    return GC9A01_write_data(&val, sizeof(val));
 80010ec:	f10d 0007 	add.w	r0, sp, #7
 80010f0:	f88d e007 	strb.w	lr, [sp, #7]
 80010f4:	f7ff fd14 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80010f8:	f10d 0007 	add.w	r0, sp, #7
 80010fc:	f88d 5007 	strb.w	r5, [sp, #7]
 8001100:	f7ff fd0e 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001104:	2372      	movs	r3, #114	@ 0x72
 8001106:	f10d 0007 	add.w	r0, sp, #7
 800110a:	f88d 3007 	strb.w	r3, [sp, #7]
 800110e:	f7ff fd07 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001112:	f10d 0007 	add.w	r0, sp, #7
 8001116:	f88d a007 	strb.w	sl, [sp, #7]
 800111a:	f7ff fd01 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800111e:	f10d 0007 	add.w	r0, sp, #7
 8001122:	f88d 9007 	strb.w	r9, [sp, #7]
 8001126:	f7ff fcfb 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800112a:	f10d 0007 	add.w	r0, sp, #7
 800112e:	f88d 8007 	strb.w	r8, [sp, #7]
 8001132:	f7ff fcf5 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF2);
 8001136:	20f2      	movs	r0, #242	@ 0xf2
 8001138:	f7ff fd72 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800113c:	f04f 0345 	mov.w	r3, #69	@ 0x45
    return GC9A01_write_data(&val, sizeof(val));
 8001140:	f10d 0007 	add.w	r0, sp, #7
 8001144:	f88d 3007 	strb.w	r3, [sp, #7]
 8001148:	f7ff fcea 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 800114c:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 8001150:	f10d 0007 	add.w	r0, sp, #7
 8001154:	f88d 1007 	strb.w	r1, [sp, #7]
 8001158:	f7ff fce2 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800115c:	f10d 0007 	add.w	r0, sp, #7
 8001160:	f88d 6007 	strb.w	r6, [sp, #7]
 8001164:	f7ff fcdc 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001168:	f10d 0007 	add.w	r0, sp, #7
 800116c:	f88d 6007 	strb.w	r6, [sp, #7]
 8001170:	f7ff fcd6 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x26);
 8001174:	2126      	movs	r1, #38	@ 0x26
    return GC9A01_write_data(&val, sizeof(val));
 8001176:	f10d 0007 	add.w	r0, sp, #7
 800117a:	f88d 1007 	strb.w	r1, [sp, #7]
 800117e:	f7ff fccf 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x2A);
 8001182:	222a      	movs	r2, #42	@ 0x2a
    return GC9A01_write_data(&val, sizeof(val));
 8001184:	f10d 0007 	add.w	r0, sp, #7
 8001188:	f88d 2007 	strb.w	r2, [sp, #7]
 800118c:	f7ff fcc8 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xF3);
 8001190:	20f3      	movs	r0, #243	@ 0xf3
 8001192:	f7ff fd45 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001196:	f04f 0e43 	mov.w	lr, #67	@ 0x43
    return GC9A01_write_data(&val, sizeof(val));
 800119a:	f10d 0007 	add.w	r0, sp, #7
 800119e:	f88d e007 	strb.w	lr, [sp, #7]
 80011a2:	f7ff fcbd 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80011a6:	f10d 0007 	add.w	r0, sp, #7
 80011aa:	f88d 5007 	strb.w	r5, [sp, #7]
 80011ae:	f7ff fcb7 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x72);
 80011b2:	2372      	movs	r3, #114	@ 0x72
    return GC9A01_write_data(&val, sizeof(val));
 80011b4:	f10d 0007 	add.w	r0, sp, #7
 80011b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80011bc:	e002      	b.n	80011c4 <GC9A01_Init+0x460>
 80011be:	bf00      	nop
 80011c0:	58020400 	.word	0x58020400
 80011c4:	f7ff fcac 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80011c8:	f10d 0007 	add.w	r0, sp, #7
 80011cc:	f88d a007 	strb.w	sl, [sp, #7]
 80011d0:	f7ff fca6 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80011d4:	f10d 0007 	add.w	r0, sp, #7
 80011d8:	f88d 9007 	strb.w	r9, [sp, #7]
 80011dc:	f7ff fca0 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80011e0:	f10d 0007 	add.w	r0, sp, #7
 80011e4:	f88d 8007 	strb.w	r8, [sp, #7]
 80011e8:	f7ff fc9a 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xED);
 80011ec:	20ed      	movs	r0, #237	@ 0xed
 80011ee:	f7ff fd17 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 80011f2:	231b      	movs	r3, #27
    return GC9A01_write_data(&val, sizeof(val));
 80011f4:	f10d 0007 	add.w	r0, sp, #7
 80011f8:	f04f 0963 	mov.w	r9, #99	@ 0x63
 80011fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8001200:	f7ff fc8e 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0B);
 8001204:	230b      	movs	r3, #11
    return GC9A01_write_data(&val, sizeof(val));
 8001206:	f10d 0007 	add.w	r0, sp, #7
 800120a:	f04f 0807 	mov.w	r8, #7
 800120e:	f04f 0a0f 	mov.w	sl, #15
 8001212:	f88d 3007 	strb.w	r3, [sp, #7]
 8001216:	f7ff fc83 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xAE);
 800121a:	20ae      	movs	r0, #174	@ 0xae
 800121c:	f7ff fd00 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8001220:	2377      	movs	r3, #119	@ 0x77
    return GC9A01_write_data(&val, sizeof(val));
 8001222:	f10d 0007 	add.w	r0, sp, #7
 8001226:	f88d 3007 	strb.w	r3, [sp, #7]
 800122a:	f7ff fc79 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xCD);
 800122e:	20cd      	movs	r0, #205	@ 0xcd
 8001230:	f7ff fcf6 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001234:	f10d 0007 	add.w	r0, sp, #7
 8001238:	f88d 9007 	strb.w	r9, [sp, #7]
 800123c:	f7ff fc70 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x70);
 8001240:	4628      	mov	r0, r5
 8001242:	f7ff fced 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001246:	eb0d 0008 	add.w	r0, sp, r8
 800124a:	f88d 8007 	strb.w	r8, [sp, #7]
 800124e:	f7ff fc67 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001252:	eb0d 0008 	add.w	r0, sp, r8
 8001256:	f88d 8007 	strb.w	r8, [sp, #7]
 800125a:	f7ff fc61 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x04);
 800125e:	f04f 0004 	mov.w	r0, #4
 8001262:	f88d 0007 	strb.w	r0, [sp, #7]
    return GC9A01_write_data(&val, sizeof(val));
 8001266:	eb0d 0008 	add.w	r0, sp, r8
 800126a:	f7ff fc59 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0E);
 800126e:	f04f 0c0e 	mov.w	ip, #14
    return GC9A01_write_data(&val, sizeof(val));
 8001272:	eb0d 0008 	add.w	r0, sp, r8
 8001276:	f88d c007 	strb.w	ip, [sp, #7]
 800127a:	f7ff fc51 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800127e:	eb0d 0008 	add.w	r0, sp, r8
 8001282:	f88d a007 	strb.w	sl, [sp, #7]
 8001286:	f7ff fc4b 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x09);
 800128a:	f04f 0109 	mov.w	r1, #9
    return GC9A01_write_data(&val, sizeof(val));
 800128e:	eb0d 0008 	add.w	r0, sp, r8
 8001292:	f88d 1007 	strb.w	r1, [sp, #7]
 8001296:	f7ff fc43 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800129a:	eb0d 0008 	add.w	r0, sp, r8
 800129e:	f88d 8007 	strb.w	r8, [sp, #7]
 80012a2:	f7ff fc3d 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80012a6:	eb0d 0008 	add.w	r0, sp, r8
 80012aa:	f88d 6007 	strb.w	r6, [sp, #7]
 80012ae:	f7ff fc37 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x03);
 80012b2:	2303      	movs	r3, #3
    return GC9A01_write_data(&val, sizeof(val));
 80012b4:	eb0d 0008 	add.w	r0, sp, r8
 80012b8:	2671      	movs	r6, #113	@ 0x71
 80012ba:	f88d 3007 	strb.w	r3, [sp, #7]
 80012be:	f7ff fc2f 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0xE8);
 80012c2:	20e8      	movs	r0, #232	@ 0xe8
 80012c4:	f7ff fcac 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80012c8:	2334      	movs	r3, #52	@ 0x34
    return GC9A01_write_data(&val, sizeof(val));
 80012ca:	eb0d 0008 	add.w	r0, sp, r8
 80012ce:	f88d 3007 	strb.w	r3, [sp, #7]
 80012d2:	f7ff fc25 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x62);
 80012d6:	2062      	movs	r0, #98	@ 0x62
 80012d8:	f7ff fca2 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 80012dc:	eb0d 0008 	add.w	r0, sp, r8
 80012e0:	f88d 7007 	strb.w	r7, [sp, #7]
 80012e4:	f7ff fc1c 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x0D);
 80012e8:	230d      	movs	r3, #13
    return GC9A01_write_data(&val, sizeof(val));
 80012ea:	eb0d 0008 	add.w	r0, sp, r8
 80012ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80012f2:	f7ff fc15 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80012f6:	eb0d 0008 	add.w	r0, sp, r8
 80012fa:	f88d 6007 	strb.w	r6, [sp, #7]
 80012fe:	f7ff fc0f 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xED);
 8001302:	23ed      	movs	r3, #237	@ 0xed
    return GC9A01_write_data(&val, sizeof(val));
 8001304:	eb0d 0008 	add.w	r0, sp, r8
 8001308:	f88d 3007 	strb.w	r3, [sp, #7]
 800130c:	f7ff fc08 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001310:	eb0d 0008 	add.w	r0, sp, r8
 8001314:	f88d 5007 	strb.w	r5, [sp, #7]
 8001318:	f7ff fc02 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800131c:	eb0d 0008 	add.w	r0, sp, r8
 8001320:	f88d 5007 	strb.w	r5, [sp, #7]
 8001324:	f7ff fbfc 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001328:	eb0d 0008 	add.w	r0, sp, r8
 800132c:	f88d 7007 	strb.w	r7, [sp, #7]
 8001330:	f7ff fbf6 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001334:	eb0d 0008 	add.w	r0, sp, r8
 8001338:	f88d a007 	strb.w	sl, [sp, #7]
 800133c:	f7ff fbf0 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001340:	eb0d 0008 	add.w	r0, sp, r8
 8001344:	f88d 6007 	strb.w	r6, [sp, #7]
 8001348:	f7ff fbea 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xEF);
 800134c:	23ef      	movs	r3, #239	@ 0xef
    return GC9A01_write_data(&val, sizeof(val));
 800134e:	eb0d 0008 	add.w	r0, sp, r8
 8001352:	f04f 0a45 	mov.w	sl, #69	@ 0x45
 8001356:	f88d 3007 	strb.w	r3, [sp, #7]
 800135a:	f7ff fbe1 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800135e:	eb0d 0008 	add.w	r0, sp, r8
 8001362:	f88d 5007 	strb.w	r5, [sp, #7]
 8001366:	f7ff fbdb 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800136a:	eb0d 0008 	add.w	r0, sp, r8
 800136e:	f88d 5007 	strb.w	r5, [sp, #7]
 8001372:	f7ff fbd5 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x63);
 8001376:	4648      	mov	r0, r9
 8001378:	f04f 09f1 	mov.w	r9, #241	@ 0xf1
 800137c:	f7ff fc50 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001380:	eb0d 0008 	add.w	r0, sp, r8
 8001384:	f88d 7007 	strb.w	r7, [sp, #7]
 8001388:	f7ff fbca 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x11);
 800138c:	f04f 0111 	mov.w	r1, #17
    return GC9A01_write_data(&val, sizeof(val));
 8001390:	eb0d 0008 	add.w	r0, sp, r8
 8001394:	f88d 1007 	strb.w	r1, [sp, #7]
 8001398:	f7ff fbc2 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800139c:	eb0d 0008 	add.w	r0, sp, r8
 80013a0:	f88d 6007 	strb.w	r6, [sp, #7]
 80013a4:	f7ff fbbc 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80013a8:	eb0d 0008 	add.w	r0, sp, r8
 80013ac:	f88d 9007 	strb.w	r9, [sp, #7]
 80013b0:	f7ff fbb6 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80013b4:	eb0d 0008 	add.w	r0, sp, r8
 80013b8:	f88d 5007 	strb.w	r5, [sp, #7]
 80013bc:	f7ff fbb0 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80013c0:	eb0d 0008 	add.w	r0, sp, r8
 80013c4:	f88d 5007 	strb.w	r5, [sp, #7]
 80013c8:	f7ff fbaa 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80013cc:	eb0d 0008 	add.w	r0, sp, r8
 80013d0:	f88d 7007 	strb.w	r7, [sp, #7]
 80013d4:	f7ff fba4 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x13);
 80013d8:	f04f 0213 	mov.w	r2, #19
    return GC9A01_write_data(&val, sizeof(val));
 80013dc:	eb0d 0008 	add.w	r0, sp, r8
 80013e0:	2767      	movs	r7, #103	@ 0x67
 80013e2:	f88d 2007 	strb.w	r2, [sp, #7]
 80013e6:	f7ff fb9b 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80013ea:	eb0d 0008 	add.w	r0, sp, r8
 80013ee:	f88d 6007 	strb.w	r6, [sp, #7]
 80013f2:	f7ff fb95 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xF3);
 80013f6:	23f3      	movs	r3, #243	@ 0xf3
    return GC9A01_write_data(&val, sizeof(val));
 80013f8:	eb0d 0008 	add.w	r0, sp, r8
 80013fc:	2629      	movs	r6, #41	@ 0x29
 80013fe:	f88d 3007 	strb.w	r3, [sp, #7]
 8001402:	f7ff fb8d 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001406:	eb0d 0008 	add.w	r0, sp, r8
 800140a:	f88d 5007 	strb.w	r5, [sp, #7]
 800140e:	f7ff fb87 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001412:	eb0d 0008 	add.w	r0, sp, r8
 8001416:	f88d 5007 	strb.w	r5, [sp, #7]
 800141a:	f7ff fb81 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x64);
 800141e:	2064      	movs	r0, #100	@ 0x64
 8001420:	253c      	movs	r5, #60	@ 0x3c
 8001422:	f7ff fbfd 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8001426:	2328      	movs	r3, #40	@ 0x28
    return GC9A01_write_data(&val, sizeof(val));
 8001428:	eb0d 0008 	add.w	r0, sp, r8
 800142c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001430:	f7ff fb76 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001434:	eb0d 0008 	add.w	r0, sp, r8
 8001438:	f88d 6007 	strb.w	r6, [sp, #7]
 800143c:	f7ff fb70 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001440:	eb0d 0008 	add.w	r0, sp, r8
 8001444:	f88d 9007 	strb.w	r9, [sp, #7]
 8001448:	f7ff fb6a 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800144c:	eb0d 0008 	add.w	r0, sp, r8
 8001450:	f88d b007 	strb.w	fp, [sp, #7]
 8001454:	f7ff fb64 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001458:	eb0d 0008 	add.w	r0, sp, r8
 800145c:	f88d 9007 	strb.w	r9, [sp, #7]
 8001460:	f7ff fb5e 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001464:	eb0d 0008 	add.w	r0, sp, r8
 8001468:	f88d 4007 	strb.w	r4, [sp, #7]
 800146c:	f7ff fb58 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001470:	eb0d 0008 	add.w	r0, sp, r8
 8001474:	f88d 8007 	strb.w	r8, [sp, #7]
 8001478:	f7ff fb52 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x66);
 800147c:	2066      	movs	r0, #102	@ 0x66
 800147e:	f04f 0910 	mov.w	r9, #16
 8001482:	f7ff fbcd 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001486:	eb0d 0008 	add.w	r0, sp, r8
 800148a:	f88d 5007 	strb.w	r5, [sp, #7]
 800148e:	f7ff fb47 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001492:	eb0d 0008 	add.w	r0, sp, r8
 8001496:	f88d 4007 	strb.w	r4, [sp, #7]
 800149a:	f7ff fb41 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0xCD);
 800149e:	23cd      	movs	r3, #205	@ 0xcd
    return GC9A01_write_data(&val, sizeof(val));
 80014a0:	eb0d 0008 	add.w	r0, sp, r8
 80014a4:	f88d 3007 	strb.w	r3, [sp, #7]
 80014a8:	f7ff fb3a 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80014ac:	eb0d 0008 	add.w	r0, sp, r8
 80014b0:	f88d 7007 	strb.w	r7, [sp, #7]
 80014b4:	f7ff fb34 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80014b8:	eb0d 0008 	add.w	r0, sp, r8
 80014bc:	f88d a007 	strb.w	sl, [sp, #7]
 80014c0:	f7ff fb2e 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80014c4:	eb0d 0008 	add.w	r0, sp, r8
 80014c8:	f88d a007 	strb.w	sl, [sp, #7]
 80014cc:	f7ff fb28 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80014d0:	eb0d 0008 	add.w	r0, sp, r8
 80014d4:	f88d 9007 	strb.w	r9, [sp, #7]
 80014d8:	f7ff fb22 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80014dc:	eb0d 0008 	add.w	r0, sp, r8
 80014e0:	f88d 4007 	strb.w	r4, [sp, #7]
 80014e4:	f7ff fb1c 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80014e8:	eb0d 0008 	add.w	r0, sp, r8
 80014ec:	f88d 4007 	strb.w	r4, [sp, #7]
 80014f0:	f7ff fb16 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80014f4:	eb0d 0008 	add.w	r0, sp, r8
 80014f8:	f88d 4007 	strb.w	r4, [sp, #7]
 80014fc:	f7ff fb10 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x67);
 8001500:	4638      	mov	r0, r7
 8001502:	f7ff fb8d 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 8001506:	eb0d 0008 	add.w	r0, sp, r8
 800150a:	f88d 4007 	strb.w	r4, [sp, #7]
 800150e:	f7ff fb07 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001512:	eb0d 0008 	add.w	r0, sp, r8
 8001516:	f88d 5007 	strb.w	r5, [sp, #7]
 800151a:	f7ff fb01 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800151e:	eb0d 0008 	add.w	r0, sp, r8
 8001522:	f88d 4007 	strb.w	r4, [sp, #7]
 8001526:	f7ff fafb 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800152a:	eb0d 0008 	add.w	r0, sp, r8
 800152e:	f88d 4007 	strb.w	r4, [sp, #7]
 8001532:	f7ff faf5 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001536:	eb0d 0008 	add.w	r0, sp, r8
 800153a:	f88d 4007 	strb.w	r4, [sp, #7]
 800153e:	f7ff faef 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001542:	eb0d 0008 	add.w	r0, sp, r8
 8001546:	f88d b007 	strb.w	fp, [sp, #7]
 800154a:	f7ff fae9 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x54);
 800154e:	2354      	movs	r3, #84	@ 0x54
    return GC9A01_write_data(&val, sizeof(val));
 8001550:	eb0d 0008 	add.w	r0, sp, r8
 8001554:	2598      	movs	r5, #152	@ 0x98
 8001556:	f88d 3007 	strb.w	r3, [sp, #7]
 800155a:	f7ff fae1 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 800155e:	eb0d 0008 	add.w	r0, sp, r8
 8001562:	f88d 9007 	strb.w	r9, [sp, #7]
 8001566:	f7ff fadb 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x32);
 800156a:	2332      	movs	r3, #50	@ 0x32
    return GC9A01_write_data(&val, sizeof(val));
 800156c:	eb0d 0008 	add.w	r0, sp, r8
 8001570:	f88d 3007 	strb.w	r3, [sp, #7]
 8001574:	f7ff fad4 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 8001578:	eb0d 0008 	add.w	r0, sp, r8
 800157c:	f88d 5007 	strb.w	r5, [sp, #7]
 8001580:	f7ff face 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x74);
 8001584:	2074      	movs	r0, #116	@ 0x74
 8001586:	f7ff fb4b 	bl	8000c20 <GC9A01_write_command>
    return GC9A01_write_data(&val, sizeof(val));
 800158a:	eb0d 0008 	add.w	r0, sp, r8
 800158e:	f88d 9007 	strb.w	r9, [sp, #7]
 8001592:	f7ff fac5 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x85);
 8001596:	2385      	movs	r3, #133	@ 0x85
    return GC9A01_write_data(&val, sizeof(val));
 8001598:	eb0d 0008 	add.w	r0, sp, r8
 800159c:	f88d 3007 	strb.w	r3, [sp, #7]
 80015a0:	f7ff fabe 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x80);
 80015a4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
    return GC9A01_write_data(&val, sizeof(val));
 80015a8:	eb0d 0008 	add.w	r0, sp, r8
 80015ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80015b0:	f7ff fab6 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80015b4:	eb0d 0008 	add.w	r0, sp, r8
 80015b8:	f88d 4007 	strb.w	r4, [sp, #7]
 80015bc:	f7ff fab0 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80015c0:	eb0d 0008 	add.w	r0, sp, r8
 80015c4:	f88d 4007 	strb.w	r4, [sp, #7]
 80015c8:	f7ff faaa 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_byte(0x4E);
 80015cc:	234e      	movs	r3, #78	@ 0x4e
    return GC9A01_write_data(&val, sizeof(val));
 80015ce:	eb0d 0008 	add.w	r0, sp, r8
 80015d2:	f88d 3007 	strb.w	r3, [sp, #7]
 80015d6:	f7ff faa3 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80015da:	eb0d 0008 	add.w	r0, sp, r8
 80015de:	f88d 4007 	strb.w	r4, [sp, #7]
 80015e2:	f7ff fa9d 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x98);
 80015e6:	4628      	mov	r0, r5
 80015e8:	f7ff fb1a 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80015ec:	233e      	movs	r3, #62	@ 0x3e
    return GC9A01_write_data(&val, sizeof(val));
 80015ee:	eb0d 0008 	add.w	r0, sp, r8
 80015f2:	f88d 3007 	strb.w	r3, [sp, #7]
 80015f6:	f7ff fa93 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
 80015fa:	eb0d 0008 	add.w	r0, sp, r8
 80015fe:	f88d 8007 	strb.w	r8, [sp, #7]
 8001602:	f7ff fa8d 	bl	8000b20 <GC9A01_write_data.constprop.0.isra.0>
    GC9A01_write_command(0x35);
 8001606:	2035      	movs	r0, #53	@ 0x35
 8001608:	f7ff fb0a 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 800160c:	2021      	movs	r0, #33	@ 0x21
 800160e:	f7ff fb07 	bl	8000c20 <GC9A01_write_command>
    GC9A01_write_command(0x11);
 8001612:	2011      	movs	r0, #17
 8001614:	f7ff fb04 	bl	8000c20 <GC9A01_write_command>
    HAL_Delay(120);
 8001618:	2078      	movs	r0, #120	@ 0x78
 800161a:	f001 ffc3 	bl	80035a4 <HAL_Delay>
    GC9A01_write_command(0x29);
 800161e:	4630      	mov	r0, r6
 8001620:	f7ff fafe 	bl	8000c20 <GC9A01_write_command>
    HAL_Delay(20);
 8001624:	2014      	movs	r0, #20
}
 8001626:	b003      	add	sp, #12
 8001628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(20);
 800162c:	f001 bfba 	b.w	80035a4 <HAL_Delay>

08001630 <GC9A01_set_frame>:
{
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	466b      	mov	r3, sp
 8001636:	e883 0003 	stmia.w	r3, {r0, r1}
    if(GC9A01_write_command(COL_ADDR_SET) != 1)
 800163a:	202a      	movs	r0, #42	@ 0x2a
 800163c:	f8bd 5000 	ldrh.w	r5, [sp]
 8001640:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8001644:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8001648:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 800164c:	f7ff fae8 	bl	8000c20 <GC9A01_write_command>
 8001650:	2801      	cmp	r0, #1
 8001652:	d003      	beq.n	800165c <GC9A01_set_frame+0x2c>
    	return -1;
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001658:	b005      	add	sp, #20
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data[0] = (frame.start.X >> 8) & 0xFF;
 800165c:	0a2a      	lsrs	r2, r5, #8
 800165e:	2300      	movs	r3, #0
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 8001660:	2104      	movs	r1, #4
 8001662:	a803      	add	r0, sp, #12
    data[0] = (frame.start.X >> 8) & 0xFF;
 8001664:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.X >> 8) & 0xFF;
 8001668:	0a22      	lsrs	r2, r4, #8
    data[0] = (frame.start.X >> 8) & 0xFF;
 800166a:	f365 230f 	bfi	r3, r5, #8, #8
 800166e:	f362 4317 	bfi	r3, r2, #16, #8
 8001672:	f364 631f 	bfi	r3, r4, #24, #8
 8001676:	9303      	str	r3, [sp, #12]
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 8001678:	f7ff fb24 	bl	8000cc4 <GC9A01_write_data>
 800167c:	2801      	cmp	r0, #1
 800167e:	d1e9      	bne.n	8001654 <GC9A01_set_frame+0x24>
    if(GC9A01_write_command(ROW_ADDR_SET) != 1)
 8001680:	202b      	movs	r0, #43	@ 0x2b
 8001682:	f7ff facd 	bl	8000c20 <GC9A01_write_command>
 8001686:	2801      	cmp	r0, #1
 8001688:	d1e4      	bne.n	8001654 <GC9A01_set_frame+0x24>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800168a:	0a3a      	lsrs	r2, r7, #8
 800168c:	2300      	movs	r3, #0
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 800168e:	a803      	add	r0, sp, #12
 8001690:	2104      	movs	r1, #4
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8001692:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.Y >> 8) & 0xFF;
 8001696:	0a32      	lsrs	r2, r6, #8
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8001698:	f367 230f 	bfi	r3, r7, #8, #8
 800169c:	f362 4317 	bfi	r3, r2, #16, #8
 80016a0:	f366 631f 	bfi	r3, r6, #24, #8
 80016a4:	9303      	str	r3, [sp, #12]
    if(GC9A01_write_data(data, sizeof(data)) != 1)
 80016a6:	f7ff fb0d 	bl	8000cc4 <GC9A01_write_data>
 80016aa:	2801      	cmp	r0, #1
 80016ac:	d1d2      	bne.n	8001654 <GC9A01_set_frame+0x24>
 80016ae:	e7d3      	b.n	8001658 <GC9A01_set_frame+0x28>

080016b0 <GC9A01_sleep_mode>:
{
 80016b0:	b510      	push	{r4, lr}
	if(command)
 80016b2:	b140      	cbz	r0, 80016c6 <GC9A01_sleep_mode+0x16>
		ret = GC9A01_write_command(SLEEP_MODE_ON);
 80016b4:	2010      	movs	r0, #16
 80016b6:	f7ff fab3 	bl	8000c20 <GC9A01_write_command>
 80016ba:	4604      	mov	r4, r0
	HAL_Delay(120);
 80016bc:	2078      	movs	r0, #120	@ 0x78
 80016be:	f001 ff71 	bl	80035a4 <HAL_Delay>
}
 80016c2:	4620      	mov	r0, r4
 80016c4:	bd10      	pop	{r4, pc}
		ret = GC9A01_write_command(SLEEP_MODE_OFF);
 80016c6:	2011      	movs	r0, #17
 80016c8:	f7ff faaa 	bl	8000c20 <GC9A01_write_command>
 80016cc:	4604      	mov	r4, r0
	HAL_Delay(120);
 80016ce:	2078      	movs	r0, #120	@ 0x78
 80016d0:	f001 ff68 	bl	80035a4 <HAL_Delay>
}
 80016d4:	4620      	mov	r0, r4
 80016d6:	bd10      	pop	{r4, pc}

080016d8 <GC9A01_spi_tx>:
{
 80016d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016da:	f8df c050 	ldr.w	ip, [pc, #80]	@ 800172c <GC9A01_spi_tx+0x54>
	while(spi_dma_not_ready && !join)
 80016de:	fab2 f582 	clz	r5, r2
 80016e2:	4e0f      	ldr	r6, [pc, #60]	@ (8001720 <GC9A01_spi_tx+0x48>)
{
 80016e4:	460a      	mov	r2, r1
 80016e6:	f8dc 3000 	ldr.w	r3, [ip]
	while(spi_dma_not_ready && !join)
 80016ea:	096d      	lsrs	r5, r5, #5
		if(count_iter >= MAX_ITERATIONS_NUM)
 80016ec:	4f0d      	ldr	r7, [pc, #52]	@ (8001724 <GC9A01_spi_tx+0x4c>)
	while(spi_dma_not_ready && !join)
 80016ee:	e002      	b.n	80016f6 <GC9A01_spi_tx+0x1e>
 80016f0:	b12d      	cbz	r5, 80016fe <GC9A01_spi_tx+0x26>
		if(count_iter >= MAX_ITERATIONS_NUM)
 80016f2:	42bb      	cmp	r3, r7
 80016f4:	d80f      	bhi.n	8001716 <GC9A01_spi_tx+0x3e>
	while(spi_dma_not_ready && !join)
 80016f6:	7834      	ldrb	r4, [r6, #0]
		count_iter++;
 80016f8:	3301      	adds	r3, #1
	while(spi_dma_not_ready && !join)
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	d1f8      	bne.n	80016f0 <GC9A01_spi_tx+0x18>
	count_iter = 0;
 80016fe:	2300      	movs	r3, #0
	spi_dma_not_ready = 1;
 8001700:	2401      	movs	r4, #1
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001702:	4601      	mov	r1, r0
 8001704:	4808      	ldr	r0, [pc, #32]	@ (8001728 <GC9A01_spi_tx+0x50>)
	count_iter = 0;
 8001706:	f8cc 3000 	str.w	r3, [ip]
	spi_dma_not_ready = 1;
 800170a:	7034      	strb	r4, [r6, #0]
	ret = HAL_SPI_Transmit_DMA(&hspi1, data, size);
 800170c:	f00a fe52 	bl	800c3b4 <HAL_SPI_Transmit_DMA>
	if(ret != HAL_OK)
 8001710:	b918      	cbnz	r0, 800171a <GC9A01_spi_tx+0x42>
	return 1;
 8001712:	4620      	mov	r0, r4

}
 8001714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001716:	f8cc 3000 	str.w	r3, [ip]
			return -1;
 800171a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001720:	24000094 	.word	0x24000094
 8001724:	000f423f 	.word	0x000f423f
 8001728:	240002f0 	.word	0x240002f0
 800172c:	24000090 	.word	0x24000090

08001730 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	4616      	mov	r6, r2
 8001734:	b082      	sub	sp, #8
  Input_frameSize = FrameSize;

  Jpeg_HWDecodingEnd = 0;
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8001736:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  JPEGSourceAddress =  FrameSourceAddress ;
 800173a:	4d0a      	ldr	r5, [pc, #40]	@ (8001764 <JPEG_Decode_DMA+0x34>)
  Input_frameIndex=0;
 800173c:	2400      	movs	r4, #0
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800173e:	9200      	str	r2, [sp, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 8001740:	6029      	str	r1, [r5, #0]
  FrameBufferAddress = DestAddress;
 8001742:	4d09      	ldr	r5, [pc, #36]	@ (8001768 <JPEG_Decode_DMA+0x38>)
 8001744:	602b      	str	r3, [r5, #0]
  Input_frameIndex=0;
 8001746:	4d09      	ldr	r5, [pc, #36]	@ (800176c <JPEG_Decode_DMA+0x3c>)
 8001748:	602c      	str	r4, [r5, #0]
  Input_frameSize = FrameSize;
 800174a:	4d09      	ldr	r5, [pc, #36]	@ (8001770 <JPEG_Decode_DMA+0x40>)
 800174c:	602e      	str	r6, [r5, #0]
  Jpeg_HWDecodingEnd = 0;
 800174e:	4d09      	ldr	r5, [pc, #36]	@ (8001774 <JPEG_Decode_DMA+0x44>)
 8001750:	602c      	str	r4, [r5, #0]
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8001752:	f006 fab1 	bl	8007cb8 <HAL_JPEG_Decode_DMA>
	  return -1;
  
  
  return 1;
 8001756:	42a0      	cmp	r0, r4
  
}
 8001758:	bf14      	ite	ne
 800175a:	f04f 30ff 	movne.w	r0, #4294967295
 800175e:	2001      	moveq	r0, #1
 8001760:	b002      	add	sp, #8
 8001762:	bd70      	pop	{r4, r5, r6, pc}
 8001764:	240000a0 	.word	0x240000a0
 8001768:	240000a4 	.word	0x240000a4
 800176c:	24000098 	.word	0x24000098
 8001770:	2400009c 	.word	0x2400009c
 8001774:	240000a8 	.word	0x240000a8

08001778 <HAL_JPEG_InfoReadyCallback>:
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800177c:	b410      	push	{r4}
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800177e:	4c0e      	ldr	r4, [pc, #56]	@ (80017b8 <HAL_JPEG_GetDataCallback+0x3c>)
{
 8001780:	468c      	mov	ip, r1
  if( Input_frameIndex < Input_frameSize)
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <HAL_JPEG_GetDataCallback+0x40>)
  Input_frameIndex += NbDecodedData;
 8001784:	6823      	ldr	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 8001786:	6812      	ldr	r2, [r2, #0]
  Input_frameIndex += NbDecodedData;
 8001788:	440b      	add	r3, r1
 800178a:	6023      	str	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 800178c:	4293      	cmp	r3, r2
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800178e:	4c0c      	ldr	r4, [pc, #48]	@ (80017c0 <HAL_JPEG_GetDataCallback+0x44>)
 8001790:	6821      	ldr	r1, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 8001792:	d20b      	bcs.n	80017ac <HAL_JPEG_GetDataCallback+0x30>
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8001794:	1ad2      	subs	r2, r2, r3
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8001796:	4461      	add	r1, ip
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 8001798:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800179c:	6021      	str	r1, [r4, #0]
  {
    inDataLength = 0; 
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
  
}
 800179e:	f85d 4b04 	ldr.w	r4, [sp], #4
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80017a2:	bf28      	it	cs
 80017a4:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80017a8:	f006 bac4 	b.w	8007d34 <HAL_JPEG_ConfigInputBuffer>
    inDataLength = 0; 
 80017ac:	2200      	movs	r2, #0
}
 80017ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80017b2:	f006 babf 	b.w	8007d34 <HAL_JPEG_ConfigInputBuffer>
 80017b6:	bf00      	nop
 80017b8:	24000098 	.word	0x24000098
 80017bc:	2400009c 	.word	0x2400009c
 80017c0:	240000a0 	.word	0x240000a0

080017c4 <HAL_JPEG_DataReadyCallback>:
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_JPEG_DataReadyCallback+0x18>)
{
 80017c6:	4611      	mov	r1, r2

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80017c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
{
 80017cc:	b410      	push	{r4}
  FrameBufferAddress += OutDataLength;
 80017ce:	681c      	ldr	r4, [r3, #0]
 80017d0:	4421      	add	r1, r4
}
 80017d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  FrameBufferAddress += OutDataLength;
 80017d6:	6019      	str	r1, [r3, #0]
  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 80017d8:	f006 bab0 	b.w	8007d3c <HAL_JPEG_ConfigOutputBuffer>
 80017dc:	240000a4 	.word	0x240000a4

080017e0 <HAL_JPEG_ErrorCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  Error_Handler();
 80017e0:	f000 babc 	b.w	8001d5c <Error_Handler>

080017e4 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
  Jpeg_HWDecodingEnd = 1; 
 80017e4:	4b01      	ldr	r3, [pc, #4]	@ (80017ec <HAL_JPEG_DecodeCpltCallback+0x8>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	4770      	bx	lr
 80017ec:	240000a8 	.word	0x240000a8

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b510      	push	{r4, lr}
 80017f2:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f4:	224c      	movs	r2, #76	@ 0x4c
 80017f6:	2100      	movs	r1, #0
 80017f8:	a80a      	add	r0, sp, #40	@ 0x28
 80017fa:	f00e fa0b 	bl	800fc14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fe:	2220      	movs	r2, #32
 8001800:	2100      	movs	r1, #0
 8001802:	a802      	add	r0, sp, #8
 8001804:	f00e fa06 	bl	800fc14 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001808:	4b27      	ldr	r3, [pc, #156]	@ (80018a8 <SystemClock_Config+0xb8>)
 800180a:	f04f 32ff 	mov.w	r2, #4294967295

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800180e:	2002      	movs	r0, #2
  RCC->CKGAENR = 0xFFFFFFFF;
 8001810:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001814:	f007 faac 	bl	8008d70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001818:	4a24      	ldr	r2, [pc, #144]	@ (80018ac <SystemClock_Config+0xbc>)
 800181a:	2300      	movs	r3, #0
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	6993      	ldr	r3, [r2, #24]
 8001820:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	6993      	ldr	r3, [r2, #24]
 8001828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001830:	6993      	ldr	r3, [r2, #24]
 8001832:	049b      	lsls	r3, r3, #18
 8001834:	d5fc      	bpl.n	8001830 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001836:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183a:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800183c:	2406      	movs	r4, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800183e:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 8001842:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001844:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001846:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8001848:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800184a:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLM = 4;
 800184c:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLP = 2;
 800184e:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001850:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001852:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001854:	9219      	str	r2, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001856:	9415      	str	r4, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001858:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185a:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 22;
 800185e:	2216      	movs	r2, #22
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001860:	e9cd 131a 	strd	r1, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLN = 22;
 8001864:	9216      	str	r2, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001866:	f007 fb19 	bl	8008e9c <HAL_RCC_OscConfig>
 800186a:	b9a8      	cbnz	r0, 8001898 <SystemClock_Config+0xa8>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186c:	213f      	movs	r1, #63	@ 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186e:	2203      	movs	r2, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001870:	2400      	movs	r4, #0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001872:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001874:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001876:	e9cd 1202 	strd	r1, r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800187a:	2108      	movs	r1, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800187c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001880:	e9cd 4104 	strd	r4, r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001884:	2102      	movs	r1, #2
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001886:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800188a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188e:	f007 fe77 	bl	8009580 <HAL_RCC_ClockConfig>
 8001892:	b920      	cbnz	r0, 800189e <SystemClock_Config+0xae>
  {
    Error_Handler();
  }
}
 8001894:	b01e      	add	sp, #120	@ 0x78
 8001896:	bd10      	pop	{r4, pc}
  while (1)
  {
  }
#else

  HAL_NVIC_SystemReset();
 8001898:	f002 fe7a 	bl	8004590 <HAL_NVIC_SystemReset>

#endif

  /* USER CODE END Error_Handler_Debug */
}
 800189c:	e7e6      	b.n	800186c <SystemClock_Config+0x7c>
  HAL_NVIC_SystemReset();
 800189e:	f002 fe77 	bl	8004590 <HAL_NVIC_SystemReset>
}
 80018a2:	b01e      	add	sp, #120	@ 0x78
 80018a4:	bd10      	pop	{r4, pc}
 80018a6:	bf00      	nop
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58024800 	.word	0x58024800

080018b0 <MX_ADC1_Init>:
  hadc1.Instance = ADC1;
 80018b0:	482b      	ldr	r0, [pc, #172]	@ (8001960 <MX_ADC1_Init+0xb0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80018b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
  hadc1.Instance = ADC1;
 80018b6:	492b      	ldr	r1, [pc, #172]	@ (8001964 <MX_ADC1_Init+0xb4>)
  ADC_MultiModeTypeDef multimode = {0};
 80018b8:	2300      	movs	r3, #0
{
 80018ba:	b510      	push	{r4, lr}
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80018bc:	e9c0 1200 	strd	r1, r2, [r0]
{
 80018c0:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c2:	2408      	movs	r4, #8
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018c4:	2104      	movs	r1, #4
  hadc1.Init.NbrOfConversion = 1;
 80018c6:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 80018c8:	9300      	str	r3, [sp, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	9303      	str	r3, [sp, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018cc:	6101      	str	r1, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018ce:	8283      	strh	r3, [r0, #20]
  hadc1.Init.NbrOfConversion = 1;
 80018d0:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d2:	7703      	strb	r3, [r0, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018d4:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80018d6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018da:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018de:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018e2:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 80018e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018ea:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80018ee:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80018f2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f6:	f002 fc43 	bl	8004180 <HAL_ADC_Init>
 80018fa:	bb18      	cbnz	r0, 8001944 <MX_ADC1_Init+0x94>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018fc:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018fe:	4669      	mov	r1, sp
 8001900:	4817      	ldr	r0, [pc, #92]	@ (8001960 <MX_ADC1_Init+0xb0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001902:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001904:	f002 fd74 	bl	80043f0 <HAL_ADCEx_MultiModeConfigChannel>
 8001908:	bb30      	cbnz	r0, 8001958 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_16;
 800190a:	4817      	ldr	r0, [pc, #92]	@ (8001968 <MX_ADC1_Init+0xb8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800190c:	2206      	movs	r2, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800190e:	2407      	movs	r4, #7
  sConfig.Offset = 0;
 8001910:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001912:	a903      	add	r1, sp, #12
  sConfig.OffsetSignedSaturation = DISABLE;
 8001914:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001918:	e9cd 0203 	strd	r0, r2, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800191c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001920:	2204      	movs	r2, #4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001922:	e9cd 4005 	strd	r4, r0, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001926:	480e      	ldr	r0, [pc, #56]	@ (8001960 <MX_ADC1_Init+0xb0>)
  sConfig.Offset = 0;
 8001928:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192c:	f001 fed6 	bl	80036dc <HAL_ADC_ConfigChannel>
 8001930:	b978      	cbnz	r0, 8001952 <MX_ADC1_Init+0xa2>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001932:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001936:	2100      	movs	r1, #0
 8001938:	4809      	ldr	r0, [pc, #36]	@ (8001960 <MX_ADC1_Init+0xb0>)
 800193a:	f002 fd07 	bl	800434c <HAL_ADCEx_Calibration_Start>
 800193e:	b920      	cbnz	r0, 800194a <MX_ADC1_Init+0x9a>
}
 8001940:	b00a      	add	sp, #40	@ 0x28
 8001942:	bd10      	pop	{r4, pc}
  HAL_NVIC_SystemReset();
 8001944:	f002 fe24 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001948:	e7d8      	b.n	80018fc <MX_ADC1_Init+0x4c>
  HAL_NVIC_SystemReset();
 800194a:	f002 fe21 	bl	8004590 <HAL_NVIC_SystemReset>
}
 800194e:	b00a      	add	sp, #40	@ 0x28
 8001950:	bd10      	pop	{r4, pc}
  HAL_NVIC_SystemReset();
 8001952:	f002 fe1d 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001956:	e7ec      	b.n	8001932 <MX_ADC1_Init+0x82>
  HAL_NVIC_SystemReset();
 8001958:	f002 fe1a 	bl	8004590 <HAL_NVIC_SystemReset>
}
 800195c:	e7d5      	b.n	800190a <MX_ADC1_Init+0x5a>
 800195e:	bf00      	nop
 8001960:	240000c4 	.word	0x240000c4
 8001964:	40022000 	.word	0x40022000
 8001968:	43210000 	.word	0x43210000

0800196c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800196c:	4acb      	ldr	r2, [pc, #812]	@ (8001c9c <main+0x330>)
 800196e:	6953      	ldr	r3, [r2, #20]
 8001970:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	b08e      	sub	sp, #56	@ 0x38
 8001978:	d111      	bne.n	800199e <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800197a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800197e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001982:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001986:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800198a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800198e:	6953      	ldr	r3, [r2, #20]
 8001990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001994:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001996:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800199a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800199e:	f001 fdbf 	bl	8003520 <HAL_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a2:	2400      	movs	r4, #0
  SystemClock_Config();
 80019a4:	f7ff ff24 	bl	80017f0 <SystemClock_Config>
  HAL_Delay(500);
 80019a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019ac:	f001 fdfa 	bl	80035a4 <HAL_Delay>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b0:	4bbb      	ldr	r3, [pc, #748]	@ (8001ca0 <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	48bb      	ldr	r0, [pc, #748]	@ (8001ca4 <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 80019ba:	2507      	movs	r5, #7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 80019c0:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80019c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019cc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80019d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80019d4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80019d8:	9204      	str	r2, [sp, #16]
 80019da:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80019e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80019ec:	f002 0201 	and.w	r2, r2, #1
 80019f0:	9205      	str	r2, [sp, #20]
 80019f2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80019f8:	f042 0202 	orr.w	r2, r2, #2
 80019fc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001a00:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001a04:	f002 0202 	and.w	r2, r2, #2
 8001a08:	9206      	str	r2, [sp, #24]
 8001a0a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001a10:	f042 0204 	orr.w	r2, r2, #4
 8001a14:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001a18:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001a1c:	f002 0204 	and.w	r2, r2, #4
 8001a20:	9207      	str	r2, [sp, #28]
 8001a22:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a24:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001a28:	f042 0208 	orr.w	r2, r2, #8
 8001a2c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001a30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a34:	9109      	str	r1, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	9308      	str	r3, [sp, #32]
 8001a3e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f004 fbaa 	bl	8006198 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 8001a44:	4622      	mov	r2, r4
 8001a46:	2103      	movs	r1, #3
 8001a48:	4897      	ldr	r0, [pc, #604]	@ (8001ca8 <main+0x33c>)
 8001a4a:	f004 fdb7 	bl	80065bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f240 4104 	movw	r1, #1028	@ 0x404
 8001a54:	4894      	ldr	r0, [pc, #592]	@ (8001ca8 <main+0x33c>)
 8001a56:	f004 fdb1 	bl	80065bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	4893      	ldr	r0, [pc, #588]	@ (8001cac <main+0x340>)
 8001a60:	f004 fdac 	bl	80065bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 8001a64:	f240 4307 	movw	r3, #1031	@ 0x407
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	a909      	add	r1, sp, #36	@ 0x24
 8001a6a:	488f      	ldr	r0, [pc, #572]	@ (8001ca8 <main+0x33c>)
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 8001a6c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f004 fb90 	bl	8006198 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a7a:	f44f 1604 	mov.w	r6, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	a909      	add	r1, sp, #36	@ 0x24
 8001a80:	488a      	ldr	r0, [pc, #552]	@ (8001cac <main+0x340>)
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 8001a82:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a84:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f004 fb87 	bl	8006198 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FXLS8974CF_INT_Pin;
 8001a8a:	2320      	movs	r3, #32
  HAL_GPIO_Init(FXLS8974CF_INT_Port, &GPIO_InitStruct);
 8001a8c:	a909      	add	r1, sp, #36	@ 0x24
 8001a8e:	4886      	ldr	r0, [pc, #536]	@ (8001ca8 <main+0x33c>)
  GPIO_InitStruct.Pin = FXLS8974CF_INT_Pin;
 8001a90:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a92:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(FXLS8974CF_INT_Port, &GPIO_InitStruct);
 8001a96:	f004 fb7f 	bl	8006198 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	2006      	movs	r0, #6
 8001aa0:	f002 fd1a 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aa4:	2006      	movs	r0, #6
 8001aa6:	f002 fd53 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001aaa:	4622      	mov	r2, r4
 8001aac:	4621      	mov	r1, r4
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f002 fd12 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f002 fd4b 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001aba:	4622      	mov	r2, r4
 8001abc:	4621      	mov	r1, r4
 8001abe:	2008      	movs	r0, #8
 8001ac0:	f002 fd0a 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ac4:	2008      	movs	r0, #8
 8001ac6:	f002 fd43 	bl	8004550 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001aca:	4622      	mov	r2, r4
 8001acc:	4621      	mov	r1, r4
 8001ace:	2017      	movs	r0, #23
 8001ad0:	f002 fd02 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ad4:	2017      	movs	r0, #23
 8001ad6:	f002 fd3b 	bl	8004550 <HAL_NVIC_EnableIRQ>
  DMA2D_Handle.Instance = DMA2D;
 8001ada:	4875      	ldr	r0, [pc, #468]	@ (8001cb0 <main+0x344>)
 8001adc:	4b75      	ldr	r3, [pc, #468]	@ (8001cb4 <main+0x348>)
  DMA2D_Handle.Init.OutputOffset = 0;
 8001ade:	60c4      	str	r4, [r0, #12]
  DMA2D_Handle.Instance = DMA2D;
 8001ae0:	6003      	str	r3, [r0, #0]
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8001ae2:	65c4      	str	r4, [r0, #92]	@ 0x5c
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001ae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001ae8:	e9c0 4411 	strd	r4, r4, [r0, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8001aec:	e9c0 4413 	strd	r4, r4, [r0, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001af0:	e9c0 4415 	strd	r4, r4, [r0, #84]	@ 0x54
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8001af4:	f004 f9b2 	bl	8005e5c <HAL_DMA2D_Init>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	f040 8127 	bne.w	8001d4c <main+0x3e0>
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8001afe:	2101      	movs	r1, #1
 8001b00:	486b      	ldr	r0, [pc, #428]	@ (8001cb0 <main+0x344>)
 8001b02:	f004 fadf 	bl	80060c4 <HAL_DMA2D_ConfigLayer>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	f040 811d 	bne.w	8001d46 <main+0x3da>
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b0c:	2400      	movs	r4, #0
  hsd1.Instance = SDMMC1;
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <main+0x34c>)
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001b10:	4a63      	ldr	r2, [pc, #396]	@ (8001ca0 <main+0x334>)
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001b12:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b16:	4969      	ldr	r1, [pc, #420]	@ (8001cbc <main+0x350>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b18:	609c      	str	r4, [r3, #8]
  hsd1.Init.ClockDiv = 0;
 8001b1a:	615c      	str	r4, [r3, #20]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b1c:	e9c3 1400 	strd	r1, r4, [r3]
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001b20:	f8d2 1138 	ldr.w	r1, [r2, #312]	@ 0x138
 8001b24:	f041 0101 	orr.w	r1, r1, #1
 8001b28:	f8c2 1138 	str.w	r1, [r2, #312]	@ 0x138
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b2c:	4621      	mov	r1, r4
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001b2e:	f8d2 2138 	ldr.w	r2, [r2, #312]	@ 0x138
 8001b32:	f002 0201 	and.w	r2, r2, #1
 8001b36:	9203      	str	r2, [sp, #12]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b38:	4622      	mov	r2, r4
 __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3a:	9803      	ldr	r0, [sp, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001b3c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001b40:	e9c3 5003 	strd	r5, r0, [r3, #12]
 HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b44:	200b      	movs	r0, #11
 8001b46:	f002 fcc7 	bl	80044d8 <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b4a:	200b      	movs	r0, #11
 8001b4c:	f002 fd00 	bl	8004550 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8001b50:	485b      	ldr	r0, [pc, #364]	@ (8001cc0 <main+0x354>)
 8001b52:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc4 <main+0x358>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  hspi1.Init.CRCPolynomial = 0x0;
 8001b58:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b5a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001b5e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b62:	2307      	movs	r3, #7
 8001b64:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b70:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b74:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b78:	e9c0 4409 	strd	r4, r4, [r0, #36]	@ 0x24
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b7c:	6182      	str	r2, [r0, #24]
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b7e:	e9c0 340d 	strd	r3, r4, [r0, #52]	@ 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b82:	e9c0 440f 	strd	r4, r4, [r0, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b86:	e9c0 4411 	strd	r4, r4, [r0, #68]	@ 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b8a:	e9c0 4413 	strd	r4, r4, [r0, #76]	@ 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b8e:	e9c0 4415 	strd	r4, r4, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b92:	f00a fb37 	bl	800c204 <HAL_SPI_Init>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	f040 80d2 	bne.w	8001d40 <main+0x3d4>
  RTC_TimeTypeDef sTime = {0};
 8001b9c:	2300      	movs	r3, #0
  hrtc.Instance = RTC;
 8001b9e:	484a      	ldr	r0, [pc, #296]	@ (8001cc8 <main+0x35c>)
 8001ba0:	494a      	ldr	r1, [pc, #296]	@ (8001ccc <main+0x360>)
  hrtc.Init.AsynchPrediv = 127;
 8001ba2:	227f      	movs	r2, #127	@ 0x7f
  RTC_TimeTypeDef sTime = {0};
 8001ba4:	930d      	str	r3, [sp, #52]	@ 0x34
  hrtc.Init.AsynchPrediv = 127;
 8001ba6:	6082      	str	r2, [r0, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ba8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  RTC_DateTypeDef sDate = {0};
 8001bac:	9302      	str	r3, [sp, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bae:	6143      	str	r3, [r0, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bb0:	e9c0 1300 	strd	r1, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 8001bb4:	21ff      	movs	r1, #255	@ 0xff
  RTC_TimeTypeDef sTime = {0};
 8001bb6:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 8001bba:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  hrtc.Init.SynchPrediv = 255;
 8001bbe:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bc2:	e9c0 3206 	strd	r3, r2, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bc6:	f009 fabd 	bl	800b144 <HAL_RTC_Init>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	f040 80b5 	bne.w	8001d3a <main+0x3ce>
  sTime.Hours = 0;
 8001bd0:	2200      	movs	r2, #0
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001bd2:	a909      	add	r1, sp, #36	@ 0x24
 8001bd4:	483c      	ldr	r0, [pc, #240]	@ (8001cc8 <main+0x35c>)
  sTime.Hours = 0;
 8001bd6:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
  sTime.Seconds = 0;
 8001bda:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bde:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001be2:	f009 fb23 	bl	800b22c <HAL_RTC_SetTime>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	f040 80a4 	bne.w	8001d34 <main+0x3c8>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bec:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <main+0x364>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	a902      	add	r1, sp, #8
 8001bf2:	4835      	ldr	r0, [pc, #212]	@ (8001cc8 <main+0x35c>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bf4:	9302      	str	r3, [sp, #8]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bf6:	f009 fbbb 	bl	800b370 <HAL_RTC_SetDate>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	f040 8097 	bne.w	8001d2e <main+0x3c2>
  hi2c1.Instance = I2C1;
 8001c00:	4834      	ldr	r0, [pc, #208]	@ (8001cd4 <main+0x368>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	4934      	ldr	r1, [pc, #208]	@ (8001cd8 <main+0x36c>)
 8001c06:	2401      	movs	r4, #1
 8001c08:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <main+0x370>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c0a:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c0c:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c1.Init.OwnAddress2 = 0;
 8001c10:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c14:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c18:	f004 fce2 	bl	80065e0 <HAL_I2C_Init>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	f040 8083 	bne.w	8001d28 <main+0x3bc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c22:	2100      	movs	r1, #0
 8001c24:	482b      	ldr	r0, [pc, #172]	@ (8001cd4 <main+0x368>)
 8001c26:	f005 fbb5 	bl	8007394 <HAL_I2CEx_ConfigAnalogFilter>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d179      	bne.n	8001d22 <main+0x3b6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4828      	ldr	r0, [pc, #160]	@ (8001cd4 <main+0x368>)
 8001c32:	f005 fbd9 	bl	80073e8 <HAL_I2CEx_ConfigDigitalFilter>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d170      	bne.n	8001d1c <main+0x3b0>
  MX_ADC1_Init();
 8001c3a:	f7ff fe39 	bl	80018b0 <MX_ADC1_Init>
  JPEG_Handle.Instance = JPEG;
 8001c3e:	4828      	ldr	r0, [pc, #160]	@ (8001ce0 <main+0x374>)
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <main+0x378>)
 8001c42:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 8001c44:	f005 ff00 	bl	8007a48 <HAL_JPEG_Init>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d164      	bne.n	8001d16 <main+0x3aa>
  HAL_Delay(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c50:	4c25      	ldr	r4, [pc, #148]	@ (8001ce8 <main+0x37c>)
 8001c52:	f001 fca7 	bl	80035a4 <HAL_Delay>
  for(int i = 0 ; i < ( LCD_X_SIZE * LCD_Y_SIZE * 2 ) ; i++)
 8001c56:	2300      	movs	r3, #0
	  outputData[i] = 0xff;
 8001c58:	21ff      	movs	r1, #255	@ 0xff
 8001c5a:	6822      	ldr	r2, [r4, #0]
 8001c5c:	54d1      	strb	r1, [r2, r3]
  for(int i = 0 ; i < ( LCD_X_SIZE * LCD_Y_SIZE * 2 ) ; i++)
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8001c64:	d1f9      	bne.n	8001c5a <main+0x2ee>
  GC9A01_Init();
 8001c66:	f7ff f87d 	bl	8000d64 <GC9A01_Init>
  lcd_draw(outputData);
 8001c6a:	6820      	ldr	r0, [r4, #0]
 8001c6c:	f001 f81e 	bl	8002cac <lcd_draw>
  FXLS8974_I2C_Init(&acc_Handle, &hi2c1, HAL_I2C_Master_Seq_Transmit_IT, HAL_I2C_Master_Seq_Receive_IT, FXLS8974_DEVICE_ADDRESS_SA0_0);
 8001c70:	2430      	movs	r4, #48	@ 0x30
  HAL_Delay(500);
 8001c72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c76:	f001 fc95 	bl	80035a4 <HAL_Delay>
  HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c80:	4809      	ldr	r0, [pc, #36]	@ (8001ca8 <main+0x33c>)
 8001c82:	f004 fc9b 	bl	80065bc <HAL_GPIO_WritePin>
  FXLS8974_I2C_Init(&acc_Handle, &hi2c1, HAL_I2C_Master_Seq_Transmit_IT, HAL_I2C_Master_Seq_Receive_IT, FXLS8974_DEVICE_ADDRESS_SA0_0);
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <main+0x380>)
 8001c88:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <main+0x384>)
 8001c8a:	4912      	ldr	r1, [pc, #72]	@ (8001cd4 <main+0x368>)
 8001c8c:	4819      	ldr	r0, [pc, #100]	@ (8001cf4 <main+0x388>)
 8001c8e:	9400      	str	r4, [sp, #0]
 8001c90:	f7fe fdd8 	bl	8000844 <FXLS8974_I2C_Init>
  if(smart_watch_init() != OK)
 8001c94:	f000 fa54 	bl	8002140 <smart_watch_init>
 8001c98:	2801      	cmp	r0, #1
 8001c9a:	e02d      	b.n	8001cf8 <main+0x38c>
 8001c9c:	e000ed00 	.word	0xe000ed00
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58020000 	.word	0x58020000
 8001ca8:	58020400 	.word	0x58020400
 8001cac:	58020800 	.word	0x58020800
 8001cb0:	240001b8 	.word	0x240001b8
 8001cb4:	52001000 	.word	0x52001000
 8001cb8:	24000378 	.word	0x24000378
 8001cbc:	52007000 	.word	0x52007000
 8001cc0:	240002f0 	.word	0x240002f0
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	2400017c 	.word	0x2400017c
 8001ccc:	58004000 	.word	0x58004000
 8001cd0:	00010101 	.word	0x00010101
 8001cd4:	24000128 	.word	0x24000128
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	10b0c4ff 	.word	0x10b0c4ff
 8001ce0:	24000220 	.word	0x24000220
 8001ce4:	52003000 	.word	0x52003000
 8001ce8:	24000004 	.word	0x24000004
 8001cec:	080067ed 	.word	0x080067ed
 8001cf0:	08006695 	.word	0x08006695
 8001cf4:	240000ac 	.word	0x240000ac
 8001cf8:	d001      	beq.n	8001cfe <main+0x392>
  HAL_NVIC_SystemReset();
 8001cfa:	f002 fc49 	bl	8004590 <HAL_NVIC_SystemReset>
  HAL_Delay(500);
 8001cfe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d02:	f001 fc4f 	bl	80035a4 <HAL_Delay>
	  if(smart_watch_process() != OK)
 8001d06:	f000 fa5f 	bl	80021c8 <smart_watch_process>
 8001d0a:	2801      	cmp	r0, #1
 8001d0c:	d100      	bne.n	8001d10 <main+0x3a4>
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <main+0x3a2>
  HAL_NVIC_SystemReset();
 8001d10:	f002 fc3e 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d14:	e7fb      	b.n	8001d0e <main+0x3a2>
  HAL_NVIC_SystemReset();
 8001d16:	f002 fc3b 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d1a:	e797      	b.n	8001c4c <main+0x2e0>
  HAL_NVIC_SystemReset();
 8001d1c:	f002 fc38 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d20:	e78b      	b.n	8001c3a <main+0x2ce>
  HAL_NVIC_SystemReset();
 8001d22:	f002 fc35 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d26:	e782      	b.n	8001c2e <main+0x2c2>
  HAL_NVIC_SystemReset();
 8001d28:	f002 fc32 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d2c:	e779      	b.n	8001c22 <main+0x2b6>
  HAL_NVIC_SystemReset();
 8001d2e:	f002 fc2f 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d32:	e765      	b.n	8001c00 <main+0x294>
  HAL_NVIC_SystemReset();
 8001d34:	f002 fc2c 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d38:	e758      	b.n	8001bec <main+0x280>
  HAL_NVIC_SystemReset();
 8001d3a:	f002 fc29 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d3e:	e747      	b.n	8001bd0 <main+0x264>
  HAL_NVIC_SystemReset();
 8001d40:	f002 fc26 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d44:	e72a      	b.n	8001b9c <main+0x230>
  HAL_NVIC_SystemReset();
 8001d46:	f002 fc23 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d4a:	e6df      	b.n	8001b0c <main+0x1a0>
  HAL_NVIC_SystemReset();
 8001d4c:	f002 fc20 	bl	8004590 <HAL_NVIC_SystemReset>
}
 8001d50:	e6d5      	b.n	8001afe <main+0x192>
 8001d52:	bf00      	nop

08001d54 <get_acc_addr>:
}
 8001d54:	4800      	ldr	r0, [pc, #0]	@ (8001d58 <get_acc_addr+0x4>)
 8001d56:	4770      	bx	lr
 8001d58:	240000ac 	.word	0x240000ac

08001d5c <Error_Handler>:
  HAL_NVIC_SystemReset();
 8001d5c:	f002 bc18 	b.w	8004590 <HAL_NVIC_SystemReset>

08001d60 <file_handler>:
	return 1;

}

static int file_handler(uint8_t openFile)
{
 8001d60:	b530      	push	{r4, r5, lr}
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 8001d62:	4c2b      	ldr	r4, [pc, #172]	@ (8001e10 <file_handler+0xb0>)
{
 8001d64:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8001d66:	7823      	ldrb	r3, [r4, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d131      	bne.n	8001dd0 <file_handler+0x70>
 8001d6c:	b340      	cbz	r0, 8001dc0 <file_handler+0x60>
   {

  	 if(openFile)
  		 f_close(&MJPEG_File);
 8001d6e:	4829      	ldr	r0, [pc, #164]	@ (8001e14 <file_handler+0xb4>)
 8001d70:	f00d fcbc 	bl	800f6ec <f_close>

  	 new_file_flag = 0;
 8001d74:	2100      	movs	r1, #0

  	 char file_idx_str[4];
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001d76:	4d28      	ldr	r5, [pc, #160]	@ (8001e18 <file_handler+0xb8>)
 8001d78:	4a28      	ldr	r2, [pc, #160]	@ (8001e1c <file_handler+0xbc>)
 8001d7a:	a803      	add	r0, sp, #12
 8001d7c:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8001d7e:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001d80:	2104      	movs	r1, #4
 8001d82:	f00d ff13 	bl	800fbac <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8001d86:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <file_handler+0xc0>)
 8001d88:	210e      	movs	r1, #14
 8001d8a:	ab03      	add	r3, sp, #12
 8001d8c:	4825      	ldr	r0, [pc, #148]	@ (8001e24 <file_handler+0xc4>)
 8001d8e:	f00d ff0d 	bl	800fbac <sniprintf>

  	 // Open the MJPEG avi file with read access
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8001d92:	2201      	movs	r2, #1
 8001d94:	4923      	ldr	r1, [pc, #140]	@ (8001e24 <file_handler+0xc4>)
 8001d96:	481f      	ldr	r0, [pc, #124]	@ (8001e14 <file_handler+0xb4>)
 8001d98:	f00d f9f8 	bl	800f18c <f_open>
 8001d9c:	b110      	cbz	r0, 8001da4 <file_handler+0x44>
{
 8001d9e:	2000      	movs	r0, #0

   }

   return 1;

}
 8001da0:	b005      	add	sp, #20
 8001da2:	bd30      	pop	{r4, r5, pc}
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001da4:	4920      	ldr	r1, [pc, #128]	@ (8001e28 <file_handler+0xc8>)
  		 video.isfirstFrame = 1;
 8001da6:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001da8:	9001      	str	r0, [sp, #4]
 8001daa:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001dae:	9100      	str	r1, [sp, #0]
 8001db0:	481e      	ldr	r0, [pc, #120]	@ (8001e2c <file_handler+0xcc>)
  		 video.isfirstFrame = 1;
 8001db2:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001db4:	4917      	ldr	r1, [pc, #92]	@ (8001e14 <file_handler+0xb4>)
 8001db6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e30 <file_handler+0xd0>)
 8001db8:	f7fe faea 	bl	8000390 <AVI_ParserInit>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d1ee      	bne.n	8001d9e <file_handler+0x3e>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <file_handler+0xcc>)
 8001dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d205      	bcs.n	8001dd6 <file_handler+0x76>
   return 1;
 8001dca:	2001      	movs	r0, #1
}
 8001dcc:	b005      	add	sp, #20
 8001dce:	bd30      	pop	{r4, r5, pc}
  	 if(openFile)
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d0cf      	beq.n	8001d74 <file_handler+0x14>
 8001dd4:	e7cb      	b.n	8001d6e <file_handler+0xe>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001dd6:	4d10      	ldr	r5, [pc, #64]	@ (8001e18 <file_handler+0xb8>)
 8001dd8:	4916      	ldr	r1, [pc, #88]	@ (8001e34 <file_handler+0xd4>)
	   	 video.file_idx++;
 8001dda:	8aab      	ldrh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001ddc:	4816      	ldr	r0, [pc, #88]	@ (8001e38 <file_handler+0xd8>)
	   	 video.file_idx++;
 8001dde:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001de0:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	fba1 1202 	umull	r1, r2, r1, r2
 8001dea:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001dee:	fb01 3312 	mls	r3, r1, r2, r3
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001df2:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001df4:	82ab      	strh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001df6:	f004 f8cd 	bl	8005f94 <HAL_DMA2D_PollForTransfer>
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d1cf      	bne.n	8001d9e <file_handler+0x3e>
		 if(f_close(&MJPEG_File) != FR_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <file_handler+0xb4>)
 8001e00:	f00d fc74 	bl	800f6ec <f_close>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d1ca      	bne.n	8001d9e <file_handler+0x3e>
		 new_file_flag = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	7023      	strb	r3, [r4, #0]
 8001e0c:	e7dd      	b.n	8001dca <file_handler+0x6a>
 8001e0e:	bf00      	nop
 8001e10:	24000000 	.word	0x24000000
 8001e14:	240ac360 	.word	0x240ac360
 8001e18:	2409fad8 	.word	0x2409fad8
 8001e1c:	0801054c 	.word	0x0801054c
 8001e20:	08010554 	.word	0x08010554
 8001e24:	240ac7c0 	.word	0x240ac7c0
 8001e28:	2409fb18 	.word	0x2409fb18
 8001e2c:	240ac318 	.word	0x240ac318
 8001e30:	2409fb18 	.word	0x2409fb18
 8001e34:	05b05b06 	.word	0x05b05b06
 8001e38:	240001b8 	.word	0x240001b8

08001e3c <DMA2D_Init.constprop.0>:
	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;

}

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	460e      	mov	r6, r1
 8001e40:	4605      	mov	r5, r0
{

	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;


	HAL_DMA2D_MspInit(&DMA2D_Handle);
 8001e42:	4822      	ldr	r0, [pc, #136]	@ (8001ecc <DMA2D_Init.constprop.0+0x90>)
 8001e44:	f000 ffbe 	bl	8002dc4 <HAL_DMA2D_MspInit>

	if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8001e48:	2e01      	cmp	r6, #1
 8001e4a:	d02b      	beq.n	8001ea4 <DMA2D_Init.constprop.0+0x68>
			inputLineOffset = 16 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001e4c:	b326      	cbz	r6, 8001e98 <DMA2D_Init.constprop.0+0x5c>
			inputLineOffset = 8 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8001e4e:	2e02      	cmp	r6, #2
 8001e50:	d033      	beq.n	8001eba <DMA2D_Init.constprop.0+0x7e>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8001e52:	2200      	movs	r2, #0
 8001e54:	2601      	movs	r6, #1
		}

	}

  	// Configure the DMA2D Mode, Color Mode and output offset
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001e56:	4c1d      	ldr	r4, [pc, #116]	@ (8001ecc <DMA2D_Init.constprop.0+0x90>)
 8001e58:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  	DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
  	DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 8001e5c:	2300      	movs	r3, #0
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8001e5e:	f1c5 05f0 	rsb	r5, r5, #240	@ 0xf0
  	// Foreground Configuration
  	DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
  	DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8001e62:	6462      	str	r2, [r4, #68]	@ 0x44
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion

  	DMA2D_Handle.Instance = DMA2D;

  	// DMA2D Initialization
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8001e64:	4620      	mov	r0, r4
  	DMA2D_Handle.Instance = DMA2D;
 8001e66:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed0 <DMA2D_Init.constprop.0+0x94>)
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8001e68:	65e6      	str	r6, [r4, #92]	@ 0x5c
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001e6a:	2601      	movs	r6, #1
  	DMA2D_Handle.XferCpltCallback  = NULL;
 8001e6c:	6223      	str	r3, [r4, #32]
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8001e6e:	e9c4 2100 	strd	r2, r1, [r4]
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001e72:	21ff      	movs	r1, #255	@ 0xff
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001e74:	220b      	movs	r2, #11
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8001e76:	e9c4 6113 	strd	r6, r1, [r4, #76]	@ 0x4c
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8001e7a:	e9c4 6502 	strd	r6, r5, [r4, #8]
  	DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8001e7e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8001e82:	64a2      	str	r2, [r4, #72]	@ 0x48
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8001e84:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8001e88:	f003 ffe8 	bl	8005e5c <HAL_DMA2D_Init>
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001e8c:	4631      	mov	r1, r6
 8001e8e:	4620      	mov	r0, r4

}
 8001e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8001e94:	f004 b916 	b.w	80060c4 <HAL_DMA2D_ConfigLayer>
		if(inputLineOffset != 0)
 8001e98:	f015 0207 	ands.w	r2, r5, #7
 8001e9c:	d00b      	beq.n	8001eb6 <DMA2D_Init.constprop.0+0x7a>
			inputLineOffset = 8 - inputLineOffset;
 8001e9e:	f1c2 0208 	rsb	r2, r2, #8
 8001ea2:	e7d8      	b.n	8001e56 <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8001ea4:	f015 020f 	ands.w	r2, r5, #15
 8001ea8:	d003      	beq.n	8001eb2 <DMA2D_Init.constprop.0+0x76>
			inputLineOffset = 16 - inputLineOffset;
 8001eaa:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_420;
 8001eae:	2602      	movs	r6, #2
 8001eb0:	e7d1      	b.n	8001e56 <DMA2D_Init.constprop.0+0x1a>
 8001eb2:	2602      	movs	r6, #2
 8001eb4:	e7cf      	b.n	8001e56 <DMA2D_Init.constprop.0+0x1a>
 8001eb6:	4632      	mov	r2, r6
 8001eb8:	e7cd      	b.n	8001e56 <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8001eba:	f015 020f 	ands.w	r2, r5, #15
 8001ebe:	d003      	beq.n	8001ec8 <DMA2D_Init.constprop.0+0x8c>
			inputLineOffset = 16 - inputLineOffset;
 8001ec0:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_422;
 8001ec4:	2601      	movs	r6, #1
 8001ec6:	e7c6      	b.n	8001e56 <DMA2D_Init.constprop.0+0x1a>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8001ec8:	2601      	movs	r6, #1
 8001eca:	e7c4      	b.n	8001e56 <DMA2D_Init.constprop.0+0x1a>
 8001ecc:	240001b8 	.word	0x240001b8
 8001ed0:	52001000 	.word	0x52001000

08001ed4 <file_handler.constprop.0>:
static int file_handler(uint8_t openFile)
 8001ed4:	b530      	push	{r4, r5, lr}
   if(new_file_flag || openFile)
 8001ed6:	4c29      	ldr	r4, [pc, #164]	@ (8001f7c <file_handler.constprop.0+0xa8>)
static int file_handler(uint8_t openFile)
 8001ed8:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8001eda:	7823      	ldrb	r3, [r4, #0]
 8001edc:	b933      	cbnz	r3, 8001eec <file_handler.constprop.0+0x18>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001ede:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <file_handler.constprop.0+0xac>)
 8001ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d22c      	bcs.n	8001f42 <file_handler.constprop.0+0x6e>
   return 1;
 8001ee8:	2001      	movs	r0, #1
 8001eea:	e015      	b.n	8001f18 <file_handler.constprop.0+0x44>
  	 new_file_flag = 0;
 8001eec:	2100      	movs	r1, #0
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001eee:	4d25      	ldr	r5, [pc, #148]	@ (8001f84 <file_handler.constprop.0+0xb0>)
 8001ef0:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <file_handler.constprop.0+0xb4>)
 8001ef2:	a803      	add	r0, sp, #12
 8001ef4:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8001ef6:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8001ef8:	2104      	movs	r1, #4
 8001efa:	f00d fe57 	bl	800fbac <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8001efe:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <file_handler.constprop.0+0xb8>)
 8001f00:	210e      	movs	r1, #14
 8001f02:	ab03      	add	r3, sp, #12
 8001f04:	4822      	ldr	r0, [pc, #136]	@ (8001f90 <file_handler.constprop.0+0xbc>)
 8001f06:	f00d fe51 	bl	800fbac <sniprintf>
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4920      	ldr	r1, [pc, #128]	@ (8001f90 <file_handler.constprop.0+0xbc>)
 8001f0e:	4821      	ldr	r0, [pc, #132]	@ (8001f94 <file_handler.constprop.0+0xc0>)
 8001f10:	f00d f93c 	bl	800f18c <f_open>
 8001f14:	b110      	cbz	r0, 8001f1c <file_handler.constprop.0+0x48>
static int file_handler(uint8_t openFile)
 8001f16:	2000      	movs	r0, #0
}
 8001f18:	b005      	add	sp, #20
 8001f1a:	bd30      	pop	{r4, r5, pc}
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001f1c:	491e      	ldr	r1, [pc, #120]	@ (8001f98 <file_handler.constprop.0+0xc4>)
  		 video.isfirstFrame = 1;
 8001f1e:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001f20:	9001      	str	r0, [sp, #4]
 8001f22:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001f26:	9100      	str	r1, [sp, #0]
 8001f28:	4815      	ldr	r0, [pc, #84]	@ (8001f80 <file_handler.constprop.0+0xac>)
  		 video.isfirstFrame = 1;
 8001f2a:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8001f2c:	4919      	ldr	r1, [pc, #100]	@ (8001f94 <file_handler.constprop.0+0xc0>)
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <file_handler.constprop.0+0xc8>)
 8001f30:	f7fe fa2e 	bl	8000390 <AVI_ParserInit>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d1ee      	bne.n	8001f16 <file_handler.constprop.0+0x42>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <file_handler.constprop.0+0xac>)
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3d2      	bcc.n	8001ee8 <file_handler.constprop.0+0x14>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001f42:	4d10      	ldr	r5, [pc, #64]	@ (8001f84 <file_handler.constprop.0+0xb0>)
 8001f44:	4916      	ldr	r1, [pc, #88]	@ (8001fa0 <file_handler.constprop.0+0xcc>)
	   	 video.file_idx++;
 8001f46:	8aab      	ldrh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001f48:	4816      	ldr	r0, [pc, #88]	@ (8001fa4 <file_handler.constprop.0+0xd0>)
	   	 video.file_idx++;
 8001f4a:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001f4c:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	fba1 1202 	umull	r1, r2, r1, r2
 8001f56:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001f5a:	fb01 3312 	mls	r3, r1, r2, r3
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001f5e:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001f60:	82ab      	strh	r3, [r5, #20]
		 if(HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50) != HAL_OK)
 8001f62:	f004 f817 	bl	8005f94 <HAL_DMA2D_PollForTransfer>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d1d5      	bne.n	8001f16 <file_handler.constprop.0+0x42>
		 if(f_close(&MJPEG_File) != FR_OK)
 8001f6a:	480a      	ldr	r0, [pc, #40]	@ (8001f94 <file_handler.constprop.0+0xc0>)
 8001f6c:	f00d fbbe 	bl	800f6ec <f_close>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d1d0      	bne.n	8001f16 <file_handler.constprop.0+0x42>
		 new_file_flag = 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	7023      	strb	r3, [r4, #0]
 8001f78:	e7b6      	b.n	8001ee8 <file_handler.constprop.0+0x14>
 8001f7a:	bf00      	nop
 8001f7c:	24000000 	.word	0x24000000
 8001f80:	240ac318 	.word	0x240ac318
 8001f84:	2409fad8 	.word	0x2409fad8
 8001f88:	0801054c 	.word	0x0801054c
 8001f8c:	08010554 	.word	0x08010554
 8001f90:	240ac7c0 	.word	0x240ac7c0
 8001f94:	240ac360 	.word	0x240ac360
 8001f98:	2409fb18 	.word	0x2409fb18
 8001f9c:	2409fb18 	.word	0x2409fb18
 8001fa0:	05b05b06 	.word	0x05b05b06
 8001fa4:	240001b8 	.word	0x240001b8

08001fa8 <show_frame.constprop.0>:
static int show_frame(uint32_t frame_num)
 8001fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(video.FrameType == AVI_VIDEO_FRAME)
 8001fac:	4c57      	ldr	r4, [pc, #348]	@ (800210c <show_frame.constprop.0+0x164>)
static int show_frame(uint32_t frame_num)
 8001fae:	b084      	sub	sp, #16
	if(video.FrameType == AVI_VIDEO_FRAME)
 8001fb0:	7de3      	ldrb	r3, [r4, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d003      	beq.n	8001fbe <show_frame.constprop.0+0x16>
	return 1;
 8001fb6:	2001      	movs	r0, #1
}
 8001fb8:	b004      	add	sp, #16
 8001fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		AVI_Handel.CurrentImage++;
 8001fbe:	4954      	ldr	r1, [pc, #336]	@ (8002110 <show_frame.constprop.0+0x168>)
		video.frameCount++;
 8001fc0:	69e0      	ldr	r0, [r4, #28]
		AVI_Handel.CurrentImage++;
 8001fc2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
		video.frameCount++;
 8001fc4:	1c45      	adds	r5, r0, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8001fc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
		AVI_Handel.CurrentImage++;
 8001fc8:	1c50      	adds	r0, r2, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8001fca:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
		video.frameCount++;
 8001fcc:	61e5      	str	r5, [r4, #28]
		AVI_Handel.CurrentImage++;
 8001fce:	62c8      	str	r0, [r1, #44]	@ 0x2c
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8001fd0:	4950      	ldr	r1, [pc, #320]	@ (8002114 <show_frame.constprop.0+0x16c>)
 8001fd2:	4851      	ldr	r0, [pc, #324]	@ (8002118 <show_frame.constprop.0+0x170>)
 8001fd4:	f7ff fbac 	bl	8001730 <JPEG_Decode_DMA>
 8001fd8:	2801      	cmp	r0, #1
 8001fda:	f040 8085 	bne.w	80020e8 <show_frame.constprop.0+0x140>
 8001fde:	4d4f      	ldr	r5, [pc, #316]	@ (800211c <show_frame.constprop.0+0x174>)
 8001fe0:	494f      	ldr	r1, [pc, #316]	@ (8002120 <show_frame.constprop.0+0x178>)
			if(count_iter >= MAX_ITERATIONS_NUM)
 8001fe2:	4850      	ldr	r0, [pc, #320]	@ (8002124 <show_frame.constprop.0+0x17c>)
 8001fe4:	682b      	ldr	r3, [r5, #0]
 8001fe6:	e001      	b.n	8001fec <show_frame.constprop.0+0x44>
 8001fe8:	4283      	cmp	r3, r0
 8001fea:	d87c      	bhi.n	80020e6 <show_frame.constprop.0+0x13e>
		while(Jpeg_HWDecodingEnd == 0)
 8001fec:	680a      	ldr	r2, [r1, #0]
			count_iter++;
 8001fee:	3301      	adds	r3, #1
		while(Jpeg_HWDecodingEnd == 0)
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	d0f9      	beq.n	8001fe8 <show_frame.constprop.0+0x40>
		if(video.isfirstFrame == 1)
 8001ff4:	7da2      	ldrb	r2, [r4, #22]
		count_iter = 0;
 8001ff6:	2300      	movs	r3, #0
		if(video.isfirstFrame == 1)
 8001ff8:	2a01      	cmp	r2, #1
		count_iter = 0;
 8001ffa:	602b      	str	r3, [r5, #0]
		if(video.isfirstFrame == 1)
 8001ffc:	d076      	beq.n	80020ec <show_frame.constprop.0+0x144>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8001ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <show_frame.constprop.0+0x180>)
 8002000:	e9d3 7902 	ldrd	r7, r9, [r3, #8]
	uint32_t xPos, yPos, destination;


	// calculate the destination transfer address
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002004:	f1c7 02f0 	rsb	r2, r7, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002008:	f1c9 03f0 	rsb	r3, r9, #240	@ 0xf0
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800200c:	4e47      	ldr	r6, [pc, #284]	@ (800212c <show_frame.constprop.0+0x184>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;

	// wait for the DMA2D transfer to ends
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
	// copy the new decoded frame to the LCD Frame buffer
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800200e:	b2bf      	uxth	r7, r7
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002010:	0852      	lsrs	r2, r2, #1
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002012:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002016:	085b      	lsrs	r3, r3, #1
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800201c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002020:	4843      	ldr	r0, [pc, #268]	@ (8002130 <show_frame.constprop.0+0x188>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8002022:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002026:	6832      	ldr	r2, [r6, #0]
 8002028:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800202c:	f003 ffb2 	bl	8005f94 <HAL_DMA2D_PollForTransfer>
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8002030:	4641      	mov	r1, r8
 8002032:	fa1f f389 	uxth.w	r3, r9
 8002036:	4652      	mov	r2, sl
 8002038:	483d      	ldr	r0, [pc, #244]	@ (8002130 <show_frame.constprop.0+0x188>)
 800203a:	9700      	str	r7, [sp, #0]
 800203c:	f003 ff4e 	bl	8005edc <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8002040:	8b63      	ldrh	r3, [r4, #26]
 8002042:	f8b4 c018 	ldrh.w	ip, [r4, #24]
		pOut.u8Arr = (uint8_t *)outputData;
 8002046:	6834      	ldr	r4, [r6, #0]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 8002048:	fb1c fc03 	smulbb	ip, ip, r3
 800204c:	fa1f f38c 	uxth.w	r3, ip
	for( ; i < length ; i++)
 8002050:	b1ab      	cbz	r3, 800207e <show_frame.constprop.0+0xd6>
 8002052:	4620      	mov	r0, r4
 8002054:	eb04 0c43 	add.w	ip, r4, r3, lsl #1
 8002058:	4621      	mov	r1, r4
		pxArr->u16Arr[i] = color565(r, g, b);
 800205a:	4f36      	ldr	r7, [pc, #216]	@ (8002134 <show_frame.constprop.0+0x18c>)
 800205c:	784a      	ldrb	r2, [r1, #1]
 800205e:	788b      	ldrb	r3, [r1, #2]
 8002060:	00d2      	lsls	r2, r2, #3
 8002062:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 8002066:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800206a:	4313      	orrs	r3, r2
 800206c:	f811 2b03 	ldrb.w	r2, [r1], #3
 8002070:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8002074:	ba5b      	rev16	r3, r3
 8002076:	f820 3b02 	strh.w	r3, [r0], #2
	for( ; i < length ; i++)
 800207a:	4584      	cmp	ip, r0
 800207c:	d1ee      	bne.n	800205c <show_frame.constprop.0+0xb4>
 800207e:	af02      	add	r7, sp, #8
       frame.start.X = 0;
 8002080:	f04f 0800 	mov.w	r8, #0
 8002084:	f04f 19ef 	mov.w	r9, #15663343	@ 0xef00ef
 8002088:	e004      	b.n	8002094 <show_frame.constprop.0+0xec>
			count_iter++;
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	3301      	adds	r3, #1
			if(count_iter >= MAX_ATTEMPTS_NUM)
 800208e:	2b09      	cmp	r3, #9
			count_iter++;
 8002090:	602b      	str	r3, [r5, #0]
			if(count_iter >= MAX_ATTEMPTS_NUM)
 8002092:	d829      	bhi.n	80020e8 <show_frame.constprop.0+0x140>
       frame.start.X = 0;
 8002094:	e9cd 8902 	strd	r8, r9, [sp, #8]
	   GC9A01_set_frame(frame);
 8002098:	e897 0003 	ldmia.w	r7, {r0, r1}
 800209c:	f7ff fac8 	bl	8001630 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 80020a0:	202c      	movs	r0, #44	@ 0x2c
 80020a2:	f7fe fdbd 	bl	8000c20 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7fe fd84 	bl	8000bb4 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7fe fd99 	bl	8000be4 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff fb0d 	bl	80016d8 <GC9A01_spi_tx>
	   if(ret != 1)
 80020be:	2801      	cmp	r0, #1
 80020c0:	d1e3      	bne.n	800208a <show_frame.constprop.0+0xe2>
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 80020c2:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80020c6:	2200      	movs	r2, #0
 80020c8:	1860      	adds	r0, r4, r1
 80020ca:	f7ff fb05 	bl	80016d8 <GC9A01_spi_tx>
		while(lcd_draw(pOut.u8Arr) != 1)
 80020ce:	2801      	cmp	r0, #1
 80020d0:	d1db      	bne.n	800208a <show_frame.constprop.0+0xe2>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 80020d2:	6831      	ldr	r1, [r6, #0]
 80020d4:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <show_frame.constprop.0+0x190>)
 80020d6:	4b19      	ldr	r3, [pc, #100]	@ (800213c <show_frame.constprop.0+0x194>)
		count_iter = 0;
 80020d8:	f8c5 8000 	str.w	r8, [r5]
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 80020dc:	4291      	cmp	r1, r2
 80020de:	bf18      	it	ne
 80020e0:	4613      	movne	r3, r2
 80020e2:	6033      	str	r3, [r6, #0]
 80020e4:	e767      	b.n	8001fb6 <show_frame.constprop.0+0xe>
 80020e6:	602b      	str	r3, [r5, #0]
	return 1;
 80020e8:	2000      	movs	r0, #0
 80020ea:	e765      	b.n	8001fb8 <show_frame.constprop.0+0x10>
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 80020ec:	4e0e      	ldr	r6, [pc, #56]	@ (8002128 <show_frame.constprop.0+0x180>)
 80020ee:	480a      	ldr	r0, [pc, #40]	@ (8002118 <show_frame.constprop.0+0x170>)
 80020f0:	4631      	mov	r1, r6
			video.isfirstFrame = 0;
 80020f2:	75a3      	strb	r3, [r4, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 80020f4:	f005 fdda 	bl	8007cac <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 80020f8:	6871      	ldr	r1, [r6, #4]
 80020fa:	89b0      	ldrh	r0, [r6, #12]
 80020fc:	f7ff fe9e 	bl	8001e3c <DMA2D_Init.constprop.0>
			video.height = JPEG_Info.ImageHeight;
 8002100:	e9d6 7902 	ldrd	r7, r9, [r6, #8]
			video.width = JPEG_Info.ImageWidth;
 8002104:	f8a4 9018 	strh.w	r9, [r4, #24]
			video.height = JPEG_Info.ImageHeight;
 8002108:	8367      	strh	r7, [r4, #26]
 800210a:	e77b      	b.n	8002004 <show_frame.constprop.0+0x5c>
 800210c:	2409fad8 	.word	0x2409fad8
 8002110:	240ac318 	.word	0x240ac318
 8002114:	2409fb18 	.word	0x2409fb18
 8002118:	24000220 	.word	0x24000220
 800211c:	240003fc 	.word	0x240003fc
 8002120:	240000a8 	.word	0x240000a8
 8002124:	000f423f 	.word	0x000f423f
 8002128:	240001a4 	.word	0x240001a4
 800212c:	24000004 	.word	0x24000004
 8002130:	240001b8 	.word	0x240001b8
 8002134:	fffff800 	.word	0xfffff800
 8002138:	2402a774 	.word	0x2402a774
 800213c:	24000410 	.word	0x24000410

08002140 <smart_watch_init>:
{
 8002140:	b538      	push	{r3, r4, r5, lr}
	video.frame_time = 0.0;
 8002142:	2100      	movs	r1, #0
	video.time.Hours = 0;
 8002144:	4c19      	ldr	r4, [pc, #100]	@ (80021ac <smart_watch_init+0x6c>)
 8002146:	2500      	movs	r5, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002148:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <smart_watch_init+0x70>)
	video.display_status = DISPLAY_ON;
 800214a:	2301      	movs	r3, #1
}

static void disable_accel_int(void)
{

	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800214c:	2017      	movs	r0, #23
	video.frame_time = 0.0;
 800214e:	6261      	str	r1, [r4, #36]	@ 0x24
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002150:	6322      	str	r2, [r4, #48]	@ 0x30
	video.display_status = DISPLAY_ON;
 8002152:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	video.time.Hours = 0;
 8002156:	8025      	strh	r5, [r4, #0]
	video.time.Seconds = 0;
 8002158:	70a5      	strb	r5, [r4, #2]
	video.file_idx = 0;
 800215a:	82a5      	strh	r5, [r4, #20]
	video.FrameType = 0;
 800215c:	75e5      	strb	r5, [r4, #23]
	video.frameToSkip = 0;
 800215e:	6225      	str	r5, [r4, #32]
	video.display_ts = video.time.Seconds;
 8002160:	63a5      	str	r5, [r4, #56]	@ 0x38
	video.frameCount = 0;
 8002162:	61e5      	str	r5, [r4, #28]
	video.set = SET_IDLE;
 8002164:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
	video.tick_offset = 0;
 8002168:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800216c:	f002 f9fe 	bl	800456c <HAL_NVIC_DisableIRQ>
	pAcc_Handle = (fxls8974_i2c_sensorhandle_t *)get_acc_addr();
 8002170:	f7ff fdf0 	bl	8001d54 <get_acc_addr>
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <smart_watch_init+0x74>)
 8002176:	6018      	str	r0, [r3, #0]
	if(FXLS8974_I2C_Configure(pAcc_Handle) != 1)
 8002178:	f7fe fb82 	bl	8000880 <FXLS8974_I2C_Configure>
 800217c:	2801      	cmp	r0, #1
 800217e:	d001      	beq.n	8002184 <smart_watch_init+0x44>
		return 0;
 8002180:	2000      	movs	r0, #0
}
 8002182:	bd38      	pop	{r3, r4, r5, pc}
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002184:	490c      	ldr	r1, [pc, #48]	@ (80021b8 <smart_watch_init+0x78>)
 8002186:	480d      	ldr	r0, [pc, #52]	@ (80021bc <smart_watch_init+0x7c>)
	video.video_mode = SETTING_MODE;
 8002188:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800218c:	f00d fcea 	bl	800fb64 <FATFS_LinkDriver>
 8002190:	4604      	mov	r4, r0
 8002192:	2800      	cmp	r0, #0
 8002194:	d1f4      	bne.n	8002180 <smart_watch_init+0x40>
	BSP_SD_Init();
 8002196:	f00b fddd 	bl	800dd54 <BSP_SD_Init>
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800219a:	4622      	mov	r2, r4
 800219c:	4906      	ldr	r1, [pc, #24]	@ (80021b8 <smart_watch_init+0x78>)
 800219e:	4808      	ldr	r0, [pc, #32]	@ (80021c0 <smart_watch_init+0x80>)
 80021a0:	f00c ffa8 	bl	800f0f4 <f_mount>
 80021a4:	fab0 f080 	clz	r0, r0
 80021a8:	0940      	lsrs	r0, r0, #5
}
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
 80021ac:	2409fad8 	.word	0x2409fad8
 80021b0:	24054ad8 	.word	0x24054ad8
 80021b4:	24000404 	.word	0x24000404
 80021b8:	240ac8b4 	.word	0x240ac8b4
 80021bc:	080107e0 	.word	0x080107e0
 80021c0:	240ac590 	.word	0x240ac590
 80021c4:	00000000 	.word	0x00000000

080021c8 <smart_watch_process>:
{
 80021c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch(video.video_mode)
 80021cc:	4cd0      	ldr	r4, [pc, #832]	@ (8002510 <smart_watch_process+0x348>)
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80021ce:	4dd1      	ldr	r5, [pc, #836]	@ (8002514 <smart_watch_process+0x34c>)
 80021d0:	4ed1      	ldr	r6, [pc, #836]	@ (8002518 <smart_watch_process+0x350>)
{
 80021d2:	ed2d 8b06 	vpush	{d8-d10}
 80021d6:	b087      	sub	sp, #28
		if(file_handler(0) != 1)
 80021d8:	f7ff fe7c 	bl	8001ed4 <file_handler.constprop.0>
 80021dc:	2801      	cmp	r0, #1
 80021de:	f040 81c5 	bne.w	800256c <smart_watch_process+0x3a4>
	switch(video.video_mode)
 80021e2:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	f000 81c6 	beq.w	8002578 <smart_watch_process+0x3b0>
	switch(video.set)
 80021ec:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	f000 82e7 	beq.w	80027c4 <smart_watch_process+0x5fc>
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	f000 82dd 	beq.w	80027b6 <smart_watch_process+0x5ee>
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	f000 8323 	beq.w	8002848 <smart_watch_process+0x680>
			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 8002202:	4fc6      	ldr	r7, [pc, #792]	@ (800251c <smart_watch_process+0x354>)
 8002204:	2102      	movs	r1, #2
 8002206:	4638      	mov	r0, r7
 8002208:	f004 f9d2 	bl	80065b0 <HAL_GPIO_ReadPin>
 800220c:	2800      	cmp	r0, #0
 800220e:	d0f9      	beq.n	8002204 <smart_watch_process+0x3c>
			video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	4631      	mov	r1, r6
 8002214:	4628      	mov	r0, r5
 8002216:	f7fe f9fd 	bl	8000614 <AVI_GetFrame>
			video.set = SET_HOURS;
 800221a:	2301      	movs	r3, #1
			video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800221c:	75e0      	strb	r0, [r4, #23]
			video.set = SET_HOURS;
 800221e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}

static void enable_btn_int(void)
{

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002222:	2006      	movs	r0, #6
 8002224:	f002 f994 	bl	8004550 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002228:	2007      	movs	r0, #7
 800222a:	f002 f991 	bl	8004550 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800222e:	2008      	movs	r0, #8
 8002230:	f002 f98e 	bl	8004550 <HAL_NVIC_EnableIRQ>
	if(video.display_status == DISPLAY_ON)
 8002234:	f894 703c 	ldrb.w	r7, [r4, #60]	@ 0x3c
 8002238:	2f01      	cmp	r7, #1
 800223a:	d1cd      	bne.n	80021d8 <smart_watch_process+0x10>
		if(video.time.Seconds >= DISPLAY_STANDBY_TIMER)
 800223c:	78a3      	ldrb	r3, [r4, #2]
 800223e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002240:	d9ca      	bls.n	80021d8 <smart_watch_process+0x10>
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, SET);
 8002242:	463a      	mov	r2, r7
 8002244:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002248:	48b5      	ldr	r0, [pc, #724]	@ (8002520 <smart_watch_process+0x358>)
	video.time.Hours = 0;
 800224a:	f04f 0900 	mov.w	r9, #0
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, SET);
 800224e:	f004 f9b5 	bl	80065bc <HAL_GPIO_WritePin>
	video.frame_time = 0.0;
 8002252:	2300      	movs	r3, #0
			if(GC9A01_sleep_mode(ON) != 1)
 8002254:	4638      	mov	r0, r7
	video.display_status = DISPLAY_ON;
 8002256:	f884 703c 	strb.w	r7, [r4, #60]	@ 0x3c
	video.frame_time = 0.0;
 800225a:	6263      	str	r3, [r4, #36]	@ 0x24
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800225c:	4bb1      	ldr	r3, [pc, #708]	@ (8002524 <smart_watch_process+0x35c>)
	video.time.Hours = 0;
 800225e:	f8a4 9000 	strh.w	r9, [r4]
	video.time.Seconds = 0;
 8002262:	f884 9002 	strb.w	r9, [r4, #2]
	video.file_idx = 0;
 8002266:	f8a4 9014 	strh.w	r9, [r4, #20]
	video.FrameType = 0;
 800226a:	f884 9017 	strb.w	r9, [r4, #23]
	video.frameToSkip = 0;
 800226e:	f8c4 9020 	str.w	r9, [r4, #32]
	video.display_ts = video.time.Seconds;
 8002272:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
	video.frameCount = 0;
 8002276:	f8c4 901c 	str.w	r9, [r4, #28]
	video.set = SET_IDLE;
 800227a:	f884 9035 	strb.w	r9, [r4, #53]	@ 0x35
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800227e:	6323      	str	r3, [r4, #48]	@ 0x30
	video.tick_offset = 0;
 8002280:	e9c4 990a 	strd	r9, r9, [r4, #40]	@ 0x28
			if(GC9A01_sleep_mode(ON) != 1)
 8002284:	f7ff fa14 	bl	80016b0 <GC9A01_sleep_mode>
 8002288:	2801      	cmp	r0, #1
 800228a:	f040 816f 	bne.w	800256c <smart_watch_process+0x3a4>
			video.display_status = DISPLAY_OFF;
 800228e:	f884 903c 	strb.w	r9, [r4, #60]	@ 0x3c
 8002292:	f8df 82ac 	ldr.w	r8, [pc, #684]	@ 8002540 <smart_watch_process+0x378>
 8002296:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 8002544 <smart_watch_process+0x37c>
				HAL_ADC_DeInit(&hadc1);
 800229a:	4fa3      	ldr	r7, [pc, #652]	@ (8002528 <smart_watch_process+0x360>)
	battery_scaled_volt = ( ( battery_scaled_raw / 4096.0 ) * 3.3 );
 800229c:	ed9f ab94 	vldr	d10, [pc, #592]	@ 80024f0 <smart_watch_process+0x328>
 80022a0:	ed9f 9b95 	vldr	d9, [pc, #596]	@ 80024f8 <smart_watch_process+0x330>
	battery_volt = REVERT_VOLTAGE_DIV(battery_scaled_volt);
 80022a4:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 8002500 <smart_watch_process+0x338>
				HAL_ADC_DeInit(&hadc1);
 80022a8:	4638      	mov	r0, r7
 80022aa:	f001 fdef 	bl	8003e8c <HAL_ADC_DeInit>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022ae:	2017      	movs	r0, #23
 80022b0:	f002 f94e 	bl	8004550 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022b4:	2006      	movs	r0, #6
 80022b6:	f002 f94b 	bl	8004550 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022ba:	2007      	movs	r0, #7
 80022bc:	f002 f948 	bl	8004550 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80022c0:	2008      	movs	r0, #8
 80022c2:	f002 f945 	bl	8004550 <HAL_NVIC_EnableIRQ>
				acc_int = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f888 3000 	strb.w	r3, [r8]
				wake_up = 0;
 80022cc:	f889 3000 	strb.w	r3, [r9]
				HAL_SuspendTick();
 80022d0:	f001 f97a 	bl	80035c8 <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 80022d4:	b672      	cpsid	i
				HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80022d6:	2101      	movs	r1, #1
 80022d8:	4608      	mov	r0, r1
 80022da:	f006 fd23 	bl	8008d24 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 80022de:	b662      	cpsie	i
				HAL_ResumeTick();
 80022e0:	f001 f97a 	bl	80035d8 <HAL_ResumeTick>
				SystemClock_Config();
 80022e4:	f7ff fa84 	bl	80017f0 <SystemClock_Config>
				MX_ADC1_Init();
 80022e8:	f7ff fae2 	bl	80018b0 <MX_ADC1_Init>
				if(acc_int)
 80022ec:	f898 3000 	ldrb.w	r3, [r8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 82f9 	bne.w	80028e8 <smart_watch_process+0x720>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 80022f6:	f04f 0a1e 	mov.w	sl, #30
		HAL_ADC_Start(&hadc1);
 80022fa:	4638      	mov	r0, r7
 80022fc:	f001 fd1e 	bl	8003d3c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	4638      	mov	r0, r7
 8002306:	f001 f96f 	bl	80035e8 <HAL_ADC_PollForConversion>
		battery_scaled_raw = HAL_ADC_GetValue(&hadc1);
 800230a:	4638      	mov	r0, r7
 800230c:	f001 f9e2 	bl	80036d4 <HAL_ADC_GetValue>
 8002310:	4683      	mov	fp, r0
		HAL_ADC_Stop(&hadc1);
 8002312:	4638      	mov	r0, r7
 8002314:	f001 fe7e 	bl	8004014 <HAL_ADC_Stop>
		HAL_Delay(10);
 8002318:	200a      	movs	r0, #10
 800231a:	f001 f943 	bl	80035a4 <HAL_Delay>
	for(int i = 0 ; i < 30 ; i++)
 800231e:	f1ba 0a01 	subs.w	sl, sl, #1
 8002322:	d1ea      	bne.n	80022fa <smart_watch_process+0x132>
	battery_scaled_volt = ( ( battery_scaled_raw / 4096.0 ) * 3.3 );
 8002324:	ee07 ba90 	vmov	s15, fp
	if(battery_volt < BATTERY_THRESH)
 8002328:	eef0 6a0c 	vmov.f32	s13, #12	@ 0x40600000  3.5
	battery_scaled_volt = ( ( battery_scaled_raw / 4096.0 ) * 3.3 );
 800232c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002330:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8002334:	ee27 7b09 	vmul.f64	d7, d7, d9
 8002338:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	battery_volt = REVERT_VOLTAGE_DIV(battery_scaled_volt);
 800233c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002340:	ee27 7b08 	vmul.f64	d7, d7, d8
 8002344:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	if(battery_volt < BATTERY_THRESH)
 8002348:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	d4aa      	bmi.n	80022a8 <smart_watch_process+0xe0>
			}while(( check_battery_status() == BATTERY_LOW ) || !wake_up);
 8002352:	f899 3000 	ldrb.w	r3, [r9]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0a6      	beq.n	80022a8 <smart_watch_process+0xe0>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800235a:	2017      	movs	r0, #23
 800235c:	f002 f906 	bl	800456c <HAL_NVIC_DisableIRQ>
}

static void disable_btn_int(void)
{

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002360:	2006      	movs	r0, #6
 8002362:	f002 f903 	bl	800456c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002366:	2007      	movs	r0, #7
 8002368:	f002 f900 	bl	800456c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800236c:	2008      	movs	r0, #8
 800236e:	f002 f8fd 	bl	800456c <HAL_NVIC_DisableIRQ>
			GC9A01_Init();
 8002372:	f7fe fcf7 	bl	8000d64 <GC9A01_Init>
			video.display_status = DISPLAY_ON;
 8002376:	2301      	movs	r3, #1
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002378:	4652      	mov	r2, sl
 800237a:	4965      	ldr	r1, [pc, #404]	@ (8002510 <smart_watch_process+0x348>)
 800237c:	486b      	ldr	r0, [pc, #428]	@ (800252c <smart_watch_process+0x364>)
			video.display_status = DISPLAY_ON;
 800237e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
	RTC_DateTypeDef sDate = {0};
 8002382:	f8cd a010 	str.w	sl, [sp, #16]
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002386:	f008 fe25 	bl	800afd4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800238a:	a904      	add	r1, sp, #16
 800238c:	4652      	mov	r2, sl
 800238e:	4867      	ldr	r0, [pc, #412]	@ (800252c <smart_watch_process+0x364>)
 8002390:	f008 fe5c 	bl	800b04c <HAL_RTC_GetDate>
	time.current_day = sDate.Date;
 8002394:	4966      	ldr	r1, [pc, #408]	@ (8002530 <smart_watch_process+0x368>)
 8002396:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800239a:	708b      	strb	r3, [r1, #2]
	time.current_month = sDate.Month;
 800239c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80023a0:	70cb      	strb	r3, [r1, #3]
	if(time.current_month > time.first_month)
 80023a2:	78c8      	ldrb	r0, [r1, #3]
 80023a4:	784b      	ldrb	r3, [r1, #1]
 80023a6:	4298      	cmp	r0, r3
 80023a8:	f240 82ac 	bls.w	8002904 <smart_watch_process+0x73c>
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023ac:	784f      	ldrb	r7, [r1, #1]
 80023ae:	78cb      	ldrb	r3, [r1, #3]
 80023b0:	b2f8      	uxtb	r0, r7
 80023b2:	3b01      	subs	r3, #1
 80023b4:	429f      	cmp	r7, r3
 80023b6:	f280 83fc 	bge.w	8002bb2 <smart_watch_process+0x9ea>
 80023ba:	78cf      	ldrb	r7, [r1, #3]
 80023bc:	f100 0c01 	add.w	ip, r0, #1
			days_elapsed += num_of_days_per_month[i];
 80023c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002534 <smart_watch_process+0x36c>)
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023c2:	3f01      	subs	r7, #1
			days_elapsed += num_of_days_per_month[i];
 80023c4:	5c1a      	ldrb	r2, [r3, r0]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023c6:	45bc      	cmp	ip, r7
 80023c8:	da5d      	bge.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 80023ca:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023ce:	f100 0c02 	add.w	ip, r0, #2
			days_elapsed += num_of_days_per_month[i];
 80023d2:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023d4:	78cf      	ldrb	r7, [r1, #3]
 80023d6:	3f01      	subs	r7, #1
 80023d8:	45bc      	cmp	ip, r7
 80023da:	da54      	bge.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 80023dc:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023e0:	f100 0c03 	add.w	ip, r0, #3
			days_elapsed += num_of_days_per_month[i];
 80023e4:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023e6:	78cf      	ldrb	r7, [r1, #3]
 80023e8:	3f01      	subs	r7, #1
 80023ea:	45bc      	cmp	ip, r7
 80023ec:	da4b      	bge.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 80023ee:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023f2:	f100 0c04 	add.w	ip, r0, #4
			days_elapsed += num_of_days_per_month[i];
 80023f6:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 80023f8:	78cf      	ldrb	r7, [r1, #3]
 80023fa:	3f01      	subs	r7, #1
 80023fc:	4567      	cmp	r7, ip
 80023fe:	dd42      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002400:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002404:	f100 0c05 	add.w	ip, r0, #5
			days_elapsed += num_of_days_per_month[i];
 8002408:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800240a:	78cf      	ldrb	r7, [r1, #3]
 800240c:	3f01      	subs	r7, #1
 800240e:	4567      	cmp	r7, ip
 8002410:	dd39      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002412:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002416:	f100 0c06 	add.w	ip, r0, #6
			days_elapsed += num_of_days_per_month[i];
 800241a:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800241c:	78cf      	ldrb	r7, [r1, #3]
 800241e:	3f01      	subs	r7, #1
 8002420:	4567      	cmp	r7, ip
 8002422:	dd30      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002424:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002428:	f100 0c07 	add.w	ip, r0, #7
			days_elapsed += num_of_days_per_month[i];
 800242c:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800242e:	78cf      	ldrb	r7, [r1, #3]
 8002430:	3f01      	subs	r7, #1
 8002432:	4567      	cmp	r7, ip
 8002434:	dd27      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002436:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800243a:	f100 0c08 	add.w	ip, r0, #8
			days_elapsed += num_of_days_per_month[i];
 800243e:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002440:	78cf      	ldrb	r7, [r1, #3]
 8002442:	3f01      	subs	r7, #1
 8002444:	4567      	cmp	r7, ip
 8002446:	dd1e      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002448:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800244c:	f100 0c09 	add.w	ip, r0, #9
			days_elapsed += num_of_days_per_month[i];
 8002450:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002452:	78cf      	ldrb	r7, [r1, #3]
 8002454:	3f01      	subs	r7, #1
 8002456:	4567      	cmp	r7, ip
 8002458:	dd15      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 800245a:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800245e:	f100 0c0a 	add.w	ip, r0, #10
			days_elapsed += num_of_days_per_month[i];
 8002462:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002464:	78cf      	ldrb	r7, [r1, #3]
 8002466:	3f01      	subs	r7, #1
			days_elapsed += num_of_days_per_month[i];
 8002468:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800246a:	4567      	cmp	r7, ip
 800246c:	dd0b      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 800246e:	f813 700c 	ldrb.w	r7, [r3, ip]
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002472:	300b      	adds	r0, #11
			days_elapsed += num_of_days_per_month[i];
 8002474:	443a      	add	r2, r7
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002476:	78cf      	ldrb	r7, [r1, #3]
 8002478:	3f01      	subs	r7, #1
			days_elapsed += num_of_days_per_month[i];
 800247a:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 800247c:	4287      	cmp	r7, r0
 800247e:	dd02      	ble.n	8002486 <smart_watch_process+0x2be>
			days_elapsed += num_of_days_per_month[i];
 8002480:	321f      	adds	r2, #31
		for(int i = time.first_month ; i < ( time.current_month - 1 ); i++)
 8002482:	78c8      	ldrb	r0, [r1, #3]
			days_elapsed += num_of_days_per_month[i];
 8002484:	b292      	uxth	r2, r2
		days_elapsed += ( time.current_day + num_of_days_per_month[time.first_month-1] - time.first_day );
 8002486:	788f      	ldrb	r7, [r1, #2]
 8002488:	7848      	ldrb	r0, [r1, #1]
 800248a:	7809      	ldrb	r1, [r1, #0]
 800248c:	4403      	add	r3, r0
 800248e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002492:	443b      	add	r3, r7
 8002494:	1a5b      	subs	r3, r3, r1
 8002496:	441a      	add	r2, r3
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 8002498:	b293      	uxth	r3, r2
 800249a:	ee07 3a90 	vmov	s15, r3
	uint32_t hour_offs = ( time_delay_min / 60 );
 800249e:	4926      	ldr	r1, [pc, #152]	@ (8002538 <smart_watch_process+0x370>)
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024a0:	7822      	ldrb	r2, [r4, #0]
			if(file_handler(1) != 1)
 80024a2:	2001      	movs	r0, #1
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 80024a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 80024a8:	f894 e001 	ldrb.w	lr, [r4, #1]
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024ac:	4f23      	ldr	r7, [pc, #140]	@ (800253c <smart_watch_process+0x374>)
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 80024ae:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002508 <smart_watch_process+0x340>
 80024b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80024ba:	ee17 3a90 	vmov	r3, s15
	uint32_t hour_offs = ( time_delay_min / 60 );
 80024be:	fba1 8c03 	umull	r8, ip, r1, r3
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024c2:	eb02 125c 	add.w	r2, r2, ip, lsr #5
	uint32_t hour_offs = ( time_delay_min / 60 );
 80024c6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	uint32_t min_offs = ( time_delay_min % 60 );
 80024ca:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 80024ce:	eba3 038c 	sub.w	r3, r3, ip, lsl #2
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024d2:	fba7 c702 	umull	ip, r7, r7, r2
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 80024d6:	4473      	add	r3, lr
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024d8:	08ff      	lsrs	r7, r7, #3
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 80024da:	fba1 c103 	umull	ip, r1, r1, r3
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 80024e2:	0949      	lsrs	r1, r1, #5
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 80024e4:	eba2 0287 	sub.w	r2, r2, r7, lsl #2
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 80024e8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80024ec:	e02c      	b.n	8002548 <smart_watch_process+0x380>
 80024ee:	bf00      	nop
 80024f0:	00000000 	.word	0x00000000
 80024f4:	3f300000 	.word	0x3f300000
 80024f8:	66666666 	.word	0x66666666
 80024fc:	400a6666 	.word	0x400a6666
 8002500:	063e7064 	.word	0x063e7064
 8002504:	3ff863e7 	.word	0x3ff863e7
 8002508:	a9fbe76d 	.word	0xa9fbe76d
 800250c:	3fd5d2f1 	.word	0x3fd5d2f1
 8002510:	2409fad8 	.word	0x2409fad8
 8002514:	240ac318 	.word	0x240ac318
 8002518:	240ac360 	.word	0x240ac360
 800251c:	58020800 	.word	0x58020800
 8002520:	58020400 	.word	0x58020400
 8002524:	24054ad8 	.word	0x24054ad8
 8002528:	240000c4 	.word	0x240000c4
 800252c:	2400017c 	.word	0x2400017c
 8002530:	24000408 	.word	0x24000408
 8002534:	0801055c 	.word	0x0801055c
 8002538:	88888889 	.word	0x88888889
 800253c:	aaaaaaab 	.word	0xaaaaaaab
 8002540:	24000401 	.word	0x24000401
 8002544:	24000400 	.word	0x24000400
	video.file_idx = ( ( ( video.time.Hours + hour_offs ) % 12 ) * 60 );
 8002548:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
	video.file_idx += ( ( video.time.Minutes + min_offs ) % 60 );
 800254c:	eba3 0381 	sub.w	r3, r3, r1, lsl #2
 8002550:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002554:	82a3      	strh	r3, [r4, #20]
			if(file_handler(1) != 1)
 8002556:	f7ff fc03 	bl	8001d60 <file_handler>
 800255a:	2801      	cmp	r0, #1
 800255c:	d106      	bne.n	800256c <smart_watch_process+0x3a4>
			video.display_ts = video.time.Seconds;
 800255e:	78a3      	ldrb	r3, [r4, #2]
 8002560:	63a3      	str	r3, [r4, #56]	@ 0x38
		if(file_handler(0) != 1)
 8002562:	f7ff fcb7 	bl	8001ed4 <file_handler.constprop.0>
 8002566:	2801      	cmp	r0, #1
 8002568:	f43f ae3b 	beq.w	80021e2 <smart_watch_process+0x1a>
}
 800256c:	2000      	movs	r0, #0
 800256e:	b007      	add	sp, #28
 8002570:	ecbd 8b06 	vpop	{d8-d10}
 8002574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	4631      	mov	r1, r6
 800257c:	48c5      	ldr	r0, [pc, #788]	@ (8002894 <smart_watch_process+0x6cc>)
 800257e:	f7fe f849 	bl	8000614 <AVI_GetFrame>
	if(video.frameToSkip)
 8002582:	6a22      	ldr	r2, [r4, #32]
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002584:	b2c3      	uxtb	r3, r0
 8002586:	75e3      	strb	r3, [r4, #23]
	if(video.frameToSkip)
 8002588:	2a00      	cmp	r2, #0
 800258a:	d03b      	beq.n	8002604 <smart_watch_process+0x43c>
		AVI_Handel.CurrentImage++;
 800258c:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
		video.frameToSkip--;
 800258e:	3a01      	subs	r2, #1
		video.frameCount++;
 8002590:	69e3      	ldr	r3, [r4, #28]
		AVI_Handel.CurrentImage++;
 8002592:	3101      	adds	r1, #1
		video.frameToSkip--;
 8002594:	6222      	str	r2, [r4, #32]
		video.frameCount++;
 8002596:	3301      	adds	r3, #1
		AVI_Handel.CurrentImage++;
 8002598:	62e9      	str	r1, [r5, #44]	@ 0x2c
		video.frameCount++;
 800259a:	61e3      	str	r3, [r4, #28]
	if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 800259c:	2102      	movs	r1, #2
 800259e:	48be      	ldr	r0, [pc, #760]	@ (8002898 <smart_watch_process+0x6d0>)
 80025a0:	f004 f806 	bl	80065b0 <HAL_GPIO_ReadPin>
 80025a4:	4607      	mov	r7, r0
 80025a6:	2800      	cmp	r0, #0
 80025a8:	f040 819a 	bne.w	80028e0 <smart_watch_process+0x718>
		count++;
 80025ac:	4abb      	ldr	r2, [pc, #748]	@ (800289c <smart_watch_process+0x6d4>)
 80025ae:	8813      	ldrh	r3, [r2, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	b29b      	uxth	r3, r3
	if(count >= RESET_ITER_NUM)
 80025b4:	2b1d      	cmp	r3, #29
 80025b6:	f240 8230 	bls.w	8002a1a <smart_watch_process+0x852>
		count = 0;
 80025ba:	8010      	strh	r0, [r2, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80025bc:	2006      	movs	r0, #6
 80025be:	f001 ffd5 	bl	800456c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80025c2:	2007      	movs	r0, #7
 80025c4:	f001 ffd2 	bl	800456c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80025c8:	2008      	movs	r0, #8
 80025ca:	f001 ffcf 	bl	800456c <HAL_NVIC_DisableIRQ>
		HAL_Delay(300);
 80025ce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
		video.video_mode = SETTING_MODE;
 80025d2:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
		HAL_Delay(300);
 80025d6:	f000 ffe5 	bl	80035a4 <HAL_Delay>
	video.frame_time = 0.0;
 80025da:	2300      	movs	r3, #0
	video.display_status = DISPLAY_ON;
 80025dc:	2001      	movs	r0, #1
	video.time.Hours = 0;
 80025de:	8027      	strh	r7, [r4, #0]
	video.frame_time = 0.0;
 80025e0:	6263      	str	r3, [r4, #36]	@ 0x24
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80025e2:	4baf      	ldr	r3, [pc, #700]	@ (80028a0 <smart_watch_process+0x6d8>)
	video.time.Seconds = 0;
 80025e4:	70a7      	strb	r7, [r4, #2]
	video.file_idx = 0;
 80025e6:	82a7      	strh	r7, [r4, #20]
	video.FrameType = 0;
 80025e8:	75e7      	strb	r7, [r4, #23]
	video.frameToSkip = 0;
 80025ea:	6227      	str	r7, [r4, #32]
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80025ec:	6323      	str	r3, [r4, #48]	@ 0x30
	video.display_ts = video.time.Seconds;
 80025ee:	63a7      	str	r7, [r4, #56]	@ 0x38
	video.frameCount = 0;
 80025f0:	61e7      	str	r7, [r4, #28]
	video.display_status = DISPLAY_ON;
 80025f2:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
	video.set = SET_IDLE;
 80025f6:	f884 7035 	strb.w	r7, [r4, #53]	@ 0x35
	video.tick_offset = 0;
 80025fa:	e9c4 770a 	strd	r7, r7, [r4, #40]	@ 0x28
		file_handler(1);
 80025fe:	f7ff fbaf 	bl	8001d60 <file_handler>
 8002602:	e617      	b.n	8002234 <smart_watch_process+0x6c>
	else if(video.FrameType == AVI_VIDEO_FRAME)
 8002604:	2b01      	cmp	r3, #1
 8002606:	d1c9      	bne.n	800259c <smart_watch_process+0x3d4>
		AVI_Handel.CurrentImage++;
 8002608:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
		video.frameCount++;
 800260a:	69e3      	ldr	r3, [r4, #28]
		AVI_Handel.CurrentImage++;
 800260c:	3201      	adds	r2, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 800260e:	49a5      	ldr	r1, [pc, #660]	@ (80028a4 <smart_watch_process+0x6dc>)
		video.frameCount++;
 8002610:	3301      	adds	r3, #1
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8002612:	48a5      	ldr	r0, [pc, #660]	@ (80028a8 <smart_watch_process+0x6e0>)
		AVI_Handel.CurrentImage++;
 8002614:	62ea      	str	r2, [r5, #44]	@ 0x2c
		video.frameCount++;
 8002616:	61e3      	str	r3, [r4, #28]
		if(JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess) != 1)
 8002618:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800261a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800261c:	f7ff f888 	bl	8001730 <JPEG_Decode_DMA>
 8002620:	2801      	cmp	r0, #1
 8002622:	d1a3      	bne.n	800256c <smart_watch_process+0x3a4>
 8002624:	4fa1      	ldr	r7, [pc, #644]	@ (80028ac <smart_watch_process+0x6e4>)
 8002626:	48a2      	ldr	r0, [pc, #648]	@ (80028b0 <smart_watch_process+0x6e8>)
 8002628:	683b      	ldr	r3, [r7, #0]
			if(count_iter >= MAX_ITERATIONS_NUM)
 800262a:	49a2      	ldr	r1, [pc, #648]	@ (80028b4 <smart_watch_process+0x6ec>)
 800262c:	e002      	b.n	8002634 <smart_watch_process+0x46c>
 800262e:	428b      	cmp	r3, r1
 8002630:	f200 82b6 	bhi.w	8002ba0 <smart_watch_process+0x9d8>
		while(Jpeg_HWDecodingEnd == 0)
 8002634:	6802      	ldr	r2, [r0, #0]
			count_iter++;
 8002636:	3301      	adds	r3, #1
		while(Jpeg_HWDecodingEnd == 0)
 8002638:	2a00      	cmp	r2, #0
 800263a:	d0f8      	beq.n	800262e <smart_watch_process+0x466>
		if(video.isfirstFrame == 1)
 800263c:	f894 a016 	ldrb.w	sl, [r4, #22]
		count_iter = 0;
 8002640:	f04f 0900 	mov.w	r9, #0
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002644:	f8df 828c 	ldr.w	r8, [pc, #652]	@ 80028d4 <smart_watch_process+0x70c>
		if(video.isfirstFrame == 1)
 8002648:	f1ba 0f01 	cmp.w	sl, #1
		count_iter = 0;
 800264c:	f8c7 9000 	str.w	r9, [r7]
		if(video.isfirstFrame == 1)
 8002650:	f000 82c0 	beq.w	8002bd4 <smart_watch_process+0xa0c>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002654:	f8df a280 	ldr.w	sl, [pc, #640]	@ 80028d8 <smart_watch_process+0x710>
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	4896      	ldr	r0, [pc, #600]	@ (80028b8 <smart_watch_process+0x6f0>)
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800265e:	f8d4 b030 	ldr.w	fp, [r4, #48]	@ 0x30
 8002662:	e9d8 9302 	ldrd	r9, r3, [r8, #8]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002666:	f1c9 02f0 	rsb	r2, r9, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 800266a:	f1c3 08f0 	rsb	r8, r3, #240	@ 0xf0
 800266e:	9303      	str	r3, [sp, #12]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002670:	0852      	lsrs	r2, r2, #1
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002672:	ea4f 0858 	mov.w	r8, r8, lsr #1
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8002676:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800267a:	eb08 1802 	add.w	r8, r8, r2, lsl #4
 800267e:	f8da 2000 	ldr.w	r2, [sl]
 8002682:	eb02 0888 	add.w	r8, r2, r8, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002686:	f003 fc85 	bl	8005f94 <HAL_DMA2D_PollForTransfer>
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800268a:	9b03      	ldr	r3, [sp, #12]
 800268c:	fa1f f289 	uxth.w	r2, r9
 8002690:	4659      	mov	r1, fp
 8002692:	b29b      	uxth	r3, r3
 8002694:	4888      	ldr	r0, [pc, #544]	@ (80028b8 <smart_watch_process+0x6f0>)
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	4642      	mov	r2, r8
 800269a:	f003 fc1f 	bl	8005edc <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 800269e:	8b22      	ldrh	r2, [r4, #24]
 80026a0:	8b63      	ldrh	r3, [r4, #26]
		pOut.u8Arr = (uint8_t *)outputData;
 80026a2:	f8da 8000 	ldr.w	r8, [sl]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 80026a6:	fb12 f203 	smulbb	r2, r2, r3
 80026aa:	b292      	uxth	r2, r2
	for( ; i < length ; i++)
 80026ac:	b1ca      	cbz	r2, 80026e2 <smart_watch_process+0x51a>
 80026ae:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 80026b2:	4640      	mov	r0, r8
 80026b4:	4641      	mov	r1, r8
		pxArr->u16Arr[i] = color565(r, g, b);
 80026b6:	f8df c224 	ldr.w	ip, [pc, #548]	@ 80028dc <smart_watch_process+0x714>
 80026ba:	f891 e001 	ldrb.w	lr, [r1, #1]
 80026be:	788b      	ldrb	r3, [r1, #2]
 80026c0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80026c4:	ea0c 2303 	and.w	r3, ip, r3, lsl #8
 80026c8:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80026cc:	ea43 030e 	orr.w	r3, r3, lr
 80026d0:	f811 eb03 	ldrb.w	lr, [r1], #3
 80026d4:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 80026d8:	ba5b      	rev16	r3, r3
 80026da:	f820 3b02 	strh.w	r3, [r0], #2
	for( ; i < length ; i++)
 80026de:	4282      	cmp	r2, r0
 80026e0:	d1eb      	bne.n	80026ba <smart_watch_process+0x4f2>
 80026e2:	f10d 0910 	add.w	r9, sp, #16
       frame.start.X = 0;
 80026e6:	f04f 0b00 	mov.w	fp, #0
 80026ea:	e005      	b.n	80026f8 <smart_watch_process+0x530>
			count_iter++;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	3301      	adds	r3, #1
			if(count_iter >= MAX_ATTEMPTS_NUM)
 80026f0:	2b09      	cmp	r3, #9
			count_iter++;
 80026f2:	603b      	str	r3, [r7, #0]
			if(count_iter >= MAX_ATTEMPTS_NUM)
 80026f4:	f63f af3a 	bhi.w	800256c <smart_watch_process+0x3a4>
       frame.start.X = 0;
 80026f8:	f04f 13ef 	mov.w	r3, #15663343	@ 0xef00ef
 80026fc:	f8cd b010 	str.w	fp, [sp, #16]
 8002700:	9305      	str	r3, [sp, #20]
	   GC9A01_set_frame(frame);
 8002702:	e899 0003 	ldmia.w	r9, {r0, r1}
 8002706:	f7fe ff93 	bl	8001630 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 800270a:	202c      	movs	r0, #44	@ 0x2c
 800270c:	f7fe fa88 	bl	8000c20 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002710:	2001      	movs	r0, #1
 8002712:	f7fe fa4f 	bl	8000bb4 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe fa64 	bl	8000be4 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002722:	4640      	mov	r0, r8
 8002724:	f7fe ffd8 	bl	80016d8 <GC9A01_spi_tx>
	   if(ret != 1)
 8002728:	2801      	cmp	r0, #1
 800272a:	d1df      	bne.n	80026ec <smart_watch_process+0x524>
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 800272c:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002730:	2200      	movs	r2, #0
 8002732:	eb08 0001 	add.w	r0, r8, r1
 8002736:	f7fe ffcf 	bl	80016d8 <GC9A01_spi_tx>
		while(lcd_draw(pOut.u8Arr) != 1)
 800273a:	2801      	cmp	r0, #1
 800273c:	d1d6      	bne.n	80026ec <smart_watch_process+0x524>
		if(video.isfirstFrame == 1)
 800273e:	7da3      	ldrb	r3, [r4, #22]
		count_iter = 0;
 8002740:	f8c7 b000 	str.w	fp, [r7]
		if(video.isfirstFrame == 1)
 8002744:	2b01      	cmp	r3, #1
 8002746:	f000 8272 	beq.w	8002c2e <smart_watch_process+0xa66>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 800274a:	f8da 1000 	ldr.w	r1, [sl]
 800274e:	4a5b      	ldr	r2, [pc, #364]	@ (80028bc <smart_watch_process+0x6f4>)
 8002750:	4b5b      	ldr	r3, [pc, #364]	@ (80028c0 <smart_watch_process+0x6f8>)
 8002752:	4291      	cmp	r1, r2
 8002754:	bf18      	it	ne
 8002756:	4613      	movne	r3, r2
 8002758:	f8ca 3000 	str.w	r3, [sl]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800275c:	f000 ff1c 	bl	8003598 <HAL_GetTick>
 8002760:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
		float watch_time = ( video.frameCount * video.frame_time );
 8002762:	ed94 7a07 	vldr	s14, [r4, #28]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 8002766:	1ac0      	subs	r0, r0, r3
		float watch_time = ( video.frameCount * video.frame_time );
 8002768:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 800276c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		int time_diff = ( video.actual_time - watch_time );
 8002770:	ee07 0a90 	vmov	s15, r0
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 8002774:	62a0      	str	r0, [r4, #40]	@ 0x28
		int time_diff = ( video.actual_time - watch_time );
 8002776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277a:	eee7 7a66 	vfms.f32	s15, s14, s13
 800277e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		video.frameToSkip = ( time_diff / video.frame_time );
 8002782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		int time_diff = ( video.actual_time - watch_time );
 8002786:	ee17 0a90 	vmov	r0, s15
		if(time_diff < 0)
 800278a:	2800      	cmp	r0, #0
		video.frameToSkip = ( time_diff / video.frame_time );
 800278c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002794:	edc4 7a08 	vstr	s15, [r4, #32]
		if(time_diff < 0)
 8002798:	f2c0 8243 	blt.w	8002c22 <smart_watch_process+0xa5a>
		RTC_DateTypeDef sDate = {0};
 800279c:	2700      	movs	r7, #0
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800279e:	4949      	ldr	r1, [pc, #292]	@ (80028c4 <smart_watch_process+0x6fc>)
 80027a0:	4849      	ldr	r0, [pc, #292]	@ (80028c8 <smart_watch_process+0x700>)
 80027a2:	463a      	mov	r2, r7
		RTC_DateTypeDef sDate = {0};
 80027a4:	9704      	str	r7, [sp, #16]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 80027a6:	f008 fc15 	bl	800afd4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80027aa:	463a      	mov	r2, r7
 80027ac:	4649      	mov	r1, r9
 80027ae:	4846      	ldr	r0, [pc, #280]	@ (80028c8 <smart_watch_process+0x700>)
 80027b0:	f008 fc4c 	bl	800b04c <HAL_RTC_GetDate>
 80027b4:	e6f2      	b.n	800259c <smart_watch_process+0x3d4>
			if(file_handler(1) != 1)
 80027b6:	f7ff fad3 	bl	8001d60 <file_handler>
 80027ba:	2801      	cmp	r0, #1
 80027bc:	f47f aed6 	bne.w	800256c <smart_watch_process+0x3a4>
			video.video_mode = NORMAL_MODE;
 80027c0:	86a0      	strh	r0, [r4, #52]	@ 0x34
			break;
 80027c2:	e52e      	b.n	8002222 <smart_watch_process+0x5a>
			if(show_frame(0) != 1)
 80027c4:	f7ff fbf0 	bl	8001fa8 <show_frame.constprop.0>
 80027c8:	2801      	cmp	r0, #1
 80027ca:	f47f aecf 	bne.w	800256c <smart_watch_process+0x3a4>
			if(btn_status == BTN_PLUS)
 80027ce:	4f3f      	ldr	r7, [pc, #252]	@ (80028cc <smart_watch_process+0x704>)
 80027d0:	f897 9000 	ldrb.w	r9, [r7]
 80027d4:	f1b9 0f01 	cmp.w	r9, #1
 80027d8:	f000 8155 	beq.w	8002a86 <smart_watch_process+0x8be>
			if(btn_status == BTN_MINUS)
 80027dc:	f1b9 0f03 	cmp.w	r9, #3
 80027e0:	f000 8124 	beq.w	8002a2c <smart_watch_process+0x864>
			if(btn_status == BTN_SET)
 80027e4:	f1b9 0f02 	cmp.w	r9, #2
 80027e8:	f47f ad1b 	bne.w	8002222 <smart_watch_process+0x5a>
				btn_status = BTN_NONE;
 80027ec:	f04f 0800 	mov.w	r8, #0
				HAL_Delay(300);
 80027f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80027f4:	f887 8000 	strb.w	r8, [r7]
				HAL_Delay(300);
 80027f8:	f000 fed4 	bl	80035a4 <HAL_Delay>
}

static void clear_btn_int(void)
{

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80027fc:	2006      	movs	r0, #6
 80027fe:	f001 feef 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002802:	2007      	movs	r0, #7
 8002804:	f001 feec 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002808:	2008      	movs	r0, #8
 800280a:	f001 fee9 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
				video.file_idx += video.time.Minutes;
 800280e:	8aa2      	ldrh	r2, [r4, #20]
 8002810:	7863      	ldrb	r3, [r4, #1]
				HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002812:	492c      	ldr	r1, [pc, #176]	@ (80028c4 <smart_watch_process+0x6fc>)
				video.file_idx += video.time.Minutes;
 8002814:	4413      	add	r3, r2
				HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002816:	482c      	ldr	r0, [pc, #176]	@ (80028c8 <smart_watch_process+0x700>)
 8002818:	4642      	mov	r2, r8
				video.file_idx += video.time.Minutes;
 800281a:	82a3      	strh	r3, [r4, #20]
				HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800281c:	f008 fd06 	bl	800b22c <HAL_RTC_SetTime>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002820:	4642      	mov	r2, r8
 8002822:	a904      	add	r1, sp, #16
 8002824:	4828      	ldr	r0, [pc, #160]	@ (80028c8 <smart_watch_process+0x700>)
				RTC_DateTypeDef sDate = {0};
 8002826:	f8cd 8010 	str.w	r8, [sp, #16]
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800282a:	f008 fc0f 	bl	800b04c <HAL_RTC_GetDate>
				time.first_day = sDate.Date;
 800282e:	4b28      	ldr	r3, [pc, #160]	@ (80028d0 <smart_watch_process+0x708>)
 8002830:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8002834:	701a      	strb	r2, [r3, #0]
				time.first_month = sDate.Month;
 8002836:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800283a:	705a      	strb	r2, [r3, #1]
				video.isfirstFrame = 1;
 800283c:	2201      	movs	r2, #1
				video.set = SET_START;
 800283e:	2303      	movs	r3, #3
				video.isfirstFrame = 1;
 8002840:	75a2      	strb	r2, [r4, #22]
				video.set = SET_START;
 8002842:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 8002846:	e4ec      	b.n	8002222 <smart_watch_process+0x5a>
			if(show_frame(0) != 1)
 8002848:	f7ff fbae 	bl	8001fa8 <show_frame.constprop.0>
 800284c:	2801      	cmp	r0, #1
 800284e:	f47f ae8d 	bne.w	800256c <smart_watch_process+0x3a4>
			if(btn_status == BTN_PLUS)
 8002852:	4f1e      	ldr	r7, [pc, #120]	@ (80028cc <smart_watch_process+0x704>)
 8002854:	f897 9000 	ldrb.w	r9, [r7]
 8002858:	f1b9 0f01 	cmp.w	r9, #1
 800285c:	f000 8147 	beq.w	8002aee <smart_watch_process+0x926>
			if(btn_status == BTN_MINUS)
 8002860:	f1b9 0f03 	cmp.w	r9, #3
 8002864:	f000 8174 	beq.w	8002b50 <smart_watch_process+0x988>
			if(btn_status == BTN_SET)
 8002868:	f1b9 0f02 	cmp.w	r9, #2
 800286c:	f47f acd9 	bne.w	8002222 <smart_watch_process+0x5a>
				btn_status = BTN_NONE;
 8002870:	2300      	movs	r3, #0
				HAL_Delay(300);
 8002872:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8002876:	703b      	strb	r3, [r7, #0]
				HAL_Delay(300);
 8002878:	f000 fe94 	bl	80035a4 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800287c:	2006      	movs	r0, #6
 800287e:	f001 feaf 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002882:	2007      	movs	r0, #7
 8002884:	f001 feac 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002888:	2008      	movs	r0, #8
 800288a:	f001 fea9 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
				video.set = SET_MINUTES;
 800288e:	f884 9035 	strb.w	r9, [r4, #53]	@ 0x35
 8002892:	e4c6      	b.n	8002222 <smart_watch_process+0x5a>
 8002894:	240ac318 	.word	0x240ac318
 8002898:	58020800 	.word	0x58020800
 800289c:	240003f4 	.word	0x240003f4
 80028a0:	24054ad8 	.word	0x24054ad8
 80028a4:	2409fb18 	.word	0x2409fb18
 80028a8:	24000220 	.word	0x24000220
 80028ac:	240003f8 	.word	0x240003f8
 80028b0:	240000a8 	.word	0x240000a8
 80028b4:	000f423f 	.word	0x000f423f
 80028b8:	240001b8 	.word	0x240001b8
 80028bc:	2402a774 	.word	0x2402a774
 80028c0:	24000410 	.word	0x24000410
 80028c4:	2409fad8 	.word	0x2409fad8
 80028c8:	2400017c 	.word	0x2400017c
 80028cc:	240ac7ce 	.word	0x240ac7ce
 80028d0:	24000408 	.word	0x24000408
 80028d4:	240001a4 	.word	0x240001a4
 80028d8:	24000004 	.word	0x24000004
 80028dc:	fffff800 	.word	0xfffff800
 80028e0:	4bb5      	ldr	r3, [pc, #724]	@ (8002bb8 <smart_watch_process+0x9f0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	801a      	strh	r2, [r3, #0]
	if(count >= RESET_ITER_NUM)
 80028e6:	e4a5      	b.n	8002234 <smart_watch_process+0x6c>
	HAL_Delay(1000);
 80028e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028ec:	f000 fe5a 	bl	80035a4 <HAL_Delay>
	if(!HAL_GPIO_ReadPin(FXLS8974CF_INT_Port, FXLS8974CF_INT_Pin))
 80028f0:	2120      	movs	r1, #32
 80028f2:	48b2      	ldr	r0, [pc, #712]	@ (8002bbc <smart_watch_process+0x9f4>)
 80028f4:	f003 fe5c 	bl	80065b0 <HAL_GPIO_ReadPin>
 80028f8:	fab0 f380 	clz	r3, r0
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	f889 3000 	strb.w	r3, [r9]
	for(int i = 0 ; i < 30 ; i++)
 8002902:	e4f8      	b.n	80022f6 <smart_watch_process+0x12e>
	else if(time.current_month < time.first_month)
 8002904:	78c8      	ldrb	r0, [r1, #3]
 8002906:	784b      	ldrb	r3, [r1, #1]
 8002908:	4298      	cmp	r0, r3
 800290a:	f080 8088 	bcs.w	8002a1e <smart_watch_process+0x856>
		for(int i = time.first_month ; i < 12 ; i++)
 800290e:	784b      	ldrb	r3, [r1, #1]
 8002910:	2b0b      	cmp	r3, #11
 8002912:	b2d8      	uxtb	r0, r3
 8002914:	f300 81a6 	bgt.w	8002c64 <smart_watch_process+0xa9c>
			days_elapsed += num_of_days_per_month[i];
 8002918:	4ba9      	ldr	r3, [pc, #676]	@ (8002bc0 <smart_watch_process+0x9f8>)
		for(int i = time.first_month ; i < 12 ; i++)
 800291a:	280b      	cmp	r0, #11
 800291c:	f100 0701 	add.w	r7, r0, #1
			days_elapsed += num_of_days_per_month[i];
 8002920:	5c1a      	ldrb	r2, [r3, r0]
		for(int i = time.first_month ; i < 12 ; i++)
 8002922:	d03c      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002924:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 8002926:	280a      	cmp	r0, #10
			days_elapsed += num_of_days_per_month[i];
 8002928:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 800292a:	f100 0702 	add.w	r7, r0, #2
 800292e:	d036      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002930:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 8002932:	2809      	cmp	r0, #9
			days_elapsed += num_of_days_per_month[i];
 8002934:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 8002936:	f100 0703 	add.w	r7, r0, #3
 800293a:	d030      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 800293c:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 800293e:	2808      	cmp	r0, #8
			days_elapsed += num_of_days_per_month[i];
 8002940:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 8002942:	f100 0704 	add.w	r7, r0, #4
 8002946:	d02a      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002948:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 800294a:	2807      	cmp	r0, #7
			days_elapsed += num_of_days_per_month[i];
 800294c:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 800294e:	f100 0705 	add.w	r7, r0, #5
 8002952:	d024      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002954:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 8002956:	2806      	cmp	r0, #6
			days_elapsed += num_of_days_per_month[i];
 8002958:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 800295a:	f100 0706 	add.w	r7, r0, #6
 800295e:	d01e      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002960:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 8002962:	2805      	cmp	r0, #5
			days_elapsed += num_of_days_per_month[i];
 8002964:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 8002966:	f100 0707 	add.w	r7, r0, #7
 800296a:	d018      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 800296c:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 800296e:	2804      	cmp	r0, #4
			days_elapsed += num_of_days_per_month[i];
 8002970:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 8002972:	f100 0708 	add.w	r7, r0, #8
 8002976:	d012      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002978:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 800297a:	2803      	cmp	r0, #3
			days_elapsed += num_of_days_per_month[i];
 800297c:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 800297e:	f100 0709 	add.w	r7, r0, #9
 8002982:	d00c      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002984:	5ddf      	ldrb	r7, [r3, r7]
		for(int i = time.first_month ; i < 12 ; i++)
 8002986:	2802      	cmp	r0, #2
			days_elapsed += num_of_days_per_month[i];
 8002988:	443a      	add	r2, r7
		for(int i = time.first_month ; i < 12 ; i++)
 800298a:	f100 070a 	add.w	r7, r0, #10
			days_elapsed += num_of_days_per_month[i];
 800298e:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < 12 ; i++)
 8002990:	d005      	beq.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002992:	5ddf      	ldrb	r7, [r3, r7]
 8002994:	443a      	add	r2, r7
 8002996:	b292      	uxth	r2, r2
		for(int i = time.first_month ; i < 12 ; i++)
 8002998:	b908      	cbnz	r0, 800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 800299a:	321f      	adds	r2, #31
 800299c:	b292      	uxth	r2, r2
		for(int i = 0 ; i < ( time.current_month - 1 ) ; i++)
 800299e:	78c8      	ldrb	r0, [r1, #3]
 80029a0:	2801      	cmp	r0, #1
 80029a2:	d92f      	bls.n	8002a04 <smart_watch_process+0x83c>
 80029a4:	78c8      	ldrb	r0, [r1, #3]
 80029a6:	2802      	cmp	r0, #2
 80029a8:	f240 816e 	bls.w	8002c88 <smart_watch_process+0xac0>
 80029ac:	78c8      	ldrb	r0, [r1, #3]
 80029ae:	2803      	cmp	r0, #3
 80029b0:	f240 8167 	bls.w	8002c82 <smart_watch_process+0xaba>
 80029b4:	78c8      	ldrb	r0, [r1, #3]
 80029b6:	2804      	cmp	r0, #4
 80029b8:	f240 8160 	bls.w	8002c7c <smart_watch_process+0xab4>
 80029bc:	78c8      	ldrb	r0, [r1, #3]
 80029be:	2805      	cmp	r0, #5
 80029c0:	f240 8159 	bls.w	8002c76 <smart_watch_process+0xaae>
 80029c4:	78c8      	ldrb	r0, [r1, #3]
 80029c6:	2806      	cmp	r0, #6
 80029c8:	f240 8152 	bls.w	8002c70 <smart_watch_process+0xaa8>
 80029cc:	78c8      	ldrb	r0, [r1, #3]
 80029ce:	2807      	cmp	r0, #7
 80029d0:	f240 814b 	bls.w	8002c6a <smart_watch_process+0xaa2>
 80029d4:	78c8      	ldrb	r0, [r1, #3]
 80029d6:	2808      	cmp	r0, #8
 80029d8:	f240 8141 	bls.w	8002c5e <smart_watch_process+0xa96>
 80029dc:	78c8      	ldrb	r0, [r1, #3]
 80029de:	2809      	cmp	r0, #9
 80029e0:	f240 813a 	bls.w	8002c58 <smart_watch_process+0xa90>
 80029e4:	78c8      	ldrb	r0, [r1, #3]
 80029e6:	280a      	cmp	r0, #10
 80029e8:	f240 8132 	bls.w	8002c50 <smart_watch_process+0xa88>
 80029ec:	78c8      	ldrb	r0, [r1, #3]
 80029ee:	280b      	cmp	r0, #11
 80029f0:	f240 812a 	bls.w	8002c48 <smart_watch_process+0xa80>
 80029f4:	78c8      	ldrb	r0, [r1, #3]
 80029f6:	280c      	cmp	r0, #12
 80029f8:	f240 8122 	bls.w	8002c40 <smart_watch_process+0xa78>
			days_elapsed += num_of_days_per_month[i];
 80029fc:	f202 126d 	addw	r2, r2, #365	@ 0x16d
		for(int i = 0 ; i < ( time.current_month - 1 ) ; i++)
 8002a00:	78c8      	ldrb	r0, [r1, #3]
			days_elapsed += num_of_days_per_month[i];
 8002a02:	b292      	uxth	r2, r2
		days_elapsed += ( time.current_day + num_of_days_per_month[time.first_month-1] - time.first_day );
 8002a04:	7888      	ldrb	r0, [r1, #2]
 8002a06:	784f      	ldrb	r7, [r1, #1]
 8002a08:	7809      	ldrb	r1, [r1, #0]
 8002a0a:	443b      	add	r3, r7
 8002a0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002a10:	4403      	add	r3, r0
 8002a12:	1a5b      	subs	r3, r3, r1
 8002a14:	441a      	add	r2, r3
	uint32_t time_delay_min = ( OFFSET_FACTOR * days_elapsed );
 8002a16:	b293      	uxth	r3, r2
 8002a18:	e53f      	b.n	800249a <smart_watch_process+0x2d2>
 8002a1a:	8013      	strh	r3, [r2, #0]
 8002a1c:	e40a      	b.n	8002234 <smart_watch_process+0x6c>
		days_elapsed += abs(time.current_day - time.first_day);
 8002a1e:	788b      	ldrb	r3, [r1, #2]
 8002a20:	780a      	ldrb	r2, [r1, #0]
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bfb8      	it	lt
 8002a28:	425b      	neglt	r3, r3
 8002a2a:	e536      	b.n	800249a <smart_watch_process+0x2d2>
				btn_status = BTN_NONE;
 8002a2c:	2300      	movs	r3, #0
				HAL_Delay(300);
 8002a2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8002a32:	703b      	strb	r3, [r7, #0]
				HAL_Delay(300);
 8002a34:	f000 fdb6 	bl	80035a4 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002a38:	2006      	movs	r0, #6
 8002a3a:	f001 fdd1 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002a3e:	2007      	movs	r0, #7
 8002a40:	f001 fdce 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002a44:	2008      	movs	r0, #8
 8002a46:	f001 fdcb 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Minutes > 0)
 8002a4a:	7863      	ldrb	r3, [r4, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80ad 	beq.w	8002bac <smart_watch_process+0x9e4>
					video.time.Minutes--;
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b2db      	uxtb	r3, r3
				video.file_idx += video.time.Minutes;
 8002a56:	461a      	mov	r2, r3
 8002a58:	7063      	strb	r3, [r4, #1]
				if(file_handler(1) != 1)
 8002a5a:	2001      	movs	r0, #1
				video.file_idx += video.time.Minutes;
 8002a5c:	8aa3      	ldrh	r3, [r4, #20]
 8002a5e:	441a      	add	r2, r3
 8002a60:	82a2      	strh	r2, [r4, #20]
				if(file_handler(1) != 1)
 8002a62:	f7ff f97d 	bl	8001d60 <file_handler>
 8002a66:	2801      	cmp	r0, #1
 8002a68:	f47f ad80 	bne.w	800256c <smart_watch_process+0x3a4>
				video.file_idx -= video.time.Minutes;
 8002a6c:	7862      	ldrb	r2, [r4, #1]
 8002a6e:	8aa3      	ldrh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a70:	4954      	ldr	r1, [pc, #336]	@ (8002bc4 <smart_watch_process+0x9fc>)
				video.file_idx -= video.time.Minutes;
 8002a72:	1a9b      	subs	r3, r3, r2
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a74:	4854      	ldr	r0, [pc, #336]	@ (8002bc8 <smart_watch_process+0xa00>)
 8002a76:	2200      	movs	r2, #0
				video.file_idx -= video.time.Minutes;
 8002a78:	82a3      	strh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a7a:	f7fd fdcb 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_SET)
 8002a7e:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002a82:	75e0      	strb	r0, [r4, #23]
 8002a84:	e6ae      	b.n	80027e4 <smart_watch_process+0x61c>
				btn_status = BTN_NONE;
 8002a86:	f04f 0800 	mov.w	r8, #0
				HAL_Delay(300);
 8002a8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8002a8e:	f887 8000 	strb.w	r8, [r7]
				HAL_Delay(300);
 8002a92:	f000 fd87 	bl	80035a4 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002a96:	2006      	movs	r0, #6
 8002a98:	f001 fda2 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002a9c:	2007      	movs	r0, #7
 8002a9e:	f001 fd9f 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002aa2:	2008      	movs	r0, #8
 8002aa4:	f001 fd9c 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
				video.time.Minutes++;
 8002aa8:	7863      	ldrb	r3, [r4, #1]
				video.time.Minutes %= 60;
 8002aaa:	4a48      	ldr	r2, [pc, #288]	@ (8002bcc <smart_watch_process+0xa04>)
				if(file_handler(1) != 1)
 8002aac:	4648      	mov	r0, r9
				video.time.Minutes++;
 8002aae:	3301      	adds	r3, #1
				video.time.Minutes %= 60;
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	fba2 1203 	umull	r1, r2, r2, r3
 8002ab6:	0952      	lsrs	r2, r2, #5
 8002ab8:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002abc:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
				video.file_idx += video.time.Minutes;
 8002ac0:	8aa2      	ldrh	r2, [r4, #20]
				video.time.Minutes %= 60;
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	7063      	strb	r3, [r4, #1]
				video.file_idx += video.time.Minutes;
 8002ac6:	4413      	add	r3, r2
 8002ac8:	82a3      	strh	r3, [r4, #20]
				if(file_handler(1) != 1)
 8002aca:	f7ff f949 	bl	8001d60 <file_handler>
 8002ace:	2801      	cmp	r0, #1
 8002ad0:	f47f ad4c 	bne.w	800256c <smart_watch_process+0x3a4>
				video.file_idx -= video.time.Minutes;
 8002ad4:	8aa3      	ldrh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002ad6:	4642      	mov	r2, r8
				video.file_idx -= video.time.Minutes;
 8002ad8:	7861      	ldrb	r1, [r4, #1]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002ada:	483b      	ldr	r0, [pc, #236]	@ (8002bc8 <smart_watch_process+0xa00>)
				video.file_idx -= video.time.Minutes;
 8002adc:	1a5b      	subs	r3, r3, r1
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002ade:	4939      	ldr	r1, [pc, #228]	@ (8002bc4 <smart_watch_process+0x9fc>)
				video.file_idx -= video.time.Minutes;
 8002ae0:	82a3      	strh	r3, [r4, #20]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002ae2:	f7fd fd97 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_MINUS)
 8002ae6:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002aea:	75e0      	strb	r0, [r4, #23]
 8002aec:	e676      	b.n	80027dc <smart_watch_process+0x614>
				btn_status = BTN_NONE;
 8002aee:	f04f 0800 	mov.w	r8, #0
				HAL_Delay(300);
 8002af2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8002af6:	f887 8000 	strb.w	r8, [r7]
				HAL_Delay(300);
 8002afa:	f000 fd53 	bl	80035a4 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002afe:	2006      	movs	r0, #6
 8002b00:	f001 fd6e 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002b04:	2007      	movs	r0, #7
 8002b06:	f001 fd6b 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002b0a:	2008      	movs	r0, #8
 8002b0c:	f001 fd68 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
				video.time.Hours++;
 8002b10:	7823      	ldrb	r3, [r4, #0]
				video.time.Hours %= 12;
 8002b12:	4a2f      	ldr	r2, [pc, #188]	@ (8002bd0 <smart_watch_process+0xa08>)
				if(file_handler(1) != 1)
 8002b14:	4648      	mov	r0, r9
				video.time.Hours++;
 8002b16:	3301      	adds	r3, #1
				video.time.Hours %= 12;
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	fba2 1203 	umull	r1, r2, r2, r3
 8002b1e:	08d2      	lsrs	r2, r2, #3
 8002b20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002b24:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8002b2c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	82a3      	strh	r3, [r4, #20]
				if(file_handler(1) != 1)
 8002b34:	f7ff f914 	bl	8001d60 <file_handler>
 8002b38:	2801      	cmp	r0, #1
 8002b3a:	f47f ad17 	bne.w	800256c <smart_watch_process+0x3a4>
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002b3e:	4642      	mov	r2, r8
 8002b40:	4920      	ldr	r1, [pc, #128]	@ (8002bc4 <smart_watch_process+0x9fc>)
 8002b42:	4821      	ldr	r0, [pc, #132]	@ (8002bc8 <smart_watch_process+0xa00>)
 8002b44:	f7fd fd66 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_MINUS)
 8002b48:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002b4c:	75e0      	strb	r0, [r4, #23]
 8002b4e:	e687      	b.n	8002860 <smart_watch_process+0x698>
				btn_status = BTN_NONE;
 8002b50:	2300      	movs	r3, #0
				HAL_Delay(300);
 8002b52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8002b56:	703b      	strb	r3, [r7, #0]
				HAL_Delay(300);
 8002b58:	f000 fd24 	bl	80035a4 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8002b5c:	2006      	movs	r0, #6
 8002b5e:	f001 fd3f 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8002b62:	2007      	movs	r0, #7
 8002b64:	f001 fd3c 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8002b68:	2008      	movs	r0, #8
 8002b6a:	f001 fd39 	bl	80045e0 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Hours > 0)
 8002b6e:	7823      	ldrb	r3, [r4, #0]
 8002b70:	b1c3      	cbz	r3, 8002ba4 <smart_watch_process+0x9dc>
					video.time.Hours--;
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b2db      	uxtb	r3, r3
				video.file_idx = ( video.time.Hours * 60 );
 8002b76:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	b292      	uxth	r2, r2
				if(file_handler(1) != 1)
 8002b7e:	2001      	movs	r0, #1
 8002b80:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8002b82:	82a2      	strh	r2, [r4, #20]
				if(file_handler(1) != 1)
 8002b84:	f7ff f8ec 	bl	8001d60 <file_handler>
 8002b88:	2801      	cmp	r0, #1
 8002b8a:	f47f acef 	bne.w	800256c <smart_watch_process+0x3a4>
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	490c      	ldr	r1, [pc, #48]	@ (8002bc4 <smart_watch_process+0x9fc>)
 8002b92:	480d      	ldr	r0, [pc, #52]	@ (8002bc8 <smart_watch_process+0xa00>)
 8002b94:	f7fd fd3e 	bl	8000614 <AVI_GetFrame>
			if(btn_status == BTN_SET)
 8002b98:	f897 9000 	ldrb.w	r9, [r7]
				video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002b9c:	75e0      	strb	r0, [r4, #23]
 8002b9e:	e663      	b.n	8002868 <smart_watch_process+0x6a0>
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	e4e3      	b.n	800256c <smart_watch_process+0x3a4>
 8002ba4:	f44f 7225 	mov.w	r2, #660	@ 0x294
					video.time.Hours = 11;
 8002ba8:	230b      	movs	r3, #11
 8002baa:	e7e8      	b.n	8002b7e <smart_watch_process+0x9b6>
 8002bac:	223b      	movs	r2, #59	@ 0x3b
					video.time.Minutes = 59;
 8002bae:	4613      	mov	r3, r2
 8002bb0:	e752      	b.n	8002a58 <smart_watch_process+0x890>
	uint16_t days_elapsed = 0;
 8002bb2:	4652      	mov	r2, sl
 8002bb4:	4b02      	ldr	r3, [pc, #8]	@ (8002bc0 <smart_watch_process+0x9f8>)
 8002bb6:	e466      	b.n	8002486 <smart_watch_process+0x2be>
 8002bb8:	240003f4 	.word	0x240003f4
 8002bbc:	58020400 	.word	0x58020400
 8002bc0:	0801055c 	.word	0x0801055c
 8002bc4:	240ac360 	.word	0x240ac360
 8002bc8:	240ac318 	.word	0x240ac318
 8002bcc:	88888889 	.word	0x88888889
 8002bd0:	aaaaaaab 	.word	0xaaaaaaab
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	4830      	ldr	r0, [pc, #192]	@ (8002c98 <smart_watch_process+0xad0>)
 8002bd8:	f005 f868 	bl	8007cac <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8002bdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002be0:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 8002be4:	f7ff f92a 	bl	8001e3c <DMA2D_Init.constprop.0>
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002be8:	edd5 7a00 	vldr	s15, [r5]
			video.width = JPEG_Info.ImageWidth;
 8002bec:	f8d8 300c 	ldr.w	r3, [r8, #12]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002bf0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
			video.width = JPEG_Info.ImageWidth;
 8002bf4:	8323      	strh	r3, [r4, #24]
			video.height = JPEG_Info.ImageHeight;
 8002bf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002bfa:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 8002c90 <smart_watch_process+0xac8>
			video.height = JPEG_Info.ImageHeight;
 8002bfe:	8363      	strh	r3, [r4, #26]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8002c00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c04:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002c08:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8002c0c:	f000 fcc4 	bl	8003598 <HAL_GetTick>
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002c10:	464a      	mov	r2, r9
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8002c12:	62e0      	str	r0, [r4, #44]	@ 0x2c
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002c14:	4921      	ldr	r1, [pc, #132]	@ (8002c9c <smart_watch_process+0xad4>)
 8002c16:	4822      	ldr	r0, [pc, #136]	@ (8002ca0 <smart_watch_process+0xad8>)
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 8002c18:	f8c4 a01c 	str.w	sl, [r4, #28]
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8002c1c:	f008 fb06 	bl	800b22c <HAL_RTC_SetTime>
 8002c20:	e518      	b.n	8002654 <smart_watch_process+0x48c>
			HAL_Delay(-time_diff);
 8002c22:	4240      	negs	r0, r0
 8002c24:	f000 fcbe 	bl	80035a4 <HAL_Delay>
			video.frameToSkip = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6223      	str	r3, [r4, #32]
 8002c2c:	e5b6      	b.n	800279c <smart_watch_process+0x5d4>
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, RESET);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c34:	481b      	ldr	r0, [pc, #108]	@ (8002ca4 <smart_watch_process+0xadc>)
			video.isfirstFrame = 0;
 8002c36:	f884 b016 	strb.w	fp, [r4, #22]
			HAL_GPIO_WritePin(GC9A01_BL_GPIO_Port, GC9A01_BL_Pin, RESET);
 8002c3a:	f003 fcbf 	bl	80065bc <HAL_GPIO_WritePin>
 8002c3e:	e584      	b.n	800274a <smart_watch_process+0x582>
			days_elapsed += num_of_days_per_month[i];
 8002c40:	f502 72a7 	add.w	r2, r2, #334	@ 0x14e
 8002c44:	b292      	uxth	r2, r2
 8002c46:	e6dd      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c48:	f502 7298 	add.w	r2, r2, #304	@ 0x130
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	e6d9      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c50:	f202 1211 	addw	r2, r2, #273	@ 0x111
 8002c54:	b292      	uxth	r2, r2
 8002c56:	e6d5      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c58:	32f3      	adds	r2, #243	@ 0xf3
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	e6d2      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c5e:	32d4      	adds	r2, #212	@ 0xd4
 8002c60:	b292      	uxth	r2, r2
 8002c62:	e6cf      	b.n	8002a04 <smart_watch_process+0x83c>
	uint16_t days_elapsed = 0;
 8002c64:	4652      	mov	r2, sl
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <smart_watch_process+0xae0>)
 8002c68:	e699      	b.n	800299e <smart_watch_process+0x7d6>
			days_elapsed += num_of_days_per_month[i];
 8002c6a:	32b5      	adds	r2, #181	@ 0xb5
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	e6c9      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c70:	3297      	adds	r2, #151	@ 0x97
 8002c72:	b292      	uxth	r2, r2
 8002c74:	e6c6      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c76:	3278      	adds	r2, #120	@ 0x78
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	e6c3      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c7c:	325a      	adds	r2, #90	@ 0x5a
 8002c7e:	b292      	uxth	r2, r2
 8002c80:	e6c0      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c82:	323b      	adds	r2, #59	@ 0x3b
 8002c84:	b292      	uxth	r2, r2
 8002c86:	e6bd      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c88:	321f      	adds	r2, #31
 8002c8a:	b292      	uxth	r2, r2
 8002c8c:	e6ba      	b.n	8002a04 <smart_watch_process+0x83c>
 8002c8e:	bf00      	nop
 8002c90:	00000000 	.word	0x00000000
 8002c94:	408f4000 	.word	0x408f4000
 8002c98:	24000220 	.word	0x24000220
 8002c9c:	2409fad8 	.word	0x2409fad8
 8002ca0:	2400017c 	.word	0x2400017c
 8002ca4:	58020400 	.word	0x58020400
 8002ca8:	0801055c 	.word	0x0801055c

08002cac <lcd_draw>:
{
 8002cac:	b530      	push	{r4, r5, lr}
       frame.start.X = 0;
 8002cae:	f04f 13ef 	mov.w	r3, #15663343	@ 0xef00ef
{
 8002cb2:	b083      	sub	sp, #12
       frame.start.X = 0;
 8002cb4:	2500      	movs	r5, #0
{
 8002cb6:	4604      	mov	r4, r0
       frame.start.X = 0;
 8002cb8:	e9cd 5300 	strd	r5, r3, [sp]
	   GC9A01_set_frame(frame);
 8002cbc:	ab02      	add	r3, sp, #8
 8002cbe:	e913 0003 	ldmdb	r3, {r0, r1}
 8002cc2:	f7fe fcb5 	bl	8001630 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8002cc6:	202c      	movs	r0, #44	@ 0x2c
 8002cc8:	f7fd ffaa 	bl	8000c20 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f7fd ff71 	bl	8000bb4 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f7fd ff86 	bl	8000be4 <GC9A01_set_chip_select>
	   ret = GC9A01_spi_tx(data, total_bytes, 1);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f7fe fcfa 	bl	80016d8 <GC9A01_spi_tx>
	   if(ret != 1)
 8002ce4:	2801      	cmp	r0, #1
 8002ce6:	d001      	beq.n	8002cec <lcd_draw+0x40>
}
 8002ce8:	b003      	add	sp, #12
 8002cea:	bd30      	pop	{r4, r5, pc}
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 8002cec:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	1860      	adds	r0, r4, r1
}
 8002cf4:	b003      	add	sp, #12
 8002cf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	   ret = GC9A01_spi_tx(&data[total_bytes], total_bytes, 0);
 8002cfa:	f7fe bced 	b.w	80016d8 <GC9A01_spi_tx>
 8002cfe:	bf00      	nop

08002d00 <HAL_GPIO_EXTI_Callback>:
}

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d00:	b508      	push	{r3, lr}

	if(!HAL_GPIO_ReadPin(FXLS8974CF_INT_Port, FXLS8974CF_INT_Pin))
 8002d02:	2120      	movs	r1, #32
 8002d04:	481d      	ldr	r0, [pc, #116]	@ (8002d7c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002d06:	f003 fc53 	bl	80065b0 <HAL_GPIO_ReadPin>
 8002d0a:	b918      	cbnz	r0, 8002d14 <HAL_GPIO_EXTI_Callback+0x14>
	{

		// Signal accelerometer interrupt

		acc_int = 1;
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <HAL_GPIO_EXTI_Callback+0x80>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]

		disable_btn_int();

	}

}
 8002d12:	bd08      	pop	{r3, pc}
		if(video.video_mode == SETTING_MODE)
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_GPIO_EXTI_Callback+0x84>)
 8002d16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d1a:	b193      	cbz	r3, 8002d42 <HAL_GPIO_EXTI_Callback+0x42>
		wake_up = 1;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <HAL_GPIO_EXTI_Callback+0x88>)
		acc_int = 0;
 8002d1e:	f04f 0c00 	mov.w	ip, #0
 8002d22:	4917      	ldr	r1, [pc, #92]	@ (8002d80 <HAL_GPIO_EXTI_Callback+0x80>)
		wake_up = 1;
 8002d24:	2201      	movs	r2, #1
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002d26:	2006      	movs	r0, #6
		wake_up = 1;
 8002d28:	701a      	strb	r2, [r3, #0]
		acc_int = 0;
 8002d2a:	f881 c000 	strb.w	ip, [r1]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002d2e:	f001 fc1d 	bl	800456c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002d32:	2007      	movs	r0, #7
 8002d34:	f001 fc1a 	bl	800456c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8002d38:	2008      	movs	r0, #8
}
 8002d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8002d3e:	f001 bc15 	b.w	800456c <HAL_NVIC_DisableIRQ>
			if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 8002d42:	2104      	movs	r1, #4
 8002d44:	4811      	ldr	r0, [pc, #68]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002d46:	f003 fc33 	bl	80065b0 <HAL_GPIO_ReadPin>
 8002d4a:	b918      	cbnz	r0, 8002d54 <HAL_GPIO_EXTI_Callback+0x54>
				btn_status = BTN_PLUS;
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e7e3      	b.n	8002d1c <HAL_GPIO_EXTI_Callback+0x1c>
			else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8002d54:	2102      	movs	r1, #2
 8002d56:	480d      	ldr	r0, [pc, #52]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002d58:	f003 fc2a 	bl	80065b0 <HAL_GPIO_ReadPin>
 8002d5c:	b918      	cbnz	r0, 8002d66 <HAL_GPIO_EXTI_Callback+0x66>
				btn_status = BTN_SET;
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d60:	2202      	movs	r2, #2
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e7da      	b.n	8002d1c <HAL_GPIO_EXTI_Callback+0x1c>
			else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 8002d66:	2101      	movs	r1, #1
 8002d68:	4808      	ldr	r0, [pc, #32]	@ (8002d8c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002d6a:	f003 fc21 	bl	80065b0 <HAL_GPIO_ReadPin>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d1d4      	bne.n	8002d1c <HAL_GPIO_EXTI_Callback+0x1c>
				btn_status = BTN_MINUS;
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <HAL_GPIO_EXTI_Callback+0x90>)
 8002d74:	2203      	movs	r2, #3
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e7d0      	b.n	8002d1c <HAL_GPIO_EXTI_Callback+0x1c>
 8002d7a:	bf00      	nop
 8002d7c:	58020400 	.word	0x58020400
 8002d80:	24000401 	.word	0x24000401
 8002d84:	2409fad8 	.word	0x2409fad8
 8002d88:	24000400 	.word	0x24000400
 8002d8c:	58020800 	.word	0x58020800
 8002d90:	240ac7ce 	.word	0x240ac7ce

08002d94 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{

	spi_dma_not_ready = 0;
 8002d94:	4b01      	ldr	r3, [pc, #4]	@ (8002d9c <HAL_SPI_TxCpltCallback+0x8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]

}
 8002d9a:	4770      	bx	lr
 8002d9c:	24000094 	.word	0x24000094

08002da0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da0:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <HAL_MspInit+0x20>)
{
 8002da2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8002da8:	f042 0202 	orr.w	r2, r2, #2
 8002dac:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8002db0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dbc:	b002      	add	sp, #8
 8002dbe:	4770      	bx	lr
 8002dc0:	58024400 	.word	0x58024400

08002dc4 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_DMA2D_MspInit+0x2c>)
 8002dc6:	6802      	ldr	r2, [r0, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d000      	beq.n	8002dce <HAL_DMA2D_MspInit+0xa>
 8002dcc:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_DMA2D_MspInit+0x30>)
{
 8002dd0:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002dd2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002dd6:	f042 0210 	orr.w	r2, r2, #16
 8002dda:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8002dde:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002dea:	b002      	add	sp, #8
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	52001000 	.word	0x52001000
 8002df4:	58024400 	.word	0x58024400

08002df8 <HAL_JPEG_MspInit>:
{
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002df8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee4 <HAL_JPEG_MspInit+0xec>)

	  __HAL_RCC_MDMA_CLK_ENABLE();

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002dfa:	2107      	movs	r1, #7
 8002dfc:	220f      	movs	r2, #15
{
 8002dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002e02:	f8d3 4134 	ldr.w	r4, [r3, #308]	@ 0x134
{
 8002e06:	4606      	mov	r6, r0
 8002e08:	b083      	sub	sp, #12
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002e0a:	2500      	movs	r5, #0
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002e0c:	f044 0420 	orr.w	r4, r4, #32
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
	  hmdmaIn.Init.BufferTransferLength = 32;
 8002e10:	2720      	movs	r7, #32
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8002e12:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8002e16:	f44f 48a0 	mov.w	r8, #20480	@ 0x5000
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002e1a:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
 8002e1e:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8002e22:	4c31      	ldr	r4, [pc, #196]	@ (8002ee8 <HAL_JPEG_MspInit+0xf0>)
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8002e24:	f000 0020 	and.w	r0, r0, #32
 8002e28:	9000      	str	r0, [sp, #0]
 8002e2a:	9800      	ldr	r0, [sp, #0]
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8002e2c:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 8002e30:	f040 0001 	orr.w	r0, r0, #1
 8002e34:	f8c3 0134 	str.w	r0, [r3, #308]	@ 0x134
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002e38:	2079      	movs	r0, #121	@ 0x79
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8002e3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8002e46:	f001 fb47 	bl	80044d8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002e4a:	2079      	movs	r0, #121	@ 0x79
 8002e4c:	f001 fb80 	bl	8004550 <HAL_NVIC_EnableIRQ>
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8002e50:	2380      	movs	r3, #128	@ 0x80
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8002e52:	2202      	movs	r2, #2

	  hmdmaIn.Instance = MDMA_Channel1;

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);

	  HAL_MDMA_DeInit(&hmdmaIn);
 8002e54:	4620      	mov	r0, r4
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 8002e56:	6223      	str	r3, [r4, #32]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8002e58:	6162      	str	r2, [r4, #20]
	  hmdmaIn.Instance = MDMA_Channel1;
 8002e5a:	2211      	movs	r2, #17
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8002e5c:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8002e60:	60a5      	str	r5, [r4, #8]
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8002e62:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaIn.Init.BufferTransferLength = 32;
 8002e66:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002e68:	e9c4 3503 	strd	r3, r5, [r4, #12]
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8002e6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e70:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaIn.Instance = MDMA_Channel1;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_JPEG_MspInit+0xf4>)
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8002e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8002e78:	6334      	str	r4, [r6, #48]	@ 0x30
 8002e7a:	6426      	str	r6, [r4, #64]	@ 0x40
	  hmdmaIn.Instance = MDMA_Channel1;
 8002e7c:	e9c4 3200 	strd	r3, r2, [r4]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 8002e80:	e9c4 5506 	strd	r5, r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaIn);
 8002e84:	f005 fde6 	bl	8008a54 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f005 fd69 	bl	8008960 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002e8e:	4c18      	ldr	r4, [pc, #96]	@ (8002ef0 <HAL_JPEG_MspInit+0xf8>)
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8002e90:	f44f 3320 	mov.w	r3, #163840	@ 0x28000

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
	  hmdmaOut.Init.BufferTransferLength = 32;

	  hmdmaOut.Instance = MDMA_Channel0;
 8002e94:	4a17      	ldr	r2, [pc, #92]	@ (8002ef4 <HAL_JPEG_MspInit+0xfc>)
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8002e96:	60a5      	str	r5, [r4, #8]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8002e98:	4620      	mov	r0, r4
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8002e9a:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8002e9c:	2313      	movs	r3, #19
	  hmdmaOut.Instance = MDMA_Channel0;
 8002e9e:	6022      	str	r2, [r4, #0]
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8002ea0:	6063      	str	r3, [r4, #4]
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002ea2:	23c0      	movs	r3, #192	@ 0xc0
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 8002ea4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8002ea8:	60e3      	str	r3, [r4, #12]
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8002eaa:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaOut.Init.BufferTransferLength = 32;
 8002eae:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 8002eb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8002eb4:	e9c4 7507 	strd	r7, r5, [r4, #28]
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8002eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 8002ebc:	2508      	movs	r5, #8
 8002ebe:	61a5      	str	r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaOut);
 8002ec0:	f005 fdc8 	bl	8008a54 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f005 fd4b 	bl	8008960 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8002eca:	6374      	str	r4, [r6, #52]	@ 0x34


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8002ecc:	220f      	movs	r2, #15
 8002ece:	4629      	mov	r1, r5
 8002ed0:	207a      	movs	r0, #122	@ 0x7a
	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8002ed2:	6426      	str	r6, [r4, #64]	@ 0x40
	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8002ed4:	f001 fb00 	bl	80044d8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002ed8:	207a      	movs	r0, #122	@ 0x7a
}
 8002eda:	b003      	add	sp, #12
 8002edc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8002ee0:	f001 bb36 	b.w	8004550 <HAL_NVIC_EnableIRQ>
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	240ac840 	.word	0x240ac840
 8002eec:	52000080 	.word	0x52000080
 8002ef0:	240ac7d0 	.word	0x240ac7d0
 8002ef4:	52000040 	.word	0x52000040

08002ef8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ef8:	b5d0      	push	{r4, r6, r7, lr}
 8002efa:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	2100      	movs	r1, #0
{
 8002efe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f00:	22c0      	movs	r2, #192	@ 0xc0
 8002f02:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	9108      	str	r1, [sp, #32]
 8002f06:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002f0a:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f0e:	f00c fe81 	bl	800fc14 <memset>
  if(hsd->Instance==SDMMC1)
 8002f12:	4b3d      	ldr	r3, [pc, #244]	@ (8003008 <HAL_SD_MspInit+0x110>)
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_SD_MspInit+0x26>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f1a:	b03a      	add	sp, #232	@ 0xe8
 8002f1c:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002f1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f22:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f24:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002f26:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f2a:	f006 fdbf 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d166      	bne.n	8003000 <HAL_SD_MspInit+0x108>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f32:	4b36      	ldr	r3, [pc, #216]	@ (800300c <HAL_SD_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f38:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f3a:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f3c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f40:	2601      	movs	r6, #1
 8002f42:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f48:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8002f4c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8002f50:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002f54:	9200      	str	r2, [sp, #0]
 8002f56:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f58:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002f5c:	f042 0202 	orr.w	r2, r2, #2
 8002f60:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002f64:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002f68:	f002 0202 	and.w	r2, r2, #2
 8002f6c:	9201      	str	r2, [sp, #4]
 8002f6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f70:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002f74:	f042 0204 	orr.w	r2, r2, #4
 8002f78:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002f7c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002f80:	f002 0204 	and.w	r2, r2, #4
 8002f84:	9202      	str	r2, [sp, #8]
 8002f86:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f88:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002f8c:	f042 0208 	orr.w	r2, r2, #8
 8002f90:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002f94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f98:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f9a:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa4:	a904      	add	r1, sp, #16
 8002fa6:	481a      	ldr	r0, [pc, #104]	@ (8003010 <HAL_SD_MspInit+0x118>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002faa:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	f003 f8f3 	bl	8006198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002fb2:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8002fb6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb8:	a904      	add	r1, sp, #16
 8002fba:	4816      	ldr	r0, [pc, #88]	@ (8003014 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fbc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002fbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc6:	f003 f8e7 	bl	8006198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fce:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd0:	a904      	add	r1, sp, #16
 8002fd2:	4810      	ldr	r0, [pc, #64]	@ (8003014 <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fd4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002fd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe2:	f003 f8d9 	bl	8006198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fea:	a904      	add	r1, sp, #16
 8002fec:	480a      	ldr	r0, [pc, #40]	@ (8003018 <HAL_SD_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fee:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ff0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002ff4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff8:	f003 f8ce 	bl	8006198 <HAL_GPIO_Init>
}
 8002ffc:	b03a      	add	sp, #232	@ 0xe8
 8002ffe:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003000:	f7fe feac 	bl	8001d5c <Error_Handler>
 8003004:	e795      	b.n	8002f32 <HAL_SD_MspInit+0x3a>
 8003006:	bf00      	nop
 8003008:	52007000 	.word	0x52007000
 800300c:	58024400 	.word	0x58024400
 8003010:	58020400 	.word	0x58020400
 8003014:	58020800 	.word	0x58020800
 8003018:	58020c00 	.word	0x58020c00

0800301c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800301c:	b530      	push	{r4, r5, lr}
 800301e:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	2100      	movs	r1, #0
{
 8003022:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003024:	22c0      	movs	r2, #192	@ 0xc0
 8003026:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	9106      	str	r1, [sp, #24]
 800302a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800302e:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003032:	f00c fdef 	bl	800fc14 <memset>
  if(hspi->Instance==SPI1)
 8003036:	4b30      	ldr	r3, [pc, #192]	@ (80030f8 <HAL_SPI_MspInit+0xdc>)
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_SPI_MspInit+0x26>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800303e:	b039      	add	sp, #228	@ 0xe4
 8003040:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003042:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003046:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003048:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800304a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304e:	f006 fd2d 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 8003052:	2800      	cmp	r0, #0
 8003054:	d14a      	bne.n	80030ec <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003056:	4b29      	ldr	r3, [pc, #164]	@ (80030fc <HAL_SPI_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003058:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800305c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8003060:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003064:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 8003068:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800306c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003070:	9200      	str	r2, [sp, #0]
 8003072:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003080:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003086:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003088:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	481c      	ldr	r0, [pc, #112]	@ (8003100 <HAL_SPI_MspInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003090:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003092:	9d01      	ldr	r5, [sp, #4]
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8003094:	4d1b      	ldr	r5, [pc, #108]	@ (8003104 <HAL_SPI_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800309a:	2200      	movs	r2, #0
 800309c:	2300      	movs	r3, #0
 800309e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	f003 f879 	bl	8006198 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80030a6:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80030a8:	4917      	ldr	r1, [pc, #92]	@ (8003108 <HAL_SPI_MspInit+0xec>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80030aa:	2226      	movs	r2, #38	@ 0x26
 80030ac:	2040      	movs	r0, #64	@ 0x40
 80030ae:	60eb      	str	r3, [r5, #12]
 80030b0:	616b      	str	r3, [r5, #20]
 80030b2:	60a8      	str	r0, [r5, #8]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80030b4:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80030b6:	e9c5 1200 	strd	r1, r2, [r5]
 80030ba:	e9c5 3306 	strd	r3, r3, [r5, #24]
 80030be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80030c2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030c6:	2304      	movs	r3, #4
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80030c8:	6129      	str	r1, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030ca:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80030ce:	f001 fb7d 	bl	80047cc <HAL_DMA_Init>
 80030d2:	b970      	cbnz	r0, 80030f2 <HAL_SPI_MspInit+0xd6>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2023      	movs	r0, #35	@ 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80030d8:	67a5      	str	r5, [r4, #120]	@ 0x78
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80030da:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80030dc:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80030de:	f001 f9fb 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030e2:	2023      	movs	r0, #35	@ 0x23
 80030e4:	f001 fa34 	bl	8004550 <HAL_NVIC_EnableIRQ>
}
 80030e8:	b039      	add	sp, #228	@ 0xe4
 80030ea:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80030ec:	f7fe fe36 	bl	8001d5c <Error_Handler>
 80030f0:	e7b1      	b.n	8003056 <HAL_SPI_MspInit+0x3a>
      Error_Handler();
 80030f2:	f7fe fe33 	bl	8001d5c <Error_Handler>
 80030f6:	e7ed      	b.n	80030d4 <HAL_SPI_MspInit+0xb8>
 80030f8:	40013000 	.word	0x40013000
 80030fc:	58024400 	.word	0x58024400
 8003100:	58020000 	.word	0x58020000
 8003104:	24000278 	.word	0x24000278
 8003108:	40020010 	.word	0x40020010
 800310c:	00000000 	.word	0x00000000

08003110 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003110:	b510      	push	{r4, lr}
 8003112:	b0b0      	sub	sp, #192	@ 0xc0
 8003114:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003116:	22c0      	movs	r2, #192	@ 0xc0
 8003118:	2100      	movs	r1, #0
 800311a:	4668      	mov	r0, sp
 800311c:	f00c fd7a 	bl	800fc14 <memset>
  if(hrtc->Instance==RTC)
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <HAL_RTC_MspInit+0x50>)
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RTC_MspInit+0x1c>

    __HAL_RCC_RTC_ENABLE();

  }

}
 8003128:	b030      	add	sp, #192	@ 0xc0
 800312a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800312c:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8003158 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003130:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003134:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003136:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800313a:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313c:	f006 fcb6 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 8003140:	b930      	cbnz	r0, 8003150 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8003142:	4a08      	ldr	r2, [pc, #32]	@ (8003164 <HAL_RTC_MspInit+0x54>)
 8003144:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
}
 800314c:	b030      	add	sp, #192	@ 0xc0
 800314e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003150:	f7fe fe04 	bl	8001d5c <Error_Handler>
 8003154:	e7f5      	b.n	8003142 <HAL_RTC_MspInit+0x32>
 8003156:	bf00      	nop
 8003158:	00400000 	.word	0x00400000
 800315c:	00000000 	.word	0x00000000
 8003160:	58004000 	.word	0x58004000
 8003164:	58024400 	.word	0x58024400

08003168 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003168:	b510      	push	{r4, lr}
 800316a:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	2100      	movs	r1, #0
{
 800316e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003170:	22c0      	movs	r2, #192	@ 0xc0
 8003172:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	9106      	str	r1, [sp, #24]
 8003176:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800317a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800317e:	f00c fd49 	bl	800fc14 <memset>
  if(hi2c->Instance==I2C1)
 8003182:	4b23      	ldr	r3, [pc, #140]	@ (8003210 <HAL_I2C_MspInit+0xa8>)
 8003184:	6822      	ldr	r2, [r4, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d001      	beq.n	800318e <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800318a:	b038      	add	sp, #224	@ 0xe0
 800318c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800318e:	2208      	movs	r2, #8
 8003190:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003192:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003194:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003198:	f006 fc88 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 800319c:	bb80      	cbnz	r0, 8003200 <HAL_I2C_MspInit+0x98>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	4c1d      	ldr	r4, [pc, #116]	@ (8003214 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031a0:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a2:	a902      	add	r1, sp, #8
 80031a4:	481c      	ldr	r0, [pc, #112]	@ (8003218 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
 80031b2:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b6:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031b8:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031be:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8003208 <HAL_I2C_MspInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031c6:	2300      	movs	r3, #0
 80031c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80031cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d0:	f002 ffe2 	bl	8006198 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031e0:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031e2:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 80031e6:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031f2:	f001 f971 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031f6:	201f      	movs	r0, #31
 80031f8:	f001 f9aa 	bl	8004550 <HAL_NVIC_EnableIRQ>
}
 80031fc:	b038      	add	sp, #224	@ 0xe0
 80031fe:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003200:	f7fe fdac 	bl	8001d5c <Error_Handler>
 8003204:	e7cb      	b.n	800319e <HAL_I2C_MspInit+0x36>
 8003206:	bf00      	nop
 8003208:	000000c0 	.word	0x000000c0
 800320c:	00000012 	.word	0x00000012
 8003210:	40005400 	.word	0x40005400
 8003214:	58024400 	.word	0x58024400
 8003218:	58020400 	.word	0x58020400
 800321c:	00000000 	.word	0x00000000

08003220 <HAL_ADC_MspInit>:
  }

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003220:	b510      	push	{r4, lr}
 8003222:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	2100      	movs	r1, #0
{
 8003226:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003228:	22c0      	movs	r2, #192	@ 0xc0
 800322a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	9106      	str	r1, [sp, #24]
 800322e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003232:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003236:	f00c fced 	bl	800fc14 <memset>
  if(hadc->Instance==ADC1)
 800323a:	4b23      	ldr	r3, [pc, #140]	@ (80032c8 <HAL_ADC_MspInit+0xa8>)
 800323c:	6822      	ldr	r2, [r4, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003242:	b038      	add	sp, #224	@ 0xe0
 8003244:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003246:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800324a:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800324c:	2104      	movs	r1, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003250:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8003254:	2310      	movs	r3, #16
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003256:	2208      	movs	r2, #8
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8003258:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800325c:	2302      	movs	r3, #2
 800325e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003262:	2202      	movs	r2, #2
 8003264:	23c0      	movs	r3, #192	@ 0xc0
 8003266:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800326a:	f006 fc1f 	bl	8009aac <HAL_RCCEx_PeriphCLKConfig>
 800326e:	bb20      	cbnz	r0, 80032ba <HAL_ADC_MspInit+0x9a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003270:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <HAL_ADC_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003274:	a902      	add	r1, sp, #8
 8003276:	4816      	ldr	r0, [pc, #88]	@ (80032d0 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003278:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800327c:	f042 0220 	orr.w	r2, r2, #32
 8003280:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 8003284:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 8003288:	f002 0220 	and.w	r2, r2, #32
 800328c:	9200      	str	r2, [sp, #0]
 800328e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800329c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032a6:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 80032c0 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032ae:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	f002 ff71 	bl	8006198 <HAL_GPIO_Init>
}
 80032b6:	b038      	add	sp, #224	@ 0xe0
 80032b8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80032ba:	f7fe fd4f 	bl	8001d5c <Error_Handler>
 80032be:	e7d7      	b.n	8003270 <HAL_ADC_MspInit+0x50>
 80032c0:	00000001 	.word	0x00000001
 80032c4:	00000003 	.word	0x00000003
 80032c8:	40022000 	.word	0x40022000
 80032cc:	58024400 	.word	0x58024400
 80032d0:	58020000 	.word	0x58020000

080032d4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80032d4:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <HAL_ADC_MspDeInit+0x20>)
 80032d6:	6802      	ldr	r2, [r0, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d000      	beq.n	80032de <HAL_ADC_MspDeInit+0xa>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80032dc:	4770      	bx	lr
    __HAL_RCC_ADC12_CLK_DISABLE();
 80032de:	4a06      	ldr	r2, [pc, #24]	@ (80032f8 <HAL_ADC_MspDeInit+0x24>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 80032e0:	2101      	movs	r1, #1
 80032e2:	4806      	ldr	r0, [pc, #24]	@ (80032fc <HAL_ADC_MspDeInit+0x28>)
    __HAL_RCC_ADC12_CLK_DISABLE();
 80032e4:	f8d2 3138 	ldr.w	r3, [r2, #312]	@ 0x138
 80032e8:	f023 0320 	bic.w	r3, r3, #32
 80032ec:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 80032f0:	f003 b894 	b.w	800641c <HAL_GPIO_DeInit>
 80032f4:	40022000 	.word	0x40022000
 80032f8:	58024400 	.word	0x58024400
 80032fc:	58020000 	.word	0x58020000

08003300 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003300:	e7fe      	b.n	8003300 <NMI_Handler>
 8003302:	bf00      	nop

08003304 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <HardFault_Handler>
 8003306:	bf00      	nop

08003308 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <MemManage_Handler>
 800330a:	bf00      	nop

0800330c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330c:	e7fe      	b.n	800330c <BusFault_Handler>
 800330e:	bf00      	nop

08003310 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <UsageFault_Handler>
 8003312:	bf00      	nop

08003314 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop

0800331c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop

08003320 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003320:	f000 b92e 	b.w	8003580 <HAL_IncTick>

08003324 <JPEG_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8003324:	4801      	ldr	r0, [pc, #4]	@ (800332c <JPEG_IRQHandler+0x8>)
 8003326:	f005 ba7f 	b.w	8008828 <HAL_JPEG_IRQHandler>
 800332a:	bf00      	nop
 800332c:	24000220 	.word	0x24000220

08003330 <MDMA_IRQHandler>:
}

void MDMA_IRQHandler()
{
 8003330:	b510      	push	{r4, lr}
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8003332:	4c04      	ldr	r4, [pc, #16]	@ (8003344 <MDMA_IRQHandler+0x14>)
 8003334:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003336:	f005 fc37 	bl	8008ba8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 800333a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 800333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003340:	f005 bc32 	b.w	8008ba8 <HAL_MDMA_IRQHandler>
 8003344:	24000220 	.word	0x24000220

08003348 <DMA1_Stream0_IRQHandler>:

void DMA1_Stream0_IRQHandler()
{

	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003348:	4801      	ldr	r0, [pc, #4]	@ (8003350 <DMA1_Stream0_IRQHandler+0x8>)
 800334a:	f002 ba03 	b.w	8005754 <HAL_DMA_IRQHandler>
 800334e:	bf00      	nop
 8003350:	24000278 	.word	0x24000278

08003354 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003354:	4801      	ldr	r0, [pc, #4]	@ (800335c <SPI1_IRQHandler+0x8>)
 8003356:	f009 b985 	b.w	800c664 <HAL_SPI_IRQHandler>
 800335a:	bf00      	nop
 800335c:	240002f0 	.word	0x240002f0

08003360 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003360:	4801      	ldr	r0, [pc, #4]	@ (8003368 <I2C1_EV_IRQHandler+0x8>)
 8003362:	f003 bacb 	b.w	80068fc <HAL_I2C_EV_IRQHandler>
 8003366:	bf00      	nop
 8003368:	24000128 	.word	0x24000128

0800336c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 800336c:	2001      	movs	r0, #1
 800336e:	f003 b929 	b.w	80065c4 <HAL_GPIO_EXTI_IRQHandler>
 8003372:	bf00      	nop

08003374 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 8003374:	2002      	movs	r0, #2
 8003376:	f003 b925 	b.w	80065c4 <HAL_GPIO_EXTI_IRQHandler>
 800337a:	bf00      	nop

0800337c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 800337c:	2004      	movs	r0, #4
 800337e:	f003 b921 	b.w	80065c4 <HAL_GPIO_EXTI_IRQHandler>
 8003382:	bf00      	nop

08003384 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(FXLS8974CF_INT_Pin);
 8003384:	2020      	movs	r0, #32
 8003386:	f003 b91d 	b.w	80065c4 <HAL_GPIO_EXTI_IRQHandler>
 800338a:	bf00      	nop

0800338c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800338c:	490d      	ldr	r1, [pc, #52]	@ (80033c4 <_sbrk+0x38>)
{
 800338e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003390:	4a0d      	ldr	r2, [pc, #52]	@ (80033c8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003392:	6808      	ldr	r0, [r1, #0]
{
 8003394:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003396:	4c0d      	ldr	r4, [pc, #52]	@ (80033cc <_sbrk+0x40>)
 8003398:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800339a:	b120      	cbz	r0, 80033a6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800339c:	4403      	add	r3, r0
 800339e:	4293      	cmp	r3, r2
 80033a0:	d807      	bhi.n	80033b2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80033a2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80033a4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80033a6:	4c0a      	ldr	r4, [pc, #40]	@ (80033d0 <_sbrk+0x44>)
 80033a8:	4620      	mov	r0, r4
 80033aa:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80033ac:	4403      	add	r3, r0
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d9f7      	bls.n	80033a2 <_sbrk+0x16>
    errno = ENOMEM;
 80033b2:	f00c fc37 	bl	800fc24 <__errno>
 80033b6:	220c      	movs	r2, #12
 80033b8:	4603      	mov	r3, r0
    return (void *)-1;
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	bd10      	pop	{r4, pc}
 80033c2:	bf00      	nop
 80033c4:	240ac8ac 	.word	0x240ac8ac
 80033c8:	24100000 	.word	0x24100000
 80033cc:	00000800 	.word	0x00000800
 80033d0:	240aca38 	.word	0x240aca38

080033d4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033d4:	4922      	ldr	r1, [pc, #136]	@ (8003460 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033d6:	4a23      	ldr	r2, [pc, #140]	@ (8003464 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033d8:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80033dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80033e0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d805      	bhi.n	80033fc <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	f023 030f 	bic.w	r3, r3, #15
 80033f6:	f043 0303 	orr.w	r3, r3, #3
 80033fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80033fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033fe:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003400:	4a1a      	ldr	r2, [pc, #104]	@ (800346c <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8003402:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003404:	4817      	ldr	r0, [pc, #92]	@ (8003464 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8003406:	f041 0101 	orr.w	r1, r1, #1
 800340a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800340c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	400a      	ands	r2, r1
 8003412:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003414:	6803      	ldr	r3, [r0, #0]
 8003416:	f013 0f0c 	tst.w	r3, #12
 800341a:	d005      	beq.n	8003428 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800341c:	6803      	ldr	r3, [r0, #0]
 800341e:	f023 030f 	bic.w	r3, r3, #15
 8003422:	f043 0303 	orr.w	r3, r3, #3
 8003426:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003428:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <SystemInit+0x94>)
 800342a:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800342c:	4910      	ldr	r1, [pc, #64]	@ (8003470 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 800342e:	4c11      	ldr	r4, [pc, #68]	@ (8003474 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003430:	4811      	ldr	r0, [pc, #68]	@ (8003478 <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 8003432:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8003434:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8003436:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003438:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800343a:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 800343e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003440:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003442:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8003444:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003446:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8003448:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800344c:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800344e:	480b      	ldr	r0, [pc, #44]	@ (800347c <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8003450:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003454:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8003456:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003458:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800345a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	52002000 	.word	0x52002000
 8003468:	58024400 	.word	0x58024400
 800346c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003470:	01010280 	.word	0x01010280
 8003474:	02020200 	.word	0x02020200
 8003478:	01ff0000 	.word	0x01ff0000
 800347c:	52004000 	.word	0x52004000

08003480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003484:	f7ff ffa6 	bl	80033d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003488:	480c      	ldr	r0, [pc, #48]	@ (80034bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800348a:	490d      	ldr	r1, [pc, #52]	@ (80034c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003490:	e002      	b.n	8003498 <LoopCopyDataInit>

08003492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003496:	3304      	adds	r3, #4

08003498 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800349c:	d3f9      	bcc.n	8003492 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349e:	4a0a      	ldr	r2, [pc, #40]	@ (80034c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034a0:	4c0a      	ldr	r4, [pc, #40]	@ (80034cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80034a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a4:	e001      	b.n	80034aa <LoopFillZerobss>

080034a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a8:	3204      	adds	r2, #4

080034aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ac:	d3fb      	bcc.n	80034a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80034ae:	f00c fbbf 	bl	800fc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b2:	f7fe fa5b 	bl	800196c <main>
  bx  lr
 80034b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034b8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80034bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034c0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80034c4:	080108c8 	.word	0x080108c8
  ldr r2, =_sbss
 80034c8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80034cc:	240aca34 	.word	0x240aca34

080034d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d0:	e7fe      	b.n	80034d0 <ADC_IRQHandler>
	...

080034d4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <HAL_InitTick+0x40>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b90b      	cbnz	r3, 80034de <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80034da:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80034dc:	4770      	bx	lr
{
 80034de:	b510      	push	{r4, lr}
 80034e0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80034e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003518 <HAL_InitTick+0x44>)
 80034e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ec:	6810      	ldr	r0, [r2, #0]
 80034ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80034f2:	f001 f85f 	bl	80045b4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f6:	b908      	cbnz	r0, 80034fc <HAL_InitTick+0x28>
 80034f8:	2c0f      	cmp	r4, #15
 80034fa:	d901      	bls.n	8003500 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
}
 80034fe:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003500:	2200      	movs	r2, #0
 8003502:	4621      	mov	r1, r4
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	f000 ffe6 	bl	80044d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800350c:	4b03      	ldr	r3, [pc, #12]	@ (800351c <HAL_InitTick+0x48>)
 800350e:	2000      	movs	r0, #0
 8003510:	601c      	str	r4, [r3, #0]
}
 8003512:	bd10      	pop	{r4, pc}
 8003514:	24000010 	.word	0x24000010
 8003518:	2400000c 	.word	0x2400000c
 800351c:	24000014 	.word	0x24000014

08003520 <HAL_Init>:
{
 8003520:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003522:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003524:	4c12      	ldr	r4, [pc, #72]	@ (8003570 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003526:	f000 ffc5 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800352a:	f005 ff9b 	bl	8009464 <HAL_RCC_GetSysClockFreq>
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_Init+0x54>)
 8003530:	4911      	ldr	r1, [pc, #68]	@ (8003578 <HAL_Init+0x58>)
 8003532:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003534:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003536:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800353a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800353e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003540:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003542:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003546:	490d      	ldr	r1, [pc, #52]	@ (800357c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003548:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800354c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800354e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003552:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003554:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003556:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003558:	f7ff ffbc 	bl	80034d4 <HAL_InitTick>
 800355c:	b110      	cbz	r0, 8003564 <HAL_Init+0x44>
    return HAL_ERROR;
 800355e:	2401      	movs	r4, #1
}
 8003560:	4620      	mov	r0, r4
 8003562:	bd10      	pop	{r4, pc}
 8003564:	4604      	mov	r4, r0
  HAL_MspInit();
 8003566:	f7ff fc1b 	bl	8002da0 <HAL_MspInit>
}
 800356a:	4620      	mov	r0, r4
 800356c:	bd10      	pop	{r4, pc}
 800356e:	bf00      	nop
 8003570:	24000008 	.word	0x24000008
 8003574:	58024400 	.word	0x58024400
 8003578:	08010568 	.word	0x08010568
 800357c:	2400000c 	.word	0x2400000c

08003580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003580:	4a03      	ldr	r2, [pc, #12]	@ (8003590 <HAL_IncTick+0x10>)
 8003582:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <HAL_IncTick+0x14>)
 8003584:	6811      	ldr	r1, [r2, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	440b      	add	r3, r1
 800358a:	6013      	str	r3, [r2, #0]
}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	240ac8b0 	.word	0x240ac8b0
 8003594:	24000010 	.word	0x24000010

08003598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003598:	4b01      	ldr	r3, [pc, #4]	@ (80035a0 <HAL_GetTick+0x8>)
 800359a:	6818      	ldr	r0, [r3, #0]
}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	240ac8b0 	.word	0x240ac8b0

080035a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff fff6 	bl	8003598 <HAL_GetTick>
 80035ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ae:	1c63      	adds	r3, r4, #1
 80035b0:	d002      	beq.n	80035b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80035b2:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <HAL_Delay+0x20>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035b8:	f7ff ffee 	bl	8003598 <HAL_GetTick>
 80035bc:	1b40      	subs	r0, r0, r5
 80035be:	42a0      	cmp	r0, r4
 80035c0:	d3fa      	bcc.n	80035b8 <HAL_Delay+0x14>
  {
  }
}
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	24000010 	.word	0x24000010

080035c8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80035c8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80035cc:	6913      	ldr	r3, [r2, #16]
 80035ce:	f023 0302 	bic.w	r3, r3, #2
 80035d2:	6113      	str	r3, [r2, #16]
}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop

080035d8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80035d8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80035dc:	6913      	ldr	r3, [r2, #16]
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	6113      	str	r3, [r2, #16]
}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80035ec:	4a36      	ldr	r2, [pc, #216]	@ (80036c8 <HAL_ADC_PollForConversion+0xe0>)
 80035ee:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035f0:	6904      	ldr	r4, [r0, #16]
{
 80035f2:	460e      	mov	r6, r1
 80035f4:	6897      	ldr	r7, [r2, #8]
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035f6:	2c08      	cmp	r4, #8
 80035f8:	f007 071f 	and.w	r7, r7, #31
 80035fc:	d009      	beq.n	8003612 <HAL_ADC_PollForConversion+0x2a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035fe:	f240 2321 	movw	r3, #545	@ 0x221
 8003602:	40fb      	lsrs	r3, r7
 8003604:	07d9      	lsls	r1, r3, #31
 8003606:	d44c      	bmi.n	80036a2 <HAL_ADC_PollForConversion+0xba>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003608:	6893      	ldr	r3, [r2, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800360a:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800360e:	d14c      	bne.n	80036aa <HAL_ADC_PollForConversion+0xc2>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003610:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003612:	f7ff ffc1 	bl	8003598 <HAL_GetTick>
 8003616:	1c73      	adds	r3, r6, #1
 8003618:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800361a:	682a      	ldr	r2, [r5, #0]
 800361c:	d12b      	bne.n	8003676 <HAL_ADC_PollForConversion+0x8e>
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	4223      	tst	r3, r4
 8003622:	d0fc      	beq.n	800361e <HAL_ADC_PollForConversion+0x36>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003624:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8003626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800362a:	656b      	str	r3, [r5, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800362c:	68d3      	ldr	r3, [r2, #12]
 800362e:	f413 6f40 	tst.w	r3, #3072	@ 0xc00
 8003632:	d10f      	bne.n	8003654 <HAL_ADC_PollForConversion+0x6c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003634:	7d6b      	ldrb	r3, [r5, #21]
 8003636:	b96b      	cbnz	r3, 8003654 <HAL_ADC_PollForConversion+0x6c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003638:	6813      	ldr	r3, [r2, #0]
 800363a:	071e      	lsls	r6, r3, #28
 800363c:	d50a      	bpl.n	8003654 <HAL_ADC_PollForConversion+0x6c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800363e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8003640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003644:	656b      	str	r3, [r5, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003646:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8003648:	04d8      	lsls	r0, r3, #19
 800364a:	d403      	bmi.n	8003654 <HAL_ADC_PollForConversion+0x6c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800364c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	656b      	str	r3, [r5, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003654:	4b1d      	ldr	r3, [pc, #116]	@ (80036cc <HAL_ADC_PollForConversion+0xe4>)
 8003656:	429a      	cmp	r2, r3
 8003658:	d018      	beq.n	800368c <HAL_ADC_PollForConversion+0xa4>
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800365a:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800365c:	68d3      	ldr	r3, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800365e:	d01e      	beq.n	800369e <HAL_ADC_PollForConversion+0xb6>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003660:	045b      	lsls	r3, r3, #17
 8003662:	d401      	bmi.n	8003668 <HAL_ADC_PollForConversion+0x80>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003664:	230c      	movs	r3, #12
 8003666:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003668:	2000      	movs	r0, #0
}
 800366a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800366e:	b916      	cbnz	r6, 8003676 <HAL_ADC_PollForConversion+0x8e>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	4023      	ands	r3, r4
 8003674:	d020      	beq.n	80036b8 <HAL_ADC_PollForConversion+0xd0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	4223      	tst	r3, r4
 800367a:	d1d3      	bne.n	8003624 <HAL_ADC_PollForConversion+0x3c>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800367c:	f7ff ff8c 	bl	8003598 <HAL_GetTick>
 8003680:	eba0 0008 	sub.w	r0, r0, r8
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003684:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003686:	42b0      	cmp	r0, r6
 8003688:	d9f1      	bls.n	800366e <HAL_ADC_PollForConversion+0x86>
 800368a:	e7f1      	b.n	8003670 <HAL_ADC_PollForConversion+0x88>
 800368c:	f240 2321 	movw	r3, #545	@ 0x221
 8003690:	40fb      	lsrs	r3, r7
 8003692:	07d9      	lsls	r1, r3, #31
 8003694:	d4e1      	bmi.n	800365a <HAL_ADC_PollForConversion+0x72>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003696:	4b0e      	ldr	r3, [pc, #56]	@ (80036d0 <HAL_ADC_PollForConversion+0xe8>)
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003698:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800369a:	68db      	ldr	r3, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800369c:	d1e0      	bne.n	8003660 <HAL_ADC_PollForConversion+0x78>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800369e:	6014      	str	r4, [r2, #0]
 80036a0:	e7e2      	b.n	8003668 <HAL_ADC_PollForConversion+0x80>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80036a2:	6803      	ldr	r3, [r0, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	07da      	lsls	r2, r3, #31
 80036a8:	d5b2      	bpl.n	8003610 <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036aa:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
        return HAL_ERROR;
 80036ac:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ae:	f043 0320 	orr.w	r3, r3, #32
 80036b2:	656b      	str	r3, [r5, #84]	@ 0x54
}
 80036b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036b8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 80036ba:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 80036bc:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036c0:	f042 0204 	orr.w	r2, r2, #4
 80036c4:	656a      	str	r2, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 80036c6:	e7d0      	b.n	800366a <HAL_ADC_PollForConversion+0x82>
 80036c8:	40022300 	.word	0x40022300
 80036cc:	40022100 	.word	0x40022100
 80036d0:	40022000 	.word	0x40022000

080036d4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036d4:	6803      	ldr	r3, [r0, #0]
 80036d6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop

080036dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036de:	2200      	movs	r2, #0
{
 80036e0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80036e2:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e4:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80036e8:	2a01      	cmp	r2, #1
 80036ea:	f000 80e4 	beq.w	80038b6 <HAL_ADC_ConfigChannel+0x1da>
 80036ee:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f0:	6802      	ldr	r2, [r0, #0]
 80036f2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80036f4:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036f8:	6890      	ldr	r0, [r2, #8]
 80036fa:	0740      	lsls	r0, r0, #29
 80036fc:	d509      	bpl.n	8003712 <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 8003700:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800370e:	b002      	add	sp, #8
 8003710:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003712:	680d      	ldr	r5, [r1, #0]
 8003714:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003716:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800371a:	db0d      	blt.n	8003738 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800371c:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8003720:	2e00      	cmp	r6, #0
 8003722:	f000 80b4 	beq.w	800388e <HAL_ADC_ConfigChannel+0x1b2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800372a:	b115      	cbz	r5, 8003732 <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800372c:	fab5 f585 	clz	r5, r5
 8003730:	40ac      	lsls	r4, r5
 8003732:	69d5      	ldr	r5, [r2, #28]
 8003734:	432c      	orrs	r4, r5
 8003736:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003738:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 800373a:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800373e:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8003742:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003746:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8003748:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800374c:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8003750:	fa0c fc04 	lsl.w	ip, ip, r4
 8003754:	40a0      	lsls	r0, r4
 8003756:	f85e 4005 	ldr.w	r4, [lr, r5]
 800375a:	ea24 0c0c 	bic.w	ip, r4, ip
 800375e:	ea4c 0000 	orr.w	r0, ip, r0
 8003762:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003766:	6890      	ldr	r0, [r2, #8]
 8003768:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800376c:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003770:	0706      	lsls	r6, r0, #28
 8003772:	d53d      	bpl.n	80037f0 <HAL_ADC_ConfigChannel+0x114>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003774:	6890      	ldr	r0, [r2, #8]
 8003776:	07c4      	lsls	r4, r0, #31
 8003778:	d438      	bmi.n	80037ec <HAL_ADC_ConfigChannel+0x110>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800377a:	68cd      	ldr	r5, [r1, #12]
 800377c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800377e:	f005 0618 	and.w	r6, r5, #24
 8003782:	48b0      	ldr	r0, [pc, #704]	@ (8003a44 <HAL_ADC_ConfigChannel+0x368>)
 8003784:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8003788:	40f0      	lsrs	r0, r6
 800378a:	f3c4 0613 	ubfx	r6, r4, #0, #20
 800378e:	4020      	ands	r0, r4
 8003790:	ea21 0106 	bic.w	r1, r1, r6
 8003794:	4301      	orrs	r1, r0
 8003796:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800379a:	49ab      	ldr	r1, [pc, #684]	@ (8003a48 <HAL_ADC_ConfigChannel+0x36c>)
 800379c:	428d      	cmp	r5, r1
 800379e:	d07f      	beq.n	80038a0 <HAL_ADC_ConfigChannel+0x1c4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037a0:	2c00      	cmp	r4, #0
 80037a2:	da23      	bge.n	80037ec <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037a4:	49a9      	ldr	r1, [pc, #676]	@ (8003a4c <HAL_ADC_ConfigChannel+0x370>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037a6:	48aa      	ldr	r0, [pc, #680]	@ (8003a50 <HAL_ADC_ConfigChannel+0x374>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037a8:	688d      	ldr	r5, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037aa:	6880      	ldr	r0, [r0, #8]
 80037ac:	07c0      	lsls	r0, r0, #31
 80037ae:	f100 80a1 	bmi.w	80038f4 <HAL_ADC_ConfigChannel+0x218>
 80037b2:	48a8      	ldr	r0, [pc, #672]	@ (8003a54 <HAL_ADC_ConfigChannel+0x378>)
 80037b4:	6886      	ldr	r6, [r0, #8]
 80037b6:	07f6      	lsls	r6, r6, #31
 80037b8:	d4a1      	bmi.n	80036fe <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037ba:	4ea7      	ldr	r6, [pc, #668]	@ (8003a58 <HAL_ADC_ConfigChannel+0x37c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037bc:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
 80037c0:	42b4      	cmp	r4, r6
 80037c2:	f000 811b 	beq.w	80039fc <HAL_ADC_ConfigChannel+0x320>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037c6:	4ea5      	ldr	r6, [pc, #660]	@ (8003a5c <HAL_ADC_ConfigChannel+0x380>)
 80037c8:	42b4      	cmp	r4, r6
 80037ca:	f000 816a 	beq.w	8003aa2 <HAL_ADC_ConfigChannel+0x3c6>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037ce:	4ea4      	ldr	r6, [pc, #656]	@ (8003a60 <HAL_ADC_ConfigChannel+0x384>)
 80037d0:	42b4      	cmp	r4, r6
 80037d2:	d10b      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x110>
            if (ADC_VREFINT_INSTANCE(hadc))
 80037d4:	026c      	lsls	r4, r5, #9
 80037d6:	d409      	bmi.n	80037ec <HAL_ADC_ConfigChannel+0x110>
 80037d8:	4282      	cmp	r2, r0
 80037da:	d107      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x110>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037dc:	688a      	ldr	r2, [r1, #8]
 80037de:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80037e2:	ea42 020c 	orr.w	r2, r2, ip
 80037e6:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80037ea:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ec:	2000      	movs	r0, #0
 80037ee:	e78b      	b.n	8003708 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037f0:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037f2:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 80037f6:	f04f 0e07 	mov.w	lr, #7
 80037fa:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037fc:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 80037fe:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003802:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003806:	fa0e fe04 	lsl.w	lr, lr, r4
 800380a:	fa06 f404 	lsl.w	r4, r6, r4
 800380e:	f85c 0005 	ldr.w	r0, [ip, r5]
 8003812:	ea20 000e 	bic.w	r0, r0, lr
 8003816:	4320      	orrs	r0, r4
 8003818:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800381c:	68d0      	ldr	r0, [r2, #12]
 800381e:	06c5      	lsls	r5, r0, #27
 8003820:	d537      	bpl.n	8003892 <HAL_ADC_ConfigChannel+0x1b6>
 8003822:	68d0      	ldr	r0, [r2, #12]
 8003824:	694d      	ldr	r5, [r1, #20]
 8003826:	0840      	lsrs	r0, r0, #1
 8003828:	f000 0008 	and.w	r0, r0, #8
 800382c:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800382e:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003830:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003832:	2e04      	cmp	r6, #4
 8003834:	d042      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x1e0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003836:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 800383a:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 800383e:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8003842:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8003846:	4320      	orrs	r0, r4
 8003848:	4328      	orrs	r0, r5
 800384a:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800384e:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003850:	690d      	ldr	r5, [r1, #16]
 8003852:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003856:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 800385a:	fab4 f484 	clz	r4, r4
 800385e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003862:	0964      	lsrs	r4, r4, #5
 8003864:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8003868:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800386c:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800386e:	690d      	ldr	r5, [r1, #16]
 8003870:	f1a0 0001 	sub.w	r0, r0, #1
 8003874:	6914      	ldr	r4, [r2, #16]
 8003876:	f005 051f 	and.w	r5, r5, #31
 800387a:	fab0 f080 	clz	r0, r0
 800387e:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8003882:	0940      	lsrs	r0, r0, #5
 8003884:	02c0      	lsls	r0, r0, #11
 8003886:	40a8      	lsls	r0, r5
 8003888:	4320      	orrs	r0, r4
 800388a:	6110      	str	r0, [r2, #16]
}
 800388c:	e772      	b.n	8003774 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800388e:	4084      	lsls	r4, r0
 8003890:	e74f      	b.n	8003732 <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003892:	68d0      	ldr	r0, [r2, #12]
 8003894:	694d      	ldr	r5, [r1, #20]
 8003896:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800389a:	0040      	lsls	r0, r0, #1
 800389c:	4085      	lsls	r5, r0
 800389e:	e7c6      	b.n	800382e <HAL_ADC_ConfigChannel+0x152>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80038a0:	496b      	ldr	r1, [pc, #428]	@ (8003a50 <HAL_ADC_ConfigChannel+0x374>)
 80038a2:	428a      	cmp	r2, r1
 80038a4:	d073      	beq.n	800398e <HAL_ADC_ConfigChannel+0x2b2>
 80038a6:	496b      	ldr	r1, [pc, #428]	@ (8003a54 <HAL_ADC_ConfigChannel+0x378>)
 80038a8:	428a      	cmp	r2, r1
 80038aa:	d035      	beq.n	8003918 <HAL_ADC_ConfigChannel+0x23c>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80038ac:	69d1      	ldr	r1, [r2, #28]
 80038ae:	f041 0101 	orr.w	r1, r1, #1
 80038b2:	61d1      	str	r1, [r2, #28]
}
 80038b4:	e774      	b.n	80037a0 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_LOCK(hadc);
 80038b6:	2002      	movs	r0, #2
}
 80038b8:	b002      	add	sp, #8
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038bc:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 80038be:	0684      	lsls	r4, r0, #26
 80038c0:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 80038c4:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 80038c8:	d017      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x21e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038ca:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80038cc:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80038d0:	4284      	cmp	r4, r0
 80038d2:	d01c      	beq.n	800390e <HAL_ADC_ConfigChannel+0x232>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038d4:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80038d6:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80038da:	4284      	cmp	r4, r0
 80038dc:	d012      	beq.n	8003904 <HAL_ADC_ConfigChannel+0x228>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038de:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80038e0:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80038e4:	4284      	cmp	r4, r0
 80038e6:	f47f af45 	bne.w	8003774 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038ea:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80038ec:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80038f0:	66d0      	str	r0, [r2, #108]	@ 0x6c
 80038f2:	e73f      	b.n	8003774 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038f4:	4a57      	ldr	r2, [pc, #348]	@ (8003a54 <HAL_ADC_ConfigChannel+0x378>)
 80038f6:	6892      	ldr	r2, [r2, #8]
 80038f8:	e701      	b.n	80036fe <HAL_ADC_ConfigChannel+0x22>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038fa:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80038fc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003900:	6610      	str	r0, [r2, #96]	@ 0x60
 8003902:	e7e2      	b.n	80038ca <HAL_ADC_ConfigChannel+0x1ee>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003904:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8003906:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800390a:	6690      	str	r0, [r2, #104]	@ 0x68
 800390c:	e7e7      	b.n	80038de <HAL_ADC_ConfigChannel+0x202>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800390e:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003910:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003914:	6650      	str	r0, [r2, #100]	@ 0x64
 8003916:	e7dd      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x1f8>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003918:	4952      	ldr	r1, [pc, #328]	@ (8003a64 <HAL_ADC_ConfigChannel+0x388>)
 800391a:	428c      	cmp	r4, r1
 800391c:	f000 80b6 	beq.w	8003a8c <HAL_ADC_ConfigChannel+0x3b0>
 8003920:	4951      	ldr	r1, [pc, #324]	@ (8003a68 <HAL_ADC_ConfigChannel+0x38c>)
 8003922:	428c      	cmp	r4, r1
 8003924:	f000 80cc 	beq.w	8003ac0 <HAL_ADC_ConfigChannel+0x3e4>
 8003928:	4950      	ldr	r1, [pc, #320]	@ (8003a6c <HAL_ADC_ConfigChannel+0x390>)
 800392a:	428c      	cmp	r4, r1
 800392c:	f000 80d5 	beq.w	8003ada <HAL_ADC_ConfigChannel+0x3fe>
 8003930:	494f      	ldr	r1, [pc, #316]	@ (8003a70 <HAL_ADC_ConfigChannel+0x394>)
 8003932:	428c      	cmp	r4, r1
 8003934:	f000 80db 	beq.w	8003aee <HAL_ADC_ConfigChannel+0x412>
 8003938:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800393c:	3110      	adds	r1, #16
 800393e:	428c      	cmp	r4, r1
 8003940:	f000 80e1 	beq.w	8003b06 <HAL_ADC_ConfigChannel+0x42a>
 8003944:	494b      	ldr	r1, [pc, #300]	@ (8003a74 <HAL_ADC_ConfigChannel+0x398>)
 8003946:	428c      	cmp	r4, r1
 8003948:	f000 80f5 	beq.w	8003b36 <HAL_ADC_ConfigChannel+0x45a>
 800394c:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8003950:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8003954:	428c      	cmp	r4, r1
 8003956:	f000 8103 	beq.w	8003b60 <HAL_ADC_ConfigChannel+0x484>
 800395a:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800395e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003962:	428c      	cmp	r4, r1
 8003964:	f000 810a 	beq.w	8003b7c <HAL_ADC_ConfigChannel+0x4a0>
 8003968:	4943      	ldr	r1, [pc, #268]	@ (8003a78 <HAL_ADC_ConfigChannel+0x39c>)
 800396a:	428c      	cmp	r4, r1
 800396c:	d19e      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1d0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	4a43      	ldr	r2, [pc, #268]	@ (8003a7c <HAL_ADC_ConfigChannel+0x3a0>)
 8003970:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003974:	2a00      	cmp	r2, #0
 8003976:	f000 80cc 	beq.w	8003b12 <HAL_ADC_ConfigChannel+0x436>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800397a:	4836      	ldr	r0, [pc, #216]	@ (8003a54 <HAL_ADC_ConfigChannel+0x378>)
  return __builtin_clz(value);
 800397c:	fab2 f282 	clz	r2, r2
 8003980:	2101      	movs	r1, #1
 8003982:	69c4      	ldr	r4, [r0, #28]
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4322      	orrs	r2, r4
 800398a:	61c2      	str	r2, [r0, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800398c:	e72e      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800398e:	4935      	ldr	r1, [pc, #212]	@ (8003a64 <HAL_ADC_ConfigChannel+0x388>)
 8003990:	428c      	cmp	r4, r1
 8003992:	d07b      	beq.n	8003a8c <HAL_ADC_ConfigChannel+0x3b0>
 8003994:	4934      	ldr	r1, [pc, #208]	@ (8003a68 <HAL_ADC_ConfigChannel+0x38c>)
 8003996:	428c      	cmp	r4, r1
 8003998:	f000 8092 	beq.w	8003ac0 <HAL_ADC_ConfigChannel+0x3e4>
 800399c:	4933      	ldr	r1, [pc, #204]	@ (8003a6c <HAL_ADC_ConfigChannel+0x390>)
 800399e:	428c      	cmp	r4, r1
 80039a0:	f000 809b 	beq.w	8003ada <HAL_ADC_ConfigChannel+0x3fe>
 80039a4:	4932      	ldr	r1, [pc, #200]	@ (8003a70 <HAL_ADC_ConfigChannel+0x394>)
 80039a6:	428c      	cmp	r4, r1
 80039a8:	f000 80a1 	beq.w	8003aee <HAL_ADC_ConfigChannel+0x412>
 80039ac:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80039b0:	3110      	adds	r1, #16
 80039b2:	428c      	cmp	r4, r1
 80039b4:	f000 80a1 	beq.w	8003afa <HAL_ADC_ConfigChannel+0x41e>
 80039b8:	492e      	ldr	r1, [pc, #184]	@ (8003a74 <HAL_ADC_ConfigChannel+0x398>)
 80039ba:	428c      	cmp	r4, r1
 80039bc:	f000 80af 	beq.w	8003b1e <HAL_ADC_ConfigChannel+0x442>
 80039c0:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 80039c4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80039c8:	428c      	cmp	r4, r1
 80039ca:	f000 80bb 	beq.w	8003b44 <HAL_ADC_ConfigChannel+0x468>
 80039ce:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80039d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039d6:	428c      	cmp	r4, r1
 80039d8:	f000 80bb 	beq.w	8003b52 <HAL_ADC_ConfigChannel+0x476>
 80039dc:	4928      	ldr	r1, [pc, #160]	@ (8003a80 <HAL_ADC_ConfigChannel+0x3a4>)
 80039de:	428c      	cmp	r4, r1
 80039e0:	f000 80c5 	beq.w	8003b6e <HAL_ADC_ConfigChannel+0x492>
 80039e4:	4924      	ldr	r1, [pc, #144]	@ (8003a78 <HAL_ADC_ConfigChannel+0x39c>)
 80039e6:	428c      	cmp	r4, r1
 80039e8:	f47f af60 	bne.w	80038ac <HAL_ADC_ConfigChannel+0x1d0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	4a23      	ldr	r2, [pc, #140]	@ (8003a7c <HAL_ADC_ConfigChannel+0x3a0>)
 80039ee:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	f000 8099 	beq.w	8003b2a <HAL_ADC_ConfigChannel+0x44e>
 80039f8:	4815      	ldr	r0, [pc, #84]	@ (8003a50 <HAL_ADC_ConfigChannel+0x374>)
 80039fa:	e7bf      	b.n	800397c <HAL_ADC_ConfigChannel+0x2a0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039fc:	022e      	lsls	r6, r5, #8
 80039fe:	f53f aef5 	bmi.w	80037ec <HAL_ADC_ConfigChannel+0x110>
 8003a02:	4282      	cmp	r2, r0
 8003a04:	f47f aef2 	bne.w	80037ec <HAL_ADC_ConfigChannel+0x110>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a08:	688a      	ldr	r2, [r1, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a0a:	481e      	ldr	r0, [pc, #120]	@ (8003a84 <HAL_ADC_ConfigChannel+0x3a8>)
 8003a0c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003a10:	ea42 020c 	orr.w	r2, r2, ip
 8003a14:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003a18:	608a      	str	r2, [r1, #8]
 8003a1a:	6802      	ldr	r2, [r0, #0]
 8003a1c:	491a      	ldr	r1, [pc, #104]	@ (8003a88 <HAL_ADC_ConfigChannel+0x3ac>)
 8003a1e:	0992      	lsrs	r2, r2, #6
 8003a20:	fba1 1202 	umull	r1, r2, r1, r2
 8003a24:	0992      	lsrs	r2, r2, #6
 8003a26:	3201      	adds	r2, #1
 8003a28:	0052      	lsls	r2, r2, #1
 8003a2a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003a2c:	9a01      	ldr	r2, [sp, #4]
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	f43f aedc 	beq.w	80037ec <HAL_ADC_ConfigChannel+0x110>
                wait_loop_index--;
 8003a34:	9a01      	ldr	r2, [sp, #4]
 8003a36:	3a01      	subs	r2, #1
 8003a38:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003a3a:	9a01      	ldr	r2, [sp, #4]
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	d1f9      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x358>
 8003a40:	e6d4      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
 8003a42:	bf00      	nop
 8003a44:	000fffff 	.word	0x000fffff
 8003a48:	47ff0000 	.word	0x47ff0000
 8003a4c:	40022300 	.word	0x40022300
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40022100 	.word	0x40022100
 8003a58:	cb840000 	.word	0xcb840000
 8003a5c:	bac04000 	.word	0xbac04000
 8003a60:	cfb80000 	.word	0xcfb80000
 8003a64:	04300002 	.word	0x04300002
 8003a68:	08600004 	.word	0x08600004
 8003a6c:	0c900008 	.word	0x0c900008
 8003a70:	10c00010 	.word	0x10c00010
 8003a74:	2a000400 	.word	0x2a000400
 8003a78:	4b840000 	.word	0x4b840000
 8003a7c:	4fb80000 	.word	0x4fb80000
 8003a80:	43210000 	.word	0x43210000
 8003a84:	2400000c 	.word	0x2400000c
 8003a88:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa91 f0a1 	rbit	r0, r1
  if (value == 0U)
 8003a92:	b338      	cbz	r0, 8003ae4 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8003a94:	fab0 f080 	clz	r0, r0
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003a98:	69d4      	ldr	r4, [r2, #28]
 8003a9a:	4081      	lsls	r1, r0
 8003a9c:	4321      	orrs	r1, r4
 8003a9e:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aa0:	e6a4      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa2:	01ed      	lsls	r5, r5, #7
 8003aa4:	f53f aea2 	bmi.w	80037ec <HAL_ADC_ConfigChannel+0x110>
 8003aa8:	4282      	cmp	r2, r0
 8003aaa:	f47f ae9f 	bne.w	80037ec <HAL_ADC_ConfigChannel+0x110>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003aae:	688a      	ldr	r2, [r1, #8]
 8003ab0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003ab4:	ea42 020c 	orr.w	r2, r2, ip
 8003ab8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003abc:	608a      	str	r2, [r1, #8]
}
 8003abe:	e695      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	4932      	ldr	r1, [pc, #200]	@ (8003b8c <HAL_ADC_ConfigChannel+0x4b0>)
 8003ac2:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003ac6:	b169      	cbz	r1, 8003ae4 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8003ac8:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003acc:	2001      	movs	r0, #1
 8003ace:	69d4      	ldr	r4, [r2, #28]
 8003ad0:	fa00 f101 	lsl.w	r1, r0, r1
 8003ad4:	4321      	orrs	r1, r4
 8003ad6:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ad8:	e688      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	492d      	ldr	r1, [pc, #180]	@ (8003b90 <HAL_ADC_ConfigChannel+0x4b4>)
 8003adc:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	d1f1      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x3ec>
 8003ae4:	69d1      	ldr	r1, [r2, #28]
 8003ae6:	f041 0101 	orr.w	r1, r1, #1
 8003aea:	61d1      	str	r1, [r2, #28]
 8003aec:	e67e      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	4929      	ldr	r1, [pc, #164]	@ (8003b94 <HAL_ADC_ConfigChannel+0x4b8>)
 8003af0:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d1e7      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x3ec>
 8003af8:	e7f4      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x408>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	4927      	ldr	r1, [pc, #156]	@ (8003b98 <HAL_ADC_ConfigChannel+0x4bc>)
 8003afc:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003b00:	2900      	cmp	r1, #0
 8003b02:	d1e1      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x3ec>
 8003b04:	e7ee      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x408>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	4a24      	ldr	r2, [pc, #144]	@ (8003b98 <HAL_ADC_ConfigChannel+0x4bc>)
 8003b08:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	f47f af34 	bne.w	800397a <HAL_ADC_ConfigChannel+0x29e>
 8003b12:	4922      	ldr	r1, [pc, #136]	@ (8003b9c <HAL_ADC_ConfigChannel+0x4c0>)
 8003b14:	69ca      	ldr	r2, [r1, #28]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	61ca      	str	r2, [r1, #28]
 8003b1c:	e666      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x4c4>)
 8003b20:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b24:	2a00      	cmp	r2, #0
 8003b26:	f47f af67 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x31c>
 8003b2a:	491e      	ldr	r1, [pc, #120]	@ (8003ba4 <HAL_ADC_ConfigChannel+0x4c8>)
 8003b2c:	69ca      	ldr	r2, [r1, #28]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	61ca      	str	r2, [r1, #28]
 8003b34:	e65a      	b.n	80037ec <HAL_ADC_ConfigChannel+0x110>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <HAL_ADC_ConfigChannel+0x4c4>)
 8003b38:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	f47f af1c 	bne.w	800397a <HAL_ADC_ConfigChannel+0x29e>
 8003b42:	e7e6      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	4a18      	ldr	r2, [pc, #96]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x4cc>)
 8003b46:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	f47f af54 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x31c>
 8003b50:	e7eb      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x44e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <HAL_ADC_ConfigChannel+0x4d0>)
 8003b54:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b58:	2a00      	cmp	r2, #0
 8003b5a:	f47f af4d 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x31c>
 8003b5e:	e7e4      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x44e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	4a11      	ldr	r2, [pc, #68]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x4cc>)
 8003b62:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	f47f af07 	bne.w	800397a <HAL_ADC_ConfigChannel+0x29e>
 8003b6c:	e7d1      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	4a10      	ldr	r2, [pc, #64]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x4d4>)
 8003b70:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b74:	2a00      	cmp	r2, #0
 8003b76:	f47f af3f 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x31c>
 8003b7a:	e7d6      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x44e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003bac <HAL_ADC_ConfigChannel+0x4d0>)
 8003b7e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	f47f aef9 	bne.w	800397a <HAL_ADC_ConfigChannel+0x29e>
 8003b88:	e7c3      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x436>
 8003b8a:	bf00      	nop
 8003b8c:	19200040 	.word	0x19200040
 8003b90:	1d500080 	.word	0x1d500080
 8003b94:	21800100 	.word	0x21800100
 8003b98:	25b00200 	.word	0x25b00200
 8003b9c:	40022100 	.word	0x40022100
 8003ba0:	2e300800 	.word	0x2e300800
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	32601000 	.word	0x32601000
 8003bac:	36902000 	.word	0x36902000
 8003bb0:	47520000 	.word	0x47520000

08003bb4 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bb4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bbc:	689a      	ldr	r2, [r3, #8]
{
 8003bbe:	b570      	push	{r4, r5, r6, lr}
 8003bc0:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bc2:	d101      	bne.n	8003bc8 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bc4:	0716      	lsls	r6, r2, #28
 8003bc6:	d540      	bpl.n	8003c4a <ADC_ConversionStop+0x96>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	0195      	lsls	r5, r2, #6
 8003bcc:	d504      	bpl.n	8003bd8 <ADC_ConversionStop+0x24>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003bce:	8aa0      	ldrh	r0, [r4, #20]
 8003bd0:	f240 1201 	movw	r2, #257	@ 0x101
 8003bd4:	4290      	cmp	r0, r2
 8003bd6:	d03a      	beq.n	8003c4e <ADC_ConversionStop+0x9a>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003bd8:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	d048      	beq.n	8003c70 <ADC_ConversionStop+0xbc>
 8003bde:	0750      	lsls	r0, r2, #29
 8003be0:	d508      	bpl.n	8003bf4 <ADC_ConversionStop+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	0792      	lsls	r2, r2, #30
 8003be6:	d405      	bmi.n	8003bf4 <ADC_ConversionStop+0x40>
  MODIFY_REG(ADCx->CR,
 8003be8:	6898      	ldr	r0, [r3, #8]
 8003bea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <ADC_ConversionStop+0xec>)
 8003bec:	4002      	ands	r2, r0
 8003bee:	f042 0210 	orr.w	r2, r2, #16
 8003bf2:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003bf4:	2901      	cmp	r1, #1
 8003bf6:	d039      	beq.n	8003c6c <ADC_ConversionStop+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	0710      	lsls	r0, r2, #28
 8003bfc:	d508      	bpl.n	8003c10 <ADC_ConversionStop+0x5c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	0792      	lsls	r2, r2, #30
 8003c02:	d405      	bmi.n	8003c10 <ADC_ConversionStop+0x5c>
  MODIFY_REG(ADCx->CR,
 8003c04:	6898      	ldr	r0, [r3, #8]
 8003c06:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <ADC_ConversionStop+0xec>)
 8003c08:	4002      	ands	r2, r0
 8003c0a:	f042 0220 	orr.w	r2, r2, #32
 8003c0e:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c10:	2903      	cmp	r1, #3
 8003c12:	d12b      	bne.n	8003c6c <ADC_ConversionStop+0xb8>
 8003c14:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c16:	f7ff fcbf 	bl	8003598 <HAL_GetTick>

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c1a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003c1c:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	421d      	tst	r5, r3
 8003c22:	d012      	beq.n	8003c4a <ADC_ConversionStop+0x96>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c24:	f7ff fcb8 	bl	8003598 <HAL_GetTick>
 8003c28:	1b83      	subs	r3, r0, r6
 8003c2a:	2b05      	cmp	r3, #5
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c2c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c2e:	d9f6      	bls.n	8003c1e <ADC_ConversionStop+0x6a>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	422a      	tst	r2, r5
 8003c34:	d0f3      	beq.n	8003c1e <ADC_ConversionStop+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 8003c38:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	f043 0310 	orr.w	r3, r3, #16
 8003c3e:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	65a3      	str	r3, [r4, #88]	@ 0x58

  }

  /* Return HAL status */
  return HAL_OK;
}
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003c4a:	2000      	movs	r0, #0
}
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	0650      	lsls	r0, r2, #25
 8003c52:	d406      	bmi.n	8003c62 <ADC_ConversionStop+0xae>
 8003c54:	4a13      	ldr	r2, [pc, #76]	@ (8003ca4 <ADC_ConversionStop+0xf0>)
 8003c56:	e001      	b.n	8003c5c <ADC_ConversionStop+0xa8>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	d0ec      	beq.n	8003c36 <ADC_ConversionStop+0x82>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	0649      	lsls	r1, r1, #25
 8003c60:	d5fa      	bpl.n	8003c58 <ADC_ConversionStop+0xa4>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c62:	2240      	movs	r2, #64	@ 0x40
 8003c64:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	0756      	lsls	r6, r2, #29
 8003c6a:	d40f      	bmi.n	8003c8c <ADC_ConversionStop+0xd8>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c6c:	2504      	movs	r5, #4
 8003c6e:	e7d2      	b.n	8003c16 <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c70:	0716      	lsls	r6, r2, #28
 8003c72:	d401      	bmi.n	8003c78 <ADC_ConversionStop+0xc4>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c74:	2508      	movs	r5, #8
 8003c76:	e7ce      	b.n	8003c16 <ADC_ConversionStop+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	0795      	lsls	r5, r2, #30
 8003c7c:	d4fa      	bmi.n	8003c74 <ADC_ConversionStop+0xc0>
  MODIFY_REG(ADCx->CR,
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	4a07      	ldr	r2, [pc, #28]	@ (8003ca0 <ADC_ConversionStop+0xec>)
 8003c82:	400a      	ands	r2, r1
 8003c84:	f042 0220 	orr.w	r2, r2, #32
 8003c88:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8003c8a:	e7f3      	b.n	8003c74 <ADC_ConversionStop+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	0795      	lsls	r5, r2, #30
 8003c90:	d4ec      	bmi.n	8003c6c <ADC_ConversionStop+0xb8>
  MODIFY_REG(ADCx->CR,
 8003c92:	6899      	ldr	r1, [r3, #8]
 8003c94:	4a02      	ldr	r2, [pc, #8]	@ (8003ca0 <ADC_ConversionStop+0xec>)
 8003c96:	400a      	ands	r2, r1
 8003c98:	f042 0210 	orr.w	r2, r2, #16
 8003c9c:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c9e:	e7e5      	b.n	8003c6c <ADC_ConversionStop+0xb8>
 8003ca0:	7fffffc0 	.word	0x7fffffc0
 8003ca4:	000cdc00 	.word	0x000cdc00

08003ca8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ca8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	07d1      	lsls	r1, r2, #31
 8003cae:	d501      	bpl.n	8003cb4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cb0:	2000      	movs	r0, #0
}
 8003cb2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cb4:	6899      	ldr	r1, [r3, #8]
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <ADC_Enable+0x84>)
 8003cb8:	4211      	tst	r1, r2
{
 8003cba:	b570      	push	{r4, r5, r6, lr}
 8003cbc:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cbe:	d12a      	bne.n	8003d16 <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8003cc0:	6899      	ldr	r1, [r3, #8]
 8003cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d30 <ADC_Enable+0x88>)
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003ccc:	f7ff fc64 	bl	8003598 <HAL_GetTick>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cd0:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <ADC_Enable+0x8c>)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cd2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cd8:	06d2      	lsls	r2, r2, #27
 8003cda:	d002      	beq.n	8003ce2 <ADC_Enable+0x3a>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cdc:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <ADC_Enable+0x90>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d017      	beq.n	8003d12 <ADC_Enable+0x6a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	07d6      	lsls	r6, r2, #31
 8003ce6:	d414      	bmi.n	8003d12 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8003ce8:	4e11      	ldr	r6, [pc, #68]	@ (8003d30 <ADC_Enable+0x88>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	07d0      	lsls	r0, r2, #31
 8003cee:	d404      	bmi.n	8003cfa <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	4032      	ands	r2, r6
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cfa:	f7ff fc4d 	bl	8003598 <HAL_GetTick>
 8003cfe:	1b43      	subs	r3, r0, r5
 8003d00:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d02:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d04:	d902      	bls.n	8003d0c <ADC_Enable+0x64>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	07d1      	lsls	r1, r2, #31
 8003d0a:	d504      	bpl.n	8003d16 <ADC_Enable+0x6e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	07d2      	lsls	r2, r2, #31
 8003d10:	d5eb      	bpl.n	8003cea <ADC_Enable+0x42>
  return HAL_OK;
 8003d12:	2000      	movs	r0, #0
}
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8003d18:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1a:	f043 0310 	orr.w	r3, r3, #16
 8003d1e:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
 8003d2a:	bf00      	nop
 8003d2c:	8000003f 	.word	0x8000003f
 8003d30:	7fffffc0 	.word	0x7fffffc0
 8003d34:	40022300 	.word	0x40022300
 8003d38:	40022100 	.word	0x40022100

08003d3c <HAL_ADC_Start>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d3c:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_ADC_Start+0xc8>)
{
 8003d3e:	b570      	push	{r4, r5, r6, lr}
 8003d40:	689e      	ldr	r6, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d42:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d44:	689d      	ldr	r5, [r3, #8]
 8003d46:	f015 0504 	ands.w	r5, r5, #4
 8003d4a:	d13f      	bne.n	8003dcc <HAL_ADC_Start+0x90>
    __HAL_LOCK(hadc);
 8003d4c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003d50:	4604      	mov	r4, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d03a      	beq.n	8003dcc <HAL_ADC_Start+0x90>
 8003d56:	2301      	movs	r3, #1
 8003d58:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8003d5c:	f7ff ffa4 	bl	8003ca8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d135      	bne.n	8003dd0 <HAL_ADC_Start+0x94>
      ADC_STATE_CLR_SET(hadc->State,
 8003d64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d66:	f006 061f 	and.w	r6, r6, #31
 8003d6a:	4a27      	ldr	r2, [pc, #156]	@ (8003e08 <HAL_ADC_Start+0xcc>)
 8003d6c:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d6e:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d74:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d76:	4a25      	ldr	r2, [pc, #148]	@ (8003e0c <HAL_ADC_Start+0xd0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02c      	beq.n	8003dd6 <HAL_ADC_Start+0x9a>
 8003d7c:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d7e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d80:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003d84:	6562      	str	r2, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d86:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d8c:	d037      	beq.n	8003dfe <HAL_ADC_Start+0xc2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d8e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003d90:	f022 0206 	bic.w	r2, r2, #6
 8003d94:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d96:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d98:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d9a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003da4:	d01b      	beq.n	8003dde <HAL_ADC_Start+0xa2>
 8003da6:	f240 2221 	movw	r2, #545	@ 0x221
 8003daa:	40f2      	lsrs	r2, r6
 8003dac:	07d5      	lsls	r5, r2, #31
 8003dae:	d416      	bmi.n	8003dde <HAL_ADC_Start+0xa2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003db0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db6:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003db8:	68cb      	ldr	r3, [r1, #12]
 8003dba:	019b      	lsls	r3, r3, #6
 8003dbc:	d505      	bpl.n	8003dca <HAL_ADC_Start+0x8e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dbe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003dc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dc8:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8003dcc:	2002      	movs	r0, #2
}
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8003dd0:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dd6:	490e      	ldr	r1, [pc, #56]	@ (8003e10 <HAL_ADC_Start+0xd4>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd8:	2e00      	cmp	r6, #0
 8003dda:	d1d4      	bne.n	8003d86 <HAL_ADC_Start+0x4a>
 8003ddc:	e7cf      	b.n	8003d7e <HAL_ADC_Start+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	0192      	lsls	r2, r2, #6
 8003de2:	d505      	bpl.n	8003df0 <HAL_ADC_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003de6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003dea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dee:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	4a08      	ldr	r2, [pc, #32]	@ (8003e14 <HAL_ADC_Start+0xd8>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	f042 0204 	orr.w	r2, r2, #4
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 8003dfe:	65a2      	str	r2, [r4, #88]	@ 0x58
 8003e00:	e7c9      	b.n	8003d96 <HAL_ADC_Start+0x5a>
 8003e02:	bf00      	nop
 8003e04:	40022300 	.word	0x40022300
 8003e08:	fffff0fe 	.word	0xfffff0fe
 8003e0c:	40022100 	.word	0x40022100
 8003e10:	40022000 	.word	0x40022000
 8003e14:	7fffffc0 	.word	0x7fffffc0

08003e18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e18:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e1a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	0795      	lsls	r5, r2, #30
 8003e20:	d502      	bpl.n	8003e28 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e22:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e24:	2000      	movs	r0, #0
}
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	07d4      	lsls	r4, r2, #31
 8003e2c:	d5fa      	bpl.n	8003e24 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	4604      	mov	r4, r0
 8003e32:	f002 020d 	and.w	r2, r2, #13
 8003e36:	2a01      	cmp	r2, #1
 8003e38:	d009      	beq.n	8003e4e <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8003e3c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003e4c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003e4e:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e50:	2103      	movs	r1, #3
 8003e52:	4a0d      	ldr	r2, [pc, #52]	@ (8003e88 <ADC_Disable+0x70>)
 8003e54:	4002      	ands	r2, r0
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003e5e:	f7ff fb9b 	bl	8003598 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e62:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003e64:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	07d9      	lsls	r1, r3, #31
 8003e6a:	d403      	bmi.n	8003e74 <ADC_Disable+0x5c>
 8003e6c:	e7da      	b.n	8003e24 <ADC_Disable+0xc>
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	07db      	lsls	r3, r3, #31
 8003e72:	d5d7      	bpl.n	8003e24 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e74:	f7ff fb90 	bl	8003598 <HAL_GetTick>
 8003e78:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e7a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e7c:	2802      	cmp	r0, #2
 8003e7e:	d9f6      	bls.n	8003e6e <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	07d2      	lsls	r2, r2, #31
 8003e84:	d5f3      	bpl.n	8003e6e <ADC_Disable+0x56>
 8003e86:	e7d8      	b.n	8003e3a <ADC_Disable+0x22>
 8003e88:	7fffffc0 	.word	0x7fffffc0

08003e8c <HAL_ADC_DeInit>:
{
 8003e8c:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	f000 80a6 	beq.w	8003fe0 <HAL_ADC_DeInit+0x154>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003e94:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003e96:	4604      	mov	r4, r0
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003e98:	2103      	movs	r1, #3
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6543      	str	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ea0:	f7ff fe88 	bl	8003bb4 <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003ea4:	6823      	ldr	r3, [r4, #0]
  if (tmp_hal_status == HAL_OK)
 8003ea6:	4605      	mov	r5, r0
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003eae:	60da      	str	r2, [r3, #12]
  if (tmp_hal_status == HAL_OK)
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	f000 808c 	beq.w	8003fce <HAL_ADC_DeInit+0x142>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8003fec <HAL_ADC_DeInit+0x160>)
 8003eba:	400a      	ands	r2, r1
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003ebc:	f240 71ff 	movw	r1, #2047	@ 0x7ff
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003ec0:	605a      	str	r2, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8003ec2:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003ec4:	689a      	ldr	r2, [r3, #8]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003ec6:	494a      	ldr	r1, [pc, #296]	@ (8003ff0 <HAL_ADC_DeInit+0x164>)
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003ec8:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8003ecc:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003ed4:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8003edc:	60da      	str	r2, [r3, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003ee4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	4011      	ands	r1, r2
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003eea:	4a42      	ldr	r2, [pc, #264]	@ (8003ff4 <HAL_ADC_DeInit+0x168>)
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8003eec:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8003eee:	6959      	ldr	r1, [r3, #20]
 8003ef0:	f001 4140 	and.w	r1, r1, #3221225472	@ 0xc0000000
 8003ef4:	6159      	str	r1, [r3, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003ef6:	6999      	ldr	r1, [r3, #24]
 8003ef8:	f001 4178 	and.w	r1, r1, #4160749568	@ 0xf8000000
 8003efc:	6199      	str	r1, [r3, #24]
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8003efe:	6a19      	ldr	r1, [r3, #32]
 8003f00:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003f04:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8003f06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f08:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003f0c:	6259      	str	r1, [r3, #36]	@ 0x24
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8003f0e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003f12:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003f16:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8003f1a:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8003f1e:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003f22:	f8c3 10b4 	str.w	r1, [r3, #180]	@ 0xb4
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003f26:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8003f2a:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003f2e:	f8c3 10b8 	str.w	r1, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003f32:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 8003f36:	f001 417c 	and.w	r1, r1, #4227858432	@ 0xfc000000
 8003f3a:	f8c3 10bc 	str.w	r1, [r3, #188]	@ 0xbc
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003f3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f40:	400a      	ands	r2, r1
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003f42:	492d      	ldr	r1, [pc, #180]	@ (8003ff8 <HAL_ADC_DeInit+0x16c>)
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f48:	400a      	ands	r2, r1
 8003f4a:	635a      	str	r2, [r3, #52]	@ 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f4e:	400a      	ands	r2, r1
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003f50:	492a      	ldr	r1, [pc, #168]	@ (8003ffc <HAL_ADC_DeInit+0x170>)
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003f54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f56:	4011      	ands	r1, r2
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003f58:	2200      	movs	r2, #0
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003f5a:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003f5c:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8003f5e:	661a      	str	r2, [r3, #96]	@ 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003f60:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003f62:	665a      	str	r2, [r3, #100]	@ 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8003f64:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003f66:	669a      	str	r2, [r3, #104]	@ 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8003f68:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8003f6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8003f6c:	4924      	ldr	r1, [pc, #144]	@ (8004000 <HAL_ADC_DeInit+0x174>)
 8003f6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003f72:	400a      	ands	r2, r1
 8003f74:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003f78:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003f82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003f86:	400a      	ands	r2, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f88:	491e      	ldr	r1, [pc, #120]	@ (8004004 <HAL_ADC_DeInit+0x178>)
 8003f8a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8003f8e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003f92:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8003f96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8003f9a:	688b      	ldr	r3, [r1, #8]
 8003f9c:	f013 0f01 	tst.w	r3, #1
 8003fa0:	4b19      	ldr	r3, [pc, #100]	@ (8004008 <HAL_ADC_DeInit+0x17c>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	d008      	beq.n	8003fb8 <HAL_ADC_DeInit+0x12c>
  ADC_CLEAR_ERRORCODE(hadc);
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4628      	mov	r0, r5
  ADC_CLEAR_ERRORCODE(hadc);
 8003faa:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003fac:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hadc->State = HAL_ADC_STATE_RESET;
 8003fb0:	6563      	str	r3, [r4, #84]	@ 0x54
  hadc->InjectionConfig.ContextQueue = 0;
 8003fb2:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
}
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	07db      	lsls	r3, r3, #31
 8003fba:	d4f4      	bmi.n	8003fa6 <HAL_ADC_DeInit+0x11a>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003fbc:	4a13      	ldr	r2, [pc, #76]	@ (800400c <HAL_ADC_DeInit+0x180>)
    HAL_ADC_MspDeInit(hadc);
 8003fbe:	4620      	mov	r0, r4
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003fc0:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <HAL_ADC_DeInit+0x184>)
 8003fc2:	6891      	ldr	r1, [r2, #8]
 8003fc4:	400b      	ands	r3, r1
 8003fc6:	6093      	str	r3, [r2, #8]
    HAL_ADC_MspDeInit(hadc);
 8003fc8:	f7ff f984 	bl	80032d4 <HAL_ADC_MspDeInit>
 8003fcc:	e7eb      	b.n	8003fa6 <HAL_ADC_DeInit+0x11a>
    tmp_hal_status = ADC_Disable(hadc);
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f7ff ff22 	bl	8003e18 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	b930      	cbnz	r0, 8003fe6 <HAL_ADC_DeInit+0x15a>
      hadc->State = HAL_ADC_STATE_READY;
 8003fd8:	2201      	movs	r2, #1
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003fda:	6823      	ldr	r3, [r4, #0]
      hadc->State = HAL_ADC_STATE_READY;
 8003fdc:	6562      	str	r2, [r4, #84]	@ 0x54
 8003fde:	e76a      	b.n	8003eb6 <HAL_ADC_DeInit+0x2a>
    return HAL_ERROR;
 8003fe0:	2501      	movs	r5, #1
}
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	e765      	b.n	8003eb6 <HAL_ADC_DeInit+0x2a>
 8003fea:	bf00      	nop
 8003fec:	fffff800 	.word	0xfffff800
 8003ff0:	fc00f81c 	.word	0xfc00f81c
 8003ff4:	e0820830 	.word	0xe0820830
 8003ff8:	e0820820 	.word	0xe0820820
 8003ffc:	fffff820 	.word	0xfffff820
 8004000:	fff00000 	.word	0xfff00000
 8004004:	40022000 	.word	0x40022000
 8004008:	40022100 	.word	0x40022100
 800400c:	40022300 	.word	0x40022300
 8004010:	fe0030e0 	.word	0xfe0030e0

08004014 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004014:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8004018:	2b01      	cmp	r3, #1
 800401a:	d01b      	beq.n	8004054 <HAL_ADC_Stop+0x40>
 800401c:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800401e:	2103      	movs	r1, #3
{
 8004020:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8004022:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004026:	4604      	mov	r4, r0
 8004028:	f7ff fdc4 	bl	8003bb4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800402c:	b118      	cbz	r0, 8004036 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800402e:	2300      	movs	r3, #0
 8004030:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8004034:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004036:	4620      	mov	r0, r4
 8004038:	f7ff feee 	bl	8003e18 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800403c:	2800      	cmp	r0, #0
 800403e:	d1f6      	bne.n	800402e <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8004040:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004042:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_ADC_Stop+0x44>)
 8004044:	4013      	ands	r3, r2
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 800404c:	2300      	movs	r3, #0
 800404e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8004052:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8004054:	2002      	movs	r0, #2
}
 8004056:	4770      	bx	lr
 8004058:	ffffeefe 	.word	0xffffeefe

0800405c <ADC_ConfigureBoostMode>:
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800405c:	4b44      	ldr	r3, [pc, #272]	@ (8004170 <ADC_ConfigureBoostMode+0x114>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
{
 8004064:	b510      	push	{r4, lr}
 8004066:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004068:	d01b      	beq.n	80040a2 <ADC_ConfigureBoostMode+0x46>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800406a:	f005 fbb3 	bl	80097d4 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800406e:	6862      	ldr	r2, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8004070:	4603      	mov	r3, r0
    switch (hadc->Init.ClockPrescaler)
 8004072:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8004076:	d070      	beq.n	800415a <ADC_ConfigureBoostMode+0xfe>
 8004078:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 800407c:	d055      	beq.n	800412a <ADC_ConfigureBoostMode+0xce>
 800407e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004082:	d06a      	beq.n	800415a <ADC_ConfigureBoostMode+0xfe>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 8004084:	4a3b      	ldr	r2, [pc, #236]	@ (8004174 <ADC_ConfigureBoostMode+0x118>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
  }
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004086:	6821      	ldr	r1, [r4, #0]
  if (freq <= 6250000UL)
 8004088:	4293      	cmp	r3, r2
 800408a:	d920      	bls.n	80040ce <ADC_ConfigureBoostMode+0x72>
  else if (freq <= 12500000UL)
 800408c:	4a3a      	ldr	r2, [pc, #232]	@ (8004178 <ADC_ConfigureBoostMode+0x11c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d944      	bls.n	800411c <ADC_ConfigureBoostMode+0xc0>
  else if (freq <= 25000000UL)
 8004092:	4a3a      	ldr	r2, [pc, #232]	@ (800417c <ADC_ConfigureBoostMode+0x120>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d957      	bls.n	8004148 <ADC_ConfigureBoostMode+0xec>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004098:	688b      	ldr	r3, [r1, #8]
 800409a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800409e:	608b      	str	r3, [r1, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80040a0:	bd10      	pop	{r4, pc}
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80040a2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80040a6:	2100      	movs	r1, #0
 80040a8:	f006 fde6 	bl	800ac78 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80040ac:	6862      	ldr	r2, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80040ae:	4603      	mov	r3, r0
    switch (hadc->Init.ClockPrescaler)
 80040b0:	f5b2 1f10 	cmp.w	r2, #2359296	@ 0x240000
 80040b4:	d059      	beq.n	800416a <ADC_ConfigureBoostMode+0x10e>
 80040b6:	d90f      	bls.n	80040d8 <ADC_ConfigureBoostMode+0x7c>
 80040b8:	f5b2 1f20 	cmp.w	r2, #2621440	@ 0x280000
 80040bc:	d03b      	beq.n	8004136 <ADC_ConfigureBoostMode+0xda>
 80040be:	f5b2 1f30 	cmp.w	r2, #2883584	@ 0x2c0000
 80040c2:	d1df      	bne.n	8004084 <ADC_ConfigureBoostMode+0x28>
  if (freq <= 6250000UL)
 80040c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <ADC_ConfigureBoostMode+0x118>)
 80040c6:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
 80040ca:	d326      	bcc.n	800411a <ADC_ConfigureBoostMode+0xbe>
 80040cc:	6821      	ldr	r1, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80040ce:	688b      	ldr	r3, [r1, #8]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d4:	608b      	str	r3, [r1, #8]
}
 80040d6:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 80040d8:	f5b2 1fe0 	cmp.w	r2, #1835008	@ 0x1c0000
 80040dc:	d03b      	beq.n	8004156 <ADC_ConfigureBoostMode+0xfa>
 80040de:	d904      	bls.n	80040ea <ADC_ConfigureBoostMode+0x8e>
 80040e0:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 80040e4:	d1ce      	bne.n	8004084 <ADC_ConfigureBoostMode+0x28>
        freq /= 32UL;
 80040e6:	0943      	lsrs	r3, r0, #5
        break;
 80040e8:	e7cc      	b.n	8004084 <ADC_ConfigureBoostMode+0x28>
    switch (hadc->Init.ClockPrescaler)
 80040ea:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80040ee:	d006      	beq.n	80040fe <ADC_ConfigureBoostMode+0xa2>
 80040f0:	d90a      	bls.n	8004108 <ADC_ConfigureBoostMode+0xac>
 80040f2:	f5b2 1fa0 	cmp.w	r2, #1310720	@ 0x140000
 80040f6:	d002      	beq.n	80040fe <ADC_ConfigureBoostMode+0xa2>
 80040f8:	f5b2 1fc0 	cmp.w	r2, #1572864	@ 0x180000
 80040fc:	d1c2      	bne.n	8004084 <ADC_ConfigureBoostMode+0x28>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040fe:	0c92      	lsrs	r2, r2, #18
 8004100:	0052      	lsls	r2, r2, #1
 8004102:	fbb3 f3f2 	udiv	r3, r3, r2
        break;
 8004106:	e7bd      	b.n	8004084 <ADC_ConfigureBoostMode+0x28>
    switch (hadc->Init.ClockPrescaler)
 8004108:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 800410c:	d0f7      	beq.n	80040fe <ADC_ConfigureBoostMode+0xa2>
 800410e:	f422 2100 	bic.w	r1, r2, #524288	@ 0x80000
 8004112:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8004116:	d0f2      	beq.n	80040fe <ADC_ConfigureBoostMode+0xa2>
 8004118:	e7b4      	b.n	8004084 <ADC_ConfigureBoostMode+0x28>
 800411a:	6821      	ldr	r1, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800411c:	688b      	ldr	r3, [r1, #8]
 800411e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004126:	608b      	str	r3, [r1, #8]
}
 8004128:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 800412a:	0883      	lsrs	r3, r0, #2
  if (freq <= 6250000UL)
 800412c:	4a11      	ldr	r2, [pc, #68]	@ (8004174 <ADC_ConfigureBoostMode+0x118>)
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800412e:	6821      	ldr	r1, [r4, #0]
  if (freq <= 6250000UL)
 8004130:	4293      	cmp	r3, r2
 8004132:	d9cc      	bls.n	80040ce <ADC_ConfigureBoostMode+0x72>
 8004134:	e7aa      	b.n	800408c <ADC_ConfigureBoostMode+0x30>
 8004136:	4a0f      	ldr	r2, [pc, #60]	@ (8004174 <ADC_ConfigureBoostMode+0x118>)
        freq /= 128UL;
 8004138:	09c1      	lsrs	r1, r0, #7
  if (freq <= 6250000UL)
 800413a:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
 800413e:	d2c5      	bcs.n	80040cc <ADC_ConfigureBoostMode+0x70>
  else if (freq <= 12500000UL)
 8004140:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <ADC_ConfigureBoostMode+0x11c>)
 8004142:	4299      	cmp	r1, r3
 8004144:	d9e9      	bls.n	800411a <ADC_ConfigureBoostMode+0xbe>
 8004146:	6821      	ldr	r1, [r4, #0]
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004148:	688b      	ldr	r3, [r1, #8]
 800414a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004152:	608b      	str	r3, [r1, #8]
}
 8004154:	bd10      	pop	{r4, pc}
        freq /= 16UL;
 8004156:	0903      	lsrs	r3, r0, #4
        break;
 8004158:	e794      	b.n	8004084 <ADC_ConfigureBoostMode+0x28>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800415a:	0c12      	lsrs	r2, r2, #16
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800415c:	6821      	ldr	r1, [r4, #0]
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800415e:	fbb3 f3f2 	udiv	r3, r3, r2
  if (freq <= 6250000UL)
 8004162:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <ADC_ConfigureBoostMode+0x118>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d9b2      	bls.n	80040ce <ADC_ConfigureBoostMode+0x72>
 8004168:	e790      	b.n	800408c <ADC_ConfigureBoostMode+0x30>
        freq /= 64UL;
 800416a:	0983      	lsrs	r3, r0, #6
        break;
 800416c:	e78a      	b.n	8004084 <ADC_ConfigureBoostMode+0x28>
 800416e:	bf00      	nop
 8004170:	40022300 	.word	0x40022300
 8004174:	00bebc21 	.word	0x00bebc21
 8004178:	017d7841 	.word	0x017d7841
 800417c:	02faf081 	.word	0x02faf081

08004180 <HAL_ADC_Init>:
{
 8004180:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8004182:	2300      	movs	r3, #0
{
 8004184:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8004186:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8004188:	2800      	cmp	r0, #0
 800418a:	f000 8098 	beq.w	80042be <HAL_ADC_Init+0x13e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800418e:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8004190:	4604      	mov	r4, r0
 8004192:	2d00      	cmp	r5, #0
 8004194:	f000 8099 	beq.w	80042ca <HAL_ADC_Init+0x14a>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004198:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800419a:	6893      	ldr	r3, [r2, #8]
 800419c:	0098      	lsls	r0, r3, #2
 800419e:	d503      	bpl.n	80041a8 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041a0:	6891      	ldr	r1, [r2, #8]
 80041a2:	4b60      	ldr	r3, [pc, #384]	@ (8004324 <HAL_ADC_Init+0x1a4>)
 80041a4:	400b      	ands	r3, r1
 80041a6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041a8:	6893      	ldr	r3, [r2, #8]
 80041aa:	00d9      	lsls	r1, r3, #3
 80041ac:	d416      	bmi.n	80041dc <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ae:	4b5e      	ldr	r3, [pc, #376]	@ (8004328 <HAL_ADC_Init+0x1a8>)
 80041b0:	495e      	ldr	r1, [pc, #376]	@ (800432c <HAL_ADC_Init+0x1ac>)
 80041b2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80041b4:	6890      	ldr	r0, [r2, #8]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	fba1 1303 	umull	r1, r3, r1, r3
 80041bc:	495c      	ldr	r1, [pc, #368]	@ (8004330 <HAL_ADC_Init+0x1b0>)
 80041be:	099b      	lsrs	r3, r3, #6
 80041c0:	4001      	ands	r1, r0
 80041c2:	3301      	adds	r3, #1
 80041c4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80041c8:	6091      	str	r1, [r2, #8]
 80041ca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80041cc:	9b01      	ldr	r3, [sp, #4]
 80041ce:	b12b      	cbz	r3, 80041dc <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80041d6:	9b01      	ldr	r3, [sp, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f9      	bne.n	80041d0 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041dc:	6893      	ldr	r3, [r2, #8]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	d471      	bmi.n	80042c6 <HAL_ADC_Init+0x146>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80041e4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	f043 0310 	orr.w	r3, r3, #16
 80041ea:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041ee:	432b      	orrs	r3, r5
 80041f0:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041f2:	6893      	ldr	r3, [r2, #8]
 80041f4:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80041fa:	d15c      	bne.n	80042b6 <HAL_ADC_Init+0x136>
 80041fc:	06de      	lsls	r6, r3, #27
 80041fe:	d45a      	bmi.n	80042b6 <HAL_ADC_Init+0x136>
    ADC_STATE_CLR_SET(hadc->State,
 8004200:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004202:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004206:	f043 0302 	orr.w	r3, r3, #2
 800420a:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800420c:	6893      	ldr	r3, [r2, #8]
 800420e:	07d8      	lsls	r0, r3, #31
 8004210:	d408      	bmi.n	8004224 <HAL_ADC_Init+0xa4>
 8004212:	4b48      	ldr	r3, [pc, #288]	@ (8004334 <HAL_ADC_Init+0x1b4>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f013 0f01 	tst.w	r3, #1
 800421a:	4b47      	ldr	r3, [pc, #284]	@ (8004338 <HAL_ADC_Init+0x1b8>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	d101      	bne.n	8004224 <HAL_ADC_Init+0xa4>
 8004220:	07d9      	lsls	r1, r3, #31
 8004222:	d565      	bpl.n	80042f0 <HAL_ADC_Init+0x170>
                hadc->Init.Overrun                                                    |
 8004224:	68a0      	ldr	r0, [r4, #8]
 8004226:	6b23      	ldr	r3, [r4, #48]	@ 0x30
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004228:	7f21      	ldrb	r1, [r4, #28]
                hadc->Init.Overrun                                                    |
 800422a:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800422c:	7d60      	ldrb	r0, [r4, #21]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800422e:	2901      	cmp	r1, #1
                hadc->Init.Overrun                                                    |
 8004230:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004234:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004238:	d055      	beq.n	80042e6 <HAL_ADC_Init+0x166>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800423a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800423c:	b121      	cbz	r1, 8004248 <HAL_ADC_Init+0xc8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800423e:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004242:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004244:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004246:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004248:	68d0      	ldr	r0, [r2, #12]
 800424a:	493c      	ldr	r1, [pc, #240]	@ (800433c <HAL_ADC_Init+0x1bc>)
 800424c:	4001      	ands	r1, r0
 800424e:	4319      	orrs	r1, r3
 8004250:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004252:	6893      	ldr	r3, [r2, #8]
 8004254:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004258:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800425a:	d11c      	bne.n	8004296 <HAL_ADC_Init+0x116>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	d41a      	bmi.n	8004296 <HAL_ADC_Init+0x116>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004260:	68d0      	ldr	r0, [r2, #12]
 8004262:	4b37      	ldr	r3, [pc, #220]	@ (8004340 <HAL_ADC_Init+0x1c0>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004264:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004266:	4003      	ands	r3, r0
 8004268:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 800426c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800426e:	430b      	orrs	r3, r1
 8004270:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8004272:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8004276:	2b01      	cmp	r3, #1
 8004278:	d042      	beq.n	8004300 <HAL_ADC_Init+0x180>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800427a:	6913      	ldr	r3, [r2, #16]
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004282:	6913      	ldr	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8004284:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004286:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004288:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800428c:	430b      	orrs	r3, r1
 800428e:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8004290:	f7ff fee4 	bl	800405c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004294:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d01c      	beq.n	80042d6 <HAL_ADC_Init+0x156>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800429c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800429e:	f023 030f 	bic.w	r3, r3, #15
 80042a2:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80042a6:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042a8:	f023 0303 	bic.w	r3, r3, #3
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80042b2:	b002      	add	sp, #8
 80042b4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80042b8:	f043 0310 	orr.w	r3, r3, #16
 80042bc:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80042be:	2501      	movs	r5, #1
}
 80042c0:	4628      	mov	r0, r5
 80042c2:	b002      	add	sp, #8
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c6:	2500      	movs	r5, #0
 80042c8:	e793      	b.n	80041f2 <HAL_ADC_Init+0x72>
    HAL_ADC_MspInit(hadc);
 80042ca:	f7fe ffa9 	bl	8003220 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80042ce:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80042d0:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80042d4:	e760      	b.n	8004198 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042d6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80042d8:	69a3      	ldr	r3, [r4, #24]
 80042da:	f021 010f 	bic.w	r1, r1, #15
 80042de:	3b01      	subs	r3, #1
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e4:	e7de      	b.n	80042a4 <HAL_ADC_Init+0x124>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042e6:	6a21      	ldr	r1, [r4, #32]
 80042e8:	3901      	subs	r1, #1
 80042ea:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80042ee:	e7a4      	b.n	800423a <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042f0:	4914      	ldr	r1, [pc, #80]	@ (8004344 <HAL_ADC_Init+0x1c4>)
 80042f2:	6860      	ldr	r0, [r4, #4]
 80042f4:	688b      	ldr	r3, [r1, #8]
 80042f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80042fa:	4303      	orrs	r3, r0
 80042fc:	608b      	str	r3, [r1, #8]
}
 80042fe:	e791      	b.n	8004224 <HAL_ADC_Init+0xa4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004300:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8004304:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8004306:	3901      	subs	r1, #1
 8004308:	6910      	ldr	r0, [r2, #16]
 800430a:	4333      	orrs	r3, r6
 800430c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004310:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004312:	430b      	orrs	r3, r1
 8004314:	490c      	ldr	r1, [pc, #48]	@ (8004348 <HAL_ADC_Init+0x1c8>)
 8004316:	4001      	ands	r1, r0
 8004318:	430b      	orrs	r3, r1
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6113      	str	r3, [r2, #16]
 8004320:	e7af      	b.n	8004282 <HAL_ADC_Init+0x102>
 8004322:	bf00      	nop
 8004324:	5fffffc0 	.word	0x5fffffc0
 8004328:	2400000c 	.word	0x2400000c
 800432c:	053e2d63 	.word	0x053e2d63
 8004330:	6fffffc0 	.word	0x6fffffc0
 8004334:	40022000 	.word	0x40022000
 8004338:	40022100 	.word	0x40022100
 800433c:	fff0c003 	.word	0xfff0c003
 8004340:	ffffbffc 	.word	0xffffbffc
 8004344:	40022300 	.word	0x40022300
 8004348:	fc00f81e 	.word	0xfc00f81e

0800434c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800434e:	2300      	movs	r3, #0
{
 8004350:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8004352:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004354:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8004358:	2b01      	cmp	r3, #1
 800435a:	d040      	beq.n	80043de <HAL_ADCEx_Calibration_Start+0x92>
 800435c:	2301      	movs	r3, #1
 800435e:	4604      	mov	r4, r0
 8004360:	460e      	mov	r6, r1
 8004362:	4615      	mov	r5, r2
 8004364:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004368:	f7ff fd56 	bl	8003e18 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800436c:	b9e8      	cbnz	r0, 80043aa <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436e:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8004370:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 8004374:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <HAL_ADCEx_Calibration_Start+0x98>)
 8004376:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800437a:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800437c:	403b      	ands	r3, r7
 800437e:	f043 0302 	orr.w	r3, r3, #2
 8004382:	6563      	str	r3, [r4, #84]	@ 0x54
 8004384:	4b18      	ldr	r3, [pc, #96]	@ (80043e8 <HAL_ADCEx_Calibration_Start+0x9c>)
 8004386:	68ae      	ldr	r6, [r5, #8]
 8004388:	4033      	ands	r3, r6
 800438a:	4313      	orrs	r3, r2
 800438c:	430b      	orrs	r3, r1
 800438e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004392:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004394:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004396:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <HAL_ADCEx_Calibration_Start+0xa0>)
 8004398:	2b00      	cmp	r3, #0
 800439a:	db0f      	blt.n	80043bc <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800439c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6563      	str	r3, [r4, #84]	@ 0x54
 80043a8:	e003      	b.n	80043b2 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80043ac:	f043 0310 	orr.w	r3, r3, #16
 80043b0:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b2:	2300      	movs	r3, #0
 80043b4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80043b8:	b003      	add	sp, #12
 80043ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043c2:	9b01      	ldr	r3, [sp, #4]
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d3e5      	bcc.n	8004394 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80043c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 80043ca:	2200      	movs	r2, #0
        return HAL_ERROR;
 80043cc:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80043ce:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80043d2:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80043d6:	f043 0310 	orr.w	r3, r3, #16
 80043da:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80043dc:	e7ec      	b.n	80043b8 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 80043de:	2002      	movs	r0, #2
}
 80043e0:	b003      	add	sp, #12
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	ffffeefd 	.word	0xffffeefd
 80043e8:	3ffeffc0 	.word	0x3ffeffc0
 80043ec:	25c3f800 	.word	0x25c3f800

080043f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043f0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043f2:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 80043f6:	b09a      	sub	sp, #104	@ 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043f8:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80043fa:	2a01      	cmp	r2, #1
 80043fc:	d03c      	beq.n	8004478 <HAL_ADCEx_MultiModeConfigChannel+0x88>
 80043fe:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004400:	4d28      	ldr	r5, [pc, #160]	@ (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004402:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004404:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004406:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004408:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800440a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 800440c:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004410:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004412:	d008      	beq.n	8004426 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004414:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800441a:	f041 0120 	orr.w	r1, r1, #32
 800441e:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004420:	b01a      	add	sp, #104	@ 0x68
 8004422:	bcf0      	pop	{r4, r5, r6, r7}
 8004424:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004426:	4a20      	ldr	r2, [pc, #128]	@ (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004428:	6890      	ldr	r0, [r2, #8]
 800442a:	0740      	lsls	r0, r0, #29
 800442c:	d50b      	bpl.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800442e:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004430:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8004432:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004434:	f042 0220 	orr.w	r2, r2, #32
 8004438:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8004440:	b01a      	add	sp, #104	@ 0x68
 8004442:	bcf0      	pop	{r4, r5, r6, r7}
 8004444:	4770      	bx	lr
 8004446:	68a0      	ldr	r0, [r4, #8]
 8004448:	0745      	lsls	r5, r0, #29
 800444a:	d4f1      	bmi.n	8004430 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800444c:	b1c6      	cbz	r6, 8004480 <HAL_ADCEx_MultiModeConfigChannel+0x90>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800444e:	4f17      	ldr	r7, [pc, #92]	@ (80044ac <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004450:	684d      	ldr	r5, [r1, #4]
 8004452:	68b8      	ldr	r0, [r7, #8]
 8004454:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8004458:	4328      	orrs	r0, r5
 800445a:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800445c:	68a0      	ldr	r0, [r4, #8]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	07c0      	lsls	r0, r0, #31
 8004462:	d41c      	bmi.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004464:	07d2      	lsls	r2, r2, #31
 8004466:	d41a      	bmi.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0xae>
        MODIFY_REG(tmpADC_Common->CCR,
 8004468:	688a      	ldr	r2, [r1, #8]
 800446a:	68b8      	ldr	r0, [r7, #8]
 800446c:	4910      	ldr	r1, [pc, #64]	@ (80044b0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800446e:	4332      	orrs	r2, r6
 8004470:	4001      	ands	r1, r0
 8004472:	430a      	orrs	r2, r1
 8004474:	60ba      	str	r2, [r7, #8]
 8004476:	e012      	b.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8004478:	2002      	movs	r0, #2
}
 800447a:	b01a      	add	sp, #104	@ 0x68
 800447c:	bcf0      	pop	{r4, r5, r6, r7}
 800447e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004480:	480a      	ldr	r0, [pc, #40]	@ (80044ac <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004482:	6881      	ldr	r1, [r0, #8]
 8004484:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8004488:	6081      	str	r1, [r0, #8]
 800448a:	68a1      	ldr	r1, [r4, #8]
 800448c:	6892      	ldr	r2, [r2, #8]
 800448e:	07cd      	lsls	r5, r1, #31
 8004490:	d405      	bmi.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004492:	07d4      	lsls	r4, r2, #31
 8004494:	d403      	bmi.n	800449e <HAL_ADCEx_MultiModeConfigChannel+0xae>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004496:	6881      	ldr	r1, [r0, #8]
 8004498:	4a05      	ldr	r2, [pc, #20]	@ (80044b0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800449a:	400a      	ands	r2, r1
 800449c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800449e:	2000      	movs	r0, #0
 80044a0:	e7cb      	b.n	800443a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80044a2:	bf00      	nop
 80044a4:	40022000 	.word	0x40022000
 80044a8:	40022100 	.word	0x40022100
 80044ac:	40022300 	.word	0x40022300
 80044b0:	fffff0e0 	.word	0xfffff0e0

080044b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4906      	ldr	r1, [pc, #24]	@ (80044d0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b6:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ba:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044be:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c0:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80044ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80044cc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00
 80044d4:	05fa0000 	.word	0x05fa0000

080044d8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004544 <HAL_NVIC_SetPriority+0x6c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ea:	f1be 0f04 	cmp.w	lr, #4
 80044ee:	bf28      	it	cs
 80044f0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f4:	f1bc 0f06 	cmp.w	ip, #6
 80044f8:	d91a      	bls.n	8004530 <HAL_NVIC_SetPriority+0x58>
 80044fa:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004502:	fa03 f30c 	lsl.w	r3, r3, ip
 8004506:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800450e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004510:	fa03 f30e 	lsl.w	r3, r3, lr
 8004514:	ea21 0303 	bic.w	r3, r1, r3
 8004518:	fa03 f30c 	lsl.w	r3, r3, ip
 800451c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004520:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004524:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004526:	db06      	blt.n	8004536 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	4a07      	ldr	r2, [pc, #28]	@ (8004548 <HAL_NVIC_SetPriority+0x70>)
 800452a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800452c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004530:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004532:	4694      	mov	ip, r2
 8004534:	e7e9      	b.n	800450a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004536:	f000 000f 	and.w	r0, r0, #15
 800453a:	4a04      	ldr	r2, [pc, #16]	@ (800454c <HAL_NVIC_SetPriority+0x74>)
 800453c:	5413      	strb	r3, [r2, r0]
 800453e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004542:	bf00      	nop
 8004544:	e000ed00 	.word	0xe000ed00
 8004548:	e000e400 	.word	0xe000e400
 800454c:	e000ed14 	.word	0xe000ed14

08004550 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004550:	2800      	cmp	r0, #0
 8004552:	db07      	blt.n	8004564 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004554:	2301      	movs	r3, #1
 8004556:	f000 011f 	and.w	r1, r0, #31
 800455a:	4a03      	ldr	r2, [pc, #12]	@ (8004568 <HAL_NVIC_EnableIRQ+0x18>)
 800455c:	0940      	lsrs	r0, r0, #5
 800455e:	408b      	lsls	r3, r1
 8004560:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000e100 	.word	0xe000e100

0800456c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800456c:	2800      	cmp	r0, #0
 800456e:	db0c      	blt.n	800458a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004570:	0943      	lsrs	r3, r0, #5
 8004572:	2201      	movs	r2, #1
 8004574:	f000 001f 	and.w	r0, r0, #31
 8004578:	4904      	ldr	r1, [pc, #16]	@ (800458c <HAL_NVIC_DisableIRQ+0x20>)
 800457a:	3320      	adds	r3, #32
 800457c:	4082      	lsls	r2, r0
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004582:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004586:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100

08004590 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8004590:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004594:	4905      	ldr	r1, [pc, #20]	@ (80045ac <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004596:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004598:	68ca      	ldr	r2, [r1, #12]
 800459a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800459e:	4313      	orrs	r3, r2
 80045a0:	60cb      	str	r3, [r1, #12]
 80045a2:	f3bf 8f4f 	dsb	sy
    __NOP();
 80045a6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80045a8:	e7fd      	b.n	80045a6 <HAL_NVIC_SystemReset+0x16>
 80045aa:	bf00      	nop
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	05fa0004 	.word	0x05fa0004

080045b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b4:	1e43      	subs	r3, r0, #1
 80045b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ba:	d301      	bcc.n	80045c0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80045be:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c6:	4905      	ldr	r1, [pc, #20]	@ (80045dc <HAL_SYSTICK_Config+0x28>)
 80045c8:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045cc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ce:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d0:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80045e0:	2800      	cmp	r0, #0
 80045e2:	db08      	blt.n	80045f6 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045e4:	0943      	lsrs	r3, r0, #5
 80045e6:	2201      	movs	r2, #1
 80045e8:	f000 001f 	and.w	r0, r0, #31
 80045ec:	4902      	ldr	r1, [pc, #8]	@ (80045f8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80045ee:	3360      	adds	r3, #96	@ 0x60
 80045f0:	4082      	lsls	r2, r0
 80045f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100

080045fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045fc:	4936      	ldr	r1, [pc, #216]	@ (80046d8 <DMA_CalcBaseAndBitshift+0xdc>)
{
 80045fe:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004600:	6803      	ldr	r3, [r0, #0]
 8004602:	428b      	cmp	r3, r1
 8004604:	d033      	beq.n	800466e <DMA_CalcBaseAndBitshift+0x72>
 8004606:	3118      	adds	r1, #24
 8004608:	1a59      	subs	r1, r3, r1
 800460a:	fab1 f181 	clz	r1, r1
 800460e:	0949      	lsrs	r1, r1, #5
 8004610:	bb69      	cbnz	r1, 800466e <DMA_CalcBaseAndBitshift+0x72>
 8004612:	4832      	ldr	r0, [pc, #200]	@ (80046dc <DMA_CalcBaseAndBitshift+0xe0>)
 8004614:	4283      	cmp	r3, r0
 8004616:	d03e      	beq.n	8004696 <DMA_CalcBaseAndBitshift+0x9a>
 8004618:	3018      	adds	r0, #24
 800461a:	4283      	cmp	r3, r0
 800461c:	d03e      	beq.n	800469c <DMA_CalcBaseAndBitshift+0xa0>
 800461e:	3018      	adds	r0, #24
 8004620:	4283      	cmp	r3, r0
 8004622:	d034      	beq.n	800468e <DMA_CalcBaseAndBitshift+0x92>
 8004624:	3018      	adds	r0, #24
 8004626:	4283      	cmp	r3, r0
 8004628:	d03b      	beq.n	80046a2 <DMA_CalcBaseAndBitshift+0xa6>
 800462a:	3018      	adds	r0, #24
 800462c:	4283      	cmp	r3, r0
 800462e:	d03e      	beq.n	80046ae <DMA_CalcBaseAndBitshift+0xb2>
 8004630:	3018      	adds	r0, #24
 8004632:	4283      	cmp	r3, r0
 8004634:	d02a      	beq.n	800468c <DMA_CalcBaseAndBitshift+0x90>
 8004636:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800463a:	4283      	cmp	r3, r0
 800463c:	d035      	beq.n	80046aa <DMA_CalcBaseAndBitshift+0xae>
 800463e:	4928      	ldr	r1, [pc, #160]	@ (80046e0 <DMA_CalcBaseAndBitshift+0xe4>)
 8004640:	428b      	cmp	r3, r1
 8004642:	d031      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xac>
 8004644:	3118      	adds	r1, #24
 8004646:	428b      	cmp	r3, r1
 8004648:	d034      	beq.n	80046b4 <DMA_CalcBaseAndBitshift+0xb8>
 800464a:	3118      	adds	r1, #24
 800464c:	428b      	cmp	r3, r1
 800464e:	d034      	beq.n	80046ba <DMA_CalcBaseAndBitshift+0xbe>
 8004650:	3118      	adds	r1, #24
 8004652:	428b      	cmp	r3, r1
 8004654:	d034      	beq.n	80046c0 <DMA_CalcBaseAndBitshift+0xc4>
 8004656:	3118      	adds	r1, #24
 8004658:	428b      	cmp	r3, r1
 800465a:	d034      	beq.n	80046c6 <DMA_CalcBaseAndBitshift+0xca>
 800465c:	3118      	adds	r1, #24
 800465e:	428b      	cmp	r3, r1
 8004660:	d034      	beq.n	80046cc <DMA_CalcBaseAndBitshift+0xd0>
 8004662:	3118      	adds	r1, #24
 8004664:	428b      	cmp	r3, r1
 8004666:	d034      	beq.n	80046d2 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004668:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 800466c:	e011      	b.n	8004692 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800466e:	b2db      	uxtb	r3, r3
 8004670:	491c      	ldr	r1, [pc, #112]	@ (80046e4 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004672:	481d      	ldr	r0, [pc, #116]	@ (80046e8 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004674:	3b10      	subs	r3, #16
 8004676:	fba1 1303 	umull	r1, r3, r1, r3
{
 800467a:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800467c:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800467e:	4c1b      	ldr	r4, [pc, #108]	@ (80046ec <DMA_CalcBaseAndBitshift+0xf0>)
 8004680:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8004682:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004686:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 800468a:	4770      	bx	lr
 800468c:	2116      	movs	r1, #22
 800468e:	4818      	ldr	r0, [pc, #96]	@ (80046f0 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004690:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004692:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8004694:	4770      	bx	lr
 8004696:	2110      	movs	r1, #16
 8004698:	4813      	ldr	r0, [pc, #76]	@ (80046e8 <DMA_CalcBaseAndBitshift+0xec>)
 800469a:	e7f9      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 800469c:	2116      	movs	r1, #22
 800469e:	4812      	ldr	r0, [pc, #72]	@ (80046e8 <DMA_CalcBaseAndBitshift+0xec>)
 80046a0:	e7f6      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046a2:	2106      	movs	r1, #6
 80046a4:	4812      	ldr	r0, [pc, #72]	@ (80046f0 <DMA_CalcBaseAndBitshift+0xf4>)
 80046a6:	e7f3      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046a8:	2106      	movs	r1, #6
 80046aa:	4812      	ldr	r0, [pc, #72]	@ (80046f4 <DMA_CalcBaseAndBitshift+0xf8>)
 80046ac:	e7f0      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046ae:	2110      	movs	r1, #16
 80046b0:	480f      	ldr	r0, [pc, #60]	@ (80046f0 <DMA_CalcBaseAndBitshift+0xf4>)
 80046b2:	e7ed      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046b4:	2110      	movs	r1, #16
 80046b6:	480f      	ldr	r0, [pc, #60]	@ (80046f4 <DMA_CalcBaseAndBitshift+0xf8>)
 80046b8:	e7ea      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046ba:	2116      	movs	r1, #22
 80046bc:	480d      	ldr	r0, [pc, #52]	@ (80046f4 <DMA_CalcBaseAndBitshift+0xf8>)
 80046be:	e7e7      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046c0:	2100      	movs	r1, #0
 80046c2:	480d      	ldr	r0, [pc, #52]	@ (80046f8 <DMA_CalcBaseAndBitshift+0xfc>)
 80046c4:	e7e4      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046c6:	2106      	movs	r1, #6
 80046c8:	480b      	ldr	r0, [pc, #44]	@ (80046f8 <DMA_CalcBaseAndBitshift+0xfc>)
 80046ca:	e7e1      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046cc:	2110      	movs	r1, #16
 80046ce:	480a      	ldr	r0, [pc, #40]	@ (80046f8 <DMA_CalcBaseAndBitshift+0xfc>)
 80046d0:	e7de      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046d2:	2116      	movs	r1, #22
 80046d4:	4808      	ldr	r0, [pc, #32]	@ (80046f8 <DMA_CalcBaseAndBitshift+0xfc>)
 80046d6:	e7db      	b.n	8004690 <DMA_CalcBaseAndBitshift+0x94>
 80046d8:	40020010 	.word	0x40020010
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020428 	.word	0x40020428
 80046e4:	aaaaaaab 	.word	0xaaaaaaab
 80046e8:	40020000 	.word	0x40020000
 80046ec:	08010578 	.word	0x08010578
 80046f0:	40020004 	.word	0x40020004
 80046f4:	40020400 	.word	0x40020400
 80046f8:	40020404 	.word	0x40020404

080046fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046fc:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046fe:	4b27      	ldr	r3, [pc, #156]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004700:	4927      	ldr	r1, [pc, #156]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8004702:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004704:	4d27      	ldr	r5, [pc, #156]	@ (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004706:	4c28      	ldr	r4, [pc, #160]	@ (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004708:	42aa      	cmp	r2, r5
 800470a:	bf18      	it	ne
 800470c:	429a      	cmpne	r2, r3
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	428a      	cmp	r2, r1
 8004716:	bf08      	it	eq
 8004718:	f043 0301 	orreq.w	r3, r3, #1
 800471c:	3128      	adds	r1, #40	@ 0x28
 800471e:	42a2      	cmp	r2, r4
 8004720:	bf08      	it	eq
 8004722:	f043 0301 	orreq.w	r3, r3, #1
 8004726:	3428      	adds	r4, #40	@ 0x28
 8004728:	428a      	cmp	r2, r1
 800472a:	bf08      	it	eq
 800472c:	f043 0301 	orreq.w	r3, r3, #1
 8004730:	3128      	adds	r1, #40	@ 0x28
 8004732:	42a2      	cmp	r2, r4
 8004734:	bf08      	it	eq
 8004736:	f043 0301 	orreq.w	r3, r3, #1
 800473a:	428a      	cmp	r2, r1
 800473c:	bf08      	it	eq
 800473e:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004742:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004744:	b913      	cbnz	r3, 800474c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8004746:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8004748:	429a      	cmp	r2, r3
 800474a:	d112      	bne.n	8004772 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800474c:	f1a1 0308 	sub.w	r3, r1, #8
 8004750:	4917      	ldr	r1, [pc, #92]	@ (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004754:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004758:	2101      	movs	r1, #1
 800475a:	4c17      	ldr	r4, [pc, #92]	@ (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800475c:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004760:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004764:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004766:	4099      	lsls	r1, r3
 8004768:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800476a:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800476e:	bc30      	pop	{r4, r5}
 8004770:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004772:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004776:	4911      	ldr	r1, [pc, #68]	@ (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004778:	4c11      	ldr	r4, [pc, #68]	@ (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800477a:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800477c:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004780:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004782:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004786:	d800      	bhi.n	800478a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8004788:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800478a:	4a0e      	ldr	r2, [pc, #56]	@ (80047c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800478c:	f003 041f 	and.w	r4, r3, #31
 8004790:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004792:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004794:	40a1      	lsls	r1, r4
 8004796:	4c0c      	ldr	r4, [pc, #48]	@ (80047c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004798:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800479a:	e7e5      	b.n	8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 800479c:	58025408 	.word	0x58025408
 80047a0:	58025430 	.word	0x58025430
 80047a4:	5802541c 	.word	0x5802541c
 80047a8:	58025444 	.word	0x58025444
 80047ac:	58025494 	.word	0x58025494
 80047b0:	cccccccd 	.word	0xcccccccd
 80047b4:	16009600 	.word	0x16009600
 80047b8:	58025880 	.word	0x58025880
 80047bc:	bffdfbf0 	.word	0xbffdfbf0
 80047c0:	aaaaaaab 	.word	0xaaaaaaab
 80047c4:	10008200 	.word	0x10008200
 80047c8:	40020880 	.word	0x40020880

080047cc <HAL_DMA_Init>:
{
 80047cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	4605      	mov	r5, r0
 80047d2:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80047d4:	f7fe fee0 	bl	8003598 <HAL_GetTick>
  if(hdma == NULL)
 80047d8:	2d00      	cmp	r5, #0
 80047da:	f000 8237 	beq.w	8004c4c <HAL_DMA_Init+0x480>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047de:	4e8e      	ldr	r6, [pc, #568]	@ (8004a18 <HAL_DMA_Init+0x24c>)
 80047e0:	4607      	mov	r7, r0
 80047e2:	682c      	ldr	r4, [r5, #0]
 80047e4:	4b8d      	ldr	r3, [pc, #564]	@ (8004a1c <HAL_DMA_Init+0x250>)
 80047e6:	429c      	cmp	r4, r3
 80047e8:	bf18      	it	ne
 80047ea:	42b4      	cmpne	r4, r6
 80047ec:	bf0c      	ite	eq
 80047ee:	2601      	moveq	r6, #1
 80047f0:	2600      	movne	r6, #0
 80047f2:	f040 8129 	bne.w	8004a48 <HAL_DMA_Init+0x27c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80047fc:	2300      	movs	r3, #0
 80047fe:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	e006      	b.n	800481a <HAL_DMA_Init+0x4e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800480c:	f7fe fec4 	bl	8003598 <HAL_GetTick>
 8004810:	1bc0      	subs	r0, r0, r7
 8004812:	2805      	cmp	r0, #5
 8004814:	f200 8215 	bhi.w	8004c42 <HAL_DMA_Init+0x476>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004818:	682c      	ldr	r4, [r5, #0]
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	07de      	lsls	r6, r3, #31
 800481e:	d4f5      	bmi.n	800480c <HAL_DMA_Init+0x40>
    registerValue |=  hdma->Init.Direction           |
 8004820:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004824:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8004826:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004828:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800482a:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482c:	430b      	orrs	r3, r1
 800482e:	6969      	ldr	r1, [r5, #20]
 8004830:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004832:	69e9      	ldr	r1, [r5, #28]
 8004834:	4313      	orrs	r3, r2
 8004836:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004838:	4979      	ldr	r1, [pc, #484]	@ (8004a20 <HAL_DMA_Init+0x254>)
 800483a:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800483c:	6a28      	ldr	r0, [r5, #32]
 800483e:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 8004840:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004842:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8004844:	2904      	cmp	r1, #4
 8004846:	d103      	bne.n	8004850 <HAL_DMA_Init+0x84>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004848:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 800484c:	4330      	orrs	r0, r6
 800484e:	4303      	orrs	r3, r0
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004850:	6868      	ldr	r0, [r5, #4]
 8004852:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 8004856:	2e1f      	cmp	r6, #31
 8004858:	f240 81fc 	bls.w	8004c54 <HAL_DMA_Init+0x488>
 800485c:	f1a0 064f 	sub.w	r6, r0, #79	@ 0x4f
 8004860:	2e03      	cmp	r6, #3
 8004862:	f200 820e 	bhi.w	8004c82 <HAL_DMA_Init+0x4b6>
        registerValue |= DMA_SxCR_TRBUFF;
 8004866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800486a:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800486c:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800486e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004870:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004874:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004878:	d10d      	bne.n	8004896 <HAL_DMA_Init+0xca>
      registerValue |= hdma->Init.FIFOThreshold;
 800487a:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800487c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800487e:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004880:	b148      	cbz	r0, 8004896 <HAL_DMA_Init+0xca>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004882:	2a00      	cmp	r2, #0
 8004884:	f040 81ec 	bne.w	8004c60 <HAL_DMA_Init+0x494>
    switch (hdma->Init.FIFOThreshold)
 8004888:	2901      	cmp	r1, #1
 800488a:	f000 820d 	beq.w	8004ca8 <HAL_DMA_Init+0x4dc>
 800488e:	f031 0202 	bics.w	r2, r1, #2
 8004892:	f000 81ed 	beq.w	8004c70 <HAL_DMA_Init+0x4a4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004896:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004898:	4628      	mov	r0, r5
 800489a:	f7ff feaf 	bl	80045fc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800489e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80048a0:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048a2:	4e5e      	ldr	r6, [pc, #376]	@ (8004a1c <HAL_DMA_Init+0x250>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048a4:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048a8:	4f5e      	ldr	r7, [pc, #376]	@ (8004a24 <HAL_DMA_Init+0x258>)
 80048aa:	495f      	ldr	r1, [pc, #380]	@ (8004a28 <HAL_DMA_Init+0x25c>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048ac:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ae:	4a5f      	ldr	r2, [pc, #380]	@ (8004a2c <HAL_DMA_Init+0x260>)
 80048b0:	1a61      	subs	r1, r4, r1
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048b2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b4:	1aa2      	subs	r2, r4, r2
 80048b6:	4b58      	ldr	r3, [pc, #352]	@ (8004a18 <HAL_DMA_Init+0x24c>)
 80048b8:	fab1 f181 	clz	r1, r1
 80048bc:	485c      	ldr	r0, [pc, #368]	@ (8004a30 <HAL_DMA_Init+0x264>)
 80048be:	fab2 f282 	clz	r2, r2
 80048c2:	429c      	cmp	r4, r3
 80048c4:	bf18      	it	ne
 80048c6:	42b4      	cmpne	r4, r6
 80048c8:	eba4 0307 	sub.w	r3, r4, r7
 80048cc:	eba4 0900 	sub.w	r9, r4, r0
 80048d0:	f100 0014 	add.w	r0, r0, #20
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	bf08      	it	eq
 80048da:	2601      	moveq	r6, #1
 80048dc:	eba4 0a00 	sub.w	sl, r4, r0
 80048e0:	fab9 f989 	clz	r9, r9
 80048e4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80048e8:	bf18      	it	ne
 80048ea:	2600      	movne	r6, #0
 80048ec:	faba fa8a 	clz	sl, sl
 80048f0:	0952      	lsrs	r2, r2, #5
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	0949      	lsrs	r1, r1, #5
 80048f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a34 <HAL_DMA_Init+0x268>)
 80048f8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80048fc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8004900:	eba4 0b03 	sub.w	fp, r4, r3
 8004904:	3328      	adds	r3, #40	@ 0x28
 8004906:	eba4 0803 	sub.w	r8, r4, r3
 800490a:	3328      	adds	r3, #40	@ 0x28
 800490c:	fabb fb8b 	clz	fp, fp
 8004910:	1ae3      	subs	r3, r4, r3
 8004912:	fab8 f888 	clz	r8, r8
 8004916:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800491a:	fab3 f383 	clz	r3, r3
 800491e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	430b      	orrs	r3, r1
 8004926:	ea4b 0b03 	orr.w	fp, fp, r3
 800492a:	9b00      	ldr	r3, [sp, #0]
 800492c:	ea4a 0a0b 	orr.w	sl, sl, fp
 8004930:	ea49 090a 	orr.w	r9, r9, sl
 8004934:	ea48 0809 	orr.w	r8, r8, r9
 8004938:	ea43 0708 	orr.w	r7, r3, r8
 800493c:	4317      	orrs	r7, r2
 800493e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a38 <HAL_DMA_Init+0x26c>)
 8004940:	ea47 0306 	orr.w	r3, r7, r6
 8004944:	4294      	cmp	r4, r2
 8004946:	bf08      	it	eq
 8004948:	f043 0301 	orreq.w	r3, r3, #1
 800494c:	3218      	adds	r2, #24
 800494e:	4294      	cmp	r4, r2
 8004950:	bf08      	it	eq
 8004952:	f043 0301 	orreq.w	r3, r3, #1
 8004956:	3218      	adds	r2, #24
 8004958:	4294      	cmp	r4, r2
 800495a:	bf08      	it	eq
 800495c:	f043 0301 	orreq.w	r3, r3, #1
 8004960:	3218      	adds	r2, #24
 8004962:	4294      	cmp	r4, r2
 8004964:	bf08      	it	eq
 8004966:	f043 0301 	orreq.w	r3, r3, #1
 800496a:	3218      	adds	r2, #24
 800496c:	4294      	cmp	r4, r2
 800496e:	bf08      	it	eq
 8004970:	f043 0301 	orreq.w	r3, r3, #1
 8004974:	3218      	adds	r2, #24
 8004976:	4294      	cmp	r4, r2
 8004978:	bf08      	it	eq
 800497a:	f043 0301 	orreq.w	r3, r3, #1
 800497e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004982:	4294      	cmp	r4, r2
 8004984:	bf08      	it	eq
 8004986:	f043 0301 	orreq.w	r3, r3, #1
 800498a:	3218      	adds	r2, #24
 800498c:	4294      	cmp	r4, r2
 800498e:	bf08      	it	eq
 8004990:	f043 0301 	orreq.w	r3, r3, #1
 8004994:	3218      	adds	r2, #24
 8004996:	4294      	cmp	r4, r2
 8004998:	bf08      	it	eq
 800499a:	f043 0301 	orreq.w	r3, r3, #1
 800499e:	3218      	adds	r2, #24
 80049a0:	4294      	cmp	r4, r2
 80049a2:	bf08      	it	eq
 80049a4:	f043 0301 	orreq.w	r3, r3, #1
 80049a8:	3218      	adds	r2, #24
 80049aa:	4294      	cmp	r4, r2
 80049ac:	bf08      	it	eq
 80049ae:	f043 0301 	orreq.w	r3, r3, #1
 80049b2:	3218      	adds	r2, #24
 80049b4:	4294      	cmp	r4, r2
 80049b6:	bf08      	it	eq
 80049b8:	f043 0301 	orreq.w	r3, r3, #1
 80049bc:	3218      	adds	r2, #24
 80049be:	4294      	cmp	r4, r2
 80049c0:	bf08      	it	eq
 80049c2:	f043 0301 	orreq.w	r3, r3, #1
 80049c6:	b91b      	cbnz	r3, 80049d0 <HAL_DMA_Init+0x204>
 80049c8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a3c <HAL_DMA_Init+0x270>)
 80049ca:	429c      	cmp	r4, r3
 80049cc:	f040 8130 	bne.w	8004c30 <HAL_DMA_Init+0x464>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049d0:	4628      	mov	r0, r5
 80049d2:	f7ff fe93 	bl	80046fc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049d6:	68ab      	ldr	r3, [r5, #8]
 80049d8:	2b80      	cmp	r3, #128	@ 0x80
 80049da:	f000 811e 	beq.w	8004c1a <HAL_DMA_Init+0x44e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049de:	686b      	ldr	r3, [r5, #4]
 80049e0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80049e2:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049e4:	3b01      	subs	r3, #1
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049e6:	600a      	str	r2, [r1, #0]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049e8:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ea:	e9d5 1019 	ldrd	r1, r0, [r5, #100]	@ 0x64
 80049ee:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049f0:	f200 811a 	bhi.w	8004c28 <HAL_DMA_Init+0x45c>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80049f4:	1e50      	subs	r0, r2, #1
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049f6:	2f00      	cmp	r7, #0
 80049f8:	f000 815b 	beq.w	8004cb2 <HAL_DMA_Init+0x4e6>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049fc:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <HAL_DMA_Init+0x274>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80049fe:	4911      	ldr	r1, [pc, #68]	@ (8004a44 <HAL_DMA_Init+0x278>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a00:	4413      	add	r3, r2
 8004a02:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a04:	2301      	movs	r3, #1
 8004a06:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a08:	2000      	movs	r0, #0
 8004a0a:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a0e:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a10:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a12:	604b      	str	r3, [r1, #4]
 8004a14:	e10c      	b.n	8004c30 <HAL_DMA_Init+0x464>
 8004a16:	bf00      	nop
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	40020028 	.word	0x40020028
 8004a20:	fe10803f 	.word	0xfe10803f
 8004a24:	58025494 	.word	0x58025494
 8004a28:	58025444 	.word	0x58025444
 8004a2c:	5802541c 	.word	0x5802541c
 8004a30:	5802546c 	.word	0x5802546c
 8004a34:	58025408 	.word	0x58025408
 8004a38:	40020040 	.word	0x40020040
 8004a3c:	400204b8 	.word	0x400204b8
 8004a40:	1600963f 	.word	0x1600963f
 8004a44:	58025940 	.word	0x58025940
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a48:	3318      	adds	r3, #24
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	f43f aed3 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a50:	3318      	adds	r3, #24
 8004a52:	429c      	cmp	r4, r3
 8004a54:	f43f aecf 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a58:	3318      	adds	r3, #24
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	f43f aecb 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a60:	3318      	adds	r3, #24
 8004a62:	429c      	cmp	r4, r3
 8004a64:	f43f aec7 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a68:	3318      	adds	r3, #24
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	f43f aec3 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a70:	3318      	adds	r3, #24
 8004a72:	429c      	cmp	r4, r3
 8004a74:	f43f aebf 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a78:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004a7c:	429c      	cmp	r4, r3
 8004a7e:	f43f aeba 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a82:	3318      	adds	r3, #24
 8004a84:	429c      	cmp	r4, r3
 8004a86:	f43f aeb6 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a8a:	3318      	adds	r3, #24
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	f43f aeb2 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a92:	3318      	adds	r3, #24
 8004a94:	429c      	cmp	r4, r3
 8004a96:	f43f aeae 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	429c      	cmp	r4, r3
 8004a9e:	f43f aeaa 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	f43f aea6 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004aaa:	3318      	adds	r3, #24
 8004aac:	429c      	cmp	r4, r3
 8004aae:	f43f aea2 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
 8004ab2:	3318      	adds	r3, #24
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	f43f ae9e 	beq.w	80047f6 <HAL_DMA_Init+0x2a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004aba:	4b84      	ldr	r3, [pc, #528]	@ (8004ccc <HAL_DMA_Init+0x500>)
 8004abc:	4884      	ldr	r0, [pc, #528]	@ (8004cd0 <HAL_DMA_Init+0x504>)
 8004abe:	eba4 0b03 	sub.w	fp, r4, r3
 8004ac2:	4b84      	ldr	r3, [pc, #528]	@ (8004cd4 <HAL_DMA_Init+0x508>)
 8004ac4:	4a84      	ldr	r2, [pc, #528]	@ (8004cd8 <HAL_DMA_Init+0x50c>)
 8004ac6:	429c      	cmp	r4, r3
 8004ac8:	bf18      	it	ne
 8004aca:	4284      	cmpne	r4, r0
 8004acc:	f103 0314 	add.w	r3, r3, #20
 8004ad0:	fabb fb8b 	clz	fp, fp
 8004ad4:	eba4 0202 	sub.w	r2, r4, r2
 8004ad8:	bf0c      	ite	eq
 8004ada:	2001      	moveq	r0, #1
 8004adc:	2000      	movne	r0, #0
 8004ade:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004ae2:	fab2 f282 	clz	r2, r2
 8004ae6:	429c      	cmp	r4, r3
 8004ae8:	bf08      	it	eq
 8004aea:	f040 0001 	orreq.w	r0, r0, #1
 8004aee:	3314      	adds	r3, #20
 8004af0:	497a      	ldr	r1, [pc, #488]	@ (8004cdc <HAL_DMA_Init+0x510>)
 8004af2:	0952      	lsrs	r2, r2, #5
 8004af4:	429c      	cmp	r4, r3
 8004af6:	bf08      	it	eq
 8004af8:	f040 0001 	orreq.w	r0, r0, #1
 8004afc:	3314      	adds	r3, #20
 8004afe:	1a61      	subs	r1, r4, r1
 8004b00:	4f77      	ldr	r7, [pc, #476]	@ (8004ce0 <HAL_DMA_Init+0x514>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	bf08      	it	eq
 8004b06:	f040 0001 	orreq.w	r0, r0, #1
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	fab1 f181 	clz	r1, r1
 8004b10:	eba4 0907 	sub.w	r9, r4, r7
 8004b14:	429c      	cmp	r4, r3
 8004b16:	bf08      	it	eq
 8004b18:	f040 0001 	orreq.w	r0, r0, #1
 8004b1c:	3314      	adds	r3, #20
 8004b1e:	3714      	adds	r7, #20
 8004b20:	0949      	lsrs	r1, r1, #5
 8004b22:	429c      	cmp	r4, r3
 8004b24:	bf08      	it	eq
 8004b26:	f040 0001 	orreq.w	r0, r0, #1
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	eba4 0a07 	sub.w	sl, r4, r7
 8004b30:	fab9 f989 	clz	r9, r9
 8004b34:	429c      	cmp	r4, r3
 8004b36:	bf08      	it	eq
 8004b38:	f040 0001 	orreq.w	r0, r0, #1
 8004b3c:	4b69      	ldr	r3, [pc, #420]	@ (8004ce4 <HAL_DMA_Init+0x518>)
 8004b3e:	3714      	adds	r7, #20
 8004b40:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004b44:	eba4 0803 	sub.w	r8, r4, r3
 8004b48:	ea4b 0000 	orr.w	r0, fp, r0
 8004b4c:	3328      	adds	r3, #40	@ 0x28
 8004b4e:	faba fa8a 	clz	sl, sl
 8004b52:	fab8 f888 	clz	r8, r8
 8004b56:	4310      	orrs	r0, r2
 8004b58:	1ae3      	subs	r3, r4, r3
 8004b5a:	1be7      	subs	r7, r4, r7
 8004b5c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004b60:	fab3 f383 	clz	r3, r3
 8004b64:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8004b68:	ea48 0000 	orr.w	r0, r8, r0
 8004b6c:	fab7 f787 	clz	r7, r7
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	4308      	orrs	r0, r1
 8004b74:	097f      	lsrs	r7, r7, #5
 8004b76:	4318      	orrs	r0, r3
 8004b78:	9700      	str	r7, [sp, #0]
 8004b7a:	ea49 0000 	orr.w	r0, r9, r0
 8004b7e:	ea5a 0000 	orrs.w	r0, sl, r0
 8004b82:	d102      	bne.n	8004b8a <HAL_DMA_Init+0x3be>
 8004b84:	2f00      	cmp	r7, #0
 8004b86:	f000 809b 	beq.w	8004cc0 <HAL_DMA_Init+0x4f4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b8a:	2002      	movs	r0, #2
 8004b8c:	f885 0035 	strb.w	r0, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b96:	4854      	ldr	r0, [pc, #336]	@ (8004ce8 <HAL_DMA_Init+0x51c>)
 8004b98:	4607      	mov	r7, r0
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b9a:	6820      	ldr	r0, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b9c:	4038      	ands	r0, r7
 8004b9e:	4607      	mov	r7, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ba0:	68a8      	ldr	r0, [r5, #8]
 8004ba2:	2840      	cmp	r0, #64	@ 0x40
 8004ba4:	f000 808a 	beq.w	8004cbc <HAL_DMA_Init+0x4f0>
 8004ba8:	f1a0 0080 	sub.w	r0, r0, #128	@ 0x80
 8004bac:	fab0 f080 	clz	r0, r0
 8004bb0:	0940      	lsrs	r0, r0, #5
 8004bb2:	0380      	lsls	r0, r0, #14
 8004bb4:	9301      	str	r3, [sp, #4]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bb6:	692b      	ldr	r3, [r5, #16]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bb8:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8004cfc <HAL_DMA_Init+0x530>
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bbc:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8004bc0:	68eb      	ldr	r3, [r5, #12]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bc2:	44a6      	add	lr, r4
 8004bc4:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004bc8:	696b      	ldr	r3, [r5, #20]
 8004bca:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004bce:	69ab      	ldr	r3, [r5, #24]
 8004bd0:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004bd4:	69eb      	ldr	r3, [r5, #28]
 8004bd6:	ea4c 0cd3 	orr.w	ip, ip, r3, lsr #3
 8004bda:	6a2b      	ldr	r3, [r5, #32]
 8004bdc:	ea4c 1c13 	orr.w	ip, ip, r3, lsr #4
 8004be0:	ea4c 0c07 	orr.w	ip, ip, r7
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004be4:	ea40 000c 	orr.w	r0, r0, ip
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004be8:	6020      	str	r0, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004bea:	4840      	ldr	r0, [pc, #256]	@ (8004cec <HAL_DMA_Init+0x520>)
 8004bec:	fba0 c00e 	umull	ip, r0, r0, lr
 8004bf0:	0900      	lsrs	r0, r0, #4
 8004bf2:	0080      	lsls	r0, r0, #2
 8004bf4:	65e8      	str	r0, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004bfc:	f7ff fcfe 	bl	80045fc <DMA_CalcBaseAndBitshift>
 8004c00:	4684      	mov	ip, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c02:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 8004c04:	9b01      	ldr	r3, [sp, #4]
 8004c06:	f000 0e1f 	and.w	lr, r0, #31
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	fa00 f00e 	lsl.w	r0, r0, lr
 8004c10:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004c14:	f8cc 0004 	str.w	r0, [ip, #4]
 8004c18:	e684      	b.n	8004924 <HAL_DMA_Init+0x158>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c1a:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c1c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004c1e:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c22:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c24:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c26:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c2e:	676b      	str	r3, [r5, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c30:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004c32:	2201      	movs	r2, #1
  return HAL_OK;
 8004c34:	4618      	mov	r0, r3
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c36:	656b      	str	r3, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004c38:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
}
 8004c3c:	b005      	add	sp, #20
 8004c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c42:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c44:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c46:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c48:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004c4c:	2001      	movs	r0, #1
}
 8004c4e:	b005      	add	sp, #20
 8004c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c54:	4826      	ldr	r0, [pc, #152]	@ (8004cf0 <HAL_DMA_Init+0x524>)
 8004c56:	40f0      	lsrs	r0, r6
 8004c58:	07c0      	lsls	r0, r0, #31
 8004c5a:	f53f ae04 	bmi.w	8004866 <HAL_DMA_Init+0x9a>
 8004c5e:	e604      	b.n	800486a <HAL_DMA_Init+0x9e>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c60:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004c64:	d012      	beq.n	8004c8c <HAL_DMA_Init+0x4c0>
    switch (hdma->Init.FIFOThreshold)
 8004c66:	2902      	cmp	r1, #2
 8004c68:	d905      	bls.n	8004c76 <HAL_DMA_Init+0x4aa>
 8004c6a:	2903      	cmp	r1, #3
 8004c6c:	f47f ae13 	bne.w	8004896 <HAL_DMA_Init+0xca>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c70:	01c2      	lsls	r2, r0, #7
 8004c72:	f57f ae10 	bpl.w	8004896 <HAL_DMA_Init+0xca>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c76:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8004c78:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c7a:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004c7c:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8004c80:	e7e4      	b.n	8004c4c <HAL_DMA_Init+0x480>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c82:	3874      	subs	r0, #116	@ 0x74
 8004c84:	2803      	cmp	r0, #3
 8004c86:	f67f adee 	bls.w	8004866 <HAL_DMA_Init+0x9a>
 8004c8a:	e5ee      	b.n	800486a <HAL_DMA_Init+0x9e>
    switch (hdma->Init.FIFOThreshold)
 8004c8c:	2903      	cmp	r1, #3
 8004c8e:	f63f ae02 	bhi.w	8004896 <HAL_DMA_Init+0xca>
 8004c92:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <HAL_DMA_Init+0x4cc>)
 8004c94:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8004c98:	08004c77 	.word	0x08004c77
 8004c9c:	08004c71 	.word	0x08004c71
 8004ca0:	08004c77 	.word	0x08004c77
 8004ca4:	08004ca9 	.word	0x08004ca9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca8:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8004cac:	f47f adf3 	bne.w	8004896 <HAL_DMA_Init+0xca>
 8004cb0:	e7e1      	b.n	8004c76 <HAL_DMA_Init+0x4aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_DMA_Init+0x528>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cb4:	4910      	ldr	r1, [pc, #64]	@ (8004cf8 <HAL_DMA_Init+0x52c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009a      	lsls	r2, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cba:	e6a3      	b.n	8004a04 <HAL_DMA_Init+0x238>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cbc:	2010      	movs	r0, #16
 8004cbe:	e779      	b.n	8004bb4 <HAL_DMA_Init+0x3e8>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cc0:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004cc2:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cc4:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004cc6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004cca:	e7bf      	b.n	8004c4c <HAL_DMA_Init+0x480>
 8004ccc:	58025408 	.word	0x58025408
 8004cd0:	48022c08 	.word	0x48022c08
 8004cd4:	48022c1c 	.word	0x48022c1c
 8004cd8:	5802541c 	.word	0x5802541c
 8004cdc:	58025444 	.word	0x58025444
 8004ce0:	5802546c 	.word	0x5802546c
 8004ce4:	58025430 	.word	0x58025430
 8004ce8:	fffe000f 	.word	0xfffe000f
 8004cec:	cccccccd 	.word	0xcccccccd
 8004cf0:	c3c0003f 	.word	0xc3c0003f
 8004cf4:	1000823f 	.word	0x1000823f
 8004cf8:	40020940 	.word	0x40020940
 8004cfc:	a7fdabf8 	.word	0xa7fdabf8

08004d00 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f000 8267 	beq.w	80051d4 <HAL_DMA_Start_IT+0x4d4>
{
 8004d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hdma);
 8004d0a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
{
 8004d0e:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 8004d10:	2c01      	cmp	r4, #1
 8004d12:	f000 825b 	beq.w	80051cc <HAL_DMA_Start_IT+0x4cc>
 8004d16:	2401      	movs	r4, #1
 8004d18:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d1c:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8004d20:	2c01      	cmp	r4, #1
 8004d22:	d009      	beq.n	8004d38 <HAL_DMA_Start_IT+0x38>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8004d28:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d2a:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004d2c:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8004d30:	2001      	movs	r0, #1
}
 8004d32:	b003      	add	sp, #12
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d38:	2402      	movs	r4, #2
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d3a:	4e87      	ldr	r6, [pc, #540]	@ (8004f58 <HAL_DMA_Start_IT+0x258>)
 8004d3c:	f8df 8220 	ldr.w	r8, [pc, #544]	@ 8004f60 <HAL_DMA_Start_IT+0x260>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d40:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d44:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8004d46:	4d85      	ldr	r5, [pc, #532]	@ (8004f5c <HAL_DMA_Start_IT+0x25c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d48:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004d4a:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d4c:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8004f64 <HAL_DMA_Start_IT+0x264>
 8004d50:	4544      	cmp	r4, r8
 8004d52:	bf18      	it	ne
 8004d54:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 8004d56:	f8df c220 	ldr.w	ip, [pc, #544]	@ 8004f78 <HAL_DMA_Start_IT+0x278>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d5a:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 8004d5c:	bf0c      	ite	eq
 8004d5e:	f04f 0b01 	moveq.w	fp, #1
 8004d62:	f04f 0b00 	movne.w	fp, #0
 8004d66:	9601      	str	r6, [sp, #4]
 8004d68:	454c      	cmp	r4, r9
 8004d6a:	bf14      	ite	ne
 8004d6c:	46de      	movne	lr, fp
 8004d6e:	f04b 0e01 	orreq.w	lr, fp, #1
    __HAL_DMA_DISABLE(hdma);
 8004d72:	42ac      	cmp	r4, r5
 8004d74:	bf18      	it	ne
 8004d76:	4564      	cmpne	r4, ip
 8004d78:	bf0c      	ite	eq
 8004d7a:	2501      	moveq	r5, #1
 8004d7c:	2500      	movne	r5, #0
 8004d7e:	f040 80fd 	bne.w	8004f7c <HAL_DMA_Start_IT+0x27c>
 8004d82:	f8d4 c000 	ldr.w	ip, [r4]
 8004d86:	f02c 0c01 	bic.w	ip, ip, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d8a:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004d8e:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004d92:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d96:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004d98:	f1bc 0f00 	cmp.w	ip, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d9e:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8004da2:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004da4:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8004da6:	f04f 083f 	mov.w	r8, #63	@ 0x3f
 8004daa:	9e01      	ldr	r6, [sp, #4]
 8004dac:	f007 091f 	and.w	r9, r7, #31
 8004db0:	fa08 f809 	lsl.w	r8, r8, r9
 8004db4:	f8c6 8008 	str.w	r8, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004db8:	6827      	ldr	r7, [r4, #0]
 8004dba:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8004dbe:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004dc0:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc2:	6883      	ldr	r3, [r0, #8]
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	f000 8207 	beq.w	80051d8 <HAL_DMA_Start_IT+0x4d8>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004dca:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004dcc:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	f040 81e6 	bne.w	80051a0 <HAL_DMA_Start_IT+0x4a0>
 8004dd4:	4a62      	ldr	r2, [pc, #392]	@ (8004f60 <HAL_DMA_Start_IT+0x260>)
      if(hdma->XferHalfCpltCallback != NULL)
 8004dd6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dd8:	4294      	cmp	r4, r2
 8004dda:	f000 8223 	beq.w	8005224 <HAL_DMA_Start_IT+0x524>
 8004dde:	4a61      	ldr	r2, [pc, #388]	@ (8004f64 <HAL_DMA_Start_IT+0x264>)
 8004de0:	4294      	cmp	r4, r2
 8004de2:	f000 8251 	beq.w	8005288 <HAL_DMA_Start_IT+0x588>
 8004de6:	f1bb 0f00 	cmp.w	fp, #0
 8004dea:	f040 820c 	bne.w	8005206 <HAL_DMA_Start_IT+0x506>
 8004dee:	4a5e      	ldr	r2, [pc, #376]	@ (8004f68 <HAL_DMA_Start_IT+0x268>)
      if(hdma->XferHalfCpltCallback != NULL)
 8004df0:	4619      	mov	r1, r3
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004df2:	4294      	cmp	r4, r2
 8004df4:	f000 8252 	beq.w	800529c <HAL_DMA_Start_IT+0x59c>
 8004df8:	4a5c      	ldr	r2, [pc, #368]	@ (8004f6c <HAL_DMA_Start_IT+0x26c>)
 8004dfa:	4294      	cmp	r4, r2
 8004dfc:	f000 8282 	beq.w	8005304 <HAL_DMA_Start_IT+0x604>
 8004e00:	3218      	adds	r2, #24
 8004e02:	4294      	cmp	r4, r2
 8004e04:	f000 829f 	beq.w	8005346 <HAL_DMA_Start_IT+0x646>
 8004e08:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e0c:	4294      	cmp	r4, r2
 8004e0e:	f000 82a7 	beq.w	8005360 <HAL_DMA_Start_IT+0x660>
 8004e12:	4b57      	ldr	r3, [pc, #348]	@ (8004f70 <HAL_DMA_Start_IT+0x270>)
 8004e14:	429c      	cmp	r4, r3
 8004e16:	f000 8340 	beq.w	800549a <HAL_DMA_Start_IT+0x79a>
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	429c      	cmp	r4, r3
 8004e1e:	f000 8347 	beq.w	80054b0 <HAL_DMA_Start_IT+0x7b0>
 8004e22:	3318      	adds	r3, #24
 8004e24:	429c      	cmp	r4, r3
 8004e26:	f000 8357 	beq.w	80054d8 <HAL_DMA_Start_IT+0x7d8>
 8004e2a:	3318      	adds	r3, #24
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	f000 8370 	beq.w	8005512 <HAL_DMA_Start_IT+0x812>
 8004e32:	3318      	adds	r3, #24
 8004e34:	429c      	cmp	r4, r3
 8004e36:	f000 839b 	beq.w	8005570 <HAL_DMA_Start_IT+0x870>
 8004e3a:	3318      	adds	r3, #24
 8004e3c:	429c      	cmp	r4, r3
 8004e3e:	f000 83ad 	beq.w	800559c <HAL_DMA_Start_IT+0x89c>
 8004e42:	3318      	adds	r3, #24
 8004e44:	429c      	cmp	r4, r3
 8004e46:	f000 83bf 	beq.w	80055c8 <HAL_DMA_Start_IT+0x8c8>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	f023 030e 	bic.w	r3, r3, #14
 8004e50:	f043 030a 	orr.w	r3, r3, #10
 8004e54:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004e56:	b119      	cbz	r1, 8004e60 <HAL_DMA_Start_IT+0x160>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e60:	4b42      	ldr	r3, [pc, #264]	@ (8004f6c <HAL_DMA_Start_IT+0x26c>)
 8004e62:	4a41      	ldr	r2, [pc, #260]	@ (8004f68 <HAL_DMA_Start_IT+0x268>)
 8004e64:	4294      	cmp	r4, r2
 8004e66:	bf18      	it	ne
 8004e68:	429c      	cmpne	r4, r3
 8004e6a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	4294      	cmp	r4, r2
 8004e76:	bf08      	it	eq
 8004e78:	f043 0301 	orreq.w	r3, r3, #1
 8004e7c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e80:	4294      	cmp	r4, r2
 8004e82:	bf08      	it	eq
 8004e84:	f043 0301 	orreq.w	r3, r3, #1
 8004e88:	3218      	adds	r2, #24
 8004e8a:	4294      	cmp	r4, r2
 8004e8c:	bf08      	it	eq
 8004e8e:	f043 0301 	orreq.w	r3, r3, #1
 8004e92:	3218      	adds	r2, #24
 8004e94:	4294      	cmp	r4, r2
 8004e96:	bf08      	it	eq
 8004e98:	f043 0301 	orreq.w	r3, r3, #1
 8004e9c:	3218      	adds	r2, #24
 8004e9e:	4294      	cmp	r4, r2
 8004ea0:	bf08      	it	eq
 8004ea2:	f043 0301 	orreq.w	r3, r3, #1
 8004ea6:	3218      	adds	r2, #24
 8004ea8:	4294      	cmp	r4, r2
 8004eaa:	bf08      	it	eq
 8004eac:	f043 0301 	orreq.w	r3, r3, #1
 8004eb0:	3218      	adds	r2, #24
 8004eb2:	4294      	cmp	r4, r2
 8004eb4:	bf08      	it	eq
 8004eb6:	f043 0301 	orreq.w	r3, r3, #1
 8004eba:	3218      	adds	r2, #24
 8004ebc:	4294      	cmp	r4, r2
 8004ebe:	bf08      	it	eq
 8004ec0:	f043 0301 	orreq.w	r3, r3, #1
 8004ec4:	3218      	adds	r2, #24
 8004ec6:	4294      	cmp	r4, r2
 8004ec8:	bf08      	it	eq
 8004eca:	f043 0301 	orreq.w	r3, r3, #1
 8004ece:	4a29      	ldr	r2, [pc, #164]	@ (8004f74 <HAL_DMA_Start_IT+0x274>)
 8004ed0:	4294      	cmp	r4, r2
 8004ed2:	bf08      	it	eq
 8004ed4:	f043 0301 	orreq.w	r3, r3, #1
 8004ed8:	3214      	adds	r2, #20
 8004eda:	4294      	cmp	r4, r2
 8004edc:	bf08      	it	eq
 8004ede:	f043 0301 	orreq.w	r3, r3, #1
 8004ee2:	3214      	adds	r2, #20
 8004ee4:	4294      	cmp	r4, r2
 8004ee6:	bf08      	it	eq
 8004ee8:	f043 0301 	orreq.w	r3, r3, #1
 8004eec:	3214      	adds	r2, #20
 8004eee:	4294      	cmp	r4, r2
 8004ef0:	bf08      	it	eq
 8004ef2:	f043 0301 	orreq.w	r3, r3, #1
 8004ef6:	3214      	adds	r2, #20
 8004ef8:	4294      	cmp	r4, r2
 8004efa:	bf08      	it	eq
 8004efc:	f043 0301 	orreq.w	r3, r3, #1
 8004f00:	3214      	adds	r2, #20
 8004f02:	4294      	cmp	r4, r2
 8004f04:	bf08      	it	eq
 8004f06:	f043 0301 	orreq.w	r3, r3, #1
 8004f0a:	3214      	adds	r2, #20
 8004f0c:	4294      	cmp	r4, r2
 8004f0e:	bf08      	it	eq
 8004f10:	f043 0301 	orreq.w	r3, r3, #1
 8004f14:	3214      	adds	r2, #20
 8004f16:	4294      	cmp	r4, r2
 8004f18:	bf08      	it	eq
 8004f1a:	f043 0301 	orreq.w	r3, r3, #1
 8004f1e:	b913      	cbnz	r3, 8004f26 <HAL_DMA_Start_IT+0x226>
 8004f20:	f1be 0f00 	cmp.w	lr, #0
 8004f24:	d00f      	beq.n	8004f46 <HAL_DMA_Start_IT+0x246>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f26:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004f28:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	03d2      	lsls	r2, r2, #15
 8004f30:	f100 8147 	bmi.w	80051c2 <HAL_DMA_Start_IT+0x4c2>
      if(hdma->DMAmuxRequestGen != 0U)
 8004f34:	f1bc 0f00 	cmp.w	ip, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_DMA_Start_IT+0x246>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f3a:	f8dc 3000 	ldr.w	r3, [ip]
 8004f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f42:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8004f46:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	6023      	str	r3, [r4, #0]
}
 8004f50:	b003      	add	sp, #12
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	bf00      	nop
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020028 	.word	0x40020028
 8004f60:	40020040 	.word	0x40020040
 8004f64:	40020058 	.word	0x40020058
 8004f68:	40020088 	.word	0x40020088
 8004f6c:	400200a0 	.word	0x400200a0
 8004f70:	40020428 	.word	0x40020428
 8004f74:	58025408 	.word	0x58025408
 8004f78:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8004f7c:	4544      	cmp	r4, r8
 8004f7e:	f000 815b 	beq.w	8005238 <HAL_DMA_Start_IT+0x538>
 8004f82:	454c      	cmp	r4, r9
 8004f84:	f000 816c 	beq.w	8005260 <HAL_DMA_Start_IT+0x560>
 8004f88:	f1bb 0f00 	cmp.w	fp, #0
 8004f8c:	f040 8127 	bne.w	80051de <HAL_DMA_Start_IT+0x4de>
 8004f90:	f8df c59c 	ldr.w	ip, [pc, #1436]	@ 8005530 <HAL_DMA_Start_IT+0x830>
 8004f94:	4564      	cmp	r4, ip
 8004f96:	f000 818d 	beq.w	80052b4 <HAL_DMA_Start_IT+0x5b4>
 8004f9a:	f10c 0c18 	add.w	ip, ip, #24
 8004f9e:	4564      	cmp	r4, ip
 8004fa0:	f000 819c 	beq.w	80052dc <HAL_DMA_Start_IT+0x5dc>
 8004fa4:	f10c 0c18 	add.w	ip, ip, #24
 8004fa8:	4564      	cmp	r4, ip
 8004faa:	f000 81b8 	beq.w	800531e <HAL_DMA_Start_IT+0x61e>
 8004fae:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8004fb2:	4564      	cmp	r4, ip
 8004fb4:	f000 81df 	beq.w	8005376 <HAL_DMA_Start_IT+0x676>
 8004fb8:	f10c 0c18 	add.w	ip, ip, #24
 8004fbc:	4564      	cmp	r4, ip
 8004fbe:	f000 8263 	beq.w	8005488 <HAL_DMA_Start_IT+0x788>
 8004fc2:	f10c 0c18 	add.w	ip, ip, #24
 8004fc6:	4564      	cmp	r4, ip
 8004fc8:	f000 827d 	beq.w	80054c6 <HAL_DMA_Start_IT+0x7c6>
 8004fcc:	f10c 0c18 	add.w	ip, ip, #24
 8004fd0:	4564      	cmp	r4, ip
 8004fd2:	f000 828c 	beq.w	80054ee <HAL_DMA_Start_IT+0x7ee>
 8004fd6:	f10c 0c18 	add.w	ip, ip, #24
 8004fda:	4564      	cmp	r4, ip
 8004fdc:	f000 8290 	beq.w	8005500 <HAL_DMA_Start_IT+0x800>
 8004fe0:	f10c 0c18 	add.w	ip, ip, #24
 8004fe4:	4564      	cmp	r4, ip
 8004fe6:	f000 82d0 	beq.w	800558a <HAL_DMA_Start_IT+0x88a>
 8004fea:	f10c 0c18 	add.w	ip, ip, #24
 8004fee:	4564      	cmp	r4, ip
 8004ff0:	f000 82e1 	beq.w	80055b6 <HAL_DMA_Start_IT+0x8b6>
 8004ff4:	f10c 0c18 	add.w	ip, ip, #24
 8004ff8:	4564      	cmp	r4, ip
 8004ffa:	f000 82f2 	beq.w	80055e2 <HAL_DMA_Start_IT+0x8e2>
 8004ffe:	f8d4 c000 	ldr.w	ip, [r4]
 8005002:	f02c 0c01 	bic.w	ip, ip, #1
 8005006:	f8c4 c000 	str.w	ip, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800500a:	f8df c528 	ldr.w	ip, [pc, #1320]	@ 8005534 <HAL_DMA_Start_IT+0x834>
 800500e:	4564      	cmp	r4, ip
 8005010:	f040 81c8 	bne.w	80053a4 <HAL_DMA_Start_IT+0x6a4>
    if(hdma->DMAmuxRequestGen != 0U)
 8005014:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005018:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 800501c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800501e:	f1bc 0f00 	cmp.w	ip, #0
 8005022:	f43f aebf 	beq.w	8004da4 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005026:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 800502a:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800502c:	f8df 8500 	ldr.w	r8, [pc, #1280]	@ 8005530 <HAL_DMA_Start_IT+0x830>
 8005030:	f8df 9504 	ldr.w	r9, [pc, #1284]	@ 8005538 <HAL_DMA_Start_IT+0x838>
 8005034:	454c      	cmp	r4, r9
 8005036:	bf18      	it	ne
 8005038:	4544      	cmpne	r4, r8
 800503a:	f109 0918 	add.w	r9, r9, #24
 800503e:	bf0c      	ite	eq
 8005040:	f04f 0801 	moveq.w	r8, #1
 8005044:	f04f 0800 	movne.w	r8, #0
 8005048:	454c      	cmp	r4, r9
 800504a:	bf08      	it	eq
 800504c:	f048 0801 	orreq.w	r8, r8, #1
 8005050:	f509 7956 	add.w	r9, r9, #856	@ 0x358
 8005054:	454c      	cmp	r4, r9
 8005056:	bf08      	it	eq
 8005058:	f048 0801 	orreq.w	r8, r8, #1
 800505c:	f109 0918 	add.w	r9, r9, #24
 8005060:	454c      	cmp	r4, r9
 8005062:	bf08      	it	eq
 8005064:	f048 0801 	orreq.w	r8, r8, #1
 8005068:	f109 0918 	add.w	r9, r9, #24
 800506c:	454c      	cmp	r4, r9
 800506e:	bf08      	it	eq
 8005070:	f048 0801 	orreq.w	r8, r8, #1
 8005074:	f109 0918 	add.w	r9, r9, #24
 8005078:	454c      	cmp	r4, r9
 800507a:	bf08      	it	eq
 800507c:	f048 0801 	orreq.w	r8, r8, #1
 8005080:	f109 0918 	add.w	r9, r9, #24
 8005084:	454c      	cmp	r4, r9
 8005086:	bf08      	it	eq
 8005088:	f048 0801 	orreq.w	r8, r8, #1
 800508c:	f109 0918 	add.w	r9, r9, #24
 8005090:	454c      	cmp	r4, r9
 8005092:	bf08      	it	eq
 8005094:	f048 0801 	orreq.w	r8, r8, #1
 8005098:	f109 0918 	add.w	r9, r9, #24
 800509c:	454c      	cmp	r4, r9
 800509e:	bf08      	it	eq
 80050a0:	f048 0801 	orreq.w	r8, r8, #1
 80050a4:	f1b8 0f00 	cmp.w	r8, #0
 80050a8:	f47f ae7c 	bne.w	8004da4 <HAL_DMA_Start_IT+0xa4>
 80050ac:	f8df 848c 	ldr.w	r8, [pc, #1164]	@ 800553c <HAL_DMA_Start_IT+0x83c>
 80050b0:	4544      	cmp	r4, r8
 80050b2:	f43f ae77 	beq.w	8004da4 <HAL_DMA_Start_IT+0xa4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050b6:	f8df c488 	ldr.w	ip, [pc, #1160]	@ 8005540 <HAL_DMA_Start_IT+0x840>
 80050ba:	f8df 8488 	ldr.w	r8, [pc, #1160]	@ 8005544 <HAL_DMA_Start_IT+0x844>
 80050be:	4544      	cmp	r4, r8
 80050c0:	bf18      	it	ne
 80050c2:	4564      	cmpne	r4, ip
 80050c4:	f108 0814 	add.w	r8, r8, #20
 80050c8:	bf0c      	ite	eq
 80050ca:	f04f 0c01 	moveq.w	ip, #1
 80050ce:	f04f 0c00 	movne.w	ip, #0
 80050d2:	4544      	cmp	r4, r8
 80050d4:	bf08      	it	eq
 80050d6:	f04c 0c01 	orreq.w	ip, ip, #1
 80050da:	f108 0814 	add.w	r8, r8, #20
 80050de:	4544      	cmp	r4, r8
 80050e0:	bf08      	it	eq
 80050e2:	f04c 0c01 	orreq.w	ip, ip, #1
 80050e6:	f108 0814 	add.w	r8, r8, #20
 80050ea:	4544      	cmp	r4, r8
 80050ec:	bf08      	it	eq
 80050ee:	f04c 0c01 	orreq.w	ip, ip, #1
 80050f2:	f108 0814 	add.w	r8, r8, #20
 80050f6:	4544      	cmp	r4, r8
 80050f8:	bf08      	it	eq
 80050fa:	f04c 0c01 	orreq.w	ip, ip, #1
 80050fe:	f108 0814 	add.w	r8, r8, #20
 8005102:	4544      	cmp	r4, r8
 8005104:	bf08      	it	eq
 8005106:	f04c 0c01 	orreq.w	ip, ip, #1
 800510a:	f108 0814 	add.w	r8, r8, #20
 800510e:	4544      	cmp	r4, r8
 8005110:	bf08      	it	eq
 8005112:	f04c 0c01 	orreq.w	ip, ip, #1
 8005116:	f8df 8430 	ldr.w	r8, [pc, #1072]	@ 8005548 <HAL_DMA_Start_IT+0x848>
 800511a:	4544      	cmp	r4, r8
 800511c:	bf08      	it	eq
 800511e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005122:	f108 0814 	add.w	r8, r8, #20
 8005126:	4544      	cmp	r4, r8
 8005128:	bf08      	it	eq
 800512a:	f04c 0c01 	orreq.w	ip, ip, #1
 800512e:	f108 0814 	add.w	r8, r8, #20
 8005132:	4544      	cmp	r4, r8
 8005134:	bf08      	it	eq
 8005136:	f04c 0c01 	orreq.w	ip, ip, #1
 800513a:	f108 0814 	add.w	r8, r8, #20
 800513e:	4544      	cmp	r4, r8
 8005140:	bf08      	it	eq
 8005142:	f04c 0c01 	orreq.w	ip, ip, #1
 8005146:	f108 0814 	add.w	r8, r8, #20
 800514a:	4544      	cmp	r4, r8
 800514c:	bf08      	it	eq
 800514e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005152:	f108 0814 	add.w	r8, r8, #20
 8005156:	4544      	cmp	r4, r8
 8005158:	bf08      	it	eq
 800515a:	f04c 0c01 	orreq.w	ip, ip, #1
 800515e:	f108 0814 	add.w	r8, r8, #20
 8005162:	4544      	cmp	r4, r8
 8005164:	bf08      	it	eq
 8005166:	f04c 0c01 	orreq.w	ip, ip, #1
 800516a:	f1bc 0f00 	cmp.w	ip, #0
 800516e:	d104      	bne.n	800517a <HAL_DMA_Start_IT+0x47a>
 8005170:	f8df c3d8 	ldr.w	ip, [pc, #984]	@ 800554c <HAL_DMA_Start_IT+0x84c>
 8005174:	4564      	cmp	r4, ip
 8005176:	f040 823f 	bne.w	80055f8 <HAL_DMA_Start_IT+0x8f8>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800517a:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 800517c:	f04f 0c01 	mov.w	ip, #1
 8005180:	f006 081f 	and.w	r8, r6, #31
 8005184:	9e01      	ldr	r6, [sp, #4]
 8005186:	fa0c fc08 	lsl.w	ip, ip, r8
 800518a:	f8c6 c004 	str.w	ip, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800518e:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005190:	6883      	ldr	r3, [r0, #8]
 8005192:	2b40      	cmp	r3, #64	@ 0x40
 8005194:	f000 822e 	beq.w	80055f4 <HAL_DMA_Start_IT+0x8f4>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005198:	60a1      	str	r1, [r4, #8]
      if(hdma->XferHalfCpltCallback != NULL)
 800519a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800519c:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800519e:	e61e      	b.n	8004dde <HAL_DMA_Start_IT+0xde>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	f023 031e 	bic.w	r3, r3, #30
 80051a6:	f043 0316 	orr.w	r3, r3, #22
 80051aa:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80051ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80051ae:	b11b      	cbz	r3, 80051b8 <HAL_DMA_Start_IT+0x4b8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	f043 0308 	orr.w	r3, r3, #8
 80051b6:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051b8:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	03d2      	lsls	r2, r2, #15
 80051be:	f57f aeb9 	bpl.w	8004f34 <HAL_DMA_Start_IT+0x234>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e6b3      	b.n	8004f34 <HAL_DMA_Start_IT+0x234>
  __HAL_LOCK(hdma);
 80051cc:	2002      	movs	r0, #2
}
 80051ce:	b003      	add	sp, #12
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80051d4:	2001      	movs	r0, #1
}
 80051d6:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80051d8:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80051da:	60e1      	str	r1, [r4, #12]
 80051dc:	e5f7      	b.n	8004dce <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 80051de:	f8df a348 	ldr.w	sl, [pc, #840]	@ 8005528 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e2:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 80051e6:	f8da 8070 	ldr.w	r8, [sl, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 80051ea:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 80051ee:	f028 0801 	bic.w	r8, r8, #1
 80051f2:	f8ca 8070 	str.w	r8, [sl, #112]	@ 0x70
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051f6:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 80051f8:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80051fc:	f1bc 0f00 	cmp.w	ip, #0
 8005200:	f47f adcd 	bne.w	8004d9e <HAL_DMA_Start_IT+0x9e>
 8005204:	e5ce      	b.n	8004da4 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005206:	49c8      	ldr	r1, [pc, #800]	@ (8005528 <HAL_DMA_Start_IT+0x828>)
 8005208:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 800520a:	f022 021e 	bic.w	r2, r2, #30
 800520e:	f042 0216 	orr.w	r2, r2, #22
 8005212:	670a      	str	r2, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8005214:	2b00      	cmp	r3, #0
 8005216:	f43f ae86 	beq.w	8004f26 <HAL_DMA_Start_IT+0x226>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	f043 0308 	orr.w	r3, r3, #8
 8005220:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005222:	e61d      	b.n	8004e60 <HAL_DMA_Start_IT+0x160>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005224:	49c0      	ldr	r1, [pc, #768]	@ (8005528 <HAL_DMA_Start_IT+0x828>)
 8005226:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005228:	f022 021e 	bic.w	r2, r2, #30
 800522c:	f042 0216 	orr.w	r2, r2, #22
 8005230:	640a      	str	r2, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f1      	bne.n	800521a <HAL_DMA_Start_IT+0x51a>
 8005236:	e7bf      	b.n	80051b8 <HAL_DMA_Start_IT+0x4b8>
    __HAL_DMA_DISABLE(hdma);
 8005238:	f8df a2ec 	ldr.w	sl, [pc, #748]	@ 8005528 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800523c:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8005240:	f8da 8040 	ldr.w	r8, [sl, #64]	@ 0x40
    if(hdma->DMAmuxRequestGen != 0U)
 8005244:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8005248:	f028 0801 	bic.w	r8, r8, #1
 800524c:	f8ca 8040 	str.w	r8, [sl, #64]	@ 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005250:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8005252:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005256:	f1bc 0f00 	cmp.w	ip, #0
 800525a:	f47f ada0 	bne.w	8004d9e <HAL_DMA_Start_IT+0x9e>
 800525e:	e5a1      	b.n	8004da4 <HAL_DMA_Start_IT+0xa4>
    __HAL_DMA_DISABLE(hdma);
 8005260:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8005528 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005264:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8005268:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
    if(hdma->DMAmuxRequestGen != 0U)
 800526c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8005270:	f028 0801 	bic.w	r8, r8, #1
 8005274:	f8ca 8058 	str.w	r8, [sl, #88]	@ 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005278:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 800527a:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800527e:	f1bc 0f00 	cmp.w	ip, #0
 8005282:	f47f ad8c 	bne.w	8004d9e <HAL_DMA_Start_IT+0x9e>
 8005286:	e58d      	b.n	8004da4 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005288:	49a7      	ldr	r1, [pc, #668]	@ (8005528 <HAL_DMA_Start_IT+0x828>)
 800528a:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800528c:	f022 021e 	bic.w	r2, r2, #30
 8005290:	f042 0216 	orr.w	r2, r2, #22
 8005294:	658a      	str	r2, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1bf      	bne.n	800521a <HAL_DMA_Start_IT+0x51a>
 800529a:	e644      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800529c:	49a2      	ldr	r1, [pc, #648]	@ (8005528 <HAL_DMA_Start_IT+0x828>)
 800529e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80052a2:	f022 021e 	bic.w	r2, r2, #30
 80052a6:	f042 0216 	orr.w	r2, r2, #22
 80052aa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1b3      	bne.n	800521a <HAL_DMA_Start_IT+0x51a>
 80052b2:	e638      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80052b4:	f8df a270 	ldr.w	sl, [pc, #624]	@ 8005528 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052b8:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 80052bc:	f8da 8088 	ldr.w	r8, [sl, #136]	@ 0x88
    if(hdma->DMAmuxRequestGen != 0U)
 80052c0:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 80052c4:	f028 0801 	bic.w	r8, r8, #1
 80052c8:	f8ca 8088 	str.w	r8, [sl, #136]	@ 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052cc:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 80052ce:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80052d2:	f1bc 0f00 	cmp.w	ip, #0
 80052d6:	f47f aea6 	bne.w	8005026 <HAL_DMA_Start_IT+0x326>
 80052da:	e6a7      	b.n	800502c <HAL_DMA_Start_IT+0x32c>
    __HAL_DMA_DISABLE(hdma);
 80052dc:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8005528 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e0:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 80052e4:	f8da 80a0 	ldr.w	r8, [sl, #160]	@ 0xa0
    if(hdma->DMAmuxRequestGen != 0U)
 80052e8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 80052ec:	f028 0801 	bic.w	r8, r8, #1
 80052f0:	f8ca 80a0 	str.w	r8, [sl, #160]	@ 0xa0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052f4:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 80052f6:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80052fa:	f1bc 0f00 	cmp.w	ip, #0
 80052fe:	f47f ae92 	bne.w	8005026 <HAL_DMA_Start_IT+0x326>
 8005302:	e693      	b.n	800502c <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005304:	4988      	ldr	r1, [pc, #544]	@ (8005528 <HAL_DMA_Start_IT+0x828>)
 8005306:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 800530a:	f022 021e 	bic.w	r2, r2, #30
 800530e:	f042 0216 	orr.w	r2, r2, #22
 8005312:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8005316:	2b00      	cmp	r3, #0
 8005318:	f47f af7f 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 800531c:	e603      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800531e:	f8df a208 	ldr.w	sl, [pc, #520]	@ 8005528 <HAL_DMA_Start_IT+0x828>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005322:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8005326:	f8da 80b8 	ldr.w	r8, [sl, #184]	@ 0xb8
    if(hdma->DMAmuxRequestGen != 0U)
 800532a:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 800532e:	f028 0801 	bic.w	r8, r8, #1
 8005332:	f8ca 80b8 	str.w	r8, [sl, #184]	@ 0xb8
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005336:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8005338:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800533c:	f1bc 0f00 	cmp.w	ip, #0
 8005340:	f47f ae71 	bne.w	8005026 <HAL_DMA_Start_IT+0x326>
 8005344:	e672      	b.n	800502c <HAL_DMA_Start_IT+0x32c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005346:	4978      	ldr	r1, [pc, #480]	@ (8005528 <HAL_DMA_Start_IT+0x828>)
 8005348:	f8d1 20b8 	ldr.w	r2, [r1, #184]	@ 0xb8
 800534c:	f022 021e 	bic.w	r2, r2, #30
 8005350:	f042 0216 	orr.w	r2, r2, #22
 8005354:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8005358:	2b00      	cmp	r3, #0
 800535a:	f47f af5e 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 800535e:	e5e2      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005360:	4972      	ldr	r1, [pc, #456]	@ (800552c <HAL_DMA_Start_IT+0x82c>)
 8005362:	690a      	ldr	r2, [r1, #16]
 8005364:	f022 021e 	bic.w	r2, r2, #30
 8005368:	f042 0216 	orr.w	r2, r2, #22
 800536c:	610a      	str	r2, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 800536e:	2b00      	cmp	r3, #0
 8005370:	f47f af53 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 8005374:	e5d7      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 8005376:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800552c <HAL_DMA_Start_IT+0x82c>
 800537a:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800537e:	f02c 0c01 	bic.w	ip, ip, #1
 8005382:	f8c8 c010 	str.w	ip, [r8, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005386:	f8df c1c8 	ldr.w	ip, [pc, #456]	@ 8005550 <HAL_DMA_Start_IT+0x850>
 800538a:	4564      	cmp	r4, ip
 800538c:	f43f ae42 	beq.w	8005014 <HAL_DMA_Start_IT+0x314>
 8005390:	f10c 0c18 	add.w	ip, ip, #24
 8005394:	4564      	cmp	r4, ip
 8005396:	f43f ae3d 	beq.w	8005014 <HAL_DMA_Start_IT+0x314>
 800539a:	f10c 0c18 	add.w	ip, ip, #24
 800539e:	4564      	cmp	r4, ip
 80053a0:	f43f ae38 	beq.w	8005014 <HAL_DMA_Start_IT+0x314>
 80053a4:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8005554 <HAL_DMA_Start_IT+0x854>
 80053a8:	4564      	cmp	r4, ip
 80053aa:	f43f ae33 	beq.w	8005014 <HAL_DMA_Start_IT+0x314>
 80053ae:	f10c 0c18 	add.w	ip, ip, #24
 80053b2:	4564      	cmp	r4, ip
 80053b4:	f43f ae2e 	beq.w	8005014 <HAL_DMA_Start_IT+0x314>
 80053b8:	f10c 0c18 	add.w	ip, ip, #24
 80053bc:	4564      	cmp	r4, ip
 80053be:	f43f ae29 	beq.w	8005014 <HAL_DMA_Start_IT+0x314>
 80053c2:	f10c 0c18 	add.w	ip, ip, #24
 80053c6:	4564      	cmp	r4, ip
 80053c8:	f43f ae24 	beq.w	8005014 <HAL_DMA_Start_IT+0x314>
 80053cc:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8005548 <HAL_DMA_Start_IT+0x848>
 80053d0:	4564      	cmp	r4, ip
 80053d2:	f000 80c3 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
 80053d6:	f10c 0c14 	add.w	ip, ip, #20
 80053da:	4564      	cmp	r4, ip
 80053dc:	f000 80be 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
 80053e0:	f10c 0c14 	add.w	ip, ip, #20
 80053e4:	4564      	cmp	r4, ip
 80053e6:	f000 80b9 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
 80053ea:	f10c 0c14 	add.w	ip, ip, #20
 80053ee:	4564      	cmp	r4, ip
 80053f0:	f000 80b4 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
 80053f4:	f10c 0c14 	add.w	ip, ip, #20
 80053f8:	4564      	cmp	r4, ip
 80053fa:	f000 80af 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
 80053fe:	f10c 0c14 	add.w	ip, ip, #20
 8005402:	4564      	cmp	r4, ip
 8005404:	f000 80aa 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
 8005408:	f10c 0c14 	add.w	ip, ip, #20
 800540c:	4564      	cmp	r4, ip
 800540e:	f000 80a5 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
 8005412:	f10c 0c14 	add.w	ip, ip, #20
 8005416:	4564      	cmp	r4, ip
 8005418:	f000 80a0 	beq.w	800555c <HAL_DMA_Start_IT+0x85c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800541c:	f8df c124 	ldr.w	ip, [pc, #292]	@ 8005544 <HAL_DMA_Start_IT+0x844>
 8005420:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8005540 <HAL_DMA_Start_IT+0x840>
 8005424:	4544      	cmp	r4, r8
 8005426:	bf18      	it	ne
 8005428:	4564      	cmpne	r4, ip
 800542a:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 800542e:	bf0c      	ite	eq
 8005430:	f04f 0c01 	moveq.w	ip, #1
 8005434:	f04f 0c00 	movne.w	ip, #0
 8005438:	4544      	cmp	r4, r8
 800543a:	bf08      	it	eq
 800543c:	f04c 0c01 	orreq.w	ip, ip, #1
 8005440:	f108 0814 	add.w	r8, r8, #20
 8005444:	4544      	cmp	r4, r8
 8005446:	bf08      	it	eq
 8005448:	f04c 0c01 	orreq.w	ip, ip, #1
 800544c:	f108 0814 	add.w	r8, r8, #20
 8005450:	4544      	cmp	r4, r8
 8005452:	bf08      	it	eq
 8005454:	f04c 0c01 	orreq.w	ip, ip, #1
 8005458:	f108 0814 	add.w	r8, r8, #20
 800545c:	4544      	cmp	r4, r8
 800545e:	bf08      	it	eq
 8005460:	f04c 0c01 	orreq.w	ip, ip, #1
 8005464:	f108 0814 	add.w	r8, r8, #20
 8005468:	4544      	cmp	r4, r8
 800546a:	bf08      	it	eq
 800546c:	f04c 0c01 	orreq.w	ip, ip, #1
 8005470:	f1bc 0f00 	cmp.w	ip, #0
 8005474:	f47f ae81 	bne.w	800517a <HAL_DMA_Start_IT+0x47a>
 8005478:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8005558 <HAL_DMA_Start_IT+0x858>
 800547c:	4564      	cmp	r4, ip
      if(hdma->XferHalfCpltCallback != NULL)
 800547e:	bf18      	it	ne
 8005480:	6c01      	ldrne	r1, [r0, #64]	@ 0x40
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005482:	f43f ae7a 	beq.w	800517a <HAL_DMA_Start_IT+0x47a>
 8005486:	e4c4      	b.n	8004e12 <HAL_DMA_Start_IT+0x112>
    __HAL_DMA_DISABLE(hdma);
 8005488:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800552c <HAL_DMA_Start_IT+0x82c>
 800548c:	f8d8 c028 	ldr.w	ip, [r8, #40]	@ 0x28
 8005490:	f02c 0c01 	bic.w	ip, ip, #1
 8005494:	f8c8 c028 	str.w	ip, [r8, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005498:	e5bc      	b.n	8005014 <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800549a:	4a24      	ldr	r2, [pc, #144]	@ (800552c <HAL_DMA_Start_IT+0x82c>)
 800549c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800549e:	f023 031e 	bic.w	r3, r3, #30
 80054a2:	f043 0316 	orr.w	r3, r3, #22
 80054a6:	6293      	str	r3, [r2, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 80054a8:	2900      	cmp	r1, #0
 80054aa:	f47f aeb6 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 80054ae:	e53a      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054b0:	4a1e      	ldr	r2, [pc, #120]	@ (800552c <HAL_DMA_Start_IT+0x82c>)
 80054b2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80054b4:	f023 031e 	bic.w	r3, r3, #30
 80054b8:	f043 0316 	orr.w	r3, r3, #22
 80054bc:	6413      	str	r3, [r2, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 80054be:	2900      	cmp	r1, #0
 80054c0:	f47f aeab 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 80054c4:	e52f      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80054c6:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800552c <HAL_DMA_Start_IT+0x82c>
 80054ca:	f8d8 c040 	ldr.w	ip, [r8, #64]	@ 0x40
 80054ce:	f02c 0c01 	bic.w	ip, ip, #1
 80054d2:	f8c8 c040 	str.w	ip, [r8, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054d6:	e59d      	b.n	8005014 <HAL_DMA_Start_IT+0x314>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054d8:	4a14      	ldr	r2, [pc, #80]	@ (800552c <HAL_DMA_Start_IT+0x82c>)
 80054da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80054dc:	f023 031e 	bic.w	r3, r3, #30
 80054e0:	f043 0316 	orr.w	r3, r3, #22
 80054e4:	6593      	str	r3, [r2, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80054e6:	2900      	cmp	r1, #0
 80054e8:	f47f ae97 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 80054ec:	e51b      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80054ee:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 800552c <HAL_DMA_Start_IT+0x82c>
 80054f2:	f8d8 c058 	ldr.w	ip, [r8, #88]	@ 0x58
 80054f6:	f02c 0c01 	bic.w	ip, ip, #1
 80054fa:	f8c8 c058 	str.w	ip, [r8, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054fe:	e584      	b.n	800500a <HAL_DMA_Start_IT+0x30a>
    __HAL_DMA_DISABLE(hdma);
 8005500:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 800552c <HAL_DMA_Start_IT+0x82c>
 8005504:	f8d8 c070 	ldr.w	ip, [r8, #112]	@ 0x70
 8005508:	f02c 0c01 	bic.w	ip, ip, #1
 800550c:	f8c8 c070 	str.w	ip, [r8, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005510:	e748      	b.n	80053a4 <HAL_DMA_Start_IT+0x6a4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005512:	4a06      	ldr	r2, [pc, #24]	@ (800552c <HAL_DMA_Start_IT+0x82c>)
 8005514:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005516:	f023 031e 	bic.w	r3, r3, #30
 800551a:	f043 0316 	orr.w	r3, r3, #22
 800551e:	6713      	str	r3, [r2, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8005520:	2900      	cmp	r1, #0
 8005522:	f47f ae7a 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 8005526:	e4fe      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
 8005528:	40020000 	.word	0x40020000
 800552c:	40020400 	.word	0x40020400
 8005530:	40020088 	.word	0x40020088
 8005534:	40020458 	.word	0x40020458
 8005538:	400200a0 	.word	0x400200a0
 800553c:	400204b8 	.word	0x400204b8
 8005540:	48022c08 	.word	0x48022c08
 8005544:	48022c1c 	.word	0x48022c1c
 8005548:	58025408 	.word	0x58025408
 800554c:	58025494 	.word	0x58025494
 8005550:	40020410 	.word	0x40020410
 8005554:	40020470 	.word	0x40020470
 8005558:	48022c94 	.word	0x48022c94
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800555c:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 8005560:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005564:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005566:	f1bc 0f00 	cmp.w	ip, #0
 800556a:	f47f ad5c 	bne.w	8005026 <HAL_DMA_Start_IT+0x326>
 800556e:	e5a2      	b.n	80050b6 <HAL_DMA_Start_IT+0x3b6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005570:	4a23      	ldr	r2, [pc, #140]	@ (8005600 <HAL_DMA_Start_IT+0x900>)
 8005572:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005576:	f023 031e 	bic.w	r3, r3, #30
 800557a:	f043 0316 	orr.w	r3, r3, #22
 800557e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8005582:	2900      	cmp	r1, #0
 8005584:	f47f ae49 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 8005588:	e4cd      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 800558a:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8005600 <HAL_DMA_Start_IT+0x900>
 800558e:	f8d8 c088 	ldr.w	ip, [r8, #136]	@ 0x88
 8005592:	f02c 0c01 	bic.w	ip, ip, #1
 8005596:	f8c8 c088 	str.w	ip, [r8, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800559a:	e536      	b.n	800500a <HAL_DMA_Start_IT+0x30a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800559c:	4a18      	ldr	r2, [pc, #96]	@ (8005600 <HAL_DMA_Start_IT+0x900>)
 800559e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80055a2:	f023 031e 	bic.w	r3, r3, #30
 80055a6:	f043 0316 	orr.w	r3, r3, #22
 80055aa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 80055ae:	2900      	cmp	r1, #0
 80055b0:	f47f ae33 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 80055b4:	e4b7      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80055b6:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 8005600 <HAL_DMA_Start_IT+0x900>
 80055ba:	f8d8 c0a0 	ldr.w	ip, [r8, #160]	@ 0xa0
 80055be:	f02c 0c01 	bic.w	ip, ip, #1
 80055c2:	f8c8 c0a0 	str.w	ip, [r8, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c6:	e6de      	b.n	8005386 <HAL_DMA_Start_IT+0x686>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005600 <HAL_DMA_Start_IT+0x900>)
 80055ca:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 80055ce:	f023 031e 	bic.w	r3, r3, #30
 80055d2:	f043 0316 	orr.w	r3, r3, #22
 80055d6:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 80055da:	2900      	cmp	r1, #0
 80055dc:	f47f ae1d 	bne.w	800521a <HAL_DMA_Start_IT+0x51a>
 80055e0:	e4a1      	b.n	8004f26 <HAL_DMA_Start_IT+0x226>
    __HAL_DMA_DISABLE(hdma);
 80055e2:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8005600 <HAL_DMA_Start_IT+0x900>
 80055e6:	f8d8 c0b8 	ldr.w	ip, [r8, #184]	@ 0xb8
 80055ea:	f02c 0c01 	bic.w	ip, ip, #1
 80055ee:	f8c8 c0b8 	str.w	ip, [r8, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055f2:	e6c8      	b.n	8005386 <HAL_DMA_Start_IT+0x686>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80055f4:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80055f6:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80055fa:	f7ff bbf8 	b.w	8004dee <HAL_DMA_Start_IT+0xee>
 80055fe:	bf00      	nop
 8005600:	40020400 	.word	0x40020400

08005604 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005604:	2800      	cmp	r0, #0
 8005606:	f000 8096 	beq.w	8005736 <HAL_DMA_Abort_IT+0x132>
{
 800560a:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800560c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005610:	2b02      	cmp	r3, #2
 8005612:	f040 8083 	bne.w	800571c <HAL_DMA_Abort_IT+0x118>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005616:	6803      	ldr	r3, [r0, #0]
 8005618:	4a48      	ldr	r2, [pc, #288]	@ (800573c <HAL_DMA_Abort_IT+0x138>)
 800561a:	4293      	cmp	r3, r2
 800561c:	f000 8082 	beq.w	8005724 <HAL_DMA_Abort_IT+0x120>
 8005620:	3218      	adds	r2, #24
 8005622:	4293      	cmp	r3, r2
 8005624:	d07e      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005626:	3218      	adds	r2, #24
 8005628:	4293      	cmp	r3, r2
 800562a:	d07b      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 800562c:	3218      	adds	r2, #24
 800562e:	4293      	cmp	r3, r2
 8005630:	d078      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005632:	3218      	adds	r2, #24
 8005634:	4293      	cmp	r3, r2
 8005636:	d075      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005638:	3218      	adds	r2, #24
 800563a:	4293      	cmp	r3, r2
 800563c:	d072      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 800563e:	3218      	adds	r2, #24
 8005640:	4293      	cmp	r3, r2
 8005642:	d06f      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005644:	3218      	adds	r2, #24
 8005646:	4293      	cmp	r3, r2
 8005648:	d06c      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 800564a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800564e:	4293      	cmp	r3, r2
 8005650:	d068      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005652:	3218      	adds	r2, #24
 8005654:	4293      	cmp	r3, r2
 8005656:	d065      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005658:	3218      	adds	r2, #24
 800565a:	4293      	cmp	r3, r2
 800565c:	d062      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 800565e:	3218      	adds	r2, #24
 8005660:	4293      	cmp	r3, r2
 8005662:	d05f      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005664:	3218      	adds	r2, #24
 8005666:	4293      	cmp	r3, r2
 8005668:	d05c      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 800566a:	3218      	adds	r2, #24
 800566c:	4293      	cmp	r3, r2
 800566e:	d059      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005670:	3218      	adds	r2, #24
 8005672:	4293      	cmp	r3, r2
 8005674:	d056      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
 8005676:	3218      	adds	r2, #24
 8005678:	4293      	cmp	r3, r2
 800567a:	d053      	beq.n	8005724 <HAL_DMA_Abort_IT+0x120>
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800567c:	4a30      	ldr	r2, [pc, #192]	@ (8005740 <HAL_DMA_Abort_IT+0x13c>)
 800567e:	4d31      	ldr	r5, [pc, #196]	@ (8005744 <HAL_DMA_Abort_IT+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005680:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005682:	42ab      	cmp	r3, r5
 8005684:	bf18      	it	ne
 8005686:	4293      	cmpne	r3, r2
 8005688:	4c2f      	ldr	r4, [pc, #188]	@ (8005748 <HAL_DMA_Abort_IT+0x144>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800568a:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800568e:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8005692:	bf0c      	ite	eq
 8005694:	2201      	moveq	r2, #1
 8005696:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005698:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800569a:	42a3      	cmp	r3, r4
 800569c:	bf08      	it	eq
 800569e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80056a2:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056a4:	3428      	adds	r4, #40	@ 0x28
 80056a6:	42ab      	cmp	r3, r5
 80056a8:	bf08      	it	eq
 80056aa:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80056ae:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	bf08      	it	eq
 80056b6:	f042 0201 	orreq.w	r2, r2, #1
 80056ba:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80056bc:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056be:	42a3      	cmp	r3, r4
 80056c0:	bf08      	it	eq
 80056c2:	f042 0201 	orreq.w	r2, r2, #1
 80056c6:	4921      	ldr	r1, [pc, #132]	@ (800574c <HAL_DMA_Abort_IT+0x148>)
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf08      	it	eq
 80056cc:	f042 0201 	orreq.w	r2, r2, #1
 80056d0:	b912      	cbnz	r2, 80056d8 <HAL_DMA_Abort_IT+0xd4>
 80056d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005750 <HAL_DMA_Abort_IT+0x14c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d117      	bne.n	8005708 <HAL_DMA_Abort_IT+0x104>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056d8:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056da:	6d84      	ldr	r4, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056dc:	e9d0 1517 	ldrd	r1, r5, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056e0:	682a      	ldr	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056e2:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056ea:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056ec:	602a      	str	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056ee:	6063      	str	r3, [r4, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80056f0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056f2:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 80056f6:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80056f8:	b133      	cbz	r3, 8005708 <HAL_DMA_Abort_IT+0x104>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056fa:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056fc:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005700:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005704:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005706:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005708:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800570a:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 800570c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800570e:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005712:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8005716:	b163      	cbz	r3, 8005732 <HAL_DMA_Abort_IT+0x12e>
        hdma->XferAbortCallback(hdma);
 8005718:	4798      	blx	r3
 800571a:	e00a      	b.n	8005732 <HAL_DMA_Abort_IT+0x12e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800571c:	2380      	movs	r3, #128	@ 0x80
 800571e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8005720:	2001      	movs	r0, #1
}
 8005722:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8005724:	2204      	movs	r2, #4
 8005726:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005732:	2000      	movs	r0, #0
}
 8005734:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005736:	2001      	movs	r0, #1
}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40020010 	.word	0x40020010
 8005740:	5802541c 	.word	0x5802541c
 8005744:	58025408 	.word	0x58025408
 8005748:	58025430 	.word	0x58025430
 800574c:	58025480 	.word	0x58025480
 8005750:	58025494 	.word	0x58025494

08005754 <HAL_DMA_IRQHandler>:
{
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8005758:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800575a:	4b5a      	ldr	r3, [pc, #360]	@ (80058c4 <HAL_DMA_IRQHandler+0x170>)
{
 800575c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800575e:	6d84      	ldr	r4, [r0, #88]	@ 0x58
{
 8005760:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005762:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8005764:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005766:	6803      	ldr	r3, [r0, #0]
 8005768:	4a57      	ldr	r2, [pc, #348]	@ (80058c8 <HAL_DMA_IRQHandler+0x174>)
 800576a:	4858      	ldr	r0, [pc, #352]	@ (80058cc <HAL_DMA_IRQHandler+0x178>)
  tmpisr_dma  = regs_dma->ISR;
 800576c:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800576e:	4293      	cmp	r3, r2
 8005770:	bf18      	it	ne
 8005772:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8005774:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005776:	bf0c      	ite	eq
 8005778:	2001      	moveq	r0, #1
 800577a:	2000      	movne	r0, #0
 800577c:	f000 80b0 	beq.w	80058e0 <HAL_DMA_IRQHandler+0x18c>
 8005780:	3218      	adds	r2, #24
 8005782:	4293      	cmp	r3, r2
 8005784:	f000 82a6 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0x580>
 8005788:	3218      	adds	r2, #24
 800578a:	4293      	cmp	r3, r2
 800578c:	f000 82a2 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0x580>
 8005790:	3218      	adds	r2, #24
 8005792:	4293      	cmp	r3, r2
 8005794:	f000 82af 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 8005798:	3218      	adds	r2, #24
 800579a:	4293      	cmp	r3, r2
 800579c:	f000 82ab 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057a0:	3218      	adds	r2, #24
 80057a2:	4293      	cmp	r3, r2
 80057a4:	f000 82a7 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057a8:	3218      	adds	r2, #24
 80057aa:	4293      	cmp	r3, r2
 80057ac:	f000 82a3 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057b0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f000 829e 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057ba:	3218      	adds	r2, #24
 80057bc:	4293      	cmp	r3, r2
 80057be:	f000 829a 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057c2:	3218      	adds	r2, #24
 80057c4:	4293      	cmp	r3, r2
 80057c6:	f000 8296 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057ca:	3218      	adds	r2, #24
 80057cc:	4293      	cmp	r3, r2
 80057ce:	f000 8292 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057d2:	3218      	adds	r2, #24
 80057d4:	4293      	cmp	r3, r2
 80057d6:	f000 828e 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057da:	3218      	adds	r2, #24
 80057dc:	4293      	cmp	r3, r2
 80057de:	f000 828a 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057e2:	3218      	adds	r2, #24
 80057e4:	4293      	cmp	r3, r2
 80057e6:	f000 8286 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
 80057ea:	3218      	adds	r2, #24
 80057ec:	4293      	cmp	r3, r2
 80057ee:	f000 8282 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x5a2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80057f2:	4a37      	ldr	r2, [pc, #220]	@ (80058d0 <HAL_DMA_IRQHandler+0x17c>)
 80057f4:	4837      	ldr	r0, [pc, #220]	@ (80058d4 <HAL_DMA_IRQHandler+0x180>)
 80057f6:	4283      	cmp	r3, r0
 80057f8:	bf18      	it	ne
 80057fa:	4293      	cmpne	r3, r2
 80057fc:	f100 0014 	add.w	r0, r0, #20
 8005800:	bf0c      	ite	eq
 8005802:	2201      	moveq	r2, #1
 8005804:	2200      	movne	r2, #0
 8005806:	4283      	cmp	r3, r0
 8005808:	bf08      	it	eq
 800580a:	f042 0201 	orreq.w	r2, r2, #1
 800580e:	3014      	adds	r0, #20
 8005810:	4283      	cmp	r3, r0
 8005812:	bf08      	it	eq
 8005814:	f042 0201 	orreq.w	r2, r2, #1
 8005818:	3014      	adds	r0, #20
 800581a:	4283      	cmp	r3, r0
 800581c:	bf08      	it	eq
 800581e:	f042 0201 	orreq.w	r2, r2, #1
 8005822:	3014      	adds	r0, #20
 8005824:	4283      	cmp	r3, r0
 8005826:	bf08      	it	eq
 8005828:	f042 0201 	orreq.w	r2, r2, #1
 800582c:	3014      	adds	r0, #20
 800582e:	4283      	cmp	r3, r0
 8005830:	bf08      	it	eq
 8005832:	f042 0201 	orreq.w	r2, r2, #1
 8005836:	3014      	adds	r0, #20
 8005838:	4283      	cmp	r3, r0
 800583a:	bf08      	it	eq
 800583c:	f042 0201 	orreq.w	r2, r2, #1
 8005840:	4825      	ldr	r0, [pc, #148]	@ (80058d8 <HAL_DMA_IRQHandler+0x184>)
 8005842:	4283      	cmp	r3, r0
 8005844:	bf08      	it	eq
 8005846:	f042 0201 	orreq.w	r2, r2, #1
 800584a:	3014      	adds	r0, #20
 800584c:	4283      	cmp	r3, r0
 800584e:	bf08      	it	eq
 8005850:	f042 0201 	orreq.w	r2, r2, #1
 8005854:	3014      	adds	r0, #20
 8005856:	4283      	cmp	r3, r0
 8005858:	bf08      	it	eq
 800585a:	f042 0201 	orreq.w	r2, r2, #1
 800585e:	3014      	adds	r0, #20
 8005860:	4283      	cmp	r3, r0
 8005862:	bf08      	it	eq
 8005864:	f042 0201 	orreq.w	r2, r2, #1
 8005868:	3014      	adds	r0, #20
 800586a:	4283      	cmp	r3, r0
 800586c:	bf08      	it	eq
 800586e:	f042 0201 	orreq.w	r2, r2, #1
 8005872:	3014      	adds	r0, #20
 8005874:	4283      	cmp	r3, r0
 8005876:	bf08      	it	eq
 8005878:	f042 0201 	orreq.w	r2, r2, #1
 800587c:	3014      	adds	r0, #20
 800587e:	4283      	cmp	r3, r0
 8005880:	bf08      	it	eq
 8005882:	f042 0201 	orreq.w	r2, r2, #1
 8005886:	b912      	cbnz	r2, 800588e <HAL_DMA_IRQHandler+0x13a>
 8005888:	4a14      	ldr	r2, [pc, #80]	@ (80058dc <HAL_DMA_IRQHandler+0x188>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d116      	bne.n	80058bc <HAL_DMA_IRQHandler+0x168>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800588e:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 8005890:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005892:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005894:	f000 001f 	and.w	r0, r0, #31
 8005898:	4085      	lsls	r5, r0
 800589a:	420d      	tst	r5, r1
 800589c:	f000 8285 	beq.w	8005daa <HAL_DMA_IRQHandler+0x656>
 80058a0:	0757      	lsls	r7, r2, #29
 80058a2:	f140 8282 	bpl.w	8005daa <HAL_DMA_IRQHandler+0x656>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058a6:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058a8:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058aa:	f140 82b1 	bpl.w	8005e10 <HAL_DMA_IRQHandler+0x6bc>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058ae:	03d1      	lsls	r1, r2, #15
 80058b0:	f100 82b4 	bmi.w	8005e1c <HAL_DMA_IRQHandler+0x6c8>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058b4:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 81f6 	bne.w	8005ca8 <HAL_DMA_IRQHandler+0x554>
}
 80058bc:	b002      	add	sp, #8
 80058be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c2:	bf00      	nop
 80058c4:	2400000c 	.word	0x2400000c
 80058c8:	40020028 	.word	0x40020028
 80058cc:	40020010 	.word	0x40020010
 80058d0:	48022c08 	.word	0x48022c08
 80058d4:	48022c1c 	.word	0x48022c1c
 80058d8:	58025408 	.word	0x58025408
 80058dc:	58025494 	.word	0x58025494
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058e0:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 80058e4:	f04f 0c08 	mov.w	ip, #8
 80058e8:	f00e 021f 	and.w	r2, lr, #31
 80058ec:	fa0c f102 	lsl.w	r1, ip, r2
 80058f0:	420f      	tst	r7, r1
 80058f2:	f000 81de 	beq.w	8005cb2 <HAL_DMA_IRQHandler+0x55e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80058f6:	f8d3 c000 	ldr.w	ip, [r3]
 80058fa:	f01c 0f04 	tst.w	ip, #4
 80058fe:	d00a      	beq.n	8005916 <HAL_DMA_IRQHandler+0x1c2>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005900:	f8d3 c000 	ldr.w	ip, [r3]
 8005904:	f02c 0c04 	bic.w	ip, ip, #4
 8005908:	f8c3 c000 	str.w	ip, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800590c:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800590e:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8005910:	f041 0101 	orr.w	r1, r1, #1
 8005914:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005916:	fa27 f102 	lsr.w	r1, r7, r2
 800591a:	07c9      	lsls	r1, r1, #31
 800591c:	d55b      	bpl.n	80059d6 <HAL_DMA_IRQHandler+0x282>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800591e:	2800      	cmp	r0, #0
 8005920:	d14f      	bne.n	80059c2 <HAL_DMA_IRQHandler+0x26e>
 8005922:	49a2      	ldr	r1, [pc, #648]	@ (8005bac <HAL_DMA_IRQHandler+0x458>)
 8005924:	f8df c298 	ldr.w	ip, [pc, #664]	@ 8005bc0 <HAL_DMA_IRQHandler+0x46c>
 8005928:	4563      	cmp	r3, ip
 800592a:	bf18      	it	ne
 800592c:	428b      	cmpne	r3, r1
 800592e:	f10c 0c18 	add.w	ip, ip, #24
 8005932:	bf0c      	ite	eq
 8005934:	2101      	moveq	r1, #1
 8005936:	2100      	movne	r1, #0
 8005938:	4563      	cmp	r3, ip
 800593a:	bf08      	it	eq
 800593c:	f041 0101 	orreq.w	r1, r1, #1
 8005940:	f10c 0c18 	add.w	ip, ip, #24
 8005944:	4563      	cmp	r3, ip
 8005946:	bf08      	it	eq
 8005948:	f041 0101 	orreq.w	r1, r1, #1
 800594c:	f10c 0c18 	add.w	ip, ip, #24
 8005950:	4563      	cmp	r3, ip
 8005952:	bf08      	it	eq
 8005954:	f041 0101 	orreq.w	r1, r1, #1
 8005958:	f10c 0c18 	add.w	ip, ip, #24
 800595c:	4563      	cmp	r3, ip
 800595e:	bf08      	it	eq
 8005960:	f041 0101 	orreq.w	r1, r1, #1
 8005964:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8005968:	4563      	cmp	r3, ip
 800596a:	bf08      	it	eq
 800596c:	f041 0101 	orreq.w	r1, r1, #1
 8005970:	f10c 0c18 	add.w	ip, ip, #24
 8005974:	4563      	cmp	r3, ip
 8005976:	bf08      	it	eq
 8005978:	f041 0101 	orreq.w	r1, r1, #1
 800597c:	f10c 0c18 	add.w	ip, ip, #24
 8005980:	4563      	cmp	r3, ip
 8005982:	bf08      	it	eq
 8005984:	f041 0101 	orreq.w	r1, r1, #1
 8005988:	f10c 0c18 	add.w	ip, ip, #24
 800598c:	4563      	cmp	r3, ip
 800598e:	bf08      	it	eq
 8005990:	f041 0101 	orreq.w	r1, r1, #1
 8005994:	f10c 0c18 	add.w	ip, ip, #24
 8005998:	4563      	cmp	r3, ip
 800599a:	bf08      	it	eq
 800599c:	f041 0101 	orreq.w	r1, r1, #1
 80059a0:	f10c 0c18 	add.w	ip, ip, #24
 80059a4:	4563      	cmp	r3, ip
 80059a6:	bf08      	it	eq
 80059a8:	f041 0101 	orreq.w	r1, r1, #1
 80059ac:	f10c 0c18 	add.w	ip, ip, #24
 80059b0:	4563      	cmp	r3, ip
 80059b2:	bf08      	it	eq
 80059b4:	f041 0101 	orreq.w	r1, r1, #1
 80059b8:	b919      	cbnz	r1, 80059c2 <HAL_DMA_IRQHandler+0x26e>
 80059ba:	497d      	ldr	r1, [pc, #500]	@ (8005bb0 <HAL_DMA_IRQHandler+0x45c>)
 80059bc:	428b      	cmp	r3, r1
 80059be:	f040 81e3 	bne.w	8005d88 <HAL_DMA_IRQHandler+0x634>
 80059c2:	6959      	ldr	r1, [r3, #20]
 80059c4:	0609      	lsls	r1, r1, #24
 80059c6:	d506      	bpl.n	80059d6 <HAL_DMA_IRQHandler+0x282>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059c8:	2101      	movs	r1, #1
 80059ca:	4091      	lsls	r1, r2
 80059cc:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059ce:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 80059d0:	f041 0102 	orr.w	r1, r1, #2
 80059d4:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059d6:	2104      	movs	r1, #4
 80059d8:	4091      	lsls	r1, r2
 80059da:	4239      	tst	r1, r7
 80059dc:	d05f      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059de:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8005bac <HAL_DMA_IRQHandler+0x458>
 80059e2:	4563      	cmp	r3, ip
 80059e4:	d051      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x336>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d14f      	bne.n	8005a8a <HAL_DMA_IRQHandler+0x336>
 80059ea:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80059ee:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 8005bc0 <HAL_DMA_IRQHandler+0x46c>
 80059f2:	4543      	cmp	r3, r8
 80059f4:	bf18      	it	ne
 80059f6:	4563      	cmpne	r3, ip
 80059f8:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 80059fc:	bf0c      	ite	eq
 80059fe:	f04f 0c01 	moveq.w	ip, #1
 8005a02:	f04f 0c00 	movne.w	ip, #0
 8005a06:	4543      	cmp	r3, r8
 8005a08:	bf08      	it	eq
 8005a0a:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a0e:	f108 0818 	add.w	r8, r8, #24
 8005a12:	4543      	cmp	r3, r8
 8005a14:	bf08      	it	eq
 8005a16:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a1a:	f108 0818 	add.w	r8, r8, #24
 8005a1e:	4543      	cmp	r3, r8
 8005a20:	bf08      	it	eq
 8005a22:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a26:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8005a2a:	4543      	cmp	r3, r8
 8005a2c:	bf08      	it	eq
 8005a2e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a32:	f108 0818 	add.w	r8, r8, #24
 8005a36:	4543      	cmp	r3, r8
 8005a38:	bf08      	it	eq
 8005a3a:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a3e:	f108 0818 	add.w	r8, r8, #24
 8005a42:	4543      	cmp	r3, r8
 8005a44:	bf08      	it	eq
 8005a46:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a4a:	f108 0818 	add.w	r8, r8, #24
 8005a4e:	4543      	cmp	r3, r8
 8005a50:	bf08      	it	eq
 8005a52:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a56:	f108 0818 	add.w	r8, r8, #24
 8005a5a:	4543      	cmp	r3, r8
 8005a5c:	bf08      	it	eq
 8005a5e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a62:	f108 0818 	add.w	r8, r8, #24
 8005a66:	4543      	cmp	r3, r8
 8005a68:	bf08      	it	eq
 8005a6a:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a6e:	f108 0818 	add.w	r8, r8, #24
 8005a72:	4543      	cmp	r3, r8
 8005a74:	bf08      	it	eq
 8005a76:	f04c 0c01 	orreq.w	ip, ip, #1
 8005a7a:	f1bc 0f00 	cmp.w	ip, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_DMA_IRQHandler+0x336>
 8005a80:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8005bb0 <HAL_DMA_IRQHandler+0x45c>
 8005a84:	4563      	cmp	r3, ip
 8005a86:	f040 8185 	bne.w	8005d94 <HAL_DMA_IRQHandler+0x640>
 8005a8a:	f8d3 c000 	ldr.w	ip, [r3]
 8005a8e:	f01c 0f02 	tst.w	ip, #2
 8005a92:	d004      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a94:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a96:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8005a98:	f041 0104 	orr.w	r1, r1, #4
 8005a9c:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a9e:	2110      	movs	r1, #16
 8005aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa4:	423a      	tst	r2, r7
 8005aa6:	d05b      	beq.n	8005b60 <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005aa8:	4940      	ldr	r1, [pc, #256]	@ (8005bac <HAL_DMA_IRQHandler+0x458>)
 8005aaa:	428b      	cmp	r3, r1
 8005aac:	d042      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x3e0>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d140      	bne.n	8005b34 <HAL_DMA_IRQHandler+0x3e0>
 8005ab2:	3118      	adds	r1, #24
 8005ab4:	483f      	ldr	r0, [pc, #252]	@ (8005bb4 <HAL_DMA_IRQHandler+0x460>)
 8005ab6:	4283      	cmp	r3, r0
 8005ab8:	bf18      	it	ne
 8005aba:	428b      	cmpne	r3, r1
 8005abc:	f100 0018 	add.w	r0, r0, #24
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2101      	moveq	r1, #1
 8005ac4:	2100      	movne	r1, #0
 8005ac6:	4283      	cmp	r3, r0
 8005ac8:	bf08      	it	eq
 8005aca:	f041 0101 	orreq.w	r1, r1, #1
 8005ace:	3018      	adds	r0, #24
 8005ad0:	4283      	cmp	r3, r0
 8005ad2:	bf08      	it	eq
 8005ad4:	f041 0101 	orreq.w	r1, r1, #1
 8005ad8:	3018      	adds	r0, #24
 8005ada:	4283      	cmp	r3, r0
 8005adc:	bf08      	it	eq
 8005ade:	f041 0101 	orreq.w	r1, r1, #1
 8005ae2:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	bf08      	it	eq
 8005aea:	f041 0101 	orreq.w	r1, r1, #1
 8005aee:	3018      	adds	r0, #24
 8005af0:	4283      	cmp	r3, r0
 8005af2:	bf08      	it	eq
 8005af4:	f041 0101 	orreq.w	r1, r1, #1
 8005af8:	3018      	adds	r0, #24
 8005afa:	4283      	cmp	r3, r0
 8005afc:	bf08      	it	eq
 8005afe:	f041 0101 	orreq.w	r1, r1, #1
 8005b02:	3018      	adds	r0, #24
 8005b04:	4283      	cmp	r3, r0
 8005b06:	bf08      	it	eq
 8005b08:	f041 0101 	orreq.w	r1, r1, #1
 8005b0c:	3018      	adds	r0, #24
 8005b0e:	4283      	cmp	r3, r0
 8005b10:	bf08      	it	eq
 8005b12:	f041 0101 	orreq.w	r1, r1, #1
 8005b16:	3018      	adds	r0, #24
 8005b18:	4283      	cmp	r3, r0
 8005b1a:	bf08      	it	eq
 8005b1c:	f041 0101 	orreq.w	r1, r1, #1
 8005b20:	3018      	adds	r0, #24
 8005b22:	4283      	cmp	r3, r0
 8005b24:	bf08      	it	eq
 8005b26:	f041 0101 	orreq.w	r1, r1, #1
 8005b2a:	b919      	cbnz	r1, 8005b34 <HAL_DMA_IRQHandler+0x3e0>
 8005b2c:	4920      	ldr	r1, [pc, #128]	@ (8005bb0 <HAL_DMA_IRQHandler+0x45c>)
 8005b2e:	428b      	cmp	r3, r1
 8005b30:	f040 8137 	bne.w	8005da2 <HAL_DMA_IRQHandler+0x64e>
 8005b34:	6819      	ldr	r1, [r3, #0]
 8005b36:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8005b3a:	b189      	cbz	r1, 8005b60 <HAL_DMA_IRQHandler+0x40c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b3c:	60a2      	str	r2, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	0350      	lsls	r0, r2, #13
 8005b42:	f100 80e7 	bmi.w	8005d14 <HAL_DMA_IRQHandler+0x5c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	05d2      	lsls	r2, r2, #23
 8005b4a:	d403      	bmi.n	8005b54 <HAL_DMA_IRQHandler+0x400>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	f022 0208 	bic.w	r2, r2, #8
 8005b52:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005b54:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005b56:	b11b      	cbz	r3, 8005b60 <HAL_DMA_IRQHandler+0x40c>
            hdma->XferHalfCpltCallback(hdma);
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4798      	blx	r3
 8005b5c:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b60:	f00e 011f 	and.w	r1, lr, #31
 8005b64:	2020      	movs	r0, #32
 8005b66:	4088      	lsls	r0, r1
 8005b68:	4238      	tst	r0, r7
 8005b6a:	d073      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x500>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b6c:	6832      	ldr	r2, [r6, #0]
 8005b6e:	4b12      	ldr	r3, [pc, #72]	@ (8005bb8 <HAL_DMA_IRQHandler+0x464>)
 8005b70:	4f12      	ldr	r7, [pc, #72]	@ (8005bbc <HAL_DMA_IRQHandler+0x468>)
 8005b72:	42ba      	cmp	r2, r7
 8005b74:	bf18      	it	ne
 8005b76:	429a      	cmpne	r2, r3
 8005b78:	f107 0718 	add.w	r7, r7, #24
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	42ba      	cmp	r2, r7
 8005b84:	bf08      	it	eq
 8005b86:	f043 0301 	orreq.w	r3, r3, #1
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	42ba      	cmp	r2, r7
 8005b8e:	bf08      	it	eq
 8005b90:	f043 0301 	orreq.w	r3, r3, #1
 8005b94:	3718      	adds	r7, #24
 8005b96:	42ba      	cmp	r2, r7
 8005b98:	bf08      	it	eq
 8005b9a:	f043 0301 	orreq.w	r3, r3, #1
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	42ba      	cmp	r2, r7
 8005ba2:	bf08      	it	eq
 8005ba4:	f043 0301 	orreq.w	r3, r3, #1
 8005ba8:	3718      	adds	r7, #24
 8005baa:	e00b      	b.n	8005bc4 <HAL_DMA_IRQHandler+0x470>
 8005bac:	40020040 	.word	0x40020040
 8005bb0:	400204b8 	.word	0x400204b8
 8005bb4:	40020070 	.word	0x40020070
 8005bb8:	40020010 	.word	0x40020010
 8005bbc:	40020028 	.word	0x40020028
 8005bc0:	40020058 	.word	0x40020058
 8005bc4:	42ba      	cmp	r2, r7
 8005bc6:	bf08      	it	eq
 8005bc8:	f043 0301 	orreq.w	r3, r3, #1
 8005bcc:	3718      	adds	r7, #24
 8005bce:	42ba      	cmp	r2, r7
 8005bd0:	bf08      	it	eq
 8005bd2:	f043 0301 	orreq.w	r3, r3, #1
 8005bd6:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8005bda:	42ba      	cmp	r2, r7
 8005bdc:	bf08      	it	eq
 8005bde:	f043 0301 	orreq.w	r3, r3, #1
 8005be2:	3718      	adds	r7, #24
 8005be4:	42ba      	cmp	r2, r7
 8005be6:	bf08      	it	eq
 8005be8:	f043 0301 	orreq.w	r3, r3, #1
 8005bec:	3718      	adds	r7, #24
 8005bee:	42ba      	cmp	r2, r7
 8005bf0:	bf08      	it	eq
 8005bf2:	f043 0301 	orreq.w	r3, r3, #1
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	42ba      	cmp	r2, r7
 8005bfa:	bf08      	it	eq
 8005bfc:	f043 0301 	orreq.w	r3, r3, #1
 8005c00:	3718      	adds	r7, #24
 8005c02:	42ba      	cmp	r2, r7
 8005c04:	bf08      	it	eq
 8005c06:	f043 0301 	orreq.w	r3, r3, #1
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	42ba      	cmp	r2, r7
 8005c0e:	bf08      	it	eq
 8005c10:	f043 0301 	orreq.w	r3, r3, #1
 8005c14:	3718      	adds	r7, #24
 8005c16:	42ba      	cmp	r2, r7
 8005c18:	bf08      	it	eq
 8005c1a:	f043 0301 	orreq.w	r3, r3, #1
 8005c1e:	b91b      	cbnz	r3, 8005c28 <HAL_DMA_IRQHandler+0x4d4>
 8005c20:	4b89      	ldr	r3, [pc, #548]	@ (8005e48 <HAL_DMA_IRQHandler+0x6f4>)
 8005c22:	429a      	cmp	r2, r3
 8005c24:	f040 80f0 	bne.w	8005e08 <HAL_DMA_IRQHandler+0x6b4>
 8005c28:	6813      	ldr	r3, [r2, #0]
 8005c2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c2e:	b18b      	cbz	r3, 8005c54 <HAL_DMA_IRQHandler+0x500>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c30:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c32:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 8005c36:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c38:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c3a:	d074      	beq.n	8005d26 <HAL_DMA_IRQHandler+0x5d2>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c3c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c40:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c42:	f000 808a 	beq.w	8005d5a <HAL_DMA_IRQHandler+0x606>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c46:	031f      	lsls	r7, r3, #12
 8005c48:	f140 8095 	bpl.w	8005d76 <HAL_DMA_IRQHandler+0x622>
          if(hdma->XferCpltCallback != NULL)
 8005c4c:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8005c4e:	b10b      	cbz	r3, 8005c54 <HAL_DMA_IRQHandler+0x500>
            hdma->XferCpltCallback(hdma);
 8005c50:	4630      	mov	r0, r6
 8005c52:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c54:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f43f ae30 	beq.w	80058bc <HAL_DMA_IRQHandler+0x168>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c5c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8005c5e:	07dc      	lsls	r4, r3, #31
 8005c60:	d51e      	bpl.n	8005ca0 <HAL_DMA_IRQHandler+0x54c>
        __HAL_DMA_DISABLE(hdma);
 8005c62:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c64:	2104      	movs	r1, #4
 8005c66:	f886 1035 	strb.w	r1, [r6, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c6a:	4978      	ldr	r1, [pc, #480]	@ (8005e4c <HAL_DMA_IRQHandler+0x6f8>)
        __HAL_DMA_DISABLE(hdma);
 8005c6c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c6e:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8005c72:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c76:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e002      	b.n	8005c82 <HAL_DMA_IRQHandler+0x52e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c7c:	6813      	ldr	r3, [r2, #0]
 8005c7e:	07d8      	lsls	r0, r3, #31
 8005c80:	d504      	bpl.n	8005c8c <HAL_DMA_IRQHandler+0x538>
          if (++count > timeout)
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	3301      	adds	r3, #1
 8005c86:	428b      	cmp	r3, r1
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	d9f7      	bls.n	8005c7c <HAL_DMA_IRQHandler+0x528>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c8c:	6813      	ldr	r3, [r2, #0]
 8005c8e:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c90:	bf4c      	ite	mi
 8005c92:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005c94:	2301      	movpl	r3, #1
 8005c96:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005ca0:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f43f ae0a 	beq.w	80058bc <HAL_DMA_IRQHandler+0x168>
          hdma->XferCpltCallback(hdma);
 8005ca8:	4630      	mov	r0, r6
}
 8005caa:	b002      	add	sp, #8
 8005cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8005cb0:	4718      	bx	r3
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cb2:	fa27 f102 	lsr.w	r1, r7, r2
 8005cb6:	07c9      	lsls	r1, r1, #31
 8005cb8:	f53f ae83 	bmi.w	80059c2 <HAL_DMA_IRQHandler+0x26e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cbc:	2104      	movs	r1, #4
 8005cbe:	4091      	lsls	r1, r2
 8005cc0:	420f      	tst	r7, r1
 8005cc2:	f47f aee2 	bne.w	8005a8a <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cc6:	2110      	movs	r1, #16
 8005cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ccc:	4217      	tst	r7, r2
 8005cce:	f47f af31 	bne.w	8005b34 <HAL_DMA_IRQHandler+0x3e0>
 8005cd2:	e745      	b.n	8005b60 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cd4:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8005cd8:	f04f 0c08 	mov.w	ip, #8
 8005cdc:	f00e 021f 	and.w	r2, lr, #31
 8005ce0:	fa0c f102 	lsl.w	r1, ip, r2
 8005ce4:	420f      	tst	r7, r1
 8005ce6:	f47f ae06 	bne.w	80058f6 <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cea:	fa27 f102 	lsr.w	r1, r7, r2
 8005cee:	07c9      	lsls	r1, r1, #31
 8005cf0:	f53f ae67 	bmi.w	80059c2 <HAL_DMA_IRQHandler+0x26e>
 8005cf4:	e66f      	b.n	80059d6 <HAL_DMA_IRQHandler+0x282>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cf6:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8005cfa:	2108      	movs	r1, #8
 8005cfc:	f00e 021f 	and.w	r2, lr, #31
 8005d00:	4091      	lsls	r1, r2
 8005d02:	420f      	tst	r7, r1
 8005d04:	f47f adf7 	bne.w	80058f6 <HAL_DMA_IRQHandler+0x1a2>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d08:	fa27 f102 	lsr.w	r1, r7, r2
 8005d0c:	07c9      	lsls	r1, r1, #31
 8005d0e:	f53f ae58 	bmi.w	80059c2 <HAL_DMA_IRQHandler+0x26e>
 8005d12:	e660      	b.n	80059d6 <HAL_DMA_IRQHandler+0x282>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	0319      	lsls	r1, r3, #12
 8005d18:	f57f af1c 	bpl.w	8005b54 <HAL_DMA_IRQHandler+0x400>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d1c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f47f af1a 	bne.w	8005b58 <HAL_DMA_IRQHandler+0x404>
 8005d24:	e71c      	b.n	8005b60 <HAL_DMA_IRQHandler+0x40c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d26:	f023 0316 	bic.w	r3, r3, #22
 8005d2a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d2c:	6953      	ldr	r3, [r2, #20]
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d32:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d34:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005d36:	b31b      	cbz	r3, 8005d80 <HAL_DMA_IRQHandler+0x62c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d38:	6813      	ldr	r3, [r2, #0]
 8005d3a:	f023 0308 	bic.w	r3, r3, #8
 8005d3e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d40:	233f      	movs	r3, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8005d42:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8005d44:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d46:	408b      	lsls	r3, r1
 8005d48:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8005d4a:	6d33      	ldr	r3, [r6, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8005d4c:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005d50:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1a7      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0x554>
 8005d58:	e5b0      	b.n	80058bc <HAL_DMA_IRQHandler+0x168>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d5a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8005d5e:	f47f af75 	bne.w	8005c4c <HAL_DMA_IRQHandler+0x4f8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d62:	6811      	ldr	r1, [r2, #0]
 8005d64:	f021 0110 	bic.w	r1, r1, #16
 8005d68:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8005d6c:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005d70:	f886 2035 	strb.w	r2, [r6, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8005d74:	e76a      	b.n	8005c4c <HAL_DMA_IRQHandler+0x4f8>
            if(hdma->XferM1CpltCallback != NULL)
 8005d76:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f47f af69 	bne.w	8005c50 <HAL_DMA_IRQHandler+0x4fc>
 8005d7e:	e769      	b.n	8005c54 <HAL_DMA_IRQHandler+0x500>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d80:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1d8      	bne.n	8005d38 <HAL_DMA_IRQHandler+0x5e4>
 8005d86:	e7db      	b.n	8005d40 <HAL_DMA_IRQHandler+0x5ec>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d88:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d8a:	2104      	movs	r1, #4
 8005d8c:	4091      	lsls	r1, r2
 8005d8e:	4239      	tst	r1, r7
 8005d90:	f43f ae85 	beq.w	8005a9e <HAL_DMA_IRQHandler+0x34a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005d94:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d96:	2110      	movs	r1, #16
 8005d98:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9c:	4217      	tst	r7, r2
 8005d9e:	f43f aedf 	beq.w	8005b60 <HAL_DMA_IRQHandler+0x40c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8005da8:	e6c7      	b.n	8005b3a <HAL_DMA_IRQHandler+0x3e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005daa:	2502      	movs	r5, #2
 8005dac:	4085      	lsls	r5, r0
 8005dae:	420d      	tst	r5, r1
 8005db0:	d00b      	beq.n	8005dca <HAL_DMA_IRQHandler+0x676>
 8005db2:	0797      	lsls	r7, r2, #30
 8005db4:	d509      	bpl.n	8005dca <HAL_DMA_IRQHandler+0x676>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db6:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005db8:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dba:	d534      	bpl.n	8005e26 <HAL_DMA_IRQHandler+0x6d2>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dbc:	03d7      	lsls	r7, r2, #15
 8005dbe:	d43e      	bmi.n	8005e3e <HAL_DMA_IRQHandler+0x6ea>
          if(hdma->XferM1CpltCallback != NULL)
 8005dc0:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f47f af70 	bne.w	8005ca8 <HAL_DMA_IRQHandler+0x554>
 8005dc8:	e578      	b.n	80058bc <HAL_DMA_IRQHandler+0x168>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005dca:	2508      	movs	r5, #8
 8005dcc:	4085      	lsls	r5, r0
 8005dce:	420d      	tst	r5, r1
 8005dd0:	f43f ad74 	beq.w	80058bc <HAL_DMA_IRQHandler+0x168>
 8005dd4:	0715      	lsls	r5, r2, #28
 8005dd6:	f57f ad71 	bpl.w	80058bc <HAL_DMA_IRQHandler+0x168>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dda:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005ddc:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dde:	f022 020e 	bic.w	r2, r2, #14
 8005de2:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005de4:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8005de6:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005de8:	fa03 f000 	lsl.w	r0, r3, r0
 8005dec:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dee:	6573      	str	r3, [r6, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8005df0:	f886 1034 	strb.w	r1, [r6, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005df4:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	f43f ad5f 	beq.w	80058bc <HAL_DMA_IRQHandler+0x168>
        hdma->XferErrorCallback(hdma);
 8005dfe:	4630      	mov	r0, r6
}
 8005e00:	b002      	add	sp, #8
 8005e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8005e06:	4710      	bx	r2
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005e08:	6813      	ldr	r3, [r2, #0]
 8005e0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005e0e:	e70e      	b.n	8005c2e <HAL_DMA_IRQHandler+0x4da>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e10:	0692      	lsls	r2, r2, #26
 8005e12:	d403      	bmi.n	8005e1c <HAL_DMA_IRQHandler+0x6c8>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	f022 0204 	bic.w	r2, r2, #4
 8005e1a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005e1c:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f47f af42 	bne.w	8005ca8 <HAL_DMA_IRQHandler+0x554>
 8005e24:	e54a      	b.n	80058bc <HAL_DMA_IRQHandler+0x168>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e26:	f012 0220 	ands.w	r2, r2, #32
 8005e2a:	d108      	bne.n	8005e3e <HAL_DMA_IRQHandler+0x6ea>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e2c:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005e2e:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e30:	f021 010a 	bic.w	r1, r1, #10
 8005e34:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005e36:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005e3a:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005e3e:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f47f af31 	bne.w	8005ca8 <HAL_DMA_IRQHandler+0x554>
 8005e46:	e539      	b.n	80058bc <HAL_DMA_IRQHandler+0x168>
 8005e48:	400204b8 	.word	0x400204b8
 8005e4c:	1b4e81b5 	.word	0x1b4e81b5

08005e50 <HAL_DMA_GetState>:
  return hdma->State;
 8005e50:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005e58:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8005e5a:	4770      	bx	lr

08005e5c <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d035      	beq.n	8005ecc <HAL_DMA2D_Init+0x70>
{
 8005e60:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005e62:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8005e66:	4604      	mov	r4, r0
 8005e68:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005e6c:	b34b      	cbz	r3, 8005ec2 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e6e:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e70:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e72:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e74:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e78:	69e1      	ldr	r1, [r4, #28]
 8005e7a:	681d      	ldr	r5, [r3, #0]
 8005e7c:	4814      	ldr	r0, [pc, #80]	@ (8005ed0 <HAL_DMA2D_Init+0x74>)
 8005e7e:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005e80:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e82:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e84:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e86:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005e88:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005e8a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005e8c:	4302      	orrs	r2, r0
 8005e8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005e90:	4810      	ldr	r0, [pc, #64]	@ (8005ed4 <HAL_DMA2D_Init+0x78>)
 8005e92:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e94:	4910      	ldr	r1, [pc, #64]	@ (8005ed8 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005e96:	4302      	orrs	r2, r0
 8005e98:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005e9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e9c:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005e9e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ea2:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005ea4:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ea6:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005ea8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005eaa:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005eae:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005eb0:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005eb8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005eba:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ebc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8005ec2:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 8005ec6:	f7fc ff7d 	bl	8002dc4 <HAL_DMA2D_MspInit>
 8005eca:	e7d0      	b.n	8005e6e <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 8005ecc:	2001      	movs	r0, #1
}
 8005ece:	4770      	bx	lr
 8005ed0:	fff8ffbf 	.word	0xfff8ffbf
 8005ed4:	fffffef8 	.word	0xfffffef8
 8005ed8:	ffff0000 	.word	0xffff0000

08005edc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005edc:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ede:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8005ee2:	2c01      	cmp	r4, #1
 8005ee4:	d03a      	beq.n	8005f5c <HAL_DMA2D_Start+0x80>
 8005ee6:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005ee8:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 8005eea:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005eee:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005ef0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ef4:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005ef8:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005efc:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005efe:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005f02:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 8005f06:	ea43 030c 	orr.w	r3, r3, ip
 8005f0a:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005f0c:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005f0e:	d00a      	beq.n	8005f26 <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005f10:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 8005f14:	d025      	beq.n	8005f62 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005f16:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8005f18:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005f1a:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	6023      	str	r3, [r4, #0]
}
 8005f22:	bc70      	pop	{r4, r5, r6}
 8005f24:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005f26:	6883      	ldr	r3, [r0, #8]
 8005f28:	b1b3      	cbz	r3, 8005f58 <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d026      	beq.n	8005f7c <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f2e:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005f30:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005f34:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005f38:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f3a:	d022      	beq.n	8005f82 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005f3c:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005f3e:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005f42:	d010      	beq.n	8005f66 <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 8005f44:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 8005f46:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005f48:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8005f4a:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005f4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8005f50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005f54:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005f58:	63a1      	str	r1, [r4, #56]	@ 0x38
 8005f5a:	e7dd      	b.n	8005f18 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 8005f5c:	2002      	movs	r0, #2
}
 8005f5e:	bc70      	pop	{r4, r5, r6}
 8005f60:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005f62:	6161      	str	r1, [r4, #20]
 8005f64:	e7d8      	b.n	8005f18 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 8005f66:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 8005f68:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005f6a:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8005f6c:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005f6e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8005f72:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8005f76:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8005f7a:	e7ed      	b.n	8005f58 <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 8005f7c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8005f80:	e7ea      	b.n	8005f58 <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 8005f82:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 8005f84:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005f86:	02db      	lsls	r3, r3, #11
 8005f88:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8005f8c:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8005f90:	e7e2      	b.n	8005f58 <HAL_DMA2D_Start+0x7c>
 8005f92:	bf00      	nop

08005f94 <HAL_DMA2D_PollForTransfer>:
{
 8005f94:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8005f96:	2300      	movs	r3, #0
{
 8005f98:	b082      	sub	sp, #8
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8005f9e:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005fa0:	6803      	ldr	r3, [r0, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	07d6      	lsls	r6, r2, #31
 8005fa6:	d40f      	bmi.n	8005fc8 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005fa8:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005faa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005fac:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8005fae:	0691      	lsls	r1, r2, #26
 8005fb0:	d432      	bmi.n	8006018 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005fb2:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fb4:	2201      	movs	r2, #1
  return HAL_OK;
 8005fb6:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005fb8:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fba:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8005fc4:	b002      	add	sp, #8
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8005fc8:	f7fd fae6 	bl	8003598 <HAL_GetTick>
 8005fcc:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005fce:	1c68      	adds	r0, r5, #1
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	d152      	bne.n	800607a <HAL_DMA2D_PollForTransfer+0xe6>
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	0796      	lsls	r6, r2, #30
 8005fd8:	d4e6      	bmi.n	8005fa8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005fde:	9a01      	ldr	r2, [sp, #4]
 8005fe0:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8005fe4:	d0f6      	beq.n	8005fd4 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005fe6:	9a01      	ldr	r2, [sp, #4]
 8005fe8:	0691      	lsls	r1, r2, #26
 8005fea:	d503      	bpl.n	8005ff4 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005fec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fee:	f042 0202 	orr.w	r2, r2, #2
 8005ff2:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ff4:	9a01      	ldr	r2, [sp, #4]
 8005ff6:	07d2      	lsls	r2, r2, #31
 8005ff8:	d503      	bpl.n	8006002 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ffc:	f042 0201 	orr.w	r2, r2, #1
 8006000:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006002:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006004:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006006:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006008:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800600c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 800600e:	2300      	movs	r3, #0
 8006010:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8006014:	b002      	add	sp, #8
 8006016:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8006018:	f7fd fabe 	bl	8003598 <HAL_GetTick>
 800601c:	1c6a      	adds	r2, r5, #1
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800601e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006020:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006022:	d13b      	bne.n	800609c <HAL_DMA2D_PollForTransfer+0x108>
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	06d1      	lsls	r1, r2, #27
 8006028:	d4c3      	bmi.n	8005fb2 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800602e:	9a01      	ldr	r2, [sp, #4]
 8006030:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8006034:	d0f6      	beq.n	8006024 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006036:	9a01      	ldr	r2, [sp, #4]
 8006038:	0716      	lsls	r6, r2, #28
 800603a:	d503      	bpl.n	8006044 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800603c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800603e:	f042 0204 	orr.w	r2, r2, #4
 8006042:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006044:	9a01      	ldr	r2, [sp, #4]
 8006046:	0695      	lsls	r5, r2, #26
 8006048:	d503      	bpl.n	8006052 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800604a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800604c:	f042 0202 	orr.w	r2, r2, #2
 8006050:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006052:	9a01      	ldr	r2, [sp, #4]
 8006054:	07d0      	lsls	r0, r2, #31
 8006056:	d503      	bpl.n	8006060 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006058:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006060:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006062:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006064:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006066:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800606a:	e7cf      	b.n	800600c <HAL_DMA2D_PollForTransfer+0x78>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800606c:	f7fd fa94 	bl	8003598 <HAL_GetTick>
 8006070:	1b80      	subs	r0, r0, r6
 8006072:	42a8      	cmp	r0, r5
 8006074:	d81c      	bhi.n	80060b0 <HAL_DMA2D_PollForTransfer+0x11c>
 8006076:	b1dd      	cbz	r5, 80060b0 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	0790      	lsls	r0, r2, #30
 800607e:	d493      	bmi.n	8005fa8 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006084:	9a01      	ldr	r2, [sp, #4]
 8006086:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800608a:	d0ef      	beq.n	800606c <HAL_DMA2D_PollForTransfer+0xd8>
 800608c:	e7ab      	b.n	8005fe6 <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fd fa83 	bl	8003598 <HAL_GetTick>
 8006092:	1b80      	subs	r0, r0, r6
 8006094:	42a8      	cmp	r0, r5
 8006096:	d80b      	bhi.n	80060b0 <HAL_DMA2D_PollForTransfer+0x11c>
 8006098:	b155      	cbz	r5, 80060b0 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	06d2      	lsls	r2, r2, #27
 80060a0:	d487      	bmi.n	8005fb2 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80060a6:	9a01      	ldr	r2, [sp, #4]
 80060a8:	f012 0f29 	tst.w	r2, #41	@ 0x29
 80060ac:	d0ef      	beq.n	800608e <HAL_DMA2D_PollForTransfer+0xfa>
 80060ae:	e7c2      	b.n	8006036 <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80060b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80060b2:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 80060b4:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80060b6:	f043 0320 	orr.w	r3, r3, #32
 80060ba:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80060bc:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 80060c0:	e77d      	b.n	8005fbe <HAL_DMA2D_PollForTransfer+0x2a>
 80060c2:	bf00      	nop

080060c4 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80060c4:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 80060c8:	2a01      	cmp	r2, #1
 80060ca:	d05f      	beq.n	800618c <HAL_DMA2D_ConfigLayer+0xc8>
 80060cc:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060ce:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80060d2:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060d4:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80060d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 80060dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80060de:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80060e0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 80060e4:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80060e8:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060ea:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80060ec:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80060ee:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80060f0:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060f6:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80060fa:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80060fc:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060fe:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006102:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006106:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006108:	d923      	bls.n	8006152 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800610a:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800610e:	b971      	cbnz	r1, 800612e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006110:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006112:	491f      	ldr	r1, [pc, #124]	@ (8006190 <HAL_DMA2D_ConfigLayer+0xcc>)
 8006114:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006116:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006118:	4311      	orrs	r1, r2
 800611a:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800611c:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 800611e:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006120:	2101      	movs	r1, #1
  return HAL_OK;
 8006122:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006124:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 8006128:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 800612c:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800612e:	2d0b      	cmp	r5, #11
 8006130:	d12a      	bne.n	8006188 <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006132:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8006134:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 8006138:	4816      	ldr	r0, [pc, #88]	@ (8006194 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800613a:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800613e:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006140:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006144:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006146:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800614a:	430a      	orrs	r2, r1
 800614c:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800614e:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006150:	e7e5      	b.n	800611e <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006152:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 8006156:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006158:	b959      	cbnz	r1, 8006172 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800615a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800615c:	490c      	ldr	r1, [pc, #48]	@ (8006190 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800615e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006160:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006162:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006164:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006166:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800616a:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800616c:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800616e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8006170:	e7d5      	b.n	800611e <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006172:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006174:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006178:	4905      	ldr	r1, [pc, #20]	@ (8006190 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800617a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800617c:	4029      	ands	r1, r5
 800617e:	4311      	orrs	r1, r2
 8006180:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006182:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006184:	6226      	str	r6, [r4, #32]
 8006186:	e7ca      	b.n	800611e <HAL_DMA2D_ConfigLayer+0x5a>
 8006188:	4801      	ldr	r0, [pc, #4]	@ (8006190 <HAL_DMA2D_ConfigLayer+0xcc>)
 800618a:	e7d6      	b.n	800613a <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 800618c:	2002      	movs	r0, #2
}
 800618e:	4770      	bx	lr
 8006190:	00ccfff0 	.word	0x00ccfff0
 8006194:	00c0fff0 	.word	0x00c0fff0

08006198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800619c:	680c      	ldr	r4, [r1, #0]
{
 800619e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061a0:	2c00      	cmp	r4, #0
 80061a2:	f000 80a5 	beq.w	80062f0 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 80061a6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061a8:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061ac:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061b0:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061b2:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 80061b6:	ea1c 0a04 	ands.w	sl, ip, r4
 80061ba:	f000 8094 	beq.w	80062e6 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061be:	9900      	ldr	r1, [sp, #0]
 80061c0:	005f      	lsls	r7, r3, #1
 80061c2:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061c4:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061c6:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061ca:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061ce:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061d2:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061d4:	f1b8 0f01 	cmp.w	r8, #1
 80061d8:	f240 808d 	bls.w	80062f6 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061dc:	2a03      	cmp	r2, #3
 80061de:	f040 80cb 	bne.w	8006378 <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061e2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80061e4:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061e6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061ea:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ee:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 80061f2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061f4:	d077      	beq.n	80062e6 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061f6:	4e7f      	ldr	r6, [pc, #508]	@ (80063f4 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061f8:	f003 0703 	and.w	r7, r3, #3
 80061fc:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061fe:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006202:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006204:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006208:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800620c:	497a      	ldr	r1, [pc, #488]	@ (80063f8 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800620e:	f8c6 2154 	str.w	r2, [r6, #340]	@ 0x154
 8006212:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
 8006216:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800621a:	4288      	cmp	r0, r1
 800621c:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006220:	f002 0202 	and.w	r2, r2, #2
 8006224:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006228:	9203      	str	r2, [sp, #12]
 800622a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800622c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800622e:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006232:	d031      	beq.n	8006298 <HAL_GPIO_Init+0x100>
 8006234:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006238:	4288      	cmp	r0, r1
 800623a:	f000 80b0 	beq.w	800639e <HAL_GPIO_Init+0x206>
 800623e:	496f      	ldr	r1, [pc, #444]	@ (80063fc <HAL_GPIO_Init+0x264>)
 8006240:	4288      	cmp	r0, r1
 8006242:	f000 80b2 	beq.w	80063aa <HAL_GPIO_Init+0x212>
 8006246:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8006400 <HAL_GPIO_Init+0x268>
 800624a:	4560      	cmp	r0, ip
 800624c:	f000 80a1 	beq.w	8006392 <HAL_GPIO_Init+0x1fa>
 8006250:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8006404 <HAL_GPIO_Init+0x26c>
 8006254:	4560      	cmp	r0, ip
 8006256:	f000 80b4 	beq.w	80063c2 <HAL_GPIO_Init+0x22a>
 800625a:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8006408 <HAL_GPIO_Init+0x270>
 800625e:	4560      	cmp	r0, ip
 8006260:	f000 80b5 	beq.w	80063ce <HAL_GPIO_Init+0x236>
 8006264:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 800640c <HAL_GPIO_Init+0x274>
 8006268:	4560      	cmp	r0, ip
 800626a:	f000 80a4 	beq.w	80063b6 <HAL_GPIO_Init+0x21e>
 800626e:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8006410 <HAL_GPIO_Init+0x278>
 8006272:	4560      	cmp	r0, ip
 8006274:	f000 80b1 	beq.w	80063da <HAL_GPIO_Init+0x242>
 8006278:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8006414 <HAL_GPIO_Init+0x27c>
 800627c:	4560      	cmp	r0, ip
 800627e:	f000 80b2 	beq.w	80063e6 <HAL_GPIO_Init+0x24e>
 8006282:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8006418 <HAL_GPIO_Init+0x280>
 8006286:	4560      	cmp	r0, ip
 8006288:	bf0c      	ite	eq
 800628a:	f04f 0c09 	moveq.w	ip, #9
 800628e:	f04f 0c0a 	movne.w	ip, #10
 8006292:	fa0c f707 	lsl.w	r7, ip, r7
 8006296:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006298:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800629a:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800629c:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 80062a0:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 80062a4:	bf4c      	ite	mi
 80062a6:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 80062aa:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062ac:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 80062ae:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 80062b2:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 80062b6:	bf54      	ite	pl
 80062b8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80062ba:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062be:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80062c0:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80062c4:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80062c8:	bf54      	ite	pl
 80062ca:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80062cc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062d0:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80062d2:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80062d6:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80062da:	bf54      	ite	pl
 80062dc:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80062de:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062e2:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 80062e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062e8:	fa34 f203 	lsrs.w	r2, r4, r3
 80062ec:	f47f af61 	bne.w	80061b2 <HAL_GPIO_Init+0x1a>
  }
}
 80062f0:	b005      	add	sp, #20
 80062f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062f6:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062f8:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 80062fa:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062fe:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006300:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006304:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006308:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800630a:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800630e:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8006310:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006314:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8006318:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800631c:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006320:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006324:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8006328:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800632c:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8006330:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006334:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006338:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800633c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006340:	f47f af4f 	bne.w	80061e2 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006344:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006348:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 800634a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800634e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006352:	6909      	ldr	r1, [r1, #16]
 8006354:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8006358:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 800635c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006360:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006362:	210f      	movs	r1, #15
 8006364:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006368:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800636a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800636e:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8006372:	f8c8 c020 	str.w	ip, [r8, #32]
 8006376:	e734      	b.n	80061e2 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006378:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 800637a:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800637e:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006380:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006384:	fa01 fc07 	lsl.w	ip, r1, r7
 8006388:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800638c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006390:	e727      	b.n	80061e2 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006392:	f04f 0c03 	mov.w	ip, #3
 8006396:	fa0c f707 	lsl.w	r7, ip, r7
 800639a:	433a      	orrs	r2, r7
 800639c:	e77c      	b.n	8006298 <HAL_GPIO_Init+0x100>
 800639e:	f04f 0c01 	mov.w	ip, #1
 80063a2:	fa0c f707 	lsl.w	r7, ip, r7
 80063a6:	433a      	orrs	r2, r7
 80063a8:	e776      	b.n	8006298 <HAL_GPIO_Init+0x100>
 80063aa:	f04f 0c02 	mov.w	ip, #2
 80063ae:	fa0c f707 	lsl.w	r7, ip, r7
 80063b2:	433a      	orrs	r2, r7
 80063b4:	e770      	b.n	8006298 <HAL_GPIO_Init+0x100>
 80063b6:	f04f 0c06 	mov.w	ip, #6
 80063ba:	fa0c f707 	lsl.w	r7, ip, r7
 80063be:	433a      	orrs	r2, r7
 80063c0:	e76a      	b.n	8006298 <HAL_GPIO_Init+0x100>
 80063c2:	f04f 0c04 	mov.w	ip, #4
 80063c6:	fa0c f707 	lsl.w	r7, ip, r7
 80063ca:	433a      	orrs	r2, r7
 80063cc:	e764      	b.n	8006298 <HAL_GPIO_Init+0x100>
 80063ce:	f04f 0c05 	mov.w	ip, #5
 80063d2:	fa0c f707 	lsl.w	r7, ip, r7
 80063d6:	433a      	orrs	r2, r7
 80063d8:	e75e      	b.n	8006298 <HAL_GPIO_Init+0x100>
 80063da:	f04f 0c07 	mov.w	ip, #7
 80063de:	fa0c f707 	lsl.w	r7, ip, r7
 80063e2:	433a      	orrs	r2, r7
 80063e4:	e758      	b.n	8006298 <HAL_GPIO_Init+0x100>
 80063e6:	f04f 0c08 	mov.w	ip, #8
 80063ea:	fa0c f707 	lsl.w	r7, ip, r7
 80063ee:	433a      	orrs	r2, r7
 80063f0:	e752      	b.n	8006298 <HAL_GPIO_Init+0x100>
 80063f2:	bf00      	nop
 80063f4:	58024400 	.word	0x58024400
 80063f8:	58020000 	.word	0x58020000
 80063fc:	58020800 	.word	0x58020800
 8006400:	58020c00 	.word	0x58020c00
 8006404:	58021000 	.word	0x58021000
 8006408:	58021400 	.word	0x58021400
 800640c:	58021800 	.word	0x58021800
 8006410:	58021c00 	.word	0x58021c00
 8006414:	58022000 	.word	0x58022000
 8006418:	58022400 	.word	0x58022400

0800641c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800641c:	2900      	cmp	r1, #0
 800641e:	f000 80ac 	beq.w	800657a <HAL_GPIO_DeInit+0x15e>
  uint32_t position = 0x00U;
 8006422:	2300      	movs	r3, #0
{
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006428:	2601      	movs	r6, #1
{
 800642a:	b083      	sub	sp, #12
 800642c:	f8df a168 	ldr.w	sl, [pc, #360]	@ 8006598 <HAL_GPIO_DeInit+0x17c>
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006430:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006434:	f04f 0903 	mov.w	r9, #3
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006438:	fa06 f203 	lsl.w	r2, r6, r3
    if (iocurrent != 0x00U)
 800643c:	ea12 0c01 	ands.w	ip, r2, r1
 8006440:	d073      	beq.n	800652a <HAL_GPIO_DeInit+0x10e>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006442:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006446:	f003 0403 	and.w	r4, r3, #3
 800644a:	4455      	add	r5, sl
 800644c:	00a4      	lsls	r4, r4, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800644e:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006450:	fa08 fe04 	lsl.w	lr, r8, r4
 8006454:	ea0e 0707 	and.w	r7, lr, r7
 8006458:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800645a:	4f4b      	ldr	r7, [pc, #300]	@ (8006588 <HAL_GPIO_DeInit+0x16c>)
 800645c:	42b8      	cmp	r0, r7
 800645e:	d027      	beq.n	80064b0 <HAL_GPIO_DeInit+0x94>
 8006460:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006464:	42b8      	cmp	r0, r7
 8006466:	d067      	beq.n	8006538 <HAL_GPIO_DeInit+0x11c>
 8006468:	4f48      	ldr	r7, [pc, #288]	@ (800658c <HAL_GPIO_DeInit+0x170>)
 800646a:	42b8      	cmp	r0, r7
 800646c:	d067      	beq.n	800653e <HAL_GPIO_DeInit+0x122>
 800646e:	4f48      	ldr	r7, [pc, #288]	@ (8006590 <HAL_GPIO_DeInit+0x174>)
 8006470:	42b8      	cmp	r0, r7
 8006472:	d06e      	beq.n	8006552 <HAL_GPIO_DeInit+0x136>
 8006474:	4f47      	ldr	r7, [pc, #284]	@ (8006594 <HAL_GPIO_DeInit+0x178>)
 8006476:	42b8      	cmp	r0, r7
 8006478:	d070      	beq.n	800655c <HAL_GPIO_DeInit+0x140>
 800647a:	f8df b120 	ldr.w	fp, [pc, #288]	@ 800659c <HAL_GPIO_DeInit+0x180>
 800647e:	4558      	cmp	r0, fp
 8006480:	d062      	beq.n	8006548 <HAL_GPIO_DeInit+0x12c>
 8006482:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 80065a0 <HAL_GPIO_DeInit+0x184>
 8006486:	4558      	cmp	r0, fp
 8006488:	d072      	beq.n	8006570 <HAL_GPIO_DeInit+0x154>
 800648a:	f8df b118 	ldr.w	fp, [pc, #280]	@ 80065a4 <HAL_GPIO_DeInit+0x188>
 800648e:	4558      	cmp	r0, fp
 8006490:	d074      	beq.n	800657c <HAL_GPIO_DeInit+0x160>
 8006492:	f8df b114 	ldr.w	fp, [pc, #276]	@ 80065a8 <HAL_GPIO_DeInit+0x18c>
 8006496:	4558      	cmp	r0, fp
 8006498:	d065      	beq.n	8006566 <HAL_GPIO_DeInit+0x14a>
 800649a:	f8df b110 	ldr.w	fp, [pc, #272]	@ 80065ac <HAL_GPIO_DeInit+0x190>
 800649e:	4558      	cmp	r0, fp
 80064a0:	bf14      	ite	ne
 80064a2:	f04f 0b0a 	movne.w	fp, #10
 80064a6:	f04f 0b09 	moveq.w	fp, #9
 80064aa:	fa0b f404 	lsl.w	r4, fp, r4
 80064ae:	e000      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 80064b0:	2400      	movs	r4, #0
 80064b2:	9f01      	ldr	r7, [sp, #4]
 80064b4:	42a7      	cmp	r7, r4
 80064b6:	d119      	bne.n	80064ec <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80064b8:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80064bc:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80064c0:	ea27 070c 	bic.w	r7, r7, ip
 80064c4:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80064c8:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 80064cc:	ea27 070c 	bic.w	r7, r7, ip
 80064d0:	f8c4 7084 	str.w	r7, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80064d4:	6867      	ldr	r7, [r4, #4]
 80064d6:	ea27 070c 	bic.w	r7, r7, ip
 80064da:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80064dc:	6827      	ldr	r7, [r4, #0]
 80064de:	ea27 070c 	bic.w	r7, r7, ip
 80064e2:	6027      	str	r7, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80064e4:	68ac      	ldr	r4, [r5, #8]
 80064e6:	ea24 040e 	bic.w	r4, r4, lr
 80064ea:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80064ec:	005d      	lsls	r5, r3, #1
 80064ee:	6804      	ldr	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80064f0:	08df      	lsrs	r7, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80064f2:	fa09 f505 	lsl.w	r5, r9, r5
 80064f6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80064fa:	432c      	orrs	r4, r5
 80064fc:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80064fe:	f003 0407 	and.w	r4, r3, #7
 8006502:	f8d7 c020 	ldr.w	ip, [r7, #32]
 8006506:	00a4      	lsls	r4, r4, #2
 8006508:	fa08 f404 	lsl.w	r4, r8, r4
 800650c:	ea2c 0404 	bic.w	r4, ip, r4
 8006510:	623c      	str	r4, [r7, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006512:	68c4      	ldr	r4, [r0, #12]
 8006514:	ea24 0405 	bic.w	r4, r4, r5
 8006518:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800651a:	6844      	ldr	r4, [r0, #4]
 800651c:	ea24 0202 	bic.w	r2, r4, r2
 8006520:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006522:	6882      	ldr	r2, [r0, #8]
 8006524:	ea22 0205 	bic.w	r2, r2, r5
 8006528:	6082      	str	r2, [r0, #8]
    }

    position++;
 800652a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800652c:	fa31 f203 	lsrs.w	r2, r1, r3
 8006530:	d182      	bne.n	8006438 <HAL_GPIO_DeInit+0x1c>
  }
}
 8006532:	b003      	add	sp, #12
 8006534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006538:	fa06 f404 	lsl.w	r4, r6, r4
 800653c:	e7b9      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 800653e:	f04f 0b02 	mov.w	fp, #2
 8006542:	fa0b f404 	lsl.w	r4, fp, r4
 8006546:	e7b4      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 8006548:	f04f 0b05 	mov.w	fp, #5
 800654c:	fa0b f404 	lsl.w	r4, fp, r4
 8006550:	e7af      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 8006552:	f04f 0b03 	mov.w	fp, #3
 8006556:	fa0b f404 	lsl.w	r4, fp, r4
 800655a:	e7aa      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 800655c:	f04f 0b04 	mov.w	fp, #4
 8006560:	fa0b f404 	lsl.w	r4, fp, r4
 8006564:	e7a5      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 8006566:	f04f 0b08 	mov.w	fp, #8
 800656a:	fa0b f404 	lsl.w	r4, fp, r4
 800656e:	e7a0      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 8006570:	f04f 0b06 	mov.w	fp, #6
 8006574:	fa0b f404 	lsl.w	r4, fp, r4
 8006578:	e79b      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 800657a:	4770      	bx	lr
 800657c:	f04f 0b07 	mov.w	fp, #7
 8006580:	fa0b f404 	lsl.w	r4, fp, r4
 8006584:	e795      	b.n	80064b2 <HAL_GPIO_DeInit+0x96>
 8006586:	bf00      	nop
 8006588:	58020000 	.word	0x58020000
 800658c:	58020800 	.word	0x58020800
 8006590:	58020c00 	.word	0x58020c00
 8006594:	58021000 	.word	0x58021000
 8006598:	58000400 	.word	0x58000400
 800659c:	58021400 	.word	0x58021400
 80065a0:	58021800 	.word	0x58021800
 80065a4:	58021c00 	.word	0x58021c00
 80065a8:	58022000 	.word	0x58022000
 80065ac:	58022400 	.word	0x58022400

080065b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80065b0:	6903      	ldr	r3, [r0, #16]
 80065b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80065b4:	bf14      	ite	ne
 80065b6:	2001      	movne	r0, #1
 80065b8:	2000      	moveq	r0, #0
 80065ba:	4770      	bx	lr

080065bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065bc:	b902      	cbnz	r2, 80065c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80065be:	0409      	lsls	r1, r1, #16
 80065c0:	6181      	str	r1, [r0, #24]
  }
}
 80065c2:	4770      	bx	lr

080065c4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80065c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c8:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 80065cc:	4201      	tst	r1, r0
 80065ce:	d100      	bne.n	80065d2 <HAL_GPIO_EXTI_IRQHandler+0xe>
 80065d0:	4770      	bx	lr
{
 80065d2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065d4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065d8:	f7fc fb92 	bl	8002d00 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80065dc:	bd08      	pop	{r3, pc}
 80065de:	bf00      	nop

080065e0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d053      	beq.n	800668c <HAL_I2C_Init+0xac>
{
 80065e4:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065e6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80065ea:	4604      	mov	r4, r0
 80065ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d046      	beq.n	8006682 <HAL_I2C_Init+0xa2>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065f4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80065f6:	2124      	movs	r1, #36	@ 0x24

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80065f8:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80065fa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80065fe:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006604:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8006606:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800660a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800660c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800660e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006610:	689a      	ldr	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006612:	68a1      	ldr	r1, [r4, #8]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006614:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006618:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800661a:	d009      	beq.n	8006630 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800661c:	f441 4104 	orr.w	r1, r1, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006620:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006622:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006624:	d107      	bne.n	8006636 <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	e006      	b.n	800663e <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006630:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006634:	6099      	str	r1, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800663c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800663e:	6858      	ldr	r0, [r3, #4]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8006640:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006644:	4912      	ldr	r1, [pc, #72]	@ (8006690 <HAL_I2C_Init+0xb0>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006646:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006648:	4301      	orrs	r1, r0
 800664a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800664c:	68d9      	ldr	r1, [r3, #12]
 800664e:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8006652:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006654:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006658:	4302      	orrs	r2, r0
 800665a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800665e:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006662:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006664:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006666:	4301      	orrs	r1, r0
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8006668:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800666a:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800666c:	6819      	ldr	r1, [r3, #0]
 800666e:	f041 0101 	orr.w	r1, r1, #1
 8006672:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006674:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006676:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800667a:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800667c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
}
 8006680:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006682:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006686:	f7fc fd6f 	bl	8003168 <HAL_I2C_MspInit>
 800668a:	e7b3      	b.n	80065f4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800668c:	2001      	movs	r0, #1
}
 800668e:	4770      	bx	lr
 8006690:	02008000 	.word	0x02008000

08006694 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
 8006694:	4684      	mov	ip, r0
 8006696:	b470      	push	{r4, r5, r6}
  uint32_t sizetoxfer = 0U;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006698:	f89c 4041 	ldrb.w	r4, [ip, #65]	@ 0x41
{
 800669c:	9803      	ldr	r0, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800669e:	2c20      	cmp	r4, #32
 80066a0:	d177      	bne.n	8006792 <HAL_I2C_Master_Seq_Transmit_IT+0xfe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a2:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80066a6:	2c01      	cmp	r4, #1
 80066a8:	d073      	beq.n	8006792 <HAL_I2C_Master_Seq_Transmit_IT+0xfe>

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066aa:	2421      	movs	r4, #33	@ 0x21
    {
      hi2c->XferSize = hi2c->XferCount;
      xfermode = hi2c->XferOptions;
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 80066ac:	f020 7600 	bic.w	r6, r0, #33554432	@ 0x2000000
    hi2c->pBuffPtr    = pData;
 80066b0:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066b4:	f88c 4041 	strb.w	r4, [ip, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80066b8:	2410      	movs	r4, #16
 80066ba:	f88c 4042 	strb.w	r4, [ip, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066be:	2400      	movs	r4, #0
 80066c0:	f8cc 4044 	str.w	r4, [ip, #68]	@ 0x44
    __HAL_LOCK(hi2c);
 80066c4:	2401      	movs	r4, #1
    hi2c->XferCount   = Size;
 80066c6:	f8ac 302a 	strh.w	r3, [ip, #42]	@ 0x2a
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80066ca:	4b44      	ldr	r3, [pc, #272]	@ (80067dc <HAL_I2C_Master_Seq_Transmit_IT+0x148>)
    hi2c->XferOptions = XferOptions;
 80066cc:	f8cc 002c 	str.w	r0, [ip, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80066d0:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066d4:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
    __HAL_LOCK(hi2c);
 80066d8:	f88c 4040 	strb.w	r4, [ip, #64]	@ 0x40
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2bff      	cmp	r3, #255	@ 0xff
 80066e0:	d83a      	bhi.n	8006758 <HAL_I2C_Master_Seq_Transmit_IT+0xc4>
      hi2c->XferSize = hi2c->XferCount;
 80066e2:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 80066e6:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
      hi2c->XferSize = hi2c->XferCount;
 80066ea:	b29b      	uxth	r3, r3
    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 80066ec:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d136      	bne.n	8006762 <HAL_I2C_Master_Seq_Transmit_IT+0xce>
 80066f4:	f8dc 4000 	ldr.w	r4, [ip]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 80066f8:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 80066fc:	2b11      	cmp	r3, #17
 80066fe:	d061      	beq.n	80067c4 <HAL_I2C_Master_Seq_Transmit_IT+0x130>
 8006700:	2300      	movs	r3, #0
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006702:	f8dc 202c 	ldr.w	r2, [ip, #44]	@ 0x2c
 8006706:	2aaa      	cmp	r2, #170	@ 0xaa
 8006708:	d058      	beq.n	80067bc <HAL_I2C_Master_Seq_Transmit_IT+0x128>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800670a:	f8dc 202c 	ldr.w	r2, [ip, #44]	@ 0x2c
 800670e:	f5b2 4f2a 	cmp.w	r2, #43520	@ 0xaa00
 8006712:	d04e      	beq.n	80067b2 <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8006714:	f8bc 202a 	ldrh.w	r2, [ip, #42]	@ 0x2a
 8006718:	b292      	uxth	r2, r2
 800671a:	2aff      	cmp	r2, #255	@ 0xff
 800671c:	d83c      	bhi.n	8006798 <HAL_I2C_Master_Seq_Transmit_IT+0x104>
        xfermode = hi2c->XferOptions;
 800671e:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
 8006722:	4a2f      	ldr	r2, [pc, #188]	@ (80067e0 <HAL_I2C_Master_Seq_Transmit_IT+0x14c>)
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8006724:	482f      	ldr	r0, [pc, #188]	@ (80067e4 <HAL_I2C_Master_Seq_Transmit_IT+0x150>)
    if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 8006726:	2e00      	cmp	r6, #0
 8006728:	d03a      	beq.n	80067a0 <HAL_I2C_Master_Seq_Transmit_IT+0x10c>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800672a:	f3c1 0309 	ubfx	r3, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800672e:	f89c 1028 	ldrb.w	r1, [ip, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006732:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006736:	432b      	orrs	r3, r5
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006738:	4303      	orrs	r3, r0
  MODIFY_REG(hi2c->Instance->CR2, \
 800673a:	6861      	ldr	r1, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800673c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    __HAL_UNLOCK(hi2c);
 8006740:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, \
 8006742:	400a      	ands	r2, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8006748:	f88c 0040 	strb.w	r0, [ip, #64]	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006752:	6023      	str	r3, [r4, #0]
}
 8006754:	bc70      	pop	{r4, r5, r6}
 8006756:	4770      	bx	lr
 8006758:	23ff      	movs	r3, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 800675a:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800675e:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006762:	f8dc 4000 	ldr.w	r4, [ip]
    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
 8006766:	2e00      	cmp	r6, #0
 8006768:	d1c6      	bne.n	80066f8 <HAL_I2C_Master_Seq_Transmit_IT+0x64>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800676a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800676e:	62a0      	str	r0, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006770:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
      hi2c->XferCount--;
 8006774:	f8bc 202a 	ldrh.w	r2, [ip, #42]	@ 0x2a
 8006778:	3a01      	subs	r2, #1
 800677a:	b292      	uxth	r2, r2
 800677c:	f8ac 202a 	strh.w	r2, [ip, #42]	@ 0x2a
      hi2c->XferSize--;
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	f8ac 2028 	strh.w	r2, [ip, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8006786:	f8dc 2030 	ldr.w	r2, [ip, #48]	@ 0x30
 800678a:	2a11      	cmp	r2, #17
 800678c:	d1b9      	bne.n	8006702 <HAL_I2C_Master_Seq_Transmit_IT+0x6e>
 800678e:	4a16      	ldr	r2, [pc, #88]	@ (80067e8 <HAL_I2C_Master_Seq_Transmit_IT+0x154>)
 8006790:	e007      	b.n	80067a2 <HAL_I2C_Master_Seq_Transmit_IT+0x10e>
    __HAL_LOCK(hi2c);
 8006792:	2002      	movs	r0, #2
}
 8006794:	bc70      	pop	{r4, r5, r6}
 8006796:	4770      	bx	lr
 8006798:	4a11      	ldr	r2, [pc, #68]	@ (80067e0 <HAL_I2C_Master_Seq_Transmit_IT+0x14c>)
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800679a:	4812      	ldr	r0, [pc, #72]	@ (80067e4 <HAL_I2C_Master_Seq_Transmit_IT+0x150>)
    if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
 800679c:	2e00      	cmp	r6, #0
 800679e:	d1c4      	bne.n	800672a <HAL_I2C_Master_Seq_Transmit_IT+0x96>
 80067a0:	4305      	orrs	r5, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067a2:	041b      	lsls	r3, r3, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ac:	4329      	orrs	r1, r5
 80067ae:	430b      	orrs	r3, r1
 80067b0:	e7c3      	b.n	800673a <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80067b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067b6:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
 80067ba:	e7ab      	b.n	8006714 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80067bc:	2200      	movs	r2, #0
 80067be:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
 80067c2:	e7a7      	b.n	8006714 <HAL_I2C_Master_Seq_Transmit_IT+0x80>
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 80067c4:	28aa      	cmp	r0, #170	@ 0xaa
 80067c6:	d09b      	beq.n	8006700 <HAL_I2C_Master_Seq_Transmit_IT+0x6c>
 80067c8:	f5a0 432a 	sub.w	r3, r0, #43520	@ 0xaa00
 80067cc:	fab3 f383 	clz	r3, r3
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d194      	bne.n	8006700 <HAL_I2C_Master_Seq_Transmit_IT+0x6c>
 80067d6:	4a04      	ldr	r2, [pc, #16]	@ (80067e8 <HAL_I2C_Master_Seq_Transmit_IT+0x154>)
      xferrequest = I2C_NO_STARTSTOP;
 80067d8:	4618      	mov	r0, r3
 80067da:	e7a4      	b.n	8006726 <HAL_I2C_Master_Seq_Transmit_IT+0x92>
 80067dc:	08006d0d 	.word	0x08006d0d
 80067e0:	fc009800 	.word	0xfc009800
 80067e4:	80002000 	.word	0x80002000
 80067e8:	fc009c00 	.word	0xfc009c00

080067ec <HAL_I2C_Master_Seq_Receive_IT>:
{
 80067ec:	4684      	mov	ip, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ee:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 80067f2:	2820      	cmp	r0, #32
 80067f4:	d16c      	bne.n	80068d0 <HAL_I2C_Master_Seq_Receive_IT+0xe4>
    __HAL_LOCK(hi2c);
 80067f6:	f89c 0040 	ldrb.w	r0, [ip, #64]	@ 0x40
 80067fa:	2801      	cmp	r0, #1
 80067fc:	d068      	beq.n	80068d0 <HAL_I2C_Master_Seq_Receive_IT+0xe4>
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80067fe:	483b      	ldr	r0, [pc, #236]	@ (80068ec <HAL_I2C_Master_Seq_Receive_IT+0x100>)
{
 8006800:	b530      	push	{r4, r5, lr}
    hi2c->pBuffPtr    = pData;
 8006802:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006806:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006808:	f8cc 0034 	str.w	r0, [ip, #52]	@ 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800680c:	2010      	movs	r0, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800680e:	f88c 2041 	strb.w	r2, [ip, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006812:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006814:	f88c 0042 	strb.w	r0, [ip, #66]	@ 0x42
    __HAL_LOCK(hi2c);
 8006818:	2401      	movs	r4, #1
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800681a:	f8cc 2044 	str.w	r2, [ip, #68]	@ 0x44
    hi2c->XferCount   = Size;
 800681e:	f8ac 302a 	strh.w	r3, [ip, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 8006822:	9b03      	ldr	r3, [sp, #12]
    __HAL_LOCK(hi2c);
 8006824:	f88c 4040 	strb.w	r4, [ip, #64]	@ 0x40
    hi2c->XferOptions = XferOptions;
 8006828:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800682c:	f8bc 202a 	ldrh.w	r2, [ip, #42]	@ 0x2a
 8006830:	b292      	uxth	r2, r2
 8006832:	2aff      	cmp	r2, #255	@ 0xff
 8006834:	d835      	bhi.n	80068a2 <HAL_I2C_Master_Seq_Receive_IT+0xb6>
      hi2c->XferSize = hi2c->XferCount;
 8006836:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 800683a:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800683e:	b2d8      	uxtb	r0, r3
      hi2c->XferSize = hi2c->XferCount;
 8006840:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006842:	0400      	lsls	r0, r0, #16
 8006844:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8006848:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 800684c:	2b12      	cmp	r3, #18
 800684e:	d033      	beq.n	80068b8 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006850:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8006854:	2baa      	cmp	r3, #170	@ 0xaa
 8006856:	d045      	beq.n	80068e4 <HAL_I2C_Master_Seq_Receive_IT+0xf8>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006858:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 800685c:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
 8006860:	d03b      	beq.n	80068da <HAL_I2C_Master_Seq_Receive_IT+0xee>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8006862:	f8bc 302a 	ldrh.w	r3, [ip, #42]	@ 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	2bff      	cmp	r3, #255	@ 0xff
 800686a:	d833      	bhi.n	80068d4 <HAL_I2C_Master_Seq_Receive_IT+0xe8>
        xfermode = hi2c->XferOptions;
 800686c:	f8dc 502c 	ldr.w	r5, [ip, #44]	@ 0x2c
 8006870:	4c1f      	ldr	r4, [pc, #124]	@ (80068f0 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8006872:	4a20      	ldr	r2, [pc, #128]	@ (80068f4 <HAL_I2C_Master_Seq_Receive_IT+0x108>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006874:	f3c1 0309 	ubfx	r3, r1, #0, #10
    __HAL_UNLOCK(hi2c);
 8006878:	f04f 0e00 	mov.w	lr, #0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800687c:	4303      	orrs	r3, r0
    return HAL_OK;
 800687e:	4670      	mov	r0, lr
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006880:	432b      	orrs	r3, r5
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006882:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8006884:	f8dc 2000 	ldr.w	r2, [ip]
 8006888:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800688a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800688e:	4021      	ands	r1, r4
 8006890:	430b      	orrs	r3, r1
 8006892:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8006894:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800689e:	6013      	str	r3, [r2, #0]
}
 80068a0:	bd30      	pop	{r4, r5, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068a2:	23ff      	movs	r3, #255	@ 0xff
 80068a4:	f44f 007f 	mov.w	r0, #16711680	@ 0xff0000
      xfermode = I2C_RELOAD_MODE;
 80068a8:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 80068ac:	f8ac 3028 	strh.w	r3, [ip, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 80068b0:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
 80068b4:	2b12      	cmp	r3, #18
 80068b6:	d1cb      	bne.n	8006850 <HAL_I2C_Master_Seq_Receive_IT+0x64>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	2baa      	cmp	r3, #170	@ 0xaa
 80068bc:	d0c8      	beq.n	8006850 <HAL_I2C_Master_Seq_Receive_IT+0x64>
 80068be:	f5a3 422a 	sub.w	r2, r3, #43520	@ 0xaa00
 80068c2:	fab2 f282 	clz	r2, r2
 80068c6:	0952      	lsrs	r2, r2, #5
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	d1c1      	bne.n	8006850 <HAL_I2C_Master_Seq_Receive_IT+0x64>
 80068cc:	4c0a      	ldr	r4, [pc, #40]	@ (80068f8 <HAL_I2C_Master_Seq_Receive_IT+0x10c>)
 80068ce:	e7d1      	b.n	8006874 <HAL_I2C_Master_Seq_Receive_IT+0x88>
    __HAL_LOCK(hi2c);
 80068d0:	2002      	movs	r0, #2
}
 80068d2:	4770      	bx	lr
 80068d4:	4c06      	ldr	r4, [pc, #24]	@ (80068f0 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 80068d6:	4a07      	ldr	r2, [pc, #28]	@ (80068f4 <HAL_I2C_Master_Seq_Receive_IT+0x108>)
 80068d8:	e7cc      	b.n	8006874 <HAL_I2C_Master_Seq_Receive_IT+0x88>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068de:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 80068e2:	e7be      	b.n	8006862 <HAL_I2C_Master_Seq_Receive_IT+0x76>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 80068ea:	e7ba      	b.n	8006862 <HAL_I2C_Master_Seq_Receive_IT+0x76>
 80068ec:	08006d0d 	.word	0x08006d0d
 80068f0:	fc009800 	.word	0xfc009800
 80068f4:	80002400 	.word	0x80002400
 80068f8:	fc009c00 	.word	0xfc009c00

080068fc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80068fc:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80068fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006900:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006902:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8006904:	b103      	cbz	r3, 8006908 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006906:	4718      	bx	r3
}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop

0800690c <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop

08006910 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006914:	6801      	ldr	r1, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006916:	2200      	movs	r2, #0
{
 8006918:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800691a:	680b      	ldr	r3, [r1, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006920:	045a      	lsls	r2, r3, #17
 8006922:	d525      	bpl.n	8006970 <I2C_ITSlaveSeqCplt+0x5c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006924:	680b      	ldr	r3, [r1, #0]
 8006926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800692a:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800692c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006930:	2b29      	cmp	r3, #41	@ 0x29
 8006932:	d027      	beq.n	8006984 <I2C_ITSlaveSeqCplt+0x70>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006934:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006938:	2b2a      	cmp	r3, #42	@ 0x2a
 800693a:	d000      	beq.n	800693e <I2C_ITSlaveSeqCplt+0x2a>
}
 800693c:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800693e:	2228      	movs	r2, #40	@ 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006940:	2322      	movs	r3, #34	@ 0x22
    __HAL_UNLOCK(hi2c);
 8006942:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006946:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800694a:	6303      	str	r3, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800694c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006950:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006952:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8006956:	2a28      	cmp	r2, #40	@ 0x28
 8006958:	bf14      	ite	ne
 800695a:	f06f 02f4 	mvnne.w	r2, #244	@ 0xf4
 800695e:	f06f 0244 	mvneq.w	r2, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006962:	4013      	ands	r3, r2
 8006964:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006966:	f880 c040 	strb.w	ip, [r0, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800696a:	f7ff ffd1 	bl	8006910 <HAL_I2C_SlaveRxCpltCallback>
}
 800696e:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006970:	041b      	lsls	r3, r3, #16
 8006972:	d5db      	bpl.n	800692c <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006974:	680b      	ldr	r3, [r1, #0]
 8006976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800697a:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800697c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006980:	2b29      	cmp	r3, #41	@ 0x29
 8006982:	d1d7      	bne.n	8006934 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006984:	2228      	movs	r2, #40	@ 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006986:	2321      	movs	r3, #33	@ 0x21
    __HAL_UNLOCK(hi2c);
 8006988:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800698c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006990:	6303      	str	r3, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006992:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006996:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006998:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 800699c:	2a28      	cmp	r2, #40	@ 0x28
 800699e:	bf14      	ite	ne
 80069a0:	f06f 02f2 	mvnne.w	r2, #242	@ 0xf2
 80069a4:	f06f 0242 	mvneq.w	r2, #66	@ 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80069a8:	4013      	ands	r3, r2
 80069aa:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80069ac:	f880 c040 	strb.w	ip, [r0, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069b0:	f7ff ffac 	bl	800690c <HAL_I2C_SlaveTxCpltCallback>
}
 80069b4:	bd08      	pop	{r3, pc}
 80069b6:	bf00      	nop

080069b8 <HAL_I2C_AddrCallback>:
}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop

080069bc <I2C_ITAddrCplt.part.0.constprop.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80069bc:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 80069be:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80069c0:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069c2:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80069c4:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80069c6:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069c8:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80069ca:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 80069cc:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80069d0:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80069d4:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80069d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069da:	d10f      	bne.n	80069fc <I2C_ITAddrCplt.part.0.constprop.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80069dc:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80069e0:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80069e4:	f013 0306 	ands.w	r3, r3, #6
 80069e8:	d106      	bne.n	80069f8 <I2C_ITAddrCplt.part.0.constprop.0+0x3c>
        hi2c->AddrEventCount++;
 80069ea:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 80069ec:	3501      	adds	r5, #1
 80069ee:	6485      	str	r5, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80069f0:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 80069f2:	2d02      	cmp	r5, #2
 80069f4:	d00c      	beq.n	8006a10 <I2C_ITAddrCplt.part.0.constprop.0+0x54>
}
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069f8:	f006 02fe 	and.w	r2, r6, #254	@ 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	f023 03b8 	bic.w	r3, r3, #184	@ 0xb8
 8006a02:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8006a04:	2300      	movs	r3, #0
 8006a06:	f88c 3040 	strb.w	r3, [ip, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a0a:	f7ff ffd5 	bl	80069b8 <HAL_I2C_AddrCallback>
}
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a10:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 8006a12:	6483      	str	r3, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a14:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8006a16:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a1a:	f7ff ffcd 	bl	80069b8 <HAL_I2C_AddrCallback>
}
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}

08006a20 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop

08006a24 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop

08006a28 <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop

08006a2c <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop

08006a30 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop

08006a34 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a34:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8006a36:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
 8006a38:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006a3a:	b10b      	cbz	r3, 8006a40 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8006a40:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006a42:	b10b      	cbz	r3, 8006a48 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a44:	2200      	movs	r2, #0
 8006a46:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a48:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006a4c:	2b60      	cmp	r3, #96	@ 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a4e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a52:	d005      	beq.n	8006a60 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a54:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a56:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006a5a:	f7ff ffe7 	bl	8006a2c <HAL_I2C_ErrorCallback>
}
 8006a5e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006a60:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8006a62:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006a66:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a6a:	6303      	str	r3, [r0, #48]	@ 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a6c:	f7ff ffe0 	bl	8006a30 <HAL_I2C_AbortCpltCallback>
}
 8006a70:	bd08      	pop	{r3, pc}
 8006a72:	bf00      	nop

08006a74 <I2C_ITError>:
{
 8006a74:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a76:	4b57      	ldr	r3, [pc, #348]	@ (8006bd4 <I2C_ITError+0x160>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a78:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a7a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8006a7e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a80:	f880 5042 	strb.w	r5, [r0, #66]	@ 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a84:	3a28      	subs	r2, #40	@ 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a86:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006a88:	8545      	strh	r5, [r0, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006a8a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a8c:	2a02      	cmp	r2, #2
  hi2c->ErrorCode |= ErrorCode;
 8006a8e:	ea41 0103 	orr.w	r1, r1, r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a92:	6803      	ldr	r3, [r0, #0]
  hi2c->ErrorCode |= ErrorCode;
 8006a94:	6441      	str	r1, [r0, #68]	@ 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a96:	d86e      	bhi.n	8006b76 <I2C_ITError+0x102>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a98:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a9c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aa0:	f001 0128 	and.w	r1, r1, #40	@ 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006aa4:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aa6:	f000 0028 	and.w	r0, r0, #40	@ 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aaa:	2928      	cmp	r1, #40	@ 0x28
 8006aac:	bf14      	ite	ne
 8006aae:	f06f 01f6 	mvnne.w	r1, #246	@ 0xf6
 8006ab2:	f06f 0146 	mvneq.w	r1, #70	@ 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ab6:	2828      	cmp	r0, #40	@ 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ab8:	f04f 0028 	mov.w	r0, #40	@ 0x28
 8006abc:	bf18      	it	ne
 8006abe:	f06f 01f6 	mvnne.w	r1, #246	@ 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	4944      	ldr	r1, [pc, #272]	@ (8006bd8 <I2C_ITError+0x164>)
 8006ac6:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ac8:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006acc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
  tmppreviousstate = hi2c->PreviousState;
 8006ace:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006ad0:	6361      	str	r1, [r4, #52]	@ 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006ad2:	b118      	cbz	r0, 8006adc <I2C_ITError+0x68>
 8006ad4:	2a11      	cmp	r2, #17
 8006ad6:	d01e      	beq.n	8006b16 <I2C_ITError+0xa2>
 8006ad8:	2a21      	cmp	r2, #33	@ 0x21
 8006ada:	d01c      	beq.n	8006b16 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006adc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006ade:	b118      	cbz	r0, 8006ae8 <I2C_ITError+0x74>
 8006ae0:	2a12      	cmp	r2, #18
 8006ae2:	d02e      	beq.n	8006b42 <I2C_ITError+0xce>
 8006ae4:	2a22      	cmp	r2, #34	@ 0x22
 8006ae6:	d02c      	beq.n	8006b42 <I2C_ITError+0xce>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ae8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8006aec:	2b60      	cmp	r3, #96	@ 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8006aee:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006af2:	d006      	beq.n	8006b02 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8006af4:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006af6:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006af8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006afc:	f7ff ff96 	bl	8006a2c <HAL_I2C_ErrorCallback>
}
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b04:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006b06:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b0e:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b10:	f7ff ff8e 	bl	8006a30 <HAL_I2C_AbortCpltCallback>
}
 8006b14:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	0451      	lsls	r1, r2, #17
 8006b1a:	d456      	bmi.n	8006bca <I2C_ITError+0x156>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b1c:	f7ff f998 	bl	8005e50 <HAL_DMA_GetState>
 8006b20:	2801      	cmp	r0, #1
 8006b22:	d0e1      	beq.n	8006ae8 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b24:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8006b26:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b28:	4a2c      	ldr	r2, [pc, #176]	@ (8006bdc <I2C_ITError+0x168>)
 8006b2a:	6502      	str	r2, [r0, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8006b2c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b30:	f7fe fd68 	bl	8005604 <HAL_DMA_Abort_IT>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d0e3      	beq.n	8006b00 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b38:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
}
 8006b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b3e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006b40:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	0412      	lsls	r2, r2, #16
 8006b46:	d503      	bpl.n	8006b50 <I2C_ITError+0xdc>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b4e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b50:	f7ff f97e 	bl	8005e50 <HAL_DMA_GetState>
 8006b54:	2801      	cmp	r0, #1
 8006b56:	d0c7      	beq.n	8006ae8 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b58:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hi2c);
 8006b5a:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bdc <I2C_ITError+0x168>)
 8006b5e:	6502      	str	r2, [r0, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8006b60:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b64:	f7fe fd4e 	bl	8005604 <HAL_DMA_Abort_IT>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d0c9      	beq.n	8006b00 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b6c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 8006b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b72:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006b74:	4718      	bx	r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b76:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b7a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	f022 02fe 	bic.w	r2, r2, #254	@ 0xfe
 8006b84:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	0792      	lsls	r2, r2, #30
 8006b8a:	d500      	bpl.n	8006b8e <I2C_ITError+0x11a>
    hi2c->Instance->TXDR = 0x00U;
 8006b8c:	629d      	str	r5, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	07d6      	lsls	r6, r2, #31
 8006b92:	d403      	bmi.n	8006b9c <I2C_ITError+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006b9c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8006ba0:	2a60      	cmp	r2, #96	@ 0x60
 8006ba2:	d010      	beq.n	8006bc6 <I2C_ITError+0x152>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	0695      	lsls	r5, r2, #26
 8006bae:	d50a      	bpl.n	8006bc6 <I2C_ITError+0x152>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	06d0      	lsls	r0, r2, #27
 8006bb4:	d505      	bpl.n	8006bc2 <I2C_ITError+0x14e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb6:	2210      	movs	r2, #16
 8006bb8:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bba:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006bbc:	f042 0204 	orr.w	r2, r2, #4
 8006bc0:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	e780      	b.n	8006acc <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e7a3      	b.n	8006b1c <I2C_ITError+0xa8>
 8006bd4:	ffff0000 	.word	0xffff0000
 8006bd8:	080071d9 	.word	0x080071d9
 8006bdc:	08006a35 	.word	0x08006a35

08006be0 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be0:	2220      	movs	r2, #32
 8006be2:	6803      	ldr	r3, [r0, #0]
{
 8006be4:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be6:	61da      	str	r2, [r3, #28]
{
 8006be8:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bea:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006bee:	2a21      	cmp	r2, #33	@ 0x21
 8006bf0:	d053      	beq.n	8006c9a <I2C_ITMasterCplt+0xba>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bf2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006bf6:	2a22      	cmp	r2, #34	@ 0x22
 8006bf8:	d038      	beq.n	8006c6c <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	4c41      	ldr	r4, [pc, #260]	@ (8006d04 <I2C_ITMasterCplt+0x124>)
 8006bfe:	4022      	ands	r2, r4
  hi2c->XferISR       = NULL;
 8006c00:	2400      	movs	r4, #0
  I2C_RESET_CR2(hi2c);
 8006c02:	605a      	str	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c04:	4a40      	ldr	r2, [pc, #256]	@ (8006d08 <I2C_ITMasterCplt+0x128>)
  hi2c->XferISR       = NULL;
 8006c06:	6344      	str	r4, [r0, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c08:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006c0a:	06ca      	lsls	r2, r1, #27
 8006c0c:	d505      	bpl.n	8006c1a <I2C_ITMasterCplt+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c0e:	2210      	movs	r2, #16
 8006c10:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c12:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006c14:	f042 0204 	orr.w	r2, r2, #4
 8006c18:	6442      	str	r2, [r0, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006c1a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006c1e:	2a60      	cmp	r2, #96	@ 0x60
 8006c20:	d034      	beq.n	8006c8c <I2C_ITMasterCplt+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	0791      	lsls	r1, r2, #30
 8006c26:	d501      	bpl.n	8006c2c <I2C_ITMasterCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 8006c28:	2200      	movs	r2, #0
 8006c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	07d2      	lsls	r2, r2, #31
 8006c30:	d403      	bmi.n	8006c3a <I2C_ITMasterCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
 8006c3a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006c3c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006c40:	2a60      	cmp	r2, #96	@ 0x60
 8006c42:	d00d      	beq.n	8006c60 <I2C_ITMasterCplt+0x80>
 8006c44:	1e1a      	subs	r2, r3, #0
 8006c46:	bf18      	it	ne
 8006c48:	2201      	movne	r2, #1
 8006c4a:	b94b      	cbnz	r3, 8006c60 <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c4c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006c50:	2b21      	cmp	r3, #33	@ 0x21
 8006c52:	d041      	beq.n	8006cd8 <I2C_ITMasterCplt+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c54:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006c58:	2b22      	cmp	r3, #34	@ 0x22
 8006c5a:	d02e      	beq.n	8006cba <I2C_ITMasterCplt+0xda>
}
 8006c5c:	b002      	add	sp, #8
 8006c5e:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c60:	6c41      	ldr	r1, [r0, #68]	@ 0x44
}
 8006c62:	b002      	add	sp, #8
 8006c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c68:	f7ff bf04 	b.w	8006a74 <I2C_ITError>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c6c:	f890 4041 	ldrb.w	r4, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c70:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c72:	f004 0428 	and.w	r4, r4, #40	@ 0x28
 8006c76:	2c28      	cmp	r4, #40	@ 0x28
 8006c78:	bf14      	ite	ne
 8006c7a:	f06f 04f4 	mvnne.w	r4, #244	@ 0xf4
 8006c7e:	f06f 0444 	mvneq.w	r4, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c82:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c84:	2412      	movs	r4, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c86:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c88:	6304      	str	r4, [r0, #48]	@ 0x30
 8006c8a:	e7b6      	b.n	8006bfa <I2C_ITMasterCplt+0x1a>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006c8c:	074c      	lsls	r4, r1, #29
 8006c8e:	d5c8      	bpl.n	8006c22 <I2C_ITMasterCplt+0x42>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
 8006c96:	9a01      	ldr	r2, [sp, #4]
 8006c98:	e7c3      	b.n	8006c22 <I2C_ITMasterCplt+0x42>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c9a:	f890 4041 	ldrb.w	r4, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c9e:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ca0:	f004 0428 	and.w	r4, r4, #40	@ 0x28
 8006ca4:	2c28      	cmp	r4, #40	@ 0x28
 8006ca6:	bf14      	ite	ne
 8006ca8:	f06f 04f2 	mvnne.w	r4, #242	@ 0xf2
 8006cac:	f06f 0442 	mvneq.w	r4, #66	@ 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cb0:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006cb2:	2411      	movs	r4, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cb4:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006cb6:	6304      	str	r4, [r0, #48]	@ 0x30
 8006cb8:	e79f      	b.n	8006bfa <I2C_ITMasterCplt+0x1a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
 8006cbc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cc4:	6302      	str	r2, [r0, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cc6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cca:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cce:	2b40      	cmp	r3, #64	@ 0x40
 8006cd0:	d014      	beq.n	8006cfc <I2C_ITMasterCplt+0x11c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006cd2:	f7f9 ff1f 	bl	8000b14 <HAL_I2C_MasterRxCpltCallback>
}
 8006cd6:	e7c1      	b.n	8006c5c <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cd8:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
 8006cda:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006cde:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ce2:	6302      	str	r2, [r0, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ce4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce8:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cec:	2b40      	cmp	r3, #64	@ 0x40
 8006cee:	d002      	beq.n	8006cf6 <I2C_ITMasterCplt+0x116>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cf0:	f7f9 ff02 	bl	8000af8 <HAL_I2C_MasterTxCpltCallback>
 8006cf4:	e7b2      	b.n	8006c5c <I2C_ITMasterCplt+0x7c>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006cf6:	f7ff fe95 	bl	8006a24 <HAL_I2C_MemTxCpltCallback>
 8006cfa:	e7af      	b.n	8006c5c <I2C_ITMasterCplt+0x7c>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006cfc:	f7ff fe94 	bl	8006a28 <HAL_I2C_MemRxCpltCallback>
 8006d00:	e7ac      	b.n	8006c5c <I2C_ITMasterCplt+0x7c>
 8006d02:	bf00      	nop
 8006d04:	fe00e800 	.word	0xfe00e800
 8006d08:	ffff0000 	.word	0xffff0000

08006d0c <I2C_Master_ISR_IT>:
{
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006d0e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	f000 80bb 	beq.w	8006e8e <I2C_Master_ISR_IT+0x182>
 8006d18:	4616      	mov	r6, r2
 8006d1a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006d1c:	06ca      	lsls	r2, r1, #27
 8006d1e:	4604      	mov	r4, r0
 8006d20:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8006d22:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006d26:	d51a      	bpl.n	8006d5e <I2C_Master_ISR_IT+0x52>
 8006d28:	06f3      	lsls	r3, r6, #27
 8006d2a:	d518      	bpl.n	8006d5e <I2C_Master_ISR_IT+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d2c:	6803      	ldr	r3, [r0, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d32:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006d34:	f042 0204 	orr.w	r2, r2, #4
 8006d38:	6442      	str	r2, [r0, #68]	@ 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	0797      	lsls	r7, r2, #30
 8006d3e:	d501      	bpl.n	8006d44 <I2C_Master_ISR_IT+0x38>
    hi2c->Instance->TXDR = 0x00U;
 8006d40:	2200      	movs	r2, #0
 8006d42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	07d0      	lsls	r0, r2, #31
 8006d48:	d56e      	bpl.n	8006e28 <I2C_Master_ISR_IT+0x11c>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d4a:	06aa      	lsls	r2, r5, #26
 8006d4c:	d502      	bpl.n	8006d54 <I2C_Master_ISR_IT+0x48>
 8006d4e:	06b3      	lsls	r3, r6, #26
 8006d50:	f100 8098 	bmi.w	8006e84 <I2C_Master_ISR_IT+0x178>
  __HAL_UNLOCK(hi2c);
 8006d54:	2300      	movs	r3, #0
  return HAL_OK;
 8006d56:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8006d58:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8006d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006d5e:	0769      	lsls	r1, r5, #29
 8006d60:	d417      	bmi.n	8006d92 <I2C_Master_ISR_IT+0x86>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006d62:	066b      	lsls	r3, r5, #25
 8006d64:	d428      	bmi.n	8006db8 <I2C_Master_ISR_IT+0xac>
 8006d66:	07a8      	lsls	r0, r5, #30
 8006d68:	d545      	bpl.n	8006df6 <I2C_Master_ISR_IT+0xea>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006d6a:	07b1      	lsls	r1, r6, #30
 8006d6c:	d543      	bpl.n	8006df6 <I2C_Master_ISR_IT+0xea>
    if (hi2c->XferCount != 0U)
 8006d6e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0e9      	beq.n	8006d4a <I2C_Master_ISR_IT+0x3e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d76:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8006d78:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d7a:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 8006d7e:	3b01      	subs	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d80:	6821      	ldr	r1, [r4, #0]
 8006d82:	6288      	str	r0, [r1, #40]	@ 0x28
      hi2c->XferSize--;
 8006d84:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8006d86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8006d88:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8006d90:	e7db      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006d92:	0772      	lsls	r2, r6, #29
 8006d94:	d5e5      	bpl.n	8006d62 <I2C_Master_ISR_IT+0x56>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d96:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d98:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d9c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006da0:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8006da2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8006da4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8006da6:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 8006da8:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8006daa:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8006dac:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 8006dae:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8006db0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize--;
 8006db2:	1e53      	subs	r3, r2, #1
 8006db4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8006db6:	e7c8      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006db8:	062a      	lsls	r2, r5, #24
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006dba:	f006 0340 	and.w	r3, r6, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006dbe:	d51f      	bpl.n	8006e00 <I2C_Master_ISR_IT+0xf4>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0c2      	beq.n	8006d4a <I2C_Master_ISR_IT+0x3e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dc4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc6:	6822      	ldr	r2, [r4, #0]
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d031      	beq.n	8006e32 <I2C_Master_ISR_IT+0x126>
 8006dce:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d12e      	bne.n	8006e32 <I2C_Master_ISR_IT+0x126>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006dd4:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dd6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006dd8:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2bff      	cmp	r3, #255	@ 0xff
 8006de0:	d96c      	bls.n	8006ebc <I2C_Master_ISR_IT+0x1b0>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006de2:	6853      	ldr	r3, [r2, #4]
 8006de4:	4854      	ldr	r0, [pc, #336]	@ (8006f38 <I2C_Master_ISR_IT+0x22c>)
 8006de6:	4003      	ands	r3, r0
 8006de8:	430b      	orrs	r3, r1
 8006dea:	4954      	ldr	r1, [pc, #336]	@ (8006f3c <I2C_Master_ISR_IT+0x230>)
 8006dec:	4319      	orrs	r1, r3
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dee:	23ff      	movs	r3, #255	@ 0xff
 8006df0:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8006df2:	6051      	str	r1, [r2, #4]
}
 8006df4:	e7a9      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006df6:	0628      	lsls	r0, r5, #24
 8006df8:	d5a7      	bpl.n	8006d4a <I2C_Master_ISR_IT+0x3e>
 8006dfa:	0671      	lsls	r1, r6, #25
 8006dfc:	d4e2      	bmi.n	8006dc4 <I2C_Master_ISR_IT+0xb8>
 8006dfe:	e7a4      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0a2      	beq.n	8006d4a <I2C_Master_ISR_IT+0x3e>
    if (hi2c->XferCount == 0U)
 8006e04:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d136      	bne.n	8006e7a <I2C_Master_ISR_IT+0x16e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	6853      	ldr	r3, [r2, #4]
 8006e10:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8006e14:	d199      	bne.n	8006d4a <I2C_Master_ISR_IT+0x3e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006e16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e18:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8006e1c:	d162      	bne.n	8006ee4 <I2C_Master_ISR_IT+0x1d8>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e1e:	6853      	ldr	r3, [r2, #4]
 8006e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e24:	6053      	str	r3, [r2, #4]
 8006e26:	e790      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	619a      	str	r2, [r3, #24]
 8006e30:	e78b      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006e32:	6853      	ldr	r3, [r2, #4]
 8006e34:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8006e38:	d11f      	bne.n	8006e7a <I2C_Master_ISR_IT+0x16e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e3e:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 8006e42:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e44:	2921      	cmp	r1, #33	@ 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e46:	f04f 0120 	mov.w	r1, #32
 8006e4a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e4e:	d020      	beq.n	8006e92 <I2C_Master_ISR_IT+0x186>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e50:	2112      	movs	r1, #18
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e52:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e54:	6321      	str	r1, [r4, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e56:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e5a:	6817      	ldr	r7, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e5c:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8006e60:	2928      	cmp	r1, #40	@ 0x28
 8006e62:	bf14      	ite	ne
 8006e64:	f06f 01f4 	mvnne.w	r1, #244	@ 0xf4
 8006e68:	f06f 0144 	mvneq.w	r1, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e6c:	4039      	ands	r1, r7
 8006e6e:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8006e70:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e74:	f7f9 fe4e 	bl	8000b14 <HAL_I2C_MasterRxCpltCallback>
 8006e78:	e767      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e7a:	2140      	movs	r1, #64	@ 0x40
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f7ff fdf9 	bl	8006a74 <I2C_ITError>
 8006e82:	e762      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006e84:	4629      	mov	r1, r5
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7ff feaa 	bl	8006be0 <I2C_ITMasterCplt>
 8006e8c:	e762      	b.n	8006d54 <I2C_Master_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 8006e8e:	2002      	movs	r0, #2
}
 8006e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e92:	2111      	movs	r1, #17
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e94:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e96:	6321      	str	r1, [r4, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e98:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e9c:	6817      	ldr	r7, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e9e:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8006ea2:	2928      	cmp	r1, #40	@ 0x28
 8006ea4:	bf14      	ite	ne
 8006ea6:	f06f 01f2 	mvnne.w	r1, #242	@ 0xf2
 8006eaa:	f06f 0142 	mvneq.w	r1, #66	@ 0x42
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006eae:	4039      	ands	r1, r7
 8006eb0:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8006eb2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006eb6:	f7f9 fe1f 	bl	8000af8 <HAL_I2C_MasterTxCpltCallback>
}
 8006eba:	e746      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
        hi2c->XferSize = hi2c->XferCount;
 8006ebc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ebe:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8006ec0:	b29b      	uxth	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ec2:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8006ec6:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ec8:	b2db      	uxtb	r3, r3
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006eca:	d02b      	beq.n	8006f24 <I2C_Master_ISR_IT+0x218>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006ecc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ece:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ed2:	4819      	ldr	r0, [pc, #100]	@ (8006f38 <I2C_Master_ISR_IT+0x22c>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ed4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ed6:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006edc:	4001      	ands	r1, r0
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6053      	str	r3, [r2, #4]
}
 8006ee2:	e732      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ee8:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 8006eec:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006eee:	2921      	cmp	r1, #33	@ 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ef0:	f04f 0120 	mov.w	r1, #32
 8006ef4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ef8:	d0cb      	beq.n	8006e92 <I2C_Master_ISR_IT+0x186>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006efa:	2112      	movs	r1, #18
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006efc:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006efe:	6321      	str	r1, [r4, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f00:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 8006f04:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8006f08:	2928      	cmp	r1, #40	@ 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f0a:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f0c:	bf14      	ite	ne
 8006f0e:	f06f 07f4 	mvnne.w	r7, #244	@ 0xf4
 8006f12:	f06f 0744 	mvneq.w	r7, #68	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f16:	4039      	ands	r1, r7
 8006f18:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8006f1a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f1e:	f7f9 fdf9 	bl	8000b14 <HAL_I2C_MasterRxCpltCallback>
 8006f22:	e712      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f24:	6850      	ldr	r0, [r2, #4]
 8006f26:	4f04      	ldr	r7, [pc, #16]	@ (8006f38 <I2C_Master_ISR_IT+0x22c>)
 8006f28:	4038      	ands	r0, r7
 8006f2a:	4301      	orrs	r1, r0
 8006f2c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f34:	6053      	str	r3, [r2, #4]
}
 8006f36:	e708      	b.n	8006d4a <I2C_Master_ISR_IT+0x3e>
 8006f38:	fc009c00 	.word	0xfc009c00
 8006f3c:	01ff0000 	.word	0x01ff0000

08006f40 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f44:	6803      	ldr	r3, [r0, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006f46:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f48:	2120      	movs	r1, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f4a:	6818      	ldr	r0, [r3, #0]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006f4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f4e:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f52:	61d9      	str	r1, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f54:	f002 01f7 	and.w	r1, r2, #247	@ 0xf7
 8006f58:	2921      	cmp	r1, #33	@ 0x21
 8006f5a:	f040 8085 	bne.w	8007068 <I2C_ITSlaveCplt.constprop.0+0x128>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f5e:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	f022 02fa 	bic.w	r2, r2, #250	@ 0xfa
 8006f68:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f6a:	6321      	str	r1, [r4, #48]	@ 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f6c:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8006f6e:	4998      	ldr	r1, [pc, #608]	@ (80071d0 <I2C_ITSlaveCplt.constprop.0+0x290>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f74:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	400a      	ands	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	0791      	lsls	r1, r2, #30
 8006f80:	d501      	bpl.n	8006f86 <I2C_ITSlaveCplt.constprop.0+0x46>
    hi2c->Instance->TXDR = 0x00U;
 8006f82:	2200      	movs	r2, #0
 8006f84:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	07d2      	lsls	r2, r2, #31
 8006f8a:	d403      	bmi.n	8006f94 <I2C_ITSlaveCplt.constprop.0+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f94:	0447      	lsls	r7, r0, #17
 8006f96:	d571      	bpl.n	800707c <I2C_ITSlaveCplt.constprop.0+0x13c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f9e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8006fa0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006fa2:	b11a      	cbz	r2, 8006fac <I2C_ITSlaveCplt.constprop.0+0x6c>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006fa4:	6811      	ldr	r1, [r2, #0]
 8006fa6:	684a      	ldr	r2, [r1, #4]
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	8562      	strh	r2, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006fac:	076a      	lsls	r2, r5, #29
 8006fae:	d50f      	bpl.n	8006fd0 <I2C_ITSlaveCplt.constprop.0+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006fb8:	3301      	adds	r3, #1
 8006fba:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8006fbc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006fbe:	b12b      	cbz	r3, 8006fcc <I2C_ITSlaveCplt.constprop.0+0x8c>
      hi2c->XferSize--;
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8006fc4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	8563      	strh	r3, [r4, #42]	@ 0x2a
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006fcc:	f025 0504 	bic.w	r5, r5, #4
  if (hi2c->XferCount != 0U)
 8006fd0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	b11b      	cbz	r3, 8006fde <I2C_ITSlaveCplt.constprop.0+0x9e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fd6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006fd8:	f043 0304 	orr.w	r3, r3, #4
 8006fdc:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006fde:	06eb      	lsls	r3, r5, #27
 8006fe0:	d501      	bpl.n	8006fe6 <I2C_ITSlaveCplt.constprop.0+0xa6>
 8006fe2:	06c7      	lsls	r7, r0, #27
 8006fe4:	d428      	bmi.n	8007038 <I2C_ITSlaveCplt.constprop.0+0xf8>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	2700      	movs	r7, #0
 8006fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fec:	6c66      	ldr	r6, [r4, #68]	@ 0x44
  hi2c->XferISR = NULL;
 8006fee:	6367      	str	r7, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ff0:	2e00      	cmp	r6, #0
 8006ff2:	d14d      	bne.n	8007090 <I2C_ITSlaveCplt.constprop.0+0x150>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ff4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006ff6:	4d77      	ldr	r5, [pc, #476]	@ (80071d4 <I2C_ITSlaveCplt.constprop.0+0x294>)
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	d10f      	bne.n	800701c <I2C_ITSlaveCplt.constprop.0+0xdc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ffc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007000:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8007002:	f884 6040 	strb.w	r6, [r4, #64]	@ 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007006:	2b22      	cmp	r3, #34	@ 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8007008:	f04f 0320 	mov.w	r3, #32
 800700c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007010:	6326      	str	r6, [r4, #48]	@ 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007012:	f000 808a 	beq.w	800712a <I2C_ITSlaveCplt.constprop.0+0x1ea>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007016:	f7ff fc79 	bl	800690c <HAL_I2C_SlaveTxCpltCallback>
}
 800701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 800701c:	4620      	mov	r0, r4
 800701e:	f7ff fc79 	bl	8006914 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8007022:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007024:	62e5      	str	r5, [r4, #44]	@ 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 8007026:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8007028:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800702c:	f884 6040 	strb.w	r6, [r4, #64]	@ 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8007030:	6326      	str	r6, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8007032:	f7ff fcf5 	bl	8006a20 <HAL_I2C_ListenCpltCallback>
}
 8007036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hi2c->XferCount == 0U)
 8007038:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800703a:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount == 0U)
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d164      	bne.n	800710c <I2C_ITSlaveCplt.constprop.0+0x1cc>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007042:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 8007046:	2928      	cmp	r1, #40	@ 0x28
 8007048:	d103      	bne.n	8007052 <I2C_ITSlaveCplt.constprop.0+0x112>
 800704a:	f1b6 7f00 	cmp.w	r6, #33554432	@ 0x2000000
 800704e:	f000 808d 	beq.w	800716c <I2C_ITSlaveCplt.constprop.0+0x22c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007052:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007056:	f516 3f80 	cmn.w	r6, #65536	@ 0x10000
 800705a:	b2db      	uxtb	r3, r3
 800705c:	d001      	beq.n	8007062 <I2C_ITSlaveCplt.constprop.0+0x122>
 800705e:	2b29      	cmp	r3, #41	@ 0x29
 8007060:	d066      	beq.n	8007130 <I2C_ITSlaveCplt.constprop.0+0x1f0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007062:	2310      	movs	r3, #16
 8007064:	61d3      	str	r3, [r2, #28]
 8007066:	e7be      	b.n	8006fe6 <I2C_ITSlaveCplt.constprop.0+0xa6>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007068:	2922      	cmp	r1, #34	@ 0x22
 800706a:	d140      	bne.n	80070ee <I2C_ITSlaveCplt.constprop.0+0x1ae>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800706c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
 8007076:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007078:	6321      	str	r1, [r4, #48]	@ 0x30
 800707a:	e777      	b.n	8006f6c <I2C_ITSlaveCplt.constprop.0+0x2c>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800707c:	0401      	lsls	r1, r0, #16
 800707e:	d595      	bpl.n	8006fac <I2C_ITSlaveCplt.constprop.0+0x6c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007086:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8007088:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800708a:	2a00      	cmp	r2, #0
 800708c:	d18a      	bne.n	8006fa4 <I2C_ITSlaveCplt.constprop.0+0x64>
 800708e:	e78d      	b.n	8006fac <I2C_ITSlaveCplt.constprop.0+0x6c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007090:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007092:	4620      	mov	r0, r4
 8007094:	f7ff fcee 	bl	8006a74 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007098:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800709c:	2b28      	cmp	r3, #40	@ 0x28
 800709e:	d1bc      	bne.n	800701a <I2C_ITSlaveCplt.constprop.0+0xda>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070a0:	4a4c      	ldr	r2, [pc, #304]	@ (80071d4 <I2C_ITSlaveCplt.constprop.0+0x294>)
  hi2c->State = HAL_I2C_STATE_READY;
 80070a2:	2320      	movs	r3, #32
  hi2c->XferISR = NULL;
 80070a4:	6367      	str	r7, [r4, #52]	@ 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070a6:	62e2      	str	r2, [r4, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80070a8:	6327      	str	r7, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070aa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070ae:	076b      	lsls	r3, r5, #29
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070b0:	6822      	ldr	r2, [r4, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b2:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070b6:	d509      	bpl.n	80070cc <I2C_ITSlaveCplt.constprop.0+0x18c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80070bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80070c0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->pBuffPtr++;
 80070c2:	3301      	adds	r3, #1
 80070c4:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	d144      	bne.n	8007154 <I2C_ITSlaveCplt.constprop.0+0x214>
 80070ca:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070cc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d0:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070d2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 80070d6:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80070d8:	6813      	ldr	r3, [r2, #0]
 80070da:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80070de:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070e0:	61d0      	str	r0, [r2, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 80070e2:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 80070e4:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80070e8:	f7ff fc9a 	bl	8006a20 <HAL_I2C_ListenCpltCallback>
}
 80070ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ee:	b2d2      	uxtb	r2, r2
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80070f0:	2a28      	cmp	r2, #40	@ 0x28
 80070f2:	f47f af3b 	bne.w	8006f6c <I2C_ITSlaveCplt.constprop.0+0x2c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070f6:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070fa:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	f022 02fe 	bic.w	r2, r2, #254	@ 0xfe
 8007104:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007106:	2200      	movs	r2, #0
 8007108:	6322      	str	r2, [r4, #48]	@ 0x30
 800710a:	e72f      	b.n	8006f6c <I2C_ITSlaveCplt.constprop.0+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800710c:	2310      	movs	r3, #16
 800710e:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007110:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007112:	f043 0304 	orr.w	r3, r3, #4
 8007116:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007118:	f036 7380 	bics.w	r3, r6, #16777216	@ 0x1000000
 800711c:	f47f af63 	bne.w	8006fe6 <I2C_ITSlaveCplt.constprop.0+0xa6>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007120:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff fca6 	bl	8006a74 <I2C_ITError>
 8007128:	e75d      	b.n	8006fe6 <I2C_ITSlaveCplt.constprop.0+0xa6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800712a:	f7ff fbf1 	bl	8006910 <HAL_I2C_SlaveRxCpltCallback>
}
 800712e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007130:	2310      	movs	r3, #16
 8007132:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007134:	6993      	ldr	r3, [r2, #24]
 8007136:	0798      	lsls	r0, r3, #30
 8007138:	d501      	bpl.n	800713e <I2C_ITSlaveCplt.constprop.0+0x1fe>
    hi2c->Instance->TXDR = 0x00U;
 800713a:	2300      	movs	r3, #0
 800713c:	6293      	str	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800713e:	6993      	ldr	r3, [r2, #24]
 8007140:	07d9      	lsls	r1, r3, #31
 8007142:	d403      	bmi.n	800714c <I2C_ITSlaveCplt.constprop.0+0x20c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007144:	6993      	ldr	r3, [r2, #24]
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6193      	str	r3, [r2, #24]
        I2C_ITSlaveSeqCplt(hi2c);
 800714c:	4620      	mov	r0, r4
 800714e:	f7ff fbe1 	bl	8006914 <I2C_ITSlaveSeqCplt>
 8007152:	e748      	b.n	8006fe6 <I2C_ITSlaveCplt.constprop.0+0xa6>
      hi2c->XferCount--;
 8007154:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007156:	1e53      	subs	r3, r2, #1
 8007158:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 800715a:	3901      	subs	r1, #1
      hi2c->XferSize--;
 800715c:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800715e:	b28b      	uxth	r3, r1
 8007160:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007162:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007164:	f043 0304 	orr.w	r3, r3, #4
 8007168:	6463      	str	r3, [r4, #68]	@ 0x44
 800716a:	e7af      	b.n	80070cc <I2C_ITSlaveCplt.constprop.0+0x18c>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800716c:	4919      	ldr	r1, [pc, #100]	@ (80071d4 <I2C_ITSlaveCplt.constprop.0+0x294>)
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800716e:	076e      	lsls	r6, r5, #29
  hi2c->XferISR = NULL;
 8007170:	6363      	str	r3, [r4, #52]	@ 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007172:	62e1      	str	r1, [r4, #44]	@ 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8007174:	f04f 0120 	mov.w	r1, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8007178:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800717a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800717e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007182:	d508      	bpl.n	8007196 <I2C_ITSlaveCplt.constprop.0+0x256>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007186:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007188:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800718a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800718c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->pBuffPtr++;
 800718e:	3301      	adds	r3, #1
 8007190:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8007192:	b98a      	cbnz	r2, 80071b8 <I2C_ITSlaveCplt.constprop.0+0x278>
 8007194:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007196:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800719a:	2110      	movs	r1, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800719c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  HAL_I2C_ListenCpltCallback(hi2c);
 80071a0:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80071a2:	6813      	ldr	r3, [r2, #0]
 80071a4:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80071a8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hi2c);
 80071aa:	2300      	movs	r3, #0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ac:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(hi2c);
 80071ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80071b2:	f7ff fc35 	bl	8006a20 <HAL_I2C_ListenCpltCallback>
}
 80071b6:	e716      	b.n	8006fe6 <I2C_ITSlaveCplt.constprop.0+0xa6>
      hi2c->XferCount--;
 80071b8:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80071ba:	1e53      	subs	r3, r2, #1
 80071bc:	6822      	ldr	r2, [r4, #0]
      hi2c->XferCount--;
 80071be:	3901      	subs	r1, #1
      hi2c->XferSize--;
 80071c0:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80071c2:	b28b      	uxth	r3, r1
 80071c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80071c8:	f043 0304 	orr.w	r3, r3, #4
 80071cc:	6463      	str	r3, [r4, #68]	@ 0x44
 80071ce:	e7e2      	b.n	8007196 <I2C_ITSlaveCplt.constprop.0+0x256>
 80071d0:	fe00e800 	.word	0xfe00e800
 80071d4:	ffff0000 	.word	0xffff0000

080071d8 <I2C_Slave_ISR_IT>:
{
 80071d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hi2c);
 80071da:	f890 c040 	ldrb.w	ip, [r0, #64]	@ 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 80071de:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 80071e0:	f1bc 0f01 	cmp.w	ip, #1
 80071e4:	f000 80a0 	beq.w	8007328 <I2C_Slave_ISR_IT+0x150>
 80071e8:	f04f 0c01 	mov.w	ip, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80071ec:	f011 0f20 	tst.w	r1, #32
 80071f0:	460b      	mov	r3, r1
 80071f2:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80071f4:	f880 c040 	strb.w	ip, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80071f8:	d003      	beq.n	8007202 <I2C_Slave_ISR_IT+0x2a>
 80071fa:	f012 0f20 	tst.w	r2, #32
 80071fe:	f040 8081 	bne.w	8007304 <I2C_Slave_ISR_IT+0x12c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007202:	06d8      	lsls	r0, r3, #27
 8007204:	d53b      	bpl.n	800727e <I2C_Slave_ISR_IT+0xa6>
 8007206:	06d1      	lsls	r1, r2, #27
 8007208:	d539      	bpl.n	800727e <I2C_Slave_ISR_IT+0xa6>
    if (hi2c->XferCount == 0U)
 800720a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800720c:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferCount == 0U)
 800720e:	b292      	uxth	r2, r2
 8007210:	2a00      	cmp	r2, #0
 8007212:	f040 808b 	bne.w	800732c <I2C_Slave_ISR_IT+0x154>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007216:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 800721a:	f1b5 7f00 	cmp.w	r5, #33554432	@ 0x2000000
 800721e:	b2c0      	uxtb	r0, r0
 8007220:	d177      	bne.n	8007312 <I2C_Slave_ISR_IT+0x13a>
 8007222:	2828      	cmp	r0, #40	@ 0x28
 8007224:	d175      	bne.n	8007312 <I2C_Slave_ISR_IT+0x13a>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007226:	485a      	ldr	r0, [pc, #360]	@ (8007390 <I2C_Slave_ISR_IT+0x1b8>)
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007228:	075b      	lsls	r3, r3, #29
  hi2c->XferISR = NULL;
 800722a:	6362      	str	r2, [r4, #52]	@ 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800722c:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800722e:	f04f 0020 	mov.w	r0, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8007232:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007234:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007238:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800723c:	d50a      	bpl.n	8007254 <I2C_Slave_ISR_IT+0x7c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800723e:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8007240:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007242:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007244:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8007246:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
    hi2c->pBuffPtr++;
 8007248:	3301      	adds	r3, #1
 800724a:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800724c:	2a00      	cmp	r2, #0
 800724e:	f040 8092 	bne.w	8007376 <I2C_Slave_ISR_IT+0x19e>
 8007252:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007254:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007258:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800725a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hi2c);
 800725e:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007260:	680b      	ldr	r3, [r1, #0]
 8007262:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8007266:	600b      	str	r3, [r1, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007268:	61c8      	str	r0, [r1, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800726a:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800726c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007270:	f7ff fbd6 	bl	8006a20 <HAL_I2C_ListenCpltCallback>
  __HAL_UNLOCK(hi2c);
 8007274:	2300      	movs	r3, #0
  return HAL_OK;
 8007276:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8007278:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800727c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800727e:	0759      	lsls	r1, r3, #29
 8007280:	d40d      	bmi.n	800729e <I2C_Slave_ISR_IT+0xc6>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007282:	0719      	lsls	r1, r3, #28
 8007284:	d529      	bpl.n	80072da <I2C_Slave_ISR_IT+0x102>
 8007286:	0710      	lsls	r0, r2, #28
 8007288:	d527      	bpl.n	80072da <I2C_Slave_ISR_IT+0x102>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800728a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800728e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007292:	2b28      	cmp	r3, #40	@ 0x28
 8007294:	d06b      	beq.n	800736e <I2C_Slave_ISR_IT+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800729c:	e7ea      	b.n	8007274 <I2C_Slave_ISR_IT+0x9c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800729e:	0750      	lsls	r0, r2, #29
 80072a0:	d5ef      	bpl.n	8007282 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount > 0U)
 80072a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	b16b      	cbz	r3, 80072c4 <I2C_Slave_ISR_IT+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072a8:	6822      	ldr	r2, [r4, #0]
 80072aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80072ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072ae:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80072b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80072b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80072b4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80072b6:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80072b8:	3101      	adds	r1, #1
      hi2c->XferSize--;
 80072ba:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80072bc:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80072be:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80072c0:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80072c2:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 80072c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1d3      	bne.n	8007274 <I2C_Slave_ISR_IT+0x9c>
 80072cc:	f515 3f80 	cmn.w	r5, #65536	@ 0x10000
 80072d0:	d0d0      	beq.n	8007274 <I2C_Slave_ISR_IT+0x9c>
        I2C_ITSlaveSeqCplt(hi2c);
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7ff fb1e 	bl	8006914 <I2C_ITSlaveSeqCplt>
 80072d8:	e7cc      	b.n	8007274 <I2C_Slave_ISR_IT+0x9c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80072da:	0799      	lsls	r1, r3, #30
 80072dc:	d5ca      	bpl.n	8007274 <I2C_Slave_ISR_IT+0x9c>
 80072de:	0793      	lsls	r3, r2, #30
 80072e0:	d5c8      	bpl.n	8007274 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount > 0U)
 80072e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b37b      	cbz	r3, 8007348 <I2C_Slave_ISR_IT+0x170>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	f811 0b01 	ldrb.w	r0, [r1], #1
      hi2c->XferSize--;
 80072f0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072f2:	6298      	str	r0, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80072f6:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80072f8:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80072fa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80072fc:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007302:	e7b7      	b.n	8007274 <I2C_Slave_ISR_IT+0x9c>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007304:	f7ff fe1c 	bl	8006f40 <I2C_ITSlaveCplt.constprop.0>
  __HAL_UNLOCK(hi2c);
 8007308:	2300      	movs	r3, #0
  return HAL_OK;
 800730a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 800730c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  return HAL_OK;
 8007310:	e7b4      	b.n	800727c <I2C_Slave_ISR_IT+0xa4>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007312:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007316:	f515 3f80 	cmn.w	r5, #65536	@ 0x10000
 800731a:	b2db      	uxtb	r3, r3
 800731c:	d001      	beq.n	8007322 <I2C_Slave_ISR_IT+0x14a>
 800731e:	2b29      	cmp	r3, #41	@ 0x29
 8007320:	d016      	beq.n	8007350 <I2C_Slave_ISR_IT+0x178>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007322:	2310      	movs	r3, #16
 8007324:	61cb      	str	r3, [r1, #28]
 8007326:	e7a5      	b.n	8007274 <I2C_Slave_ISR_IT+0x9c>
  __HAL_LOCK(hi2c);
 8007328:	2002      	movs	r0, #2
}
 800732a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800732c:	2310      	movs	r3, #16
 800732e:	61cb      	str	r3, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007330:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007332:	f043 0304 	orr.w	r3, r3, #4
 8007336:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007338:	f035 7380 	bics.w	r3, r5, #16777216	@ 0x1000000
 800733c:	d19a      	bne.n	8007274 <I2C_Slave_ISR_IT+0x9c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800733e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007340:	4620      	mov	r0, r4
 8007342:	f7ff fb97 	bl	8006a74 <I2C_ITError>
 8007346:	e795      	b.n	8007274 <I2C_Slave_ISR_IT+0x9c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007348:	f035 7380 	bics.w	r3, r5, #16777216	@ 0x1000000
 800734c:	d192      	bne.n	8007274 <I2C_Slave_ISR_IT+0x9c>
 800734e:	e7c0      	b.n	80072d2 <I2C_Slave_ISR_IT+0xfa>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007350:	2310      	movs	r3, #16
 8007352:	61cb      	str	r3, [r1, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007354:	698b      	ldr	r3, [r1, #24]
 8007356:	079d      	lsls	r5, r3, #30
 8007358:	d501      	bpl.n	800735e <I2C_Slave_ISR_IT+0x186>
    hi2c->Instance->TXDR = 0x00U;
 800735a:	2300      	movs	r3, #0
 800735c:	628b      	str	r3, [r1, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800735e:	698b      	ldr	r3, [r1, #24]
 8007360:	07d8      	lsls	r0, r3, #31
 8007362:	d4b6      	bmi.n	80072d2 <I2C_Slave_ISR_IT+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007364:	698b      	ldr	r3, [r1, #24]
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	618b      	str	r3, [r1, #24]
 800736c:	e7b1      	b.n	80072d2 <I2C_Slave_ISR_IT+0xfa>
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff fb24 	bl	80069bc <I2C_ITAddrCplt.part.0.constprop.0>
 8007374:	e77e      	b.n	8007274 <I2C_Slave_ISR_IT+0x9c>
      hi2c->XferCount--;
 8007376:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007378:	3a01      	subs	r2, #1
 800737a:	6821      	ldr	r1, [r4, #0]
      hi2c->XferCount--;
 800737c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800737e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007380:	b29b      	uxth	r3, r3
 8007382:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007384:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007386:	f043 0304 	orr.w	r3, r3, #4
 800738a:	6463      	str	r3, [r4, #68]	@ 0x44
 800738c:	e762      	b.n	8007254 <I2C_Slave_ISR_IT+0x7c>
 800738e:	bf00      	nop
 8007390:	ffff0000 	.word	0xffff0000

08007394 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007394:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8007398:	2a20      	cmp	r2, #32
 800739a:	d123      	bne.n	80073e4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800739c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80073a4:	4603      	mov	r3, r0
 80073a6:	2a01      	cmp	r2, #1
 80073a8:	d01c      	beq.n	80073e4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073aa:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80073ac:	2024      	movs	r0, #36	@ 0x24
{
 80073ae:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80073b0:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b4:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 80073b8:	6810      	ldr	r0, [r2, #0]
 80073ba:	f020 0001 	bic.w	r0, r0, #1
 80073be:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073c0:	6810      	ldr	r0, [r2, #0]
 80073c2:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80073c6:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80073c8:	6810      	ldr	r0, [r2, #0]
 80073ca:	4301      	orrs	r1, r0

    return HAL_OK;
 80073cc:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 80073ce:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80073d0:	6811      	ldr	r1, [r2, #0]
 80073d2:	f041 0101 	orr.w	r1, r1, #1
 80073d6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80073d8:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80073dc:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80073e0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80073e4:	2002      	movs	r0, #2
}
 80073e6:	4770      	bx	lr

080073e8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80073ec:	2a20      	cmp	r2, #32
 80073ee:	d122      	bne.n	8007436 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 80073f0:	4603      	mov	r3, r0
{
 80073f2:	b500      	push	{lr}
 80073f4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073f8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80073fc:	2a01      	cmp	r2, #1
 80073fe:	d01c      	beq.n	800743a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007400:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007402:	2024      	movs	r0, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007404:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007408:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 800740c:	6810      	ldr	r0, [r2, #0]
 800740e:	f020 0001 	bic.w	r0, r0, #1
 8007412:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8007414:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8007416:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
    tmpreg |= DigitalFilter << 8U;
 800741a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800741e:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8007420:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007422:	6811      	ldr	r1, [r2, #0]
 8007424:	f041 0101 	orr.w	r1, r1, #1
 8007428:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800742a:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800742e:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007432:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8007436:	2002      	movs	r0, #2
}
 8007438:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800743a:	2002      	movs	r0, #2
}
 800743c:	f85d fb04 	ldr.w	pc, [sp], #4

08007440 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8007440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007444:	4699      	mov	r9, r3
 8007446:	4680      	mov	r8, r0
 8007448:	460d      	mov	r5, r1
 800744a:	4614      	mov	r4, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800744c:	7803      	ldrb	r3, [r0, #0]
 800744e:	2601      	movs	r6, #1
  p = 0;
 8007450:	2700      	movs	r7, #0
 8007452:	e005      	b.n	8007460 <JPEG_Bits_To_SizeCodes+0x20>
    i = (uint32_t)Bits[l];
 8007454:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    if ((p + i) > 256UL)
 8007458:	19da      	adds	r2, r3, r7
 800745a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800745e:	d83a      	bhi.n	80074d6 <JPEG_Bits_To_SizeCodes+0x96>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8007460:	19e8      	adds	r0, r5, r7
 8007462:	461a      	mov	r2, r3
 8007464:	4631      	mov	r1, r6
    while (i != 0UL)
 8007466:	b113      	cbz	r3, 800746e <JPEG_Bits_To_SizeCodes+0x2e>
      p++;
 8007468:	441f      	add	r7, r3
      Huffsize[p] = (uint8_t) l + 1U;
 800746a:	f008 fbd3 	bl	800fc14 <memset>
  for (l = 0; l < 16UL; l++)
 800746e:	2e10      	cmp	r6, #16
    if ((p + i) > 256UL)
 8007470:	f106 0601 	add.w	r6, r6, #1
  for (l = 0; l < 16UL; l++)
 8007474:	d1ee      	bne.n	8007454 <JPEG_Bits_To_SizeCodes+0x14>
      i--;
    }
  }
  Huffsize[p] = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	55eb      	strb	r3, [r5, r7]
  *LastK = p;
 800747a:	f8c9 7000 	str.w	r7, [r9]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
 800747e:	7829      	ldrb	r1, [r5, #0]
 8007480:	460a      	mov	r2, r1
  p = 0;
  while (Huffsize[p] != 0U)
 8007482:	b329      	cbz	r1, 80074d0 <JPEG_Bits_To_SizeCodes+0x90>
  code = 0;
 8007484:	4699      	mov	r9, r3
 8007486:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800748a:	2701      	movs	r7, #1
  p = 0;
 800748c:	461e      	mov	r6, r3
    while (((uint32_t) Huffsize[p]) == si)
 800748e:	4291      	cmp	r1, r2
 8007490:	d124      	bne.n	80074dc <JPEG_Bits_To_SizeCodes+0x9c>
 8007492:	eb06 0008 	add.w	r0, r6, r8
 8007496:	eb05 0c06 	add.w	ip, r5, r6
 800749a:	464b      	mov	r3, r9
 800749c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      Huffcode[p] = code;
 80074a0:	f840 3f04 	str.w	r3, [r0, #4]!
      code++;
 80074a4:	4619      	mov	r1, r3
    while (((uint32_t) Huffsize[p]) == si)
 80074a6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
 80074aa:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 80074ac:	4596      	cmp	lr, r2
 80074ae:	d0f7      	beq.n	80074a0 <JPEG_Bits_To_SizeCodes+0x60>
 80074b0:	3601      	adds	r6, #1
 80074b2:	eba6 0609 	sub.w	r6, r6, r9
      p++;
 80074b6:	440e      	add	r6, r1
    if(si > 31UL)
 80074b8:	2a1f      	cmp	r2, #31
 80074ba:	d80c      	bhi.n	80074d6 <JPEG_Bits_To_SizeCodes+0x96>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80074bc:	fa07 f102 	lsl.w	r1, r7, r2
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d908      	bls.n	80074d6 <JPEG_Bits_To_SizeCodes+0x96>
  while (Huffsize[p] != 0U)
 80074c4:	5da9      	ldrb	r1, [r5, r6]
    {
      return HAL_ERROR;
    }
    code <<= 1;
 80074c6:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 80074ca:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 80074cc:	2900      	cmp	r1, #0
 80074ce:	d1de      	bne.n	800748e <JPEG_Bits_To_SizeCodes+0x4e>
  }
  /* Return function status */
  return HAL_OK;
 80074d0:	2000      	movs	r0, #0
}
 80074d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80074d6:	2001      	movs	r0, #1
}
 80074d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (((uint32_t) Huffsize[p]) == si)
 80074dc:	464b      	mov	r3, r9
 80074de:	e7eb      	b.n	80074b8 <JPEG_Bits_To_SizeCodes+0x78>

080074e0 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80074e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e2:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 80074e6:	460d      	mov	r5, r1
 80074e8:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80074ea:	ab01      	add	r3, sp, #4
 80074ec:	aa43      	add	r2, sp, #268	@ 0x10c
 80074ee:	a902      	add	r1, sp, #8
 80074f0:	f7ff ffa6 	bl	8007440 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80074f4:	b9d0      	cbnz	r0, 800752c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 80074f6:	9f01      	ldr	r7, [sp, #4]
 80074f8:	b1c7      	cbz	r7, 800752c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
 80074fa:	370f      	adds	r7, #15
 80074fc:	f50d 7e86 	add.w	lr, sp, #268	@ 0x10c
 8007500:	a902      	add	r1, sp, #8
 8007502:	f104 0c0f 	add.w	ip, r4, #15
 8007506:	4427      	add	r7, r4
 8007508:	e009      	b.n	800751e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800750a:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
 800750e:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007510:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007514:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007518:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800751a:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 800751c:	d006      	beq.n	800752c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
 800751e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007522:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007524:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007528:	d9ef      	bls.n	800750a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800752a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800752c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8007530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007532:	bf00      	nop

08007534 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007538:	6804      	ldr	r4, [r0, #0]
{
 800753a:	b093      	sub	sp, #76	@ 0x4c
 800753c:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800753e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8007542:	429a      	cmp	r2, r3
 8007544:	f000 809d 	beq.w	8007682 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8007548:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800754c:	429a      	cmp	r2, r3
 800754e:	d003      	beq.n	8007558 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8007550:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007552:	b013      	add	sp, #76	@ 0x4c
 8007554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007558:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800755c:	a903      	add	r1, sp, #12
 800755e:	f7ff ffbf 	bl	80074e0 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8007562:	2800      	cmp	r0, #0
 8007564:	d1f5      	bne.n	8007552 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
 8007566:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800756a:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800756e:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
 8007572:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007574:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
 8007578:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800757a:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800757e:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007582:	f40a 6a70 	and.w	sl, sl, #3840	@ 0xf00
 8007586:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800758a:	f40e 6e70 	and.w	lr, lr, #3840	@ 0xf00
 800758e:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007590:	f89d 9015 	ldrb.w	r9, [sp, #21]
 8007594:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007598:	f89d c014 	ldrb.w	ip, [sp, #20]
 800759c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075a0:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075a4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075a8:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075ac:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075ae:	f409 6970 	and.w	r9, r9, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80075b6:	f40c 6c70 	and.w	ip, ip, #3840	@ 0xf00
 80075ba:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075be:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075c2:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075c6:	f89d 7011 	ldrb.w	r7, [sp, #17]
 80075ca:	f408 6870 	and.w	r8, r8, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075ce:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
 80075d0:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075d4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80075d8:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075dc:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
 80075de:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075e2:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075e4:	f89d e03c 	ldrb.w	lr, [sp, #60]	@ 0x3c
 80075e8:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075ec:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075f0:	f89d 600f 	ldrb.w	r6, [sp, #15]
 80075f4:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075f8:	f89d e038 	ldrb.w	lr, [sp, #56]	@ 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075fc:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007604:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8007608:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800760c:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
 8007610:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007614:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
 8007616:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800761a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800761e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8007622:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007626:	f40b 6b70 	and.w	fp, fp, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800762a:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800762e:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 8007632:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
 8007636:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800763a:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800763e:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8007642:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007644:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8007648:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
 800764a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800764e:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007652:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8007656:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007658:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800765c:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
 800765e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007662:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007666:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800766a:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800766c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007670:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
 8007674:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8007678:	f844 3c18 	str.w	r3, [r4, #-24]
}
 800767c:	b013      	add	sp, #76	@ 0x4c
 800767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007682:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
  if (HuffTableDC != NULL)
 8007686:	e769      	b.n	800755c <JPEG_Set_HuffDC_Mem+0x28>

08007688 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8007688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800768c:	6804      	ldr	r4, [r0, #0]
{
 800768e:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 8007692:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007694:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8007698:	429a      	cmp	r2, r3
 800769a:	d041      	beq.n	8007720 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800769c:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d004      	beq.n	80076ae <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 80076a4:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80076a6:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 80076aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80076ae:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80076b2:	4628      	mov	r0, r5
 80076b4:	466b      	mov	r3, sp
 80076b6:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 80076ba:	a901      	add	r1, sp, #4
 80076bc:	f7ff fec0 	bl	8007440 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1f0      	bne.n	80076a6 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	b373      	cbz	r3, 8007726 <JPEG_Set_HuffAC_Mem+0x9e>
 80076c8:	330f      	adds	r3, #15
 80076ca:	f20d 4c34 	addw	ip, sp, #1076	@ 0x434
 80076ce:	af01      	add	r7, sp, #4
 80076d0:	f105 020f 	add.w	r2, r5, #15
 80076d4:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80076d8:	ae42      	add	r6, sp, #264	@ 0x108
 80076da:	e011      	b.n	8007700 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
 80076dc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80076e0:	2ba1      	cmp	r3, #161	@ 0xa1
 80076e2:	d8df      	bhi.n	80076a4 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80076e4:	f817 5b01 	ldrb.w	r5, [r7], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80076e8:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 80076ec:	f85c 1b04 	ldr.w	r1, [ip], #4
  while (k < lastK)
 80076f0:	4572      	cmp	r2, lr
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80076f2:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80076f6:	46b1      	mov	r9, r6
 80076f8:	f8c8 10a4 	str.w	r1, [r8, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80076fc:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
 80076fe:	d014      	beq.n	800772a <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
 8007700:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
 8007704:	23a0      	movs	r3, #160	@ 0xa0
    if (l == 0UL)
 8007706:	2900      	cmp	r1, #0
 8007708:	d0ec      	beq.n	80076e4 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
 800770a:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
 800770c:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007710:	29f0      	cmp	r1, #240	@ 0xf0
      l = (msb * 10UL) + lsb - 1UL;
 8007712:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007716:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800771a:	d1df      	bne.n	80076dc <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
 800771c:	23a1      	movs	r3, #161	@ 0xa1
 800771e:	e7e1      	b.n	80076e4 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007720:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  if (HuffTableAC != NULL)
 8007724:	e7c5      	b.n	80076b2 <JPEG_Set_HuffAC_Mem+0x2a>
 8007726:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
      *addressDef = 0x0FFF0FFF;
 800772a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
    *addressDef = 0x0FD10FD0;
 800772e:	4a1a      	ldr	r2, [pc, #104]	@ (8007798 <JPEG_Set_HuffAC_Mem+0x110>)
 8007730:	eba9 0c89 	sub.w	ip, r9, r9, lsl #2
 8007734:	4649      	mov	r1, r9
      *addressDef = 0x0FFF0FFF;
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	f10d 0566 	add.w	r5, sp, #102	@ 0x66
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 8007742:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
 8007744:	f103 33d3 	add.w	r3, r3, #3553874899	@ 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
 8007748:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800774a:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
 800774e:	f103 232c 	add.w	r3, r3, #738208768	@ 0x2c002c00
 8007752:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007754:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007758:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800775a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800775e:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007760:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007764:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007768:	0212      	lsls	r2, r2, #8
 800776a:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007774:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    while (i > 1UL)
 8007778:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800777a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800777e:	433a      	orrs	r2, r7
    while (i > 1UL)
 8007780:	42a9      	cmp	r1, r5
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007782:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
 8007786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778a:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800778e:	d1e7      	bne.n	8007760 <JPEG_Set_HuffAC_Mem+0xd8>
}
 8007790:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 8007794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007798:	0fd10fd0 	.word	0x0fd10fd0

0800779c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800779c:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800779e:	6803      	ldr	r3, [r0, #0]
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80077a0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80077a4:	6542      	str	r2, [r0, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80077a6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80077a8:	f002 0203 	and.w	r2, r2, #3
 80077ac:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	bf0c      	ite	eq
 80077b2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80077b6:	f022 0208 	bicne.w	r2, r2, #8
 80077ba:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f022 0201 	bic.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80077c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077c6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80077cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80077d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077da:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80077dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80077e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80077ec:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80077ee:	f002 020c 	and.w	r2, r2, #12
 80077f2:	2a08      	cmp	r2, #8
 80077f4:	d00a      	beq.n	800780c <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80077f6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80077f8:	f002 020c 	and.w	r2, r2, #12
 80077fc:	2a0c      	cmp	r2, #12
 80077fe:	d000      	beq.n	8007802 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007800:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007804:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007808:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800780a:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800780c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800780e:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8007812:	631a      	str	r2, [r3, #48]	@ 0x30
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop

08007818 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007818:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800781a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800781c:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800781e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
{
 8007820:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007822:	42aa      	cmp	r2, r5
 8007824:	d32a      	bcc.n	800787c <JPEG_DMA_StartProcess+0x64>
 8007826:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007828:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800782a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800782c:	6a86      	ldr	r6, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800782e:	42b3      	cmp	r3, r6
 8007830:	d324      	bcc.n	800787c <JPEG_DMA_StartProcess+0x64>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007832:	4f19      	ldr	r7, [pc, #100]	@ (8007898 <JPEG_DMA_StartProcess+0x80>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007834:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80078a4 <JPEG_DMA_StartProcess+0x8c>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007838:	654f      	str	r7, [r1, #84]	@ 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800783a:	f8c1 c044 	str.w	ip, [r1, #68]	@ 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800783e:	4917      	ldr	r1, [pc, #92]	@ (800789c <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007840:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007842:	6441      	str	r1, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8007844:	4916      	ldr	r1, [pc, #88]	@ (80078a0 <JPEG_DMA_StartProcess+0x88>)
 8007846:	6581      	str	r1, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007848:	b1a5      	cbz	r5, 8007874 <JPEG_DMA_StartProcess+0x5c>
 800784a:	b19e      	cbz	r6, 8007874 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800784c:	fbb2 f1f5 	udiv	r1, r2, r5
 8007850:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007854:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007856:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007858:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800785a:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800785c:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800785e:	fbb3 f2f6 	udiv	r2, r3, r6
 8007862:	fb06 3212 	mls	r2, r6, r2, r3
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800786a:	9500      	str	r5, [sp, #0]
 800786c:	69e2      	ldr	r2, [r4, #28]
 800786e:	f001 f915 	bl	8008a9c <HAL_MDMA_Start_IT>
 8007872:	b130      	cbz	r0, 8007882 <JPEG_DMA_StartProcess+0x6a>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007874:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007876:	f043 0304 	orr.w	r3, r3, #4
 800787a:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800787c:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800787e:	b003      	add	sp, #12
 8007880:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007882:	6822      	ldr	r2, [r4, #0]
 8007884:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007886:	69a1      	ldr	r1, [r4, #24]
 8007888:	3240      	adds	r2, #64	@ 0x40
 800788a:	9500      	str	r5, [sp, #0]
 800788c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800788e:	f001 f905 	bl	8008a9c <HAL_MDMA_Start_IT>
 8007892:	2800      	cmp	r0, #0
 8007894:	d0f3      	beq.n	800787e <JPEG_DMA_StartProcess+0x66>
 8007896:	e7ed      	b.n	8007874 <JPEG_DMA_StartProcess+0x5c>
 8007898:	08007d49 	.word	0x08007d49
 800789c:	08007ed1 	.word	0x08007ed1
 80078a0:	08007f51 	.word	0x08007f51
 80078a4:	08007d75 	.word	0x08007d75

080078a8 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80078a8:	6803      	ldr	r3, [r0, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	f002 0203 	and.w	r2, r2, #3
 80078b0:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
 80078b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078b6:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80078b8:	d018      	beq.n	80078ec <HAL_JPEG_GetInfo.part.0+0x44>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	f012 0203 	ands.w	r2, r2, #3
 80078c0:	d10b      	bne.n	80078da <HAL_JPEG_GetInfo.part.0+0x32>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80078c2:	6859      	ldr	r1, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80078c4:	f8c9 2000 	str.w	r2, [r9]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80078c8:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80078ca:	0c09      	lsrs	r1, r1, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80078cc:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80078ce:	f8c9 1008 	str.w	r1, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80078d2:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80078d6:	2100      	movs	r1, #0
 80078d8:	e02f      	b.n	800793a <HAL_JPEG_GetInfo.part.0+0x92>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	f002 0203 	and.w	r2, r2, #3
 80078e0:	2a03      	cmp	r2, #3
 80078e2:	f000 8097 	beq.w	8007a14 <HAL_JPEG_GetInfo.part.0+0x16c>
    return HAL_ERROR;
 80078e6:	2001      	movs	r0, #1
}
 80078e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ec:	2110      	movs	r1, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80078ee:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80078f0:	f8c9 1000 	str.w	r1, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80078f4:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80078f6:	68d9      	ldr	r1, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80078f8:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80078fc:	0c09      	lsrs	r1, r1, #16
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80078fe:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007900:	695c      	ldr	r4, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007902:	f8c9 100c 	str.w	r1, [r9, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007906:	0916      	lsrs	r6, r2, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007908:	6999      	ldr	r1, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800790a:	f014 0ff0 	tst.w	r4, #240	@ 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800790e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007912:	ea4f 1714 	mov.w	r7, r4, lsr #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007916:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800791a:	d105      	bne.n	8007928 <HAL_JPEG_GetInfo.part.0+0x80>
 800791c:	2a01      	cmp	r2, #1
 800791e:	d103      	bne.n	8007928 <HAL_JPEG_GetInfo.part.0+0x80>
 8007920:	070d      	lsls	r5, r1, #28
 8007922:	d1d8      	bne.n	80078d6 <HAL_JPEG_GetInfo.part.0+0x2e>
 8007924:	2102      	movs	r1, #2
 8007926:	e008      	b.n	800793a <HAL_JPEG_GetInfo.part.0+0x92>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007928:	433e      	orrs	r6, r7
 800792a:	0734      	lsls	r4, r6, #28
 800792c:	d0d3      	beq.n	80078d6 <HAL_JPEG_GetInfo.part.0+0x2e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800792e:	430f      	orrs	r7, r1
 8007930:	0739      	lsls	r1, r7, #28
 8007932:	d1d0      	bne.n	80078d6 <HAL_JPEG_GetInfo.part.0+0x2e>
 8007934:	2a03      	cmp	r2, #3
 8007936:	d1ce      	bne.n	80078d6 <HAL_JPEG_GetInfo.part.0+0x2e>
 8007938:	2101      	movs	r1, #1
 800793a:	4a42      	ldr	r2, [pc, #264]	@ (8007a44 <HAL_JPEG_GetInfo.part.0+0x19c>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800793c:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007940:	f8c9 1004 	str.w	r1, [r9, #4]
  uint32_t quality = 0;
 8007944:	2600      	movs	r6, #0
 8007946:	f102 0440 	add.w	r4, r2, #64	@ 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800794a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800794e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007952:	e033      	b.n	80079bc <HAL_JPEG_GetInfo.part.0+0x114>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007954:	f892 8001 	ldrb.w	r8, [r2, #1]
 8007958:	fb0e f707 	mul.w	r7, lr, r7
 800795c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800795e:	f815 8008 	ldrb.w	r8, [r5, r8]
 8007962:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8007966:	2f64      	cmp	r7, #100	@ 0x64
 8007968:	d958      	bls.n	8007a1c <HAL_JPEG_GetInfo.part.0+0x174>
          quality += 5000UL / scale;
 800796a:	fbb1 f7f7 	udiv	r7, r1, r7
 800796e:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007970:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
 8007974:	2f01      	cmp	r7, #1
 8007976:	d03d      	beq.n	80079f4 <HAL_JPEG_GetInfo.part.0+0x14c>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007978:	f892 8002 	ldrb.w	r8, [r2, #2]
 800797c:	fb0e f707 	mul.w	r7, lr, r7
 8007980:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8007982:	f815 8008 	ldrb.w	r8, [r5, r8]
 8007986:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 800798a:	2f64      	cmp	r7, #100	@ 0x64
 800798c:	d955      	bls.n	8007a3a <HAL_JPEG_GetInfo.part.0+0x192>
          quality += 5000UL / scale;
 800798e:	fbb1 f7f7 	udiv	r7, r1, r7
 8007992:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007994:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
 8007996:	2b01      	cmp	r3, #1
 8007998:	d030      	beq.n	80079fc <HAL_JPEG_GetInfo.part.0+0x154>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800799a:	78d7      	ldrb	r7, [r2, #3]
 800799c:	fb0e f303 	mul.w	r3, lr, r3
 80079a0:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80079a2:	5def      	ldrb	r7, [r5, r7]
 80079a4:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
 80079a8:	2b64      	cmp	r3, #100	@ 0x64
 80079aa:	d93c      	bls.n	8007a26 <HAL_JPEG_GetInfo.part.0+0x17e>
          quality += 5000UL / scale;
 80079ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80079b0:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80079b2:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
 80079b4:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80079b8:	4294      	cmp	r4, r2
 80079ba:	d025      	beq.n	8007a08 <HAL_JPEG_GetInfo.part.0+0x160>
    quantRow = *tableAddress;
 80079bc:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80079c0:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
 80079c2:	2f01      	cmp	r7, #1
 80079c4:	d028      	beq.n	8007a18 <HAL_JPEG_GetInfo.part.0+0x170>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80079c6:	f892 8000 	ldrb.w	r8, [r2]
 80079ca:	fb0e f707 	mul.w	r7, lr, r7
 80079ce:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80079d0:	f815 8008 	ldrb.w	r8, [r5, r8]
 80079d4:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 80079d8:	2f64      	cmp	r7, #100	@ 0x64
 80079da:	d929      	bls.n	8007a30 <HAL_JPEG_GetInfo.part.0+0x188>
          quality += 5000UL / scale;
 80079dc:	fbb1 f7f7 	udiv	r7, r1, r7
 80079e0:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80079e2:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
 80079e6:	2f01      	cmp	r7, #1
 80079e8:	d1b4      	bne.n	8007954 <HAL_JPEG_GetInfo.part.0+0xac>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80079ea:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
 80079ee:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 80079f0:	2f01      	cmp	r7, #1
 80079f2:	d1c1      	bne.n	8007978 <HAL_JPEG_GetInfo.part.0+0xd0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80079f4:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
 80079f6:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d1ce      	bne.n	800799a <HAL_JPEG_GetInfo.part.0+0xf2>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80079fc:	3204      	adds	r2, #4
        quality += 100UL;
 80079fe:	3664      	adds	r6, #100	@ 0x64
    tableAddress ++;
 8007a00:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007a04:	4294      	cmp	r4, r2
 8007a06:	d1d9      	bne.n	80079bc <HAL_JPEG_GetInfo.part.0+0x114>
  }

  return (quality / 64UL);
 8007a08:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
 8007a0a:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007a0c:	f8c9 6010 	str.w	r6, [r9, #16]
}
 8007a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a14:	2130      	movs	r1, #48	@ 0x30
 8007a16:	e76a      	b.n	80078ee <HAL_JPEG_GetInfo.part.0+0x46>
        quality += 100UL;
 8007a18:	3664      	adds	r6, #100	@ 0x64
 8007a1a:	e7e2      	b.n	80079e2 <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += (200UL - scale) / 2UL;
 8007a1c:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8007a20:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8007a24:	e7a4      	b.n	8007970 <HAL_JPEG_GetInfo.part.0+0xc8>
 8007a26:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8007a2a:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 8007a2e:	e7c0      	b.n	80079b2 <HAL_JPEG_GetInfo.part.0+0x10a>
 8007a30:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8007a34:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8007a38:	e7d3      	b.n	80079e2 <HAL_JPEG_GetInfo.part.0+0x13a>
 8007a3a:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8007a3e:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8007a42:	e7a7      	b.n	8007994 <HAL_JPEG_GetInfo.part.0+0xec>
 8007a44:	08010600 	.word	0x08010600

08007a48 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f000 8107 	beq.w	8007c5c <HAL_JPEG_Init+0x214>
{
 8007a4e:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8007a50:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007a54:	4605      	mov	r5, r0
 8007a56:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80f9 	beq.w	8007c52 <HAL_JPEG_Init+0x20a>
  __HAL_JPEG_ENABLE(hjpeg);
 8007a60:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007a62:	2202      	movs	r2, #2
  hjpeg->QuantTable2 = NULL;
 8007a64:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007a66:	497e      	ldr	r1, [pc, #504]	@ (8007c60 <HAL_JPEG_Init+0x218>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007a68:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 8007a6c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	6022      	str	r2, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007a7c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007a7e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007a82:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007a84:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007a86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a8a:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007a8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007a8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a92:	6322      	str	r2, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007a94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a96:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007a9a:	63a2      	str	r2, [r4, #56]	@ 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007a9c:	4a71      	ldr	r2, [pc, #452]	@ (8007c64 <HAL_JPEG_Init+0x21c>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007a9e:	63e9      	str	r1, [r5, #60]	@ 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007aa0:	2101      	movs	r1, #1
  hjpeg->QuantTable2 = NULL;
 8007aa2:	64ab      	str	r3, [r5, #72]	@ 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007aa4:	e9c5 2310 	strd	r2, r3, [r5, #64]	@ 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007aa8:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
 8007aac:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8007ab0:	4b6d      	ldr	r3, [pc, #436]	@ (8007c68 <HAL_JPEG_Init+0x220>)
 8007ab2:	f8c4 1368 	str.w	r1, [r4, #872]	@ 0x368
 8007ab6:	f8c4 2364 	str.w	r2, [r4, #868]	@ 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007aba:	496c      	ldr	r1, [pc, #432]	@ (8007c6c <HAL_JPEG_Init+0x224>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007abc:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8007c70 <HAL_JPEG_Init+0x228>)
 8007ac2:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
 8007ac6:	4a6b      	ldr	r2, [pc, #428]	@ (8007c74 <HAL_JPEG_Init+0x22c>)
 8007ac8:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007acc:	4b6a      	ldr	r3, [pc, #424]	@ (8007c78 <HAL_JPEG_Init+0x230>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ace:	f8c4 2370 	str.w	r2, [r4, #880]	@ 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007ad2:	496a      	ldr	r1, [pc, #424]	@ (8007c7c <HAL_JPEG_Init+0x234>)
 8007ad4:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
 8007ad8:	4a69      	ldr	r2, [pc, #420]	@ (8007c80 <HAL_JPEG_Init+0x238>)
 8007ada:	4b6a      	ldr	r3, [pc, #424]	@ (8007c84 <HAL_JPEG_Init+0x23c>)
 8007adc:	f8c4 1384 	str.w	r1, [r4, #900]	@ 0x384
 8007ae0:	f8c4 2380 	str.w	r2, [r4, #896]	@ 0x380
 8007ae4:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007ae8:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
  value = *address & 0xFFFF0000U;
 8007aec:	f8d4 142c 	ldr.w	r1, [r4, #1068]	@ 0x42c
 8007af0:	4a65      	ldr	r2, [pc, #404]	@ (8007c88 <HAL_JPEG_Init+0x240>)
 8007af2:	400a      	ands	r2, r1
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007af4:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007af8:	4313      	orrs	r3, r2
  *address = value;
 8007afa:	4a64      	ldr	r2, [pc, #400]	@ (8007c8c <HAL_JPEG_Init+0x244>)
 8007afc:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
 8007b00:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007b04:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007b08:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007b0a:	f892 e0b3 	ldrb.w	lr, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007b0e:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007b10:	f892 c0b0 	ldrb.w	ip, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007b14:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
  while (index > 3UL)
 8007b18:	4296      	cmp	r6, r2
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007b1a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007b1e:	ea43 030c 	orr.w	r3, r3, ip
 8007b22:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007b26:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007b2a:	d1eb      	bne.n	8007b04 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
 8007b2c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b30:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
  value = *address & 0xFFFF0000U;
 8007b34:	4954      	ldr	r1, [pc, #336]	@ (8007c88 <HAL_JPEG_Init+0x240>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b36:	2001      	movs	r0, #1
  value = *address & 0x0000FFFFU;
 8007b38:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007b3a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007b3e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007b42:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007b46:	400b      	ands	r3, r1
  *address = value;
 8007b48:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b4c:	f8c4 0438 	str.w	r0, [r4, #1080]	@ 0x438
 8007b50:	f8c4 2434 	str.w	r2, [r4, #1076]	@ 0x434
 8007b54:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007b58:	f640 320a 	movw	r2, #2826	@ 0xb0a
  value = *address & 0x0000FFFFUL;
 8007b5c:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007b60:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007b66:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007b6a:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007b6e:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007b70:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b72:	4b47      	ldr	r3, [pc, #284]	@ (8007c90 <HAL_JPEG_Init+0x248>)
  *address = value;
 8007b74:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007b78:	f247 7202 	movw	r2, #30466	@ 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b7c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007b80:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007b84:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007b88:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007b8c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007b8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007b92:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007b96:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007b9a:	400b      	ands	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b9c:	493d      	ldr	r1, [pc, #244]	@ (8007c94 <HAL_JPEG_Init+0x24c>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007b9e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8007c98 <HAL_JPEG_Init+0x250>)
  *address = value;
 8007ba2:	f8c4 2458 	str.w	r2, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8007c9c <HAL_JPEG_Init+0x254>)
 8007ba8:	f8c4 1454 	str.w	r1, [r4, #1108]	@ 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
 8007bac:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007bb0:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
 8007bb4:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007bb8:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007bbc:	4a38      	ldr	r2, [pc, #224]	@ (8007ca0 <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFUL;
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007bc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007bc8:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007bcc:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007bd0:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007bd2:	f892 e0b5 	ldrb.w	lr, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007bd6:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007bd8:	f892 c0b2 	ldrb.w	ip, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007bdc:	f892 00b3 	ldrb.w	r0, [r2, #179]	@ 0xb3
  while (index > 3UL)
 8007be0:	4296      	cmp	r6, r2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007be2:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8007be6:	ea43 030c 	orr.w	r3, r3, ip
 8007bea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007bee:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007bf2:	d1eb      	bne.n	8007bcc <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007bf4:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007bf8:	4924      	ldr	r1, [pc, #144]	@ (8007c8c <HAL_JPEG_Init+0x244>)
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f7ff fd44 	bl	8007688 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007c00:	b118      	cbz	r0, 8007c0a <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007c02:	2301      	movs	r3, #1
    return HAL_ERROR;
 8007c04:	2001      	movs	r0, #1
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007c06:	652b      	str	r3, [r5, #80]	@ 0x50
}
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007c0a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007c0e:	4924      	ldr	r1, [pc, #144]	@ (8007ca0 <HAL_JPEG_Init+0x258>)
 8007c10:	4628      	mov	r0, r5
 8007c12:	f7ff fd39 	bl	8007688 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d1f3      	bne.n	8007c02 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007c1a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007c1e:	4921      	ldr	r1, [pc, #132]	@ (8007ca4 <HAL_JPEG_Init+0x25c>)
 8007c20:	4628      	mov	r0, r5
 8007c22:	f7ff fc87 	bl	8007534 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d1eb      	bne.n	8007c02 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007c2a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007c2e:	491e      	ldr	r1, [pc, #120]	@ (8007ca8 <HAL_JPEG_Init+0x260>)
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7ff fc7f 	bl	8007534 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d1e3      	bne.n	8007c02 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007c3a:	6863      	ldr	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007c3c:	2201      	movs	r2, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c42:	6063      	str	r3, [r4, #4]
  hjpeg->JpegInCount = 0;
 8007c44:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007c46:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007c48:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007c4c:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007c4e:	6568      	str	r0, [r5, #84]	@ 0x54
}
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 8007c52:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007c56:	f7fb f8cf 	bl	8002df8 <HAL_JPEG_MspInit>
 8007c5a:	e701      	b.n	8007a60 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
 8007c5c:	2001      	movs	r0, #1
}
 8007c5e:	4770      	bx	lr
 8007c60:	080105c0 	.word	0x080105c0
 8007c64:	08010580 	.word	0x08010580
 8007c68:	01050100 	.word	0x01050100
 8007c6c:	0b0a0908 	.word	0x0b0a0908
 8007c70:	07060504 	.word	0x07060504
 8007c74:	03020100 	.word	0x03020100
 8007c78:	7d010000 	.word	0x7d010000
 8007c7c:	04040505 	.word	0x04040505
 8007c80:	03040203 	.word	0x03040203
 8007c84:	03010200 	.word	0x03010200
 8007c88:	ffff0000 	.word	0xffff0000
 8007c8c:	080106f4 	.word	0x080106f4
 8007c90:	09080706 	.word	0x09080706
 8007c94:	01000404 	.word	0x01000404
 8007c98:	04040201 	.word	0x04040201
 8007c9c:	05070403 	.word	0x05070403
 8007ca0:	08010640 	.word	0x08010640
 8007ca4:	080107c4 	.word	0x080107c4
 8007ca8:	080107a8 	.word	0x080107a8

08007cac <HAL_JPEG_GetInfo>:
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007cac:	b110      	cbz	r0, 8007cb4 <HAL_JPEG_GetInfo+0x8>
 8007cae:	b109      	cbz	r1, 8007cb4 <HAL_JPEG_GetInfo+0x8>
 8007cb0:	f7ff bdfa 	b.w	80078a8 <HAL_JPEG_GetInfo.part.0>
}
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bf18      	it	ne
 8007cbc:	2900      	cmpne	r1, #0
 8007cbe:	d036      	beq.n	8007d2e <HAL_JPEG_Decode_DMA+0x76>
{
 8007cc0:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007cc2:	fab0 f580 	clz	r5, r0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	096d      	lsrs	r5, r5, #5
 8007cca:	b370      	cbz	r0, 8007d2a <HAL_JPEG_Decode_DMA+0x72>
  __HAL_LOCK(hjpeg);
 8007ccc:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 8007cd0:	f1bc 0f01 	cmp.w	ip, #1
 8007cd4:	d022      	beq.n	8007d1c <HAL_JPEG_Decode_DMA+0x64>
 8007cd6:	f04f 0c01 	mov.w	ip, #1
 8007cda:	f880 c04c 	strb.w	ip, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8007cde:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 8007ce2:	f1bc 0f01 	cmp.w	ip, #1
 8007ce6:	d117      	bne.n	8007d18 <HAL_JPEG_Decode_DMA+0x60>
    hjpeg->InDataLength = InDataLength;
 8007ce8:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8007cea:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
 8007cee:	9b04      	ldr	r3, [sp, #16]
 8007cf0:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007cf8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007cfa:	f023 030f 	bic.w	r3, r3, #15
 8007cfe:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007d00:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007d02:	f043 030e 	orr.w	r3, r3, #14
 8007d06:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8007d08:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 8007d0a:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8007d0c:	f7ff fd46 	bl	800779c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007d10:	f7ff fd82 	bl	8007818 <JPEG_DMA_StartProcess>
 8007d14:	b920      	cbnz	r0, 8007d20 <HAL_JPEG_Decode_DMA+0x68>
}
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8007d18:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8007d1c:	2002      	movs	r0, #2
}
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007d20:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8007d22:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007d26:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8007d2a:	2001      	movs	r0, #1
}
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007d2e:	2001      	movs	r0, #1
}
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop

08007d34 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8007d34:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8007d36:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop

08007d3c <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8007d3c:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8007d3e:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop

08007d44 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop

08007d48 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007d48:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007d4a:	2101      	movs	r1, #1
{
 8007d4c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007d4e:	6803      	ldr	r3, [r0, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	f022 0201 	bic.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d5a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007d60:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007d64:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007d66:	f043 0304 	orr.w	r3, r3, #4
 8007d6a:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8007d6c:	f7f9 fd38 	bl	80017e0 <HAL_JPEG_ErrorCallback>
}
 8007d70:	bd08      	pop	{r3, pc}
 8007d72:	bf00      	nop

08007d74 <JPEG_MDMAInCpltCallback>:
{
 8007d74:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007d76:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8007d78:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8007d7c:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007d7e:	6822      	ldr	r2, [r4, #0]
 8007d80:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007d82:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007d86:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8007d88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007d8a:	400b      	ands	r3, r1
 8007d8c:	2b0c      	cmp	r3, #12
 8007d8e:	d001      	beq.n	8007d94 <JPEG_MDMAInCpltCallback+0x20>
}
 8007d90:	b003      	add	sp, #12
 8007d92:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007d94:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007d96:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007d98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007d9a:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007d9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007d9e:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007da2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007da8:	6a21      	ldr	r1, [r4, #32]
 8007daa:	f7f9 fce7 	bl	800177c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8007dae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007db0:	42ab      	cmp	r3, r5
 8007db2:	d311      	bcc.n	8007dd8 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
 8007db4:	b305      	cbz	r5, 8007df8 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007db6:	fbb3 f2f5 	udiv	r2, r3, r5
 8007dba:	fb05 3212 	mls	r2, r5, r2, r3
 8007dbe:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007dc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007dc2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007dc4:	04d1      	lsls	r1, r2, #19
 8007dc6:	d400      	bmi.n	8007dca <JPEG_MDMAInCpltCallback+0x56>
 8007dc8:	b963      	cbnz	r3, 8007de4 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007dce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007dd2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8007dd4:	b003      	add	sp, #12
 8007dd6:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
 8007dd8:	b1cb      	cbz	r3, 8007e0e <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8007dda:	0798      	lsls	r0, r3, #30
 8007ddc:	d119      	bne.n	8007e12 <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007dde:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007de0:	04d2      	lsls	r2, r2, #19
 8007de2:	d4f2      	bmi.n	8007dca <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	2501      	movs	r5, #1
 8007de8:	69a1      	ldr	r1, [r4, #24]
 8007dea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007dec:	3240      	adds	r2, #64	@ 0x40
 8007dee:	9500      	str	r5, [sp, #0]
 8007df0:	f000 fe54 	bl	8008a9c <HAL_MDMA_Start_IT>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d0e8      	beq.n	8007dca <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007df8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007dfa:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
 8007dfc:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007dfe:	f043 0304 	orr.w	r3, r3, #4
 8007e02:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007e04:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8007e08:	f7f9 fcea 	bl	80017e0 <HAL_JPEG_ErrorCallback>
        return;
 8007e0c:	e7c0      	b.n	8007d90 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007e0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007e10:	e7db      	b.n	8007dca <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	3304      	adds	r3, #4
 8007e18:	e7d2      	b.n	8007dc0 <JPEG_MDMAInCpltCallback+0x4c>
 8007e1a:	bf00      	nop

08007e1c <JPEG_DMA_PollResidualData>:
{
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007e1e:	6802      	ldr	r2, [r0, #0]
 8007e20:	2610      	movs	r6, #16
{
 8007e22:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007e24:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8007e26:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8007e2a:	d11d      	bne.n	8007e68 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8007e2c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007e2e:	06df      	lsls	r7, r3, #27
 8007e30:	d51a      	bpl.n	8007e68 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
 8007e32:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8007e34:	69e7      	ldr	r7, [r4, #28]
 8007e36:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8007e38:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8007e3a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8007e3c:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8007e3e:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8007e40:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8007e42:	69e2      	ldr	r2, [r4, #28]
 8007e44:	443a      	add	r2, r7
 8007e46:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8007e48:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007e4a:	69e2      	ldr	r2, [r4, #28]
 8007e4c:	4402      	add	r2, r0
 8007e4e:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8007e50:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007e52:	69e2      	ldr	r2, [r4, #28]
 8007e54:	440a      	add	r2, r1
 8007e56:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8007e58:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007e5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hjpeg->JpegOutCount += 4UL;
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007e60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d021      	beq.n	8007eaa <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8007e66:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8007e68:	3e01      	subs	r6, #1
 8007e6a:	d1db      	bne.n	8007e24 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 8007e6c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8007e6e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007e70:	06d8      	lsls	r0, r3, #27
 8007e72:	d501      	bpl.n	8007e78 <JPEG_DMA_PollResidualData+0x5c>
 8007e74:	048b      	lsls	r3, r1, #18
 8007e76:	d417      	bmi.n	8007ea8 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007e78:	6813      	ldr	r3, [r2, #0]
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8007e80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e82:	b9eb      	cbnz	r3, 8007ec0 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
 8007e84:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8007e86:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007e88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007e8a:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007e8c:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8007e90:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007e94:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007e98:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007e9a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007e9c:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007e9e:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ea2:	d00a      	beq.n	8007eba <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007ea4:	f7ff ff4e 	bl	8007d44 <HAL_JPEG_EncodeCpltCallback>
}
 8007ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007eaa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007eac:	4620      	mov	r0, r4
 8007eae:	69e1      	ldr	r1, [r4, #28]
 8007eb0:	f7f9 fc88 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8007eb4:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
 8007eb6:	6265      	str	r5, [r4, #36]	@ 0x24
 8007eb8:	e7d6      	b.n	8007e68 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007eba:	f7f9 fc93 	bl	80017e4 <HAL_JPEG_DecodeCpltCallback>
}
 8007ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007ec0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	69e1      	ldr	r1, [r4, #28]
 8007ec6:	f7f9 fc7d 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ece:	e7d9      	b.n	8007e84 <JPEG_DMA_PollResidualData+0x68>

08007ed0 <JPEG_MDMAOutCpltCallback>:
{
 8007ed0:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007ed2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8007ed4:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8007ed8:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ede:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8007ee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ee6:	400a      	ands	r2, r1
 8007ee8:	2a0c      	cmp	r2, #12
 8007eea:	d001      	beq.n	8007ef0 <JPEG_MDMAOutCpltCallback+0x20>
}
 8007eec:	b003      	add	sp, #12
 8007eee:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8007ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ef2:	0692      	lsls	r2, r2, #26
 8007ef4:	d505      	bpl.n	8007f02 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ef8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007efc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007efe:	b003      	add	sp, #12
 8007f00:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f02:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007f04:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f06:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007f08:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007f0a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f0c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007f14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007f16:	f7f9 fc55 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007f1a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007f1c:	049b      	lsls	r3, r3, #18
 8007f1e:	d501      	bpl.n	8007f24 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	e7e8      	b.n	8007ef6 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007f24:	6821      	ldr	r1, [r4, #0]
 8007f26:	2501      	movs	r5, #1
 8007f28:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007f2a:	69e2      	ldr	r2, [r4, #28]
 8007f2c:	3144      	adds	r1, #68	@ 0x44
 8007f2e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007f30:	9500      	str	r5, [sp, #0]
 8007f32:	f000 fdb3 	bl	8008a9c <HAL_MDMA_Start_IT>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0f2      	beq.n	8007f20 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007f3a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f3c:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
 8007f3e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007f40:	f043 0304 	orr.w	r3, r3, #4
 8007f44:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f46:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8007f4a:	f7f9 fc49 	bl	80017e0 <HAL_JPEG_ErrorCallback>
          return;
 8007f4e:	e7cd      	b.n	8007eec <JPEG_MDMAOutCpltCallback+0x1c>

08007f50 <JPEG_MDMAOutAbortCallback>:
{
 8007f50:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007f52:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8007f54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007f56:	041a      	lsls	r2, r3, #16
 8007f58:	d400      	bmi.n	8007f5c <JPEG_MDMAOutAbortCallback+0xc>
}
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8007f6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d025      	beq.n	8007fbe <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8007f76:	f015 0510 	ands.w	r5, r5, #16
 8007f7a:	d118      	bne.n	8007fae <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
 8007f7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007f7e:	bb4b      	cbnz	r3, 8007fd4 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007f80:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8007f82:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007f84:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8007f8c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007f8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007f90:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8007f94:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007f98:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007f9c:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007f9e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8007fa0:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007fa2:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007fa6:	d012      	beq.n	8007fce <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8007fa8:	f7ff fecc 	bl	8007d44 <HAL_JPEG_EncodeCpltCallback>
}
 8007fac:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8007fae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007fb0:	049b      	lsls	r3, r3, #18
 8007fb2:	d4d2      	bmi.n	8007f5a <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
 8007fb4:	4620      	mov	r0, r4
}
 8007fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8007fba:	f7ff bf2f 	b.w	8007e1c <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007fbe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	69e1      	ldr	r1, [r4, #28]
 8007fc4:	f7f9 fbfe 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fcc:	e7d1      	b.n	8007f72 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007fce:	f7f9 fc09 	bl	80017e4 <HAL_JPEG_DecodeCpltCallback>
}
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007fd4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	69e1      	ldr	r1, [r4, #28]
 8007fda:	f7f9 fbf3 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007fde:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8007fe0:	6265      	str	r5, [r4, #36]	@ 0x24
 8007fe2:	e7cd      	b.n	8007f80 <JPEG_MDMAOutAbortCallback+0x30>

08007fe4 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007fe4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8007fe6:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007fe8:	f002 0203 	and.w	r2, r2, #3
 8007fec:	2a02      	cmp	r2, #2
{
 8007fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff2:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ff4:	d01e      	beq.n	8008034 <JPEG_Process+0x50>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8007ff6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ff8:	04d7      	lsls	r7, r2, #19
 8007ffa:	d407      	bmi.n	800800c <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8007ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ffe:	0796      	lsls	r6, r2, #30
 8008000:	f100 811b 	bmi.w	800823a <JPEG_Process+0x256>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8008004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008006:	0750      	lsls	r0, r2, #29
 8008008:	f100 81cc 	bmi.w	80083a4 <JPEG_Process+0x3c0>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800800c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 800800e:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8008012:	d107      	bne.n	8008024 <JPEG_Process+0x40>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8008014:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8008016:	f016 0608 	ands.w	r6, r6, #8
 800801a:	d14a      	bne.n	80080b2 <JPEG_Process+0xce>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800801c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800801e:	06d2      	lsls	r2, r2, #27
 8008020:	f100 81fe 	bmi.w	8008420 <JPEG_Process+0x43c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008026:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800802a:	2a20      	cmp	r2, #32
 800802c:	d019      	beq.n	8008062 <JPEG_Process+0x7e>
  return JPEG_PROCESS_ONGOING;
 800802e:	2000      	movs	r0, #0
}
 8008030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008036:	0652      	lsls	r2, r2, #25
 8008038:	d5dd      	bpl.n	8007ff6 <JPEG_Process+0x12>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800803a:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 800803c:	4629      	mov	r1, r5
 800803e:	f7ff fc33 	bl	80078a8 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 8008042:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008044:	4629      	mov	r1, r5
 8008046:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008048:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800804a:	f7f9 fb95 	bl	8001778 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008056:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800805a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800805e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008060:	e7c9      	b.n	8007ff6 <JPEG_Process+0x12>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	f022 0201 	bic.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800806a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800806c:	f002 020c 	and.w	r2, r2, #12
 8008070:	2a08      	cmp	r2, #8
 8008072:	f000 8201 	beq.w	8008478 <JPEG_Process+0x494>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008078:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800807e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	f040 81fe 	bne.w	8008482 <JPEG_Process+0x49e>
    tmpContext = hjpeg->Context;
 8008086:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008088:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800808a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800808c:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800808e:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8008092:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008096:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800809a:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800809c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800809e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80080a0:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80080a4:	f000 81e5 	beq.w	8008472 <JPEG_Process+0x48e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80080a8:	f7ff fe4c 	bl	8007d44 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80080ac:	2001      	movs	r0, #1
}
 80080ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80080b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080b6:	3220      	adds	r2, #32
 80080b8:	4296      	cmp	r6, r2
 80080ba:	f0c0 8200 	bcc.w	80084be <JPEG_Process+0x4da>
      dataword = hjpeg->Instance->DOR;
 80080be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80080c0:	69e1      	ldr	r1, [r4, #28]
 80080c2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080c4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80080c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080c8:	69e2      	ldr	r2, [r4, #28]
 80080ca:	440a      	add	r2, r1
 80080cc:	0a19      	lsrs	r1, r3, #8
 80080ce:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80080d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080d2:	69e2      	ldr	r2, [r4, #28]
 80080d4:	440a      	add	r2, r1
 80080d6:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80080d8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80080da:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80080dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080de:	69e2      	ldr	r2, [r4, #28]
 80080e0:	440a      	add	r2, r1
 80080e2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80080e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80080e6:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80080e8:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80080ea:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80080ec:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80080ee:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80080f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080f2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80080f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080f6:	69e2      	ldr	r2, [r4, #28]
 80080f8:	440a      	add	r2, r1
 80080fa:	0a19      	lsrs	r1, r3, #8
 80080fc:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80080fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008100:	69e2      	ldr	r2, [r4, #28]
 8008102:	440a      	add	r2, r1
 8008104:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008106:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008108:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800810a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800810c:	69e2      	ldr	r2, [r4, #28]
 800810e:	440a      	add	r2, r1
 8008110:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008112:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008114:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8008116:	3304      	adds	r3, #4
 8008118:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800811a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800811c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800811e:	69e1      	ldr	r1, [r4, #28]
 8008120:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008122:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008124:	69e2      	ldr	r2, [r4, #28]
 8008126:	440a      	add	r2, r1
 8008128:	0a19      	lsrs	r1, r3, #8
 800812a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800812c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800812e:	69e2      	ldr	r2, [r4, #28]
 8008130:	440a      	add	r2, r1
 8008132:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008134:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008136:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008138:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800813a:	69e2      	ldr	r2, [r4, #28]
 800813c:	440a      	add	r2, r1
 800813e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008140:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008142:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8008144:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008146:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8008148:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800814a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800814c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800814e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008150:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008152:	69e2      	ldr	r2, [r4, #28]
 8008154:	440a      	add	r2, r1
 8008156:	0a19      	lsrs	r1, r3, #8
 8008158:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800815a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800815c:	69e2      	ldr	r2, [r4, #28]
 800815e:	440a      	add	r2, r1
 8008160:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008162:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008164:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008166:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008168:	69e2      	ldr	r2, [r4, #28]
 800816a:	440a      	add	r2, r1
 800816c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800816e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008170:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8008172:	3304      	adds	r3, #4
 8008174:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8008176:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008178:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800817a:	69e1      	ldr	r1, [r4, #28]
 800817c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800817e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008180:	69e2      	ldr	r2, [r4, #28]
 8008182:	440a      	add	r2, r1
 8008184:	0a19      	lsrs	r1, r3, #8
 8008186:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008188:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800818a:	69e2      	ldr	r2, [r4, #28]
 800818c:	440a      	add	r2, r1
 800818e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008190:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008192:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008194:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008196:	69e2      	ldr	r2, [r4, #28]
 8008198:	440a      	add	r2, r1
 800819a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800819c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800819e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80081a0:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80081a2:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80081a4:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80081a6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80081a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081aa:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80081ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081ae:	69e2      	ldr	r2, [r4, #28]
 80081b0:	440a      	add	r2, r1
 80081b2:	0a19      	lsrs	r1, r3, #8
 80081b4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081b8:	69e2      	ldr	r2, [r4, #28]
 80081ba:	440a      	add	r2, r1
 80081bc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081be:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081c0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081c4:	69e2      	ldr	r2, [r4, #28]
 80081c6:	440a      	add	r2, r1
 80081c8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80081ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80081cc:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80081ce:	3304      	adds	r3, #4
 80081d0:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80081d2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80081d4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081d6:	69e1      	ldr	r1, [r4, #28]
 80081d8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80081da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081dc:	69e2      	ldr	r2, [r4, #28]
 80081de:	440a      	add	r2, r1
 80081e0:	0a19      	lsrs	r1, r3, #8
 80081e2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081e6:	69e2      	ldr	r2, [r4, #28]
 80081e8:	440a      	add	r2, r1
 80081ea:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081ec:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081ee:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081f2:	69e2      	ldr	r2, [r4, #28]
 80081f4:	440a      	add	r2, r1
 80081f6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80081f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80081fa:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80081fc:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80081fe:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8008200:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8008202:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008204:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008206:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008208:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800820a:	69e2      	ldr	r2, [r4, #28]
 800820c:	440a      	add	r2, r1
 800820e:	0a19      	lsrs	r1, r3, #8
 8008210:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008212:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008214:	69e2      	ldr	r2, [r4, #28]
 8008216:	440a      	add	r2, r1
 8008218:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800821a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800821c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800821e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008220:	69e2      	ldr	r2, [r4, #28]
 8008222:	440a      	add	r2, r1
 8008224:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008226:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008228:	3304      	adds	r3, #4
 800822a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800822c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800822e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008230:	429a      	cmp	r2, r3
 8008232:	f000 8258 	beq.w	80086e6 <JPEG_Process+0x702>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	e6f4      	b.n	8008024 <JPEG_Process+0x40>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800823a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800823c:	2a00      	cmp	r2, #0
 800823e:	f000 8128 	beq.w	8008492 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008242:	6a21      	ldr	r1, [r4, #32]
 8008244:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008246:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008248:	f240 81b9 	bls.w	80085be <JPEG_Process+0x5da>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800824c:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800824e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8008250:	04cd      	lsls	r5, r1, #19
 8008252:	f53f aedb 	bmi.w	800800c <JPEG_Process+0x28>
 8008256:	2a00      	cmp	r2, #0
 8008258:	f43f aed8 	beq.w	800800c <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 800825c:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
 800825e:	ea4f 0092 	mov.w	r0, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8008262:	f200 8248 	bhi.w	80086f6 <JPEG_Process+0x712>
      if (nb_words > 0UL)
 8008266:	2a03      	cmp	r2, #3
 8008268:	f240 82c0 	bls.w	80087ec <JPEG_Process+0x808>
          input_count = hjpeg->JpegInCount;
 800826c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800826e:	2801      	cmp	r0, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008270:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008272:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008276:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008278:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800827a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800827c:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008280:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008282:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8008286:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800828a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800828e:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	f101 0104 	add.w	r1, r1, #4
 8008296:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008298:	f43f aeb8 	beq.w	800800c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 800829c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800829e:	2802      	cmp	r0, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082a0:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082a4:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082a6:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082a8:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082aa:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80082ae:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082b0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80082b4:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082b8:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082bc:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80082be:	6a21      	ldr	r1, [r4, #32]
 80082c0:	f101 0104 	add.w	r1, r1, #4
 80082c4:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80082c6:	f43f aea1 	beq.w	800800c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80082ca:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80082cc:	2803      	cmp	r0, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082ce:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082d2:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082d4:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082d6:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082d8:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80082dc:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082de:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80082e2:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80082e6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80082ea:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80082ec:	6a21      	ldr	r1, [r4, #32]
 80082ee:	f101 0104 	add.w	r1, r1, #4
 80082f2:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80082f4:	f43f ae8a 	beq.w	800800c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80082f8:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80082fa:	2804      	cmp	r0, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80082fc:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008300:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008302:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008304:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008306:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800830a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800830c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8008310:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008314:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008318:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800831a:	6a21      	ldr	r1, [r4, #32]
 800831c:	f101 0104 	add.w	r1, r1, #4
 8008320:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008322:	f43f ae73 	beq.w	800800c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8008326:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008328:	2805      	cmp	r0, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800832a:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800832e:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008330:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008332:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008334:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008338:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800833a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800833e:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008342:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008346:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008348:	6a21      	ldr	r1, [r4, #32]
 800834a:	f101 0104 	add.w	r1, r1, #4
 800834e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008350:	f43f ae5c 	beq.w	800800c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8008354:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008356:	2807      	cmp	r0, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008358:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800835c:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800835e:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008360:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008362:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008366:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008368:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800836c:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008370:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008374:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008376:	6a21      	ldr	r1, [r4, #32]
 8008378:	f101 0104 	add.w	r1, r1, #4
 800837c:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800837e:	f47f ae45 	bne.w	800800c <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8008382:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008384:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008386:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008388:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800838a:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800838c:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800838e:	7849      	ldrb	r1, [r1, #1]
 8008390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008394:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008396:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800839a:	641a      	str	r2, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800839c:	6a22      	ldr	r2, [r4, #32]
 800839e:	3204      	adds	r2, #4
 80083a0:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80083a2:	e633      	b.n	800800c <JPEG_Process+0x28>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80083a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	d073      	beq.n	8008492 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80083aa:	6a21      	ldr	r1, [r4, #32]
 80083ac:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80083ae:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80083b0:	f200 8182 	bhi.w	80086b8 <JPEG_Process+0x6d4>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80083b4:	428a      	cmp	r2, r1
 80083b6:	f040 8104 	bne.w	80085c2 <JPEG_Process+0x5de>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80083ba:	6a21      	ldr	r1, [r4, #32]
 80083bc:	4620      	mov	r0, r4
 80083be:	f7f9 f9dd 	bl	800177c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80083c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80083c4:	2a04      	cmp	r2, #4
 80083c6:	d902      	bls.n	80083ce <JPEG_Process+0x3ea>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80083c8:	f022 0203 	bic.w	r2, r2, #3
 80083cc:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80083ce:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80083d0:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 80083d2:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80083d4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80083d6:	04c9      	lsls	r1, r1, #19
 80083d8:	f53f ae18 	bmi.w	800800c <JPEG_Process+0x28>
 80083dc:	2a00      	cmp	r2, #0
 80083de:	f43f ae15 	beq.w	800800c <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 80083e2:	0891      	lsrs	r1, r2, #2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80083e4:	69a0      	ldr	r0, [r4, #24]
    if (nb_words >= nbRequestWords)
 80083e6:	f040 8177 	bne.w	80086d8 <JPEG_Process+0x6f4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80083ea:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80083ec:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 80083ee:	6a25      	ldr	r5, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80083f0:	5c41      	ldrb	r1, [r0, r1]
          hjpeg->JpegInCount++;
 80083f2:	f105 0501 	add.w	r5, r5, #1
 80083f6:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80083f8:	d010      	beq.n	800841c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80083fa:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80083fc:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80083fe:	5d45      	ldrb	r5, [r0, r5]
 8008400:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
          hjpeg->JpegInCount++;
 8008404:	6a25      	ldr	r5, [r4, #32]
 8008406:	f105 0501 	add.w	r5, r5, #1
 800840a:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800840c:	d106      	bne.n	800841c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800840e:	6a22      	ldr	r2, [r4, #32]
 8008410:	5c80      	ldrb	r0, [r0, r2]
          hjpeg->JpegInCount++;
 8008412:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008414:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8008418:	3201      	adds	r2, #1
 800841a:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 800841c:	6419      	str	r1, [r3, #64]	@ 0x40
 800841e:	e5f5      	b.n	800800c <JPEG_Process+0x28>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008420:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008422:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8008424:	3204      	adds	r2, #4
 8008426:	4295      	cmp	r5, r2
 8008428:	f0c0 80cd 	bcc.w	80085c6 <JPEG_Process+0x5e2>
      dataword = hjpeg->Instance->DOR;
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800842e:	69e1      	ldr	r1, [r4, #28]
 8008430:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008432:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008434:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008436:	69e2      	ldr	r2, [r4, #28]
 8008438:	440a      	add	r2, r1
 800843a:	0a19      	lsrs	r1, r3, #8
 800843c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800843e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008440:	69e2      	ldr	r2, [r4, #28]
 8008442:	440a      	add	r2, r1
 8008444:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008446:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008448:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800844a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800844c:	69e2      	ldr	r2, [r4, #28]
 800844e:	440a      	add	r2, r1
 8008450:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008452:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008454:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      hjpeg->JpegOutCount += 4UL;
 8008456:	3304      	adds	r3, #4
 8008458:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800845a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800845c:	429a      	cmp	r2, r3
 800845e:	f47f aeea 	bne.w	8008236 <JPEG_Process+0x252>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008462:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008464:	4620      	mov	r0, r4
 8008466:	69e1      	ldr	r1, [r4, #28]
 8008468:	f7f9 f9ac 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800846c:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 800846e:	6266      	str	r6, [r4, #36]	@ 0x24
 8008470:	e5d8      	b.n	8008024 <JPEG_Process+0x40>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008472:	f7f9 f9b7 	bl	80017e4 <HAL_JPEG_DecodeCpltCallback>
 8008476:	e619      	b.n	80080ac <JPEG_Process+0xc8>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800847a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800847e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008480:	e5f9      	b.n	8008076 <JPEG_Process+0x92>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008482:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008484:	4620      	mov	r0, r4
 8008486:	69e1      	ldr	r1, [r4, #28]
 8008488:	f7f9 f99c 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008490:	e5f9      	b.n	8008086 <JPEG_Process+0xa2>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008492:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008494:	f002 020c 	and.w	r2, r2, #12
 8008498:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800849a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800849c:	f000 811e 	beq.w	80086dc <JPEG_Process+0x6f8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80084a0:	f002 020c 	and.w	r2, r2, #12
 80084a4:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80084a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80084a8:	f47f adb0 	bne.w	800800c <JPEG_Process+0x28>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80084ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084b0:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80084b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084b4:	f022 0206 	bic.w	r2, r2, #6
 80084b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80084ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084bc:	e5a6      	b.n	800800c <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80084be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084c0:	4296      	cmp	r6, r2
 80084c2:	f67f adaf 	bls.w	8008024 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80084c6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80084c8:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
 80084ca:	0880      	lsrs	r0, r0, #2
 80084cc:	d020      	beq.n	8008510 <JPEG_Process+0x52c>
 80084ce:	4629      	mov	r1, r5
 80084d0:	e000      	b.n	80084d4 <JPEG_Process+0x4f0>
      dataword = hjpeg->Instance->DOR;
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 80084d6:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80084d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084da:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
 80084dc:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80084de:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80084e0:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80084e2:	69e2      	ldr	r2, [r4, #28]
 80084e4:	4432      	add	r2, r6
 80084e6:	ea4f 2613 	mov.w	r6, r3, lsr #8
 80084ea:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80084ec:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80084ee:	69e2      	ldr	r2, [r4, #28]
 80084f0:	4432      	add	r2, r6
 80084f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80084f6:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80084fa:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80084fc:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80084fe:	69e2      	ldr	r2, [r4, #28]
 8008500:	4432      	add	r2, r6
 8008502:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8008504:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008506:	f103 0304 	add.w	r3, r3, #4
 800850a:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800850c:	d1e1      	bne.n	80084d2 <JPEG_Process+0x4ee>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800850e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008510:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008512:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008514:	429e      	cmp	r6, r3
 8008516:	f000 8161 	beq.w	80087dc <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800851a:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800851e:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8008520:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
 8008524:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008526:	d00e      	beq.n	8008546 <JPEG_Process+0x562>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008528:	f005 0303 	and.w	r3, r5, #3
 800852c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800852e:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008530:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 8008532:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008534:	fa27 f303 	lsr.w	r3, r7, r3
 8008538:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 800853a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800853c:	69e1      	ldr	r1, [r4, #28]
 800853e:	f103 0301 	add.w	r3, r3, #1
 8008542:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008544:	d1f0      	bne.n	8008528 <JPEG_Process+0x544>
      nb_bytes = 4UL - nb_bytes;
 8008546:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800854a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800854c:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
 800854e:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008552:	f7f9 f937 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008556:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 8008558:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
 800855a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800855c:	f63f ae6b 	bhi.w	8008236 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008560:	ea4f 02c6 	mov.w	r2, r6, lsl #3
 8008564:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008566:	69e0      	ldr	r0, [r4, #28]
 8008568:	fa27 f502 	lsr.w	r5, r7, r2
 800856c:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 800856e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008570:	f101 0101 	add.w	r1, r1, #1
 8008574:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008576:	f43f ae5e 	beq.w	8008236 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800857a:	f102 0108 	add.w	r1, r2, #8
 800857e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008580:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008582:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008584:	fa27 f101 	lsr.w	r1, r7, r1
 8008588:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 800858a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800858c:	f101 0101 	add.w	r1, r1, #1
 8008590:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008592:	f43f ae50 	beq.w	8008236 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008596:	3210      	adds	r2, #16
 8008598:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800859a:	69e0      	ldr	r0, [r4, #28]
 800859c:	fa27 f202 	lsr.w	r2, r7, r2
 80085a0:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80085a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085a4:	3201      	adds	r2, #1
 80085a6:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	f47f ae44 	bne.w	8008236 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80085ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80085b0:	0e3f      	lsrs	r7, r7, #24
 80085b2:	69e2      	ldr	r2, [r4, #28]
 80085b4:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
 80085b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80085b8:	3301      	adds	r3, #1
 80085ba:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80085bc:	e63b      	b.n	8008236 <JPEG_Process+0x252>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80085be:	428a      	cmp	r2, r1
 80085c0:	d07c      	beq.n	80086bc <JPEG_Process+0x6d8>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80085c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085c4:	e522      	b.n	800800c <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80085c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085c8:	4295      	cmp	r5, r2
 80085ca:	f67f ad2b 	bls.w	8008024 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80085ce:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80085d0:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
 80085d2:	0880      	lsrs	r0, r0, #2
 80085d4:	d020      	beq.n	8008618 <JPEG_Process+0x634>
 80085d6:	4631      	mov	r1, r6
 80085d8:	e000      	b.n	80085dc <JPEG_Process+0x5f8>
      dataword = hjpeg->Instance->DOR;
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 80085de:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80085e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085e2:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
 80085e4:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80085e6:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80085e8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80085ea:	69e2      	ldr	r2, [r4, #28]
 80085ec:	442a      	add	r2, r5
 80085ee:	ea4f 2513 	mov.w	r5, r3, lsr #8
 80085f2:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80085f4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80085f6:	69e2      	ldr	r2, [r4, #28]
 80085f8:	442a      	add	r2, r5
 80085fa:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80085fe:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008602:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008604:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008606:	69e2      	ldr	r2, [r4, #28]
 8008608:	442a      	add	r2, r5
 800860a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800860c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800860e:	f103 0304 	add.w	r3, r3, #4
 8008612:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008614:	d1e1      	bne.n	80085da <JPEG_Process+0x5f6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008616:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8008618:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800861a:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800861c:	429d      	cmp	r5, r3
 800861e:	f000 80dd 	beq.w	80087dc <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008622:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8008626:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8008628:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
 800862c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800862e:	d00e      	beq.n	800864e <JPEG_Process+0x66a>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008630:	f006 0303 	and.w	r3, r6, #3
 8008634:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008636:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008638:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 800863a:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800863c:	fa27 f303 	lsr.w	r3, r7, r3
 8008640:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8008642:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008644:	69e1      	ldr	r1, [r4, #28]
 8008646:	f103 0301 	add.w	r3, r3, #1
 800864a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800864c:	d1f0      	bne.n	8008630 <JPEG_Process+0x64c>
      nb_bytes = 4UL - nb_bytes;
 800864e:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008652:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008654:	4620      	mov	r0, r4
 8008656:	f7f9 f8b5 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
      nb_bytes = 4UL - nb_bytes;
 800865a:	eba8 0305 	sub.w	r3, r8, r5
      hjpeg->JpegOutCount = 0;
 800865e:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 8008660:	2b03      	cmp	r3, #3
      hjpeg->JpegOutCount = 0;
 8008662:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008664:	f63f ade7 	bhi.w	8008236 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008668:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 800866c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800866e:	69e0      	ldr	r0, [r4, #28]
 8008670:	fa27 f502 	lsr.w	r5, r7, r2
 8008674:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 8008676:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008678:	f101 0101 	add.w	r1, r1, #1
 800867c:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800867e:	f43f adda 	beq.w	8008236 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008682:	f102 0108 	add.w	r1, r2, #8
 8008686:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008688:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800868a:	2b02      	cmp	r3, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800868c:	fa27 f101 	lsr.w	r1, r7, r1
 8008690:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 8008692:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008694:	f101 0101 	add.w	r1, r1, #1
 8008698:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800869a:	f43f adcc 	beq.w	8008236 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800869e:	3210      	adds	r2, #16
 80086a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80086a2:	69e0      	ldr	r0, [r4, #28]
 80086a4:	fa27 f202 	lsr.w	r2, r7, r2
 80086a8:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80086aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086ac:	3201      	adds	r2, #1
 80086ae:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f43f af7c 	beq.w	80085ae <JPEG_Process+0x5ca>
 80086b6:	e5be      	b.n	8008236 <JPEG_Process+0x252>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80086b8:	1a52      	subs	r2, r2, r1
 80086ba:	e68b      	b.n	80083d4 <JPEG_Process+0x3f0>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80086bc:	6a21      	ldr	r1, [r4, #32]
 80086be:	4620      	mov	r0, r4
 80086c0:	f7f9 f85c 	bl	800177c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80086c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80086c6:	2a04      	cmp	r2, #4
 80086c8:	d902      	bls.n	80086d0 <JPEG_Process+0x6ec>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80086ca:	f022 0203 	bic.w	r2, r2, #3
 80086ce:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80086d0:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086d2:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 80086d4:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80086d6:	e5ba      	b.n	800824e <JPEG_Process+0x26a>
        input_count = hjpeg->JpegInCount;
 80086d8:	6a22      	ldr	r2, [r4, #32]
 80086da:	e653      	b.n	8008384 <JPEG_Process+0x3a0>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80086dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086e0:	6562      	str	r2, [r4, #84]	@ 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80086e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086e4:	e492      	b.n	800800c <JPEG_Process+0x28>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80086e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086e8:	4620      	mov	r0, r4
 80086ea:	69e1      	ldr	r1, [r4, #28]
 80086ec:	f7f9 f86a 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80086f0:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80086f2:	6265      	str	r5, [r4, #36]	@ 0x24
 80086f4:	e496      	b.n	8008024 <JPEG_Process+0x40>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086f6:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
 80086f8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086fa:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086fc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086fe:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008700:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008702:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008704:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008706:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800870a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800870c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008710:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008712:	6a21      	ldr	r1, [r4, #32]
 8008714:	3104      	adds	r1, #4
 8008716:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008718:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800871a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800871c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800871e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008720:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008722:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008724:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008726:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800872a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800872c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008730:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008732:	6a21      	ldr	r1, [r4, #32]
 8008734:	3104      	adds	r1, #4
 8008736:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008738:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800873a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800873c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800873e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008740:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008742:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008744:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008746:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800874a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800874c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008750:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008752:	6a21      	ldr	r1, [r4, #32]
 8008754:	3104      	adds	r1, #4
 8008756:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008758:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800875a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800875c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800875e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008760:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008762:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008764:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008766:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800876a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800876c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008770:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008772:	6a21      	ldr	r1, [r4, #32]
 8008774:	3104      	adds	r1, #4
 8008776:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008778:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800877a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800877c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800877e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008780:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008782:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008784:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008786:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800878a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800878c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008790:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008792:	6a21      	ldr	r1, [r4, #32]
 8008794:	3104      	adds	r1, #4
 8008796:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8008798:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800879a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800879c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800879e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80087a0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80087a2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80087a4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80087a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80087aa:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80087ac:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80087b0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80087b2:	6a21      	ldr	r1, [r4, #32]
 80087b4:	3104      	adds	r1, #4
 80087b6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80087b8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80087ba:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80087bc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80087be:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80087c0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80087c2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80087c4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80087c6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80087ca:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80087cc:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80087d0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80087d2:	6a21      	ldr	r1, [r4, #32]
 80087d4:	3104      	adds	r1, #4
 80087d6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80087d8:	6a20      	ldr	r0, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80087da:	e5d3      	b.n	8008384 <JPEG_Process+0x3a0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80087dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80087de:	4620      	mov	r0, r4
 80087e0:	f7f8 fff0 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80087e4:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80087e6:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80087e8:	6262      	str	r2, [r4, #36]	@ 0x24
 80087ea:	e41b      	b.n	8008024 <JPEG_Process+0x40>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80087ec:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80087ee:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 80087f0:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80087f2:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
 80087f4:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80087f8:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
 80087fa:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80087fc:	f43f ae0e 	beq.w	800841c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008800:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008802:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008804:	5c28      	ldrb	r0, [r5, r0]
 8008806:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
 800880a:	6a20      	ldr	r0, [r4, #32]
 800880c:	f100 0001 	add.w	r0, r0, #1
 8008810:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008812:	f47f ae03 	bne.w	800841c <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008816:	6a22      	ldr	r2, [r4, #32]
 8008818:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
 800881a:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800881c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8008820:	3201      	adds	r2, #1
 8008822:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 8008824:	e5fa      	b.n	800841c <JPEG_Process+0x438>
 8008826:	bf00      	nop

08008828 <HAL_JPEG_IRQHandler>:
{
 8008828:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 800882a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800882e:	3b03      	subs	r3, #3
 8008830:	2b01      	cmp	r3, #1
 8008832:	d900      	bls.n	8008836 <HAL_JPEG_IRQHandler+0xe>
}
 8008834:	bd38      	pop	{r3, r4, r5, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008836:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008838:	4604      	mov	r4, r0
 800883a:	f003 030c 	and.w	r3, r3, #12
 800883e:	2b08      	cmp	r3, #8
 8008840:	d050      	beq.n	80088e4 <HAL_JPEG_IRQHandler+0xbc>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008842:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008844:	f003 030c 	and.w	r3, r3, #12
 8008848:	2b0c      	cmp	r3, #12
 800884a:	d1f3      	bne.n	8008834 <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800884c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800884e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008850:	f002 0203 	and.w	r2, r2, #3
 8008854:	2a02      	cmp	r2, #2
 8008856:	d049      	beq.n	80088ec <HAL_JPEG_IRQHandler+0xc4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8008858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800885a:	0692      	lsls	r2, r2, #26
 800885c:	d5ea      	bpl.n	8008834 <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800885e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008860:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008866:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	f022 0201 	bic.w	r2, r2, #1
 800886e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008872:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008876:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800887a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800887e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008880:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008884:	2b02      	cmp	r3, #2
 8008886:	d054      	beq.n	8008932 <HAL_JPEG_IRQHandler+0x10a>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8008888:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800888a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800888e:	2b02      	cmp	r3, #2
 8008890:	d043      	beq.n	800891a <HAL_JPEG_IRQHandler+0xf2>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008892:	6803      	ldr	r3, [r0, #0]
 8008894:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80088a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d048      	beq.n	8008938 <HAL_JPEG_IRQHandler+0x110>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80088a6:	6822      	ldr	r2, [r4, #0]
 80088a8:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80088aa:	f015 0510 	ands.w	r5, r5, #16
 80088ae:	d138      	bne.n	8008922 <HAL_JPEG_IRQHandler+0xfa>
    if (hjpeg->JpegOutCount > 0UL)
 80088b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d14b      	bne.n	800894e <HAL_JPEG_IRQHandler+0x126>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80088b6:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 80088b8:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 80088ba:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80088c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80088c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088c6:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 80088ca:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80088ce:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80088d2:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088d4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80088d6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 80088d8:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088dc:	d034      	beq.n	8008948 <HAL_JPEG_IRQHandler+0x120>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80088de:	f7ff fa31 	bl	8007d44 <HAL_JPEG_EncodeCpltCallback>
}
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void) JPEG_Process(hjpeg);
 80088e8:	f7ff bb7c 	b.w	8007fe4 <JPEG_Process>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80088ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ee:	0651      	lsls	r1, r2, #25
 80088f0:	d5b2      	bpl.n	8008858 <HAL_JPEG_IRQHandler+0x30>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80088f2:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 80088f4:	4629      	mov	r1, r5
 80088f6:	f7fe ffd7 	bl	80078a8 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 80088fa:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80088fc:	4629      	mov	r1, r5
 80088fe:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008900:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008902:	f7f8 ff39 	bl	8001778 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800890a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800890e:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008916:	639a      	str	r2, [r3, #56]	@ 0x38
 8008918:	e79e      	b.n	8008858 <HAL_JPEG_IRQHandler+0x30>
}
 800891a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800891e:	f000 b92f 	b.w	8008b80 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008922:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008924:	049b      	lsls	r3, r3, #18
 8008926:	d485      	bmi.n	8008834 <HAL_JPEG_IRQHandler+0xc>
    JPEG_DMA_PollResidualData(hjpeg);
 8008928:	4620      	mov	r0, r4
}
 800892a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800892e:	f7ff ba75 	b.w	8007e1c <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8008932:	f000 f925 	bl	8008b80 <HAL_MDMA_Abort_IT>
 8008936:	e7a7      	b.n	8008888 <HAL_JPEG_IRQHandler+0x60>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008938:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800893a:	4620      	mov	r0, r4
 800893c:	69e1      	ldr	r1, [r4, #28]
 800893e:	f7f8 ff41 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	6263      	str	r3, [r4, #36]	@ 0x24
 8008946:	e7ae      	b.n	80088a6 <HAL_JPEG_IRQHandler+0x7e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008948:	f7f8 ff4c 	bl	80017e4 <HAL_JPEG_DecodeCpltCallback>
}
 800894c:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800894e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008950:	4620      	mov	r0, r4
 8008952:	69e1      	ldr	r1, [r4, #28]
 8008954:	f7f8 ff36 	bl	80017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008958:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 800895a:	6265      	str	r5, [r4, #36]	@ 0x24
 800895c:	e7ab      	b.n	80088b6 <HAL_JPEG_IRQHandler+0x8e>
 800895e:	bf00      	nop

08008960 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008964:	f7fa fe18 	bl	8003598 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008968:	2c00      	cmp	r4, #0
 800896a:	d058      	beq.n	8008a1e <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800896c:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800896e:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 8008970:	2100      	movs	r1, #0
 8008972:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008974:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8008978:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	f022 0201 	bic.w	r2, r2, #1
 8008982:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008984:	e005      	b.n	8008992 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008986:	f7fa fe07 	bl	8003598 <HAL_GetTick>
 800898a:	1b43      	subs	r3, r0, r5
 800898c:	2b05      	cmp	r3, #5
 800898e:	d841      	bhi.n	8008a14 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	68da      	ldr	r2, [r3, #12]
 8008994:	07d2      	lsls	r2, r2, #31
 8008996:	d4f6      	bmi.n	8008986 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008998:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 800899c:	69e0      	ldr	r0, [r4, #28]
 800899e:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80089a0:	68e1      	ldr	r1, [r4, #12]
 80089a2:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80089a4:	4302      	orrs	r2, r0
 80089a6:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80089a8:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80089aa:	4302      	orrs	r2, r0
 80089ac:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80089ae:	4302      	orrs	r2, r0
 80089b0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80089b2:	4302      	orrs	r2, r0
 80089b4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80089b6:	4302      	orrs	r2, r0
 80089b8:	68a0      	ldr	r0, [r4, #8]
 80089ba:	4302      	orrs	r2, r0
 80089bc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80089be:	3801      	subs	r0, #1
 80089c0:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80089c4:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80089c6:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80089c8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80089cc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80089ce:	d103      	bne.n	80089d8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80089d6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80089d8:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80089da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80089dc:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 80089de:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80089e0:	db1f      	blt.n	8008a22 <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80089e2:	b292      	uxth	r2, r2
 80089e4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80089e6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80089e8:	2a00      	cmp	r2, #0
 80089ea:	db24      	blt.n	8008a36 <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80089ec:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80089ee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80089f2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80089f6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80089f8:	d029      	beq.n	8008a4e <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80089fa:	b2c0      	uxtb	r0, r0
 80089fc:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80089fe:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8008a00:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8008a02:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 8008a04:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008a06:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008a08:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008a0a:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008a0e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008a14:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008a16:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008a18:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008a1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008a1e:	2001      	movs	r0, #1
}
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008a22:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008a24:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008a26:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008a2a:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008a2c:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008a2e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008a30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	dada      	bge.n	80089ec <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008a36:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008a38:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008a3a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008a3e:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8008a42:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008a44:	6a19      	ldr	r1, [r3, #32]
 8008a46:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8008a4a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008a4c:	d1d5      	bne.n	80089fa <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8008a4e:	2200      	movs	r2, #0
 8008a50:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a52:	e7d4      	b.n	80089fe <HAL_MDMA_Init+0x9e>

08008a54 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008a54:	b1f8      	cbz	r0, 8008a96 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 8008a56:	6802      	ldr	r2, [r0, #0]
 8008a58:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 8008a5a:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8008a5c:	68d0      	ldr	r0, [r2, #12]
{
 8008a5e:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 8008a60:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008a64:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008a66:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 8008a68:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 8008a6a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008a6c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008a6e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008a70:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008a72:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008a74:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008a76:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8008a78:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008a7a:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008a7c:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008a7e:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008a80:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 8008a82:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008a86:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 8008a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 8008a8e:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008a90:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 8008a94:	4770      	bx	lr
    return HAL_ERROR;
 8008a96:	2001      	movs	r0, #1
}
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop

08008a9c <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d06b      	beq.n	8008b78 <HAL_MDMA_Start_IT+0xdc>
{
 8008aa0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
 8008aa2:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 8008aa6:	2c01      	cmp	r4, #1
 8008aa8:	d009      	beq.n	8008abe <HAL_MDMA_Start_IT+0x22>
 8008aaa:	2401      	movs	r4, #1
 8008aac:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008ab0:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 8008ab4:	2c01      	cmp	r4, #1
 8008ab6:	d005      	beq.n	8008ac4 <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008abe:	2002      	movs	r0, #2
}
 8008ac0:	bc70      	pop	{r4, r5, r6}
 8008ac2:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008ac4:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008ac6:	9e03      	ldr	r6, [sp, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008ac8:	4d2c      	ldr	r5, [pc, #176]	@ (8008b7c <HAL_MDMA_Start_IT+0xe0>)
 8008aca:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008ace:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008ad2:	2400      	movs	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008ad4:	f106 3cff 	add.w	ip, r6, #4294967295
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008ad8:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008adc:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008ade:	6804      	ldr	r4, [r0, #0]
 8008ae0:	68e6      	ldr	r6, [r4, #12]
 8008ae2:	f026 0601 	bic.w	r6, r6, #1
 8008ae6:	60e6      	str	r6, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008ae8:	6966      	ldr	r6, [r4, #20]
 8008aea:	ea05 0506 	and.w	r5, r5, r6
 8008aee:	ea45 0503 	orr.w	r5, r5, r3
 8008af2:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008af4:	6963      	ldr	r3, [r4, #20]
 8008af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008afa:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8008afe:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008b00:	f04f 031f 	mov.w	r3, #31
 8008b04:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008b06:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008b08:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008b0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b0c:	bf0c      	ite	eq
 8008b0e:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008b12:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008b16:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 8008b1a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008b1c:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008b1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b20:	bf0c      	ite	eq
 8008b22:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008b26:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8008b2a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008b2c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8008b2e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008b30:	68e3      	ldr	r3, [r4, #12]
 8008b32:	f043 0306 	orr.w	r3, r3, #6
 8008b36:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008b38:	b11a      	cbz	r2, 8008b42 <HAL_MDMA_Start_IT+0xa6>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008b3a:	68e3      	ldr	r3, [r4, #12]
 8008b3c:	f043 0310 	orr.w	r3, r3, #16
 8008b40:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008b42:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008b44:	b11b      	cbz	r3, 8008b4e <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008b46:	68e3      	ldr	r3, [r4, #12]
 8008b48:	f043 0308 	orr.w	r3, r3, #8
 8008b4c:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008b4e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8008b50:	b11b      	cbz	r3, 8008b5a <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	f043 0320 	orr.w	r3, r3, #32
 8008b58:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008b5a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b5c:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b62:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 8008b66:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b68:	d103      	bne.n	8008b72 <HAL_MDMA_Start_IT+0xd6>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b70:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8008b72:	2000      	movs	r0, #0
}
 8008b74:	bc70      	pop	{r4, r5, r6}
 8008b76:	4770      	bx	lr
    return HAL_ERROR;
 8008b78:	2001      	movs	r0, #1
}
 8008b7a:	4770      	bx	lr
 8008b7c:	fffe0000 	.word	0xfffe0000

08008b80 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008b80:	4603      	mov	r3, r0
 8008b82:	b128      	cbz	r0, 8008b90 <HAL_MDMA_Abort_IT+0x10>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008b84:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8008b88:	2a02      	cmp	r2, #2
 8008b8a:	d003      	beq.n	8008b94 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008b8c:	2280      	movs	r2, #128	@ 0x80
 8008b8e:	6682      	str	r2, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008b90:	2001      	movs	r0, #1
 8008b92:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008b94:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008b96:	2104      	movs	r1, #4
  return HAL_OK;
 8008b98:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008b9a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008b9e:	68d3      	ldr	r3, [r2, #12]
 8008ba0:	f023 0301 	bic.w	r3, r3, #1
 8008ba4:	60d3      	str	r3, [r2, #12]
}
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_MDMA_IRQHandler>:
{
 8008ba8:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 8008baa:	2300      	movs	r3, #0
{
 8008bac:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008bae:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 8008bb2:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8008bb4:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008bb6:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bb8:	4b57      	ldr	r3, [pc, #348]	@ (8008d18 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008bba:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008bbc:	4a57      	ldr	r2, [pc, #348]	@ (8008d1c <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bbe:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008bc0:	6823      	ldr	r3, [r4, #0]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008bc8:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008bcc:	4202      	tst	r2, r0
 8008bce:	f000 80a0 	beq.w	8008d12 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	07d1      	lsls	r1, r2, #31
 8008bd6:	d529      	bpl.n	8008c2c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	0792      	lsls	r2, r2, #30
 8008bdc:	d526      	bpl.n	8008c2c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	f022 0202 	bic.w	r2, r2, #2
 8008be4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008be6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008be8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008bea:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008bec:	bf54      	ite	pl
 8008bee:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008bf2:	f041 0102 	orrmi.w	r1, r1, #2
 8008bf6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008bf8:	0591      	lsls	r1, r2, #22
 8008bfa:	d503      	bpl.n	8008c04 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008bfc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008bfe:	f041 0104 	orr.w	r1, r1, #4
 8008c02:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008c04:	05d0      	lsls	r0, r2, #23
 8008c06:	d503      	bpl.n	8008c10 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008c08:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008c0a:	f041 0108 	orr.w	r1, r1, #8
 8008c0e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008c10:	0551      	lsls	r1, r2, #21
 8008c12:	d503      	bpl.n	8008c1c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008c14:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008c16:	f041 0110 	orr.w	r1, r1, #16
 8008c1a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008c1c:	0510      	lsls	r0, r2, #20
 8008c1e:	d503      	bpl.n	8008c28 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008c20:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008c22:	f042 0220 	orr.w	r2, r2, #32
 8008c26:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008c28:	2201      	movs	r2, #1
 8008c2a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	06d1      	lsls	r1, r2, #27
 8008c30:	d509      	bpl.n	8008c46 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	0692      	lsls	r2, r2, #26
 8008c36:	d506      	bpl.n	8008c46 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008c38:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 8008c3a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008c3c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008c3e:	b112      	cbz	r2, 8008c46 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 8008c40:	4620      	mov	r0, r4
 8008c42:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	0710      	lsls	r0, r2, #28
 8008c4a:	d509      	bpl.n	8008c60 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008c4c:	68da      	ldr	r2, [r3, #12]
 8008c4e:	06d1      	lsls	r1, r2, #27
 8008c50:	d506      	bpl.n	8008c60 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008c52:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 8008c54:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008c56:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008c58:	b112      	cbz	r2, 8008c60 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	0752      	lsls	r2, r2, #29
 8008c64:	d509      	bpl.n	8008c7a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008c66:	68da      	ldr	r2, [r3, #12]
 8008c68:	0710      	lsls	r0, r2, #28
 8008c6a:	d506      	bpl.n	8008c7a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008c6c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008c6e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008c70:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008c72:	b112      	cbz	r2, 8008c7a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008c74:	4620      	mov	r0, r4
 8008c76:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	0791      	lsls	r1, r2, #30
 8008c7e:	d516      	bpl.n	8008cae <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	0752      	lsls	r2, r2, #29
 8008c84:	d513      	bpl.n	8008cae <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008c8c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008c8e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008c92:	2a04      	cmp	r2, #4
 8008c94:	d034      	beq.n	8008d00 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008c96:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 8008c98:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008c9a:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008c9c:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 8008c9e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 8008ca0:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008ca4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008ca8:	b10b      	cbz	r3, 8008cae <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 8008caa:	4620      	mov	r0, r4
 8008cac:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008cae:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d02e      	beq.n	8008d12 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 8008cb4:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008cb6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8008cb8:	4b19      	ldr	r3, [pc, #100]	@ (8008d20 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008cba:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 8008cbe:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 8008cc2:	68cb      	ldr	r3, [r1, #12]
 8008cc4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008cc8:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 8008cca:	60cb      	str	r3, [r1, #12]
 8008ccc:	e002      	b.n	8008cd4 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008cce:	68cb      	ldr	r3, [r1, #12]
 8008cd0:	07d8      	lsls	r0, r3, #31
 8008cd2:	d504      	bpl.n	8008cde <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	d9f7      	bls.n	8008cce <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008ce4:	68cb      	ldr	r3, [r1, #12]
 8008ce6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008ce8:	bf4c      	ite	mi
 8008cea:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008cec:	2301      	movpl	r3, #1
 8008cee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008cf2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008cf4:	b16b      	cbz	r3, 8008d12 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 8008cf6:	4620      	mov	r0, r4
}
 8008cf8:	b003      	add	sp, #12
 8008cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008cfe:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 8008d00:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 8008d02:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 8008d04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 8008d06:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008d0a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1f1      	bne.n	8008cf6 <HAL_MDMA_IRQHandler+0x14e>
}
 8008d12:	b003      	add	sp, #12
 8008d14:	bd30      	pop	{r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	2400000c 	.word	0x2400000c
 8008d1c:	adffffc0 	.word	0xadffffc0
 8008d20:	1b4e81b5 	.word	0x1b4e81b5

08008d24 <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008d24:	4a10      	ldr	r2, [pc, #64]	@ (8008d68 <HAL_PWR_EnterSTOPMode+0x44>)
 8008d26:	6813      	ldr	r3, [r2, #0]
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	4303      	orrs	r3, r0
{
 8008d2e:	b410      	push	{r4}
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8008d30:	6013      	str	r3, [r2, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008d32:	6913      	ldr	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008d34:	4c0d      	ldr	r4, [pc, #52]	@ (8008d6c <HAL_PWR_EnterSTOPMode+0x48>)
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8008d36:	f023 0305 	bic.w	r3, r3, #5
 8008d3a:	6113      	str	r3, [r2, #16]
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	f043 0304 	orr.w	r3, r3, #4
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008d48:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008d4c:	2901      	cmp	r1, #1
 8008d4e:	d008      	beq.n	8008d62 <HAL_PWR_EnterSTOPMode+0x3e>
    __WFI ();
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8008d50:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008d52:	4a06      	ldr	r2, [pc, #24]	@ (8008d6c <HAL_PWR_EnterSTOPMode+0x48>)
}
 8008d54:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008d58:	6913      	ldr	r3, [r2, #16]
 8008d5a:	f023 0304 	bic.w	r3, r3, #4
 8008d5e:	6113      	str	r3, [r2, #16]
}
 8008d60:	4770      	bx	lr
    __WFI ();
 8008d62:	bf30      	wfi
 8008d64:	e7f5      	b.n	8008d52 <HAL_PWR_EnterSTOPMode+0x2e>
 8008d66:	bf00      	nop
 8008d68:	58024800 	.word	0x58024800
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d70:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d72:	4c10      	ldr	r4, [pc, #64]	@ (8008db4 <HAL_PWREx_ConfigSupply+0x44>)
 8008d74:	68e3      	ldr	r3, [r4, #12]
 8008d76:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d7a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d7c:	d105      	bne.n	8008d8a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	1a18      	subs	r0, r3, r0
 8008d84:	bf18      	it	ne
 8008d86:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d8a:	f023 0307 	bic.w	r3, r3, #7
 8008d8e:	4303      	orrs	r3, r0
 8008d90:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8008d92:	f7fa fc01 	bl	8003598 <HAL_GetTick>
 8008d96:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d98:	e005      	b.n	8008da6 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d9a:	f7fa fbfd 	bl	8003598 <HAL_GetTick>
 8008d9e:	1b40      	subs	r0, r0, r5
 8008da0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008da4:	d804      	bhi.n	8008db0 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	049b      	lsls	r3, r3, #18
 8008daa:	d5f6      	bpl.n	8008d9a <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8008dac:	2000      	movs	r0, #0
}
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008db0:	2001      	movs	r0, #1
}
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	58024800 	.word	0x58024800

08008db8 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008db8:	4b33      	ldr	r3, [pc, #204]	@ (8008e88 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8008dba:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dbc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008dbe:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008dc0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8008dc2:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008dc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008dc8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8008dcc:	d036      	beq.n	8008e3c <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008dce:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008dd2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dd6:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dda:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008dde:	fb05 f202 	mul.w	r2, r5, r2
 8008de2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008de8:	ee06 2a90 	vmov	s13, r2
 8008dec:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8008df0:	d002      	beq.n	8008df8 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8008df2:	2902      	cmp	r1, #2
 8008df4:	d042      	beq.n	8008e7c <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8008df6:	b319      	cbz	r1, 8008e40 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008df8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8008e8c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8008dfc:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8008e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8008e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e16:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008e1a:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e88 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8008e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e22:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008e26:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008e28:	ee07 3a10 	vmov	s14, r3
 8008e2c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008e34:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008e38:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8008e3c:	bc30      	pop	{r4, r5}
 8008e3e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	0692      	lsls	r2, r2, #26
 8008e44:	d51d      	bpl.n	8008e82 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e46:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e48:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e4c:	4a10      	ldr	r2, [pc, #64]	@ (8008e90 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e50:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e58:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	ee06 2a10 	vmov	s12, r2
 8008e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e66:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008e6a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8008e6e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8008e72:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8008e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e7a:	e7d0      	b.n	8008e1e <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e7c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008e94 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8008e80:	e7bc      	b.n	8008dfc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e82:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008e98 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8008e86:	e7b9      	b.n	8008dfc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8008e88:	58024400 	.word	0x58024400
 8008e8c:	4a742400 	.word	0x4a742400
 8008e90:	03d09000 	.word	0x03d09000
 8008e94:	4bbebc20 	.word	0x4bbebc20
 8008e98:	4c742400 	.word	0x4c742400

08008e9c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f000 82dc 	beq.w	800945a <HAL_RCC_OscConfig+0x5be>
{
 8008ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ea4:	6803      	ldr	r3, [r0, #0]
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	07d9      	lsls	r1, r3, #31
 8008eaa:	d53b      	bpl.n	8008f24 <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eac:	499e      	ldr	r1, [pc, #632]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 8008eae:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008eb0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eb2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008eb6:	2a10      	cmp	r2, #16
 8008eb8:	f000 80e4 	beq.w	8009084 <HAL_RCC_OscConfig+0x1e8>
 8008ebc:	2a18      	cmp	r2, #24
 8008ebe:	f000 80dc 	beq.w	800907a <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ec2:	6863      	ldr	r3, [r4, #4]
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec8:	d018      	beq.n	8008efc <HAL_RCC_OscConfig+0x60>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 8154 	beq.w	8009178 <HAL_RCC_OscConfig+0x2dc>
 8008ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ed4:	f000 8270 	beq.w	80093b8 <HAL_RCC_OscConfig+0x51c>
 8008ed8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008edc:	4b92      	ldr	r3, [pc, #584]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	f000 8211 	beq.w	8009306 <HAL_RCC_OscConfig+0x46a>
 8008ee4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008ef8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008efa:	e004      	b.n	8008f06 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008efc:	4a8a      	ldr	r2, [pc, #552]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f04:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008f06:	f7fa fb47 	bl	8003598 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f0a:	4e87      	ldr	r6, [pc, #540]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8008f0c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f0e:	e005      	b.n	8008f1c <HAL_RCC_OscConfig+0x80>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f10:	f7fa fb42 	bl	8003598 <HAL_GetTick>
 8008f14:	1b40      	subs	r0, r0, r5
 8008f16:	2864      	cmp	r0, #100	@ 0x64
 8008f18:	f200 812c 	bhi.w	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f1c:	6833      	ldr	r3, [r6, #0]
 8008f1e:	039b      	lsls	r3, r3, #14
 8008f20:	d5f6      	bpl.n	8008f10 <HAL_RCC_OscConfig+0x74>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	079d      	lsls	r5, r3, #30
 8008f26:	d464      	bmi.n	8008ff2 <HAL_RCC_OscConfig+0x156>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f28:	06d9      	lsls	r1, r3, #27
 8008f2a:	d528      	bpl.n	8008f7e <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f2c:	497e      	ldr	r1, [pc, #504]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 8008f2e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f30:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f32:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f36:	2a08      	cmp	r2, #8
 8008f38:	f000 80b4 	beq.w	80090a4 <HAL_RCC_OscConfig+0x208>
 8008f3c:	2a18      	cmp	r2, #24
 8008f3e:	f000 80ac 	beq.w	800909a <HAL_RCC_OscConfig+0x1fe>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f42:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8008f44:	4d78      	ldr	r5, [pc, #480]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 8152 	beq.w	80091f0 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008f54:	f7fa fb20 	bl	8003598 <HAL_GetTick>
 8008f58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f5a:	e005      	b.n	8008f68 <HAL_RCC_OscConfig+0xcc>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f5c:	f7fa fb1c 	bl	8003598 <HAL_GetTick>
 8008f60:	1b80      	subs	r0, r0, r6
 8008f62:	2802      	cmp	r0, #2
 8008f64:	f200 8106 	bhi.w	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	05db      	lsls	r3, r3, #23
 8008f6c:	d5f6      	bpl.n	8008f5c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f6e:	68eb      	ldr	r3, [r5, #12]
 8008f70:	6a22      	ldr	r2, [r4, #32]
 8008f72:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008f76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f7a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	071d      	lsls	r5, r3, #28
 8008f80:	d516      	bpl.n	8008fb0 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f82:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8008f84:	4d68      	ldr	r5, [pc, #416]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 8110 	beq.w	80091ac <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 8008f8c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8008f8e:	f043 0301 	orr.w	r3, r3, #1
 8008f92:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8008f94:	f7fa fb00 	bl	8003598 <HAL_GetTick>
 8008f98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f9a:	e005      	b.n	8008fa8 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f9c:	f7fa fafc 	bl	8003598 <HAL_GetTick>
 8008fa0:	1b80      	subs	r0, r0, r6
 8008fa2:	2802      	cmp	r0, #2
 8008fa4:	f200 80e6 	bhi.w	8009174 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fa8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8008faa:	0798      	lsls	r0, r3, #30
 8008fac:	d5f6      	bpl.n	8008f9c <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	069a      	lsls	r2, r3, #26
 8008fb2:	d516      	bpl.n	8008fe2 <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008fb4:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8008fb6:	4d5c      	ldr	r5, [pc, #368]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 8108 	beq.w	80091ce <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 8008fbe:	682b      	ldr	r3, [r5, #0]
 8008fc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008fc4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008fc6:	f7fa fae7 	bl	8003598 <HAL_GetTick>
 8008fca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fcc:	e005      	b.n	8008fda <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fce:	f7fa fae3 	bl	8003598 <HAL_GetTick>
 8008fd2:	1b80      	subs	r0, r0, r6
 8008fd4:	2802      	cmp	r0, #2
 8008fd6:	f200 80cd 	bhi.w	8009174 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	049f      	lsls	r7, r3, #18
 8008fde:	d5f6      	bpl.n	8008fce <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	0759      	lsls	r1, r3, #29
 8008fe4:	d46e      	bmi.n	80090c4 <HAL_RCC_OscConfig+0x228>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fe6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 80aa 	bne.w	8009142 <HAL_RCC_OscConfig+0x2a6>
  return HAL_OK;
 8008fee:	2000      	movs	r0, #0
}
 8008ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ff2:	4a4d      	ldr	r2, [pc, #308]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 8008ff4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ff6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ff8:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8008ffc:	d122      	bne.n	8009044 <HAL_RCC_OscConfig+0x1a8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009000:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	0759      	lsls	r1, r3, #29
 8009006:	d501      	bpl.n	800900c <HAL_RCC_OscConfig+0x170>
 8009008:	2a00      	cmp	r2, #0
 800900a:	d044      	beq.n	8009096 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800900c:	4d46      	ldr	r5, [pc, #280]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	f023 0319 	bic.w	r3, r3, #25
 8009014:	4313      	orrs	r3, r2
 8009016:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009018:	f7fa fabe 	bl	8003598 <HAL_GetTick>
 800901c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800901e:	e005      	b.n	800902c <HAL_RCC_OscConfig+0x190>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009020:	f7fa faba 	bl	8003598 <HAL_GetTick>
 8009024:	1b80      	subs	r0, r0, r6
 8009026:	2802      	cmp	r0, #2
 8009028:	f200 80a4 	bhi.w	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	075b      	lsls	r3, r3, #29
 8009030:	d5f6      	bpl.n	8009020 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009032:	686b      	ldr	r3, [r5, #4]
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800903a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800903e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	e771      	b.n	8008f28 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009044:	2b18      	cmp	r3, #24
 8009046:	f000 80f6 	beq.w	8009236 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800904a:	4d37      	ldr	r5, [pc, #220]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800904c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800904e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009050:	2a00      	cmp	r2, #0
 8009052:	f000 80df 	beq.w	8009214 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009056:	f023 0319 	bic.w	r3, r3, #25
 800905a:	4313      	orrs	r3, r2
 800905c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800905e:	f7fa fa9b 	bl	8003598 <HAL_GetTick>
 8009062:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009064:	e005      	b.n	8009072 <HAL_RCC_OscConfig+0x1d6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009066:	f7fa fa97 	bl	8003598 <HAL_GetTick>
 800906a:	1b80      	subs	r0, r0, r6
 800906c:	2802      	cmp	r0, #2
 800906e:	f200 8081 	bhi.w	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009072:	682b      	ldr	r3, [r5, #0]
 8009074:	075f      	lsls	r7, r3, #29
 8009076:	d5f6      	bpl.n	8009066 <HAL_RCC_OscConfig+0x1ca>
 8009078:	e7db      	b.n	8009032 <HAL_RCC_OscConfig+0x196>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800907a:	f001 0103 	and.w	r1, r1, #3
 800907e:	2902      	cmp	r1, #2
 8009080:	f47f af1f 	bne.w	8008ec2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009084:	4a28      	ldr	r2, [pc, #160]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 8009086:	6812      	ldr	r2, [r2, #0]
 8009088:	0392      	lsls	r2, r2, #14
 800908a:	f57f af4b 	bpl.w	8008f24 <HAL_RCC_OscConfig+0x88>
 800908e:	6862      	ldr	r2, [r4, #4]
 8009090:	2a00      	cmp	r2, #0
 8009092:	f47f af47 	bne.w	8008f24 <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8009096:	2001      	movs	r0, #1
}
 8009098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800909a:	f001 0103 	and.w	r1, r1, #3
 800909e:	2901      	cmp	r1, #1
 80090a0:	f47f af4f 	bne.w	8008f42 <HAL_RCC_OscConfig+0xa6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090a4:	4a20      	ldr	r2, [pc, #128]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	05d2      	lsls	r2, r2, #23
 80090aa:	d502      	bpl.n	80090b2 <HAL_RCC_OscConfig+0x216>
 80090ac:	69e2      	ldr	r2, [r4, #28]
 80090ae:	2a80      	cmp	r2, #128	@ 0x80
 80090b0:	d1f1      	bne.n	8009096 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090b2:	491d      	ldr	r1, [pc, #116]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 80090b4:	6a20      	ldr	r0, [r4, #32]
 80090b6:	68ca      	ldr	r2, [r1, #12]
 80090b8:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 80090bc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80090c0:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090c2:	e75c      	b.n	8008f7e <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 80090c4:	4d19      	ldr	r5, [pc, #100]	@ (800912c <HAL_RCC_OscConfig+0x290>)
 80090c6:	682b      	ldr	r3, [r5, #0]
 80090c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090cc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80090ce:	f7fa fa63 	bl	8003598 <HAL_GetTick>
 80090d2:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090d4:	e004      	b.n	80090e0 <HAL_RCC_OscConfig+0x244>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090d6:	f7fa fa5f 	bl	8003598 <HAL_GetTick>
 80090da:	1b80      	subs	r0, r0, r6
 80090dc:	2864      	cmp	r0, #100	@ 0x64
 80090de:	d849      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	05da      	lsls	r2, r3, #23
 80090e4:	d5f7      	bpl.n	80090d6 <HAL_RCC_OscConfig+0x23a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090e6:	68a3      	ldr	r3, [r4, #8]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	f000 8196 	beq.w	800941a <HAL_RCC_OscConfig+0x57e>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 8176 	beq.w	80093e0 <HAL_RCC_OscConfig+0x544>
 80090f4:	2b05      	cmp	r3, #5
 80090f6:	f000 8196 	beq.w	8009426 <HAL_RCC_OscConfig+0x58a>
 80090fa:	2b85      	cmp	r3, #133	@ 0x85
 80090fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
 80090fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009100:	f000 819f 	beq.w	8009442 <HAL_RCC_OscConfig+0x5a6>
 8009104:	f022 0201 	bic.w	r2, r2, #1
 8009108:	671a      	str	r2, [r3, #112]	@ 0x70
 800910a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800910c:	f022 0204 	bic.w	r2, r2, #4
 8009110:	671a      	str	r2, [r3, #112]	@ 0x70
 8009112:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009118:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800911a:	f7fa fa3d 	bl	8003598 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800911e:	4e02      	ldr	r6, [pc, #8]	@ (8009128 <HAL_RCC_OscConfig+0x28c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009120:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009124:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x29e>
 8009128:	58024400 	.word	0x58024400
 800912c:	58024800 	.word	0x58024800
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009130:	f7fa fa32 	bl	8003598 <HAL_GetTick>
 8009134:	1b40      	subs	r0, r0, r5
 8009136:	42b8      	cmp	r0, r7
 8009138:	d81c      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800913a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800913c:	079b      	lsls	r3, r3, #30
 800913e:	d5f7      	bpl.n	8009130 <HAL_RCC_OscConfig+0x294>
 8009140:	e751      	b.n	8008fe6 <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009142:	4da4      	ldr	r5, [pc, #656]	@ (80093d4 <HAL_RCC_OscConfig+0x538>)
 8009144:	692a      	ldr	r2, [r5, #16]
 8009146:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800914a:	2a18      	cmp	r2, #24
 800914c:	f000 80e7 	beq.w	800931e <HAL_RCC_OscConfig+0x482>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009150:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8009152:	682b      	ldr	r3, [r5, #0]
 8009154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009158:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800915a:	d070      	beq.n	800923e <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 800915c:	f7fa fa1c 	bl	8003598 <HAL_GetTick>
 8009160:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	019b      	lsls	r3, r3, #6
 8009166:	f57f af42 	bpl.w	8008fee <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800916a:	f7fa fa15 	bl	8003598 <HAL_GetTick>
 800916e:	1b00      	subs	r0, r0, r4
 8009170:	2802      	cmp	r0, #2
 8009172:	d9f6      	bls.n	8009162 <HAL_RCC_OscConfig+0x2c6>
            return HAL_TIMEOUT;
 8009174:	2003      	movs	r0, #3
}
 8009176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009178:	4d96      	ldr	r5, [pc, #600]	@ (80093d4 <HAL_RCC_OscConfig+0x538>)
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	682b      	ldr	r3, [r5, #0]
 800918c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009190:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009192:	f7fa fa01 	bl	8003598 <HAL_GetTick>
 8009196:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009198:	e004      	b.n	80091a4 <HAL_RCC_OscConfig+0x308>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800919a:	f7fa f9fd 	bl	8003598 <HAL_GetTick>
 800919e:	1b80      	subs	r0, r0, r6
 80091a0:	2864      	cmp	r0, #100	@ 0x64
 80091a2:	d8e7      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	039f      	lsls	r7, r3, #14
 80091a8:	d4f7      	bmi.n	800919a <HAL_RCC_OscConfig+0x2fe>
 80091aa:	e6ba      	b.n	8008f22 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80091ac:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80091ae:	f023 0301 	bic.w	r3, r3, #1
 80091b2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80091b4:	f7fa f9f0 	bl	8003598 <HAL_GetTick>
 80091b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091ba:	e004      	b.n	80091c6 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091bc:	f7fa f9ec 	bl	8003598 <HAL_GetTick>
 80091c0:	1b80      	subs	r0, r0, r6
 80091c2:	2802      	cmp	r0, #2
 80091c4:	d8d6      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091c6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80091c8:	0799      	lsls	r1, r3, #30
 80091ca:	d4f7      	bmi.n	80091bc <HAL_RCC_OscConfig+0x320>
 80091cc:	e6ef      	b.n	8008fae <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 80091ce:	682b      	ldr	r3, [r5, #0]
 80091d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80091d6:	f7fa f9df 	bl	8003598 <HAL_GetTick>
 80091da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091dc:	e004      	b.n	80091e8 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091de:	f7fa f9db 	bl	8003598 <HAL_GetTick>
 80091e2:	1b80      	subs	r0, r0, r6
 80091e4:	2802      	cmp	r0, #2
 80091e6:	d8c5      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	0498      	lsls	r0, r3, #18
 80091ec:	d4f7      	bmi.n	80091de <HAL_RCC_OscConfig+0x342>
 80091ee:	e6f7      	b.n	8008fe0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80091f8:	f7fa f9ce 	bl	8003598 <HAL_GetTick>
 80091fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091fe:	e004      	b.n	800920a <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009200:	f7fa f9ca 	bl	8003598 <HAL_GetTick>
 8009204:	1b80      	subs	r0, r0, r6
 8009206:	2802      	cmp	r0, #2
 8009208:	d8b4      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800920a:	682b      	ldr	r3, [r5, #0]
 800920c:	05df      	lsls	r7, r3, #23
 800920e:	d4f7      	bmi.n	8009200 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	e6b4      	b.n	8008f7e <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800921a:	f7fa f9bd 	bl	8003598 <HAL_GetTick>
 800921e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009220:	e004      	b.n	800922c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009222:	f7fa f9b9 	bl	8003598 <HAL_GetTick>
 8009226:	1b80      	subs	r0, r0, r6
 8009228:	2802      	cmp	r0, #2
 800922a:	d8a3      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	0758      	lsls	r0, r3, #29
 8009230:	d4f7      	bmi.n	8009222 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	e678      	b.n	8008f28 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009236:	0790      	lsls	r0, r2, #30
 8009238:	f47f af07 	bne.w	800904a <HAL_RCC_OscConfig+0x1ae>
 800923c:	e6df      	b.n	8008ffe <HAL_RCC_OscConfig+0x162>
        tickstart = HAL_GetTick();
 800923e:	f7fa f9ab 	bl	8003598 <HAL_GetTick>
 8009242:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009244:	e004      	b.n	8009250 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009246:	f7fa f9a7 	bl	8003598 <HAL_GetTick>
 800924a:	1b80      	subs	r0, r0, r6
 800924c:	2802      	cmp	r0, #2
 800924e:	d891      	bhi.n	8009174 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	0199      	lsls	r1, r3, #6
 8009254:	d4f7      	bmi.n	8009246 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009256:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8009258:	4b5f      	ldr	r3, [pc, #380]	@ (80093d8 <HAL_RCC_OscConfig+0x53c>)
 800925a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800925c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800925e:	495f      	ldr	r1, [pc, #380]	@ (80093dc <HAL_RCC_OscConfig+0x540>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009260:	4e5c      	ldr	r6, [pc, #368]	@ (80093d4 <HAL_RCC_OscConfig+0x538>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009262:	4313      	orrs	r3, r2
 8009264:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009266:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800926a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800926c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8009270:	3b01      	subs	r3, #1
 8009272:	3a01      	subs	r2, #1
 8009274:	025b      	lsls	r3, r3, #9
 8009276:	0412      	lsls	r2, r2, #16
 8009278:	b29b      	uxth	r3, r3
 800927a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800927e:	4313      	orrs	r3, r2
 8009280:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009282:	3a01      	subs	r2, #1
 8009284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009288:	4313      	orrs	r3, r2
 800928a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800928c:	3a01      	subs	r2, #1
 800928e:	0612      	lsls	r2, r2, #24
 8009290:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009294:	4313      	orrs	r3, r2
 8009296:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009298:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092a0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80092a2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80092a4:	4011      	ands	r1, r2
 80092a6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80092aa:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80092ac:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80092ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80092b0:	f023 030c 	bic.w	r3, r3, #12
 80092b4:	4313      	orrs	r3, r2
 80092b6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092b8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80092ba:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80092bc:	f023 0302 	bic.w	r3, r3, #2
 80092c0:	4313      	orrs	r3, r2
 80092c2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092c4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80092c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092ca:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092cc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80092ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092d2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092d4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80092d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092da:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80092dc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80092ec:	f7fa f954 	bl	8003598 <HAL_GetTick>
 80092f0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092f2:	6833      	ldr	r3, [r6, #0]
 80092f4:	019a      	lsls	r2, r3, #6
 80092f6:	f53f ae7a 	bmi.w	8008fee <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092fa:	f7fa f94d 	bl	8003598 <HAL_GetTick>
 80092fe:	1b00      	subs	r0, r0, r4
 8009300:	2802      	cmp	r0, #2
 8009302:	d9f6      	bls.n	80092f2 <HAL_RCC_OscConfig+0x456>
 8009304:	e736      	b.n	8009174 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009306:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800931a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800931c:	e5f3      	b.n	8008f06 <HAL_RCC_OscConfig+0x6a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800931e:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009320:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009322:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009324:	f43f aeb7 	beq.w	8009096 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009328:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800932c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800932e:	428b      	cmp	r3, r1
 8009330:	f47f aeb1 	bne.w	8009096 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009334:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009338:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800933a:	429a      	cmp	r2, r3
 800933c:	f47f aeab 	bne.w	8009096 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009340:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009342:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8009346:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009348:	429a      	cmp	r2, r3
 800934a:	f47f aea4 	bne.w	8009096 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800934e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009350:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8009354:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009356:	429a      	cmp	r2, r3
 8009358:	f47f ae9d 	bne.w	8009096 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800935c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800935e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8009362:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009364:	429a      	cmp	r2, r3
 8009366:	f47f ae96 	bne.w	8009096 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800936a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800936c:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8009370:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009372:	4298      	cmp	r0, r3
 8009374:	f47f ae8f 	bne.w	8009096 <HAL_RCC_OscConfig+0x1fa>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009378:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800937a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800937c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009380:	429a      	cmp	r2, r3
 8009382:	f43f ae34 	beq.w	8008fee <HAL_RCC_OscConfig+0x152>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009386:	4a13      	ldr	r2, [pc, #76]	@ (80093d4 <HAL_RCC_OscConfig+0x538>)
 8009388:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8009390:	f7fa f902 	bl	8003598 <HAL_GetTick>
 8009394:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009396:	f7fa f8ff 	bl	8003598 <HAL_GetTick>
 800939a:	42a8      	cmp	r0, r5
 800939c:	d0fb      	beq.n	8009396 <HAL_RCC_OscConfig+0x4fa>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800939e:	4a0d      	ldr	r2, [pc, #52]	@ (80093d4 <HAL_RCC_OscConfig+0x538>)
 80093a0:	4b0e      	ldr	r3, [pc, #56]	@ (80093dc <HAL_RCC_OscConfig+0x540>)
 80093a2:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80093a4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80093a6:	4003      	ands	r3, r0
 80093a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80093ac:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80093ae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80093b0:	f043 0301 	orr.w	r3, r3, #1
 80093b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80093b6:	e61a      	b.n	8008fee <HAL_RCC_OscConfig+0x152>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093b8:	4b06      	ldr	r3, [pc, #24]	@ (80093d4 <HAL_RCC_OscConfig+0x538>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80093d0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093d2:	e598      	b.n	8008f06 <HAL_RCC_OscConfig+0x6a>
 80093d4:	58024400 	.word	0x58024400
 80093d8:	fffffc0c 	.word	0xfffffc0c
 80093dc:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093e0:	4d1f      	ldr	r5, [pc, #124]	@ (8009460 <HAL_RCC_OscConfig+0x5c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093e2:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093e6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80093e8:	f023 0301 	bic.w	r3, r3, #1
 80093ec:	672b      	str	r3, [r5, #112]	@ 0x70
 80093ee:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80093f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093f4:	672b      	str	r3, [r5, #112]	@ 0x70
 80093f6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80093f8:	f023 0304 	bic.w	r3, r3, #4
 80093fc:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80093fe:	f7fa f8cb 	bl	8003598 <HAL_GetTick>
 8009402:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009404:	e005      	b.n	8009412 <HAL_RCC_OscConfig+0x576>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009406:	f7fa f8c7 	bl	8003598 <HAL_GetTick>
 800940a:	1b80      	subs	r0, r0, r6
 800940c:	42b8      	cmp	r0, r7
 800940e:	f63f aeb1 	bhi.w	8009174 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009412:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009414:	0798      	lsls	r0, r3, #30
 8009416:	d4f6      	bmi.n	8009406 <HAL_RCC_OscConfig+0x56a>
 8009418:	e5e5      	b.n	8008fe6 <HAL_RCC_OscConfig+0x14a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800941a:	4a11      	ldr	r2, [pc, #68]	@ (8009460 <HAL_RCC_OscConfig+0x5c4>)
 800941c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009424:	e679      	b.n	800911a <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009426:	4b0e      	ldr	r3, [pc, #56]	@ (8009460 <HAL_RCC_OscConfig+0x5c4>)
 8009428:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800942a:	f042 0204 	orr.w	r2, r2, #4
 800942e:	671a      	str	r2, [r3, #112]	@ 0x70
 8009430:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009432:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009436:	671a      	str	r2, [r3, #112]	@ 0x70
 8009438:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800943a:	f042 0201 	orr.w	r2, r2, #1
 800943e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009440:	e66b      	b.n	800911a <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009442:	f042 0204 	orr.w	r2, r2, #4
 8009446:	671a      	str	r2, [r3, #112]	@ 0x70
 8009448:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800944a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800944e:	671a      	str	r2, [r3, #112]	@ 0x70
 8009450:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009458:	e65f      	b.n	800911a <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 800945a:	2001      	movs	r0, #1
}
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	58024400 	.word	0x58024400

08009464 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009464:	4a3f      	ldr	r2, [pc, #252]	@ (8009564 <HAL_RCC_GetSysClockFreq+0x100>)
 8009466:	6913      	ldr	r3, [r2, #16]
 8009468:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800946c:	2b10      	cmp	r3, #16
 800946e:	d004      	beq.n	800947a <HAL_RCC_GetSysClockFreq+0x16>
 8009470:	2b18      	cmp	r3, #24
 8009472:	d00d      	beq.n	8009490 <HAL_RCC_GetSysClockFreq+0x2c>
 8009474:	b11b      	cbz	r3, 800947e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8009476:	483c      	ldr	r0, [pc, #240]	@ (8009568 <HAL_RCC_GetSysClockFreq+0x104>)
 8009478:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800947a:	483c      	ldr	r0, [pc, #240]	@ (800956c <HAL_RCC_GetSysClockFreq+0x108>)
 800947c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800947e:	6813      	ldr	r3, [r2, #0]
 8009480:	0699      	lsls	r1, r3, #26
 8009482:	d548      	bpl.n	8009516 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	483a      	ldr	r0, [pc, #232]	@ (8009570 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009488:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800948c:	40d8      	lsrs	r0, r3
 800948e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009490:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8009492:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009494:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009496:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8009498:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800949c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800949e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80094a2:	d036      	beq.n	8009512 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094a4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094a8:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094ac:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094b0:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094b4:	fb05 f303 	mul.w	r3, r5, r3
 80094b8:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094be:	ee06 3a90 	vmov	s13, r3
 80094c2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80094c6:	d002      	beq.n	80094ce <HAL_RCC_GetSysClockFreq+0x6a>
 80094c8:	2902      	cmp	r1, #2
 80094ca:	d026      	beq.n	800951a <HAL_RCC_GetSysClockFreq+0xb6>
 80094cc:	b341      	cbz	r1, 8009520 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ce:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8009574 <HAL_RCC_GetSysClockFreq+0x110>
 80094d2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80094d6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80094d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094dc:	ee07 3a10 	vmov	s14, r3
 80094e0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80094e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80094e8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80094ec:	ee37 7a25 	vadd.f32	s14, s14, s11
 80094f0:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80094f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009564 <HAL_RCC_GetSysClockFreq+0x100>)
 80094f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80094fc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800950a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950e:	ee17 0a90 	vmov	r0, s15
}
 8009512:	bc30      	pop	{r4, r5}
 8009514:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009516:	4816      	ldr	r0, [pc, #88]	@ (8009570 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8009518:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800951a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8009578 <HAL_RCC_GetSysClockFreq+0x114>
 800951e:	e7d8      	b.n	80094d2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009520:	6813      	ldr	r3, [r2, #0]
 8009522:	069b      	lsls	r3, r3, #26
 8009524:	d51a      	bpl.n	800955c <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009526:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009528:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800952c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800952e:	4910      	ldr	r1, [pc, #64]	@ (8009570 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009530:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009538:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800953a:	ee07 3a10 	vmov	s14, r3
 800953e:	ee06 1a10 	vmov	s12, r1
 8009542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009546:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800954a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800954e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8009552:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8009556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800955a:	e7cb      	b.n	80094f4 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800955c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800957c <HAL_RCC_GetSysClockFreq+0x118>
 8009560:	e7b7      	b.n	80094d2 <HAL_RCC_GetSysClockFreq+0x6e>
 8009562:	bf00      	nop
 8009564:	58024400 	.word	0x58024400
 8009568:	003d0900 	.word	0x003d0900
 800956c:	017d7840 	.word	0x017d7840
 8009570:	03d09000 	.word	0x03d09000
 8009574:	4a742400 	.word	0x4a742400
 8009578:	4bbebc20 	.word	0x4bbebc20
 800957c:	4c742400 	.word	0x4c742400

08009580 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009580:	2800      	cmp	r0, #0
 8009582:	f000 810e 	beq.w	80097a2 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009586:	4a8d      	ldr	r2, [pc, #564]	@ (80097bc <HAL_RCC_ClockConfig+0x23c>)
 8009588:	6813      	ldr	r3, [r2, #0]
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	428b      	cmp	r3, r1
{
 8009590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009594:	4604      	mov	r4, r0
 8009596:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009598:	d20c      	bcs.n	80095b4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800959a:	6813      	ldr	r3, [r2, #0]
 800959c:	f023 030f 	bic.w	r3, r3, #15
 80095a0:	430b      	orrs	r3, r1
 80095a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095a4:	6813      	ldr	r3, [r2, #0]
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	428b      	cmp	r3, r1
 80095ac:	d002      	beq.n	80095b4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80095ae:	2001      	movs	r0, #1
}
 80095b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	0758      	lsls	r0, r3, #29
 80095b8:	d50b      	bpl.n	80095d2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80095ba:	4981      	ldr	r1, [pc, #516]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80095bc:	6920      	ldr	r0, [r4, #16]
 80095be:	698a      	ldr	r2, [r1, #24]
 80095c0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80095c4:	4290      	cmp	r0, r2
 80095c6:	d904      	bls.n	80095d2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095c8:	698a      	ldr	r2, [r1, #24]
 80095ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80095ce:	4302      	orrs	r2, r0
 80095d0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095d2:	0719      	lsls	r1, r3, #28
 80095d4:	d50b      	bpl.n	80095ee <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80095d6:	497a      	ldr	r1, [pc, #488]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80095d8:	6960      	ldr	r0, [r4, #20]
 80095da:	69ca      	ldr	r2, [r1, #28]
 80095dc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80095e0:	4290      	cmp	r0, r2
 80095e2:	d904      	bls.n	80095ee <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095e4:	69ca      	ldr	r2, [r1, #28]
 80095e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80095ea:	4302      	orrs	r2, r0
 80095ec:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095ee:	06da      	lsls	r2, r3, #27
 80095f0:	d50b      	bpl.n	800960a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80095f2:	4973      	ldr	r1, [pc, #460]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80095f4:	69a0      	ldr	r0, [r4, #24]
 80095f6:	69ca      	ldr	r2, [r1, #28]
 80095f8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80095fc:	4290      	cmp	r0, r2
 80095fe:	d904      	bls.n	800960a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009600:	69ca      	ldr	r2, [r1, #28]
 8009602:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009606:	4302      	orrs	r2, r0
 8009608:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800960a:	069f      	lsls	r7, r3, #26
 800960c:	d50b      	bpl.n	8009626 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800960e:	496c      	ldr	r1, [pc, #432]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 8009610:	69e0      	ldr	r0, [r4, #28]
 8009612:	6a0a      	ldr	r2, [r1, #32]
 8009614:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009618:	4290      	cmp	r0, r2
 800961a:	d904      	bls.n	8009626 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800961c:	6a0a      	ldr	r2, [r1, #32]
 800961e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009622:	4302      	orrs	r2, r0
 8009624:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009626:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009628:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800962c:	f140 80ab 	bpl.w	8009786 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009630:	4e63      	ldr	r6, [pc, #396]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 8009632:	68e0      	ldr	r0, [r4, #12]
 8009634:	69b1      	ldr	r1, [r6, #24]
 8009636:	f001 010f 	and.w	r1, r1, #15
 800963a:	4288      	cmp	r0, r1
 800963c:	d904      	bls.n	8009648 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800963e:	69b1      	ldr	r1, [r6, #24]
 8009640:	f021 010f 	bic.w	r1, r1, #15
 8009644:	4301      	orrs	r1, r0
 8009646:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009648:	2a00      	cmp	r2, #0
 800964a:	d030      	beq.n	80096ae <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800964c:	4a5c      	ldr	r2, [pc, #368]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 800964e:	68a1      	ldr	r1, [r4, #8]
 8009650:	6993      	ldr	r3, [r2, #24]
 8009652:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009656:	430b      	orrs	r3, r1
 8009658:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800965a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800965c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800965e:	2902      	cmp	r1, #2
 8009660:	f000 80a1 	beq.w	80097a6 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009664:	2903      	cmp	r1, #3
 8009666:	f000 8098 	beq.w	800979a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800966a:	2901      	cmp	r1, #1
 800966c:	f000 80a1 	beq.w	80097b2 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009670:	075f      	lsls	r7, r3, #29
 8009672:	d59c      	bpl.n	80095ae <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009674:	4e52      	ldr	r6, [pc, #328]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009676:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800967a:	6933      	ldr	r3, [r6, #16]
 800967c:	f023 0307 	bic.w	r3, r3, #7
 8009680:	430b      	orrs	r3, r1
 8009682:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8009684:	f7f9 ff88 	bl	8003598 <HAL_GetTick>
 8009688:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800968a:	e005      	b.n	8009698 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800968c:	f7f9 ff84 	bl	8003598 <HAL_GetTick>
 8009690:	1bc0      	subs	r0, r0, r7
 8009692:	4540      	cmp	r0, r8
 8009694:	f200 808b 	bhi.w	80097ae <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009698:	6933      	ldr	r3, [r6, #16]
 800969a:	6862      	ldr	r2, [r4, #4]
 800969c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096a0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80096a4:	d1f2      	bne.n	800968c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	079e      	lsls	r6, r3, #30
 80096aa:	d506      	bpl.n	80096ba <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80096ac:	68e0      	ldr	r0, [r4, #12]
 80096ae:	4944      	ldr	r1, [pc, #272]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80096b0:	698a      	ldr	r2, [r1, #24]
 80096b2:	f002 020f 	and.w	r2, r2, #15
 80096b6:	4282      	cmp	r2, r0
 80096b8:	d869      	bhi.n	800978e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096ba:	4940      	ldr	r1, [pc, #256]	@ (80097bc <HAL_RCC_ClockConfig+0x23c>)
 80096bc:	680a      	ldr	r2, [r1, #0]
 80096be:	f002 020f 	and.w	r2, r2, #15
 80096c2:	42aa      	cmp	r2, r5
 80096c4:	d90a      	bls.n	80096dc <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096c6:	680a      	ldr	r2, [r1, #0]
 80096c8:	f022 020f 	bic.w	r2, r2, #15
 80096cc:	432a      	orrs	r2, r5
 80096ce:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096d0:	680a      	ldr	r2, [r1, #0]
 80096d2:	f002 020f 	and.w	r2, r2, #15
 80096d6:	42aa      	cmp	r2, r5
 80096d8:	f47f af69 	bne.w	80095ae <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096dc:	0758      	lsls	r0, r3, #29
 80096de:	d50b      	bpl.n	80096f8 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80096e0:	4937      	ldr	r1, [pc, #220]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80096e2:	6920      	ldr	r0, [r4, #16]
 80096e4:	698a      	ldr	r2, [r1, #24]
 80096e6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80096ea:	4290      	cmp	r0, r2
 80096ec:	d204      	bcs.n	80096f8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096ee:	698a      	ldr	r2, [r1, #24]
 80096f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80096f4:	4302      	orrs	r2, r0
 80096f6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096f8:	0719      	lsls	r1, r3, #28
 80096fa:	d50b      	bpl.n	8009714 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80096fc:	4930      	ldr	r1, [pc, #192]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 80096fe:	6960      	ldr	r0, [r4, #20]
 8009700:	69ca      	ldr	r2, [r1, #28]
 8009702:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009706:	4290      	cmp	r0, r2
 8009708:	d204      	bcs.n	8009714 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800970a:	69ca      	ldr	r2, [r1, #28]
 800970c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009710:	4302      	orrs	r2, r0
 8009712:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009714:	06da      	lsls	r2, r3, #27
 8009716:	d50b      	bpl.n	8009730 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009718:	4929      	ldr	r1, [pc, #164]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 800971a:	69a0      	ldr	r0, [r4, #24]
 800971c:	69ca      	ldr	r2, [r1, #28]
 800971e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009722:	4290      	cmp	r0, r2
 8009724:	d204      	bcs.n	8009730 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009726:	69ca      	ldr	r2, [r1, #28]
 8009728:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800972c:	4302      	orrs	r2, r0
 800972e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009730:	069b      	lsls	r3, r3, #26
 8009732:	d50b      	bpl.n	800974c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009734:	4a22      	ldr	r2, [pc, #136]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 8009736:	69e1      	ldr	r1, [r4, #28]
 8009738:	6a13      	ldr	r3, [r2, #32]
 800973a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800973e:	4299      	cmp	r1, r3
 8009740:	d204      	bcs.n	800974c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009742:	6a13      	ldr	r3, [r2, #32]
 8009744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009748:	430b      	orrs	r3, r1
 800974a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800974c:	f7ff fe8a 	bl	8009464 <HAL_RCC_GetSysClockFreq>
 8009750:	4a1b      	ldr	r2, [pc, #108]	@ (80097c0 <HAL_RCC_ClockConfig+0x240>)
 8009752:	4603      	mov	r3, r0
 8009754:	481b      	ldr	r0, [pc, #108]	@ (80097c4 <HAL_RCC_ClockConfig+0x244>)
 8009756:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009758:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800975a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800975e:	4d1a      	ldr	r5, [pc, #104]	@ (80097c8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009760:	f002 020f 	and.w	r2, r2, #15
 8009764:	4c19      	ldr	r4, [pc, #100]	@ (80097cc <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009766:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009768:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800976a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800976e:	4818      	ldr	r0, [pc, #96]	@ (80097d0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009770:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009774:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8009776:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8009778:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800977a:	40d3      	lsrs	r3, r2
 800977c:	6023      	str	r3, [r4, #0]
}
 800977e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009782:	f7f9 bea7 	b.w	80034d4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009786:	2a00      	cmp	r2, #0
 8009788:	f47f af60 	bne.w	800964c <HAL_RCC_ClockConfig+0xcc>
 800978c:	e795      	b.n	80096ba <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800978e:	698a      	ldr	r2, [r1, #24]
 8009790:	f022 020f 	bic.w	r2, r2, #15
 8009794:	4302      	orrs	r2, r0
 8009796:	618a      	str	r2, [r1, #24]
 8009798:	e78f      	b.n	80096ba <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800979a:	019a      	lsls	r2, r3, #6
 800979c:	f53f af6a 	bmi.w	8009674 <HAL_RCC_ClockConfig+0xf4>
 80097a0:	e705      	b.n	80095ae <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80097a2:	2001      	movs	r0, #1
}
 80097a4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097a6:	0398      	lsls	r0, r3, #14
 80097a8:	f53f af64 	bmi.w	8009674 <HAL_RCC_ClockConfig+0xf4>
 80097ac:	e6ff      	b.n	80095ae <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80097ae:	2003      	movs	r0, #3
 80097b0:	e6fe      	b.n	80095b0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097b2:	05db      	lsls	r3, r3, #23
 80097b4:	f53f af5e 	bmi.w	8009674 <HAL_RCC_ClockConfig+0xf4>
 80097b8:	e6f9      	b.n	80095ae <HAL_RCC_ClockConfig+0x2e>
 80097ba:	bf00      	nop
 80097bc:	52002000 	.word	0x52002000
 80097c0:	58024400 	.word	0x58024400
 80097c4:	08010568 	.word	0x08010568
 80097c8:	2400000c 	.word	0x2400000c
 80097cc:	24000008 	.word	0x24000008
 80097d0:	24000014 	.word	0x24000014

080097d4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097d4:	4a18      	ldr	r2, [pc, #96]	@ (8009838 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097d6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097d8:	6913      	ldr	r3, [r2, #16]
 80097da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097de:	2b10      	cmp	r3, #16
 80097e0:	d019      	beq.n	8009816 <HAL_RCC_GetHCLKFreq+0x42>
 80097e2:	2b18      	cmp	r3, #24
 80097e4:	d022      	beq.n	800982c <HAL_RCC_GetHCLKFreq+0x58>
 80097e6:	b1c3      	cbz	r3, 800981a <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 80097e8:	4b14      	ldr	r3, [pc, #80]	@ (800983c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80097ea:	4913      	ldr	r1, [pc, #76]	@ (8009838 <HAL_RCC_GetHCLKFreq+0x64>)
 80097ec:	4814      	ldr	r0, [pc, #80]	@ (8009840 <HAL_RCC_GetHCLKFreq+0x6c>)
 80097ee:	698a      	ldr	r2, [r1, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80097f0:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80097f2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80097f6:	4c13      	ldr	r4, [pc, #76]	@ (8009844 <HAL_RCC_GetHCLKFreq+0x70>)
 80097f8:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097fc:	4d12      	ldr	r5, [pc, #72]	@ (8009848 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80097fe:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009800:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009802:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009806:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800980a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800980c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8009810:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009812:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009814:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009816:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <HAL_RCC_GetHCLKFreq+0x78>)
 8009818:	e7e7      	b.n	80097ea <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	069b      	lsls	r3, r3, #26
 800981e:	d509      	bpl.n	8009834 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	4b0b      	ldr	r3, [pc, #44]	@ (8009850 <HAL_RCC_GetHCLKFreq+0x7c>)
 8009824:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009828:	40d3      	lsrs	r3, r2
 800982a:	e7de      	b.n	80097ea <HAL_RCC_GetHCLKFreq+0x16>
 800982c:	f7ff fac4 	bl	8008db8 <HAL_RCC_GetSysClockFreq.part.0>
 8009830:	4603      	mov	r3, r0
 8009832:	e7da      	b.n	80097ea <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009834:	4b06      	ldr	r3, [pc, #24]	@ (8009850 <HAL_RCC_GetHCLKFreq+0x7c>)
 8009836:	e7d8      	b.n	80097ea <HAL_RCC_GetHCLKFreq+0x16>
 8009838:	58024400 	.word	0x58024400
 800983c:	003d0900 	.word	0x003d0900
 8009840:	08010568 	.word	0x08010568
 8009844:	24000008 	.word	0x24000008
 8009848:	2400000c 	.word	0x2400000c
 800984c:	017d7840 	.word	0x017d7840
 8009850:	03d09000 	.word	0x03d09000

08009854 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009854:	4a1c      	ldr	r2, [pc, #112]	@ (80098c8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009856:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009858:	6913      	ldr	r3, [r2, #16]
 800985a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800985e:	2b10      	cmp	r3, #16
 8009860:	d020      	beq.n	80098a4 <HAL_RCC_GetPCLK1Freq+0x50>
 8009862:	2b18      	cmp	r3, #24
 8009864:	d029      	beq.n	80098ba <HAL_RCC_GetPCLK1Freq+0x66>
 8009866:	b1fb      	cbz	r3, 80098a8 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8009868:	4b18      	ldr	r3, [pc, #96]	@ (80098cc <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800986a:	4a17      	ldr	r2, [pc, #92]	@ (80098c8 <HAL_RCC_GetPCLK1Freq+0x74>)
 800986c:	4918      	ldr	r1, [pc, #96]	@ (80098d0 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800986e:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8009870:	4d18      	ldr	r5, [pc, #96]	@ (80098d4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009872:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009876:	4c18      	ldr	r4, [pc, #96]	@ (80098d8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009878:	5c08      	ldrb	r0, [r1, r0]
 800987a:	f000 001f 	and.w	r0, r0, #31
 800987e:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009880:	6990      	ldr	r0, [r2, #24]
 8009882:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8009886:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009888:	5c08      	ldrb	r0, [r1, r0]
 800988a:	f000 001f 	and.w	r0, r0, #31
 800988e:	40c3      	lsrs	r3, r0
 8009890:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8009892:	69d2      	ldr	r2, [r2, #28]
 8009894:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8009898:	5c88      	ldrb	r0, [r1, r2]
 800989a:	f000 001f 	and.w	r0, r0, #31
#endif
}
 800989e:	fa23 f000 	lsr.w	r0, r3, r0
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098a4:	4b0d      	ldr	r3, [pc, #52]	@ (80098dc <HAL_RCC_GetPCLK1Freq+0x88>)
 80098a6:	e7e0      	b.n	800986a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a8:	6813      	ldr	r3, [r2, #0]
 80098aa:	069b      	lsls	r3, r3, #26
 80098ac:	d509      	bpl.n	80098c2 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ae:	6812      	ldr	r2, [r2, #0]
 80098b0:	4b0b      	ldr	r3, [pc, #44]	@ (80098e0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80098b2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80098b6:	40d3      	lsrs	r3, r2
 80098b8:	e7d7      	b.n	800986a <HAL_RCC_GetPCLK1Freq+0x16>
 80098ba:	f7ff fa7d 	bl	8008db8 <HAL_RCC_GetSysClockFreq.part.0>
 80098be:	4603      	mov	r3, r0
 80098c0:	e7d3      	b.n	800986a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80098c2:	4b07      	ldr	r3, [pc, #28]	@ (80098e0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80098c4:	e7d1      	b.n	800986a <HAL_RCC_GetPCLK1Freq+0x16>
 80098c6:	bf00      	nop
 80098c8:	58024400 	.word	0x58024400
 80098cc:	003d0900 	.word	0x003d0900
 80098d0:	08010568 	.word	0x08010568
 80098d4:	2400000c 	.word	0x2400000c
 80098d8:	24000008 	.word	0x24000008
 80098dc:	017d7840 	.word	0x017d7840
 80098e0:	03d09000 	.word	0x03d09000

080098e4 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098e6:	4c36      	ldr	r4, [pc, #216]	@ (80099c0 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80098e8:	4606      	mov	r6, r0
 80098ea:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098f2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098f4:	f7f9 fe50 	bl	8003598 <HAL_GetTick>
 80098f8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098fa:	e004      	b.n	8009906 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098fc:	f7f9 fe4c 	bl	8003598 <HAL_GetTick>
 8009900:	1b40      	subs	r0, r0, r5
 8009902:	2802      	cmp	r0, #2
 8009904:	d856      	bhi.n	80099b4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	011a      	lsls	r2, r3, #4
 800990a:	d4f7      	bmi.n	80098fc <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800990c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800990e:	6832      	ldr	r2, [r6, #0]
 8009910:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009914:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009918:	62a3      	str	r3, [r4, #40]	@ 0x28
 800991a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800991e:	3b01      	subs	r3, #1
 8009920:	3a01      	subs	r2, #1
 8009922:	025b      	lsls	r3, r3, #9
 8009924:	0412      	lsls	r2, r2, #16
 8009926:	b29b      	uxth	r3, r3
 8009928:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800992c:	4313      	orrs	r3, r2
 800992e:	6872      	ldr	r2, [r6, #4]
 8009930:	3a01      	subs	r2, #1
 8009932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009936:	4313      	orrs	r3, r2
 8009938:	6932      	ldr	r2, [r6, #16]
 800993a:	3a01      	subs	r2, #1
 800993c:	0612      	lsls	r2, r2, #24
 800993e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009942:	4313      	orrs	r3, r2
 8009944:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009946:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009948:	6972      	ldr	r2, [r6, #20]
 800994a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800994e:	4313      	orrs	r3, r2
 8009950:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009952:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009954:	69b3      	ldr	r3, [r6, #24]
 8009956:	f022 0220 	bic.w	r2, r2, #32
 800995a:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800995c:	4b19      	ldr	r3, [pc, #100]	@ (80099c4 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800995e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009960:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009962:	f022 0210 	bic.w	r2, r2, #16
 8009966:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009968:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800996a:	69f2      	ldr	r2, [r6, #28]
 800996c:	400b      	ands	r3, r1
 800996e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009972:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009974:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009976:	f043 0310 	orr.w	r3, r3, #16
 800997a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800997c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800997e:	b1df      	cbz	r7, 80099b8 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009980:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009982:	bf0c      	ite	eq
 8009984:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009988:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800998c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800998e:	4c0c      	ldr	r4, [pc, #48]	@ (80099c0 <RCCEx_PLL2_Config.part.0+0xdc>)
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009996:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009998:	f7f9 fdfe 	bl	8003598 <HAL_GetTick>
 800999c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800999e:	e004      	b.n	80099aa <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099a0:	f7f9 fdfa 	bl	8003598 <HAL_GetTick>
 80099a4:	1b40      	subs	r0, r0, r5
 80099a6:	2802      	cmp	r0, #2
 80099a8:	d804      	bhi.n	80099b4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	011b      	lsls	r3, r3, #4
 80099ae:	d5f7      	bpl.n	80099a0 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 80099b0:	2000      	movs	r0, #0
}
 80099b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80099b4:	2003      	movs	r0, #3
}
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099be:	e7e6      	b.n	800998e <RCCEx_PLL2_Config.part.0+0xaa>
 80099c0:	58024400 	.word	0x58024400
 80099c4:	ffff0007 	.word	0xffff0007

080099c8 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099ca:	4c36      	ldr	r4, [pc, #216]	@ (8009aa4 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 80099cc:	4606      	mov	r6, r0
 80099ce:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099d6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099d8:	f7f9 fdde 	bl	8003598 <HAL_GetTick>
 80099dc:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099de:	e004      	b.n	80099ea <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099e0:	f7f9 fdda 	bl	8003598 <HAL_GetTick>
 80099e4:	1b40      	subs	r0, r0, r5
 80099e6:	2802      	cmp	r0, #2
 80099e8:	d856      	bhi.n	8009a98 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	009a      	lsls	r2, r3, #2
 80099ee:	d4f7      	bmi.n	80099e0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80099f2:	6832      	ldr	r2, [r6, #0]
 80099f4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80099f8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80099fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099fe:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	3a01      	subs	r2, #1
 8009a06:	025b      	lsls	r3, r3, #9
 8009a08:	0412      	lsls	r2, r2, #16
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009a10:	4313      	orrs	r3, r2
 8009a12:	6872      	ldr	r2, [r6, #4]
 8009a14:	3a01      	subs	r2, #1
 8009a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	6932      	ldr	r2, [r6, #16]
 8009a1e:	3a01      	subs	r2, #1
 8009a20:	0612      	lsls	r2, r2, #24
 8009a22:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009a26:	4313      	orrs	r3, r2
 8009a28:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a2c:	6972      	ldr	r2, [r6, #20]
 8009a2e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009a32:	4313      	orrs	r3, r2
 8009a34:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a38:	69b3      	ldr	r3, [r6, #24]
 8009a3a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009a3e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a40:	4b19      	ldr	r3, [pc, #100]	@ (8009aa8 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a42:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a44:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a4a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009a4e:	69f2      	ldr	r2, [r6, #28]
 8009a50:	400b      	ands	r3, r1
 8009a52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009a56:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a5e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009a62:	b1df      	cbz	r7, 8009a9c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a64:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a66:	bf0c      	ite	eq
 8009a68:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a6c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8009a70:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a72:	4c0c      	ldr	r4, [pc, #48]	@ (8009aa4 <RCCEx_PLL3_Config.part.0+0xdc>)
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a7a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a7c:	f7f9 fd8c 	bl	8003598 <HAL_GetTick>
 8009a80:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a82:	e004      	b.n	8009a8e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a84:	f7f9 fd88 	bl	8003598 <HAL_GetTick>
 8009a88:	1b40      	subs	r0, r0, r5
 8009a8a:	2802      	cmp	r0, #2
 8009a8c:	d804      	bhi.n	8009a98 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	d5f7      	bpl.n	8009a84 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8009a94:	2000      	movs	r0, #0
}
 8009a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8009a98:	2003      	movs	r0, #3
}
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009aa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009aa2:	e7e6      	b.n	8009a72 <RCCEx_PLL3_Config.part.0+0xaa>
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	ffff0007 	.word	0xffff0007

08009aac <HAL_RCCEx_PeriphCLKConfig>:
{
 8009aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ab0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8009ab4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ab6:	0118      	lsls	r0, r3, #4
 8009ab8:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8009abc:	d526      	bpl.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009abe:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8009ac0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8009ac4:	f000 8671 	beq.w	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8009ac8:	d815      	bhi.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8009aca:	2900      	cmp	r1, #0
 8009acc:	f000 8490 	beq.w	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8009ad0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009ad4:	f040 846b 	bne.w	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x902>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ad8:	49a4      	ldr	r1, [pc, #656]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009ada:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009adc:	f001 0103 	and.w	r1, r1, #3
 8009ae0:	2903      	cmp	r1, #3
 8009ae2:	f000 8464 	beq.w	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x902>
 8009ae6:	2102      	movs	r1, #2
 8009ae8:	f104 0008 	add.w	r0, r4, #8
 8009aec:	f7ff fefa 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009af0:	4606      	mov	r6, r0
        break;
 8009af2:	f000 be67 	b.w	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009af6:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8009afa:	f040 8458 	bne.w	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009afe:	4d9b      	ldr	r5, [pc, #620]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b00:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b02:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8009b04:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8009b08:	4301      	orrs	r1, r0
 8009b0a:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b0c:	05d9      	lsls	r1, r3, #23
 8009b0e:	d50a      	bpl.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009b10:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009b12:	2904      	cmp	r1, #4
 8009b14:	d806      	bhi.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009b16:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009b1a:	0495      	.short	0x0495
 8009b1c:	06380623 	.word	0x06380623
 8009b20:	049a049a 	.word	0x049a049a
 8009b24:	2601      	movs	r6, #1
 8009b26:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009b28:	059f      	lsls	r7, r3, #22
 8009b2a:	d524      	bpl.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2AClockSelection)
 8009b2c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8009b2e:	2980      	cmp	r1, #128	@ 0x80
 8009b30:	f000 85d7 	beq.w	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8009b34:	f200 80e4 	bhi.w	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	f000 8460 	beq.w	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009b3e:	2940      	cmp	r1, #64	@ 0x40
 8009b40:	f040 80e7 	bne.w	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x266>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b44:	4989      	ldr	r1, [pc, #548]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b46:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009b48:	f001 0103 	and.w	r1, r1, #3
 8009b4c:	2903      	cmp	r1, #3
 8009b4e:	f000 80e0 	beq.w	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009b52:	2100      	movs	r1, #0
 8009b54:	f104 0008 	add.w	r0, r4, #8
 8009b58:	f7ff fec4 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009b5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009b5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009b62:	2d00      	cmp	r5, #0
 8009b64:	f040 84f7 	bne.w	800a556 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009b68:	4f80      	ldr	r7, [pc, #512]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b6a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009b6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b6e:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8009b72:	4301      	orrs	r1, r0
 8009b74:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009b76:	0558      	lsls	r0, r3, #21
 8009b78:	d526      	bpl.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai2BClockSelection)
 8009b7a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8009b7c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009b80:	f000 85da 	beq.w	800a738 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 8009b84:	f200 80c8 	bhi.w	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009b88:	2900      	cmp	r1, #0
 8009b8a:	f000 8442 	beq.w	800a412 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009b8e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009b92:	f040 80cb 	bne.w	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b96:	4975      	ldr	r1, [pc, #468]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009b98:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009b9a:	f001 0103 	and.w	r1, r1, #3
 8009b9e:	2903      	cmp	r1, #3
 8009ba0:	f000 80c4 	beq.w	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	f104 0008 	add.w	r0, r4, #8
 8009baa:	f7ff fe9b 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009bae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009bb0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009bb4:	2d00      	cmp	r5, #0
 8009bb6:	f040 84d1 	bne.w	800a55c <HAL_RCCEx_PeriphCLKConfig+0xab0>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009bba:	4f6c      	ldr	r7, [pc, #432]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009bbc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8009bbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bc0:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8009bc4:	4301      	orrs	r1, r0
 8009bc6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009bc8:	0199      	lsls	r1, r3, #6
 8009bca:	d518      	bpl.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->OspiClockSelection)
 8009bcc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009bce:	2920      	cmp	r1, #32
 8009bd0:	f000 8527 	beq.w	800a622 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8009bd4:	f200 80ad 	bhi.w	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8009bd8:	b139      	cbz	r1, 8009bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009bda:	2910      	cmp	r1, #16
 8009bdc:	f040 80ac 	bne.w	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009be0:	4862      	ldr	r0, [pc, #392]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009be2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8009be4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8009be8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8009bea:	2d00      	cmp	r5, #0
 8009bec:	f040 84ab 	bne.w	800a546 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009bf0:	4f5e      	ldr	r7, [pc, #376]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009bf2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8009bf4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009bf6:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8009bfa:	4301      	orrs	r1, r0
 8009bfc:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009bfe:	04df      	lsls	r7, r3, #19
 8009c00:	d526      	bpl.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c02:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8009c04:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8009c08:	f000 857f 	beq.w	800a70a <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8009c0c:	f200 8097 	bhi.w	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009c10:	2900      	cmp	r1, #0
 8009c12:	f000 840d 	beq.w	800a430 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009c16:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009c1a:	f040 8098 	bne.w	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c1e:	4953      	ldr	r1, [pc, #332]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009c20:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009c22:	f001 0103 	and.w	r1, r1, #3
 8009c26:	2903      	cmp	r1, #3
 8009c28:	f000 8091 	beq.w	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	f104 0008 	add.w	r0, r4, #8
 8009c32:	f7ff fe57 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009c36:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c38:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	f040 8487 	bne.w	800a550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c42:	4f4a      	ldr	r7, [pc, #296]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009c44:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8009c46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c48:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009c4c:	4301      	orrs	r1, r0
 8009c4e:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c50:	0498      	lsls	r0, r3, #18
 8009c52:	d521      	bpl.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c54:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009c56:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8009c5a:	f000 852e 	beq.w	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8009c5e:	d879      	bhi.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c60:	b181      	cbz	r1, 8009c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009c62:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009c66:	d17d      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c68:	4940      	ldr	r1, [pc, #256]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009c6a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009c6c:	f001 0103 	and.w	r1, r1, #3
 8009c70:	2903      	cmp	r1, #3
 8009c72:	d077      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009c74:	2101      	movs	r1, #1
 8009c76:	f104 0008 	add.w	r0, r4, #8
 8009c7a:	f7ff fe33 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009c7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	f040 847a 	bne.w	800a57e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c8a:	4f38      	ldr	r7, [pc, #224]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009c8c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8009c8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c90:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8009c94:	4301      	orrs	r1, r0
 8009c96:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c98:	0459      	lsls	r1, r3, #17
 8009c9a:	d572      	bpl.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    switch (PeriphClkInit->Spi6ClockSelection)
 8009c9c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8009ca0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8009ca4:	f000 84d0 	beq.w	800a648 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009ca8:	d862      	bhi.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8009caa:	b181      	cbz	r1, 8009cce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009cac:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8009cb0:	d165      	bne.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cb2:	492e      	ldr	r1, [pc, #184]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009cb4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009cb6:	f001 0103 	and.w	r1, r1, #3
 8009cba:	2903      	cmp	r1, #3
 8009cbc:	d05f      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	f104 0008 	add.w	r0, r4, #8
 8009cc4:	f7ff fe0e 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009cc8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009cca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	f040 8463 	bne.w	800a59a <HAL_RCCEx_PeriphCLKConfig+0xaee>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009cd4:	4f25      	ldr	r7, [pc, #148]	@ (8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009cd6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8009cda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cdc:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8009ce0:	4301      	orrs	r1, r0
 8009ce2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ce4:	041f      	lsls	r7, r3, #16
 8009ce6:	d44e      	bmi.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ce8:	01d8      	lsls	r0, r3, #7
 8009cea:	d55c      	bpl.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch (PeriphClkInit->FmcClockSelection)
 8009cec:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009cee:	2903      	cmp	r1, #3
 8009cf0:	f200 85c8 	bhi.w	800a884 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8009cf4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009cf8:	02c802cd 	.word	0x02c802cd
 8009cfc:	02cd04ce 	.word	0x02cd04ce
    switch (PeriphClkInit->Sai2AClockSelection)
 8009d00:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8009d04:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8009d08:	f43f af2b 	beq.w	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8009d0c:	29c0      	cmp	r1, #192	@ 0xc0
 8009d0e:	f43f af28 	beq.w	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8009d12:	2601      	movs	r6, #1
 8009d14:	4635      	mov	r5, r6
 8009d16:	e72e      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2BClockSelection)
 8009d18:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8009d1c:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8009d20:	f43f af48 	beq.w	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8009d24:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8009d28:	f43f af44 	beq.w	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8009d2c:	2601      	movs	r6, #1
 8009d2e:	4635      	mov	r5, r6
 8009d30:	e74a      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->OspiClockSelection)
 8009d32:	2930      	cmp	r1, #48	@ 0x30
 8009d34:	f43f af59 	beq.w	8009bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8009d38:	2601      	movs	r6, #1
 8009d3a:	4635      	mov	r5, r6
 8009d3c:	e75f      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009d3e:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8009d42:	f43f af7b 	beq.w	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009d46:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8009d4a:	f43f af77 	beq.w	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009d4e:	2601      	movs	r6, #1
 8009d50:	4635      	mov	r5, r6
 8009d52:	e77d      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d54:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8009d58:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8009d5c:	d092      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009d5e:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8009d62:	d08f      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009d64:	2601      	movs	r6, #1
 8009d66:	4635      	mov	r5, r6
 8009d68:	e796      	b.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8009d6a:	bf00      	nop
 8009d6c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d70:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 8009d74:	d0ab      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d76:	d94a      	bls.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009d78:	f1b1 4fc0 	cmp.w	r1, #1610612736	@ 0x60000000
 8009d7c:	d0a7      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d7e:	2601      	movs	r6, #1
 8009d80:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d82:	041f      	lsls	r7, r3, #16
 8009d84:	d5b0      	bpl.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    switch (PeriphClkInit->FdcanClockSelection)
 8009d86:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8009d88:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8009d8c:	f000 82e4 	beq.w	800a358 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8009d90:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8009d94:	f000 83c0 	beq.w	800a518 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	f000 82e2 	beq.w	800a362 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8009d9e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009da0:	01d8      	lsls	r0, r3, #7
 8009da2:	4635      	mov	r5, r6
 8009da4:	d4a2      	bmi.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x240>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009da6:	0259      	lsls	r1, r3, #9
 8009da8:	f100 8280 	bmi.w	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x800>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009dac:	07df      	lsls	r7, r3, #31
 8009dae:	d53b      	bpl.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8009db0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8009db4:	2928      	cmp	r1, #40	@ 0x28
 8009db6:	d835      	bhi.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009db8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009dbc:	0034030e 	.word	0x0034030e
 8009dc0:	00340034 	.word	0x00340034
 8009dc4:	00340034 	.word	0x00340034
 8009dc8:	00340034 	.word	0x00340034
 8009dcc:	003402ff 	.word	0x003402ff
 8009dd0:	00340034 	.word	0x00340034
 8009dd4:	00340034 	.word	0x00340034
 8009dd8:	00340034 	.word	0x00340034
 8009ddc:	00340530 	.word	0x00340530
 8009de0:	00340034 	.word	0x00340034
 8009de4:	00340034 	.word	0x00340034
 8009de8:	00340034 	.word	0x00340034
 8009dec:	0034030e 	.word	0x0034030e
 8009df0:	00340034 	.word	0x00340034
 8009df4:	00340034 	.word	0x00340034
 8009df8:	00340034 	.word	0x00340034
 8009dfc:	0034030e 	.word	0x0034030e
 8009e00:	00340034 	.word	0x00340034
 8009e04:	00340034 	.word	0x00340034
 8009e08:	00340034 	.word	0x00340034
 8009e0c:	030e      	.short	0x030e
    switch (PeriphClkInit->Spi6ClockSelection)
 8009e0e:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8009e12:	f43f af5c 	beq.w	8009cce <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009e16:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8009e1a:	d1b0      	bne.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    if (ret == HAL_OK)
 8009e1c:	2d00      	cmp	r5, #0
 8009e1e:	f040 83bc 	bne.w	800a59a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8009e22:	e757      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8009e24:	2601      	movs	r6, #1
 8009e26:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e28:	0798      	lsls	r0, r3, #30
 8009e2a:	d51f      	bpl.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009e2c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8009e30:	2905      	cmp	r1, #5
 8009e32:	f200 850c 	bhi.w	800a84e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8009e36:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009e3a:	0015      	.short	0x0015
 8009e3c:	04df0006 	.word	0x04df0006
 8009e40:	00150015 	.word	0x00150015
 8009e44:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e46:	4911      	ldr	r1, [pc, #68]	@ (8009e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e48:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009e4a:	f001 0103 	and.w	r1, r1, #3
 8009e4e:	2903      	cmp	r1, #3
 8009e50:	f000 84fd 	beq.w	800a84e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8009e54:	2101      	movs	r1, #1
 8009e56:	f104 0008 	add.w	r0, r4, #8
 8009e5a:	f7ff fd43 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009e5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009e64:	2d00      	cmp	r5, #0
 8009e66:	f000 839b 	beq.w	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 8009e6a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e6c:	0759      	lsls	r1, r3, #29
 8009e6e:	d522      	bpl.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e70:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8009e74:	2905      	cmp	r1, #5
 8009e76:	f200 84ee 	bhi.w	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8009e7a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009e7e:	0018      	.short	0x0018
 8009e80:	04ab0009 	.word	0x04ab0009
 8009e84:	00180018 	.word	0x00180018
 8009e88:	0018      	.short	0x0018
 8009e8a:	bf00      	nop
 8009e8c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e90:	49af      	ldr	r1, [pc, #700]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009e92:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009e94:	f001 0103 	and.w	r1, r1, #3
 8009e98:	2903      	cmp	r1, #3
 8009e9a:	f000 84dc 	beq.w	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	f104 0008 	add.w	r0, r4, #8
 8009ea4:	f7ff fd1e 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009ea8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eaa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009eae:	2d00      	cmp	r5, #0
 8009eb0:	f000 8368 	beq.w	800a584 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009eb4:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eb6:	069f      	lsls	r7, r3, #26
 8009eb8:	d526      	bpl.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009eba:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8009ebe:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8009ec2:	f000 8378 	beq.w	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009ec6:	f200 8192 	bhi.w	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x742>
 8009eca:	b191      	cbz	r1, 8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009ecc:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8009ed0:	f040 8197 	bne.w	800a202 <HAL_RCCEx_PeriphCLKConfig+0x756>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ed4:	499e      	ldr	r1, [pc, #632]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009ed6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009ed8:	f001 0103 	and.w	r1, r1, #3
 8009edc:	2903      	cmp	r1, #3
 8009ede:	f000 8190 	beq.w	800a202 <HAL_RCCEx_PeriphCLKConfig+0x756>
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	f104 0008 	add.w	r0, r4, #8
 8009ee8:	f7ff fcfc 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009eec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009eee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	f040 834f 	bne.w	800a596 <HAL_RCCEx_PeriphCLKConfig+0xaea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ef8:	4f95      	ldr	r7, [pc, #596]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009efa:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8009efe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f00:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8009f04:	4301      	orrs	r1, r0
 8009f06:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f08:	0658      	lsls	r0, r3, #25
 8009f0a:	d526      	bpl.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f0c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8009f10:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009f14:	f000 8373 	beq.w	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8009f18:	f200 8176 	bhi.w	800a208 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8009f1c:	b191      	cbz	r1, 8009f44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009f1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009f22:	f040 817b 	bne.w	800a21c <HAL_RCCEx_PeriphCLKConfig+0x770>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f26:	498a      	ldr	r1, [pc, #552]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009f28:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009f2a:	f001 0103 	and.w	r1, r1, #3
 8009f2e:	2903      	cmp	r1, #3
 8009f30:	f000 8174 	beq.w	800a21c <HAL_RCCEx_PeriphCLKConfig+0x770>
 8009f34:	2100      	movs	r1, #0
 8009f36:	f104 0008 	add.w	r0, r4, #8
 8009f3a:	f7ff fcd3 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009f3e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f40:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	f040 8314 	bne.w	800a572 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f4a:	4f81      	ldr	r7, [pc, #516]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009f4c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8009f50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f52:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8009f56:	4301      	orrs	r1, r0
 8009f58:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f5a:	0619      	lsls	r1, r3, #24
 8009f5c:	d526      	bpl.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f5e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8009f62:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8009f66:	f000 8338 	beq.w	800a5da <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009f6a:	f200 815a 	bhi.w	800a222 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8009f6e:	b191      	cbz	r1, 8009f96 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009f70:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8009f74:	f040 815f 	bne.w	800a236 <HAL_RCCEx_PeriphCLKConfig+0x78a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f78:	4975      	ldr	r1, [pc, #468]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009f7a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8009f7c:	f001 0103 	and.w	r1, r1, #3
 8009f80:	2903      	cmp	r1, #3
 8009f82:	f000 8158 	beq.w	800a236 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8009f86:	2100      	movs	r1, #0
 8009f88:	f104 0008 	add.w	r0, r4, #8
 8009f8c:	f7ff fcaa 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 8009f90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009f92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8009f96:	2d00      	cmp	r5, #0
 8009f98:	f040 82ef 	bne.w	800a57a <HAL_RCCEx_PeriphCLKConfig+0xace>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009f9c:	4f6c      	ldr	r7, [pc, #432]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009f9e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8009fa2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009fa4:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8009fa8:	4301      	orrs	r1, r0
 8009faa:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009fac:	071f      	lsls	r7, r3, #28
 8009fae:	d50b      	bpl.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009fb0:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8009fb4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8009fb8:	f000 8262 	beq.w	800a480 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009fbc:	4f64      	ldr	r7, [pc, #400]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009fbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fc0:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8009fc4:	4301      	orrs	r1, r0
 8009fc6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fc8:	06d8      	lsls	r0, r3, #27
 8009fca:	d50b      	bpl.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009fcc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8009fd0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8009fd4:	f000 8268 	beq.w	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009fd8:	4f5d      	ldr	r7, [pc, #372]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8009fda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009fdc:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8009fe0:	4301      	orrs	r1, r0
 8009fe2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fe4:	0319      	lsls	r1, r3, #12
 8009fe6:	d50e      	bpl.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8009fe8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8009fec:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009ff0:	f000 81c2 	beq.w	800a378 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8009ff4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8009ff8:	f000 81cd 	beq.w	800a396 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	f000 827b 	beq.w	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800a002:	2601      	movs	r6, #1
 800a004:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a006:	035f      	lsls	r7, r3, #13
 800a008:	d50f      	bpl.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 800a00a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800a00e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800a012:	f000 832c 	beq.w	800a66e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800a016:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800a01a:	f000 8191 	beq.w	800a340 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a01e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a022:	f000 8188 	beq.w	800a336 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800a026:	2601      	movs	r6, #1
 800a028:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a02a:	03d8      	lsls	r0, r3, #15
 800a02c:	d520      	bpl.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a02e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a030:	2900      	cmp	r1, #0
 800a032:	f000 824e 	beq.w	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800a036:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a03a:	f040 8179 	bne.w	800a330 <HAL_RCCEx_PeriphCLKConfig+0x884>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a03e:	4944      	ldr	r1, [pc, #272]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a040:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a042:	f001 0103 	and.w	r1, r1, #3
 800a046:	2903      	cmp	r1, #3
 800a048:	f000 8172 	beq.w	800a330 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800a04c:	2102      	movs	r1, #2
 800a04e:	f104 0008 	add.w	r0, r4, #8
 800a052:	f7ff fc47 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 800a056:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a058:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a05c:	2d00      	cmp	r5, #0
 800a05e:	f040 8240 	bne.w	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a062:	4f3b      	ldr	r7, [pc, #236]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a064:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800a066:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a068:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a06c:	4301      	orrs	r1, r0
 800a06e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a070:	0099      	lsls	r1, r3, #2
 800a072:	d50e      	bpl.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a074:	4936      	ldr	r1, [pc, #216]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a076:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a078:	f001 0103 	and.w	r1, r1, #3
 800a07c:	2903      	cmp	r1, #3
 800a07e:	d007      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800a080:	2102      	movs	r1, #2
 800a082:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a086:	f7ff fc9f 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a08a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a08e:	b100      	cbz	r0, 800a092 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 800a090:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a092:	039f      	lsls	r7, r3, #14
 800a094:	f140 80de 	bpl.w	800a254 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 800a098:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800a09c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a0a0:	f000 8221 	beq.w	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800a0a4:	f240 80ca 	bls.w	800a23c <HAL_RCCEx_PeriphCLKConfig+0x790>
 800a0a8:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 800a0ac:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800a0b0:	f000 80c7 	beq.w	800a242 <HAL_RCCEx_PeriphCLKConfig+0x796>
 800a0b4:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0b6:	02d8      	lsls	r0, r3, #11
 800a0b8:	d506      	bpl.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0ba:	4825      	ldr	r0, [pc, #148]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a0bc:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 800a0be:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800a0c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a0c4:	4331      	orrs	r1, r6
 800a0c6:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0c8:	0299      	lsls	r1, r3, #10
 800a0ca:	d506      	bpl.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0cc:	4820      	ldr	r0, [pc, #128]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a0ce:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 800a0d0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800a0d2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800a0d6:	4331      	orrs	r1, r6
 800a0d8:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a0da:	051f      	lsls	r7, r3, #20
 800a0dc:	d506      	bpl.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x640>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a0de:	481c      	ldr	r0, [pc, #112]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a0e0:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800a0e2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800a0e4:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 800a0e8:	4331      	orrs	r1, r6
 800a0ea:	6581      	str	r1, [r0, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0ec:	005e      	lsls	r6, r3, #1
 800a0ee:	d509      	bpl.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x658>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0f0:	4917      	ldr	r1, [pc, #92]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a0f2:	6908      	ldr	r0, [r1, #16]
 800a0f4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a0f8:	6108      	str	r0, [r1, #16]
 800a0fa:	6908      	ldr	r0, [r1, #16]
 800a0fc:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800a100:	4330      	orrs	r0, r6
 800a102:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a104:	2b00      	cmp	r3, #0
 800a106:	da06      	bge.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a108:	4811      	ldr	r0, [pc, #68]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a10a:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 800a10c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800a10e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800a112:	4331      	orrs	r1, r6
 800a114:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a116:	0218      	lsls	r0, r3, #8
 800a118:	d507      	bpl.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a11a:	490d      	ldr	r1, [pc, #52]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a11c:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800a120:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800a122:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a126:	4303      	orrs	r3, r0
 800a128:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a12a:	07d1      	lsls	r1, r2, #31
 800a12c:	d512      	bpl.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a12e:	4b08      	ldr	r3, [pc, #32]	@ (800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800a130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	2b03      	cmp	r3, #3
 800a138:	f000 8198 	beq.w	800a46c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800a13c:	2100      	movs	r1, #0
 800a13e:	f104 0008 	add.w	r0, r4, #8
 800a142:	f7ff fbcf 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a146:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a148:	2800      	cmp	r0, #0
 800a14a:	f040 820e 	bne.w	800a56a <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800a14e:	e001      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800a150:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a154:	0793      	lsls	r3, r2, #30
 800a156:	d50f      	bpl.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a158:	4bb3      	ldr	r3, [pc, #716]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	2b03      	cmp	r3, #3
 800a162:	f000 8185 	beq.w	800a470 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 800a166:	2101      	movs	r1, #1
 800a168:	f104 0008 	add.w	r0, r4, #8
 800a16c:	f7ff fbba 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a170:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a172:	2800      	cmp	r0, #0
 800a174:	f040 81f5 	bne.w	800a562 <HAL_RCCEx_PeriphCLKConfig+0xab6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a178:	0757      	lsls	r7, r2, #29
 800a17a:	d50f      	bpl.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a17c:	4baa      	ldr	r3, [pc, #680]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a180:	f003 0303 	and.w	r3, r3, #3
 800a184:	2b03      	cmp	r3, #3
 800a186:	f000 816f 	beq.w	800a468 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800a18a:	2102      	movs	r1, #2
 800a18c:	f104 0008 	add.w	r0, r4, #8
 800a190:	f7ff fba8 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a194:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a196:	2800      	cmp	r0, #0
 800a198:	f040 81e5 	bne.w	800a566 <HAL_RCCEx_PeriphCLKConfig+0xaba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a19c:	0716      	lsls	r6, r2, #28
 800a19e:	d50f      	bpl.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1a0:	4ba1      	ldr	r3, [pc, #644]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	f003 0303 	and.w	r3, r3, #3
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	f000 8167 	beq.w	800a47c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a1b4:	f7ff fc08 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1b8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f040 81d7 	bne.w	800a56e <HAL_RCCEx_PeriphCLKConfig+0xac2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1c0:	06d0      	lsls	r0, r2, #27
 800a1c2:	d54a      	bpl.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1c4:	4b98      	ldr	r3, [pc, #608]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1c6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1cc:	f003 0303 	and.w	r3, r3, #3
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	f000 814f 	beq.w	800a474 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f7ff fbf5 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d03a      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a1e2:	6863      	ldr	r3, [r4, #4]
 800a1e4:	069a      	lsls	r2, r3, #26
 800a1e6:	f140 80e5 	bpl.w	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	e039      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a1ee:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800a1f2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a1f6:	f43f ae7c 	beq.w	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800a1fa:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800a1fe:	f43f ae78 	beq.w	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800a202:	2601      	movs	r6, #1
 800a204:	4635      	mov	r5, r6
 800a206:	e67f      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a208:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 800a20c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a210:	f43f ae98 	beq.w	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a214:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 800a218:	f43f ae94 	beq.w	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a21c:	2601      	movs	r6, #1
 800a21e:	4635      	mov	r5, r6
 800a220:	e69b      	b.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a222:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800a226:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a22a:	f43f aeb4 	beq.w	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800a22e:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800a232:	f43f aeb0 	beq.w	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800a236:	2601      	movs	r6, #1
 800a238:	4635      	mov	r5, r6
 800a23a:	e6b7      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->RngClockSelection)
 800a23c:	2900      	cmp	r1, #0
 800a23e:	f47f af39 	bne.w	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    if (ret == HAL_OK)
 800a242:	2d00      	cmp	r5, #0
 800a244:	f47f af37 	bne.w	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a248:	4d77      	ldr	r5, [pc, #476]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a24a:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800a24c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800a250:	4301      	orrs	r1, r0
 800a252:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 800a254:	4635      	mov	r5, r6
 800a256:	e72e      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a258:	6862      	ldr	r2, [r4, #4]
 800a25a:	0693      	lsls	r3, r2, #26
 800a25c:	d50f      	bpl.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a25e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a262:	4b71      	ldr	r3, [pc, #452]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a266:	f003 0303 	and.w	r3, r3, #3
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	f000 80a2 	beq.w	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a270:	2102      	movs	r1, #2
 800a272:	4630      	mov	r0, r6
 800a274:	f7ff fba8 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800a278:	2800      	cmp	r0, #0
 800a27a:	f040 809b 	bne.w	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x908>
  if (status == HAL_OK)
 800a27e:	1e28      	subs	r0, r5, #0
 800a280:	bf18      	it	ne
 800a282:	2001      	movne	r0, #1
}
 800a284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a288:	4867      	ldr	r0, [pc, #412]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a28a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a28c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a290:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a292:	2d00      	cmp	r5, #0
 800a294:	f040 815a 	bne.w	800a54c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a298:	4f63      	ldr	r7, [pc, #396]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a29a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800a29c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a29e:	f021 0103 	bic.w	r1, r1, #3
 800a2a2:	4301      	orrs	r1, r0
 800a2a4:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2a6:	0259      	lsls	r1, r3, #9
 800a2a8:	f57f ad80 	bpl.w	8009dac <HAL_RCCEx_PeriphCLKConfig+0x300>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2ac:	4f5f      	ldr	r7, [pc, #380]	@ (800a42c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2b4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a2b6:	f7f9 f96f 	bl	8003598 <HAL_GetTick>
 800a2ba:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2bc:	e006      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2be:	f7f9 f96b 	bl	8003598 <HAL_GetTick>
 800a2c2:	eba0 0008 	sub.w	r0, r0, r8
 800a2c6:	2864      	cmp	r0, #100	@ 0x64
 800a2c8:	f200 82bb 	bhi.w	800a842 <HAL_RCCEx_PeriphCLKConfig+0xd96>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	05da      	lsls	r2, r3, #23
 800a2d0:	d5f5      	bpl.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (ret == HAL_OK)
 800a2d2:	2d00      	cmp	r5, #0
 800a2d4:	f040 82b6 	bne.w	800a844 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a2d8:	4a53      	ldr	r2, [pc, #332]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a2da:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800a2de:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a2e0:	4059      	eors	r1, r3
 800a2e2:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800a2e6:	d00b      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x854>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2e8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2ea:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2ec:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2f0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800a2f4:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2f6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800a2f8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800a2fc:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a2fe:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a304:	f000 82c2 	beq.w	800a88c <HAL_RCCEx_PeriphCLKConfig+0xde0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a308:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a30c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a310:	f000 82d0 	beq.w	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800a314:	4944      	ldr	r1, [pc, #272]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a316:	690a      	ldr	r2, [r1, #16]
 800a318:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a31c:	610a      	str	r2, [r1, #16]
 800a31e:	4842      	ldr	r0, [pc, #264]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a320:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800a324:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800a326:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a328:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a32c:	6701      	str	r1, [r0, #112]	@ 0x70
 800a32e:	e53d      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a330:	2601      	movs	r6, #1
 800a332:	4635      	mov	r5, r6
 800a334:	e69c      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a336:	483c      	ldr	r0, [pc, #240]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a338:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a33a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a33e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a340:	2d00      	cmp	r5, #0
 800a342:	f040 80fe 	bne.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0xa96>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a346:	4f38      	ldr	r7, [pc, #224]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a348:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800a34c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a34e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800a352:	4301      	orrs	r1, r0
 800a354:	6579      	str	r1, [r7, #84]	@ 0x54
 800a356:	e668      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a358:	4833      	ldr	r0, [pc, #204]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a35a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a35c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a360:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a362:	2d00      	cmp	r5, #0
 800a364:	f040 80ea 	bne.w	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa90>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a368:	4f2f      	ldr	r7, [pc, #188]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a36a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800a36c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a36e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800a372:	4301      	orrs	r1, r0
 800a374:	6539      	str	r1, [r7, #80]	@ 0x50
 800a376:	e4b7      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a378:	492b      	ldr	r1, [pc, #172]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a37a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a37c:	f001 0103 	and.w	r1, r1, #3
 800a380:	2903      	cmp	r1, #3
 800a382:	f43f ae3e 	beq.w	800a002 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a386:	2102      	movs	r1, #2
 800a388:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a38c:	f7ff fb1c 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a390:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a392:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a396:	2d00      	cmp	r5, #0
 800a398:	f040 80ed 	bne.w	800a576 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a39c:	4f22      	ldr	r7, [pc, #136]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a39e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800a3a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a3a4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 800a3a8:	4301      	orrs	r1, r0
 800a3aa:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a3ac:	e62b      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800a3ae:	2601      	movs	r6, #1
 800a3b0:	f7ff bbac 	b.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x60>
  return HAL_ERROR;
 800a3b4:	2001      	movs	r0, #1
}
 800a3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3ba:	491b      	ldr	r1, [pc, #108]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a3bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a3be:	f001 0103 	and.w	r1, r1, #3
 800a3c2:	2903      	cmp	r1, #3
 800a3c4:	f43f ad2e 	beq.w	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	f104 0008 	add.w	r0, r4, #8
 800a3ce:	f7ff fa89 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 800a3d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a3d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	f040 80ea 	bne.w	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a3de:	4f12      	ldr	r7, [pc, #72]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a3e0:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800a3e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3e6:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800a3ea:	4301      	orrs	r1, r0
 800a3ec:	6579      	str	r1, [r7, #84]	@ 0x54
 800a3ee:	e51b      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3f0:	4d0d      	ldr	r5, [pc, #52]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a3f2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800a3f4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800a3f8:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a3fa:	f7ff bb80 	b.w	8009afe <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3fe:	480a      	ldr	r0, [pc, #40]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a400:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a402:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a406:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a408:	2d00      	cmp	r5, #0
 800a40a:	f040 80a4 	bne.w	800a556 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a40e:	f7ff bbab 	b.w	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a412:	4805      	ldr	r0, [pc, #20]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800a414:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a416:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a41a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	f040 809d 	bne.w	800a55c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a422:	f7ff bbca 	b.w	8009bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800a426:	bf00      	nop
 800a428:	58024400 	.word	0x58024400
 800a42c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a430:	48c0      	ldr	r0, [pc, #768]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a432:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a434:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a438:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	f040 8088 	bne.w	800a550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a440:	f7ff bbff 	b.w	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a444:	48bb      	ldr	r0, [pc, #748]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a446:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a448:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a44c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800a44e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800a450:	2d00      	cmp	r5, #0
 800a452:	f040 8197 	bne.w	800a784 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a456:	4fb7      	ldr	r7, [pc, #732]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a45a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a45c:	f021 0107 	bic.w	r1, r1, #7
 800a460:	4301      	orrs	r1, r0
 800a462:	6539      	str	r1, [r7, #80]	@ 0x50
 800a464:	f7ff bb60 	b.w	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    return HAL_ERROR;
 800a468:	2501      	movs	r5, #1
 800a46a:	e697      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800a46c:	2501      	movs	r5, #1
 800a46e:	e671      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800a470:	2501      	movs	r5, #1
 800a472:	e681      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a474:	0691      	lsls	r1, r2, #26
 800a476:	d59d      	bpl.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x908>
    return HAL_ERROR;
 800a478:	2501      	movs	r5, #1
 800a47a:	e6f2      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 800a47c:	2501      	movs	r5, #1
 800a47e:	e69f      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a480:	49ac      	ldr	r1, [pc, #688]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a482:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a484:	f001 0103 	and.w	r1, r1, #3
 800a488:	2903      	cmp	r1, #3
 800a48a:	f000 81e8 	beq.w	800a85e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 800a48e:	2102      	movs	r1, #2
 800a490:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a494:	f7ff fa98 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a498:	2800      	cmp	r0, #0
 800a49a:	f040 81ec 	bne.w	800a876 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a49e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a4a6:	e589      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x510>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4a8:	49a2      	ldr	r1, [pc, #648]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a4aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a4ac:	f001 0103 	and.w	r1, r1, #3
 800a4b0:	2903      	cmp	r1, #3
 800a4b2:	f000 81d7 	beq.w	800a864 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 800a4b6:	2102      	movs	r1, #2
 800a4b8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a4bc:	f7ff fa84 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f000 81d2 	beq.w	800a86a <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a4c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
        status = HAL_ERROR;
 800a4ca:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a4d0:	e582      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4d2:	4898      	ldr	r0, [pc, #608]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a4d4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800a4d6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800a4da:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	f43f adc0 	beq.w	800a062 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800a4e2:	462e      	mov	r6, r5
 800a4e4:	e5c4      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e6:	4f93      	ldr	r7, [pc, #588]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a4e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a4ea:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800a4ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	f47f ade0 	bne.w	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800a4f6:	e6a7      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4f8:	488e      	ldr	r0, [pc, #568]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a4fa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a4fc:	f000 0003 	and.w	r0, r0, #3
 800a500:	2803      	cmp	r0, #3
 800a502:	f43f ad7e 	beq.w	800a002 <HAL_RCCEx_PeriphCLKConfig+0x556>
 800a506:	f104 0008 	add.w	r0, r4, #8
 800a50a:	f7ff f9eb 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 800a50e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a510:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a514:	bb7d      	cbnz	r5, 800a576 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800a516:	e741      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a518:	4986      	ldr	r1, [pc, #536]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a51a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a51c:	f001 0103 	and.w	r1, r1, #3
 800a520:	2903      	cmp	r1, #3
 800a522:	f43f ac3c 	beq.w	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 800a526:	2101      	movs	r1, #1
 800a528:	f104 0008 	add.w	r0, r4, #8
 800a52c:	f7ff f9da 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 800a530:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a532:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a536:	2d00      	cmp	r5, #0
 800a538:	f43f af16 	beq.w	800a368 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a53c:	462e      	mov	r6, r5
 800a53e:	f7ff bbd3 	b.w	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800a542:	462e      	mov	r6, r5
 800a544:	e571      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800a546:	462e      	mov	r6, r5
 800a548:	f7ff bb59 	b.w	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a54c:	462e      	mov	r6, r5
 800a54e:	e42a      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800a550:	462e      	mov	r6, r5
 800a552:	f7ff bb7d 	b.w	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a556:	462e      	mov	r6, r5
 800a558:	f7ff bb0d 	b.w	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800a55c:	462e      	mov	r6, r5
 800a55e:	f7ff bb33 	b.w	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a562:	4605      	mov	r5, r0
 800a564:	e608      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a566:	4605      	mov	r5, r0
 800a568:	e618      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a56a:	4605      	mov	r5, r0
 800a56c:	e5f2      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a56e:	4605      	mov	r5, r0
 800a570:	e626      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800a572:	462e      	mov	r6, r5
 800a574:	e4f1      	b.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a576:	462e      	mov	r6, r5
 800a578:	e545      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800a57a:	462e      	mov	r6, r5
 800a57c:	e516      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x500>
 800a57e:	462e      	mov	r6, r5
 800a580:	f7ff bb8a 	b.w	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a584:	4f6b      	ldr	r7, [pc, #428]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a586:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800a58a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a58c:	f021 0107 	bic.w	r1, r1, #7
 800a590:	4301      	orrs	r1, r0
 800a592:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a594:	e48f      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a596:	462e      	mov	r6, r5
 800a598:	e4b6      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800a59a:	462e      	mov	r6, r5
 800a59c:	f7ff bbf1 	b.w	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a5a0:	4f64      	ldr	r7, [pc, #400]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a5a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800a5a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5a8:	f021 0107 	bic.w	r1, r1, #7
 800a5ac:	4301      	orrs	r1, r0
 800a5ae:	6579      	str	r1, [r7, #84]	@ 0x54
 800a5b0:	e45c      	b.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a5b2:	462e      	mov	r6, r5
 800a5b4:	e438      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5b6:	495f      	ldr	r1, [pc, #380]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a5b8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a5ba:	f001 0103 	and.w	r1, r1, #3
 800a5be:	2903      	cmp	r1, #3
 800a5c0:	f43f ae1f 	beq.w	800a202 <HAL_RCCEx_PeriphCLKConfig+0x756>
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a5ca:	f7ff f9fd 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a5ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a5d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a5d4:	2d00      	cmp	r5, #0
 800a5d6:	d1de      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800a5d8:	e48e      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5da:	4956      	ldr	r1, [pc, #344]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a5dc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a5de:	f001 0103 	and.w	r1, r1, #3
 800a5e2:	2903      	cmp	r1, #3
 800a5e4:	f43f ae27 	beq.w	800a236 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800a5e8:	2102      	movs	r1, #2
 800a5ea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a5ee:	f7ff f9eb 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a5f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a5f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	d1be      	bne.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xace>
 800a5fc:	e4ce      	b.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5fe:	494d      	ldr	r1, [pc, #308]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a600:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a602:	f001 0103 	and.w	r1, r1, #3
 800a606:	2903      	cmp	r1, #3
 800a608:	f43f ae08 	beq.w	800a21c <HAL_RCCEx_PeriphCLKConfig+0x770>
 800a60c:	2102      	movs	r1, #2
 800a60e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a612:	f7ff f9d9 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a616:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a618:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	d1a8      	bne.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 800a620:	e493      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x49e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a622:	4944      	ldr	r1, [pc, #272]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a624:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a626:	f001 0103 	and.w	r1, r1, #3
 800a62a:	2903      	cmp	r1, #3
 800a62c:	f43f ab84 	beq.w	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800a630:	2102      	movs	r1, #2
 800a632:	f104 0008 	add.w	r0, r4, #8
 800a636:	f7ff f955 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 800a63a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a63c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a640:	2d00      	cmp	r5, #0
 800a642:	d180      	bne.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800a644:	f7ff bad4 	b.w	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a648:	493a      	ldr	r1, [pc, #232]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a64a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a64c:	f001 0103 	and.w	r1, r1, #3
 800a650:	2903      	cmp	r1, #3
 800a652:	f43f ab94 	beq.w	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a656:	2101      	movs	r1, #1
 800a658:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a65c:	f7ff f9b4 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a660:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a662:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a666:	2d00      	cmp	r5, #0
 800a668:	d197      	bne.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800a66a:	f7ff bb33 	b.w	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a66e:	4931      	ldr	r1, [pc, #196]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a670:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a672:	f001 0103 	and.w	r1, r1, #3
 800a676:	2903      	cmp	r1, #3
 800a678:	f43f acd5 	beq.w	800a026 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800a67c:	2101      	movs	r1, #1
 800a67e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a682:	f7ff f9a1 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a686:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a688:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a68c:	2d00      	cmp	r5, #0
 800a68e:	f47f af58 	bne.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800a692:	e658      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x89a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a694:	4927      	ldr	r1, [pc, #156]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a696:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a698:	f001 0103 	and.w	r1, r1, #3
 800a69c:	2903      	cmp	r1, #3
 800a69e:	f000 80f1 	beq.w	800a884 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 800a6a2:	2102      	movs	r1, #2
 800a6a4:	f104 0008 	add.w	r0, r4, #8
 800a6a8:	f7ff f91c 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 800a6ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a6ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a6b2:	2d00      	cmp	r5, #0
 800a6b4:	f47f af4a 	bne.w	800a54c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800a6b8:	e5ee      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6ba:	491e      	ldr	r1, [pc, #120]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a6bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a6be:	f001 0103 	and.w	r1, r1, #3
 800a6c2:	2903      	cmp	r1, #3
 800a6c4:	f43f ab4e 	beq.w	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a6ce:	f7ff f97b 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a6d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a6d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a6d8:	2d00      	cmp	r5, #0
 800a6da:	f47f af50 	bne.w	800a57e <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800a6de:	f7ff bad4 	b.w	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6e2:	4914      	ldr	r1, [pc, #80]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a6e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a6e6:	f001 0103 	and.w	r1, r1, #3
 800a6ea:	2903      	cmp	r1, #3
 800a6ec:	f43f ab11 	beq.w	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a6f6:	f7ff f967 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a6fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a6fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a700:	2d00      	cmp	r5, #0
 800a702:	f47f af28 	bne.w	800a556 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a706:	f7ff ba2f 	b.w	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a70a:	490a      	ldr	r1, [pc, #40]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800a70c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a70e:	f001 0103 	and.w	r1, r1, #3
 800a712:	2903      	cmp	r1, #3
 800a714:	f43f ab1b 	beq.w	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800a718:	2100      	movs	r1, #0
 800a71a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a71e:	f7ff f953 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a722:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a724:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a728:	2d00      	cmp	r5, #0
 800a72a:	f47f af11 	bne.w	800a550 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a72e:	f7ff ba88 	b.w	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a732:	bf00      	nop
 800a734:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a738:	4966      	ldr	r1, [pc, #408]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a73a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a73c:	f001 0103 	and.w	r1, r1, #3
 800a740:	2903      	cmp	r1, #3
 800a742:	f43f aaf3 	beq.w	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800a746:	2100      	movs	r1, #0
 800a748:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a74c:	f7ff f93c 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a750:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a752:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a756:	2d00      	cmp	r5, #0
 800a758:	f47f af00 	bne.w	800a55c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800a75c:	f7ff ba2d 	b.w	8009bba <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a760:	495c      	ldr	r1, [pc, #368]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a762:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a764:	f001 0103 	and.w	r1, r1, #3
 800a768:	2903      	cmp	r1, #3
 800a76a:	f43f a9db 	beq.w	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a76e:	2100      	movs	r1, #0
 800a770:	f104 0008 	add.w	r0, r4, #8
 800a774:	f7ff f8b6 	bl	80098e4 <RCCEx_PLL2_Config.part.0>
 800a778:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a77a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a77e:	2d00      	cmp	r5, #0
 800a780:	f43f ae69 	beq.w	800a456 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800a784:	462e      	mov	r6, r5
 800a786:	f7ff b9cf 	b.w	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a78a:	4952      	ldr	r1, [pc, #328]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a78c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a78e:	f001 0103 	and.w	r1, r1, #3
 800a792:	2903      	cmp	r1, #3
 800a794:	f43f a9c6 	beq.w	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a798:	2100      	movs	r1, #0
 800a79a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a79e:	f7ff f913 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a7a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a7a4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800a7a8:	e652      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a7aa:	494a      	ldr	r1, [pc, #296]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a7ac:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a7ae:	f001 0103 	and.w	r1, r1, #3
 800a7b2:	2903      	cmp	r1, #3
 800a7b4:	f43f adfb 	beq.w	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x902>
 800a7b8:	2102      	movs	r1, #2
 800a7ba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a7be:	f7ff f903 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a7c2:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a7c8:	2e00      	cmp	r6, #0
 800a7ca:	f47f a99f 	bne.w	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a7ce:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800a7d0:	f7ff b995 	b.w	8009afe <HAL_RCCEx_PeriphCLKConfig+0x52>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a7d4:	493f      	ldr	r1, [pc, #252]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a7d6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a7d8:	f001 0103 	and.w	r1, r1, #3
 800a7dc:	2903      	cmp	r1, #3
 800a7de:	d03a      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a7e6:	f7ff f8ef 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a7ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a7f0:	2d00      	cmp	r5, #0
 800a7f2:	f47f ab5f 	bne.w	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a7f6:	e6c5      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a7f8:	4936      	ldr	r1, [pc, #216]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a7fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a7fc:	f001 0103 	and.w	r1, r1, #3
 800a800:	2903      	cmp	r1, #3
 800a802:	d024      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800a804:	2101      	movs	r1, #1
 800a806:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a80a:	f7ff f8dd 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a80e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a810:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a814:	2d00      	cmp	r5, #0
 800a816:	f47f ab28 	bne.w	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x3be>
 800a81a:	e6c1      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a81c:	492d      	ldr	r1, [pc, #180]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a81e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800a820:	f001 0103 	and.w	r1, r1, #3
 800a824:	2903      	cmp	r1, #3
 800a826:	f43f aafd 	beq.w	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a82a:	2101      	movs	r1, #1
 800a82c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a830:	f7ff f8ca 	bl	80099c8 <RCCEx_PLL3_Config.part.0>
 800a834:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a836:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	f47f aeb9 	bne.w	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
 800a840:	e5cd      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = HAL_TIMEOUT;
 800a842:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a844:	462e      	mov	r6, r5
 800a846:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a84a:	f7ff baaf 	b.w	8009dac <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a84e:	2601      	movs	r6, #1
 800a850:	4635      	mov	r5, r6
 800a852:	f7ff bb0b 	b.w	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a856:	2601      	movs	r6, #1
 800a858:	4635      	mov	r5, r6
 800a85a:	f7ff bb2c 	b.w	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
        status = HAL_ERROR;
 800a85e:	2601      	movs	r6, #1
 800a860:	f7ff bbac 	b.w	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x510>
        status = HAL_ERROR;
 800a864:	2601      	movs	r6, #1
 800a866:	f7ff bbb7 	b.w	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a86a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a86e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a872:	f7ff bbb1 	b.w	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a876:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
        status = HAL_ERROR;
 800a87a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a87c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a880:	f7ff bb9c 	b.w	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a884:	2601      	movs	r6, #1
 800a886:	4635      	mov	r5, r6
 800a888:	f7ff ba8d 	b.w	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        tickstart = HAL_GetTick();
 800a88c:	f7f8 fe84 	bl	8003598 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a890:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        tickstart = HAL_GetTick();
 800a894:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a896:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a89a:	e004      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a89c:	f7f8 fe7c 	bl	8003598 <HAL_GetTick>
 800a8a0:	1bc0      	subs	r0, r0, r7
 800a8a2:	4548      	cmp	r0, r9
 800a8a4:	d810      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8a6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a8aa:	079b      	lsls	r3, r3, #30
 800a8ac:	d5f6      	bpl.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xdf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800a8b2:	e529      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800a8b4:	4807      	ldr	r0, [pc, #28]	@ (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800a8b6:	4a08      	ldr	r2, [pc, #32]	@ (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xe2c>)
 800a8b8:	6901      	ldr	r1, [r0, #16]
 800a8ba:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a8be:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	6102      	str	r2, [r0, #16]
 800a8c6:	e52a      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x872>
        status = ret;
 800a8c8:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a8ca:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a8ce:	4635      	mov	r5, r6
 800a8d0:	f7ff ba6c 	b.w	8009dac <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	00ffffcf 	.word	0x00ffffcf

0800a8dc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8dc:	4a47      	ldr	r2, [pc, #284]	@ (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800a8de:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8e0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8e2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8e4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800a8e6:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8ea:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8ee:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 800a8f0:	d05b      	beq.n	800a9aa <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8f2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8f6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8fa:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8fe:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a902:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800a906:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a90c:	ee06 1a90 	vmov	s13, r1
 800a910:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800a914:	d003      	beq.n	800a91e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800a916:	2c02      	cmp	r4, #2
 800a918:	d06a      	beq.n	800a9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800a91a:	2c00      	cmp	r4, #0
 800a91c:	d04a      	beq.n	800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a91e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800aa00 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800a922:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a926:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92c:	ee07 3a90 	vmov	s15, r3
 800a930:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a93c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a940:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a944:	4a2d      	ldr	r2, [pc, #180]	@ (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 800a946:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a94a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a94c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a950:	ee07 3a10 	vmov	s14, r3
 800a954:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800a958:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a95a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a95e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a962:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a966:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a96a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a96c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a970:	ee07 3a10 	vmov	s14, r3
 800a974:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a978:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a97c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a980:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a984:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a988:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a98a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a98e:	ee06 3a90 	vmov	s13, r3
 800a992:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a996:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a99a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a99e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a9a2:	ee17 3a90 	vmov	r3, s15
 800a9a6:	6083      	str	r3, [r0, #8]
}
 800a9a8:	4770      	bx	lr
 800a9aa:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9ac:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a9b0:	6083      	str	r3, [r0, #8]
}
 800a9b2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9b4:	6813      	ldr	r3, [r2, #0]
 800a9b6:	069b      	lsls	r3, r3, #26
 800a9b8:	d51d      	bpl.n	800a9f6 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9ba:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800a9c0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9c2:	4910      	ldr	r1, [pc, #64]	@ (800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800a9c4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9cc:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9ce:	ee07 3a90 	vmov	s15, r3
 800a9d2:	ee06 1a10 	vmov	s12, r1
 800a9d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9da:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a9de:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a9e2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800a9e6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800a9ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9ee:	e7a9      	b.n	800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9f0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800aa08 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800a9f4:	e795      	b.n	800a922 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9f6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800a9fa:	e792      	b.n	800a922 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800a9fc:	58024400 	.word	0x58024400
 800aa00:	4a742400 	.word	0x4a742400
 800aa04:	03d09000 	.word	0x03d09000
 800aa08:	4bbebc20 	.word	0x4bbebc20
 800aa0c:	4c742400 	.word	0x4c742400

0800aa10 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa10:	4a47      	ldr	r2, [pc, #284]	@ (800ab30 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800aa12:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa14:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aa16:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa18:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800aa1a:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aa1e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aa22:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 800aa24:	d05b      	beq.n	800aade <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aa26:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa2a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa2e:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa32:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aa36:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800aa3a:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa40:	ee06 1a90 	vmov	s13, r1
 800aa44:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800aa48:	d003      	beq.n	800aa52 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800aa4a:	2c02      	cmp	r4, #2
 800aa4c:	d06a      	beq.n	800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800aa4e:	2c00      	cmp	r4, #0
 800aa50:	d04a      	beq.n	800aae8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa52:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800aa56:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800aa5a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800aa5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa60:	ee07 3a90 	vmov	s15, r3
 800aa64:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800aa68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa70:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aa74:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aa78:	4a2d      	ldr	r2, [pc, #180]	@ (800ab30 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 800aa7a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800aa7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800aa80:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800aa84:	ee07 3a10 	vmov	s14, r3
 800aa88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800aa8c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aa8e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aa92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aa96:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800aa9a:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aa9e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800aaa0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800aaa4:	ee07 3a10 	vmov	s14, r3
 800aaa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aaac:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aab0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800aab4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800aab8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aabc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800aabe:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800aac2:	ee06 3a90 	vmov	s13, r3
 800aac6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800aaca:	ee76 6a86 	vadd.f32	s13, s13, s12
 800aace:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800aad2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800aad6:	ee17 3a90 	vmov	r3, s15
 800aada:	6083      	str	r3, [r0, #8]
}
 800aadc:	4770      	bx	lr
 800aade:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aae0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aae4:	6083      	str	r3, [r0, #8]
}
 800aae6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aae8:	6813      	ldr	r3, [r2, #0]
 800aaea:	069b      	lsls	r3, r3, #26
 800aaec:	d51d      	bpl.n	800ab2a <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaee:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aaf0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800aaf4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaf6:	4910      	ldr	r1, [pc, #64]	@ (800ab38 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800aaf8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab00:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	ee06 1a10 	vmov	s12, r1
 800ab0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab0e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800ab12:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800ab16:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800ab1a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800ab1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab22:	e7a9      	b.n	800aa78 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab24:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ab3c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800ab28:	e795      	b.n	800aa56 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab2a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800ab2e:	e792      	b.n	800aa56 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800ab30:	58024400 	.word	0x58024400
 800ab34:	4a742400 	.word	0x4a742400
 800ab38:	03d09000 	.word	0x03d09000
 800ab3c:	4bbebc20 	.word	0x4bbebc20
 800ab40:	4c742400 	.word	0x4c742400

0800ab44 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab44:	4a47      	ldr	r2, [pc, #284]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 800ab46:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab48:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ab4a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab4c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 800ab4e:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ab52:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab56:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 800ab58:	d05b      	beq.n	800ac12 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab5a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab5e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab62:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab66:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab6a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800ab6e:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab74:	ee06 1a90 	vmov	s13, r1
 800ab78:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800ab7c:	d06f      	beq.n	800ac5e <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 800ab7e:	2c02      	cmp	r4, #2
 800ab80:	d06a      	beq.n	800ac58 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	d04a      	beq.n	800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab86:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800ac68 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800ab8a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800ab8e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ab90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab94:	ee07 3a90 	vmov	s15, r3
 800ab98:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800ab9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aba8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800abac:	4a2d      	ldr	r2, [pc, #180]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 800abae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800abb2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800abb4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800abb8:	ee07 3a10 	vmov	s14, r3
 800abbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800abc0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800abc2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800abc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800abca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800abce:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800abd2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800abd4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800abd8:	ee07 3a10 	vmov	s14, r3
 800abdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800abe0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800abe4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800abe8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800abec:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800abf0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800abf2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800abf6:	ee06 3a90 	vmov	s13, r3
 800abfa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800abfe:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ac02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac06:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800ac0a:	ee17 3a90 	vmov	r3, s15
 800ac0e:	6083      	str	r3, [r0, #8]
}
 800ac10:	4770      	bx	lr
 800ac12:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac14:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ac18:	6083      	str	r3, [r0, #8]
}
 800ac1a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac1c:	6813      	ldr	r3, [r2, #0]
 800ac1e:	069b      	lsls	r3, r3, #26
 800ac20:	d5b1      	bpl.n	800ab86 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac22:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac24:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800ac28:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac2a:	4910      	ldr	r1, [pc, #64]	@ (800ac6c <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 800ac2c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac34:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac36:	ee07 3a90 	vmov	s15, r3
 800ac3a:	ee06 1a10 	vmov	s12, r1
 800ac3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac42:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800ac46:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800ac4a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800ac4e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800ac52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac56:	e7a9      	b.n	800abac <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac58:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 800ac5c:	e795      	b.n	800ab8a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac5e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800ac74 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800ac62:	e792      	b.n	800ab8a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800ac64:	58024400 	.word	0x58024400
 800ac68:	4c742400 	.word	0x4c742400
 800ac6c:	03d09000 	.word	0x03d09000
 800ac70:	4bbebc20 	.word	0x4bbebc20
 800ac74:	4a742400 	.word	0x4a742400

0800ac78 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac78:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800ac7c:	430b      	orrs	r3, r1
{
 800ac7e:	b500      	push	{lr}
 800ac80:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac82:	d071      	beq.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800ac84:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	d033      	beq.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800ac8c:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800ac90:	430b      	orrs	r3, r1
 800ac92:	f000 80c6 	beq.w	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac96:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800ac9a:	430b      	orrs	r3, r1
 800ac9c:	d078      	beq.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac9e:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800aca2:	430b      	orrs	r3, r1
 800aca4:	f000 80d3 	beq.w	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aca8:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800acac:	430b      	orrs	r3, r1
 800acae:	f000 812c 	beq.w	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800acb2:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800acb6:	430b      	orrs	r3, r1
 800acb8:	f000 8140 	beq.w	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acbc:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800acc0:	430b      	orrs	r3, r1
 800acc2:	f000 8103 	beq.w	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800acc6:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800acca:	4308      	orrs	r0, r1
 800accc:	d137      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800acce:	4b96      	ldr	r3, [pc, #600]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800acd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 800acd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acda:	d07f      	beq.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 800acdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ace0:	f000 8167 	beq.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800ace4:	bb5b      	cbnz	r3, 800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ace6:	4b90      	ldr	r3, [pc, #576]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800acee:	d038      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = HSE_VALUE;
 800acf0:	488e      	ldr	r0, [pc, #568]	@ (800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800acf2:	e036      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800acf4:	4a8c      	ldr	r2, [pc, #560]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800acf6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800acf8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 800acfc:	2b80      	cmp	r3, #128	@ 0x80
 800acfe:	f000 808b 	beq.w	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800ad02:	d920      	bls.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 800ad04:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad06:	d02b      	beq.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ad08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad0c:	d117      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad0e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad10:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad16:	0749      	lsls	r1, r1, #29
 800ad18:	d502      	bpl.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 80c9 	beq.w	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad20:	4a81      	ldr	r2, [pc, #516]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad22:	6812      	ldr	r2, [r2, #0]
 800ad24:	05d0      	lsls	r0, r2, #23
 800ad26:	d503      	bpl.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800ad28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad2c:	f000 80cc 	beq.w	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad30:	4a7d      	ldr	r2, [pc, #500]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad32:	6812      	ldr	r2, [r2, #0]
 800ad34:	0391      	lsls	r1, r2, #14
 800ad36:	d502      	bpl.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800ad38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad3c:	d0d8      	beq.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800ad3e:	2000      	movs	r0, #0
}
 800ad40:	b005      	add	sp, #20
 800ad42:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d03f      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800ad4a:	2b40      	cmp	r3, #64	@ 0x40
 800ad4c:	d1f7      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad4e:	6810      	ldr	r0, [r2, #0]
 800ad50:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ad54:	d005      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad56:	a801      	add	r0, sp, #4
 800ad58:	f7ff fdc0 	bl	800a8dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad5c:	9801      	ldr	r0, [sp, #4]
 800ad5e:	e000      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad60:	4873      	ldr	r0, [pc, #460]	@ (800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
}
 800ad62:	b005      	add	sp, #20
 800ad64:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ad68:	4b6f      	ldr	r3, [pc, #444]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad6c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800ad70:	2b04      	cmp	r3, #4
 800ad72:	d8e4      	bhi.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800ad74:	a201      	add	r2, pc, #4	@ (adr r2, 800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 800ad76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7a:	bf00      	nop
 800ad7c:	0800addd 	.word	0x0800addd
 800ad80:	0800ade9 	.word	0x0800ade9
 800ad84:	0800adf9 	.word	0x0800adf9
 800ad88:	0800ad61 	.word	0x0800ad61
 800ad8c:	0800adf5 	.word	0x0800adf5
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ad90:	4a65      	ldr	r2, [pc, #404]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ad92:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ad94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 800ad98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad9c:	d03c      	beq.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800ad9e:	d935      	bls.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800ada0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ada4:	d0dc      	beq.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ada6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800adaa:	d1c8      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adac:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adae:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adb4:	0752      	lsls	r2, r2, #29
 800adb6:	d5b3      	bpl.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1b1      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adbc:	4b5a      	ldr	r3, [pc, #360]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800adbe:	485d      	ldr	r0, [pc, #372]	@ (800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800adc6:	40d8      	lsrs	r0, r3
 800adc8:	e7cb      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adca:	6810      	ldr	r0, [r2, #0]
 800adcc:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800add0:	d0c7      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800add2:	a801      	add	r0, sp, #4
 800add4:	f7ff feb6 	bl	800ab44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800add8:	9802      	ldr	r0, [sp, #8]
 800adda:	e7c2      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800addc:	4b52      	ldr	r3, [pc, #328]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800adde:	6818      	ldr	r0, [r3, #0]
 800ade0:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ade4:	d0bd      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800ade6:	e7f4      	b.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ade8:	4b4f      	ldr	r3, [pc, #316]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800adea:	6818      	ldr	r0, [r3, #0]
 800adec:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800adf0:	d0b7      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800adf2:	e7b0      	b.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800adf4:	4a4c      	ldr	r2, [pc, #304]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800adf6:	e78a      	b.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adf8:	4b4b      	ldr	r3, [pc, #300]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800adfa:	6818      	ldr	r0, [r3, #0]
 800adfc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800ae00:	d0af      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae02:	a801      	add	r0, sp, #4
 800ae04:	f7ff fe04 	bl	800aa10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae08:	9801      	ldr	r0, [sp, #4]
 800ae0a:	e7aa      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0dc      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800ae10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae14:	d09b      	beq.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800ae16:	e792      	b.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae18:	6810      	ldr	r0, [r2, #0]
 800ae1a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800ae1e:	d0a0      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800ae20:	e7ef      	b.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800ae22:	4a41      	ldr	r2, [pc, #260]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ae24:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ae26:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
    switch (saiclocksource)
 800ae2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae2e:	d0f3      	beq.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800ae30:	d805      	bhi.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0c9      	beq.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800ae36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae3a:	d088      	beq.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800ae3c:	e77f      	b.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800ae3e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ae42:	d08d      	beq.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ae44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae48:	f43f af61 	beq.w	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800ae4c:	e777      	b.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ae4e:	4a36      	ldr	r2, [pc, #216]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800ae50:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ae52:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800ae56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae5a:	d025      	beq.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800ae5c:	d80f      	bhi.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800ae5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae62:	d048      	beq.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800ae64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae68:	d116      	bne.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae6a:	6810      	ldr	r0, [r2, #0]
 800ae6c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800ae70:	f43f af77 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae74:	a801      	add	r0, sp, #4
 800ae76:	f7ff fdcb 	bl	800aa10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae7a:	9802      	ldr	r0, [sp, #8]
 800ae7c:	e771      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800ae7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae82:	d01c      	beq.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800ae84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae88:	f47f af59 	bne.w	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae8c:	6810      	ldr	r0, [r2, #0]
 800ae8e:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800ae92:	f43f af66 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800ae96:	e72b      	b.n	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f47f af50 	bne.w	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
}
 800ae9e:	b005      	add	sp, #20
 800aea0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800aea4:	f7fe bcd6 	b.w	8009854 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aea8:	6810      	ldr	r0, [r2, #0]
 800aeaa:	f010 0004 	ands.w	r0, r0, #4
 800aeae:	f43f af58 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeb2:	6813      	ldr	r3, [r2, #0]
 800aeb4:	481f      	ldr	r0, [pc, #124]	@ (800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800aeb6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aeba:	40d8      	lsrs	r0, r3
 800aebc:	e751      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aebe:	6810      	ldr	r0, [r2, #0]
 800aec0:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800aec4:	f43f af4d 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = CSI_VALUE;
 800aec8:	481b      	ldr	r0, [pc, #108]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800aeca:	e74a      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aecc:	4a16      	ldr	r2, [pc, #88]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800aece:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aed0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800aed4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aed8:	d072      	beq.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 800aeda:	d83e      	bhi.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 800aedc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aee0:	d067      	beq.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800aee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aee6:	d14b      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aee8:	4b0f      	ldr	r3, [pc, #60]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800aeea:	6818      	ldr	r0, [r3, #0]
 800aeec:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800aef0:	f43f af37 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800aef4:	e7be      	b.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aef6:	6810      	ldr	r0, [r2, #0]
 800aef8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800aefc:	f43f af31 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af00:	a801      	add	r0, sp, #4
 800af02:	f7ff fceb 	bl	800a8dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af06:	9802      	ldr	r0, [sp, #8]
 800af08:	e72b      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800af0a:	4a07      	ldr	r2, [pc, #28]	@ (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800af0c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800af0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 800af12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af16:	d042      	beq.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800af18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af1c:	f43f af46 	beq.w	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800af20:	2b00      	cmp	r3, #0
 800af22:	f47f af0c 	bne.w	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800af26:	e712      	b.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800af28:	58024400 	.word	0x58024400
 800af2c:	017d7840 	.word	0x017d7840
 800af30:	00bb8000 	.word	0x00bb8000
 800af34:	03d09000 	.word	0x03d09000
 800af38:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af3c:	4b23      	ldr	r3, [pc, #140]	@ (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800af3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800af40:	03d2      	lsls	r2, r2, #15
 800af42:	f57f af4c 	bpl.w	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af46:	6818      	ldr	r0, [r3, #0]
 800af48:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800af4c:	f43f af09 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af50:	a801      	add	r0, sp, #4
 800af52:	f7ff fcc3 	bl	800a8dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af56:	9803      	ldr	r0, [sp, #12]
 800af58:	e703      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800af5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af5e:	f43f aec2 	beq.w	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800af62:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800af66:	f43f aefb 	beq.w	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800af6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af6e:	f47f aee6 	bne.w	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800af72:	4b16      	ldr	r3, [pc, #88]	@ (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800af7a:	f43f aef2 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800af7e:	e7a3      	b.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    switch (srcclk)
 800af80:	2b00      	cmp	r3, #0
 800af82:	f47f aedc 	bne.w	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800af86:	f7fe fc25 	bl	80097d4 <HAL_RCC_GetHCLKFreq>
 800af8a:	4b10      	ldr	r3, [pc, #64]	@ (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800af8c:	4a10      	ldr	r2, [pc, #64]	@ (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800af94:	5cd3      	ldrb	r3, [r2, r3]
 800af96:	f003 031f 	and.w	r3, r3, #31
 800af9a:	40d8      	lsrs	r0, r3
        break;
 800af9c:	e6e1      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af9e:	6810      	ldr	r0, [r2, #0]
 800afa0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800afa4:	f43f aedd 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afa8:	a801      	add	r0, sp, #4
 800afaa:	f7ff fd31 	bl	800aa10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800afae:	9803      	ldr	r0, [sp, #12]
 800afb0:	e6d7      	b.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afb2:	4b06      	ldr	r3, [pc, #24]	@ (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800afba:	f43f aed2 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800afbe:	e79f      	b.n	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afc0:	6810      	ldr	r0, [r2, #0]
 800afc2:	f010 0004 	ands.w	r0, r0, #4
 800afc6:	f43f aecc 	beq.w	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800afca:	e6f7      	b.n	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800afcc:	58024400 	.word	0x58024400
 800afd0:	08010568 	.word	0x08010568

0800afd4 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800afd4:	6803      	ldr	r3, [r0, #0]
{
 800afd6:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800afd8:	689c      	ldr	r4, [r3, #8]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800afda:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800afdc:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800afde:	f3c0 000e 	ubfx	r0, r0, #0, #15

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800afe2:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800afe6:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800afea:	f3c3 4506 	ubfx	r5, r3, #16, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800afee:	e9c1 4001 	strd	r4, r0, [r1, #4]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800aff2:	f3c3 4405 	ubfx	r4, r3, #16, #6
 800aff6:	2000      	movs	r0, #0
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800aff8:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800affc:	f364 0007 	bfi	r0, r4, #0, #8
 800b000:	f36e 200f 	bfi	r0, lr, #8, #8
 800b004:	f36c 4017 	bfi	r0, ip, #16, #8
 800b008:	f363 601f 	bfi	r0, r3, #24, #8
 800b00c:	6008      	str	r0, [r1, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b00e:	b9da      	cbnz	r2, 800b048 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b010:	ea4f 131e 	mov.w	r3, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 800b014:	f00e 0e0f 	and.w	lr, lr, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b018:	0924      	lsrs	r4, r4, #4
  return (tmp + (Value & 0x0FU));
 800b01a:	f005 050f 	and.w	r5, r5, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b01e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b022:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & 0x0FU));
 800b026:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b02a:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 800b02e:	f00c 0c0f 	and.w	ip, ip, #15
 800b032:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b036:	f881 e001 	strb.w	lr, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b03a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b03e:	700d      	strb	r5, [r1, #0]
  return (tmp + (Value & 0x0FU));
 800b040:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b044:	f881 c002 	strb.w	ip, [r1, #2]
}
 800b048:	2000      	movs	r0, #0
 800b04a:	bd30      	pop	{r4, r5, pc}

0800b04c <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b04c:	6803      	ldr	r3, [r0, #0]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b04e:	2000      	movs	r0, #0
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b050:	685b      	ldr	r3, [r3, #4]
{
 800b052:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b054:	f3c3 3e42 	ubfx	lr, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b058:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b05c:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b060:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b064:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b06c:	f36e 200f 	bfi	r0, lr, #8, #8
 800b070:	f363 4017 	bfi	r0, r3, #16, #8
 800b074:	f36c 601f 	bfi	r0, ip, #24, #8
 800b078:	6008      	str	r0, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800b07a:	b9d2      	cbnz	r2, 800b0b2 <HAL_RTC_GetDate+0x66>
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b07c:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & 0x0FU));
 800b07e:	f003 030f 	and.w	r3, r3, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b082:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 800b086:	f004 040f 	and.w	r4, r4, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b08a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b08e:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (Value & 0x0FU));
 800b092:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800b096:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b09a:	708b      	strb	r3, [r1, #2]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b09c:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 800b0a0:	f00c 0c0f 	and.w	ip, ip, #15
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b0a4:	704c      	strb	r4, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b0a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800b0aa:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b0ae:	f881 c003 	strb.w	ip, [r1, #3]
}
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	bf00      	nop

0800b0b8 <RTC_ExitInitMode>:
{
 800b0b8:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b0ba:	4b20      	ldr	r3, [pc, #128]	@ (800b13c <RTC_ExitInitMode+0x84>)
{
 800b0bc:	4604      	mov	r4, r0
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b0be:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b0c0:	68da      	ldr	r2, [r3, #12]
 800b0c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0c6:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b0c8:	699a      	ldr	r2, [r3, #24]
 800b0ca:	0690      	lsls	r0, r2, #26
 800b0cc:	d411      	bmi.n	800b0f2 <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b140 <RTC_ExitInitMode+0x88>)
 800b0d0:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 800b0d2:	f7f8 fa61 	bl	8003598 <HAL_GetTick>
 800b0d6:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b0d8:	e005      	b.n	800b0e6 <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b0da:	f7f8 fa5d 	bl	8003598 <HAL_GetTick>
 800b0de:	1b43      	subs	r3, r0, r5
 800b0e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b0e4:	d825      	bhi.n	800b132 <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	069a      	lsls	r2, r3, #26
 800b0ec:	d5f5      	bpl.n	800b0da <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800b0ee:	2000      	movs	r0, #0
}
 800b0f0:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b0f2:	699a      	ldr	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b0f4:	4812      	ldr	r0, [pc, #72]	@ (800b140 <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b0f6:	f022 0220 	bic.w	r2, r2, #32
 800b0fa:	619a      	str	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b0fc:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 800b0fe:	f7f8 fa4b 	bl	8003598 <HAL_GetTick>
 800b102:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b104:	e005      	b.n	800b112 <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b106:	f7f8 fa47 	bl	8003598 <HAL_GetTick>
 800b10a:	1b43      	subs	r3, r0, r5
 800b10c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b110:	d80a      	bhi.n	800b128 <RTC_ExitInitMode+0x70>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b112:	6823      	ldr	r3, [r4, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	069b      	lsls	r3, r3, #26
 800b118:	d5f5      	bpl.n	800b106 <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 800b11a:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b11c:	4a07      	ldr	r2, [pc, #28]	@ (800b13c <RTC_ExitInitMode+0x84>)
 800b11e:	6993      	ldr	r3, [r2, #24]
 800b120:	f043 0320 	orr.w	r3, r3, #32
 800b124:	6193      	str	r3, [r2, #24]
}
 800b126:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b128:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 800b12a:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b12c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800b130:	e7f4      	b.n	800b11c <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b132:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 800b134:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b136:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 800b13a:	bd38      	pop	{r3, r4, r5, pc}
 800b13c:	58004000 	.word	0x58004000
 800b140:	0001005f 	.word	0x0001005f

0800b144 <HAL_RTC_Init>:
  if(hrtc != NULL)
 800b144:	2800      	cmp	r0, #0
 800b146:	d046      	beq.n	800b1d6 <HAL_RTC_Init+0x92>
{
 800b148:	b570      	push	{r4, r5, r6, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b14a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800b14e:	4604      	mov	r4, r0
 800b150:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b154:	2b00      	cmp	r3, #0
 800b156:	d039      	beq.n	800b1cc <HAL_RTC_Init+0x88>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b158:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b15a:	6822      	ldr	r2, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b15c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b160:	68d3      	ldr	r3, [r2, #12]
 800b162:	06db      	lsls	r3, r3, #27
 800b164:	d504      	bpl.n	800b170 <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 800b166:	2301      	movs	r3, #1
 800b168:	2000      	movs	r0, #0
 800b16a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 800b16e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b170:	21ca      	movs	r1, #202	@ 0xca
 800b172:	2353      	movs	r3, #83	@ 0x53
 800b174:	6251      	str	r1, [r2, #36]	@ 0x24
 800b176:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b178:	68d5      	ldr	r5, [r2, #12]
 800b17a:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 800b17e:	d02c      	beq.n	800b1da <HAL_RTC_Init+0x96>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b180:	6990      	ldr	r0, [r2, #24]
 800b182:	4929      	ldr	r1, [pc, #164]	@ (800b228 <HAL_RTC_Init+0xe4>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b184:	6863      	ldr	r3, [r4, #4]
 800b186:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b188:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b18a:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b18c:	6191      	str	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b18e:	69a1      	ldr	r1, [r4, #24]
 800b190:	6990      	ldr	r0, [r2, #24]
 800b192:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b194:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b196:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 800b198:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b19a:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b19c:	68e3      	ldr	r3, [r4, #12]
 800b19e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b1a2:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 800b1a4:	f7ff ff88 	bl	800b0b8 <RTC_ExitInitMode>
      if(status == HAL_OK)
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d133      	bne.n	800b214 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b1ac:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b1ae:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b1b0:	6991      	ldr	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b1b2:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b1b6:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b1ba:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b1bc:	6191      	str	r1, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1be:	21ff      	movs	r1, #255	@ 0xff
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b1c0:	4303      	orrs	r3, r0
 800b1c2:	6990      	ldr	r0, [r2, #24]
 800b1c4:	4303      	orrs	r3, r0
 800b1c6:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1c8:	6251      	str	r1, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 800b1ca:	e7cc      	b.n	800b166 <HAL_RTC_Init+0x22>
      hrtc->Lock = HAL_UNLOCKED;
 800b1cc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
      HAL_RTC_MspInit(hrtc);
 800b1d0:	f7f7 ff9e 	bl	8003110 <HAL_RTC_MspInit>
 800b1d4:	e7c0      	b.n	800b158 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b1d6:	2001      	movs	r0, #1
}
 800b1d8:	4770      	bx	lr
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b1da:	68d3      	ldr	r3, [r2, #12]
 800b1dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1e0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800b1e2:	f7f8 f9d9 	bl	8003598 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800b1e6:	4629      	mov	r1, r5
    tickstart = HAL_GetTick();
 800b1e8:	4606      	mov	r6, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b1ea:	e008      	b.n	800b1fe <HAL_RTC_Init+0xba>
 800b1ec:	2903      	cmp	r1, #3
 800b1ee:	d00d      	beq.n	800b20c <HAL_RTC_Init+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b1f0:	f7f8 f9d2 	bl	8003598 <HAL_GetTick>
 800b1f4:	1b80      	subs	r0, r0, r6
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b1fc:	d80e      	bhi.n	800b21c <HAL_RTC_Init+0xd8>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b1fe:	6822      	ldr	r2, [r4, #0]
 800b200:	68d5      	ldr	r5, [r2, #12]
 800b202:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 800b206:	d0f1      	beq.n	800b1ec <HAL_RTC_Init+0xa8>
      if (status == HAL_OK)
 800b208:	2900      	cmp	r1, #0
 800b20a:	d0b9      	beq.n	800b180 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b20c:	23ff      	movs	r3, #255	@ 0xff
 800b20e:	2003      	movs	r0, #3
 800b210:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800b212:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	22ff      	movs	r2, #255	@ 0xff
 800b218:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800b21e:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b220:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 800b224:	e7eb      	b.n	800b1fe <HAL_RTC_Init+0xba>
 800b226:	bf00      	nop
 800b228:	fb8fffbf 	.word	0xfb8fffbf

0800b22c <HAL_RTC_SetTime>:
{
 800b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 800b230:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b234:	2b01      	cmp	r3, #1
 800b236:	d065      	beq.n	800b304 <HAL_RTC_SetTime+0xd8>
 800b238:	2301      	movs	r3, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b23a:	6805      	ldr	r5, [r0, #0]
 800b23c:	4681      	mov	r9, r0
 800b23e:	460f      	mov	r7, r1
  __HAL_LOCK(hrtc);
 800b240:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b244:	2302      	movs	r3, #2
 800b246:	4616      	mov	r6, r2
 800b248:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b24c:	23ca      	movs	r3, #202	@ 0xca
 800b24e:	626b      	str	r3, [r5, #36]	@ 0x24
 800b250:	2353      	movs	r3, #83	@ 0x53
 800b252:	626b      	str	r3, [r5, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b254:	68ec      	ldr	r4, [r5, #12]
 800b256:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800b25a:	d030      	beq.n	800b2be <HAL_RTC_SetTime+0x92>
    if(Format == RTC_FORMAT_BIN)
 800b25c:	2e00      	cmp	r6, #0
 800b25e:	d154      	bne.n	800b30a <HAL_RTC_SetTime+0xde>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b260:	69a8      	ldr	r0, [r5, #24]
 800b262:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800b266:	d07d      	beq.n	800b364 <HAL_RTC_SetTime+0x138>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b268:	78f8      	ldrb	r0, [r7, #3]
 800b26a:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b26c:	783b      	ldrb	r3, [r7, #0]
  while (bcdlow >= 10U)
 800b26e:	2b09      	cmp	r3, #9
 800b270:	d908      	bls.n	800b284 <HAL_RTC_SetTime+0x58>
  uint32_t bcdhigh = 0U;
 800b272:	2200      	movs	r2, #0
    bcdlow -= 10U;
 800b274:	3b0a      	subs	r3, #10
    bcdhigh++;
 800b276:	3201      	adds	r2, #1
    bcdlow -= 10U;
 800b278:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800b27a:	2b09      	cmp	r3, #9
 800b27c:	d8fa      	bhi.n	800b274 <HAL_RTC_SetTime+0x48>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b27e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b282:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b284:	787a      	ldrb	r2, [r7, #1]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b286:	041b      	lsls	r3, r3, #16
  while (bcdlow >= 10U)
 800b288:	2a09      	cmp	r2, #9
 800b28a:	d908      	bls.n	800b29e <HAL_RTC_SetTime+0x72>
  uint32_t bcdhigh = 0U;
 800b28c:	2100      	movs	r1, #0
    bcdlow -= 10U;
 800b28e:	3a0a      	subs	r2, #10
    bcdhigh++;
 800b290:	3101      	adds	r1, #1
    bcdlow -= 10U;
 800b292:	b2d2      	uxtb	r2, r2
  while (bcdlow >= 10U)
 800b294:	2a09      	cmp	r2, #9
 800b296:	d8fa      	bhi.n	800b28e <HAL_RTC_SetTime+0x62>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b298:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800b29c:	b2d2      	uxtb	r2, r2
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b29e:	78b9      	ldrb	r1, [r7, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b2a0:	0212      	lsls	r2, r2, #8
  while (bcdlow >= 10U)
 800b2a2:	2909      	cmp	r1, #9
 800b2a4:	d907      	bls.n	800b2b6 <HAL_RTC_SetTime+0x8a>
    bcdlow -= 10U;
 800b2a6:	390a      	subs	r1, #10
    bcdhigh++;
 800b2a8:	3601      	adds	r6, #1
    bcdlow -= 10U;
 800b2aa:	b2c9      	uxtb	r1, r1
  while (bcdlow >= 10U)
 800b2ac:	2909      	cmp	r1, #9
 800b2ae:	d8fa      	bhi.n	800b2a6 <HAL_RTC_SetTime+0x7a>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b2b0:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 800b2b4:	b2c9      	uxtb	r1, r1
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b2b6:	4303      	orrs	r3, r0
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	430b      	orrs	r3, r1
 800b2bc:	e033      	b.n	800b326 <HAL_RTC_SetTime+0xfa>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b2be:	68eb      	ldr	r3, [r5, #12]
 800b2c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2c4:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800b2c6:	f7f8 f967 	bl	8003598 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800b2ca:	4622      	mov	r2, r4
    tickstart = HAL_GetTick();
 800b2cc:	4680      	mov	r8, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b2ce:	e009      	b.n	800b2e4 <HAL_RTC_SetTime+0xb8>
 800b2d0:	2a03      	cmp	r2, #3
 800b2d2:	d00f      	beq.n	800b2f4 <HAL_RTC_SetTime+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b2d4:	f7f8 f960 	bl	8003598 <HAL_GetTick>
 800b2d8:	eba0 0308 	sub.w	r3, r0, r8
 800b2dc:	4622      	mov	r2, r4
 800b2de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2e2:	d83a      	bhi.n	800b35a <HAL_RTC_SetTime+0x12e>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b2e4:	f8d9 5000 	ldr.w	r5, [r9]
 800b2e8:	68ec      	ldr	r4, [r5, #12]
 800b2ea:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800b2ee:	d0ef      	beq.n	800b2d0 <HAL_RTC_SetTime+0xa4>
  if (status == HAL_OK)
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	d0b3      	beq.n	800b25c <HAL_RTC_SetTime+0x30>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2f4:	23ff      	movs	r3, #255	@ 0xff
 800b2f6:	2003      	movs	r0, #3
 800b2f8:	626b      	str	r3, [r5, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
}
 800b300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 800b304:	2002      	movs	r0, #2
}
 800b306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b30a:	69aa      	ldr	r2, [r5, #24]
 800b30c:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 800b310:	d02a      	beq.n	800b368 <HAL_RTC_SetTime+0x13c>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b312:	78fa      	ldrb	r2, [r7, #3]
 800b314:	0592      	lsls	r2, r2, #22
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b316:	787b      	ldrb	r3, [r7, #1]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b318:	7839      	ldrb	r1, [r7, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b31a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b31c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800b320:	78b9      	ldrb	r1, [r7, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b322:	430b      	orrs	r3, r1
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b324:	4313      	orrs	r3, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b326:	4a11      	ldr	r2, [pc, #68]	@ (800b36c <HAL_RTC_SetTime+0x140>)
    status = RTC_ExitInitMode(hrtc);
 800b328:	4648      	mov	r0, r9
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b32a:	401a      	ands	r2, r3
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b32c:	e9d7 3103 	ldrd	r3, r1, [r7, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b330:	602a      	str	r2, [r5, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b332:	69aa      	ldr	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b334:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b336:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b33a:	61aa      	str	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b33c:	69aa      	ldr	r2, [r5, #24]
 800b33e:	4313      	orrs	r3, r2
 800b340:	61ab      	str	r3, [r5, #24]
    status = RTC_ExitInitMode(hrtc);
 800b342:	f7ff feb9 	bl	800b0b8 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b346:	f8d9 3000 	ldr.w	r3, [r9]
 800b34a:	22ff      	movs	r2, #255	@ 0xff
 800b34c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800b34e:	2800      	cmp	r0, #0
 800b350:	d1d3      	bne.n	800b2fa <HAL_RTC_SetTime+0xce>
    hrtc->State = HAL_RTC_STATE_READY;
 800b352:	2301      	movs	r3, #1
 800b354:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 800b358:	e7cf      	b.n	800b2fa <HAL_RTC_SetTime+0xce>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800b35c:	461a      	mov	r2, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b35e:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 800b362:	e7bf      	b.n	800b2e4 <HAL_RTC_SetTime+0xb8>
        sTime->TimeFormat = 0x00U;
 800b364:	70fe      	strb	r6, [r7, #3]
 800b366:	e781      	b.n	800b26c <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 800b368:	70fa      	strb	r2, [r7, #3]
 800b36a:	e7d4      	b.n	800b316 <HAL_RTC_SetTime+0xea>
 800b36c:	007f7f7f 	.word	0x007f7f7f

0800b370 <HAL_RTC_SetDate>:
{
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800b372:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b376:	2b01      	cmp	r3, #1
 800b378:	f000 808b 	beq.w	800b492 <HAL_RTC_SetDate+0x122>
 800b37c:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b37e:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800b380:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b382:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_LOCK(hrtc);
 800b386:	f885 0024 	strb.w	r0, [r5, #36]	@ 0x24
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b38a:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b38c:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b38e:	f891 c001 	ldrb.w	ip, [r1, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b392:	0376      	lsls	r6, r6, #13
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800b394:	7888      	ldrb	r0, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b396:	b1f2      	cbz	r2, 800b3d6 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b398:	ea46 4403 	orr.w	r4, r6, r3, lsl #16
 800b39c:	4304      	orrs	r4, r0
 800b39e:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b3a2:	682a      	ldr	r2, [r5, #0]
 800b3a4:	21ca      	movs	r1, #202	@ 0xca
 800b3a6:	2353      	movs	r3, #83	@ 0x53
 800b3a8:	6251      	str	r1, [r2, #36]	@ 0x24
 800b3aa:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b3ac:	68d6      	ldr	r6, [r2, #12]
 800b3ae:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 800b3b2:	d049      	beq.n	800b448 <HAL_RTC_SetDate+0xd8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b3b4:	4b39      	ldr	r3, [pc, #228]	@ (800b49c <HAL_RTC_SetDate+0x12c>)
    status = RTC_ExitInitMode(hrtc);
 800b3b6:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b3b8:	4023      	ands	r3, r4
 800b3ba:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800b3bc:	f7ff fe7c 	bl	800b0b8 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	22ff      	movs	r2, #255	@ 0xff
 800b3c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800b3c6:	b910      	cbnz	r0, 800b3ce <HAL_RTC_SetDate+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_UNLOCK(hrtc);
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
}
 800b3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b3d6:	f01c 0f10 	tst.w	ip, #16
 800b3da:	d052      	beq.n	800b482 <HAL_RTC_SetDate+0x112>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b3dc:	f02c 0c10 	bic.w	ip, ip, #16
  while (bcdlow >= 10U)
 800b3e0:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b3e2:	f10c 0c0a 	add.w	ip, ip, #10
 800b3e6:	fa5f fc8c 	uxtb.w	ip, ip
 800b3ea:	f881 c001 	strb.w	ip, [r1, #1]
  while (bcdlow >= 10U)
 800b3ee:	d952      	bls.n	800b496 <HAL_RTC_SetDate+0x126>
  uint32_t bcdhigh = 0U;
 800b3f0:	2100      	movs	r1, #0
    bcdlow -= 10U;
 800b3f2:	3b0a      	subs	r3, #10
    bcdhigh++;
 800b3f4:	3101      	adds	r1, #1
    bcdlow -= 10U;
 800b3f6:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800b3f8:	2b09      	cmp	r3, #9
 800b3fa:	d8fa      	bhi.n	800b3f2 <HAL_RTC_SetDate+0x82>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b3fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800b400:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800b402:	f1bc 0f09 	cmp.w	ip, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b406:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (bcdlow >= 10U)
 800b40a:	d90c      	bls.n	800b426 <HAL_RTC_SetDate+0xb6>
  uint32_t bcdhigh = 0U;
 800b40c:	2300      	movs	r3, #0
    bcdlow -= 10U;
 800b40e:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 800b412:	3301      	adds	r3, #1
    bcdlow -= 10U;
 800b414:	fa5f fc8c 	uxtb.w	ip, ip
  while (bcdlow >= 10U)
 800b418:	f1bc 0f09 	cmp.w	ip, #9
 800b41c:	d8f7      	bhi.n	800b40e <HAL_RTC_SetDate+0x9e>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b41e:	ea4c 1303 	orr.w	r3, ip, r3, lsl #4
 800b422:	fa5f fc83 	uxtb.w	ip, r3
  while (bcdlow >= 10U)
 800b426:	2809      	cmp	r0, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b428:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  while (bcdlow >= 10U)
 800b42c:	d907      	bls.n	800b43e <HAL_RTC_SetDate+0xce>
    bcdlow -= 10U;
 800b42e:	380a      	subs	r0, #10
    bcdhigh++;
 800b430:	3201      	adds	r2, #1
    bcdlow -= 10U;
 800b432:	b2c0      	uxtb	r0, r0
  while (bcdlow >= 10U)
 800b434:	2809      	cmp	r0, #9
 800b436:	d8fa      	bhi.n	800b42e <HAL_RTC_SetDate+0xbe>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b438:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b43c:	b2d0      	uxtb	r0, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b43e:	4334      	orrs	r4, r6
 800b440:	ea44 040c 	orr.w	r4, r4, ip
 800b444:	4304      	orrs	r4, r0
 800b446:	e7ac      	b.n	800b3a2 <HAL_RTC_SetDate+0x32>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b448:	68d3      	ldr	r3, [r2, #12]
 800b44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b44e:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800b450:	f7f8 f8a2 	bl	8003598 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800b454:	4631      	mov	r1, r6
    tickstart = HAL_GetTick();
 800b456:	4607      	mov	r7, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b458:	e008      	b.n	800b46c <HAL_RTC_SetDate+0xfc>
 800b45a:	2903      	cmp	r1, #3
 800b45c:	d00d      	beq.n	800b47a <HAL_RTC_SetDate+0x10a>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b45e:	f7f8 f89b 	bl	8003598 <HAL_GetTick>
 800b462:	1bc0      	subs	r0, r0, r7
 800b464:	4631      	mov	r1, r6
 800b466:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b46a:	d80d      	bhi.n	800b488 <HAL_RTC_SetDate+0x118>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b46c:	682a      	ldr	r2, [r5, #0]
 800b46e:	68d6      	ldr	r6, [r2, #12]
 800b470:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 800b474:	d0f1      	beq.n	800b45a <HAL_RTC_SetDate+0xea>
  if (status == HAL_OK)
 800b476:	2900      	cmp	r1, #0
 800b478:	d09c      	beq.n	800b3b4 <HAL_RTC_SetDate+0x44>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b47a:	23ff      	movs	r3, #255	@ 0xff
 800b47c:	2003      	movs	r0, #3
 800b47e:	6253      	str	r3, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 800b480:	e7a5      	b.n	800b3ce <HAL_RTC_SetDate+0x5e>
  while (bcdlow >= 10U)
 800b482:	2b09      	cmp	r3, #9
 800b484:	d8b4      	bhi.n	800b3f0 <HAL_RTC_SetDate+0x80>
 800b486:	e7bc      	b.n	800b402 <HAL_RTC_SetDate+0x92>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b488:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800b48a:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b48c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b490:	e7ec      	b.n	800b46c <HAL_RTC_SetDate+0xfc>
  __HAL_LOCK(hrtc);
 800b492:	2002      	movs	r0, #2
}
 800b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b496:	041c      	lsls	r4, r3, #16
  while (bcdlow >= 10U)
 800b498:	e7b8      	b.n	800b40c <HAL_RTC_SetDate+0x9c>
 800b49a:	bf00      	nop
 800b49c:	00ffff3f 	.word	0x00ffff3f

0800b4a0 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800b4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	b086      	sub	sp, #24
 800b4a8:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b4aa:	f7f8 f875 	bl	8003598 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b4ae:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800b4b0:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b4b2:	6828      	ldr	r0, [r5, #0]
 800b4b4:	f001 fa26 	bl	800c904 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	b118      	cbz	r0, 800b4c4 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800b4bc:	4620      	mov	r0, r4
 800b4be:	b006      	add	sp, #24
 800b4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b4c4:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 800b4c6:	6828      	ldr	r0, [r5, #0]
 800b4c8:	0409      	lsls	r1, r1, #16
 800b4ca:	f001 ff93 	bl	800d3f4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1f3      	bne.n	800b4bc <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 800b4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d8:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4da:	4669      	mov	r1, sp
 800b4dc:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 800b4de:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b4e2:	2230      	movs	r2, #48	@ 0x30
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4f2:	f001 f9f1 	bl	800c8d8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b4f6:	6828      	ldr	r0, [r5, #0]
 800b4f8:	f002 f910 	bl	800d71c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d1dc      	bne.n	800b4bc <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b502:	4682      	mov	sl, r0
 800b504:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b506:	f240 582a 	movw	r8, #1322	@ 0x52a
 800b50a:	e004      	b.n	800b516 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b50c:	f7f8 f844 	bl	8003598 <HAL_GetTick>
 800b510:	1b83      	subs	r3, r0, r6
 800b512:	3301      	adds	r3, #1
 800b514:	d024      	beq.n	800b560 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b516:	6828      	ldr	r0, [r5, #0]
 800b518:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b51a:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b51e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b520:	d10c      	bne.n	800b53c <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b522:	0319      	lsls	r1, r3, #12
 800b524:	d4f2      	bmi.n	800b50c <SD_FindSCR.constprop.0+0x6c>
 800b526:	2c00      	cmp	r4, #0
 800b528:	d1f0      	bne.n	800b50c <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b52a:	f001 f9bb 	bl	800c8a4 <SDMMC_ReadFIFO>
 800b52e:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b530:	6828      	ldr	r0, [r5, #0]
      index++;
 800b532:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b534:	f001 f9b6 	bl	800c8a4 <SDMMC_ReadFIFO>
 800b538:	4682      	mov	sl, r0
      index++;
 800b53a:	e7e7      	b.n	800b50c <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b53c:	071a      	lsls	r2, r3, #28
 800b53e:	d416      	bmi.n	800b56e <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b540:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b542:	079b      	lsls	r3, r3, #30
 800b544:	d40f      	bmi.n	800b566 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b546:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800b548:	f014 0420 	ands.w	r4, r4, #32
 800b54c:	d113      	bne.n	800b576 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b54e:	fa9a f28a 	rev.w	r2, sl
 800b552:	fa99 f389 	rev.w	r3, r9
 800b556:	490a      	ldr	r1, [pc, #40]	@ (800b580 <SD_FindSCR.constprop.0+0xe0>)
 800b558:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b55a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800b55e:	e7ad      	b.n	800b4bc <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800b560:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800b564:	e7aa      	b.n	800b4bc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b566:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b568:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b56a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b56c:	e7a6      	b.n	800b4bc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b56e:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b570:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b572:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b574:	e7a2      	b.n	800b4bc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b576:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800b578:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b57a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800b57c:	e79e      	b.n	800b4bc <SD_FindSCR.constprop.0+0x1c>
 800b57e:	bf00      	nop
 800b580:	18000f3a 	.word	0x18000f3a

0800b584 <HAL_SD_ReadBlocks>:
{
 800b584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b588:	460d      	mov	r5, r1
 800b58a:	b086      	sub	sp, #24
 800b58c:	4604      	mov	r4, r0
 800b58e:	4691      	mov	r9, r2
 800b590:	461f      	mov	r7, r3
 800b592:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 800b596:	f7f7 ffff 	bl	8003598 <HAL_GetTick>
  if (NULL == pData)
 800b59a:	2d00      	cmp	r5, #0
 800b59c:	d065      	beq.n	800b66a <HAL_SD_ReadBlocks+0xe6>
  if (hsd->State == HAL_SD_STATE_READY)
 800b59e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d152      	bne.n	800b64c <HAL_SD_ReadBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b5a6:	eb09 0307 	add.w	r3, r9, r7
 800b5aa:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5ac:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b5ae:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5b0:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b5b2:	d85f      	bhi.n	800b674 <HAL_SD_ReadBlocks+0xf0>
    hsd->State = HAL_SD_STATE_BUSY;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 800b5b8:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b5ba:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 800b5be:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b5c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 800b5c4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5c6:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b5c8:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b5ca:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b5ce:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5d2:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 800b5d6:	bf18      	it	ne
 800b5d8:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5dc:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b5de:	027b      	lsls	r3, r7, #9
 800b5e0:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b5e2:	2390      	movs	r3, #144	@ 0x90
 800b5e4:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b5e8:	f001 f976 	bl	800c8d8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b5ec:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 800b5ee:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b5f0:	68c3      	ldr	r3, [r0, #12]
 800b5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5f6:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 800b5f8:	d931      	bls.n	800b65e <HAL_SD_ReadBlocks+0xda>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b5fa:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b5fc:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b600:	f001 fad8 	bl	800cbb4 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b604:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b606:	2800      	cmp	r0, #0
 800b608:	d139      	bne.n	800b67e <HAL_SD_ReadBlocks+0xfa>
    dataremaining = config.DataLength;
 800b60a:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b60e:	e005      	b.n	800b61c <HAL_SD_ReadBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b610:	f7f7 ffc2 	bl	8003598 <HAL_GetTick>
 800b614:	1b82      	subs	r2, r0, r6
 800b616:	4542      	cmp	r2, r8
 800b618:	d25c      	bcs.n	800b6d4 <HAL_SD_ReadBlocks+0x150>
 800b61a:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b61c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b61e:	4610      	mov	r0, r2
 800b620:	f413 7f95 	tst.w	r3, #298	@ 0x12a
 800b624:	d136      	bne.n	800b694 <HAL_SD_ReadBlocks+0x110>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800b626:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b628:	041a      	lsls	r2, r3, #16
 800b62a:	d5f1      	bpl.n	800b610 <HAL_SD_ReadBlocks+0x8c>
 800b62c:	f1b9 0f1f 	cmp.w	r9, #31
 800b630:	d9ee      	bls.n	800b610 <HAL_SD_ReadBlocks+0x8c>
 800b632:	f105 0a20 	add.w	sl, r5, #32
 800b636:	e000      	b.n	800b63a <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	f001 f933 	bl	800c8a4 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b63e:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 800b642:	45aa      	cmp	sl, r5
 800b644:	d1f8      	bne.n	800b638 <HAL_SD_ReadBlocks+0xb4>
        dataremaining -= 32U;
 800b646:	f1a9 0920 	sub.w	r9, r9, #32
 800b64a:	e7e1      	b.n	800b610 <HAL_SD_ReadBlocks+0x8c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b64c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b64e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b652:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
}
 800b656:	4618      	mov	r0, r3
 800b658:	b006      	add	sp, #24
 800b65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b65e:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b660:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b662:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b664:	f001 f9fa 	bl	800ca5c <SDMMC_CmdReadSingleBlock>
 800b668:	e7cc      	b.n	800b604 <HAL_SD_ReadBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b66a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b66c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b670:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b672:	e7ef      	b.n	800b654 <HAL_SD_ReadBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b674:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b676:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b67a:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800b67c:	e7ea      	b.n	800b654 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b67e:	4b31      	ldr	r3, [pc, #196]	@ (800b744 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b680:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b682:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b686:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 800b688:	4303      	orrs	r3, r0
 800b68a:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b68c:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b690:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800b692:	e7df      	b.n	800b654 <HAL_SD_ReadBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b694:	68d3      	ldr	r3, [r2, #12]
 800b696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b69a:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b69c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b69e:	05db      	lsls	r3, r3, #23
 800b6a0:	d501      	bpl.n	800b6a6 <HAL_SD_ReadBlocks+0x122>
 800b6a2:	2f01      	cmp	r7, #1
 800b6a4:	d824      	bhi.n	800b6f0 <HAL_SD_ReadBlocks+0x16c>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b6a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b6a8:	f013 0308 	ands.w	r3, r3, #8
 800b6ac:	d133      	bne.n	800b716 <HAL_SD_ReadBlocks+0x192>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b6ae:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b6b0:	f012 0202 	ands.w	r2, r2, #2
 800b6b4:	d124      	bne.n	800b700 <HAL_SD_ReadBlocks+0x17c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b6b6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b6b8:	f013 0320 	ands.w	r3, r3, #32
 800b6bc:	d037      	beq.n	800b72e <HAL_SD_ReadBlocks+0x1aa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6be:	4b21      	ldr	r3, [pc, #132]	@ (800b744 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b6c0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6c2:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b6c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6c6:	f043 0320 	orr.w	r3, r3, #32
 800b6ca:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b6cc:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b6d0:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b6d2:	e7bf      	b.n	800b654 <HAL_SD_ReadBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6d4:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800b6d6:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6d8:	481a      	ldr	r0, [pc, #104]	@ (800b744 <HAL_SD_ReadBlocks+0x1c0>)
        hsd->Context = SD_CONTEXT_NONE;
 800b6da:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6dc:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b6de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b6e4:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800b6e8:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b6ec:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b6ee:	e7b2      	b.n	800b656 <HAL_SD_ReadBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b6f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d0d7      	beq.n	800b6a6 <HAL_SD_ReadBlocks+0x122>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b6f6:	f001 fc61 	bl	800cfbc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800b6fa:	b9f0      	cbnz	r0, 800b73a <HAL_SD_ReadBlocks+0x1b6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6fc:	6820      	ldr	r0, [r4, #0]
 800b6fe:	e7d2      	b.n	800b6a6 <HAL_SD_ReadBlocks+0x122>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b700:	4a10      	ldr	r2, [pc, #64]	@ (800b744 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b702:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b704:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b706:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b708:	f042 0202 	orr.w	r2, r2, #2
 800b70c:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b70e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b712:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b714:	e79e      	b.n	800b654 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b716:	4b0b      	ldr	r3, [pc, #44]	@ (800b744 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 800b718:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b71a:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b71c:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b71e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b720:	f043 0308 	orr.w	r3, r3, #8
 800b724:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b726:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b72a:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b72c:	e792      	b.n	800b654 <HAL_SD_ReadBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b72e:	4906      	ldr	r1, [pc, #24]	@ (800b748 <HAL_SD_ReadBlocks+0x1c4>)
    hsd->State = HAL_SD_STATE_READY;
 800b730:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b732:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b734:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800b738:	e78d      	b.n	800b656 <HAL_SD_ReadBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b73a:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800b73c:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b73e:	4a01      	ldr	r2, [pc, #4]	@ (800b744 <HAL_SD_ReadBlocks+0x1c0>)
 800b740:	639a      	str	r2, [r3, #56]	@ 0x38
 800b742:	e79f      	b.n	800b684 <HAL_SD_ReadBlocks+0x100>
 800b744:	1fe00fff 	.word	0x1fe00fff
 800b748:	18000f3a 	.word	0x18000f3a

0800b74c <HAL_SD_WriteBlocks>:
{
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	460d      	mov	r5, r1
 800b752:	b088      	sub	sp, #32
 800b754:	4604      	mov	r4, r0
 800b756:	4691      	mov	r9, r2
 800b758:	461f      	mov	r7, r3
 800b75a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b75e:	f7f7 ff1b 	bl	8003598 <HAL_GetTick>
  if (NULL == pData)
 800b762:	2d00      	cmp	r5, #0
 800b764:	d064      	beq.n	800b830 <HAL_SD_WriteBlocks+0xe4>
  if (hsd->State == HAL_SD_STATE_READY)
 800b766:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d152      	bne.n	800b814 <HAL_SD_WriteBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b76e:	eb09 0307 	add.w	r3, r9, r7
 800b772:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b774:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b776:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b778:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b77a:	d85e      	bhi.n	800b83a <HAL_SD_WriteBlocks+0xee>
    hsd->State = HAL_SD_STATE_BUSY;
 800b77c:	2303      	movs	r3, #3
 800b77e:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 800b780:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800b782:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b786:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 800b788:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b78a:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b78c:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b78e:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b792:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b796:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b798:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 800b79c:	bf18      	it	ne
 800b79e:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b7a2:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b7a4:	027b      	lsls	r3, r7, #9
 800b7a6:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b7a8:	2390      	movs	r3, #144	@ 0x90
 800b7aa:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b7ac:	f001 f894 	bl	800c8d8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b7b0:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 800b7b2:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b7b4:	4649      	mov	r1, r9
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b7b6:	68c3      	ldr	r3, [r0, #12]
 800b7b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7bc:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 800b7be:	d932      	bls.n	800b826 <HAL_SD_WriteBlocks+0xda>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b7c4:	f001 fb4e 	bl	800ce64 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7c8:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d13a      	bne.n	800b844 <HAL_SD_WriteBlocks+0xf8>
    dataremaining = config.DataLength;
 800b7ce:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800b7d2:	e005      	b.n	800b7e0 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b7d4:	f7f7 fee0 	bl	8003598 <HAL_GetTick>
 800b7d8:	1b82      	subs	r2, r0, r6
 800b7da:	4542      	cmp	r2, r8
 800b7dc:	d25d      	bcs.n	800b89a <HAL_SD_WriteBlocks+0x14e>
 800b7de:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800b7e0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
 800b7e8:	d137      	bne.n	800b85a <HAL_SD_WriteBlocks+0x10e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800b7ea:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b7ec:	045a      	lsls	r2, r3, #17
 800b7ee:	d5f1      	bpl.n	800b7d4 <HAL_SD_WriteBlocks+0x88>
 800b7f0:	f1b9 0f1f 	cmp.w	r9, #31
 800b7f4:	d9ee      	bls.n	800b7d4 <HAL_SD_WriteBlocks+0x88>
 800b7f6:	f105 0a20 	add.w	sl, r5, #32
 800b7fa:	e000      	b.n	800b7fe <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b7fc:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b7fe:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b802:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b804:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b806:	f001 f851 	bl	800c8ac <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800b80a:	4555      	cmp	r5, sl
 800b80c:	d1f6      	bne.n	800b7fc <HAL_SD_WriteBlocks+0xb0>
        dataremaining -= 32U;
 800b80e:	f1a9 0920 	sub.w	r9, r9, #32
 800b812:	e7df      	b.n	800b7d4 <HAL_SD_WriteBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b816:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b81a:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
}
 800b81e:	4618      	mov	r0, r3
 800b820:	b008      	add	sp, #32
 800b822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b826:	2310      	movs	r3, #16
 800b828:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b82a:	f001 fa6f 	bl	800cd0c <SDMMC_CmdWriteSingleBlock>
 800b82e:	e7cb      	b.n	800b7c8 <HAL_SD_WriteBlocks+0x7c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b832:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b836:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800b838:	e7f0      	b.n	800b81c <HAL_SD_WriteBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b83a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b83c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b840:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800b842:	e7eb      	b.n	800b81c <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b844:	4b30      	ldr	r3, [pc, #192]	@ (800b908 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b846:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b848:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b84a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b84c:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 800b84e:	4303      	orrs	r3, r0
 800b850:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800b852:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800b856:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800b858:	e7e0      	b.n	800b81c <HAL_SD_WriteBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b85a:	68d3      	ldr	r3, [r2, #12]
 800b85c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b860:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b862:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800b864:	05db      	lsls	r3, r3, #23
 800b866:	d501      	bpl.n	800b86c <HAL_SD_WriteBlocks+0x120>
 800b868:	2f01      	cmp	r7, #1
 800b86a:	d822      	bhi.n	800b8b2 <HAL_SD_WriteBlocks+0x166>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b86c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b86e:	f013 0308 	ands.w	r3, r3, #8
 800b872:	d131      	bne.n	800b8d8 <HAL_SD_WriteBlocks+0x18c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b874:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800b876:	f012 0202 	ands.w	r2, r2, #2
 800b87a:	d122      	bne.n	800b8c2 <HAL_SD_WriteBlocks+0x176>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800b87c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b87e:	f013 0310 	ands.w	r3, r3, #16
 800b882:	d035      	beq.n	800b8f0 <HAL_SD_WriteBlocks+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b884:	4b20      	ldr	r3, [pc, #128]	@ (800b908 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b886:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b888:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b88a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b88c:	f043 0310 	orr.w	r3, r3, #16
 800b890:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b892:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b896:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b898:	e7c0      	b.n	800b81c <HAL_SD_WriteBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b89a:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800b89c:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b89e:	481a      	ldr	r0, [pc, #104]	@ (800b908 <HAL_SD_WriteBlocks+0x1bc>)
        hsd->Context = SD_CONTEXT_NONE;
 800b8a0:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8a2:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b8a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8a6:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800b8a8:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 800b8aa:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b8ae:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b8b0:	e7b5      	b.n	800b81e <HAL_SD_WriteBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800b8b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d0d9      	beq.n	800b86c <HAL_SD_WriteBlocks+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b8b8:	f001 fb80 	bl	800cfbc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800b8bc:	b9f0      	cbnz	r0, 800b8fc <HAL_SD_WriteBlocks+0x1b0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8be:	6820      	ldr	r0, [r4, #0]
 800b8c0:	e7d4      	b.n	800b86c <HAL_SD_WriteBlocks+0x120>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8c2:	4a11      	ldr	r2, [pc, #68]	@ (800b908 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b8c4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8c6:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b8c8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b8ca:	f042 0202 	orr.w	r2, r2, #2
 800b8ce:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b8d0:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b8d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b8d6:	e7a1      	b.n	800b81c <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b908 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 800b8da:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 800b8dc:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8de:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b8e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8e2:	f043 0308 	orr.w	r3, r3, #8
 800b8e6:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b8e8:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b8ec:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800b8ee:	e795      	b.n	800b81c <HAL_SD_WriteBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b8f0:	4906      	ldr	r1, [pc, #24]	@ (800b90c <HAL_SD_WriteBlocks+0x1c0>)
    hsd->State = HAL_SD_STATE_READY;
 800b8f2:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b8f4:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b8f6:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 800b8fa:	e790      	b.n	800b81e <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8fc:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800b8fe:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b900:	4a01      	ldr	r2, [pc, #4]	@ (800b908 <HAL_SD_WriteBlocks+0x1bc>)
 800b902:	639a      	str	r2, [r3, #56]	@ 0x38
 800b904:	e7a1      	b.n	800b84a <HAL_SD_WriteBlocks+0xfe>
 800b906:	bf00      	nop
 800b908:	1fe00fff 	.word	0x1fe00fff
 800b90c:	18000f3a 	.word	0x18000f3a

0800b910 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b910:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 800b912:	4603      	mov	r3, r0
 800b914:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b916:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b91a:	0f94      	lsrs	r4, r2, #30
 800b91c:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b91e:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b922:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b924:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b928:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b92a:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b92c:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b930:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b932:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b934:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b936:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b938:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b93a:	0d14      	lsrs	r4, r2, #20
 800b93c:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b93e:	f3c2 4403 	ubfx	r4, r2, #16, #4
 800b942:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b944:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 800b948:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b94a:	f3c2 3480 	ubfx	r4, r2, #14, #1
 800b94e:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b950:	f3c2 3440 	ubfx	r4, r2, #13, #1
 800b954:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b956:	f3c2 3400 	ubfx	r4, r2, #12, #1
 800b95a:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b95c:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800b95e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b960:	2800      	cmp	r0, #0
 800b962:	d16f      	bne.n	800ba44 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b964:	f640 74fc 	movw	r4, #4092	@ 0xffc
 800b968:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800b96a:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b96e:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b972:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800b976:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b978:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b97c:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b97e:	f3c0 6402 	ubfx	r4, r0, #24, #3
 800b982:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b984:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b988:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b98a:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b98e:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b990:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b992:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b994:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b996:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b998:	f002 0207 	and.w	r2, r2, #7
 800b99c:	3202      	adds	r2, #2
 800b99e:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b9a0:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b9a2:	649c      	str	r4, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b9a4:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b9a8:	f00c 0c0f 	and.w	ip, ip, #15
 800b9ac:	fa02 f20c 	lsl.w	r2, r2, ip
 800b9b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b9b2:	0a52      	lsrs	r2, r2, #9
 800b9b4:	fb04 f202 	mul.w	r2, r4, r2
 800b9b8:	651a      	str	r2, [r3, #80]	@ 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b9ba:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800b9be:	f44f 7400 	mov.w	r4, #512	@ 0x200
 800b9c2:	655c      	str	r4, [r3, #84]	@ 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b9c4:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b9c8:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b9ca:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b9ce:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 800b9d0:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b9d2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b9d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9d6:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b9d8:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b9dc:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b9de:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b9e2:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b9e4:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b9e8:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b9ea:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b9ee:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b9f0:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b9f4:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b9f8:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 800b9fc:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ba00:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ba04:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ba08:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ba0c:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ba10:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ba14:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ba18:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ba1c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ba20:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ba24:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ba28:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ba2c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ba30:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 800ba34:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ba36:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800ba3a:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 800ba3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba42:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ba44:	2801      	cmp	r0, #1
 800ba46:	d10f      	bne.n	800ba68 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ba48:	0412      	lsls	r2, r2, #16
 800ba4a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
    hsd->SdCard.BlockSize = 512U;
 800ba4c:	f44f 7400 	mov.w	r4, #512	@ 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ba50:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800ba54:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 800ba58:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba5a:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800ba5c:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba5e:	3201      	adds	r2, #1
 800ba60:	0292      	lsls	r2, r2, #10
 800ba62:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ba64:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ba66:	e7a8      	b.n	800b9ba <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba68:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 800ba6a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba6c:	4805      	ldr	r0, [pc, #20]	@ (800ba84 <HAL_SD_GetCardCSD+0x174>)
 800ba6e:	6390      	str	r0, [r2, #56]	@ 0x38
    return HAL_ERROR;
 800ba70:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba74:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800ba78:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ba7a:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
}
 800ba7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	1fe00fff 	.word	0x1fe00fff

0800ba88 <HAL_SD_InitCard>:
{
 800ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ba8a:	2200      	movs	r2, #0
{
 800ba8c:	b095      	sub	sp, #84	@ 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ba8e:	2300      	movs	r3, #0
{
 800ba90:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ba92:	2100      	movs	r1, #0
 800ba94:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ba98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800baa0:	f7ff f8ea 	bl	800ac78 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800baa4:	b948      	cbnz	r0, 800baba <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 800baa6:	2201      	movs	r2, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800baa8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800baac:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bab0:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800bab2:	2501      	movs	r5, #1
}
 800bab4:	4628      	mov	r0, r5
 800bab6:	b015      	add	sp, #84	@ 0x54
 800bab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800baba:	0a06      	lsrs	r6, r0, #8
 800babc:	4b8a      	ldr	r3, [pc, #552]	@ (800bce8 <HAL_SD_InitCard+0x260>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800babe:	aa07      	add	r2, sp, #28
 800bac0:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bac2:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800bac6:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bac8:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800baca:	9608      	str	r6, [sp, #32]
 800bacc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bad0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bad6:	6820      	ldr	r0, [r4, #0]
 800bad8:	f000 fec8 	bl	800c86c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800badc:	6820      	ldr	r0, [r4, #0]
 800bade:	f000 feeb 	bl	800c8b8 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800bae2:	4b82      	ldr	r3, [pc, #520]	@ (800bcec <HAL_SD_InitCard+0x264>)
 800bae4:	429d      	cmp	r5, r3
 800bae6:	d902      	bls.n	800baee <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bae8:	0076      	lsls	r6, r6, #1
 800baea:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800baee:	4880      	ldr	r0, [pc, #512]	@ (800bcf0 <HAL_SD_InitCard+0x268>)
 800baf0:	fbb0 f0f5 	udiv	r0, r0, r5
 800baf4:	3001      	adds	r0, #1
 800baf6:	f7f7 fd55 	bl	80035a4 <HAL_Delay>
  __IO uint32_t count = 0U;
 800bafa:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bafc:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800bafe:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bb00:	f001 fc0c 	bl	800d31c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb04:	4605      	mov	r5, r0
 800bb06:	bb70      	cbnz	r0, 800bb66 <HAL_SD_InitCard+0xde>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bb08:	6820      	ldr	r0, [r4, #0]
 800bb0a:	f001 fc33 	bl	800d374 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800bb0e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800bb12:	f000 80ce 	beq.w	800bcb2 <HAL_SD_InitCard+0x22a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bb16:	2301      	movs	r3, #1
 800bb18:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	6820      	ldr	r0, [r4, #0]
 800bb1e:	f001 fc69 	bl	800d3f4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bb22:	bb38      	cbnz	r0, 800bb74 <HAL_SD_InitCard+0xec>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 800bb2a:	42b3      	cmp	r3, r6
 800bb2c:	f200 80d3 	bhi.w	800bcd6 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800bb30:	4f70      	ldr	r7, [pc, #448]	@ (800bcf4 <HAL_SD_InitCard+0x26c>)
 800bb32:	e010      	b.n	800bb56 <HAL_SD_InitCard+0xce>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	f001 fd09 	bl	800d54c <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	b9d0      	cbnz	r0, 800bb74 <HAL_SD_InitCard+0xec>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb3e:	6820      	ldr	r0, [r4, #0]
 800bb40:	f000 fec6 	bl	800c8d0 <SDMMC_GetResponse>
    count++;
 800bb44:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bb46:	2800      	cmp	r0, #0
    count++;
 800bb48:	f103 0301 	add.w	r3, r3, #1
 800bb4c:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	db13      	blt.n	800bb7a <HAL_SD_InitCard+0xf2>
 800bb52:	42b3      	cmp	r3, r6
 800bb54:	d811      	bhi.n	800bb7a <HAL_SD_InitCard+0xf2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bb56:	2100      	movs	r1, #0
 800bb58:	6820      	ldr	r0, [r4, #0]
 800bb5a:	f001 fc4b 	bl	800d3f4 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800bb5e:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d0e7      	beq.n	800bb34 <HAL_SD_InitCard+0xac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bb64:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_READY;
 800bb66:	2301      	movs	r3, #1
 800bb68:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bb6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb6e:	432b      	orrs	r3, r5
 800bb70:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800bb72:	e79e      	b.n	800bab2 <HAL_SD_InitCard+0x2a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb74:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800bb78:	e7f5      	b.n	800bb66 <HAL_SD_InitCard+0xde>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800bb7a:	9a03      	ldr	r2, [sp, #12]
 800bb7c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800bb80:	429a      	cmp	r2, r3
 800bb82:	f200 80ac 	bhi.w	800bcde <HAL_SD_InitCard+0x256>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bb86:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800bb8a:	bf18      	it	ne
 800bb8c:	2501      	movne	r5, #1
  uint16_t sd_rca = 0U;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	63a5      	str	r5, [r4, #56]	@ 0x38
 800bb92:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800bb96:	f7f7 fcff 	bl	8003598 <HAL_GetTick>
 800bb9a:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bb9c:	6820      	ldr	r0, [r4, #0]
 800bb9e:	f000 fe93 	bl	800c8c8 <SDMMC_GetPowerState>
 800bba2:	b348      	cbz	r0, 800bbf8 <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bba4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bba6:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d12e      	bne.n	800bc0a <HAL_SD_InitCard+0x182>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bbac:	2104      	movs	r1, #4
 800bbae:	f000 fe8f 	bl	800c8d0 <SDMMC_GetResponse>
 800bbb2:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bbb4:	a909      	add	r1, sp, #36	@ 0x24
 800bbb6:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bbb8:	0d1b      	lsrs	r3, r3, #20
 800bbba:	6423      	str	r3, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bbbc:	f7ff fea8 	bl	800b910 <HAL_SD_GetCardCSD>
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	f040 8081 	bne.w	800bcca <HAL_SD_InitCard+0x242>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bbc8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bbca:	6820      	ldr	r0, [r4, #0]
 800bbcc:	0409      	lsls	r1, r1, #16
 800bbce:	f001 faf9 	bl	800d1c4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bbd2:	b998      	cbnz	r0, 800bbfc <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bbd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bbd8:	6820      	ldr	r0, [r4, #0]
 800bbda:	f000 fe93 	bl	800c904 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	f43f af68 	beq.w	800bab4 <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbe4:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800bbe6:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbe8:	4943      	ldr	r1, [pc, #268]	@ (800bcf8 <HAL_SD_InitCard+0x270>)
 800bbea:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bbec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bbee:	4303      	orrs	r3, r0
 800bbf0:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bbf2:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800bbf6:	e75c      	b.n	800bab2 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bbf8:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800bc02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc04:	4303      	orrs	r3, r0
 800bc06:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800bc08:	e753      	b.n	800bab2 <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bc0a:	f001 fe2d 	bl	800d868 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d1f4      	bne.n	800bbfc <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc12:	4601      	mov	r1, r0
 800bc14:	6820      	ldr	r0, [r4, #0]
 800bc16:	f000 fe5b 	bl	800c8d0 <SDMMC_GetResponse>
 800bc1a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc1c:	2104      	movs	r1, #4
 800bc1e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc20:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc22:	f000 fe55 	bl	800c8d0 <SDMMC_GetResponse>
 800bc26:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc28:	2108      	movs	r1, #8
 800bc2a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc2c:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc2e:	f000 fe4f 	bl	800c8d0 <SDMMC_GetResponse>
 800bc32:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc34:	210c      	movs	r1, #12
 800bc36:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc38:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc3a:	f000 fe49 	bl	800c8d0 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bc3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bc40:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d04e      	beq.n	800bce4 <HAL_SD_InitCard+0x25c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800bc46:	f241 3687 	movw	r6, #4999	@ 0x1387
 800bc4a:	e008      	b.n	800bc5e <HAL_SD_InitCard+0x1d6>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bc4c:	f001 fe8a 	bl	800d964 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d1d3      	bne.n	800bbfc <HAL_SD_InitCard+0x174>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800bc54:	f7f7 fca0 	bl	8003598 <HAL_GetTick>
 800bc58:	1b43      	subs	r3, r0, r5
 800bc5a:	42b3      	cmp	r3, r6
 800bc5c:	d838      	bhi.n	800bcd0 <HAL_SD_InitCard+0x248>
    while (sd_rca == 0U)
 800bc5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bc62:	f10d 010a 	add.w	r1, sp, #10
 800bc66:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d0ef      	beq.n	800bc4c <HAL_SD_InitCard+0x1c4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bc6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bc6e:	2a03      	cmp	r2, #3
 800bc70:	d09c      	beq.n	800bbac <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc72:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 800bc74:	6463      	str	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc76:	f001 fe35 	bl	800d8e4 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d1be      	bne.n	800bbfc <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	f000 fe25 	bl	800c8d0 <SDMMC_GetResponse>
 800bc86:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc88:	2104      	movs	r1, #4
 800bc8a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc8c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc8e:	f000 fe1f 	bl	800c8d0 <SDMMC_GetResponse>
 800bc92:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc94:	2108      	movs	r1, #8
 800bc96:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bc98:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bc9a:	f000 fe19 	bl	800c8d0 <SDMMC_GetResponse>
 800bc9e:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bca0:	210c      	movs	r1, #12
 800bca2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bca4:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bca6:	f000 fe13 	bl	800c8d0 <SDMMC_GetResponse>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	6820      	ldr	r0, [r4, #0]
 800bcae:	66a3      	str	r3, [r4, #104]	@ 0x68
 800bcb0:	e77c      	b.n	800bbac <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bcb2:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bcb4:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bcb6:	f001 fb31 	bl	800d31c <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	f47f af52 	bne.w	800bb64 <HAL_SD_InitCard+0xdc>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800bcc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	f47f af2e 	bne.w	800bb24 <HAL_SD_InitCard+0x9c>
 800bcc8:	e727      	b.n	800bb1a <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcca:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800bcce:	e795      	b.n	800bbfc <HAL_SD_InitCard+0x174>
        return HAL_SD_ERROR_TIMEOUT;
 800bcd0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800bcd4:	e792      	b.n	800bbfc <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	42b3      	cmp	r3, r6
 800bcda:	f67f af58 	bls.w	800bb8e <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bcde:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800bce2:	e740      	b.n	800bb66 <HAL_SD_InitCard+0xde>
 800bce4:	6820      	ldr	r0, [r4, #0]
 800bce6:	e761      	b.n	800bbac <HAL_SD_InitCard+0x124>
 800bce8:	014f8b59 	.word	0x014f8b59
 800bcec:	000c34ff 	.word	0x000c34ff
 800bcf0:	00012110 	.word	0x00012110
 800bcf4:	c1100000 	.word	0xc1100000
 800bcf8:	1fe00fff 	.word	0x1fe00fff

0800bcfc <HAL_SD_GetCardStatus>:
{
 800bcfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 800bd00:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 800bd04:	b097      	sub	sp, #92	@ 0x5c
  if (hsd->State == HAL_SD_STATE_BUSY)
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d033      	beq.n	800bd72 <HAL_SD_GetCardStatus+0x76>
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800bd0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	f7f7 fc43 	bl	8003598 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd12:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800bd14:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd16:	6820      	ldr	r0, [r4, #0]
 800bd18:	f000 fdda 	bl	800c8d0 <SDMMC_GetResponse>
 800bd1c:	0182      	lsls	r2, r0, #6
 800bd1e:	d410      	bmi.n	800bd42 <HAL_SD_GetCardStatus+0x46>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bd20:	2140      	movs	r1, #64	@ 0x40
 800bd22:	6820      	ldr	r0, [r4, #0]
 800bd24:	f000 fdee 	bl	800c904 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd28:	4603      	mov	r3, r0
 800bd2a:	b930      	cbnz	r0, 800bd3a <HAL_SD_GetCardStatus+0x3e>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd2e:	6820      	ldr	r0, [r4, #0]
 800bd30:	0409      	lsls	r1, r1, #16
 800bd32:	f001 fb5f 	bl	800d3f4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd36:	4603      	mov	r3, r0
 800bd38:	b300      	cbz	r0, 800bd7c <HAL_SD_GetCardStatus+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bd3a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd3c:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bd3e:	6362      	str	r2, [r4, #52]	@ 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd40:	e002      	b.n	800bd48 <HAL_SD_GetCardStatus+0x4c>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bd42:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bd44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd48:	4a54      	ldr	r2, [pc, #336]	@ (800be9c <HAL_SD_GetCardStatus+0x1a0>)
    hsd->State = HAL_SD_STATE_READY;
 800bd4a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd4c:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 800bd4e:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 800bd50:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bd52:	4313      	orrs	r3, r2
 800bd54:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bd56:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bd5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd5e:	f000 fdd1 	bl	800c904 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd62:	b138      	cbz	r0, 800bd74 <HAL_SD_GetCardStatus+0x78>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd64:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800bd66:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd68:	494c      	ldr	r1, [pc, #304]	@ (800be9c <HAL_SD_GetCardStatus+0x1a0>)
 800bd6a:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800bd6c:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bd6e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 800bd72:	2601      	movs	r6, #1
}
 800bd74:	4630      	mov	r0, r6
 800bd76:	b017      	add	sp, #92	@ 0x5c
 800bd78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  config.DataLength    = 64U;
 800bd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd80:	2340      	movs	r3, #64	@ 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd82:	4669      	mov	r1, sp
 800bd84:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800bd86:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bd8a:	2260      	movs	r2, #96	@ 0x60
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bd92:	2301      	movs	r3, #1
 800bd94:	2200      	movs	r2, #0
 800bd96:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bd9a:	f000 fd9d 	bl	800c8d8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800bd9e:	6820      	ldr	r0, [r4, #0]
 800bda0:	f001 feec 	bl	800db7c <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bda4:	4603      	mov	r3, r0
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d1c7      	bne.n	800bd3a <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 800bdaa:	ae06      	add	r6, sp, #24
 800bdac:	e004      	b.n	800bdb8 <HAL_SD_GetCardStatus+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bdae:	f7f7 fbf3 	bl	8003598 <HAL_GetTick>
 800bdb2:	1bc0      	subs	r0, r0, r7
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	d012      	beq.n	800bdde <HAL_SD_GetCardStatus+0xe2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdb8:	6820      	ldr	r0, [r4, #0]
 800bdba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bdbc:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bdc0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bdc2:	d110      	bne.n	800bde6 <HAL_SD_GetCardStatus+0xea>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800bdc4:	041b      	lsls	r3, r3, #16
 800bdc6:	d5f2      	bpl.n	800bdae <HAL_SD_GetCardStatus+0xb2>
 800bdc8:	f106 0820 	add.w	r8, r6, #32
 800bdcc:	e000      	b.n	800bdd0 <HAL_SD_GetCardStatus+0xd4>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bdce:	6820      	ldr	r0, [r4, #0]
 800bdd0:	f000 fd68 	bl	800c8a4 <SDMMC_ReadFIFO>
 800bdd4:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800bdd8:	4546      	cmp	r6, r8
 800bdda:	d1f8      	bne.n	800bdce <HAL_SD_GetCardStatus+0xd2>
 800bddc:	e7e7      	b.n	800bdae <HAL_SD_GetCardStatus+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdde:	6820      	ldr	r0, [r4, #0]
 800bde0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bde4:	e7b0      	b.n	800bd48 <HAL_SD_GetCardStatus+0x4c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bde6:	0719      	lsls	r1, r3, #28
 800bde8:	d451      	bmi.n	800be8e <HAL_SD_GetCardStatus+0x192>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bdea:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bdec:	079a      	lsls	r2, r3, #30
 800bdee:	d450      	bmi.n	800be92 <HAL_SD_GetCardStatus+0x196>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bdf0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bdf2:	069b      	lsls	r3, r3, #26
 800bdf4:	d50a      	bpl.n	800be0c <HAL_SD_GetCardStatus+0x110>
 800bdf6:	e04e      	b.n	800be96 <HAL_SD_GetCardStatus+0x19a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800bdf8:	f000 fd54 	bl	800c8a4 <SDMMC_ReadFIFO>
 800bdfc:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be00:	f7f7 fbca 	bl	8003598 <HAL_GetTick>
 800be04:	1bc0      	subs	r0, r0, r7
 800be06:	3001      	adds	r0, #1
 800be08:	d0e9      	beq.n	800bdde <HAL_SD_GetCardStatus+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be0a:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800be0c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800be0e:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800be12:	d1f1      	bne.n	800bdf8 <HAL_SD_GetCardStatus+0xfc>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800be14:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800be16:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be18:	4a21      	ldr	r2, [pc, #132]	@ (800bea0 <HAL_SD_GetCardStatus+0x1a4>)
 800be1a:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be1c:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be1e:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be26:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be2a:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be2e:	fa5f f883 	uxtb.w	r8, r3
 800be32:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be36:	fa1f f982 	uxth.w	r9, r2
 800be3a:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be3c:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800be40:	f3c1 1881 	ubfx	r8, r1, #6, #2
 800be44:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800be48:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800be4c:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800be50:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800be54:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800be56:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800be5a:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800be5e:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800be60:	f3cc 2207 	ubfx	r2, ip, #8, #8
 800be64:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800be66:	f3cc 5203 	ubfx	r2, ip, #20, #4
 800be6a:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800be6c:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800be70:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800be72:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800be74:	f3c3 2201 	ubfx	r2, r3, #8, #2
 800be78:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800be7a:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800be7e:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800be82:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800be84:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800be86:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 800be8a:	74ab      	strb	r3, [r5, #18]
 800be8c:	e765      	b.n	800bd5a <HAL_SD_GetCardStatus+0x5e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800be8e:	2308      	movs	r3, #8
 800be90:	e75a      	b.n	800bd48 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800be92:	2302      	movs	r3, #2
 800be94:	e758      	b.n	800bd48 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800be96:	2320      	movs	r3, #32
 800be98:	e756      	b.n	800bd48 <HAL_SD_GetCardStatus+0x4c>
 800be9a:	bf00      	nop
 800be9c:	1fe00fff 	.word	0x1fe00fff
 800bea0:	18000f3a 	.word	0x18000f3a

0800bea4 <HAL_SD_GetCardInfo>:
{
 800bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bea6:	e9d0 e30e 	ldrd	lr, r3, [r0, #56]	@ 0x38
 800beaa:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
 800beae:	e9d0 5412 	ldrd	r5, r4, [r0, #72]	@ 0x48
 800beb2:	e9d0 2014 	ldrd	r2, r0, [r0, #80]	@ 0x50
 800beb6:	e9c1 e300 	strd	lr, r3, [r1]
 800beba:	e9c1 2006 	strd	r2, r0, [r1, #24]
 800bebe:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 800bec2:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bec4:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 800bec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beca:	bf00      	nop

0800becc <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 800becc:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bece:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bed0:	4293      	cmp	r3, r2
{
 800bed2:	b530      	push	{r4, r5, lr}
 800bed4:	4604      	mov	r4, r0
 800bed6:	b089      	sub	sp, #36	@ 0x24
 800bed8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800beda:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800bede:	d041      	beq.n	800bf64 <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800bee0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800bee4:	d03e      	beq.n	800bf64 <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800bee6:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800beea:	d07e      	beq.n	800bfea <HAL_SD_ConfigWideBusOperation+0x11e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800beec:	2900      	cmp	r1, #0
 800beee:	d05d      	beq.n	800bfac <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bef0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bef2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bef6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800befa:	2b00      	cmp	r3, #0
 800befc:	d139      	bne.n	800bf72 <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800befe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800bf02:	2100      	movs	r1, #0
 800bf04:	f7fe feb8 	bl	800ac78 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d048      	beq.n	800bf9e <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bf0c:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bf0e:	4b50      	ldr	r3, [pc, #320]	@ (800c050 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bf10:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800bf12:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bf14:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bf16:	fba3 5300 	umull	r5, r3, r3, r0
 800bf1a:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800bf1c:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bf1e:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bf22:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bf24:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bf28:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800bf2a:	d20e      	bcs.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800bf2c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800bf2e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bf32:	d00a      	beq.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800bf34:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800bf38:	d079      	beq.n	800c02e <HAL_SD_ConfigWideBusOperation+0x162>
        if (hsd->Init.ClockDiv == 0U)
 800bf3a:	b112      	cbz	r2, 800bf42 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800bf3c:	0053      	lsls	r3, r2, #1
 800bf3e:	fbb0 f0f3 	udiv	r0, r0, r3
 800bf42:	4b44      	ldr	r3, [pc, #272]	@ (800c054 <HAL_SD_ConfigWideBusOperation+0x188>)
 800bf44:	4298      	cmp	r0, r3
 800bf46:	bf88      	it	hi
 800bf48:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800bf4a:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800bf4c:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800bf4e:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800bf50:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800bf52:	c903      	ldmia	r1, {r0, r1}
 800bf54:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bf58:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf5a:	6820      	ldr	r0, [r4, #0]
 800bf5c:	f000 fc86 	bl	800c86c <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bf60:	6820      	ldr	r0, [r4, #0]
 800bf62:	e00a      	b.n	800bf7a <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf6a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bf6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0c5      	beq.n	800befe <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf72:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 800bf74:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf76:	4b38      	ldr	r3, [pc, #224]	@ (800c058 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800bf78:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bf7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bf7e:	f000 fcc1 	bl	800c904 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf82:	b130      	cbz	r0, 800bf92 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf84:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800bf86:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf88:	4a33      	ldr	r2, [pc, #204]	@ (800c058 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800bf8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bf8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf8e:	4303      	orrs	r3, r0
 800bf90:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 800bf92:	2301      	movs	r3, #1
}
 800bf94:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800bf96:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 800bf9a:	b009      	add	sp, #36	@ 0x24
 800bf9c:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800bf9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 800bfa0:	2501      	movs	r5, #1
      (void)SDMMC_Init(hsd->Instance, Init);
 800bfa2:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800bfa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bfa8:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 800bfaa:	e7e6      	b.n	800bf7a <HAL_SD_ConfigWideBusOperation+0xae>
  uint32_t scr[2U] = {0UL, 0UL};
 800bfac:	2200      	movs	r2, #0
 800bfae:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfb0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800bfb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfb6:	f000 fc8b 	bl	800c8d0 <SDMMC_GetResponse>
 800bfba:	0182      	lsls	r2, r0, #6
 800bfbc:	d434      	bmi.n	800c028 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800bfbe:	a902      	add	r1, sp, #8
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f7ff fa6d 	bl	800b4a0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfc6:	b960      	cbnz	r0, 800bfe2 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bfc8:	9b03      	ldr	r3, [sp, #12]
 800bfca:	03db      	lsls	r3, r3, #15
 800bfcc:	d535      	bpl.n	800c03a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bfce:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bfd0:	6820      	ldr	r0, [r4, #0]
 800bfd2:	0409      	lsls	r1, r1, #16
 800bfd4:	f001 fa0e 	bl	800d3f4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800bfd8:	b918      	cbnz	r0, 800bfe2 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bfda:	4601      	mov	r1, r0
 800bfdc:	6820      	ldr	r0, [r4, #0]
 800bfde:	f001 faf1 	bl	800d5c4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800bfe2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfe4:	4303      	orrs	r3, r0
 800bfe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfe8:	e7c0      	b.n	800bf6c <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 800bfea:	2200      	movs	r2, #0
 800bfec:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfee:	2100      	movs	r1, #0
 800bff0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800bff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bff6:	f000 fc6b 	bl	800c8d0 <SDMMC_GetResponse>
 800bffa:	0180      	lsls	r0, r0, #6
 800bffc:	d414      	bmi.n	800c028 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800bffe:	a902      	add	r1, sp, #8
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff fa4d 	bl	800b4a0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c006:	2800      	cmp	r0, #0
 800c008:	d1eb      	bne.n	800bfe2 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	0359      	lsls	r1, r3, #13
 800c00e:	d514      	bpl.n	800c03a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c010:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c012:	6820      	ldr	r0, [r4, #0]
 800c014:	0409      	lsls	r1, r1, #16
 800c016:	f001 f9ed 	bl	800d3f4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d1e1      	bne.n	800bfe2 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c01e:	2102      	movs	r1, #2
 800c020:	6820      	ldr	r0, [r4, #0]
 800c022:	f001 facf 	bl	800d5c4 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c026:	e7dc      	b.n	800bfe2 <HAL_SD_ConfigWideBusOperation+0x116>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c028:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c02c:	e7d9      	b.n	800bfe2 <HAL_SD_ConfigWideBusOperation+0x116>
        if (hsd->Init.ClockDiv == 0U)
 800c02e:	b93a      	cbnz	r2, 800c040 <HAL_SD_ConfigWideBusOperation+0x174>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c030:	490a      	ldr	r1, [pc, #40]	@ (800c05c <HAL_SD_ConfigWideBusOperation+0x190>)
 800c032:	4288      	cmp	r0, r1
 800c034:	d989      	bls.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c036:	0e5a      	lsrs	r2, r3, #25
 800c038:	e787      	b.n	800bf4a <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c03a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800c03e:	e7d0      	b.n	800bfe2 <HAL_SD_ConfigWideBusOperation+0x116>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c040:	0051      	lsls	r1, r2, #1
 800c042:	fbb0 f1f1 	udiv	r1, r0, r1
 800c046:	4805      	ldr	r0, [pc, #20]	@ (800c05c <HAL_SD_ConfigWideBusOperation+0x190>)
 800c048:	4281      	cmp	r1, r0
 800c04a:	f67f af7e 	bls.w	800bf4a <HAL_SD_ConfigWideBusOperation+0x7e>
 800c04e:	e7f2      	b.n	800c036 <HAL_SD_ConfigWideBusOperation+0x16a>
 800c050:	55e63b89 	.word	0x55e63b89
 800c054:	017d7840 	.word	0x017d7840
 800c058:	1fe00fff 	.word	0x1fe00fff
 800c05c:	02faf080 	.word	0x02faf080

0800c060 <HAL_SD_Init>:
{
 800c060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c062:	b087      	sub	sp, #28
  if (hsd == NULL)
 800c064:	b168      	cbz	r0, 800c082 <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 800c066:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800c06a:	4604      	mov	r4, r0
 800c06c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c070:	2b00      	cmp	r3, #0
 800c072:	d044      	beq.n	800c0fe <HAL_SD_Init+0x9e>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c074:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c076:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c078:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c07c:	f7ff fd04 	bl	800ba88 <HAL_SD_InitCard>
 800c080:	b118      	cbz	r0, 800c08a <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 800c082:	2601      	movs	r6, #1
}
 800c084:	4630      	mov	r0, r6
 800c086:	b007      	add	sp, #28
 800c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c08a:	a901      	add	r1, sp, #4
 800c08c:	4620      	mov	r0, r4
 800c08e:	f7ff fe35 	bl	800bcfc <HAL_SD_GetCardStatus>
 800c092:	2800      	cmp	r0, #0
 800c094:	d1f5      	bne.n	800c082 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c096:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800c098:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c09c:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c09e:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800c0a2:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c0a4:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c0a6:	d02e      	beq.n	800c106 <HAL_SD_Init+0xa6>
 800c0a8:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c0aa:	68e1      	ldr	r1, [r4, #12]
 800c0ac:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c0ae:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c0b0:	f7ff ff0c 	bl	800becc <HAL_SD_ConfigWideBusOperation>
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d1e3      	bne.n	800c082 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800c0ba:	f7f7 fa6d 	bl	8003598 <HAL_GetTick>
 800c0be:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c0c0:	e007      	b.n	800c0d2 <HAL_SD_Init+0x72>
    hsd->ErrorCode |= errorstate;
 800c0c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0c4:	4303      	orrs	r3, r0
 800c0c6:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c0c8:	f7f7 fa66 	bl	8003598 <HAL_GetTick>
 800c0cc:	1bc3      	subs	r3, r0, r7
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	d020      	beq.n	800c114 <HAL_SD_Init+0xb4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c0d2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c0d4:	6820      	ldr	r0, [r4, #0]
 800c0d6:	0409      	lsls	r1, r1, #16
 800c0d8:	f001 fca4 	bl	800da24 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c0dc:	4605      	mov	r5, r0
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d1ef      	bne.n	800c0c2 <HAL_SD_Init+0x62>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c0e2:	6820      	ldr	r0, [r4, #0]
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f000 fbf3 	bl	800c8d0 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c0ea:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c0ee:	2804      	cmp	r0, #4
 800c0f0:	d1ea      	bne.n	800c0c8 <HAL_SD_Init+0x68>
  hsd->State = HAL_SD_STATE_READY;
 800c0f2:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c0f4:	6365      	str	r5, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c0f6:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800c0f8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 800c0fc:	e7c2      	b.n	800c084 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 800c0fe:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800c100:	f7f6 fefa 	bl	8002ef8 <HAL_SD_MspInit>
 800c104:	e7b6      	b.n	800c074 <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c106:	4313      	orrs	r3, r2
 800c108:	bf14      	ite	ne
 800c10a:	f44f 7300 	movne.w	r3, #512	@ 0x200
 800c10e:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 800c112:	e7ca      	b.n	800c0aa <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c114:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800c118:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800c11a:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c11c:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c11e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c122:	e7af      	b.n	800c084 <HAL_SD_Init+0x24>

0800c124 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c124:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 800c126:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c128:	0409      	lsls	r1, r1, #16
{
 800c12a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c12c:	6800      	ldr	r0, [r0, #0]
 800c12e:	f001 fc79 	bl	800da24 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c132:	4601      	mov	r1, r0
 800c134:	b120      	cbz	r0, 800c140 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800c136:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c138:	2000      	movs	r0, #0
 800c13a:	430b      	orrs	r3, r1
 800c13c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800c13e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c140:	6820      	ldr	r0, [r4, #0]
 800c142:	f000 fbc5 	bl	800c8d0 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c146:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800c14a:	bd10      	pop	{r4, pc}

0800c14c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800c14c:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c14e:	492c      	ldr	r1, [pc, #176]	@ (800c200 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 800c150:	695a      	ldr	r2, [r3, #20]
{
 800c152:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c154:	699c      	ldr	r4, [r3, #24]
 800c156:	f044 0408 	orr.w	r4, r4, #8
 800c15a:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c15c:	699c      	ldr	r4, [r3, #24]
 800c15e:	f044 0410 	orr.w	r4, r4, #16
 800c162:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 800c164:	681c      	ldr	r4, [r3, #0]
 800c166:	f024 0401 	bic.w	r4, r4, #1
 800c16a:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c16c:	691c      	ldr	r4, [r3, #16]
 800c16e:	4021      	ands	r1, r4
 800c170:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c172:	6899      	ldr	r1, [r3, #8]
 800c174:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 800c178:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c17a:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800c17e:	2904      	cmp	r1, #4
 800c180:	d001      	beq.n	800c186 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c182:	0691      	lsls	r1, r2, #26
 800c184:	d430      	bmi.n	800c1e8 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c186:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800c18a:	2903      	cmp	r1, #3
 800c18c:	d001      	beq.n	800c192 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c18e:	0654      	lsls	r4, r2, #25
 800c190:	d41f      	bmi.n	800c1d2 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c192:	0591      	lsls	r1, r2, #22
 800c194:	d509      	bpl.n	800c1aa <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c196:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800c19a:	f041 0101 	orr.w	r1, r1, #1
 800c19e:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c1a2:	6999      	ldr	r1, [r3, #24]
 800c1a4:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800c1a8:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c1aa:	05d2      	lsls	r2, r2, #23
 800c1ac:	d509      	bpl.n	800c1c2 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c1ae:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800c1b2:	f042 0208 	orr.w	r2, r2, #8
 800c1b6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c1ba:	699a      	ldr	r2, [r3, #24]
 800c1bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1c0:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c1c2:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800c1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800c1c8:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c1cc:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 800c1d0:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c1d2:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800c1d6:	f041 0104 	orr.w	r1, r1, #4
 800c1da:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1de:	6999      	ldr	r1, [r3, #24]
 800c1e0:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c1e4:	6199      	str	r1, [r3, #24]
 800c1e6:	e7d4      	b.n	800c192 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c1e8:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800c1ec:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800c1f0:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c1f4:	6999      	ldr	r1, [r3, #24]
 800c1f6:	f041 0120 	orr.w	r1, r1, #32
 800c1fa:	6199      	str	r1, [r3, #24]
 800c1fc:	e7c3      	b.n	800c186 <SPI_CloseTransfer+0x3a>
 800c1fe:	bf00      	nop
 800c200:	fffffc90 	.word	0xfffffc90

0800c204 <HAL_SPI_Init>:
  if (hspi == NULL)
 800c204:	2800      	cmp	r0, #0
 800c206:	f000 80c8 	beq.w	800c39a <HAL_SPI_Init+0x196>
{
 800c20a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c20e:	4604      	mov	r4, r0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c210:	4b67      	ldr	r3, [pc, #412]	@ (800c3b0 <HAL_SPI_Init+0x1ac>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c212:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c214:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c216:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c218:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c21a:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c21c:	d016      	beq.n	800c24c <HAL_SPI_Init+0x48>
 800c21e:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 800c222:	429a      	cmp	r2, r3
 800c224:	d012      	beq.n	800c24c <HAL_SPI_Init+0x48>
 800c226:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c22a:	429a      	cmp	r2, r3
 800c22c:	f000 80ad 	beq.w	800c38a <HAL_SPI_Init+0x186>
 800c230:	290f      	cmp	r1, #15
 800c232:	d808      	bhi.n	800c246 <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c234:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c236:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c23a:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800c23c:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800c23e:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c242:	2b08      	cmp	r3, #8
 800c244:	d90a      	bls.n	800c25c <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 800c246:	2001      	movs	r0, #1
}
 800c248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c24c:	4b58      	ldr	r3, [pc, #352]	@ (800c3b0 <HAL_SPI_Init+0x1ac>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c24e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c250:	429a      	cmp	r2, r3
 800c252:	d06d      	beq.n	800c330 <HAL_SPI_Init+0x12c>
 800c254:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 800c258:	429a      	cmp	r2, r3
 800c25a:	d069      	beq.n	800c330 <HAL_SPI_Init+0x12c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c25c:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800c260:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800c264:	2b00      	cmp	r3, #0
 800c266:	d071      	beq.n	800c34c <HAL_SPI_Init+0x148>
 800c268:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 800c26c:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c26e:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c270:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 800c274:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c278:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 800c27c:	6813      	ldr	r3, [r2, #0]
 800c27e:	f023 0301 	bic.w	r3, r3, #1
 800c282:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c284:	6893      	ldr	r3, [r2, #8]
 800c286:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c28a:	69a3      	ldr	r3, [r4, #24]
 800c28c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c290:	d067      	beq.n	800c362 <HAL_SPI_Init+0x15e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c292:	f1b9 0f00 	cmp.w	r9, #0
 800c296:	d001      	beq.n	800c29c <HAL_SPI_Init+0x98>
 800c298:	2906      	cmp	r1, #6
 800c29a:	d86f      	bhi.n	800c37c <HAL_SPI_Init+0x178>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c29c:	6817      	ldr	r7, [r2, #0]
 800c29e:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800c2a2:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2a4:	4303      	orrs	r3, r0
 800c2a6:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2a8:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2ac:	ea43 030e 	orr.w	r3, r3, lr
 800c2b0:	433b      	orrs	r3, r7
 800c2b2:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800c2b4:	433b      	orrs	r3, r7
 800c2b6:	6927      	ldr	r7, [r4, #16]
 800c2b8:	433b      	orrs	r3, r7
 800c2ba:	6967      	ldr	r7, [r4, #20]
 800c2bc:	433b      	orrs	r3, r7
 800c2be:	6a27      	ldr	r7, [r4, #32]
 800c2c0:	433b      	orrs	r3, r7
 800c2c2:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800c2c4:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2c6:	69e7      	ldr	r7, [r4, #28]
 800c2c8:	4339      	orrs	r1, r7
 800c2ca:	4329      	orrs	r1, r5
 800c2cc:	ea41 010c 	orr.w	r1, r1, ip
 800c2d0:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2d2:	68a1      	ldr	r1, [r4, #8]
 800c2d4:	430b      	orrs	r3, r1
 800c2d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c2e0:	b9c0      	cbnz	r0, 800c314 <HAL_SPI_Init+0x110>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c2e2:	6893      	ldr	r3, [r2, #8]
 800c2e4:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800c2e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c2ec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c2ee:	6893      	ldr	r3, [r2, #8]
 800c2f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c2f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c2f8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c2fc:	f023 0301 	bic.w	r3, r3, #1
 800c300:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c302:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800c304:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c306:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 800c30a:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 800c30c:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 800c310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c314:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c316:	f023 0301 	bic.w	r3, r3, #1
 800c31a:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c31c:	f1b9 0f00 	cmp.w	r9, #0
 800c320:	d0ef      	beq.n	800c302 <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c322:	68d3      	ldr	r3, [r2, #12]
 800c324:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c326:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c32a:	430b      	orrs	r3, r1
 800c32c:	60d3      	str	r3, [r2, #12]
 800c32e:	e7e8      	b.n	800c302 <HAL_SPI_Init+0xfe>
  data_size = (data_size + 7UL) / 8UL;
 800c330:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c334:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800c336:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800c338:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c33c:	2b10      	cmp	r3, #16
 800c33e:	d882      	bhi.n	800c246 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c340:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800c344:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d18d      	bne.n	800c268 <HAL_SPI_Init+0x64>
    HAL_SPI_MspInit(hspi);
 800c34c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800c34e:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800c352:	f7f6 fe63 	bl	800301c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800c356:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c358:	68e1      	ldr	r1, [r4, #12]
 800c35a:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800c35e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800c360:	e784      	b.n	800c26c <HAL_SPI_Init+0x68>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c362:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 800c366:	d01a      	beq.n	800c39e <HAL_SPI_Init+0x19a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c368:	2800      	cmp	r0, #0
 800c36a:	d192      	bne.n	800c292 <HAL_SPI_Init+0x8e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c36c:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 800c370:	d194      	bne.n	800c29c <HAL_SPI_Init+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c372:	6817      	ldr	r7, [r2, #0]
 800c374:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 800c378:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c37a:	e78f      	b.n	800c29c <HAL_SPI_Init+0x98>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c37c:	6817      	ldr	r7, [r2, #0]
 800c37e:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 800c380:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800c384:	4337      	orrs	r7, r6
 800c386:	6017      	str	r7, [r2, #0]
 800c388:	e78c      	b.n	800c2a4 <HAL_SPI_Init+0xa0>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c38a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800c38c:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c390:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800c392:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 800c394:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c398:	e7d0      	b.n	800c33c <HAL_SPI_Init+0x138>
    return HAL_ERROR;
 800c39a:	2001      	movs	r0, #1
}
 800c39c:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c39e:	f1be 0f00 	cmp.w	lr, #0
 800c3a2:	f47f af79 	bne.w	800c298 <HAL_SPI_Init+0x94>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c3a6:	6817      	ldr	r7, [r2, #0]
 800c3a8:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 800c3ac:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c3ae:	e773      	b.n	800c298 <HAL_SPI_Init+0x94>
 800c3b0:	40013000 	.word	0x40013000

0800c3b4 <HAL_SPI_Transmit_DMA>:
  if (hspi->State != HAL_SPI_STATE_READY)
 800c3b4:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d17c      	bne.n	800c4b6 <HAL_SPI_Transmit_DMA+0x102>
  if ((pData == NULL) || (Size == 0UL))
 800c3bc:	2900      	cmp	r1, #0
 800c3be:	f000 80a8 	beq.w	800c512 <HAL_SPI_Transmit_DMA+0x15e>
{
 800c3c2:	b570      	push	{r4, r5, r6, lr}
 800c3c4:	4615      	mov	r5, r2
 800c3c6:	b2da      	uxtb	r2, r3
  if ((pData == NULL) || (Size == 0UL))
 800c3c8:	fab5 f385 	clz	r3, r5
 800c3cc:	095b      	lsrs	r3, r3, #5
 800c3ce:	2d00      	cmp	r5, #0
 800c3d0:	d079      	beq.n	800c4c6 <HAL_SPI_Transmit_DMA+0x112>
 800c3d2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800c3d4:	f890 0080 	ldrb.w	r0, [r0, #128]	@ 0x80
 800c3d8:	2801      	cmp	r0, #1
 800c3da:	f000 8098 	beq.w	800c50e <HAL_SPI_Transmit_DMA+0x15a>
 800c3de:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c3e2:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 800c3e4:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c3e6:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->RxISR       = NULL;
 800c3ea:	6723      	str	r3, [r4, #112]	@ 0x70
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3ec:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->RxISR       = NULL;
 800c3f0:	6763      	str	r3, [r4, #116]	@ 0x74
  hspi->TxXferCount = Size;
 800c3f2:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 800c3f6:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800c3fa:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3fe:	68a3      	ldr	r3, [r4, #8]
    SPI_1LINE_TX(hspi);
 800c400:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c402:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c406:	65e1      	str	r1, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c408:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c40c:	d05d      	beq.n	800c4ca <HAL_SPI_Transmit_DMA+0x116>
    SPI_2LINES_TX(hspi);
 800c40e:	68d3      	ldr	r3, [r2, #12]
 800c410:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 800c414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c418:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c41a:	68e3      	ldr	r3, [r4, #12]
 800c41c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800c41e:	2b0f      	cmp	r3, #15
 800c420:	6986      	ldr	r6, [r0, #24]
 800c422:	d84a      	bhi.n	800c4ba <HAL_SPI_Transmit_DMA+0x106>
 800c424:	2b07      	cmp	r3, #7
 800c426:	d861      	bhi.n	800c4ec <HAL_SPI_Transmit_DMA+0x138>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c428:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800c42c:	d067      	beq.n	800c4fe <HAL_SPI_Transmit_DMA+0x14a>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c42e:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c432:	d106      	bne.n	800c442 <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800c434:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800c438:	b29b      	uxth	r3, r3
 800c43a:	3303      	adds	r3, #3
 800c43c:	089b      	lsrs	r3, r3, #2
 800c43e:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c442:	4e35      	ldr	r6, [pc, #212]	@ (800c518 <HAL_SPI_Transmit_DMA+0x164>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c444:	3220      	adds	r2, #32
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c446:	f852 3c18 	ldr.w	r3, [r2, #-24]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c44a:	6406      	str	r6, [r0, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c44c:	4e33      	ldr	r6, [pc, #204]	@ (800c51c <HAL_SPI_Transmit_DMA+0x168>)
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c44e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c452:	63c6      	str	r6, [r0, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c454:	4e32      	ldr	r6, [pc, #200]	@ (800c520 <HAL_SPI_Transmit_DMA+0x16c>)
 800c456:	64c6      	str	r6, [r0, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800c458:	2600      	movs	r6, #0
 800c45a:	6506      	str	r6, [r0, #80]	@ 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c45c:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
 800c460:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800c464:	b29b      	uxth	r3, r3
 800c466:	f7f8 fc4b 	bl	8004d00 <HAL_DMA_Start_IT>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d132      	bne.n	800c4d4 <HAL_SPI_Transmit_DMA+0x120>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c46e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c470:	6823      	ldr	r3, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c472:	69d2      	ldr	r2, [r2, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c474:	6859      	ldr	r1, [r3, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c476:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800c47a:	4a2a      	ldr	r2, [pc, #168]	@ (800c524 <HAL_SPI_Transmit_DMA+0x170>)
 800c47c:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c480:	bf18      	it	ne
 800c482:	432a      	orrne	r2, r5
 800c484:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c486:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c488:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c48a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c48e:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800c492:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800c494:	691a      	ldr	r2, [r3, #16]
 800c496:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800c49a:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	f042 0201 	orr.w	r2, r2, #1
 800c4a2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4a4:	d103      	bne.n	800c4ae <HAL_SPI_Transmit_DMA+0xfa>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4ac:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800c4b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c4b6:	2002      	movs	r0, #2
 800c4b8:	4770      	bx	lr
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800c4ba:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c4be:	d0c0      	beq.n	800c442 <HAL_SPI_Transmit_DMA+0x8e>
    __HAL_UNLOCK(hspi);
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    return HAL_ERROR;
 800c4c6:	2001      	movs	r0, #1
}
 800c4c8:	bd70      	pop	{r4, r5, r6, pc}
    SPI_1LINE_TX(hspi);
 800c4ca:	6813      	ldr	r3, [r2, #0]
 800c4cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	e7a2      	b.n	800c41a <HAL_SPI_Transmit_DMA+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c4d8:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800c4da:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4de:	f043 0310 	orr.w	r3, r3, #16
 800c4e2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c4e6:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    return HAL_ERROR;
 800c4ea:	e7ec      	b.n	800c4c6 <HAL_SPI_Transmit_DMA+0x112>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800c4ec:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c4f0:	d005      	beq.n	800c4fe <HAL_SPI_Transmit_DMA+0x14a>
 800c4f2:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800c4f6:	d1e3      	bne.n	800c4c0 <HAL_SPI_Transmit_DMA+0x10c>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800c4f8:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
 800c4fc:	d1a1      	bne.n	800c442 <HAL_SPI_Transmit_DMA+0x8e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800c4fe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800c502:	b29b      	uxth	r3, r3
 800c504:	3301      	adds	r3, #1
 800c506:	085b      	lsrs	r3, r3, #1
 800c508:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800c50c:	e799      	b.n	800c442 <HAL_SPI_Transmit_DMA+0x8e>
    return HAL_BUSY;
 800c50e:	2002      	movs	r0, #2
}
 800c510:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800c512:	2001      	movs	r0, #1
}
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop
 800c518:	0800c55d 	.word	0x0800c55d
 800c51c:	0800c529 	.word	0x0800c529
 800c520:	0800c56d 	.word	0x0800c56d
 800c524:	ffff0000 	.word	0xffff0000

0800c528 <SPI_DMATransmitCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c528:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800c52a:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c52c:	f890 3081 	ldrb.w	r3, [r0, #129]	@ 0x81
 800c530:	2b07      	cmp	r3, #7
 800c532:	d009      	beq.n	800c548 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800c534:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800c536:	69db      	ldr	r3, [r3, #28]
 800c538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c53c:	d005      	beq.n	800c54a <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c53e:	6802      	ldr	r2, [r0, #0]
 800c540:	6913      	ldr	r3, [r2, #16]
 800c542:	f043 0308 	orr.w	r3, r3, #8
 800c546:	6113      	str	r3, [r2, #16]
}
 800c548:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 800c54a:	f7f6 fc23 	bl	8002d94 <HAL_SPI_TxCpltCallback>
}
 800c54e:	bd08      	pop	{r3, pc}

0800c550 <HAL_SPI_RxCpltCallback>:
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop

0800c554 <HAL_SPI_TxRxCpltCallback>:
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop

0800c558 <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop

0800c55c <SPI_DMAHalfTransmitCplt>:
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c55c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800c55e:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c560:	f7ff fffa 	bl	800c558 <HAL_SPI_TxHalfCpltCallback>
}
 800c564:	bd08      	pop	{r3, pc}
 800c566:	bf00      	nop

0800c568 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop

0800c56c <SPI_DMAError>:
{
 800c56c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c56e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c570:	f7f9 fc72 	bl	8005e58 <HAL_DMA_GetError>
 800c574:	2802      	cmp	r0, #2
 800c576:	d100      	bne.n	800c57a <SPI_DMAError+0xe>
}
 800c578:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800c57a:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c57c:	4930      	ldr	r1, [pc, #192]	@ (800c640 <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
 800c57e:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c580:	6998      	ldr	r0, [r3, #24]
 800c582:	f040 0008 	orr.w	r0, r0, #8
 800c586:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c588:	6998      	ldr	r0, [r3, #24]
 800c58a:	f040 0010 	orr.w	r0, r0, #16
 800c58e:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 800c590:	6818      	ldr	r0, [r3, #0]
 800c592:	f020 0001 	bic.w	r0, r0, #1
 800c596:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c598:	6918      	ldr	r0, [r3, #16]
 800c59a:	4001      	ands	r1, r0
 800c59c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c59e:	6899      	ldr	r1, [r3, #8]
 800c5a0:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 800c5a4:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c5a6:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800c5aa:	2904      	cmp	r1, #4
 800c5ac:	d001      	beq.n	800c5b2 <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c5ae:	0691      	lsls	r1, r2, #26
 800c5b0:	d43a      	bmi.n	800c628 <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c5b2:	f894 1081 	ldrb.w	r1, [r4, #129]	@ 0x81
 800c5b6:	2903      	cmp	r1, #3
 800c5b8:	d001      	beq.n	800c5be <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c5ba:	0650      	lsls	r0, r2, #25
 800c5bc:	d429      	bmi.n	800c612 <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c5be:	0591      	lsls	r1, r2, #22
 800c5c0:	d509      	bpl.n	800c5d6 <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c5c2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c5c6:	f041 0101 	orr.w	r1, r1, #1
 800c5ca:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c5ce:	6999      	ldr	r1, [r3, #24]
 800c5d0:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800c5d4:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c5d6:	05d2      	lsls	r2, r2, #23
 800c5d8:	d509      	bpl.n	800c5ee <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c5da:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800c5de:	f042 0208 	orr.w	r2, r2, #8
 800c5e2:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c5e6:	699a      	ldr	r2, [r3, #24]
 800c5e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c5ec:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800c5ee:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800c5f0:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800c5f2:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800c5f4:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c5f8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c5fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c600:	f043 0310 	orr.w	r3, r3, #16
 800c604:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800c608:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
    HAL_SPI_ErrorCallback(hspi);
 800c60c:	f7ff ffac 	bl	800c568 <HAL_SPI_ErrorCallback>
}
 800c610:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c612:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c616:	f041 0104 	orr.w	r1, r1, #4
 800c61a:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c61e:	6999      	ldr	r1, [r3, #24]
 800c620:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c624:	6199      	str	r1, [r3, #24]
 800c626:	e7ca      	b.n	800c5be <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c628:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c62c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800c630:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c634:	6999      	ldr	r1, [r3, #24]
 800c636:	f041 0120 	orr.w	r1, r1, #32
 800c63a:	6199      	str	r1, [r3, #24]
 800c63c:	e7b9      	b.n	800c5b2 <SPI_DMAError+0x46>
 800c63e:	bf00      	nop
 800c640:	fffffc90 	.word	0xfffffc90

0800c644 <SPI_DMAAbortOnError>:
{
 800c644:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c646:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800c648:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c64a:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 800c64c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c650:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800c654:	f880 2081 	strb.w	r2, [r0, #129]	@ 0x81
  HAL_SPI_ErrorCallback(hspi);
 800c658:	f7ff ff86 	bl	800c568 <HAL_SPI_ErrorCallback>
}
 800c65c:	bd08      	pop	{r3, pc}
 800c65e:	bf00      	nop

0800c660 <HAL_SPI_SuspendCallback>:
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop

0800c664 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 800c664:	6803      	ldr	r3, [r0, #0]
{
 800c666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800c66a:	691e      	ldr	r6, [r3, #16]
{
 800c66c:	4604      	mov	r4, r0
  uint32_t itflag   = hspi->Instance->SR;
 800c66e:	6959      	ldr	r1, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c670:	f8d3 c008 	ldr.w	ip, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 800c674:	ea06 0201 	and.w	r2, r6, r1
  HAL_SPI_StateTypeDef State = hspi->State;
 800c678:	f890 5081 	ldrb.w	r5, [r0, #129]	@ 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c67c:	0509      	lsls	r1, r1, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800c67e:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c680:	d502      	bpl.n	800c688 <HAL_SPI_IRQHandler+0x24>
 800c682:	0737      	lsls	r7, r6, #28
 800c684:	f100 80cd 	bmi.w	800c822 <HAL_SPI_IRQHandler+0x1be>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c688:	f002 0164 	and.w	r1, r2, #100	@ 0x64
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c68c:	f002 0745 	and.w	r7, r2, #69	@ 0x45
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c690:	f002 0626 	and.w	r6, r2, #38	@ 0x26
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c694:	2904      	cmp	r1, #4
 800c696:	d039      	beq.n	800c70c <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c698:	2f01      	cmp	r7, #1
 800c69a:	d03f      	beq.n	800c71c <HAL_SPI_IRQHandler+0xb8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c69c:	2e02      	cmp	r6, #2
 800c69e:	f000 80d6 	beq.w	800c84e <HAL_SPI_IRQHandler+0x1ea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c6a2:	0716      	lsls	r6, r2, #28
 800c6a4:	d557      	bpl.n	800c756 <HAL_SPI_IRQHandler+0xf2>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c6a6:	699a      	ldr	r2, [r3, #24]
 800c6a8:	f042 0208 	orr.w	r2, r2, #8
 800c6ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c6ae:	699a      	ldr	r2, [r3, #24]
 800c6b0:	f042 0210 	orr.w	r2, r2, #16
 800c6b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c6b6:	699a      	ldr	r2, [r3, #24]
 800c6b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c6be:	691a      	ldr	r2, [r3, #16]
 800c6c0:	f022 0208 	bic.w	r2, r2, #8
 800c6c4:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c6c6:	689a      	ldr	r2, [r3, #8]
 800c6c8:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 800c6cc:	d12e      	bne.n	800c72c <HAL_SPI_IRQHandler+0xc8>
      while (hspi->RxXferCount != 0UL)
 800c6ce:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800c6d2:	b292      	uxth	r2, r2
 800c6d4:	b352      	cbz	r2, 800c72c <HAL_SPI_IRQHandler+0xc8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c6d6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800c6d8:	e00e      	b.n	800c6f8 <HAL_SPI_IRQHandler+0x94>
 800c6da:	6822      	ldr	r2, [r4, #0]
 800c6dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c6de:	f841 2b04 	str.w	r2, [r1], #4
        hspi->RxXferCount--;
 800c6e2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c6e6:	6661      	str	r1, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 800c6e8:	3a01      	subs	r2, #1
 800c6ea:	b292      	uxth	r2, r2
 800c6ec:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c6f0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800c6f4:	b292      	uxth	r2, r2
 800c6f6:	b1ca      	cbz	r2, 800c72c <HAL_SPI_IRQHandler+0xc8>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c6f8:	68e2      	ldr	r2, [r4, #12]
 800c6fa:	2a0f      	cmp	r2, #15
 800c6fc:	d8ed      	bhi.n	800c6da <HAL_SPI_IRQHandler+0x76>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6fe:	2a07      	cmp	r2, #7
 800c700:	f240 809e 	bls.w	800c840 <HAL_SPI_IRQHandler+0x1dc>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c704:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800c706:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c70a:	e7ea      	b.n	800c6e2 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 800c70c:	4620      	mov	r0, r4
 800c70e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c710:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c712:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c714:	4620      	mov	r0, r4
 800c716:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c718:	2f01      	cmp	r7, #1
 800c71a:	d102      	bne.n	800c722 <HAL_SPI_IRQHandler+0xbe>
    hspi->RxISR(hspi);
 800c71c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c71e:	4620      	mov	r0, r4
 800c720:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c722:	2e02      	cmp	r6, #2
 800c724:	f000 8093 	beq.w	800c84e <HAL_SPI_IRQHandler+0x1ea>
}
 800c728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800c72c:	4620      	mov	r0, r4
 800c72e:	f7ff fd0d 	bl	800c14c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800c732:	2301      	movs	r3, #1
 800c734:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c738:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d17c      	bne.n	800c83a <HAL_SPI_IRQHandler+0x1d6>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c740:	2d05      	cmp	r5, #5
 800c742:	f000 8089 	beq.w	800c858 <HAL_SPI_IRQHandler+0x1f4>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c746:	2d04      	cmp	r5, #4
 800c748:	f000 8089 	beq.w	800c85e <HAL_SPI_IRQHandler+0x1fa>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c74c:	2d03      	cmp	r5, #3
 800c74e:	d1eb      	bne.n	800c728 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_TxCpltCallback(hspi);
 800c750:	f7f6 fb20 	bl	8002d94 <HAL_SPI_TxCpltCallback>
 800c754:	e7e8      	b.n	800c728 <HAL_SPI_IRQHandler+0xc4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c756:	f412 7f58 	tst.w	r2, #864	@ 0x360
 800c75a:	d0e5      	beq.n	800c728 <HAL_SPI_IRQHandler+0xc4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c75c:	0655      	lsls	r5, r2, #25
 800c75e:	d509      	bpl.n	800c774 <HAL_SPI_IRQHandler+0x110>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c760:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c764:	f041 0104 	orr.w	r1, r1, #4
 800c768:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c76c:	6999      	ldr	r1, [r3, #24]
 800c76e:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 800c772:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c774:	0590      	lsls	r0, r2, #22
 800c776:	d509      	bpl.n	800c78c <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c778:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c77c:	f041 0101 	orr.w	r1, r1, #1
 800c780:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c784:	6999      	ldr	r1, [r3, #24]
 800c786:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800c78a:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c78c:	05d1      	lsls	r1, r2, #23
 800c78e:	d509      	bpl.n	800c7a4 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c790:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800c794:	f041 0108 	orr.w	r1, r1, #8
 800c798:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c79c:	6999      	ldr	r1, [r3, #24]
 800c79e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800c7a2:	6199      	str	r1, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c7a4:	0692      	lsls	r2, r2, #26
 800c7a6:	d509      	bpl.n	800c7bc <HAL_SPI_IRQHandler+0x158>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c7a8:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800c7ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c7b0:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	f042 0220 	orr.w	r2, r2, #32
 800c7ba:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7bc:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	d0b1      	beq.n	800c728 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE(hspi);
 800c7c4:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c7c6:	f40c 4c40 	and.w	ip, ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c7ca:	4a26      	ldr	r2, [pc, #152]	@ (800c864 <HAL_SPI_IRQHandler+0x200>)
      __HAL_SPI_DISABLE(hspi);
 800c7cc:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c7d0:	f5bc 4f40 	cmp.w	ip, #49152	@ 0xc000
      __HAL_SPI_DISABLE(hspi);
 800c7d4:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c7d6:	6919      	ldr	r1, [r3, #16]
 800c7d8:	ea02 0201 	and.w	r2, r2, r1
 800c7dc:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c7de:	d128      	bne.n	800c832 <HAL_SPI_IRQHandler+0x1ce>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c7e0:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800c7e2:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c7e4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c7e8:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800c7ea:	b150      	cbz	r0, 800c802 <HAL_SPI_IRQHandler+0x19e>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c7ec:	4b1e      	ldr	r3, [pc, #120]	@ (800c868 <HAL_SPI_IRQHandler+0x204>)
 800c7ee:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c7f0:	f7f8 ff08 	bl	8005604 <HAL_DMA_Abort_IT>
 800c7f4:	b128      	cbz	r0, 800c802 <HAL_SPI_IRQHandler+0x19e>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c7f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7fe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        if (hspi->hdmatx != NULL)
 800c802:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800c804:	2800      	cmp	r0, #0
 800c806:	d08f      	beq.n	800c728 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c808:	4b17      	ldr	r3, [pc, #92]	@ (800c868 <HAL_SPI_IRQHandler+0x204>)
 800c80a:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c80c:	f7f8 fefa 	bl	8005604 <HAL_DMA_Abort_IT>
 800c810:	2800      	cmp	r0, #0
 800c812:	d089      	beq.n	800c728 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c814:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c81c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800c820:	e782      	b.n	800c728 <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c822:	699a      	ldr	r2, [r3, #24]
 800c824:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c828:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 800c82a:	f7ff ff19 	bl	800c660 <HAL_SPI_SuspendCallback>
}
 800c82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800c832:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800c834:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800c836:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c83a:	f7ff fe95 	bl	800c568 <HAL_SPI_ErrorCallback>
 800c83e:	e773      	b.n	800c728 <HAL_SPI_IRQHandler+0xc4>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c840:	6822      	ldr	r2, [r4, #0]
 800c842:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800c846:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c848:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800c84a:	3101      	adds	r1, #1
 800c84c:	e749      	b.n	800c6e2 <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 800c84e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c850:	4620      	mov	r0, r4
}
 800c852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800c856:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800c858:	f7ff fe7c 	bl	800c554 <HAL_SPI_TxRxCpltCallback>
 800c85c:	e764      	b.n	800c728 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_RxCpltCallback(hspi);
 800c85e:	f7ff fe77 	bl	800c550 <HAL_SPI_RxCpltCallback>
 800c862:	e761      	b.n	800c728 <HAL_SPI_IRQHandler+0xc4>
 800c864:	fffffc94 	.word	0xfffffc94
 800c868:	0800c645 	.word	0x0800c645

0800c86c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c86c:	b084      	sub	sp, #16
 800c86e:	b410      	push	{r4}
 800c870:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c874:	4614      	mov	r4, r2
{
 800c876:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800c87a:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800c87c:	9904      	ldr	r1, [sp, #16]
{
 800c87e:	4602      	mov	r2, r0
             Init.BusWide             | \
 800c880:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800c882:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c884:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800c886:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800c888:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800c88a:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800c88c:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800c88e:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c890:	4903      	ldr	r1, [pc, #12]	@ (800c8a0 <SDMMC_Init+0x34>)
 800c892:	4021      	ands	r1, r4
}
 800c894:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c898:	430b      	orrs	r3, r1
}
 800c89a:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c89c:	6053      	str	r3, [r2, #4]
}
 800c89e:	4770      	bx	lr
 800c8a0:	ffc02c00 	.word	0xffc02c00

0800c8a4 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c8a4:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop

0800c8ac <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c8ac:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c8ae:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800c8b0:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800c8b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800c8b6:	4770      	bx	lr

0800c8b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c8b8:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800c8ba:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	f042 0203 	orr.w	r2, r2, #3
 800c8c2:	601a      	str	r2, [r3, #0]
}
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop

0800c8c8 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c8c8:	6800      	ldr	r0, [r0, #0]
}
 800c8ca:	f000 0003 	and.w	r0, r0, #3
 800c8ce:	4770      	bx	lr

0800c8d0 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c8d0:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800c8d2:	5840      	ldr	r0, [r0, r1]
}
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop

0800c8d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c8d8:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c8da:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 800c8de:	690d      	ldr	r5, [r1, #16]
{
 800c8e0:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c8e2:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c8e4:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 800c8e6:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c8e8:	6250      	str	r0, [r2, #36]	@ 0x24
                       Data->TransferDir   | \
 800c8ea:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800c8ec:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 800c8ee:	6294      	str	r4, [r2, #40]	@ 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c8f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
                       Data->TransferMode  | \
 800c8f2:	4303      	orrs	r3, r0

  return HAL_OK;

}
 800c8f4:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c8f6:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800c8fa:	430b      	orrs	r3, r1
}
 800c8fc:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c8fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop

0800c904 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c904:	4a4f      	ldr	r2, [pc, #316]	@ (800ca44 <SDMMC_CmdBlockLength+0x140>)
{
 800c906:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c908:	4b4f      	ldr	r3, [pc, #316]	@ (800ca48 <SDMMC_CmdBlockLength+0x144>)
 800c90a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c90c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c910:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c914:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c918:	484c      	ldr	r0, [pc, #304]	@ (800ca4c <SDMMC_CmdBlockLength+0x148>)
 800c91a:	f241 1310 	movw	r3, #4368	@ 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c91e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c920:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c922:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c926:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c928:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c92c:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800c930:	1e53      	subs	r3, r2, #1
 800c932:	b14a      	cbz	r2, 800c948 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c934:	4946      	ldr	r1, [pc, #280]	@ (800ca50 <SDMMC_CmdBlockLength+0x14c>)
    sta_reg = SDMMCx->STA;
 800c936:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800c93a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c93c:	420a      	tst	r2, r1
 800c93e:	d001      	beq.n	800c944 <SDMMC_CmdBlockLength+0x40>
 800c940:	0492      	lsls	r2, r2, #18
 800c942:	d504      	bpl.n	800c94e <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800c944:	1c58      	adds	r0, r3, #1
 800c946:	d1f6      	bne.n	800c936 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c948:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c94c:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c94e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c952:	075b      	lsls	r3, r3, #29
 800c954:	d443      	bmi.n	800c9de <SDMMC_CmdBlockLength+0xda>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c956:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800c95a:	07d8      	lsls	r0, r3, #31
 800c95c:	d409      	bmi.n	800c972 <SDMMC_CmdBlockLength+0x6e>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c95e:	4b3d      	ldr	r3, [pc, #244]	@ (800ca54 <SDMMC_CmdBlockLength+0x150>)
 800c960:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c964:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b10      	cmp	r3, #16
 800c96c:	d005      	beq.n	800c97a <SDMMC_CmdBlockLength+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c96e:	2001      	movs	r0, #1
 800c970:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c972:	2301      	movs	r3, #1
 800c974:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c978:	e7f9      	b.n	800c96e <SDMMC_CmdBlockLength+0x6a>
  return (*(__IO uint32_t *) tmp);
 800c97a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c97e:	4836      	ldr	r0, [pc, #216]	@ (800ca58 <SDMMC_CmdBlockLength+0x154>)
 800c980:	4018      	ands	r0, r3
 800c982:	b358      	cbz	r0, 800c9dc <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c984:	2b00      	cmp	r3, #0
 800c986:	db2f      	blt.n	800c9e8 <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c988:	0059      	lsls	r1, r3, #1
 800c98a:	d430      	bmi.n	800c9ee <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c98c:	009a      	lsls	r2, r3, #2
 800c98e:	d430      	bmi.n	800c9f2 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c990:	00d9      	lsls	r1, r3, #3
 800c992:	d430      	bmi.n	800c9f6 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c994:	011a      	lsls	r2, r3, #4
 800c996:	d431      	bmi.n	800c9fc <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c998:	0159      	lsls	r1, r3, #5
 800c99a:	d432      	bmi.n	800ca02 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c99c:	01da      	lsls	r2, r3, #7
 800c99e:	d433      	bmi.n	800ca08 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c9a0:	0219      	lsls	r1, r3, #8
 800c9a2:	d434      	bmi.n	800ca0e <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c9a4:	025a      	lsls	r2, r3, #9
 800c9a6:	d435      	bmi.n	800ca14 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c9a8:	0299      	lsls	r1, r3, #10
 800c9aa:	d43f      	bmi.n	800ca2c <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c9ac:	02da      	lsls	r2, r3, #11
 800c9ae:	d43a      	bmi.n	800ca26 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c9b0:	0359      	lsls	r1, r3, #13
 800c9b2:	d435      	bmi.n	800ca20 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c9b4:	039a      	lsls	r2, r3, #14
 800c9b6:	d430      	bmi.n	800ca1a <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c9b8:	03d9      	lsls	r1, r3, #15
 800c9ba:	d440      	bmi.n	800ca3e <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c9bc:	041a      	lsls	r2, r3, #16
 800c9be:	d43b      	bmi.n	800ca38 <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c9c0:	0459      	lsls	r1, r3, #17
 800c9c2:	d436      	bmi.n	800ca32 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c9c4:	049a      	lsls	r2, r3, #18
 800c9c6:	d407      	bmi.n	800c9d8 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c9c8:	f013 0f08 	tst.w	r3, #8
 800c9cc:	bf0c      	ite	eq
 800c9ce:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800c9d2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800c9d6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c9d8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800c9dc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9de:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9e0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9e2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9e6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c9e8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800c9ec:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c9ee:	2040      	movs	r0, #64	@ 0x40
 800c9f0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c9f2:	2080      	movs	r0, #128	@ 0x80
 800c9f4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c9f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c9fa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c9fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ca00:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca02:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ca06:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca08:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ca0c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca0e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ca12:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ca18:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ca1a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ca1e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ca20:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800ca24:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800ca26:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ca2a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ca2c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ca30:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ca32:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ca36:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ca38:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ca3c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ca3e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ca42:	4770      	bx	lr
 800ca44:	2400000c 	.word	0x2400000c
 800ca48:	10624dd3 	.word	0x10624dd3
 800ca4c:	fffee0c0 	.word	0xfffee0c0
 800ca50:	00200045 	.word	0x00200045
 800ca54:	002000c5 	.word	0x002000c5
 800ca58:	fdffe008 	.word	0xfdffe008

0800ca5c <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca5c:	4a4f      	ldr	r2, [pc, #316]	@ (800cb9c <SDMMC_CmdReadSingleBlock+0x140>)
{
 800ca5e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca60:	4b4f      	ldr	r3, [pc, #316]	@ (800cba0 <SDMMC_CmdReadSingleBlock+0x144>)
 800ca62:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ca64:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca68:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca6c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ca70:	484c      	ldr	r0, [pc, #304]	@ (800cba4 <SDMMC_CmdReadSingleBlock+0x148>)
 800ca72:	f241 1311 	movw	r3, #4369	@ 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca76:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca78:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca7a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca7e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca80:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca84:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800ca88:	1e53      	subs	r3, r2, #1
 800ca8a:	b14a      	cbz	r2, 800caa0 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ca8c:	4946      	ldr	r1, [pc, #280]	@ (800cba8 <SDMMC_CmdReadSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800ca8e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800ca92:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ca94:	420a      	tst	r2, r1
 800ca96:	d001      	beq.n	800ca9c <SDMMC_CmdReadSingleBlock+0x40>
 800ca98:	0492      	lsls	r2, r2, #18
 800ca9a:	d504      	bpl.n	800caa6 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800ca9c:	1c58      	adds	r0, r3, #1
 800ca9e:	d1f6      	bne.n	800ca8e <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800caa0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800caa4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800caa6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800caaa:	075b      	lsls	r3, r3, #29
 800caac:	d443      	bmi.n	800cb36 <SDMMC_CmdReadSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800caae:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800cab2:	07d8      	lsls	r0, r3, #31
 800cab4:	d409      	bmi.n	800caca <SDMMC_CmdReadSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cab6:	4b3d      	ldr	r3, [pc, #244]	@ (800cbac <SDMMC_CmdReadSingleBlock+0x150>)
 800cab8:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cabc:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b11      	cmp	r3, #17
 800cac4:	d005      	beq.n	800cad2 <SDMMC_CmdReadSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cac6:	2001      	movs	r0, #1
 800cac8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800caca:	2301      	movs	r3, #1
 800cacc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cad0:	e7f9      	b.n	800cac6 <SDMMC_CmdReadSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800cad2:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cad6:	4836      	ldr	r0, [pc, #216]	@ (800cbb0 <SDMMC_CmdReadSingleBlock+0x154>)
 800cad8:	4018      	ands	r0, r3
 800cada:	b358      	cbz	r0, 800cb34 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cadc:	2b00      	cmp	r3, #0
 800cade:	db2f      	blt.n	800cb40 <SDMMC_CmdReadSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cae0:	0059      	lsls	r1, r3, #1
 800cae2:	d430      	bmi.n	800cb46 <SDMMC_CmdReadSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cae4:	009a      	lsls	r2, r3, #2
 800cae6:	d430      	bmi.n	800cb4a <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cae8:	00d9      	lsls	r1, r3, #3
 800caea:	d430      	bmi.n	800cb4e <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800caec:	011a      	lsls	r2, r3, #4
 800caee:	d431      	bmi.n	800cb54 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800caf0:	0159      	lsls	r1, r3, #5
 800caf2:	d432      	bmi.n	800cb5a <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800caf4:	01da      	lsls	r2, r3, #7
 800caf6:	d433      	bmi.n	800cb60 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800caf8:	0219      	lsls	r1, r3, #8
 800cafa:	d434      	bmi.n	800cb66 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cafc:	025a      	lsls	r2, r3, #9
 800cafe:	d435      	bmi.n	800cb6c <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb00:	0299      	lsls	r1, r3, #10
 800cb02:	d43f      	bmi.n	800cb84 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb04:	02da      	lsls	r2, r3, #11
 800cb06:	d43a      	bmi.n	800cb7e <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb08:	0359      	lsls	r1, r3, #13
 800cb0a:	d435      	bmi.n	800cb78 <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cb0c:	039a      	lsls	r2, r3, #14
 800cb0e:	d430      	bmi.n	800cb72 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cb10:	03d9      	lsls	r1, r3, #15
 800cb12:	d440      	bmi.n	800cb96 <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cb14:	041a      	lsls	r2, r3, #16
 800cb16:	d43b      	bmi.n	800cb90 <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cb18:	0459      	lsls	r1, r3, #17
 800cb1a:	d436      	bmi.n	800cb8a <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb1c:	049a      	lsls	r2, r3, #18
 800cb1e:	d407      	bmi.n	800cb30 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cb20:	f013 0f08 	tst.w	r3, #8
 800cb24:	bf0c      	ite	eq
 800cb26:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800cb2a:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800cb2e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800cb30:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800cb34:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb36:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb38:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb3a:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb3e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cb40:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800cb44:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb46:	2040      	movs	r0, #64	@ 0x40
 800cb48:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb4a:	2080      	movs	r0, #128	@ 0x80
 800cb4c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb4e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800cb52:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800cb58:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb5a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cb5e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb60:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cb64:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb66:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800cb6a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800cb70:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cb72:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800cb76:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cb78:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800cb7c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800cb7e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cb82:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cb84:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cb88:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cb8a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800cb8e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cb90:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800cb94:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cb96:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800cb9a:	4770      	bx	lr
 800cb9c:	2400000c 	.word	0x2400000c
 800cba0:	10624dd3 	.word	0x10624dd3
 800cba4:	fffee0c0 	.word	0xfffee0c0
 800cba8:	00200045 	.word	0x00200045
 800cbac:	002000c5 	.word	0x002000c5
 800cbb0:	fdffe008 	.word	0xfdffe008

0800cbb4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbb4:	4a4f      	ldr	r2, [pc, #316]	@ (800ccf4 <SDMMC_CmdReadMultiBlock+0x140>)
{
 800cbb6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbb8:	4b4f      	ldr	r3, [pc, #316]	@ (800ccf8 <SDMMC_CmdReadMultiBlock+0x144>)
 800cbba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800cbbc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbc0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbc4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800cbc8:	484c      	ldr	r0, [pc, #304]	@ (800ccfc <SDMMC_CmdReadMultiBlock+0x148>)
 800cbca:	f241 1312 	movw	r3, #4370	@ 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbd0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbd2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbd6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbd8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbdc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800cbe0:	1e53      	subs	r3, r2, #1
 800cbe2:	b14a      	cbz	r2, 800cbf8 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cbe4:	4946      	ldr	r1, [pc, #280]	@ (800cd00 <SDMMC_CmdReadMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800cbe6:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800cbea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cbec:	420a      	tst	r2, r1
 800cbee:	d001      	beq.n	800cbf4 <SDMMC_CmdReadMultiBlock+0x40>
 800cbf0:	0492      	lsls	r2, r2, #18
 800cbf2:	d504      	bpl.n	800cbfe <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800cbf4:	1c58      	adds	r0, r3, #1
 800cbf6:	d1f6      	bne.n	800cbe6 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800cbf8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800cbfc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbfe:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800cc02:	075b      	lsls	r3, r3, #29
 800cc04:	d443      	bmi.n	800cc8e <SDMMC_CmdReadMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc06:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800cc0a:	07d8      	lsls	r0, r3, #31
 800cc0c:	d409      	bmi.n	800cc22 <SDMMC_CmdReadMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc0e:	4b3d      	ldr	r3, [pc, #244]	@ (800cd04 <SDMMC_CmdReadMultiBlock+0x150>)
 800cc10:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cc14:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b12      	cmp	r3, #18
 800cc1c:	d005      	beq.n	800cc2a <SDMMC_CmdReadMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc1e:	2001      	movs	r0, #1
 800cc20:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc22:	2301      	movs	r3, #1
 800cc24:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc28:	e7f9      	b.n	800cc1e <SDMMC_CmdReadMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800cc2a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cc2e:	4836      	ldr	r0, [pc, #216]	@ (800cd08 <SDMMC_CmdReadMultiBlock+0x154>)
 800cc30:	4018      	ands	r0, r3
 800cc32:	b358      	cbz	r0, 800cc8c <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	db2f      	blt.n	800cc98 <SDMMC_CmdReadMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cc38:	0059      	lsls	r1, r3, #1
 800cc3a:	d430      	bmi.n	800cc9e <SDMMC_CmdReadMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cc3c:	009a      	lsls	r2, r3, #2
 800cc3e:	d430      	bmi.n	800cca2 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cc40:	00d9      	lsls	r1, r3, #3
 800cc42:	d430      	bmi.n	800cca6 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cc44:	011a      	lsls	r2, r3, #4
 800cc46:	d431      	bmi.n	800ccac <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cc48:	0159      	lsls	r1, r3, #5
 800cc4a:	d432      	bmi.n	800ccb2 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cc4c:	01da      	lsls	r2, r3, #7
 800cc4e:	d433      	bmi.n	800ccb8 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cc50:	0219      	lsls	r1, r3, #8
 800cc52:	d434      	bmi.n	800ccbe <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cc54:	025a      	lsls	r2, r3, #9
 800cc56:	d435      	bmi.n	800ccc4 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cc58:	0299      	lsls	r1, r3, #10
 800cc5a:	d43f      	bmi.n	800ccdc <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cc5c:	02da      	lsls	r2, r3, #11
 800cc5e:	d43a      	bmi.n	800ccd6 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cc60:	0359      	lsls	r1, r3, #13
 800cc62:	d435      	bmi.n	800ccd0 <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cc64:	039a      	lsls	r2, r3, #14
 800cc66:	d430      	bmi.n	800ccca <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cc68:	03d9      	lsls	r1, r3, #15
 800cc6a:	d440      	bmi.n	800ccee <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cc6c:	041a      	lsls	r2, r3, #16
 800cc6e:	d43b      	bmi.n	800cce8 <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc70:	0459      	lsls	r1, r3, #17
 800cc72:	d436      	bmi.n	800cce2 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cc74:	049a      	lsls	r2, r3, #18
 800cc76:	d407      	bmi.n	800cc88 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cc78:	f013 0f08 	tst.w	r3, #8
 800cc7c:	bf0c      	ite	eq
 800cc7e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800cc82:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800cc86:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800cc88:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800cc8c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc8e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc90:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc92:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc96:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cc98:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800cc9c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cc9e:	2040      	movs	r0, #64	@ 0x40
 800cca0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cca2:	2080      	movs	r0, #128	@ 0x80
 800cca4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cca6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ccaa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ccac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ccb0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ccb2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ccb6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ccb8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ccbc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ccbe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ccc2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ccc4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ccc8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ccca:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ccce:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ccd0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800ccd4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800ccd6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ccda:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ccdc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cce0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cce2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800cce6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cce8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ccec:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ccee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ccf2:	4770      	bx	lr
 800ccf4:	2400000c 	.word	0x2400000c
 800ccf8:	10624dd3 	.word	0x10624dd3
 800ccfc:	fffee0c0 	.word	0xfffee0c0
 800cd00:	00200045 	.word	0x00200045
 800cd04:	002000c5 	.word	0x002000c5
 800cd08:	fdffe008 	.word	0xfdffe008

0800cd0c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cd0c:	4a4f      	ldr	r2, [pc, #316]	@ (800ce4c <SDMMC_CmdWriteSingleBlock+0x140>)
{
 800cd0e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cd10:	4b4f      	ldr	r3, [pc, #316]	@ (800ce50 <SDMMC_CmdWriteSingleBlock+0x144>)
 800cd12:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800cd14:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cd18:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd1c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800cd20:	484c      	ldr	r0, [pc, #304]	@ (800ce54 <SDMMC_CmdWriteSingleBlock+0x148>)
 800cd22:	f241 1318 	movw	r3, #4376	@ 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cd26:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd28:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cd2a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd2e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cd30:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cd34:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800cd38:	1e53      	subs	r3, r2, #1
 800cd3a:	b14a      	cbz	r2, 800cd50 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cd3c:	4946      	ldr	r1, [pc, #280]	@ (800ce58 <SDMMC_CmdWriteSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800cd3e:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800cd42:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cd44:	420a      	tst	r2, r1
 800cd46:	d001      	beq.n	800cd4c <SDMMC_CmdWriteSingleBlock+0x40>
 800cd48:	0492      	lsls	r2, r2, #18
 800cd4a:	d504      	bpl.n	800cd56 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800cd4c:	1c58      	adds	r0, r3, #1
 800cd4e:	d1f6      	bne.n	800cd3e <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800cd50:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800cd54:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd56:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800cd5a:	075b      	lsls	r3, r3, #29
 800cd5c:	d443      	bmi.n	800cde6 <SDMMC_CmdWriteSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd5e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800cd62:	07d8      	lsls	r0, r3, #31
 800cd64:	d409      	bmi.n	800cd7a <SDMMC_CmdWriteSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd66:	4b3d      	ldr	r3, [pc, #244]	@ (800ce5c <SDMMC_CmdWriteSingleBlock+0x150>)
 800cd68:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cd6c:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b18      	cmp	r3, #24
 800cd74:	d005      	beq.n	800cd82 <SDMMC_CmdWriteSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd76:	2001      	movs	r0, #1
 800cd78:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd80:	e7f9      	b.n	800cd76 <SDMMC_CmdWriteSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800cd82:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cd86:	4836      	ldr	r0, [pc, #216]	@ (800ce60 <SDMMC_CmdWriteSingleBlock+0x154>)
 800cd88:	4018      	ands	r0, r3
 800cd8a:	b358      	cbz	r0, 800cde4 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	db2f      	blt.n	800cdf0 <SDMMC_CmdWriteSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cd90:	0059      	lsls	r1, r3, #1
 800cd92:	d430      	bmi.n	800cdf6 <SDMMC_CmdWriteSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cd94:	009a      	lsls	r2, r3, #2
 800cd96:	d430      	bmi.n	800cdfa <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cd98:	00d9      	lsls	r1, r3, #3
 800cd9a:	d430      	bmi.n	800cdfe <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd9c:	011a      	lsls	r2, r3, #4
 800cd9e:	d431      	bmi.n	800ce04 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cda0:	0159      	lsls	r1, r3, #5
 800cda2:	d432      	bmi.n	800ce0a <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cda4:	01da      	lsls	r2, r3, #7
 800cda6:	d433      	bmi.n	800ce10 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cda8:	0219      	lsls	r1, r3, #8
 800cdaa:	d434      	bmi.n	800ce16 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cdac:	025a      	lsls	r2, r3, #9
 800cdae:	d435      	bmi.n	800ce1c <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cdb0:	0299      	lsls	r1, r3, #10
 800cdb2:	d43f      	bmi.n	800ce34 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cdb4:	02da      	lsls	r2, r3, #11
 800cdb6:	d43a      	bmi.n	800ce2e <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cdb8:	0359      	lsls	r1, r3, #13
 800cdba:	d435      	bmi.n	800ce28 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cdbc:	039a      	lsls	r2, r3, #14
 800cdbe:	d430      	bmi.n	800ce22 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cdc0:	03d9      	lsls	r1, r3, #15
 800cdc2:	d440      	bmi.n	800ce46 <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cdc4:	041a      	lsls	r2, r3, #16
 800cdc6:	d43b      	bmi.n	800ce40 <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cdc8:	0459      	lsls	r1, r3, #17
 800cdca:	d436      	bmi.n	800ce3a <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cdcc:	049a      	lsls	r2, r3, #18
 800cdce:	d407      	bmi.n	800cde0 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cdd0:	f013 0f08 	tst.w	r3, #8
 800cdd4:	bf0c      	ite	eq
 800cdd6:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800cdda:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800cdde:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800cde0:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800cde4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cde6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cde8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdea:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdee:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cdf0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800cdf4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cdf6:	2040      	movs	r0, #64	@ 0x40
 800cdf8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cdfa:	2080      	movs	r0, #128	@ 0x80
 800cdfc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cdfe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ce02:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ce04:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ce08:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ce0a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ce0e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ce10:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ce14:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce16:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ce1a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ce20:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ce22:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ce26:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ce28:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800ce2c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800ce2e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ce32:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ce34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ce38:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ce3a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ce3e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ce40:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ce44:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ce46:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ce4a:	4770      	bx	lr
 800ce4c:	2400000c 	.word	0x2400000c
 800ce50:	10624dd3 	.word	0x10624dd3
 800ce54:	fffee0c0 	.word	0xfffee0c0
 800ce58:	00200045 	.word	0x00200045
 800ce5c:	002000c5 	.word	0x002000c5
 800ce60:	fdffe008 	.word	0xfdffe008

0800ce64 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce64:	4a4f      	ldr	r2, [pc, #316]	@ (800cfa4 <SDMMC_CmdWriteMultiBlock+0x140>)
{
 800ce66:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce68:	4b4f      	ldr	r3, [pc, #316]	@ (800cfa8 <SDMMC_CmdWriteMultiBlock+0x144>)
 800ce6a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ce6c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce70:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce74:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ce78:	484c      	ldr	r0, [pc, #304]	@ (800cfac <SDMMC_CmdWriteMultiBlock+0x148>)
 800ce7a:	f241 1319 	movw	r3, #4377	@ 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce7e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce80:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce82:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce86:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ce88:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce8c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800ce90:	1e53      	subs	r3, r2, #1
 800ce92:	b14a      	cbz	r2, 800cea8 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ce94:	4946      	ldr	r1, [pc, #280]	@ (800cfb0 <SDMMC_CmdWriteMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 800ce96:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800ce9a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ce9c:	420a      	tst	r2, r1
 800ce9e:	d001      	beq.n	800cea4 <SDMMC_CmdWriteMultiBlock+0x40>
 800cea0:	0492      	lsls	r2, r2, #18
 800cea2:	d504      	bpl.n	800ceae <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800cea4:	1c58      	adds	r0, r3, #1
 800cea6:	d1f6      	bne.n	800ce96 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800cea8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ceac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ceae:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ceb2:	075b      	lsls	r3, r3, #29
 800ceb4:	d443      	bmi.n	800cf3e <SDMMC_CmdWriteMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ceb6:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800ceba:	07d8      	lsls	r0, r3, #31
 800cebc:	d409      	bmi.n	800ced2 <SDMMC_CmdWriteMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cebe:	4b3d      	ldr	r3, [pc, #244]	@ (800cfb4 <SDMMC_CmdWriteMultiBlock+0x150>)
 800cec0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cec4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b19      	cmp	r3, #25
 800cecc:	d005      	beq.n	800ceda <SDMMC_CmdWriteMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cece:	2001      	movs	r0, #1
 800ced0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ced2:	2301      	movs	r3, #1
 800ced4:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ced8:	e7f9      	b.n	800cece <SDMMC_CmdWriteMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 800ceda:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cede:	4836      	ldr	r0, [pc, #216]	@ (800cfb8 <SDMMC_CmdWriteMultiBlock+0x154>)
 800cee0:	4018      	ands	r0, r3
 800cee2:	b358      	cbz	r0, 800cf3c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	db2f      	blt.n	800cf48 <SDMMC_CmdWriteMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cee8:	0059      	lsls	r1, r3, #1
 800ceea:	d430      	bmi.n	800cf4e <SDMMC_CmdWriteMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ceec:	009a      	lsls	r2, r3, #2
 800ceee:	d430      	bmi.n	800cf52 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cef0:	00d9      	lsls	r1, r3, #3
 800cef2:	d430      	bmi.n	800cf56 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cef4:	011a      	lsls	r2, r3, #4
 800cef6:	d431      	bmi.n	800cf5c <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cef8:	0159      	lsls	r1, r3, #5
 800cefa:	d432      	bmi.n	800cf62 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cefc:	01da      	lsls	r2, r3, #7
 800cefe:	d433      	bmi.n	800cf68 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cf00:	0219      	lsls	r1, r3, #8
 800cf02:	d434      	bmi.n	800cf6e <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cf04:	025a      	lsls	r2, r3, #9
 800cf06:	d435      	bmi.n	800cf74 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cf08:	0299      	lsls	r1, r3, #10
 800cf0a:	d43f      	bmi.n	800cf8c <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cf0c:	02da      	lsls	r2, r3, #11
 800cf0e:	d43a      	bmi.n	800cf86 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cf10:	0359      	lsls	r1, r3, #13
 800cf12:	d435      	bmi.n	800cf80 <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cf14:	039a      	lsls	r2, r3, #14
 800cf16:	d430      	bmi.n	800cf7a <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cf18:	03d9      	lsls	r1, r3, #15
 800cf1a:	d440      	bmi.n	800cf9e <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cf1c:	041a      	lsls	r2, r3, #16
 800cf1e:	d43b      	bmi.n	800cf98 <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cf20:	0459      	lsls	r1, r3, #17
 800cf22:	d436      	bmi.n	800cf92 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cf24:	049a      	lsls	r2, r3, #18
 800cf26:	d407      	bmi.n	800cf38 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cf28:	f013 0f08 	tst.w	r3, #8
 800cf2c:	bf0c      	ite	eq
 800cf2e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800cf32:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800cf36:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800cf38:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800cf3c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf3e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf40:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf42:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf46:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf48:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800cf4c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf4e:	2040      	movs	r0, #64	@ 0x40
 800cf50:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf52:	2080      	movs	r0, #128	@ 0x80
 800cf54:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf56:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800cf5a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf5c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800cf60:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf62:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cf66:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf68:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cf6c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf6e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800cf72:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800cf78:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cf7a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800cf7e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cf80:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800cf84:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800cf86:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800cf8a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cf8c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800cf90:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cf92:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800cf96:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cf98:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800cf9c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cf9e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800cfa2:	4770      	bx	lr
 800cfa4:	2400000c 	.word	0x2400000c
 800cfa8:	10624dd3 	.word	0x10624dd3
 800cfac:	fffee0c0 	.word	0xfffee0c0
 800cfb0:	00200045 	.word	0x00200045
 800cfb4:	002000c5 	.word	0x002000c5
 800cfb8:	fdffe008 	.word	0xfdffe008

0800cfbc <SDMMC_CmdStopTransfer>:
{
 800cfbc:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cfbe:	4b7a      	ldr	r3, [pc, #488]	@ (800d1a8 <SDMMC_CmdStopTransfer+0x1ec>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cfc0:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cfc2:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cfc4:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cfc8:	4b78      	ldr	r3, [pc, #480]	@ (800d1ac <SDMMC_CmdStopTransfer+0x1f0>)
{
 800cfca:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cfcc:	4c78      	ldr	r4, [pc, #480]	@ (800d1b0 <SDMMC_CmdStopTransfer+0x1f4>)
  SDMMCx->ARG = Command->Argument;
 800cfce:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800cfd0:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cfd2:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cfd6:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cfd8:	4c76      	ldr	r4, [pc, #472]	@ (800d1b4 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cfda:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cfde:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800cfe0:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cfe2:	f241 100c 	movw	r0, #4364	@ 0x110c
  SDMMCx->ARG = Command->Argument;
 800cfe6:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cfe8:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cfec:	68cc      	ldr	r4, [r1, #12]
 800cfee:	4023      	ands	r3, r4
 800cff0:	4318      	orrs	r0, r3
 800cff2:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800cff4:	b14a      	cbz	r2, 800d00a <SDMMC_CmdStopTransfer+0x4e>
 800cff6:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cff8:	486f      	ldr	r0, [pc, #444]	@ (800d1b8 <SDMMC_CmdStopTransfer+0x1fc>)
    sta_reg = SDMMCx->STA;
 800cffa:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800cffc:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cffe:	4202      	tst	r2, r0
 800d000:	d001      	beq.n	800d006 <SDMMC_CmdStopTransfer+0x4a>
 800d002:	0492      	lsls	r2, r2, #18
 800d004:	d509      	bpl.n	800d01a <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800d006:	1c5c      	adds	r4, r3, #1
 800d008:	d1f7      	bne.n	800cffa <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d00a:	68cb      	ldr	r3, [r1, #12]
 800d00c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d010:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d014:	60cb      	str	r3, [r1, #12]
}
 800d016:	bc30      	pop	{r4, r5}
 800d018:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d01a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d01c:	075b      	lsls	r3, r3, #29
 800d01e:	d44d      	bmi.n	800d0bc <SDMMC_CmdStopTransfer+0x100>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d020:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800d022:	f010 0001 	ands.w	r0, r0, #1
 800d026:	d13a      	bne.n	800d09e <SDMMC_CmdStopTransfer+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d028:	4b64      	ldr	r3, [pc, #400]	@ (800d1bc <SDMMC_CmdStopTransfer+0x200>)
 800d02a:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d02c:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b0c      	cmp	r3, #12
 800d032:	d136      	bne.n	800d0a2 <SDMMC_CmdStopTransfer+0xe6>
  return (*(__IO uint32_t *) tmp);
 800d034:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d036:	4a62      	ldr	r2, [pc, #392]	@ (800d1c0 <SDMMC_CmdStopTransfer+0x204>)
 800d038:	401a      	ands	r2, r3
 800d03a:	2a00      	cmp	r2, #0
 800d03c:	d038      	beq.n	800d0b0 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d03e:	2b00      	cmp	r3, #0
 800d040:	db36      	blt.n	800d0b0 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d042:	005d      	lsls	r5, r3, #1
 800d044:	d441      	bmi.n	800d0ca <SDMMC_CmdStopTransfer+0x10e>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d046:	009c      	lsls	r4, r3, #2
 800d048:	d445      	bmi.n	800d0d6 <SDMMC_CmdStopTransfer+0x11a>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d04a:	00d8      	lsls	r0, r3, #3
 800d04c:	d449      	bmi.n	800d0e2 <SDMMC_CmdStopTransfer+0x126>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d04e:	011a      	lsls	r2, r3, #4
 800d050:	d44e      	bmi.n	800d0f0 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d052:	015d      	lsls	r5, r3, #5
 800d054:	d453      	bmi.n	800d0fe <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d056:	01dc      	lsls	r4, r3, #7
 800d058:	d45f      	bmi.n	800d11a <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d05a:	0218      	lsls	r0, r3, #8
 800d05c:	d456      	bmi.n	800d10c <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d05e:	025a      	lsls	r2, r3, #9
 800d060:	d469      	bmi.n	800d136 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d062:	029d      	lsls	r5, r3, #10
 800d064:	d460      	bmi.n	800d128 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d066:	02dc      	lsls	r4, r3, #11
 800d068:	d47a      	bmi.n	800d160 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d06a:	0358      	lsls	r0, r3, #13
 800d06c:	d471      	bmi.n	800d152 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d06e:	039a      	lsls	r2, r3, #14
 800d070:	d468      	bmi.n	800d144 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d072:	03dd      	lsls	r5, r3, #15
 800d074:	f100 8090 	bmi.w	800d198 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d078:	041c      	lsls	r4, r3, #16
 800d07a:	d47f      	bmi.n	800d17c <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d07c:	0458      	lsls	r0, r3, #17
 800d07e:	d476      	bmi.n	800d16e <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d080:	049a      	lsls	r2, r3, #18
 800d082:	f100 8082 	bmi.w	800d18a <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d086:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d08a:	68cb      	ldr	r3, [r1, #12]
 800d08c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d090:	bf14      	ite	ne
 800d092:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d096:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d09a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d09c:	e7bb      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d09e:	2301      	movs	r3, #1
 800d0a0:	638b      	str	r3, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0a2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0a4:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800d0aa:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0ac:	60cb      	str	r3, [r1, #12]
}
 800d0ae:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0b0:	68cb      	ldr	r3, [r1, #12]
 800d0b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800d0b6:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0b8:	60cb      	str	r3, [r1, #12]
}
 800d0ba:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0bc:	2004      	movs	r0, #4
 800d0be:	6388      	str	r0, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0c0:	68cb      	ldr	r3, [r1, #12]
 800d0c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0c6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0c8:	e7a5      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0ca:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d0cc:	2040      	movs	r0, #64	@ 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0d2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0d4:	e79f      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0d6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d0d8:	2080      	movs	r0, #128	@ 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0de:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0e0:	e799      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0e2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d0e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0ec:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0ee:	e792      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0f0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d0f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0fa:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d0fc:	e78b      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0fe:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d100:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d108:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d10a:	e784      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d10c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d10e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d116:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d118:	e77d      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d11a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d11c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d124:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d126:	e776      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d128:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d12a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d12e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d132:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d134:	e76f      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d136:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d138:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d13c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d140:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d142:	e768      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d144:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d146:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d14a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d14e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d150:	e761      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d152:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d154:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d15c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d15e:	e75a      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d160:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800d162:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d16a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d16c:	e753      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d16e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d170:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d178:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d17a:	e74c      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d17c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d17e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d186:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d188:	e745      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d18a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800d18c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d194:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d196:	e73e      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d198:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d19a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d19e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1a2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d1a4:	e737      	b.n	800d016 <SDMMC_CmdStopTransfer+0x5a>
 800d1a6:	bf00      	nop
 800d1a8:	2400000c 	.word	0x2400000c
 800d1ac:	fffee0c0 	.word	0xfffee0c0
 800d1b0:	10624dd3 	.word	0x10624dd3
 800d1b4:	05f5e100 	.word	0x05f5e100
 800d1b8:	00200045 	.word	0x00200045
 800d1bc:	002000c5 	.word	0x002000c5
 800d1c0:	fdffe008 	.word	0xfdffe008

0800d1c4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d1c4:	4a4f      	ldr	r2, [pc, #316]	@ (800d304 <SDMMC_CmdSelDesel+0x140>)
{
 800d1c6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d1c8:	4b4f      	ldr	r3, [pc, #316]	@ (800d308 <SDMMC_CmdSelDesel+0x144>)
 800d1ca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d1cc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d1d0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d1d4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d1d8:	484c      	ldr	r0, [pc, #304]	@ (800d30c <SDMMC_CmdSelDesel+0x148>)
 800d1da:	f241 1307 	movw	r3, #4359	@ 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d1de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d1e0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d1e2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d1e6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d1e8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d1ec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d1f0:	1e53      	subs	r3, r2, #1
 800d1f2:	b14a      	cbz	r2, 800d208 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d1f4:	4946      	ldr	r1, [pc, #280]	@ (800d310 <SDMMC_CmdSelDesel+0x14c>)
    sta_reg = SDMMCx->STA;
 800d1f6:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d1fa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d1fc:	420a      	tst	r2, r1
 800d1fe:	d001      	beq.n	800d204 <SDMMC_CmdSelDesel+0x40>
 800d200:	0492      	lsls	r2, r2, #18
 800d202:	d504      	bpl.n	800d20e <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800d204:	1c58      	adds	r0, r3, #1
 800d206:	d1f6      	bne.n	800d1f6 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800d208:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d20c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d20e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d212:	075b      	lsls	r3, r3, #29
 800d214:	d443      	bmi.n	800d29e <SDMMC_CmdSelDesel+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d216:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d21a:	07d8      	lsls	r0, r3, #31
 800d21c:	d409      	bmi.n	800d232 <SDMMC_CmdSelDesel+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d21e:	4b3d      	ldr	r3, [pc, #244]	@ (800d314 <SDMMC_CmdSelDesel+0x150>)
 800d220:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d224:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	2b07      	cmp	r3, #7
 800d22c:	d005      	beq.n	800d23a <SDMMC_CmdSelDesel+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d22e:	2001      	movs	r0, #1
 800d230:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d232:	2301      	movs	r3, #1
 800d234:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d238:	e7f9      	b.n	800d22e <SDMMC_CmdSelDesel+0x6a>
  return (*(__IO uint32_t *) tmp);
 800d23a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d23e:	4836      	ldr	r0, [pc, #216]	@ (800d318 <SDMMC_CmdSelDesel+0x154>)
 800d240:	4018      	ands	r0, r3
 800d242:	b358      	cbz	r0, 800d29c <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d244:	2b00      	cmp	r3, #0
 800d246:	db2f      	blt.n	800d2a8 <SDMMC_CmdSelDesel+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d248:	0059      	lsls	r1, r3, #1
 800d24a:	d430      	bmi.n	800d2ae <SDMMC_CmdSelDesel+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d24c:	009a      	lsls	r2, r3, #2
 800d24e:	d430      	bmi.n	800d2b2 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d250:	00d9      	lsls	r1, r3, #3
 800d252:	d430      	bmi.n	800d2b6 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d254:	011a      	lsls	r2, r3, #4
 800d256:	d431      	bmi.n	800d2bc <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d258:	0159      	lsls	r1, r3, #5
 800d25a:	d432      	bmi.n	800d2c2 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d25c:	01da      	lsls	r2, r3, #7
 800d25e:	d433      	bmi.n	800d2c8 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d260:	0219      	lsls	r1, r3, #8
 800d262:	d434      	bmi.n	800d2ce <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d264:	025a      	lsls	r2, r3, #9
 800d266:	d435      	bmi.n	800d2d4 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d268:	0299      	lsls	r1, r3, #10
 800d26a:	d43f      	bmi.n	800d2ec <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d26c:	02da      	lsls	r2, r3, #11
 800d26e:	d43a      	bmi.n	800d2e6 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d270:	0359      	lsls	r1, r3, #13
 800d272:	d435      	bmi.n	800d2e0 <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d274:	039a      	lsls	r2, r3, #14
 800d276:	d430      	bmi.n	800d2da <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d278:	03d9      	lsls	r1, r3, #15
 800d27a:	d440      	bmi.n	800d2fe <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d27c:	041a      	lsls	r2, r3, #16
 800d27e:	d43b      	bmi.n	800d2f8 <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d280:	0459      	lsls	r1, r3, #17
 800d282:	d436      	bmi.n	800d2f2 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d284:	049a      	lsls	r2, r3, #18
 800d286:	d407      	bmi.n	800d298 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d288:	f013 0f08 	tst.w	r3, #8
 800d28c:	bf0c      	ite	eq
 800d28e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d292:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d296:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800d298:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800d29c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d29e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2a0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d2a2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2a6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d2a8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d2ac:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d2ae:	2040      	movs	r0, #64	@ 0x40
 800d2b0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d2b2:	2080      	movs	r0, #128	@ 0x80
 800d2b4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d2b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d2ba:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d2bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d2c0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d2c2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d2c6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d2c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d2cc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d2ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d2d2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d2d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d2d8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d2da:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d2de:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d2e0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d2e4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800d2e6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d2ea:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d2ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d2f0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d2f2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d2f6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d2f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d2fc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d2fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d302:	4770      	bx	lr
 800d304:	2400000c 	.word	0x2400000c
 800d308:	10624dd3 	.word	0x10624dd3
 800d30c:	fffee0c0 	.word	0xfffee0c0
 800d310:	00200045 	.word	0x00200045
 800d314:	002000c5 	.word	0x002000c5
 800d318:	fdffe008 	.word	0xfdffe008

0800d31c <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d31c:	4b11      	ldr	r3, [pc, #68]	@ (800d364 <SDMMC_CmdGoIdleState+0x48>)
{
 800d31e:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d320:	4a11      	ldr	r2, [pc, #68]	@ (800d368 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d322:	681b      	ldr	r3, [r3, #0]
{
 800d324:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d326:	4c11      	ldr	r4, [pc, #68]	@ (800d36c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800d328:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d32a:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 800d32e:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d330:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d332:	0a5b      	lsrs	r3, r3, #9
 800d334:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d338:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d33a:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d33e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d342:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d344:	e002      	b.n	800d34c <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d346:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800d348:	0612      	lsls	r2, r2, #24
 800d34a:	d405      	bmi.n	800d358 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800d34c:	3b01      	subs	r3, #1
 800d34e:	d2fa      	bcs.n	800d346 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800d350:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d354:	bc30      	pop	{r4, r5}
 800d356:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d358:	4b05      	ldr	r3, [pc, #20]	@ (800d370 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800d35a:	2000      	movs	r0, #0
}
 800d35c:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d35e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	2400000c 	.word	0x2400000c
 800d368:	fffee0c0 	.word	0xfffee0c0
 800d36c:	10624dd3 	.word	0x10624dd3
 800d370:	002000c5 	.word	0x002000c5

0800d374 <SDMMC_CmdOperCond>:
{
 800d374:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d376:	4a1c      	ldr	r2, [pc, #112]	@ (800d3e8 <SDMMC_CmdOperCond+0x74>)
 800d378:	4b1c      	ldr	r3, [pc, #112]	@ (800d3ec <SDMMC_CmdOperCond+0x78>)
 800d37a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d37c:	481c      	ldr	r0, [pc, #112]	@ (800d3f0 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d37e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d382:	f241 1308 	movw	r3, #4360	@ 0x1108
{
 800d386:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d388:	f44f 74d5 	mov.w	r4, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d38c:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800d38e:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d390:	68cc      	ldr	r4, [r1, #12]
 800d392:	4020      	ands	r0, r4
 800d394:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d396:	f241 3088 	movw	r0, #5000	@ 0x1388
 800d39a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d39e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800d3a0:	b14a      	cbz	r2, 800d3b6 <SDMMC_CmdOperCond+0x42>
 800d3a2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d3a4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800d3a6:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d3a8:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d3ac:	d001      	beq.n	800d3b2 <SDMMC_CmdOperCond+0x3e>
 800d3ae:	0490      	lsls	r0, r2, #18
 800d3b0:	d506      	bpl.n	800d3c0 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800d3b2:	1c5c      	adds	r4, r3, #1
 800d3b4:	d1f6      	bne.n	800d3a4 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d3b6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3be:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d3c0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d3c2:	075a      	lsls	r2, r3, #29
 800d3c4:	d40c      	bmi.n	800d3e0 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d3c6:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800d3c8:	f010 0001 	ands.w	r0, r0, #1
 800d3cc:	d105      	bne.n	800d3da <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d3ce:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d3d0:	065b      	lsls	r3, r3, #25
 800d3d2:	d5f2      	bpl.n	800d3ba <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d3d4:	2340      	movs	r3, #64	@ 0x40
 800d3d6:	638b      	str	r3, [r1, #56]	@ 0x38
 800d3d8:	e7ef      	b.n	800d3ba <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d3da:	2301      	movs	r3, #1
 800d3dc:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3de:	e7ec      	b.n	800d3ba <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3e0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3e2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d3e4:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3e6:	e7e8      	b.n	800d3ba <SDMMC_CmdOperCond+0x46>
 800d3e8:	2400000c 	.word	0x2400000c
 800d3ec:	10624dd3 	.word	0x10624dd3
 800d3f0:	fffee0c0 	.word	0xfffee0c0

0800d3f4 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d3f4:	4a4f      	ldr	r2, [pc, #316]	@ (800d534 <SDMMC_CmdAppCommand+0x140>)
{
 800d3f6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d3f8:	4b4f      	ldr	r3, [pc, #316]	@ (800d538 <SDMMC_CmdAppCommand+0x144>)
 800d3fa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d3fc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d400:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d404:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d408:	484c      	ldr	r0, [pc, #304]	@ (800d53c <SDMMC_CmdAppCommand+0x148>)
 800d40a:	f241 1337 	movw	r3, #4407	@ 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d40e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d410:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d412:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d416:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d418:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d41c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d420:	1e53      	subs	r3, r2, #1
 800d422:	b14a      	cbz	r2, 800d438 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d424:	4946      	ldr	r1, [pc, #280]	@ (800d540 <SDMMC_CmdAppCommand+0x14c>)
    sta_reg = SDMMCx->STA;
 800d426:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d42a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d42c:	420a      	tst	r2, r1
 800d42e:	d001      	beq.n	800d434 <SDMMC_CmdAppCommand+0x40>
 800d430:	0492      	lsls	r2, r2, #18
 800d432:	d504      	bpl.n	800d43e <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800d434:	1c58      	adds	r0, r3, #1
 800d436:	d1f6      	bne.n	800d426 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800d438:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d43c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d43e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d442:	075b      	lsls	r3, r3, #29
 800d444:	d443      	bmi.n	800d4ce <SDMMC_CmdAppCommand+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d446:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d44a:	07d8      	lsls	r0, r3, #31
 800d44c:	d409      	bmi.n	800d462 <SDMMC_CmdAppCommand+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d44e:	4b3d      	ldr	r3, [pc, #244]	@ (800d544 <SDMMC_CmdAppCommand+0x150>)
 800d450:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d454:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b37      	cmp	r3, #55	@ 0x37
 800d45c:	d005      	beq.n	800d46a <SDMMC_CmdAppCommand+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d45e:	2001      	movs	r0, #1
 800d460:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d462:	2301      	movs	r3, #1
 800d464:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d468:	e7f9      	b.n	800d45e <SDMMC_CmdAppCommand+0x6a>
  return (*(__IO uint32_t *) tmp);
 800d46a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d46e:	4836      	ldr	r0, [pc, #216]	@ (800d548 <SDMMC_CmdAppCommand+0x154>)
 800d470:	4018      	ands	r0, r3
 800d472:	b358      	cbz	r0, 800d4cc <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d474:	2b00      	cmp	r3, #0
 800d476:	db2f      	blt.n	800d4d8 <SDMMC_CmdAppCommand+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d478:	0059      	lsls	r1, r3, #1
 800d47a:	d430      	bmi.n	800d4de <SDMMC_CmdAppCommand+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d47c:	009a      	lsls	r2, r3, #2
 800d47e:	d430      	bmi.n	800d4e2 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d480:	00d9      	lsls	r1, r3, #3
 800d482:	d430      	bmi.n	800d4e6 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d484:	011a      	lsls	r2, r3, #4
 800d486:	d431      	bmi.n	800d4ec <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d488:	0159      	lsls	r1, r3, #5
 800d48a:	d432      	bmi.n	800d4f2 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d48c:	01da      	lsls	r2, r3, #7
 800d48e:	d433      	bmi.n	800d4f8 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d490:	0219      	lsls	r1, r3, #8
 800d492:	d434      	bmi.n	800d4fe <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d494:	025a      	lsls	r2, r3, #9
 800d496:	d435      	bmi.n	800d504 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d498:	0299      	lsls	r1, r3, #10
 800d49a:	d43f      	bmi.n	800d51c <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d49c:	02da      	lsls	r2, r3, #11
 800d49e:	d43a      	bmi.n	800d516 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d4a0:	0359      	lsls	r1, r3, #13
 800d4a2:	d435      	bmi.n	800d510 <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d4a4:	039a      	lsls	r2, r3, #14
 800d4a6:	d430      	bmi.n	800d50a <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d4a8:	03d9      	lsls	r1, r3, #15
 800d4aa:	d440      	bmi.n	800d52e <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d4ac:	041a      	lsls	r2, r3, #16
 800d4ae:	d43b      	bmi.n	800d528 <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d4b0:	0459      	lsls	r1, r3, #17
 800d4b2:	d436      	bmi.n	800d522 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d4b4:	049a      	lsls	r2, r3, #18
 800d4b6:	d407      	bmi.n	800d4c8 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d4b8:	f013 0f08 	tst.w	r3, #8
 800d4bc:	bf0c      	ite	eq
 800d4be:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d4c2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d4c6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800d4c8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800d4cc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4ce:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4d0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4d2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4d6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d4d8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d4dc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d4de:	2040      	movs	r0, #64	@ 0x40
 800d4e0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d4e2:	2080      	movs	r0, #128	@ 0x80
 800d4e4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d4e6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d4ea:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d4ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d4f0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d4f2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d4f6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d4fc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4fe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d502:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d504:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d508:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d50a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d50e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d510:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d514:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800d516:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d51a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d51c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d520:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d522:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d526:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d528:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d52c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d52e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d532:	4770      	bx	lr
 800d534:	2400000c 	.word	0x2400000c
 800d538:	10624dd3 	.word	0x10624dd3
 800d53c:	fffee0c0 	.word	0xfffee0c0
 800d540:	00200045 	.word	0x00200045
 800d544:	002000c5 	.word	0x002000c5
 800d548:	fdffe008 	.word	0xfdffe008

0800d54c <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d54c:	4a19      	ldr	r2, [pc, #100]	@ (800d5b4 <SDMMC_CmdAppOperCommand+0x68>)
{
 800d54e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d550:	4b19      	ldr	r3, [pc, #100]	@ (800d5b8 <SDMMC_CmdAppOperCommand+0x6c>)
 800d552:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d554:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d558:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d55c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d560:	4816      	ldr	r0, [pc, #88]	@ (800d5bc <SDMMC_CmdAppOperCommand+0x70>)
 800d562:	f241 1329 	movw	r3, #4393	@ 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d566:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d568:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d56a:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d56e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d570:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d574:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d578:	1e53      	subs	r3, r2, #1
 800d57a:	b14a      	cbz	r2, 800d590 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800d57c:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d580:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d582:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d586:	d001      	beq.n	800d58c <SDMMC_CmdAppOperCommand+0x40>
 800d588:	0492      	lsls	r2, r2, #18
 800d58a:	d504      	bpl.n	800d596 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800d58c:	1c59      	adds	r1, r3, #1
 800d58e:	d1f5      	bne.n	800d57c <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d590:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d594:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d596:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800d59a:	f010 0004 	ands.w	r0, r0, #4
 800d59e:	d103      	bne.n	800d5a8 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5a0:	4b07      	ldr	r3, [pc, #28]	@ (800d5c0 <SDMMC_CmdAppOperCommand+0x74>)
 800d5a2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800d5a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5a8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5aa:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5ac:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	2400000c 	.word	0x2400000c
 800d5b8:	10624dd3 	.word	0x10624dd3
 800d5bc:	fffee0c0 	.word	0xfffee0c0
 800d5c0:	002000c5 	.word	0x002000c5

0800d5c4 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d5c4:	4a4f      	ldr	r2, [pc, #316]	@ (800d704 <SDMMC_CmdBusWidth+0x140>)
{
 800d5c6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d5c8:	4b4f      	ldr	r3, [pc, #316]	@ (800d708 <SDMMC_CmdBusWidth+0x144>)
 800d5ca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d5cc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d5d0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5d4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d5d8:	484c      	ldr	r0, [pc, #304]	@ (800d70c <SDMMC_CmdBusWidth+0x148>)
 800d5da:	f241 1306 	movw	r3, #4358	@ 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d5de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5e0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d5e2:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5e6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d5e8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d5ec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d5f0:	1e53      	subs	r3, r2, #1
 800d5f2:	b14a      	cbz	r2, 800d608 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d5f4:	4946      	ldr	r1, [pc, #280]	@ (800d710 <SDMMC_CmdBusWidth+0x14c>)
    sta_reg = SDMMCx->STA;
 800d5f6:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d5fa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d5fc:	420a      	tst	r2, r1
 800d5fe:	d001      	beq.n	800d604 <SDMMC_CmdBusWidth+0x40>
 800d600:	0492      	lsls	r2, r2, #18
 800d602:	d504      	bpl.n	800d60e <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800d604:	1c58      	adds	r0, r3, #1
 800d606:	d1f6      	bne.n	800d5f6 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800d608:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d60c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d60e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d612:	075b      	lsls	r3, r3, #29
 800d614:	d443      	bmi.n	800d69e <SDMMC_CmdBusWidth+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d616:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d61a:	07d8      	lsls	r0, r3, #31
 800d61c:	d409      	bmi.n	800d632 <SDMMC_CmdBusWidth+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d61e:	4b3d      	ldr	r3, [pc, #244]	@ (800d714 <SDMMC_CmdBusWidth+0x150>)
 800d620:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d624:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b06      	cmp	r3, #6
 800d62c:	d005      	beq.n	800d63a <SDMMC_CmdBusWidth+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d62e:	2001      	movs	r0, #1
 800d630:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d632:	2301      	movs	r3, #1
 800d634:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d638:	e7f9      	b.n	800d62e <SDMMC_CmdBusWidth+0x6a>
  return (*(__IO uint32_t *) tmp);
 800d63a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d63e:	4836      	ldr	r0, [pc, #216]	@ (800d718 <SDMMC_CmdBusWidth+0x154>)
 800d640:	4018      	ands	r0, r3
 800d642:	b358      	cbz	r0, 800d69c <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d644:	2b00      	cmp	r3, #0
 800d646:	db2f      	blt.n	800d6a8 <SDMMC_CmdBusWidth+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d648:	0059      	lsls	r1, r3, #1
 800d64a:	d430      	bmi.n	800d6ae <SDMMC_CmdBusWidth+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d64c:	009a      	lsls	r2, r3, #2
 800d64e:	d430      	bmi.n	800d6b2 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d650:	00d9      	lsls	r1, r3, #3
 800d652:	d430      	bmi.n	800d6b6 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d654:	011a      	lsls	r2, r3, #4
 800d656:	d431      	bmi.n	800d6bc <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d658:	0159      	lsls	r1, r3, #5
 800d65a:	d432      	bmi.n	800d6c2 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d65c:	01da      	lsls	r2, r3, #7
 800d65e:	d433      	bmi.n	800d6c8 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d660:	0219      	lsls	r1, r3, #8
 800d662:	d434      	bmi.n	800d6ce <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d664:	025a      	lsls	r2, r3, #9
 800d666:	d435      	bmi.n	800d6d4 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d668:	0299      	lsls	r1, r3, #10
 800d66a:	d43f      	bmi.n	800d6ec <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d66c:	02da      	lsls	r2, r3, #11
 800d66e:	d43a      	bmi.n	800d6e6 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d670:	0359      	lsls	r1, r3, #13
 800d672:	d435      	bmi.n	800d6e0 <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d674:	039a      	lsls	r2, r3, #14
 800d676:	d430      	bmi.n	800d6da <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d678:	03d9      	lsls	r1, r3, #15
 800d67a:	d440      	bmi.n	800d6fe <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d67c:	041a      	lsls	r2, r3, #16
 800d67e:	d43b      	bmi.n	800d6f8 <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d680:	0459      	lsls	r1, r3, #17
 800d682:	d436      	bmi.n	800d6f2 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d684:	049a      	lsls	r2, r3, #18
 800d686:	d407      	bmi.n	800d698 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d688:	f013 0f08 	tst.w	r3, #8
 800d68c:	bf0c      	ite	eq
 800d68e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d692:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d696:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800d698:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800d69c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d69e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6a0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6a2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6a6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d6a8:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d6ac:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d6ae:	2040      	movs	r0, #64	@ 0x40
 800d6b0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d6b2:	2080      	movs	r0, #128	@ 0x80
 800d6b4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d6b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d6ba:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d6bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d6c0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d6c2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d6c6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d6c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d6cc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d6ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d6d2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d6d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d6d8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d6da:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d6de:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d6e0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d6e4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800d6e6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d6ea:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d6ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d6f0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d6f2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d6f6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d6f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d6fc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d6fe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d702:	4770      	bx	lr
 800d704:	2400000c 	.word	0x2400000c
 800d708:	10624dd3 	.word	0x10624dd3
 800d70c:	fffee0c0 	.word	0xfffee0c0
 800d710:	00200045 	.word	0x00200045
 800d714:	002000c5 	.word	0x002000c5
 800d718:	fdffe008 	.word	0xfdffe008

0800d71c <SDMMC_CmdSendSCR>:
{
 800d71c:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d71e:	4a4c      	ldr	r2, [pc, #304]	@ (800d850 <SDMMC_CmdSendSCR+0x134>)
 800d720:	4b4c      	ldr	r3, [pc, #304]	@ (800d854 <SDMMC_CmdSendSCR+0x138>)
 800d722:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d724:	484c      	ldr	r0, [pc, #304]	@ (800d858 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d726:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d72a:	f241 1333 	movw	r3, #4403	@ 0x1133
{
 800d72e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d730:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d732:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800d734:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d736:	68cc      	ldr	r4, [r1, #12]
 800d738:	4020      	ands	r0, r4
 800d73a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d73c:	f241 3088 	movw	r0, #5000	@ 0x1388
 800d740:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d744:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800d746:	b14a      	cbz	r2, 800d75c <SDMMC_CmdSendSCR+0x40>
 800d748:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d74a:	4844      	ldr	r0, [pc, #272]	@ (800d85c <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 800d74c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800d74e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d750:	4202      	tst	r2, r0
 800d752:	d001      	beq.n	800d758 <SDMMC_CmdSendSCR+0x3c>
 800d754:	0492      	lsls	r2, r2, #18
 800d756:	d506      	bpl.n	800d766 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800d758:	1c5c      	adds	r4, r3, #1
 800d75a:	d1f7      	bne.n	800d74c <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d75c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d764:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d766:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d768:	075c      	lsls	r4, r3, #29
 800d76a:	d43c      	bmi.n	800d7e6 <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d76c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d76e:	07d8      	lsls	r0, r3, #31
 800d770:	d407      	bmi.n	800d782 <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d772:	4b3b      	ldr	r3, [pc, #236]	@ (800d860 <SDMMC_CmdSendSCR+0x144>)
 800d774:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d776:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b33      	cmp	r3, #51	@ 0x33
 800d77c:	d004      	beq.n	800d788 <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d77e:	2001      	movs	r0, #1
 800d780:	e7ee      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d782:	2301      	movs	r3, #1
 800d784:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d786:	e7fa      	b.n	800d77e <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 800d788:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d78a:	4836      	ldr	r0, [pc, #216]	@ (800d864 <SDMMC_CmdSendSCR+0x148>)
 800d78c:	4018      	ands	r0, r3
 800d78e:	2800      	cmp	r0, #0
 800d790:	d0e6      	beq.n	800d760 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d792:	2b00      	cmp	r3, #0
 800d794:	db2b      	blt.n	800d7ee <SDMMC_CmdSendSCR+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d796:	005a      	lsls	r2, r3, #1
 800d798:	d42c      	bmi.n	800d7f4 <SDMMC_CmdSendSCR+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d79a:	009c      	lsls	r4, r3, #2
 800d79c:	d42c      	bmi.n	800d7f8 <SDMMC_CmdSendSCR+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d79e:	00d9      	lsls	r1, r3, #3
 800d7a0:	d42c      	bmi.n	800d7fc <SDMMC_CmdSendSCR+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d7a2:	011a      	lsls	r2, r3, #4
 800d7a4:	d42d      	bmi.n	800d802 <SDMMC_CmdSendSCR+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d7a6:	015c      	lsls	r4, r3, #5
 800d7a8:	d42e      	bmi.n	800d808 <SDMMC_CmdSendSCR+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d7aa:	01d9      	lsls	r1, r3, #7
 800d7ac:	d42f      	bmi.n	800d80e <SDMMC_CmdSendSCR+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d7ae:	021a      	lsls	r2, r3, #8
 800d7b0:	d430      	bmi.n	800d814 <SDMMC_CmdSendSCR+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7b2:	025c      	lsls	r4, r3, #9
 800d7b4:	d431      	bmi.n	800d81a <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7b6:	0299      	lsls	r1, r3, #10
 800d7b8:	d43b      	bmi.n	800d832 <SDMMC_CmdSendSCR+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7ba:	02da      	lsls	r2, r3, #11
 800d7bc:	d436      	bmi.n	800d82c <SDMMC_CmdSendSCR+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d7be:	035c      	lsls	r4, r3, #13
 800d7c0:	d431      	bmi.n	800d826 <SDMMC_CmdSendSCR+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d7c2:	0399      	lsls	r1, r3, #14
 800d7c4:	d42c      	bmi.n	800d820 <SDMMC_CmdSendSCR+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d7c6:	03da      	lsls	r2, r3, #15
 800d7c8:	d43f      	bmi.n	800d84a <SDMMC_CmdSendSCR+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d7ca:	041c      	lsls	r4, r3, #16
 800d7cc:	d43a      	bmi.n	800d844 <SDMMC_CmdSendSCR+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d7ce:	0459      	lsls	r1, r3, #17
 800d7d0:	d435      	bmi.n	800d83e <SDMMC_CmdSendSCR+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d7d2:	049a      	lsls	r2, r3, #18
 800d7d4:	d430      	bmi.n	800d838 <SDMMC_CmdSendSCR+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d7d6:	f013 0f08 	tst.w	r3, #8
 800d7da:	bf0c      	ite	eq
 800d7dc:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d7e0:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800d7e4:	e7bc      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7e6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7e8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7ea:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7ec:	e7b8      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d7ee:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800d7f2:	e7b5      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d7f4:	2040      	movs	r0, #64	@ 0x40
 800d7f6:	e7b3      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d7f8:	2080      	movs	r0, #128	@ 0x80
 800d7fa:	e7b1      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d7fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800d800:	e7ae      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d802:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d806:	e7ab      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d808:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800d80c:	e7a8      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d80e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d812:	e7a5      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d814:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800d818:	e7a2      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d81a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d81e:	e79f      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d820:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800d824:	e79c      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d826:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800d82a:	e799      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800d82c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d830:	e796      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d832:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d836:	e793      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800d838:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800d83c:	e790      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d83e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d842:	e78d      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d844:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d848:	e78a      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d84a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d84e:	e787      	b.n	800d760 <SDMMC_CmdSendSCR+0x44>
 800d850:	2400000c 	.word	0x2400000c
 800d854:	10624dd3 	.word	0x10624dd3
 800d858:	fffee0c0 	.word	0xfffee0c0
 800d85c:	00200045 	.word	0x00200045
 800d860:	002000c5 	.word	0x002000c5
 800d864:	fdffe008 	.word	0xfdffe008

0800d868 <SDMMC_CmdSendCID>:
{
 800d868:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d86a:	4a1a      	ldr	r2, [pc, #104]	@ (800d8d4 <SDMMC_CmdSendCID+0x6c>)
 800d86c:	4b1a      	ldr	r3, [pc, #104]	@ (800d8d8 <SDMMC_CmdSendCID+0x70>)
 800d86e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d870:	481a      	ldr	r0, [pc, #104]	@ (800d8dc <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d872:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d876:	f241 3302 	movw	r3, #4866	@ 0x1302
{
 800d87a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d87c:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d87e:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800d880:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d882:	68cc      	ldr	r4, [r1, #12]
 800d884:	4020      	ands	r0, r4
 800d886:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d888:	f241 3088 	movw	r0, #5000	@ 0x1388
 800d88c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d890:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800d892:	b14a      	cbz	r2, 800d8a8 <SDMMC_CmdSendCID+0x40>
 800d894:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d896:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800d898:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d89a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d89e:	d001      	beq.n	800d8a4 <SDMMC_CmdSendCID+0x3c>
 800d8a0:	0492      	lsls	r2, r2, #18
 800d8a2:	d506      	bpl.n	800d8b2 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800d8a4:	1c58      	adds	r0, r3, #1
 800d8a6:	d1f6      	bne.n	800d896 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800d8a8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d8ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8b2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d8b4:	075b      	lsls	r3, r3, #29
 800d8b6:	d409      	bmi.n	800d8cc <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8b8:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800d8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8be:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8c6:	4b06      	ldreq	r3, [pc, #24]	@ (800d8e0 <SDMMC_CmdSendCID+0x78>)
 800d8c8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800d8ca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8cc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ce:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8d0:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8d2:	e7eb      	b.n	800d8ac <SDMMC_CmdSendCID+0x44>
 800d8d4:	2400000c 	.word	0x2400000c
 800d8d8:	10624dd3 	.word	0x10624dd3
 800d8dc:	fffee0c0 	.word	0xfffee0c0
 800d8e0:	002000c5 	.word	0x002000c5

0800d8e4 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8e4:	4a1b      	ldr	r2, [pc, #108]	@ (800d954 <SDMMC_CmdSendCSD+0x70>)
{
 800d8e6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8e8:	4b1b      	ldr	r3, [pc, #108]	@ (800d958 <SDMMC_CmdSendCSD+0x74>)
 800d8ea:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d8ec:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8f0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d8f4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d8f8:	4818      	ldr	r0, [pc, #96]	@ (800d95c <SDMMC_CmdSendCSD+0x78>)
 800d8fa:	f241 3309 	movw	r3, #4873	@ 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d8fe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d900:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d902:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d906:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d908:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d90c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d910:	1e53      	subs	r3, r2, #1
 800d912:	b14a      	cbz	r2, 800d928 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800d914:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d918:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d91a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d91e:	d001      	beq.n	800d924 <SDMMC_CmdSendCSD+0x40>
 800d920:	0492      	lsls	r2, r2, #18
 800d922:	d504      	bpl.n	800d92e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800d924:	1c59      	adds	r1, r3, #1
 800d926:	d1f5      	bne.n	800d914 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d928:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d92c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d92e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d932:	075b      	lsls	r3, r3, #29
 800d934:	d409      	bmi.n	800d94a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d936:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800d93a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d93e:	bf14      	ite	ne
 800d940:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d942:	4b07      	ldreq	r3, [pc, #28]	@ (800d960 <SDMMC_CmdSendCSD+0x7c>)
 800d944:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800d948:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d94a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d94c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d94e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d952:	4770      	bx	lr
 800d954:	2400000c 	.word	0x2400000c
 800d958:	10624dd3 	.word	0x10624dd3
 800d95c:	fffee0c0 	.word	0xfffee0c0
 800d960:	002000c5 	.word	0x002000c5

0800d964 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800d964:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d966:	4a2b      	ldr	r2, [pc, #172]	@ (800da14 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800d968:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d96a:	6812      	ldr	r2, [r2, #0]
{
 800d96c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800d96e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d970:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d972:	4829      	ldr	r0, [pc, #164]	@ (800da18 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d974:	4c29      	ldr	r4, [pc, #164]	@ (800da1c <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d976:	fba0 0202 	umull	r0, r2, r0, r2
 800d97a:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d97e:	401c      	ands	r4, r3
 800d980:	f241 1303 	movw	r3, #4355	@ 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d984:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d986:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d988:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d98c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800d990:	b152      	cbz	r2, 800d9a8 <SDMMC_CmdSetRelAdd+0x44>
 800d992:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800d994:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800d998:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d99a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800d99e:	d001      	beq.n	800d9a4 <SDMMC_CmdSetRelAdd+0x40>
 800d9a0:	0492      	lsls	r2, r2, #18
 800d9a2:	d506      	bpl.n	800d9b2 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800d9a4:	1c58      	adds	r0, r3, #1
 800d9a6:	d1f5      	bne.n	800d994 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800d9a8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800d9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9b2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d9b6:	075c      	lsls	r4, r3, #29
 800d9b8:	d420      	bmi.n	800d9fc <SDMMC_CmdSetRelAdd+0x98>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9ba:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800d9be:	07d8      	lsls	r0, r3, #31
 800d9c0:	d406      	bmi.n	800d9d0 <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800d9c2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	2b03      	cmp	r3, #3
 800d9ca:	d005      	beq.n	800d9d8 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9cc:	2001      	movs	r0, #1
 800d9ce:	e7ed      	b.n	800d9ac <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9d6:	e7f9      	b.n	800d9cc <SDMMC_CmdSetRelAdd+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9d8:	4b11      	ldr	r3, [pc, #68]	@ (800da20 <SDMMC_CmdSetRelAdd+0xbc>)
 800d9da:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800d9de:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800d9e2:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800d9e6:	d011      	beq.n	800da0c <SDMMC_CmdSetRelAdd+0xa8>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d9e8:	045a      	lsls	r2, r3, #17
 800d9ea:	d40c      	bmi.n	800da06 <SDMMC_CmdSetRelAdd+0xa2>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d9ec:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800d9f0:	bf0c      	ite	eq
 800d9f2:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800d9f6:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800d9fa:	e7d7      	b.n	800d9ac <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9fc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9fe:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da00:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da04:	e7d2      	b.n	800d9ac <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da06:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800da0a:	e7cf      	b.n	800d9ac <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800da0c:	0c1b      	lsrs	r3, r3, #16
 800da0e:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800da10:	e7cc      	b.n	800d9ac <SDMMC_CmdSetRelAdd+0x48>
 800da12:	bf00      	nop
 800da14:	2400000c 	.word	0x2400000c
 800da18:	10624dd3 	.word	0x10624dd3
 800da1c:	fffee0c0 	.word	0xfffee0c0
 800da20:	002000c5 	.word	0x002000c5

0800da24 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800da24:	4a4f      	ldr	r2, [pc, #316]	@ (800db64 <SDMMC_CmdSendStatus+0x140>)
{
 800da26:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800da28:	4b4f      	ldr	r3, [pc, #316]	@ (800db68 <SDMMC_CmdSendStatus+0x144>)
 800da2a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800da2c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800da30:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da34:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800da38:	484c      	ldr	r0, [pc, #304]	@ (800db6c <SDMMC_CmdSendStatus+0x148>)
 800da3a:	f241 130d 	movw	r3, #4365	@ 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800da3e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da40:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800da42:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da46:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800da48:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da4c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800da50:	1e53      	subs	r3, r2, #1
 800da52:	b14a      	cbz	r2, 800da68 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800da54:	4946      	ldr	r1, [pc, #280]	@ (800db70 <SDMMC_CmdSendStatus+0x14c>)
    sta_reg = SDMMCx->STA;
 800da56:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800da5a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da5c:	420a      	tst	r2, r1
 800da5e:	d001      	beq.n	800da64 <SDMMC_CmdSendStatus+0x40>
 800da60:	0492      	lsls	r2, r2, #18
 800da62:	d504      	bpl.n	800da6e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800da64:	1c58      	adds	r0, r3, #1
 800da66:	d1f6      	bne.n	800da56 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800da68:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800da6c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da6e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800da72:	075b      	lsls	r3, r3, #29
 800da74:	d443      	bmi.n	800dafe <SDMMC_CmdSendStatus+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da76:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800da7a:	07d8      	lsls	r0, r3, #31
 800da7c:	d409      	bmi.n	800da92 <SDMMC_CmdSendStatus+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da7e:	4b3d      	ldr	r3, [pc, #244]	@ (800db74 <SDMMC_CmdSendStatus+0x150>)
 800da80:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800da84:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b0d      	cmp	r3, #13
 800da8c:	d005      	beq.n	800da9a <SDMMC_CmdSendStatus+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da8e:	2001      	movs	r0, #1
 800da90:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da92:	2301      	movs	r3, #1
 800da94:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da98:	e7f9      	b.n	800da8e <SDMMC_CmdSendStatus+0x6a>
  return (*(__IO uint32_t *) tmp);
 800da9a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da9e:	4836      	ldr	r0, [pc, #216]	@ (800db78 <SDMMC_CmdSendStatus+0x154>)
 800daa0:	4018      	ands	r0, r3
 800daa2:	b358      	cbz	r0, 800dafc <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	db2f      	blt.n	800db08 <SDMMC_CmdSendStatus+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800daa8:	0059      	lsls	r1, r3, #1
 800daaa:	d430      	bmi.n	800db0e <SDMMC_CmdSendStatus+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800daac:	009a      	lsls	r2, r3, #2
 800daae:	d430      	bmi.n	800db12 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dab0:	00d9      	lsls	r1, r3, #3
 800dab2:	d430      	bmi.n	800db16 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dab4:	011a      	lsls	r2, r3, #4
 800dab6:	d431      	bmi.n	800db1c <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dab8:	0159      	lsls	r1, r3, #5
 800daba:	d432      	bmi.n	800db22 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dabc:	01da      	lsls	r2, r3, #7
 800dabe:	d433      	bmi.n	800db28 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dac0:	0219      	lsls	r1, r3, #8
 800dac2:	d434      	bmi.n	800db2e <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dac4:	025a      	lsls	r2, r3, #9
 800dac6:	d435      	bmi.n	800db34 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dac8:	0299      	lsls	r1, r3, #10
 800daca:	d43f      	bmi.n	800db4c <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dacc:	02da      	lsls	r2, r3, #11
 800dace:	d43a      	bmi.n	800db46 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dad0:	0359      	lsls	r1, r3, #13
 800dad2:	d435      	bmi.n	800db40 <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dad4:	039a      	lsls	r2, r3, #14
 800dad6:	d430      	bmi.n	800db3a <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dad8:	03d9      	lsls	r1, r3, #15
 800dada:	d440      	bmi.n	800db5e <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dadc:	041a      	lsls	r2, r3, #16
 800dade:	d43b      	bmi.n	800db58 <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dae0:	0459      	lsls	r1, r3, #17
 800dae2:	d436      	bmi.n	800db52 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dae4:	049a      	lsls	r2, r3, #18
 800dae6:	d407      	bmi.n	800daf8 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dae8:	f013 0f08 	tst.w	r3, #8
 800daec:	bf0c      	ite	eq
 800daee:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800daf2:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800daf6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800daf8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800dafc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dafe:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db00:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db02:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db06:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800db08:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800db0c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800db0e:	2040      	movs	r0, #64	@ 0x40
 800db10:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800db12:	2080      	movs	r0, #128	@ 0x80
 800db14:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800db16:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800db1a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800db1c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800db20:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800db22:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800db26:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800db28:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800db2c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db2e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800db32:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800db38:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800db3a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800db3e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800db40:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800db44:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800db46:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800db4a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800db4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800db50:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800db52:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800db56:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800db58:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800db5c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800db5e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800db62:	4770      	bx	lr
 800db64:	2400000c 	.word	0x2400000c
 800db68:	10624dd3 	.word	0x10624dd3
 800db6c:	fffee0c0 	.word	0xfffee0c0
 800db70:	00200045 	.word	0x00200045
 800db74:	002000c5 	.word	0x002000c5
 800db78:	fdffe008 	.word	0xfdffe008

0800db7c <SDMMC_CmdStatusRegister>:
{
 800db7c:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db7e:	4a4c      	ldr	r2, [pc, #304]	@ (800dcb0 <SDMMC_CmdStatusRegister+0x134>)
 800db80:	4b4c      	ldr	r3, [pc, #304]	@ (800dcb4 <SDMMC_CmdStatusRegister+0x138>)
 800db82:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db84:	484c      	ldr	r0, [pc, #304]	@ (800dcb8 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db86:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db8a:	f241 130d 	movw	r3, #4365	@ 0x110d
{
 800db8e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800db90:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db92:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800db94:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800db96:	68cc      	ldr	r4, [r1, #12]
 800db98:	4020      	ands	r0, r4
 800db9a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800db9c:	f241 3088 	movw	r0, #5000	@ 0x1388
 800dba0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dba4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800dba6:	b14a      	cbz	r2, 800dbbc <SDMMC_CmdStatusRegister+0x40>
 800dba8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800dbaa:	4844      	ldr	r0, [pc, #272]	@ (800dcbc <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 800dbac:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800dbae:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dbb0:	4202      	tst	r2, r0
 800dbb2:	d001      	beq.n	800dbb8 <SDMMC_CmdStatusRegister+0x3c>
 800dbb4:	0492      	lsls	r2, r2, #18
 800dbb6:	d506      	bpl.n	800dbc6 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800dbb8:	1c5c      	adds	r4, r3, #1
 800dbba:	d1f7      	bne.n	800dbac <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800dbbc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800dbc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbc4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbc6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800dbc8:	075c      	lsls	r4, r3, #29
 800dbca:	d43c      	bmi.n	800dc46 <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbcc:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800dbce:	07d8      	lsls	r0, r3, #31
 800dbd0:	d407      	bmi.n	800dbe2 <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbd2:	4b3b      	ldr	r3, [pc, #236]	@ (800dcc0 <SDMMC_CmdStatusRegister+0x144>)
 800dbd4:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dbd6:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b0d      	cmp	r3, #13
 800dbdc:	d004      	beq.n	800dbe8 <SDMMC_CmdStatusRegister+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbde:	2001      	movs	r0, #1
 800dbe0:	e7ee      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbe6:	e7fa      	b.n	800dbde <SDMMC_CmdStatusRegister+0x62>
  return (*(__IO uint32_t *) tmp);
 800dbe8:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dbea:	4836      	ldr	r0, [pc, #216]	@ (800dcc4 <SDMMC_CmdStatusRegister+0x148>)
 800dbec:	4018      	ands	r0, r3
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d0e6      	beq.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	db2b      	blt.n	800dc4e <SDMMC_CmdStatusRegister+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dbf6:	005a      	lsls	r2, r3, #1
 800dbf8:	d42c      	bmi.n	800dc54 <SDMMC_CmdStatusRegister+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dbfa:	009c      	lsls	r4, r3, #2
 800dbfc:	d42c      	bmi.n	800dc58 <SDMMC_CmdStatusRegister+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dbfe:	00d9      	lsls	r1, r3, #3
 800dc00:	d42c      	bmi.n	800dc5c <SDMMC_CmdStatusRegister+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dc02:	011a      	lsls	r2, r3, #4
 800dc04:	d42d      	bmi.n	800dc62 <SDMMC_CmdStatusRegister+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc06:	015c      	lsls	r4, r3, #5
 800dc08:	d42e      	bmi.n	800dc68 <SDMMC_CmdStatusRegister+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc0a:	01d9      	lsls	r1, r3, #7
 800dc0c:	d42f      	bmi.n	800dc6e <SDMMC_CmdStatusRegister+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc0e:	021a      	lsls	r2, r3, #8
 800dc10:	d430      	bmi.n	800dc74 <SDMMC_CmdStatusRegister+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc12:	025c      	lsls	r4, r3, #9
 800dc14:	d431      	bmi.n	800dc7a <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc16:	0299      	lsls	r1, r3, #10
 800dc18:	d43b      	bmi.n	800dc92 <SDMMC_CmdStatusRegister+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc1a:	02da      	lsls	r2, r3, #11
 800dc1c:	d436      	bmi.n	800dc8c <SDMMC_CmdStatusRegister+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc1e:	035c      	lsls	r4, r3, #13
 800dc20:	d431      	bmi.n	800dc86 <SDMMC_CmdStatusRegister+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dc22:	0399      	lsls	r1, r3, #14
 800dc24:	d42c      	bmi.n	800dc80 <SDMMC_CmdStatusRegister+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dc26:	03da      	lsls	r2, r3, #15
 800dc28:	d43f      	bmi.n	800dcaa <SDMMC_CmdStatusRegister+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dc2a:	041c      	lsls	r4, r3, #16
 800dc2c:	d43a      	bmi.n	800dca4 <SDMMC_CmdStatusRegister+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dc2e:	0459      	lsls	r1, r3, #17
 800dc30:	d435      	bmi.n	800dc9e <SDMMC_CmdStatusRegister+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dc32:	049a      	lsls	r2, r3, #18
 800dc34:	d430      	bmi.n	800dc98 <SDMMC_CmdStatusRegister+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dc36:	f013 0f08 	tst.w	r3, #8
 800dc3a:	bf0c      	ite	eq
 800dc3c:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800dc40:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800dc44:	e7bc      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc46:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc48:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc4a:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc4c:	e7b8      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dc4e:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800dc52:	e7b5      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dc54:	2040      	movs	r0, #64	@ 0x40
 800dc56:	e7b3      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dc58:	2080      	movs	r0, #128	@ 0x80
 800dc5a:	e7b1      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dc5c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800dc60:	e7ae      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dc62:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800dc66:	e7ab      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dc68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800dc6c:	e7a8      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dc6e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800dc72:	e7a5      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800dc78:	e7a2      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc7a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dc7e:	e79f      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dc80:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800dc84:	e79c      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dc86:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800dc8a:	e799      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800dc8c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800dc90:	e796      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800dc96:	e793      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800dc98:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800dc9c:	e790      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dc9e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800dca2:	e78d      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dca4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dca8:	e78a      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dcaa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800dcae:	e787      	b.n	800dbc0 <SDMMC_CmdStatusRegister+0x44>
 800dcb0:	2400000c 	.word	0x2400000c
 800dcb4:	10624dd3 	.word	0x10624dd3
 800dcb8:	fffee0c0 	.word	0xfffee0c0
 800dcbc:	00200045 	.word	0x00200045
 800dcc0:	002000c5 	.word	0x002000c5
 800dcc4:	fdffe008 	.word	0xfdffe008

0800dcc8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800dcc8:	2000      	movs	r0, #0
 800dcca:	4770      	bx	lr

0800dccc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dccc:	b510      	push	{r4, lr}
 800dcce:	4694      	mov	ip, r2
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dcd4:	460a      	mov	r2, r1
 800dcd6:	4663      	mov	r3, ip
 800dcd8:	4601      	mov	r1, r0
 800dcda:	9400      	str	r4, [sp, #0]
 800dcdc:	4803      	ldr	r0, [pc, #12]	@ (800dcec <BSP_SD_ReadBlocks+0x20>)
 800dcde:	f7fd fc51 	bl	800b584 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800dce2:	3800      	subs	r0, #0
 800dce4:	bf18      	it	ne
 800dce6:	2001      	movne	r0, #1
 800dce8:	b002      	add	sp, #8
 800dcea:	bd10      	pop	{r4, pc}
 800dcec:	24000378 	.word	0x24000378

0800dcf0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	4694      	mov	ip, r2
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dcf8:	460a      	mov	r2, r1
 800dcfa:	4663      	mov	r3, ip
 800dcfc:	4601      	mov	r1, r0
 800dcfe:	9400      	str	r4, [sp, #0]
 800dd00:	4803      	ldr	r0, [pc, #12]	@ (800dd10 <BSP_SD_WriteBlocks+0x20>)
 800dd02:	f7fd fd23 	bl	800b74c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800dd06:	3800      	subs	r0, #0
 800dd08:	bf18      	it	ne
 800dd0a:	2001      	movne	r0, #1
 800dd0c:	b002      	add	sp, #8
 800dd0e:	bd10      	pop	{r4, pc}
 800dd10:	24000378 	.word	0x24000378

0800dd14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd14:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd16:	4803      	ldr	r0, [pc, #12]	@ (800dd24 <BSP_SD_GetCardState+0x10>)
 800dd18:	f7fe fa04 	bl	800c124 <HAL_SD_GetCardState>
}
 800dd1c:	3804      	subs	r0, #4
 800dd1e:	bf18      	it	ne
 800dd20:	2001      	movne	r0, #1
 800dd22:	bd08      	pop	{r3, pc}
 800dd24:	24000378 	.word	0x24000378

0800dd28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd28:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd2a:	4801      	ldr	r0, [pc, #4]	@ (800dd30 <BSP_SD_GetCardInfo+0x8>)
 800dd2c:	f7fe b8ba 	b.w	800bea4 <HAL_SD_GetCardInfo>
 800dd30:	24000378 	.word	0x24000378

0800dd34 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dd34:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800dd36:	2301      	movs	r3, #1
{
 800dd38:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800dd3a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800dd3e:	f000 f821 	bl	800dd84 <BSP_PlatformIsDetected>
 800dd42:	b908      	cbnz	r0, 800dd48 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800dd44:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800dd48:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800dd4c:	b003      	add	sp, #12
 800dd4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd52:	bf00      	nop

0800dd54 <BSP_SD_Init>:
{
 800dd54:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dd56:	f7ff ffed 	bl	800dd34 <BSP_SD_IsDetected>
 800dd5a:	2801      	cmp	r0, #1
 800dd5c:	d001      	beq.n	800dd62 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800dd5e:	2002      	movs	r0, #2
}
 800dd60:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800dd62:	4807      	ldr	r0, [pc, #28]	@ (800dd80 <BSP_SD_Init+0x2c>)
 800dd64:	f7fe f97c 	bl	800c060 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d1f9      	bne.n	800dd60 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800dd6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dd70:	4803      	ldr	r0, [pc, #12]	@ (800dd80 <BSP_SD_Init+0x2c>)
 800dd72:	f7fe f8ab 	bl	800becc <HAL_SD_ConfigWideBusOperation>
 800dd76:	3800      	subs	r0, #0
 800dd78:	bf18      	it	ne
 800dd7a:	2001      	movne	r0, #1
}
 800dd7c:	bd08      	pop	{r3, pc}
 800dd7e:	bf00      	nop
 800dd80:	24000378 	.word	0x24000378

0800dd84 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dd84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800dd88:	4803      	ldr	r0, [pc, #12]	@ (800dd98 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800dd8a:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dd8c:	f7f8 fc10 	bl	80065b0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800dd90:	fab0 f080 	clz	r0, r0
 800dd94:	0940      	lsrs	r0, r0, #5
 800dd96:	bd08      	pop	{r3, pc}
 800dd98:	58020000 	.word	0x58020000

0800dd9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dd9c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800dd9e:	4c0a      	ldr	r4, [pc, #40]	@ (800ddc8 <SD_initialize+0x2c>)
 800dda0:	2501      	movs	r5, #1
 800dda2:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dda4:	f7ff ffd6 	bl	800dd54 <BSP_SD_Init>
 800dda8:	b108      	cbz	r0, 800ddae <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ddaa:	7820      	ldrb	r0, [r4, #0]
}
 800ddac:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800ddae:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ddb0:	f7ff ffb0 	bl	800dd14 <BSP_SD_GetCardState>
 800ddb4:	b918      	cbnz	r0, 800ddbe <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800ddb6:	7823      	ldrb	r3, [r4, #0]
 800ddb8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ddbc:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ddbe:	7823      	ldrb	r3, [r4, #0]
 800ddc0:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800ddc2:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ddc4:	7820      	ldrb	r0, [r4, #0]
}
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	24000018 	.word	0x24000018

0800ddcc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ddcc:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	4c05      	ldr	r4, [pc, #20]	@ (800dde8 <SD_status+0x1c>)
 800ddd2:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ddd4:	f7ff ff9e 	bl	800dd14 <BSP_SD_GetCardState>
 800ddd8:	b918      	cbnz	r0, 800dde2 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800ddda:	7823      	ldrb	r3, [r4, #0]
 800dddc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800dde0:	7023      	strb	r3, [r4, #0]
  return Stat;
 800dde2:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800dde4:	bd10      	pop	{r4, pc}
 800dde6:	bf00      	nop
 800dde8:	24000018 	.word	0x24000018

0800ddec <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ddec:	4b16      	ldr	r3, [pc, #88]	@ (800de48 <SD_ioctl+0x5c>)
{
 800ddee:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ddf0:	7818      	ldrb	r0, [r3, #0]
{
 800ddf2:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ddf4:	f010 0401 	ands.w	r4, r0, #1
 800ddf8:	d106      	bne.n	800de08 <SD_ioctl+0x1c>
 800ddfa:	4615      	mov	r5, r2

  switch (cmd)
 800ddfc:	2903      	cmp	r1, #3
 800ddfe:	d820      	bhi.n	800de42 <SD_ioctl+0x56>
 800de00:	e8df f001 	tbb	[pc, r1]
 800de04:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de08:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800de0a:	4620      	mov	r0, r4
 800de0c:	b00b      	add	sp, #44	@ 0x2c
 800de0e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800de10:	a801      	add	r0, sp, #4
 800de12:	f7ff ff89 	bl	800dd28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de16:	9b08      	ldr	r3, [sp, #32]
}
 800de18:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800de1a:	0a5b      	lsrs	r3, r3, #9
 800de1c:	602b      	str	r3, [r5, #0]
}
 800de1e:	b00b      	add	sp, #44	@ 0x2c
 800de20:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800de22:	a801      	add	r0, sp, #4
 800de24:	f7ff ff80 	bl	800dd28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de28:	9b07      	ldr	r3, [sp, #28]
}
 800de2a:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de2c:	602b      	str	r3, [r5, #0]
}
 800de2e:	b00b      	add	sp, #44	@ 0x2c
 800de30:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800de32:	a801      	add	r0, sp, #4
 800de34:	f7ff ff78 	bl	800dd28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de38:	9b08      	ldr	r3, [sp, #32]
}
 800de3a:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de3c:	802b      	strh	r3, [r5, #0]
}
 800de3e:	b00b      	add	sp, #44	@ 0x2c
 800de40:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800de42:	2404      	movs	r4, #4
 800de44:	e7e1      	b.n	800de0a <SD_ioctl+0x1e>
 800de46:	bf00      	nop
 800de48:	24000018 	.word	0x24000018

0800de4c <SD_read>:
{
 800de4c:	b508      	push	{r3, lr}
 800de4e:	4608      	mov	r0, r1
 800de50:	4611      	mov	r1, r2
 800de52:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800de54:	f04f 33ff 	mov.w	r3, #4294967295
 800de58:	f7ff ff38 	bl	800dccc <BSP_SD_ReadBlocks>
 800de5c:	b108      	cbz	r0, 800de62 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800de5e:	2001      	movs	r0, #1
}
 800de60:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800de62:	f7ff ff57 	bl	800dd14 <BSP_SD_GetCardState>
 800de66:	2800      	cmp	r0, #0
 800de68:	d0fa      	beq.n	800de60 <SD_read+0x14>
 800de6a:	f7ff ff53 	bl	800dd14 <BSP_SD_GetCardState>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d1f7      	bne.n	800de62 <SD_read+0x16>
 800de72:	e7f5      	b.n	800de60 <SD_read+0x14>

0800de74 <SD_write>:
{
 800de74:	b508      	push	{r3, lr}
 800de76:	4608      	mov	r0, r1
 800de78:	4611      	mov	r1, r2
 800de7a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800de7c:	f04f 33ff 	mov.w	r3, #4294967295
 800de80:	f7ff ff36 	bl	800dcf0 <BSP_SD_WriteBlocks>
 800de84:	b108      	cbz	r0, 800de8a <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800de86:	2001      	movs	r0, #1
}
 800de88:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800de8a:	f7ff ff43 	bl	800dd14 <BSP_SD_GetCardState>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d0fa      	beq.n	800de88 <SD_write+0x14>
 800de92:	f7ff ff3f 	bl	800dd14 <BSP_SD_GetCardState>
 800de96:	2800      	cmp	r0, #0
 800de98:	d1f7      	bne.n	800de8a <SD_write+0x16>
 800de9a:	e7f5      	b.n	800de88 <SD_write+0x14>

0800de9c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800de9c:	4b03      	ldr	r3, [pc, #12]	@ (800deac <disk_status+0x10>)
 800de9e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800dea2:	4403      	add	r3, r0
 800dea4:	6852      	ldr	r2, [r2, #4]
 800dea6:	7a18      	ldrb	r0, [r3, #8]
 800dea8:	6853      	ldr	r3, [r2, #4]
 800deaa:	4718      	bx	r3
 800deac:	240ac8e0 	.word	0x240ac8e0

0800deb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800deb0:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800deb2:	4d09      	ldr	r5, [pc, #36]	@ (800ded8 <disk_initialize+0x28>)
 800deb4:	5c2b      	ldrb	r3, [r5, r0]
 800deb6:	b10b      	cbz	r3, 800debc <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800deb8:	2000      	movs	r0, #0
    {
      disk.is_initialized[pdrv] = 1;
    }
  }
  return stat;
}
 800deba:	bd38      	pop	{r3, r4, r5, pc}
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800debc:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800dec0:	182b      	adds	r3, r5, r0
 800dec2:	4604      	mov	r4, r0
 800dec4:	6852      	ldr	r2, [r2, #4]
 800dec6:	7a18      	ldrb	r0, [r3, #8]
 800dec8:	6813      	ldr	r3, [r2, #0]
 800deca:	4798      	blx	r3
    if(stat == RES_OK)
 800decc:	2800      	cmp	r0, #0
 800dece:	d1f4      	bne.n	800deba <disk_initialize+0xa>
      disk.is_initialized[pdrv] = 1;
 800ded0:	2301      	movs	r3, #1
 800ded2:	552b      	strb	r3, [r5, r4]
 800ded4:	e7f0      	b.n	800deb8 <disk_initialize+0x8>
 800ded6:	bf00      	nop
 800ded8:	240ac8e0 	.word	0x240ac8e0

0800dedc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dedc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dede:	4c05      	ldr	r4, [pc, #20]	@ (800def4 <disk_read+0x18>)
 800dee0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800dee4:	4404      	add	r4, r0
 800dee6:	686d      	ldr	r5, [r5, #4]
 800dee8:	7a20      	ldrb	r0, [r4, #8]
 800deea:	68ac      	ldr	r4, [r5, #8]
 800deec:	46a4      	mov	ip, r4
  return res;
}
 800deee:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800def0:	4760      	bx	ip
 800def2:	bf00      	nop
 800def4:	240ac8e0 	.word	0x240ac8e0

0800def8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800def8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800defa:	4c05      	ldr	r4, [pc, #20]	@ (800df10 <disk_write+0x18>)
 800defc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800df00:	4404      	add	r4, r0
 800df02:	686d      	ldr	r5, [r5, #4]
 800df04:	7a20      	ldrb	r0, [r4, #8]
 800df06:	68ec      	ldr	r4, [r5, #12]
 800df08:	46a4      	mov	ip, r4
  return res;
}
 800df0a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800df0c:	4760      	bx	ip
 800df0e:	bf00      	nop
 800df10:	240ac8e0 	.word	0x240ac8e0

0800df14 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800df14:	4b04      	ldr	r3, [pc, #16]	@ (800df28 <disk_ioctl+0x14>)
 800df16:	eb03 0c00 	add.w	ip, r3, r0
 800df1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	4718      	bx	r3
 800df28:	240ac8e0 	.word	0x240ac8e0

0800df2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df2c:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800df2e:	4b28      	ldr	r3, [pc, #160]	@ (800dfd0 <inc_lock+0xa4>)
{
 800df30:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800df32:	6818      	ldr	r0, [r3, #0]
 800df34:	6814      	ldr	r4, [r2, #0]
 800df36:	4284      	cmp	r4, r0
 800df38:	d022      	beq.n	800df80 <inc_lock+0x54>
 800df3a:	691d      	ldr	r5, [r3, #16]
 800df3c:	42a5      	cmp	r5, r4
 800df3e:	d005      	beq.n	800df4c <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800df40:	b370      	cbz	r0, 800dfa0 <inc_lock+0x74>
 800df42:	2d00      	cmp	r5, #0
 800df44:	d040      	beq.n	800dfc8 <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800df46:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800df48:	bcf0      	pop	{r4, r5, r6, r7}
 800df4a:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800df4c:	695e      	ldr	r6, [r3, #20]
 800df4e:	6897      	ldr	r7, [r2, #8]
 800df50:	42be      	cmp	r6, r7
 800df52:	d1f5      	bne.n	800df40 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800df54:	699e      	ldr	r6, [r3, #24]
 800df56:	6957      	ldr	r7, [r2, #20]
 800df58:	42be      	cmp	r6, r7
 800df5a:	d1f1      	bne.n	800df40 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800df5c:	f04f 0c01 	mov.w	ip, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800df60:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800df64:	ea4f 150c 	mov.w	r5, ip, lsl #4
 800df68:	8992      	ldrh	r2, [r2, #12]
 800df6a:	b1a1      	cbz	r1, 800df96 <inc_lock+0x6a>
 800df6c:	2a00      	cmp	r2, #0
 800df6e:	d1ea      	bne.n	800df46 <inc_lock+0x1a>
	return i + 1;
 800df70:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800df78:	442b      	add	r3, r5
}
 800df7a:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df7c:	819a      	strh	r2, [r3, #12]
}
 800df7e:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800df80:	6895      	ldr	r5, [r2, #8]
 800df82:	685e      	ldr	r6, [r3, #4]
 800df84:	42ae      	cmp	r6, r5
 800df86:	d1d8      	bne.n	800df3a <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800df88:	6955      	ldr	r5, [r2, #20]
 800df8a:	689e      	ldr	r6, [r3, #8]
 800df8c:	42ae      	cmp	r6, r5
 800df8e:	d1d4      	bne.n	800df3a <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800df90:	f04f 0c00 	mov.w	ip, #0
 800df94:	e7e4      	b.n	800df60 <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df96:	3201      	adds	r2, #1
	return i + 1;
 800df98:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df9c:	b292      	uxth	r2, r2
 800df9e:	e7eb      	b.n	800df78 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dfa0:	4684      	mov	ip, r0
 800dfa2:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800dfa4:	ea4f 150c 	mov.w	r5, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dfa8:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800dfaa:	eb03 110c 	add.w	r1, r3, ip, lsl #4
 800dfae:	515c      	str	r4, [r3, r5]
		Files[i].clu = dp->obj.sclust;
 800dfb0:	6894      	ldr	r4, [r2, #8]
 800dfb2:	6952      	ldr	r2, [r2, #20]
 800dfb4:	e9c1 4201 	strd	r4, r2, [r1, #4]
		Files[i].ctr = 0;
 800dfb8:	f04f 0200 	mov.w	r2, #0
 800dfbc:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dfbe:	bf14      	ite	ne
 800dfc0:	f44f 7280 	movne.w	r2, #256	@ 0x100
 800dfc4:	2201      	moveq	r2, #1
 800dfc6:	e7d7      	b.n	800df78 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dfc8:	2002      	movs	r0, #2
 800dfca:	f04f 0c01 	mov.w	ip, #1
 800dfce:	e7e9      	b.n	800dfa4 <inc_lock+0x78>
 800dfd0:	240ac8b8 	.word	0x240ac8b8

0800dfd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dfd4:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dfd6:	f04f 36ff 	mov.w	r6, #4294967295
 800dfda:	2300      	movs	r3, #0
{
 800dfdc:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800dfde:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dfe0:	70c3      	strb	r3, [r0, #3]
 800dfe2:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800dfe4:	d122      	bne.n	800e02c <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dfe6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dfea:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d11a      	bne.n	800e028 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dff2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800dff6:	2be9      	cmp	r3, #233	@ 0xe9
 800dff8:	d007      	beq.n	800e00a <check_fs+0x36>
 800dffa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800dffc:	4a13      	ldr	r2, [pc, #76]	@ (800e04c <check_fs+0x78>)
 800dffe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800e002:	4293      	cmp	r3, r2
 800e004:	d001      	beq.n	800e00a <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e006:	2002      	movs	r0, #2
}
 800e008:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800e00a:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e00e:	4a10      	ldr	r2, [pc, #64]	@ (800e050 <check_fs+0x7c>)
 800e010:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e014:	4293      	cmp	r3, r2
 800e016:	d017      	beq.n	800e048 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800e018:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e01c:	4b0d      	ldr	r3, [pc, #52]	@ (800e054 <check_fs+0x80>)
 800e01e:	1ac0      	subs	r0, r0, r3
 800e020:	bf18      	it	ne
 800e022:	2001      	movne	r0, #1
 800e024:	0040      	lsls	r0, r0, #1
}
 800e026:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e028:	2003      	movs	r0, #3
}
 800e02a:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e02c:	460d      	mov	r5, r1
 800e02e:	460a      	mov	r2, r1
 800e030:	2301      	movs	r3, #1
 800e032:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 800e036:	7840      	ldrb	r0, [r0, #1]
 800e038:	f7ff ff50 	bl	800dedc <disk_read>
 800e03c:	b110      	cbz	r0, 800e044 <check_fs+0x70>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e03e:	2004      	movs	r0, #4
			fs->winsect = sector;
 800e040:	62e6      	str	r6, [r4, #44]	@ 0x2c
}
 800e042:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800e044:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800e046:	e7ce      	b.n	800dfe6 <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e048:	2000      	movs	r0, #0
}
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
 800e04c:	009000eb 	.word	0x009000eb
 800e050:	00544146 	.word	0x00544146
 800e054:	33544146 	.word	0x33544146

0800e058 <sync_fs>:
{
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e05a:	78c3      	ldrb	r3, [r0, #3]
{
 800e05c:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e05e:	b95b      	cbnz	r3, 800e078 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e060:	7823      	ldrb	r3, [r4, #0]
 800e062:	2b03      	cmp	r3, #3
 800e064:	d02a      	beq.n	800e0bc <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e066:	2200      	movs	r2, #0
 800e068:	7860      	ldrb	r0, [r4, #1]
 800e06a:	4611      	mov	r1, r2
 800e06c:	f7ff ff52 	bl	800df14 <disk_ioctl>
 800e070:	3800      	subs	r0, #0
 800e072:	bf18      	it	ne
 800e074:	2001      	movne	r0, #1
}
 800e076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800e078:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e07a:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 800e07e:	2301      	movs	r3, #1
 800e080:	7840      	ldrb	r0, [r0, #1]
 800e082:	462a      	mov	r2, r5
 800e084:	4639      	mov	r1, r7
 800e086:	f7ff ff37 	bl	800def8 <disk_write>
 800e08a:	b9a8      	cbnz	r0, 800e0b8 <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e08c:	6a22      	ldr	r2, [r4, #32]
 800e08e:	69a3      	ldr	r3, [r4, #24]
 800e090:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800e092:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e094:	429a      	cmp	r2, r3
 800e096:	d2e3      	bcs.n	800e060 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e098:	78a6      	ldrb	r6, [r4, #2]
 800e09a:	2e01      	cmp	r6, #1
 800e09c:	d801      	bhi.n	800e0a2 <sync_fs+0x4a>
 800e09e:	e7df      	b.n	800e060 <sync_fs+0x8>
					wsect += fs->fsize;
 800e0a0:	69a3      	ldr	r3, [r4, #24]
 800e0a2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0a4:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	4639      	mov	r1, r7
 800e0aa:	462a      	mov	r2, r5
 800e0ac:	7860      	ldrb	r0, [r4, #1]
 800e0ae:	f7ff ff23 	bl	800def8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0b2:	2e01      	cmp	r6, #1
 800e0b4:	d1f4      	bne.n	800e0a0 <sync_fs+0x48>
 800e0b6:	e7d3      	b.n	800e060 <sync_fs+0x8>
			res = FR_DISK_ERR;
 800e0b8:	2001      	movs	r0, #1
}
 800e0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e0bc:	7925      	ldrb	r5, [r4, #4]
 800e0be:	2d01      	cmp	r5, #1
 800e0c0:	d1d1      	bne.n	800e066 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800e0c2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 800e0c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	f001 fda1 	bl	800fc14 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800e0d2:	480f      	ldr	r0, [pc, #60]	@ (800e110 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800e0d4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800e0d8:	6320      	str	r0, [r4, #48]	@ 0x30
 800e0da:	f100 50ff 	add.w	r0, r0, #534773760	@ 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800e0de:	f8a4 322e 	strh.w	r3, [r4, #558]	@ 0x22e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e0e2:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800e0e4:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800e0e8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e0ec:	3020      	adds	r0, #32
 800e0ee:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
			fs->winsect = fs->volbase + 1;
 800e0f2:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0f4:	f8c4 121c 	str.w	r1, [r4, #540]	@ 0x21c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e0f8:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800e0fa:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800e0fc:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e100:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800e102:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e104:	f7ff fef8 	bl	800def8 <disk_write>
			fs->fsi_flag = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	7123      	strb	r3, [r4, #4]
 800e10c:	e7ab      	b.n	800e066 <sync_fs+0xe>
 800e10e:	bf00      	nop
 800e110:	41615252 	.word	0x41615252

0800e114 <move_window>:
{
 800e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e118:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800e11a:	428e      	cmp	r6, r1
 800e11c:	d102      	bne.n	800e124 <move_window+0x10>
	FRESULT res = FR_OK;
 800e11e:	2000      	movs	r0, #0
}
 800e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e124:	4604      	mov	r4, r0
 800e126:	460d      	mov	r5, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e128:	7840      	ldrb	r0, [r0, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e12a:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e12c:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e130:	b95b      	cbnz	r3, 800e14a <move_window+0x36>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e132:	2301      	movs	r3, #1
 800e134:	4639      	mov	r1, r7
 800e136:	462a      	mov	r2, r5
 800e138:	f7ff fed0 	bl	800dedc <disk_read>
 800e13c:	b110      	cbz	r0, 800e144 <move_window+0x30>
				res = FR_DISK_ERR;
 800e13e:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e140:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800e144:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800e146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e14a:	2301      	movs	r3, #1
 800e14c:	4632      	mov	r2, r6
 800e14e:	4639      	mov	r1, r7
 800e150:	f7ff fed2 	bl	800def8 <disk_write>
 800e154:	b9d0      	cbnz	r0, 800e18c <move_window+0x78>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e156:	6a22      	ldr	r2, [r4, #32]
 800e158:	69a3      	ldr	r3, [r4, #24]
 800e15a:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800e15c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e15e:	429a      	cmp	r2, r3
 800e160:	d212      	bcs.n	800e188 <move_window+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e162:	f894 8002 	ldrb.w	r8, [r4, #2]
 800e166:	f1b8 0f01 	cmp.w	r8, #1
 800e16a:	d801      	bhi.n	800e170 <move_window+0x5c>
 800e16c:	e00c      	b.n	800e188 <move_window+0x74>
					wsect += fs->fsize;
 800e16e:	69a3      	ldr	r3, [r4, #24]
 800e170:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e172:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800e176:	2301      	movs	r3, #1
 800e178:	4639      	mov	r1, r7
 800e17a:	4632      	mov	r2, r6
 800e17c:	7860      	ldrb	r0, [r4, #1]
 800e17e:	f7ff febb 	bl	800def8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e182:	f1b8 0f01 	cmp.w	r8, #1
 800e186:	d1f2      	bne.n	800e16e <move_window+0x5a>
 800e188:	7860      	ldrb	r0, [r4, #1]
 800e18a:	e7d2      	b.n	800e132 <move_window+0x1e>
			res = FR_DISK_ERR;
 800e18c:	2001      	movs	r0, #1
 800e18e:	e7c7      	b.n	800e120 <move_window+0xc>

0800e190 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e194:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 800e196:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800e198:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800e19a:	b18c      	cbz	r4, 800e1c0 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e19c:	7825      	ldrb	r5, [r4, #0]
 800e19e:	2d20      	cmp	r5, #32
 800e1a0:	d911      	bls.n	800e1c6 <find_volume+0x36>
 800e1a2:	2d3a      	cmp	r5, #58	@ 0x3a
 800e1a4:	d00f      	beq.n	800e1c6 <find_volume+0x36>
 800e1a6:	46a4      	mov	ip, r4
 800e1a8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e1ac:	2b20      	cmp	r3, #32
 800e1ae:	d90c      	bls.n	800e1ca <find_volume+0x3a>
 800e1b0:	2b3a      	cmp	r3, #58	@ 0x3a
 800e1b2:	d1f9      	bne.n	800e1a8 <find_volume+0x18>
			i = *tp++ - '0';
 800e1b4:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e1b6:	45a4      	cmp	ip, r4
 800e1b8:	d102      	bne.n	800e1c0 <find_volume+0x30>
 800e1ba:	2d30      	cmp	r5, #48	@ 0x30
 800e1bc:	f000 80e1 	beq.w	800e382 <find_volume+0x1f2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800e1c0:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e1c6:	462b      	mov	r3, r5
 800e1c8:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e1ca:	2b3a      	cmp	r3, #58	@ 0x3a
 800e1cc:	d0f2      	beq.n	800e1b4 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e1ce:	4ba1      	ldr	r3, [pc, #644]	@ (800e454 <find_volume+0x2c4>)
 800e1d0:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e1d2:	2c00      	cmp	r4, #0
 800e1d4:	f000 80c6 	beq.w	800e364 <find_volume+0x1d4>
	*rfs = fs;							/* Return pointer to the file system object */
 800e1d8:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e1da:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e1de:	7823      	ldrb	r3, [r4, #0]
 800e1e0:	b153      	cbz	r3, 800e1f8 <find_volume+0x68>
		stat = disk_status(fs->drv);
 800e1e2:	7860      	ldrb	r0, [r4, #1]
 800e1e4:	f7ff fe5a 	bl	800de9c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1e8:	07c3      	lsls	r3, r0, #31
 800e1ea:	d405      	bmi.n	800e1f8 <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e1ec:	b115      	cbz	r5, 800e1f4 <find_volume+0x64>
 800e1ee:	0747      	lsls	r7, r0, #29
 800e1f0:	f100 80b5 	bmi.w	800e35e <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	e08d      	b.n	800e314 <find_volume+0x184>
	fs->fs_type = 0;					/* Clear the file system object */
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e1fc:	f7ff fe58 	bl	800deb0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e200:	07c6      	lsls	r6, r0, #31
 800e202:	f100 8089 	bmi.w	800e318 <find_volume+0x188>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e206:	b115      	cbz	r5, 800e20e <find_volume+0x7e>
 800e208:	0745      	lsls	r5, r0, #29
 800e20a:	f100 80a8 	bmi.w	800e35e <find_volume+0x1ce>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e20e:	2100      	movs	r1, #0
 800e210:	4620      	mov	r0, r4
 800e212:	f7ff fedf 	bl	800dfd4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e216:	2802      	cmp	r0, #2
 800e218:	f000 8081 	beq.w	800e31e <find_volume+0x18e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e21c:	2804      	cmp	r0, #4
 800e21e:	f000 80ac 	beq.w	800e37a <find_volume+0x1ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e222:	2801      	cmp	r0, #1
 800e224:	d875      	bhi.n	800e312 <find_volume+0x182>
 800e226:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e228:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800e22c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e230:	d16f      	bne.n	800e312 <find_volume+0x182>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e232:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e236:	b901      	cbnz	r1, 800e23a <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 800e238:	6d61      	ldr	r1, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e23a:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800e23e:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e240:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e242:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e244:	2b01      	cmp	r3, #1
 800e246:	d864      	bhi.n	800e312 <find_volume+0x182>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e248:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800e24c:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d05f      	beq.n	800e312 <find_volume+0x182>
 800e252:	1e58      	subs	r0, r3, #1
 800e254:	4218      	tst	r0, r3
 800e256:	d15c      	bne.n	800e312 <find_volume+0x182>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e258:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e25c:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e25e:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e260:	d157      	bne.n	800e312 <find_volume+0x182>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e262:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e266:	b900      	cbnz	r0, 800e26a <find_volume+0xda>
	rv = rv << 8 | ptr[0];
 800e268:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e26a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e26e:	f1bc 0f00 	cmp.w	ip, #0
 800e272:	d04e      	beq.n	800e312 <find_volume+0x182>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e274:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e278:	eb0c 1617 	add.w	r6, ip, r7, lsr #4
 800e27c:	4416      	add	r6, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e27e:	42b0      	cmp	r0, r6
 800e280:	d347      	bcc.n	800e312 <find_volume+0x182>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e282:	1b80      	subs	r0, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e284:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e286:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e28a:	d342      	bcc.n	800e312 <find_volume+0x182>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e28c:	eb0c 0305 	add.w	r3, ip, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e290:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
		fs->database = bsect + sysect;					/* Data start sector */
 800e294:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e296:	f10e 0002 	add.w	r0, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e29a:	45e6      	cmp	lr, ip
 800e29c:	f240 808f 	bls.w	800e3be <find_volume+0x22e>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e2a0:	6223      	str	r3, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2a2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->database = bsect + sysect;					/* Data start sector */
 800e2a6:	62a6      	str	r6, [r4, #40]	@ 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2a8:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e2aa:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e2ac:	61e5      	str	r5, [r4, #28]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2ae:	d130      	bne.n	800e312 <find_volume+0x182>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2b0:	0083      	lsls	r3, r0, #2
	rv = rv << 8 | ptr[0];
 800e2b2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2b4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e2b8:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2ba:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800e2be:	d328      	bcc.n	800e312 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e2c0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	@ 0x60
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e2c4:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800e2c8:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e2ca:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800e2cc:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e2ce:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e2d2:	f000 809c 	beq.w	800e40e <find_volume+0x27e>
		fmt = FS_FAT32;
 800e2d6:	2303      	movs	r3, #3
	fs->id = ++Fsid;		/* File system mount ID */
 800e2d8:	495f      	ldr	r1, [pc, #380]	@ (800e458 <find_volume+0x2c8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800e2da:	7023      	strb	r3, [r4, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e2dc:	4a5f      	ldr	r2, [pc, #380]	@ (800e45c <find_volume+0x2cc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800e2de:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e2e0:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e2e2:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e2e4:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	800b      	strh	r3, [r1, #0]
 800e2ea:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e2ec:	f000 808c 	beq.w	800e408 <find_volume+0x278>
 800e2f0:	6913      	ldr	r3, [r2, #16]
 800e2f2:	429c      	cmp	r4, r3
 800e2f4:	f47f af7e 	bne.w	800e1f4 <find_volume+0x64>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	6113      	str	r3, [r2, #16]
 800e2fc:	e77a      	b.n	800e1f4 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 800e2fe:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e302:	2e00      	cmp	r6, #0
 800e304:	d14a      	bne.n	800e39c <find_volume+0x20c>
 800e306:	2f00      	cmp	r7, #0
 800e308:	d151      	bne.n	800e3ae <find_volume+0x21e>
 800e30a:	f1b8 0f00 	cmp.w	r8, #0
 800e30e:	d13c      	bne.n	800e38a <find_volume+0x1fa>
 800e310:	bb55      	cbnz	r5, 800e368 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e312:	200d      	movs	r0, #13
}
 800e314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e318:	2003      	movs	r0, #3
}
 800e31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e31e:	f894 61f2 	ldrb.w	r6, [r4, #498]	@ 0x1f2
 800e322:	b10e      	cbz	r6, 800e328 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800e324:	f8d4 61f6 	ldr.w	r6, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e328:	f894 7202 	ldrb.w	r7, [r4, #514]	@ 0x202
 800e32c:	b10f      	cbz	r7, 800e332 <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 800e32e:	f8d4 7206 	ldr.w	r7, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e332:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 800e336:	b313      	cbz	r3, 800e37e <find_volume+0x1ee>
	rv = rv << 8 | ptr[0];
 800e338:	f8d4 8216 	ldr.w	r8, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e33c:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 800e340:	2d00      	cmp	r5, #0
 800e342:	d1dc      	bne.n	800e2fe <find_volume+0x16e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e344:	bb56      	cbnz	r6, 800e39c <find_volume+0x20c>
 800e346:	bb8f      	cbnz	r7, 800e3ac <find_volume+0x21c>
 800e348:	f1b8 0f00 	cmp.w	r8, #0
 800e34c:	d0e1      	beq.n	800e312 <find_volume+0x182>
 800e34e:	4641      	mov	r1, r8
 800e350:	4620      	mov	r0, r4
 800e352:	f7ff fe3f 	bl	800dfd4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e356:	2801      	cmp	r0, #1
 800e358:	d8db      	bhi.n	800e312 <find_volume+0x182>
			bsect = br[i];
 800e35a:	4645      	mov	r5, r8
 800e35c:	e764      	b.n	800e228 <find_volume+0x98>
				return FR_WRITE_PROTECTED;
 800e35e:	200a      	movs	r0, #10
}
 800e360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e364:	200c      	movs	r0, #12
 800e366:	e7d5      	b.n	800e314 <find_volume+0x184>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e368:	4629      	mov	r1, r5
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7ff fe32 	bl	800dfd4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e370:	2801      	cmp	r0, #1
 800e372:	f67f af59 	bls.w	800e228 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e376:	2804      	cmp	r0, #4
 800e378:	d1cb      	bne.n	800e312 <find_volume+0x182>
 800e37a:	2001      	movs	r0, #1
 800e37c:	e7ca      	b.n	800e314 <find_volume+0x184>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e37e:	4698      	mov	r8, r3
 800e380:	e7dc      	b.n	800e33c <find_volume+0x1ac>
					*path = ++tt;
 800e382:	f10c 0301 	add.w	r3, ip, #1
 800e386:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e388:	e721      	b.n	800e1ce <find_volume+0x3e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e38a:	4641      	mov	r1, r8
 800e38c:	4620      	mov	r0, r4
 800e38e:	f7ff fe21 	bl	800dfd4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e392:	2801      	cmp	r0, #1
 800e394:	d9e1      	bls.n	800e35a <find_volume+0x1ca>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e396:	2d00      	cmp	r5, #0
 800e398:	d1e6      	bne.n	800e368 <find_volume+0x1d8>
 800e39a:	e7ba      	b.n	800e312 <find_volume+0x182>
 800e39c:	4631      	mov	r1, r6
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f7ff fe18 	bl	800dfd4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e3a4:	2801      	cmp	r0, #1
 800e3a6:	d8ae      	bhi.n	800e306 <find_volume+0x176>
			bsect = br[i];
 800e3a8:	4635      	mov	r5, r6
 800e3aa:	e73d      	b.n	800e228 <find_volume+0x98>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e3ac:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f7ff fe0f 	bl	800dfd4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e3b6:	2801      	cmp	r0, #1
 800e3b8:	d8a7      	bhi.n	800e30a <find_volume+0x17a>
			bsect = br[i];
 800e3ba:	463d      	mov	r5, r7
 800e3bc:	e734      	b.n	800e228 <find_volume+0x98>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3be:	f640 7cf5 	movw	ip, #4085	@ 0xff5
		fs->volbase = bsect;							/* Volume start sector */
 800e3c2:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800e3c4:	62a6      	str	r6, [r4, #40]	@ 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3c6:	45e6      	cmp	lr, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e3c8:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e3ca:	6223      	str	r3, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3cc:	d816      	bhi.n	800e3fc <find_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e3ce:	2f00      	cmp	r7, #0
 800e3d0:	d09f      	beq.n	800e312 <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e3d2:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e3d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800e3d8:	f000 0001 	and.w	r0, r0, #1
 800e3dc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800e3e0:	2301      	movs	r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e3e2:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e3e6:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e3e8:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
 800e3ec:	d391      	bcc.n	800e312 <find_volume+0x182>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3ee:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800e3f2:	2180      	movs	r1, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3f4:	e9c4 2203 	strd	r2, r2, [r4, #12]
		fs->fsi_flag = 0x80;
 800e3f8:	7121      	strb	r1, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3fa:	e76d      	b.n	800e2d8 <find_volume+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e3fc:	2f00      	cmp	r7, #0
 800e3fe:	d088      	beq.n	800e312 <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e400:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e402:	0040      	lsls	r0, r0, #1
 800e404:	2302      	movs	r3, #2
 800e406:	e7ec      	b.n	800e3e2 <find_volume+0x252>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	6013      	str	r3, [r2, #0]
 800e40c:	e770      	b.n	800e2f0 <find_volume+0x160>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e40e:	1c69      	adds	r1, r5, #1
 800e410:	4620      	mov	r0, r4
 800e412:	f7ff fe7f 	bl	800e114 <move_window>
 800e416:	2800      	cmp	r0, #0
 800e418:	f47f af5d 	bne.w	800e2d6 <find_volume+0x146>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e41c:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800e420:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 800e424:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e426:	4291      	cmp	r1, r2
 800e428:	f47f af55 	bne.w	800e2d6 <find_volume+0x146>
	rv = rv << 8 | ptr[0];
 800e42c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e42e:	4b0c      	ldr	r3, [pc, #48]	@ (800e460 <find_volume+0x2d0>)
 800e430:	429a      	cmp	r2, r3
 800e432:	f47f af50 	bne.w	800e2d6 <find_volume+0x146>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e436:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 800e43a:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e43e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800e442:	3320      	adds	r3, #32
 800e444:	429a      	cmp	r2, r3
 800e446:	f47f af46 	bne.w	800e2d6 <find_volume+0x146>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e44a:	e9d4 2386 	ldrd	r2, r3, [r4, #536]	@ 0x218
 800e44e:	e9c4 3203 	strd	r3, r2, [r4, #12]
 800e452:	e740      	b.n	800e2d6 <find_volume+0x146>
 800e454:	240ac8dc 	.word	0x240ac8dc
 800e458:	240ac8d8 	.word	0x240ac8d8
 800e45c:	240ac8b8 	.word	0x240ac8b8
 800e460:	41615252 	.word	0x41615252

0800e464 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800e464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800e468:	f890 9000 	ldrb.w	r9, [r0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800e46c:	4605      	mov	r5, r0
 800e46e:	460e      	mov	r6, r1
 800e470:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 800e472:	f1b9 0f02 	cmp.w	r9, #2
 800e476:	d008      	beq.n	800e48a <put_fat.part.0+0x26>
 800e478:	f1b9 0f03 	cmp.w	r9, #3
 800e47c:	d042      	beq.n	800e504 <put_fat.part.0+0xa0>
 800e47e:	f1b9 0f01 	cmp.w	r9, #1
 800e482:	d014      	beq.n	800e4ae <put_fat.part.0+0x4a>
 800e484:	2002      	movs	r0, #2
}
 800e486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e48a:	6a01      	ldr	r1, [r0, #32]
 800e48c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 800e490:	f7ff fe40 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800e494:	2800      	cmp	r0, #0
 800e496:	d1f6      	bne.n	800e486 <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e498:	0076      	lsls	r6, r6, #1
 800e49a:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 800e49e:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e4a2:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e4a4:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800e4a6:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800e4aa:	7054      	strb	r4, [r2, #1]
			break;
 800e4ac:	e03d      	b.n	800e52a <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4ae:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800e4b0:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4b4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800e4b8:	f7ff fe2c 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d1e2      	bne.n	800e486 <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 800e4c0:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4c4:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 800e4c6:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800e4ca:	f105 0830 	add.w	r8, r5, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4ce:	ea4f 2157 	mov.w	r1, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4d2:	d52f      	bpl.n	800e534 <put_fat.part.0+0xd0>
 800e4d4:	f818 2003 	ldrb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4d8:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4da:	f002 020f 	and.w	r2, r2, #15
 800e4de:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800e4e2:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4e6:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800e4e8:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e4ec:	4419      	add	r1, r3
 800e4ee:	f7ff fe11 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d1c7      	bne.n	800e486 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800e4f6:	f3c7 0208 	ubfx	r2, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e4fa:	f3c4 1307 	ubfx	r3, r4, #4, #8
			p = fs->win + bc % SS(fs);
 800e4fe:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e500:	7013      	strb	r3, [r2, #0]
			break;
 800e502:	e012      	b.n	800e52a <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e504:	6a01      	ldr	r1, [r0, #32]
 800e506:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 800e50a:	f7ff fe03 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800e50e:	2800      	cmp	r0, #0
 800e510:	d1b9      	bne.n	800e486 <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e512:	00b6      	lsls	r6, r6, #2
 800e514:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800e518:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 800e51c:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e520:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e522:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e526:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800e528:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 800e52a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e52c:	2000      	movs	r0, #0
			fs->wflag = 1;
 800e52e:	70eb      	strb	r3, [r5, #3]
}
 800e530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e534:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e538:	4628      	mov	r0, r5
 800e53a:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800e53c:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e540:	4419      	add	r1, r3
 800e542:	f7ff fde7 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800e546:	2800      	cmp	r0, #0
 800e548:	d19d      	bne.n	800e486 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800e54a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e54e:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800e552:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 800e556:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e55a:	f023 030f 	bic.w	r3, r3, #15
 800e55e:	4323      	orrs	r3, r4
 800e560:	7013      	strb	r3, [r2, #0]
			break;
 800e562:	e7e2      	b.n	800e52a <put_fat.part.0+0xc6>

0800e564 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e564:	2901      	cmp	r1, #1
 800e566:	d90e      	bls.n	800e586 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e56a:	6943      	ldr	r3, [r0, #20]
 800e56c:	460c      	mov	r4, r1
 800e56e:	4605      	mov	r5, r0
 800e570:	4299      	cmp	r1, r3
 800e572:	d206      	bcs.n	800e582 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800e574:	7803      	ldrb	r3, [r0, #0]
 800e576:	2b02      	cmp	r3, #2
 800e578:	d021      	beq.n	800e5be <get_fat.isra.0+0x5a>
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d010      	beq.n	800e5a0 <get_fat.isra.0+0x3c>
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d003      	beq.n	800e58a <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 800e582:	2001      	movs	r0, #1
}
 800e584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800e586:	2001      	movs	r0, #1
}
 800e588:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e58a:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800e58c:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e590:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800e594:	f7ff fdbe 	bl	800e114 <move_window>
 800e598:	b1f0      	cbz	r0, 800e5d8 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e5a0:	6a01      	ldr	r1, [r0, #32]
 800e5a2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e5a6:	f7ff fdb5 	bl	800e114 <move_window>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d1f5      	bne.n	800e59a <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e5ae:	00a4      	lsls	r4, r4, #2
 800e5b0:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e5b4:	4425      	add	r5, r4
 800e5b6:	6b28      	ldr	r0, [r5, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e5b8:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 800e5bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e5be:	6a01      	ldr	r1, [r0, #32]
 800e5c0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e5c4:	f7ff fda6 	bl	800e114 <move_window>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d1e6      	bne.n	800e59a <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e5cc:	0063      	lsls	r3, r4, #1
 800e5ce:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e5d2:	442b      	add	r3, r5
 800e5d4:	8e18      	ldrh	r0, [r3, #48]	@ 0x30
}
 800e5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800e5d8:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5dc:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800e5de:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5e0:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800e5e2:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5e4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e5e8:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ec:	f7ff fd92 	bl	800e114 <move_window>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d1d2      	bne.n	800e59a <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5f4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800e5f8:	442f      	add	r7, r5
 800e5fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800e5fe:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e602:	07e3      	lsls	r3, r4, #31
 800e604:	bf4c      	ite	mi
 800e606:	0900      	lsrmi	r0, r0, #4
 800e608:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800e60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e60e:	bf00      	nop

0800e610 <create_chain>:
{
 800e610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e614:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800e616:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 800e618:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800e61c:	2900      	cmp	r1, #0
 800e61e:	f040 80a7 	bne.w	800e770 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e622:	f8d8 600c 	ldr.w	r6, [r8, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e626:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e62a:	b1c6      	cbz	r6, 800e65e <create_chain+0x4e>
 800e62c:	429e      	cmp	r6, r3
 800e62e:	d216      	bcs.n	800e65e <create_chain+0x4e>
			ncl++;							/* Next cluster */
 800e630:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e632:	42a3      	cmp	r3, r4
 800e634:	f200 80b4 	bhi.w	800e7a0 <create_chain+0x190>
				if (ncl > scl) return 0;	/* No free cluster */
 800e638:	2e01      	cmp	r6, #1
 800e63a:	d013      	beq.n	800e664 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e63c:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800e63e:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e640:	696b      	ldr	r3, [r5, #20]
 800e642:	42a3      	cmp	r3, r4
 800e644:	d907      	bls.n	800e656 <create_chain+0x46>
		switch (fs->fs_type) {
 800e646:	782b      	ldrb	r3, [r5, #0]
 800e648:	2b02      	cmp	r3, #2
 800e64a:	f000 8083 	beq.w	800e754 <create_chain+0x144>
 800e64e:	2b03      	cmp	r3, #3
 800e650:	d042      	beq.n	800e6d8 <create_chain+0xc8>
 800e652:	2b01      	cmp	r3, #1
 800e654:	d00a      	beq.n	800e66c <create_chain+0x5c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e656:	2401      	movs	r4, #1
}
 800e658:	4620      	mov	r0, r4
 800e65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e65e:	2b02      	cmp	r3, #2
 800e660:	f200 809a 	bhi.w	800e798 <create_chain+0x188>
				if (ncl > scl) return 0;	/* No free cluster */
 800e664:	2400      	movs	r4, #0
}
 800e666:	4620      	mov	r0, r4
 800e668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e66c:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 800e66e:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e672:	4628      	mov	r0, r5
 800e674:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800e678:	f7ff fd4c 	bl	800e114 <move_window>
 800e67c:	bb38      	cbnz	r0, 800e6ce <create_chain+0xbe>
			wc = fs->win[bc++ % SS(fs)];
 800e67e:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e682:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800e684:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e688:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800e68a:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e68c:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e690:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e694:	f7ff fd3e 	bl	800e114 <move_window>
 800e698:	b9c8      	cbnz	r0, 800e6ce <create_chain+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e69a:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e69e:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e6a0:	44ab      	add	fp, r5
 800e6a2:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 800e6a6:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e6aa:	bf4c      	ite	mi
 800e6ac:	091b      	lsrmi	r3, r3, #4
 800e6ae:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800e6b2:	b313      	cbz	r3, 800e6fa <create_chain+0xea>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d0ce      	beq.n	800e656 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800e6b8:	42a6      	cmp	r6, r4
 800e6ba:	d0d3      	beq.n	800e664 <create_chain+0x54>
			ncl++;							/* Next cluster */
 800e6bc:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e6be:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e6c2:	429c      	cmp	r4, r3
 800e6c4:	d2b8      	bcs.n	800e638 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e6c6:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e6c8:	e7ba      	b.n	800e640 <create_chain+0x30>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e6ca:	2801      	cmp	r0, #1
 800e6cc:	d1c3      	bne.n	800e656 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e6ce:	f04f 34ff 	mov.w	r4, #4294967295
}
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6d8:	6a29      	ldr	r1, [r5, #32]
 800e6da:	4628      	mov	r0, r5
 800e6dc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e6e0:	f7ff fd18 	bl	800e114 <move_window>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d1f2      	bne.n	800e6ce <create_chain+0xbe>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e6e8:	00a3      	lsls	r3, r4, #2
 800e6ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e6ee:	442b      	add	r3, r5
 800e6f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e6f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1dc      	bne.n	800e6b4 <create_chain+0xa4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e6fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e6fe:	42a3      	cmp	r3, r4
 800e700:	d9a9      	bls.n	800e656 <create_chain+0x46>
 800e702:	f04f 32ff 	mov.w	r2, #4294967295
 800e706:	4621      	mov	r1, r4
 800e708:	4640      	mov	r0, r8
 800e70a:	f7ff feab 	bl	800e464 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800e70e:	b970      	cbnz	r0, 800e72e <create_chain+0x11e>
 800e710:	f1b9 0f00 	cmp.w	r9, #0
 800e714:	d00b      	beq.n	800e72e <create_chain+0x11e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e716:	f1b9 0f01 	cmp.w	r9, #1
 800e71a:	d09c      	beq.n	800e656 <create_chain+0x46>
 800e71c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e720:	4599      	cmp	r9, r3
 800e722:	d298      	bcs.n	800e656 <create_chain+0x46>
 800e724:	4622      	mov	r2, r4
 800e726:	4649      	mov	r1, r9
 800e728:	4640      	mov	r0, r8
 800e72a:	f7ff fe9b 	bl	800e464 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e72e:	2800      	cmp	r0, #0
 800e730:	d1cb      	bne.n	800e6ca <create_chain+0xba>
		fs->last_clst = ncl;
 800e732:	f8c8 400c 	str.w	r4, [r8, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e736:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800e73a:	3b02      	subs	r3, #2
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d802      	bhi.n	800e746 <create_chain+0x136>
 800e740:	3a01      	subs	r2, #1
 800e742:	f8c8 2010 	str.w	r2, [r8, #16]
		fs->fsi_flag |= 1;
 800e746:	f898 3004 	ldrb.w	r3, [r8, #4]
 800e74a:	f043 0301 	orr.w	r3, r3, #1
 800e74e:	f888 3004 	strb.w	r3, [r8, #4]
 800e752:	e781      	b.n	800e658 <create_chain+0x48>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e754:	6a29      	ldr	r1, [r5, #32]
 800e756:	4628      	mov	r0, r5
 800e758:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e75c:	f7ff fcda 	bl	800e114 <move_window>
 800e760:	2800      	cmp	r0, #0
 800e762:	d1b4      	bne.n	800e6ce <create_chain+0xbe>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e764:	0063      	lsls	r3, r4, #1
 800e766:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e76a:	442b      	add	r3, r5
 800e76c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
			break;
 800e76e:	e7a0      	b.n	800e6b2 <create_chain+0xa2>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e770:	4640      	mov	r0, r8
 800e772:	f7ff fef7 	bl	800e564 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e776:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e778:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e77a:	f67f af6c 	bls.w	800e656 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e77e:	1c41      	adds	r1, r0, #1
 800e780:	d0a5      	beq.n	800e6ce <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e782:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e786:	4283      	cmp	r3, r0
 800e788:	f63f af66 	bhi.w	800e658 <create_chain+0x48>
			ncl++;							/* Next cluster */
 800e78c:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e790:	42a3      	cmp	r3, r4
 800e792:	d807      	bhi.n	800e7a4 <create_chain+0x194>
 800e794:	464e      	mov	r6, r9
 800e796:	e74f      	b.n	800e638 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e798:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e79a:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 800e79c:	2402      	movs	r4, #2
 800e79e:	e74f      	b.n	800e640 <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e7a0:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e7a2:	e74d      	b.n	800e640 <create_chain+0x30>
 800e7a4:	2c01      	cmp	r4, #1
 800e7a6:	683d      	ldr	r5, [r7, #0]
 800e7a8:	f67f af55 	bls.w	800e656 <create_chain+0x46>
 800e7ac:	464e      	mov	r6, r9
 800e7ae:	e747      	b.n	800e640 <create_chain+0x30>

0800e7b0 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800e7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->dptr = ofs;				/* Set current offset */
 800e7b4:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e7b6:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800e7b8:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800e7ba:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800e7bc:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e7be:	b98c      	cbnz	r4, 800e7e4 <dir_sdi.constprop.0+0x34>
 800e7c0:	783b      	ldrb	r3, [r7, #0]
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d80a      	bhi.n	800e7dc <dir_sdi.constprop.0+0x2c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e7c6:	893b      	ldrh	r3, [r7, #8]
 800e7c8:	b18b      	cbz	r3, 800e7ee <dir_sdi.constprop.0+0x3e>
		dp->sect = fs->dirbase;
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 800e7cc:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e7d0:	b16b      	cbz	r3, 800e7ee <dir_sdi.constprop.0+0x3e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e7d2:	3730      	adds	r7, #48	@ 0x30
	return FR_OK;
 800e7d4:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e7d6:	6237      	str	r7, [r6, #32]
}
 800e7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d0f1      	beq.n	800e7c6 <dir_sdi.constprop.0+0x16>
 800e7e2:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e7e4:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d15c      	bne.n	800e8a4 <dir_sdi.constprop.0+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e7ea:	2c01      	cmp	r4, #1
 800e7ec:	d102      	bne.n	800e7f4 <dir_sdi.constprop.0+0x44>
		return FR_INT_ERR;
 800e7ee:	2002      	movs	r0, #2
}
 800e7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7f4:	463d      	mov	r5, r7
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e7f6:	696b      	ldr	r3, [r5, #20]
 800e7f8:	42a3      	cmp	r3, r4
 800e7fa:	d9f8      	bls.n	800e7ee <dir_sdi.constprop.0+0x3e>
		switch (fs->fs_type) {
 800e7fc:	782b      	ldrb	r3, [r5, #0]
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d025      	beq.n	800e84e <dir_sdi.constprop.0+0x9e>
 800e802:	2b03      	cmp	r3, #3
 800e804:	d00d      	beq.n	800e822 <dir_sdi.constprop.0+0x72>
 800e806:	2b01      	cmp	r3, #1
 800e808:	d1f1      	bne.n	800e7ee <dir_sdi.constprop.0+0x3e>
			bc = (UINT)clst; bc += bc / 2;
 800e80a:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e80e:	6a29      	ldr	r1, [r5, #32]
 800e810:	4628      	mov	r0, r5
 800e812:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800e816:	f7ff fc7d 	bl	800e114 <move_window>
 800e81a:	b330      	cbz	r0, 800e86a <dir_sdi.constprop.0+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e81c:	2001      	movs	r0, #1
}
 800e81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e822:	6a29      	ldr	r1, [r5, #32]
 800e824:	4628      	mov	r0, r5
 800e826:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e82a:	f7ff fc73 	bl	800e114 <move_window>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d1f4      	bne.n	800e81c <dir_sdi.constprop.0+0x6c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e832:	00a3      	lsls	r3, r4, #2
 800e834:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800e838:	442b      	add	r3, r5
 800e83a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e83c:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e840:	2c01      	cmp	r4, #1
 800e842:	d9d4      	bls.n	800e7ee <dir_sdi.constprop.0+0x3e>
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	429c      	cmp	r4, r3
 800e848:	d2d1      	bcs.n	800e7ee <dir_sdi.constprop.0+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e84a:	6835      	ldr	r5, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e84c:	e7d3      	b.n	800e7f6 <dir_sdi.constprop.0+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e84e:	6a29      	ldr	r1, [r5, #32]
 800e850:	4628      	mov	r0, r5
 800e852:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e856:	f7ff fc5d 	bl	800e114 <move_window>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d1de      	bne.n	800e81c <dir_sdi.constprop.0+0x6c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e85e:	0063      	lsls	r3, r4, #1
 800e860:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e864:	442b      	add	r3, r5
 800e866:	8e1c      	ldrh	r4, [r3, #48]	@ 0x30
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e868:	e7ea      	b.n	800e840 <dir_sdi.constprop.0+0x90>
			wc = fs->win[bc++ % SS(fs)];
 800e86a:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e86e:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800e870:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e874:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800e876:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e878:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e87c:	f893 9030 	ldrb.w	r9, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e880:	f7ff fc48 	bl	800e114 <move_window>
 800e884:	2800      	cmp	r0, #0
 800e886:	d1c9      	bne.n	800e81c <dir_sdi.constprop.0+0x6c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e888:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800e88c:	44a8      	add	r8, r5
 800e88e:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800e892:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e896:	07e3      	lsls	r3, r4, #31
 800e898:	bf4c      	ite	mi
 800e89a:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800e89e:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e8a2:	e7cd      	b.n	800e840 <dir_sdi.constprop.0+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8a4:	697a      	ldr	r2, [r7, #20]
	clst -= 2;
 800e8a6:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8a8:	3a02      	subs	r2, #2
 800e8aa:	4291      	cmp	r1, r2
 800e8ac:	d203      	bcs.n	800e8b6 <dir_sdi.constprop.0+0x106>
	return clst * fs->csize + fs->database;
 800e8ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8b0:	fb01 2303 	mla	r3, r1, r3, r2
 800e8b4:	e78a      	b.n	800e7cc <dir_sdi.constprop.0+0x1c>
		dp->sect = fs->dirbase;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e8bc:	e797      	b.n	800e7ee <dir_sdi.constprop.0+0x3e>
 800e8be:	bf00      	nop

0800e8c0 <follow_path>:
{
 800e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e8c4:	780a      	ldrb	r2, [r1, #0]
{
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	468b      	mov	fp, r1
 800e8ca:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e8cc:	2a2f      	cmp	r2, #47	@ 0x2f
	FATFS *fs = obj->fs;
 800e8ce:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e8d0:	d001      	beq.n	800e8d6 <follow_path+0x16>
 800e8d2:	2a5c      	cmp	r2, #92	@ 0x5c
 800e8d4:	d105      	bne.n	800e8e2 <follow_path+0x22>
 800e8d6:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800e8da:	2b2f      	cmp	r3, #47	@ 0x2f
 800e8dc:	d0fb      	beq.n	800e8d6 <follow_path+0x16>
 800e8de:	2b5c      	cmp	r3, #92	@ 0x5c
 800e8e0:	d0f9      	beq.n	800e8d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e8e6:	f89b 2000 	ldrb.w	r2, [fp]
 800e8ea:	2a1f      	cmp	r2, #31
 800e8ec:	f240 816b 	bls.w	800ebc6 <follow_path+0x306>
 800e8f0:	465b      	mov	r3, fp
	p = *path; sfn = dp->fn;
 800e8f2:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 800e8f6:	46ab      	mov	fp, r5
		*d++ = (BYTE)val;
 800e8f8:	f04f 3a20 	mov.w	sl, #538976288	@ 0x20202020
 800e8fc:	463e      	mov	r6, r7
 800e8fe:	461d      	mov	r5, r3
 800e900:	2320      	movs	r3, #32
 800e902:	f242 0220 	movw	r2, #8224	@ 0x2020
 800e906:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 800e90a:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 800e90e:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800e910:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		c = (BYTE)p[si++];
 800e914:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e916:	2b20      	cmp	r3, #32
 800e918:	d95f      	bls.n	800e9da <follow_path+0x11a>
 800e91a:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 800e91c:	2700      	movs	r7, #0
 800e91e:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800e922:	2001      	movs	r0, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e924:	2b2f      	cmp	r3, #47	@ 0x2f
 800e926:	d066      	beq.n	800e9f6 <follow_path+0x136>
 800e928:	2b5c      	cmp	r3, #92	@ 0x5c
 800e92a:	d064      	beq.n	800e9f6 <follow_path+0x136>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e92c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e92e:	d001      	beq.n	800e934 <follow_path+0x74>
 800e930:	4567      	cmp	r7, ip
 800e932:	d345      	bcc.n	800e9c0 <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e934:	f1bc 0f0b 	cmp.w	ip, #11
 800e938:	d04f      	beq.n	800e9da <follow_path+0x11a>
 800e93a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e93c:	d14d      	bne.n	800e9da <follow_path+0x11a>
			i = 8; ni = 11;				/* Goto extension */
 800e93e:	2708      	movs	r7, #8
 800e940:	f04f 0c0b 	mov.w	ip, #11
		c = (BYTE)p[si++];
 800e944:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800e948:	3001      	adds	r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e94a:	2b20      	cmp	r3, #32
 800e94c:	d8ea      	bhi.n	800e924 <follow_path+0x64>
	*path = p + si;						/* Return pointer to the next segment */
 800e94e:	4405      	add	r5, r0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e950:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800e954:	2ae5      	cmp	r2, #229	@ 0xe5
 800e956:	d102      	bne.n	800e95e <follow_path+0x9e>
 800e958:	2205      	movs	r2, #5
 800e95a:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e95e:	2b20      	cmp	r3, #32
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e960:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800e962:	f8d4 8000 	ldr.w	r8, [r4]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e966:	bf8c      	ite	hi
 800e968:	2300      	movhi	r3, #0
 800e96a:	2301      	movls	r3, #1
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e972:	f7ff ff1d 	bl	800e7b0 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800e976:	4602      	mov	r2, r0
 800e978:	2800      	cmp	r0, #0
 800e97a:	f040 80cc 	bne.w	800eb16 <follow_path+0x256>
		res = move_window(fs, dp->sect);
 800e97e:	69e7      	ldr	r7, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e980:	f108 0930 	add.w	r9, r8, #48	@ 0x30
 800e984:	e9cd b600 	strd	fp, r6, [sp]
 800e988:	46ab      	mov	fp, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800e98a:	f8d8 602c 	ldr.w	r6, [r8, #44]	@ 0x2c
 800e98e:	42b7      	cmp	r7, r6
 800e990:	d046      	beq.n	800ea20 <follow_path+0x160>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e992:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e996:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f040 80c1 	bne.w	800eb22 <follow_path+0x262>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	463a      	mov	r2, r7
 800e9a4:	4649      	mov	r1, r9
 800e9a6:	f7ff fa99 	bl	800dedc <disk_read>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d036      	beq.n	800ea1c <follow_path+0x15c>
				res = FR_DISK_ERR;
 800e9ae:	2201      	movs	r2, #1
			fs->winsect = sector;
 800e9b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9b4:	4610      	mov	r0, r2
			fs->winsect = sector;
 800e9b6:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
}
 800e9ba:	b005      	add	sp, #20
 800e9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
 800e9c0:	061a      	lsls	r2, r3, #24
 800e9c2:	d502      	bpl.n	800e9ca <follow_path+0x10a>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e9c4:	3b80      	subs	r3, #128	@ 0x80
 800e9c6:	4a89      	ldr	r2, [pc, #548]	@ (800ebec <follow_path+0x32c>)
 800e9c8:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 800e9ca:	2222      	movs	r2, #34	@ 0x22
 800e9cc:	4988      	ldr	r1, [pc, #544]	@ (800ebf0 <follow_path+0x330>)
 800e9ce:	e002      	b.n	800e9d6 <follow_path+0x116>
 800e9d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e9d4:	b132      	cbz	r2, 800e9e4 <follow_path+0x124>
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d1fa      	bne.n	800e9d0 <follow_path+0x110>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e9da:	2206      	movs	r2, #6
}
 800e9dc:	4610      	mov	r0, r2
 800e9de:	b005      	add	sp, #20
 800e9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e9e4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e9e8:	2a19      	cmp	r2, #25
 800e9ea:	d801      	bhi.n	800e9f0 <follow_path+0x130>
 800e9ec:	3b20      	subs	r3, #32
 800e9ee:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800e9f0:	55f3      	strb	r3, [r6, r7]
 800e9f2:	3701      	adds	r7, #1
 800e9f4:	e7a6      	b.n	800e944 <follow_path+0x84>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e9f6:	5c2a      	ldrb	r2, [r5, r0]
 800e9f8:	1829      	adds	r1, r5, r0
 800e9fa:	2a2f      	cmp	r2, #47	@ 0x2f
 800e9fc:	d002      	beq.n	800ea04 <follow_path+0x144>
 800e9fe:	2a5c      	cmp	r2, #92	@ 0x5c
 800ea00:	f040 80ec 	bne.w	800ebdc <follow_path+0x31c>
 800ea04:	1c42      	adds	r2, r0, #1
 800ea06:	442a      	add	r2, r5
 800ea08:	4615      	mov	r5, r2
 800ea0a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ea0e:	292f      	cmp	r1, #47	@ 0x2f
 800ea10:	d0fa      	beq.n	800ea08 <follow_path+0x148>
 800ea12:	295c      	cmp	r1, #92	@ 0x5c
 800ea14:	d0f8      	beq.n	800ea08 <follow_path+0x148>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ea16:	2f00      	cmp	r7, #0
 800ea18:	d19a      	bne.n	800e950 <follow_path+0x90>
 800ea1a:	e7de      	b.n	800e9da <follow_path+0x11a>
			fs->winsect = sector;
 800ea1c:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
		c = dp->dir[DIR_Name];
 800ea20:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ea22:	781a      	ldrb	r2, [r3, #0]
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	d075      	beq.n	800eb14 <follow_path+0x254>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ea28:	7ad9      	ldrb	r1, [r3, #11]
 800ea2a:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 800ea2e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ea30:	7ada      	ldrb	r2, [r3, #11]
 800ea32:	f012 0208 	ands.w	r2, r2, #8
 800ea36:	d01b      	beq.n	800ea70 <follow_path+0x1b0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ea38:	6966      	ldr	r6, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ea3a:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 800ea3c:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ea3e:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ea40:	2f00      	cmp	r7, #0
 800ea42:	d067      	beq.n	800eb14 <follow_path+0x254>
 800ea44:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
 800ea48:	d264      	bcs.n	800eb14 <follow_path+0x254>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ea4a:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800ea4e:	b953      	cbnz	r3, 800ea66 <follow_path+0x1a6>
		dp->sect++;				/* Next sector */
 800ea50:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 800ea52:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800ea54:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800ea56:	2900      	cmp	r1, #0
 800ea58:	f040 8087 	bne.w	800eb6a <follow_path+0x2aa>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ea5c:	892a      	ldrh	r2, [r5, #8]
 800ea5e:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 800ea62:	f240 809f 	bls.w	800eba4 <follow_path+0x2e4>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ea66:	3530      	adds	r5, #48	@ 0x30
	dp->dptr = ofs;						/* Current entry */
 800ea68:	6166      	str	r6, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ea6a:	441d      	add	r5, r3
 800ea6c:	6225      	str	r5, [r4, #32]
	} while (res == FR_OK);
 800ea6e:	e78c      	b.n	800e98a <follow_path+0xca>
	} while (--cnt && r == 0);
 800ea70:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
 800ea74:	7818      	ldrb	r0, [r3, #0]
 800ea76:	4285      	cmp	r5, r0
 800ea78:	d1de      	bne.n	800ea38 <follow_path+0x178>
 800ea7a:	785d      	ldrb	r5, [r3, #1]
 800ea7c:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800ea80:	4285      	cmp	r5, r0
 800ea82:	d1d9      	bne.n	800ea38 <follow_path+0x178>
 800ea84:	f894 5026 	ldrb.w	r5, [r4, #38]	@ 0x26
 800ea88:	7898      	ldrb	r0, [r3, #2]
 800ea8a:	4285      	cmp	r5, r0
 800ea8c:	d1d4      	bne.n	800ea38 <follow_path+0x178>
 800ea8e:	f894 5027 	ldrb.w	r5, [r4, #39]	@ 0x27
 800ea92:	78d8      	ldrb	r0, [r3, #3]
 800ea94:	4285      	cmp	r5, r0
 800ea96:	d1cf      	bne.n	800ea38 <follow_path+0x178>
 800ea98:	791d      	ldrb	r5, [r3, #4]
 800ea9a:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800ea9e:	4285      	cmp	r5, r0
 800eaa0:	d1ca      	bne.n	800ea38 <follow_path+0x178>
 800eaa2:	795d      	ldrb	r5, [r3, #5]
 800eaa4:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800eaa8:	4285      	cmp	r5, r0
 800eaaa:	d1c5      	bne.n	800ea38 <follow_path+0x178>
 800eaac:	799d      	ldrb	r5, [r3, #6]
 800eaae:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800eab2:	4285      	cmp	r5, r0
 800eab4:	d1c0      	bne.n	800ea38 <follow_path+0x178>
 800eab6:	79dd      	ldrb	r5, [r3, #7]
 800eab8:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
 800eabc:	4285      	cmp	r5, r0
 800eabe:	d1bb      	bne.n	800ea38 <follow_path+0x178>
 800eac0:	7a1d      	ldrb	r5, [r3, #8]
 800eac2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800eac6:	4285      	cmp	r5, r0
 800eac8:	d1b6      	bne.n	800ea38 <follow_path+0x178>
 800eaca:	7a5d      	ldrb	r5, [r3, #9]
 800eacc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800ead0:	4285      	cmp	r5, r0
 800ead2:	d1b1      	bne.n	800ea38 <follow_path+0x178>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ead4:	7a98      	ldrb	r0, [r3, #10]
 800ead6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800eada:	4298      	cmp	r0, r3
 800eadc:	d1ac      	bne.n	800ea38 <follow_path+0x178>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eade:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800eae2:	465d      	mov	r5, fp
 800eae4:	9e01      	ldr	r6, [sp, #4]
 800eae6:	0758      	lsls	r0, r3, #29
 800eae8:	f8dd b000 	ldr.w	fp, [sp]
 800eaec:	f53f af76 	bmi.w	800e9dc <follow_path+0x11c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eaf0:	06cb      	lsls	r3, r1, #27
 800eaf2:	d553      	bpl.n	800eb9c <follow_path+0x2dc>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eaf4:	6962      	ldr	r2, [r4, #20]
 800eaf6:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
	if (fs->fs_type == FS_FAT32) {
 800eafa:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eafe:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800eb02:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb04:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800eb06:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800eb08:	d102      	bne.n	800eb10 <follow_path+0x250>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eb0a:	8a9b      	ldrh	r3, [r3, #20]
 800eb0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb10:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb12:	e6f5      	b.n	800e900 <follow_path+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb14:	2204      	movs	r2, #4
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb16:	2a04      	cmp	r2, #4
			ns = dp->fn[NSFLAG];
 800eb18:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb1c:	f47f af5e 	bne.w	800e9dc <follow_path+0x11c>
 800eb20:	e03a      	b.n	800eb98 <follow_path+0x2d8>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eb22:	2301      	movs	r3, #1
 800eb24:	4632      	mov	r2, r6
 800eb26:	4649      	mov	r1, r9
 800eb28:	f7ff f9e6 	bl	800def8 <disk_write>
 800eb2c:	bbc0      	cbnz	r0, 800eba0 <follow_path+0x2e0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eb2e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800eb32:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800eb36:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800eb38:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d211      	bcs.n	800eb64 <follow_path+0x2a4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb40:	f898 5002 	ldrb.w	r5, [r8, #2]
 800eb44:	2d01      	cmp	r5, #1
 800eb46:	d802      	bhi.n	800eb4e <follow_path+0x28e>
 800eb48:	e00c      	b.n	800eb64 <follow_path+0x2a4>
					wsect += fs->fsize;
 800eb4a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800eb4e:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb50:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800eb52:	2301      	movs	r3, #1
 800eb54:	4649      	mov	r1, r9
 800eb56:	4632      	mov	r2, r6
 800eb58:	f898 0001 	ldrb.w	r0, [r8, #1]
 800eb5c:	f7ff f9cc 	bl	800def8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb60:	2d01      	cmp	r5, #1
 800eb62:	d1f2      	bne.n	800eb4a <follow_path+0x28a>
 800eb64:	f898 0001 	ldrb.w	r0, [r8, #1]
 800eb68:	e71a      	b.n	800e9a0 <follow_path+0xe0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800eb6a:	896a      	ldrh	r2, [r5, #10]
 800eb6c:	3a01      	subs	r2, #1
 800eb6e:	ea12 2256 	ands.w	r2, r2, r6, lsr #9
 800eb72:	f47f af78 	bne.w	800ea66 <follow_path+0x1a6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eb76:	4628      	mov	r0, r5
 800eb78:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800eb7c:	f7ff fcf2 	bl	800e564 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eb80:	2801      	cmp	r0, #1
 800eb82:	d91e      	bls.n	800ebc2 <follow_path+0x302>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eb84:	1c47      	adds	r7, r0, #1
 800eb86:	d00b      	beq.n	800eba0 <follow_path+0x2e0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eb88:	6969      	ldr	r1, [r5, #20]
 800eb8a:	9b02      	ldr	r3, [sp, #8]
 800eb8c:	4288      	cmp	r0, r1
 800eb8e:	d30d      	bcc.n	800ebac <follow_path+0x2ec>
			ns = dp->fn[NSFLAG];
 800eb90:	9a03      	ldr	r2, [sp, #12]
 800eb92:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
						dp->sect = 0; return FR_NO_FILE;
 800eb96:	61e2      	str	r2, [r4, #28]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb98:	075a      	lsls	r2, r3, #29
 800eb9a:	d424      	bmi.n	800ebe6 <follow_path+0x326>
 800eb9c:	2205      	movs	r2, #5
 800eb9e:	e71d      	b.n	800e9dc <follow_path+0x11c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eba0:	2201      	movs	r2, #1
 800eba2:	e7b8      	b.n	800eb16 <follow_path+0x256>
			ns = dp->fn[NSFLAG];
 800eba4:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				dp->sect = 0; return FR_NO_FILE;
 800eba8:	61e1      	str	r1, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 800ebaa:	e7f5      	b.n	800eb98 <follow_path+0x2d8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebac:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800ebae:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800ebb0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebb2:	4288      	cmp	r0, r1
 800ebb4:	d210      	bcs.n	800ebd8 <follow_path+0x318>
	return clst * fs->csize + fs->database;
 800ebb6:	896a      	ldrh	r2, [r5, #10]
 800ebb8:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800ebba:	fb00 7702 	mla	r7, r0, r2, r7
				dp->sect = clust2sect(fs, clst);
 800ebbe:	61e7      	str	r7, [r4, #28]
 800ebc0:	e751      	b.n	800ea66 <follow_path+0x1a6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	e7a7      	b.n	800eb16 <follow_path+0x256>
		dp->fn[NSFLAG] = NS_NONAME;
 800ebc6:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 800ebc8:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800ebca:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
}
 800ebce:	b005      	add	sp, #20
 800ebd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800ebd4:	f7ff bdec 	b.w	800e7b0 <dir_sdi.constprop.0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebd8:	461f      	mov	r7, r3
 800ebda:	e7f0      	b.n	800ebbe <follow_path+0x2fe>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ebdc:	460d      	mov	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ebde:	2f00      	cmp	r7, #0
 800ebe0:	f47f aeb6 	bne.w	800e950 <follow_path+0x90>
 800ebe4:	e6f9      	b.n	800e9da <follow_path+0x11a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ebe6:	2204      	movs	r2, #4
	return res;
 800ebe8:	e6f8      	b.n	800e9dc <follow_path+0x11c>
 800ebea:	bf00      	nop
 800ebec:	08010804 	.word	0x08010804
 800ebf0:	080107f4 	.word	0x080107f4

0800ebf4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ebf4:	2901      	cmp	r1, #1
{
 800ebf6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfa:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800ebfc:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ebfe:	d909      	bls.n	800ec14 <remove_chain+0x20>
 800ec00:	6973      	ldr	r3, [r6, #20]
 800ec02:	428b      	cmp	r3, r1
 800ec04:	d906      	bls.n	800ec14 <remove_chain+0x20>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ec06:	4605      	mov	r5, r0
 800ec08:	4611      	mov	r1, r2
 800ec0a:	b932      	cbnz	r2, 800ec1a <remove_chain+0x26>
 800ec0c:	46b1      	mov	r9, r6
			fs->wflag = 1;
 800ec0e:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec10:	429c      	cmp	r4, r3
 800ec12:	d312      	bcc.n	800ec3a <remove_chain+0x46>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ec14:	2002      	movs	r0, #2
}
 800ec16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d9fa      	bls.n	800ec14 <remove_chain+0x20>
 800ec1e:	2a01      	cmp	r2, #1
 800ec20:	d0f8      	beq.n	800ec14 <remove_chain+0x20>
 800ec22:	f04f 32ff 	mov.w	r2, #4294967295
 800ec26:	4630      	mov	r0, r6
 800ec28:	f7ff fc1c 	bl	800e464 <put_fat.part.0>
		if (res != FR_OK) return res;
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d1f2      	bne.n	800ec16 <remove_chain+0x22>
 800ec30:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec34:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ec38:	e7e9      	b.n	800ec0e <remove_chain+0x1a>
		switch (fs->fs_type) {
 800ec3a:	f899 3000 	ldrb.w	r3, [r9]
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	f000 8098 	beq.w	800ed74 <remove_chain+0x180>
 800ec44:	2b03      	cmp	r3, #3
 800ec46:	d010      	beq.n	800ec6a <remove_chain+0x76>
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d1e3      	bne.n	800ec14 <remove_chain+0x20>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec4c:	f8d9 1020 	ldr.w	r1, [r9, #32]
			bc = (UINT)clst; bc += bc / 2;
 800ec50:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec54:	4648      	mov	r0, r9
 800ec56:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800ec5a:	f7ff fa5b 	bl	800e114 <move_window>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	f000 80b3 	beq.w	800edca <remove_chain+0x1d6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ec64:	2001      	movs	r0, #1
}
 800ec66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec6a:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800ec6e:	4648      	mov	r0, r9
 800ec70:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800ec74:	f7ff fa4e 	bl	800e114 <move_window>
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d1f3      	bne.n	800ec64 <remove_chain+0x70>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ec7c:	00a3      	lsls	r3, r4, #2
 800ec7e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800ec82:	444b      	add	r3, r9
 800ec84:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800ec88:	f038 4870 	bics.w	r8, r8, #4026531840	@ 0xf0000000
 800ec8c:	f000 80bb 	beq.w	800ee06 <remove_chain+0x212>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ec90:	f1b8 0f01 	cmp.w	r8, #1
 800ec94:	d0be      	beq.n	800ec14 <remove_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ec96:	6973      	ldr	r3, [r6, #20]
 800ec98:	429c      	cmp	r4, r3
 800ec9a:	d2bb      	bcs.n	800ec14 <remove_chain+0x20>
		switch (fs->fs_type) {
 800ec9c:	f896 9000 	ldrb.w	r9, [r6]
 800eca0:	f1b9 0f02 	cmp.w	r9, #2
 800eca4:	d02e      	beq.n	800ed04 <remove_chain+0x110>
 800eca6:	f1b9 0f03 	cmp.w	r9, #3
 800ecaa:	d04c      	beq.n	800ed46 <remove_chain+0x152>
 800ecac:	f1b9 0f01 	cmp.w	r9, #1
 800ecb0:	d1b0      	bne.n	800ec14 <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecb2:	6a31      	ldr	r1, [r6, #32]
			bc = (UINT)clst; bc += bc / 2;
 800ecb4:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecb8:	4630      	mov	r0, r6
 800ecba:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800ecbe:	f7ff fa29 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	d1a7      	bne.n	800ec16 <remove_chain+0x22>
			p = fs->win + bc++ % SS(fs);
 800ecc6:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ecca:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 800eccc:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800ecd0:	f106 0a30 	add.w	sl, r6, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecd4:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ecd8:	d561      	bpl.n	800ed9e <remove_chain+0x1aa>
 800ecda:	f81a 1003 	ldrb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecde:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ece0:	f001 010f 	and.w	r1, r1, #15
 800ece4:	f80a 1003 	strb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ece8:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800ecea:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecee:	4411      	add	r1, r2
 800ecf0:	f7ff fa10 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d18e      	bne.n	800ec16 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800ecf8:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800ecfc:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ed00:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800ed02:	e00c      	b.n	800ed1e <remove_chain+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ed04:	6a31      	ldr	r1, [r6, #32]
 800ed06:	4630      	mov	r0, r6
 800ed08:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800ed0c:	f7ff fa02 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d180      	bne.n	800ec16 <remove_chain+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ed14:	0064      	lsls	r4, r4, #1
 800ed16:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800ed1a:	4434      	add	r4, r6
 800ed1c:	8620      	strh	r0, [r4, #48]	@ 0x30
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed1e:	6972      	ldr	r2, [r6, #20]
 800ed20:	6933      	ldr	r3, [r6, #16]
 800ed22:	1e91      	subs	r1, r2, #2
			fs->wflag = 1;
 800ed24:	70f7      	strb	r7, [r6, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed26:	428b      	cmp	r3, r1
 800ed28:	d205      	bcs.n	800ed36 <remove_chain+0x142>
			fs->free_clst++;
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	6133      	str	r3, [r6, #16]
			fs->fsi_flag |= 1;
 800ed2e:	7933      	ldrb	r3, [r6, #4]
 800ed30:	f043 0301 	orr.w	r3, r3, #1
 800ed34:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ed36:	4542      	cmp	r2, r8
 800ed38:	d965      	bls.n	800ee06 <remove_chain+0x212>
 800ed3a:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ed3e:	4644      	mov	r4, r8
 800ed40:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ed44:	e764      	b.n	800ec10 <remove_chain+0x1c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ed46:	6a31      	ldr	r1, [r6, #32]
 800ed48:	4630      	mov	r0, r6
 800ed4a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800ed4e:	f7ff f9e1 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800ed52:	2800      	cmp	r0, #0
 800ed54:	f47f af5f 	bne.w	800ec16 <remove_chain+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ed58:	00a4      	lsls	r4, r4, #2
 800ed5a:	f106 0230 	add.w	r2, r6, #48	@ 0x30
 800ed5e:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800ed62:	5911      	ldr	r1, [r2, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed64:	5310      	strh	r0, [r2, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ed66:	4422      	add	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800ed68:	0e0b      	lsrs	r3, r1, #24
 800ed6a:	7090      	strb	r0, [r2, #2]
 800ed6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 800ed70:	70d3      	strb	r3, [r2, #3]
			if (res != FR_OK) return res;
 800ed72:	e7d4      	b.n	800ed1e <remove_chain+0x12a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed74:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800ed78:	4648      	mov	r0, r9
 800ed7a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800ed7e:	f7ff f9c9 	bl	800e114 <move_window>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f47f af6e 	bne.w	800ec64 <remove_chain+0x70>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ed88:	0063      	lsls	r3, r4, #1
 800ed8a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ed8e:	444b      	add	r3, r9
 800ed90:	f8b3 8030 	ldrh.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800ed94:	f1b8 0f00 	cmp.w	r8, #0
 800ed98:	f47f af7a 	bne.w	800ec90 <remove_chain+0x9c>
 800ed9c:	e033      	b.n	800ee06 <remove_chain+0x212>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed9e:	f80a 0003 	strb.w	r0, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eda2:	4630      	mov	r0, r6
 800eda4:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800eda6:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800edaa:	4411      	add	r1, r2
 800edac:	f7ff f9b2 	bl	800e114 <move_window>
			if (res != FR_OK) break;
 800edb0:	2800      	cmp	r0, #0
 800edb2:	f47f af30 	bne.w	800ec16 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800edb6:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800edba:	f81a 000b 	ldrb.w	r0, [sl, fp]
 800edbe:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800edc2:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 800edc6:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800edc8:	e7a9      	b.n	800ed1e <remove_chain+0x12a>
			wc = fs->win[bc++ % SS(fs)];
 800edca:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800edce:	f8d9 1020 	ldr.w	r1, [r9, #32]
			wc = fs->win[bc++ % SS(fs)];
 800edd2:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800edd6:	4648      	mov	r0, r9
			wc = fs->win[bc++ % SS(fs)];
 800edd8:	444b      	add	r3, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800edda:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800edde:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ede2:	f7ff f997 	bl	800e114 <move_window>
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f47f af3c 	bne.w	800ec64 <remove_chain+0x70>
			wc |= fs->win[bc % SS(fs)] << 8;
 800edec:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800edf0:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800edf2:	44c8      	add	r8, r9
 800edf4:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800edf8:	ea4a 2803 	orr.w	r8, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800edfc:	d505      	bpl.n	800ee0a <remove_chain+0x216>
		if (nxt == 0) break;				/* Empty cluster? */
 800edfe:	ea5f 1818 	movs.w	r8, r8, lsr #4
 800ee02:	f47f af45 	bne.w	800ec90 <remove_chain+0x9c>
	return FR_OK;
 800ee06:	2000      	movs	r0, #0
 800ee08:	e705      	b.n	800ec16 <remove_chain+0x22>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ee0a:	f3c8 080b 	ubfx	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800ee0e:	f1b8 0f00 	cmp.w	r8, #0
 800ee12:	f47f af3d 	bne.w	800ec90 <remove_chain+0x9c>
 800ee16:	e7f6      	b.n	800ee06 <remove_chain+0x212>

0800ee18 <dir_register>:
{
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	b085      	sub	sp, #20
 800ee1e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800ee20:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800ee22:	f7ff fcc5 	bl	800e7b0 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800ee26:	2800      	cmp	r0, #0
 800ee28:	f040 80b2 	bne.w	800ef90 <dir_register+0x178>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee2c:	f8d6 b02c 	ldr.w	fp, [r6, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee30:	f106 0330 	add.w	r3, r6, #48	@ 0x30
			res = move_window(fs, dp->sect);
 800ee34:	f8d4 a01c 	ldr.w	sl, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee38:	9300      	str	r3, [sp, #0]
 800ee3a:	465b      	mov	r3, fp
 800ee3c:	46d3      	mov	fp, sl
 800ee3e:	469a      	mov	sl, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee40:	45d3      	cmp	fp, sl
 800ee42:	d014      	beq.n	800ee6e <dir_register+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ee44:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ee46:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d15c      	bne.n	800ef06 <dir_register+0xee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	465a      	mov	r2, fp
 800ee50:	9900      	ldr	r1, [sp, #0]
 800ee52:	f7ff f843 	bl	800dedc <disk_read>
 800ee56:	b138      	cbz	r0, 800ee68 <dir_register+0x50>
			fs->winsect = sector;
 800ee58:	f04f 33ff 	mov.w	r3, #4294967295
 800ee5c:	62f3      	str	r3, [r6, #44]	@ 0x2c
				res = FR_DISK_ERR;
 800ee5e:	2501      	movs	r5, #1
}
 800ee60:	4628      	mov	r0, r5
 800ee62:	b005      	add	sp, #20
 800ee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800ee68:	46da      	mov	sl, fp
 800ee6a:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee6e:	6a23      	ldr	r3, [r4, #32]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2be5      	cmp	r3, #229	@ 0xe5
 800ee74:	d000      	beq.n	800ee78 <dir_register+0x60>
 800ee76:	bb2b      	cbnz	r3, 800eec4 <dir_register+0xac>
		res = move_window(fs, dp->sect);
 800ee78:	69e1      	ldr	r1, [r4, #28]
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	f7ff f94a 	bl	800e114 <move_window>
		if (res == FR_OK) {
 800ee80:	4605      	mov	r5, r0
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d1ec      	bne.n	800ee60 <dir_register+0x48>
		*d++ = (BYTE)val;
 800ee86:	2220      	movs	r2, #32
 800ee88:	4601      	mov	r1, r0
 800ee8a:	6a20      	ldr	r0, [r4, #32]
 800ee8c:	f000 fec2 	bl	800fc14 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ee90:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ee92:	f104 0225 	add.w	r2, r4, #37	@ 0x25
 800ee96:	1a9a      	subs	r2, r3, r2
 800ee98:	2a02      	cmp	r2, #2
 800ee9a:	f240 80db 	bls.w	800f054 <dir_register+0x23c>
			*d++ = *s++;
 800ee9e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800eea4:	605a      	str	r2, [r3, #4]
 800eea6:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
}
 800eeaa:	4628      	mov	r0, r5
			*d++ = *s++;
 800eeac:	721a      	strb	r2, [r3, #8]
 800eeae:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eeb2:	725a      	strb	r2, [r3, #9]
			fs->wflag = 1;
 800eeb4:	2201      	movs	r2, #1
			*d++ = *s++;
 800eeb6:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 800eeba:	7299      	strb	r1, [r3, #10]
			fs->wflag = 1;
 800eebc:	70f2      	strb	r2, [r6, #3]
}
 800eebe:	b005      	add	sp, #20
 800eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eec4:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800eec6:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eec8:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eeca:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800eece:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800eed2:	d265      	bcs.n	800efa0 <dir_register+0x188>
 800eed4:	f1bb 0f00 	cmp.w	fp, #0
 800eed8:	d062      	beq.n	800efa0 <dir_register+0x188>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800eeda:	f3c5 0908 	ubfx	r9, r5, #0, #9
 800eede:	f1b9 0f00 	cmp.w	r9, #0
 800eee2:	d109      	bne.n	800eef8 <dir_register+0xe0>
		dp->sect++;				/* Next sector */
 800eee4:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 800eee8:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800eeea:	f8c4 b01c 	str.w	fp, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800eeee:	bb51      	cbnz	r1, 800ef46 <dir_register+0x12e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eef0:	893b      	ldrh	r3, [r7, #8]
 800eef2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800eef6:	d952      	bls.n	800ef9e <dir_register+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eef8:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eefc:	eb08 0309 	add.w	r3, r8, r9
	dp->dptr = ofs;						/* Current entry */
 800ef00:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef02:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ef04:	e79c      	b.n	800ee40 <dir_register+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef06:	2301      	movs	r3, #1
 800ef08:	4652      	mov	r2, sl
 800ef0a:	9900      	ldr	r1, [sp, #0]
 800ef0c:	f7fe fff4 	bl	800def8 <disk_write>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d1a4      	bne.n	800ee5e <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef14:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800ef16:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef18:	ebaa 0103 	sub.w	r1, sl, r3
 800ef1c:	69b3      	ldr	r3, [r6, #24]
 800ef1e:	4299      	cmp	r1, r3
 800ef20:	d20f      	bcs.n	800ef42 <dir_register+0x12a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef22:	78b5      	ldrb	r5, [r6, #2]
 800ef24:	2d01      	cmp	r5, #1
 800ef26:	d90c      	bls.n	800ef42 <dir_register+0x12a>
 800ef28:	9f00      	ldr	r7, [sp, #0]
 800ef2a:	e000      	b.n	800ef2e <dir_register+0x116>
					wsect += fs->fsize;
 800ef2c:	69b3      	ldr	r3, [r6, #24]
 800ef2e:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef30:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef32:	2301      	movs	r3, #1
 800ef34:	4639      	mov	r1, r7
 800ef36:	4652      	mov	r2, sl
 800ef38:	7870      	ldrb	r0, [r6, #1]
 800ef3a:	f7fe ffdd 	bl	800def8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef3e:	2d01      	cmp	r5, #1
 800ef40:	d1f4      	bne.n	800ef2c <dir_register+0x114>
 800ef42:	7870      	ldrb	r0, [r6, #1]
 800ef44:	e782      	b.n	800ee4c <dir_register+0x34>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ef46:	897b      	ldrh	r3, [r7, #10]
 800ef48:	3b01      	subs	r3, #1
 800ef4a:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800ef4e:	d1d3      	bne.n	800eef8 <dir_register+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ef50:	4638      	mov	r0, r7
 800ef52:	f7ff fb07 	bl	800e564 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ef56:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ef58:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ef5a:	d979      	bls.n	800f050 <dir_register+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ef5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef60:	f43f af7d 	beq.w	800ee5e <dir_register+0x46>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	4298      	cmp	r0, r3
 800ef68:	d21c      	bcs.n	800efa4 <dir_register+0x18c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef6a:	3b02      	subs	r3, #2
	clst -= 2;
 800ef6c:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef70:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef74:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 800ef76:	f8c4 a018 	str.w	sl, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef7a:	f240 8084 	bls.w	800f086 <dir_register+0x26e>
	return clst * fs->csize + fs->database;
 800ef7e:	897a      	ldrh	r2, [r7, #10]
 800ef80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef82:	fb0b 3b02 	mla	fp, fp, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef86:	f8d6 a02c 	ldr.w	sl, [r6, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 800ef8a:	f8c4 b01c 	str.w	fp, [r4, #28]
 800ef8e:	e7b5      	b.n	800eefc <dir_register+0xe4>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ef90:	2804      	cmp	r0, #4
 800ef92:	4605      	mov	r5, r0
 800ef94:	d004      	beq.n	800efa0 <dir_register+0x188>
}
 800ef96:	4628      	mov	r0, r5
 800ef98:	b005      	add	sp, #20
 800ef9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 800ef9e:	61e1      	str	r1, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800efa0:	2507      	movs	r5, #7
	return res;
 800efa2:	e75d      	b.n	800ee60 <dir_register+0x48>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800efa4:	69a1      	ldr	r1, [r4, #24]
 800efa6:	4620      	mov	r0, r4
 800efa8:	f7ff fb32 	bl	800e610 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800efac:	4682      	mov	sl, r0
 800efae:	2800      	cmp	r0, #0
 800efb0:	d0f6      	beq.n	800efa0 <dir_register+0x188>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800efb2:	2801      	cmp	r0, #1
 800efb4:	d04c      	beq.n	800f050 <dir_register+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800efb6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800efba:	f43f af50 	beq.w	800ee5e <dir_register+0x46>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800efbe:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800efc0:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d16a      	bne.n	800f09e <dir_register+0x286>
		*d++ = (BYTE)val;
 800efc8:	2100      	movs	r1, #0
 800efca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efce:	4640      	mov	r0, r8
	clst -= 2;
 800efd0:	f1aa 0b02 	sub.w	fp, sl, #2
		*d++ = (BYTE)val;
 800efd4:	f000 fe1e 	bl	800fc14 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800efd8:	697b      	ldr	r3, [r7, #20]
	return clst * fs->csize + fs->database;
 800efda:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800efdc:	3b02      	subs	r3, #2
 800efde:	459b      	cmp	fp, r3
 800efe0:	f080 8086 	bcs.w	800f0f0 <dir_register+0x2d8>
	return clst * fs->csize + fs->database;
 800efe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efe6:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800efea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800efec:	2900      	cmp	r1, #0
 800efee:	d054      	beq.n	800f09a <dir_register+0x282>
 800eff0:	2100      	movs	r1, #0
 800eff2:	9403      	str	r4, [sp, #12]
 800eff4:	4614      	mov	r4, r2
 800eff6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800effa:	460e      	mov	r6, r1
						fs->wflag = 1;
 800effc:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f000:	4622      	mov	r2, r4
 800f002:	4641      	mov	r1, r8
 800f004:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800f006:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f008:	2301      	movs	r3, #1
 800f00a:	f7fe ff75 	bl	800def8 <disk_write>
 800f00e:	2800      	cmp	r0, #0
 800f010:	f47f af25 	bne.w	800ee5e <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f014:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 800f016:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f018:	1ae1      	subs	r1, r4, r3
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	4299      	cmp	r1, r3
 800f01e:	d20e      	bcs.n	800f03e <dir_register+0x226>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f020:	78bd      	ldrb	r5, [r7, #2]
 800f022:	2d01      	cmp	r5, #1
 800f024:	d801      	bhi.n	800f02a <dir_register+0x212>
 800f026:	e00a      	b.n	800f03e <dir_register+0x226>
					wsect += fs->fsize;
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f02c:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800f02e:	2301      	movs	r3, #1
 800f030:	4641      	mov	r1, r8
 800f032:	4622      	mov	r2, r4
 800f034:	7878      	ldrb	r0, [r7, #1]
 800f036:	f7fe ff5f 	bl	800def8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f03a:	2d01      	cmp	r5, #1
 800f03c:	d1f4      	bne.n	800f028 <dir_register+0x210>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f03e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f040:	1c73      	adds	r3, r6, #1
 800f042:	8979      	ldrh	r1, [r7, #10]
 800f044:	1c44      	adds	r4, r0, #1
 800f046:	428b      	cmp	r3, r1
 800f048:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800f04a:	d21f      	bcs.n	800f08c <dir_register+0x274>
 800f04c:	461e      	mov	r6, r3
 800f04e:	e7d5      	b.n	800effc <dir_register+0x1e4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f050:	2502      	movs	r5, #2
 800f052:	e705      	b.n	800ee60 <dir_register+0x48>
			*d++ = *s++;
 800f054:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800f058:	701a      	strb	r2, [r3, #0]
 800f05a:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 800f05e:	705a      	strb	r2, [r3, #1]
 800f060:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800f064:	709a      	strb	r2, [r3, #2]
 800f066:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 800f06a:	70da      	strb	r2, [r3, #3]
 800f06c:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800f070:	711a      	strb	r2, [r3, #4]
 800f072:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800f076:	715a      	strb	r2, [r3, #5]
 800f078:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800f07c:	719a      	strb	r2, [r3, #6]
 800f07e:	f894 202b 	ldrb.w	r2, [r4, #43]	@ 0x2b
 800f082:	71da      	strb	r2, [r3, #7]
 800f084:	e70f      	b.n	800eea6 <dir_register+0x8e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f086:	f04f 0b00 	mov.w	fp, #0
 800f08a:	e77c      	b.n	800ef86 <dir_register+0x16e>
					fs->winsect -= n;							/* Restore window offset */
 800f08c:	4631      	mov	r1, r6
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f08e:	697b      	ldr	r3, [r7, #20]
					fs->winsect -= n;							/* Restore window offset */
 800f090:	9d02      	ldr	r5, [sp, #8]
 800f092:	9e01      	ldr	r6, [sp, #4]
 800f094:	1a42      	subs	r2, r0, r1
 800f096:	9c03      	ldr	r4, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f098:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800f09a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f09c:	e76a      	b.n	800ef74 <dir_register+0x15c>
		wsect = fs->winsect;	/* Current sector number */
 800f09e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4641      	mov	r1, r8
 800f0a4:	7878      	ldrb	r0, [r7, #1]
 800f0a6:	9201      	str	r2, [sp, #4]
 800f0a8:	f7fe ff26 	bl	800def8 <disk_write>
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	f47f aed6 	bne.w	800ee5e <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	9a01      	ldr	r2, [sp, #4]
			fs->wflag = 0;
 800f0b6:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f0b8:	1ad1      	subs	r1, r2, r3
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	4299      	cmp	r1, r3
 800f0be:	d283      	bcs.n	800efc8 <dir_register+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0c0:	f897 b002 	ldrb.w	fp, [r7, #2]
 800f0c4:	f1bb 0f01 	cmp.w	fp, #1
 800f0c8:	f67f af7e 	bls.w	800efc8 <dir_register+0x1b0>
 800f0cc:	9401      	str	r4, [sp, #4]
 800f0ce:	4614      	mov	r4, r2
 800f0d0:	e000      	b.n	800f0d4 <dir_register+0x2bc>
					wsect += fs->fsize;
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0d6:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4641      	mov	r1, r8
 800f0de:	4622      	mov	r2, r4
 800f0e0:	7878      	ldrb	r0, [r7, #1]
 800f0e2:	f7fe ff09 	bl	800def8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0e6:	f1bb 0f01 	cmp.w	fp, #1
 800f0ea:	d1f2      	bne.n	800f0d2 <dir_register+0x2ba>
 800f0ec:	9c01      	ldr	r4, [sp, #4]
 800f0ee:	e76b      	b.n	800efc8 <dir_register+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	e77a      	b.n	800efea <dir_register+0x1d2>

0800f0f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f0f4:	b510      	push	{r4, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800f0fc:	b1a1      	cbz	r1, 800f128 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f0fe:	f891 c000 	ldrb.w	ip, [r1]
 800f102:	f1bc 0f20 	cmp.w	ip, #32
 800f106:	d912      	bls.n	800f12e <f_mount+0x3a>
 800f108:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 800f10c:	d00f      	beq.n	800f12e <f_mount+0x3a>
 800f10e:	4608      	mov	r0, r1
 800f110:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f114:	2b20      	cmp	r3, #32
 800f116:	d90c      	bls.n	800f132 <f_mount+0x3e>
 800f118:	2b3a      	cmp	r3, #58	@ 0x3a
 800f11a:	d1f9      	bne.n	800f110 <f_mount+0x1c>
			i = *tp++ - '0';
 800f11c:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f11e:	4288      	cmp	r0, r1
 800f120:	d102      	bne.n	800f128 <f_mount+0x34>
 800f122:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f126:	d006      	beq.n	800f136 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800f128:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800f12a:	b002      	add	sp, #8
 800f12c:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f12e:	4663      	mov	r3, ip
 800f130:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f132:	2b3a      	cmp	r3, #58	@ 0x3a
 800f134:	d0f2      	beq.n	800f11c <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f136:	4913      	ldr	r1, [pc, #76]	@ (800f184 <f_mount+0x90>)
 800f138:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800f13a:	b143      	cbz	r3, 800f14e <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f13c:	4812      	ldr	r0, [pc, #72]	@ (800f188 <f_mount+0x94>)
 800f13e:	6804      	ldr	r4, [r0, #0]
 800f140:	42a3      	cmp	r3, r4
 800f142:	d019      	beq.n	800f178 <f_mount+0x84>
 800f144:	6904      	ldr	r4, [r0, #16]
 800f146:	429c      	cmp	r4, r3
 800f148:	d013      	beq.n	800f172 <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800f14a:	2000      	movs	r0, #0
 800f14c:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800f14e:	9b01      	ldr	r3, [sp, #4]
 800f150:	b15b      	cbz	r3, 800f16a <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800f152:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f154:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800f156:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800f158:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f15a:	d107      	bne.n	800f16c <f_mount+0x78>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f15c:	4602      	mov	r2, r0
 800f15e:	a901      	add	r1, sp, #4
 800f160:	4668      	mov	r0, sp
 800f162:	f7ff f815 	bl	800e190 <find_volume>
}
 800f166:	b002      	add	sp, #8
 800f168:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800f16a:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f16c:	2000      	movs	r0, #0
}
 800f16e:	b002      	add	sp, #8
 800f170:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f172:	2400      	movs	r4, #0
 800f174:	6104      	str	r4, [r0, #16]
 800f176:	e7e8      	b.n	800f14a <f_mount+0x56>
 800f178:	2400      	movs	r4, #0
 800f17a:	6004      	str	r4, [r0, #0]
 800f17c:	6904      	ldr	r4, [r0, #16]
 800f17e:	429c      	cmp	r4, r3
 800f180:	d1e3      	bne.n	800f14a <f_mount+0x56>
 800f182:	e7f6      	b.n	800f172 <f_mount+0x7e>
 800f184:	240ac8dc 	.word	0x240ac8dc
 800f188:	240ac8b8 	.word	0x240ac8b8

0800f18c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f190:	b090      	sub	sp, #64	@ 0x40
 800f192:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f194:	2800      	cmp	r0, #0
 800f196:	d036      	beq.n	800f206 <f_open+0x7a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f198:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800f19c:	4616      	mov	r6, r2
 800f19e:	4604      	mov	r4, r0
 800f1a0:	a903      	add	r1, sp, #12
 800f1a2:	a801      	add	r0, sp, #4
 800f1a4:	463a      	mov	r2, r7
 800f1a6:	f7fe fff3 	bl	800e190 <find_volume>
	if (res == FR_OK) {
 800f1aa:	4605      	mov	r5, r0
 800f1ac:	b128      	cbz	r0, 800f1ba <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	b010      	add	sp, #64	@ 0x40
 800f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800f1ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f1be:	a804      	add	r0, sp, #16
 800f1c0:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800f1c2:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f1c6:	f7ff fb7b 	bl	800e8c0 <follow_path>
		if (res == FR_OK) {
 800f1ca:	b9a8      	cbnz	r0, 800f1f8 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f1cc:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	db1d      	blt.n	800f210 <f_open+0x84>
		if (Files[i].fs) {	/* Existing entry */
 800f1d4:	4ba8      	ldr	r3, [pc, #672]	@ (800f478 <f_open+0x2ec>)
 800f1d6:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1da:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800f1dc:	6818      	ldr	r0, [r3, #0]
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	f000 8109 	beq.w	800f3f6 <f_open+0x26a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1e4:	4290      	cmp	r0, r2
 800f1e6:	d060      	beq.n	800f2aa <f_open+0x11e>
		if (Files[i].fs) {	/* Existing entry */
 800f1e8:	6919      	ldr	r1, [r3, #16]
 800f1ea:	2900      	cmp	r1, #0
 800f1ec:	d06d      	beq.n	800f2ca <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1ee:	4291      	cmp	r1, r2
 800f1f0:	f000 8116 	beq.w	800f420 <f_open+0x294>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f1f4:	2512      	movs	r5, #18
 800f1f6:	e7da      	b.n	800f1ae <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f1f8:	f016 0f1c 	tst.w	r6, #28
 800f1fc:	d001      	beq.n	800f202 <f_open+0x76>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f1fe:	2804      	cmp	r0, #4
 800f200:	d008      	beq.n	800f214 <f_open+0x88>
 800f202:	4605      	mov	r5, r0
 800f204:	e7d3      	b.n	800f1ae <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800f206:	2509      	movs	r5, #9
}
 800f208:	4628      	mov	r0, r5
 800f20a:	b010      	add	sp, #64	@ 0x40
 800f20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800f210:	2506      	movs	r5, #6
 800f212:	e7cc      	b.n	800f1ae <f_open+0x22>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f214:	4b98      	ldr	r3, [pc, #608]	@ (800f478 <f_open+0x2ec>)
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	2a00      	cmp	r2, #0
 800f21a:	f000 80f9 	beq.w	800f410 <f_open+0x284>
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1e7      	bne.n	800f1f4 <f_open+0x68>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f224:	a804      	add	r0, sp, #16
 800f226:	f7ff fdf7 	bl	800ee18 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f22a:	4603      	mov	r3, r0
 800f22c:	2800      	cmp	r0, #0
 800f22e:	f040 811c 	bne.w	800f46a <f_open+0x2de>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f232:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 800f236:	f7fe fd47 	bl	800dcc8 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f23a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f23e:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800f240:	f8c9 000e 	str.w	r0, [r9, #14]
 800f244:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f248:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 800f24c:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800f250:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800f254:	2b03      	cmp	r3, #3
 800f256:	d103      	bne.n	800f260 <f_open+0xd4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f258:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800f25c:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f260:	2300      	movs	r3, #0
 800f262:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800f266:	f898 2000 	ldrb.w	r2, [r8]
 800f26a:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800f26c:	f04f 0200 	mov.w	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f270:	bf08      	it	eq
 800f272:	f8a9 3014 	strheq.w	r3, [r9, #20]
					fs->wflag = 1;
 800f276:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f278:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 800f27c:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800f280:	2e00      	cmp	r6, #0
 800f282:	f040 80de 	bne.w	800f442 <f_open+0x2b6>
				mode |= FA_MODIFIED;
 800f286:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f28a:	2f01      	cmp	r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f28c:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f290:	a804      	add	r0, sp, #16
 800f292:	bf94      	ite	ls
 800f294:	2100      	movls	r1, #0
 800f296:	2101      	movhi	r1, #1
			fp->dir_ptr = dj.dir;
 800f298:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f29c:	f7fe fe46 	bl	800df2c <inc_lock>
 800f2a0:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d143      	bne.n	800f32e <f_open+0x1a2>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f2a6:	2502      	movs	r5, #2
 800f2a8:	e781      	b.n	800f1ae <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f2aa:	685a      	ldr	r2, [r3, #4]
 800f2ac:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f2b0:	4572      	cmp	r2, lr
 800f2b2:	f000 80b9 	beq.w	800f428 <f_open+0x29c>
		if (Files[i].fs) {	/* Existing entry */
 800f2b6:	691a      	ldr	r2, [r3, #16]
 800f2b8:	b13a      	cbz	r2, 800f2ca <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f2ba:	4282      	cmp	r2, r0
 800f2bc:	d19a      	bne.n	800f1f4 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f2be:	4628      	mov	r0, r5
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f2c0:	695a      	ldr	r2, [r3, #20]
 800f2c2:	4572      	cmp	r2, lr
 800f2c4:	d00d      	beq.n	800f2e2 <f_open+0x156>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d094      	beq.n	800f1f4 <f_open+0x68>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f2ca:	f016 0f1c 	tst.w	r6, #28
 800f2ce:	d018      	beq.n	800f302 <f_open+0x176>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f2d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f2d4:	f013 0f11 	tst.w	r3, #17
 800f2d8:	d120      	bne.n	800f31c <f_open+0x190>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f2da:	0773      	lsls	r3, r6, #29
 800f2dc:	d520      	bpl.n	800f320 <f_open+0x194>
 800f2de:	2508      	movs	r5, #8
 800f2e0:	e765      	b.n	800f1ae <f_open+0x22>
				Files[i].clu == dp->obj.sclust &&
 800f2e2:	6999      	ldr	r1, [r3, #24]
 800f2e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2e6:	4291      	cmp	r1, r2
 800f2e8:	d1ed      	bne.n	800f2c6 <f_open+0x13a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f2ea:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f2ec:	f1bc 0f00 	cmp.w	ip, #0
 800f2f0:	d105      	bne.n	800f2fe <f_open+0x172>
 800f2f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f2f6:	899b      	ldrh	r3, [r3, #12]
 800f2f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2fc:	d1e5      	bne.n	800f2ca <f_open+0x13e>
 800f2fe:	2510      	movs	r5, #16
 800f300:	e755      	b.n	800f1ae <f_open+0x22>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f302:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f306:	06d8      	lsls	r0, r3, #27
 800f308:	d40f      	bmi.n	800f32a <f_open+0x19e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f30a:	07b2      	lsls	r2, r6, #30
 800f30c:	d501      	bpl.n	800f312 <f_open+0x186>
 800f30e:	07db      	lsls	r3, r3, #31
 800f310:	d404      	bmi.n	800f31c <f_open+0x190>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f312:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 800f314:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f318:	d5b7      	bpl.n	800f28a <f_open+0xfe>
 800f31a:	e7b4      	b.n	800f286 <f_open+0xfa>
					res = FR_DENIED;
 800f31c:	2507      	movs	r5, #7
 800f31e:	e746      	b.n	800f1ae <f_open+0x22>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f320:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800f322:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f326:	d5b0      	bpl.n	800f28a <f_open+0xfe>
 800f328:	e785      	b.n	800f236 <f_open+0xaa>
					res = FR_NO_FILE;
 800f32a:	2504      	movs	r5, #4
 800f32c:	e73f      	b.n	800f1ae <f_open+0x22>
	if (fs->fs_type == FS_FAT32) {
 800f32e:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800f332:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800f336:	2b03      	cmp	r3, #3
 800f338:	d103      	bne.n	800f342 <f_open+0x1b6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f33a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800f33e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f342:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 800f344:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f348:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f34a:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
	rv = rv << 8 | ptr[0];
 800f34e:	f8d9 901c 	ldr.w	r9, [r9, #28]
		*d++ = (BYTE)val;
 800f352:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f356:	62e1      	str	r1, [r4, #44]	@ 0x2c
		*d++ = (BYTE)val;
 800f358:	4650      	mov	r0, sl
			fp->err = 0;			/* Clear error flag */
 800f35a:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f35c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f35e:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f360:	f8c4 8000 	str.w	r8, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f364:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->obj.id = fs->id;
 800f368:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800f36a:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 800f36c:	f000 fc52 	bl	800fc14 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f370:	06b9      	lsls	r1, r7, #26
 800f372:	f57f af1e 	bpl.w	800f1b2 <f_open+0x26>
 800f376:	f1b9 0f00 	cmp.w	r9, #0
 800f37a:	f43f af1a 	beq.w	800f1b2 <f_open+0x26>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f37e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f382:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f386:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f38a:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f38e:	d96e      	bls.n	800f46e <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800f390:	4631      	mov	r1, r6
 800f392:	6820      	ldr	r0, [r4, #0]
 800f394:	f7ff f8e6 	bl	800e564 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800f398:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f39a:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800f39e:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f3a0:	d934      	bls.n	800f40c <f_open+0x280>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3a2:	1c42      	adds	r2, r0, #1
 800f3a4:	d001      	beq.n	800f3aa <f_open+0x21e>
 800f3a6:	454f      	cmp	r7, r9
 800f3a8:	d3f2      	bcc.n	800f390 <f_open+0x204>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3aa:	1c73      	adds	r3, r6, #1
				fp->clust = clst;
 800f3ac:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3ae:	d020      	beq.n	800f3f2 <f_open+0x266>
 800f3b0:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f43f aefc 	beq.w	800f1b2 <f_open+0x26>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f3ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
	clst -= 2;
 800f3be:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f3c0:	3b02      	subs	r3, #2
 800f3c2:	429e      	cmp	r6, r3
 800f3c4:	f4bf af6f 	bcs.w	800f2a6 <f_open+0x11a>
	return clst * fs->csize + fs->database;
 800f3c8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800f3cc:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800f3d0:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f3d4:	2a00      	cmp	r2, #0
 800f3d6:	f43f af66 	beq.w	800f2a6 <f_open+0x11a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f3da:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f3de:	4651      	mov	r1, sl
 800f3e0:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f3e2:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f3e4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f3e8:	f7fe fd78 	bl	800dedc <disk_read>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	f43f aee0 	beq.w	800f1b2 <f_open+0x26>
 800f3f2:	2501      	movs	r5, #1
 800f3f4:	e6db      	b.n	800f1ae <f_open+0x22>
		if (Files[i].fs) {	/* Existing entry */
 800f3f6:	6919      	ldr	r1, [r3, #16]
 800f3f8:	2900      	cmp	r1, #0
 800f3fa:	f43f af66 	beq.w	800f2ca <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f3fe:	4291      	cmp	r1, r2
 800f400:	f47f af63 	bne.w	800f2ca <f_open+0x13e>
			be = 1;
 800f404:	2001      	movs	r0, #1
 800f406:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f40a:	e759      	b.n	800f2c0 <f_open+0x134>
				fp->clust = clst;
 800f40c:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f40e:	e74a      	b.n	800f2a6 <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f410:	a804      	add	r0, sp, #16
 800f412:	f7ff fd01 	bl	800ee18 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f416:	2800      	cmp	r0, #0
 800f418:	f43f af0b 	beq.w	800f232 <f_open+0xa6>
 800f41c:	4605      	mov	r5, r0
 800f41e:	e6c6      	b.n	800f1ae <f_open+0x22>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f420:	4628      	mov	r0, r5
 800f422:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f426:	e74b      	b.n	800f2c0 <f_open+0x134>
				Files[i].clu == dp->obj.sclust &&
 800f428:	689a      	ldr	r2, [r3, #8]
 800f42a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f42c:	4291      	cmp	r1, r2
 800f42e:	d020      	beq.n	800f472 <f_open+0x2e6>
		if (Files[i].fs) {	/* Existing entry */
 800f430:	691a      	ldr	r2, [r3, #16]
 800f432:	2a00      	cmp	r2, #0
 800f434:	f43f af49 	beq.w	800f2ca <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f438:	4290      	cmp	r0, r2
 800f43a:	f47f aedb 	bne.w	800f1f4 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f43e:	2000      	movs	r0, #0
 800f440:	e73e      	b.n	800f2c0 <f_open+0x134>
						res = remove_chain(&dj.obj, cl, 0);
 800f442:	4631      	mov	r1, r6
 800f444:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800f446:	f8d8 a02c 	ldr.w	sl, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800f44a:	f7ff fbd3 	bl	800ebf4 <remove_chain>
						if (res == FR_OK) {
 800f44e:	2800      	cmp	r0, #0
 800f450:	f47f aed7 	bne.w	800f202 <f_open+0x76>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f454:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800f456:	4651      	mov	r1, sl
 800f458:	4640      	mov	r0, r8
 800f45a:	f7fe fe5b 	bl	800e114 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f45e:	f8c8 600c 	str.w	r6, [r8, #12]
		if (res == FR_OK) {
 800f462:	4603      	mov	r3, r0
 800f464:	2800      	cmp	r0, #0
 800f466:	f43f af0e 	beq.w	800f286 <f_open+0xfa>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f46a:	461d      	mov	r5, r3
 800f46c:	e69f      	b.n	800f1ae <f_open+0x22>
				fp->clust = clst;
 800f46e:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f470:	e79e      	b.n	800f3b0 <f_open+0x224>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f472:	462a      	mov	r2, r5
 800f474:	e73a      	b.n	800f2ec <f_open+0x160>
 800f476:	bf00      	nop
 800f478:	240ac8b8 	.word	0x240ac8b8

0800f47c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f480:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800f482:	2300      	movs	r3, #0
{
 800f484:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800f486:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f488:	b150      	cbz	r0, 800f4a0 <f_read+0x24>
 800f48a:	6803      	ldr	r3, [r0, #0]
 800f48c:	4604      	mov	r4, r0
 800f48e:	b13b      	cbz	r3, 800f4a0 <f_read+0x24>
 800f490:	4691      	mov	r9, r2
 800f492:	781a      	ldrb	r2, [r3, #0]
 800f494:	b122      	cbz	r2, 800f4a0 <f_read+0x24>
 800f496:	460e      	mov	r6, r1
 800f498:	88da      	ldrh	r2, [r3, #6]
 800f49a:	8881      	ldrh	r1, [r0, #4]
 800f49c:	4291      	cmp	r1, r2
 800f49e:	d004      	beq.n	800f4aa <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 800f4a0:	2509      	movs	r5, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	b003      	add	sp, #12
 800f4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f4aa:	7858      	ldrb	r0, [r3, #1]
 800f4ac:	f7fe fcf6 	bl	800de9c <disk_status>
 800f4b0:	07c2      	lsls	r2, r0, #31
 800f4b2:	d4f5      	bmi.n	800f4a0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f4b4:	7d65      	ldrb	r5, [r4, #21]
 800f4b6:	2d00      	cmp	r5, #0
 800f4b8:	d1f3      	bne.n	800f4a2 <f_read+0x26>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f4ba:	7d23      	ldrb	r3, [r4, #20]
 800f4bc:	f013 0b01 	ands.w	fp, r3, #1
 800f4c0:	f000 80d9 	beq.w	800f676 <f_read+0x1fa>
	remain = fp->obj.objsize - fp->fptr;
 800f4c4:	69a0      	ldr	r0, [r4, #24]
 800f4c6:	68e3      	ldr	r3, [r4, #12]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f4c8:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 800f4cc:	eba3 0800 	sub.w	r8, r3, r0
 800f4d0:	45c8      	cmp	r8, r9
 800f4d2:	bf28      	it	cs
 800f4d4:	46c8      	movcs	r8, r9
	for ( ;  btr;								/* Repeat until all data read */
 800f4d6:	f1b8 0f00 	cmp.w	r8, #0
 800f4da:	d0e2      	beq.n	800f4a2 <f_read+0x26>
 800f4dc:	9500      	str	r5, [sp, #0]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f4de:	f3c0 0c08 	ubfx	ip, r0, #0, #9
 800f4e2:	f1bc 0f00 	cmp.w	ip, #0
 800f4e6:	d152      	bne.n	800f58e <f_read+0x112>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f4e8:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800f4ec:	0a43      	lsrs	r3, r0, #9
 800f4ee:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800f4f0:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 800f4f4:	d036      	beq.n	800f564 <f_read+0xe8>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f4f6:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f4f8:	f8da 3014 	ldr.w	r3, [sl, #20]
	clst -= 2;
 800f4fc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f4fe:	3b02      	subs	r3, #2
 800f500:	4298      	cmp	r0, r3
 800f502:	d23d      	bcs.n	800f580 <f_read+0x104>
	return clst * fs->csize + fs->database;
 800f504:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800f508:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 800f50c:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f510:	2b00      	cmp	r3, #0
 800f512:	d035      	beq.n	800f580 <f_read+0x104>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f514:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
			sect += csect;
 800f518:	eb02 0903 	add.w	r9, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f51c:	d378      	bcc.n	800f610 <f_read+0x194>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f51e:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f522:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f526:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f528:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 800f52c:	bf88      	it	hi
 800f52e:	1a8d      	subhi	r5, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f530:	464a      	mov	r2, r9
 800f532:	4631      	mov	r1, r6
 800f534:	462b      	mov	r3, r5
 800f536:	f7fe fcd1 	bl	800dedc <disk_read>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	f040 8094 	bne.w	800f668 <f_read+0x1ec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f540:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800f544:	2a00      	cmp	r2, #0
 800f546:	f2c0 80ad 	blt.w	800f6a4 <f_read+0x228>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f54a:	026a      	lsls	r2, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f54c:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800f54e:	ebb8 0802 	subs.w	r8, r8, r2
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	4416      	add	r6, r2
 800f556:	4410      	add	r0, r2
 800f558:	4413      	add	r3, r2
 800f55a:	61a0      	str	r0, [r4, #24]
 800f55c:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800f55e:	d1be      	bne.n	800f4de <f_read+0x62>
 800f560:	9d00      	ldr	r5, [sp, #0]
 800f562:	e79e      	b.n	800f4a2 <f_read+0x26>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f564:	2800      	cmp	r0, #0
 800f566:	d16b      	bne.n	800f640 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f568:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f56a:	2801      	cmp	r0, #1
 800f56c:	d908      	bls.n	800f580 <f_read+0x104>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f56e:	1c43      	adds	r3, r0, #1
 800f570:	d07a      	beq.n	800f668 <f_read+0x1ec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f572:	f8da 3014 	ldr.w	r3, [sl, #20]
				fp->clust = clst;				/* Update current cluster */
 800f576:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800f578:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f57a:	3b02      	subs	r3, #2
 800f57c:	4298      	cmp	r0, r3
 800f57e:	d3c1      	bcc.n	800f504 <f_read+0x88>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f580:	2302      	movs	r3, #2
 800f582:	461d      	mov	r5, r3
 800f584:	7563      	strb	r3, [r4, #21]
}
 800f586:	4628      	mov	r0, r5
 800f588:	b003      	add	sp, #12
 800f58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f58e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f592:	f5cc 7300 	rsb	r3, ip, #512	@ 0x200
 800f596:	4543      	cmp	r3, r8
 800f598:	bf28      	it	cs
 800f59a:	4643      	movcs	r3, r8
 800f59c:	461a      	mov	r2, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f59e:	eb01 030c 	add.w	r3, r1, ip
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f5a2:	1e50      	subs	r0, r2, #1
 800f5a4:	2805      	cmp	r0, #5
 800f5a6:	d905      	bls.n	800f5b4 <f_read+0x138>
 800f5a8:	f10c 0c01 	add.w	ip, ip, #1
 800f5ac:	4461      	add	r1, ip
 800f5ae:	1a71      	subs	r1, r6, r1
 800f5b0:	2902      	cmp	r1, #2
 800f5b2:	d809      	bhi.n	800f5c8 <f_read+0x14c>
 800f5b4:	1e71      	subs	r1, r6, #1
 800f5b6:	eb03 0c02 	add.w	ip, r3, r2
			*d++ = *s++;
 800f5ba:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800f5be:	4563      	cmp	r3, ip
			*d++ = *s++;
 800f5c0:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800f5c4:	d1f9      	bne.n	800f5ba <f_read+0x13e>
 800f5c6:	e7c1      	b.n	800f54c <f_read+0xd0>
 800f5c8:	f022 0e03 	bic.w	lr, r2, #3
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	449e      	add	lr, r3
			*d++ = *s++;
 800f5d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800f5d6:	4571      	cmp	r1, lr
 800f5d8:	f840 5b04 	str.w	r5, [r0], #4
		} while (--cnt);
 800f5dc:	d1f9      	bne.n	800f5d2 <f_read+0x156>
 800f5de:	f022 0103 	bic.w	r1, r2, #3
 800f5e2:	0795      	lsls	r5, r2, #30
 800f5e4:	f002 0003 	and.w	r0, r2, #3
 800f5e8:	eb06 0c01 	add.w	ip, r6, r1
 800f5ec:	eb03 0e01 	add.w	lr, r3, r1
 800f5f0:	d0ac      	beq.n	800f54c <f_read+0xd0>
			*d++ = *s++;
 800f5f2:	5c5b      	ldrb	r3, [r3, r1]
		} while (--cnt);
 800f5f4:	2801      	cmp	r0, #1
			*d++ = *s++;
 800f5f6:	5473      	strb	r3, [r6, r1]
		} while (--cnt);
 800f5f8:	d0a8      	beq.n	800f54c <f_read+0xd0>
			*d++ = *s++;
 800f5fa:	f89e 3001 	ldrb.w	r3, [lr, #1]
		} while (--cnt);
 800f5fe:	2802      	cmp	r0, #2
			*d++ = *s++;
 800f600:	f88c 3001 	strb.w	r3, [ip, #1]
		} while (--cnt);
 800f604:	d0a2      	beq.n	800f54c <f_read+0xd0>
			*d++ = *s++;
 800f606:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800f60a:	f88c 3002 	strb.w	r3, [ip, #2]
		} while (--cnt);
 800f60e:	e79d      	b.n	800f54c <f_read+0xd0>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f610:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f612:	f104 0130 	add.w	r1, r4, #48	@ 0x30
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f616:	454a      	cmp	r2, r9
 800f618:	d00c      	beq.n	800f634 <f_read+0x1b8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f61a:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f61e:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f622:	2b00      	cmp	r3, #0
 800f624:	db30      	blt.n	800f688 <f_read+0x20c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f626:	2301      	movs	r3, #1
 800f628:	464a      	mov	r2, r9
 800f62a:	9101      	str	r1, [sp, #4]
 800f62c:	f7fe fc56 	bl	800dedc <disk_read>
 800f630:	9901      	ldr	r1, [sp, #4]
 800f632:	b9c8      	cbnz	r0, 800f668 <f_read+0x1ec>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f634:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800f636:	f8c4 9020 	str.w	r9, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f63a:	f3c3 0c08 	ubfx	ip, r3, #0, #9
 800f63e:	e7a8      	b.n	800f592 <f_read+0x116>
					if (fp->cltbl) {
 800f640:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	FATFS *fs = fp->obj.fs;
 800f642:	6821      	ldr	r1, [r4, #0]
					if (fp->cltbl) {
 800f644:	b1c8      	cbz	r0, 800f67a <f_read+0x1fe>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f646:	8949      	ldrh	r1, [r1, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f648:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f64a:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f64e:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f650:	b929      	cbnz	r1, 800f65e <f_read+0x1e2>
 800f652:	e795      	b.n	800f580 <f_read+0x104>
		cl -= ncl; tbl++;		/* Next fragment */
 800f654:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f656:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f65a:	2900      	cmp	r1, #0
 800f65c:	d090      	beq.n	800f580 <f_read+0x104>
		if (cl < ncl) break;	/* In this fragment? */
 800f65e:	428b      	cmp	r3, r1
 800f660:	d2f8      	bcs.n	800f654 <f_read+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 800f662:	6840      	ldr	r0, [r0, #4]
 800f664:	4418      	add	r0, r3
 800f666:	e780      	b.n	800f56a <f_read+0xee>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f668:	465d      	mov	r5, fp
 800f66a:	2301      	movs	r3, #1
}
 800f66c:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f66e:	7563      	strb	r3, [r4, #21]
}
 800f670:	b003      	add	sp, #12
 800f672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f676:	2507      	movs	r5, #7
 800f678:	e713      	b.n	800f4a2 <f_read+0x26>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f67a:	4608      	mov	r0, r1
 800f67c:	69e1      	ldr	r1, [r4, #28]
 800f67e:	9201      	str	r2, [sp, #4]
 800f680:	f7fe ff70 	bl	800e564 <get_fat.isra.0>
 800f684:	9a01      	ldr	r2, [sp, #4]
 800f686:	e770      	b.n	800f56a <f_read+0xee>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f688:	2301      	movs	r3, #1
 800f68a:	9101      	str	r1, [sp, #4]
 800f68c:	f7fe fc34 	bl	800def8 <disk_write>
 800f690:	2800      	cmp	r0, #0
 800f692:	d1e9      	bne.n	800f668 <f_read+0x1ec>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f694:	7d23      	ldrb	r3, [r4, #20]
 800f696:	9901      	ldr	r1, [sp, #4]
 800f698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f69c:	7523      	strb	r3, [r4, #20]
 800f69e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800f6a2:	e7c0      	b.n	800f626 <f_read+0x1aa>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f6a4:	6a22      	ldr	r2, [r4, #32]
 800f6a6:	eba2 0209 	sub.w	r2, r2, r9
 800f6aa:	42aa      	cmp	r2, r5
 800f6ac:	f4bf af4d 	bcs.w	800f54a <f_read+0xce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f6b0:	eb06 2242 	add.w	r2, r6, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f6b4:	f104 0131 	add.w	r1, r4, #49	@ 0x31
 800f6b8:	1a51      	subs	r1, r2, r1
 800f6ba:	2902      	cmp	r1, #2
 800f6bc:	d90a      	bls.n	800f6d4 <f_read+0x258>
 800f6be:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f6c2:	f502 7c00 	add.w	ip, r2, #512	@ 0x200
			*d++ = *s++;
 800f6c6:	f851 3b04 	ldr.w	r3, [r1], #4
 800f6ca:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800f6ce:	4562      	cmp	r2, ip
 800f6d0:	d1f9      	bne.n	800f6c6 <f_read+0x24a>
 800f6d2:	e73a      	b.n	800f54a <f_read+0xce>
 800f6d4:	3a01      	subs	r2, #1
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f6d6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f6da:	f504 7c0c 	add.w	ip, r4, #560	@ 0x230
			*d++ = *s++;
 800f6de:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800f6e2:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f6e4:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800f6e8:	d1f9      	bne.n	800f6de <f_read+0x262>
 800f6ea:	e72e      	b.n	800f54a <f_read+0xce>

0800f6ec <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6ec:	b158      	cbz	r0, 800f706 <f_close+0x1a>
 800f6ee:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f6f0:	b570      	push	{r4, r5, r6, lr}
 800f6f2:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f6f4:	b12b      	cbz	r3, 800f702 <f_close+0x16>
 800f6f6:	781a      	ldrb	r2, [r3, #0]
 800f6f8:	b11a      	cbz	r2, 800f702 <f_close+0x16>
 800f6fa:	8881      	ldrh	r1, [r0, #4]
 800f6fc:	88da      	ldrh	r2, [r3, #6]
 800f6fe:	4291      	cmp	r1, r2
 800f700:	d003      	beq.n	800f70a <f_close+0x1e>
{
 800f702:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800f704:	bd70      	pop	{r4, r5, r6, pc}
{
 800f706:	2009      	movs	r0, #9
}
 800f708:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f70a:	7858      	ldrb	r0, [r3, #1]
 800f70c:	f7fe fbc6 	bl	800de9c <disk_status>
 800f710:	07c1      	lsls	r1, r0, #31
 800f712:	d4f6      	bmi.n	800f702 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f714:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f716:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f718:	065a      	lsls	r2, r3, #25
 800f71a:	d52e      	bpl.n	800f77a <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f71c:	061b      	lsls	r3, r3, #24
 800f71e:	d451      	bmi.n	800f7c4 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800f720:	f7fe fad2 	bl	800dcc8 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f724:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f726:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800f728:	4628      	mov	r0, r5
 800f72a:	f7fe fcf3 	bl	800e114 <move_window>
				if (res == FR_OK) {
 800f72e:	2800      	cmp	r0, #0
 800f730:	d1e8      	bne.n	800f704 <f_close+0x18>
					dir = fp->dir_ptr;
 800f732:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f734:	7ada      	ldrb	r2, [r3, #11]
 800f736:	f042 0220 	orr.w	r2, r2, #32
 800f73a:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f73c:	68a2      	ldr	r2, [r4, #8]
 800f73e:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f740:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800f744:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800f746:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800f748:	7809      	ldrb	r1, [r1, #0]
 800f74a:	2903      	cmp	r1, #3
 800f74c:	d103      	bne.n	800f756 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f74e:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f750:	751a      	strb	r2, [r3, #20]
 800f752:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800f754:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800f756:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800f758:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f75a:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f75e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800f760:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f762:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800f764:	2301      	movs	r3, #1
 800f766:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f768:	f7fe fc76 	bl	800e058 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f76c:	7d23      	ldrb	r3, [r4, #20]
 800f76e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f772:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800f774:	2800      	cmp	r0, #0
 800f776:	d1c5      	bne.n	800f704 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f778:	6825      	ldr	r5, [r4, #0]
 800f77a:	2d00      	cmp	r5, #0
 800f77c:	d0c1      	beq.n	800f702 <f_close+0x16>
 800f77e:	782b      	ldrb	r3, [r5, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d0be      	beq.n	800f702 <f_close+0x16>
 800f784:	88a2      	ldrh	r2, [r4, #4]
 800f786:	88eb      	ldrh	r3, [r5, #6]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d1ba      	bne.n	800f702 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f78c:	7868      	ldrb	r0, [r5, #1]
 800f78e:	f7fe fb85 	bl	800de9c <disk_status>
 800f792:	f010 0001 	ands.w	r0, r0, #1
 800f796:	d1b4      	bne.n	800f702 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f798:	6923      	ldr	r3, [r4, #16]
 800f79a:	3b01      	subs	r3, #1
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d81e      	bhi.n	800f7de <f_close+0xf2>
		n = Files[i].ctr;
 800f7a0:	4912      	ldr	r1, [pc, #72]	@ (800f7ec <f_close+0x100>)
 800f7a2:	011d      	lsls	r5, r3, #4
 800f7a4:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f7a8:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f7aa:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800f7ae:	d01a      	beq.n	800f7e6 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800f7b0:	b11a      	cbz	r2, 800f7ba <f_close+0xce>
 800f7b2:	3a01      	subs	r2, #1
 800f7b4:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800f7b6:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f7b8:	b90a      	cbnz	r2, 800f7be <f_close+0xd2>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800f7be:	2300      	movs	r3, #0
 800f7c0:	6023      	str	r3, [r4, #0]
}
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	6a22      	ldr	r2, [r4, #32]
 800f7c8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f7cc:	7868      	ldrb	r0, [r5, #1]
 800f7ce:	f7fe fb93 	bl	800def8 <disk_write>
 800f7d2:	b930      	cbnz	r0, 800f7e2 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7d4:	7d23      	ldrb	r3, [r4, #20]
 800f7d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7da:	7523      	strb	r3, [r4, #20]
 800f7dc:	e7a0      	b.n	800f720 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f7de:	2002      	movs	r0, #2
}
 800f7e0:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f7e2:	2001      	movs	r0, #1
}
 800f7e4:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800f7e6:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f7e8:	e7e7      	b.n	800f7ba <f_close+0xce>
 800f7ea:	bf00      	nop
 800f7ec:	240ac8b8 	.word	0x240ac8b8

0800f7f0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f4:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f7f6:	b148      	cbz	r0, 800f80c <f_lseek+0x1c>
 800f7f8:	6803      	ldr	r3, [r0, #0]
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	b133      	cbz	r3, 800f80c <f_lseek+0x1c>
 800f7fe:	781a      	ldrb	r2, [r3, #0]
 800f800:	b122      	cbz	r2, 800f80c <f_lseek+0x1c>
 800f802:	460e      	mov	r6, r1
 800f804:	88da      	ldrh	r2, [r3, #6]
 800f806:	8881      	ldrh	r1, [r0, #4]
 800f808:	4291      	cmp	r1, r2
 800f80a:	d004      	beq.n	800f816 <f_lseek+0x26>
	FRESULT res = FR_INVALID_OBJECT;
 800f80c:	2509      	movs	r5, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800f80e:	4628      	mov	r0, r5
 800f810:	b005      	add	sp, #20
 800f812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f816:	7858      	ldrb	r0, [r3, #1]
 800f818:	f7fe fb40 	bl	800de9c <disk_status>
 800f81c:	07c3      	lsls	r3, r0, #31
 800f81e:	d4f5      	bmi.n	800f80c <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f820:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f822:	2d00      	cmp	r5, #0
 800f824:	d1f3      	bne.n	800f80e <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 800f826:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f828:	f8d4 9000 	ldr.w	r9, [r4]
	if (fp->cltbl) {	/* Fast seek */
 800f82c:	b1f8      	cbz	r0, 800f86e <f_lseek+0x7e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f82e:	1c77      	adds	r7, r6, #1
 800f830:	d05d      	beq.n	800f8ee <f_lseek+0xfe>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f832:	68e3      	ldr	r3, [r4, #12]
 800f834:	429e      	cmp	r6, r3
 800f836:	bf28      	it	cs
 800f838:	461e      	movcs	r6, r3
			fp->fptr = ofs;				/* Set file pointer */
 800f83a:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800f83c:	2e00      	cmp	r6, #0
 800f83e:	d0e6      	beq.n	800f80e <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f840:	f106 3cff 	add.w	ip, r6, #4294967295
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f844:	f8b9 700a 	ldrh.w	r7, [r9, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f848:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f84a:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f84c:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
 800f850:	fbbc f1f7 	udiv	r1, ip, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f854:	b92b      	cbnz	r3, 800f862 <f_lseek+0x72>
 800f856:	e05f      	b.n	800f918 <f_lseek+0x128>
		cl -= ncl; tbl++;		/* Next fragment */
 800f858:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f85a:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d05a      	beq.n	800f918 <f_lseek+0x128>
		if (cl < ncl) break;	/* In this fragment? */
 800f862:	428b      	cmp	r3, r1
 800f864:	d9f8      	bls.n	800f858 <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 800f866:	6853      	ldr	r3, [r2, #4]
 800f868:	440b      	add	r3, r1
	clst -= 2;
 800f86a:	1e99      	subs	r1, r3, #2
	return cl + *tbl;	/* Return the cluster number */
 800f86c:	e056      	b.n	800f91c <f_lseek+0x12c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f86e:	68e2      	ldr	r2, [r4, #12]
		ifptr = fp->fptr;
 800f870:	69a3      	ldr	r3, [r4, #24]
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f872:	42b2      	cmp	r2, r6
 800f874:	d204      	bcs.n	800f880 <f_lseek+0x90>
 800f876:	7d21      	ldrb	r1, [r4, #20]
 800f878:	0788      	lsls	r0, r1, #30
 800f87a:	f100 809b 	bmi.w	800f9b4 <f_lseek+0x1c4>
 800f87e:	4616      	mov	r6, r2
		fp->fptr = nsect = 0;
 800f880:	2200      	movs	r2, #0
 800f882:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800f884:	2e00      	cmp	r6, #0
 800f886:	d0c2      	beq.n	800f80e <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f888:	f8b9 800a 	ldrh.w	r8, [r9, #10]
 800f88c:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800f890:	2b00      	cmp	r3, #0
 800f892:	d16e      	bne.n	800f972 <f_lseek+0x182>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f894:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f896:	2f00      	cmp	r7, #0
 800f898:	f000 811e 	beq.w	800fad8 <f_lseek+0x2e8>
				fp->clust = clst;
 800f89c:	2300      	movs	r3, #0
 800f89e:	61e7      	str	r7, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f8a0:	45b0      	cmp	r8, r6
 800f8a2:	f080 8155 	bcs.w	800fb50 <f_lseek+0x360>
 800f8a6:	4639      	mov	r1, r7
 800f8a8:	e014      	b.n	800f8d4 <f_lseek+0xe4>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f8aa:	f7fe feb1 	bl	800e610 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	f000 8148 	beq.w	800fb46 <f_lseek+0x356>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8b6:	1c4b      	adds	r3, r1, #1
 800f8b8:	f000 80c7 	beq.w	800fa4a <f_lseek+0x25a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f8bc:	2901      	cmp	r1, #1
 800f8be:	d91d      	bls.n	800f8fc <f_lseek+0x10c>
 800f8c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f8c4:	428b      	cmp	r3, r1
 800f8c6:	d919      	bls.n	800f8fc <f_lseek+0x10c>
				fp->fptr += ofs;
 800f8c8:	69a2      	ldr	r2, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800f8ca:	45b0      	cmp	r8, r6
					fp->clust = clst;
 800f8cc:	61e1      	str	r1, [r4, #28]
				fp->fptr += ofs;
 800f8ce:	4613      	mov	r3, r2
				while (ofs > bcs) {						/* Cluster following loop */
 800f8d0:	f080 8120 	bcs.w	800fb14 <f_lseek+0x324>
					ofs -= bcs; fp->fptr += bcs;
 800f8d4:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f8d6:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800f8d8:	eba6 0608 	sub.w	r6, r6, r8
 800f8dc:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f8de:	7d23      	ldrb	r3, [r4, #20]
 800f8e0:	079a      	lsls	r2, r3, #30
 800f8e2:	d4e2      	bmi.n	800f8aa <f_lseek+0xba>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f8e4:	6820      	ldr	r0, [r4, #0]
 800f8e6:	f7fe fe3d 	bl	800e564 <get_fat.isra.0>
 800f8ea:	4601      	mov	r1, r0
 800f8ec:	e7e3      	b.n	800f8b6 <f_lseek+0xc6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f8ee:	4680      	mov	r8, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f8f0:	68a2      	ldr	r2, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f8f2:	f858 1b04 	ldr.w	r1, [r8], #4
			if (cl) {
 800f8f6:	b12a      	cbz	r2, 800f904 <f_lseek+0x114>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f8f8:	2a01      	cmp	r2, #1
 800f8fa:	d15f      	bne.n	800f9bc <f_lseek+0x1cc>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f8fc:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f8fe:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f900:	7563      	strb	r3, [r4, #21]
 800f902:	e784      	b.n	800f80e <f_lseek+0x1e>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f904:	f04f 0a02 	mov.w	sl, #2
			if (ulen <= tlen) {
 800f908:	458a      	cmp	sl, r1
			*fp->cltbl = ulen;	/* Number of items used */
 800f90a:	f8c0 a000 	str.w	sl, [r0]
			if (ulen <= tlen) {
 800f90e:	d853      	bhi.n	800f9b8 <f_lseek+0x1c8>
				*tbl = 0;		/* Terminate table */
 800f910:	2300      	movs	r3, #0
 800f912:	f8c8 3000 	str.w	r3, [r8]
 800f916:	e77a      	b.n	800f80e <f_lseek+0x1e>
 800f918:	f06f 0101 	mvn.w	r1, #1
				fp->clust = clmt_clust(fp, ofs - 1);
 800f91c:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f91e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f922:	3b02      	subs	r3, #2
 800f924:	428b      	cmp	r3, r1
 800f926:	d9e9      	bls.n	800f8fc <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800f928:	f8d9 2028 	ldr.w	r2, [r9, #40]	@ 0x28
 800f92c:	fb01 2207 	mla	r2, r1, r7, r2
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f930:	2a00      	cmp	r2, #0
 800f932:	d0e3      	beq.n	800f8fc <f_lseek+0x10c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f934:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f938:	2e00      	cmp	r6, #0
 800f93a:	f43f af68 	beq.w	800f80e <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f93e:	3f01      	subs	r7, #1
 800f940:	ea07 070c 	and.w	r7, r7, ip
 800f944:	4417      	add	r7, r2
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f946:	6a22      	ldr	r2, [r4, #32]
 800f948:	42ba      	cmp	r2, r7
 800f94a:	f43f af60 	beq.w	800f80e <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f94e:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f952:	f104 0630 	add.w	r6, r4, #48	@ 0x30
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f956:	f899 0001 	ldrb.w	r0, [r9, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f2c0 80af 	blt.w	800fabe <f_lseek+0x2ce>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f960:	4631      	mov	r1, r6
 800f962:	2301      	movs	r3, #1
 800f964:	463a      	mov	r2, r7
 800f966:	f7fe fab9 	bl	800dedc <disk_read>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d16d      	bne.n	800fa4a <f_lseek+0x25a>
			fp->sect = nsect;
 800f96e:	6227      	str	r7, [r4, #32]
 800f970:	e74d      	b.n	800f80e <f_lseek+0x1e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f972:	3b01      	subs	r3, #1
 800f974:	1e72      	subs	r2, r6, #1
 800f976:	fbb3 f1f8 	udiv	r1, r3, r8
 800f97a:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 800f97e:	428a      	cmp	r2, r1
 800f980:	d388      	bcc.n	800f894 <f_lseek+0xa4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f982:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 800f986:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f988:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800f98a:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f98c:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 800f98e:	2f00      	cmp	r7, #0
 800f990:	d186      	bne.n	800f8a0 <f_lseek+0xb0>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f992:	68e2      	ldr	r2, [r4, #12]
 800f994:	429a      	cmp	r2, r3
 800f996:	d204      	bcs.n	800f9a2 <f_lseek+0x1b2>
			fp->flag |= FA_MODIFIED;
 800f998:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800f99a:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800f99c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9a0:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f43f af31 	beq.w	800f80e <f_lseek+0x1e>
 800f9ac:	6a22      	ldr	r2, [r4, #32]
 800f9ae:	42ba      	cmp	r2, r7
 800f9b0:	d1cd      	bne.n	800f94e <f_lseek+0x15e>
 800f9b2:	e72c      	b.n	800f80e <f_lseek+0x1e>
		fp->fptr = nsect = 0;
 800f9b4:	61a5      	str	r5, [r4, #24]
		if (ofs) {
 800f9b6:	e767      	b.n	800f888 <f_lseek+0x98>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f9b8:	2511      	movs	r5, #17
 800f9ba:	e728      	b.n	800f80e <f_lseek+0x1e>
 800f9bc:	464f      	mov	r7, r9
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f9be:	f04f 0a02 	mov.w	sl, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f9c2:	46c3      	mov	fp, r8
 800f9c4:	4616      	mov	r6, r2
 800f9c6:	9102      	str	r1, [sp, #8]
 800f9c8:	9503      	str	r5, [sp, #12]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f9ca:	4635      	mov	r5, r6
						pcl = cl; ncl++;
 800f9cc:	f04f 0801 	mov.w	r8, #1
 800f9d0:	9600      	str	r6, [sp, #0]
 800f9d2:	e033      	b.n	800fa3c <f_lseek+0x24c>
		switch (fs->fs_type) {
 800f9d4:	783b      	ldrb	r3, [r7, #0]
 800f9d6:	2b02      	cmp	r3, #2
 800f9d8:	d04e      	beq.n	800fa78 <f_lseek+0x288>
 800f9da:	2b03      	cmp	r3, #3
 800f9dc:	d039      	beq.n	800fa52 <f_lseek+0x262>
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d18c      	bne.n	800f8fc <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9e2:	6a39      	ldr	r1, [r7, #32]
			bc = (UINT)clst; bc += bc / 2;
 800f9e4:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9e8:	4638      	mov	r0, r7
 800f9ea:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800f9ee:	f7fe fb91 	bl	800e114 <move_window>
 800f9f2:	bb50      	cbnz	r0, 800fa4a <f_lseek+0x25a>
			wc = fs->win[bc++ % SS(fs)];
 800f9f4:	f3c6 0208 	ubfx	r2, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9f8:	6a39      	ldr	r1, [r7, #32]
			wc = fs->win[bc++ % SS(fs)];
 800f9fa:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9fc:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800f9fe:	443a      	add	r2, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa00:	eb01 2156 	add.w	r1, r1, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800fa04:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800fa08:	9301      	str	r3, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa0a:	f7fe fb83 	bl	800e114 <move_window>
 800fa0e:	b9e0      	cbnz	r0, 800fa4a <f_lseek+0x25a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fa10:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800fa14:	9a01      	ldr	r2, [sp, #4]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fa16:	07ee      	lsls	r6, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800fa18:	443b      	add	r3, r7
 800fa1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa1e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fa22:	d570      	bpl.n	800fb06 <f_lseek+0x316>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa24:	2a1f      	cmp	r2, #31
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fa26:	ea4f 1312 	mov.w	r3, r2, lsr #4
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa2a:	f67f af67 	bls.w	800f8fc <f_lseek+0x10c>
					} while (cl == pcl + 1);
 800fa2e:	3501      	adds	r5, #1
 800fa30:	429d      	cmp	r5, r3
 800fa32:	d131      	bne.n	800fa98 <f_lseek+0x2a8>
						pcl = cl; ncl++;
 800fa34:	f108 0801 	add.w	r8, r8, #1
 800fa38:	461d      	mov	r5, r3
 800fa3a:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	42ab      	cmp	r3, r5
 800fa40:	d8c8      	bhi.n	800f9d4 <f_lseek+0x1e4>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fa42:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa44:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fa46:	7563      	strb	r3, [r4, #21]
 800fa48:	e6e1      	b.n	800f80e <f_lseek+0x1e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	461d      	mov	r5, r3
 800fa4e:	7563      	strb	r3, [r4, #21]
 800fa50:	e6dd      	b.n	800f80e <f_lseek+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fa52:	6a39      	ldr	r1, [r7, #32]
 800fa54:	4638      	mov	r0, r7
 800fa56:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800fa5a:	f7fe fb5b 	bl	800e114 <move_window>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d1f3      	bne.n	800fa4a <f_lseek+0x25a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa62:	00ab      	lsls	r3, r5, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa64:	493e      	ldr	r1, [pc, #248]	@ (800fb60 <f_lseek+0x370>)
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800fa6a:	443b      	add	r3, r7
 800fa6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa6e:	420a      	tst	r2, r1
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa70:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa74:	d1db      	bne.n	800fa2e <f_lseek+0x23e>
 800fa76:	e741      	b.n	800f8fc <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa78:	6a39      	ldr	r1, [r7, #32]
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800fa80:	f7fe fb48 	bl	800e114 <move_window>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d1e0      	bne.n	800fa4a <f_lseek+0x25a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fa88:	006b      	lsls	r3, r5, #1
 800fa8a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fa8e:	443b      	add	r3, r7
 800fa90:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d8cb      	bhi.n	800fa2e <f_lseek+0x23e>
 800fa96:	e731      	b.n	800f8fc <f_lseek+0x10c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fa98:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fa9c:	9a02      	ldr	r2, [sp, #8]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fa9e:	9e00      	ldr	r6, [sp, #0]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800faa0:	4552      	cmp	r2, sl
 800faa2:	d327      	bcc.n	800faf4 <f_lseek+0x304>
						*tbl++ = ncl; *tbl++ = tcl;
 800faa4:	465a      	mov	r2, fp
 800faa6:	f842 8b08 	str.w	r8, [r2], #8
 800faaa:	f8cb 6004 	str.w	r6, [fp, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800faae:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800fab2:	4299      	cmp	r1, r3
 800fab4:	d950      	bls.n	800fb58 <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 800fab6:	4693      	mov	fp, r2
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fab8:	461e      	mov	r6, r3
 800faba:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fabc:	e785      	b.n	800f9ca <f_lseek+0x1da>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fabe:	2301      	movs	r3, #1
 800fac0:	4631      	mov	r1, r6
 800fac2:	f7fe fa19 	bl	800def8 <disk_write>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d1bf      	bne.n	800fa4a <f_lseek+0x25a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800faca:	7d23      	ldrb	r3, [r4, #20]
 800facc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fad0:	7523      	strb	r3, [r4, #20]
 800fad2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fad6:	e743      	b.n	800f960 <f_lseek+0x170>
					clst = create_chain(&fp->obj, 0);
 800fad8:	4639      	mov	r1, r7
 800fada:	4620      	mov	r0, r4
 800fadc:	f7fe fd98 	bl	800e610 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fae0:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800fae2:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fae4:	f43f af0a 	beq.w	800f8fc <f_lseek+0x10c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fae8:	1c41      	adds	r1, r0, #1
 800faea:	d0ae      	beq.n	800fa4a <f_lseek+0x25a>
				fp->fptr += ofs;
 800faec:	69a3      	ldr	r3, [r4, #24]
					fp->obj.sclust = clst;
 800faee:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
 800faf0:	61e0      	str	r0, [r4, #28]
 800faf2:	e74c      	b.n	800f98e <f_lseek+0x19e>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800faf4:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d8dd      	bhi.n	800fab8 <f_lseek+0x2c8>
 800fafc:	46d8      	mov	r8, fp
 800fafe:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
			*fp->cltbl = ulen;	/* Number of items used */
 800fb02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fb04:	e700      	b.n	800f908 <f_lseek+0x118>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fb06:	f640 71fe 	movw	r1, #4094	@ 0xffe
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fb0a:	f3c2 030b 	ubfx	r3, r2, #0, #12
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fb0e:	420a      	tst	r2, r1
 800fb10:	d18d      	bne.n	800fa2e <f_lseek+0x23e>
 800fb12:	e6f3      	b.n	800f8fc <f_lseek+0x10c>
				if (ofs % SS(fs)) {
 800fb14:	460f      	mov	r7, r1
 800fb16:	f3c6 0108 	ubfx	r1, r6, #0, #9
				fp->fptr += ofs;
 800fb1a:	18b3      	adds	r3, r6, r2
 800fb1c:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800fb1e:	b1a9      	cbz	r1, 800fb4c <f_lseek+0x35c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb20:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 800fb24:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb26:	3a02      	subs	r2, #2
 800fb28:	4291      	cmp	r1, r2
 800fb2a:	f4bf aee7 	bcs.w	800f8fc <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800fb2e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800fb32:	f8d9 7028 	ldr.w	r7, [r9, #40]	@ 0x28
 800fb36:	fb01 7702 	mla	r7, r1, r2, r7
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fb3a:	2f00      	cmp	r7, #0
 800fb3c:	f43f aede 	beq.w	800f8fc <f_lseek+0x10c>
					nsect += (DWORD)(ofs / SS(fs));
 800fb40:	eb07 2756 	add.w	r7, r7, r6, lsr #9
 800fb44:	e725      	b.n	800f992 <f_lseek+0x1a2>
 800fb46:	4607      	mov	r7, r0
				fp->fptr += ofs;
 800fb48:	69a3      	ldr	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800fb4a:	e722      	b.n	800f992 <f_lseek+0x1a2>
		fp->fptr = nsect = 0;
 800fb4c:	460f      	mov	r7, r1
 800fb4e:	e720      	b.n	800f992 <f_lseek+0x1a2>
				if (ofs % SS(fs)) {
 800fb50:	f3c6 0108 	ubfx	r1, r6, #0, #9
 800fb54:	69a2      	ldr	r2, [r4, #24]
 800fb56:	e7e0      	b.n	800fb1a <f_lseek+0x32a>
						*tbl++ = ncl; *tbl++ = tcl;
 800fb58:	9902      	ldr	r1, [sp, #8]
 800fb5a:	4690      	mov	r8, r2
 800fb5c:	9d03      	ldr	r5, [sp, #12]
 800fb5e:	e7d0      	b.n	800fb02 <f_lseek+0x312>
 800fb60:	0ffffffe 	.word	0x0ffffffe

0800fb64 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800fb64:	4b10      	ldr	r3, [pc, #64]	@ (800fba8 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fb66:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800fb68:	7a5c      	ldrb	r4, [r3, #9]
 800fb6a:	b9cc      	cbnz	r4, 800fba0 <FATFS_LinkDriver+0x3c>
 800fb6c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800fb6e:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800fb72:	7a5c      	ldrb	r4, [r3, #9]
 800fb74:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800fb76:	7a5c      	ldrb	r4, [r3, #9]
 800fb78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb7c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800fb7e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800fb80:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800fb82:	441c      	add	r4, r3
 800fb84:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800fb86:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800fb88:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800fb8a:	b2e4      	uxtb	r4, r4
 800fb8c:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800fb8e:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 800fb90:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 800fb92:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800fb94:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 800fb96:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800fb98:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800fb9c:	708b      	strb	r3, [r1, #2]
}
 800fb9e:	4770      	bx	lr
  uint8_t ret = 1;
 800fba0:	2001      	movs	r0, #1
}
 800fba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba6:	4770      	bx	lr
 800fba8:	240ac8e0 	.word	0x240ac8e0

0800fbac <sniprintf>:
 800fbac:	b40c      	push	{r2, r3}
 800fbae:	b530      	push	{r4, r5, lr}
 800fbb0:	4b17      	ldr	r3, [pc, #92]	@ (800fc10 <sniprintf+0x64>)
 800fbb2:	1e0c      	subs	r4, r1, #0
 800fbb4:	681d      	ldr	r5, [r3, #0]
 800fbb6:	b09d      	sub	sp, #116	@ 0x74
 800fbb8:	da08      	bge.n	800fbcc <sniprintf+0x20>
 800fbba:	238b      	movs	r3, #139	@ 0x8b
 800fbbc:	602b      	str	r3, [r5, #0]
 800fbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc2:	b01d      	add	sp, #116	@ 0x74
 800fbc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbc8:	b002      	add	sp, #8
 800fbca:	4770      	bx	lr
 800fbcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fbd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fbd4:	bf14      	ite	ne
 800fbd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fbda:	4623      	moveq	r3, r4
 800fbdc:	9304      	str	r3, [sp, #16]
 800fbde:	9307      	str	r3, [sp, #28]
 800fbe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fbe4:	9002      	str	r0, [sp, #8]
 800fbe6:	9006      	str	r0, [sp, #24]
 800fbe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fbec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fbee:	ab21      	add	r3, sp, #132	@ 0x84
 800fbf0:	a902      	add	r1, sp, #8
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	9301      	str	r3, [sp, #4]
 800fbf6:	f000 f995 	bl	800ff24 <_svfiprintf_r>
 800fbfa:	1c43      	adds	r3, r0, #1
 800fbfc:	bfbc      	itt	lt
 800fbfe:	238b      	movlt	r3, #139	@ 0x8b
 800fc00:	602b      	strlt	r3, [r5, #0]
 800fc02:	2c00      	cmp	r4, #0
 800fc04:	d0dd      	beq.n	800fbc2 <sniprintf+0x16>
 800fc06:	9b02      	ldr	r3, [sp, #8]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	701a      	strb	r2, [r3, #0]
 800fc0c:	e7d9      	b.n	800fbc2 <sniprintf+0x16>
 800fc0e:	bf00      	nop
 800fc10:	2400001c 	.word	0x2400001c

0800fc14 <memset>:
 800fc14:	4402      	add	r2, r0
 800fc16:	4603      	mov	r3, r0
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d100      	bne.n	800fc1e <memset+0xa>
 800fc1c:	4770      	bx	lr
 800fc1e:	f803 1b01 	strb.w	r1, [r3], #1
 800fc22:	e7f9      	b.n	800fc18 <memset+0x4>

0800fc24 <__errno>:
 800fc24:	4b01      	ldr	r3, [pc, #4]	@ (800fc2c <__errno+0x8>)
 800fc26:	6818      	ldr	r0, [r3, #0]
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	2400001c 	.word	0x2400001c

0800fc30 <__libc_init_array>:
 800fc30:	b570      	push	{r4, r5, r6, lr}
 800fc32:	4d0d      	ldr	r5, [pc, #52]	@ (800fc68 <__libc_init_array+0x38>)
 800fc34:	4c0d      	ldr	r4, [pc, #52]	@ (800fc6c <__libc_init_array+0x3c>)
 800fc36:	1b64      	subs	r4, r4, r5
 800fc38:	10a4      	asrs	r4, r4, #2
 800fc3a:	2600      	movs	r6, #0
 800fc3c:	42a6      	cmp	r6, r4
 800fc3e:	d109      	bne.n	800fc54 <__libc_init_array+0x24>
 800fc40:	4d0b      	ldr	r5, [pc, #44]	@ (800fc70 <__libc_init_array+0x40>)
 800fc42:	4c0c      	ldr	r4, [pc, #48]	@ (800fc74 <__libc_init_array+0x44>)
 800fc44:	f000 fc66 	bl	8010514 <_init>
 800fc48:	1b64      	subs	r4, r4, r5
 800fc4a:	10a4      	asrs	r4, r4, #2
 800fc4c:	2600      	movs	r6, #0
 800fc4e:	42a6      	cmp	r6, r4
 800fc50:	d105      	bne.n	800fc5e <__libc_init_array+0x2e>
 800fc52:	bd70      	pop	{r4, r5, r6, pc}
 800fc54:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc58:	4798      	blx	r3
 800fc5a:	3601      	adds	r6, #1
 800fc5c:	e7ee      	b.n	800fc3c <__libc_init_array+0xc>
 800fc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc62:	4798      	blx	r3
 800fc64:	3601      	adds	r6, #1
 800fc66:	e7f2      	b.n	800fc4e <__libc_init_array+0x1e>
 800fc68:	080108c0 	.word	0x080108c0
 800fc6c:	080108c0 	.word	0x080108c0
 800fc70:	080108c0 	.word	0x080108c0
 800fc74:	080108c4 	.word	0x080108c4

0800fc78 <__retarget_lock_acquire_recursive>:
 800fc78:	4770      	bx	lr

0800fc7a <__retarget_lock_release_recursive>:
 800fc7a:	4770      	bx	lr

0800fc7c <_free_r>:
 800fc7c:	b538      	push	{r3, r4, r5, lr}
 800fc7e:	4605      	mov	r5, r0
 800fc80:	2900      	cmp	r1, #0
 800fc82:	d041      	beq.n	800fd08 <_free_r+0x8c>
 800fc84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc88:	1f0c      	subs	r4, r1, #4
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bfb8      	it	lt
 800fc8e:	18e4      	addlt	r4, r4, r3
 800fc90:	f000 f8e0 	bl	800fe54 <__malloc_lock>
 800fc94:	4a1d      	ldr	r2, [pc, #116]	@ (800fd0c <_free_r+0x90>)
 800fc96:	6813      	ldr	r3, [r2, #0]
 800fc98:	b933      	cbnz	r3, 800fca8 <_free_r+0x2c>
 800fc9a:	6063      	str	r3, [r4, #4]
 800fc9c:	6014      	str	r4, [r2, #0]
 800fc9e:	4628      	mov	r0, r5
 800fca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fca4:	f000 b8dc 	b.w	800fe60 <__malloc_unlock>
 800fca8:	42a3      	cmp	r3, r4
 800fcaa:	d908      	bls.n	800fcbe <_free_r+0x42>
 800fcac:	6820      	ldr	r0, [r4, #0]
 800fcae:	1821      	adds	r1, r4, r0
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	bf01      	itttt	eq
 800fcb4:	6819      	ldreq	r1, [r3, #0]
 800fcb6:	685b      	ldreq	r3, [r3, #4]
 800fcb8:	1809      	addeq	r1, r1, r0
 800fcba:	6021      	streq	r1, [r4, #0]
 800fcbc:	e7ed      	b.n	800fc9a <_free_r+0x1e>
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	b10b      	cbz	r3, 800fcc8 <_free_r+0x4c>
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	d9fa      	bls.n	800fcbe <_free_r+0x42>
 800fcc8:	6811      	ldr	r1, [r2, #0]
 800fcca:	1850      	adds	r0, r2, r1
 800fccc:	42a0      	cmp	r0, r4
 800fcce:	d10b      	bne.n	800fce8 <_free_r+0x6c>
 800fcd0:	6820      	ldr	r0, [r4, #0]
 800fcd2:	4401      	add	r1, r0
 800fcd4:	1850      	adds	r0, r2, r1
 800fcd6:	4283      	cmp	r3, r0
 800fcd8:	6011      	str	r1, [r2, #0]
 800fcda:	d1e0      	bne.n	800fc9e <_free_r+0x22>
 800fcdc:	6818      	ldr	r0, [r3, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	6053      	str	r3, [r2, #4]
 800fce2:	4408      	add	r0, r1
 800fce4:	6010      	str	r0, [r2, #0]
 800fce6:	e7da      	b.n	800fc9e <_free_r+0x22>
 800fce8:	d902      	bls.n	800fcf0 <_free_r+0x74>
 800fcea:	230c      	movs	r3, #12
 800fcec:	602b      	str	r3, [r5, #0]
 800fcee:	e7d6      	b.n	800fc9e <_free_r+0x22>
 800fcf0:	6820      	ldr	r0, [r4, #0]
 800fcf2:	1821      	adds	r1, r4, r0
 800fcf4:	428b      	cmp	r3, r1
 800fcf6:	bf04      	itt	eq
 800fcf8:	6819      	ldreq	r1, [r3, #0]
 800fcfa:	685b      	ldreq	r3, [r3, #4]
 800fcfc:	6063      	str	r3, [r4, #4]
 800fcfe:	bf04      	itt	eq
 800fd00:	1809      	addeq	r1, r1, r0
 800fd02:	6021      	streq	r1, [r4, #0]
 800fd04:	6054      	str	r4, [r2, #4]
 800fd06:	e7ca      	b.n	800fc9e <_free_r+0x22>
 800fd08:	bd38      	pop	{r3, r4, r5, pc}
 800fd0a:	bf00      	nop
 800fd0c:	240aca30 	.word	0x240aca30

0800fd10 <sbrk_aligned>:
 800fd10:	b570      	push	{r4, r5, r6, lr}
 800fd12:	4e0f      	ldr	r6, [pc, #60]	@ (800fd50 <sbrk_aligned+0x40>)
 800fd14:	460c      	mov	r4, r1
 800fd16:	6831      	ldr	r1, [r6, #0]
 800fd18:	4605      	mov	r5, r0
 800fd1a:	b911      	cbnz	r1, 800fd22 <sbrk_aligned+0x12>
 800fd1c:	f000 fba6 	bl	801046c <_sbrk_r>
 800fd20:	6030      	str	r0, [r6, #0]
 800fd22:	4621      	mov	r1, r4
 800fd24:	4628      	mov	r0, r5
 800fd26:	f000 fba1 	bl	801046c <_sbrk_r>
 800fd2a:	1c43      	adds	r3, r0, #1
 800fd2c:	d103      	bne.n	800fd36 <sbrk_aligned+0x26>
 800fd2e:	f04f 34ff 	mov.w	r4, #4294967295
 800fd32:	4620      	mov	r0, r4
 800fd34:	bd70      	pop	{r4, r5, r6, pc}
 800fd36:	1cc4      	adds	r4, r0, #3
 800fd38:	f024 0403 	bic.w	r4, r4, #3
 800fd3c:	42a0      	cmp	r0, r4
 800fd3e:	d0f8      	beq.n	800fd32 <sbrk_aligned+0x22>
 800fd40:	1a21      	subs	r1, r4, r0
 800fd42:	4628      	mov	r0, r5
 800fd44:	f000 fb92 	bl	801046c <_sbrk_r>
 800fd48:	3001      	adds	r0, #1
 800fd4a:	d1f2      	bne.n	800fd32 <sbrk_aligned+0x22>
 800fd4c:	e7ef      	b.n	800fd2e <sbrk_aligned+0x1e>
 800fd4e:	bf00      	nop
 800fd50:	240aca2c 	.word	0x240aca2c

0800fd54 <_malloc_r>:
 800fd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd58:	1ccd      	adds	r5, r1, #3
 800fd5a:	f025 0503 	bic.w	r5, r5, #3
 800fd5e:	3508      	adds	r5, #8
 800fd60:	2d0c      	cmp	r5, #12
 800fd62:	bf38      	it	cc
 800fd64:	250c      	movcc	r5, #12
 800fd66:	2d00      	cmp	r5, #0
 800fd68:	4606      	mov	r6, r0
 800fd6a:	db01      	blt.n	800fd70 <_malloc_r+0x1c>
 800fd6c:	42a9      	cmp	r1, r5
 800fd6e:	d904      	bls.n	800fd7a <_malloc_r+0x26>
 800fd70:	230c      	movs	r3, #12
 800fd72:	6033      	str	r3, [r6, #0]
 800fd74:	2000      	movs	r0, #0
 800fd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe50 <_malloc_r+0xfc>
 800fd7e:	f000 f869 	bl	800fe54 <__malloc_lock>
 800fd82:	f8d8 3000 	ldr.w	r3, [r8]
 800fd86:	461c      	mov	r4, r3
 800fd88:	bb44      	cbnz	r4, 800fddc <_malloc_r+0x88>
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	f7ff ffbf 	bl	800fd10 <sbrk_aligned>
 800fd92:	1c43      	adds	r3, r0, #1
 800fd94:	4604      	mov	r4, r0
 800fd96:	d158      	bne.n	800fe4a <_malloc_r+0xf6>
 800fd98:	f8d8 4000 	ldr.w	r4, [r8]
 800fd9c:	4627      	mov	r7, r4
 800fd9e:	2f00      	cmp	r7, #0
 800fda0:	d143      	bne.n	800fe2a <_malloc_r+0xd6>
 800fda2:	2c00      	cmp	r4, #0
 800fda4:	d04b      	beq.n	800fe3e <_malloc_r+0xea>
 800fda6:	6823      	ldr	r3, [r4, #0]
 800fda8:	4639      	mov	r1, r7
 800fdaa:	4630      	mov	r0, r6
 800fdac:	eb04 0903 	add.w	r9, r4, r3
 800fdb0:	f000 fb5c 	bl	801046c <_sbrk_r>
 800fdb4:	4581      	cmp	r9, r0
 800fdb6:	d142      	bne.n	800fe3e <_malloc_r+0xea>
 800fdb8:	6821      	ldr	r1, [r4, #0]
 800fdba:	1a6d      	subs	r5, r5, r1
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	f7ff ffa6 	bl	800fd10 <sbrk_aligned>
 800fdc4:	3001      	adds	r0, #1
 800fdc6:	d03a      	beq.n	800fe3e <_malloc_r+0xea>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	442b      	add	r3, r5
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	f8d8 3000 	ldr.w	r3, [r8]
 800fdd2:	685a      	ldr	r2, [r3, #4]
 800fdd4:	bb62      	cbnz	r2, 800fe30 <_malloc_r+0xdc>
 800fdd6:	f8c8 7000 	str.w	r7, [r8]
 800fdda:	e00f      	b.n	800fdfc <_malloc_r+0xa8>
 800fddc:	6822      	ldr	r2, [r4, #0]
 800fdde:	1b52      	subs	r2, r2, r5
 800fde0:	d420      	bmi.n	800fe24 <_malloc_r+0xd0>
 800fde2:	2a0b      	cmp	r2, #11
 800fde4:	d917      	bls.n	800fe16 <_malloc_r+0xc2>
 800fde6:	1961      	adds	r1, r4, r5
 800fde8:	42a3      	cmp	r3, r4
 800fdea:	6025      	str	r5, [r4, #0]
 800fdec:	bf18      	it	ne
 800fdee:	6059      	strne	r1, [r3, #4]
 800fdf0:	6863      	ldr	r3, [r4, #4]
 800fdf2:	bf08      	it	eq
 800fdf4:	f8c8 1000 	streq.w	r1, [r8]
 800fdf8:	5162      	str	r2, [r4, r5]
 800fdfa:	604b      	str	r3, [r1, #4]
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	f000 f82f 	bl	800fe60 <__malloc_unlock>
 800fe02:	f104 000b 	add.w	r0, r4, #11
 800fe06:	1d23      	adds	r3, r4, #4
 800fe08:	f020 0007 	bic.w	r0, r0, #7
 800fe0c:	1ac2      	subs	r2, r0, r3
 800fe0e:	bf1c      	itt	ne
 800fe10:	1a1b      	subne	r3, r3, r0
 800fe12:	50a3      	strne	r3, [r4, r2]
 800fe14:	e7af      	b.n	800fd76 <_malloc_r+0x22>
 800fe16:	6862      	ldr	r2, [r4, #4]
 800fe18:	42a3      	cmp	r3, r4
 800fe1a:	bf0c      	ite	eq
 800fe1c:	f8c8 2000 	streq.w	r2, [r8]
 800fe20:	605a      	strne	r2, [r3, #4]
 800fe22:	e7eb      	b.n	800fdfc <_malloc_r+0xa8>
 800fe24:	4623      	mov	r3, r4
 800fe26:	6864      	ldr	r4, [r4, #4]
 800fe28:	e7ae      	b.n	800fd88 <_malloc_r+0x34>
 800fe2a:	463c      	mov	r4, r7
 800fe2c:	687f      	ldr	r7, [r7, #4]
 800fe2e:	e7b6      	b.n	800fd9e <_malloc_r+0x4a>
 800fe30:	461a      	mov	r2, r3
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	d1fb      	bne.n	800fe30 <_malloc_r+0xdc>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	6053      	str	r3, [r2, #4]
 800fe3c:	e7de      	b.n	800fdfc <_malloc_r+0xa8>
 800fe3e:	230c      	movs	r3, #12
 800fe40:	6033      	str	r3, [r6, #0]
 800fe42:	4630      	mov	r0, r6
 800fe44:	f000 f80c 	bl	800fe60 <__malloc_unlock>
 800fe48:	e794      	b.n	800fd74 <_malloc_r+0x20>
 800fe4a:	6005      	str	r5, [r0, #0]
 800fe4c:	e7d6      	b.n	800fdfc <_malloc_r+0xa8>
 800fe4e:	bf00      	nop
 800fe50:	240aca30 	.word	0x240aca30

0800fe54 <__malloc_lock>:
 800fe54:	4801      	ldr	r0, [pc, #4]	@ (800fe5c <__malloc_lock+0x8>)
 800fe56:	f7ff bf0f 	b.w	800fc78 <__retarget_lock_acquire_recursive>
 800fe5a:	bf00      	nop
 800fe5c:	240aca28 	.word	0x240aca28

0800fe60 <__malloc_unlock>:
 800fe60:	4801      	ldr	r0, [pc, #4]	@ (800fe68 <__malloc_unlock+0x8>)
 800fe62:	f7ff bf0a 	b.w	800fc7a <__retarget_lock_release_recursive>
 800fe66:	bf00      	nop
 800fe68:	240aca28 	.word	0x240aca28

0800fe6c <__ssputs_r>:
 800fe6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe70:	688e      	ldr	r6, [r1, #8]
 800fe72:	461f      	mov	r7, r3
 800fe74:	42be      	cmp	r6, r7
 800fe76:	680b      	ldr	r3, [r1, #0]
 800fe78:	4682      	mov	sl, r0
 800fe7a:	460c      	mov	r4, r1
 800fe7c:	4690      	mov	r8, r2
 800fe7e:	d82d      	bhi.n	800fedc <__ssputs_r+0x70>
 800fe80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe88:	d026      	beq.n	800fed8 <__ssputs_r+0x6c>
 800fe8a:	6965      	ldr	r5, [r4, #20]
 800fe8c:	6909      	ldr	r1, [r1, #16]
 800fe8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe92:	eba3 0901 	sub.w	r9, r3, r1
 800fe96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe9a:	1c7b      	adds	r3, r7, #1
 800fe9c:	444b      	add	r3, r9
 800fe9e:	106d      	asrs	r5, r5, #1
 800fea0:	429d      	cmp	r5, r3
 800fea2:	bf38      	it	cc
 800fea4:	461d      	movcc	r5, r3
 800fea6:	0553      	lsls	r3, r2, #21
 800fea8:	d527      	bpl.n	800fefa <__ssputs_r+0x8e>
 800feaa:	4629      	mov	r1, r5
 800feac:	f7ff ff52 	bl	800fd54 <_malloc_r>
 800feb0:	4606      	mov	r6, r0
 800feb2:	b360      	cbz	r0, 800ff0e <__ssputs_r+0xa2>
 800feb4:	6921      	ldr	r1, [r4, #16]
 800feb6:	464a      	mov	r2, r9
 800feb8:	f000 fae8 	bl	801048c <memcpy>
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fec6:	81a3      	strh	r3, [r4, #12]
 800fec8:	6126      	str	r6, [r4, #16]
 800feca:	6165      	str	r5, [r4, #20]
 800fecc:	444e      	add	r6, r9
 800fece:	eba5 0509 	sub.w	r5, r5, r9
 800fed2:	6026      	str	r6, [r4, #0]
 800fed4:	60a5      	str	r5, [r4, #8]
 800fed6:	463e      	mov	r6, r7
 800fed8:	42be      	cmp	r6, r7
 800feda:	d900      	bls.n	800fede <__ssputs_r+0x72>
 800fedc:	463e      	mov	r6, r7
 800fede:	6820      	ldr	r0, [r4, #0]
 800fee0:	4632      	mov	r2, r6
 800fee2:	4641      	mov	r1, r8
 800fee4:	f000 faa8 	bl	8010438 <memmove>
 800fee8:	68a3      	ldr	r3, [r4, #8]
 800feea:	1b9b      	subs	r3, r3, r6
 800feec:	60a3      	str	r3, [r4, #8]
 800feee:	6823      	ldr	r3, [r4, #0]
 800fef0:	4433      	add	r3, r6
 800fef2:	6023      	str	r3, [r4, #0]
 800fef4:	2000      	movs	r0, #0
 800fef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefa:	462a      	mov	r2, r5
 800fefc:	f000 fad4 	bl	80104a8 <_realloc_r>
 800ff00:	4606      	mov	r6, r0
 800ff02:	2800      	cmp	r0, #0
 800ff04:	d1e0      	bne.n	800fec8 <__ssputs_r+0x5c>
 800ff06:	6921      	ldr	r1, [r4, #16]
 800ff08:	4650      	mov	r0, sl
 800ff0a:	f7ff feb7 	bl	800fc7c <_free_r>
 800ff0e:	230c      	movs	r3, #12
 800ff10:	f8ca 3000 	str.w	r3, [sl]
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff1a:	81a3      	strh	r3, [r4, #12]
 800ff1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff20:	e7e9      	b.n	800fef6 <__ssputs_r+0x8a>
	...

0800ff24 <_svfiprintf_r>:
 800ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff28:	4698      	mov	r8, r3
 800ff2a:	898b      	ldrh	r3, [r1, #12]
 800ff2c:	061b      	lsls	r3, r3, #24
 800ff2e:	b09d      	sub	sp, #116	@ 0x74
 800ff30:	4607      	mov	r7, r0
 800ff32:	460d      	mov	r5, r1
 800ff34:	4614      	mov	r4, r2
 800ff36:	d510      	bpl.n	800ff5a <_svfiprintf_r+0x36>
 800ff38:	690b      	ldr	r3, [r1, #16]
 800ff3a:	b973      	cbnz	r3, 800ff5a <_svfiprintf_r+0x36>
 800ff3c:	2140      	movs	r1, #64	@ 0x40
 800ff3e:	f7ff ff09 	bl	800fd54 <_malloc_r>
 800ff42:	6028      	str	r0, [r5, #0]
 800ff44:	6128      	str	r0, [r5, #16]
 800ff46:	b930      	cbnz	r0, 800ff56 <_svfiprintf_r+0x32>
 800ff48:	230c      	movs	r3, #12
 800ff4a:	603b      	str	r3, [r7, #0]
 800ff4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff50:	b01d      	add	sp, #116	@ 0x74
 800ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff56:	2340      	movs	r3, #64	@ 0x40
 800ff58:	616b      	str	r3, [r5, #20]
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff5e:	2320      	movs	r3, #32
 800ff60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff68:	2330      	movs	r3, #48	@ 0x30
 800ff6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010108 <_svfiprintf_r+0x1e4>
 800ff6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff72:	f04f 0901 	mov.w	r9, #1
 800ff76:	4623      	mov	r3, r4
 800ff78:	469a      	mov	sl, r3
 800ff7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff7e:	b10a      	cbz	r2, 800ff84 <_svfiprintf_r+0x60>
 800ff80:	2a25      	cmp	r2, #37	@ 0x25
 800ff82:	d1f9      	bne.n	800ff78 <_svfiprintf_r+0x54>
 800ff84:	ebba 0b04 	subs.w	fp, sl, r4
 800ff88:	d00b      	beq.n	800ffa2 <_svfiprintf_r+0x7e>
 800ff8a:	465b      	mov	r3, fp
 800ff8c:	4622      	mov	r2, r4
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4638      	mov	r0, r7
 800ff92:	f7ff ff6b 	bl	800fe6c <__ssputs_r>
 800ff96:	3001      	adds	r0, #1
 800ff98:	f000 80a7 	beq.w	80100ea <_svfiprintf_r+0x1c6>
 800ff9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff9e:	445a      	add	r2, fp
 800ffa0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffa2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 809f 	beq.w	80100ea <_svfiprintf_r+0x1c6>
 800ffac:	2300      	movs	r3, #0
 800ffae:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffb6:	f10a 0a01 	add.w	sl, sl, #1
 800ffba:	9304      	str	r3, [sp, #16]
 800ffbc:	9307      	str	r3, [sp, #28]
 800ffbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffc4:	4654      	mov	r4, sl
 800ffc6:	2205      	movs	r2, #5
 800ffc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffcc:	484e      	ldr	r0, [pc, #312]	@ (8010108 <_svfiprintf_r+0x1e4>)
 800ffce:	f7f0 f98f 	bl	80002f0 <memchr>
 800ffd2:	9a04      	ldr	r2, [sp, #16]
 800ffd4:	b9d8      	cbnz	r0, 801000e <_svfiprintf_r+0xea>
 800ffd6:	06d0      	lsls	r0, r2, #27
 800ffd8:	bf44      	itt	mi
 800ffda:	2320      	movmi	r3, #32
 800ffdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffe0:	0711      	lsls	r1, r2, #28
 800ffe2:	bf44      	itt	mi
 800ffe4:	232b      	movmi	r3, #43	@ 0x2b
 800ffe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffea:	f89a 3000 	ldrb.w	r3, [sl]
 800ffee:	2b2a      	cmp	r3, #42	@ 0x2a
 800fff0:	d015      	beq.n	801001e <_svfiprintf_r+0xfa>
 800fff2:	9a07      	ldr	r2, [sp, #28]
 800fff4:	4654      	mov	r4, sl
 800fff6:	2000      	movs	r0, #0
 800fff8:	f04f 0c0a 	mov.w	ip, #10
 800fffc:	4621      	mov	r1, r4
 800fffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010002:	3b30      	subs	r3, #48	@ 0x30
 8010004:	2b09      	cmp	r3, #9
 8010006:	d94b      	bls.n	80100a0 <_svfiprintf_r+0x17c>
 8010008:	b1b0      	cbz	r0, 8010038 <_svfiprintf_r+0x114>
 801000a:	9207      	str	r2, [sp, #28]
 801000c:	e014      	b.n	8010038 <_svfiprintf_r+0x114>
 801000e:	eba0 0308 	sub.w	r3, r0, r8
 8010012:	fa09 f303 	lsl.w	r3, r9, r3
 8010016:	4313      	orrs	r3, r2
 8010018:	9304      	str	r3, [sp, #16]
 801001a:	46a2      	mov	sl, r4
 801001c:	e7d2      	b.n	800ffc4 <_svfiprintf_r+0xa0>
 801001e:	9b03      	ldr	r3, [sp, #12]
 8010020:	1d19      	adds	r1, r3, #4
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	9103      	str	r1, [sp, #12]
 8010026:	2b00      	cmp	r3, #0
 8010028:	bfbb      	ittet	lt
 801002a:	425b      	neglt	r3, r3
 801002c:	f042 0202 	orrlt.w	r2, r2, #2
 8010030:	9307      	strge	r3, [sp, #28]
 8010032:	9307      	strlt	r3, [sp, #28]
 8010034:	bfb8      	it	lt
 8010036:	9204      	strlt	r2, [sp, #16]
 8010038:	7823      	ldrb	r3, [r4, #0]
 801003a:	2b2e      	cmp	r3, #46	@ 0x2e
 801003c:	d10a      	bne.n	8010054 <_svfiprintf_r+0x130>
 801003e:	7863      	ldrb	r3, [r4, #1]
 8010040:	2b2a      	cmp	r3, #42	@ 0x2a
 8010042:	d132      	bne.n	80100aa <_svfiprintf_r+0x186>
 8010044:	9b03      	ldr	r3, [sp, #12]
 8010046:	1d1a      	adds	r2, r3, #4
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	9203      	str	r2, [sp, #12]
 801004c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010050:	3402      	adds	r4, #2
 8010052:	9305      	str	r3, [sp, #20]
 8010054:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010118 <_svfiprintf_r+0x1f4>
 8010058:	7821      	ldrb	r1, [r4, #0]
 801005a:	2203      	movs	r2, #3
 801005c:	4650      	mov	r0, sl
 801005e:	f7f0 f947 	bl	80002f0 <memchr>
 8010062:	b138      	cbz	r0, 8010074 <_svfiprintf_r+0x150>
 8010064:	9b04      	ldr	r3, [sp, #16]
 8010066:	eba0 000a 	sub.w	r0, r0, sl
 801006a:	2240      	movs	r2, #64	@ 0x40
 801006c:	4082      	lsls	r2, r0
 801006e:	4313      	orrs	r3, r2
 8010070:	3401      	adds	r4, #1
 8010072:	9304      	str	r3, [sp, #16]
 8010074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010078:	4824      	ldr	r0, [pc, #144]	@ (801010c <_svfiprintf_r+0x1e8>)
 801007a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801007e:	2206      	movs	r2, #6
 8010080:	f7f0 f936 	bl	80002f0 <memchr>
 8010084:	2800      	cmp	r0, #0
 8010086:	d036      	beq.n	80100f6 <_svfiprintf_r+0x1d2>
 8010088:	4b21      	ldr	r3, [pc, #132]	@ (8010110 <_svfiprintf_r+0x1ec>)
 801008a:	bb1b      	cbnz	r3, 80100d4 <_svfiprintf_r+0x1b0>
 801008c:	9b03      	ldr	r3, [sp, #12]
 801008e:	3307      	adds	r3, #7
 8010090:	f023 0307 	bic.w	r3, r3, #7
 8010094:	3308      	adds	r3, #8
 8010096:	9303      	str	r3, [sp, #12]
 8010098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801009a:	4433      	add	r3, r6
 801009c:	9309      	str	r3, [sp, #36]	@ 0x24
 801009e:	e76a      	b.n	800ff76 <_svfiprintf_r+0x52>
 80100a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80100a4:	460c      	mov	r4, r1
 80100a6:	2001      	movs	r0, #1
 80100a8:	e7a8      	b.n	800fffc <_svfiprintf_r+0xd8>
 80100aa:	2300      	movs	r3, #0
 80100ac:	3401      	adds	r4, #1
 80100ae:	9305      	str	r3, [sp, #20]
 80100b0:	4619      	mov	r1, r3
 80100b2:	f04f 0c0a 	mov.w	ip, #10
 80100b6:	4620      	mov	r0, r4
 80100b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100bc:	3a30      	subs	r2, #48	@ 0x30
 80100be:	2a09      	cmp	r2, #9
 80100c0:	d903      	bls.n	80100ca <_svfiprintf_r+0x1a6>
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d0c6      	beq.n	8010054 <_svfiprintf_r+0x130>
 80100c6:	9105      	str	r1, [sp, #20]
 80100c8:	e7c4      	b.n	8010054 <_svfiprintf_r+0x130>
 80100ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80100ce:	4604      	mov	r4, r0
 80100d0:	2301      	movs	r3, #1
 80100d2:	e7f0      	b.n	80100b6 <_svfiprintf_r+0x192>
 80100d4:	ab03      	add	r3, sp, #12
 80100d6:	9300      	str	r3, [sp, #0]
 80100d8:	462a      	mov	r2, r5
 80100da:	4b0e      	ldr	r3, [pc, #56]	@ (8010114 <_svfiprintf_r+0x1f0>)
 80100dc:	a904      	add	r1, sp, #16
 80100de:	4638      	mov	r0, r7
 80100e0:	f3af 8000 	nop.w
 80100e4:	1c42      	adds	r2, r0, #1
 80100e6:	4606      	mov	r6, r0
 80100e8:	d1d6      	bne.n	8010098 <_svfiprintf_r+0x174>
 80100ea:	89ab      	ldrh	r3, [r5, #12]
 80100ec:	065b      	lsls	r3, r3, #25
 80100ee:	f53f af2d 	bmi.w	800ff4c <_svfiprintf_r+0x28>
 80100f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100f4:	e72c      	b.n	800ff50 <_svfiprintf_r+0x2c>
 80100f6:	ab03      	add	r3, sp, #12
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	462a      	mov	r2, r5
 80100fc:	4b05      	ldr	r3, [pc, #20]	@ (8010114 <_svfiprintf_r+0x1f0>)
 80100fe:	a904      	add	r1, sp, #16
 8010100:	4638      	mov	r0, r7
 8010102:	f000 f879 	bl	80101f8 <_printf_i>
 8010106:	e7ed      	b.n	80100e4 <_svfiprintf_r+0x1c0>
 8010108:	08010884 	.word	0x08010884
 801010c:	0801088e 	.word	0x0801088e
 8010110:	00000000 	.word	0x00000000
 8010114:	0800fe6d 	.word	0x0800fe6d
 8010118:	0801088a 	.word	0x0801088a

0801011c <_printf_common>:
 801011c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010120:	4616      	mov	r6, r2
 8010122:	4698      	mov	r8, r3
 8010124:	688a      	ldr	r2, [r1, #8]
 8010126:	690b      	ldr	r3, [r1, #16]
 8010128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801012c:	4293      	cmp	r3, r2
 801012e:	bfb8      	it	lt
 8010130:	4613      	movlt	r3, r2
 8010132:	6033      	str	r3, [r6, #0]
 8010134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010138:	4607      	mov	r7, r0
 801013a:	460c      	mov	r4, r1
 801013c:	b10a      	cbz	r2, 8010142 <_printf_common+0x26>
 801013e:	3301      	adds	r3, #1
 8010140:	6033      	str	r3, [r6, #0]
 8010142:	6823      	ldr	r3, [r4, #0]
 8010144:	0699      	lsls	r1, r3, #26
 8010146:	bf42      	ittt	mi
 8010148:	6833      	ldrmi	r3, [r6, #0]
 801014a:	3302      	addmi	r3, #2
 801014c:	6033      	strmi	r3, [r6, #0]
 801014e:	6825      	ldr	r5, [r4, #0]
 8010150:	f015 0506 	ands.w	r5, r5, #6
 8010154:	d106      	bne.n	8010164 <_printf_common+0x48>
 8010156:	f104 0a19 	add.w	sl, r4, #25
 801015a:	68e3      	ldr	r3, [r4, #12]
 801015c:	6832      	ldr	r2, [r6, #0]
 801015e:	1a9b      	subs	r3, r3, r2
 8010160:	42ab      	cmp	r3, r5
 8010162:	dc26      	bgt.n	80101b2 <_printf_common+0x96>
 8010164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010168:	6822      	ldr	r2, [r4, #0]
 801016a:	3b00      	subs	r3, #0
 801016c:	bf18      	it	ne
 801016e:	2301      	movne	r3, #1
 8010170:	0692      	lsls	r2, r2, #26
 8010172:	d42b      	bmi.n	80101cc <_printf_common+0xb0>
 8010174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010178:	4641      	mov	r1, r8
 801017a:	4638      	mov	r0, r7
 801017c:	47c8      	blx	r9
 801017e:	3001      	adds	r0, #1
 8010180:	d01e      	beq.n	80101c0 <_printf_common+0xa4>
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	6922      	ldr	r2, [r4, #16]
 8010186:	f003 0306 	and.w	r3, r3, #6
 801018a:	2b04      	cmp	r3, #4
 801018c:	bf02      	ittt	eq
 801018e:	68e5      	ldreq	r5, [r4, #12]
 8010190:	6833      	ldreq	r3, [r6, #0]
 8010192:	1aed      	subeq	r5, r5, r3
 8010194:	68a3      	ldr	r3, [r4, #8]
 8010196:	bf0c      	ite	eq
 8010198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801019c:	2500      	movne	r5, #0
 801019e:	4293      	cmp	r3, r2
 80101a0:	bfc4      	itt	gt
 80101a2:	1a9b      	subgt	r3, r3, r2
 80101a4:	18ed      	addgt	r5, r5, r3
 80101a6:	2600      	movs	r6, #0
 80101a8:	341a      	adds	r4, #26
 80101aa:	42b5      	cmp	r5, r6
 80101ac:	d11a      	bne.n	80101e4 <_printf_common+0xc8>
 80101ae:	2000      	movs	r0, #0
 80101b0:	e008      	b.n	80101c4 <_printf_common+0xa8>
 80101b2:	2301      	movs	r3, #1
 80101b4:	4652      	mov	r2, sl
 80101b6:	4641      	mov	r1, r8
 80101b8:	4638      	mov	r0, r7
 80101ba:	47c8      	blx	r9
 80101bc:	3001      	adds	r0, #1
 80101be:	d103      	bne.n	80101c8 <_printf_common+0xac>
 80101c0:	f04f 30ff 	mov.w	r0, #4294967295
 80101c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101c8:	3501      	adds	r5, #1
 80101ca:	e7c6      	b.n	801015a <_printf_common+0x3e>
 80101cc:	18e1      	adds	r1, r4, r3
 80101ce:	1c5a      	adds	r2, r3, #1
 80101d0:	2030      	movs	r0, #48	@ 0x30
 80101d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80101d6:	4422      	add	r2, r4
 80101d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80101dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80101e0:	3302      	adds	r3, #2
 80101e2:	e7c7      	b.n	8010174 <_printf_common+0x58>
 80101e4:	2301      	movs	r3, #1
 80101e6:	4622      	mov	r2, r4
 80101e8:	4641      	mov	r1, r8
 80101ea:	4638      	mov	r0, r7
 80101ec:	47c8      	blx	r9
 80101ee:	3001      	adds	r0, #1
 80101f0:	d0e6      	beq.n	80101c0 <_printf_common+0xa4>
 80101f2:	3601      	adds	r6, #1
 80101f4:	e7d9      	b.n	80101aa <_printf_common+0x8e>
	...

080101f8 <_printf_i>:
 80101f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101fc:	7e0f      	ldrb	r7, [r1, #24]
 80101fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010200:	2f78      	cmp	r7, #120	@ 0x78
 8010202:	4691      	mov	r9, r2
 8010204:	4680      	mov	r8, r0
 8010206:	460c      	mov	r4, r1
 8010208:	469a      	mov	sl, r3
 801020a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801020e:	d807      	bhi.n	8010220 <_printf_i+0x28>
 8010210:	2f62      	cmp	r7, #98	@ 0x62
 8010212:	d80a      	bhi.n	801022a <_printf_i+0x32>
 8010214:	2f00      	cmp	r7, #0
 8010216:	f000 80d2 	beq.w	80103be <_printf_i+0x1c6>
 801021a:	2f58      	cmp	r7, #88	@ 0x58
 801021c:	f000 80b9 	beq.w	8010392 <_printf_i+0x19a>
 8010220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010228:	e03a      	b.n	80102a0 <_printf_i+0xa8>
 801022a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801022e:	2b15      	cmp	r3, #21
 8010230:	d8f6      	bhi.n	8010220 <_printf_i+0x28>
 8010232:	a101      	add	r1, pc, #4	@ (adr r1, 8010238 <_printf_i+0x40>)
 8010234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010238:	08010291 	.word	0x08010291
 801023c:	080102a5 	.word	0x080102a5
 8010240:	08010221 	.word	0x08010221
 8010244:	08010221 	.word	0x08010221
 8010248:	08010221 	.word	0x08010221
 801024c:	08010221 	.word	0x08010221
 8010250:	080102a5 	.word	0x080102a5
 8010254:	08010221 	.word	0x08010221
 8010258:	08010221 	.word	0x08010221
 801025c:	08010221 	.word	0x08010221
 8010260:	08010221 	.word	0x08010221
 8010264:	080103a5 	.word	0x080103a5
 8010268:	080102cf 	.word	0x080102cf
 801026c:	0801035f 	.word	0x0801035f
 8010270:	08010221 	.word	0x08010221
 8010274:	08010221 	.word	0x08010221
 8010278:	080103c7 	.word	0x080103c7
 801027c:	08010221 	.word	0x08010221
 8010280:	080102cf 	.word	0x080102cf
 8010284:	08010221 	.word	0x08010221
 8010288:	08010221 	.word	0x08010221
 801028c:	08010367 	.word	0x08010367
 8010290:	6833      	ldr	r3, [r6, #0]
 8010292:	1d1a      	adds	r2, r3, #4
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	6032      	str	r2, [r6, #0]
 8010298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801029c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80102a0:	2301      	movs	r3, #1
 80102a2:	e09d      	b.n	80103e0 <_printf_i+0x1e8>
 80102a4:	6833      	ldr	r3, [r6, #0]
 80102a6:	6820      	ldr	r0, [r4, #0]
 80102a8:	1d19      	adds	r1, r3, #4
 80102aa:	6031      	str	r1, [r6, #0]
 80102ac:	0606      	lsls	r6, r0, #24
 80102ae:	d501      	bpl.n	80102b4 <_printf_i+0xbc>
 80102b0:	681d      	ldr	r5, [r3, #0]
 80102b2:	e003      	b.n	80102bc <_printf_i+0xc4>
 80102b4:	0645      	lsls	r5, r0, #25
 80102b6:	d5fb      	bpl.n	80102b0 <_printf_i+0xb8>
 80102b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80102bc:	2d00      	cmp	r5, #0
 80102be:	da03      	bge.n	80102c8 <_printf_i+0xd0>
 80102c0:	232d      	movs	r3, #45	@ 0x2d
 80102c2:	426d      	negs	r5, r5
 80102c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102c8:	4859      	ldr	r0, [pc, #356]	@ (8010430 <_printf_i+0x238>)
 80102ca:	230a      	movs	r3, #10
 80102cc:	e011      	b.n	80102f2 <_printf_i+0xfa>
 80102ce:	6821      	ldr	r1, [r4, #0]
 80102d0:	6833      	ldr	r3, [r6, #0]
 80102d2:	0608      	lsls	r0, r1, #24
 80102d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80102d8:	d402      	bmi.n	80102e0 <_printf_i+0xe8>
 80102da:	0649      	lsls	r1, r1, #25
 80102dc:	bf48      	it	mi
 80102de:	b2ad      	uxthmi	r5, r5
 80102e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80102e2:	4853      	ldr	r0, [pc, #332]	@ (8010430 <_printf_i+0x238>)
 80102e4:	6033      	str	r3, [r6, #0]
 80102e6:	bf14      	ite	ne
 80102e8:	230a      	movne	r3, #10
 80102ea:	2308      	moveq	r3, #8
 80102ec:	2100      	movs	r1, #0
 80102ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80102f2:	6866      	ldr	r6, [r4, #4]
 80102f4:	60a6      	str	r6, [r4, #8]
 80102f6:	2e00      	cmp	r6, #0
 80102f8:	bfa2      	ittt	ge
 80102fa:	6821      	ldrge	r1, [r4, #0]
 80102fc:	f021 0104 	bicge.w	r1, r1, #4
 8010300:	6021      	strge	r1, [r4, #0]
 8010302:	b90d      	cbnz	r5, 8010308 <_printf_i+0x110>
 8010304:	2e00      	cmp	r6, #0
 8010306:	d04b      	beq.n	80103a0 <_printf_i+0x1a8>
 8010308:	4616      	mov	r6, r2
 801030a:	fbb5 f1f3 	udiv	r1, r5, r3
 801030e:	fb03 5711 	mls	r7, r3, r1, r5
 8010312:	5dc7      	ldrb	r7, [r0, r7]
 8010314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010318:	462f      	mov	r7, r5
 801031a:	42bb      	cmp	r3, r7
 801031c:	460d      	mov	r5, r1
 801031e:	d9f4      	bls.n	801030a <_printf_i+0x112>
 8010320:	2b08      	cmp	r3, #8
 8010322:	d10b      	bne.n	801033c <_printf_i+0x144>
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	07df      	lsls	r7, r3, #31
 8010328:	d508      	bpl.n	801033c <_printf_i+0x144>
 801032a:	6923      	ldr	r3, [r4, #16]
 801032c:	6861      	ldr	r1, [r4, #4]
 801032e:	4299      	cmp	r1, r3
 8010330:	bfde      	ittt	le
 8010332:	2330      	movle	r3, #48	@ 0x30
 8010334:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010338:	f106 36ff 	addle.w	r6, r6, #4294967295
 801033c:	1b92      	subs	r2, r2, r6
 801033e:	6122      	str	r2, [r4, #16]
 8010340:	f8cd a000 	str.w	sl, [sp]
 8010344:	464b      	mov	r3, r9
 8010346:	aa03      	add	r2, sp, #12
 8010348:	4621      	mov	r1, r4
 801034a:	4640      	mov	r0, r8
 801034c:	f7ff fee6 	bl	801011c <_printf_common>
 8010350:	3001      	adds	r0, #1
 8010352:	d14a      	bne.n	80103ea <_printf_i+0x1f2>
 8010354:	f04f 30ff 	mov.w	r0, #4294967295
 8010358:	b004      	add	sp, #16
 801035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035e:	6823      	ldr	r3, [r4, #0]
 8010360:	f043 0320 	orr.w	r3, r3, #32
 8010364:	6023      	str	r3, [r4, #0]
 8010366:	4833      	ldr	r0, [pc, #204]	@ (8010434 <_printf_i+0x23c>)
 8010368:	2778      	movs	r7, #120	@ 0x78
 801036a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801036e:	6823      	ldr	r3, [r4, #0]
 8010370:	6831      	ldr	r1, [r6, #0]
 8010372:	061f      	lsls	r7, r3, #24
 8010374:	f851 5b04 	ldr.w	r5, [r1], #4
 8010378:	d402      	bmi.n	8010380 <_printf_i+0x188>
 801037a:	065f      	lsls	r7, r3, #25
 801037c:	bf48      	it	mi
 801037e:	b2ad      	uxthmi	r5, r5
 8010380:	6031      	str	r1, [r6, #0]
 8010382:	07d9      	lsls	r1, r3, #31
 8010384:	bf44      	itt	mi
 8010386:	f043 0320 	orrmi.w	r3, r3, #32
 801038a:	6023      	strmi	r3, [r4, #0]
 801038c:	b11d      	cbz	r5, 8010396 <_printf_i+0x19e>
 801038e:	2310      	movs	r3, #16
 8010390:	e7ac      	b.n	80102ec <_printf_i+0xf4>
 8010392:	4827      	ldr	r0, [pc, #156]	@ (8010430 <_printf_i+0x238>)
 8010394:	e7e9      	b.n	801036a <_printf_i+0x172>
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	f023 0320 	bic.w	r3, r3, #32
 801039c:	6023      	str	r3, [r4, #0]
 801039e:	e7f6      	b.n	801038e <_printf_i+0x196>
 80103a0:	4616      	mov	r6, r2
 80103a2:	e7bd      	b.n	8010320 <_printf_i+0x128>
 80103a4:	6833      	ldr	r3, [r6, #0]
 80103a6:	6825      	ldr	r5, [r4, #0]
 80103a8:	6961      	ldr	r1, [r4, #20]
 80103aa:	1d18      	adds	r0, r3, #4
 80103ac:	6030      	str	r0, [r6, #0]
 80103ae:	062e      	lsls	r6, r5, #24
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	d501      	bpl.n	80103b8 <_printf_i+0x1c0>
 80103b4:	6019      	str	r1, [r3, #0]
 80103b6:	e002      	b.n	80103be <_printf_i+0x1c6>
 80103b8:	0668      	lsls	r0, r5, #25
 80103ba:	d5fb      	bpl.n	80103b4 <_printf_i+0x1bc>
 80103bc:	8019      	strh	r1, [r3, #0]
 80103be:	2300      	movs	r3, #0
 80103c0:	6123      	str	r3, [r4, #16]
 80103c2:	4616      	mov	r6, r2
 80103c4:	e7bc      	b.n	8010340 <_printf_i+0x148>
 80103c6:	6833      	ldr	r3, [r6, #0]
 80103c8:	1d1a      	adds	r2, r3, #4
 80103ca:	6032      	str	r2, [r6, #0]
 80103cc:	681e      	ldr	r6, [r3, #0]
 80103ce:	6862      	ldr	r2, [r4, #4]
 80103d0:	2100      	movs	r1, #0
 80103d2:	4630      	mov	r0, r6
 80103d4:	f7ef ff8c 	bl	80002f0 <memchr>
 80103d8:	b108      	cbz	r0, 80103de <_printf_i+0x1e6>
 80103da:	1b80      	subs	r0, r0, r6
 80103dc:	6060      	str	r0, [r4, #4]
 80103de:	6863      	ldr	r3, [r4, #4]
 80103e0:	6123      	str	r3, [r4, #16]
 80103e2:	2300      	movs	r3, #0
 80103e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103e8:	e7aa      	b.n	8010340 <_printf_i+0x148>
 80103ea:	6923      	ldr	r3, [r4, #16]
 80103ec:	4632      	mov	r2, r6
 80103ee:	4649      	mov	r1, r9
 80103f0:	4640      	mov	r0, r8
 80103f2:	47d0      	blx	sl
 80103f4:	3001      	adds	r0, #1
 80103f6:	d0ad      	beq.n	8010354 <_printf_i+0x15c>
 80103f8:	6823      	ldr	r3, [r4, #0]
 80103fa:	079b      	lsls	r3, r3, #30
 80103fc:	d413      	bmi.n	8010426 <_printf_i+0x22e>
 80103fe:	68e0      	ldr	r0, [r4, #12]
 8010400:	9b03      	ldr	r3, [sp, #12]
 8010402:	4298      	cmp	r0, r3
 8010404:	bfb8      	it	lt
 8010406:	4618      	movlt	r0, r3
 8010408:	e7a6      	b.n	8010358 <_printf_i+0x160>
 801040a:	2301      	movs	r3, #1
 801040c:	4632      	mov	r2, r6
 801040e:	4649      	mov	r1, r9
 8010410:	4640      	mov	r0, r8
 8010412:	47d0      	blx	sl
 8010414:	3001      	adds	r0, #1
 8010416:	d09d      	beq.n	8010354 <_printf_i+0x15c>
 8010418:	3501      	adds	r5, #1
 801041a:	68e3      	ldr	r3, [r4, #12]
 801041c:	9903      	ldr	r1, [sp, #12]
 801041e:	1a5b      	subs	r3, r3, r1
 8010420:	42ab      	cmp	r3, r5
 8010422:	dcf2      	bgt.n	801040a <_printf_i+0x212>
 8010424:	e7eb      	b.n	80103fe <_printf_i+0x206>
 8010426:	2500      	movs	r5, #0
 8010428:	f104 0619 	add.w	r6, r4, #25
 801042c:	e7f5      	b.n	801041a <_printf_i+0x222>
 801042e:	bf00      	nop
 8010430:	08010895 	.word	0x08010895
 8010434:	080108a6 	.word	0x080108a6

08010438 <memmove>:
 8010438:	4288      	cmp	r0, r1
 801043a:	b510      	push	{r4, lr}
 801043c:	eb01 0402 	add.w	r4, r1, r2
 8010440:	d902      	bls.n	8010448 <memmove+0x10>
 8010442:	4284      	cmp	r4, r0
 8010444:	4623      	mov	r3, r4
 8010446:	d807      	bhi.n	8010458 <memmove+0x20>
 8010448:	1e43      	subs	r3, r0, #1
 801044a:	42a1      	cmp	r1, r4
 801044c:	d008      	beq.n	8010460 <memmove+0x28>
 801044e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010456:	e7f8      	b.n	801044a <memmove+0x12>
 8010458:	4402      	add	r2, r0
 801045a:	4601      	mov	r1, r0
 801045c:	428a      	cmp	r2, r1
 801045e:	d100      	bne.n	8010462 <memmove+0x2a>
 8010460:	bd10      	pop	{r4, pc}
 8010462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801046a:	e7f7      	b.n	801045c <memmove+0x24>

0801046c <_sbrk_r>:
 801046c:	b538      	push	{r3, r4, r5, lr}
 801046e:	4d06      	ldr	r5, [pc, #24]	@ (8010488 <_sbrk_r+0x1c>)
 8010470:	2300      	movs	r3, #0
 8010472:	4604      	mov	r4, r0
 8010474:	4608      	mov	r0, r1
 8010476:	602b      	str	r3, [r5, #0]
 8010478:	f7f2 ff88 	bl	800338c <_sbrk>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_sbrk_r+0x1a>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_sbrk_r+0x1a>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	240aca24 	.word	0x240aca24

0801048c <memcpy>:
 801048c:	440a      	add	r2, r1
 801048e:	4291      	cmp	r1, r2
 8010490:	f100 33ff 	add.w	r3, r0, #4294967295
 8010494:	d100      	bne.n	8010498 <memcpy+0xc>
 8010496:	4770      	bx	lr
 8010498:	b510      	push	{r4, lr}
 801049a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801049e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104a2:	4291      	cmp	r1, r2
 80104a4:	d1f9      	bne.n	801049a <memcpy+0xe>
 80104a6:	bd10      	pop	{r4, pc}

080104a8 <_realloc_r>:
 80104a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ac:	4680      	mov	r8, r0
 80104ae:	4615      	mov	r5, r2
 80104b0:	460c      	mov	r4, r1
 80104b2:	b921      	cbnz	r1, 80104be <_realloc_r+0x16>
 80104b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104b8:	4611      	mov	r1, r2
 80104ba:	f7ff bc4b 	b.w	800fd54 <_malloc_r>
 80104be:	b92a      	cbnz	r2, 80104cc <_realloc_r+0x24>
 80104c0:	f7ff fbdc 	bl	800fc7c <_free_r>
 80104c4:	2400      	movs	r4, #0
 80104c6:	4620      	mov	r0, r4
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	f000 f81a 	bl	8010504 <_malloc_usable_size_r>
 80104d0:	4285      	cmp	r5, r0
 80104d2:	4606      	mov	r6, r0
 80104d4:	d802      	bhi.n	80104dc <_realloc_r+0x34>
 80104d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80104da:	d8f4      	bhi.n	80104c6 <_realloc_r+0x1e>
 80104dc:	4629      	mov	r1, r5
 80104de:	4640      	mov	r0, r8
 80104e0:	f7ff fc38 	bl	800fd54 <_malloc_r>
 80104e4:	4607      	mov	r7, r0
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d0ec      	beq.n	80104c4 <_realloc_r+0x1c>
 80104ea:	42b5      	cmp	r5, r6
 80104ec:	462a      	mov	r2, r5
 80104ee:	4621      	mov	r1, r4
 80104f0:	bf28      	it	cs
 80104f2:	4632      	movcs	r2, r6
 80104f4:	f7ff ffca 	bl	801048c <memcpy>
 80104f8:	4621      	mov	r1, r4
 80104fa:	4640      	mov	r0, r8
 80104fc:	f7ff fbbe 	bl	800fc7c <_free_r>
 8010500:	463c      	mov	r4, r7
 8010502:	e7e0      	b.n	80104c6 <_realloc_r+0x1e>

08010504 <_malloc_usable_size_r>:
 8010504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010508:	1f18      	subs	r0, r3, #4
 801050a:	2b00      	cmp	r3, #0
 801050c:	bfbc      	itt	lt
 801050e:	580b      	ldrlt	r3, [r1, r0]
 8010510:	18c0      	addlt	r0, r0, r3
 8010512:	4770      	bx	lr

08010514 <_init>:
 8010514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010516:	bf00      	nop
 8010518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801051a:	bc08      	pop	{r3}
 801051c:	469e      	mov	lr, r3
 801051e:	4770      	bx	lr

08010520 <_fini>:
 8010520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010522:	bf00      	nop
 8010524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010526:	bc08      	pop	{r3}
 8010528:	469e      	mov	lr, r3
 801052a:	4770      	bx	lr
