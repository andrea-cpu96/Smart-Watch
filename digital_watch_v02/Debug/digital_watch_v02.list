
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009960  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08009c10  08009c10  0000ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f90  08009f90  0000af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f98  08009f98  0000af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009f9c  08009f9c  0000af9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  24000000  08009fa0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0008a158  24000068  0800a008  0000b068  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  2408a1c0  0800a008  0000b1c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025340  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004624  00000000  00000000  000303d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000f795  00000000  00000000  000349fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001390  00000000  00000000  00044190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010bb  00000000  00000000  00045520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000344c0  00000000  00000000  000465db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002612d  00000000  00000000  0007aa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013f06d  00000000  00000000  000a0bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001dfc35  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003c20  00000000  00000000  001dfc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007d  00000000  00000000  001e3898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009bf8 	.word	0x08009bf8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	08009bf8 	.word	0x08009bf8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 8000390:	b530      	push	{r4, r5, lr}
 8000392:	4604      	mov	r4, r0
 uint16_t i;
  size-=4;
  for(i=0;i<size;i++)
 8000394:	1f08      	subs	r0, r1, #4
 8000396:	d024      	beq.n	80003e2 <__AVI_SearchID+0x52>
  {
    if(buf[i] == id[0])
 8000398:	7815      	ldrb	r5, [r2, #0]
  for(i=0;i<size;i++)
 800039a:	2300      	movs	r3, #0
 800039c:	469c      	mov	ip, r3
 800039e:	e004      	b.n	80003aa <__AVI_SearchID+0x1a>
 80003a0:	3301      	adds	r3, #1
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	469c      	mov	ip, r3
 80003a6:	4283      	cmp	r3, r0
 80003a8:	d21a      	bcs.n	80003e0 <__AVI_SearchID+0x50>
    if(buf[i] == id[0])
 80003aa:	f814 e00c 	ldrb.w	lr, [r4, ip]
 80003ae:	45ae      	cmp	lr, r5
 80003b0:	d1f6      	bne.n	80003a0 <__AVI_SearchID+0x10>
      if(buf[i+1] == id[1])
 80003b2:	eb04 010c 	add.w	r1, r4, ip
 80003b6:	f891 e001 	ldrb.w	lr, [r1, #1]
 80003ba:	7851      	ldrb	r1, [r2, #1]
 80003bc:	458e      	cmp	lr, r1
 80003be:	d1ef      	bne.n	80003a0 <__AVI_SearchID+0x10>
        if(buf[i+2] == id[2])  
 80003c0:	eb04 010c 	add.w	r1, r4, ip
 80003c4:	f891 e002 	ldrb.w	lr, [r1, #2]
 80003c8:	7891      	ldrb	r1, [r2, #2]
 80003ca:	458e      	cmp	lr, r1
 80003cc:	d1e8      	bne.n	80003a0 <__AVI_SearchID+0x10>
          if(buf[i+3] == id[3])
 80003ce:	eb04 010c 	add.w	r1, r4, ip
 80003d2:	f891 e003 	ldrb.w	lr, [r1, #3]
 80003d6:	78d1      	ldrb	r1, [r2, #3]
 80003d8:	458e      	cmp	lr, r1
 80003da:	d1e1      	bne.n	80003a0 <__AVI_SearchID+0x10>
 80003dc:	4660      	mov	r0, ip
 80003de:	e000      	b.n	80003e2 <__AVI_SearchID+0x52>
            return i;  
  }
  return 0;    
 80003e0:	2000      	movs	r0, #0
}
 80003e2:	bd30      	pop	{r4, r5, pc}

080003e4 <__AVI_GetStreamInfo>:
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80003e4:	788b      	ldrb	r3, [r1, #2]
 80003e6:	78ca      	ldrb	r2, [r1, #3]
 80003e8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80003ec:	83c2      	strh	r2, [r0, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80003ee:	f891 c005 	ldrb.w	ip, [r1, #5]
 80003f2:	798b      	ldrb	r3, [r1, #6]
 80003f4:	041b      	lsls	r3, r3, #16
 80003f6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80003fa:	f891 c004 	ldrb.w	ip, [r1, #4]
 80003fe:	ea43 030c 	orr.w	r3, r3, ip
 8000402:	79c9      	ldrb	r1, [r1, #7]
 8000404:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  
  if(pavi->aviInfo.StreamSize%2)
 8000408:	f013 0f01 	tst.w	r3, #1
    pavi->aviInfo.StreamSize++;
 800040c:	bf18      	it	ne
 800040e:	3101      	addne	r1, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000410:	6201      	str	r1, [r0, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 8000412:	f246 4363 	movw	r3, #25699	@ 0x6463
 8000416:	429a      	cmp	r2, r3
 8000418:	d005      	beq.n	8000426 <__AVI_GetStreamInfo+0x42>
 800041a:	f247 7362 	movw	r3, #30562	@ 0x7762
 800041e:	429a      	cmp	r2, r3
 8000420:	d001      	beq.n	8000426 <__AVI_GetStreamInfo+0x42>
  {
    return AVI_OK;
  }
  
  return AVI_STREAM_ERR;  
 8000422:	200b      	movs	r0, #11
 8000424:	4770      	bx	lr
    return AVI_OK;
 8000426:	2000      	movs	r0, #0
}
 8000428:	4770      	bx	lr
	...

0800042c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	4615      	mov	r5, r2
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
  aviheader=(AVI_HEADER*)buf; 
  if(aviheader->RiffID != AVI_RIFF_ID)
 8000430:	4b8b      	ldr	r3, [pc, #556]	@ (8000660 <__AVI_Init+0x234>)
 8000432:	680a      	ldr	r2, [r1, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	f040 80e5 	bne.w	8000604 <__AVI_Init+0x1d8>
 800043a:	4606      	mov	r6, r0
 800043c:	460c      	mov	r4, r1
  {
    return AVI_RIFF_ERR;
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800043e:	688a      	ldr	r2, [r1, #8]
 8000440:	4b88      	ldr	r3, [pc, #544]	@ (8000664 <__AVI_Init+0x238>)
 8000442:	429a      	cmp	r2, r3
 8000444:	f040 80e0 	bne.w	8000608 <__AVI_Init+0x1dc>
  }
  
  buf+=sizeof(AVI_HEADER);            
  listheader=(LIST_HEADER*)(buf);
  
  if(listheader->ListID != AVI_LIST_ID)
 8000448:	68ca      	ldr	r2, [r1, #12]
 800044a:	f103 5350 	add.w	r3, r3, #872415232	@ 0x34000000
 800044e:	f503 231f 	add.w	r3, r3, #651264	@ 0x9f000
 8000452:	f203 330b 	addw	r3, r3, #779	@ 0x30b
 8000456:	429a      	cmp	r2, r3
 8000458:	f040 80d8 	bne.w	800060c <__AVI_Init+0x1e0>
  {
    return AVI_LIST_ERR;
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800045c:	694a      	ldr	r2, [r1, #20]
 800045e:	4b82      	ldr	r3, [pc, #520]	@ (8000668 <__AVI_Init+0x23c>)
 8000460:	429a      	cmp	r2, r3
 8000462:	f040 80d5 	bne.w	8000610 <__AVI_Init+0x1e4>
    return AVI_HDRL_ERR;
  }
  
  buf+=sizeof(LIST_HEADER);            
  avihheader=(AVIH_HEADER*)(buf);                                   
  if(avihheader->BlockID != AVI_AVIH_ID)
 8000466:	698a      	ldr	r2, [r1, #24]
 8000468:	f1a3 6381 	sub.w	r3, r3, #67633152	@ 0x4080000
 800046c:	f5a3 436e 	sub.w	r3, r3, #60928	@ 0xee00
 8000470:	3b07      	subs	r3, #7
 8000472:	429a      	cmp	r2, r3
 8000474:	f040 80ce 	bne.w	8000614 <__AVI_Init+0x1e8>
  {
    return AVI_AVIH_ERR;
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 8000478:	6a0b      	ldr	r3, [r1, #32]
 800047a:	6003      	str	r3, [r0, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800047c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800047e:	6043      	str	r3, [r0, #4]
  buf+=avihheader->BlockSize+8;            
 8000480:	69cb      	ldr	r3, [r1, #28]
 8000482:	3320      	adds	r3, #32
 8000484:	18ca      	adds	r2, r1, r3
  listheader=(LIST_HEADER*)(buf); 
  
  if(listheader->ListID != AVI_LIST_ID)
 8000486:	58c9      	ldr	r1, [r1, r3]
 8000488:	4b78      	ldr	r3, [pc, #480]	@ (800066c <__AVI_Init+0x240>)
 800048a:	4299      	cmp	r1, r3
 800048c:	f040 80c4 	bne.w	8000618 <__AVI_Init+0x1ec>
  {
    return AVI_LIST_ERR;
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 8000490:	6891      	ldr	r1, [r2, #8]
 8000492:	f103 53c0 	add.w	r3, r3, #402653184	@ 0x18000000
 8000496:	f503 13f9 	add.w	r3, r3, #2039808	@ 0x1f2000
 800049a:	f603 3327 	addw	r3, r3, #2855	@ 0xb27
 800049e:	4299      	cmp	r1, r3
 80004a0:	f040 80bc 	bne.w	800061c <__AVI_Init+0x1f0>
  {
    return AVI_STRL_ERR;
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
  if(strhheader->BlockID != AVI_STRH_ID)
 80004a4:	68d1      	ldr	r1, [r2, #12]
 80004a6:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 80004aa:	4299      	cmp	r1, r3
 80004ac:	f040 80b8 	bne.w	8000620 <__AVI_Init+0x1f4>
  {
    return AVI_STRH_ERR;
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 80004b0:	6953      	ldr	r3, [r2, #20]
 80004b2:	496f      	ldr	r1, [pc, #444]	@ (8000670 <__AVI_Init+0x244>)
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d011      	beq.n	80004dc <__AVI_Init+0xb0>
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
      pavi->aviInfo.Channels=wavheader->Channels;  
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 80004b8:	496e      	ldr	r1, [pc, #440]	@ (8000674 <__AVI_Init+0x248>)
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d04f      	beq.n	800055e <__AVI_Init+0x132>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 80004be:	4a6e      	ldr	r2, [pc, #440]	@ (8000678 <__AVI_Init+0x24c>)
 80004c0:	4629      	mov	r1, r5
 80004c2:	4620      	mov	r0, r4
 80004c4:	f7ff ff64 	bl	8000390 <__AVI_SearchID>
  if(offset == 0)
 80004c8:	b283      	uxth	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f000 80c4 	beq.w	8000658 <__AVI_Init+0x22c>
  {
    return AVI_MOVI_ERR;
  }
  
  if(pavi->aviInfo.SampleRate)
 80004d0:	6973      	ldr	r3, [r6, #20]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	f040 8087 	bne.w	80005e6 <__AVI_Init+0x1ba>
    
    tbuf+=offset+4;
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
  }
  
  return res;
 80004d8:	2000      	movs	r0, #0
 80004da:	e094      	b.n	8000606 <__AVI_Init+0x1da>
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 80004dc:	6991      	ldr	r1, [r2, #24]
 80004de:	4b67      	ldr	r3, [pc, #412]	@ (800067c <__AVI_Init+0x250>)
 80004e0:	4299      	cmp	r1, r3
 80004e2:	f040 809f 	bne.w	8000624 <__AVI_Init+0x1f8>
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 80004e6:	4b66      	ldr	r3, [pc, #408]	@ (8000680 <__AVI_Init+0x254>)
 80004e8:	6243      	str	r3, [r0, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 80004ea:	4b66      	ldr	r3, [pc, #408]	@ (8000684 <__AVI_Init+0x258>)
 80004ec:	6283      	str	r3, [r0, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80004ee:	6913      	ldr	r3, [r2, #16]
 80004f0:	3314      	adds	r3, #20
 80004f2:	18d1      	adds	r1, r2, r3
    if(bmpheader->BlockID != AVI_STRF_ID)
 80004f4:	58d0      	ldr	r0, [r2, r3]
 80004f6:	4b64      	ldr	r3, [pc, #400]	@ (8000688 <__AVI_Init+0x25c>)
 80004f8:	4298      	cmp	r0, r3
 80004fa:	f040 8095 	bne.w	8000628 <__AVI_Init+0x1fc>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80004fe:	68cb      	ldr	r3, [r1, #12]
 8000500:	60f3      	str	r3, [r6, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 8000502:	690b      	ldr	r3, [r1, #16]
 8000504:	6133      	str	r3, [r6, #16]
    buf+=listheader->BlockSize+8;          
 8000506:	6853      	ldr	r3, [r2, #4]
 8000508:	3308      	adds	r3, #8
 800050a:	18d1      	adds	r1, r2, r3
    if(listheader->ListID != AVI_LIST_ID)
 800050c:	58d2      	ldr	r2, [r2, r3]
 800050e:	4b57      	ldr	r3, [pc, #348]	@ (800066c <__AVI_Init+0x240>)
 8000510:	429a      	cmp	r2, r3
 8000512:	d004      	beq.n	800051e <__AVI_Init+0xf2>
      pavi->aviInfo.SampleRate=0;          
 8000514:	2300      	movs	r3, #0
 8000516:	6173      	str	r3, [r6, #20]
      pavi->aviInfo.Channels=0;          
 8000518:	8333      	strh	r3, [r6, #24]
      pavi->aviInfo.AudioType=0;          
 800051a:	83b3      	strh	r3, [r6, #28]
 800051c:	e7cf      	b.n	80004be <__AVI_Init+0x92>
      if(listheader->ListType != AVI_STRL_ID)
 800051e:	688a      	ldr	r2, [r1, #8]
 8000520:	4b5a      	ldr	r3, [pc, #360]	@ (800068c <__AVI_Init+0x260>)
 8000522:	429a      	cmp	r2, r3
 8000524:	f040 8082 	bne.w	800062c <__AVI_Init+0x200>
      if(strhheader->BlockID != AVI_STRH_ID)
 8000528:	68ca      	ldr	r2, [r1, #12]
 800052a:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 800052e:	429a      	cmp	r2, r3
 8000530:	d17e      	bne.n	8000630 <__AVI_Init+0x204>
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 8000532:	694a      	ldr	r2, [r1, #20]
 8000534:	f103 632f 	add.w	r3, r3, #183500800	@ 0xaf00000
 8000538:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800053c:	33ee      	adds	r3, #238	@ 0xee
 800053e:	429a      	cmp	r2, r3
 8000540:	d178      	bne.n	8000634 <__AVI_Init+0x208>
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000542:	690b      	ldr	r3, [r1, #16]
 8000544:	3314      	adds	r3, #20
 8000546:	18ca      	adds	r2, r1, r3
      if(wavheader->BlockID != AVI_STRF_ID)
 8000548:	58c9      	ldr	r1, [r1, r3]
 800054a:	4b4f      	ldr	r3, [pc, #316]	@ (8000688 <__AVI_Init+0x25c>)
 800054c:	4299      	cmp	r1, r3
 800054e:	d173      	bne.n	8000638 <__AVI_Init+0x20c>
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 8000550:	68d3      	ldr	r3, [r2, #12]
 8000552:	6173      	str	r3, [r6, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 8000554:	8953      	ldrh	r3, [r2, #10]
 8000556:	8333      	strh	r3, [r6, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 8000558:	8913      	ldrh	r3, [r2, #8]
 800055a:	83b3      	strh	r3, [r6, #28]
 800055c:	e7af      	b.n	80004be <__AVI_Init+0x92>
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800055e:	4b4c      	ldr	r3, [pc, #304]	@ (8000690 <__AVI_Init+0x264>)
 8000560:	6243      	str	r3, [r0, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 8000562:	4b4c      	ldr	r3, [pc, #304]	@ (8000694 <__AVI_Init+0x268>)
 8000564:	6283      	str	r3, [r0, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 8000566:	6913      	ldr	r3, [r2, #16]
 8000568:	3314      	adds	r3, #20
 800056a:	18d1      	adds	r1, r2, r3
    if(wavheader->BlockID != AVI_STRF_ID)
 800056c:	58d0      	ldr	r0, [r2, r3]
 800056e:	4b46      	ldr	r3, [pc, #280]	@ (8000688 <__AVI_Init+0x25c>)
 8000570:	4298      	cmp	r0, r3
 8000572:	d163      	bne.n	800063c <__AVI_Init+0x210>
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 8000574:	68cb      	ldr	r3, [r1, #12]
 8000576:	6173      	str	r3, [r6, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 8000578:	894b      	ldrh	r3, [r1, #10]
 800057a:	8333      	strh	r3, [r6, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800057c:	890b      	ldrh	r3, [r1, #8]
 800057e:	83b3      	strh	r3, [r6, #28]
    buf+=listheader->BlockSize+8;          
 8000580:	6853      	ldr	r3, [r2, #4]
 8000582:	3308      	adds	r3, #8
 8000584:	18d1      	adds	r1, r2, r3
    if(listheader->ListID != AVI_LIST_ID)
 8000586:	58d2      	ldr	r2, [r2, r3]
 8000588:	4b38      	ldr	r3, [pc, #224]	@ (800066c <__AVI_Init+0x240>)
 800058a:	429a      	cmp	r2, r3
 800058c:	d158      	bne.n	8000640 <__AVI_Init+0x214>
    if(listheader->ListType != AVI_STRL_ID)
 800058e:	688a      	ldr	r2, [r1, #8]
 8000590:	f103 53c0 	add.w	r3, r3, #402653184	@ 0x18000000
 8000594:	f503 13f9 	add.w	r3, r3, #2039808	@ 0x1f2000
 8000598:	f603 3327 	addw	r3, r3, #2855	@ 0xb27
 800059c:	429a      	cmp	r2, r3
 800059e:	d151      	bne.n	8000644 <__AVI_Init+0x218>
    if(strhheader->BlockID != AVI_STRH_ID)
 80005a0:	68ca      	ldr	r2, [r1, #12]
 80005a2:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d14e      	bne.n	8000648 <__AVI_Init+0x21c>
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 80005aa:	694a      	ldr	r2, [r1, #20]
 80005ac:	f103 632f 	add.w	r3, r3, #183500800	@ 0xaf00000
 80005b0:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80005b4:	f203 1303 	addw	r3, r3, #259	@ 0x103
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d147      	bne.n	800064c <__AVI_Init+0x220>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 80005bc:	690b      	ldr	r3, [r1, #16]
 80005be:	3314      	adds	r3, #20
 80005c0:	18ca      	adds	r2, r1, r3
    if(bmpheader->BlockID != AVI_STRF_ID)
 80005c2:	58c9      	ldr	r1, [r1, r3]
 80005c4:	4b30      	ldr	r3, [pc, #192]	@ (8000688 <__AVI_Init+0x25c>)
 80005c6:	4299      	cmp	r1, r3
 80005c8:	d142      	bne.n	8000650 <__AVI_Init+0x224>
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 80005ca:	6991      	ldr	r1, [r2, #24]
 80005cc:	f1a3 53f9 	sub.w	r3, r3, #522190848	@ 0x1f200000
 80005d0:	f5a3 330a 	sub.w	r3, r3, #141312	@ 0x22800
 80005d4:	f2a3 2326 	subw	r3, r3, #550	@ 0x226
 80005d8:	4299      	cmp	r1, r3
 80005da:	d13b      	bne.n	8000654 <__AVI_Init+0x228>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80005dc:	68d3      	ldr	r3, [r2, #12]
 80005de:	60f3      	str	r3, [r6, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 80005e0:	6913      	ldr	r3, [r2, #16]
 80005e2:	6133      	str	r3, [r6, #16]
 80005e4:	e76b      	b.n	80004be <__AVI_Init+0x92>
    tbuf+=offset;
 80005e6:	fa14 f480 	uxtah	r4, r4, r0
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 80005ea:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 80005ec:	4629      	mov	r1, r5
 80005ee:	4620      	mov	r0, r4
 80005f0:	f7ff fece 	bl	8000390 <__AVI_SearchID>
    if(offset == 0)
 80005f4:	b283      	uxth	r3, r0
 80005f6:	b38b      	cbz	r3, 800065c <__AVI_Init+0x230>
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 80005f8:	fa14 f080 	uxtah	r0, r4, r0
 80005fc:	8883      	ldrh	r3, [r0, #4]
 80005fe:	8373      	strh	r3, [r6, #26]
  return res;
 8000600:	2000      	movs	r0, #0
 8000602:	e000      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_RIFF_ERR;
 8000604:	2001      	movs	r0, #1
}
 8000606:	bd70      	pop	{r4, r5, r6, pc}
    return AVI_AVI_ERR;  
 8000608:	2002      	movs	r0, #2
 800060a:	e7fc      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_LIST_ERR;
 800060c:	2003      	movs	r0, #3
 800060e:	e7fa      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_HDRL_ERR;
 8000610:	2004      	movs	r0, #4
 8000612:	e7f8      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_AVIH_ERR;
 8000614:	2005      	movs	r0, #5
 8000616:	e7f6      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_LIST_ERR;
 8000618:	2003      	movs	r0, #3
 800061a:	e7f4      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_STRL_ERR;
 800061c:	2006      	movs	r0, #6
 800061e:	e7f2      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_STRH_ERR;
 8000620:	2007      	movs	r0, #7
 8000622:	e7f0      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_FORMAT_ERR;
 8000624:	200a      	movs	r0, #10
 8000626:	e7ee      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_STRF_ERR;
 8000628:	2008      	movs	r0, #8
 800062a:	e7ec      	b.n	8000606 <__AVI_Init+0x1da>
        return AVI_STRL_ERR;    
 800062c:	2006      	movs	r0, #6
 800062e:	e7ea      	b.n	8000606 <__AVI_Init+0x1da>
        return AVI_STRH_ERR;
 8000630:	2007      	movs	r0, #7
 8000632:	e7e8      	b.n	8000606 <__AVI_Init+0x1da>
        return AVI_FORMAT_ERR;
 8000634:	200a      	movs	r0, #10
 8000636:	e7e6      	b.n	8000606 <__AVI_Init+0x1da>
        return AVI_STRF_ERR;
 8000638:	2008      	movs	r0, #8
 800063a:	e7e4      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_STRF_ERR;
 800063c:	2008      	movs	r0, #8
 800063e:	e7e2      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_LIST_ERR;  
 8000640:	2003      	movs	r0, #3
 8000642:	e7e0      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_STRL_ERR;  
 8000644:	2006      	movs	r0, #6
 8000646:	e7de      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_STRH_ERR;
 8000648:	2007      	movs	r0, #7
 800064a:	e7dc      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_FORMAT_ERR;
 800064c:	200a      	movs	r0, #10
 800064e:	e7da      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_STRF_ERR;  
 8000650:	2008      	movs	r0, #8
 8000652:	e7d8      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_FORMAT_ERR;
 8000654:	200a      	movs	r0, #10
 8000656:	e7d6      	b.n	8000606 <__AVI_Init+0x1da>
    return AVI_MOVI_ERR;
 8000658:	2009      	movs	r0, #9
 800065a:	e7d4      	b.n	8000606 <__AVI_Init+0x1da>
      return AVI_STREAM_ERR;
 800065c:	200b      	movs	r0, #11
 800065e:	e7d2      	b.n	8000606 <__AVI_Init+0x1da>
 8000660:	46464952 	.word	0x46464952
 8000664:	20495641 	.word	0x20495641
 8000668:	6c726468 	.word	0x6c726468
 800066c:	5453494c 	.word	0x5453494c
 8000670:	73646976 	.word	0x73646976
 8000674:	73647561 	.word	0x73647561
 8000678:	08009c30 	.word	0x08009c30
 800067c:	47504a4d 	.word	0x47504a4d
 8000680:	08009c10 	.word	0x08009c10
 8000684:	08009c18 	.word	0x08009c18
 8000688:	66727473 	.word	0x66727473
 800068c:	6c727473 	.word	0x6c727473
 8000690:	08009c20 	.word	0x08009c20
 8000694:	08009c28 	.word	0x08009c28

08000698 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	4604      	mov	r4, r0
 800069e:	460e      	mov	r6, r1
 80006a0:	461d      	mov	r5, r3
  uint32_t readSize= 0;
 80006a2:	2100      	movs	r1, #0
 80006a4:	9101      	str	r1, [sp, #4]
  
  pavi->pVideoBuffer = pVideoBuffer;
 80006a6:	6342      	str	r2, [r0, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 80006a8:	6383      	str	r3, [r0, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 80006aa:	9b06      	ldr	r3, [sp, #24]
 80006ac:	63c3      	str	r3, [r0, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 80006ae:	9b07      	ldr	r3, [sp, #28]
 80006b0:	6403      	str	r3, [r0, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80006b2:	4630      	mov	r0, r6
 80006b4:	f008 fc74 	bl	8008fa0 <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80006b8:	ab01      	add	r3, sp, #4
 80006ba:	462a      	mov	r2, r5
 80006bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80006be:	4630      	mov	r0, r6
 80006c0:	f008 fb34 	bl	8008d2c <f_read>
  if(readSize != VideoBufferSize)
 80006c4:	9b01      	ldr	r3, [sp, #4]
 80006c6:	42ab      	cmp	r3, r5
 80006c8:	d002      	beq.n	80006d0 <AVI_ParserInit+0x38>
  {
    return 1;
 80006ca:	2001      	movs	r0, #1

  pavi->FileSize= f_size(file);
  pavi->CurrentImage=0;
  
  return  0;
}
 80006cc:	b002      	add	sp, #8
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 80006d0:	462a      	mov	r2, r5
 80006d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80006d4:	4620      	mov	r0, r4
 80006d6:	f7ff fea9 	bl	800042c <__AVI_Init>
 80006da:	b918      	cbnz	r0, 80006e4 <AVI_ParserInit+0x4c>
  pavi->FileSize= f_size(file);
 80006dc:	68f3      	ldr	r3, [r6, #12]
 80006de:	6463      	str	r3, [r4, #68]	@ 0x44
  pavi->CurrentImage=0;
 80006e0:	62e0      	str	r0, [r4, #44]	@ 0x2c
  return  0;
 80006e2:	e7f3      	b.n	80006cc <AVI_ParserInit+0x34>
    return 1;    
 80006e4:	2001      	movs	r0, #1
 80006e6:	e7f1      	b.n	80006cc <AVI_ParserInit+0x34>

080006e8 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 80006e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	4604      	mov	r4, r0
 80006f0:	460d      	mov	r5, r1
 80006f2:	4616      	mov	r6, r2
  uint32_t  offset ;
  uint32_t readSize = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	9301      	str	r3, [sp, #4]
  
  if(pavi->CurrentImage== 0 )
 80006f8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80006fa:	b163      	cbz	r3, 8000716 <AVI_GetFrame+0x2e>
    f_lseek(file, offset + 12 );
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80006fc:	8be3      	ldrh	r3, [r4, #30]
 80006fe:	f246 4163 	movw	r1, #25699	@ 0x6463
 8000702:	428b      	cmp	r3, r1
 8000704:	d024      	beq.n	8000750 <AVI_GetFrame+0x68>

	}
    
    return AVI_VIDEO_FRAME;
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000706:	f247 7262 	movw	r2, #30562	@ 0x7762
 800070a:	4293      	cmp	r3, r2
 800070c:	d05c      	beq.n	80007c8 <AVI_GetFrame+0xe0>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
    
  }
  
  return 0;
 800070e:	2000      	movs	r0, #0
}
 8000710:	b002      	add	sp, #8
 8000712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f_lseek(file, 0 ); /* Go to the file start */
 8000716:	2100      	movs	r1, #0
 8000718:	4628      	mov	r0, r5
 800071a:	f008 fc41 	bl	8008fa0 <f_lseek>
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800071e:	ab01      	add	r3, sp, #4
 8000720:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000722:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000724:	4628      	mov	r0, r5
 8000726:	f008 fb01 	bl	8008d2c <f_read>
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800072a:	f8d4 8034 	ldr.w	r8, [r4, #52]	@ 0x34
 800072e:	4a2e      	ldr	r2, [pc, #184]	@ (80007e8 <AVI_GetFrame+0x100>)
 8000730:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000732:	4640      	mov	r0, r8
 8000734:	f7ff fe2c 	bl	8000390 <__AVI_SearchID>
 8000738:	4607      	mov	r7, r0
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800073a:	1d01      	adds	r1, r0, #4
 800073c:	4441      	add	r1, r8
 800073e:	4620      	mov	r0, r4
 8000740:	f7ff fe50 	bl	80003e4 <__AVI_GetStreamInfo>
    f_lseek(file, offset + 12 );
 8000744:	f107 010c 	add.w	r1, r7, #12
 8000748:	4628      	mov	r0, r5
 800074a:	f008 fc29 	bl	8008fa0 <f_lseek>
 800074e:	e7d5      	b.n	80006fc <AVI_GetFrame+0x14>
	if(skipFlag == 1)
 8000750:	2e01      	cmp	r6, #1
 8000752:	d011      	beq.n	8000778 <AVI_GetFrame+0x90>
	else if(skipFlag == 2)
 8000754:	2e02      	cmp	r6, #2
 8000756:	d022      	beq.n	800079e <AVI_GetFrame+0xb6>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 8000758:	6a22      	ldr	r2, [r4, #32]
 800075a:	6322      	str	r2, [r4, #48]	@ 0x30
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800075c:	ab01      	add	r3, sp, #4
 800075e:	3208      	adds	r2, #8
 8000760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000762:	4628      	mov	r0, r5
 8000764:	f008 fae2 	bl	8008d2c <f_read>
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 8000768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800076a:	6a23      	ldr	r3, [r4, #32]
 800076c:	4419      	add	r1, r3
 800076e:	4620      	mov	r0, r4
 8000770:	f7ff fe38 	bl	80003e4 <__AVI_GetStreamInfo>
    return AVI_VIDEO_FRAME;
 8000774:	2001      	movs	r0, #1
 8000776:	e7cb      	b.n	8000710 <AVI_GetFrame+0x28>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 8000778:	6a23      	ldr	r3, [r4, #32]
 800077a:	6323      	str	r3, [r4, #48]	@ 0x30
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 800077c:	69a9      	ldr	r1, [r5, #24]
 800077e:	4419      	add	r1, r3
 8000780:	4628      	mov	r0, r5
 8000782:	f008 fc0d 	bl	8008fa0 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000786:	ab01      	add	r3, sp, #4
 8000788:	2208      	movs	r2, #8
 800078a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800078c:	4628      	mov	r0, r5
 800078e:	f008 facd 	bl	8008d2c <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 8000792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000794:	4620      	mov	r0, r4
 8000796:	f7ff fe25 	bl	80003e4 <__AVI_GetStreamInfo>
    return AVI_VIDEO_FRAME;
 800079a:	2001      	movs	r0, #1
 800079c:	e7b8      	b.n	8000710 <AVI_GetFrame+0x28>
		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 800079e:	69a9      	ldr	r1, [r5, #24]
 80007a0:	3910      	subs	r1, #16
 80007a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80007a4:	1ac9      	subs	r1, r1, r3
 80007a6:	4628      	mov	r0, r5
 80007a8:	f008 fbfa 	bl	8008fa0 <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 80007ac:	ab01      	add	r3, sp, #4
 80007ae:	2208      	movs	r2, #8
 80007b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80007b2:	4628      	mov	r0, r5
 80007b4:	f008 faba 	bl	8008d2c <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 80007b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80007ba:	4620      	mov	r0, r4
 80007bc:	f7ff fe12 	bl	80003e4 <__AVI_GetStreamInfo>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80007c0:	6a23      	ldr	r3, [r4, #32]
 80007c2:	6323      	str	r3, [r4, #48]	@ 0x30
    return AVI_VIDEO_FRAME;
 80007c4:	2001      	movs	r0, #1
 80007c6:	e7a3      	b.n	8000710 <AVI_GetFrame+0x28>
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 80007c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80007ca:	ab01      	add	r3, sp, #4
 80007cc:	3208      	adds	r2, #8
 80007ce:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80007d0:	4628      	mov	r0, r5
 80007d2:	f008 faab 	bl	8008d2c <f_read>
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 80007d6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	4419      	add	r1, r3
 80007dc:	4620      	mov	r0, r4
 80007de:	f7ff fe01 	bl	80003e4 <__AVI_GetStreamInfo>
    return AVI_AUDIO_FRAME;
 80007e2:	2002      	movs	r0, #2
 80007e4:	e794      	b.n	8000710 <AVI_GetFrame+0x28>
 80007e6:	bf00      	nop
 80007e8:	08009c30 	.word	0x08009c30

080007ec <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 80007ec:	b508      	push	{r3, lr}
    if (val==0) {
 80007ee:	b928      	cbnz	r0, 80007fc <GC9A01_set_reset+0x10>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <GC9A01_set_reset+0x1c>)
 80007f6:	f001 ff11 	bl	800261c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 80007fa:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2104      	movs	r1, #4
 8000800:	4801      	ldr	r0, [pc, #4]	@ (8000808 <GC9A01_set_reset+0x1c>)
 8000802:	f001 ff0b 	bl	800261c <HAL_GPIO_WritePin>
}
 8000806:	e7f8      	b.n	80007fa <GC9A01_set_reset+0xe>
 8000808:	58020400 	.word	0x58020400

0800080c <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 800080c:	b508      	push	{r3, lr}
    if (val==0) {
 800080e:	b928      	cbnz	r0, 800081c <GC9A01_set_data_command+0x10>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2102      	movs	r1, #2
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <GC9A01_set_data_command+0x1c>)
 8000816:	f001 ff01 	bl	800261c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 800081a:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2102      	movs	r1, #2
 8000820:	4801      	ldr	r0, [pc, #4]	@ (8000828 <GC9A01_set_data_command+0x1c>)
 8000822:	f001 fefb 	bl	800261c <HAL_GPIO_WritePin>
}
 8000826:	e7f8      	b.n	800081a <GC9A01_set_data_command+0xe>
 8000828:	58020400 	.word	0x58020400

0800082c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800082c:	b508      	push	{r3, lr}
    if (val==0) {
 800082e:	b928      	cbnz	r0, 800083c <GC9A01_set_chip_select+0x10>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <GC9A01_set_chip_select+0x1c>)
 8000836:	f001 fef1 	bl	800261c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 800083a:	bd08      	pop	{r3, pc}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800083c:	2201      	movs	r2, #1
 800083e:	4611      	mov	r1, r2
 8000840:	4801      	ldr	r0, [pc, #4]	@ (8000848 <GC9A01_set_chip_select+0x1c>)
 8000842:	f001 feeb 	bl	800261c <HAL_GPIO_WritePin>
}
 8000846:	e7f8      	b.n	800083a <GC9A01_set_chip_select+0xe>
 8000848:	58020400 	.word	0x58020400

0800084c <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
int GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800084c:	b508      	push	{r3, lr}
 800084e:	460a      	mov	r2, r1


	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	4601      	mov	r1, r0
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <GC9A01_spi_tx+0x20>)
 8000858:	f006 fada 	bl	8006e10 <HAL_SPI_Transmit>
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <GC9A01_spi_tx+0x24>)
 800085e:	7018      	strb	r0, [r3, #0]

	if(ret != HAL_OK)
		return -1;

	return 1;
 8000860:	2800      	cmp	r0, #0

}
 8000862:	bf14      	ite	ne
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	2001      	moveq	r0, #1
 800086a:	bd08      	pop	{r3, pc}
 800086c:	24000170 	.word	0x24000170
 8000870:	24000084 	.word	0x24000084

08000874 <GC9A01_write_command>:
void GC9A01_write_command(uint8_t cmd) {
 8000874:	b500      	push	{lr}
 8000876:	b083      	sub	sp, #12
 8000878:	f88d 0007 	strb.w	r0, [sp, #7]
    GC9A01_set_data_command(OFF);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff ffc5 	bl	800080c <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff ffd2 	bl	800082c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 8000888:	2101      	movs	r1, #1
 800088a:	f10d 0007 	add.w	r0, sp, #7
 800088e:	f7ff ffdd 	bl	800084c <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff ffca 	bl	800082c <GC9A01_set_chip_select>
}
 8000898:	b003      	add	sp, #12
 800089a:	f85d fb04 	ldr.w	pc, [sp], #4

0800089e <GC9A01_write_data>:
void GC9A01_write_data(uint8_t *data, size_t len) {
 800089e:	b538      	push	{r3, r4, r5, lr}
 80008a0:	4604      	mov	r4, r0
 80008a2:	460d      	mov	r5, r1
    GC9A01_set_data_command(ON);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff ffb1 	bl	800080c <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ffbe 	bl	800082c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 80008b0:	b2a9      	uxth	r1, r5
 80008b2:	4620      	mov	r0, r4
 80008b4:	f7ff ffca 	bl	800084c <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff ffb7 	bl	800082c <GC9A01_set_chip_select>
}
 80008be:	bd38      	pop	{r3, r4, r5, pc}

080008c0 <GC9A01_init>:
void GC9A01_init(void) {
 80008c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c4:	b083      	sub	sp, #12
    GC9A01_set_chip_select(ON);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff ffb0 	bl	800082c <GC9A01_set_chip_select>
    HAL_Delay(5);
 80008cc:	2005      	movs	r0, #5
 80008ce:	f001 fb65 	bl	8001f9c <HAL_Delay>
    GC9A01_set_reset(OFF);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff ff8a 	bl	80007ec <GC9A01_set_reset>
    HAL_Delay(10);
 80008d8:	200a      	movs	r0, #10
 80008da:	f001 fb5f 	bl	8001f9c <HAL_Delay>
    GC9A01_set_reset(ON);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ff84 	bl	80007ec <GC9A01_set_reset>
    HAL_Delay(120);
 80008e4:	2078      	movs	r0, #120	@ 0x78
 80008e6:	f001 fb59 	bl	8001f9c <HAL_Delay>
    GC9A01_write_command(0xEF);
 80008ea:	20ef      	movs	r0, #239	@ 0xef
 80008ec:	f7ff ffc2 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 80008f0:	20eb      	movs	r0, #235	@ 0xeb
 80008f2:	f7ff ffbf 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 80008f6:	2414      	movs	r4, #20
 80008f8:	f88d 4007 	strb.w	r4, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80008fc:	2101      	movs	r1, #1
 80008fe:	f10d 0007 	add.w	r0, sp, #7
 8000902:	f7ff ffcc 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xFE);
 8000906:	20fe      	movs	r0, #254	@ 0xfe
 8000908:	f7ff ffb4 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800090c:	20ef      	movs	r0, #239	@ 0xef
 800090e:	f7ff ffb1 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000912:	20eb      	movs	r0, #235	@ 0xeb
 8000914:	f7ff ffae 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 8000918:	f88d 4007 	strb.w	r4, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800091c:	2101      	movs	r1, #1
 800091e:	f10d 0007 	add.w	r0, sp, #7
 8000922:	f7ff ffbc 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x84);
 8000926:	2084      	movs	r0, #132	@ 0x84
 8000928:	f7ff ffa4 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800092c:	2340      	movs	r3, #64	@ 0x40
 800092e:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000932:	2101      	movs	r1, #1
 8000934:	f10d 0007 	add.w	r0, sp, #7
 8000938:	f7ff ffb1 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x85);
 800093c:	2085      	movs	r0, #133	@ 0x85
 800093e:	f7ff ff99 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000942:	f04f 08ff 	mov.w	r8, #255	@ 0xff
 8000946:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800094a:	2101      	movs	r1, #1
 800094c:	f10d 0007 	add.w	r0, sp, #7
 8000950:	f7ff ffa5 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x86);
 8000954:	2086      	movs	r0, #134	@ 0x86
 8000956:	f7ff ff8d 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800095a:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800095e:	2101      	movs	r1, #1
 8000960:	f10d 0007 	add.w	r0, sp, #7
 8000964:	f7ff ff9b 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x87);
 8000968:	2087      	movs	r0, #135	@ 0x87
 800096a:	f7ff ff83 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800096e:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000972:	2101      	movs	r1, #1
 8000974:	f10d 0007 	add.w	r0, sp, #7
 8000978:	f7ff ff91 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x88);
 800097c:	2088      	movs	r0, #136	@ 0x88
 800097e:	f7ff ff79 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000982:	230a      	movs	r3, #10
 8000984:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000988:	2101      	movs	r1, #1
 800098a:	f10d 0007 	add.w	r0, sp, #7
 800098e:	f7ff ff86 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x89);
 8000992:	2089      	movs	r0, #137	@ 0x89
 8000994:	f7ff ff6e 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000998:	2621      	movs	r6, #33	@ 0x21
 800099a:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800099e:	2101      	movs	r1, #1
 80009a0:	f10d 0007 	add.w	r0, sp, #7
 80009a4:	f7ff ff7b 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x8A);
 80009a8:	208a      	movs	r0, #138	@ 0x8a
 80009aa:	f7ff ff63 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80009ae:	2500      	movs	r5, #0
 80009b0:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80009b4:	2101      	movs	r1, #1
 80009b6:	f10d 0007 	add.w	r0, sp, #7
 80009ba:	f7ff ff70 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x8B);
 80009be:	208b      	movs	r0, #139	@ 0x8b
 80009c0:	f7ff ff58 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 80009c4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80009c8:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80009cc:	2101      	movs	r1, #1
 80009ce:	f10d 0007 	add.w	r0, sp, #7
 80009d2:	f7ff ff64 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x8C);
 80009d6:	208c      	movs	r0, #140	@ 0x8c
 80009d8:	f7ff ff4c 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 80009dc:	2401      	movs	r4, #1
 80009de:	f88d 4007 	strb.w	r4, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80009e2:	4621      	mov	r1, r4
 80009e4:	f10d 0007 	add.w	r0, sp, #7
 80009e8:	f7ff ff59 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x8D);
 80009ec:	208d      	movs	r0, #141	@ 0x8d
 80009ee:	f7ff ff41 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 80009f2:	f88d 4007 	strb.w	r4, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80009f6:	4621      	mov	r1, r4
 80009f8:	f10d 0007 	add.w	r0, sp, #7
 80009fc:	f7ff ff4f 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x8E);
 8000a00:	208e      	movs	r0, #142	@ 0x8e
 8000a02:	f7ff ff37 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000a06:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a0a:	4621      	mov	r1, r4
 8000a0c:	f10d 0007 	add.w	r0, sp, #7
 8000a10:	f7ff ff45 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x8F);
 8000a14:	208f      	movs	r0, #143	@ 0x8f
 8000a16:	f7ff ff2d 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 8000a1a:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a1e:	4621      	mov	r1, r4
 8000a20:	f10d 0007 	add.w	r0, sp, #7
 8000a24:	f7ff ff3b 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xB6);
 8000a28:	20b6      	movs	r0, #182	@ 0xb6
 8000a2a:	f7ff ff23 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000a2e:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a32:	4621      	mov	r1, r4
 8000a34:	f10d 0007 	add.w	r0, sp, #7
 8000a38:	f7ff ff31 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 8000a3c:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a40:	4621      	mov	r1, r4
 8000a42:	f10d 0007 	add.w	r0, sp, #7
 8000a46:	f7ff ff2a 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x36);
 8000a4a:	2036      	movs	r0, #54	@ 0x36
 8000a4c:	f7ff ff12 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x48);
 8000a50:	2348      	movs	r3, #72	@ 0x48
 8000a52:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a56:	4621      	mov	r1, r4
 8000a58:	f10d 0007 	add.w	r0, sp, #7
 8000a5c:	f7ff ff1f 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(COLOR_MODE);
 8000a60:	203a      	movs	r0, #58	@ 0x3a
 8000a62:	f7ff ff07 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000a66:	2305      	movs	r3, #5
 8000a68:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a6c:	4621      	mov	r1, r4
 8000a6e:	f10d 0007 	add.w	r0, sp, #7
 8000a72:	f7ff ff14 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x90);
 8000a76:	2090      	movs	r0, #144	@ 0x90
 8000a78:	f7ff fefc 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 8000a7c:	2708      	movs	r7, #8
 8000a7e:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a82:	4621      	mov	r1, r4
 8000a84:	f10d 0007 	add.w	r0, sp, #7
 8000a88:	f7ff ff09 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000a8c:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a90:	4621      	mov	r1, r4
 8000a92:	f10d 0007 	add.w	r0, sp, #7
 8000a96:	f7ff ff02 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000a9a:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000a9e:	4621      	mov	r1, r4
 8000aa0:	f10d 0007 	add.w	r0, sp, #7
 8000aa4:	f7ff fefb 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000aa8:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000aac:	4621      	mov	r1, r4
 8000aae:	f10d 0007 	add.w	r0, sp, #7
 8000ab2:	f7ff fef4 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xBD);
 8000ab6:	20bd      	movs	r0, #189	@ 0xbd
 8000ab8:	f7ff fedc 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000abc:	2306      	movs	r3, #6
 8000abe:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ac2:	4621      	mov	r1, r4
 8000ac4:	f10d 0007 	add.w	r0, sp, #7
 8000ac8:	f7ff fee9 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xBC);
 8000acc:	20bc      	movs	r0, #188	@ 0xbc
 8000ace:	f7ff fed1 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 8000ad2:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ad6:	4621      	mov	r1, r4
 8000ad8:	f10d 0007 	add.w	r0, sp, #7
 8000adc:	f7ff fedf 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xFF);
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	f7ff fec7 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000ae6:	2360      	movs	r3, #96	@ 0x60
 8000ae8:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000aec:	4621      	mov	r1, r4
 8000aee:	f10d 0007 	add.w	r0, sp, #7
 8000af2:	f7ff fed4 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x01);
 8000af6:	f88d 4007 	strb.w	r4, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000afa:	4621      	mov	r1, r4
 8000afc:	f10d 0007 	add.w	r0, sp, #7
 8000b00:	f7ff fecd 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x04);
 8000b04:	f04f 0204 	mov.w	r2, #4
 8000b08:	f88d 2007 	strb.w	r2, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	f10d 0007 	add.w	r0, sp, #7
 8000b12:	f7ff fec4 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xC3);
 8000b16:	20c3      	movs	r0, #195	@ 0xc3
 8000b18:	f7ff feac 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000b1c:	f04f 0813 	mov.w	r8, #19
 8000b20:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000b24:	4621      	mov	r1, r4
 8000b26:	f10d 0007 	add.w	r0, sp, #7
 8000b2a:	f7ff feb8 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xC4);
 8000b2e:	20c4      	movs	r0, #196	@ 0xc4
 8000b30:	f7ff fea0 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 8000b34:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000b38:	4621      	mov	r1, r4
 8000b3a:	f10d 0007 	add.w	r0, sp, #7
 8000b3e:	f7ff feae 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xC9);
 8000b42:	20c9      	movs	r0, #201	@ 0xc9
 8000b44:	f7ff fe96 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000b48:	2322      	movs	r3, #34	@ 0x22
 8000b4a:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000b4e:	4621      	mov	r1, r4
 8000b50:	f10d 0007 	add.w	r0, sp, #7
 8000b54:	f7ff fea3 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xBE);
 8000b58:	20be      	movs	r0, #190	@ 0xbe
 8000b5a:	f7ff fe8b 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000b5e:	f04f 0011 	mov.w	r0, #17
 8000b62:	f88d 0007 	strb.w	r0, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000b66:	4621      	mov	r1, r4
 8000b68:	f10d 0c07 	add.w	ip, sp, #7
 8000b6c:	4660      	mov	r0, ip
 8000b6e:	f7ff fe96 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xE1);
 8000b72:	20e1      	movs	r0, #225	@ 0xe1
 8000b74:	f7ff fe7e 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000b78:	f04f 0810 	mov.w	r8, #16
 8000b7c:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000b80:	4621      	mov	r1, r4
 8000b82:	f10d 0c07 	add.w	ip, sp, #7
 8000b86:	4660      	mov	r0, ip
 8000b88:	f7ff fe89 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x0E);
 8000b8c:	f04f 0c0e 	mov.w	ip, #14
 8000b90:	f88d c007 	strb.w	ip, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000b94:	4621      	mov	r1, r4
 8000b96:	f10d 0e07 	add.w	lr, sp, #7
 8000b9a:	4670      	mov	r0, lr
 8000b9c:	f7ff fe7f 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xDF);
 8000ba0:	20df      	movs	r0, #223	@ 0xdf
 8000ba2:	f7ff fe67 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000ba6:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000baa:	4621      	mov	r1, r4
 8000bac:	f10d 0607 	add.w	r6, sp, #7
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f7ff fe74 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x0c);
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000bbc:	4621      	mov	r1, r4
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	f7ff fe6d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x02);
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000bca:	4621      	mov	r1, r4
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f7ff fe66 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xF0);
 8000bd2:	20f0      	movs	r0, #240	@ 0xf0
 8000bd4:	f7ff fe4e 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000bd8:	f04f 0945 	mov.w	r9, #69	@ 0x45
 8000bdc:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000be0:	4621      	mov	r1, r4
 8000be2:	4630      	mov	r0, r6
 8000be4:	f7ff fe5b 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x09);
 8000be8:	f04f 0b09 	mov.w	fp, #9
 8000bec:	f88d b007 	strb.w	fp, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	f7ff fe53 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000bf8:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f7ff fe4d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000c04:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c08:	4621      	mov	r1, r4
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	f7ff fe47 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x26);
 8000c10:	f04f 0626 	mov.w	r6, #38	@ 0x26
 8000c14:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f10d 0a07 	add.w	sl, sp, #7
 8000c1e:	4650      	mov	r0, sl
 8000c20:	f7ff fe3d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x2A);
 8000c24:	f04f 0a2a 	mov.w	sl, #42	@ 0x2a
 8000c28:	f88d a007 	strb.w	sl, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	f10d 0007 	add.w	r0, sp, #7
 8000c32:	f7ff fe34 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xF1);
 8000c36:	20f1      	movs	r0, #241	@ 0xf1
 8000c38:	f7ff fe1c 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000c3c:	f04f 0143 	mov.w	r1, #67	@ 0x43
 8000c40:	f88d 1007 	strb.w	r1, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c44:	4621      	mov	r1, r4
 8000c46:	f10d 0007 	add.w	r0, sp, #7
 8000c4a:	f7ff fe28 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000c4e:	2670      	movs	r6, #112	@ 0x70
 8000c50:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c54:	4621      	mov	r1, r4
 8000c56:	f10d 0007 	add.w	r0, sp, #7
 8000c5a:	f7ff fe20 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x72);
 8000c5e:	f04f 0972 	mov.w	r9, #114	@ 0x72
 8000c62:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c66:	4621      	mov	r1, r4
 8000c68:	f10d 0007 	add.w	r0, sp, #7
 8000c6c:	f7ff fe17 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x36);
 8000c70:	f04f 0236 	mov.w	r2, #54	@ 0x36
 8000c74:	f88d 2007 	strb.w	r2, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c78:	4621      	mov	r1, r4
 8000c7a:	f10d 0007 	add.w	r0, sp, #7
 8000c7e:	f7ff fe0e 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x37);
 8000c82:	f04f 0937 	mov.w	r9, #55	@ 0x37
 8000c86:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	f10d 0007 	add.w	r0, sp, #7
 8000c90:	f7ff fe05 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x6F);
 8000c94:	f04f 086f 	mov.w	r8, #111	@ 0x6f
 8000c98:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	f10d 0007 	add.w	r0, sp, #7
 8000ca2:	f7ff fdfc 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xF2);
 8000ca6:	20f2      	movs	r0, #242	@ 0xf2
 8000ca8:	f7ff fde4 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8000cac:	f04f 0345 	mov.w	r3, #69	@ 0x45
 8000cb0:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	f10d 0007 	add.w	r0, sp, #7
 8000cba:	f7ff fdf0 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x09);
 8000cbe:	f88d b007 	strb.w	fp, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	f10d 0007 	add.w	r0, sp, #7
 8000cc8:	f7ff fde9 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000ccc:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	f10d 0007 	add.w	r0, sp, #7
 8000cd6:	f7ff fde2 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000cda:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000cde:	4621      	mov	r1, r4
 8000ce0:	f10d 0007 	add.w	r0, sp, #7
 8000ce4:	f7ff fddb 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x26);
 8000ce8:	f04f 0e26 	mov.w	lr, #38	@ 0x26
 8000cec:	f88d e007 	strb.w	lr, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	f10d 0007 	add.w	r0, sp, #7
 8000cf6:	f7ff fdd2 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x2A);
 8000cfa:	f88d a007 	strb.w	sl, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000cfe:	4621      	mov	r1, r4
 8000d00:	f10d 0a07 	add.w	sl, sp, #7
 8000d04:	4650      	mov	r0, sl
 8000d06:	f7ff fdca 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xF3);
 8000d0a:	20f3      	movs	r0, #243	@ 0xf3
 8000d0c:	f7ff fdb2 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8000d10:	f04f 0e43 	mov.w	lr, #67	@ 0x43
 8000d14:	f88d e007 	strb.w	lr, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d18:	4621      	mov	r1, r4
 8000d1a:	4650      	mov	r0, sl
 8000d1c:	f7ff fdbf 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000d20:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d24:	4621      	mov	r1, r4
 8000d26:	4650      	mov	r0, sl
 8000d28:	f7ff fdb9 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x72);
 8000d2c:	f04f 0e72 	mov.w	lr, #114	@ 0x72
 8000d30:	f88d e007 	strb.w	lr, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d34:	4621      	mov	r1, r4
 8000d36:	4650      	mov	r0, sl
 8000d38:	f7ff fdb1 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x36);
 8000d3c:	f04f 0e36 	mov.w	lr, #54	@ 0x36
 8000d40:	f88d e007 	strb.w	lr, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d44:	4621      	mov	r1, r4
 8000d46:	4650      	mov	r0, sl
 8000d48:	f7ff fda9 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x37);
 8000d4c:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d50:	4621      	mov	r1, r4
 8000d52:	4650      	mov	r0, sl
 8000d54:	f7ff fda3 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x6F);
 8000d58:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d5c:	4621      	mov	r1, r4
 8000d5e:	4650      	mov	r0, sl
 8000d60:	f7ff fd9d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xED);
 8000d64:	20ed      	movs	r0, #237	@ 0xed
 8000d66:	f7ff fd85 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8000d6a:	231b      	movs	r3, #27
 8000d6c:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d70:	4621      	mov	r1, r4
 8000d72:	4650      	mov	r0, sl
 8000d74:	f7ff fd93 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x0B);
 8000d78:	230b      	movs	r3, #11
 8000d7a:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d7e:	4621      	mov	r1, r4
 8000d80:	4650      	mov	r0, sl
 8000d82:	f7ff fd8c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xAE);
 8000d86:	20ae      	movs	r0, #174	@ 0xae
 8000d88:	f7ff fd74 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8000d8c:	2377      	movs	r3, #119	@ 0x77
 8000d8e:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000d92:	4621      	mov	r1, r4
 8000d94:	4650      	mov	r0, sl
 8000d96:	f7ff fd82 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xCD);
 8000d9a:	20cd      	movs	r0, #205	@ 0xcd
 8000d9c:	f7ff fd6a 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 8000da0:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8000da4:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000da8:	4621      	mov	r1, r4
 8000daa:	4650      	mov	r0, sl
 8000dac:	f7ff fd77 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x70);
 8000db0:	4630      	mov	r0, r6
 8000db2:	f7ff fd5f 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 8000db6:	f04f 0807 	mov.w	r8, #7
 8000dba:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	4650      	mov	r0, sl
 8000dc2:	f7ff fd6c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x07);
 8000dc6:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000dca:	4621      	mov	r1, r4
 8000dcc:	4650      	mov	r0, sl
 8000dce:	f7ff fd66 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x04);
 8000dd2:	f04f 0104 	mov.w	r1, #4
 8000dd6:	f88d 1007 	strb.w	r1, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000dda:	4621      	mov	r1, r4
 8000ddc:	4650      	mov	r0, sl
 8000dde:	f7ff fd5e 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x0E);
 8000de2:	f04f 0c0e 	mov.w	ip, #14
 8000de6:	f88d c007 	strb.w	ip, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000dea:	4621      	mov	r1, r4
 8000dec:	4650      	mov	r0, sl
 8000dee:	f7ff fd56 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x0F);
 8000df2:	f04f 0a0f 	mov.w	sl, #15
 8000df6:	f88d a007 	strb.w	sl, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000dfa:	4621      	mov	r1, r4
 8000dfc:	eb0d 0c08 	add.w	ip, sp, r8
 8000e00:	4660      	mov	r0, ip
 8000e02:	f7ff fd4c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x09);
 8000e06:	f88d b007 	strb.w	fp, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	eb0d 0c08 	add.w	ip, sp, r8
 8000e10:	4660      	mov	r0, ip
 8000e12:	f7ff fd44 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x07);
 8000e16:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	eb0d 0c08 	add.w	ip, sp, r8
 8000e20:	4660      	mov	r0, ip
 8000e22:	f7ff fd3c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x08);
 8000e26:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	eb0d 0708 	add.w	r7, sp, r8
 8000e30:	4638      	mov	r0, r7
 8000e32:	f7ff fd34 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x03);
 8000e36:	2303      	movs	r3, #3
 8000e38:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f7ff fd2d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0xE8);
 8000e44:	20e8      	movs	r0, #232	@ 0xe8
 8000e46:	f7ff fd15 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 8000e4a:	2334      	movs	r3, #52	@ 0x34
 8000e4c:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e50:	4621      	mov	r1, r4
 8000e52:	4638      	mov	r0, r7
 8000e54:	f7ff fd23 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x62);
 8000e58:	2062      	movs	r0, #98	@ 0x62
 8000e5a:	f7ff fd0b 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000e5e:	f04f 0b18 	mov.w	fp, #24
 8000e62:	f88d b007 	strb.w	fp, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e66:	4621      	mov	r1, r4
 8000e68:	4638      	mov	r0, r7
 8000e6a:	f7ff fd18 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x0D);
 8000e6e:	230d      	movs	r3, #13
 8000e70:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e74:	4621      	mov	r1, r4
 8000e76:	4638      	mov	r0, r7
 8000e78:	f7ff fd11 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x71);
 8000e7c:	2771      	movs	r7, #113	@ 0x71
 8000e7e:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e82:	4621      	mov	r1, r4
 8000e84:	eb0d 0c08 	add.w	ip, sp, r8
 8000e88:	4660      	mov	r0, ip
 8000e8a:	f7ff fd08 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0xED);
 8000e8e:	23ed      	movs	r3, #237	@ 0xed
 8000e90:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000e94:	4621      	mov	r1, r4
 8000e96:	eb0d 0c08 	add.w	ip, sp, r8
 8000e9a:	4660      	mov	r0, ip
 8000e9c:	f7ff fcff 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000ea0:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	eb0d 0c08 	add.w	ip, sp, r8
 8000eaa:	4660      	mov	r0, ip
 8000eac:	f7ff fcf7 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000eb0:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	eb0d 0c08 	add.w	ip, sp, r8
 8000eba:	4660      	mov	r0, ip
 8000ebc:	f7ff fcef 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x18);
 8000ec0:	f88d b007 	strb.w	fp, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	eb0d 0c08 	add.w	ip, sp, r8
 8000eca:	4660      	mov	r0, ip
 8000ecc:	f7ff fce7 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x0F);
 8000ed0:	f88d a007 	strb.w	sl, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	eb0d 0c08 	add.w	ip, sp, r8
 8000eda:	4660      	mov	r0, ip
 8000edc:	f7ff fcdf 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x71);
 8000ee0:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	eb0d 0c08 	add.w	ip, sp, r8
 8000eea:	4660      	mov	r0, ip
 8000eec:	f7ff fcd7 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0xEF);
 8000ef0:	23ef      	movs	r3, #239	@ 0xef
 8000ef2:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	eb0d 0c08 	add.w	ip, sp, r8
 8000efc:	4660      	mov	r0, ip
 8000efe:	f7ff fcce 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000f02:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f06:	4621      	mov	r1, r4
 8000f08:	eb0d 0c08 	add.w	ip, sp, r8
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	f7ff fcc6 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000f12:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f16:	4621      	mov	r1, r4
 8000f18:	eb0d 0c08 	add.w	ip, sp, r8
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	f7ff fcbe 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x63);
 8000f22:	4648      	mov	r0, r9
 8000f24:	f7ff fca6 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000f28:	f88d b007 	strb.w	fp, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	eb0d 0c08 	add.w	ip, sp, r8
 8000f32:	4660      	mov	r0, ip
 8000f34:	f7ff fcb3 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x11);
 8000f38:	f04f 0011 	mov.w	r0, #17
 8000f3c:	f88d 0007 	strb.w	r0, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f40:	4621      	mov	r1, r4
 8000f42:	eb0d 0008 	add.w	r0, sp, r8
 8000f46:	f7ff fcaa 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x71);
 8000f4a:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f4e:	4621      	mov	r1, r4
 8000f50:	eb0d 0008 	add.w	r0, sp, r8
 8000f54:	f7ff fca3 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0xF1);
 8000f58:	f04f 09f1 	mov.w	r9, #241	@ 0xf1
 8000f5c:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f60:	4621      	mov	r1, r4
 8000f62:	eb0d 0008 	add.w	r0, sp, r8
 8000f66:	f7ff fc9a 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000f6a:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f6e:	4621      	mov	r1, r4
 8000f70:	eb0d 0008 	add.w	r0, sp, r8
 8000f74:	f7ff fc93 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000f78:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	eb0d 0008 	add.w	r0, sp, r8
 8000f82:	f7ff fc8c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x18);
 8000f86:	f88d b007 	strb.w	fp, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f8a:	4621      	mov	r1, r4
 8000f8c:	eb0d 0008 	add.w	r0, sp, r8
 8000f90:	f7ff fc85 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x13);
 8000f94:	f04f 0213 	mov.w	r2, #19
 8000f98:	f88d 2007 	strb.w	r2, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	eb0d 0008 	add.w	r0, sp, r8
 8000fa2:	f7ff fc7c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x71);
 8000fa6:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000faa:	4621      	mov	r1, r4
 8000fac:	eb0d 0008 	add.w	r0, sp, r8
 8000fb0:	f7ff fc75 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0xF3);
 8000fb4:	23f3      	movs	r3, #243	@ 0xf3
 8000fb6:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000fba:	4621      	mov	r1, r4
 8000fbc:	eb0d 0008 	add.w	r0, sp, r8
 8000fc0:	f7ff fc6d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000fc4:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000fc8:	4621      	mov	r1, r4
 8000fca:	eb0d 0008 	add.w	r0, sp, r8
 8000fce:	f7ff fc66 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x70);
 8000fd2:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	eb0d 0008 	add.w	r0, sp, r8
 8000fdc:	f7ff fc5f 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x64);
 8000fe0:	2064      	movs	r0, #100	@ 0x64
 8000fe2:	f7ff fc47 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8000fe6:	2328      	movs	r3, #40	@ 0x28
 8000fe8:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000fec:	4621      	mov	r1, r4
 8000fee:	eb0d 0008 	add.w	r0, sp, r8
 8000ff2:	f7ff fc54 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x29);
 8000ff6:	2329      	movs	r3, #41	@ 0x29
 8000ff8:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	eb0d 0008 	add.w	r0, sp, r8
 8001002:	f7ff fc4c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0xF1);
 8001006:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800100a:	4621      	mov	r1, r4
 800100c:	eb0d 0008 	add.w	r0, sp, r8
 8001010:	f7ff fc45 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x01);
 8001014:	f88d 4007 	strb.w	r4, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001018:	4621      	mov	r1, r4
 800101a:	eb0d 0008 	add.w	r0, sp, r8
 800101e:	f7ff fc3e 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0xF1);
 8001022:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001026:	4621      	mov	r1, r4
 8001028:	eb0d 0008 	add.w	r0, sp, r8
 800102c:	f7ff fc37 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 8001030:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001034:	4621      	mov	r1, r4
 8001036:	eb0d 0008 	add.w	r0, sp, r8
 800103a:	f7ff fc30 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x07);
 800103e:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001042:	4621      	mov	r1, r4
 8001044:	eb0d 0008 	add.w	r0, sp, r8
 8001048:	f7ff fc29 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x66);
 800104c:	2066      	movs	r0, #102	@ 0x66
 800104e:	f7ff fc11 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8001052:	263c      	movs	r6, #60	@ 0x3c
 8001054:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001058:	4621      	mov	r1, r4
 800105a:	eb0d 0008 	add.w	r0, sp, r8
 800105e:	f7ff fc1e 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 8001062:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001066:	4621      	mov	r1, r4
 8001068:	eb0d 0008 	add.w	r0, sp, r8
 800106c:	f7ff fc17 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0xCD);
 8001070:	23cd      	movs	r3, #205	@ 0xcd
 8001072:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001076:	4621      	mov	r1, r4
 8001078:	eb0d 0008 	add.w	r0, sp, r8
 800107c:	f7ff fc0f 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x67);
 8001080:	2767      	movs	r7, #103	@ 0x67
 8001082:	f88d 7007 	strb.w	r7, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001086:	4621      	mov	r1, r4
 8001088:	eb0d 0008 	add.w	r0, sp, r8
 800108c:	f7ff fc07 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x45);
 8001090:	f04f 0945 	mov.w	r9, #69	@ 0x45
 8001094:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001098:	4621      	mov	r1, r4
 800109a:	eb0d 0008 	add.w	r0, sp, r8
 800109e:	f7ff fbfe 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x45);
 80010a2:	f88d 9007 	strb.w	r9, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80010a6:	4621      	mov	r1, r4
 80010a8:	eb0d 0008 	add.w	r0, sp, r8
 80010ac:	f7ff fbf7 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x10);
 80010b0:	f04f 0810 	mov.w	r8, #16
 80010b4:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80010b8:	4621      	mov	r1, r4
 80010ba:	f10d 0007 	add.w	r0, sp, #7
 80010be:	f7ff fbee 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 80010c2:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80010c6:	4621      	mov	r1, r4
 80010c8:	f10d 0007 	add.w	r0, sp, #7
 80010cc:	f7ff fbe7 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 80010d0:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80010d4:	4621      	mov	r1, r4
 80010d6:	f10d 0007 	add.w	r0, sp, #7
 80010da:	f7ff fbe0 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 80010de:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80010e2:	4621      	mov	r1, r4
 80010e4:	f10d 0007 	add.w	r0, sp, #7
 80010e8:	f7ff fbd9 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x67);
 80010ec:	4638      	mov	r0, r7
 80010ee:	f7ff fbc1 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 80010f2:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80010f6:	4621      	mov	r1, r4
 80010f8:	f10d 0007 	add.w	r0, sp, #7
 80010fc:	f7ff fbcf 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x3C);
 8001100:	f88d 6007 	strb.w	r6, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001104:	4621      	mov	r1, r4
 8001106:	f10d 0007 	add.w	r0, sp, #7
 800110a:	f7ff fbc8 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 800110e:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001112:	4621      	mov	r1, r4
 8001114:	f10d 0007 	add.w	r0, sp, #7
 8001118:	f7ff fbc1 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 800111c:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001120:	4621      	mov	r1, r4
 8001122:	f10d 0007 	add.w	r0, sp, #7
 8001126:	f7ff fbba 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 800112a:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800112e:	4621      	mov	r1, r4
 8001130:	f10d 0007 	add.w	r0, sp, #7
 8001134:	f7ff fbb3 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x01);
 8001138:	f88d 4007 	strb.w	r4, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800113c:	4621      	mov	r1, r4
 800113e:	f10d 0007 	add.w	r0, sp, #7
 8001142:	f7ff fbac 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x54);
 8001146:	2354      	movs	r3, #84	@ 0x54
 8001148:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800114c:	4621      	mov	r1, r4
 800114e:	f10d 0007 	add.w	r0, sp, #7
 8001152:	f7ff fba4 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x10);
 8001156:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800115a:	4621      	mov	r1, r4
 800115c:	f10d 0007 	add.w	r0, sp, #7
 8001160:	f7ff fb9d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x32);
 8001164:	2332      	movs	r3, #50	@ 0x32
 8001166:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800116a:	4621      	mov	r1, r4
 800116c:	f10d 0007 	add.w	r0, sp, #7
 8001170:	f7ff fb95 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x98);
 8001174:	2398      	movs	r3, #152	@ 0x98
 8001176:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800117a:	4621      	mov	r1, r4
 800117c:	f10d 0007 	add.w	r0, sp, #7
 8001180:	f7ff fb8d 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x74);
 8001184:	2074      	movs	r0, #116	@ 0x74
 8001186:	f7ff fb75 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800118a:	f88d 8007 	strb.w	r8, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800118e:	4621      	mov	r1, r4
 8001190:	f10d 0007 	add.w	r0, sp, #7
 8001194:	f7ff fb83 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x85);
 8001198:	2385      	movs	r3, #133	@ 0x85
 800119a:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 800119e:	4621      	mov	r1, r4
 80011a0:	f10d 0007 	add.w	r0, sp, #7
 80011a4:	f7ff fb7b 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x80);
 80011a8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80011ac:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80011b0:	4621      	mov	r1, r4
 80011b2:	f10d 0007 	add.w	r0, sp, #7
 80011b6:	f7ff fb72 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 80011ba:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80011be:	4621      	mov	r1, r4
 80011c0:	f10d 0007 	add.w	r0, sp, #7
 80011c4:	f7ff fb6b 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 80011c8:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80011cc:	2101      	movs	r1, #1
 80011ce:	f10d 0007 	add.w	r0, sp, #7
 80011d2:	f7ff fb64 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x4E);
 80011d6:	234e      	movs	r3, #78	@ 0x4e
 80011d8:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80011dc:	2101      	movs	r1, #1
 80011de:	f10d 0007 	add.w	r0, sp, #7
 80011e2:	f7ff fb5c 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x00);
 80011e6:	f88d 5007 	strb.w	r5, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 80011ea:	2101      	movs	r1, #1
 80011ec:	f10d 0007 	add.w	r0, sp, #7
 80011f0:	f7ff fb55 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x98);
 80011f4:	2098      	movs	r0, #152	@ 0x98
 80011f6:	f7ff fb3d 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80011fa:	233e      	movs	r3, #62	@ 0x3e
 80011fc:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001200:	2101      	movs	r1, #1
 8001202:	f10d 0007 	add.w	r0, sp, #7
 8001206:	f7ff fb4a 	bl	800089e <GC9A01_write_data>
    GC9A01_write_byte(0x07);
 800120a:	2307      	movs	r3, #7
 800120c:	f88d 3007 	strb.w	r3, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001210:	2101      	movs	r1, #1
 8001212:	eb0d 0003 	add.w	r0, sp, r3
 8001216:	f7ff fb42 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(0x35);
 800121a:	2035      	movs	r0, #53	@ 0x35
 800121c:	f7ff fb2a 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8001220:	2021      	movs	r0, #33	@ 0x21
 8001222:	f7ff fb27 	bl	8000874 <GC9A01_write_command>
    GC9A01_write_command(0x11);
 8001226:	2011      	movs	r0, #17
 8001228:	f7ff fb24 	bl	8000874 <GC9A01_write_command>
    HAL_Delay(120);
 800122c:	2078      	movs	r0, #120	@ 0x78
 800122e:	f000 feb5 	bl	8001f9c <HAL_Delay>
    GC9A01_write_command(0x29);
 8001232:	2029      	movs	r0, #41	@ 0x29
 8001234:	f7ff fb1e 	bl	8000874 <GC9A01_write_command>
    HAL_Delay(20);
 8001238:	2014      	movs	r0, #20
 800123a:	f000 feaf 	bl	8001f9c <HAL_Delay>
}
 800123e:	b003      	add	sp, #12
 8001240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001244 <GC9A01_set_frame>:
void GC9A01_set_frame(struct GC9A01_frame frame) {
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b085      	sub	sp, #20
 8001248:	466b      	mov	r3, sp
 800124a:	e883 0003 	stmia.w	r3, {r0, r1}
 800124e:	f8bd 7000 	ldrh.w	r7, [sp]
 8001252:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8001256:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800125a:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    GC9A01_write_command(COL_ADDR_SET);
 800125e:	202a      	movs	r0, #42	@ 0x2a
 8001260:	f7ff fb08 	bl	8000874 <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 8001264:	0a3b      	lsrs	r3, r7, #8
 8001266:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = frame.start.X & 0xFF;
 800126a:	f88d 700d 	strb.w	r7, [sp, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 800126e:	0a33      	lsrs	r3, r6, #8
 8001270:	f88d 300e 	strb.w	r3, [sp, #14]
    data[3] = frame.end.X & 0xFF;
 8001274:	f88d 600f 	strb.w	r6, [sp, #15]
    GC9A01_write_data(data, sizeof(data));
 8001278:	2104      	movs	r1, #4
 800127a:	a803      	add	r0, sp, #12
 800127c:	f7ff fb0f 	bl	800089e <GC9A01_write_data>
    GC9A01_write_command(ROW_ADDR_SET);
 8001280:	202b      	movs	r0, #43	@ 0x2b
 8001282:	f7ff faf7 	bl	8000874 <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8001286:	0a2b      	lsrs	r3, r5, #8
 8001288:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = frame.start.Y & 0xFF;
 800128c:	f88d 500d 	strb.w	r5, [sp, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 8001290:	0a23      	lsrs	r3, r4, #8
 8001292:	f88d 300e 	strb.w	r3, [sp, #14]
    data[3] = frame.end.Y & 0xFF;
 8001296:	f88d 400f 	strb.w	r4, [sp, #15]
    GC9A01_write_data(data, sizeof(data));
 800129a:	2104      	movs	r1, #4
 800129c:	a803      	add	r0, sp, #12
 800129e:	f7ff fafe 	bl	800089e <GC9A01_write_data>
}
 80012a2:	b005      	add	sp, #20
 80012a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080012a8 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 80012a8:	b530      	push	{r4, r5, lr}
 80012aa:	b083      	sub	sp, #12
  JPEGSourceAddress =  FrameSourceAddress ;
 80012ac:	4c0b      	ldr	r4, [pc, #44]	@ (80012dc <JPEG_Decode_DMA+0x34>)
 80012ae:	6021      	str	r1, [r4, #0]
  FrameBufferAddress = DestAddress;
 80012b0:	4c0b      	ldr	r4, [pc, #44]	@ (80012e0 <JPEG_Decode_DMA+0x38>)
 80012b2:	6023      	str	r3, [r4, #0]
  Input_frameIndex=0;
 80012b4:	2400      	movs	r4, #0
 80012b6:	4d0b      	ldr	r5, [pc, #44]	@ (80012e4 <JPEG_Decode_DMA+0x3c>)
 80012b8:	602c      	str	r4, [r5, #0]
  Input_frameSize = FrameSize;
 80012ba:	4d0b      	ldr	r5, [pc, #44]	@ (80012e8 <JPEG_Decode_DMA+0x40>)
 80012bc:	602a      	str	r2, [r5, #0]

  Jpeg_HWDecodingEnd = 0;
 80012be:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <JPEG_Decode_DMA+0x44>)
 80012c0:	6014      	str	r4, [r2, #0]
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 80012c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	f001 fd80 	bl	8002dcc <HAL_JPEG_Decode_DMA>
	  return -1;
  
  
  return 1;
 80012cc:	42a0      	cmp	r0, r4
  
}
 80012ce:	bf14      	ite	ne
 80012d0:	f04f 30ff 	movne.w	r0, #4294967295
 80012d4:	2001      	moveq	r0, #1
 80012d6:	b003      	add	sp, #12
 80012d8:	bd30      	pop	{r4, r5, pc}
 80012da:	bf00      	nop
 80012dc:	24000090 	.word	0x24000090
 80012e0:	24000094 	.word	0x24000094
 80012e4:	24000088 	.word	0x24000088
 80012e8:	2400008c 	.word	0x2400008c
 80012ec:	24000098 	.word	0x24000098

080012f0 <HAL_JPEG_InfoReadyCallback>:
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
}
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80012f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 80012f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001328 <HAL_JPEG_GetDataCallback+0x34>)
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	440b      	add	r3, r1
 80012fc:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 80012fe:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_JPEG_GetDataCallback+0x38>)
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	4293      	cmp	r3, r2
 8001304:	d20e      	bcs.n	8001324 <HAL_JPEG_GetDataCallback+0x30>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 8001306:	4c0a      	ldr	r4, [pc, #40]	@ (8001330 <HAL_JPEG_GetDataCallback+0x3c>)
 8001308:	6825      	ldr	r5, [r4, #0]
 800130a:	4429      	add	r1, r5
 800130c:	6021      	str	r1, [r4, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8001314:	bf28      	it	cs
 8001316:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
  }
  else
  {
    inDataLength = 0; 
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800131a:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_JPEG_GetDataCallback+0x3c>)
 800131c:	6819      	ldr	r1, [r3, #0]
 800131e:	f001 fdc8 	bl	8002eb2 <HAL_JPEG_ConfigInputBuffer>
  
}
 8001322:	bd38      	pop	{r3, r4, r5, pc}
    inDataLength = 0; 
 8001324:	2200      	movs	r2, #0
 8001326:	e7f8      	b.n	800131a <HAL_JPEG_GetDataCallback+0x26>
 8001328:	24000088 	.word	0x24000088
 800132c:	2400008c 	.word	0x2400008c
 8001330:	24000090 	.word	0x24000090

08001334 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8001334:	b508      	push	{r3, lr}
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <HAL_JPEG_DataReadyCallback+0x14>)
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	4411      	add	r1, r2
 800133c:	6019      	str	r1, [r3, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800133e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001342:	f001 fdb9 	bl	8002eb8 <HAL_JPEG_ConfigOutputBuffer>
}
 8001346:	bd08      	pop	{r3, pc}
 8001348:	24000094 	.word	0x24000094

0800134c <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800134c:	b508      	push	{r3, lr}
  Error_Handler();
 800134e:	f000 f96f 	bl	8001630 <Error_Handler>
}
 8001352:	bd08      	pop	{r3, pc}

08001354 <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
  Jpeg_HWDecodingEnd = 1; 
 8001354:	4b01      	ldr	r3, [pc, #4]	@ (800135c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	4770      	bx	lr
 800135c:	24000098 	.word	0x24000098

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b500      	push	{lr}
 8001362:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001364:	224c      	movs	r2, #76	@ 0x4c
 8001366:	2100      	movs	r1, #0
 8001368:	a809      	add	r0, sp, #36	@ 0x24
 800136a:	f007 ffc5 	bl	80092f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136e:	2220      	movs	r2, #32
 8001370:	2100      	movs	r1, #0
 8001372:	a801      	add	r0, sp, #4
 8001374:	f007 ffc0 	bl	80092f8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001378:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <SystemClock_Config+0xb0>)
 800137a:	f04f 32ff 	mov.w	r2, #4294967295
 800137e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001382:	2002      	movs	r0, #2
 8001384:	f002 fb16 	bl	80039b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001388:	2300      	movs	r3, #0
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <SystemClock_Config+0xb4>)
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <SystemClock_Config+0xb4>)
 80013a2:	6993      	ldr	r3, [r2, #24]
 80013a4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80013a8:	d0fb      	beq.n	80013a2 <SystemClock_Config+0x42>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013aa:	2302      	movs	r3, #2
 80013ac:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013ae:	2201      	movs	r2, #1
 80013b0:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80013b2:	2240      	movs	r2, #64	@ 0x40
 80013b4:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b8:	2200      	movs	r2, #0
 80013ba:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013bc:	2104      	movs	r1, #4
 80013be:	9114      	str	r1, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80013c0:	2119      	movs	r1, #25
 80013c2:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013c4:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80013c6:	2108      	movs	r1, #8
 80013c8:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ca:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013cc:	230c      	movs	r3, #12
 80013ce:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013d0:	921a      	str	r2, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013d2:	921b      	str	r2, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	a809      	add	r0, sp, #36	@ 0x24
 80013d6:	f002 fb15 	bl	8003a04 <HAL_RCC_OscConfig>
 80013da:	b9a8      	cbnz	r0, 8001408 <SystemClock_Config+0xa8>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	233f      	movs	r3, #63	@ 0x3f
 80013de:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2103      	movs	r1, #3
 80013e2:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013e8:	2308      	movs	r3, #8
 80013ea:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013ec:	2340      	movs	r3, #64	@ 0x40
 80013ee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013f0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f6:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013f8:	9308      	str	r3, [sp, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013fa:	a801      	add	r0, sp, #4
 80013fc:	f002 ff2e 	bl	800425c <HAL_RCC_ClockConfig>
 8001400:	b920      	cbnz	r0, 800140c <SystemClock_Config+0xac>
  {
    Error_Handler();
  }
}
 8001402:	b01d      	add	sp, #116	@ 0x74
 8001404:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140a:	e7fe      	b.n	800140a <SystemClock_Config+0xaa>
 800140c:	b672      	cpsid	i
 800140e:	e7fe      	b.n	800140e <SystemClock_Config+0xae>
 8001410:	58024400 	.word	0x58024400
 8001414:	58024800 	.word	0x58024800

08001418 <main>:
{
 8001418:	b500      	push	{lr}
 800141a:	b08b      	sub	sp, #44	@ 0x2c
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800141c:	4b78      	ldr	r3, [pc, #480]	@ (8001600 <main+0x1e8>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001424:	d113      	bne.n	800144e <main+0x36>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001426:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800142a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800142e:	4b74      	ldr	r3, [pc, #464]	@ (8001600 <main+0x1e8>)
 8001430:	2200      	movs	r2, #0
 8001432:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001436:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800143a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001444:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001446:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800144a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800144e:	f000 fd65 	bl	8001f1c <HAL_Init>
  HAL_Delay(500);
 8001452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001456:	f000 fda1 	bl	8001f9c <HAL_Delay>
  SystemClock_Config();
 800145a:	f7ff ff81 	bl	8001360 <SystemClock_Config>
  HAL_Delay(500);
 800145e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001462:	f000 fd9b 	bl	8001f9c <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	2400      	movs	r4, #0
 8001468:	9406      	str	r4, [sp, #24]
 800146a:	9407      	str	r4, [sp, #28]
 800146c:	9408      	str	r4, [sp, #32]
 800146e:	9409      	str	r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001470:	4b64      	ldr	r3, [pc, #400]	@ (8001604 <main+0x1ec>)
 8001472:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001476:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800147a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800147e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001482:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001496:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800149a:	f002 0201 	and.w	r2, r2, #1
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80014a6:	f042 0202 	orr.w	r2, r2, #2
 80014aa:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80014ae:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80014b2:	f002 0202 	and.w	r2, r2, #2
 80014b6:	9202      	str	r2, [sp, #8]
 80014b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80014be:	f042 0204 	orr.w	r2, r2, #4
 80014c2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80014c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80014ca:	f002 0204 	and.w	r2, r2, #4
 80014ce:	9203      	str	r2, [sp, #12]
 80014d0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80014d6:	f042 0208 	orr.w	r2, r2, #8
 80014da:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80014de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	9304      	str	r3, [sp, #16]
 80014e8:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ee:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	a905      	add	r1, sp, #20
 80014f2:	4845      	ldr	r0, [pc, #276]	@ (8001608 <main+0x1f0>)
 80014f4:	f000 ff8a 	bl	800240c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 80014f8:	4d44      	ldr	r5, [pc, #272]	@ (800160c <main+0x1f4>)
 80014fa:	4622      	mov	r2, r4
 80014fc:	2103      	movs	r1, #3
 80014fe:	4628      	mov	r0, r5
 8001500:	f001 f88c 	bl	800261c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f240 4104 	movw	r1, #1028	@ 0x404
 800150a:	4628      	mov	r0, r5
 800150c:	f001 f886 	bl	800261c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 8001510:	f240 4307 	movw	r3, #1031	@ 0x407
 8001514:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	a905      	add	r1, sp, #20
 8001520:	4628      	mov	r0, r5
 8001522:	f000 ff73 	bl	800240c <HAL_GPIO_Init>
  DMA2D_Handle.Instance = DMA2D;
 8001526:	483a      	ldr	r0, [pc, #232]	@ (8001610 <main+0x1f8>)
 8001528:	4b3a      	ldr	r3, [pc, #232]	@ (8001614 <main+0x1fc>)
 800152a:	6003      	str	r3, [r0, #0]
  DMA2D_Handle.Init.Mode = DMA2D_M2M;
 800152c:	6044      	str	r4, [r0, #4]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800152e:	6084      	str	r4, [r0, #8]
  DMA2D_Handle.Init.OutputOffset = 0;
 8001530:	60c4      	str	r4, [r0, #12]
  DMA2D_Handle.LayerCfg[1].InputOffset = 0;
 8001532:	6444      	str	r4, [r0, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001534:	6484      	str	r4, [r0, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001536:	64c4      	str	r4, [r0, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8001538:	6504      	str	r4, [r0, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800153a:	6544      	str	r4, [r0, #84]	@ 0x54
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800153c:	6584      	str	r4, [r0, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800153e:	65c4      	str	r4, [r0, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8001540:	f000 fdf4 	bl	800212c <HAL_DMA2D_Init>
 8001544:	2800      	cmp	r0, #0
 8001546:	d153      	bne.n	80015f0 <main+0x1d8>
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8001548:	2101      	movs	r1, #1
 800154a:	4831      	ldr	r0, [pc, #196]	@ (8001610 <main+0x1f8>)
 800154c:	f000 fee0 	bl	8002310 <HAL_DMA2D_ConfigLayer>
 8001550:	2800      	cmp	r0, #0
 8001552:	d14f      	bne.n	80015f4 <main+0x1dc>
  hsd1.Instance = SDMMC1;
 8001554:	4a30      	ldr	r2, [pc, #192]	@ (8001618 <main+0x200>)
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <main+0x204>)
 8001558:	6013      	str	r3, [r2, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800155a:	2300      	movs	r3, #0
 800155c:	6053      	str	r3, [r2, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800155e:	6093      	str	r3, [r2, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001560:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001564:	60d1      	str	r1, [r2, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8001566:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800156a:	6111      	str	r1, [r2, #16]
  hsd1.Init.ClockDiv = 0;
 800156c:	6153      	str	r3, [r2, #20]
  hspi1.Instance = SPI1;
 800156e:	482c      	ldr	r0, [pc, #176]	@ (8001620 <main+0x208>)
 8001570:	4a2c      	ldr	r2, [pc, #176]	@ (8001624 <main+0x20c>)
 8001572:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001574:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001578:	6042      	str	r2, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800157a:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800157e:	6082      	str	r2, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	2207      	movs	r2, #7
 8001582:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001584:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001586:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001588:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800158c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800158e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001590:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001592:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001594:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001596:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159c:	6342      	str	r2, [r0, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800159e:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015a0:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a2:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a4:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015a6:	6483      	str	r3, [r0, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015a8:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015aa:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015ac:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015ae:	6583      	str	r3, [r0, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b0:	f005 fb62 	bl	8006c78 <HAL_SPI_Init>
 80015b4:	bb00      	cbnz	r0, 80015f8 <main+0x1e0>
  HAL_Delay(500);
 80015b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015ba:	f000 fcef 	bl	8001f9c <HAL_Delay>
  JPEG_Handle.Instance = JPEG;
 80015be:	481a      	ldr	r0, [pc, #104]	@ (8001628 <main+0x210>)
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <main+0x214>)
 80015c2:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 80015c4:	f001 fa1a 	bl	80029fc <HAL_JPEG_Init>
 80015c8:	b9c0      	cbnz	r0, 80015fc <main+0x1e4>
  HAL_Delay(500);
 80015ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015ce:	f000 fce5 	bl	8001f9c <HAL_Delay>
  GC9A01_init();
 80015d2:	f7ff f975 	bl	80008c0 <GC9A01_init>
  HAL_Delay(500);
 80015d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015da:	f000 fcdf 	bl	8001f9c <HAL_Delay>
  smart_watch_init();
 80015de:	f000 f93f 	bl	8001860 <smart_watch_init>
  HAL_Delay(500);
 80015e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015e6:	f000 fcd9 	bl	8001f9c <HAL_Delay>
	  smart_watch_process();
 80015ea:	f000 f99f 	bl	800192c <smart_watch_process>
  while (1)
 80015ee:	e7fe      	b.n	80015ee <main+0x1d6>
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <main+0x1da>
 80015f4:	b672      	cpsid	i
 80015f6:	e7fe      	b.n	80015f6 <main+0x1de>
 80015f8:	b672      	cpsid	i
 80015fa:	e7fe      	b.n	80015fa <main+0x1e2>
 80015fc:	b672      	cpsid	i
 80015fe:	e7fe      	b.n	80015fe <main+0x1e6>
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	58024400 	.word	0x58024400
 8001608:	58020000 	.word	0x58020000
 800160c:	58020400 	.word	0x58020400
 8001610:	240000b0 	.word	0x240000b0
 8001614:	52001000 	.word	0x52001000
 8001618:	240001f8 	.word	0x240001f8
 800161c:	52007000 	.word	0x52007000
 8001620:	24000170 	.word	0x24000170
 8001624:	40013000 	.word	0x40013000
 8001628:	24000118 	.word	0x24000118
 800162c:	52003000 	.word	0x52003000

08001630 <Error_Handler>:
 8001630:	b672      	cpsid	i
 8001632:	e7fe      	b.n	8001632 <Error_Handler+0x2>

08001634 <depth24To16>:


////////////////////////////////////////////////////// PRIVATE FUNCTIONS

static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx, uint8_t swap)
{
 8001634:	b570      	push	{r4, r5, r6, lr}

	int i = 0;

	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 8001636:	b333      	cbz	r3, 8001686 <depth24To16+0x52>
    {

    	i = 0;
    	length /= 2;
 8001638:	0849      	lsrs	r1, r1, #1

    	i = ( length / 2 ) - 2000;

    }

	for( ; i < length ; i++)
 800163a:	f501 747a 	add.w	r4, r1, #1000	@ 0x3e8
    	i = 0;
 800163e:	f04f 0c00 	mov.w	ip, #0
 8001642:	fb0c fe02 	mul.w	lr, ip, r2

		b = pxArr->u8Arr[i*bpx];
		g = pxArr->u8Arr[i*bpx+1];
		r = pxArr->u8Arr[i*bpx+2];

		pxArr->u16Arr[i] = color565(r, g, b);
 8001646:	4d14      	ldr	r5, [pc, #80]	@ (8001698 <depth24To16+0x64>)
		b = pxArr->u8Arr[i*bpx];
 8001648:	6806      	ldr	r6, [r0, #0]
		r = pxArr->u8Arr[i*bpx+2];
 800164a:	eb06 010e 	add.w	r1, r6, lr
		pxArr->u16Arr[i] = color565(r, g, b);
 800164e:	788b      	ldrb	r3, [r1, #2]
 8001650:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 8001654:	7849      	ldrb	r1, [r1, #1]
 8001656:	00c9      	lsls	r1, r1, #3
 8001658:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 800165c:	430b      	orrs	r3, r1
 800165e:	f816 100e 	ldrb.w	r1, [r6, lr]
 8001662:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8001666:	f826 301c 	strh.w	r3, [r6, ip, lsl #1]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800166a:	6801      	ldr	r1, [r0, #0]
 800166c:	f831 601c 	ldrh.w	r6, [r1, ip, lsl #1]
 8001670:	0233      	lsls	r3, r6, #8
 8001672:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
 8001676:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
	for( ; i < length ; i++)
 800167a:	f10c 0c01 	add.w	ip, ip, #1
 800167e:	4496      	add	lr, r2
 8001680:	45a4      	cmp	ip, r4
 8001682:	d1e1      	bne.n	8001648 <depth24To16+0x14>

	}

}
 8001684:	bd70      	pop	{r4, r5, r6, pc}
    	i = ( length / 2 ) - 2000;
 8001686:	ea4f 0c51 	mov.w	ip, r1, lsr #1
 800168a:	f5ac 6cfa 	sub.w	ip, ip, #2000	@ 0x7d0
	for( ; i < length ; i++)
 800168e:	460c      	mov	r4, r1
 8001690:	458c      	cmp	ip, r1
 8001692:	dbd6      	blt.n	8001642 <depth24To16+0xe>
 8001694:	e7f6      	b.n	8001684 <depth24To16+0x50>
 8001696:	bf00      	nop
 8001698:	fffff800 	.word	0xfffff800

0800169c <file_handler>:

}


static void file_handler(uint8_t openFile)
{
 800169c:	b510      	push	{r4, lr}
 800169e:	b084      	sub	sp, #16
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 80016a0:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <file_handler+0xa8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b93b      	cbnz	r3, 80016b6 <file_handler+0x1a>
 80016a6:	b938      	cbnz	r0, 80016b8 <file_handler+0x1c>
  	 }

   }

   // Check for the end of the video
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <file_handler+0xac>)
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d22e      	bcs.n	8001710 <file_handler+0x74>

		 new_file_flag = 1;

   }

}
 80016b2:	b004      	add	sp, #16
 80016b4:	bd10      	pop	{r4, pc}
  	 if(openFile)
 80016b6:	b110      	cbz	r0, 80016be <file_handler+0x22>
  		 f_close(&MJPEG_File);
 80016b8:	4824      	ldr	r0, [pc, #144]	@ (800174c <file_handler+0xb0>)
 80016ba:	f007 fc5c 	bl	8008f76 <f_close>
  	 new_file_flag = 0;
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <file_handler+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 80016c4:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <file_handler+0xb4>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <file_handler+0xb8>)
 80016ca:	2104      	movs	r1, #4
 80016cc:	a803      	add	r0, sp, #12
 80016ce:	f007 fddf 	bl	8009290 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 80016d2:	4c21      	ldr	r4, [pc, #132]	@ (8001758 <file_handler+0xbc>)
 80016d4:	ab03      	add	r3, sp, #12
 80016d6:	4a21      	ldr	r2, [pc, #132]	@ (800175c <file_handler+0xc0>)
 80016d8:	210e      	movs	r1, #14
 80016da:	4620      	mov	r0, r4
 80016dc:	f007 fdd8 	bl	8009290 <sniprintf>
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 80016e0:	2201      	movs	r2, #1
 80016e2:	4621      	mov	r1, r4
 80016e4:	4819      	ldr	r0, [pc, #100]	@ (800174c <file_handler+0xb0>)
 80016e6:	f007 f9f5 	bl	8008ad4 <f_open>
 80016ea:	b100      	cbz	r0, 80016ee <file_handler+0x52>
  		 while(1);
 80016ec:	e7fe      	b.n	80016ec <file_handler+0x50>
  		 video.isfirstFrame = 1;
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <file_handler+0xb4>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	709a      	strb	r2, [r3, #2]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 80016f4:	2300      	movs	r3, #0
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <file_handler+0xc4>)
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001700:	4a18      	ldr	r2, [pc, #96]	@ (8001764 <file_handler+0xc8>)
 8001702:	4912      	ldr	r1, [pc, #72]	@ (800174c <file_handler+0xb0>)
 8001704:	4810      	ldr	r0, [pc, #64]	@ (8001748 <file_handler+0xac>)
 8001706:	f7fe ffc7 	bl	8000698 <AVI_ParserInit>
 800170a:	2800      	cmp	r0, #0
 800170c:	d0cc      	beq.n	80016a8 <file_handler+0xc>
  			 while(1);
 800170e:	e7fe      	b.n	800170e <file_handler+0x72>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001710:	490f      	ldr	r1, [pc, #60]	@ (8001750 <file_handler+0xb4>)
  	 video.file_idx++;
 8001712:	880b      	ldrh	r3, [r1, #0]
 8001714:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8001716:	b29a      	uxth	r2, r3
 8001718:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800171c:	4812      	ldr	r0, [pc, #72]	@ (8001768 <file_handler+0xcc>)
 800171e:	fba0 0303 	umull	r0, r3, r0, r3
 8001722:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 8001726:	fb00 2313 	mls	r3, r0, r3, r2
 800172a:	800b      	strh	r3, [r1, #0]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 800172c:	2132      	movs	r1, #50	@ 0x32
 800172e:	480f      	ldr	r0, [pc, #60]	@ (800176c <file_handler+0xd0>)
 8001730:	f000 fd5a 	bl	80021e8 <HAL_DMA2D_PollForTransfer>
		 f_close(&MJPEG_File);
 8001734:	4805      	ldr	r0, [pc, #20]	@ (800174c <file_handler+0xb0>)
 8001736:	f007 fc1e 	bl	8008f76 <f_close>
		 new_file_flag = 1;
 800173a:	4b02      	ldr	r3, [pc, #8]	@ (8001744 <file_handler+0xa8>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
}
 8001740:	e7b7      	b.n	80016b2 <file_handler+0x16>
 8001742:	bf00      	nop
 8001744:	24000000 	.word	0x24000000
 8001748:	2407d2a8 	.word	0x2407d2a8
 800174c:	2407d2f0 	.word	0x2407d2f0
 8001750:	2407d278 	.word	0x2407d278
 8001754:	08009c38 	.word	0x08009c38
 8001758:	24089f50 	.word	0x24089f50
 800175c:	08009c40 	.word	0x08009c40
 8001760:	2407d750 	.word	0x2407d750
 8001764:	2407d750 	.word	0x2407d750
 8001768:	05b05b06 	.word	0x05b05b06
 800176c:	240000b0 	.word	0x240000b0

08001770 <DMA2D_Init>:
	video.set = SET_IDLE;

}

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 8001770:	b570      	push	{r4, r5, r6, lr}
 8001772:	4605      	mov	r5, r0
 8001774:	4614      	mov	r4, r2

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 8001776:	4822      	ldr	r0, [pc, #136]	@ (8001800 <DMA2D_Init+0x90>)
 8001778:	f000 f96e 	bl	8001a58 <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800177c:	2c01      	cmp	r4, #1
 800177e:	d007      	beq.n	8001790 <DMA2D_Init+0x20>
      inputLineOffset = 16 - inputLineOffset;

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8001780:	b96c      	cbnz	r4, 800179e <DMA2D_Init+0x2e>
  {

    cssMode = DMA2D_NO_CSS;

    inputLineOffset = xsize % 8;
    if(inputLineOffset != 0)
 8001782:	f015 0207 	ands.w	r2, r5, #7
 8001786:	d037      	beq.n	80017f8 <DMA2D_Init+0x88>
    {

      inputLineOffset = 8 - inputLineOffset;
 8001788:	f1c2 0108 	rsb	r1, r2, #8
    cssMode = DMA2D_NO_CSS;
 800178c:	4622      	mov	r2, r4
 800178e:	e00a      	b.n	80017a6 <DMA2D_Init+0x36>
    if(inputLineOffset != 0)
 8001790:	f015 010f 	ands.w	r1, r5, #15
 8001794:	d02e      	beq.n	80017f4 <DMA2D_Init+0x84>
      inputLineOffset = 16 - inputLineOffset;
 8001796:	f1c1 0110 	rsb	r1, r1, #16
    cssMode = DMA2D_CSS_420;
 800179a:	2202      	movs	r2, #2
 800179c:	e003      	b.n	80017a6 <DMA2D_Init+0x36>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800179e:	2c02      	cmp	r4, #2
 80017a0:	d021      	beq.n	80017e6 <DMA2D_Init+0x76>
  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 80017a2:	2100      	movs	r1, #0
 80017a4:	2201      	movs	r2, #1
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 80017a6:	4c16      	ldr	r4, [pc, #88]	@ (8001800 <DMA2D_Init+0x90>)
 80017a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ac:	6063      	str	r3, [r4, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 80017ae:	2601      	movs	r6, #1
 80017b0:	60a6      	str	r6, [r4, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 80017b2:	f1c5 05f0 	rsb	r5, r5, #240	@ 0xf0
 80017b6:	60e5      	str	r5, [r4, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 80017b8:	2300      	movs	r3, #0
 80017ba:	6123      	str	r3, [r4, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 80017bc:	6163      	str	r3, [r4, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 80017be:	6223      	str	r3, [r4, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80017c0:	64e6      	str	r6, [r4, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 80017c2:	20ff      	movs	r0, #255	@ 0xff
 80017c4:	6520      	str	r0, [r4, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 80017c6:	200b      	movs	r0, #11
 80017c8:	64a0      	str	r0, [r4, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 80017ca:	65e2      	str	r2, [r4, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 80017cc:	6461      	str	r1, [r4, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 80017ce:	65a3      	str	r3, [r4, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 80017d0:	6563      	str	r3, [r4, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <DMA2D_Init+0x94>)
 80017d4:	6023      	str	r3, [r4, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 80017d6:	4620      	mov	r0, r4
 80017d8:	f000 fca8 	bl	800212c <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 80017dc:	4631      	mov	r1, r6
 80017de:	4620      	mov	r0, r4
 80017e0:	f000 fd96 	bl	8002310 <HAL_DMA2D_ConfigLayer>

}
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
    if(inputLineOffset != 0)
 80017e6:	f015 010f 	ands.w	r1, r5, #15
 80017ea:	d007      	beq.n	80017fc <DMA2D_Init+0x8c>
      inputLineOffset = 16 - inputLineOffset;
 80017ec:	f1c1 0110 	rsb	r1, r1, #16
    cssMode = DMA2D_CSS_422;
 80017f0:	2201      	movs	r2, #1
 80017f2:	e7d8      	b.n	80017a6 <DMA2D_Init+0x36>
    cssMode = DMA2D_CSS_420;
 80017f4:	2202      	movs	r2, #2
 80017f6:	e7d6      	b.n	80017a6 <DMA2D_Init+0x36>
    inputLineOffset = xsize % 8;
 80017f8:	4611      	mov	r1, r2
 80017fa:	e7d4      	b.n	80017a6 <DMA2D_Init+0x36>
    cssMode = DMA2D_CSS_422;
 80017fc:	2201      	movs	r2, #1
 80017fe:	e7d2      	b.n	80017a6 <DMA2D_Init+0x36>
 8001800:	240000b0 	.word	0x240000b0
 8001804:	52001000 	.word	0x52001000

08001808 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 8001808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	4604      	mov	r4, r0
 8001810:	4615      	mov	r5, r2
 8001812:	461e      	mov	r6, r3
  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <DMA2D_CopyBuffer+0x50>)
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	f1c2 0cf0 	rsb	ip, r2, #240	@ 0xf0
 800181c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8001820:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800182a:	085b      	lsrs	r3, r3, #1
  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800182c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8001830:	eb01 078c 	add.w	r7, r1, ip, lsl #2

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8001834:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 800185c <DMA2D_CopyBuffer+0x54>
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	4640      	mov	r0, r8
 800183e:	f000 fcd3 	bl	80021e8 <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8001842:	9600      	str	r6, [sp, #0]
 8001844:	462b      	mov	r3, r5
 8001846:	463a      	mov	r2, r7
 8001848:	4621      	mov	r1, r4
 800184a:	4640      	mov	r0, r8
 800184c:	f000 fcb0 	bl	80021b0 <HAL_DMA2D_Start>

}
 8001850:	b002      	add	sp, #8
 8001852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001856:	bf00      	nop
 8001858:	2400009c 	.word	0x2400009c
 800185c:	240000b0 	.word	0x240000b0

08001860 <smart_watch_init>:
{
 8001860:	b508      	push	{r3, lr}
	video.width = 0;
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <smart_watch_init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	809a      	strh	r2, [r3, #4]
	video.height = 0;
 8001868:	80da      	strh	r2, [r3, #6]
	video.xPos = 0;
 800186a:	811a      	strh	r2, [r3, #8]
	video.yPos = 0;
 800186c:	815a      	strh	r2, [r3, #10]
	video.file_idx = 0;
 800186e:	801a      	strh	r2, [r3, #0]
	video.FrameType = 0;
 8001870:	70da      	strb	r2, [r3, #3]
	video.frameToSkip = 0;
 8001872:	611a      	str	r2, [r3, #16]
	video.frame_time = 0;
 8001874:	829a      	strh	r2, [r3, #20]
	video.actual_time = 0;
 8001876:	619a      	str	r2, [r3, #24]
	video.tick_offset = 0;
 8001878:	61da      	str	r2, [r3, #28]
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800187a:	490e      	ldr	r1, [pc, #56]	@ (80018b4 <smart_watch_init+0x54>)
 800187c:	6219      	str	r1, [r3, #32]
	video.display_status = DISPLAY_ON;
 800187e:	2101      	movs	r1, #1
 8001880:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
	video.frameCount = 0;
 8001884:	60da      	str	r2, [r3, #12]
	video.set = SET_IDLE;
 8001886:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	video.video_mode = SETTING_MODE;
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800188e:	490a      	ldr	r1, [pc, #40]	@ (80018b8 <smart_watch_init+0x58>)
 8001890:	480a      	ldr	r0, [pc, #40]	@ (80018bc <smart_watch_init+0x5c>)
 8001892:	f007 fcf7 	bl	8009284 <FATFS_LinkDriver>
 8001896:	b100      	cbz	r0, 800189a <smart_watch_init+0x3a>
		while(1);
 8001898:	e7fe      	b.n	8001898 <smart_watch_init+0x38>


static void SD_Initialize(void)
{

  BSP_SD_Init();
 800189a:	f006 f855 	bl	8007948 <BSP_SD_Init>
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800189e:	2200      	movs	r2, #0
 80018a0:	4905      	ldr	r1, [pc, #20]	@ (80018b8 <smart_watch_init+0x58>)
 80018a2:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <smart_watch_init+0x60>)
 80018a4:	f007 f8e6 	bl	8008a74 <f_mount>
 80018a8:	b100      	cbz	r0, 80018ac <smart_watch_init+0x4c>
	    	while(1);
 80018aa:	e7fe      	b.n	80018aa <smart_watch_init+0x4a>
}
 80018ac:	bd08      	pop	{r3, pc}
 80018ae:	bf00      	nop
 80018b0:	2407d278 	.word	0x2407d278
 80018b4:	24032278 	.word	0x24032278
 80018b8:	2408a040 	.word	0x2408a040
 80018bc:	08009eb8 	.word	0x08009eb8
 80018c0:	2407d520 	.word	0x2407d520

080018c4 <lcd_draw>:
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	9e08      	ldr	r6, [sp, #32]
 80018ce:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
	   if(swap)
 80018d2:	bb43      	cbnz	r3, 8001926 <lcd_draw+0x62>
		   data += ( 240 * 240 );
 80018d4:	f506 4661 	add.w	r6, r6, #57600	@ 0xe100
 80018d8:	2278      	movs	r2, #120	@ 0x78
 80018da:	23ef      	movs	r3, #239	@ 0xef
	       frame.start.X = 0;
 80018dc:	2700      	movs	r7, #0
 80018de:	f8ad 7000 	strh.w	r7, [sp]
	       frame.start.Y = 0;
 80018e2:	f8ad 2002 	strh.w	r2, [sp, #2]
	       frame.end.X = 239;
 80018e6:	22ef      	movs	r2, #239	@ 0xef
 80018e8:	f8ad 2004 	strh.w	r2, [sp, #4]
	       frame.end.Y = 119;
 80018ec:	f8ad 3006 	strh.w	r3, [sp, #6]
	   GC9A01_set_frame(frame);
 80018f0:	ab02      	add	r3, sp, #8
 80018f2:	e913 0003 	ldmdb	r3, {r0, r1}
 80018f6:	f7ff fca5 	bl	8001244 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 80018fa:	202c      	movs	r0, #44	@ 0x2c
 80018fc:	f7fe ffba 	bl	8000874 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8001900:	2001      	movs	r0, #1
 8001902:	f7fe ff83 	bl	800080c <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8001906:	4638      	mov	r0, r7
 8001908:	f7fe ff90 	bl	800082c <GC9A01_set_chip_select>
	   uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 800190c:	fb05 f104 	mul.w	r1, r5, r4
	   ret = GC9A01_spi_tx(data, total_bytes);
 8001910:	b289      	uxth	r1, r1
 8001912:	4630      	mov	r0, r6
 8001914:	f7fe ff9a 	bl	800084c <GC9A01_spi_tx>
 8001918:	4604      	mov	r4, r0
	   GC9A01_set_chip_select(ON);
 800191a:	2001      	movs	r0, #1
 800191c:	f7fe ff86 	bl	800082c <GC9A01_set_chip_select>
}
 8001920:	4620      	mov	r0, r4
 8001922:	b003      	add	sp, #12
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001926:	2200      	movs	r2, #0
 8001928:	2377      	movs	r3, #119	@ 0x77
 800192a:	e7d7      	b.n	80018dc <lcd_draw+0x18>

0800192c <smart_watch_process>:
{
 800192c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001930:	b085      	sub	sp, #20
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8001932:	4e37      	ldr	r6, [pc, #220]	@ (8001a10 <smart_watch_process+0xe4>)
 8001934:	4d37      	ldr	r5, [pc, #220]	@ (8001a14 <smart_watch_process+0xe8>)
 8001936:	4c38      	ldr	r4, [pc, #224]	@ (8001a18 <smart_watch_process+0xec>)
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8001938:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8001a28 <smart_watch_process+0xfc>
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800193c:	4f37      	ldr	r7, [pc, #220]	@ (8001a1c <smart_watch_process+0xf0>)
 800193e:	e045      	b.n	80019cc <smart_watch_process+0xa0>
			video.isfirstFrame = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	70a3      	strb	r3, [r4, #2]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8001944:	4639      	mov	r1, r7
 8001946:	4836      	ldr	r0, [pc, #216]	@ (8001a20 <smart_watch_process+0xf4>)
 8001948:	f001 f9a4 	bl	8002c94 <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	8939      	ldrh	r1, [r7, #8]
 8001950:	89b8      	ldrh	r0, [r7, #12]
 8001952:	f7ff ff0d 	bl	8001770 <DMA2D_Init>
			video.width = JPEG_Info.ImageWidth;
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	80a2      	strh	r2, [r4, #4]
			video.height = JPEG_Info.ImageHeight;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	80e3      	strh	r3, [r4, #6]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800195e:	b292      	uxth	r2, r2
 8001960:	f1d2 02f0 	rsbs	r2, r2, #240	@ 0xf0
 8001964:	bf48      	it	mi
 8001966:	3201      	addmi	r2, #1
 8001968:	1052      	asrs	r2, r2, #1
 800196a:	8122      	strh	r2, [r4, #8]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800196c:	b29b      	uxth	r3, r3
 800196e:	f1d3 03f0 	rsbs	r3, r3, #240	@ 0xf0
 8001972:	bf48      	it	mi
 8001974:	3301      	addmi	r3, #1
 8001976:	105b      	asrs	r3, r3, #1
 8001978:	8163      	strh	r3, [r4, #10]
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)output_data, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800197a:	f8df a0b0 	ldr.w	sl, [pc, #176]	@ 8001a2c <smart_watch_process+0x100>
 800197e:	893b      	ldrh	r3, [r7, #8]
 8001980:	89ba      	ldrh	r2, [r7, #12]
 8001982:	4651      	mov	r1, sl
 8001984:	6a20      	ldr	r0, [r4, #32]
 8001986:	f7ff ff3f 	bl	8001808 <DMA2D_CopyBuffer>
		pOut.u8Arr = (uint8_t *)output_data;
 800198a:	f8cd a00c 	str.w	sl, [sp, #12]
		depth24To16(&pOut, ( video.width * video.height ), 3, swap);
 800198e:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8001a30 <smart_watch_process+0x104>
 8001992:	f899 b000 	ldrb.w	fp, [r9]
 8001996:	88a1      	ldrh	r1, [r4, #4]
 8001998:	88e3      	ldrh	r3, [r4, #6]
 800199a:	fb11 f103 	smulbb	r1, r1, r3
 800199e:	465b      	mov	r3, fp
 80019a0:	2203      	movs	r2, #3
 80019a2:	b289      	uxth	r1, r1
 80019a4:	a803      	add	r0, sp, #12
 80019a6:	f7ff fe45 	bl	8001634 <depth24To16>
		lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr, swap);
 80019aa:	f8cd b004 	str.w	fp, [sp, #4]
 80019ae:	f8cd a000 	str.w	sl, [sp]
 80019b2:	88e3      	ldrh	r3, [r4, #6]
 80019b4:	88a2      	ldrh	r2, [r4, #4]
 80019b6:	8961      	ldrh	r1, [r4, #10]
 80019b8:	8920      	ldrh	r0, [r4, #8]
 80019ba:	f7ff ff83 	bl	80018c4 <lcd_draw>
		swap = ( ( swap ) ? 0 : 1 );
 80019be:	f899 3000 	ldrb.w	r3, [r9]
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	f889 3000 	strb.w	r3, [r9]
		file_handler(0);
 80019cc:	f04f 0900 	mov.w	r9, #0
 80019d0:	4648      	mov	r0, r9
 80019d2:	f7ff fe63 	bl	800169c <file_handler>
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 80019d6:	464a      	mov	r2, r9
 80019d8:	4631      	mov	r1, r6
 80019da:	4628      	mov	r0, r5
 80019dc:	f7fe fe84 	bl	80006e8 <AVI_GetFrame>
 80019e0:	b2c0      	uxtb	r0, r0
 80019e2:	70e0      	strb	r0, [r4, #3]
	if(video.FrameType == AVI_VIDEO_FRAME)
 80019e4:	2801      	cmp	r0, #1
 80019e6:	d1f3      	bne.n	80019d0 <smart_watch_process+0xa4>
		AVI_Handel.CurrentImage++;
 80019e8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	62eb      	str	r3, [r5, #44]	@ 0x2c
		video.frameCount++;
 80019ee:	68e3      	ldr	r3, [r4, #12]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60e3      	str	r3, [r4, #12]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 80019f4:	6a23      	ldr	r3, [r4, #32]
 80019f6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80019f8:	4641      	mov	r1, r8
 80019fa:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <smart_watch_process+0xf4>)
 80019fc:	f7ff fc54 	bl	80012a8 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 8001a00:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <smart_watch_process+0xf8>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0fc      	beq.n	8001a02 <smart_watch_process+0xd6>
		if(video.isfirstFrame == 1)
 8001a08:	78a3      	ldrb	r3, [r4, #2]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d1b5      	bne.n	800197a <smart_watch_process+0x4e>
 8001a0e:	e797      	b.n	8001940 <smart_watch_process+0x14>
 8001a10:	2407d2f0 	.word	0x2407d2f0
 8001a14:	2407d2a8 	.word	0x2407d2a8
 8001a18:	2407d278 	.word	0x2407d278
 8001a1c:	2400009c 	.word	0x2400009c
 8001a20:	24000118 	.word	0x24000118
 8001a24:	24000098 	.word	0x24000098
 8001a28:	2407d750 	.word	0x2407d750
 8001a2c:	24000278 	.word	0x24000278
 8001a30:	24000274 	.word	0x24000274

08001a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a34:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <HAL_MspInit+0x20>)
 8001a38:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8001a3c:	f042 0202 	orr.w	r2, r2, #2
 8001a40:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8001a44:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a50:	b002      	add	sp, #8
 8001a52:	4770      	bx	lr
 8001a54:	58024400 	.word	0x58024400

08001a58 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001a58:	6802      	ldr	r2, [r0, #0]
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_DMA2D_MspInit+0x2c>)
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d000      	beq.n	8001a62 <HAL_DMA2D_MspInit+0xa>
 8001a60:	4770      	bx	lr
{
 8001a62:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <HAL_DMA2D_MspInit+0x30>)
 8001a66:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001a6a:	f042 0210 	orr.w	r2, r2, #16
 8001a6e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8001a72:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a7e:	b002      	add	sp, #8
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	52001000 	.word	0x52001000
 8001a88:	58024400 	.word	0x58024400

08001a8c <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	4606      	mov	r6, r0
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_JPEG_MspInit+0xf0>)
 8001a96:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001a9a:	f042 0220 	orr.w	r2, r2, #32
 8001a9e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8001aa2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001aa6:	f002 0220 	and.w	r2, r2, #32
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	9a00      	ldr	r2, [sp, #0]

	  __HAL_RCC_MDMA_CLK_ENABLE();
 8001aae:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8001aba:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	9b01      	ldr	r3, [sp, #4]

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	2107      	movs	r1, #7
 8001aca:	2079      	movs	r0, #121	@ 0x79
 8001acc:	f000 fa8c 	bl	8001fe8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001ad0:	2079      	movs	r0, #121	@ 0x79
 8001ad2:	f000 fabd 	bl	8002050 <HAL_NVIC_EnableIRQ>

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8001ad6:	4c2a      	ldr	r4, [pc, #168]	@ (8001b80 <HAL_JPEG_MspInit+0xf4>)
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	60e3      	str	r3, [r4, #12]
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001adc:	2500      	movs	r5, #0
 8001ade:	6125      	str	r5, [r4, #16]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	6162      	str	r2, [r4, #20]
	  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 8001ae4:	61a5      	str	r5, [r4, #24]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 8001ae6:	61e5      	str	r5, [r4, #28]
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 8001ae8:	6223      	str	r3, [r4, #32]
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8001aea:	f04f 7a00 	mov.w	sl, #33554432	@ 0x2000000
 8001aee:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 8001af2:	f44f 49a0 	mov.w	r9, #20480	@ 0x5000
 8001af6:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8001afa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001afe:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 8001b00:	6365      	str	r5, [r4, #52]	@ 0x34
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 8001b02:	63a5      	str	r5, [r4, #56]	@ 0x38

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001b04:	2311      	movs	r3, #17
 8001b06:	6063      	str	r3, [r4, #4]
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001b08:	60a5      	str	r5, [r4, #8]
	  hmdmaIn.Init.BufferTransferLength = 32;
 8001b0a:	2720      	movs	r7, #32
 8001b0c:	62a7      	str	r7, [r4, #40]	@ 0x28

	  hmdmaIn.Instance = MDMA_Channel1;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_JPEG_MspInit+0xf8>)
 8001b10:	6023      	str	r3, [r4, #0]

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 8001b12:	6334      	str	r4, [r6, #48]	@ 0x30
 8001b14:	6426      	str	r6, [r4, #64]	@ 0x40

	  HAL_MDMA_DeInit(&hmdmaIn);
 8001b16:	4620      	mov	r0, r4
 8001b18:	f001 fde3 	bl	80036e2 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f001 fd59 	bl	80035d4 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 8001b22:	4c19      	ldr	r4, [pc, #100]	@ (8001b88 <HAL_JPEG_MspInit+0xfc>)
 8001b24:	23c0      	movs	r3, #192	@ 0xc0
 8001b26:	60e3      	str	r3, [r4, #12]
	  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001b28:	6125      	str	r5, [r4, #16]
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 8001b2a:	6165      	str	r5, [r4, #20]
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 8001b2c:	f04f 0808 	mov.w	r8, #8
 8001b30:	f8c4 8018 	str.w	r8, [r4, #24]
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 8001b34:	61e7      	str	r7, [r4, #28]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 8001b36:	6225      	str	r5, [r4, #32]
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 8001b38:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 8001b3c:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 8001b40:	f44f 3320 	mov.w	r3, #163840	@ 0x28000
 8001b44:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 8001b46:	6365      	str	r5, [r4, #52]	@ 0x34
	  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 8001b48:	63a5      	str	r5, [r4, #56]	@ 0x38

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001b4a:	2313      	movs	r3, #19
 8001b4c:	6063      	str	r3, [r4, #4]
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 8001b4e:	60a5      	str	r5, [r4, #8]
	  hmdmaOut.Init.BufferTransferLength = 32;
 8001b50:	62a7      	str	r7, [r4, #40]	@ 0x28

	  hmdmaOut.Instance = MDMA_Channel0;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	@ (8001b8c <HAL_JPEG_MspInit+0x100>)
 8001b54:	6023      	str	r3, [r4, #0]

	  HAL_MDMA_DeInit(&hmdmaOut);
 8001b56:	4620      	mov	r0, r4
 8001b58:	f001 fdc3 	bl	80036e2 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f001 fd39 	bl	80035d4 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 8001b62:	6374      	str	r4, [r6, #52]	@ 0x34
 8001b64:	6426      	str	r6, [r4, #64]	@ 0x40


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 8001b66:	220f      	movs	r2, #15
 8001b68:	4641      	mov	r1, r8
 8001b6a:	207a      	movs	r0, #122	@ 0x7a
 8001b6c:	f000 fa3c 	bl	8001fe8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001b70:	207a      	movs	r0, #122	@ 0x7a
 8001b72:	f000 fa6d 	bl	8002050 <HAL_NVIC_EnableIRQ>
}
 8001b76:	b002      	add	sp, #8
 8001b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	24089fcc 	.word	0x24089fcc
 8001b84:	52000080 	.word	0x52000080
 8001b88:	24089f60 	.word	0x24089f60
 8001b8c:	52000040 	.word	0x52000040

08001b90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b94:	b0ba      	sub	sp, #232	@ 0xe8
 8001b96:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	2100      	movs	r1, #0
 8001b9a:	9135      	str	r1, [sp, #212]	@ 0xd4
 8001b9c:	9136      	str	r1, [sp, #216]	@ 0xd8
 8001b9e:	9137      	str	r1, [sp, #220]	@ 0xdc
 8001ba0:	9138      	str	r1, [sp, #224]	@ 0xe0
 8001ba2:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba4:	22c0      	movs	r2, #192	@ 0xc0
 8001ba6:	a804      	add	r0, sp, #16
 8001ba8:	f007 fba6 	bl	80092f8 <memset>
  if(hsd->Instance==SDMMC1)
 8001bac:	6822      	ldr	r2, [r4, #0]
 8001bae:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <HAL_SD_MspInit+0x10c>)
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d002      	beq.n	8001bba <HAL_SD_MspInit+0x2a>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001bb4:	b03a      	add	sp, #232	@ 0xe8
 8001bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001bba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc4:	a804      	add	r0, sp, #16
 8001bc6:	f002 fdd9 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d163      	bne.n	8001c96 <HAL_SD_MspInit+0x106>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001bce:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <HAL_SD_MspInit+0x110>)
 8001bd0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001bd4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001bd8:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8001bdc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001be0:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8001be4:	9200      	str	r2, [sp, #0]
 8001be6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001bec:	f042 0202 	orr.w	r2, r2, #2
 8001bf0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001bf4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001bf8:	f002 0202 	and.w	r2, r2, #2
 8001bfc:	9201      	str	r2, [sp, #4]
 8001bfe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001c04:	f042 0204 	orr.w	r2, r2, #4
 8001c08:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001c0c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001c10:	f002 0204 	and.w	r2, r2, #4
 8001c14:	9202      	str	r2, [sp, #8]
 8001c16:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c18:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001c1c:	f042 0208 	orr.w	r2, r2, #8
 8001c20:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001c24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	9303      	str	r3, [sp, #12]
 8001c2e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c34:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2602      	movs	r6, #2
 8001c38:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2701      	movs	r7, #1
 8001c3c:	9737      	str	r7, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2503      	movs	r5, #3
 8001c40:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c42:	240c      	movs	r4, #12
 8001c44:	9439      	str	r4, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	a935      	add	r1, sp, #212	@ 0xd4
 8001c48:	4816      	ldr	r0, [pc, #88]	@ (8001ca4 <HAL_SD_MspInit+0x114>)
 8001c4a:	f000 fbdf 	bl	800240c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c4e:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001c52:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c56:	9737      	str	r7, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c5a:	9439      	str	r4, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5c:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 8001cac <HAL_SD_MspInit+0x11c>
 8001c60:	a935      	add	r1, sp, #212	@ 0xd4
 8001c62:	4640      	mov	r0, r8
 8001c64:	f000 fbd2 	bl	800240c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6c:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	9337      	str	r3, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c76:	9439      	str	r4, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	a935      	add	r1, sp, #212	@ 0xd4
 8001c7a:	4640      	mov	r0, r8
 8001c7c:	f000 fbc6 	bl	800240c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c80:	2304      	movs	r3, #4
 8001c82:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	9636      	str	r6, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c86:	9737      	str	r7, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c8a:	9439      	str	r4, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8c:	a935      	add	r1, sp, #212	@ 0xd4
 8001c8e:	4806      	ldr	r0, [pc, #24]	@ (8001ca8 <HAL_SD_MspInit+0x118>)
 8001c90:	f000 fbbc 	bl	800240c <HAL_GPIO_Init>
}
 8001c94:	e78e      	b.n	8001bb4 <HAL_SD_MspInit+0x24>
      Error_Handler();
 8001c96:	f7ff fccb 	bl	8001630 <Error_Handler>
 8001c9a:	e798      	b.n	8001bce <HAL_SD_MspInit+0x3e>
 8001c9c:	52007000 	.word	0x52007000
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	58020400 	.word	0x58020400
 8001ca8:	58020c00 	.word	0x58020c00
 8001cac:	58020800 	.word	0x58020800

08001cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	b0b8      	sub	sp, #224	@ 0xe0
 8001cb4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	9133      	str	r1, [sp, #204]	@ 0xcc
 8001cba:	9134      	str	r1, [sp, #208]	@ 0xd0
 8001cbc:	9135      	str	r1, [sp, #212]	@ 0xd4
 8001cbe:	9136      	str	r1, [sp, #216]	@ 0xd8
 8001cc0:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc2:	22c0      	movs	r2, #192	@ 0xc0
 8001cc4:	a802      	add	r0, sp, #8
 8001cc6:	f007 fb17 	bl	80092f8 <memset>
  if(hspi->Instance==SPI1)
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_SPI_MspInit+0x8c>)
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d001      	beq.n	8001cd6 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cd2:	b038      	add	sp, #224	@ 0xe0
 8001cd4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001cd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce0:	a802      	add	r0, sp, #8
 8001ce2:	f002 fd4b 	bl	800477c <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	bb30      	cbnz	r0, 8001d36 <HAL_SPI_MspInit+0x86>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <HAL_SPI_MspInit+0x90>)
 8001cea:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8001cee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cf2:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 8001cf6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8001cfa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8001d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d1a:	23a0      	movs	r3, #160	@ 0xa0
 8001d1c:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d28:	2305      	movs	r3, #5
 8001d2a:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	a933      	add	r1, sp, #204	@ 0xcc
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <HAL_SPI_MspInit+0x94>)
 8001d30:	f000 fb6c 	bl	800240c <HAL_GPIO_Init>
}
 8001d34:	e7cd      	b.n	8001cd2 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8001d36:	f7ff fc7b 	bl	8001630 <Error_Handler>
 8001d3a:	e7d5      	b.n	8001ce8 <HAL_SPI_MspInit+0x38>
 8001d3c:	40013000 	.word	0x40013000
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58020000 	.word	0x58020000

08001d48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d48:	e7fe      	b.n	8001d48 <NMI_Handler>

08001d4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <HardFault_Handler>

08001d4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler>

08001d4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler>

08001d50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler>

08001d52 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	4770      	bx	lr

08001d56 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5a:	f000 f90d 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5e:	bd08      	pop	{r3, pc}

08001d60 <JPEG_IRQHandler>:
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
 8001d60:	b508      	push	{r3, lr}
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8001d62:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <JPEG_IRQHandler+0xc>)
 8001d64:	f001 fba1 	bl	80034aa <HAL_JPEG_IRQHandler>
}
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	24000118 	.word	0x24000118

08001d70 <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 8001d70:	b510      	push	{r4, lr}
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8001d72:	4c04      	ldr	r4, [pc, #16]	@ (8001d84 <MDMA_IRQHandler+0x14>)
 8001d74:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001d76:	f001 fd4b 	bl	8003810 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8001d7a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001d7c:	f001 fd48 	bl	8003810 <HAL_MDMA_IRQHandler>
}
 8001d80:	bd10      	pop	{r4, pc}
 8001d82:	bf00      	nop
 8001d84:	24000118 	.word	0x24000118

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b508      	push	{r3, lr}
 8001d8a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <_sbrk+0x38>)
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	b152      	cbz	r2, 8001da8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <_sbrk+0x38>)
 8001d94:	6810      	ldr	r0, [r2, #0]
 8001d96:	4403      	add	r3, r0
 8001d98:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <_sbrk+0x3c>)
 8001d9a:	490b      	ldr	r1, [pc, #44]	@ (8001dc8 <_sbrk+0x40>)
 8001d9c:	1a52      	subs	r2, r2, r1
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d806      	bhi.n	8001db0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001da2:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <_sbrk+0x38>)
 8001da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001da6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001da8:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <_sbrk+0x38>)
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <_sbrk+0x44>)
 8001dac:	6011      	str	r1, [r2, #0]
 8001dae:	e7f0      	b.n	8001d92 <_sbrk+0xa>
    errno = ENOMEM;
 8001db0:	f007 faaa 	bl	8009308 <__errno>
 8001db4:	230c      	movs	r3, #12
 8001db6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	e7f3      	b.n	8001da6 <_sbrk+0x1e>
 8001dbe:	bf00      	nop
 8001dc0:	2408a038 	.word	0x2408a038
 8001dc4:	24100000 	.word	0x24100000
 8001dc8:	00000800 	.word	0x00000800
 8001dcc:	2408a1c0 	.word	0x2408a1c0

08001dd0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dd0:	4a22      	ldr	r2, [pc, #136]	@ (8001e5c <SystemInit+0x8c>)
 8001dd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001dd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dde:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <SystemInit+0x90>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d806      	bhi.n	8001df8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dea:	4a1d      	ldr	r2, [pc, #116]	@ (8001e60 <SystemInit+0x90>)
 8001dec:	6813      	ldr	r3, [r2, #0]
 8001dee:	f023 030f 	bic.w	r3, r3, #15
 8001df2:	f043 0303 	orr.w	r3, r3, #3
 8001df6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <SystemInit+0x94>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	4a17      	ldr	r2, [pc, #92]	@ (8001e68 <SystemInit+0x98>)
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e0e:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <SystemInit+0x90>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f013 0f0c 	tst.w	r3, #12
 8001e16:	d006      	beq.n	8001e26 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e18:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <SystemInit+0x90>)
 8001e1a:	6813      	ldr	r3, [r2, #0]
 8001e1c:	f023 030f 	bic.w	r3, r3, #15
 8001e20:	f043 0303 	orr.w	r3, r3, #3
 8001e24:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <SystemInit+0x94>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001e2c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001e2e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e30:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <SystemInit+0x9c>)
 8001e32:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e34:	490e      	ldr	r1, [pc, #56]	@ (8001e70 <SystemInit+0xa0>)
 8001e36:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e38:	490e      	ldr	r1, [pc, #56]	@ (8001e74 <SystemInit+0xa4>)
 8001e3a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e3e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e40:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e42:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e46:	6819      	ldr	r1, [r3, #0]
 8001e48:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001e4c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <SystemInit+0xa8>)
 8001e52:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e56:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00
 8001e60:	52002000 	.word	0x52002000
 8001e64:	58024400 	.word	0x58024400
 8001e68:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e6c:	02020200 	.word	0x02020200
 8001e70:	01ff0000 	.word	0x01ff0000
 8001e74:	01010280 	.word	0x01010280
 8001e78:	52004000 	.word	0x52004000

08001e7c <Reset_Handler>:
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eb4 <LoopFillZerobss+0xe>
 8001e80:	f7ff ffa6 	bl	8001dd0 <SystemInit>
 8001e84:	480c      	ldr	r0, [pc, #48]	@ (8001eb8 <LoopFillZerobss+0x12>)
 8001e86:	490d      	ldr	r1, [pc, #52]	@ (8001ebc <LoopFillZerobss+0x16>)
 8001e88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <LoopFillZerobss+0x1a>)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:
 8001e8e:	58d4      	ldr	r4, [r2, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:
 8001e94:	18c4      	adds	r4, r0, r3
 8001e96:	428c      	cmp	r4, r1
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <LoopFillZerobss+0x1e>)
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ec8 <LoopFillZerobss+0x22>)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:
 8001ea6:	42a2      	cmp	r2, r4
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>
 8001eaa:	f007 fa33 	bl	8009314 <__libc_init_array>
 8001eae:	f7ff fab3 	bl	8001418 <main>
 8001eb2:	4770      	bx	lr
 8001eb4:	24100000 	.word	0x24100000
 8001eb8:	24000000 	.word	0x24000000
 8001ebc:	24000068 	.word	0x24000068
 8001ec0:	08009fa0 	.word	0x08009fa0
 8001ec4:	24000068 	.word	0x24000068
 8001ec8:	2408a1c0 	.word	0x2408a1c0

08001ecc <ADC_IRQHandler>:
 8001ecc:	e7fe      	b.n	8001ecc <ADC_IRQHandler>
	...

08001ed0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <HAL_InitTick+0x40>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b90b      	cbnz	r3, 8001eda <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001ed8:	4770      	bx	lr
{
 8001eda:	b510      	push	{r4, lr}
 8001edc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ede:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f14 <HAL_InitTick+0x44>)
 8001ee8:	6810      	ldr	r0, [r2, #0]
 8001eea:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eee:	f000 f8bd 	bl	800206c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef2:	2c0f      	cmp	r4, #15
 8001ef4:	d800      	bhi.n	8001ef8 <HAL_InitTick+0x28>
 8001ef6:	b108      	cbz	r0, 8001efc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
}
 8001efa:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efc:	2200      	movs	r2, #0
 8001efe:	4621      	mov	r1, r4
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f000 f870 	bl	8001fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <HAL_InitTick+0x48>)
 8001f0a:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e7f4      	b.n	8001efa <HAL_InitTick+0x2a>
 8001f10:	2400000c 	.word	0x2400000c
 8001f14:	24000008 	.word	0x24000008
 8001f18:	24000010 	.word	0x24000010

08001f1c <HAL_Init>:
{
 8001f1c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f000 f850 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f24:	f002 f8a0 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8001f28:	490f      	ldr	r1, [pc, #60]	@ (8001f68 <HAL_Init+0x4c>)
 8001f2a:	698b      	ldr	r3, [r1, #24]
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f6c <HAL_Init+0x50>)
 8001f2e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f3a:	698b      	ldr	r3, [r1, #24]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	fa20 f303 	lsr.w	r3, r0, r3
 8001f4a:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_Init+0x54>)
 8001f4c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <HAL_Init+0x58>)
 8001f50:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f52:	200f      	movs	r0, #15
 8001f54:	f7ff ffbc 	bl	8001ed0 <HAL_InitTick>
 8001f58:	b110      	cbz	r0, 8001f60 <HAL_Init+0x44>
    return HAL_ERROR;
 8001f5a:	2401      	movs	r4, #1
}
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	bd10      	pop	{r4, pc}
 8001f60:	4604      	mov	r4, r0
  HAL_MspInit();
 8001f62:	f7ff fd67 	bl	8001a34 <HAL_MspInit>
  return HAL_OK;
 8001f66:	e7f9      	b.n	8001f5c <HAL_Init+0x40>
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	08009c48 	.word	0x08009c48
 8001f70:	24000004 	.word	0x24000004
 8001f74:	24000008 	.word	0x24000008

08001f78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f78:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <HAL_IncTick+0x10>)
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_IncTick+0x14>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	440b      	add	r3, r1
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2408a03c 	.word	0x2408a03c
 8001f8c:	2400000c 	.word	0x2400000c

08001f90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f90:	4b01      	ldr	r3, [pc, #4]	@ (8001f98 <HAL_GetTick+0x8>)
 8001f92:	6818      	ldr	r0, [r3, #0]
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2408a03c 	.word	0x2408a03c

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff fff6 	bl	8001f90 <HAL_GetTick>
 8001fa4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001faa:	d002      	beq.n	8001fb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <HAL_Delay+0x24>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb2:	f7ff ffed 	bl	8001f90 <HAL_GetTick>
 8001fb6:	1b40      	subs	r0, r0, r5
 8001fb8:	42a0      	cmp	r0, r4
 8001fba:	d3fa      	bcc.n	8001fb2 <HAL_Delay+0x16>
  {
  }
}
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2400000c 	.word	0x2400000c

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4a06      	ldr	r2, [pc, #24]	@ (8001fe0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001fc6:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc8:	0200      	lsls	r0, r0, #8
 8001fca:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001fd8:	4b02      	ldr	r3, [pc, #8]	@ (8001fe4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fda:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001fdc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	05fa0000 	.word	0x05fa0000

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fea:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <HAL_NVIC_SetPriority+0x5c>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff2:	f1c3 0c07 	rsb	ip, r3, #7
 8001ff6:	f1bc 0f04 	cmp.w	ip, #4
 8001ffa:	bf28      	it	cs
 8001ffc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002000:	f103 0e04 	add.w	lr, r3, #4
 8002004:	f1be 0f06 	cmp.w	lr, #6
 8002008:	bf8c      	ite	hi
 800200a:	3b03      	subhi	r3, #3
 800200c:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200e:	f04f 3eff 	mov.w	lr, #4294967295
 8002012:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002016:	ea21 010c 	bic.w	r1, r1, ip
 800201a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	fa0e fe03 	lsl.w	lr, lr, r3
 8002020:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002026:	2800      	cmp	r0, #0
 8002028:	db05      	blt.n	8002036 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	0109      	lsls	r1, r1, #4
 800202c:	b2c9      	uxtb	r1, r1
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_NVIC_SetPriority+0x60>)
 8002030:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002032:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	f000 000f 	and.w	r0, r0, #15
 800203a:	0109      	lsls	r1, r1, #4
 800203c:	b2c9      	uxtb	r1, r1
 800203e:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_NVIC_SetPriority+0x64>)
 8002040:	5419      	strb	r1, [r3, r0]
 8002042:	e7f6      	b.n	8002032 <HAL_NVIC_SetPriority+0x4a>
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	e000e400 	.word	0xe000e400
 800204c:	e000ed14 	.word	0xe000ed14

08002050 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002050:	2800      	cmp	r0, #0
 8002052:	db07      	blt.n	8002064 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002054:	0941      	lsrs	r1, r0, #5
 8002056:	f000 001f 	and.w	r0, r0, #31
 800205a:	2301      	movs	r3, #1
 800205c:	4083      	lsls	r3, r0
 800205e:	4a02      	ldr	r2, [pc, #8]	@ (8002068 <HAL_NVIC_EnableIRQ+0x18>)
 8002060:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	3801      	subs	r0, #1
 800206e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002072:	d20b      	bcs.n	800208c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002074:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002078:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <HAL_SYSTICK_Config+0x24>)
 800207c:	21f0      	movs	r1, #240	@ 0xf0
 800207e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002082:	2000      	movs	r0, #0
 8002084:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	2207      	movs	r2, #7
 8002088:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800208c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002094:	b470      	push	{r4, r5, r6}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002096:	6805      	ldr	r5, [r0, #0]
 8002098:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
 800209a:	9e03      	ldr	r6, [sp, #12]
 800209c:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80020a0:	f004 4440 	and.w	r4, r4, #3221225472	@ 0xc0000000
 80020a4:	4323      	orrs	r3, r4
 80020a6:	646b      	str	r3, [r5, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80020a8:	6803      	ldr	r3, [r0, #0]
 80020aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020ac:	6843      	ldr	r3, [r0, #4]
 80020ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80020b2:	d006      	beq.n	80020c2 <DMA2D_SetConfig+0x2e>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80020b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80020b8:	d035      	beq.n	8002126 <DMA2D_SetConfig+0x92>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80020ba:	6803      	ldr	r3, [r0, #0]
 80020bc:	60d9      	str	r1, [r3, #12]
  }
}
 80020be:	bc70      	pop	{r4, r5, r6}
 80020c0:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80020c2:	6883      	ldr	r3, [r0, #8]
 80020c4:	b1cb      	cbz	r3, 80020fa <DMA2D_SetConfig+0x66>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d015      	beq.n	80020f6 <DMA2D_SetConfig+0x62>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80020ca:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80020ce:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80020d2:	b2cc      	uxtb	r4, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d013      	beq.n	8002100 <DMA2D_SetConfig+0x6c>
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80020d8:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <DMA2D_SetConfig+0x7c>
      tmp3 = (tmp3 >> 12U);
 80020e0:	0b2d      	lsrs	r5, r5, #12
      tmp2 = (tmp2 >> 20U);
 80020e2:	0d13      	lsrs	r3, r2, #20
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80020ea:	ea43 1314 	orr.w	r3, r3, r4, lsr #4
      tmp1 = (tmp1 >> 28U);
 80020ee:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80020f0:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 80020f4:	e001      	b.n	80020fa <DMA2D_SetConfig+0x66>
      tmp = (tmp3 | tmp2 | tmp4);
 80020f6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	6399      	str	r1, [r3, #56]	@ 0x38
 80020fe:	e7de      	b.n	80020be <DMA2D_SetConfig+0x2a>
      tmp3 = (tmp3 >> 10U);
 8002100:	0aad      	lsrs	r5, r5, #10
      tmp2 = (tmp2 >> 19U);
 8002102:	0cd3      	lsrs	r3, r2, #19
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002104:	02db      	lsls	r3, r3, #11
 8002106:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800210a:	ea43 01d4 	orr.w	r1, r3, r4, lsr #3
 800210e:	e7f4      	b.n	80020fa <DMA2D_SetConfig+0x66>
      tmp3 = (tmp3 >> 11U);
 8002110:	0aed      	lsrs	r5, r5, #11
      tmp2 = (tmp2 >> 19U);
 8002112:	0cd3      	lsrs	r3, r2, #19
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800211a:	ea43 03d4 	orr.w	r3, r3, r4, lsr #3
      tmp1 = (tmp1 >> 31U);
 800211e:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002120:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002124:	e7e9      	b.n	80020fa <DMA2D_SetConfig+0x66>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	6159      	str	r1, [r3, #20]
 800212a:	e7c8      	b.n	80020be <DMA2D_SetConfig+0x2a>

0800212c <HAL_DMA2D_Init>:
  if (hdma2d == NULL)
 800212c:	2800      	cmp	r0, #0
 800212e:	d037      	beq.n	80021a0 <HAL_DMA2D_Init+0x74>
{
 8002130:	b510      	push	{r4, lr}
 8002132:	4604      	mov	r4, r0
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002134:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02c      	beq.n	8002196 <HAL_DMA2D_Init+0x6a>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800213c:	2302      	movs	r3, #2
 800213e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002142:	6821      	ldr	r1, [r4, #0]
 8002144:	6808      	ldr	r0, [r1, #0]
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	69e2      	ldr	r2, [r4, #28]
 800214a:	4313      	orrs	r3, r2
 800214c:	4a15      	ldr	r2, [pc, #84]	@ (80021a4 <HAL_DMA2D_Init+0x78>)
 800214e:	4002      	ands	r2, r0
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002154:	6821      	ldr	r1, [r4, #0]
 8002156:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8002158:	68a3      	ldr	r3, [r4, #8]
 800215a:	69a2      	ldr	r2, [r4, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	4a12      	ldr	r2, [pc, #72]	@ (80021a8 <HAL_DMA2D_Init+0x7c>)
 8002160:	4002      	ands	r2, r0
 8002162:	4313      	orrs	r3, r2
 8002164:	634b      	str	r3, [r1, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <HAL_DMA2D_Init+0x80>)
 800216c:	400b      	ands	r3, r1
 800216e:	68e1      	ldr	r1, [r4, #12]
 8002170:	430b      	orrs	r3, r1
 8002172:	6413      	str	r3, [r2, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002174:	6821      	ldr	r1, [r4, #0]
 8002176:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8002178:	6920      	ldr	r0, [r4, #16]
 800217a:	6963      	ldr	r3, [r4, #20]
 800217c:	055b      	lsls	r3, r3, #21
 800217e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8002182:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002186:	4313      	orrs	r3, r2
 8002188:	634b      	str	r3, [r1, #52]	@ 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800218a:	2000      	movs	r0, #0
 800218c:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800218e:	2301      	movs	r3, #1
 8002190:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8002194:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002196:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800219a:	f7ff fc5d 	bl	8001a58 <HAL_DMA2D_MspInit>
 800219e:	e7cd      	b.n	800213c <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 80021a0:	2001      	movs	r0, #1
}
 80021a2:	4770      	bx	lr
 80021a4:	fff8ffbf 	.word	0xfff8ffbf
 80021a8:	fffffef8 	.word	0xfffffef8
 80021ac:	ffff0000 	.word	0xffff0000

080021b0 <HAL_DMA2D_Start>:
{
 80021b0:	b510      	push	{r4, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80021b6:	f890 0060 	ldrb.w	r0, [r0, #96]	@ 0x60
 80021ba:	2801      	cmp	r0, #1
 80021bc:	d012      	beq.n	80021e4 <HAL_DMA2D_Start+0x34>
 80021be:	2001      	movs	r0, #1
 80021c0:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021c4:	2002      	movs	r0, #2
 80021c6:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021ca:	9804      	ldr	r0, [sp, #16]
 80021cc:	9000      	str	r0, [sp, #0]
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff ff60 	bl	8002094 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	6813      	ldr	r3, [r2, #0]
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80021de:	2000      	movs	r0, #0
}
 80021e0:	b002      	add	sp, #8
 80021e2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdma2d);
 80021e4:	2002      	movs	r0, #2
 80021e6:	e7fb      	b.n	80021e0 <HAL_DMA2D_Start+0x30>

080021e8 <HAL_DMA2D_PollForTransfer>:
{
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	4605      	mov	r5, r0
 80021ee:	460c      	mov	r4, r1
  __IO uint32_t isrflags = 0x0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f013 0f01 	tst.w	r3, #1
 80021fc:	d112      	bne.n	8002224 <HAL_DMA2D_PollForTransfer+0x3c>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80021fe:	682a      	ldr	r2, [r5, #0]
 8002200:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002202:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002204:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002206:	f013 0f20 	tst.w	r3, #32
 800220a:	d142      	bne.n	8002292 <HAL_DMA2D_PollForTransfer+0xaa>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	2212      	movs	r2, #18
 8002210:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002212:	2301      	movs	r3, #1
 8002214:	f885 3061 	strb.w	r3, [r5, #97]	@ 0x61
  return HAL_OK;
 8002218:	2000      	movs	r0, #0
        __HAL_UNLOCK(hdma2d);
 800221a:	2300      	movs	r3, #0
 800221c:	f885 3060 	strb.w	r3, [r5, #96]	@ 0x60
}
 8002220:	b002      	add	sp, #8
 8002222:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002224:	f7ff feb4 	bl	8001f90 <HAL_GetTick>
 8002228:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800222a:	682b      	ldr	r3, [r5, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	f012 0f02 	tst.w	r2, #2
 8002232:	d1e4      	bne.n	80021fe <HAL_DMA2D_PollForTransfer+0x16>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002238:	9a01      	ldr	r2, [sp, #4]
 800223a:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800223e:	d111      	bne.n	8002264 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 8002240:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002244:	d0f2      	beq.n	800222c <HAL_DMA2D_PollForTransfer+0x44>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002246:	f7ff fea3 	bl	8001f90 <HAL_GetTick>
 800224a:	1b80      	subs	r0, r0, r6
 800224c:	42a0      	cmp	r0, r4
 800224e:	d801      	bhi.n	8002254 <HAL_DMA2D_PollForTransfer+0x6c>
 8002250:	2c00      	cmp	r4, #0
 8002252:	d1ea      	bne.n	800222a <HAL_DMA2D_PollForTransfer+0x42>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	666b      	str	r3, [r5, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800225c:	2003      	movs	r0, #3
 800225e:	f885 0061 	strb.w	r0, [r5, #97]	@ 0x61
          return HAL_TIMEOUT;
 8002262:	e7da      	b.n	800221a <HAL_DMA2D_PollForTransfer+0x32>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002264:	9a01      	ldr	r2, [sp, #4]
 8002266:	f012 0f20 	tst.w	r2, #32
 800226a:	d003      	beq.n	8002274 <HAL_DMA2D_PollForTransfer+0x8c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800226c:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 800226e:	f042 0202 	orr.w	r2, r2, #2
 8002272:	666a      	str	r2, [r5, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002274:	9a01      	ldr	r2, [sp, #4]
 8002276:	f012 0f01 	tst.w	r2, #1
 800227a:	d003      	beq.n	8002284 <HAL_DMA2D_PollForTransfer+0x9c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800227c:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	666a      	str	r2, [r5, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002284:	2221      	movs	r2, #33	@ 0x21
 8002286:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002288:	2304      	movs	r3, #4
 800228a:	f885 3061 	strb.w	r3, [r5, #97]	@ 0x61
        return HAL_ERROR;
 800228e:	2001      	movs	r0, #1
 8002290:	e7c3      	b.n	800221a <HAL_DMA2D_PollForTransfer+0x32>
    tickstart = HAL_GetTick();
 8002292:	f7ff fe7d 	bl	8001f90 <HAL_GetTick>
 8002296:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	f012 0f10 	tst.w	r2, #16
 80022a0:	d1b4      	bne.n	800220c <HAL_DMA2D_PollForTransfer+0x24>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80022a6:	9a01      	ldr	r2, [sp, #4]
 80022a8:	f012 0f29 	tst.w	r2, #41	@ 0x29
 80022ac:	d111      	bne.n	80022d2 <HAL_DMA2D_PollForTransfer+0xea>
      if (Timeout != HAL_MAX_DELAY)
 80022ae:	f1b4 3fff 	cmp.w	r4, #4294967295
 80022b2:	d0f2      	beq.n	800229a <HAL_DMA2D_PollForTransfer+0xb2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022b4:	f7ff fe6c 	bl	8001f90 <HAL_GetTick>
 80022b8:	1b80      	subs	r0, r0, r6
 80022ba:	42a0      	cmp	r0, r4
 80022bc:	d801      	bhi.n	80022c2 <HAL_DMA2D_PollForTransfer+0xda>
 80022be:	2c00      	cmp	r4, #0
 80022c0:	d1ea      	bne.n	8002298 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	666b      	str	r3, [r5, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	f885 0061 	strb.w	r0, [r5, #97]	@ 0x61
          return HAL_TIMEOUT;
 80022d0:	e7a3      	b.n	800221a <HAL_DMA2D_PollForTransfer+0x32>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022d2:	9a01      	ldr	r2, [sp, #4]
 80022d4:	f012 0f08 	tst.w	r2, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_DMA2D_PollForTransfer+0xfa>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022da:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 80022dc:	f042 0204 	orr.w	r2, r2, #4
 80022e0:	666a      	str	r2, [r5, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022e2:	9a01      	ldr	r2, [sp, #4]
 80022e4:	f012 0f20 	tst.w	r2, #32
 80022e8:	d003      	beq.n	80022f2 <HAL_DMA2D_PollForTransfer+0x10a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022ea:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 80022ec:	f042 0202 	orr.w	r2, r2, #2
 80022f0:	666a      	str	r2, [r5, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022f2:	9a01      	ldr	r2, [sp, #4]
 80022f4:	f012 0f01 	tst.w	r2, #1
 80022f8:	d003      	beq.n	8002302 <HAL_DMA2D_PollForTransfer+0x11a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022fa:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	666a      	str	r2, [r5, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002302:	2229      	movs	r2, #41	@ 0x29
 8002304:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002306:	2304      	movs	r3, #4
 8002308:	f885 3061 	strb.w	r3, [r5, #97]	@ 0x61
        return HAL_ERROR;
 800230c:	2001      	movs	r0, #1
 800230e:	e784      	b.n	800221a <HAL_DMA2D_PollForTransfer+0x32>

08002310 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002310:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 8002314:	2a01      	cmp	r2, #1
 8002316:	d070      	beq.n	80023fa <HAL_DMA2D_ConfigLayer+0xea>
{
 8002318:	b430      	push	{r4, r5}
 800231a:	4603      	mov	r3, r0
  __HAL_LOCK(hdma2d);
 800231c:	2201      	movs	r2, #1
 800231e:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002322:	2202      	movs	r2, #2
 8002324:	f880 2061 	strb.w	r2, [r0, #97]	@ 0x61
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002328:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 800232c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002330:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002332:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002334:	0512      	lsls	r2, r2, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002336:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8002338:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800233c:	4322      	orrs	r2, r4
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800233e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002340:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002344:	f1a4 0009 	sub.w	r0, r4, #9
 8002348:	2801      	cmp	r0, #1
 800234a:	d91d      	bls.n	8002388 <HAL_DMA2D_ConfigLayer+0x78>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800234c:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 8002350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002354:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002356:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800235a:	2900      	cmp	r1, #0
 800235c:	d140      	bne.n	80023e0 <HAL_DMA2D_ConfigLayer+0xd0>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8002362:	4927      	ldr	r1, [pc, #156]	@ (8002400 <HAL_DMA2D_ConfigLayer+0xf0>)
 8002364:	4021      	ands	r1, r4
 8002366:	4311      	orrs	r1, r2
 8002368:	6241      	str	r1, [r0, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800236e:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002372:	3a09      	subs	r2, #9
 8002374:	2a01      	cmp	r2, #1
 8002376:	d92d      	bls.n	80023d4 <HAL_DMA2D_ConfigLayer+0xc4>
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 800237e:	2000      	movs	r0, #0
 8002380:	f883 0060 	strb.w	r0, [r3, #96]	@ 0x60
}
 8002384:	bc30      	pop	{r4, r5}
 8002386:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002388:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 800238c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002390:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002392:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 8002396:	4302      	orrs	r2, r0
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002398:	2900      	cmp	r1, #0
 800239a:	d0e0      	beq.n	800235e <HAL_DMA2D_ConfigLayer+0x4e>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800239c:	4d19      	ldr	r5, [pc, #100]	@ (8002404 <HAL_DMA2D_ConfigLayer+0xf4>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800239e:	681c      	ldr	r4, [r3, #0]
 80023a0:	69e0      	ldr	r0, [r4, #28]
 80023a2:	ea20 0005 	bic.w	r0, r0, r5
 80023a6:	4302      	orrs	r2, r0
 80023a8:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 80023b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80023b4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80023b6:	6104      	str	r4, [r0, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023ba:	3a09      	subs	r2, #9
 80023bc:	2a01      	cmp	r2, #1
 80023be:	d8db      	bhi.n	8002378 <HAL_DMA2D_ConfigLayer+0x68>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80023c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023ca:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80023cc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80023d0:	6202      	str	r2, [r0, #32]
 80023d2:	e7d1      	b.n	8002378 <HAL_DMA2D_ConfigLayer+0x68>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023d4:	6819      	ldr	r1, [r3, #0]
 80023d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80023dc:	628a      	str	r2, [r1, #40]	@ 0x28
 80023de:	e7cb      	b.n	8002378 <HAL_DMA2D_ConfigLayer+0x68>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80023e0:	2c0b      	cmp	r4, #11
 80023e2:	d108      	bne.n	80023f6 <HAL_DMA2D_ConfigLayer+0xe6>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80023e4:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
 80023e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80023ec:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80023ee:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 80023f2:	4d05      	ldr	r5, [pc, #20]	@ (8002408 <HAL_DMA2D_ConfigLayer+0xf8>)
 80023f4:	e7d3      	b.n	800239e <HAL_DMA2D_ConfigLayer+0x8e>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80023f6:	4d03      	ldr	r5, [pc, #12]	@ (8002404 <HAL_DMA2D_ConfigLayer+0xf4>)
 80023f8:	e7d1      	b.n	800239e <HAL_DMA2D_ConfigLayer+0x8e>
  __HAL_LOCK(hdma2d);
 80023fa:	2002      	movs	r0, #2
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	00ccfff0 	.word	0x00ccfff0
 8002404:	ff33000f 	.word	0xff33000f
 8002408:	ff3f000f 	.word	0xff3f000f

0800240c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800240c:	680b      	ldr	r3, [r1, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80f9 	beq.w	8002606 <HAL_GPIO_Init+0x1fa>
{
 8002414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002418:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800241a:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 800241e:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002420:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002422:	2403      	movs	r4, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002424:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002428:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
 800242c:	e050      	b.n	80024d0 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR;
 800242e:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002430:	fa04 fa0c 	lsl.w	sl, r4, ip
 8002434:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002438:	68cb      	ldr	r3, [r1, #12]
 800243a:	fa03 f30c 	lsl.w	r3, r3, ip
 800243e:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8002442:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8002444:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002446:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800244a:	684b      	ldr	r3, [r1, #4]
 800244c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002450:	4093      	lsls	r3, r2
 8002452:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8002454:	6043      	str	r3, [r0, #4]
 8002456:	e046      	b.n	80024e6 <HAL_GPIO_Init+0xda>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002458:	2300      	movs	r3, #0
 800245a:	fa03 f30b 	lsl.w	r3, r3, fp
 800245e:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002462:	60bb      	str	r3, [r7, #8]
        temp = EXTI->RTSR1;
 8002464:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 8002468:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246c:	684e      	ldr	r6, [r1, #4]
 800246e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8002472:	bf0c      	ite	eq
 8002474:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8002476:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 800247a:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->FTSR1;
 800247e:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002482:	684e      	ldr	r6, [r1, #4]
 8002484:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8002488:	bf0c      	ite	eq
 800248a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800248c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8002490:	f8ce 3004 	str.w	r3, [lr, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002494:	f8de 3084 	ldr.w	r3, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002498:	684e      	ldr	r6, [r1, #4]
 800249a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 800249e:	bf0c      	ite	eq
 80024a0:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 80024a2:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024a6:	f8ce 3084 	str.w	r3, [lr, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024aa:	f8de 3080 	ldr.w	r3, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ae:	684e      	ldr	r6, [r1, #4]
 80024b0:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~(iocurrent);
 80024b4:	bf0c      	ite	eq
 80024b6:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 80024b8:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024bc:	f8ce 7080 	str.w	r7, [lr, #128]	@ 0x80
      }
    }

    position++;
 80024c0:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c2:	680b      	ldr	r3, [r1, #0]
 80024c4:	f10c 0c02 	add.w	ip, ip, #2
 80024c8:	fa33 f702 	lsrs.w	r7, r3, r2
 80024cc:	f000 8098 	beq.w	8002600 <HAL_GPIO_Init+0x1f4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024d0:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00U)
 80024d4:	ea17 0903 	ands.w	r9, r7, r3
 80024d8:	d0f2      	beq.n	80024c0 <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024da:	684b      	ldr	r3, [r1, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d9a3      	bls.n	800242e <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e6:	684b      	ldr	r3, [r1, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d020      	beq.n	8002532 <HAL_GPIO_Init+0x126>
      temp = GPIOx->PUPDR;
 80024f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024f2:	fa04 f30c 	lsl.w	r3, r4, ip
 80024f6:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fa:	688b      	ldr	r3, [r1, #8]
 80024fc:	fa03 f30c 	lsl.w	r3, r3, ip
 8002500:	433b      	orrs	r3, r7
      GPIOx->PUPDR = temp;
 8002502:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	684b      	ldr	r3, [r1, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d111      	bne.n	8002532 <HAL_GPIO_Init+0x126>
        temp = GPIOx->AFR[position >> 3U];
 800250e:	08d7      	lsrs	r7, r2, #3
 8002510:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002514:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002516:	f002 0b07 	and.w	fp, r2, #7
 800251a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800251e:	fa08 fa0b 	lsl.w	sl, r8, fp
 8002522:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002526:	690b      	ldr	r3, [r1, #16]
 8002528:	fa03 f30b 	lsl.w	r3, r3, fp
 800252c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002530:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8002532:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002534:	fa04 f30c 	lsl.w	r3, r4, ip
 8002538:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253c:	684b      	ldr	r3, [r1, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	fa03 f30c 	lsl.w	r3, r3, ip
 8002546:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8002548:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800254a:	684b      	ldr	r3, [r1, #4]
 800254c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8002550:	d0b6      	beq.n	80024c0 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	4e2d      	ldr	r6, [pc, #180]	@ (8002608 <HAL_GPIO_Init+0x1fc>)
 8002554:	f8d6 3154 	ldr.w	r3, [r6, #340]	@ 0x154
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	f8c6 3154 	str.w	r3, [r6, #340]	@ 0x154
 8002560:	f8d6 3154 	ldr.w	r3, [r6, #340]	@ 0x154
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800256c:	f022 0703 	bic.w	r7, r2, #3
 8002570:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8002574:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002578:	68bb      	ldr	r3, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800257a:	f002 0b03 	and.w	fp, r2, #3
 800257e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002582:	fa08 fa0b 	lsl.w	sl, r8, fp
 8002586:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_GPIO_Init+0x200>)
 800258c:	4298      	cmp	r0, r3
 800258e:	f43f af63 	beq.w	8002458 <HAL_GPIO_Init+0x4c>
 8002592:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002596:	4298      	cmp	r0, r3
 8002598:	d022      	beq.n	80025e0 <HAL_GPIO_Init+0x1d4>
 800259a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800259e:	4298      	cmp	r0, r3
 80025a0:	d020      	beq.n	80025e4 <HAL_GPIO_Init+0x1d8>
 80025a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025a6:	4298      	cmp	r0, r3
 80025a8:	d01e      	beq.n	80025e8 <HAL_GPIO_Init+0x1dc>
 80025aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025ae:	4298      	cmp	r0, r3
 80025b0:	d01c      	beq.n	80025ec <HAL_GPIO_Init+0x1e0>
 80025b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025b6:	4298      	cmp	r0, r3
 80025b8:	d01a      	beq.n	80025f0 <HAL_GPIO_Init+0x1e4>
 80025ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025be:	4298      	cmp	r0, r3
 80025c0:	d018      	beq.n	80025f4 <HAL_GPIO_Init+0x1e8>
 80025c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025c6:	4298      	cmp	r0, r3
 80025c8:	d016      	beq.n	80025f8 <HAL_GPIO_Init+0x1ec>
 80025ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025ce:	4298      	cmp	r0, r3
 80025d0:	d014      	beq.n	80025fc <HAL_GPIO_Init+0x1f0>
 80025d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025d6:	4298      	cmp	r0, r3
 80025d8:	bf14      	ite	ne
 80025da:	230a      	movne	r3, #10
 80025dc:	2309      	moveq	r3, #9
 80025de:	e73c      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e73a      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e738      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025e8:	2303      	movs	r3, #3
 80025ea:	e736      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025ec:	2304      	movs	r3, #4
 80025ee:	e734      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025f0:	2305      	movs	r3, #5
 80025f2:	e732      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025f4:	2306      	movs	r3, #6
 80025f6:	e730      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025f8:	2307      	movs	r3, #7
 80025fa:	e72e      	b.n	800245a <HAL_GPIO_Init+0x4e>
 80025fc:	2308      	movs	r3, #8
 80025fe:	e72c      	b.n	800245a <HAL_GPIO_Init+0x4e>
  }
}
 8002600:	b003      	add	sp, #12
 8002602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002606:	4770      	bx	lr
 8002608:	58024400 	.word	0x58024400
 800260c:	58020000 	.word	0x58020000

08002610 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002610:	6903      	ldr	r3, [r0, #16]
 8002612:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002614:	bf14      	ite	ne
 8002616:	2001      	movne	r0, #1
 8002618:	2000      	moveq	r0, #0
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800261c:	b10a      	cbz	r2, 8002622 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	6181      	str	r1, [r0, #24]
 8002620:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002622:	0409      	lsls	r1, r1, #16
 8002624:	6181      	str	r1, [r0, #24]
  }
}
 8002626:	4770      	bx	lr

08002628 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8002628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800262c:	4606      	mov	r6, r0
 800262e:	460c      	mov	r4, r1
 8002630:	4615      	mov	r5, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8002632:	7801      	ldrb	r1, [r0, #0]
 8002634:	f04f 0e01 	mov.w	lr, #1
  p = 0;
 8002638:	2200      	movs	r2, #0
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800263a:	b139      	cbz	r1, 800264c <JPEG_Bits_To_SizeCodes+0x24>
 800263c:	eb04 0c02 	add.w	ip, r4, r2
 8002640:	440a      	add	r2, r1
 8002642:	18a0      	adds	r0, r4, r2
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002644:	f80c eb01 	strb.w	lr, [ip], #1
    while (i != 0UL)
 8002648:	4584      	cmp	ip, r0
 800264a:	d1fb      	bne.n	8002644 <JPEG_Bits_To_SizeCodes+0x1c>
  for (l = 0; l < 16UL; l++)
 800264c:	f1be 0f10 	cmp.w	lr, #16
 8002650:	d00a      	beq.n	8002668 <JPEG_Bits_To_SizeCodes+0x40>
    i = (uint32_t)Bits[l];
 8002652:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    if ((p + i) > 256UL)
 8002656:	f10e 0e01 	add.w	lr, lr, #1
 800265a:	1888      	adds	r0, r1, r2
 800265c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8002660:	d9eb      	bls.n	800263a <JPEG_Bits_To_SizeCodes+0x12>
      return HAL_ERROR;
 8002662:	2001      	movs	r0, #1
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8002664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  Huffsize[p] = 0;
 8002668:	2100      	movs	r1, #0
 800266a:	54a1      	strb	r1, [r4, r2]
  *LastK = p;
 800266c:	601a      	str	r2, [r3, #0]
  si = Huffsize[0];
 800266e:	7820      	ldrb	r0, [r4, #0]
 8002670:	4602      	mov	r2, r0
  while (Huffsize[p] != 0U)
 8002672:	2800      	cmp	r0, #0
 8002674:	d0f6      	beq.n	8002664 <JPEG_Bits_To_SizeCodes+0x3c>
  code = 0;
 8002676:	f04f 0900 	mov.w	r9, #0
  p = 0;
 800267a:	4649      	mov	r1, r9
 800267c:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8002680:	2701      	movs	r7, #1
 8002682:	e01c      	b.n	80026be <JPEG_Bits_To_SizeCodes+0x96>
 8002684:	eb01 0c08 	add.w	ip, r1, r8
 8002688:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
    while (((uint32_t) Huffsize[p]) == si)
 800268c:	464b      	mov	r3, r9
      Huffcode[p] = code;
 800268e:	f84c 3f04 	str.w	r3, [ip, #4]!
      code++;
 8002692:	461e      	mov	r6, r3
 8002694:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8002696:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 800269a:	4596      	cmp	lr, r2
 800269c:	d0f7      	beq.n	800268e <JPEG_Bits_To_SizeCodes+0x66>
 800269e:	3101      	adds	r1, #1
 80026a0:	eba1 0109 	sub.w	r1, r1, r9
      p++;
 80026a4:	4431      	add	r1, r6
    if(si > 31UL)
 80026a6:	2a1f      	cmp	r2, #31
 80026a8:	d80f      	bhi.n	80026ca <JPEG_Bits_To_SizeCodes+0xa2>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80026aa:	fa07 f002 	lsl.w	r0, r7, r2
 80026ae:	4298      	cmp	r0, r3
 80026b0:	d90d      	bls.n	80026ce <JPEG_Bits_To_SizeCodes+0xa6>
    code <<= 1;
 80026b2:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 80026b6:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 80026b8:	5c60      	ldrb	r0, [r4, r1]
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d0d2      	beq.n	8002664 <JPEG_Bits_To_SizeCodes+0x3c>
    while (((uint32_t) Huffsize[p]) == si)
 80026be:	1860      	adds	r0, r4, r1
 80026c0:	5c63      	ldrb	r3, [r4, r1]
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d0de      	beq.n	8002684 <JPEG_Bits_To_SizeCodes+0x5c>
 80026c6:	464b      	mov	r3, r9
 80026c8:	e7ed      	b.n	80026a6 <JPEG_Bits_To_SizeCodes+0x7e>
      return HAL_ERROR;
 80026ca:	2001      	movs	r0, #1
 80026cc:	e7ca      	b.n	8002664 <JPEG_Bits_To_SizeCodes+0x3c>
      return HAL_ERROR;
 80026ce:	2001      	movs	r0, #1
 80026d0:	e7c8      	b.n	8002664 <JPEG_Bits_To_SizeCodes+0x3c>

080026d2 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80026d2:	b570      	push	{r4, r5, r6, lr}
 80026d4:	f5ad 6da2 	sub.w	sp, sp, #1296	@ 0x510
 80026d8:	4606      	mov	r6, r0
 80026da:	460c      	mov	r4, r1
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80026dc:	f20d 530c 	addw	r3, sp, #1292	@ 0x50c
 80026e0:	aa01      	add	r2, sp, #4
 80026e2:	f50d 6181 	add.w	r1, sp, #1032	@ 0x408
 80026e6:	f7ff ff9f 	bl	8002628 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80026ea:	b9d8      	cbnz	r0, 8002724 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 80026ec:	f8dd 350c 	ldr.w	r3, [sp, #1292]	@ 0x50c
 80026f0:	b1c3      	cbz	r3, 8002724 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
 80026f2:	f106 0c0f 	add.w	ip, r6, #15
 80026f6:	f10d 0e04 	add.w	lr, sp, #4
 80026fa:	f50d 6181 	add.w	r1, sp, #1032	@ 0x408
 80026fe:	330f      	adds	r3, #15
 8002700:	441e      	add	r6, r3
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002702:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002706:	2b0b      	cmp	r3, #11
 8002708:	d80b      	bhi.n	8002722 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x50>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800270a:	f85e 5b04 	ldr.w	r5, [lr], #4
 800270e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8002712:	60d5      	str	r5, [r2, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002714:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002718:	3a01      	subs	r2, #1
 800271a:	54e2      	strb	r2, [r4, r3]
  while (k < lastK)
 800271c:	45b4      	cmp	ip, r6
 800271e:	d1f0      	bne.n	8002702 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x30>
 8002720:	e000      	b.n	8002724 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002722:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8002724:	f50d 6da2 	add.w	sp, sp, #1296	@ 0x510
 8002728:	bd70      	pop	{r4, r5, r6, pc}

0800272a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800272a:	b530      	push	{r4, r5, lr}
 800272c:	b091      	sub	sp, #68	@ 0x44
 800272e:	460b      	mov	r3, r1
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002730:	6804      	ldr	r4, [r0, #0]
 8002732:	f504 61f8 	add.w	r1, r4, #1984	@ 0x7c0
 8002736:	428a      	cmp	r2, r1
 8002738:	d006      	beq.n	8002748 <JPEG_Set_HuffDC_Mem+0x1e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800273a:	f504 61fc 	add.w	r1, r4, #2016	@ 0x7e0
 800273e:	428a      	cmp	r2, r1
 8002740:	d005      	beq.n	800274e <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8002742:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8002744:	b011      	add	sp, #68	@ 0x44
 8002746:	bd30      	pop	{r4, r5, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002748:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
 800274c:	e001      	b.n	8002752 <JPEG_Set_HuffDC_Mem+0x28>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800274e:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8002752:	b32b      	cbz	r3, 80027a0 <JPEG_Set_HuffDC_Mem+0x76>
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8002754:	a901      	add	r1, sp, #4
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ffbb 	bl	80026d2 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800275c:	2800      	cmp	r0, #0
 800275e:	d1f1      	bne.n	8002744 <JPEG_Set_HuffDC_Mem+0x1a>
    *addressDef = 0x0FFF0FFF;
 8002760:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8002764:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8002766:	6063      	str	r3, [r4, #4]
    while (i > 1UL)
 8002768:	a901      	add	r1, sp, #4
 800276a:	f1a4 0e18 	sub.w	lr, r4, #24
    *addressDef = 0x0FFF0FFF;
 800276e:	468c      	mov	ip, r1
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002770:	7aca      	ldrb	r2, [r1, #11]
 8002772:	0212      	lsls	r2, r2, #8
 8002774:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8002778:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800277c:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800277e:	7a8b      	ldrb	r3, [r1, #10]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002786:	f89c 5034 	ldrb.w	r5, [ip, #52]	@ 0x34
 800278a:	432b      	orrs	r3, r5
      *address = lsb | (msb << 16);
 800278c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002790:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8002794:	3902      	subs	r1, #2
 8002796:	f1ac 0c08 	sub.w	ip, ip, #8
 800279a:	4574      	cmp	r4, lr
 800279c:	d1e8      	bne.n	8002770 <JPEG_Set_HuffDC_Mem+0x46>
 800279e:	e7d1      	b.n	8002744 <JPEG_Set_HuffDC_Mem+0x1a>
  return HAL_OK;
 80027a0:	2000      	movs	r0, #0
 80027a2:	e7cf      	b.n	8002744 <JPEG_Set_HuffDC_Mem+0x1a>

080027a4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80027a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027a8:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 80027ac:	460e      	mov	r6, r1
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80027ae:	6804      	ldr	r4, [r0, #0]
 80027b0:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d008      	beq.n	80027ca <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80027b8:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80027bc:	429a      	cmp	r2, r3
 80027be:	d007      	beq.n	80027d0 <JPEG_Set_HuffAC_Mem+0x2c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80027c2:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 80027c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80027ca:	f204 6444 	addw	r4, r4, #1604	@ 0x644
 80027ce:	e001      	b.n	80027d4 <JPEG_Set_HuffAC_Mem+0x30>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80027d0:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80027d4:	2e00      	cmp	r6, #0
 80027d6:	d06e      	beq.n	80028b6 <JPEG_Set_HuffAC_Mem+0x112>
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80027d8:	466b      	mov	r3, sp
 80027da:	aa42      	add	r2, sp, #264	@ 0x108
 80027dc:	a901      	add	r1, sp, #4
 80027de:	4630      	mov	r0, r6
 80027e0:	f7ff ff22 	bl	8002628 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d1ec      	bne.n	80027c2 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 80027e8:	9b00      	ldr	r3, [sp, #0]
 80027ea:	b37b      	cbz	r3, 800284c <JPEG_Set_HuffAC_Mem+0xa8>
 80027ec:	f106 050f 	add.w	r5, r6, #15
 80027f0:	f50d 7e84 	add.w	lr, sp, #264	@ 0x108
 80027f4:	f10d 0c04 	add.w	ip, sp, #4
 80027f8:	330f      	adds	r3, #15
 80027fa:	18f1      	adds	r1, r6, r3
      l = 160; /*l = 0x00 EOB code*/
 80027fc:	f04f 09a0 	mov.w	r9, #160	@ 0xa0
      l = 161;
 8002800:	f04f 08a1 	mov.w	r8, #161	@ 0xa1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002804:	f20d 560c 	addw	r6, sp, #1292	@ 0x50c
 8002808:	e00c      	b.n	8002824 <JPEG_Set_HuffAC_Mem+0x80>
      l = 160; /*l = 0x00 EOB code*/
 800280a:	464b      	mov	r3, r9
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800280c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8002810:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8002814:	f8c2 70a4 	str.w	r7, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002818:	f81c 2b01 	ldrb.w	r2, [ip], #1
 800281c:	3a01      	subs	r2, #1
 800281e:	54f2      	strb	r2, [r6, r3]
  while (k < lastK)
 8002820:	428d      	cmp	r5, r1
 8002822:	d013      	beq.n	800284c <JPEG_Set_HuffAC_Mem+0xa8>
    l = AC_BitsValsTable->HuffVal[k];
 8002824:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    if (l == 0UL)
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ee      	beq.n	800280a <JPEG_Set_HuffAC_Mem+0x66>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800282c:	2bf0      	cmp	r3, #240	@ 0xf0
 800282e:	d00b      	beq.n	8002848 <JPEG_Set_HuffAC_Mem+0xa4>
      lsb = (l & 0x0FUL);
 8002830:	f003 020f 	and.w	r2, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8002834:	3a01      	subs	r2, #1
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800283c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002840:	2ba1      	cmp	r3, #161	@ 0xa1
 8002842:	d9e3      	bls.n	800280c <JPEG_Set_HuffAC_Mem+0x68>
    if (error != HAL_OK)
 8002844:	2001      	movs	r0, #1
 8002846:	e7bc      	b.n	80027c2 <JPEG_Set_HuffAC_Mem+0x1e>
      l = 161;
 8002848:	4643      	mov	r3, r8
 800284a:	e7df      	b.n	800280c <JPEG_Set_HuffAC_Mem+0x68>
      *addressDef = 0x0FFF0FFF;
 800284c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8002850:	6023      	str	r3, [r4, #0]
 8002852:	6063      	str	r3, [r4, #4]
 8002854:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8002856:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800285a:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800285e:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8002860:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8002864:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8002866:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800286a:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800286c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8002870:	61a3      	str	r3, [r4, #24]
    while (i > 1UL)
 8002872:	f20d 510c 	addw	r1, sp, #1292	@ 0x50c
 8002876:	f20d 456a 	addw	r5, sp, #1130	@ 0x46a
 800287a:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
 800287e:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 8002882:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002886:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
 800288a:	0212      	lsls	r2, r2, #8
 800288c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8002890:	f81e 3021 	ldrb.w	r3, [lr, r1, lsl #2]
 8002894:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002896:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80028a0:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
 80028a4:	4333      	orrs	r3, r6
      *address = lsb | (msb << 16);
 80028a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028aa:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80028ae:	3902      	subs	r1, #2
 80028b0:	428d      	cmp	r5, r1
 80028b2:	d1e8      	bne.n	8002886 <JPEG_Set_HuffAC_Mem+0xe2>
 80028b4:	e785      	b.n	80027c2 <JPEG_Set_HuffAC_Mem+0x1e>
  return HAL_OK;
 80028b6:	2000      	movs	r0, #0
 80028b8:	e783      	b.n	80027c2 <JPEG_Set_HuffAC_Mem+0x1e>

080028ba <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80028ba:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80028bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028c0:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80028c2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80028ca:	6802      	ldr	r2, [r0, #0]
 80028cc:	6853      	ldr	r3, [r2, #4]
 80028ce:	bf0c      	ite	eq
 80028d0:	f043 0308 	orreq.w	r3, r3, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80028d4:	f023 0308 	bicne.w	r3, r3, #8
 80028d8:	6053      	str	r3, [r2, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80028da:	6802      	ldr	r2, [r0, #0]
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80028e4:	6802      	ldr	r2, [r0, #0]
 80028e6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80028e8:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80028ec:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80028ee:	6802      	ldr	r2, [r0, #0]
 80028f0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80028f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028f6:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80028f8:	6802      	ldr	r2, [r0, #0]
 80028fa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002900:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002902:	6802      	ldr	r2, [r0, #0]
 8002904:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002906:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800290a:	6393      	str	r3, [r2, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800290c:	6802      	ldr	r2, [r0, #0]
 800290e:	6813      	ldr	r3, [r2, #0]
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6013      	str	r3, [r2, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002916:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b08      	cmp	r3, #8
 800291e:	d005      	beq.n	800292c <JPEG_Init_Process+0x72>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002920:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d006      	beq.n	8002938 <JPEG_Init_Process+0x7e>
  }
  else
  {
    /* Nothing to do */
  }
}
 800292a:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800292c:	6802      	ldr	r2, [r0, #0]
 800292e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002930:	f043 036e 	orr.w	r3, r3, #110	@ 0x6e
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002938:	6802      	ldr	r2, [r0, #0]
 800293a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800293c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8002942:	e7f2      	b.n	800292a <JPEG_Init_Process+0x70>

08002944 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8002944:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8002946:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8002948:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800294a:	4293      	cmp	r3, r2
 800294c:	d349      	bcc.n	80029e2 <JPEG_DMA_StartProcess+0x9e>
{
 800294e:	b530      	push	{r4, r5, lr}
 8002950:	b083      	sub	sp, #12
 8002952:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8002954:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002956:	6a98      	ldr	r0, [r3, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8002958:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800295a:	4283      	cmp	r3, r0
 800295c:	d343      	bcc.n	80029e6 <JPEG_DMA_StartProcess+0xa2>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800295e:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <JPEG_DMA_StartProcess+0xa8>)
 8002960:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8002962:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002964:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <JPEG_DMA_StartProcess+0xac>)
 8002966:	654b      	str	r3, [r1, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8002968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800296a:	4d22      	ldr	r5, [pc, #136]	@ (80029f4 <JPEG_DMA_StartProcess+0xb0>)
 800296c:	644d      	str	r5, [r1, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800296e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002970:	654b      	str	r3, [r1, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8002972:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002974:	4920      	ldr	r1, [pc, #128]	@ (80029f8 <JPEG_DMA_StartProcess+0xb4>)
 8002976:	6599      	str	r1, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8002978:	b1ea      	cbz	r2, 80029b6 <JPEG_DMA_StartProcess+0x72>
 800297a:	b1e0      	cbz	r0, 80029b6 <JPEG_DMA_StartProcess+0x72>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800297c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800297e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002982:	fb02 3211 	mls	r2, r2, r1, r3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	62a3      	str	r3, [r4, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800298a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800298c:	fbb3 f2f0 	udiv	r2, r3, r0
 8002990:	fb00 3212 	mls	r2, r0, r2, r3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	62e3      	str	r3, [r4, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8002998:	6821      	ldr	r1, [r4, #0]
 800299a:	2201      	movs	r2, #1
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	69e2      	ldr	r2, [r4, #28]
 80029a0:	3144      	adds	r1, #68	@ 0x44
 80029a2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80029a4:	f000 fec8 	bl	8003738 <HAL_MDMA_Start_IT>
 80029a8:	b158      	cbz	r0, 80029c2 <JPEG_DMA_StartProcess+0x7e>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80029aa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80029b2:	2001      	movs	r0, #1
 80029b4:	e018      	b.n	80029e8 <JPEG_DMA_StartProcess+0xa4>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80029b6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
 80029c0:	e012      	b.n	80029e8 <JPEG_DMA_StartProcess+0xa4>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80029c2:	6822      	ldr	r2, [r4, #0]
 80029c4:	2301      	movs	r3, #1
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80029ca:	3240      	adds	r2, #64	@ 0x40
 80029cc:	69a1      	ldr	r1, [r4, #24]
 80029ce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80029d0:	f000 feb2 	bl	8003738 <HAL_MDMA_Start_IT>
 80029d4:	b140      	cbz	r0, 80029e8 <JPEG_DMA_StartProcess+0xa4>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80029d6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80029de:	2001      	movs	r0, #1
 80029e0:	e002      	b.n	80029e8 <JPEG_DMA_StartProcess+0xa4>
    return HAL_ERROR;
 80029e2:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80029e4:	4770      	bx	lr
    return HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
}
 80029e8:	b003      	add	sp, #12
 80029ea:	bd30      	pop	{r4, r5, pc}
 80029ec:	08002fc7 	.word	0x08002fc7
 80029f0:	08002ec1 	.word	0x08002ec1
 80029f4:	08003423 	.word	0x08003423
 80029f8:	0800340f 	.word	0x0800340f

080029fc <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 80029fc:	2800      	cmp	r0, #0
 80029fe:	f000 812f 	beq.w	8002c60 <HAL_JPEG_Init+0x264>
{
 8002a02:	b510      	push	{r4, lr}
 8002a04:	4604      	mov	r4, r0
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8002a06:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80fa 	beq.w	8002c04 <HAL_JPEG_Init+0x208>
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8002a10:	2302      	movs	r3, #2
 8002a12:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002a2e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8002a32:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002a38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a3c:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a46:	6313      	str	r3, [r2, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002a4c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a50:	6393      	str	r3, [r2, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8002a52:	4b84      	ldr	r3, [pc, #528]	@ (8002c64 <HAL_JPEG_Init+0x268>)
 8002a54:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8002a56:	4b84      	ldr	r3, [pc, #528]	@ (8002c68 <HAL_JPEG_Init+0x26c>)
 8002a58:	6423      	str	r3, [r4, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6463      	str	r3, [r4, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8002a5e:	64a3      	str	r3, [r4, #72]	@ 0x48
  address = (hjpeg->Instance->DHTMEM + 3);
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f503 715b 	add.w	r1, r3, #876	@ 0x36c
  while (index > 3UL)
 8002a66:	4a81      	ldr	r2, [pc, #516]	@ (8002c6c <HAL_JPEG_Init+0x270>)
 8002a68:	f503 7c57 	add.w	ip, r3, #860	@ 0x35c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a6c:	7bd0      	ldrb	r0, [r2, #15]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002a6e:	7b93      	ldrb	r3, [r2, #14]
 8002a70:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a72:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8002a76:	7b10      	ldrb	r0, [r2, #12]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002a78:	4303      	orrs	r3, r0
 8002a7a:	7b50      	ldrb	r0, [r2, #13]
 8002a7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002a80:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8002a84:	3a04      	subs	r2, #4
 8002a86:	4561      	cmp	r1, ip
 8002a88:	d1f0      	bne.n	8002a6c <HAL_JPEG_Init+0x70>
  address = (hjpeg->Instance->DHTMEM + 6);
 8002a8a:	6823      	ldr	r3, [r4, #0]
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002a8c:	4a78      	ldr	r2, [pc, #480]	@ (8002c70 <HAL_JPEG_Init+0x274>)
 8002a8e:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
 8002a92:	f1a2 3204 	sub.w	r2, r2, #67372036	@ 0x4040404
 8002a96:	f8c3 2374 	str.w	r2, [r3, #884]	@ 0x374
 8002a9a:	f1a2 3204 	sub.w	r2, r2, #67372036	@ 0x4040404
 8002a9e:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	f503 7062 	add.w	r0, r3, #904	@ 0x388
  while (index > 3UL)
 8002aa8:	4a72      	ldr	r2, [pc, #456]	@ (8002c74 <HAL_JPEG_Init+0x278>)
 8002aaa:	f503 7e5e 	add.w	lr, r3, #888	@ 0x378
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002aae:	4611      	mov	r1, r2
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002ab0:	f891 c00f 	ldrb.w	ip, [r1, #15]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002ab4:	7b8b      	ldrb	r3, [r1, #14]
 8002ab6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002ab8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8002abc:	f891 c00c 	ldrb.w	ip, [r1, #12]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002ac0:	ea43 030c 	orr.w	r3, r3, ip
 8002ac4:	f891 c00d 	ldrb.w	ip, [r1, #13]
 8002ac8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002acc:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8002ad0:	3904      	subs	r1, #4
 8002ad2:	4570      	cmp	r0, lr
 8002ad4:	d1ec      	bne.n	8002ab0 <HAL_JPEG_Init+0xb4>
  address = (hjpeg->Instance->DHTMEM + 51);
 8002ad6:	6821      	ldr	r1, [r4, #0]
  value = *address & 0xFFFF0000U;
 8002ad8:	f8d1 342c 	ldr.w	r3, [r1, #1068]	@ 0x42c
 8002adc:	4866      	ldr	r0, [pc, #408]	@ (8002c78 <HAL_JPEG_Init+0x27c>)
 8002ade:	4018      	ands	r0, r3
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8002ae0:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
 8002ae4:	4303      	orrs	r3, r0
  *address = value;
 8002ae6:	f8c1 342c 	str.w	r3, [r1, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8002aea:	f501 6185 	add.w	r1, r1, #1064	@ 0x428
  while (index > 3UL)
 8002aee:	f1a2 0ca0 	sub.w	ip, r2, #160	@ 0xa0
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002af2:	f892 00af 	ldrb.w	r0, [r2, #175]	@ 0xaf
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002af6:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8002afa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002afc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002b00:	f892 00ac 	ldrb.w	r0, [r2, #172]	@ 0xac
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002b04:	4303      	orrs	r3, r0
 8002b06:	f892 00ad 	ldrb.w	r0, [r2, #173]	@ 0xad
 8002b0a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002b0e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8002b12:	3a04      	subs	r2, #4
 8002b14:	4562      	cmp	r2, ip
 8002b16:	d1ec      	bne.n	8002af2 <HAL_JPEG_Init+0xf6>
  address = (hjpeg->Instance->DHTMEM + 51);
 8002b18:	6822      	ldr	r2, [r4, #0]
  value = *address & 0x0000FFFFU;
 8002b1a:	f8d2 342c 	ldr.w	r3, [r2, #1068]	@ 0x42c
 8002b1e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002b20:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8002b24:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 55);
 8002b28:	6823      	ldr	r3, [r4, #0]
  value = *address & 0xFFFF0000U;
 8002b2a:	f8d3 143c 	ldr.w	r1, [r3, #1084]	@ 0x43c
 8002b2e:	4a52      	ldr	r2, [pc, #328]	@ (8002c78 <HAL_JPEG_Init+0x27c>)
 8002b30:	4011      	ands	r1, r2
  *address = value;
 8002b32:	f8c3 143c 	str.w	r1, [r3, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b36:	2101      	movs	r1, #1
 8002b38:	f8c3 1438 	str.w	r1, [r3, #1080]	@ 0x438
 8002b3c:	f04f 3101 	mov.w	r1, #16843009	@ 0x1010101
 8002b40:	f8c3 1434 	str.w	r1, [r3, #1076]	@ 0x434
 8002b44:	f8c3 1430 	str.w	r1, [r3, #1072]	@ 0x430
  address = (hjpeg->Instance->DHTMEM + 55);
 8002b48:	6821      	ldr	r1, [r4, #0]
  value = *address & 0x0000FFFFUL;
 8002b4a:	f8d1 343c 	ldr.w	r3, [r1, #1084]	@ 0x43c
 8002b4e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002b50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8002b54:	f8c1 343c 	str.w	r3, [r1, #1084]	@ 0x43c
  address = (hjpeg->Instance->DHTMEM + 58);
 8002b58:	6823      	ldr	r3, [r4, #0]
  value = *address & 0xFFFF0000UL;
 8002b5a:	f8d3 0448 	ldr.w	r0, [r3, #1096]	@ 0x448
 8002b5e:	4010      	ands	r0, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002b60:	f640 310a 	movw	r1, #2826	@ 0xb0a
 8002b64:	4301      	orrs	r1, r0
  *address = value;
 8002b66:	f8c3 1448 	str.w	r1, [r3, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002b6a:	4944      	ldr	r1, [pc, #272]	@ (8002c7c <HAL_JPEG_Init+0x280>)
 8002b6c:	f8c3 1444 	str.w	r1, [r3, #1092]	@ 0x444
 8002b70:	f1a1 3104 	sub.w	r1, r1, #67372036	@ 0x4040404
 8002b74:	f8c3 1440 	str.w	r1, [r3, #1088]	@ 0x440
  address = (hjpeg->Instance->DHTMEM + 58);
 8002b78:	6821      	ldr	r1, [r4, #0]
  value = *address & 0x0000FFFFU;
 8002b7a:	f8d1 3448 	ldr.w	r3, [r1, #1096]	@ 0x448
 8002b7e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002b80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8002b84:	f8c1 3448 	str.w	r3, [r1, #1096]	@ 0x448
  address = (hjpeg->Instance->DHTMEM + 62);
 8002b88:	6823      	ldr	r3, [r4, #0]
  value = *address & 0xFFFF0000U;
 8002b8a:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002b8e:	4011      	ands	r1, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8002b90:	f247 7202 	movw	r2, #30466	@ 0x7702
 8002b94:	430a      	orrs	r2, r1
  *address = value;
 8002b96:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b9a:	4a39      	ldr	r2, [pc, #228]	@ (8002c80 <HAL_JPEG_Init+0x284>)
 8002b9c:	f8c3 2454 	str.w	r2, [r3, #1108]	@ 0x454
 8002ba0:	4a38      	ldr	r2, [pc, #224]	@ (8002c84 <HAL_JPEG_Init+0x288>)
 8002ba2:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
 8002ba6:	4a38      	ldr	r2, [pc, #224]	@ (8002c88 <HAL_JPEG_Init+0x28c>)
 8002ba8:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
  address = (hjpeg->Instance->DHTMEM + 62);
 8002bac:	6822      	ldr	r2, [r4, #0]
  value = *address & 0x0000FFFFUL;
 8002bae:	f8d2 3458 	ldr.w	r3, [r2, #1112]	@ 0x458
 8002bb2:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8002bb8:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
  address = (hjpeg->Instance->DHTMEM + 102);
 8002bbc:	6821      	ldr	r1, [r4, #0]
 8002bbe:	f501 619f 	add.w	r1, r1, #1272	@ 0x4f8
  while (index > 3UL)
 8002bc2:	4a32      	ldr	r2, [pc, #200]	@ (8002c8c <HAL_JPEG_Init+0x290>)
 8002bc4:	f1a2 0ca0 	sub.w	ip, r2, #160	@ 0xa0
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002bc8:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002bcc:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
 8002bd0:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002bd2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002bd6:	f892 00ae 	ldrb.w	r0, [r2, #174]	@ 0xae
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002bda:	4303      	orrs	r3, r0
 8002bdc:	f892 00af 	ldrb.w	r0, [r2, #175]	@ 0xaf
 8002be0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002be4:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8002be8:	3a04      	subs	r2, #4
 8002bea:	4594      	cmp	ip, r2
 8002bec:	d1ec      	bne.n	8002bc8 <HAL_JPEG_Init+0x1cc>
                              (hjpeg->Instance->HUFFENC_AC0));
 8002bee:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002bf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bf4:	491f      	ldr	r1, [pc, #124]	@ (8002c74 <HAL_JPEG_Init+0x278>)
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7ff fdd4 	bl	80027a4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8002bfc:	b138      	cbz	r0, 8002c0e <HAL_JPEG_Init+0x212>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8002bfe:	2001      	movs	r0, #1
 8002c00:	6520      	str	r0, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8002c02:	e02c      	b.n	8002c5e <HAL_JPEG_Init+0x262>
    hjpeg->Lock = HAL_UNLOCKED;
 8002c04:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8002c08:	f7fe ff40 	bl	8001a8c <HAL_JPEG_MspInit>
 8002c0c:	e700      	b.n	8002a10 <HAL_JPEG_Init+0x14>
                              (hjpeg->Instance->HUFFENC_AC1));
 8002c0e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8002c10:	f502 62cc 	add.w	r2, r2, #1632	@ 0x660
 8002c14:	491d      	ldr	r1, [pc, #116]	@ (8002c8c <HAL_JPEG_Init+0x290>)
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff fdc4 	bl	80027a4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_JPEG_Init+0x202>
                              hjpeg->Instance->HUFFENC_DC0);
 8002c20:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8002c22:	f502 62f8 	add.w	r2, r2, #1984	@ 0x7c0
 8002c26:	4911      	ldr	r1, [pc, #68]	@ (8002c6c <HAL_JPEG_Init+0x270>)
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff fd7e 	bl	800272a <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d1e5      	bne.n	8002bfe <HAL_JPEG_Init+0x202>
                              hjpeg->Instance->HUFFENC_DC1);
 8002c32:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8002c34:	f502 62fc 	add.w	r2, r2, #2016	@ 0x7e0
 8002c38:	4915      	ldr	r1, [pc, #84]	@ (8002c90 <HAL_JPEG_Init+0x294>)
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7ff fd75 	bl	800272a <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d1dc      	bne.n	8002bfe <HAL_JPEG_Init+0x202>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8002c44:	6822      	ldr	r2, [r4, #0]
 8002c46:	6853      	ldr	r3, [r2, #4]
 8002c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4c:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	6223      	str	r3, [r4, #32]
  hjpeg->JpegOutCount = 0;
 8002c52:	6263      	str	r3, [r4, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002c54:	2201      	movs	r2, #1
 8002c56:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8002c5a:	6523      	str	r3, [r4, #80]	@ 0x50
  hjpeg->Context = 0;
 8002c5c:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002c5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c60:	2001      	movs	r0, #1
}
 8002c62:	4770      	bx	lr
 8002c64:	08009c98 	.word	0x08009c98
 8002c68:	08009c58 	.word	0x08009c58
 8002c6c:	08009e9c 	.word	0x08009e9c
 8002c70:	0b0a0908 	.word	0x0b0a0908
 8002c74:	08009dcc 	.word	0x08009dcc
 8002c78:	ffff0000 	.word	0xffff0000
 8002c7c:	09080706 	.word	0x09080706
 8002c80:	01000404 	.word	0x01000404
 8002c84:	05070403 	.word	0x05070403
 8002c88:	04040201 	.word	0x04040201
 8002c8c:	08009d18 	.word	0x08009d18
 8002c90:	08009e80 	.word	0x08009e80

08002c94 <HAL_JPEG_GetInfo>:
  if ((hjpeg == NULL) || (pInfo == NULL))
 8002c94:	2800      	cmp	r0, #0
 8002c96:	f000 8094 	beq.w	8002dc2 <HAL_JPEG_GetInfo+0x12e>
{
 8002c9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c9e:	4689      	mov	r9, r1
 8002ca0:	4605      	mov	r5, r0
  if ((hjpeg == NULL) || (pInfo == NULL))
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	d060      	beq.n	8002d68 <HAL_JPEG_GetInfo+0xd4>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	6853      	ldr	r3, [r2, #4]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d05e      	beq.n	8002d70 <HAL_JPEG_GetInfo+0xdc>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8002cb2:	6853      	ldr	r3, [r2, #4]
 8002cb4:	f013 0303 	ands.w	r3, r3, #3
 8002cb8:	d005      	beq.n	8002cc6 <HAL_JPEG_GetInfo+0x32>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8002cba:	6853      	ldr	r3, [r2, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d153      	bne.n	8002d6c <HAL_JPEG_GetInfo+0xd8>
 8002cc4:	2330      	movs	r3, #48	@ 0x30
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8002cc6:	f8c9 3000 	str.w	r3, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8002cca:	682a      	ldr	r2, [r5, #0]
 8002ccc:	6852      	ldr	r2, [r2, #4]
 8002cce:	0c12      	lsrs	r2, r2, #16
 8002cd0:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8002cd4:	682a      	ldr	r2, [r5, #0]
 8002cd6:	68d2      	ldr	r2, [r2, #12]
 8002cd8:	0c12      	lsrs	r2, r2, #16
 8002cda:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8002cde:	f023 0320 	bic.w	r3, r3, #32
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d04e      	beq.n	8002d84 <HAL_JPEG_GetInfo+0xf0>
 8002ce6:	2300      	movs	r3, #0
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002ce8:	f8c9 3004 	str.w	r3, [r9, #4]
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8002cec:	682b      	ldr	r3, [r5, #0]

  i = 0;
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8002cee:	4c36      	ldr	r4, [pc, #216]	@ (8002dc8 <HAL_JPEG_GetInfo+0x134>)
  uint32_t quality = 0;
 8002cf0:	f04f 0c00 	mov.w	ip, #0
  i = 0;
 8002cf4:	46e6      	mov	lr, ip
 8002cf6:	f103 0850 	add.w	r8, r3, #80	@ 0x50
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8002cfa:	2664      	movs	r6, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8002cfc:	f241 3b88 	movw	fp, #5000	@ 0x1388
 8002d00:	e026      	b.n	8002d50 <HAL_JPEG_GetInfo+0xbc>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e7f0      	b.n	8002ce8 <HAL_JPEG_GetInfo+0x54>
        quality += 100UL;
 8002d06:	f10c 0c64 	add.w	ip, ip, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8002d0a:	3208      	adds	r2, #8
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	2a20      	cmp	r2, #32
 8002d10:	d018      	beq.n	8002d44 <HAL_JPEG_GetInfo+0xb0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8002d12:	fa21 f302 	lsr.w	r3, r1, r2
 8002d16:	b2db      	uxtb	r3, r3
      if (quantVal == 1UL)
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d0f4      	beq.n	8002d06 <HAL_JPEG_GetInfo+0x72>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8002d1c:	fb06 f303 	mul.w	r3, r6, r3
 8002d20:	f890 a000 	ldrb.w	sl, [r0]
 8002d24:	6bef      	ldr	r7, [r5, #60]	@ 0x3c
 8002d26:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8002d2a:	fbb3 f3fa 	udiv	r3, r3, sl
        if (scale <= 100UL)
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d804      	bhi.n	8002d3c <HAL_JPEG_GetInfo+0xa8>
          quality += (200UL - scale) / 2UL;
 8002d32:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8002d36:	eb0c 0c53 	add.w	ip, ip, r3, lsr #1
 8002d3a:	e7e6      	b.n	8002d0a <HAL_JPEG_GetInfo+0x76>
          quality += 5000UL / scale;
 8002d3c:	fbbb f3f3 	udiv	r3, fp, r3
 8002d40:	449c      	add	ip, r3
 8002d42:	e7e2      	b.n	8002d0a <HAL_JPEG_GetInfo+0x76>
        }
      }
    }

    i += 4UL;
 8002d44:	f10e 0e04 	add.w	lr, lr, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8002d48:	3404      	adds	r4, #4
 8002d4a:	f1be 0f40 	cmp.w	lr, #64	@ 0x40
 8002d4e:	d004      	beq.n	8002d5a <HAL_JPEG_GetInfo+0xc6>
    quantRow = *tableAddress;
 8002d50:	f858 100e 	ldr.w	r1, [r8, lr]
 8002d54:	4620      	mov	r0, r4
 8002d56:	2200      	movs	r2, #0
 8002d58:	e7db      	b.n	8002d12 <HAL_JPEG_GetInfo+0x7e>
    tableAddress ++;
  }

  return (quality / 64UL);
 8002d5a:	ea4f 139c 	mov.w	r3, ip, lsr #6
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8002d5e:	f8c9 3010 	str.w	r3, [r9, #16]
  return HAL_OK;
 8002d62:	2000      	movs	r0, #0
}
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8002d68:	2001      	movs	r0, #1
 8002d6a:	e7fb      	b.n	8002d64 <HAL_JPEG_GetInfo+0xd0>
    return HAL_ERROR;
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	e7f9      	b.n	8002d64 <HAL_JPEG_GetInfo+0xd0>
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8002d70:	2310      	movs	r3, #16
 8002d72:	600b      	str	r3, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8002d74:	6803      	ldr	r3, [r0, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	608b      	str	r3, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8002d7c:	6803      	ldr	r3, [r0, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	60cb      	str	r3, [r1, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8002d84:	6828      	ldr	r0, [r5, #0]
 8002d86:	6902      	ldr	r2, [r0, #16]
 8002d88:	0913      	lsrs	r3, r2, #4
 8002d8a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8002d8e:	6941      	ldr	r1, [r0, #20]
 8002d90:	090c      	lsrs	r4, r1, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002d92:	6980      	ldr	r0, [r0, #24]
 8002d94:	0900      	lsrs	r0, r0, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002d96:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8002d9a:	f011 0f0f 	tst.w	r1, #15
 8002d9e:	bf0c      	ite	eq
 8002da0:	2101      	moveq	r1, #1
 8002da2:	2100      	movne	r1, #0
 8002da4:	2a01      	cmp	r2, #1
 8002da6:	d101      	bne.n	8002dac <HAL_JPEG_GetInfo+0x118>
 8002da8:	2900      	cmp	r1, #0
 8002daa:	d1aa      	bne.n	8002d02 <HAL_JPEG_GetInfo+0x6e>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002dac:	4323      	orrs	r3, r4
 8002dae:	4303      	orrs	r3, r0
 8002db0:	f013 030f 	ands.w	r3, r3, #15
 8002db4:	d098      	beq.n	8002ce8 <HAL_JPEG_GetInfo+0x54>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002db6:	2a03      	cmp	r2, #3
 8002db8:	bf14      	ite	ne
 8002dba:	2300      	movne	r3, #0
 8002dbc:	f001 0301 	andeq.w	r3, r1, #1
 8002dc0:	e792      	b.n	8002ce8 <HAL_JPEG_GetInfo+0x54>
    return HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	08009cd8 	.word	0x08009cd8

08002dcc <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf18      	it	ne
 8002dd0:	2900      	cmpne	r1, #0
 8002dd2:	d03a      	beq.n	8002e4a <HAL_JPEG_Decode_DMA+0x7e>
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4618      	mov	r0, r3
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8002dda:	b394      	cbz	r4, 8002e42 <HAL_JPEG_Decode_DMA+0x76>
  __HAL_LOCK(hjpeg);
 8002ddc:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d030      	beq.n	8002e46 <HAL_JPEG_Decode_DMA+0x7a>
 8002de4:	2301      	movs	r3, #1
 8002de6:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8002dea:	f894 504d 	ldrb.w	r5, [r4, #77]	@ 0x4d
 8002dee:	b2ed      	uxtb	r5, r5
 8002df0:	429d      	cmp	r5, r3
 8002df2:	d004      	beq.n	8002dfe <HAL_JPEG_Decode_DMA+0x32>
    __HAL_UNLOCK(hjpeg);
 8002df4:	2300      	movs	r3, #0
 8002df6:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    return HAL_BUSY;
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	e022      	b.n	8002e44 <HAL_JPEG_Decode_DMA+0x78>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8002e04:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e06:	f023 030f 	bic.w	r3, r3, #15
 8002e0a:	6563      	str	r3, [r4, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8002e0c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002e0e:	f043 030e 	orr.w	r3, r3, #14
 8002e12:	6563      	str	r3, [r4, #84]	@ 0x54
    hjpeg->pJpegInBuffPtr = pDataIn;
 8002e14:	61a1      	str	r1, [r4, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8002e16:	61e0      	str	r0, [r4, #28]
    hjpeg->InDataLength = InDataLength;
 8002e18:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8002e1a:	9b04      	ldr	r3, [sp, #16]
 8002e1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hjpeg->JpegInCount = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	6223      	str	r3, [r4, #32]
    hjpeg->JpegOutCount = 0;
 8002e22:	6263      	str	r3, [r4, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7ff fd48 	bl	80028ba <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f7ff fd8a 	bl	8002944 <JPEG_DMA_StartProcess>
 8002e30:	b140      	cbz	r0, 8002e44 <HAL_JPEG_Decode_DMA+0x78>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8002e32:	2306      	movs	r3, #6
 8002e34:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
      __HAL_UNLOCK(hjpeg);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
      return HAL_ERROR;
 8002e3e:	4628      	mov	r0, r5
 8002e40:	e000      	b.n	8002e44 <HAL_JPEG_Decode_DMA+0x78>
    return HAL_ERROR;
 8002e42:	2001      	movs	r0, #1
}
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
 8002e46:	2002      	movs	r0, #2
 8002e48:	e7fc      	b.n	8002e44 <HAL_JPEG_Decode_DMA+0x78>
    return HAL_ERROR;
 8002e4a:	2001      	movs	r0, #1
}
 8002e4c:	4770      	bx	lr

08002e4e <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002e4e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d006      	beq.n	8002e66 <HAL_JPEG_Pause+0x18>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002e58:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d010      	beq.n	8002e84 <HAL_JPEG_Pause+0x36>
}
 8002e62:	2000      	movs	r0, #0
 8002e64:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002e66:	f011 0f01 	tst.w	r1, #1
 8002e6a:	d003      	beq.n	8002e74 <HAL_JPEG_Pause+0x26>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002e6c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e72:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002e74:	f011 0f02 	tst.w	r1, #2
 8002e78:	d0f3      	beq.n	8002e62 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002e7a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e80:	6543      	str	r3, [r0, #84]	@ 0x54
 8002e82:	e7ee      	b.n	8002e62 <HAL_JPEG_Pause+0x14>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002e84:	f011 0201 	ands.w	r2, r1, #1
 8002e88:	d004      	beq.n	8002e94 <HAL_JPEG_Pause+0x46>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002e8a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e90:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8002e92:	2206      	movs	r2, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002e94:	f011 0f02 	tst.w	r1, #2
 8002e98:	d005      	beq.n	8002ea6 <HAL_JPEG_Pause+0x58>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002e9a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002e9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ea0:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002ea2:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8002ea6:	6801      	ldr	r1, [r0, #0]
 8002ea8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8002eaa:	ea23 0302 	bic.w	r3, r3, r2
 8002eae:	630b      	str	r3, [r1, #48]	@ 0x30
 8002eb0:	e7d7      	b.n	8002e62 <HAL_JPEG_Pause+0x14>

08002eb2 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8002eb2:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8002eb4:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8002eb8:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8002eba:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8002ebc:	4770      	bx	lr

08002ebe <HAL_JPEG_EncodeCpltCallback>:
}
 8002ebe:	4770      	bx	lr

08002ec0 <JPEG_MDMAErrorCallback>:
{
 8002ec0:	b508      	push	{r3, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8002ec2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002ec4:	6802      	ldr	r2, [r0, #0]
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002ece:	6802      	ldr	r2, [r0, #0]
 8002ed0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002ed2:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8002ed6:	6313      	str	r3, [r2, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8002ede:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8002ee6:	f7fe fa31 	bl	800134c <HAL_JPEG_ErrorCallback>
}
 8002eea:	bd08      	pop	{r3, pc}

08002eec <JPEG_ReadInputData>:
{
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	4604      	mov	r4, r0
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8002ef0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002ef2:	b339      	cbz	r1, 8002f44 <JPEG_ReadInputData+0x58>
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	b32b      	cbz	r3, 8002f44 <JPEG_ReadInputData+0x58>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8002ef8:	6a02      	ldr	r2, [r0, #32]
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d928      	bls.n	8002f50 <JPEG_ReadInputData+0x64>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8002efe:	6a02      	ldr	r2, [r0, #32]
 8002f00:	1a9b      	subs	r3, r3, r2
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8002f02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f04:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002f08:	d121      	bne.n	8002f4e <JPEG_ReadInputData+0x62>
 8002f0a:	b303      	cbz	r3, 8002f4e <JPEG_ReadInputData+0x62>
    nb_words = nb_bytes / 4UL;
 8002f0c:	089e      	lsrs	r6, r3, #2
    if (nb_words >= nbRequestWords)
 8002f0e:	ebb5 0f93 	cmp.w	r5, r3, lsr #2
 8002f12:	d82d      	bhi.n	8002f70 <JPEG_ReadInputData+0x84>
      for (index = 0; index < nbRequestWords; index++)
 8002f14:	2000      	movs	r0, #0
        input_count = hjpeg->JpegInCount;
 8002f16:	6a26      	ldr	r6, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002f18:	69a7      	ldr	r7, [r4, #24]
 8002f1a:	6822      	ldr	r2, [r4, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002f1c:	19b9      	adds	r1, r7, r6
 8002f1e:	f891 c001 	ldrb.w	ip, [r1, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002f22:	788b      	ldrb	r3, [r1, #2]
 8002f24:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002f26:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002f2a:	5dbe      	ldrb	r6, [r7, r6]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002f2c:	4333      	orrs	r3, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8002f2e:	78c9      	ldrb	r1, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002f30:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8002f36:	6a23      	ldr	r3, [r4, #32]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	6223      	str	r3, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	4285      	cmp	r5, r0
 8002f40:	d1e9      	bne.n	8002f16 <JPEG_ReadInputData+0x2a>
 8002f42:	e004      	b.n	8002f4e <JPEG_ReadInputData+0x62>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8002f44:	2101      	movs	r1, #1
 8002f46:	4620      	mov	r0, r4
 8002f48:	f7ff ff81 	bl	8002e4e <HAL_JPEG_Pause>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8002f4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8002f50:	6a02      	ldr	r2, [r0, #32]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d1fa      	bne.n	8002f4c <JPEG_ReadInputData+0x60>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8002f56:	6a01      	ldr	r1, [r0, #32]
 8002f58:	f7fe f9cc 	bl	80012f4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8002f5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d902      	bls.n	8002f68 <JPEG_ReadInputData+0x7c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	62a3      	str	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8002f6c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f6e:	e7c8      	b.n	8002f02 <JPEG_ReadInputData+0x16>
      if (nb_words > 0UL)
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d917      	bls.n	8002fa4 <JPEG_ReadInputData+0xb8>
        for (index = 0; index < nb_words; index++)
 8002f74:	2000      	movs	r0, #0
          input_count = hjpeg->JpegInCount;
 8002f76:	6a25      	ldr	r5, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002f78:	69a7      	ldr	r7, [r4, #24]
 8002f7a:	6821      	ldr	r1, [r4, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002f7c:	197a      	adds	r2, r7, r5
 8002f7e:	f892 c001 	ldrb.w	ip, [r2, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002f82:	7893      	ldrb	r3, [r2, #2]
 8002f84:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002f86:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002f8a:	5d7d      	ldrb	r5, [r7, r5]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002f8c:	432b      	orrs	r3, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8002f8e:	78d2      	ldrb	r2, [r2, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002f90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002f94:	640b      	str	r3, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8002f96:	6a23      	ldr	r3, [r4, #32]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	6223      	str	r3, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	4286      	cmp	r6, r0
 8002fa0:	d8e9      	bhi.n	8002f76 <JPEG_ReadInputData+0x8a>
 8002fa2:	e7d4      	b.n	8002f4e <JPEG_ReadInputData+0x62>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8002fa4:	69a6      	ldr	r6, [r4, #24]
        dataword = 0;
 8002fa6:	2000      	movs	r0, #0
        for (index = 0; index < nb_bytes; index++)
 8002fa8:	4602      	mov	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8002faa:	6a21      	ldr	r1, [r4, #32]
 8002fac:	5c71      	ldrb	r1, [r6, r1]
 8002fae:	00d5      	lsls	r5, r2, #3
 8002fb0:	40a9      	lsls	r1, r5
 8002fb2:	4308      	orrs	r0, r1
          hjpeg->JpegInCount++;
 8002fb4:	6a21      	ldr	r1, [r4, #32]
 8002fb6:	3101      	adds	r1, #1
 8002fb8:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8002fba:	3201      	adds	r2, #1
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d8f4      	bhi.n	8002faa <JPEG_ReadInputData+0xbe>
        hjpeg->Instance->DIR = dataword;
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	6418      	str	r0, [r3, #64]	@ 0x40
}
 8002fc4:	e7c3      	b.n	8002f4e <JPEG_ReadInputData+0x62>

08002fc6 <JPEG_MDMAInCpltCallback>:
{
 8002fc6:	b530      	push	{r4, r5, lr}
 8002fc8:	b083      	sub	sp, #12
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8002fca:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002fcc:	6822      	ldr	r2, [r4, #0]
 8002fce:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002fd0:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8002fd4:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8002fd6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002fd8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002fdc:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d001      	beq.n	8002fec <JPEG_MDMAInCpltCallback+0x26>
}
 8002fe8:	b003      	add	sp, #12
 8002fea:	bd30      	pop	{r4, r5, pc}
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8002fec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002fee:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8002ff0:	6803      	ldr	r3, [r0, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8002ff8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8002ffe:	6a21      	ldr	r1, [r4, #32]
 8003000:	4620      	mov	r0, r4
 8003002:	f7fe f977 	bl	80012f4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8003006:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003008:	42ab      	cmp	r3, r5
 800300a:	d32a      	bcc.n	8003062 <JPEG_MDMAInCpltCallback+0x9c>
      if (inXfrSize == 0UL)
 800300c:	b1f5      	cbz	r5, 800304c <JPEG_MDMAInCpltCallback+0x86>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800300e:	fbb3 f2f5 	udiv	r2, r3, r5
 8003012:	fb05 3212 	mls	r2, r5, r2, r3
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800301a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800301c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003020:	d128      	bne.n	8003074 <JPEG_MDMAInCpltCallback+0xae>
 8003022:	b33b      	cbz	r3, 8003074 <JPEG_MDMAInCpltCallback+0xae>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8003024:	6822      	ldr	r2, [r4, #0]
 8003026:	69a1      	ldr	r1, [r4, #24]
 8003028:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800302a:	2501      	movs	r5, #1
 800302c:	9500      	str	r5, [sp, #0]
 800302e:	3240      	adds	r2, #64	@ 0x40
 8003030:	f000 fb82 	bl	8003738 <HAL_MDMA_Start_IT>
 8003034:	b1f0      	cbz	r0, 8003074 <JPEG_MDMAInCpltCallback+0xae>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003036:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800303e:	2306      	movs	r3, #6
 8003040:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8003044:	4620      	mov	r0, r4
 8003046:	f7fe f981 	bl	800134c <HAL_JPEG_ErrorCallback>
        return;
 800304a:	e7cd      	b.n	8002fe8 <JPEG_MDMAInCpltCallback+0x22>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800304c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003054:	2306      	movs	r3, #6
 8003056:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800305a:	4620      	mov	r0, r4
 800305c:	f7fe f976 	bl	800134c <HAL_JPEG_ErrorCallback>
        return;
 8003060:	e7c2      	b.n	8002fe8 <JPEG_MDMAInCpltCallback+0x22>
    else if (hjpeg->InDataLength > 0UL)
 8003062:	b133      	cbz	r3, 8003072 <JPEG_MDMAInCpltCallback+0xac>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8003064:	f013 0f03 	tst.w	r3, #3
 8003068:	d00a      	beq.n	8003080 <JPEG_MDMAInCpltCallback+0xba>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	3304      	adds	r3, #4
 8003070:	e7d2      	b.n	8003018 <JPEG_MDMAInCpltCallback+0x52>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8003072:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003074:	6822      	ldr	r2, [r4, #0]
 8003076:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003078:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	e7b3      	b.n	8002fe8 <JPEG_MDMAInCpltCallback+0x22>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8003080:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003082:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003086:	d0cd      	beq.n	8003024 <JPEG_MDMAInCpltCallback+0x5e>
 8003088:	e7f4      	b.n	8003074 <JPEG_MDMAInCpltCallback+0xae>

0800308a <JPEG_StoreOutputData>:
{
 800308a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308c:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800308e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8003090:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003092:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003096:	429a      	cmp	r2, r3
 8003098:	d328      	bcc.n	80030ec <JPEG_StoreOutputData+0x62>
    for (index = 0; index < nbOutputWords; index++)
 800309a:	b1d1      	cbz	r1, 80030d2 <JPEG_StoreOutputData+0x48>
 800309c:	2000      	movs	r0, #0
      dataword = hjpeg->Instance->DOR;
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80030a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80030a4:	69e5      	ldr	r5, [r4, #28]
 80030a6:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80030a8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80030aa:	69e2      	ldr	r2, [r4, #28]
 80030ac:	442a      	add	r2, r5
 80030ae:	0a1d      	lsrs	r5, r3, #8
 80030b0:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80030b2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80030b4:	69e2      	ldr	r2, [r4, #28]
 80030b6:	442a      	add	r2, r5
 80030b8:	0c1d      	lsrs	r5, r3, #16
 80030ba:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80030bc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80030be:	69e2      	ldr	r2, [r4, #28]
 80030c0:	442a      	add	r2, r5
 80030c2:	0e1b      	lsrs	r3, r3, #24
 80030c4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80030c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030c8:	3304      	adds	r3, #4
 80030ca:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80030cc:	3001      	adds	r0, #1
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d1e5      	bne.n	800309e <JPEG_StoreOutputData+0x14>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80030d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030d4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d000      	beq.n	80030dc <JPEG_StoreOutputData+0x52>
}
 80030da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80030dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80030de:	69e1      	ldr	r1, [r4, #28]
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7fe f927 	bl	8001334 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80030ea:	e7f6      	b.n	80030da <JPEG_StoreOutputData+0x50>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80030ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d9f3      	bls.n	80030da <JPEG_StoreOutputData+0x50>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80030f2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030f4:	1ad2      	subs	r2, r2, r3
 80030f6:	0895      	lsrs	r5, r2, #2
    for (index = 0; index < nb_words; index++)
 80030f8:	2a03      	cmp	r2, #3
 80030fa:	d91a      	bls.n	8003132 <JPEG_StoreOutputData+0xa8>
 80030fc:	2100      	movs	r1, #0
      dataword = hjpeg->Instance->DOR;
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8003102:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003104:	69e0      	ldr	r0, [r4, #28]
 8003106:	5483      	strb	r3, [r0, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8003108:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800310a:	69e2      	ldr	r2, [r4, #28]
 800310c:	4402      	add	r2, r0
 800310e:	0a18      	lsrs	r0, r3, #8
 8003110:	7050      	strb	r0, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003112:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003114:	69e2      	ldr	r2, [r4, #28]
 8003116:	4402      	add	r2, r0
 8003118:	0c18      	lsrs	r0, r3, #16
 800311a:	7090      	strb	r0, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800311c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800311e:	69e2      	ldr	r2, [r4, #28]
 8003120:	4402      	add	r2, r0
 8003122:	0e1b      	lsrs	r3, r3, #24
 8003124:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8003126:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003128:	3304      	adds	r3, #4
 800312a:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800312c:	3101      	adds	r1, #1
 800312e:	428d      	cmp	r5, r1
 8003130:	d8e5      	bhi.n	80030fe <JPEG_StoreOutputData+0x74>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003132:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003134:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003136:	429f      	cmp	r7, r3
 8003138:	d02c      	beq.n	8003194 <JPEG_StoreOutputData+0x10a>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800313a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8003140:	ebb7 0c05 	subs.w	ip, r7, r5
 8003144:	d00e      	beq.n	8003164 <JPEG_StoreOutputData+0xda>
 8003146:	2100      	movs	r1, #0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8003148:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800314a:	69e2      	ldr	r2, [r4, #28]
 800314c:	f001 0303 	and.w	r3, r1, #3
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	fa26 f303 	lsr.w	r3, r6, r3
 8003156:	5413      	strb	r3, [r2, r0]
        hjpeg->JpegOutCount++;
 8003158:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800315a:	3301      	adds	r3, #1
 800315c:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800315e:	3101      	adds	r1, #1
 8003160:	458c      	cmp	ip, r1
 8003162:	d1f1      	bne.n	8003148 <JPEG_StoreOutputData+0xbe>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003164:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003166:	69e1      	ldr	r1, [r4, #28]
 8003168:	4620      	mov	r0, r4
 800316a:	f7fe f8e3 	bl	8001334 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8003172:	1d2b      	adds	r3, r5, #4
 8003174:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8003176:	2b03      	cmp	r3, #3
 8003178:	d8af      	bhi.n	80030da <JPEG_StoreOutputData+0x50>
 800317a:	00db      	lsls	r3, r3, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800317c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800317e:	69e1      	ldr	r1, [r4, #28]
 8003180:	fa26 f003 	lsr.w	r0, r6, r3
 8003184:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
 8003186:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003188:	3201      	adds	r2, #1
 800318a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800318c:	3308      	adds	r3, #8
 800318e:	2b20      	cmp	r3, #32
 8003190:	d1f4      	bne.n	800317c <JPEG_StoreOutputData+0xf2>
 8003192:	e7a2      	b.n	80030da <JPEG_StoreOutputData+0x50>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003194:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003196:	69e1      	ldr	r1, [r4, #28]
 8003198:	4620      	mov	r0, r4
 800319a:	f7fe f8cb 	bl	8001334 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80031a2:	e79a      	b.n	80030da <JPEG_StoreOutputData+0x50>

080031a4 <JPEG_Process>:
{
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80031a8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d021      	beq.n	80031f6 <JPEG_Process+0x52>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80031b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031b4:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80031b8:	d108      	bne.n	80031cc <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031be:	f012 0f02 	tst.w	r2, #2
 80031c2:	d132      	bne.n	800322a <JPEG_Process+0x86>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80031c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c6:	f013 0f04 	tst.w	r3, #4
 80031ca:	d133      	bne.n	8003234 <JPEG_Process+0x90>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80031cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80031ce:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80031d2:	d108      	bne.n	80031e6 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031d8:	f012 0f08 	tst.w	r2, #8
 80031dc:	d12f      	bne.n	800323e <JPEG_Process+0x9a>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80031de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e0:	f013 0f10 	tst.w	r3, #16
 80031e4:	d130      	bne.n	8003248 <JPEG_Process+0xa4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80031ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d02f      	beq.n	8003252 <JPEG_Process+0xae>
  return JPEG_PROCESS_ONGOING;
 80031f2:	2000      	movs	r0, #0
}
 80031f4:	bd38      	pop	{r3, r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80031fe:	d0d8      	beq.n	80031b2 <JPEG_Process+0xe>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8003200:	1d05      	adds	r5, r0, #4
 8003202:	4629      	mov	r1, r5
 8003204:	f7ff fd46 	bl	8002c94 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800320c:	4629      	mov	r1, r5
 800320e:	4620      	mov	r0, r4
 8003210:	f7fe f86e 	bl	80012f0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800321c:	6313      	str	r3, [r2, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003226:	6393      	str	r3, [r2, #56]	@ 0x38
 8003228:	e7c3      	b.n	80031b2 <JPEG_Process+0xe>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800322a:	2108      	movs	r1, #8
 800322c:	4620      	mov	r0, r4
 800322e:	f7ff fe5d 	bl	8002eec <JPEG_ReadInputData>
 8003232:	e7cb      	b.n	80031cc <JPEG_Process+0x28>
      JPEG_ReadInputData(hjpeg, 1);
 8003234:	2101      	movs	r1, #1
 8003236:	4620      	mov	r0, r4
 8003238:	f7ff fe58 	bl	8002eec <JPEG_ReadInputData>
 800323c:	e7c6      	b.n	80031cc <JPEG_Process+0x28>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800323e:	2108      	movs	r1, #8
 8003240:	4620      	mov	r0, r4
 8003242:	f7ff ff22 	bl	800308a <JPEG_StoreOutputData>
 8003246:	e7ce      	b.n	80031e6 <JPEG_Process+0x42>
      JPEG_StoreOutputData(hjpeg, 1);
 8003248:	2101      	movs	r1, #1
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff ff1d 	bl	800308a <JPEG_StoreOutputData>
 8003250:	e7c9      	b.n	80031e6 <JPEG_Process+0x42>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6013      	str	r3, [r2, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800325a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d01a      	beq.n	800329a <JPEG_Process+0xf6>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003264:	6822      	ldr	r2, [r4, #0]
 8003266:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003268:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800326c:	6393      	str	r3, [r2, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800326e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003270:	b9cb      	cbnz	r3, 80032a6 <JPEG_Process+0x102>
    tmpContext = hjpeg->Context;
 8003272:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8003274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003276:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
 800327a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800327c:	2200      	movs	r2, #0
 800327e:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003282:	2201      	movs	r2, #1
 8003284:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d012      	beq.n	80032b6 <JPEG_Process+0x112>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003290:	4620      	mov	r0, r4
 8003292:	f7ff fe14 	bl	8002ebe <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8003296:	2001      	movs	r0, #1
 8003298:	e7ac      	b.n	80031f4 <JPEG_Process+0x50>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800329e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80032a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a4:	e7de      	b.n	8003264 <JPEG_Process+0xc0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80032a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032a8:	69e1      	ldr	r1, [r4, #28]
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7fe f842 	bl	8001334 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80032b4:	e7dd      	b.n	8003272 <JPEG_Process+0xce>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7fe f84c 	bl	8001354 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80032bc:	2001      	movs	r0, #1
 80032be:	e799      	b.n	80031f4 <JPEG_Process+0x50>

080032c0 <JPEG_DMA_PollResidualData>:
{
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4604      	mov	r4, r0
 80032c4:	2510      	movs	r5, #16
 80032c6:	e001      	b.n	80032cc <JPEG_DMA_PollResidualData+0xc>
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80032c8:	3d01      	subs	r5, #1
 80032ca:	d02a      	beq.n	8003322 <JPEG_DMA_PollResidualData+0x62>
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80032cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80032ce:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80032d2:	d1f9      	bne.n	80032c8 <JPEG_DMA_PollResidualData+0x8>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d8:	f012 0f10 	tst.w	r2, #16
 80032dc:	d0f4      	beq.n	80032c8 <JPEG_DMA_PollResidualData+0x8>
        dataOut = hjpeg->Instance->DOR;
 80032de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80032e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032e2:	69e1      	ldr	r1, [r4, #28]
 80032e4:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80032e6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80032e8:	69e2      	ldr	r2, [r4, #28]
 80032ea:	440a      	add	r2, r1
 80032ec:	0a19      	lsrs	r1, r3, #8
 80032ee:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80032f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80032f2:	69e2      	ldr	r2, [r4, #28]
 80032f4:	440a      	add	r2, r1
 80032f6:	0c19      	lsrs	r1, r3, #16
 80032f8:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80032fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80032fc:	69e2      	ldr	r2, [r4, #28]
 80032fe:	440a      	add	r2, r1
 8003300:	0e1b      	lsrs	r3, r3, #24
 8003302:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8003304:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003306:	3304      	adds	r3, #4
 8003308:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800330a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800330c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800330e:	429a      	cmp	r2, r3
 8003310:	d1da      	bne.n	80032c8 <JPEG_DMA_PollResidualData+0x8>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003312:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003314:	69e1      	ldr	r1, [r4, #28]
 8003316:	4620      	mov	r0, r4
 8003318:	f7fe f80c 	bl	8001334 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003320:	e7d2      	b.n	80032c8 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 8003322:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003328:	f012 0f10 	tst.w	r2, #16
 800332c:	d002      	beq.n	8003334 <JPEG_DMA_PollResidualData+0x74>
 800332e:	f411 5f00 	tst.w	r1, #8192	@ 0x2000
 8003332:	d117      	bne.n	8003364 <JPEG_DMA_PollResidualData+0xa4>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800333c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800333e:	b993      	cbnz	r3, 8003366 <JPEG_DMA_PollResidualData+0xa6>
    tmpContext = hjpeg->Context;
 8003340:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8003342:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003344:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
 8003348:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800334a:	2200      	movs	r2, #0
 800334c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003350:	2201      	movs	r2, #1
 8003352:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d00b      	beq.n	8003376 <JPEG_DMA_PollResidualData+0xb6>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800335e:	4620      	mov	r0, r4
 8003360:	f7ff fdad 	bl	8002ebe <HAL_JPEG_EncodeCpltCallback>
}
 8003364:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003366:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003368:	69e1      	ldr	r1, [r4, #28]
 800336a:	4620      	mov	r0, r4
 800336c:	f7fd ffe2 	bl	8001334 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	6263      	str	r3, [r4, #36]	@ 0x24
 8003374:	e7e4      	b.n	8003340 <JPEG_DMA_PollResidualData+0x80>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003376:	4620      	mov	r0, r4
 8003378:	f7fd ffec 	bl	8001354 <HAL_JPEG_DecodeCpltCallback>
 800337c:	e7f2      	b.n	8003364 <JPEG_DMA_PollResidualData+0xa4>

0800337e <JPEG_DMA_EndProcess>:
{
 800337e:	b510      	push	{r4, lr}
 8003380:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8003382:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8003384:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003392:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003394:	429a      	cmp	r2, r3
 8003396:	d01e      	beq.n	80033d6 <JPEG_DMA_EndProcess+0x58>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339c:	f013 0f10 	tst.w	r3, #16
 80033a0:	d12c      	bne.n	80033fc <JPEG_DMA_EndProcess+0x7e>
    if (hjpeg->JpegOutCount > 0UL)
 80033a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033a4:	b9f3      	cbnz	r3, 80033e4 <JPEG_DMA_EndProcess+0x66>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80033b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80033b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80033b4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
 80033b8:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80033ba:	2200      	movs	r2, #0
 80033bc:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80033c0:	2201      	movs	r2, #1
 80033c2:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d012      	beq.n	80033f4 <JPEG_DMA_EndProcess+0x76>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff fd75 	bl	8002ebe <HAL_JPEG_EncodeCpltCallback>
 80033d4:	e016      	b.n	8003404 <JPEG_DMA_EndProcess+0x86>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80033d6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80033d8:	69c1      	ldr	r1, [r0, #28]
 80033da:	f7fd ffab 	bl	8001334 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80033e2:	e7d9      	b.n	8003398 <JPEG_DMA_EndProcess+0x1a>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80033e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80033e6:	69e1      	ldr	r1, [r4, #28]
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7fd ffa3 	bl	8001334 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80033f2:	e7d8      	b.n	80033a6 <JPEG_DMA_EndProcess+0x28>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7fd ffad 	bl	8001354 <HAL_JPEG_DecodeCpltCallback>
 80033fa:	e003      	b.n	8003404 <JPEG_DMA_EndProcess+0x86>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80033fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80033fe:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003402:	d000      	beq.n	8003406 <JPEG_DMA_EndProcess+0x88>
}
 8003404:	bd10      	pop	{r4, pc}
    JPEG_DMA_PollResidualData(hjpeg);
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff ff5a 	bl	80032c0 <JPEG_DMA_PollResidualData>
}
 800340c:	e7fa      	b.n	8003404 <JPEG_DMA_EndProcess+0x86>

0800340e <JPEG_MDMAOutAbortCallback>:
{
 800340e:	b508      	push	{r3, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003410:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8003412:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003414:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8003418:	d100      	bne.n	800341c <JPEG_MDMAOutAbortCallback+0xe>
}
 800341a:	bd08      	pop	{r3, pc}
    JPEG_DMA_EndProcess(hjpeg);
 800341c:	f7ff ffaf 	bl	800337e <JPEG_DMA_EndProcess>
}
 8003420:	e7fb      	b.n	800341a <JPEG_MDMAOutAbortCallback+0xc>

08003422 <JPEG_MDMAOutCpltCallback>:
{
 8003422:	b530      	push	{r4, r5, lr}
 8003424:	b083      	sub	sp, #12
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003426:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800342c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8003432:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003434:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003438:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d001      	beq.n	8003448 <JPEG_MDMAOutCpltCallback+0x26>
}
 8003444:	b003      	add	sp, #12
 8003446:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344c:	f013 0f20 	tst.w	r3, #32
 8003450:	d005      	beq.n	800345e <JPEG_MDMAOutCpltCallback+0x3c>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003456:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800345a:	6313      	str	r3, [r2, #48]	@ 0x30
 800345c:	e7f2      	b.n	8003444 <JPEG_MDMAOutCpltCallback+0x22>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800345e:	6803      	ldr	r3, [r0, #0]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8003466:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800346c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800346e:	69e1      	ldr	r1, [r4, #28]
 8003470:	4620      	mov	r0, r4
 8003472:	f7fd ff5f 	bl	8001334 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003476:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003478:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800347c:	d1e9      	bne.n	8003452 <JPEG_MDMAOutCpltCallback+0x30>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800347e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003480:	69e2      	ldr	r2, [r4, #28]
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003486:	2501      	movs	r5, #1
 8003488:	9500      	str	r5, [sp, #0]
 800348a:	3144      	adds	r1, #68	@ 0x44
 800348c:	f000 f954 	bl	8003738 <HAL_MDMA_Start_IT>
 8003490:	2800      	cmp	r0, #0
 8003492:	d0de      	beq.n	8003452 <JPEG_MDMAOutCpltCallback+0x30>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003494:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800349c:	2306      	movs	r3, #6
 800349e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7fd ff52 	bl	800134c <HAL_JPEG_ErrorCallback>
          return;
 80034a8:	e7cc      	b.n	8003444 <JPEG_MDMAOutCpltCallback+0x22>

080034aa <HAL_JPEG_IRQHandler>:
{
 80034aa:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 80034ac:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80034b0:	3b03      	subs	r3, #3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d900      	bls.n	80034b8 <HAL_JPEG_IRQHandler+0xe>
}
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	4604      	mov	r4, r0
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80034ba:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d030      	beq.n	8003526 <HAL_JPEG_IRQHandler+0x7c>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80034c4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d1f3      	bne.n	80034b6 <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80034ce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d029      	beq.n	800352c <HAL_JPEG_IRQHandler+0x82>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034dc:	f012 0f20 	tst.w	r2, #32
 80034e0:	d0e9      	beq.n	80034b6 <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80034e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e8:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80034f6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80034fa:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003500:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003504:	6393      	str	r3, [r2, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8003506:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003508:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d026      	beq.n	8003560 <HAL_JPEG_IRQHandler+0xb6>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8003512:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003514:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d023      	beq.n	8003566 <HAL_JPEG_IRQHandler+0xbc>
      JPEG_DMA_EndProcess(hjpeg);
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff ff2d 	bl	800337e <JPEG_DMA_EndProcess>
}
 8003524:	e7c7      	b.n	80034b6 <HAL_JPEG_IRQHandler+0xc>
        (void) JPEG_Process(hjpeg);
 8003526:	f7ff fe3d 	bl	80031a4 <JPEG_Process>
 800352a:	e7c4      	b.n	80034b6 <HAL_JPEG_IRQHandler+0xc>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800352c:	6803      	ldr	r3, [r0, #0]
 800352e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003530:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003534:	d0d0      	beq.n	80034d8 <HAL_JPEG_IRQHandler+0x2e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8003536:	1d05      	adds	r5, r0, #4
 8003538:	4629      	mov	r1, r5
 800353a:	f7ff fbab 	bl	8002c94 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8003542:	4629      	mov	r1, r5
 8003544:	4620      	mov	r0, r4
 8003546:	f7fd fed3 	bl	80012f0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800354e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003552:	6313      	str	r3, [r2, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8003558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800355c:	6393      	str	r3, [r2, #56]	@ 0x38
 800355e:	e7bb      	b.n	80034d8 <HAL_JPEG_IRQHandler+0x2e>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8003560:	f000 f940 	bl	80037e4 <HAL_MDMA_Abort_IT>
 8003564:	e7d5      	b.n	8003512 <HAL_JPEG_IRQHandler+0x68>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8003566:	f000 f93d 	bl	80037e4 <HAL_MDMA_Abort_IT>
 800356a:	e7a4      	b.n	80034b6 <HAL_JPEG_IRQHandler+0xc>

0800356c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800356c:	b470      	push	{r4, r5, r6}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800356e:	6805      	ldr	r5, [r0, #0]
 8003570:	696e      	ldr	r6, [r5, #20]
 8003572:	4c17      	ldr	r4, [pc, #92]	@ (80035d0 <MDMA_SetConfig+0x64>)
 8003574:	4034      	ands	r4, r6
 8003576:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800357a:	431c      	orrs	r4, r3
 800357c:	616c      	str	r4, [r5, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800357e:	6805      	ldr	r5, [r0, #0]
 8003580:	696b      	ldr	r3, [r5, #20]
 8003582:	9c03      	ldr	r4, [sp, #12]
 8003584:	3c01      	subs	r4, #1
 8003586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800358a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800358e:	616b      	str	r3, [r5, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8003590:	6803      	ldr	r3, [r0, #0]
 8003592:	241f      	movs	r4, #31
 8003594:	605c      	str	r4, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8003596:	6803      	ldr	r3, [r0, #0]
 8003598:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800359a:	6803      	ldr	r3, [r0, #0]
 800359c:	6199      	str	r1, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800359e:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80035a2:	6801      	ldr	r1, [r0, #0]
 80035a4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80035a6:	bf0c      	ite	eq
 80035a8:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80035ac:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
 80035b0:	628b      	str	r3, [r1, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80035b2:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80035b6:	6802      	ldr	r2, [r0, #0]
 80035b8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80035ba:	bf0c      	ite	eq
 80035bc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80035c0:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 80035c4:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80035cc:	bc70      	pop	{r4, r5, r6}
 80035ce:	4770      	bx	lr
 80035d0:	fffe0000 	.word	0xfffe0000

080035d4 <HAL_MDMA_Init>:
{
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7fe fcda 	bl	8001f90 <HAL_GetTick>
  if(hmdma == NULL)
 80035dc:	2c00      	cmp	r4, #0
 80035de:	d07e      	beq.n	80036de <HAL_MDMA_Init+0x10a>
 80035e0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hmdma);
 80035e2:	2300      	movs	r3, #0
 80035e4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80035e8:	2302      	movs	r3, #2
 80035ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	68d3      	ldr	r3, [r2, #12]
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	f012 0f01 	tst.w	r2, #1
 8003600:	d00b      	beq.n	800361a <HAL_MDMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003602:	f7fe fcc5 	bl	8001f90 <HAL_GetTick>
 8003606:	1b43      	subs	r3, r0, r5
 8003608:	2b05      	cmp	r3, #5
 800360a:	d9f5      	bls.n	80035f8 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800360c:	2340      	movs	r3, #64	@ 0x40
 800360e:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003610:	2303      	movs	r3, #3
 8003612:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      return HAL_ERROR;
 8003616:	2001      	movs	r0, #1
 8003618:	e03e      	b.n	8003698 <HAL_MDMA_Init+0xc4>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800361a:	68e2      	ldr	r2, [r4, #12]
 800361c:	6921      	ldr	r1, [r4, #16]
 800361e:	430a      	orrs	r2, r1
 8003620:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003622:	6822      	ldr	r2, [r4, #0]
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003624:	6963      	ldr	r3, [r4, #20]
 8003626:	69a1      	ldr	r1, [r4, #24]
 8003628:	430b      	orrs	r3, r1
 800362a:	69e1      	ldr	r1, [r4, #28]
 800362c:	430b      	orrs	r3, r1
 800362e:	6a21      	ldr	r1, [r4, #32]
 8003630:	430b      	orrs	r3, r1
 8003632:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003634:	430b      	orrs	r3, r1
 8003636:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003638:	430b      	orrs	r3, r1
 800363a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800363c:	430b      	orrs	r3, r1
 800363e:	68a1      	ldr	r1, [r4, #8]
 8003640:	430b      	orrs	r3, r1
 8003642:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003644:	3901      	subs	r1, #1
 8003646:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800364a:	6113      	str	r3, [r2, #16]
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800364c:	6863      	ldr	r3, [r4, #4]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003652:	d022      	beq.n	800369a <HAL_MDMA_Init+0xc6>
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800365a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800365c:	4293      	cmp	r3, r2
 800365e:	db22      	blt.n	80036a6 <HAL_MDMA_Init+0xd2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	6213      	str	r3, [r2, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003666:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003668:	2b00      	cmp	r3, #0
 800366a:	db27      	blt.n	80036bc <HAL_MDMA_Init+0xe8>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800366c:	6821      	ldr	r1, [r4, #0]
 800366e:	6a0a      	ldr	r2, [r1, #32]
 8003670:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8003674:	620b      	str	r3, [r1, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d02b      	beq.n	80036d6 <HAL_MDMA_Init+0x102>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	6293      	str	r3, [r2, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	2000      	movs	r0, #0
 8003688:	6258      	str	r0, [r3, #36]	@ 0x24
  hmdma->FirstLinkedListNodeAddress  = 0;
 800368a:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800368c:	6620      	str	r0, [r4, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800368e:	6660      	str	r0, [r4, #100]	@ 0x64
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003690:	66a0      	str	r0, [r4, #104]	@ 0x68
  hmdma->State = HAL_MDMA_STATE_READY;
 8003692:	2301      	movs	r3, #1
 8003694:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003698:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	6913      	ldr	r3, [r2, #16]
 800369e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80036a2:	6113      	str	r3, [r2, #16]
 80036a4:	e7d6      	b.n	8003654 <HAL_MDMA_Init+0x80>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	6953      	ldr	r3, [r2, #20]
 80036aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ae:	6153      	str	r3, [r2, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80036b0:	6822      	ldr	r2, [r4, #0]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80036b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036b4:	425b      	negs	r3, r3
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	6213      	str	r3, [r2, #32]
 80036ba:	e7d4      	b.n	8003666 <HAL_MDMA_Init+0x92>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	6953      	ldr	r3, [r2, #20]
 80036c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036c4:	6153      	str	r3, [r2, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80036c6:	6821      	ldr	r1, [r4, #0]
 80036c8:	6a0b      	ldr	r3, [r1, #32]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80036ca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80036cc:	4252      	negs	r2, r2
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80036ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036d2:	620b      	str	r3, [r1, #32]
 80036d4:	e7cf      	b.n	8003676 <HAL_MDMA_Init+0xa2>
    hmdma->Instance->CTBR = 0;
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	629a      	str	r2, [r3, #40]	@ 0x28
 80036dc:	e7d2      	b.n	8003684 <HAL_MDMA_Init+0xb0>
    return HAL_ERROR;
 80036de:	2001      	movs	r0, #1
 80036e0:	e7da      	b.n	8003698 <HAL_MDMA_Init+0xc4>

080036e2 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80036e2:	4603      	mov	r3, r0
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d025      	beq.n	8003734 <HAL_MDMA_DeInit+0x52>
  __HAL_MDMA_DISABLE(hmdma);
 80036e8:	6801      	ldr	r1, [r0, #0]
 80036ea:	68ca      	ldr	r2, [r1, #12]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	60ca      	str	r2, [r1, #12]
  hmdma->Instance->CCR  = 0;
 80036f2:	6802      	ldr	r2, [r0, #0]
 80036f4:	2000      	movs	r0, #0
 80036f6:	60d0      	str	r0, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	6110      	str	r0, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	6150      	str	r0, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	6190      	str	r0, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	61d0      	str	r0, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	6210      	str	r0, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	6250      	str	r0, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	6290      	str	r0, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	6310      	str	r0, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	6350      	str	r0, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	211f      	movs	r1, #31
 8003720:	6051      	str	r1, [r2, #4]
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003722:	65d8      	str	r0, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003724:	6618      	str	r0, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003726:	6658      	str	r0, [r3, #100]	@ 0x64
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003728:	6698      	str	r0, [r3, #104]	@ 0x68
  hmdma->State = HAL_MDMA_STATE_RESET;
 800372a:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800372e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  return HAL_OK;
 8003732:	4770      	bx	lr
    return HAL_ERROR;
 8003734:	2001      	movs	r0, #1
}
 8003736:	4770      	bx	lr

08003738 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 8003738:	2800      	cmp	r0, #0
 800373a:	d04f      	beq.n	80037dc <HAL_MDMA_Start_IT+0xa4>
{
 800373c:	b530      	push	{r4, r5, lr}
 800373e:	b083      	sub	sp, #12
 8003740:	4604      	mov	r4, r0
  __HAL_LOCK(hmdma);
 8003742:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003746:	2801      	cmp	r0, #1
 8003748:	d04a      	beq.n	80037e0 <HAL_MDMA_Start_IT+0xa8>
 800374a:	2001      	movs	r0, #1
 800374c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003750:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8003754:	b2c0      	uxtb	r0, r0
 8003756:	2801      	cmp	r0, #1
 8003758:	d005      	beq.n	8003766 <HAL_MDMA_Start_IT+0x2e>
    __HAL_UNLOCK(hmdma);
 800375a:	2300      	movs	r3, #0
 800375c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_BUSY;
 8003760:	2002      	movs	r0, #2
}
 8003762:	b003      	add	sp, #12
 8003764:	bd30      	pop	{r4, r5, pc}
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8003766:	2002      	movs	r0, #2
 8003768:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800376c:	2000      	movs	r0, #0
 800376e:	66a0      	str	r0, [r4, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8003770:	6825      	ldr	r5, [r4, #0]
 8003772:	68e8      	ldr	r0, [r5, #12]
 8003774:	f020 0001 	bic.w	r0, r0, #1
 8003778:	60e8      	str	r0, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800377a:	9806      	ldr	r0, [sp, #24]
 800377c:	9000      	str	r0, [sp, #0]
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff fef4 	bl	800356c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	68d3      	ldr	r3, [r2, #12]
 8003788:	f043 0306 	orr.w	r3, r3, #6
 800378c:	60d3      	str	r3, [r2, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800378e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003790:	b123      	cbz	r3, 800379c <HAL_MDMA_Start_IT+0x64>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	68d3      	ldr	r3, [r2, #12]
 8003796:	f043 0310 	orr.w	r3, r3, #16
 800379a:	60d3      	str	r3, [r2, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800379c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800379e:	b123      	cbz	r3, 80037aa <HAL_MDMA_Start_IT+0x72>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	68d3      	ldr	r3, [r2, #12]
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	60d3      	str	r3, [r2, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 80037aa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80037ac:	b123      	cbz	r3, 80037b8 <HAL_MDMA_Start_IT+0x80>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	68d3      	ldr	r3, [r2, #12]
 80037b2:	f043 0320 	orr.w	r3, r3, #32
 80037b6:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_ENABLE(hmdma);
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	68d3      	ldr	r3, [r2, #12]
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	60d3      	str	r3, [r2, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80037c2:	6863      	ldr	r3, [r4, #4]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c8:	d001      	beq.n	80037ce <HAL_MDMA_Start_IT+0x96>
  return HAL_OK;
 80037ca:	2000      	movs	r0, #0
 80037cc:	e7c9      	b.n	8003762 <HAL_MDMA_Start_IT+0x2a>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	68d3      	ldr	r3, [r2, #12]
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80037d8:	2000      	movs	r0, #0
 80037da:	e7c2      	b.n	8003762 <HAL_MDMA_Start_IT+0x2a>
    return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
}
 80037de:	4770      	bx	lr
  __HAL_LOCK(hmdma);
 80037e0:	2002      	movs	r0, #2
 80037e2:	e7be      	b.n	8003762 <HAL_MDMA_Start_IT+0x2a>

080037e4 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 80037e4:	b190      	cbz	r0, 800380c <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80037e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d003      	beq.n	80037f8 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
 80037f6:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80037f8:	2304      	movs	r3, #4
 80037fa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 80037fe:	6802      	ldr	r2, [r0, #0]
 8003800:	68d3      	ldr	r3, [r2, #12]
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003808:	2000      	movs	r0, #0
 800380a:	4770      	bx	lr
    return HAL_ERROR;
 800380c:	2001      	movs	r0, #1
}
 800380e:	4770      	bx	lr

08003810 <HAL_MDMA_IRQHandler>:
{
 8003810:	b530      	push	{r4, r5, lr}
 8003812:	b083      	sub	sp, #12
 8003814:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800381a:	6801      	ldr	r1, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800381c:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8003820:	6818      	ldr	r0, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003822:	4b61      	ldr	r3, [pc, #388]	@ (80039a8 <HAL_MDMA_IRQHandler+0x198>)
 8003824:	440b      	add	r3, r1
 8003826:	f3c3 1384 	ubfx	r3, r3, #6, #5
 800382a:	2201      	movs	r2, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003830:	4203      	tst	r3, r0
 8003832:	f000 80ab 	beq.w	800398c <HAL_MDMA_IRQHandler+0x17c>
  uint32_t timeout = SystemCoreClock / 9600U;
 8003836:	4b5d      	ldr	r3, [pc, #372]	@ (80039ac <HAL_MDMA_IRQHandler+0x19c>)
 8003838:	681d      	ldr	r5, [r3, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800383a:	680b      	ldr	r3, [r1, #0]
 800383c:	f013 0f01 	tst.w	r3, #1
 8003840:	d030      	beq.n	80038a4 <HAL_MDMA_IRQHandler+0x94>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003842:	68cb      	ldr	r3, [r1, #12]
 8003844:	f013 0f02 	tst.w	r3, #2
 8003848:	d02c      	beq.n	80038a4 <HAL_MDMA_IRQHandler+0x94>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800384a:	68cb      	ldr	r3, [r1, #12]
 800384c:	f023 0302 	bic.w	r3, r3, #2
 8003850:	60cb      	str	r3, [r1, #12]
      errorFlag = hmdma->Instance->CESR;
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	6893      	ldr	r3, [r2, #8]
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003856:	f013 0f80 	tst.w	r3, #128	@ 0x80
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800385a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800385c:	bf0c      	ite	eq
 800385e:	f041 0101 	orreq.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003862:	f041 0102 	orrne.w	r1, r1, #2
 8003866:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003868:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800386c:	d003      	beq.n	8003876 <HAL_MDMA_IRQHandler+0x66>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800386e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003870:	f041 0104 	orr.w	r1, r1, #4
 8003874:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003876:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800387a:	d003      	beq.n	8003884 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800387c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800387e:	f041 0108 	orr.w	r1, r1, #8
 8003882:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003884:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003888:	d003      	beq.n	8003892 <HAL_MDMA_IRQHandler+0x82>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800388a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800388c:	f041 0110 	orr.w	r1, r1, #16
 8003890:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003892:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003896:	d003      	beq.n	80038a0 <HAL_MDMA_IRQHandler+0x90>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003898:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800389a:	f043 0320 	orr.w	r3, r3, #32
 800389e:	66a3      	str	r3, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80038a0:	2301      	movs	r3, #1
 80038a2:	6053      	str	r3, [r2, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	f012 0f10 	tst.w	r2, #16
 80038ac:	d009      	beq.n	80038c2 <HAL_MDMA_IRQHandler+0xb2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	f012 0f20 	tst.w	r2, #32
 80038b4:	d005      	beq.n	80038c2 <HAL_MDMA_IRQHandler+0xb2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80038b6:	2210      	movs	r2, #16
 80038b8:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 80038ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80038bc:	b10b      	cbz	r3, 80038c2 <HAL_MDMA_IRQHandler+0xb2>
        hmdma->XferBufferCpltCallback(hmdma);
 80038be:	4620      	mov	r0, r4
 80038c0:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	f012 0f08 	tst.w	r2, #8
 80038ca:	d009      	beq.n	80038e0 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	f012 0f10 	tst.w	r2, #16
 80038d2:	d005      	beq.n	80038e0 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80038d4:	2208      	movs	r2, #8
 80038d6:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 80038d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80038da:	b10b      	cbz	r3, 80038e0 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferBlockCpltCallback(hmdma);
 80038dc:	4620      	mov	r0, r4
 80038de:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	f012 0f04 	tst.w	r2, #4
 80038e8:	d009      	beq.n	80038fe <HAL_MDMA_IRQHandler+0xee>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	f012 0f08 	tst.w	r2, #8
 80038f0:	d005      	beq.n	80038fe <HAL_MDMA_IRQHandler+0xee>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80038f2:	2204      	movs	r2, #4
 80038f4:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80038f6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80038f8:	b10b      	cbz	r3, 80038fe <HAL_MDMA_IRQHandler+0xee>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80038fa:	4620      	mov	r0, r4
 80038fc:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	f012 0f02 	tst.w	r2, #2
 8003906:	d019      	beq.n	800393c <HAL_MDMA_IRQHandler+0x12c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	f012 0f04 	tst.w	r2, #4
 800390e:	d015      	beq.n	800393c <HAL_MDMA_IRQHandler+0x12c>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003916:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003918:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b04      	cmp	r3, #4
 8003920:	d036      	beq.n	8003990 <HAL_MDMA_IRQHandler+0x180>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	2202      	movs	r2, #2
 8003926:	605a      	str	r2, [r3, #4]
      __HAL_UNLOCK(hmdma);
 8003928:	2300      	movs	r3, #0
 800392a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800392e:	2301      	movs	r3, #1
 8003930:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8003934:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003936:	b10b      	cbz	r3, 800393c <HAL_MDMA_IRQHandler+0x12c>
        hmdma->XferCpltCallback(hmdma);
 8003938:	4620      	mov	r0, r4
 800393a:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800393c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800393e:	b32b      	cbz	r3, 800398c <HAL_MDMA_IRQHandler+0x17c>
  uint32_t timeout = SystemCoreClock / 9600U;
 8003940:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_MDMA_IRQHandler+0x1a0>)
 8003942:	fba3 3205 	umull	r3, r2, r3, r5
 8003946:	0a92      	lsrs	r2, r2, #10
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003948:	2304      	movs	r3, #4
 800394a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	68cb      	ldr	r3, [r1, #12]
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	60cb      	str	r3, [r1, #12]
      if (++count > timeout)
 8003958:	9b01      	ldr	r3, [sp, #4]
 800395a:	3301      	adds	r3, #1
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	4293      	cmp	r3, r2
 8003960:	d804      	bhi.n	800396c <HAL_MDMA_IRQHandler+0x15c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f013 0f01 	tst.w	r3, #1
 800396a:	d1f5      	bne.n	8003958 <HAL_MDMA_IRQHandler+0x148>
    __HAL_UNLOCK(hmdma);
 800396c:	2300      	movs	r3, #0
 800396e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f013 0f01 	tst.w	r3, #1
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800397a:	bf14      	ite	ne
 800397c:	2303      	movne	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800397e:	2301      	moveq	r3, #1
 8003980:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8003984:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003986:	b10b      	cbz	r3, 800398c <HAL_MDMA_IRQHandler+0x17c>
      hmdma->XferErrorCallback(hmdma);
 8003988:	4620      	mov	r0, r4
 800398a:	4798      	blx	r3
}
 800398c:	b003      	add	sp, #12
 800398e:	bd30      	pop	{r4, r5, pc}
        __HAL_UNLOCK(hmdma);
 8003990:	2300      	movs	r3, #0
 8003992:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8003996:	2301      	movs	r3, #1
 8003998:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800399c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f4      	beq.n	800398c <HAL_MDMA_IRQHandler+0x17c>
          hmdma->XferAbortCallback(hmdma);
 80039a2:	4620      	mov	r0, r4
 80039a4:	4798      	blx	r3
 80039a6:	e7f1      	b.n	800398c <HAL_MDMA_IRQHandler+0x17c>
 80039a8:	adffffc0 	.word	0xadffffc0
 80039ac:	24000008 	.word	0x24000008
 80039b0:	1b4e81b5 	.word	0x1b4e81b5

080039b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039b4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039b6:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <HAL_PWREx_ConfigSupply+0x4c>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f013 0f04 	tst.w	r3, #4
 80039be:	d107      	bne.n	80039d0 <HAL_PWREx_ConfigSupply+0x1c>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a00 <HAL_PWREx_ConfigSupply+0x4c>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	1a18      	subs	r0, r3, r0
 80039ca:	bf18      	it	ne
 80039cc:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a00 <HAL_PWREx_ConfigSupply+0x4c>)
 80039d2:	68d3      	ldr	r3, [r2, #12]
 80039d4:	f023 0307 	bic.w	r3, r3, #7
 80039d8:	4303      	orrs	r3, r0
 80039da:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 80039dc:	f7fe fad8 	bl	8001f90 <HAL_GetTick>
 80039e0:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039e2:	4d07      	ldr	r5, [pc, #28]	@ (8003a00 <HAL_PWREx_ConfigSupply+0x4c>)
 80039e4:	686b      	ldr	r3, [r5, #4]
 80039e6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80039ea:	d107      	bne.n	80039fc <HAL_PWREx_ConfigSupply+0x48>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039ec:	f7fe fad0 	bl	8001f90 <HAL_GetTick>
 80039f0:	1b00      	subs	r0, r0, r4
 80039f2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80039f6:	d9f5      	bls.n	80039e4 <HAL_PWREx_ConfigSupply+0x30>
      return HAL_ERROR;
 80039f8:	2001      	movs	r0, #1
 80039fa:	e7e8      	b.n	80039ce <HAL_PWREx_ConfigSupply+0x1a>
  return HAL_OK;
 80039fc:	2000      	movs	r0, #0
 80039fe:	e7e6      	b.n	80039ce <HAL_PWREx_ConfigSupply+0x1a>
 8003a00:	58024800 	.word	0x58024800

08003a04 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a04:	2800      	cmp	r0, #0
 8003a06:	f000 8311 	beq.w	800402c <HAL_RCC_OscConfig+0x628>
{
 8003a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0c:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	6803      	ldr	r3, [r0, #0]
 8003a10:	f013 0f01 	tst.w	r3, #1
 8003a14:	d029      	beq.n	8003a6a <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a16:	4aa1      	ldr	r2, [pc, #644]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a18:	6913      	ldr	r3, [r2, #16]
 8003a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a1e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d019      	beq.n	8003a58 <HAL_RCC_OscConfig+0x54>
 8003a24:	2b18      	cmp	r3, #24
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2e:	d043      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xb4>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d158      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xe2>
 8003a34:	4b99      	ldr	r3, [pc, #612]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e038      	b.n	8003ac2 <HAL_RCC_OscConfig+0xbe>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a50:	f002 0203 	and.w	r2, r2, #3
 8003a54:	2a02      	cmp	r2, #2
 8003a56:	d1e7      	bne.n	8003a28 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	4b90      	ldr	r3, [pc, #576]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_OscConfig+0x66>
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 82e3 	beq.w	8004030 <HAL_RCC_OscConfig+0x62c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f013 0f02 	tst.w	r3, #2
 8003a70:	f000 80a2 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a74:	4a89      	ldr	r2, [pc, #548]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a76:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a7a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003a7e:	d074      	beq.n	8003b6a <HAL_RCC_OscConfig+0x166>
 8003a80:	2b18      	cmp	r3, #24
 8003a82:	d06f      	beq.n	8003b64 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a84:	68e2      	ldr	r2, [r4, #12]
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	f000 80c3 	beq.w	8003c12 <HAL_RCC_OscConfig+0x20e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a8c:	4983      	ldr	r1, [pc, #524]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a8e:	680b      	ldr	r3, [r1, #0]
 8003a90:	f023 0319 	bic.w	r3, r3, #25
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe fa7a 	bl	8001f90 <HAL_GetTick>
 8003a9c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a9e:	4e7f      	ldr	r6, [pc, #508]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003aa0:	6833      	ldr	r3, [r6, #0]
 8003aa2:	f013 0f04 	tst.w	r3, #4
 8003aa6:	f040 80ab 	bne.w	8003c00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fe fa71 	bl	8001f90 <HAL_GetTick>
 8003aae:	1b40      	subs	r0, r0, r5
 8003ab0:	2802      	cmp	r0, #2
 8003ab2:	d9f5      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	e2c2      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab8:	4a78      	ldr	r2, [pc, #480]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac2:	6863      	ldr	r3, [r4, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d03e      	beq.n	8003b46 <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fa62 	bl	8001f90 <HAL_GetTick>
 8003acc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ace:	4e73      	ldr	r6, [pc, #460]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ad0:	6833      	ldr	r3, [r6, #0]
 8003ad2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003ad6:	d1c8      	bne.n	8003a6a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fa5a 	bl	8001f90 <HAL_GetTick>
 8003adc:	1b40      	subs	r0, r0, r5
 8003ade:	2864      	cmp	r0, #100	@ 0x64
 8003ae0:	d9f6      	bls.n	8003ad0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003ae2:	2003      	movs	r0, #3
 8003ae4:	e2ab      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_OscConfig+0x10a>
 8003aec:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003af0:	d01b      	beq.n	8003b2a <HAL_RCC_OscConfig+0x126>
 8003af2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e7d9      	b.n	8003ac2 <HAL_RCC_OscConfig+0xbe>
 8003b0e:	4b63      	ldr	r3, [pc, #396]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e7cb      	b.n	8003ac2 <HAL_RCC_OscConfig+0xbe>
 8003b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e7bd      	b.n	8003ac2 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8003b46:	f7fe fa23 	bl	8001f90 <HAL_GetTick>
 8003b4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b4c:	4e53      	ldr	r6, [pc, #332]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b4e:	6833      	ldr	r3, [r6, #0]
 8003b50:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003b54:	d089      	beq.n	8003a6a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b56:	f7fe fa1b 	bl	8001f90 <HAL_GetTick>
 8003b5a:	1b40      	subs	r0, r0, r5
 8003b5c:	2864      	cmp	r0, #100	@ 0x64
 8003b5e:	d9f6      	bls.n	8003b4e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8003b60:	2003      	movs	r0, #3
 8003b62:	e26c      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b64:	f012 0f03 	tst.w	r2, #3
 8003b68:	d18c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x80>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f013 0f04 	tst.w	r3, #4
 8003b72:	d003      	beq.n	8003b7c <HAL_RCC_OscConfig+0x178>
 8003b74:	68e3      	ldr	r3, [r4, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 825c 	beq.w	8004034 <HAL_RCC_OscConfig+0x630>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b7c:	4a47      	ldr	r2, [pc, #284]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	f023 0319 	bic.w	r3, r3, #25
 8003b84:	68e1      	ldr	r1, [r4, #12]
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fa01 	bl	8001f90 <HAL_GetTick>
 8003b8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b90:	4e42      	ldr	r6, [pc, #264]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b92:	6833      	ldr	r3, [r6, #0]
 8003b94:	f013 0f04 	tst.w	r3, #4
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x1a4>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9a:	f7fe f9f9 	bl	8001f90 <HAL_GetTick>
 8003b9e:	1b40      	subs	r0, r0, r5
 8003ba0:	2802      	cmp	r0, #2
 8003ba2:	d9f6      	bls.n	8003b92 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003ba4:	2003      	movs	r0, #3
 8003ba6:	e24a      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003baa:	6853      	ldr	r3, [r2, #4]
 8003bac:	6921      	ldr	r1, [r4, #16]
 8003bae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003bb2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003bb6:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	f013 0f10 	tst.w	r3, #16
 8003bbe:	d051      	beq.n	8003c64 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc0:	4a36      	ldr	r2, [pc, #216]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bc2:	6913      	ldr	r3, [r2, #16]
 8003bc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d039      	beq.n	8003c42 <HAL_RCC_OscConfig+0x23e>
 8003bce:	2b18      	cmp	r3, #24
 8003bd0:	d033      	beq.n	8003c3a <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bd2:	69e3      	ldr	r3, [r4, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bd8:	4a30      	ldr	r2, [pc, #192]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be2:	f7fe f9d5 	bl	8001f90 <HAL_GetTick>
 8003be6:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003be8:	4e2c      	ldr	r6, [pc, #176]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bea:	6833      	ldr	r3, [r6, #0]
 8003bec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003bf0:	d156      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x29c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bf2:	f7fe f9cd 	bl	8001f90 <HAL_GetTick>
 8003bf6:	1b40      	subs	r0, r0, r5
 8003bf8:	2802      	cmp	r0, #2
 8003bfa:	d9f6      	bls.n	8003bea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	e21e      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c02:	6853      	ldr	r3, [r2, #4]
 8003c04:	6921      	ldr	r1, [r4, #16]
 8003c06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003c0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c0e:	6053      	str	r3, [r2, #4]
 8003c10:	e7d2      	b.n	8003bb8 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 8003c12:	4a22      	ldr	r2, [pc, #136]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c1c:	f7fe f9b8 	bl	8001f90 <HAL_GetTick>
 8003c20:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c22:	4e1e      	ldr	r6, [pc, #120]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c24:	6833      	ldr	r3, [r6, #0]
 8003c26:	f013 0f04 	tst.w	r3, #4
 8003c2a:	d0c5      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2c:	f7fe f9b0 	bl	8001f90 <HAL_GetTick>
 8003c30:	1b40      	subs	r0, r0, r5
 8003c32:	2802      	cmp	r0, #2
 8003c34:	d9f6      	bls.n	8003c24 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8003c36:	2003      	movs	r0, #3
 8003c38:	e201      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c3a:	f002 0203 	and.w	r2, r2, #3
 8003c3e:	2a01      	cmp	r2, #1
 8003c40:	d1c7      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x1ce>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003c4a:	d003      	beq.n	8003c54 <HAL_RCC_OscConfig+0x250>
 8003c4c:	69e3      	ldr	r3, [r4, #28]
 8003c4e:	2b80      	cmp	r3, #128	@ 0x80
 8003c50:	f040 81f2 	bne.w	8004038 <HAL_RCC_OscConfig+0x634>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c54:	4a11      	ldr	r2, [pc, #68]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c56:	68d3      	ldr	r3, [r2, #12]
 8003c58:	6a21      	ldr	r1, [r4, #32]
 8003c5a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003c5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c62:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f013 0f08 	tst.w	r3, #8
 8003c6a:	d04a      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6c:	6963      	ldr	r3, [r4, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d033      	beq.n	8003cda <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c74:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe f988 	bl	8001f90 <HAL_GetTick>
 8003c80:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c82:	4e06      	ldr	r6, [pc, #24]	@ (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c84:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003c86:	f013 0f02 	tst.w	r3, #2
 8003c8a:	d13a      	bne.n	8003d02 <HAL_RCC_OscConfig+0x2fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fe f980 	bl	8001f90 <HAL_GetTick>
 8003c90:	1b40      	subs	r0, r0, r5
 8003c92:	2802      	cmp	r0, #2
 8003c94:	d9f6      	bls.n	8003c84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c96:	2003      	movs	r0, #3
 8003c98:	e1d1      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ca0:	4a8c      	ldr	r2, [pc, #560]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	68d3      	ldr	r3, [r2, #12]
 8003ca4:	6a21      	ldr	r1, [r4, #32]
 8003ca6:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003caa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003cae:	60d3      	str	r3, [r2, #12]
 8003cb0:	e7d8      	b.n	8003c64 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 8003cb2:	4a88      	ldr	r2, [pc, #544]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003cbc:	f7fe f968 	bl	8001f90 <HAL_GetTick>
 8003cc0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cc2:	4e84      	ldr	r6, [pc, #528]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	6833      	ldr	r3, [r6, #0]
 8003cc6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003cca:	d0cb      	beq.n	8003c64 <HAL_RCC_OscConfig+0x260>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ccc:	f7fe f960 	bl	8001f90 <HAL_GetTick>
 8003cd0:	1b40      	subs	r0, r0, r5
 8003cd2:	2802      	cmp	r0, #2
 8003cd4:	d9f6      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x2c0>
            return HAL_TIMEOUT;
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	e1b1      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cda:	4a7e      	ldr	r2, [pc, #504]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe f954 	bl	8001f90 <HAL_GetTick>
 8003ce8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cea:	4e7a      	ldr	r6, [pc, #488]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003cec:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003cee:	f013 0f02 	tst.w	r3, #2
 8003cf2:	d006      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fe f94c 	bl	8001f90 <HAL_GetTick>
 8003cf8:	1b40      	subs	r0, r0, r5
 8003cfa:	2802      	cmp	r0, #2
 8003cfc:	d9f6      	bls.n	8003cec <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003cfe:	2003      	movs	r0, #3
 8003d00:	e19d      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	f013 0f20 	tst.w	r3, #32
 8003d08:	d029      	beq.n	8003d5e <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d0a:	69a3      	ldr	r3, [r4, #24]
 8003d0c:	b19b      	cbz	r3, 8003d36 <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0e:	4a71      	ldr	r2, [pc, #452]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	6813      	ldr	r3, [r2, #0]
 8003d12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d18:	f7fe f93a 	bl	8001f90 <HAL_GetTick>
 8003d1c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d1e:	4e6d      	ldr	r6, [pc, #436]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	6833      	ldr	r3, [r6, #0]
 8003d22:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003d26:	d11a      	bne.n	8003d5e <HAL_RCC_OscConfig+0x35a>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d28:	f7fe f932 	bl	8001f90 <HAL_GetTick>
 8003d2c:	1b40      	subs	r0, r0, r5
 8003d2e:	2802      	cmp	r0, #2
 8003d30:	d9f6      	bls.n	8003d20 <HAL_RCC_OscConfig+0x31c>
        {
          return HAL_TIMEOUT;
 8003d32:	2003      	movs	r0, #3
 8003d34:	e183      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d36:	4a67      	ldr	r2, [pc, #412]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	6813      	ldr	r3, [r2, #0]
 8003d3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d40:	f7fe f926 	bl	8001f90 <HAL_GetTick>
 8003d44:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d46:	4e63      	ldr	r6, [pc, #396]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	6833      	ldr	r3, [r6, #0]
 8003d4a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003d4e:	d006      	beq.n	8003d5e <HAL_RCC_OscConfig+0x35a>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d50:	f7fe f91e 	bl	8001f90 <HAL_GetTick>
 8003d54:	1b40      	subs	r0, r0, r5
 8003d56:	2802      	cmp	r0, #2
 8003d58:	d9f6      	bls.n	8003d48 <HAL_RCC_OscConfig+0x344>
        {
          return HAL_TIMEOUT;
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	e16f      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	f013 0f04 	tst.w	r3, #4
 8003d64:	d122      	bne.n	8003dac <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8167 	beq.w	800403c <HAL_RCC_OscConfig+0x638>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d6e:	4a59      	ldr	r2, [pc, #356]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003d70:	6912      	ldr	r2, [r2, #16]
 8003d72:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003d76:	2a18      	cmp	r2, #24
 8003d78:	f000 810e 	beq.w	8003f98 <HAL_RCC_OscConfig+0x594>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	f000 8094 	beq.w	8003eaa <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4a54      	ldr	r2, [pc, #336]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	6813      	ldr	r3, [r2, #0]
 8003d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f900 	bl	8001f90 <HAL_GetTick>
 8003d90:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d92:	4d50      	ldr	r5, [pc, #320]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003d9a:	f000 80fb 	beq.w	8003f94 <HAL_RCC_OscConfig+0x590>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe f8f7 	bl	8001f90 <HAL_GetTick>
 8003da2:	1b00      	subs	r0, r0, r4
 8003da4:	2802      	cmp	r0, #2
 8003da6:	d9f5      	bls.n	8003d94 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8003da8:	2003      	movs	r0, #3
 8003daa:	e148      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
    PWR->CR1 |= PWR_CR1_DBP;
 8003dac:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed8 <HAL_RCC_OscConfig+0x4d4>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003db6:	f7fe f8eb 	bl	8001f90 <HAL_GetTick>
 8003dba:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dbc:	4e46      	ldr	r6, [pc, #280]	@ (8003ed8 <HAL_RCC_OscConfig+0x4d4>)
 8003dbe:	6833      	ldr	r3, [r6, #0]
 8003dc0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003dc4:	d106      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x3d0>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fe f8e3 	bl	8001f90 <HAL_GetTick>
 8003dca:	1b40      	subs	r0, r0, r5
 8003dcc:	2864      	cmp	r0, #100	@ 0x64
 8003dce:	d9f6      	bls.n	8003dbe <HAL_RCC_OscConfig+0x3ba>
        return HAL_TIMEOUT;
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	e134      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	68a3      	ldr	r3, [r4, #8]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d00e      	beq.n	8003df8 <HAL_RCC_OscConfig+0x3f4>
 8003dda:	bb33      	cbnz	r3, 8003e2a <HAL_RCC_OscConfig+0x426>
 8003ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003de6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003de8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dec:	671a      	str	r2, [r3, #112]	@ 0x70
 8003dee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003df0:	f022 0204 	bic.w	r2, r2, #4
 8003df4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003df6:	e004      	b.n	8003e02 <HAL_RCC_OscConfig+0x3fe>
 8003df8:	4a36      	ldr	r2, [pc, #216]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003dfa:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e02:	68a3      	ldr	r3, [r4, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d03e      	beq.n	8003e86 <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 8003e08:	f7fe f8c2 	bl	8001f90 <HAL_GetTick>
 8003e0c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e0e:	4e31      	ldr	r6, [pc, #196]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f241 3788 	movw	r7, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e14:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003e16:	f013 0f02 	tst.w	r3, #2
 8003e1a:	d1a4      	bne.n	8003d66 <HAL_RCC_OscConfig+0x362>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7fe f8b8 	bl	8001f90 <HAL_GetTick>
 8003e20:	1b40      	subs	r0, r0, r5
 8003e22:	42b8      	cmp	r0, r7
 8003e24:	d9f6      	bls.n	8003e14 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 8003e26:	2003      	movs	r0, #3
 8003e28:	e109      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d00f      	beq.n	8003e4e <HAL_RCC_OscConfig+0x44a>
 8003e2e:	2b85      	cmp	r3, #133	@ 0x85
 8003e30:	d01b      	beq.n	8003e6a <HAL_RCC_OscConfig+0x466>
 8003e32:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e4a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e4c:	e7d9      	b.n	8003e02 <HAL_RCC_OscConfig+0x3fe>
 8003e4e:	4b21      	ldr	r3, [pc, #132]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e52:	f042 0204 	orr.w	r2, r2, #4
 8003e56:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e5e:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e68:	e7cb      	b.n	8003e02 <HAL_RCC_OscConfig+0x3fe>
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e6e:	f042 0204 	orr.w	r2, r2, #4
 8003e72:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e7a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e84:	e7bd      	b.n	8003e02 <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 8003e86:	f7fe f883 	bl	8001f90 <HAL_GetTick>
 8003e8a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e8c:	4e11      	ldr	r6, [pc, #68]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f241 3788 	movw	r7, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e92:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003e94:	f013 0f02 	tst.w	r3, #2
 8003e98:	f43f af65 	beq.w	8003d66 <HAL_RCC_OscConfig+0x362>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9c:	f7fe f878 	bl	8001f90 <HAL_GetTick>
 8003ea0:	1b40      	subs	r0, r0, r5
 8003ea2:	42b8      	cmp	r0, r7
 8003ea4:	d9f5      	bls.n	8003e92 <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8003ea6:	2003      	movs	r0, #3
 8003ea8:	e0c9      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	6813      	ldr	r3, [r2, #0]
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f86c 	bl	8001f90 <HAL_GetTick>
 8003eb8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eba:	4e06      	ldr	r6, [pc, #24]	@ (8003ed4 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003ec2:	d00b      	beq.n	8003edc <HAL_RCC_OscConfig+0x4d8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe f864 	bl	8001f90 <HAL_GetTick>
 8003ec8:	1b40      	subs	r0, r0, r5
 8003eca:	2802      	cmp	r0, #2
 8003ecc:	d9f6      	bls.n	8003ebc <HAL_RCC_OscConfig+0x4b8>
            return HAL_TIMEOUT;
 8003ece:	2003      	movs	r0, #3
 8003ed0:	e0b5      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
 8003ed8:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003edc:	4b5f      	ldr	r3, [pc, #380]	@ (800405c <HAL_RCC_OscConfig+0x658>)
 8003ede:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003ee0:	4a5f      	ldr	r2, [pc, #380]	@ (8004060 <HAL_RCC_OscConfig+0x65c>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003eea:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ef0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003ef2:	3a01      	subs	r2, #1
 8003ef4:	0252      	lsls	r2, r2, #9
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003efa:	3901      	subs	r1, #1
 8003efc:	0409      	lsls	r1, r1, #16
 8003efe:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8003f02:	430a      	orrs	r2, r1
 8003f04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003f06:	3901      	subs	r1, #1
 8003f08:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003f10:	3901      	subs	r1, #1
 8003f12:	0609      	lsls	r1, r1, #24
 8003f14:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f24:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003f26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003f28:	4a4e      	ldr	r2, [pc, #312]	@ (8004064 <HAL_RCC_OscConfig+0x660>)
 8003f2a:	4002      	ands	r2, r0
 8003f2c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003f30:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f34:	f022 020c 	bic.w	r2, r2, #12
 8003f38:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	f022 0202 	bic.w	r2, r2, #2
 8003f44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003f46:	430a      	orrs	r2, r1
 8003f48:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003f50:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f54:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003f58:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f60:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003f70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f72:	f7fe f80d 	bl	8001f90 <HAL_GetTick>
 8003f76:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f78:	4d38      	ldr	r5, [pc, #224]	@ (800405c <HAL_RCC_OscConfig+0x658>)
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fe f805 	bl	8001f90 <HAL_GetTick>
 8003f86:	1b00      	subs	r0, r0, r4
 8003f88:	2802      	cmp	r0, #2
 8003f8a:	d9f6      	bls.n	8003f7a <HAL_RCC_OscConfig+0x576>
            return HAL_TIMEOUT;
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	e056      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8003f90:	2000      	movs	r0, #0
 8003f92:	e054      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e052      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f98:	4930      	ldr	r1, [pc, #192]	@ (800405c <HAL_RCC_OscConfig+0x658>)
 8003f9a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f9c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d04e      	beq.n	8004040 <HAL_RCC_OscConfig+0x63c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	d14b      	bne.n	8004044 <HAL_RCC_OscConfig+0x640>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fac:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d148      	bne.n	8004048 <HAL_RCC_OscConfig+0x644>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fb6:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003fba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d144      	bne.n	800404c <HAL_RCC_OscConfig+0x648>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fc2:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003fc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003fc8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d140      	bne.n	8004050 <HAL_RCC_OscConfig+0x64c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fce:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003fd2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003fd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d13c      	bne.n	8004054 <HAL_RCC_OscConfig+0x650>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fda:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003fde:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003fe0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fe2:	4298      	cmp	r0, r3
 8003fe4:	d138      	bne.n	8004058 <HAL_RCC_OscConfig+0x654>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800405c <HAL_RCC_OscConfig+0x658>)
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fea:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fee:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x5f4>
  return HAL_OK;
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e022      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ff8:	4a18      	ldr	r2, [pc, #96]	@ (800405c <HAL_RCC_OscConfig+0x658>)
 8003ffa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8004002:	f7fd ffc5 	bl	8001f90 <HAL_GetTick>
 8004006:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004008:	f7fd ffc2 	bl	8001f90 <HAL_GetTick>
 800400c:	42a8      	cmp	r0, r5
 800400e:	d0fb      	beq.n	8004008 <HAL_RCC_OscConfig+0x604>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004010:	4a12      	ldr	r2, [pc, #72]	@ (800405c <HAL_RCC_OscConfig+0x658>)
 8004012:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8004014:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004016:	4b13      	ldr	r3, [pc, #76]	@ (8004064 <HAL_RCC_OscConfig+0x660>)
 8004018:	4003      	ands	r3, r0
 800401a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800401e:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004020:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 8004028:	2000      	movs	r0, #0
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
    return HAL_ERROR;
 800402c:	2001      	movs	r0, #1
}
 800402e:	4770      	bx	lr
        return HAL_ERROR;
 8004030:	2001      	movs	r0, #1
 8004032:	e004      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
        return HAL_ERROR;
 8004034:	2001      	movs	r0, #1
 8004036:	e002      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
        return HAL_ERROR;
 8004038:	2001      	movs	r0, #1
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
  return HAL_OK;
 800403c:	2000      	movs	r0, #0
}
 800403e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8004040:	2001      	movs	r0, #1
 8004042:	e7fc      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8004044:	2001      	movs	r0, #1
 8004046:	e7fa      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8004048:	2001      	movs	r0, #1
 800404a:	e7f8      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 800404c:	2001      	movs	r0, #1
 800404e:	e7f6      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8004050:	2001      	movs	r0, #1
 8004052:	e7f4      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8004054:	2001      	movs	r0, #1
 8004056:	e7f2      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 8004058:	2001      	movs	r0, #1
 800405a:	e7f0      	b.n	800403e <HAL_RCC_OscConfig+0x63a>
 800405c:	58024400 	.word	0x58024400
 8004060:	fffffc0c 	.word	0xfffffc0c
 8004064:	ffff0007 	.word	0xffff0007

08004068 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004068:	4b74      	ldr	r3, [pc, #464]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004070:	2b10      	cmp	r3, #16
 8004072:	f000 80de 	beq.w	8004232 <HAL_RCC_GetSysClockFreq+0x1ca>
 8004076:	2b18      	cmp	r3, #24
 8004078:	d00f      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x32>
 800407a:	b10b      	cbz	r3, 8004080 <HAL_RCC_GetSysClockFreq+0x18>
      }

      break;

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800407c:	4870      	ldr	r0, [pc, #448]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800407e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004080:	4b6e      	ldr	r3, [pc, #440]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f013 0f20 	tst.w	r3, #32
 8004088:	f000 80d5 	beq.w	8004236 <HAL_RCC_GetSysClockFreq+0x1ce>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800408c:	4b6b      	ldr	r3, [pc, #428]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004094:	486b      	ldr	r0, [pc, #428]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004096:	40d8      	lsrs	r0, r3
 8004098:	4770      	bx	lr
{
 800409a:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800409c:	4b67      	ldr	r3, [pc, #412]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800409e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80040a0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80040a2:	f3c1 1005 	ubfx	r0, r1, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040a6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80040a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

      if (pllm != 0U)
 80040aa:	f411 7f7c 	tst.w	r1, #1008	@ 0x3f0
 80040ae:	f000 80a0 	beq.w	80041f2 <HAL_RCC_GetSysClockFreq+0x18a>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80040b2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040b6:	f004 0401 	and.w	r4, r4, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80040ba:	fb04 f303 	mul.w	r3, r4, r3
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040c6:	f002 0203 	and.w	r2, r2, #3
 80040ca:	2a01      	cmp	r2, #1
 80040cc:	d066      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x134>
 80040ce:	2a02      	cmp	r2, #2
 80040d0:	f000 8092 	beq.w	80041f8 <HAL_RCC_GetSysClockFreq+0x190>
 80040d4:	b1e2      	cbz	r2, 8004110 <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d6:	4b59      	ldr	r3, [pc, #356]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040de:	ee07 3a10 	vmov	s14, r3
 80040e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80040e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004248 <HAL_RCC_GetSysClockFreq+0x1e0>
 80040ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040fa:	ee07 0a10 	vmov	s14, r0
 80040fe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004102:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 800424c <HAL_RCC_GetSysClockFreq+0x1e4>
 8004106:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800410a:	ee67 7a87 	vmul.f32	s15, s15, s14
            break;
 800410e:	e061      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004110:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f013 0f20 	tst.w	r3, #32
 8004118:	d023      	beq.n	8004162 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800411a:	4b48      	ldr	r3, [pc, #288]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800411c:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004120:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8004124:	4a47      	ldr	r2, [pc, #284]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004126:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004128:	ee07 2a10 	vmov	s14, r2
 800412c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004130:	ee07 0a10 	vmov	s14, r0
 8004134:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8004138:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800413c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004140:	ee06 3a90 	vmov	s13, r3
 8004144:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004148:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8004248 <HAL_RCC_GetSysClockFreq+0x1e0>
 800414c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004160:	e038      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004162:	4b36      	ldr	r3, [pc, #216]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a10 	vmov	s14, r3
 800416e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004172:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8004248 <HAL_RCC_GetSysClockFreq+0x1e0>
 8004176:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800417a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800417e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004186:	ee07 0a10 	vmov	s14, r0
 800418a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800418e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8004250 <HAL_RCC_GetSysClockFreq+0x1e8>
 8004192:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419a:	e01b      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800419c:	4b27      	ldr	r3, [pc, #156]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a4:	ee07 3a10 	vmov	s14, r3
 80041a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80041ac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004248 <HAL_RCC_GetSysClockFreq+0x1e0>
 80041b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80041b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041c0:	ee07 0a10 	vmov	s14, r0
 80041c4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80041c8:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800424c <HAL_RCC_GetSysClockFreq+0x1e4>
 80041cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80041d0:	ee67 7a87 	vmul.f32	s15, s15, s14
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041d4:	4b19      	ldr	r3, [pc, #100]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80041dc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041de:	ee07 3a10 	vmov	s14, r3
 80041e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80041e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041ea:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80041ee:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80041f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041f6:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041f8:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004200:	ee07 3a10 	vmov	s14, r3
 8004204:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004208:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8004248 <HAL_RCC_GetSysClockFreq+0x1e0>
 800420c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004214:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800421c:	ee07 0a10 	vmov	s14, r0
 8004220:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004224:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8004254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004228:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800422c:	ee67 7a87 	vmul.f32	s15, s15, s14
            break;
 8004230:	e7d0      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x16c>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004232:	4809      	ldr	r0, [pc, #36]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004234:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004236:	4803      	ldr	r0, [pc, #12]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	58024400 	.word	0x58024400
 8004240:	003d0900 	.word	0x003d0900
 8004244:	03d09000 	.word	0x03d09000
 8004248:	39000000 	.word	0x39000000
 800424c:	4a742400 	.word	0x4a742400
 8004250:	4c742400 	.word	0x4c742400
 8004254:	4bbebc20 	.word	0x4bbebc20
 8004258:	017d7840 	.word	0x017d7840

0800425c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800425c:	2800      	cmp	r0, #0
 800425e:	f000 80c3 	beq.w	80043e8 <HAL_RCC_ClockConfig+0x18c>
{
 8004262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004266:	460d      	mov	r5, r1
 8004268:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800426a:	4b65      	ldr	r3, [pc, #404]	@ (8004400 <HAL_RCC_ClockConfig+0x1a4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	428b      	cmp	r3, r1
 8004274:	d20b      	bcs.n	800428e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004276:	4a62      	ldr	r2, [pc, #392]	@ (8004400 <HAL_RCC_ClockConfig+0x1a4>)
 8004278:	6813      	ldr	r3, [r2, #0]
 800427a:	f023 030f 	bic.w	r3, r3, #15
 800427e:	430b      	orrs	r3, r1
 8004280:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	428b      	cmp	r3, r1
 800428a:	f040 80af 	bne.w	80043ec <HAL_RCC_ClockConfig+0x190>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f013 0f04 	tst.w	r3, #4
 8004294:	d00c      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004296:	6922      	ldr	r2, [r4, #16]
 8004298:	4b5a      	ldr	r3, [pc, #360]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d905      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042a4:	4957      	ldr	r1, [pc, #348]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80042a6:	698b      	ldr	r3, [r1, #24]
 80042a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ac:	4313      	orrs	r3, r2
 80042ae:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	f013 0f08 	tst.w	r3, #8
 80042b6:	d00c      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x76>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80042b8:	6962      	ldr	r2, [r4, #20]
 80042ba:	4b52      	ldr	r3, [pc, #328]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d905      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042c6:	494f      	ldr	r1, [pc, #316]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80042c8:	69cb      	ldr	r3, [r1, #28]
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f013 0f10 	tst.w	r3, #16
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x98>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80042da:	69a2      	ldr	r2, [r4, #24]
 80042dc:	4b49      	ldr	r3, [pc, #292]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d905      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x98>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e8:	4946      	ldr	r1, [pc, #280]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80042ea:	69cb      	ldr	r3, [r1, #28]
 80042ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	f013 0f20 	tst.w	r3, #32
 80042fa:	d00c      	beq.n	8004316 <HAL_RCC_ClockConfig+0xba>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80042fc:	69e2      	ldr	r2, [r4, #28]
 80042fe:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004306:	429a      	cmp	r2, r3
 8004308:	d905      	bls.n	8004316 <HAL_RCC_ClockConfig+0xba>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800430a:	493e      	ldr	r1, [pc, #248]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 800430c:	6a0b      	ldr	r3, [r1, #32]
 800430e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004312:	4313      	orrs	r3, r2
 8004314:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	f013 0f02 	tst.w	r3, #2
 800431c:	d074      	beq.n	8004408 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800431e:	68e1      	ldr	r1, [r4, #12]
 8004320:	4a38      	ldr	r2, [pc, #224]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 8004322:	6992      	ldr	r2, [r2, #24]
 8004324:	f002 020f 	and.w	r2, r2, #15
 8004328:	4291      	cmp	r1, r2
 800432a:	d965      	bls.n	80043f8 <HAL_RCC_ClockConfig+0x19c>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432c:	4a35      	ldr	r2, [pc, #212]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 800432e:	6993      	ldr	r3, [r2, #24]
 8004330:	f023 030f 	bic.w	r3, r3, #15
 8004334:	430b      	orrs	r3, r1
 8004336:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	f013 0f01 	tst.w	r3, #1
 800433e:	d041      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x168>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004340:	4a30      	ldr	r2, [pc, #192]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 8004342:	6993      	ldr	r3, [r2, #24]
 8004344:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004348:	68a1      	ldr	r1, [r4, #8]
 800434a:	430b      	orrs	r3, r1
 800434c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	2a02      	cmp	r2, #2
 8004352:	d00a      	beq.n	800436a <HAL_RCC_ClockConfig+0x10e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004354:	2a03      	cmp	r2, #3
 8004356:	d027      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004358:	2a01      	cmp	r2, #1
 800435a:	d02c      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x15a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800435c:	4b29      	ldr	r3, [pc, #164]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f013 0f04 	tst.w	r3, #4
 8004364:	d106      	bne.n	8004374 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8004366:	2001      	movs	r0, #1
 8004368:	e0c1      	b.n	80044ee <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800436a:	4b26      	ldr	r3, [pc, #152]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004372:	d03d      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004374:	4923      	ldr	r1, [pc, #140]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 8004376:	690b      	ldr	r3, [r1, #16]
 8004378:	f023 0307 	bic.w	r3, r3, #7
 800437c:	4313      	orrs	r3, r2
 800437e:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8004380:	f7fd fe06 	bl	8001f90 <HAL_GetTick>
 8004384:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4f1f      	ldr	r7, [pc, #124]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004398:	d014      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x168>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439a:	f7fd fdf9 	bl	8001f90 <HAL_GetTick>
 800439e:	1b80      	subs	r0, r0, r6
 80043a0:	4540      	cmp	r0, r8
 80043a2:	d9f3      	bls.n	800438c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80043a4:	2003      	movs	r0, #3
 80043a6:	e0a2      	b.n	80044ee <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043a8:	4b16      	ldr	r3, [pc, #88]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80043b0:	d1e0      	bne.n	8004374 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 80043b2:	2001      	movs	r0, #1
 80043b4:	e09b      	b.n	80044ee <HAL_RCC_ClockConfig+0x292>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043b6:	4b13      	ldr	r3, [pc, #76]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80043be:	d1d9      	bne.n	8004374 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 80043c0:	2001      	movs	r0, #1
 80043c2:	e094      	b.n	80044ee <HAL_RCC_ClockConfig+0x292>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	f013 0f02 	tst.w	r3, #2
 80043ca:	d020      	beq.n	800440e <HAL_RCC_ClockConfig+0x1b2>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80043cc:	68e2      	ldr	r2, [r4, #12]
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d219      	bcs.n	800440e <HAL_RCC_ClockConfig+0x1b2>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043da:	490a      	ldr	r1, [pc, #40]	@ (8004404 <HAL_RCC_ClockConfig+0x1a8>)
 80043dc:	698b      	ldr	r3, [r1, #24]
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	4313      	orrs	r3, r2
 80043e4:	618b      	str	r3, [r1, #24]
 80043e6:	e012      	b.n	800440e <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 80043e8:	2001      	movs	r0, #1
}
 80043ea:	4770      	bx	lr
      return HAL_ERROR;
 80043ec:	2001      	movs	r0, #1
 80043ee:	e07e      	b.n	80044ee <HAL_RCC_ClockConfig+0x292>
        return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
 80043f2:	e07c      	b.n	80044ee <HAL_RCC_ClockConfig+0x292>
      return HAL_ERROR;
 80043f4:	2001      	movs	r0, #1
 80043f6:	e07a      	b.n	80044ee <HAL_RCC_ClockConfig+0x292>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f8:	f013 0f01 	tst.w	r3, #1
 80043fc:	d1a0      	bne.n	8004340 <HAL_RCC_ClockConfig+0xe4>
 80043fe:	e7e5      	b.n	80043cc <HAL_RCC_ClockConfig+0x170>
 8004400:	52002000 	.word	0x52002000
 8004404:	58024400 	.word	0x58024400
 8004408:	f013 0f01 	tst.w	r3, #1
 800440c:	d198      	bne.n	8004340 <HAL_RCC_ClockConfig+0xe4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440e:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <HAL_RCC_ClockConfig+0x298>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	42ab      	cmp	r3, r5
 8004418:	d90a      	bls.n	8004430 <HAL_RCC_ClockConfig+0x1d4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4a36      	ldr	r2, [pc, #216]	@ (80044f4 <HAL_RCC_ClockConfig+0x298>)
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	432b      	orrs	r3, r5
 8004424:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	42ab      	cmp	r3, r5
 800442e:	d1e1      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x198>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f013 0f04 	tst.w	r3, #4
 8004436:	d00c      	beq.n	8004452 <HAL_RCC_ClockConfig+0x1f6>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	4b2f      	ldr	r3, [pc, #188]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004442:	429a      	cmp	r2, r3
 8004444:	d205      	bcs.n	8004452 <HAL_RCC_ClockConfig+0x1f6>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004446:	492c      	ldr	r1, [pc, #176]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 8004448:	698b      	ldr	r3, [r1, #24]
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	4313      	orrs	r3, r2
 8004450:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	f013 0f08 	tst.w	r3, #8
 8004458:	d00c      	beq.n	8004474 <HAL_RCC_ClockConfig+0x218>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800445a:	6962      	ldr	r2, [r4, #20]
 800445c:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004464:	429a      	cmp	r2, r3
 8004466:	d205      	bcs.n	8004474 <HAL_RCC_ClockConfig+0x218>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004468:	4923      	ldr	r1, [pc, #140]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 800446a:	69cb      	ldr	r3, [r1, #28]
 800446c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004470:	4313      	orrs	r3, r2
 8004472:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	f013 0f10 	tst.w	r3, #16
 800447a:	d00c      	beq.n	8004496 <HAL_RCC_ClockConfig+0x23a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800447c:	69a2      	ldr	r2, [r4, #24]
 800447e:	4b1e      	ldr	r3, [pc, #120]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004486:	429a      	cmp	r2, r3
 8004488:	d205      	bcs.n	8004496 <HAL_RCC_ClockConfig+0x23a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800448a:	491b      	ldr	r1, [pc, #108]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 800448c:	69cb      	ldr	r3, [r1, #28]
 800448e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004492:	4313      	orrs	r3, r2
 8004494:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f013 0f20 	tst.w	r3, #32
 800449c:	d00c      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x25c>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800449e:	69e2      	ldr	r2, [r4, #28]
 80044a0:	4b15      	ldr	r3, [pc, #84]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d205      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x25c>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044ac:	4912      	ldr	r1, [pc, #72]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 80044ae:	6a0b      	ldr	r3, [r1, #32]
 80044b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b4:	4313      	orrs	r3, r2
 80044b6:	620b      	str	r3, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80044b8:	f7ff fdd6 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 80044bc:	490e      	ldr	r1, [pc, #56]	@ (80044f8 <HAL_RCC_ClockConfig+0x29c>)
 80044be:	698b      	ldr	r3, [r1, #24]
 80044c0:	4a0e      	ldr	r2, [pc, #56]	@ (80044fc <HAL_RCC_ClockConfig+0x2a0>)
 80044c2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80044ce:	698b      	ldr	r3, [r1, #24]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	5cd3      	ldrb	r3, [r2, r3]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	fa20 f303 	lsr.w	r3, r0, r3
 80044de:	4a08      	ldr	r2, [pc, #32]	@ (8004500 <HAL_RCC_ClockConfig+0x2a4>)
 80044e0:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80044e2:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_RCC_ClockConfig+0x2a8>)
 80044e4:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80044e6:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <HAL_RCC_ClockConfig+0x2ac>)
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	f7fd fcf1 	bl	8001ed0 <HAL_InitTick>
}
 80044ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f2:	bf00      	nop
 80044f4:	52002000 	.word	0x52002000
 80044f8:	58024400 	.word	0x58024400
 80044fc:	08009c48 	.word	0x08009c48
 8004500:	24000004 	.word	0x24000004
 8004504:	24000008 	.word	0x24000008
 8004508:	24000010 	.word	0x24000010

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800450e:	f7ff fdab 	bl	8004068 <HAL_RCC_GetSysClockFreq>
 8004512:	4a0b      	ldr	r2, [pc, #44]	@ (8004540 <HAL_RCC_GetHCLKFreq+0x34>)
 8004514:	6993      	ldr	r3, [r2, #24]
 8004516:	490b      	ldr	r1, [pc, #44]	@ (8004544 <HAL_RCC_GetHCLKFreq+0x38>)
 8004518:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800451c:	5ccb      	ldrb	r3, [r1, r3]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004526:	6992      	ldr	r2, [r2, #24]
 8004528:	f002 020f 	and.w	r2, r2, #15
 800452c:	5c88      	ldrb	r0, [r1, r2]
 800452e:	f000 001f 	and.w	r0, r0, #31
 8004532:	fa23 f000 	lsr.w	r0, r3, r0
 8004536:	4a04      	ldr	r2, [pc, #16]	@ (8004548 <HAL_RCC_GetHCLKFreq+0x3c>)
 8004538:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800453a:	4a04      	ldr	r2, [pc, #16]	@ (800454c <HAL_RCC_GetHCLKFreq+0x40>)
 800453c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800453e:	bd08      	pop	{r3, pc}
 8004540:	58024400 	.word	0x58024400
 8004544:	08009c48 	.word	0x08009c48
 8004548:	24000004 	.word	0x24000004
 800454c:	24000008 	.word	0x24000008

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004552:	f7ff ffdb 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004556:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800455e:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	5cd3      	ldrb	r3, [r2, r3]
 8004562:	f003 031f 	and.w	r3, r3, #31
#endif
}
 8004566:	40d8      	lsrs	r0, r3
 8004568:	bd08      	pop	{r3, pc}
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400
 8004570:	08009c48 	.word	0x08009c48

08004574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004576:	4b3e      	ldr	r3, [pc, #248]	@ (8004670 <RCCEx_PLL2_Config+0xfc>)
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d074      	beq.n	800466c <RCCEx_PLL2_Config+0xf8>
 8004582:	4606      	mov	r6, r0
 8004584:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004586:	4a3a      	ldr	r2, [pc, #232]	@ (8004670 <RCCEx_PLL2_Config+0xfc>)
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800458e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fd fcfe 	bl	8001f90 <HAL_GetTick>
 8004594:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004596:	4d36      	ldr	r5, [pc, #216]	@ (8004670 <RCCEx_PLL2_Config+0xfc>)
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800459e:	d006      	beq.n	80045ae <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045a0:	f7fd fcf6 	bl	8001f90 <HAL_GetTick>
 80045a4:	1b03      	subs	r3, r0, r4
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d9f6      	bls.n	8004598 <RCCEx_PLL2_Config+0x24>
      {
        return HAL_TIMEOUT;
 80045aa:	2003      	movs	r0, #3
 80045ac:	e05f      	b.n	800466e <RCCEx_PLL2_Config+0xfa>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045ae:	4b30      	ldr	r3, [pc, #192]	@ (8004670 <RCCEx_PLL2_Config+0xfc>)
 80045b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045b2:	6831      	ldr	r1, [r6, #0]
 80045b4:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 80045b8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80045bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80045be:	68b2      	ldr	r2, [r6, #8]
 80045c0:	3a01      	subs	r2, #1
 80045c2:	0252      	lsls	r2, r2, #9
 80045c4:	b292      	uxth	r2, r2
 80045c6:	68f1      	ldr	r1, [r6, #12]
 80045c8:	3901      	subs	r1, #1
 80045ca:	0409      	lsls	r1, r1, #16
 80045cc:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80045d0:	430a      	orrs	r2, r1
 80045d2:	6871      	ldr	r1, [r6, #4]
 80045d4:	3901      	subs	r1, #1
 80045d6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80045da:	430a      	orrs	r2, r1
 80045dc:	6931      	ldr	r1, [r6, #16]
 80045de:	3901      	subs	r1, #1
 80045e0:	0609      	lsls	r1, r1, #24
 80045e2:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80045e6:	430a      	orrs	r2, r1
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ec:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80045f0:	6971      	ldr	r1, [r6, #20]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f8:	f022 0220 	bic.w	r2, r2, #32
 80045fc:	69b1      	ldr	r1, [r6, #24]
 80045fe:	430a      	orrs	r2, r1
 8004600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004604:	f022 0210 	bic.w	r2, r2, #16
 8004608:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800460a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800460c:	69f1      	ldr	r1, [r6, #28]
 800460e:	4a19      	ldr	r2, [pc, #100]	@ (8004674 <RCCEx_PLL2_Config+0x100>)
 8004610:	4002      	ands	r2, r0
 8004612:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004616:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461a:	f042 0210 	orr.w	r2, r2, #16
 800461e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004620:	b9c7      	cbnz	r7, 8004654 <RCCEx_PLL2_Config+0xe0>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004622:	461a      	mov	r2, r3
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800462a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800462c:	4a10      	ldr	r2, [pc, #64]	@ (8004670 <RCCEx_PLL2_Config+0xfc>)
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004636:	f7fd fcab 	bl	8001f90 <HAL_GetTick>
 800463a:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800463c:	4d0c      	ldr	r5, [pc, #48]	@ (8004670 <RCCEx_PLL2_Config+0xfc>)
 800463e:	682b      	ldr	r3, [r5, #0]
 8004640:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8004644:	d110      	bne.n	8004668 <RCCEx_PLL2_Config+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004646:	f7fd fca3 	bl	8001f90 <HAL_GetTick>
 800464a:	1b00      	subs	r0, r0, r4
 800464c:	2802      	cmp	r0, #2
 800464e:	d9f6      	bls.n	800463e <RCCEx_PLL2_Config+0xca>
      {
        return HAL_TIMEOUT;
 8004650:	2003      	movs	r0, #3
 8004652:	e00c      	b.n	800466e <RCCEx_PLL2_Config+0xfa>
    else if (Divider == DIVIDER_Q_UPDATE)
 8004654:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004656:	4a06      	ldr	r2, [pc, #24]	@ (8004670 <RCCEx_PLL2_Config+0xfc>)
 8004658:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800465a:	bf0c      	ite	eq
 800465c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004660:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004664:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004666:	e7e1      	b.n	800462c <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8004668:	2000      	movs	r0, #0
 800466a:	e000      	b.n	800466e <RCCEx_PLL2_Config+0xfa>
    return HAL_ERROR;
 800466c:	2001      	movs	r0, #1
}
 800466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004670:	58024400 	.word	0x58024400
 8004674:	ffff0007 	.word	0xffff0007

08004678 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800467a:	4b3e      	ldr	r3, [pc, #248]	@ (8004774 <RCCEx_PLL3_Config+0xfc>)
 800467c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d074      	beq.n	8004770 <RCCEx_PLL3_Config+0xf8>
 8004686:	4606      	mov	r6, r0
 8004688:	460f      	mov	r7, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800468a:	4a3a      	ldr	r2, [pc, #232]	@ (8004774 <RCCEx_PLL3_Config+0xfc>)
 800468c:	6813      	ldr	r3, [r2, #0]
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004694:	f7fd fc7c 	bl	8001f90 <HAL_GetTick>
 8004698:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800469a:	4d36      	ldr	r5, [pc, #216]	@ (8004774 <RCCEx_PLL3_Config+0xfc>)
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80046a2:	d006      	beq.n	80046b2 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046a4:	f7fd fc74 	bl	8001f90 <HAL_GetTick>
 80046a8:	1b03      	subs	r3, r0, r4
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d9f6      	bls.n	800469c <RCCEx_PLL3_Config+0x24>
      {
        return HAL_TIMEOUT;
 80046ae:	2003      	movs	r0, #3
 80046b0:	e05f      	b.n	8004772 <RCCEx_PLL3_Config+0xfa>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046b2:	4b30      	ldr	r3, [pc, #192]	@ (8004774 <RCCEx_PLL3_Config+0xfc>)
 80046b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046b6:	6831      	ldr	r1, [r6, #0]
 80046b8:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 80046bc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80046c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80046c2:	68b2      	ldr	r2, [r6, #8]
 80046c4:	3a01      	subs	r2, #1
 80046c6:	0252      	lsls	r2, r2, #9
 80046c8:	b292      	uxth	r2, r2
 80046ca:	68f1      	ldr	r1, [r6, #12]
 80046cc:	3901      	subs	r1, #1
 80046ce:	0409      	lsls	r1, r1, #16
 80046d0:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80046d4:	430a      	orrs	r2, r1
 80046d6:	6871      	ldr	r1, [r6, #4]
 80046d8:	3901      	subs	r1, #1
 80046da:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80046de:	430a      	orrs	r2, r1
 80046e0:	6931      	ldr	r1, [r6, #16]
 80046e2:	3901      	subs	r1, #1
 80046e4:	0609      	lsls	r1, r1, #24
 80046e6:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80046ea:	430a      	orrs	r2, r1
 80046ec:	641a      	str	r2, [r3, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80046ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80046f4:	6971      	ldr	r1, [r6, #20]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004700:	69b1      	ldr	r1, [r6, #24]
 8004702:	430a      	orrs	r2, r1
 8004704:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800470c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800470e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8004710:	69f1      	ldr	r1, [r6, #28]
 8004712:	4a19      	ldr	r2, [pc, #100]	@ (8004778 <RCCEx_PLL3_Config+0x100>)
 8004714:	4002      	ands	r2, r0
 8004716:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800471c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004724:	b9c7      	cbnz	r7, 8004758 <RCCEx_PLL3_Config+0xe0>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004726:	461a      	mov	r2, r3
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800472e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004730:	4a10      	ldr	r2, [pc, #64]	@ (8004774 <RCCEx_PLL3_Config+0xfc>)
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473a:	f7fd fc29 	bl	8001f90 <HAL_GetTick>
 800473e:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004740:	4d0c      	ldr	r5, [pc, #48]	@ (8004774 <RCCEx_PLL3_Config+0xfc>)
 8004742:	682b      	ldr	r3, [r5, #0]
 8004744:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8004748:	d110      	bne.n	800476c <RCCEx_PLL3_Config+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800474a:	f7fd fc21 	bl	8001f90 <HAL_GetTick>
 800474e:	1b00      	subs	r0, r0, r4
 8004750:	2802      	cmp	r0, #2
 8004752:	d9f6      	bls.n	8004742 <RCCEx_PLL3_Config+0xca>
      {
        return HAL_TIMEOUT;
 8004754:	2003      	movs	r0, #3
 8004756:	e00c      	b.n	8004772 <RCCEx_PLL3_Config+0xfa>
    else if (Divider == DIVIDER_Q_UPDATE)
 8004758:	2f01      	cmp	r7, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800475a:	4a06      	ldr	r2, [pc, #24]	@ (8004774 <RCCEx_PLL3_Config+0xfc>)
 800475c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800475e:	bf0c      	ite	eq
 8004760:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004764:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004768:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800476a:	e7e1      	b.n	8004730 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 800476c:	2000      	movs	r0, #0
 800476e:	e000      	b.n	8004772 <RCCEx_PLL3_Config+0xfa>
    return HAL_ERROR;
 8004770:	2001      	movs	r0, #1
}
 8004772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004774:	58024400 	.word	0x58024400
 8004778:	ffff0007 	.word	0xffff0007

0800477c <HAL_RCCEx_PeriphCLKConfig>:
{
 800477c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004780:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004782:	6803      	ldr	r3, [r0, #0]
 8004784:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8004788:	d02b      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800478a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800478c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004790:	d021      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8004792:	d80c      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004794:	b1cb      	cbz	r3, 80047ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800479a:	d106      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800479c:	2102      	movs	r1, #2
 800479e:	3008      	adds	r0, #8
 80047a0:	f7ff fee8 	bl	8004574 <RCCEx_PLL2_Config>
 80047a4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80047a6:	b9ee      	cbnz	r6, 80047e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80047a8:	e004      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80047aa:	2601      	movs	r6, #1
 80047ac:	e01a      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80047ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047b2:	d108      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047b4:	4a9c      	ldr	r2, [pc, #624]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80047b6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80047b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80047bc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80047be:	430b      	orrs	r3, r1
 80047c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80047c2:	2600      	movs	r6, #0
 80047c4:	e00e      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80047c6:	2601      	movs	r6, #1
 80047c8:	e00c      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ca:	4a97      	ldr	r2, [pc, #604]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80047cc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80047d4:	e7ee      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047d6:	2102      	movs	r1, #2
 80047d8:	3028      	adds	r0, #40	@ 0x28
 80047da:	f7ff ff4d 	bl	8004678 <RCCEx_PLL3_Config>
 80047de:	4606      	mov	r6, r0
        break;
 80047e0:	e7e1      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047e2:	2600      	movs	r6, #0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80047ea:	d026      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    switch (PeriphClkInit->Sai1ClockSelection)
 80047ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d836      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80047f2:	e8df f003 	tbb	[pc, r3]
 80047f6:	0a03      	.short	0x0a03
 80047f8:	1811      	.short	0x1811
 80047fa:	18          	.byte	0x18
 80047fb:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fc:	4a8a      	ldr	r2, [pc, #552]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80047fe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004804:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004806:	4635      	mov	r5, r6
 8004808:	e00e      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800480a:	2100      	movs	r1, #0
 800480c:	f104 0008 	add.w	r0, r4, #8
 8004810:	f7ff feb0 	bl	8004574 <RCCEx_PLL2_Config>
 8004814:	4605      	mov	r5, r0
        break;
 8004816:	e007      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004818:	2100      	movs	r1, #0
 800481a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800481e:	f7ff ff2b 	bl	8004678 <RCCEx_PLL3_Config>
 8004822:	4605      	mov	r5, r0
        break;
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004826:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004828:	b9ed      	cbnz	r5, 8004866 <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800482a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800482c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800482e:	f023 0307 	bic.w	r3, r3, #7
 8004832:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004834:	430b      	orrs	r3, r1
 8004836:	6513      	str	r3, [r2, #80]	@ 0x50
 8004838:	e000      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800483a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004842:	d024      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x112>
    switch (PeriphClkInit->Sai2AClockSelection)
 8004844:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004846:	2b80      	cmp	r3, #128	@ 0x80
 8004848:	d03f      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800484a:	d811      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800484c:	b3bb      	cbz	r3, 80048be <HAL_RCCEx_PeriphCLKConfig+0x142>
 800484e:	2b40      	cmp	r3, #64	@ 0x40
 8004850:	d10b      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xee>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004852:	2100      	movs	r1, #0
 8004854:	f104 0008 	add.w	r0, r4, #8
 8004858:	f7ff fe8c 	bl	8004574 <RCCEx_PLL2_Config>
 800485c:	4605      	mov	r5, r0
        break;
 800485e:	e00e      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x102>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004860:	2601      	movs	r6, #1
 8004862:	4635      	mov	r5, r6
 8004864:	e7ea      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004866:	462e      	mov	r6, r5
 8004868:	e7e8      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    switch (PeriphClkInit->Sai2AClockSelection)
 800486a:	2601      	movs	r6, #1
 800486c:	4635      	mov	r5, r6
 800486e:	e00e      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004870:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004874:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8004878:	d001      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x102>
 800487a:	2bc0      	cmp	r3, #192	@ 0xc0
 800487c:	d11c      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if (ret == HAL_OK)
 800487e:	bb5d      	cbnz	r5, 80048d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004880:	4a69      	ldr	r2, [pc, #420]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004882:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004884:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8004888:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800488a:	430b      	orrs	r3, r1
 800488c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004894:	d036      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch (PeriphClkInit->Sai2BClockSelection)
 8004896:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489c:	d055      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800489e:	d820      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d04c      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a8:	d118      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x160>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048aa:	2100      	movs	r1, #0
 80048ac:	f104 0008 	add.w	r0, r4, #8
 80048b0:	f7ff fe60 	bl	8004574 <RCCEx_PLL2_Config>
 80048b4:	4605      	mov	r5, r0
        break;
 80048b6:	e01c      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
    switch (PeriphClkInit->Sai2AClockSelection)
 80048b8:	2601      	movs	r6, #1
 80048ba:	4635      	mov	r5, r6
 80048bc:	e7e7      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x112>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048be:	4a5a      	ldr	r2, [pc, #360]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80048c0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80048c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80048c8:	e7d9      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x102>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048ca:	2100      	movs	r1, #0
 80048cc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80048d0:	f7ff fed2 	bl	8004678 <RCCEx_PLL3_Config>
 80048d4:	4605      	mov	r5, r0
        break;
 80048d6:	e7d2      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x102>
 80048d8:	462e      	mov	r6, r5
 80048da:	e7d8      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x112>
    switch (PeriphClkInit->Sai2BClockSelection)
 80048dc:	2601      	movs	r6, #1
 80048de:	4635      	mov	r5, r6
 80048e0:	e010      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80048e2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80048e6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80048ea:	d002      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
 80048ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048f0:	d122      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if (ret == HAL_OK)
 80048f2:	2d00      	cmp	r5, #0
 80048f4:	d130      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80048f6:	4a4c      	ldr	r2, [pc, #304]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80048f8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80048fa:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 80048fe:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8004900:	430b      	orrs	r3, r1
 8004902:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800490a:	d02e      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch (PeriphClkInit->OspiClockSelection)
 800490c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800490e:	2b20      	cmp	r3, #32
 8004910:	d03f      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004912:	d826      	bhi.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8004914:	b133      	cbz	r3, 8004924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004916:	2b10      	cmp	r3, #16
 8004918:	d120      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491a:	4a43      	ldr	r2, [pc, #268]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800491c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800491e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004922:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004924:	2d00      	cmp	r5, #0
 8004926:	d13b      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004928:	4a3f      	ldr	r2, [pc, #252]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800492a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800492c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004930:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004932:	430b      	orrs	r3, r1
 8004934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004936:	e018      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch (PeriphClkInit->Sai2BClockSelection)
 8004938:	2601      	movs	r6, #1
 800493a:	4635      	mov	r5, r6
 800493c:	e7e2      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493e:	4a3a      	ldr	r2, [pc, #232]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004940:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004946:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004948:	e7d3      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800494a:	2100      	movs	r1, #0
 800494c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004950:	f7ff fe92 	bl	8004678 <RCCEx_PLL3_Config>
 8004954:	4605      	mov	r5, r0
        break;
 8004956:	e7cc      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004958:	462e      	mov	r6, r5
 800495a:	e7d3      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x188>
    switch (PeriphClkInit->OspiClockSelection)
 800495c:	2601      	movs	r6, #1
 800495e:	4635      	mov	r5, r6
 8004960:	e003      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004962:	2b30      	cmp	r3, #48	@ 0x30
 8004964:	d0de      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004966:	2601      	movs	r6, #1
 8004968:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8004970:	d03b      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004978:	d02f      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800497a:	d816      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x22e>
 800497c:	b33b      	cbz	r3, 80049ce <HAL_RCCEx_PeriphCLKConfig+0x252>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004982:	d10f      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004984:	2100      	movs	r1, #0
 8004986:	f104 0008 	add.w	r0, r4, #8
 800498a:	f7ff fdf3 	bl	8004574 <RCCEx_PLL2_Config>
 800498e:	4605      	mov	r5, r0
        break;
 8004990:	e011      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004992:	2102      	movs	r1, #2
 8004994:	f104 0008 	add.w	r0, r4, #8
 8004998:	f7ff fdec 	bl	8004574 <RCCEx_PLL2_Config>
 800499c:	4605      	mov	r5, r0
        break;
 800499e:	e7c1      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80049a0:	462e      	mov	r6, r5
 80049a2:	e7e2      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    switch (PeriphClkInit->Spi123ClockSelection)
 80049a4:	2601      	movs	r6, #1
 80049a6:	4635      	mov	r5, r6
 80049a8:	e01f      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80049aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049ae:	d002      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 80049b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049b4:	d108      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    if (ret == HAL_OK)
 80049b6:	b9bd      	cbnz	r5, 80049e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80049ba:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80049c2:	430b      	orrs	r3, r1
 80049c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c6:	e010      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
    switch (PeriphClkInit->Spi123ClockSelection)
 80049c8:	2601      	movs	r6, #1
 80049ca:	4635      	mov	r5, r6
 80049cc:	e00d      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ce:	4a16      	ldr	r2, [pc, #88]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80049d0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80049d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 80049d8:	e7ed      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049da:	2100      	movs	r1, #0
 80049dc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80049e0:	f7ff fe4a 	bl	8004678 <RCCEx_PLL3_Config>
 80049e4:	4605      	mov	r5, r0
        break;
 80049e6:	e7e6      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 80049e8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80049f0:	d026      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    switch (PeriphClkInit->Spi45ClockSelection)
 80049f2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80049f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049f8:	d038      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80049fa:	d817      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049fc:	b143      	cbz	r3, 8004a10 <HAL_RCCEx_PeriphCLKConfig+0x294>
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a02:	d10e      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a04:	2101      	movs	r1, #1
 8004a06:	f104 0008 	add.w	r0, r4, #8
 8004a0a:	f7ff fdb3 	bl	8004574 <RCCEx_PLL2_Config>
 8004a0e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004a10:	bb9d      	cbnz	r5, 8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a12:	4a05      	ldr	r2, [pc, #20]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004a14:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004a16:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004a1a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a20:	e00e      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004a22:	2601      	movs	r6, #1
 8004a24:	4635      	mov	r5, r6
 8004a26:	e00b      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a30:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8004a34:	d0ec      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8004a36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a3a:	d0e9      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8004a3c:	2601      	movs	r6, #1
 8004a3e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004a46:	d026      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a48:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a50:	d04d      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004a52:	d817      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d03d      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a5c:	d10f      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x302>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f104 0008 	add.w	r0, r4, #8
 8004a64:	f7ff fd86 	bl	8004574 <RCCEx_PLL2_Config>
 8004a68:	4605      	mov	r5, r0
        break;
 8004a6a:	e033      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x358>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004a72:	f7ff fe01 	bl	8004678 <RCCEx_PLL3_Config>
 8004a76:	4605      	mov	r5, r0
        break;
 8004a78:	e7ca      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8004a7a:	462e      	mov	r6, r5
 8004a7c:	e7e0      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a7e:	2601      	movs	r6, #1
 8004a80:	4635      	mov	r5, r6
 8004a82:	e008      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8004a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a88:	d024      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004a8a:	d91d      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004a8c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004a90:	d020      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004a92:	2601      	movs	r6, #1
 8004a94:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    switch (PeriphClkInit->FdcanClockSelection)
 8004a9e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8004aa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aa4:	d02c      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aaa:	d037      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004aac:	b36b      	cbz	r3, 8004b0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8004aae:	2601      	movs	r6, #1
 8004ab0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004ab8:	d046      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    switch (PeriphClkInit->FmcClockSelection)
 8004aba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d86f      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004ac0:	e8df f003 	tbb	[pc, r3]
 8004ac4:	3a67353a 	.word	0x3a67353a
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ac8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004acc:	d002      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad2:	d109      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    if (ret == HAL_OK)
 8004ad4:	b995      	cbnz	r5, 8004afc <HAL_RCCEx_PeriphCLKConfig+0x380>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ad6:	4a91      	ldr	r2, [pc, #580]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004ad8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ada:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004ade:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae6:	e7d6      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ae8:	2601      	movs	r6, #1
 8004aea:	4635      	mov	r5, r6
 8004aec:	e7d3      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aee:	2101      	movs	r1, #1
 8004af0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004af4:	f7ff fdc0 	bl	8004678 <RCCEx_PLL3_Config>
 8004af8:	4605      	mov	r5, r0
        break;
 8004afa:	e7eb      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004afc:	462e      	mov	r6, r5
 8004afe:	e7ca      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4a86      	ldr	r2, [pc, #536]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004b02:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004b0a:	b975      	cbnz	r5, 8004b2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b0c:	4a83      	ldr	r2, [pc, #524]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004b0e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004b10:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004b14:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b1a:	e7ca      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x336>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	f104 0008 	add.w	r0, r4, #8
 8004b22:	f7ff fd27 	bl	8004574 <RCCEx_PLL2_Config>
 8004b26:	4605      	mov	r5, r0
        break;
 8004b28:	e7ef      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8004b2a:	462e      	mov	r6, r5
 8004b2c:	e7c1      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x336>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2e:	4a7b      	ldr	r2, [pc, #492]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004b30:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b36:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004b38:	bbad      	cbnz	r5, 8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b3a:	4a78      	ldr	r2, [pc, #480]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004b3c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004b44:	430b      	orrs	r3, r1
 8004b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8004b4e:	d12c      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x42e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	f013 0f01 	tst.w	r3, #1
 8004b56:	f000 80a9 	beq.w	8004cac <HAL_RCCEx_PeriphCLKConfig+0x530>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b5a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8004b5e:	2b28      	cmp	r3, #40	@ 0x28
 8004b60:	f200 80a2 	bhi.w	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004b64:	e8df f003 	tbb	[pc, r3]
 8004b68:	a0a0a08f 	.word	0xa0a0a08f
 8004b6c:	a0a0a0a0 	.word	0xa0a0a0a0
 8004b70:	a0a0a089 	.word	0xa0a0a089
 8004b74:	a0a0a0a0 	.word	0xa0a0a0a0
 8004b78:	a0a0a099 	.word	0xa0a0a099
 8004b7c:	a0a0a0a0 	.word	0xa0a0a0a0
 8004b80:	a0a0a08f 	.word	0xa0a0a08f
 8004b84:	a0a0a0a0 	.word	0xa0a0a0a0
 8004b88:	a0a0a08f 	.word	0xa0a0a08f
 8004b8c:	a0a0a0a0 	.word	0xa0a0a0a0
 8004b90:	8f          	.byte	0x8f
 8004b91:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b92:	2102      	movs	r1, #2
 8004b94:	f104 0008 	add.w	r0, r4, #8
 8004b98:	f7ff fcec 	bl	8004574 <RCCEx_PLL2_Config>
 8004b9c:	4605      	mov	r5, r0
        break;
 8004b9e:	e7cb      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch (PeriphClkInit->FmcClockSelection)
 8004ba0:	2601      	movs	r6, #1
 8004ba2:	4635      	mov	r5, r6
 8004ba4:	e7d0      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004ba6:	462e      	mov	r6, r5
 8004ba8:	e7ce      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004baa:	4a5d      	ldr	r2, [pc, #372]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8004bac:	6813      	ldr	r3, [r2, #0]
 8004bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004bb4:	f7fd f9ec 	bl	8001f90 <HAL_GetTick>
 8004bb8:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bba:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 8004d20 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
 8004bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc8:	f7fd f9e2 	bl	8001f90 <HAL_GetTick>
 8004bcc:	1bc0      	subs	r0, r0, r7
 8004bce:	2864      	cmp	r0, #100	@ 0x64
 8004bd0:	d9f5      	bls.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 8004bd2:	2603      	movs	r6, #3
 8004bd4:	4635      	mov	r5, r6
 8004bd6:	e7bb      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    if (ret == HAL_OK)
 8004bd8:	2d00      	cmp	r5, #0
 8004bda:	d14c      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8004be4:	4053      	eors	r3, r2
 8004be6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004bea:	d00c      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bec:	4b4b      	ldr	r3, [pc, #300]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004bee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bf0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bf4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004bf6:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004bfa:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bfc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004bfe:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004c02:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8004c04:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c06:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8004c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0e:	d014      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4be>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c10:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8004c14:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004c18:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004c1c:	d021      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004c20:	6913      	ldr	r3, [r2, #16]
 8004c22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c26:	6113      	str	r3, [r2, #16]
 8004c28:	4a3c      	ldr	r2, [pc, #240]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004c2a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004c2c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c38:	e78a      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        tickstart = HAL_GetTick();
 8004c3a:	f7fd f9a9 	bl	8001f90 <HAL_GetTick>
 8004c3e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c40:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c48:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004c4c:	f013 0f02 	tst.w	r3, #2
 8004c50:	d1de      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x494>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c52:	f7fd f99d 	bl	8001f90 <HAL_GetTick>
 8004c56:	1bc0      	subs	r0, r0, r7
 8004c58:	4548      	cmp	r0, r9
 8004c5a:	d9f5      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
            ret = HAL_TIMEOUT;
 8004c5c:	2603      	movs	r6, #3
 8004c5e:	4635      	mov	r5, r6
 8004c60:	e776      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c62:	482e      	ldr	r0, [pc, #184]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004c64:	6901      	ldr	r1, [r0, #16]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8004c68:	ea02 1313 	and.w	r3, r2, r3, lsr #4
 8004c6c:	f421 527c 	bic.w	r2, r1, #16128	@ 0x3f00
 8004c70:	4313      	orrs	r3, r2
 8004c72:	6103      	str	r3, [r0, #16]
 8004c74:	e7d8      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8004c76:	462e      	mov	r6, r5
 8004c78:	e76a      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	f104 0008 	add.w	r0, r4, #8
 8004c80:	f7ff fc78 	bl	8004574 <RCCEx_PLL2_Config>
 8004c84:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004c86:	b9f5      	cbnz	r5, 8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c88:	4a24      	ldr	r2, [pc, #144]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004c8a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004c8c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004c90:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x530>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004ca0:	f7ff fcea 	bl	8004678 <RCCEx_PLL3_Config>
 8004ca4:	4605      	mov	r5, r0
        break;
 8004ca6:	e7ee      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ca8:	2601      	movs	r6, #1
 8004caa:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	f013 0f02 	tst.w	r3, #2
 8004cb2:	d019      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004cb4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d829      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004cbc:	e8df f003 	tbb	[pc, r3]
 8004cc0:	0b21050b 	.word	0x0b21050b
 8004cc4:	0b0b      	.short	0x0b0b
 8004cc6:	462e      	mov	r6, r5
 8004cc8:	e7f0      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x530>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cca:	2101      	movs	r1, #1
 8004ccc:	f104 0008 	add.w	r0, r4, #8
 8004cd0:	f7ff fc50 	bl	8004574 <RCCEx_PLL2_Config>
 8004cd4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004cd6:	b9f5      	cbnz	r5, 8004d16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004cd8:	4a10      	ldr	r2, [pc, #64]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8004cda:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004cdc:	f023 0307 	bic.w	r3, r3, #7
 8004ce0:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	f013 0f04 	tst.w	r3, #4
 8004cee:	d02a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004cf0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	d84c      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8004cf8:	e8df f003 	tbb	[pc, r3]
 8004cfc:	1c44161c 	.word	0x1c44161c
 8004d00:	1c1c      	.short	0x1c1c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d02:	2101      	movs	r1, #1
 8004d04:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004d08:	f7ff fcb6 	bl	8004678 <RCCEx_PLL3_Config>
 8004d0c:	4605      	mov	r5, r0
        break;
 8004d0e:	e7e2      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004d10:	2601      	movs	r6, #1
 8004d12:	4635      	mov	r5, r6
 8004d14:	e7e8      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8004d16:	462e      	mov	r6, r5
 8004d18:	e7e6      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8004d1a:	bf00      	nop
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	58024800 	.word	0x58024800
 8004d24:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d28:	2101      	movs	r1, #1
 8004d2a:	f104 0008 	add.w	r0, r4, #8
 8004d2e:	f7ff fc21 	bl	8004574 <RCCEx_PLL2_Config>
 8004d32:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004d34:	bb85      	cbnz	r5, 8004d98 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d36:	4a51      	ldr	r2, [pc, #324]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x700>)
 8004d38:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004d3a:	f023 0307 	bic.w	r3, r3, #7
 8004d3e:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f013 0f20 	tst.w	r3, #32
 8004d4c:	d033      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d4e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8004d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d56:	d04d      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004d58:	d823      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x626>
 8004d5a:	b143      	cbz	r3, 8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d60:	d11c      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x620>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d62:	2100      	movs	r1, #0
 8004d64:	f104 0008 	add.w	r0, r4, #8
 8004d68:	f7ff fc04 	bl	8004574 <RCCEx_PLL2_Config>
 8004d6c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	d147      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d72:	4a42      	ldr	r2, [pc, #264]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x700>)
 8004d74:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004d76:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004d7a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d82:	e018      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d84:	2101      	movs	r1, #1
 8004d86:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004d8a:	f7ff fc75 	bl	8004678 <RCCEx_PLL3_Config>
 8004d8e:	4605      	mov	r5, r0
        break;
 8004d90:	e7d0      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004d92:	2601      	movs	r6, #1
 8004d94:	4635      	mov	r5, r6
 8004d96:	e7d6      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004d98:	462e      	mov	r6, r5
 8004d9a:	e7d4      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d9c:	2601      	movs	r6, #1
 8004d9e:	4635      	mov	r5, r6
 8004da0:	e009      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 8004da2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004da6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004daa:	d0e0      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004dac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004db0:	d0dd      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004db2:	2601      	movs	r6, #1
 8004db4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004dbc:	d030      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004dbe:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8004dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc6:	d04c      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8004dc8:	d820      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x690>
 8004dca:	b143      	cbz	r3, 8004dde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd0:	d119      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	f104 0008 	add.w	r0, r4, #8
 8004dd8:	f7ff fbcc 	bl	8004574 <RCCEx_PLL2_Config>
 8004ddc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	d146      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004de2:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x700>)
 8004de4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004de6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004dea:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8004dee:	430b      	orrs	r3, r1
 8004df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df2:	e015      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004df4:	2102      	movs	r1, #2
 8004df6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004dfa:	f7ff fc3d 	bl	8004678 <RCCEx_PLL3_Config>
 8004dfe:	4605      	mov	r5, r0
        break;
 8004e00:	e7b5      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8004e02:	462e      	mov	r6, r5
 8004e04:	e7d7      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e06:	2601      	movs	r6, #1
 8004e08:	4635      	mov	r5, r6
 8004e0a:	e009      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8004e0c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e10:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004e14:	d0e3      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e1a:	d0e0      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e1c:	2601      	movs	r6, #1
 8004e1e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e26:	d035      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e28:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8004e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e30:	f000 8109 	beq.w	8005046 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8004e34:	d824      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x704>
 8004e36:	b143      	cbz	r3, 8004e4a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 8004e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e3c:	d11a      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3e:	2100      	movs	r1, #0
 8004e40:	f104 0008 	add.w	r0, r4, #8
 8004e44:	f7ff fb96 	bl	8004574 <RCCEx_PLL2_Config>
 8004e48:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	f040 8102 	bne.w	8005054 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e50:	4a0a      	ldr	r2, [pc, #40]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x700>)
 8004e52:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e54:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004e58:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e60:	e018      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x718>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e62:	2102      	movs	r1, #2
 8004e64:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004e68:	f7ff fc06 	bl	8004678 <RCCEx_PLL3_Config>
 8004e6c:	4605      	mov	r5, r0
        break;
 8004e6e:	e7b6      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e70:	462e      	mov	r6, r5
 8004e72:	e7d5      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e74:	2601      	movs	r6, #1
 8004e76:	4635      	mov	r5, r6
 8004e78:	e00c      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e84:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004e88:	d0df      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 8004e8a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004e8e:	d0dc      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 8004e90:	2601      	movs	r6, #1
 8004e92:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	f013 0f08 	tst.w	r3, #8
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea4:	f000 80d8 	beq.w	8005058 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ea8:	4ab0      	ldr	r2, [pc, #704]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004eaa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004eac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004eb0:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	f013 0f10 	tst.w	r3, #16
 8004ebe:	d00d      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x760>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ec0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8004ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec8:	f000 80cf 	beq.w	800506a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ecc:	4aa7      	ldr	r2, [pc, #668]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004ece:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004ee2:	d00e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x786>
    switch (PeriphClkInit->AdcClockSelection)
 8004ee4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eec:	f000 80d6 	beq.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x920>
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef4:	f000 80c8 	beq.w	8005088 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80bf 	beq.w	800507c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8004efe:	2601      	movs	r6, #1
 8004f00:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004f08:	d00f      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    switch (PeriphClkInit->UsbClockSelection)
 8004f0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8004f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f12:	f000 80db 	beq.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x950>
 8004f16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f1a:	f000 80cd 	beq.w	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f22:	f000 80c4 	beq.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004f26:	2601      	movs	r6, #1
 8004f28:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004f30:	d009      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004f32:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80d2 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3e:	f000 80dc 	beq.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004f42:	2601      	movs	r6, #1
 8004f44:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8004f4c:	f040 80de 	bne.w	800510c <HAL_RCCEx_PeriphCLKConfig+0x990>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004f56:	d00e      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch (PeriphClkInit->RngClockSelection)
 8004f58:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8004f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f60:	f000 80e0 	beq.w	8005124 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004f64:	f240 80db 	bls.w	800511e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f70:	f000 80dd 	beq.w	800512e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8004f74:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004f7c:	d006      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x810>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f7e:	4a7b      	ldr	r2, [pc, #492]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004f80:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004f82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f86:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8004f92:	d006      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x826>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f94:	4a75      	ldr	r2, [pc, #468]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004f96:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004f98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f9c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004fa8:	d006      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004faa:	4a70      	ldr	r2, [pc, #448]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004fac:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004fae:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004fb2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004fbe:	d009      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x858>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fc8:	611a      	str	r2, [r3, #16]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da06      	bge.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fda:	4a64      	ldr	r2, [pc, #400]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004fdc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004fde:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004fe2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8004fee:	d007      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x884>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004ff2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004ff4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004ff8:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	f013 0f01 	tst.w	r3, #1
 8005006:	f040 809e 	bne.w	8005146 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	f013 0f02 	tst.w	r3, #2
 8005010:	f040 80a2 	bne.w	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	f013 0f04 	tst.w	r3, #4
 800501a:	f040 80a9 	bne.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800501e:	6863      	ldr	r3, [r4, #4]
 8005020:	f013 0f08 	tst.w	r3, #8
 8005024:	f040 80ad 	bne.w	8005182 <HAL_RCCEx_PeriphCLKConfig+0xa06>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	f013 0f10 	tst.w	r3, #16
 800502e:	f040 80b1 	bne.w	8005194 <HAL_RCCEx_PeriphCLKConfig+0xa18>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	f013 0f20 	tst.w	r3, #32
 8005038:	f040 80b5 	bne.w	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
  if (status == HAL_OK)
 800503c:	1e30      	subs	r0, r6, #0
 800503e:	bf18      	it	ne
 8005040:	2001      	movne	r0, #1
}
 8005042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005046:	2102      	movs	r1, #2
 8005048:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800504c:	f7ff fb14 	bl	8004678 <RCCEx_PLL3_Config>
 8005050:	4605      	mov	r5, r0
        break;
 8005052:	e6fa      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 8005054:	462e      	mov	r6, r5
 8005056:	e71d      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x718>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005058:	2102      	movs	r1, #2
 800505a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800505e:	f7ff fb0b 	bl	8004678 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005062:	2800      	cmp	r0, #0
 8005064:	bf18      	it	ne
 8005066:	2601      	movne	r6, #1
 8005068:	e71e      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800506a:	2102      	movs	r1, #2
 800506c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005070:	f7ff fb02 	bl	8004678 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8005074:	2800      	cmp	r0, #0
 8005076:	bf18      	it	ne
 8005078:	2601      	movne	r6, #1
 800507a:	e727      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x750>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800507c:	2100      	movs	r1, #0
 800507e:	f104 0008 	add.w	r0, r4, #8
 8005082:	f7ff fa77 	bl	8004574 <RCCEx_PLL2_Config>
 8005086:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005088:	b97d      	cbnz	r5, 80050aa <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800508a:	4a38      	ldr	r2, [pc, #224]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800508c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800508e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005092:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005096:	430b      	orrs	r3, r1
 8005098:	6593      	str	r3, [r2, #88]	@ 0x58
 800509a:	e732      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x786>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800509c:	2102      	movs	r1, #2
 800509e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80050a2:	f7ff fae9 	bl	8004678 <RCCEx_PLL3_Config>
 80050a6:	4605      	mov	r5, r0
        break;
 80050a8:	e7ee      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 80050aa:	462e      	mov	r6, r5
 80050ac:	e729      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x786>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ae:	4a2f      	ldr	r2, [pc, #188]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80050b0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80050b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80050b8:	b97d      	cbnz	r5, 80050da <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050ba:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80050bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80050be:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80050c2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80050c6:	430b      	orrs	r3, r1
 80050c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80050ca:	e72e      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050cc:	2101      	movs	r1, #1
 80050ce:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80050d2:	f7ff fad1 	bl	8004678 <RCCEx_PLL3_Config>
 80050d6:	4605      	mov	r5, r0
        break;
 80050d8:	e7ee      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 80050da:	462e      	mov	r6, r5
 80050dc:	e725      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050de:	4a23      	ldr	r2, [pc, #140]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80050e0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80050e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80050e8:	b975      	cbnz	r5, 8005108 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050ea:	4a20      	ldr	r2, [pc, #128]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80050ec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80050ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80050f4:	430b      	orrs	r3, r1
 80050f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050f8:	e725      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050fa:	2102      	movs	r1, #2
 80050fc:	f104 0008 	add.w	r0, r4, #8
 8005100:	f7ff fa38 	bl	8004574 <RCCEx_PLL2_Config>
 8005104:	4605      	mov	r5, r0
        break;
 8005106:	e7ef      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 8005108:	462e      	mov	r6, r5
 800510a:	e71c      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800510c:	2102      	movs	r1, #2
 800510e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005112:	f7ff fab1 	bl	8004678 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8005116:	2800      	cmp	r0, #0
 8005118:	bf18      	it	ne
 800511a:	2601      	movne	r6, #1
 800511c:	e718      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    switch (PeriphClkInit->RngClockSelection)
 800511e:	b133      	cbz	r3, 800512e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8005120:	2601      	movs	r6, #1
 8005122:	e728      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005124:	4a11      	ldr	r2, [pc, #68]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005126:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800512c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800512e:	b945      	cbnz	r5, 8005142 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005130:	4a0e      	ldr	r2, [pc, #56]	@ (800516c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005132:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005138:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800513c:	430b      	orrs	r3, r1
 800513e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005140:	e719      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 8005142:	462e      	mov	r6, r5
 8005144:	e717      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005146:	2100      	movs	r1, #0
 8005148:	f104 0008 	add.w	r0, r4, #8
 800514c:	f7ff fa12 	bl	8004574 <RCCEx_PLL2_Config>
      status = ret;
 8005150:	2800      	cmp	r0, #0
 8005152:	bf18      	it	ne
 8005154:	4606      	movne	r6, r0
 8005156:	e758      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005158:	2101      	movs	r1, #1
 800515a:	f104 0008 	add.w	r0, r4, #8
 800515e:	f7ff fa09 	bl	8004574 <RCCEx_PLL2_Config>
      status = ret;
 8005162:	2800      	cmp	r0, #0
 8005164:	bf18      	it	ne
 8005166:	4606      	movne	r6, r0
 8005168:	e754      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x898>
 800516a:	bf00      	nop
 800516c:	58024400 	.word	0x58024400
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005170:	2102      	movs	r1, #2
 8005172:	f104 0008 	add.w	r0, r4, #8
 8005176:	f7ff f9fd 	bl	8004574 <RCCEx_PLL2_Config>
      status = ret;
 800517a:	2800      	cmp	r0, #0
 800517c:	bf18      	it	ne
 800517e:	4606      	movne	r6, r0
 8005180:	e74d      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005182:	2100      	movs	r1, #0
 8005184:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005188:	f7ff fa76 	bl	8004678 <RCCEx_PLL3_Config>
      status = ret;
 800518c:	2800      	cmp	r0, #0
 800518e:	bf18      	it	ne
 8005190:	4606      	movne	r6, r0
 8005192:	e749      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005194:	2101      	movs	r1, #1
 8005196:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800519a:	f7ff fa6d 	bl	8004678 <RCCEx_PLL3_Config>
      status = ret;
 800519e:	2800      	cmp	r0, #0
 80051a0:	bf18      	it	ne
 80051a2:	4606      	movne	r6, r0
 80051a4:	e745      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051a6:	2102      	movs	r1, #2
 80051a8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80051ac:	f7ff fa64 	bl	8004678 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f43f af43 	beq.w	800503c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  return HAL_ERROR;
 80051b6:	2001      	movs	r0, #1
 80051b8:	e743      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80051ba:	bf00      	nop

080051bc <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80051bc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80051be:	f7ff f9a5 	bl	800450c <HAL_RCC_GetHCLKFreq>
 80051c2:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80051ca:	4a04      	ldr	r2, [pc, #16]	@ (80051dc <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80051cc:	5cd3      	ldrb	r3, [r2, r3]
 80051ce:	f003 031f 	and.w	r3, r3, #31
}
 80051d2:	40d8      	lsrs	r0, r3
 80051d4:	bd08      	pop	{r3, pc}
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	08009c48 	.word	0x08009c48

080051e0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80051e0:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051e2:	4b78      	ldr	r3, [pc, #480]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80051e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80051e6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80051e8:	f3c4 3205 	ubfx	r2, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051ec:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  if (pll2m != 0U)
 80051f0:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 80051f4:	f000 80e1 	beq.w	80053ba <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051f8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051fc:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005200:	fb05 f303 	mul.w	r3, r5, r3
 8005204:	ee07 3a90 	vmov	s15, r3
 8005208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800520c:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005210:	2901      	cmp	r1, #1
 8005212:	d066      	beq.n	80052e2 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8005214:	2902      	cmp	r1, #2
 8005216:	f000 80b3 	beq.w	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800521a:	b1e1      	cbz	r1, 8005256 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800521c:	4b69      	ldr	r3, [pc, #420]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005224:	ee07 3a90 	vmov	s15, r3
 8005228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522c:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005230:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005234:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800523c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005240:	ee07 2a10 	vmov	s14, r2
 8005244:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005248:	ed9f 6a60 	vldr	s12, [pc, #384]	@ 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800524c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005250:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8005254:	e061      	b.n	800531a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005256:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f013 0f20 	tst.w	r3, #32
 800525e:	d023      	beq.n	80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005260:	4b58      	ldr	r3, [pc, #352]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005262:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005266:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 800526a:	4959      	ldr	r1, [pc, #356]	@ (80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 800526c:	40e1      	lsrs	r1, r4
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800526e:	ee07 1a90 	vmov	s15, r1
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005276:	ee07 2a90 	vmov	s15, r2
 800527a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800527e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee06 3a90 	vmov	s13, r3
 800528a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800528e:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005292:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005296:	ee36 7a87 	vadd.f32	s14, s13, s14
 800529a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529e:	ee37 7a26 	vadd.f32	s14, s14, s13
 80052a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a6:	e038      	b.n	800531a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052a8:	4b46      	ldr	r3, [pc, #280]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b8:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80052bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80052c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052cc:	ee07 2a10 	vmov	s14, r2
 80052d0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80052d4:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 80053d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80052d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80052dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052e0:	e01b      	b.n	800531a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052e2:	4b38      	ldr	r3, [pc, #224]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80052e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80052f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80052fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005306:	ee07 2a10 	vmov	s14, r2
 800530a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800530e:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8005312:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005316:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800531a:	4a2a      	ldr	r2, [pc, #168]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800531c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800531e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005322:	ee07 3a10 	vmov	s14, r3
 8005326:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800532a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005332:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005336:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800533a:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800533e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005340:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005344:	ee07 3a10 	vmov	s14, r3
 8005348:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800534c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005350:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005354:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005358:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800535c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800535e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005362:	ee07 3a10 	vmov	s14, r3
 8005366:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800536a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800536e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005372:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8005376:	ee17 2a90 	vmov	r2, s15
 800537a:	6082      	str	r2, [r0, #8]
}
 800537c:	bc30      	pop	{r4, r5}
 800537e:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005380:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005390:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80053c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8005394:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005398:	ee77 7a87 	vadd.f32	s15, s15, s14
 800539c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053a4:	ee07 2a10 	vmov	s14, r2
 80053a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80053ac:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80053d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 80053b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80053b4:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 80053b8:	e7af      	b.n	800531a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053be:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053c0:	e7db      	b.n	800537a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80053c2:	bf00      	nop
 80053c4:	58024400 	.word	0x58024400
 80053c8:	39000000 	.word	0x39000000
 80053cc:	4a742400 	.word	0x4a742400
 80053d0:	03d09000 	.word	0x03d09000
 80053d4:	4c742400 	.word	0x4c742400
 80053d8:	4bbebc20 	.word	0x4bbebc20

080053dc <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80053dc:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053de:	4b78      	ldr	r3, [pc, #480]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80053e0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80053e2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80053e4:	f3c4 5205 	ubfx	r2, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053e8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  if (pll3m != 0U)
 80053ec:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 80053f0:	f000 80e1 	beq.w	80055b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053f4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053f8:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80053fc:	fb05 f303 	mul.w	r3, r5, r3
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005408:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800540c:	2901      	cmp	r1, #1
 800540e:	d066      	beq.n	80054de <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8005410:	2902      	cmp	r1, #2
 8005412:	f000 80b3 	beq.w	800557c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005416:	b1e1      	cbz	r1, 8005452 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005418:	4b69      	ldr	r3, [pc, #420]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005420:	ee07 3a90 	vmov	s15, r3
 8005424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005428:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800542c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005430:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800543c:	ee07 2a10 	vmov	s14, r2
 8005440:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005444:	ed9f 6a60 	vldr	s12, [pc, #384]	@ 80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8005448:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800544c:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 8005450:	e061      	b.n	8005516 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005452:	4b5b      	ldr	r3, [pc, #364]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f013 0f20 	tst.w	r3, #32
 800545a:	d023      	beq.n	80054a4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800545c:	4b58      	ldr	r3, [pc, #352]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800545e:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005462:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005466:	4959      	ldr	r1, [pc, #356]	@ (80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8005468:	40e1      	lsrs	r1, r4
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800546a:	ee07 1a90 	vmov	s15, r1
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ee07 2a90 	vmov	s15, r2
 8005476:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800547a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee06 3a90 	vmov	s13, r3
 8005486:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800548a:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800548e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005492:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800549e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054a2:	e038      	b.n	8005516 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054a4:	4b46      	ldr	r3, [pc, #280]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80054b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054c8:	ee07 2a10 	vmov	s14, r2
 80054cc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80054d0:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80054d4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80054d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054dc:	e01b      	b.n	8005516 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054de:	4b38      	ldr	r3, [pc, #224]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80054f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005502:	ee07 2a10 	vmov	s14, r2
 8005506:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800550a:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800550e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005512:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005516:	4a2a      	ldr	r2, [pc, #168]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8005518:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800551a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800551e:	ee07 3a10 	vmov	s14, r3
 8005522:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800552e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005532:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005536:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800553a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800553c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005540:	ee07 3a10 	vmov	s14, r3
 8005544:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005548:	ee37 7a26 	vadd.f32	s14, s14, s13
 800554c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005550:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005554:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005558:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800555a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800555e:	ee07 3a10 	vmov	s14, r3
 8005562:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005566:	ee37 7a26 	vadd.f32	s14, s14, s13
 800556a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800556e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8005572:	ee17 2a90 	vmov	r2, s15
 8005576:	6082      	str	r2, [r0, #8]
}
 8005578:	bc30      	pop	{r4, r5}
 800557a:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800557c:	4b10      	ldr	r3, [pc, #64]	@ (80055c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8005590:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800559c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055a0:	ee07 2a10 	vmov	s14, r2
 80055a4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80055a8:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80055ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80055b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 80055b4:	e7af      	b.n	8005516 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055ba:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055bc:	e7db      	b.n	8005576 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80055be:	bf00      	nop
 80055c0:	58024400 	.word	0x58024400
 80055c4:	39000000 	.word	0x39000000
 80055c8:	4a742400 	.word	0x4a742400
 80055cc:	03d09000 	.word	0x03d09000
 80055d0:	4c742400 	.word	0x4c742400
 80055d4:	4bbebc20 	.word	0x4bbebc20

080055d8 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80055d8:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055da:	4b78      	ldr	r3, [pc, #480]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80055dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80055de:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80055e0:	f3c4 1205 	ubfx	r2, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80055e4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if (pll1m != 0U)
 80055e8:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 80055ec:	f000 80e1 	beq.w	80057b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055f0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80055f4:	f005 0501 	and.w	r5, r5, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055f8:	fb05 f303 	mul.w	r3, r5, r3
 80055fc:	ee07 3a90 	vmov	s15, r3
 8005600:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005604:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005608:	2901      	cmp	r1, #1
 800560a:	d066      	beq.n	80056da <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 800560c:	2902      	cmp	r1, #2
 800560e:	f000 80b3 	beq.w	8005778 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 8005612:	b1e1      	cbz	r1, 800564e <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005614:	4b69      	ldr	r3, [pc, #420]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005624:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8005628:	ee27 7a26 	vmul.f32	s14, s14, s13
 800562c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005638:	ee07 2a10 	vmov	s14, r2
 800563c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005640:	ed9f 6a60 	vldr	s12, [pc, #384]	@ 80057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8005644:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005648:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 800564c:	e061      	b.n	8005712 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800564e:	4b5b      	ldr	r3, [pc, #364]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f013 0f20 	tst.w	r3, #32
 8005656:	d023      	beq.n	80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005658:	4b58      	ldr	r3, [pc, #352]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800565a:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800565e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8005662:	4959      	ldr	r1, [pc, #356]	@ (80057c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8005664:	40e1      	lsrs	r1, r4
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005666:	ee07 1a90 	vmov	s15, r1
 800566a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566e:	ee07 2a90 	vmov	s15, r2
 8005672:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8005676:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee06 3a90 	vmov	s13, r3
 8005682:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005686:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800568a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800568e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8005692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005696:	ee37 7a26 	vadd.f32	s14, s14, s13
 800569a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800569e:	e038      	b.n	8005712 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a0:	4b46      	ldr	r3, [pc, #280]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80056b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80056b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056c4:	ee07 2a10 	vmov	s14, r2
 80056c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80056cc:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 80057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80056d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80056d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056d8:	e01b      	b.n	8005712 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056da:	4b38      	ldr	r3, [pc, #224]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80056ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80056f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056fe:	ee07 2a10 	vmov	s14, r2
 8005702:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005706:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80057cc <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 800570a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800570e:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005712:	4a2a      	ldr	r2, [pc, #168]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8005714:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005716:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800571a:	ee07 3a10 	vmov	s14, r3
 800571e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005726:	ee37 7a26 	vadd.f32	s14, s14, s13
 800572a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800572e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005732:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005736:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005738:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800573c:	ee07 3a10 	vmov	s14, r3
 8005740:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005744:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005748:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800574c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005750:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005754:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005756:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800575a:	ee07 3a10 	vmov	s14, r3
 800575e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005762:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800576a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800576e:	ee17 2a90 	vmov	r2, s15
 8005772:	6082      	str	r2, [r0, #8]
}
 8005774:	bc30      	pop	{r4, r5}
 8005776:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005778:	4b10      	ldr	r3, [pc, #64]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005788:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800578c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800579c:	ee07 2a10 	vmov	s14, r2
 80057a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80057a4:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80057d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 80057a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80057ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        break;
 80057b0:	e7af      	b.n	8005712 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057b6:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057b8:	e7db      	b.n	8005772 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	39000000 	.word	0x39000000
 80057c4:	4c742400 	.word	0x4c742400
 80057c8:	03d09000 	.word	0x03d09000
 80057cc:	4a742400 	.word	0x4a742400
 80057d0:	4bbebc20 	.word	0x4bbebc20

080057d4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80057d4:	b500      	push	{lr}
 80057d6:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80057d8:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80057dc:	430b      	orrs	r3, r1
 80057de:	d028      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80057e0:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80057e4:	430b      	orrs	r3, r1
 80057e6:	d078      	beq.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x106>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80057e8:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80057ec:	430b      	orrs	r3, r1
 80057ee:	f000 80cf 	beq.w	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80057f2:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 80057f6:	430b      	orrs	r3, r1
 80057f8:	f000 8130 	beq.w	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80057fc:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8005800:	430b      	orrs	r3, r1
 8005802:	f000 8189 	beq.w	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005806:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 800580a:	430b      	orrs	r3, r1
 800580c:	f000 81d2 	beq.w	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005810:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8005814:	430b      	orrs	r3, r1
 8005816:	f000 8215 	beq.w	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800581a:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 800581e:	430b      	orrs	r3, r1
 8005820:	f000 822e 	beq.w	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005824:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8005828:	4308      	orrs	r0, r1
 800582a:	f000 827f 	beq.w	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
    frequency = 0;
 800582e:	2000      	movs	r0, #0
 8005830:	e2a9      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005832:	4b86      	ldr	r3, [pc, #536]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005836:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800583a:	2b04      	cmp	r3, #4
 800583c:	f200 829e 	bhi.w	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005840:	e8df f003 	tbb	[pc, r3]
 8005844:	031b1005 	.word	0x031b1005
 8005848:	26          	.byte	0x26
 8005849:	00          	.byte	0x00
        frequency = EXTERNAL_CLOCK_VALUE;
 800584a:	4881      	ldr	r0, [pc, #516]	@ (8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800584c:	e29b      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800584e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005856:	f000 8296 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800585a:	a807      	add	r0, sp, #28
 800585c:	f7ff febc 	bl	80055d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005860:	9808      	ldr	r0, [sp, #32]
 8005862:	e290      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005864:	4b79      	ldr	r3, [pc, #484]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800586c:	f000 828b 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005870:	a804      	add	r0, sp, #16
 8005872:	f7ff fcb5 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005876:	9804      	ldr	r0, [sp, #16]
 8005878:	e285      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800587a:	4b74      	ldr	r3, [pc, #464]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005882:	f000 8280 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005886:	a801      	add	r0, sp, #4
 8005888:	f7ff fda8 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800588c:	9801      	ldr	r0, [sp, #4]
 800588e:	e27a      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005890:	4a6e      	ldr	r2, [pc, #440]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005892:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005894:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	f012 0f04 	tst.w	r2, #4
 800589e:	d000      	beq.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 80058a0:	b193      	cbz	r3, 80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058a2:	4a6a      	ldr	r2, [pc, #424]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80058aa:	d003      	beq.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80058ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058b0:	f000 8266 	beq.w	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058b4:	4a65      	ldr	r2, [pc, #404]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80058bc:	d002      	beq.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80058be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c2:	d008      	beq.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
          frequency = 0;
 80058c4:	2000      	movs	r0, #0
 80058c6:	e25e      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058c8:	4b60      	ldr	r3, [pc, #384]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80058d0:	4860      	ldr	r0, [pc, #384]	@ (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80058d2:	40d8      	lsrs	r0, r3
 80058d4:	e257      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 80058d6:	4860      	ldr	r0, [pc, #384]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80058d8:	e255      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80058da:	4b5c      	ldr	r3, [pc, #368]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058de:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 80058e2:	2b80      	cmp	r3, #128	@ 0x80
 80058e4:	d040      	beq.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80058e6:	d922      	bls.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80058e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80058ea:	f000 824b 	beq.w	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80058ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058f2:	d12c      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058f4:	4a55      	ldr	r2, [pc, #340]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058f6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80058f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	f012 0f04 	tst.w	r2, #4
 8005902:	d001      	beq.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d03a      	beq.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005908:	4a50      	ldr	r2, [pc, #320]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005910:	d003      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005916:	f000 8239 	beq.w	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800591a:	4a4c      	ldr	r2, [pc, #304]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005922:	d002      	beq.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8005924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005928:	d030      	beq.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
          frequency = 0;
 800592a:	2000      	movs	r0, #0
 800592c:	e22b      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 800592e:	b183      	cbz	r3, 8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8005930:	2b40      	cmp	r3, #64	@ 0x40
 8005932:	d10a      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005934:	4b45      	ldr	r3, [pc, #276]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800593c:	f000 8223 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005940:	a804      	add	r0, sp, #16
 8005942:	f7ff fc4d 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005946:	9804      	ldr	r0, [sp, #16]
 8005948:	e21d      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 800594a:	2000      	movs	r0, #0
 800594c:	e21b      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800594e:	2000      	movs	r0, #0
 8005950:	e219      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005952:	4b3e      	ldr	r3, [pc, #248]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800595a:	f000 8214 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800595e:	a807      	add	r0, sp, #28
 8005960:	f7ff fe3a 	bl	80055d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005964:	9808      	ldr	r0, [sp, #32]
 8005966:	e20e      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005968:	4b38      	ldr	r3, [pc, #224]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005970:	f000 8209 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005974:	a801      	add	r0, sp, #4
 8005976:	f7ff fd31 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800597a:	9801      	ldr	r0, [sp, #4]
 800597c:	e203      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800597e:	4b33      	ldr	r3, [pc, #204]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005986:	4833      	ldr	r0, [pc, #204]	@ (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005988:	40d8      	lsrs	r0, r3
 800598a:	e1fc      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800598c:	4832      	ldr	r0, [pc, #200]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800598e:	e1fa      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005990:	4b2e      	ldr	r3, [pc, #184]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005994:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
    switch (saiclocksource)
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800599c:	d042      	beq.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 800599e:	d923      	bls.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 80059a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80059a4:	f000 81f4 	beq.w	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 80059a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ac:	d12d      	bne.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059ae:	4a27      	ldr	r2, [pc, #156]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059b0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80059b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	f012 0f04 	tst.w	r2, #4
 80059bc:	d001      	beq.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d03b      	beq.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059c2:	4a22      	ldr	r2, [pc, #136]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80059ca:	d003      	beq.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
 80059cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059d0:	f000 81e0 	beq.w	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059d4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80059dc:	d002      	beq.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80059de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059e2:	d031      	beq.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          frequency = 0;
 80059e4:	2000      	movs	r0, #0
 80059e6:	e1ce      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 80059e8:	b18b      	cbz	r3, 8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80059ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ee:	d10a      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059f0:	4b16      	ldr	r3, [pc, #88]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80059f8:	f000 81c5 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059fc:	a804      	add	r0, sp, #16
 80059fe:	f7ff fbef 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a02:	9804      	ldr	r0, [sp, #16]
 8005a04:	e1bf      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 8005a06:	2000      	movs	r0, #0
 8005a08:	e1bd      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e1bb      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005a16:	f000 81b6 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a1a:	a807      	add	r0, sp, #28
 8005a1c:	f7ff fddc 	bl	80055d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a20:	9808      	ldr	r0, [sp, #32]
 8005a22:	e1b0      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a24:	4b09      	ldr	r3, [pc, #36]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005a2c:	f000 81ab 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a30:	a801      	add	r0, sp, #4
 8005a32:	f7ff fcd3 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a36:	9801      	ldr	r0, [sp, #4]
 8005a38:	e1a5      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a3a:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a42:	4804      	ldr	r0, [pc, #16]	@ (8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a44:	40d8      	lsrs	r0, r3
 8005a46:	e19e      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8005a48:	4803      	ldr	r0, [pc, #12]	@ (8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a4a:	e19c      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	00bb8000 	.word	0x00bb8000
 8005a54:	03d09000 	.word	0x03d09000
 8005a58:	017d7840 	.word	0x017d7840
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005a5c:	4b97      	ldr	r3, [pc, #604]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8005a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a68:	d042      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005a6a:	d923      	bls.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005a6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a70:	f000 8192 	beq.w	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8005a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a78:	d12d      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a7a:	4a90      	ldr	r2, [pc, #576]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a7c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005a7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	f012 0f04 	tst.w	r2, #4
 8005a88:	d001      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d03b      	beq.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a8e:	4a8b      	ldr	r2, [pc, #556]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005a96:	d003      	beq.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a9c:	f000 817e 	beq.w	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005aa0:	4a86      	ldr	r2, [pc, #536]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005aa8:	d002      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
 8005aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aae:	d031      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
          frequency = 0;
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e168      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005ab4:	b18b      	cbz	r3, 8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aba:	d10a      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005abc:	4b7f      	ldr	r3, [pc, #508]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005ac4:	f000 815f 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac8:	a804      	add	r0, sp, #16
 8005aca:	f7ff fb89 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ace:	9804      	ldr	r0, [sp, #16]
 8005ad0:	e159      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	e157      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e155      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ada:	4b78      	ldr	r3, [pc, #480]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005ae2:	f000 8150 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ae6:	a807      	add	r0, sp, #28
 8005ae8:	f7ff fd76 	bl	80055d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aec:	9808      	ldr	r0, [sp, #32]
 8005aee:	e14a      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005af0:	4b72      	ldr	r3, [pc, #456]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005af8:	f000 8145 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005afc:	a801      	add	r0, sp, #4
 8005afe:	f7ff fc6d 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b02:	9801      	ldr	r0, [sp, #4]
 8005b04:	e13f      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b06:	4b6d      	ldr	r3, [pc, #436]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005b0e:	486c      	ldr	r0, [pc, #432]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005b10:	40d8      	lsrs	r0, r3
 8005b12:	e138      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8005b14:	486b      	ldr	r0, [pc, #428]	@ (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005b16:	e136      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005b18:	4b68      	ldr	r3, [pc, #416]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8005b20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b24:	d032      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8005b26:	d816      	bhi.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b2c:	d023      	beq.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005b2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b32:	d10a      	bne.n	8005b4a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b34:	4b61      	ldr	r3, [pc, #388]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005b3c:	f000 8123 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b40:	a801      	add	r0, sp, #4
 8005b42:	f7ff fc4b 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b46:	9802      	ldr	r0, [sp, #8]
 8005b48:	e11d      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005b4a:	b913      	cbnz	r3, 8005b52 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7fe fd00 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
        break;
 8005b50:	e119      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005b52:	2000      	movs	r0, #0
 8005b54:	e117      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005b56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b5a:	d023      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
 8005b5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b60:	d107      	bne.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b62:	4b56      	ldr	r3, [pc, #344]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005b6a:	f000 810c 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8005b6e:	4855      	ldr	r0, [pc, #340]	@ (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005b70:	e109      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005b72:	2000      	movs	r0, #0
 8005b74:	e107      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b76:	4b51      	ldr	r3, [pc, #324]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005b7e:	f000 8102 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b82:	a804      	add	r0, sp, #16
 8005b84:	f7ff fb2c 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b88:	9805      	ldr	r0, [sp, #20]
 8005b8a:	e0fc      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f010 0004 	ands.w	r0, r0, #4
 8005b94:	f000 80f7 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005b9e:	4848      	ldr	r0, [pc, #288]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005ba0:	40d8      	lsrs	r0, r3
 8005ba2:	e0f0      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ba4:	4b45      	ldr	r3, [pc, #276]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8005bac:	f000 80eb 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8005bb0:	4845      	ldr	r0, [pc, #276]	@ (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005bb2:	e0e8      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005bb4:	4b41      	ldr	r3, [pc, #260]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8005bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc0:	d010      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8005bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc6:	d018      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x426>
 8005bc8:	b10b      	cbz	r3, 8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e0db      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bce:	4b3b      	ldr	r3, [pc, #236]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005bd6:	f000 80d6 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bda:	a804      	add	r0, sp, #16
 8005bdc:	f7ff fb00 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005be0:	9804      	ldr	r0, [sp, #16]
 8005be2:	e0d0      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005be4:	4b35      	ldr	r3, [pc, #212]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005bec:	f000 80cb 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bf0:	a801      	add	r0, sp, #4
 8005bf2:	f7ff fbf3 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005bf6:	9803      	ldr	r0, [sp, #12]
 8005bf8:	e0c5      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bfa:	4a30      	ldr	r2, [pc, #192]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005bfc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005bfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	f012 0f04 	tst.w	r2, #4
 8005c08:	d000      	beq.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
 8005c0a:	b193      	cbz	r3, 8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005c14:	d003      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8005c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c1a:	f000 80c1 	beq.w	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c1e:	4a27      	ldr	r2, [pc, #156]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005c26:	d002      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
 8005c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c2c:	d008      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          frequency = 0;
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e0a9      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c32:	4b22      	ldr	r3, [pc, #136]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005c3a:	4821      	ldr	r0, [pc, #132]	@ (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005c3c:	40d8      	lsrs	r0, r3
 8005c3e:	e0a2      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8005c40:	4820      	ldr	r0, [pc, #128]	@ (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005c42:	e0a0      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005c44:	4b1d      	ldr	r3, [pc, #116]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c46:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
    switch (srcclk)
 8005c48:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8005c4c:	d00d      	beq.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	f000 8099 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c54:	4b19      	ldr	r3, [pc, #100]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005c5c:	f000 8093 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c60:	a804      	add	r0, sp, #16
 8005c62:	f7ff fabd 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c66:	9806      	ldr	r0, [sp, #24]
 8005c68:	e08d      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c6a:	4b14      	ldr	r3, [pc, #80]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005c72:	f000 8088 	beq.w	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c76:	a807      	add	r0, sp, #28
 8005c78:	f7ff fcae 	bl	80055d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c7c:	9808      	ldr	r0, [sp, #32]
 8005c7e:	e082      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005c80:	4b0e      	ldr	r3, [pc, #56]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c84:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8005c88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c8c:	d03c      	beq.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
 8005c8e:	d81d      	bhi.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 8005c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c94:	d02e      	beq.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8005c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c9a:	d109      	bne.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c9c:	4b07      	ldr	r3, [pc, #28]	@ (8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005ca4:	d06f      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca6:	a801      	add	r0, sp, #4
 8005ca8:	f7ff fb98 	bl	80053dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cac:	9802      	ldr	r0, [sp, #8]
 8005cae:	e06a      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005cb0:	b913      	cbnz	r3, 8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005cb2:	f7ff fa83 	bl	80051bc <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8005cb6:	e066      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e064      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	03d09000 	.word	0x03d09000
 8005cc4:	017d7840 	.word	0x017d7840
 8005cc8:	003d0900 	.word	0x003d0900
 8005ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd0:	d025      	beq.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8005cd2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005cd6:	d101      	bne.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cd8:	4832      	ldr	r0, [pc, #200]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005cda:	e054      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce0:	d106      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ce2:	4b31      	ldr	r3, [pc, #196]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8005cea:	d04c      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8005cec:	482f      	ldr	r0, [pc, #188]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005cee:	e04a      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (srcclk)
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e048      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005cfc:	d043      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cfe:	a804      	add	r0, sp, #16
 8005d00:	f7ff fa6e 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d04:	9805      	ldr	r0, [sp, #20]
 8005d06:	e03e      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d08:	4b27      	ldr	r3, [pc, #156]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	f010 0004 	ands.w	r0, r0, #4
 8005d10:	d039      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005d18:	4825      	ldr	r0, [pc, #148]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005d1a:	40d8      	lsrs	r0, r3
 8005d1c:	e033      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d1e:	4b22      	ldr	r3, [pc, #136]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005d26:	d02e      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8005d28:	4822      	ldr	r0, [pc, #136]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005d2a:	e02c      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8005d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d38:	d00c      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8005d40:	b10b      	cbz	r3, 8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8005d42:	2000      	movs	r0, #0
  return frequency;
 8005d44:	e01f      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d46:	4b18      	ldr	r3, [pc, #96]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005d4e:	d01a      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8005d50:	4818      	ldr	r0, [pc, #96]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005d52:	e018      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d54:	4b14      	ldr	r3, [pc, #80]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005d5c:	d013      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d5e:	a807      	add	r0, sp, #28
 8005d60:	f7ff fc3a 	bl	80055d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d64:	9808      	ldr	r0, [sp, #32]
 8005d66:	e00e      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d68:	4b0f      	ldr	r3, [pc, #60]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005d70:	d009      	beq.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d72:	a804      	add	r0, sp, #16
 8005d74:	f7ff fa34 	bl	80051e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d78:	9805      	ldr	r0, [sp, #20]
 8005d7a:	e004      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
    switch (saiclocksource)
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e002      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8005d80:	480a      	ldr	r0, [pc, #40]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005d82:	e000      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d84:	4807      	ldr	r0, [pc, #28]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
}
 8005d86:	b00b      	add	sp, #44	@ 0x2c
 8005d88:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 8005d8c:	4807      	ldr	r0, [pc, #28]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005d8e:	e7fa      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d90:	4804      	ldr	r0, [pc, #16]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005d92:	e7f8      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8005d94:	4805      	ldr	r0, [pc, #20]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005d96:	e7f6      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d98:	4802      	ldr	r0, [pc, #8]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8005d9a:	e7f4      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8005d9c:	4803      	ldr	r0, [pc, #12]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005d9e:	e7f2      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8005da0:	4802      	ldr	r0, [pc, #8]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005da2:	e7f0      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8005da4:	00bb8000 	.word	0x00bb8000
 8005da8:	58024400 	.word	0x58024400
 8005dac:	003d0900 	.word	0x003d0900
 8005db0:	03d09000 	.word	0x03d09000
 8005db4:	017d7840 	.word	0x017d7840

08005db8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005dc2:	f7fc f8e5 	bl	8001f90 <HAL_GetTick>
 8005dc6:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005dc8:	2108      	movs	r1, #8
 8005dca:	6820      	ldr	r0, [r4, #0]
 8005dcc:	f001 faca 	bl	8007364 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	b118      	cbz	r0, 8005ddc <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	b007      	add	sp, #28
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005ddc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005dde:	0409      	lsls	r1, r1, #16
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	f001 fb80 	bl	80074e6 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005de6:	4605      	mov	r5, r0
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1f3      	bne.n	8005dd4 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
 8005df0:	9300      	str	r3, [sp, #0]
  config.DataLength    = 8U;
 8005df2:	2308      	movs	r3, #8
 8005df4:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005df6:	2330      	movs	r3, #48	@ 0x30
 8005df8:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e06:	4669      	mov	r1, sp
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	f001 f9b2 	bl	8007172 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005e0e:	6820      	ldr	r0, [r4, #0]
 8005e10:	f001 fb9b 	bl	800754a <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e14:	4605      	mov	r5, r0
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d1dc      	bne.n	8005dd4 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005e1a:	4682      	mov	sl, r0
 8005e1c:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005e1e:	f240 582a 	movw	r8, #1322	@ 0x52a
      index++;
 8005e22:	f04f 0b01 	mov.w	fp, #1
 8005e26:	e005      	b.n	8005e34 <SD_FindSCR+0x7c>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e28:	f7fc f8b2 	bl	8001f90 <HAL_GetTick>
 8005e2c:	1b80      	subs	r0, r0, r6
 8005e2e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e32:	d04a      	beq.n	8005eca <SD_FindSCR+0x112>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005e34:	6820      	ldr	r0, [r4, #0]
 8005e36:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005e38:	ea13 0f08 	tst.w	r3, r8
 8005e3c:	d10d      	bne.n	8005e5a <SD_FindSCR+0xa2>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005e3e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005e40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e44:	432b      	orrs	r3, r5
 8005e46:	d1ef      	bne.n	8005e28 <SD_FindSCR+0x70>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005e48:	f001 f968 	bl	800711c <SDMMC_ReadFIFO>
 8005e4c:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005e4e:	6820      	ldr	r0, [r4, #0]
 8005e50:	f001 f964 	bl	800711c <SDMMC_ReadFIFO>
 8005e54:	4682      	mov	sl, r0
      index++;
 8005e56:	465d      	mov	r5, fp
 8005e58:	e7e6      	b.n	8005e28 <SD_FindSCR+0x70>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e5a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005e5c:	f013 0f08 	tst.w	r3, #8
 8005e60:	d12a      	bne.n	8005eb8 <SD_FindSCR+0x100>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e62:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005e64:	f013 0f02 	tst.w	r3, #2
 8005e68:	d129      	bne.n	8005ebe <SD_FindSCR+0x106>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005e6a:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8005e6c:	f015 0520 	ands.w	r5, r5, #32
 8005e70:	d128      	bne.n	8005ec4 <SD_FindSCR+0x10c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e72:	4b17      	ldr	r3, [pc, #92]	@ (8005ed0 <SD_FindSCR+0x118>)
 8005e74:	6383      	str	r3, [r0, #56]	@ 0x38
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e76:	ea4f 631a 	mov.w	r3, sl, lsr #24
 8005e7a:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e7e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8005e82:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e86:	4313      	orrs	r3, r2
 8005e88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8005e8c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8005e90:	ea43 030a 	orr.w	r3, r3, sl
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005e94:	603b      	str	r3, [r7, #0]
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e96:	ea4f 6319 	mov.w	r3, r9, lsr #24
 8005e9a:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005e9e:	ea4f 2209 	mov.w	r2, r9, lsl #8
 8005ea2:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8005eac:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8005eb0:	ea43 0309 	orr.w	r3, r3, r9
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005eb4:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8005eb6:	e78d      	b.n	8005dd4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005eb8:	2508      	movs	r5, #8
 8005eba:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005ebc:	e78a      	b.n	8005dd4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005ebe:	2502      	movs	r5, #2
 8005ec0:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ec2:	e787      	b.n	8005dd4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005ec4:	2520      	movs	r5, #32
 8005ec6:	6385      	str	r5, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005ec8:	e784      	b.n	8005dd4 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8005eca:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 8005ece:	e781      	b.n	8005dd4 <SD_FindSCR+0x1c>
 8005ed0:	18000f3a 	.word	0x18000f3a

08005ed4 <HAL_SD_ReadBlocks>:
{
 8005ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	4604      	mov	r4, r0
 8005edc:	460f      	mov	r7, r1
 8005ede:	4615      	mov	r5, r2
 8005ee0:	4699      	mov	r9, r3
  uint32_t tickstart = HAL_GetTick();
 8005ee2:	f7fc f855 	bl	8001f90 <HAL_GetTick>
  if (NULL == pData)
 8005ee6:	2f00      	cmp	r7, #0
 8005ee8:	d03a      	beq.n	8005f60 <HAL_SD_ReadBlocks+0x8c>
 8005eea:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8005eec:	f894 6030 	ldrb.w	r6, [r4, #48]	@ 0x30
 8005ef0:	b2f6      	uxtb	r6, r6
 8005ef2:	2e01      	cmp	r6, #1
 8005ef4:	f040 80e3 	bne.w	80060be <HAL_SD_ReadBlocks+0x1ea>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005efc:	eb05 0309 	add.w	r3, r5, r9
 8005f00:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d832      	bhi.n	8005f6c <HAL_SD_ReadBlocks+0x98>
    hsd->State = HAL_SD_STATE_BUSY;
 8005f06:	2303      	movs	r3, #3
 8005f08:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->Instance->DCTRL = 0U;
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005f14:	2b01      	cmp	r3, #1
      add *= 512U;
 8005f16:	bf18      	it	ne
 8005f18:	026d      	lslne	r5, r5, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f20:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8005f24:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f26:	2390      	movs	r3, #144	@ 0x90
 8005f28:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005f32:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f34:	4669      	mov	r1, sp
 8005f36:	6820      	ldr	r0, [r4, #0]
 8005f38:	f001 f91b 	bl	8007172 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	68d3      	ldr	r3, [r2, #12]
 8005f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f44:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8005f46:	f1b9 0f01 	cmp.w	r9, #1
 8005f4a:	d914      	bls.n	8005f76 <HAL_SD_ReadBlocks+0xa2>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005f50:	4629      	mov	r1, r5
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	f001 fa38 	bl	80073c8 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f58:	b9a0      	cbnz	r0, 8005f84 <HAL_SD_ReadBlocks+0xb0>
    dataremaining = config.DataLength;
 8005f5a:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f5e:	e027      	b.n	8005fb0 <HAL_SD_ReadBlocks+0xdc>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f66:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8005f68:	2601      	movs	r6, #1
 8005f6a:	e0ad      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8005f74:	e0a8      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005f76:	2301      	movs	r3, #1
 8005f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	f001 fa0a 	bl	8007396 <SDMMC_CmdReadSingleBlock>
 8005f82:	e7e9      	b.n	8005f58 <HAL_SD_ReadBlocks+0x84>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	4a52      	ldr	r2, [pc, #328]	@ (80060d0 <HAL_SD_ReadBlocks+0x1fc>)
 8005f88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005f8a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f8c:	4303      	orrs	r3, r0
 8005f8e:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f90:	2301      	movs	r3, #1
 8005f92:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8005f9a:	e095      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
          tempbuff++;
 8005f9c:	3720      	adds	r7, #32
        dataremaining -= 32U;
 8005f9e:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005fa2:	f7fb fff5 	bl	8001f90 <HAL_GetTick>
 8005fa6:	eba0 0008 	sub.w	r0, r0, r8
 8005faa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fac:	4298      	cmp	r0, r3
 8005fae:	d220      	bcs.n	8005ff2 <HAL_SD_ReadBlocks+0x11e>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fb4:	f412 7f95 	tst.w	r2, #298	@ 0x12a
 8005fb8:	d129      	bne.n	800600e <HAL_SD_ReadBlocks+0x13a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fbc:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005fc0:	d0ef      	beq.n	8005fa2 <HAL_SD_ReadBlocks+0xce>
 8005fc2:	f1bb 0f1f 	cmp.w	fp, #31
 8005fc6:	d9ec      	bls.n	8005fa2 <HAL_SD_ReadBlocks+0xce>
        for (count = 0U; count < 8U; count++)
 8005fc8:	1d3d      	adds	r5, r7, #4
 8005fca:	f107 0a24 	add.w	sl, r7, #36	@ 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005fce:	6820      	ldr	r0, [r4, #0]
 8005fd0:	f001 f8a4 	bl	800711c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005fd4:	f805 0c04 	strb.w	r0, [r5, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005fd8:	0a03      	lsrs	r3, r0, #8
 8005fda:	f805 3c03 	strb.w	r3, [r5, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005fde:	0c03      	lsrs	r3, r0, #16
 8005fe0:	f805 3c02 	strb.w	r3, [r5, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005fe4:	0e00      	lsrs	r0, r0, #24
 8005fe6:	f805 0c01 	strb.w	r0, [r5, #-1]
        for (count = 0U; count < 8U; count++)
 8005fea:	3504      	adds	r5, #4
 8005fec:	4555      	cmp	r5, sl
 8005fee:	d1ee      	bne.n	8005fce <HAL_SD_ReadBlocks+0xfa>
 8005ff0:	e7d4      	b.n	8005f9c <HAL_SD_ReadBlocks+0xc8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	4a36      	ldr	r2, [pc, #216]	@ (80060d0 <HAL_SD_ReadBlocks+0x1fc>)
 8005ff6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ffa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ffe:	6363      	str	r3, [r4, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006000:	2301      	movs	r3, #1
 8006002:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006006:	2300      	movs	r3, #0
 8006008:	62e3      	str	r3, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800600a:	2603      	movs	r6, #3
 800600c:	e05c      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006014:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006016:	6820      	ldr	r0, [r4, #0]
 8006018:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800601a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800601e:	d002      	beq.n	8006026 <HAL_SD_ReadBlocks+0x152>
 8006020:	f1b9 0f01 	cmp.w	r9, #1
 8006024:	d818      	bhi.n	8006058 <HAL_SD_ReadBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800602a:	f012 0f08 	tst.w	r2, #8
 800602e:	d127      	bne.n	8006080 <HAL_SD_ReadBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006032:	f012 0f02 	tst.w	r2, #2
 8006036:	d12f      	bne.n	8006098 <HAL_SD_ReadBlocks+0x1c4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800603a:	f012 0f20 	tst.w	r2, #32
 800603e:	d037      	beq.n	80060b0 <HAL_SD_ReadBlocks+0x1dc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006040:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <HAL_SD_ReadBlocks+0x1fc>)
 8006042:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006046:	f043 0320 	orr.w	r3, r3, #32
 800604a:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800604c:	2301      	movs	r3, #1
 800604e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006052:	2300      	movs	r3, #0
 8006054:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8006056:	e037      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006058:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800605a:	2b03      	cmp	r3, #3
 800605c:	d0e3      	beq.n	8006026 <HAL_SD_ReadBlocks+0x152>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800605e:	f001 f9ff 	bl	8007460 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8006062:	4603      	mov	r3, r0
 8006064:	2800      	cmp	r0, #0
 8006066:	d0de      	beq.n	8006026 <HAL_SD_ReadBlocks+0x152>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	4919      	ldr	r1, [pc, #100]	@ (80060d0 <HAL_SD_ReadBlocks+0x1fc>)
 800606c:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800606e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006070:	4313      	orrs	r3, r2
 8006072:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006074:	2301      	movs	r3, #1
 8006076:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800607a:	2300      	movs	r3, #0
 800607c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800607e:	e023      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006080:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <HAL_SD_ReadBlocks+0x1fc>)
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006084:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006086:	f043 0308 	orr.w	r3, r3, #8
 800608a:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800608c:	2301      	movs	r3, #1
 800608e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006092:	2300      	movs	r3, #0
 8006094:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8006096:	e017      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006098:	4a0d      	ldr	r2, [pc, #52]	@ (80060d0 <HAL_SD_ReadBlocks+0x1fc>)
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800609c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800609e:	f043 0302 	orr.w	r3, r3, #2
 80060a2:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 80060ae:	e00b      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060b0:	4a08      	ldr	r2, [pc, #32]	@ (80060d4 <HAL_SD_ReadBlocks+0x200>)
 80060b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_OK;
 80060ba:	2600      	movs	r6, #0
 80060bc:	e004      	b.n	80060c8 <HAL_SD_ReadBlocks+0x1f4>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80060be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060c4:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80060c6:	2601      	movs	r6, #1
}
 80060c8:	4630      	mov	r0, r6
 80060ca:	b007      	add	sp, #28
 80060cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d0:	1fe00fff 	.word	0x1fe00fff
 80060d4:	18000f3a 	.word	0x18000f3a

080060d8 <HAL_SD_WriteBlocks>:
{
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	b089      	sub	sp, #36	@ 0x24
 80060de:	4604      	mov	r4, r0
 80060e0:	460f      	mov	r7, r1
 80060e2:	4615      	mov	r5, r2
 80060e4:	4699      	mov	r9, r3
  uint32_t tickstart = HAL_GetTick();
 80060e6:	f7fb ff53 	bl	8001f90 <HAL_GetTick>
  if (NULL == pData)
 80060ea:	2f00      	cmp	r7, #0
 80060ec:	d039      	beq.n	8006162 <HAL_SD_WriteBlocks+0x8a>
 80060ee:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 80060f0:	f894 6030 	ldrb.w	r6, [r4, #48]	@ 0x30
 80060f4:	b2f6      	uxtb	r6, r6
 80060f6:	2e01      	cmp	r6, #1
 80060f8:	f040 80e5 	bne.w	80062c6 <HAL_SD_WriteBlocks+0x1ee>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006100:	eb05 0309 	add.w	r3, r5, r9
 8006104:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006106:	4293      	cmp	r3, r2
 8006108:	d831      	bhi.n	800616e <HAL_SD_WriteBlocks+0x96>
    hsd->State = HAL_SD_STATE_BUSY;
 800610a:	2303      	movs	r3, #3
 800610c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->Instance->DCTRL = 0U;
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006116:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006118:	2b01      	cmp	r3, #1
      add *= 512U;
 800611a:	bf18      	it	ne
 800611c:	026d      	lslne	r5, r5, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006124:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8006128:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800612a:	2390      	movs	r3, #144	@ 0x90
 800612c:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800612e:	2300      	movs	r3, #0
 8006130:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006132:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006134:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006136:	a902      	add	r1, sp, #8
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	f001 f81a 	bl	8007172 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	68d3      	ldr	r3, [r2, #12]
 8006142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006146:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8006148:	f1b9 0f01 	cmp.w	r9, #1
 800614c:	d914      	bls.n	8006178 <HAL_SD_WriteBlocks+0xa0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800614e:	2320      	movs	r3, #32
 8006150:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006152:	4629      	mov	r1, r5
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	f001 f969 	bl	800742c <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800615a:	b9a0      	cbnz	r0, 8006186 <HAL_SD_WriteBlocks+0xae>
    dataremaining = config.DataLength;
 800615c:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006160:	e027      	b.n	80061b2 <HAL_SD_WriteBlocks+0xda>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006162:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006164:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006168:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800616a:	2601      	movs	r6, #1
 800616c:	e0b0      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800616e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006170:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006174:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8006176:	e0ab      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006178:	2310      	movs	r3, #16
 800617a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800617c:	4629      	mov	r1, r5
 800617e:	6820      	ldr	r0, [r4, #0]
 8006180:	f001 f93b 	bl	80073fa <SDMMC_CmdWriteSingleBlock>
 8006184:	e7e9      	b.n	800615a <HAL_SD_WriteBlocks+0x82>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	4a53      	ldr	r2, [pc, #332]	@ (80062d8 <HAL_SD_WriteBlocks+0x200>)
 800618a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800618c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800618e:	4303      	orrs	r3, r0
 8006190:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006192:	2301      	movs	r3, #1
 8006194:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006198:	2300      	movs	r3, #0
 800619a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800619c:	e098      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
          tempbuff++;
 800619e:	3720      	adds	r7, #32
        dataremaining -= 32U;
 80061a0:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80061a4:	f7fb fef4 	bl	8001f90 <HAL_GetTick>
 80061a8:	eba0 0008 	sub.w	r0, r0, r8
 80061ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061ae:	4298      	cmp	r0, r3
 80061b0:	d225      	bcs.n	80061fe <HAL_SD_WriteBlocks+0x126>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061b6:	f412 7f8d 	tst.w	r2, #282	@ 0x11a
 80061ba:	d12c      	bne.n	8006216 <HAL_SD_WriteBlocks+0x13e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80061bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061be:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80061c2:	d0ef      	beq.n	80061a4 <HAL_SD_WriteBlocks+0xcc>
 80061c4:	f1bb 0f1f 	cmp.w	fp, #31
 80061c8:	d9ec      	bls.n	80061a4 <HAL_SD_WriteBlocks+0xcc>
        for (count = 0U; count < 8U; count++)
 80061ca:	1d3d      	adds	r5, r7, #4
 80061cc:	f107 0a24 	add.w	sl, r7, #36	@ 0x24
          data |= ((uint32_t)(*tempbuff) << 8U);
 80061d0:	f815 2c03 	ldrb.w	r2, [r5, #-3]
          data |= ((uint32_t)(*tempbuff) << 16U);
 80061d4:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 80061d8:	041b      	lsls	r3, r3, #16
 80061da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data = (uint32_t)(*tempbuff);
 80061de:	f815 2c04 	ldrb.w	r2, [r5, #-4]
          data |= ((uint32_t)(*tempbuff) << 16U);
 80061e2:	4313      	orrs	r3, r2
          data |= ((uint32_t)(*tempbuff) << 24U);
 80061e4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80061ec:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061ee:	a901      	add	r1, sp, #4
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	f000 ff96 	bl	8007122 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80061f6:	3504      	adds	r5, #4
 80061f8:	4555      	cmp	r5, sl
 80061fa:	d1e9      	bne.n	80061d0 <HAL_SD_WriteBlocks+0xf8>
 80061fc:	e7cf      	b.n	800619e <HAL_SD_WriteBlocks+0xc6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	4a35      	ldr	r2, [pc, #212]	@ (80062d8 <HAL_SD_WriteBlocks+0x200>)
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006206:	6363      	str	r3, [r4, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006208:	2301      	movs	r3, #1
 800620a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	62e3      	str	r3, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8006212:	2603      	movs	r6, #3
 8006214:	e05c      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800621c:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800621e:	6820      	ldr	r0, [r4, #0]
 8006220:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006222:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006226:	d002      	beq.n	800622e <HAL_SD_WriteBlocks+0x156>
 8006228:	f1b9 0f01 	cmp.w	r9, #1
 800622c:	d818      	bhi.n	8006260 <HAL_SD_WriteBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006232:	f012 0f08 	tst.w	r2, #8
 8006236:	d127      	bne.n	8006288 <HAL_SD_WriteBlocks+0x1b0>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800623a:	f012 0f02 	tst.w	r2, #2
 800623e:	d12f      	bne.n	80062a0 <HAL_SD_WriteBlocks+0x1c8>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006242:	f012 0f10 	tst.w	r2, #16
 8006246:	d037      	beq.n	80062b8 <HAL_SD_WriteBlocks+0x1e0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006248:	4a23      	ldr	r2, [pc, #140]	@ (80062d8 <HAL_SD_WriteBlocks+0x200>)
 800624a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800624c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800624e:	f043 0310 	orr.w	r3, r3, #16
 8006252:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006254:	2301      	movs	r3, #1
 8006256:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800625a:	2300      	movs	r3, #0
 800625c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800625e:	e037      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006260:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006262:	2b03      	cmp	r3, #3
 8006264:	d0e3      	beq.n	800622e <HAL_SD_WriteBlocks+0x156>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006266:	f001 f8fb 	bl	8007460 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800626a:	4603      	mov	r3, r0
 800626c:	2800      	cmp	r0, #0
 800626e:	d0de      	beq.n	800622e <HAL_SD_WriteBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	4919      	ldr	r1, [pc, #100]	@ (80062d8 <HAL_SD_WriteBlocks+0x200>)
 8006274:	6391      	str	r1, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006276:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006278:	4313      	orrs	r3, r2
 800627a:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800627c:	2301      	movs	r3, #1
 800627e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006282:	2300      	movs	r3, #0
 8006284:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8006286:	e023      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006288:	4a13      	ldr	r2, [pc, #76]	@ (80062d8 <HAL_SD_WriteBlocks+0x200>)
 800628a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800628c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800628e:	f043 0308 	orr.w	r3, r3, #8
 8006292:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006294:	2301      	movs	r3, #1
 8006296:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800629a:	2300      	movs	r3, #0
 800629c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800629e:	e017      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062a0:	4a0d      	ldr	r2, [pc, #52]	@ (80062d8 <HAL_SD_WriteBlocks+0x200>)
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062a6:	f043 0302 	orr.w	r3, r3, #2
 80062aa:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 80062b6:	e00b      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062b8:	4a08      	ldr	r2, [pc, #32]	@ (80062dc <HAL_SD_WriteBlocks+0x204>)
 80062ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062bc:	2301      	movs	r3, #1
 80062be:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_OK;
 80062c2:	2600      	movs	r6, #0
 80062c4:	e004      	b.n	80062d0 <HAL_SD_WriteBlocks+0x1f8>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80062c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062cc:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80062ce:	2601      	movs	r6, #1
}
 80062d0:	4630      	mov	r0, r6
 80062d2:	b009      	add	sp, #36	@ 0x24
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	1fe00fff 	.word	0x1fe00fff
 80062dc:	18000f3a 	.word	0x18000f3a

080062e0 <HAL_SD_GetCardCSD>:
{
 80062e0:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80062e2:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80062e4:	0f92      	lsrs	r2, r2, #30
 80062e6:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062e8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80062ea:	f3c2 6283 	ubfx	r2, r2, #26, #4
 80062ee:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80062f0:	f890 205f 	ldrb.w	r2, [r0, #95]	@ 0x5f
 80062f4:	f002 0203 	and.w	r2, r2, #3
 80062f8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80062fa:	f890 205e 	ldrb.w	r2, [r0, #94]	@ 0x5e
 80062fe:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006300:	f890 205d 	ldrb.w	r2, [r0, #93]	@ 0x5d
 8006304:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006306:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 800630a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800630c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800630e:	0d12      	lsrs	r2, r2, #20
 8006310:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006312:	f8b0 2062 	ldrh.w	r2, [r0, #98]	@ 0x62
 8006316:	f002 020f 	and.w	r2, r2, #15
 800631a:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800631c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800631e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006322:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006324:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8006326:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800632a:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800632c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800632e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006332:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006334:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8006336:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800633a:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800633c:	2200      	movs	r2, #0
 800633e:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8006340:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8006342:	2a00      	cmp	r2, #0
 8006344:	f040 8086 	bne.w	8006454 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006348:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 800634a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800634e:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8006352:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8006354:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8006358:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800635a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800635c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8006360:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006362:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8006366:	f002 0207 	and.w	r2, r2, #7
 800636a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800636c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800636e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8006372:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006374:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006376:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800637a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800637c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800637e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8006382:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006384:	6908      	ldr	r0, [r1, #16]
 8006386:	3001      	adds	r0, #1
 8006388:	6498      	str	r0, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800638a:	7e0a      	ldrb	r2, [r1, #24]
 800638c:	f002 0207 	and.w	r2, r2, #7
 8006390:	3202      	adds	r2, #2
 8006392:	4090      	lsls	r0, r2
 8006394:	6498      	str	r0, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006396:	f891 c008 	ldrb.w	ip, [r1, #8]
 800639a:	f00c 0c0f 	and.w	ip, ip, #15
 800639e:	2201      	movs	r2, #1
 80063a0:	fa02 f20c 	lsl.w	r2, r2, ip
 80063a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80063a6:	0a52      	lsrs	r2, r2, #9
 80063a8:	fb00 f202 	mul.w	r2, r0, r2
 80063ac:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80063ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b2:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80063b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063b6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80063ba:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80063bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063be:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80063c2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80063c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063ca:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80063cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80063ce:	0fd2      	lsrs	r2, r2, #31
 80063d0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80063d2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80063d4:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80063d8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80063da:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80063dc:	f3c2 6282 	ubfx	r2, r2, #26, #3
 80063e0:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80063e2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80063e4:	f3c2 5283 	ubfx	r2, r2, #22, #4
 80063e8:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063ea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80063ec:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80063f0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80063f4:	2000      	movs	r0, #0
 80063f6:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80063fe:	f002 0201 	and.w	r2, r2, #1
 8006402:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006406:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006408:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800640c:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006410:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006412:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8006416:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800641a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800641c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8006420:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006424:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006426:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800642a:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800642e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006430:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8006434:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006438:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800643a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800643e:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006444:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8006448:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800644c:	2301      	movs	r3, #1
 800644e:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8006452:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006454:	2a01      	cmp	r2, #1
 8006456:	d110      	bne.n	800647a <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006458:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800645a:	0412      	lsls	r2, r2, #16
 800645c:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8006460:	f8b0 0066 	ldrh.w	r0, [r0, #102]	@ 0x66
 8006464:	4302      	orrs	r2, r0
 8006466:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006468:	690a      	ldr	r2, [r1, #16]
 800646a:	3201      	adds	r2, #1
 800646c:	0292      	lsls	r2, r2, #10
 800646e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006470:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8006472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006476:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006478:	e799      	b.n	80063ae <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800647a:	6802      	ldr	r2, [r0, #0]
 800647c:	4904      	ldr	r1, [pc, #16]	@ (8006490 <HAL_SD_GetCardCSD+0x1b0>)
 800647e:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006480:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8006482:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006486:	6342      	str	r2, [r0, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006488:	2001      	movs	r0, #1
 800648a:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800648e:	4770      	bx	lr
 8006490:	1fe00fff 	.word	0x1fe00fff

08006494 <HAL_SD_InitCard>:
{
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006498:	b094      	sub	sp, #80	@ 0x50
 800649a:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800649c:	2300      	movs	r3, #0
 800649e:	930f      	str	r3, [sp, #60]	@ 0x3c
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064a0:	9310      	str	r3, [sp, #64]	@ 0x40
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064a2:	9311      	str	r3, [sp, #68]	@ 0x44
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064a4:	9312      	str	r3, [sp, #72]	@ 0x48
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80064a6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80064aa:	2100      	movs	r1, #0
 80064ac:	f7ff f992 	bl	80057d4 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 80064b0:	b948      	cbnz	r0, 80064c6 <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 80064b2:	2501      	movs	r5, #1
 80064b4:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80064b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064bc:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80064be:	4628      	mov	r0, r5
 80064c0:	b014      	add	sp, #80	@ 0x50
 80064c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c6:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80064c8:	0a05      	lsrs	r5, r0, #8
 80064ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006708 <HAL_SD_InitCard+0x274>)
 80064cc:	fba3 3505 	umull	r3, r5, r3, r5
 80064d0:	092d      	lsrs	r5, r5, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 80064d2:	9513      	str	r5, [sp, #76]	@ 0x4c
 80064d4:	ab14      	add	r3, sp, #80	@ 0x50
 80064d6:	e913 0003 	ldmdb	r3, {r0, r1}
 80064da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80064de:	ab0f      	add	r3, sp, #60	@ 0x3c
 80064e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	f000 fe02 	bl	80070ec <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	f000 fe1f 	bl	800712c <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 80064ee:	4b87      	ldr	r3, [pc, #540]	@ (800670c <HAL_SD_InitCard+0x278>)
 80064f0:	429e      	cmp	r6, r3
 80064f2:	d902      	bls.n	80064fa <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80064f4:	006d      	lsls	r5, r5, #1
 80064f6:	fbb6 f6f5 	udiv	r6, r6, r5
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80064fa:	4885      	ldr	r0, [pc, #532]	@ (8006710 <HAL_SD_InitCard+0x27c>)
 80064fc:	fbb0 f0f6 	udiv	r0, r0, r6
 8006500:	3001      	adds	r0, #1
 8006502:	f7fb fd4b 	bl	8001f9c <HAL_Delay>
  __IO uint32_t count = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	f000 fe46 	bl	800719c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006510:	4680      	mov	r8, r0
 8006512:	b138      	cbz	r0, 8006524 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 8006514:	2501      	movs	r5, #1
 8006516:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800651a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800651c:	ea43 0308 	orr.w	r3, r3, r8
 8006520:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8006522:	e7cc      	b.n	80064be <HAL_SD_InitCard+0x2a>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	f001 f9af 	bl	8007888 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800652a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800652e:	d009      	beq.n	8006544 <HAL_SD_InitCard+0xb0>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006530:	2301      	movs	r3, #1
 8006532:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006534:	2100      	movs	r1, #0
 8006536:	6820      	ldr	r0, [r4, #0]
 8006538:	f000 ffd5 	bl	80074e6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800653c:	b168      	cbz	r0, 800655a <HAL_SD_InitCard+0xc6>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800653e:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 8006542:	e7e7      	b.n	8006514 <HAL_SD_InitCard+0x80>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006544:	2300      	movs	r3, #0
 8006546:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	f000 fe27 	bl	800719c <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800654e:	2800      	cmp	r0, #0
 8006550:	f040 80c7 	bne.w	80066e2 <HAL_SD_InitCard+0x24e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006554:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d0ec      	beq.n	8006534 <HAL_SD_InitCard+0xa0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800655a:	9a03      	ldr	r2, [sp, #12]
 800655c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8006560:	429a      	cmp	r2, r3
 8006562:	f200 80c7 	bhi.w	80066f4 <HAL_SD_InitCard+0x260>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006566:	2500      	movs	r5, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006568:	4e6a      	ldr	r6, [pc, #424]	@ (8006714 <HAL_SD_InitCard+0x280>)
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800656a:	461f      	mov	r7, r3
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800656c:	4629      	mov	r1, r5
 800656e:	6820      	ldr	r0, [r4, #0]
 8006570:	f000 ffb9 	bl	80074e6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006574:	4603      	mov	r3, r0
 8006576:	2800      	cmp	r0, #0
 8006578:	f040 80ba 	bne.w	80066f0 <HAL_SD_InitCard+0x25c>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800657c:	4631      	mov	r1, r6
 800657e:	6820      	ldr	r0, [r4, #0]
 8006580:	f001 f8bc 	bl	80076fc <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006584:	2800      	cmp	r0, #0
 8006586:	f040 80b1 	bne.w	80066ec <HAL_SD_InitCard+0x258>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800658a:	4629      	mov	r1, r5
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	f000 fded 	bl	800716c <SDMMC_GetResponse>
    count++;
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	3301      	adds	r3, #1
 8006596:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	4602      	mov	r2, r0
 800659c:	2800      	cmp	r0, #0
 800659e:	db01      	blt.n	80065a4 <HAL_SD_InitCard+0x110>
 80065a0:	42bb      	cmp	r3, r7
 80065a2:	d9e3      	bls.n	800656c <HAL_SD_InitCard+0xd8>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80065a4:	9903      	ldr	r1, [sp, #12]
 80065a6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80065aa:	4299      	cmp	r1, r3
 80065ac:	f200 809b 	bhi.w	80066e6 <HAL_SD_InitCard+0x252>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80065b0:	f012 4f80 	tst.w	r2, #1073741824	@ 0x40000000
 80065b4:	bf18      	it	ne
 80065b6:	f04f 0801 	movne.w	r8, #1
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80065ba:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  uint16_t sd_rca = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 80065c4:	f7fb fce4 	bl	8001f90 <HAL_GetTick>
 80065c8:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80065ca:	6820      	ldr	r0, [r4, #0]
 80065cc:	f000 fdb4 	bl	8007138 <SDMMC_GetPowerState>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d07d      	beq.n	80066d0 <HAL_SD_InitCard+0x23c>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80065d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d127      	bne.n	800662a <HAL_SD_InitCard+0x196>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80065da:	2104      	movs	r1, #4
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	f000 fdc5 	bl	800716c <SDMMC_GetResponse>
 80065e2:	0d00      	lsrs	r0, r0, #20
 80065e4:	6420      	str	r0, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80065e6:	a904      	add	r1, sp, #16
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fe79 	bl	80062e0 <HAL_SD_GetCardCSD>
 80065ee:	4605      	mov	r5, r0
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d16a      	bne.n	80066ca <HAL_SD_InitCard+0x236>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80065f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80065f6:	0409      	lsls	r1, r1, #16
 80065f8:	6820      	ldr	r0, [r4, #0]
 80065fa:	f000 ff5b 	bl	80074b4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 80065fe:	4603      	mov	r3, r0
 8006600:	2800      	cmp	r0, #0
 8006602:	d167      	bne.n	80066d4 <HAL_SD_InitCard+0x240>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006608:	6820      	ldr	r0, [r4, #0]
 800660a:	f000 feab 	bl	8007364 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800660e:	4603      	mov	r3, r0
 8006610:	2800      	cmp	r0, #0
 8006612:	f43f af54 	beq.w	80064be <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006616:	6822      	ldr	r2, [r4, #0]
 8006618:	493f      	ldr	r1, [pc, #252]	@ (8006718 <HAL_SD_InitCard+0x284>)
 800661a:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800661c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800661e:	4313      	orrs	r3, r2
 8006620:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006622:	2501      	movs	r5, #1
 8006624:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8006628:	e749      	b.n	80064be <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800662a:	6820      	ldr	r0, [r4, #0]
 800662c:	f001 f80c 	bl	8007648 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8006630:	4603      	mov	r3, r0
 8006632:	2800      	cmp	r0, #0
 8006634:	d14e      	bne.n	80066d4 <HAL_SD_InitCard+0x240>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006636:	2100      	movs	r1, #0
 8006638:	6820      	ldr	r0, [r4, #0]
 800663a:	f000 fd97 	bl	800716c <SDMMC_GetResponse>
 800663e:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006640:	2104      	movs	r1, #4
 8006642:	6820      	ldr	r0, [r4, #0]
 8006644:	f000 fd92 	bl	800716c <SDMMC_GetResponse>
 8006648:	6720      	str	r0, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800664a:	2108      	movs	r1, #8
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	f000 fd8d 	bl	800716c <SDMMC_GetResponse>
 8006652:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006654:	210c      	movs	r1, #12
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	f000 fd88 	bl	800716c <SDMMC_GetResponse>
 800665c:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800665e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006660:	2b03      	cmp	r3, #3
 8006662:	d0ba      	beq.n	80065da <HAL_SD_InitCard+0x146>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006664:	f241 3687 	movw	r6, #4999	@ 0x1387
    while (sd_rca == 0U)
 8006668:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800666c:	b971      	cbnz	r1, 800668c <HAL_SD_InitCard+0x1f8>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800666e:	f10d 010a 	add.w	r1, sp, #10
 8006672:	6820      	ldr	r0, [r4, #0]
 8006674:	f001 f8b4 	bl	80077e0 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8006678:	4603      	mov	r3, r0
 800667a:	bb58      	cbnz	r0, 80066d4 <HAL_SD_InitCard+0x240>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800667c:	f7fb fc88 	bl	8001f90 <HAL_GetTick>
 8006680:	1b43      	subs	r3, r0, r5
 8006682:	42b3      	cmp	r3, r6
 8006684:	d9f0      	bls.n	8006668 <HAL_SD_InitCard+0x1d4>
        return HAL_SD_ERROR_TIMEOUT;
 8006686:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800668a:	e023      	b.n	80066d4 <HAL_SD_InitCard+0x240>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800668c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800668e:	2b03      	cmp	r3, #3
 8006690:	d0a3      	beq.n	80065da <HAL_SD_InitCard+0x146>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006692:	6461      	str	r1, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006694:	0409      	lsls	r1, r1, #16
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	f000 ffec 	bl	8007674 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800669c:	4603      	mov	r3, r0
 800669e:	b9c8      	cbnz	r0, 80066d4 <HAL_SD_InitCard+0x240>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80066a0:	2100      	movs	r1, #0
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	f000 fd62 	bl	800716c <SDMMC_GetResponse>
 80066a8:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80066aa:	2104      	movs	r1, #4
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	f000 fd5d 	bl	800716c <SDMMC_GetResponse>
 80066b2:	6620      	str	r0, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80066b4:	2108      	movs	r1, #8
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	f000 fd58 	bl	800716c <SDMMC_GetResponse>
 80066bc:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80066be:	210c      	movs	r1, #12
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	f000 fd53 	bl	800716c <SDMMC_GetResponse>
 80066c6:	66a0      	str	r0, [r4, #104]	@ 0x68
 80066c8:	e787      	b.n	80065da <HAL_SD_InitCard+0x146>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80066ce:	e001      	b.n	80066d4 <HAL_SD_InitCard+0x240>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 80066d4:	2501      	movs	r5, #1
 80066d6:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80066da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80066dc:	4313      	orrs	r3, r2
 80066de:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80066e0:	e6ed      	b.n	80064be <HAL_SD_InitCard+0x2a>
      return errorstate;
 80066e2:	4680      	mov	r8, r0
 80066e4:	e716      	b.n	8006514 <HAL_SD_InitCard+0x80>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80066e6:	f04f 7880 	mov.w	r8, #16777216	@ 0x1000000
 80066ea:	e713      	b.n	8006514 <HAL_SD_InitCard+0x80>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066ec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
{
 80066f0:	4698      	mov	r8, r3
 80066f2:	e70f      	b.n	8006514 <HAL_SD_InitCard+0x80>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80066f4:	9a03      	ldr	r2, [sp, #12]
 80066f6:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80066fa:	429a      	cmp	r2, r3
 80066fc:	f67f af5d 	bls.w	80065ba <HAL_SD_InitCard+0x126>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006700:	f04f 7880 	mov.w	r8, #16777216	@ 0x1000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8006704:	e706      	b.n	8006514 <HAL_SD_InitCard+0x80>
 8006706:	bf00      	nop
 8006708:	014f8b59 	.word	0x014f8b59
 800670c:	000c34ff 	.word	0x000c34ff
 8006710:	00012110 	.word	0x00012110
 8006714:	c1100000 	.word	0xc1100000
 8006718:	1fe00fff 	.word	0x1fe00fff

0800671c <HAL_SD_GetCardStatus>:
{
 800671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006720:	b096      	sub	sp, #88	@ 0x58
  if (hsd->State == HAL_SD_STATE_BUSY)
 8006722:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b03      	cmp	r3, #3
 800672a:	f000 80c7 	beq.w	80068bc <HAL_SD_GetCardStatus+0x1a0>
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006732:	f7fb fc2d 	bl	8001f90 <HAL_GetTick>
 8006736:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006738:	2100      	movs	r1, #0
 800673a:	6820      	ldr	r0, [r4, #0]
 800673c:	f000 fd16 	bl	800716c <SDMMC_GetResponse>
 8006740:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8006744:	f040 80bf 	bne.w	80068c6 <HAL_SD_GetCardStatus+0x1aa>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006748:	2140      	movs	r1, #64	@ 0x40
 800674a:	6820      	ldr	r0, [r4, #0]
 800674c:	f000 fe0a 	bl	8007364 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006750:	4603      	mov	r3, r0
 8006752:	b110      	cbz	r0, 800675a <HAL_SD_GetCardStatus+0x3e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006754:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006756:	6362      	str	r2, [r4, #52]	@ 0x34
    return errorstate;
 8006758:	e05b      	b.n	8006812 <HAL_SD_GetCardStatus+0xf6>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800675a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800675c:	0409      	lsls	r1, r1, #16
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	f000 fec1 	bl	80074e6 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006764:	4603      	mov	r3, r0
 8006766:	b110      	cbz	r0, 800676e <HAL_SD_GetCardStatus+0x52>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006768:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800676a:	6362      	str	r2, [r4, #52]	@ 0x34
    return errorstate;
 800676c:	e051      	b.n	8006812 <HAL_SD_GetCardStatus+0xf6>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8006774:	2340      	movs	r3, #64	@ 0x40
 8006776:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006778:	2360      	movs	r3, #96	@ 0x60
 800677a:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800677c:	2302      	movs	r3, #2
 800677e:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006780:	2300      	movs	r3, #0
 8006782:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006784:	2301      	movs	r3, #1
 8006786:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006788:	4669      	mov	r1, sp
 800678a:	6820      	ldr	r0, [r4, #0]
 800678c:	f000 fcf1 	bl	8007172 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	f000 ff0c 	bl	80075ae <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006796:	4603      	mov	r3, r0
 8006798:	b908      	cbnz	r0, 800679e <HAL_SD_GetCardStatus+0x82>
  uint32_t *pData = pSDstatus;
 800679a:	ae06      	add	r6, sp, #24
 800679c:	e008      	b.n	80067b0 <HAL_SD_GetCardStatus+0x94>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800679e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80067a0:	6362      	str	r2, [r4, #52]	@ 0x34
    return errorstate;
 80067a2:	e036      	b.n	8006812 <HAL_SD_GetCardStatus+0xf6>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80067a4:	f7fb fbf4 	bl	8001f90 <HAL_GetTick>
 80067a8:	1bc0      	subs	r0, r0, r7
 80067aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067ae:	d02e      	beq.n	800680e <HAL_SD_GetCardStatus+0xf2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067b4:	f412 7f95 	tst.w	r2, #298	@ 0x12a
 80067b8:	d10e      	bne.n	80067d8 <HAL_SD_GetCardStatus+0xbc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80067ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067bc:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80067c0:	d0f0      	beq.n	80067a4 <HAL_SD_GetCardStatus+0x88>
 80067c2:	f106 0820 	add.w	r8, r6, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80067c6:	6820      	ldr	r0, [r4, #0]
 80067c8:	f000 fca8 	bl	800711c <SDMMC_ReadFIFO>
 80067cc:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 80067d0:	45b0      	cmp	r8, r6
 80067d2:	d1f8      	bne.n	80067c6 <HAL_SD_GetCardStatus+0xaa>
        pData++;
 80067d4:	4646      	mov	r6, r8
 80067d6:	e7e5      	b.n	80067a4 <HAL_SD_GetCardStatus+0x88>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80067d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067da:	f012 0f08 	tst.w	r2, #8
 80067de:	d175      	bne.n	80068cc <HAL_SD_GetCardStatus+0x1b0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80067e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e2:	f012 0f02 	tst.w	r2, #2
 80067e6:	d173      	bne.n	80068d0 <HAL_SD_GetCardStatus+0x1b4>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80067e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ea:	f013 0f20 	tst.w	r3, #32
 80067ee:	d171      	bne.n	80068d4 <HAL_SD_GetCardStatus+0x1b8>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80067f4:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80067f8:	d015      	beq.n	8006826 <HAL_SD_GetCardStatus+0x10a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80067fa:	f000 fc8f 	bl	800711c <SDMMC_ReadFIFO>
 80067fe:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006802:	f7fb fbc5 	bl	8001f90 <HAL_GetTick>
 8006806:	1bc0      	subs	r0, r0, r7
 8006808:	f1b0 3fff 	cmp.w	r0, #4294967295
 800680c:	d1f0      	bne.n	80067f0 <HAL_SD_GetCardStatus+0xd4>
  if (errorstate != HAL_SD_ERROR_NONE)
 800680e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	4930      	ldr	r1, [pc, #192]	@ (80068d8 <HAL_SD_GetCardStatus+0x1bc>)
 8006816:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006818:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800681a:	4313      	orrs	r3, r2
 800681c:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800681e:	2501      	movs	r5, #1
 8006820:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    status = HAL_ERROR;
 8006824:	e03c      	b.n	80068a0 <HAL_SD_GetCardStatus+0x184>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006826:	4b2d      	ldr	r3, [pc, #180]	@ (80068dc <HAL_SD_GetCardStatus+0x1c0>)
 8006828:	6383      	str	r3, [r0, #56]	@ 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800682a:	9a06      	ldr	r2, [sp, #24]
 800682c:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8006830:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006832:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8006836:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006838:	0a13      	lsrs	r3, r2, #8
 800683a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800683e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006842:	b29b      	uxth	r3, r3
 8006844:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006846:	9b07      	ldr	r3, [sp, #28]
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006848:	0e1a      	lsrs	r2, r3, #24
 800684a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800684e:	0219      	lsls	r1, r3, #8
 8006850:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006854:	430a      	orrs	r2, r1
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800685c:	4313      	orrs	r3, r2
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800685e:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006860:	9b08      	ldr	r3, [sp, #32]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006866:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800686a:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800686c:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8006870:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800687a:	b2d1      	uxtb	r1, r2
 800687c:	430b      	orrs	r3, r1
 800687e:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006880:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8006884:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006886:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800688a:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800688c:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8006890:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006892:	f002 020f 	and.w	r2, r2, #15
 8006896:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006898:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 800689c:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800689e:	2500      	movs	r5, #0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	f000 fd5d 	bl	8007364 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80068aa:	b140      	cbz	r0, 80068be <HAL_SD_GetCardStatus+0x1a2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	490a      	ldr	r1, [pc, #40]	@ (80068d8 <HAL_SD_GetCardStatus+0x1bc>)
 80068b0:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80068b2:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068b4:	2501      	movs	r5, #1
 80068b6:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    status = HAL_ERROR;
 80068ba:	e000      	b.n	80068be <HAL_SD_GetCardStatus+0x1a2>
    return HAL_ERROR;
 80068bc:	2501      	movs	r5, #1
}
 80068be:	4628      	mov	r0, r5
 80068c0:	b016      	add	sp, #88	@ 0x58
 80068c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80068c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80068ca:	e7a2      	b.n	8006812 <HAL_SD_GetCardStatus+0xf6>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80068cc:	2308      	movs	r3, #8
 80068ce:	e7a0      	b.n	8006812 <HAL_SD_GetCardStatus+0xf6>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80068d0:	2302      	movs	r3, #2
 80068d2:	e79e      	b.n	8006812 <HAL_SD_GetCardStatus+0xf6>
    return HAL_SD_ERROR_RX_OVERRUN;
 80068d4:	2320      	movs	r3, #32
  if (errorstate != HAL_SD_ERROR_NONE)
 80068d6:	e79c      	b.n	8006812 <HAL_SD_GetCardStatus+0xf6>
 80068d8:	1fe00fff 	.word	0x1fe00fff
 80068dc:	18000f3a 	.word	0x18000f3a

080068e0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80068e0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80068e2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80068e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80068e6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80068e8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80068ea:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80068ec:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80068ee:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80068f0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80068f2:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80068f4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80068f6:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80068f8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80068fa:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80068fc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80068fe:	61cb      	str	r3, [r1, #28]
}
 8006900:	2000      	movs	r0, #0
 8006902:	4770      	bx	lr

08006904 <HAL_SD_ConfigWideBusOperation>:
{
 8006904:	b530      	push	{r4, r5, lr}
 8006906:	b08b      	sub	sp, #44	@ 0x2c
 8006908:	4604      	mov	r4, r0
 800690a:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800690c:	2303      	movs	r3, #3
 800690e:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006912:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006914:	2b03      	cmp	r3, #3
 8006916:	d063      	beq.n	80069e0 <HAL_SD_ConfigWideBusOperation+0xdc>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006918:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800691c:	d009      	beq.n	8006932 <HAL_SD_ConfigWideBusOperation+0x2e>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800691e:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006922:	d00b      	beq.n	800693c <HAL_SD_ConfigWideBusOperation+0x38>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006924:	2900      	cmp	r1, #0
 8006926:	d032      	beq.n	800698e <HAL_SD_ConfigWideBusOperation+0x8a>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006928:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800692a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800692e:	6343      	str	r3, [r0, #52]	@ 0x34
 8006930:	e05a      	b.n	80069e8 <HAL_SD_ConfigWideBusOperation+0xe4>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006932:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006938:	6343      	str	r3, [r0, #52]	@ 0x34
 800693a:	e055      	b.n	80069e8 <HAL_SD_ConfigWideBusOperation+0xe4>
  uint32_t scr[2U] = {0UL, 0UL};
 800693c:	2100      	movs	r1, #0
 800693e:	9103      	str	r1, [sp, #12]
 8006940:	9104      	str	r1, [sp, #16]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006942:	6800      	ldr	r0, [r0, #0]
 8006944:	f000 fc12 	bl	800716c <SDMMC_GetResponse>
 8006948:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800694c:	d116      	bne.n	800697c <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 800694e:	a903      	add	r1, sp, #12
 8006950:	4620      	mov	r0, r4
 8006952:	f7ff fa31 	bl	8005db8 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006956:	4602      	mov	r2, r0
 8006958:	b990      	cbnz	r0, 8006980 <HAL_SD_ConfigWideBusOperation+0x7c>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006960:	d012      	beq.n	8006988 <HAL_SD_ConfigWideBusOperation+0x84>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006962:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006964:	0409      	lsls	r1, r1, #16
 8006966:	6820      	ldr	r0, [r4, #0]
 8006968:	f000 fdbd 	bl	80074e6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800696c:	4602      	mov	r2, r0
 800696e:	b938      	cbnz	r0, 8006980 <HAL_SD_ConfigWideBusOperation+0x7c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006970:	2102      	movs	r1, #2
 8006972:	6820      	ldr	r0, [r4, #0]
 8006974:	f000 fdd0 	bl	8007518 <SDMMC_CmdBusWidth>
 8006978:	4602      	mov	r2, r0
    if (errorstate != HAL_SD_ERROR_NONE)
 800697a:	e001      	b.n	8006980 <HAL_SD_ConfigWideBusOperation+0x7c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800697c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
      hsd->ErrorCode |= errorstate;
 8006980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006982:	4313      	orrs	r3, r2
 8006984:	6363      	str	r3, [r4, #52]	@ 0x34
 8006986:	e02f      	b.n	80069e8 <HAL_SD_ConfigWideBusOperation+0xe4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006988:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800698c:	e7f8      	b.n	8006980 <HAL_SD_ConfigWideBusOperation+0x7c>
  uint32_t scr[2U] = {0UL, 0UL};
 800698e:	2100      	movs	r1, #0
 8006990:	9103      	str	r1, [sp, #12]
 8006992:	9104      	str	r1, [sp, #16]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006994:	6800      	ldr	r0, [r0, #0]
 8006996:	f000 fbe9 	bl	800716c <SDMMC_GetResponse>
 800699a:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800699e:	d116      	bne.n	80069ce <HAL_SD_ConfigWideBusOperation+0xca>
  errorstate = SD_FindSCR(hsd, scr);
 80069a0:	a903      	add	r1, sp, #12
 80069a2:	4620      	mov	r0, r4
 80069a4:	f7ff fa08 	bl	8005db8 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80069a8:	4602      	mov	r2, r0
 80069aa:	b990      	cbnz	r0, 80069d2 <HAL_SD_ConfigWideBusOperation+0xce>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80069b2:	d012      	beq.n	80069da <HAL_SD_ConfigWideBusOperation+0xd6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80069b6:	0409      	lsls	r1, r1, #16
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	f000 fd94 	bl	80074e6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80069be:	4602      	mov	r2, r0
 80069c0:	b938      	cbnz	r0, 80069d2 <HAL_SD_ConfigWideBusOperation+0xce>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80069c2:	2100      	movs	r1, #0
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	f000 fda7 	bl	8007518 <SDMMC_CmdBusWidth>
 80069ca:	4602      	mov	r2, r0
    if (errorstate != HAL_SD_ERROR_NONE)
 80069cc:	e001      	b.n	80069d2 <HAL_SD_ConfigWideBusOperation+0xce>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
      hsd->ErrorCode |= errorstate;
 80069d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069d4:	4313      	orrs	r3, r2
 80069d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80069d8:	e006      	b.n	80069e8 <HAL_SD_ConfigWideBusOperation+0xe4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80069de:	e7f8      	b.n	80069d2 <HAL_SD_ConfigWideBusOperation+0xce>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069e0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80069e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80069e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069ea:	b1b3      	cbz	r3, 8006a1a <HAL_SD_ConfigWideBusOperation+0x116>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	4a34      	ldr	r2, [pc, #208]	@ (8006ac0 <HAL_SD_ConfigWideBusOperation+0x1bc>)
 80069f0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80069f2:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	f000 fcb3 	bl	8007364 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80069fe:	b130      	cbz	r0, 8006a0e <HAL_SD_ConfigWideBusOperation+0x10a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	492f      	ldr	r1, [pc, #188]	@ (8006ac0 <HAL_SD_ConfigWideBusOperation+0x1bc>)
 8006a04:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006a06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a08:	4303      	orrs	r3, r0
 8006a0a:	6363      	str	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8006a0c:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8006a14:	4628      	mov	r0, r5
 8006a16:	b00b      	add	sp, #44	@ 0x2c
 8006a18:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006a1a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006a1e:	2100      	movs	r1, #0
 8006a20:	f7fe fed8 	bl	80057d4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8006a24:	4601      	mov	r1, r0
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d043      	beq.n	8006ab2 <HAL_SD_ConfigWideBusOperation+0x1ae>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	9305      	str	r3, [sp, #20]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	9306      	str	r3, [sp, #24]
      Init.BusWide             = WideMode;
 8006a32:	9507      	str	r5, [sp, #28]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a34:	6923      	ldr	r3, [r4, #16]
 8006a36:	9308      	str	r3, [sp, #32]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006a38:	6962      	ldr	r2, [r4, #20]
 8006a3a:	4b22      	ldr	r3, [pc, #136]	@ (8006ac4 <HAL_SD_ConfigWideBusOperation+0x1c0>)
 8006a3c:	fba3 0301 	umull	r0, r3, r3, r1
 8006a40:	0e18      	lsrs	r0, r3, #24
 8006a42:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
 8006a46:	d20b      	bcs.n	8006a60 <HAL_SD_ConfigWideBusOperation+0x15c>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006a48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a4e:	d007      	beq.n	8006a60 <HAL_SD_ConfigWideBusOperation+0x15c>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a54:	d011      	beq.n	8006a7a <HAL_SD_ConfigWideBusOperation+0x176>
        if (hsd->Init.ClockDiv == 0U)
 8006a56:	bb22      	cbnz	r2, 8006aa2 <HAL_SD_ConfigWideBusOperation+0x19e>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006a58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <HAL_SD_ConfigWideBusOperation+0x1c4>)
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	bf88      	it	hi
 8006a5e:	4602      	movhi	r2, r0
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006a60:	9209      	str	r2, [sp, #36]	@ 0x24
      (void)SDMMC_Init(hsd->Instance, Init);
 8006a62:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a64:	e913 0003 	ldmdb	r3, {r0, r1}
 8006a68:	e88d 0003 	stmia.w	sp, {r0, r1}
 8006a6c:	ab05      	add	r3, sp, #20
 8006a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	f000 fb3b 	bl	80070ec <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8006a76:	2500      	movs	r5, #0
 8006a78:	e7bc      	b.n	80069f4 <HAL_SD_ConfigWideBusOperation+0xf0>
        if (hsd->Init.ClockDiv == 0U)
 8006a7a:	b93a      	cbnz	r2, 8006a8c <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006a7c:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <HAL_SD_ConfigWideBusOperation+0x1c8>)
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	d9ee      	bls.n	8006a60 <HAL_SD_ConfigWideBusOperation+0x15c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a82:	4a10      	ldr	r2, [pc, #64]	@ (8006ac4 <HAL_SD_ConfigWideBusOperation+0x1c0>)
 8006a84:	fba2 1201 	umull	r1, r2, r2, r1
 8006a88:	0e52      	lsrs	r2, r2, #25
 8006a8a:	e7e9      	b.n	8006a60 <HAL_SD_ConfigWideBusOperation+0x15c>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006a8c:	0053      	lsls	r3, r2, #1
 8006a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a92:	480e      	ldr	r0, [pc, #56]	@ (8006acc <HAL_SD_ConfigWideBusOperation+0x1c8>)
 8006a94:	4283      	cmp	r3, r0
 8006a96:	d9e3      	bls.n	8006a60 <HAL_SD_ConfigWideBusOperation+0x15c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a98:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac4 <HAL_SD_ConfigWideBusOperation+0x1c0>)
 8006a9a:	fba2 1201 	umull	r1, r2, r2, r1
 8006a9e:	0e52      	lsrs	r2, r2, #25
 8006aa0:	e7de      	b.n	8006a60 <HAL_SD_ConfigWideBusOperation+0x15c>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006aa2:	0053      	lsls	r3, r2, #1
 8006aa4:	fbb1 f1f3 	udiv	r1, r1, r3
 8006aa8:	4b07      	ldr	r3, [pc, #28]	@ (8006ac8 <HAL_SD_ConfigWideBusOperation+0x1c4>)
 8006aaa:	4299      	cmp	r1, r3
 8006aac:	bf88      	it	hi
 8006aae:	4602      	movhi	r2, r0
 8006ab0:	e7d6      	b.n	8006a60 <HAL_SD_ConfigWideBusOperation+0x15c>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006ab2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ab4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ab8:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 8006aba:	2501      	movs	r5, #1
 8006abc:	e79a      	b.n	80069f4 <HAL_SD_ConfigWideBusOperation+0xf0>
 8006abe:	bf00      	nop
 8006ac0:	1fe00fff 	.word	0x1fe00fff
 8006ac4:	55e63b89 	.word	0x55e63b89
 8006ac8:	017d7840 	.word	0x017d7840
 8006acc:	02faf080 	.word	0x02faf080

08006ad0 <HAL_SD_GetCardState>:
{
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ad4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006ad6:	0409      	lsls	r1, r1, #16
 8006ad8:	6800      	ldr	r0, [r0, #0]
 8006ada:	f000 fd4f 	bl	800757c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ade:	b130      	cbz	r0, 8006aee <HAL_SD_GetCardState+0x1e>
    hsd->ErrorCode |= errorstate;
 8006ae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ae2:	4303      	orrs	r3, r0
 8006ae4:	6363      	str	r3, [r4, #52]	@ 0x34
  uint32_t resp1 = 0;
 8006ae6:	2000      	movs	r0, #0
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ae8:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8006aec:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006aee:	2100      	movs	r1, #0
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	f000 fb3b 	bl	800716c <SDMMC_GetResponse>
  if (errorstate != HAL_SD_ERROR_NONE)
 8006af6:	e7f7      	b.n	8006ae8 <HAL_SD_GetCardState+0x18>

08006af8 <HAL_SD_Init>:
{
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	b086      	sub	sp, #24
  if (hsd == NULL)
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d04f      	beq.n	8006ba0 <HAL_SD_Init+0xa8>
 8006b00:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 8006b02:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8006b06:	b153      	cbz	r3, 8006b1e <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006b08:	2304      	movs	r3, #4
 8006b0a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7ff fcc0 	bl	8006494 <HAL_SD_InitCard>
 8006b14:	b138      	cbz	r0, 8006b26 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8006b16:	2501      	movs	r5, #1
}
 8006b18:	4628      	mov	r0, r5
 8006b1a:	b006      	add	sp, #24
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8006b1e:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8006b20:	f7fb f836 	bl	8001b90 <HAL_SD_MspInit>
 8006b24:	e7f0      	b.n	8006b08 <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006b26:	a901      	add	r1, sp, #4
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7ff fdf7 	bl	800671c <HAL_SD_GetCardStatus>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d138      	bne.n	8006ba4 <HAL_SD_Init+0xac>
  speedgrade = CardStatus.UhsSpeedGrade;
 8006b32:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006b36:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006b38:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006b3c:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006b3e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006b40:	2901      	cmp	r1, #1
 8006b42:	d009      	beq.n	8006b58 <HAL_SD_Init+0x60>
 8006b44:	2300      	movs	r3, #0
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b46:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006b48:	68e1      	ldr	r1, [r4, #12]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff feda 	bl	8006904 <HAL_SD_ConfigWideBusOperation>
 8006b50:	4605      	mov	r5, r0
 8006b52:	b140      	cbz	r0, 8006b66 <HAL_SD_Init+0x6e>
    return HAL_ERROR;
 8006b54:	2501      	movs	r5, #1
 8006b56:	e7df      	b.n	8006b18 <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	bf14      	ite	ne
 8006b5c:	f44f 7300 	movne.w	r3, #512	@ 0x200
 8006b60:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 8006b64:	e7ef      	b.n	8006b46 <HAL_SD_Init+0x4e>
  tickstart = HAL_GetTick();
 8006b66:	f7fb fa13 	bl	8001f90 <HAL_GetTick>
 8006b6a:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7ff ffaf 	bl	8006ad0 <HAL_SD_GetCardState>
 8006b72:	2804      	cmp	r0, #4
 8006b74:	d00d      	beq.n	8006b92 <HAL_SD_Init+0x9a>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b76:	f7fb fa0b 	bl	8001f90 <HAL_GetTick>
 8006b7a:	1b80      	subs	r0, r0, r6
 8006b7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b80:	d1f4      	bne.n	8006b6c <HAL_SD_Init+0x74>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006b82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b86:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006b8e:	2503      	movs	r5, #3
 8006b90:	e7c2      	b.n	8006b18 <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b96:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 8006b9e:	e7bb      	b.n	8006b18 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8006ba0:	2501      	movs	r5, #1
 8006ba2:	e7b9      	b.n	8006b18 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8006ba4:	2501      	movs	r5, #1
 8006ba6:	e7b7      	b.n	8006b18 <HAL_SD_Init+0x20>

08006ba8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006ba8:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006baa:	6802      	ldr	r2, [r0, #0]
 8006bac:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006bae:	6991      	ldr	r1, [r2, #24]
 8006bb0:	f041 0108 	orr.w	r1, r1, #8
 8006bb4:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006bb6:	6801      	ldr	r1, [r0, #0]
 8006bb8:	698a      	ldr	r2, [r1, #24]
 8006bba:	f042 0210 	orr.w	r2, r2, #16
 8006bbe:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bc0:	6801      	ldr	r1, [r0, #0]
 8006bc2:	680a      	ldr	r2, [r1, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006bca:	6801      	ldr	r1, [r0, #0]
 8006bcc:	690c      	ldr	r4, [r1, #16]
 8006bce:	4a29      	ldr	r2, [pc, #164]	@ (8006c74 <SPI_CloseTransfer+0xcc>)
 8006bd0:	4022      	ands	r2, r4
 8006bd2:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bd4:	6801      	ldr	r1, [r0, #0]
 8006bd6:	688a      	ldr	r2, [r1, #8]
 8006bd8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006bdc:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bde:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	2a04      	cmp	r2, #4
 8006be6:	d00d      	beq.n	8006c04 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006be8:	f013 0f20 	tst.w	r3, #32
 8006bec:	d00a      	beq.n	8006c04 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006bee:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006bf2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bf6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006bfa:	6801      	ldr	r1, [r0, #0]
 8006bfc:	698a      	ldr	r2, [r1, #24]
 8006bfe:	f042 0220 	orr.w	r2, r2, #32
 8006c02:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c04:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	2a03      	cmp	r2, #3
 8006c0c:	d00d      	beq.n	8006c2a <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c0e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006c12:	d00a      	beq.n	8006c2a <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c14:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006c18:	f042 0204 	orr.w	r2, r2, #4
 8006c1c:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c20:	6801      	ldr	r1, [r0, #0]
 8006c22:	698a      	ldr	r2, [r1, #24]
 8006c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c28:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c2a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006c2e:	d00a      	beq.n	8006c46 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c30:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8006c34:	f042 0201 	orr.w	r2, r2, #1
 8006c38:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c3c:	6801      	ldr	r1, [r0, #0]
 8006c3e:	698a      	ldr	r2, [r1, #24]
 8006c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c44:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c46:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006c4a:	d00a      	beq.n	8006c62 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c4c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8006c50:	f043 0308 	orr.w	r3, r3, #8
 8006c54:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c58:	6802      	ldr	r2, [r0, #0]
 8006c5a:	6993      	ldr	r3, [r2, #24]
 8006c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c60:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006c68:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 8006c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	fffffc90 	.word	0xfffffc90

08006c78 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	f000 8085 	beq.w	8006d88 <HAL_SPI_Init+0x110>
{
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c86:	6802      	ldr	r2, [r0, #0]
 8006c88:	495f      	ldr	r1, [pc, #380]	@ (8006e08 <HAL_SPI_Init+0x190>)
 8006c8a:	4b60      	ldr	r3, [pc, #384]	@ (8006e0c <HAL_SPI_Init+0x194>)
 8006c8c:	428a      	cmp	r2, r1
 8006c8e:	bf18      	it	ne
 8006c90:	429a      	cmpne	r2, r3
 8006c92:	d07f      	beq.n	8006d94 <HAL_SPI_Init+0x11c>
 8006c94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d07b      	beq.n	8006d94 <HAL_SPI_Init+0x11c>
 8006c9c:	68c3      	ldr	r3, [r0, #12]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d874      	bhi.n	8006d8c <HAL_SPI_Init+0x114>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ca2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006ca4:	0952      	lsrs	r2, r2, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8006caa:	fb02 3303 	mla	r3, r2, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	f240 8083 	bls.w	8006dba <HAL_SPI_Init+0x142>
    return HAL_ERROR;
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	e05e      	b.n	8006d76 <HAL_SPI_Init+0xfe>
    hspi->Lock = HAL_UNLOCKED;
 8006cb8:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f7fa fff7 	bl	8001cb0 <HAL_SPI_MspInit>
 8006cc2:	e07f      	b.n	8006dc4 <HAL_SPI_Init+0x14c>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006cc4:	6861      	ldr	r1, [r4, #4]
 8006cc6:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8006cca:	d055      	beq.n	8006d78 <HAL_SPI_Init+0x100>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	f040 808a 	bne.w	8006de6 <HAL_SPI_Init+0x16e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006cd2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cd4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006cd8:	d051      	beq.n	8006d7e <HAL_SPI_Init+0x106>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006cda:	6821      	ldr	r1, [r4, #0]
 8006cdc:	680b      	ldr	r3, [r1, #0]
 8006cde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006ce4:	6821      	ldr	r1, [r4, #0]
 8006ce6:	69e3      	ldr	r3, [r4, #28]
 8006ce8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006cea:	4303      	orrs	r3, r0
 8006cec:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006cee:	4303      	orrs	r3, r0
 8006cf0:	68e0      	ldr	r0, [r4, #12]
 8006cf2:	4303      	orrs	r3, r0
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cfc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006d02:	430b      	orrs	r3, r1
 8006d04:	69a1      	ldr	r1, [r4, #24]
 8006d06:	430b      	orrs	r3, r1
 8006d08:	6921      	ldr	r1, [r4, #16]
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	6961      	ldr	r1, [r4, #20]
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	6a21      	ldr	r1, [r4, #32]
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6861      	ldr	r1, [r4, #4]
 8006d16:	430b      	orrs	r3, r1
 8006d18:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8006d1a:	430b      	orrs	r3, r1
 8006d1c:	68a1      	ldr	r1, [r4, #8]
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006d22:	430b      	orrs	r3, r1
 8006d24:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006d26:	430b      	orrs	r3, r1
 8006d28:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	b96b      	cbnz	r3, 8006d4a <HAL_SPI_Init+0xd2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	6893      	ldr	r3, [r2, #8]
 8006d32:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8006d36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006d3a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	6893      	ldr	r3, [r2, #8]
 8006d40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d48:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006d54:	6863      	ldr	r3, [r4, #4]
 8006d56:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006d5a:	d006      	beq.n	8006d6a <HAL_SPI_Init+0xf2>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006d5c:	6822      	ldr	r2, [r4, #0]
 8006d5e:	68d3      	ldr	r3, [r2, #12]
 8006d60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d64:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8006d66:	430b      	orrs	r3, r1
 8006d68:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
}
 8006d76:	bd10      	pop	{r4, pc}
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	d138      	bne.n	8006df0 <HAL_SPI_Init+0x178>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8006d84:	6019      	str	r1, [r3, #0]
 8006d86:	e02e      	b.n	8006de6 <HAL_SPI_Init+0x16e>
    return HAL_ERROR;
 8006d88:	2001      	movs	r0, #1
}
 8006d8a:	4770      	bx	lr
    return HAL_ERROR;
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	e7f2      	b.n	8006d76 <HAL_SPI_Init+0xfe>
    return HAL_ERROR;
 8006d90:	2001      	movs	r0, #1
 8006d92:	e7f0      	b.n	8006d76 <HAL_SPI_Init+0xfe>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d94:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006d96:	0959      	lsrs	r1, r3, #5
  data_size = (data_size + 7UL) / 8UL;
 8006d98:	68e3      	ldr	r3, [r4, #12]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8006d9e:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006da2:	4819      	ldr	r0, [pc, #100]	@ (8006e08 <HAL_SPI_Init+0x190>)
 8006da4:	4919      	ldr	r1, [pc, #100]	@ (8006e0c <HAL_SPI_Init+0x194>)
 8006da6:	428a      	cmp	r2, r1
 8006da8:	bf18      	it	ne
 8006daa:	4282      	cmpne	r2, r0
 8006dac:	d003      	beq.n	8006db6 <HAL_SPI_Init+0x13e>
 8006dae:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006db2:	428a      	cmp	r2, r1
 8006db4:	d101      	bne.n	8006dba <HAL_SPI_Init+0x142>
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d8ea      	bhi.n	8006d90 <HAL_SPI_Init+0x118>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dba:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f43f af7a 	beq.w	8006cb8 <HAL_SPI_Init+0x40>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 8006dca:	6822      	ldr	r2, [r4, #0]
 8006dcc:	6813      	ldr	r3, [r2, #0]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ddc:	69a1      	ldr	r1, [r4, #24]
 8006dde:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8006de2:	f43f af6f 	beq.w	8006cc4 <HAL_SPI_Init+0x4c>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006de6:	6863      	ldr	r3, [r4, #4]
 8006de8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006dec:	f43f af75 	beq.w	8006cda <HAL_SPI_Init+0x62>
 8006df0:	68e3      	ldr	r3, [r4, #12]
 8006df2:	2b06      	cmp	r3, #6
 8006df4:	f67f af71 	bls.w	8006cda <HAL_SPI_Init+0x62>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006df8:	6821      	ldr	r1, [r4, #0]
 8006dfa:	680b      	ldr	r3, [r1, #0]
 8006dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e00:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8006e02:	4303      	orrs	r3, r0
 8006e04:	600b      	str	r3, [r1, #0]
 8006e06:	e76d      	b.n	8006ce4 <HAL_SPI_Init+0x6c>
 8006e08:	40013000 	.word	0x40013000
 8006e0c:	40003800 	.word	0x40003800

08006e10 <HAL_SPI_Transmit>:
{
 8006e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	4689      	mov	r9, r1
 8006e18:	4690      	mov	r8, r2
 8006e1a:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006e1c:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8006e1e:	f7fb f8b7 	bl	8001f90 <HAL_GetTick>
 8006e22:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006e24:	f894 0081 	ldrb.w	r0, [r4, #129]	@ 0x81
 8006e28:	b2c0      	uxtb	r0, r0
 8006e2a:	2801      	cmp	r0, #1
 8006e2c:	f040 8156 	bne.w	80070dc <HAL_SPI_Transmit+0x2cc>
  if ((pData == NULL) || (Size == 0UL))
 8006e30:	f1b9 0f00 	cmp.w	r9, #0
 8006e34:	f000 8153 	beq.w	80070de <HAL_SPI_Transmit+0x2ce>
 8006e38:	f1b8 0f00 	cmp.w	r8, #0
 8006e3c:	f000 814f 	beq.w	80070de <HAL_SPI_Transmit+0x2ce>
  __HAL_LOCK(hspi);
 8006e40:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f000 814c 	beq.w	80070e2 <HAL_SPI_Transmit+0x2d2>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e50:	2303      	movs	r3, #3
 8006e52:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e5c:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006e60:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006e64:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->pRxBuffPtr  = NULL;
 8006e68:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006e6a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006e6e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006e72:	6763      	str	r3, [r4, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006e74:	6723      	str	r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006e7c:	d01e      	beq.n	8006ebc <HAL_SPI_Transmit+0xac>
    SPI_2LINES_TX(hspi);
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	68d3      	ldr	r3, [r2, #12]
 8006e82:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8006e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e8a:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	6851      	ldr	r1, [r2, #4]
 8006e90:	4b95      	ldr	r3, [pc, #596]	@ (80070e8 <HAL_SPI_Transmit+0x2d8>)
 8006e92:	400b      	ands	r3, r1
 8006e94:	ea43 0308 	orr.w	r3, r3, r8
 8006e98:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8006e9a:	6822      	ldr	r2, [r4, #0]
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	f043 0301 	orr.w	r3, r3, #1
 8006ea2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eaa:	d00d      	beq.n	8006ec8 <HAL_SPI_Transmit+0xb8>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006eac:	68e3      	ldr	r3, [r4, #12]
 8006eae:	2b0f      	cmp	r3, #15
 8006eb0:	d942      	bls.n	8006f38 <HAL_SPI_Transmit+0x128>
    while (hspi->TxXferCount > 0UL)
 8006eb2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	b9f3      	cbnz	r3, 8006ef8 <HAL_SPI_Transmit+0xe8>
 8006eba:	e0ed      	b.n	8007098 <HAL_SPI_Transmit+0x288>
    SPI_1LINE_TX(hspi);
 8006ebc:	6822      	ldr	r2, [r4, #0]
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e7e1      	b.n	8006e8c <HAL_SPI_Transmit+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e7eb      	b.n	8006eac <HAL_SPI_Transmit+0x9c>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006ed4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006eda:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006edc:	3304      	adds	r3, #4
 8006ede:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006ee0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8006eec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80d0 	beq.w	8007098 <HAL_SPI_Transmit+0x288>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	695a      	ldr	r2, [r3, #20]
 8006efc:	f012 0f02 	tst.w	r2, #2
 8006f00:	d1e8      	bne.n	8006ed4 <HAL_SPI_Transmit+0xc4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f02:	f7fb f845 	bl	8001f90 <HAL_GetTick>
 8006f06:	1b80      	subs	r0, r0, r6
 8006f08:	42a8      	cmp	r0, r5
 8006f0a:	d302      	bcc.n	8006f12 <HAL_SPI_Transmit+0x102>
 8006f0c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006f10:	d101      	bne.n	8006f16 <HAL_SPI_Transmit+0x106>
 8006f12:	2d00      	cmp	r5, #0
 8006f14:	d1ea      	bne.n	8006eec <HAL_SPI_Transmit+0xdc>
          SPI_CloseTransfer(hspi);
 8006f16:	4620      	mov	r0, r4
 8006f18:	f7ff fe46 	bl	8006ba8 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f1c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8006f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f24:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
          return HAL_TIMEOUT;
 8006f34:	2003      	movs	r0, #3
 8006f36:	e0d2      	b.n	80070de <HAL_SPI_Transmit+0x2ce>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f38:	2b07      	cmp	r3, #7
 8006f3a:	d805      	bhi.n	8006f48 <HAL_SPI_Transmit+0x138>
    while (hspi->TxXferCount > 0UL)
 8006f3c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d172      	bne.n	800702c <HAL_SPI_Transmit+0x21c>
 8006f46:	e0a7      	b.n	8007098 <HAL_SPI_Transmit+0x288>
    while (hspi->TxXferCount > 0UL)
 8006f48:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	b993      	cbnz	r3, 8006f76 <HAL_SPI_Transmit+0x166>
 8006f50:	e0a2      	b.n	8007098 <HAL_SPI_Transmit+0x288>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f52:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	843b      	strh	r3, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f58:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006f5e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8006f6a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f000 8091 	beq.w	8007098 <HAL_SPI_Transmit+0x288>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006f76:	6822      	ldr	r2, [r4, #0]
 8006f78:	6953      	ldr	r3, [r2, #20]
 8006f7a:	f013 0f02 	tst.w	r3, #2
 8006f7e:	d014      	beq.n	8006faa <HAL_SPI_Transmit+0x19a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006f80:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d9e3      	bls.n	8006f52 <HAL_SPI_Transmit+0x142>
 8006f8a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0e0      	beq.n	8006f52 <HAL_SPI_Transmit+0x142>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006f90:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6213      	str	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006f96:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006f98:	3304      	adds	r3, #4
 8006f9a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006f9c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006fa0:	3b02      	subs	r3, #2
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8006fa8:	e7df      	b.n	8006f6a <HAL_SPI_Transmit+0x15a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006faa:	f7fa fff1 	bl	8001f90 <HAL_GetTick>
 8006fae:	1b80      	subs	r0, r0, r6
 8006fb0:	42a8      	cmp	r0, r5
 8006fb2:	d302      	bcc.n	8006fba <HAL_SPI_Transmit+0x1aa>
 8006fb4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006fb8:	d101      	bne.n	8006fbe <HAL_SPI_Transmit+0x1ae>
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	d1d5      	bne.n	8006f6a <HAL_SPI_Transmit+0x15a>
          SPI_CloseTransfer(hspi);
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7ff fdf2 	bl	8006ba8 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fc4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8006fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fcc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
          return HAL_TIMEOUT;
 8006fdc:	2003      	movs	r0, #3
 8006fde:	e07e      	b.n	80070de <HAL_SPI_Transmit+0x2ce>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006fe0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d90e      	bls.n	8007008 <HAL_SPI_Transmit+0x1f8>
 8006fea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fec:	b163      	cbz	r3, 8007008 <HAL_SPI_Transmit+0x1f8>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fee:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	843b      	strh	r3, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ffa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8006ffe:	3b02      	subs	r3, #2
 8007000:	b29b      	uxth	r3, r3
 8007002:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8007006:	e00c      	b.n	8007022 <HAL_SPI_Transmit+0x212>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007008:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007010:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007012:	3301      	adds	r3, #1
 8007014:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007016:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800701a:	3b01      	subs	r3, #1
 800701c:	b29b      	uxth	r3, r3
 800701e:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8007022:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d035      	beq.n	8007098 <HAL_SPI_Transmit+0x288>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	6953      	ldr	r3, [r2, #20]
 8007030:	f013 0f02 	tst.w	r3, #2
 8007034:	d014      	beq.n	8007060 <HAL_SPI_Transmit+0x250>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007036:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b03      	cmp	r3, #3
 800703e:	d9cf      	bls.n	8006fe0 <HAL_SPI_Transmit+0x1d0>
 8007040:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007042:	2b40      	cmp	r3, #64	@ 0x40
 8007044:	d9cc      	bls.n	8006fe0 <HAL_SPI_Transmit+0x1d0>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007046:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6213      	str	r3, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800704c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800704e:	3304      	adds	r3, #4
 8007050:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007052:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8007056:	3b04      	subs	r3, #4
 8007058:	b29b      	uxth	r3, r3
 800705a:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800705e:	e7e0      	b.n	8007022 <HAL_SPI_Transmit+0x212>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007060:	f7fa ff96 	bl	8001f90 <HAL_GetTick>
 8007064:	1b80      	subs	r0, r0, r6
 8007066:	42a8      	cmp	r0, r5
 8007068:	d302      	bcc.n	8007070 <HAL_SPI_Transmit+0x260>
 800706a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800706e:	d101      	bne.n	8007074 <HAL_SPI_Transmit+0x264>
 8007070:	2d00      	cmp	r5, #0
 8007072:	d1d6      	bne.n	8007022 <HAL_SPI_Transmit+0x212>
          SPI_CloseTransfer(hspi);
 8007074:	4620      	mov	r0, r4
 8007076:	f7ff fd97 	bl	8006ba8 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800707a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800707e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007082:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007086:	2301      	movs	r3, #1
 8007088:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800708c:	2300      	movs	r3, #0
 800708e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
          return HAL_TIMEOUT;
 8007092:	2003      	movs	r0, #3
 8007094:	e023      	b.n	80070de <HAL_SPI_Transmit+0x2ce>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007096:	b165      	cbz	r5, 80070b2 <HAL_SPI_Transmit+0x2a2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	f013 0f08 	tst.w	r3, #8
 80070a0:	d10d      	bne.n	80070be <HAL_SPI_Transmit+0x2ae>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a2:	f7fa ff75 	bl	8001f90 <HAL_GetTick>
 80070a6:	1b80      	subs	r0, r0, r6
 80070a8:	4285      	cmp	r5, r0
 80070aa:	d8f4      	bhi.n	8007096 <HAL_SPI_Transmit+0x286>
 80070ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 80070b0:	d0f1      	beq.n	8007096 <HAL_SPI_Transmit+0x286>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80070b6:	f043 0320 	orr.w	r3, r3, #32
 80070ba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  SPI_CloseTransfer(hspi);
 80070be:	4620      	mov	r0, r4
 80070c0:	f7ff fd72 	bl	8006ba8 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 80070ca:	2300      	movs	r3, #0
 80070cc:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d0:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80070d4:	1ac0      	subs	r0, r0, r3
 80070d6:	bf18      	it	ne
 80070d8:	2001      	movne	r0, #1
 80070da:	e000      	b.n	80070de <HAL_SPI_Transmit+0x2ce>
    return HAL_BUSY;
 80070dc:	2002      	movs	r0, #2
}
 80070de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80070e2:	2002      	movs	r0, #2
 80070e4:	e7fb      	b.n	80070de <HAL_SPI_Transmit+0x2ce>
 80070e6:	bf00      	nop
 80070e8:	ffff0000 	.word	0xffff0000

080070ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80070ec:	b084      	sub	sp, #16
 80070ee:	f10d 0c04 	add.w	ip, sp, #4
 80070f2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80070f6:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           | \
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	4313      	orrs	r3, r2
             Init.ClockPowerSave      | \
 80070fc:	9a03      	ldr	r2, [sp, #12]
 80070fe:	4313      	orrs	r3, r2
             Init.BusWide             | \
 8007100:	9a04      	ldr	r2, [sp, #16]
 8007102:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 8007104:	9a05      	ldr	r2, [sp, #20]
 8007106:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007108:	4a03      	ldr	r2, [pc, #12]	@ (8007118 <SDMMC_Init+0x2c>)
 800710a:	400a      	ands	r2, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	6043      	str	r3, [r0, #4]

  return HAL_OK;
}
 8007110:	2000      	movs	r0, #0
 8007112:	b004      	add	sp, #16
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	ffc02c00 	.word	0xffc02c00

0800711c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800711c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8007120:	4770      	bx	lr

08007122 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007122:	680b      	ldr	r3, [r1, #0]
 8007124:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 8007128:	2000      	movs	r0, #0
 800712a:	4770      	bx	lr

0800712c <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800712c:	6803      	ldr	r3, [r0, #0]
 800712e:	f043 0303 	orr.w	r3, r3, #3
 8007132:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8007134:	2000      	movs	r0, #0
 8007136:	4770      	bx	lr

08007138 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007138:	6800      	ldr	r0, [r0, #0]
}
 800713a:	f000 0003 	and.w	r0, r0, #3
 800713e:	4770      	bx	lr

08007140 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007140:	b410      	push	{r4}
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007142:	680b      	ldr	r3, [r1, #0]
 8007144:	6083      	str	r3, [r0, #8]
                       Command->Response         | \
                       Command->WaitForInterrupt | \
                       Command->CPSM);

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007146:	68c4      	ldr	r4, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007148:	684b      	ldr	r3, [r1, #4]
 800714a:	688a      	ldr	r2, [r1, #8]
 800714c:	4313      	orrs	r3, r2
                       Command->Response         | \
 800714e:	68ca      	ldr	r2, [r1, #12]
 8007150:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 8007152:	690a      	ldr	r2, [r1, #16]
 8007154:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007156:	4a04      	ldr	r2, [pc, #16]	@ (8007168 <SDMMC_SendCommand+0x28>)
 8007158:	4022      	ands	r2, r4
 800715a:	4313      	orrs	r3, r2
 800715c:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 800715e:	2000      	movs	r0, #0
 8007160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	fffee0c0 	.word	0xfffee0c0

0800716c <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800716c:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800716e:	5840      	ldr	r0, [r0, r1]
}
 8007170:	4770      	bx	lr

08007172 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007172:	b410      	push	{r4}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007174:	680b      	ldr	r3, [r1, #0]
 8007176:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007178:	684b      	ldr	r3, [r1, #4]
 800717a:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   | \
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800717c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800717e:	688b      	ldr	r3, [r1, #8]
 8007180:	68cc      	ldr	r4, [r1, #12]
 8007182:	4323      	orrs	r3, r4
                       Data->TransferDir   | \
 8007184:	690c      	ldr	r4, [r1, #16]
 8007186:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 8007188:	6949      	ldr	r1, [r1, #20]
 800718a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800718c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007190:	4313      	orrs	r3, r2
 8007192:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 8007194:	2000      	movs	r0, #0
 8007196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800719a:	4770      	bx	lr

0800719c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800719c:	b510      	push	{r4, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	4604      	mov	r4, r0
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80071a6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80071a8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071b0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071b2:	a901      	add	r1, sp, #4
 80071b4:	f7ff ffc4 	bl	8007140 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071b8:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <SDMMC_CmdGoIdleState+0x50>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a0c      	ldr	r2, [pc, #48]	@ (80071f0 <SDMMC_CmdGoIdleState+0x54>)
 80071be:	fba2 2303 	umull	r2, r3, r2, r3
 80071c2:	0a5b      	lsrs	r3, r3, #9
 80071c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c8:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 80071cc:	3b01      	subs	r3, #1
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d007      	beq.n	80071e4 <SDMMC_CmdGoIdleState+0x48>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80071d4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80071d6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80071da:	d0f7      	beq.n	80071cc <SDMMC_CmdGoIdleState+0x30>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071dc:	4b05      	ldr	r3, [pc, #20]	@ (80071f4 <SDMMC_CmdGoIdleState+0x58>)
 80071de:	63a3      	str	r3, [r4, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80071e0:	2000      	movs	r0, #0
 80071e2:	e001      	b.n	80071e8 <SDMMC_CmdGoIdleState+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 80071e4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80071e8:	b006      	add	sp, #24
 80071ea:	bd10      	pop	{r4, pc}
 80071ec:	24000008 	.word	0x24000008
 80071f0:	10624dd3 	.word	0x10624dd3
 80071f4:	002000c5 	.word	0x002000c5

080071f8 <SDMMC_GetCmdResp1>:
{
 80071f8:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80071fa:	4b55      	ldr	r3, [pc, #340]	@ (8007350 <SDMMC_GetCmdResp1+0x158>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4855      	ldr	r0, [pc, #340]	@ (8007354 <SDMMC_GetCmdResp1+0x15c>)
 8007200:	fba0 0303 	umull	r0, r3, r0, r3
 8007204:	0a5b      	lsrs	r3, r3, #9
 8007206:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800720a:	1e53      	subs	r3, r2, #1
 800720c:	2a00      	cmp	r2, #0
 800720e:	d068      	beq.n	80072e2 <SDMMC_GetCmdResp1+0xea>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007210:	4851      	ldr	r0, [pc, #324]	@ (8007358 <SDMMC_GetCmdResp1+0x160>)
 8007212:	e003      	b.n	800721c <SDMMC_GetCmdResp1+0x24>
    if (count-- == 0U)
 8007214:	3b01      	subs	r3, #1
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d065      	beq.n	80072e8 <SDMMC_GetCmdResp1+0xf0>
    sta_reg = SDMMCx->STA;
 800721c:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007220:	4202      	tst	r2, r0
 8007222:	d0f7      	beq.n	8007214 <SDMMC_GetCmdResp1+0x1c>
 8007224:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 8007228:	d1f4      	bne.n	8007214 <SDMMC_GetCmdResp1+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800722a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800722e:	f013 0f04 	tst.w	r3, #4
 8007232:	d108      	bne.n	8007246 <SDMMC_GetCmdResp1+0x4e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007234:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 8007238:	f010 0001 	ands.w	r0, r0, #1
 800723c:	d007      	beq.n	800724e <SDMMC_GetCmdResp1+0x56>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800723e:	2301      	movs	r3, #1
 8007240:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007244:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007246:	2004      	movs	r0, #4
 8007248:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800724c:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800724e:	4b43      	ldr	r3, [pc, #268]	@ (800735c <SDMMC_GetCmdResp1+0x164>)
 8007250:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007254:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007258:	b2db      	uxtb	r3, r3
 800725a:	4299      	cmp	r1, r3
 800725c:	d001      	beq.n	8007262 <SDMMC_GetCmdResp1+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800725e:	2001      	movs	r0, #1
 8007260:	4770      	bx	lr
  return (*(__IO uint32_t *) tmp);
 8007262:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007266:	483e      	ldr	r0, [pc, #248]	@ (8007360 <SDMMC_GetCmdResp1+0x168>)
 8007268:	4018      	ands	r0, r3
 800726a:	2800      	cmp	r0, #0
 800726c:	d06f      	beq.n	800734e <SDMMC_GetCmdResp1+0x156>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800726e:	2b00      	cmp	r3, #0
 8007270:	db3d      	blt.n	80072ee <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007272:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007276:	d13d      	bne.n	80072f4 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007278:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800727c:	d13c      	bne.n	80072f8 <SDMMC_GetCmdResp1+0x100>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800727e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8007282:	d13b      	bne.n	80072fc <SDMMC_GetCmdResp1+0x104>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007284:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007288:	d13b      	bne.n	8007302 <SDMMC_GetCmdResp1+0x10a>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800728a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800728e:	d13b      	bne.n	8007308 <SDMMC_GetCmdResp1+0x110>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007290:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007294:	d13b      	bne.n	800730e <SDMMC_GetCmdResp1+0x116>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007296:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800729a:	d13b      	bne.n	8007314 <SDMMC_GetCmdResp1+0x11c>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800729c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80072a0:	d13b      	bne.n	800731a <SDMMC_GetCmdResp1+0x122>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80072a2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80072a6:	d13b      	bne.n	8007320 <SDMMC_GetCmdResp1+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80072a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80072ac:	d13b      	bne.n	8007326 <SDMMC_GetCmdResp1+0x12e>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80072ae:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80072b2:	d13b      	bne.n	800732c <SDMMC_GetCmdResp1+0x134>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80072b4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80072b8:	d13b      	bne.n	8007332 <SDMMC_GetCmdResp1+0x13a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80072ba:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80072be:	d13b      	bne.n	8007338 <SDMMC_GetCmdResp1+0x140>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80072c0:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80072c4:	d13b      	bne.n	800733e <SDMMC_GetCmdResp1+0x146>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80072c6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80072ca:	d13b      	bne.n	8007344 <SDMMC_GetCmdResp1+0x14c>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80072cc:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80072d0:	d13b      	bne.n	800734a <SDMMC_GetCmdResp1+0x152>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80072d2:	f013 0f08 	tst.w	r3, #8
 80072d6:	bf0c      	ite	eq
 80072d8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80072dc:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80072e0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80072e2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80072e6:	4770      	bx	lr
 80072e8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80072ec:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80072ee:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80072f2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80072f4:	2040      	movs	r0, #64	@ 0x40
 80072f6:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80072f8:	2080      	movs	r0, #128	@ 0x80
 80072fa:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80072fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007300:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007302:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007306:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007308:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800730c:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800730e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007312:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007314:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007318:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800731a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800731e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007320:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007324:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8007326:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800732a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800732c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8007330:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007332:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8007336:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007338:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800733c:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800733e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007342:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007344:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007348:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800734a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800734e:	4770      	bx	lr
 8007350:	24000008 	.word	0x24000008
 8007354:	10624dd3 	.word	0x10624dd3
 8007358:	00200045 	.word	0x00200045
 800735c:	002000c5 	.word	0x002000c5
 8007360:	fdffe008 	.word	0xfdffe008

08007364 <SDMMC_CmdBlockLength>:
{
 8007364:	b530      	push	{r4, r5, lr}
 8007366:	b087      	sub	sp, #28
 8007368:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800736a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800736c:	2510      	movs	r5, #16
 800736e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007374:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007376:	2300      	movs	r3, #0
 8007378:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800737a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800737e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007380:	a901      	add	r1, sp, #4
 8007382:	f7ff fedd 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800738a:	4629      	mov	r1, r5
 800738c:	4620      	mov	r0, r4
 800738e:	f7ff ff33 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 8007392:	b007      	add	sp, #28
 8007394:	bd30      	pop	{r4, r5, pc}

08007396 <SDMMC_CmdReadSingleBlock>:
{
 8007396:	b530      	push	{r4, r5, lr}
 8007398:	b087      	sub	sp, #28
 800739a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800739c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800739e:	2511      	movs	r5, #17
 80073a0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073a8:	2300      	movs	r3, #0
 80073aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073b0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073b2:	a901      	add	r1, sp, #4
 80073b4:	f7ff fec4 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80073b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073bc:	4629      	mov	r1, r5
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff ff1a 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 80073c4:	b007      	add	sp, #28
 80073c6:	bd30      	pop	{r4, r5, pc}

080073c8 <SDMMC_CmdReadMultiBlock>:
{
 80073c8:	b530      	push	{r4, r5, lr}
 80073ca:	b087      	sub	sp, #28
 80073cc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073ce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80073d0:	2512      	movs	r5, #18
 80073d2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073d8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073da:	2300      	movs	r3, #0
 80073dc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073e2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073e4:	a901      	add	r1, sp, #4
 80073e6:	f7ff feab 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80073ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ee:	4629      	mov	r1, r5
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7ff ff01 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 80073f6:	b007      	add	sp, #28
 80073f8:	bd30      	pop	{r4, r5, pc}

080073fa <SDMMC_CmdWriteSingleBlock>:
{
 80073fa:	b530      	push	{r4, r5, lr}
 80073fc:	b087      	sub	sp, #28
 80073fe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007400:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007402:	2518      	movs	r5, #24
 8007404:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800740a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800740c:	2300      	movs	r3, #0
 800740e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007414:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007416:	a901      	add	r1, sp, #4
 8007418:	f7ff fe92 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800741c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007420:	4629      	mov	r1, r5
 8007422:	4620      	mov	r0, r4
 8007424:	f7ff fee8 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 8007428:	b007      	add	sp, #28
 800742a:	bd30      	pop	{r4, r5, pc}

0800742c <SDMMC_CmdWriteMultiBlock>:
{
 800742c:	b530      	push	{r4, r5, lr}
 800742e:	b087      	sub	sp, #28
 8007430:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007432:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007434:	2519      	movs	r5, #25
 8007436:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007438:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800743c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800743e:	2300      	movs	r3, #0
 8007440:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007446:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007448:	a901      	add	r1, sp, #4
 800744a:	f7ff fe79 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800744e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007452:	4629      	mov	r1, r5
 8007454:	4620      	mov	r0, r4
 8007456:	f7ff fecf 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 800745a:	b007      	add	sp, #28
 800745c:	bd30      	pop	{r4, r5, pc}
	...

08007460 <SDMMC_CmdStopTransfer>:
{
 8007460:	b530      	push	{r4, r5, lr}
 8007462:	b087      	sub	sp, #28
 8007464:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800746a:	250c      	movs	r5, #12
 800746c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800746e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007472:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007474:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800747a:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800747c:	68c3      	ldr	r3, [r0, #12]
 800747e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007482:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8007484:	68c3      	ldr	r3, [r0, #12]
 8007486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800748a:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800748c:	a901      	add	r1, sp, #4
 800748e:	f7ff fe57 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007492:	4a07      	ldr	r2, [pc, #28]	@ (80074b0 <SDMMC_CmdStopTransfer+0x50>)
 8007494:	4629      	mov	r1, r5
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff feae 	bl	80071f8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800749c:	68e3      	ldr	r3, [r4, #12]
 800749e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a2:	60e3      	str	r3, [r4, #12]
    errorstate = SDMMC_ERROR_NONE;
 80074a4:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
}
 80074a8:	bf08      	it	eq
 80074aa:	2000      	moveq	r0, #0
 80074ac:	b007      	add	sp, #28
 80074ae:	bd30      	pop	{r4, r5, pc}
 80074b0:	05f5e100 	.word	0x05f5e100

080074b4 <SDMMC_CmdSelDesel>:
{
 80074b4:	b530      	push	{r4, r5, lr}
 80074b6:	b087      	sub	sp, #28
 80074b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80074ba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80074bc:	2507      	movs	r5, #7
 80074be:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074c4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074c6:	2300      	movs	r3, #0
 80074c8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074ce:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074d0:	a901      	add	r1, sp, #4
 80074d2:	f7ff fe35 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80074d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074da:	4629      	mov	r1, r5
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff fe8b 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 80074e2:	b007      	add	sp, #28
 80074e4:	bd30      	pop	{r4, r5, pc}

080074e6 <SDMMC_CmdAppCommand>:
{
 80074e6:	b530      	push	{r4, r5, lr}
 80074e8:	b087      	sub	sp, #28
 80074ea:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074ec:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074ee:	2537      	movs	r5, #55	@ 0x37
 80074f0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074f6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074f8:	2300      	movs	r3, #0
 80074fa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007500:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007502:	a901      	add	r1, sp, #4
 8007504:	f7ff fe1c 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800750c:	4629      	mov	r1, r5
 800750e:	4620      	mov	r0, r4
 8007510:	f7ff fe72 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 8007514:	b007      	add	sp, #28
 8007516:	bd30      	pop	{r4, r5, pc}

08007518 <SDMMC_CmdBusWidth>:
{
 8007518:	b530      	push	{r4, r5, lr}
 800751a:	b087      	sub	sp, #28
 800751c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800751e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007520:	2506      	movs	r5, #6
 8007522:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007524:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007528:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800752a:	2300      	movs	r3, #0
 800752c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800752e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007532:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007534:	a901      	add	r1, sp, #4
 8007536:	f7ff fe03 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800753a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800753e:	4629      	mov	r1, r5
 8007540:	4620      	mov	r0, r4
 8007542:	f7ff fe59 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 8007546:	b007      	add	sp, #28
 8007548:	bd30      	pop	{r4, r5, pc}

0800754a <SDMMC_CmdSendSCR>:
{
 800754a:	b530      	push	{r4, r5, lr}
 800754c:	b087      	sub	sp, #28
 800754e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007554:	2533      	movs	r5, #51	@ 0x33
 8007556:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800755c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800755e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007564:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007566:	a901      	add	r1, sp, #4
 8007568:	f7ff fdea 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800756c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007570:	4629      	mov	r1, r5
 8007572:	4620      	mov	r0, r4
 8007574:	f7ff fe40 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 8007578:	b007      	add	sp, #28
 800757a:	bd30      	pop	{r4, r5, pc}

0800757c <SDMMC_CmdSendStatus>:
{
 800757c:	b530      	push	{r4, r5, lr}
 800757e:	b087      	sub	sp, #28
 8007580:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007582:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007584:	250d      	movs	r5, #13
 8007586:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800758c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800758e:	2300      	movs	r3, #0
 8007590:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007596:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007598:	a901      	add	r1, sp, #4
 800759a:	f7ff fdd1 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800759e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a2:	4629      	mov	r1, r5
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7ff fe27 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 80075aa:	b007      	add	sp, #28
 80075ac:	bd30      	pop	{r4, r5, pc}

080075ae <SDMMC_CmdStatusRegister>:
{
 80075ae:	b530      	push	{r4, r5, lr}
 80075b0:	b087      	sub	sp, #28
 80075b2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80075b8:	250d      	movs	r5, #13
 80075ba:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075c0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075c8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075ca:	a901      	add	r1, sp, #4
 80075cc:	f7ff fdb8 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80075d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d4:	4629      	mov	r1, r5
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff fe0e 	bl	80071f8 <SDMMC_GetCmdResp1>
}
 80075dc:	b007      	add	sp, #28
 80075de:	bd30      	pop	{r4, r5, pc}

080075e0 <SDMMC_GetCmdResp2>:
{
 80075e0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80075e2:	4b16      	ldr	r3, [pc, #88]	@ (800763c <SDMMC_GetCmdResp2+0x5c>)
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <SDMMC_GetCmdResp2+0x60>)
 80075e8:	fba3 3202 	umull	r3, r2, r3, r2
 80075ec:	0a52      	lsrs	r2, r2, #9
 80075ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80075f2:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80075f6:	1e53      	subs	r3, r2, #1
 80075f8:	b932      	cbnz	r2, 8007608 <SDMMC_GetCmdResp2+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80075fa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80075fe:	4770      	bx	lr
    if (count-- == 0U)
 8007600:	3b01      	subs	r3, #1
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007606:	d015      	beq.n	8007634 <SDMMC_GetCmdResp2+0x54>
    sta_reg = SDMMCx->STA;
 8007608:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800760a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800760e:	d0f7      	beq.n	8007600 <SDMMC_GetCmdResp2+0x20>
 8007610:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 8007614:	d1f4      	bne.n	8007600 <SDMMC_GetCmdResp2+0x20>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007616:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8007618:	f013 0f04 	tst.w	r3, #4
 800761c:	d107      	bne.n	800762e <SDMMC_GetCmdResp2+0x4e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800761e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8007620:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007624:	bf14      	ite	ne
 8007626:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007628:	4b06      	ldreq	r3, [pc, #24]	@ (8007644 <SDMMC_GetCmdResp2+0x64>)
 800762a:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800762c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800762e:	2004      	movs	r0, #4
 8007630:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007632:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007634:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	24000008 	.word	0x24000008
 8007640:	10624dd3 	.word	0x10624dd3
 8007644:	002000c5 	.word	0x002000c5

08007648 <SDMMC_CmdSendCID>:
{
 8007648:	b510      	push	{r4, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007652:	2202      	movs	r2, #2
 8007654:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007656:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800765a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800765c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007662:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007664:	a901      	add	r1, sp, #4
 8007666:	f7ff fd6b 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800766a:	4620      	mov	r0, r4
 800766c:	f7ff ffb8 	bl	80075e0 <SDMMC_GetCmdResp2>
}
 8007670:	b006      	add	sp, #24
 8007672:	bd10      	pop	{r4, pc}

08007674 <SDMMC_CmdSendCSD>:
{
 8007674:	b510      	push	{r4, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800767a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800767c:	2309      	movs	r3, #9
 800767e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007680:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007684:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007686:	2300      	movs	r3, #0
 8007688:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800768a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800768e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007690:	a901      	add	r1, sp, #4
 8007692:	f7ff fd55 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007696:	4620      	mov	r0, r4
 8007698:	f7ff ffa2 	bl	80075e0 <SDMMC_GetCmdResp2>
}
 800769c:	b006      	add	sp, #24
 800769e:	bd10      	pop	{r4, pc}

080076a0 <SDMMC_GetCmdResp3>:
{
 80076a0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076a2:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <SDMMC_GetCmdResp3+0x50>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b13      	ldr	r3, [pc, #76]	@ (80076f4 <SDMMC_GetCmdResp3+0x54>)
 80076a8:	fba3 3202 	umull	r3, r2, r3, r2
 80076ac:	0a52      	lsrs	r2, r2, #9
 80076ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80076b2:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 80076b6:	1e53      	subs	r3, r2, #1
 80076b8:	b932      	cbnz	r2, 80076c8 <SDMMC_GetCmdResp3+0x28>
      return SDMMC_ERROR_TIMEOUT;
 80076ba:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80076be:	4770      	bx	lr
    if (count-- == 0U)
 80076c0:	3b01      	subs	r3, #1
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d010      	beq.n	80076ea <SDMMC_GetCmdResp3+0x4a>
    sta_reg = SDMMCx->STA;
 80076c8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076ca:	f012 0f45 	tst.w	r2, #69	@ 0x45
 80076ce:	d0f7      	beq.n	80076c0 <SDMMC_GetCmdResp3+0x20>
 80076d0:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 80076d4:	d1f4      	bne.n	80076c0 <SDMMC_GetCmdResp3+0x20>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076d6:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80076d8:	f010 0004 	ands.w	r0, r0, #4
 80076dc:	d102      	bne.n	80076e4 <SDMMC_GetCmdResp3+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076de:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <SDMMC_GetCmdResp3+0x58>)
 80076e0:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80076e2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076e4:	2004      	movs	r0, #4
 80076e6:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076e8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80076ea:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80076ee:	4770      	bx	lr
 80076f0:	24000008 	.word	0x24000008
 80076f4:	10624dd3 	.word	0x10624dd3
 80076f8:	002000c5 	.word	0x002000c5

080076fc <SDMMC_CmdAppOperCommand>:
{
 80076fc:	b510      	push	{r4, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007702:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007704:	2329      	movs	r3, #41	@ 0x29
 8007706:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800770c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800770e:	2300      	movs	r3, #0
 8007710:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007716:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007718:	a901      	add	r1, sp, #4
 800771a:	f7ff fd11 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800771e:	4620      	mov	r0, r4
 8007720:	f7ff ffbe 	bl	80076a0 <SDMMC_GetCmdResp3>
}
 8007724:	b006      	add	sp, #24
 8007726:	bd10      	pop	{r4, pc}

08007728 <SDMMC_GetCmdResp6>:
{
 8007728:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800772a:	4b2a      	ldr	r3, [pc, #168]	@ (80077d4 <SDMMC_GetCmdResp6+0xac>)
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	4b2a      	ldr	r3, [pc, #168]	@ (80077d8 <SDMMC_GetCmdResp6+0xb0>)
 8007730:	fba3 3000 	umull	r3, r0, r3, r0
 8007734:	0a40      	lsrs	r0, r0, #9
 8007736:	f241 3388 	movw	r3, #5000	@ 0x1388
 800773a:	fb03 f000 	mul.w	r0, r3, r0
    if (count-- == 0U)
 800773e:	1e43      	subs	r3, r0, #1
 8007740:	2800      	cmp	r0, #0
 8007742:	d03c      	beq.n	80077be <SDMMC_GetCmdResp6+0x96>
{
 8007744:	b410      	push	{r4}
 8007746:	e003      	b.n	8007750 <SDMMC_GetCmdResp6+0x28>
    if (count-- == 0U)
 8007748:	3b01      	subs	r3, #1
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d039      	beq.n	80077c4 <SDMMC_GetCmdResp6+0x9c>
    sta_reg = SDMMCx->STA;
 8007750:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007754:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8007758:	d0f6      	beq.n	8007748 <SDMMC_GetCmdResp6+0x20>
 800775a:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800775e:	d1f3      	bne.n	8007748 <SDMMC_GetCmdResp6+0x20>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007760:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8007764:	f013 0f04 	tst.w	r3, #4
 8007768:	d108      	bne.n	800777c <SDMMC_GetCmdResp6+0x54>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800776a:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800776e:	f010 0001 	ands.w	r0, r0, #1
 8007772:	d007      	beq.n	8007784 <SDMMC_GetCmdResp6+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007774:	2301      	movs	r3, #1
 8007776:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800777a:	e025      	b.n	80077c8 <SDMMC_GetCmdResp6+0xa0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800777c:	2004      	movs	r0, #4
 800777e:	f8cc 0038 	str.w	r0, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007782:	e021      	b.n	80077c8 <SDMMC_GetCmdResp6+0xa0>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007784:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4299      	cmp	r1, r3
 800778c:	d001      	beq.n	8007792 <SDMMC_GetCmdResp6+0x6a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800778e:	2001      	movs	r0, #1
 8007790:	e01a      	b.n	80077c8 <SDMMC_GetCmdResp6+0xa0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007792:	4b12      	ldr	r3, [pc, #72]	@ (80077dc <SDMMC_GetCmdResp6+0xb4>)
 8007794:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8007798:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800779c:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 80077a0:	d00a      	beq.n	80077b8 <SDMMC_GetCmdResp6+0x90>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80077a2:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80077a6:	d112      	bne.n	80077ce <SDMMC_GetCmdResp6+0xa6>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077a8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80077ac:	bf0c      	ite	eq
 80077ae:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80077b2:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 80077b6:	e007      	b.n	80077c8 <SDMMC_GetCmdResp6+0xa0>
    *pRCA = (uint16_t)(response_r1 >> 16);
 80077b8:	0c1b      	lsrs	r3, r3, #16
 80077ba:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 80077bc:	e004      	b.n	80077c8 <SDMMC_GetCmdResp6+0xa0>
      return SDMMC_ERROR_TIMEOUT;
 80077be:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80077c2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80077c4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80077c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077cc:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80077d2:	e7f9      	b.n	80077c8 <SDMMC_GetCmdResp6+0xa0>
 80077d4:	24000008 	.word	0x24000008
 80077d8:	10624dd3 	.word	0x10624dd3
 80077dc:	002000c5 	.word	0x002000c5

080077e0 <SDMMC_CmdSetRelAdd>:
{
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	4604      	mov	r4, r0
 80077e6:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80077ec:	2603      	movs	r6, #3
 80077ee:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077f4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077fc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077fe:	a901      	add	r1, sp, #4
 8007800:	f7ff fc9e 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007804:	462a      	mov	r2, r5
 8007806:	4631      	mov	r1, r6
 8007808:	4620      	mov	r0, r4
 800780a:	f7ff ff8d 	bl	8007728 <SDMMC_GetCmdResp6>
}
 800780e:	b006      	add	sp, #24
 8007810:	bd70      	pop	{r4, r5, r6, pc}
	...

08007814 <SDMMC_GetCmdResp7>:
{
 8007814:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007816:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <SDMMC_GetCmdResp7+0x6c>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <SDMMC_GetCmdResp7+0x70>)
 800781c:	fba3 3202 	umull	r3, r2, r3, r2
 8007820:	0a52      	lsrs	r2, r2, #9
 8007822:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007826:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800782a:	1e53      	subs	r3, r2, #1
 800782c:	b932      	cbnz	r2, 800783c <SDMMC_GetCmdResp7+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800782e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007832:	4770      	bx	lr
    if (count-- == 0U)
 8007834:	3b01      	subs	r3, #1
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783a:	d01b      	beq.n	8007874 <SDMMC_GetCmdResp7+0x60>
    sta_reg = SDMMCx->STA;
 800783c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800783e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 8007842:	d0f7      	beq.n	8007834 <SDMMC_GetCmdResp7+0x20>
 8007844:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 8007848:	d1f4      	bne.n	8007834 <SDMMC_GetCmdResp7+0x20>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800784a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800784c:	f013 0f04 	tst.w	r3, #4
 8007850:	d10a      	bne.n	8007868 <SDMMC_GetCmdResp7+0x54>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007852:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8007854:	f010 0001 	ands.w	r0, r0, #1
 8007858:	d109      	bne.n	800786e <SDMMC_GetCmdResp7+0x5a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800785a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800785c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8007860:	d00b      	beq.n	800787a <SDMMC_GetCmdResp7+0x66>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007862:	2340      	movs	r3, #64	@ 0x40
 8007864:	638b      	str	r3, [r1, #56]	@ 0x38
 8007866:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007868:	2004      	movs	r0, #4
 800786a:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800786c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800786e:	2301      	movs	r3, #1
 8007870:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007872:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007874:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007878:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 800787a:	4618      	mov	r0, r3
}
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	24000008 	.word	0x24000008
 8007884:	10624dd3 	.word	0x10624dd3

08007888 <SDMMC_CmdOperCond>:
{
 8007888:	b510      	push	{r4, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800788e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007892:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007894:	2308      	movs	r3, #8
 8007896:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800789c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800789e:	2300      	movs	r3, #0
 80078a0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078a6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078a8:	a901      	add	r1, sp, #4
 80078aa:	f7ff fc49 	bl	8007140 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80078ae:	4620      	mov	r0, r4
 80078b0:	f7ff ffb0 	bl	8007814 <SDMMC_GetCmdResp7>
}
 80078b4:	b006      	add	sp, #24
 80078b6:	bd10      	pop	{r4, pc}

080078b8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80078b8:	2000      	movs	r0, #0
 80078ba:	4770      	bx	lr

080078bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80078bc:	b500      	push	{lr}
 80078be:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	460a      	mov	r2, r1
 80078c6:	4601      	mov	r1, r0
 80078c8:	4804      	ldr	r0, [pc, #16]	@ (80078dc <BSP_SD_ReadBlocks+0x20>)
 80078ca:	f7fe fb03 	bl	8005ed4 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80078ce:	3800      	subs	r0, #0
 80078d0:	bf18      	it	ne
 80078d2:	2001      	movne	r0, #1
 80078d4:	b003      	add	sp, #12
 80078d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80078da:	bf00      	nop
 80078dc:	240001f8 	.word	0x240001f8

080078e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80078e0:	b500      	push	{lr}
 80078e2:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4613      	mov	r3, r2
 80078e8:	460a      	mov	r2, r1
 80078ea:	4601      	mov	r1, r0
 80078ec:	4804      	ldr	r0, [pc, #16]	@ (8007900 <BSP_SD_WriteBlocks+0x20>)
 80078ee:	f7fe fbf3 	bl	80060d8 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80078f2:	3800      	subs	r0, #0
 80078f4:	bf18      	it	ne
 80078f6:	2001      	movne	r0, #1
 80078f8:	b003      	add	sp, #12
 80078fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80078fe:	bf00      	nop
 8007900:	240001f8 	.word	0x240001f8

08007904 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007904:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007906:	4803      	ldr	r0, [pc, #12]	@ (8007914 <BSP_SD_GetCardState+0x10>)
 8007908:	f7ff f8e2 	bl	8006ad0 <HAL_SD_GetCardState>
}
 800790c:	3804      	subs	r0, #4
 800790e:	bf18      	it	ne
 8007910:	2001      	movne	r0, #1
 8007912:	bd08      	pop	{r3, pc}
 8007914:	240001f8 	.word	0x240001f8

08007918 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007918:	b508      	push	{r3, lr}
 800791a:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800791c:	4801      	ldr	r0, [pc, #4]	@ (8007924 <BSP_SD_GetCardInfo+0xc>)
 800791e:	f7fe ffdf 	bl	80068e0 <HAL_SD_GetCardInfo>
}
 8007922:	bd08      	pop	{r3, pc}
 8007924:	240001f8 	.word	0x240001f8

08007928 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007928:	b500      	push	{lr}
 800792a:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800792c:	2301      	movs	r3, #1
 800792e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007932:	f000 f821 	bl	8007978 <BSP_PlatformIsDetected>
 8007936:	b910      	cbnz	r0, 800793e <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8007938:	2300      	movs	r3, #0
 800793a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800793e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007942:	b003      	add	sp, #12
 8007944:	f85d fb04 	ldr.w	pc, [sp], #4

08007948 <BSP_SD_Init>:
{
 8007948:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800794a:	f7ff ffed 	bl	8007928 <BSP_SD_IsDetected>
 800794e:	2801      	cmp	r0, #1
 8007950:	d001      	beq.n	8007956 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007952:	2002      	movs	r0, #2
}
 8007954:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8007956:	4807      	ldr	r0, [pc, #28]	@ (8007974 <BSP_SD_Init+0x2c>)
 8007958:	f7ff f8ce 	bl	8006af8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800795c:	2800      	cmp	r0, #0
 800795e:	d1f9      	bne.n	8007954 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007964:	4803      	ldr	r0, [pc, #12]	@ (8007974 <BSP_SD_Init+0x2c>)
 8007966:	f7fe ffcd 	bl	8006904 <HAL_SD_ConfigWideBusOperation>
 800796a:	3800      	subs	r0, #0
 800796c:	bf18      	it	ne
 800796e:	2001      	movne	r0, #1
 8007970:	e7f0      	b.n	8007954 <BSP_SD_Init+0xc>
 8007972:	bf00      	nop
 8007974:	240001f8 	.word	0x240001f8

08007978 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007978:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800797a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800797e:	4803      	ldr	r0, [pc, #12]	@ (800798c <BSP_PlatformIsDetected+0x14>)
 8007980:	f7fa fe46 	bl	8002610 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8007984:	fab0 f080 	clz	r0, r0
 8007988:	0940      	lsrs	r0, r0, #5
 800798a:	bd08      	pop	{r3, pc}
 800798c:	58020000 	.word	0x58020000

08007990 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007990:	b508      	push	{r3, lr}
Stat = STA_NOINIT;
 8007992:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <SD_initialize+0x34>)
 8007994:	2201      	movs	r2, #1
 8007996:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007998:	f7ff ffd6 	bl	8007948 <BSP_SD_Init>
 800799c:	b110      	cbz	r0, 80079a4 <SD_initialize+0x14>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800799e:	4b09      	ldr	r3, [pc, #36]	@ (80079c4 <SD_initialize+0x34>)
 80079a0:	7818      	ldrb	r0, [r3, #0]
}
 80079a2:	bd08      	pop	{r3, pc}
  Stat = STA_NOINIT;
 80079a4:	4b07      	ldr	r3, [pc, #28]	@ (80079c4 <SD_initialize+0x34>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80079aa:	f7ff ffab 	bl	8007904 <BSP_SD_GetCardState>
 80079ae:	b920      	cbnz	r0, 80079ba <SD_initialize+0x2a>
    Stat &= ~STA_NOINIT;
 80079b0:	4a04      	ldr	r2, [pc, #16]	@ (80079c4 <SD_initialize+0x34>)
 80079b2:	7813      	ldrb	r3, [r2, #0]
 80079b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80079b8:	7013      	strb	r3, [r2, #0]
  return Stat;
 80079ba:	4a02      	ldr	r2, [pc, #8]	@ (80079c4 <SD_initialize+0x34>)
 80079bc:	7813      	ldrb	r3, [r2, #0]
 80079be:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80079c0:	7013      	strb	r3, [r2, #0]
 80079c2:	e7ec      	b.n	800799e <SD_initialize+0xe>
 80079c4:	24000014 	.word	0x24000014

080079c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80079c8:	b508      	push	{r3, lr}
 80079ca:	4608      	mov	r0, r1
 80079cc:	4611      	mov	r1, r2
 80079ce:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295
 80079d4:	f7ff ff72 	bl	80078bc <BSP_SD_ReadBlocks>
 80079d8:	b930      	cbnz	r0, 80079e8 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80079da:	f7ff ff93 	bl	8007904 <BSP_SD_GetCardState>
 80079de:	4603      	mov	r3, r0
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d1fa      	bne.n	80079da <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e7fb      	b.n	80079e4 <SD_read+0x1c>

080079ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80079ec:	b508      	push	{r3, lr}
 80079ee:	4608      	mov	r0, r1
 80079f0:	4611      	mov	r1, r2
 80079f2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	f7ff ff72 	bl	80078e0 <BSP_SD_WriteBlocks>
 80079fc:	b930      	cbnz	r0, 8007a0c <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80079fe:	f7ff ff81 	bl	8007904 <BSP_SD_GetCardState>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d1fa      	bne.n	80079fe <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e7fb      	b.n	8007a08 <SD_write+0x1c>

08007a10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007a10:	b530      	push	{r4, r5, lr}
 8007a12:	b08b      	sub	sp, #44	@ 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007a14:	4b13      	ldr	r3, [pc, #76]	@ (8007a64 <SD_ioctl+0x54>)
 8007a16:	7818      	ldrb	r0, [r3, #0]
 8007a18:	f010 0401 	ands.w	r4, r0, #1
 8007a1c:	d11b      	bne.n	8007a56 <SD_ioctl+0x46>
 8007a1e:	4615      	mov	r5, r2

  switch (cmd)
 8007a20:	2903      	cmp	r1, #3
 8007a22:	d81c      	bhi.n	8007a5e <SD_ioctl+0x4e>
 8007a24:	e8df f001 	tbb	[pc, r1]
 8007a28:	100a0402 	.word	0x100a0402
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	e013      	b.n	8007a58 <SD_ioctl+0x48>
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a30:	a801      	add	r0, sp, #4
 8007a32:	f7ff ff71 	bl	8007918 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007a36:	9b07      	ldr	r3, [sp, #28]
 8007a38:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8007a3a:	e00d      	b.n	8007a58 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a3c:	a801      	add	r0, sp, #4
 8007a3e:	f7ff ff6b 	bl	8007918 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 8007a46:	e007      	b.n	8007a58 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a48:	a801      	add	r0, sp, #4
 8007a4a:	f7ff ff65 	bl	8007918 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	0a5b      	lsrs	r3, r3, #9
 8007a52:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 8007a54:	e000      	b.n	8007a58 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007a56:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8007a58:	4620      	mov	r0, r4
 8007a5a:	b00b      	add	sp, #44	@ 0x2c
 8007a5c:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 8007a5e:	2404      	movs	r4, #4
 8007a60:	e7fa      	b.n	8007a58 <SD_ioctl+0x48>
 8007a62:	bf00      	nop
 8007a64:	24000014 	.word	0x24000014

08007a68 <SD_status>:
{
 8007a68:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8007a6a:	4b07      	ldr	r3, [pc, #28]	@ (8007a88 <SD_status+0x20>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	701a      	strb	r2, [r3, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8007a70:	f7ff ff48 	bl	8007904 <BSP_SD_GetCardState>
 8007a74:	b920      	cbnz	r0, 8007a80 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 8007a76:	4a04      	ldr	r2, [pc, #16]	@ (8007a88 <SD_status+0x20>)
 8007a78:	7813      	ldrb	r3, [r2, #0]
 8007a7a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007a7e:	7013      	strb	r3, [r2, #0]
  return Stat;
 8007a80:	4b01      	ldr	r3, [pc, #4]	@ (8007a88 <SD_status+0x20>)
 8007a82:	7818      	ldrb	r0, [r3, #0]
}
 8007a84:	bd08      	pop	{r3, pc}
 8007a86:	bf00      	nop
 8007a88:	24000014 	.word	0x24000014

08007a8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007a8c:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a8e:	4b04      	ldr	r3, [pc, #16]	@ (8007aa0 <disk_status+0x14>)
 8007a90:	181a      	adds	r2, r3, r0
 8007a92:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	7a10      	ldrb	r0, [r2, #8]
 8007a9c:	4798      	blx	r3
  return stat;
}
 8007a9e:	bd08      	pop	{r3, pc}
 8007aa0:	2408a06c 	.word	0x2408a06c

08007aa4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8007aa4:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <disk_initialize+0x28>)
 8007aa6:	5c1b      	ldrb	r3, [r3, r0]
 8007aa8:	b973      	cbnz	r3, 8007ac8 <disk_initialize+0x24>
{
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007aae:	4b07      	ldr	r3, [pc, #28]	@ (8007acc <disk_initialize+0x28>)
 8007ab0:	181a      	adds	r2, r3, r0
 8007ab2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	7a10      	ldrb	r0, [r2, #8]
 8007abc:	4798      	blx	r3
    if(stat == RES_OK)
 8007abe:	b910      	cbnz	r0, 8007ac6 <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 8007ac0:	4b02      	ldr	r3, [pc, #8]	@ (8007acc <disk_initialize+0x28>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 8007ac6:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 8007ac8:	2000      	movs	r0, #0
}
 8007aca:	4770      	bx	lr
 8007acc:	2408a06c 	.word	0x2408a06c

08007ad0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ad0:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ad2:	4c05      	ldr	r4, [pc, #20]	@ (8007ae8 <disk_read+0x18>)
 8007ad4:	eb04 0c00 	add.w	ip, r4, r0
 8007ad8:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007adc:	6860      	ldr	r0, [r4, #4]
 8007ade:	6884      	ldr	r4, [r0, #8]
 8007ae0:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8007ae4:	47a0      	blx	r4
  return res;
}
 8007ae6:	bd10      	pop	{r4, pc}
 8007ae8:	2408a06c 	.word	0x2408a06c

08007aec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007aec:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007aee:	4c05      	ldr	r4, [pc, #20]	@ (8007b04 <disk_write+0x18>)
 8007af0:	eb04 0c00 	add.w	ip, r4, r0
 8007af4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007af8:	6860      	ldr	r0, [r4, #4]
 8007afa:	68c4      	ldr	r4, [r0, #12]
 8007afc:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8007b00:	47a0      	blx	r4
  return res;
}
 8007b02:	bd10      	pop	{r4, pc}
 8007b04:	2408a06c 	.word	0x2408a06c

08007b08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b08:	b508      	push	{r3, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007b0a:	4b05      	ldr	r3, [pc, #20]	@ (8007b20 <disk_ioctl+0x18>)
 8007b0c:	eb03 0c00 	add.w	ip, r3, r0
 8007b10:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8007b1c:	4798      	blx	r3
  return res;
}
 8007b1e:	bd08      	pop	{r3, pc}
 8007b20:	2408a06c 	.word	0x2408a06c

08007b24 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8007b24:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 8007b26:	7882      	ldrb	r2, [r0, #2]
 8007b28:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 8007b2c:	7843      	ldrb	r3, [r0, #1]
 8007b2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007b32:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8007b34:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8007b38:	4770      	bx	lr

08007b3a <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8007b3a:	7001      	strb	r1, [r0, #0]
 8007b3c:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8007b3e:	7043      	strb	r3, [r0, #1]
 8007b40:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007b42:	7083      	strb	r3, [r0, #2]
 8007b44:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
 8007b46:	70c1      	strb	r1, [r0, #3]
}
 8007b48:	4770      	bx	lr

08007b4a <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8007b4a:	b13a      	cbz	r2, 8007b5c <mem_cpy+0x12>
 8007b4c:	3801      	subs	r0, #1
 8007b4e:	188a      	adds	r2, r1, r2
		do {
			*d++ = *s++;
 8007b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b54:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8007b58:	4291      	cmp	r1, r2
 8007b5a:	d1f9      	bne.n	8007b50 <mem_cpy+0x6>
	}
}
 8007b5c:	4770      	bx	lr

08007b5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8007b5e:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8007b60:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8007b64:	4290      	cmp	r0, r2
 8007b66:	d1fb      	bne.n	8007b60 <mem_set+0x2>
}
 8007b68:	4770      	bx	lr
	...

08007b6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b6c:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8007b6e:	4b21      	ldr	r3, [pc, #132]	@ (8007bf4 <chk_lock+0x88>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	b1e3      	cbz	r3, 8007bae <chk_lock+0x42>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b74:	6802      	ldr	r2, [r0, #0]
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00b      	beq.n	8007b92 <chk_lock+0x26>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b7a:	2200      	movs	r2, #0
		if (Files[i].fs) {	/* Existing entry */
 8007b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf4 <chk_lock+0x88>)
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	b31b      	cbz	r3, 8007bca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b82:	6804      	ldr	r4, [r0, #0]
 8007b84:	42a3      	cmp	r3, r4
 8007b86:	d014      	beq.n	8007bb2 <chk_lock+0x46>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b88:	bb0a      	cbnz	r2, 8007bce <chk_lock+0x62>
 8007b8a:	2902      	cmp	r1, #2
 8007b8c:	d01f      	beq.n	8007bce <chk_lock+0x62>
 8007b8e:	2012      	movs	r0, #18
 8007b90:	e02b      	b.n	8007bea <chk_lock+0x7e>
				Files[i].clu == dp->obj.sclust &&
 8007b92:	4b18      	ldr	r3, [pc, #96]	@ (8007bf4 <chk_lock+0x88>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	6883      	ldr	r3, [r0, #8]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d001      	beq.n	8007ba0 <chk_lock+0x34>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	e7ed      	b.n	8007b7c <chk_lock+0x10>
				Files[i].ofs == dp->dptr) break;
 8007ba0:	4b14      	ldr	r3, [pc, #80]	@ (8007bf4 <chk_lock+0x88>)
				Files[i].clu == dp->obj.sclust &&
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	6943      	ldr	r3, [r0, #20]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d013      	beq.n	8007bd2 <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007baa:	2200      	movs	r2, #0
 8007bac:	e7e6      	b.n	8007b7c <chk_lock+0x10>
			be = 1;
 8007bae:	2201      	movs	r2, #1
 8007bb0:	e7e4      	b.n	8007b7c <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 8007bb2:	4b10      	ldr	r3, [pc, #64]	@ (8007bf4 <chk_lock+0x88>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007bb4:	695c      	ldr	r4, [r3, #20]
 8007bb6:	6883      	ldr	r3, [r0, #8]
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	d1e5      	bne.n	8007b88 <chk_lock+0x1c>
				Files[i].ofs == dp->dptr) break;
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <chk_lock+0x88>)
				Files[i].clu == dp->obj.sclust &&
 8007bbe:	699c      	ldr	r4, [r3, #24]
 8007bc0:	6943      	ldr	r3, [r0, #20]
 8007bc2:	429c      	cmp	r4, r3
 8007bc4:	d1e0      	bne.n	8007b88 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	e004      	b.n	8007bd4 <chk_lock+0x68>
			be = 1;
 8007bca:	2201      	movs	r2, #1
 8007bcc:	e7dc      	b.n	8007b88 <chk_lock+0x1c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007bce:	2000      	movs	r0, #0
 8007bd0:	e00b      	b.n	8007bea <chk_lock+0x7e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007bd2:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007bd4:	b961      	cbnz	r1, 8007bf0 <chk_lock+0x84>
 8007bd6:	4b07      	ldr	r3, [pc, #28]	@ (8007bf4 <chk_lock+0x88>)
 8007bd8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007bdc:	8998      	ldrh	r0, [r3, #12]
 8007bde:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8007be2:	bf14      	ite	ne
 8007be4:	2000      	movne	r0, #0
 8007be6:	2001      	moveq	r0, #1
 8007be8:	0100      	lsls	r0, r0, #4
}
 8007bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bee:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007bf0:	2010      	movs	r0, #16
 8007bf2:	e7fa      	b.n	8007bea <chk_lock+0x7e>
 8007bf4:	2408a044 	.word	0x2408a044

08007bf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bf8:	b430      	push	{r4, r5}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8007bfa:	6802      	ldr	r2, [r0, #0]
 8007bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8007cb0 <inc_lock+0xb8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d00b      	beq.n	8007c1c <inc_lock+0x24>
 8007c04:	4c2a      	ldr	r4, [pc, #168]	@ (8007cb0 <inc_lock+0xb8>)
 8007c06:	6924      	ldr	r4, [r4, #16]
 8007c08:	4294      	cmp	r4, r2
 8007c0a:	d023      	beq.n	8007c54 <inc_lock+0x5c>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d02e      	beq.n	8007c6e <inc_lock+0x76>
 8007c10:	4b27      	ldr	r3, [pc, #156]	@ (8007cb0 <inc_lock+0xb8>)
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d03d      	beq.n	8007c94 <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e019      	b.n	8007c50 <inc_lock+0x58>
			Files[i].clu == dp->obj.sclust &&
 8007c1c:	4c24      	ldr	r4, [pc, #144]	@ (8007cb0 <inc_lock+0xb8>)
		if (Files[i].fs == dp->obj.fs &&
 8007c1e:	6865      	ldr	r5, [r4, #4]
 8007c20:	6884      	ldr	r4, [r0, #8]
 8007c22:	42a5      	cmp	r5, r4
 8007c24:	d1ee      	bne.n	8007c04 <inc_lock+0xc>
			Files[i].ofs == dp->dptr) break;
 8007c26:	4c22      	ldr	r4, [pc, #136]	@ (8007cb0 <inc_lock+0xb8>)
			Files[i].clu == dp->obj.sclust &&
 8007c28:	68a5      	ldr	r5, [r4, #8]
 8007c2a:	6944      	ldr	r4, [r0, #20]
 8007c2c:	42a5      	cmp	r5, r4
 8007c2e:	d1e9      	bne.n	8007c04 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c30:	f04f 0c00 	mov.w	ip, #0
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c34:	2900      	cmp	r1, #0
 8007c36:	d130      	bne.n	8007c9a <inc_lock+0xa2>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c38:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb0 <inc_lock+0xb8>)
 8007c3a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8007c3e:	899b      	ldrh	r3, [r3, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	4a1a      	ldr	r2, [pc, #104]	@ (8007cb0 <inc_lock+0xb8>)
 8007c46:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8007c4a:	8193      	strh	r3, [r2, #12]

	return i + 1;
 8007c4c:	f10c 0001 	add.w	r0, ip, #1
}
 8007c50:	bc30      	pop	{r4, r5}
 8007c52:	4770      	bx	lr
			Files[i].clu == dp->obj.sclust &&
 8007c54:	4c16      	ldr	r4, [pc, #88]	@ (8007cb0 <inc_lock+0xb8>)
		if (Files[i].fs == dp->obj.fs &&
 8007c56:	6965      	ldr	r5, [r4, #20]
 8007c58:	6884      	ldr	r4, [r0, #8]
 8007c5a:	42a5      	cmp	r5, r4
 8007c5c:	d1d6      	bne.n	8007c0c <inc_lock+0x14>
			Files[i].ofs == dp->dptr) break;
 8007c5e:	4c14      	ldr	r4, [pc, #80]	@ (8007cb0 <inc_lock+0xb8>)
			Files[i].clu == dp->obj.sclust &&
 8007c60:	69a5      	ldr	r5, [r4, #24]
 8007c62:	6944      	ldr	r4, [r0, #20]
 8007c64:	42a5      	cmp	r5, r4
 8007c66:	d1d1      	bne.n	8007c0c <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c68:	f04f 0c01 	mov.w	ip, #1
 8007c6c:	e7e2      	b.n	8007c34 <inc_lock+0x3c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c6e:	f04f 0c00 	mov.w	ip, #0
		Files[i].fs = dp->obj.fs;
 8007c72:	4d0f      	ldr	r5, [pc, #60]	@ (8007cb0 <inc_lock+0xb8>)
 8007c74:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8007c78:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 8007c7c:	512a      	str	r2, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8007c7e:	6882      	ldr	r2, [r0, #8]
 8007c80:	605a      	str	r2, [r3, #4]
		Files[i].ofs = dp->dptr;
 8007c82:	6942      	ldr	r2, [r0, #20]
 8007c84:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 8007c86:	2200      	movs	r2, #0
 8007c88:	819a      	strh	r2, [r3, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	d0d4      	beq.n	8007c38 <inc_lock+0x40>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c92:	e7d7      	b.n	8007c44 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c94:	f04f 0c01 	mov.w	ip, #1
 8007c98:	e7eb      	b.n	8007c72 <inc_lock+0x7a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c9a:	4b05      	ldr	r3, [pc, #20]	@ (8007cb0 <inc_lock+0xb8>)
 8007c9c:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8007ca0:	899b      	ldrh	r3, [r3, #12]
 8007ca2:	b913      	cbnz	r3, 8007caa <inc_lock+0xb2>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ca8:	e7cc      	b.n	8007c44 <inc_lock+0x4c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7d0      	b.n	8007c50 <inc_lock+0x58>
 8007cae:	bf00      	nop
 8007cb0:	2408a044 	.word	0x2408a044

08007cb4 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007cb4:	3801      	subs	r0, #1
 8007cb6:	2801      	cmp	r0, #1
 8007cb8:	d810      	bhi.n	8007cdc <dec_lock+0x28>
		n = Files[i].ctr;
 8007cba:	4b0e      	ldr	r3, [pc, #56]	@ (8007cf4 <dec_lock+0x40>)
 8007cbc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007cc0:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc6:	d00b      	beq.n	8007ce0 <dec_lock+0x2c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8007cc8:	b17b      	cbz	r3, 8007cea <dec_lock+0x36>
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8007cce:	4a09      	ldr	r2, [pc, #36]	@ (8007cf4 <dec_lock+0x40>)
 8007cd0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8007cd4:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007cd6:	b143      	cbz	r3, 8007cea <dec_lock+0x36>
		res = FR_OK;
 8007cd8:	2000      	movs	r0, #0
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
	}
	return res;
}
 8007cda:	4770      	bx	lr
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007cdc:	2002      	movs	r0, #2
 8007cde:	4770      	bx	lr
		Files[i].ctr = n;
 8007ce0:	4b04      	ldr	r3, [pc, #16]	@ (8007cf4 <dec_lock+0x40>)
 8007ce2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007cea:	0103      	lsls	r3, r0, #4
 8007cec:	2000      	movs	r0, #0
 8007cee:	4a01      	ldr	r2, [pc, #4]	@ (8007cf4 <dec_lock+0x40>)
 8007cf0:	50d0      	str	r0, [r2, r3]
 8007cf2:	4770      	bx	lr
 8007cf4:	2408a044 	.word	0x2408a044

08007cf8 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007cf8:	4b08      	ldr	r3, [pc, #32]	@ (8007d1c <clear_lock+0x24>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4298      	cmp	r0, r3
 8007cfe:	d004      	beq.n	8007d0a <clear_lock+0x12>
 8007d00:	4b06      	ldr	r3, [pc, #24]	@ (8007d1c <clear_lock+0x24>)
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	4283      	cmp	r3, r0
 8007d06:	d004      	beq.n	8007d12 <clear_lock+0x1a>
	}
}
 8007d08:	4770      	bx	lr
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d0a:	4b04      	ldr	r3, [pc, #16]	@ (8007d1c <clear_lock+0x24>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e7f6      	b.n	8007d00 <clear_lock+0x8>
 8007d12:	4b02      	ldr	r3, [pc, #8]	@ (8007d1c <clear_lock+0x24>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	611a      	str	r2, [r3, #16]
}
 8007d18:	e7f6      	b.n	8007d08 <clear_lock+0x10>
 8007d1a:	bf00      	nop
 8007d1c:	2408a044 	.word	0x2408a044

08007d20 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8007d20:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d22:	6943      	ldr	r3, [r0, #20]
 8007d24:	3b02      	subs	r3, #2
 8007d26:	428b      	cmp	r3, r1
 8007d28:	d904      	bls.n	8007d34 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8007d2a:	8943      	ldrh	r3, [r0, #10]
 8007d2c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007d2e:	fb01 0003 	mla	r0, r1, r3, r0
 8007d32:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d34:	2000      	movs	r0, #0
}
 8007d36:	4770      	bx	lr

08007d38 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d38:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8007d3a:	1d13      	adds	r3, r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007d3c:	0a49      	lsrs	r1, r1, #9
 8007d3e:	6800      	ldr	r0, [r0, #0]
 8007d40:	8940      	ldrh	r0, [r0, #10]
 8007d42:	fbb1 f1f0 	udiv	r1, r1, r0
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d46:	6850      	ldr	r0, [r2, #4]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d48:	b148      	cbz	r0, 8007d5e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007d4a:	4281      	cmp	r1, r0
 8007d4c:	d305      	bcc.n	8007d5a <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d4e:	1a09      	subs	r1, r1, r0
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d50:	f853 0f08 	ldr.w	r0, [r3, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d1f8      	bne.n	8007d4a <clmt_clust+0x12>
 8007d58:	4770      	bx	lr
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d5a:	6858      	ldr	r0, [r3, #4]
 8007d5c:	4408      	add	r0, r1
}
 8007d5e:	4770      	bx	lr

08007d60 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d60:	6801      	ldr	r1, [r0, #0]
 8007d62:	b311      	cbz	r1, 8007daa <get_ldnumber+0x4a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d64:	f891 c000 	ldrb.w	ip, [r1]
 8007d68:	f1bc 0f20 	cmp.w	ip, #32
 8007d6c:	d90d      	bls.n	8007d8a <get_ldnumber+0x2a>
 8007d6e:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 8007d72:	d00a      	beq.n	8007d8a <get_ldnumber+0x2a>
 8007d74:	460a      	mov	r2, r1
 8007d76:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d901      	bls.n	8007d82 <get_ldnumber+0x22>
 8007d7e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d80:	d1f9      	bne.n	8007d76 <get_ldnumber+0x16>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d82:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d84:	d004      	beq.n	8007d90 <get_ldnumber+0x30>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007d86:	2000      	movs	r0, #0
 8007d88:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d8a:	460a      	mov	r2, r1
 8007d8c:	4663      	mov	r3, ip
 8007d8e:	e7f8      	b.n	8007d82 <get_ldnumber+0x22>
			i = *tp++ - '0';
 8007d90:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007d92:	428a      	cmp	r2, r1
 8007d94:	d102      	bne.n	8007d9c <get_ldnumber+0x3c>
 8007d96:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007d9a:	d002      	beq.n	8007da2 <get_ldnumber+0x42>
	int vol = -1;
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
#endif
	}
	return vol;
}
 8007da0:	4770      	bx	lr
					*path = ++tt;
 8007da2:	3201      	adds	r2, #1
 8007da4:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 8007da6:	2000      	movs	r0, #0
 8007da8:	4770      	bx	lr
	int vol = -1;
 8007daa:	f04f 30ff 	mov.w	r0, #4294967295
 8007dae:	4770      	bx	lr

08007db0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007db4:	4604      	mov	r4, r0
 8007db6:	b198      	cbz	r0, 8007de0 <validate+0x30>
 8007db8:	6803      	ldr	r3, [r0, #0]
 8007dba:	b19b      	cbz	r3, 8007de4 <validate+0x34>
 8007dbc:	781a      	ldrb	r2, [r3, #0]
 8007dbe:	b1a2      	cbz	r2, 8007dea <validate+0x3a>
 8007dc0:	8881      	ldrh	r1, [r0, #4]
 8007dc2:	88da      	ldrh	r2, [r3, #6]
 8007dc4:	4291      	cmp	r1, r2
 8007dc6:	d003      	beq.n	8007dd0 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8007dc8:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007dca:	2400      	movs	r4, #0
 8007dcc:	602c      	str	r4, [r5, #0]
	return res;
}
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007dd0:	7858      	ldrb	r0, [r3, #1]
 8007dd2:	f7ff fe5b 	bl	8007a8c <disk_status>
 8007dd6:	f010 0001 	ands.w	r0, r0, #1
 8007dda:	d109      	bne.n	8007df0 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007ddc:	6824      	ldr	r4, [r4, #0]
 8007dde:	e7f5      	b.n	8007dcc <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8007de0:	2009      	movs	r0, #9
 8007de2:	e7f3      	b.n	8007dcc <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007de4:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8007de6:	2009      	movs	r0, #9
 8007de8:	e7f0      	b.n	8007dcc <validate+0x1c>
 8007dea:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007dec:	2400      	movs	r4, #0
 8007dee:	e7ed      	b.n	8007dcc <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8007df0:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007df2:	2400      	movs	r4, #0
 8007df4:	e7ea      	b.n	8007dcc <validate+0x1c>

08007df6 <sync_window>:
{
 8007df6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007dfa:	78c5      	ldrb	r5, [r0, #3]
 8007dfc:	b915      	cbnz	r5, 8007e04 <sync_window+0xe>
}
 8007dfe:	4628      	mov	r0, r5
 8007e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e04:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8007e06:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e08:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4632      	mov	r2, r6
 8007e10:	4641      	mov	r1, r8
 8007e12:	7840      	ldrb	r0, [r0, #1]
 8007e14:	f7ff fe6a 	bl	8007aec <disk_write>
 8007e18:	4605      	mov	r5, r0
 8007e1a:	b9b8      	cbnz	r0, 8007e4c <sync_window+0x56>
			fs->wflag = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e20:	6a23      	ldr	r3, [r4, #32]
 8007e22:	1af3      	subs	r3, r6, r3
 8007e24:	69a2      	ldr	r2, [r4, #24]
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d2e9      	bcs.n	8007dfe <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e2a:	78a7      	ldrb	r7, [r4, #2]
 8007e2c:	2f01      	cmp	r7, #1
 8007e2e:	d9e6      	bls.n	8007dfe <sync_window+0x8>
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e30:	f04f 0901 	mov.w	r9, #1
					wsect += fs->fsize;
 8007e34:	69a3      	ldr	r3, [r4, #24]
 8007e36:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e38:	464b      	mov	r3, r9
 8007e3a:	4632      	mov	r2, r6
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	7860      	ldrb	r0, [r4, #1]
 8007e40:	f7ff fe54 	bl	8007aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e44:	3f01      	subs	r7, #1
 8007e46:	2f01      	cmp	r7, #1
 8007e48:	d1f4      	bne.n	8007e34 <sync_window+0x3e>
 8007e4a:	e7d8      	b.n	8007dfe <sync_window+0x8>
			res = FR_DISK_ERR;
 8007e4c:	2501      	movs	r5, #1
 8007e4e:	e7d6      	b.n	8007dfe <sync_window+0x8>

08007e50 <move_window>:
{
 8007e50:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e52:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007e54:	428b      	cmp	r3, r1
 8007e56:	d101      	bne.n	8007e5c <move_window+0xc>
	FRESULT res = FR_OK;
 8007e58:	2000      	movs	r0, #0
}
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8007e60:	f7ff ffc9 	bl	8007df6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d1f8      	bne.n	8007e5a <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007e68:	2301      	movs	r3, #1
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8007e70:	7860      	ldrb	r0, [r4, #1]
 8007e72:	f7ff fe2d 	bl	8007ad0 <disk_read>
 8007e76:	b110      	cbz	r0, 8007e7e <move_window+0x2e>
				res = FR_DISK_ERR;
 8007e78:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e7a:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8007e7e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8007e80:	e7eb      	b.n	8007e5a <move_window+0xa>
	...

08007e84 <sync_fs>:
{
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4604      	mov	r4, r0
	res = sync_window(fs);
 8007e88:	f7ff ffb5 	bl	8007df6 <sync_window>
	if (res == FR_OK) {
 8007e8c:	b950      	cbnz	r0, 8007ea4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007e8e:	7823      	ldrb	r3, [r4, #0]
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d008      	beq.n	8007ea6 <sync_fs+0x22>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007e94:	2200      	movs	r2, #0
 8007e96:	4611      	mov	r1, r2
 8007e98:	7860      	ldrb	r0, [r4, #1]
 8007e9a:	f7ff fe35 	bl	8007b08 <disk_ioctl>
 8007e9e:	3800      	subs	r0, #0
 8007ea0:	bf18      	it	ne
 8007ea2:	2001      	movne	r0, #1
}
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ea6:	7923      	ldrb	r3, [r4, #4]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d1f3      	bne.n	8007e94 <sync_fs+0x10>
			mem_set(fs->win, 0, SS(fs));
 8007eac:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 8007eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff fe51 	bl	8007b5e <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8007ebc:	2355      	movs	r3, #85	@ 0x55
 8007ebe:	f884 322e 	strb.w	r3, [r4, #558]	@ 0x22e
	*ptr++ = (BYTE)val;
 8007ec2:	23aa      	movs	r3, #170	@ 0xaa
 8007ec4:	f884 322f 	strb.w	r3, [r4, #559]	@ 0x22f
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ec8:	490e      	ldr	r1, [pc, #56]	@ (8007f04 <sync_fs+0x80>)
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f7ff fe35 	bl	8007b3a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ed0:	490d      	ldr	r1, [pc, #52]	@ (8007f08 <sync_fs+0x84>)
 8007ed2:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 8007ed6:	f7ff fe30 	bl	8007b3a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007eda:	6921      	ldr	r1, [r4, #16]
 8007edc:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8007ee0:	f7ff fe2b 	bl	8007b3a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ee4:	68e1      	ldr	r1, [r4, #12]
 8007ee6:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8007eea:	f7ff fe26 	bl	8007b3a <st_dword>
			fs->winsect = fs->volbase + 1;
 8007eee:	69e2      	ldr	r2, [r4, #28]
 8007ef0:	3201      	adds	r2, #1
 8007ef2:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	7860      	ldrb	r0, [r4, #1]
 8007efa:	f7ff fdf7 	bl	8007aec <disk_write>
			fs->fsi_flag = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	7123      	strb	r3, [r4, #4]
 8007f02:	e7c7      	b.n	8007e94 <sync_fs+0x10>
 8007f04:	41615252 	.word	0x41615252
 8007f08:	61417272 	.word	0x61417272

08007f0c <put_fat>:
{
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f10:	2901      	cmp	r1, #1
 8007f12:	f240 8089 	bls.w	8008028 <put_fat+0x11c>
 8007f16:	4606      	mov	r6, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	4615      	mov	r5, r2
 8007f1c:	6943      	ldr	r3, [r0, #20]
 8007f1e:	428b      	cmp	r3, r1
 8007f20:	f240 8084 	bls.w	800802c <put_fat+0x120>
		switch (fs->fs_type) {
 8007f24:	7803      	ldrb	r3, [r0, #0]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d04d      	beq.n	8007fc6 <put_fat+0xba>
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d060      	beq.n	8007ff0 <put_fat+0xe4>
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d003      	beq.n	8007f3a <put_fat+0x2e>
 8007f32:	2702      	movs	r7, #2
}
 8007f34:	4638      	mov	r0, r7
 8007f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007f3a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f3e:	6a01      	ldr	r1, [r0, #32]
 8007f40:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8007f44:	f7ff ff84 	bl	8007e50 <move_window>
			if (res != FR_OK) break;
 8007f48:	4607      	mov	r7, r0
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d1f2      	bne.n	8007f34 <put_fat+0x28>
			p = fs->win + bc++ % SS(fs);
 8007f4e:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 8007f52:	f108 0a01 	add.w	sl, r8, #1
 8007f56:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f5a:	f014 0f01 	tst.w	r4, #1
 8007f5e:	d01a      	beq.n	8007f96 <put_fat+0x8a>
 8007f60:	f819 3008 	ldrb.w	r3, [r9, r8]
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8007f6c:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8007f70:	2301      	movs	r3, #1
 8007f72:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f74:	6a31      	ldr	r1, [r6, #32]
 8007f76:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7ff ff68 	bl	8007e50 <move_window>
			if (res != FR_OK) break;
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d155      	bne.n	8008030 <put_fat+0x124>
			p = fs->win + bc % SS(fs);
 8007f84:	f3ca 0108 	ubfx	r1, sl, #0, #9
 8007f88:	4449      	add	r1, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007f8a:	f3c5 1307 	ubfx	r3, r5, #4, #8
 8007f8e:	700b      	strb	r3, [r1, #0]
			fs->wflag = 1;
 8007f90:	2301      	movs	r3, #1
 8007f92:	70f3      	strb	r3, [r6, #3]
			break;
 8007f94:	e7ce      	b.n	8007f34 <put_fat+0x28>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f96:	f809 5008 	strb.w	r5, [r9, r8]
			fs->wflag = 1;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f9e:	6a31      	ldr	r1, [r6, #32]
 8007fa0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f7ff ff53 	bl	8007e50 <move_window>
			if (res != FR_OK) break;
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d142      	bne.n	8008034 <put_fat+0x128>
			p = fs->win + bc % SS(fs);
 8007fae:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8007fb2:	eb09 010a 	add.w	r1, r9, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007fb6:	f819 300a 	ldrb.w	r3, [r9, sl]
 8007fba:	f023 030f 	bic.w	r3, r3, #15
 8007fbe:	f3c5 2203 	ubfx	r2, r5, #8, #4
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	e7e3      	b.n	8007f8e <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007fc6:	6a01      	ldr	r1, [r0, #32]
 8007fc8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007fcc:	f7ff ff40 	bl	8007e50 <move_window>
			if (res != FR_OK) break;
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d1ae      	bne.n	8007f34 <put_fat+0x28>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007fd6:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 8007fda:	0064      	lsls	r4, r4, #1
 8007fdc:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8007fe0:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8007fe2:	551d      	strb	r5, [r3, r4]
 8007fe4:	f3c5 2207 	ubfx	r2, r5, #8, #8
	*ptr++ = (BYTE)val;
 8007fe8:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 8007fea:	2301      	movs	r3, #1
 8007fec:	70f3      	strb	r3, [r6, #3]
			break;
 8007fee:	e7a1      	b.n	8007f34 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ff0:	6a01      	ldr	r1, [r0, #32]
 8007ff2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007ff6:	f7ff ff2b 	bl	8007e50 <move_window>
			if (res != FR_OK) break;
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d199      	bne.n	8007f34 <put_fat+0x28>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008000:	f025 4570 	bic.w	r5, r5, #4026531840	@ 0xf0000000
 8008004:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 8008008:	00a4      	lsls	r4, r4, #2
 800800a:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 800800e:	441c      	add	r4, r3
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff fd87 	bl	8007b24 <ld_dword>
 8008016:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800801a:	4329      	orrs	r1, r5
 800801c:	4620      	mov	r0, r4
 800801e:	f7ff fd8c 	bl	8007b3a <st_dword>
			fs->wflag = 1;
 8008022:	2301      	movs	r3, #1
 8008024:	70f3      	strb	r3, [r6, #3]
			break;
 8008026:	e785      	b.n	8007f34 <put_fat+0x28>
	FRESULT res = FR_INT_ERR;
 8008028:	2702      	movs	r7, #2
 800802a:	e783      	b.n	8007f34 <put_fat+0x28>
 800802c:	2702      	movs	r7, #2
 800802e:	e781      	b.n	8007f34 <put_fat+0x28>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008030:	4607      	mov	r7, r0
 8008032:	e77f      	b.n	8007f34 <put_fat+0x28>
 8008034:	4607      	mov	r7, r0
	return res;
 8008036:	e77d      	b.n	8007f34 <put_fat+0x28>

08008038 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008038:	768a      	strb	r2, [r1, #26]
 800803a:	f3c2 2307 	ubfx	r3, r2, #8, #8
	*ptr++ = (BYTE)val;
 800803e:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008040:	7803      	ldrb	r3, [r0, #0]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d000      	beq.n	8008048 <st_clust+0x10>
}
 8008046:	4770      	bx	lr
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008048:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800804a:	750a      	strb	r2, [r1, #20]
 800804c:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800804e:	754a      	strb	r2, [r1, #21]
}
 8008050:	e7f9      	b.n	8008046 <st_clust+0xe>

08008052 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008052:	2901      	cmp	r1, #1
 8008054:	d958      	bls.n	8008108 <get_fat+0xb6>
{
 8008056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008058:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800805a:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800805c:	6973      	ldr	r3, [r6, #20]
 800805e:	428b      	cmp	r3, r1
 8008060:	d954      	bls.n	800810c <get_fat+0xba>
		switch (fs->fs_type) {
 8008062:	7833      	ldrb	r3, [r6, #0]
 8008064:	2b02      	cmp	r3, #2
 8008066:	d02c      	beq.n	80080c2 <get_fat+0x70>
 8008068:	2b03      	cmp	r3, #3
 800806a:	d03b      	beq.n	80080e4 <get_fat+0x92>
 800806c:	2b01      	cmp	r3, #1
 800806e:	d001      	beq.n	8008074 <get_fat+0x22>
 8008070:	2001      	movs	r0, #1
 8008072:	e04c      	b.n	800810e <get_fat+0xbc>
			bc = (UINT)clst; bc += bc / 2;
 8008074:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008078:	6a31      	ldr	r1, [r6, #32]
 800807a:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800807e:	4630      	mov	r0, r6
 8008080:	f7ff fee6 	bl	8007e50 <move_window>
 8008084:	b110      	cbz	r0, 800808c <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	e040      	b.n	800810e <get_fat+0xbc>
			wc = fs->win[bc++ % SS(fs)];
 800808c:	1c6f      	adds	r7, r5, #1
 800808e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008092:	4435      	add	r5, r6
 8008094:	f895 5030 	ldrb.w	r5, [r5, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008098:	6a31      	ldr	r1, [r6, #32]
 800809a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800809e:	4630      	mov	r0, r6
 80080a0:	f7ff fed6 	bl	8007e50 <move_window>
 80080a4:	bba0      	cbnz	r0, 8008110 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 80080a6:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80080aa:	4437      	add	r7, r6
 80080ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80080b0:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80080b4:	f014 0f01 	tst.w	r4, #1
 80080b8:	bf14      	ite	ne
 80080ba:	0900      	lsrne	r0, r0, #4
 80080bc:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
 80080c0:	e025      	b.n	800810e <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080c2:	6a31      	ldr	r1, [r6, #32]
 80080c4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff fec1 	bl	8007e50 <move_window>
 80080ce:	bb10      	cbnz	r0, 8008116 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080d0:	3630      	adds	r6, #48	@ 0x30
 80080d2:	0064      	lsls	r4, r4, #1
 80080d4:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 80080d8:	1933      	adds	r3, r6, r4
	rv = rv << 8 | ptr[0];
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	5d30      	ldrb	r0, [r6, r4]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 80080e2:	e014      	b.n	800810e <get_fat+0xbc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080e4:	6a31      	ldr	r1, [r6, #32]
 80080e6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff feb0 	bl	8007e50 <move_window>
 80080f0:	b9a0      	cbnz	r0, 800811c <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80080f2:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 80080f6:	00a4      	lsls	r4, r4, #2
 80080f8:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 80080fc:	4420      	add	r0, r4
 80080fe:	f7ff fd11 	bl	8007b24 <ld_dword>
 8008102:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8008106:	e002      	b.n	800810e <get_fat+0xbc>
		val = 1;	/* Internal error */
 8008108:	2001      	movs	r0, #1
}
 800810a:	4770      	bx	lr
		val = 1;	/* Internal error */
 800810c:	2001      	movs	r0, #1
}
 800810e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	e7fb      	b.n	800810e <get_fat+0xbc>
 8008116:	f04f 30ff 	mov.w	r0, #4294967295
 800811a:	e7f8      	b.n	800810e <get_fat+0xbc>
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8008120:	e7f5      	b.n	800810e <get_fat+0xbc>

08008122 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008122:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8008126:	d245      	bcs.n	80081b4 <dir_sdi+0x92>
{
 8008128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812c:	4606      	mov	r6, r0
 800812e:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008130:	f011 0f1f 	tst.w	r1, #31
 8008134:	d140      	bne.n	80081b8 <dir_sdi+0x96>
	FATFS *fs = dp->obj.fs;
 8008136:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800813a:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800813c:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800813e:	b93c      	cbnz	r4, 8008150 <dir_sdi+0x2e>
 8008140:	f898 3000 	ldrb.w	r3, [r8]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d91f      	bls.n	8008188 <dir_sdi+0x66>
		clst = fs->dirbase;
 8008148:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800814c:	b1e3      	cbz	r3, 8008188 <dir_sdi+0x66>
		clst = fs->dirbase;
 800814e:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008150:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8008154:	025f      	lsls	r7, r3, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8008156:	ebb5 2f43 	cmp.w	r5, r3, lsl #9
 800815a:	d310      	bcc.n	800817e <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800815c:	4621      	mov	r1, r4
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ff77 	bl	8008052 <get_fat>
 8008164:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008166:	f1b0 3fff 	cmp.w	r0, #4294967295
 800816a:	d029      	beq.n	80081c0 <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800816c:	2801      	cmp	r0, #1
 800816e:	d929      	bls.n	80081c4 <dir_sdi+0xa2>
 8008170:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008174:	4283      	cmp	r3, r0
 8008176:	d927      	bls.n	80081c8 <dir_sdi+0xa6>
			ofs -= csz;
 8008178:	1bed      	subs	r5, r5, r7
		while (ofs >= csz) {				/* Follow cluster chain */
 800817a:	42af      	cmp	r7, r5
 800817c:	d9ee      	bls.n	800815c <dir_sdi+0x3a>
		dp->sect = clust2sect(fs, clst);
 800817e:	4621      	mov	r1, r4
 8008180:	4640      	mov	r0, r8
 8008182:	f7ff fdcd 	bl	8007d20 <clust2sect>
 8008186:	e006      	b.n	8008196 <dir_sdi+0x74>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008188:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800818c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8008190:	d914      	bls.n	80081bc <dir_sdi+0x9a>
		dp->sect = fs->dirbase;
 8008192:	f8d8 0024 	ldr.w	r0, [r8, #36]	@ 0x24
 8008196:	61f0      	str	r0, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8008198:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800819a:	b1b8      	cbz	r0, 80081cc <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800819c:	eb00 2055 	add.w	r0, r0, r5, lsr #9
 80081a0:	61f0      	str	r0, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081a2:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 80081a6:	f3c5 0108 	ubfx	r1, r5, #0, #9
 80081aa:	4441      	add	r1, r8
 80081ac:	6231      	str	r1, [r6, #32]
	return FR_OK;
 80081ae:	2000      	movs	r0, #0
}
 80081b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 80081b4:	2002      	movs	r0, #2
}
 80081b6:	4770      	bx	lr
		return FR_INT_ERR;
 80081b8:	2002      	movs	r0, #2
 80081ba:	e7f9      	b.n	80081b0 <dir_sdi+0x8e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80081bc:	2002      	movs	r0, #2
 80081be:	e7f7      	b.n	80081b0 <dir_sdi+0x8e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081c0:	2001      	movs	r0, #1
 80081c2:	e7f5      	b.n	80081b0 <dir_sdi+0x8e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081c4:	2002      	movs	r0, #2
 80081c6:	e7f3      	b.n	80081b0 <dir_sdi+0x8e>
 80081c8:	2002      	movs	r0, #2
 80081ca:	e7f1      	b.n	80081b0 <dir_sdi+0x8e>
	if (!dp->sect) return FR_INT_ERR;
 80081cc:	2002      	movs	r0, #2
 80081ce:	e7ef      	b.n	80081b0 <dir_sdi+0x8e>

080081d0 <create_chain>:
{
 80081d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d4:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 80081d6:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80081d8:	4688      	mov	r8, r1
 80081da:	b931      	cbnz	r1, 80081ea <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80081dc:	68fd      	ldr	r5, [r7, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80081de:	b18d      	cbz	r5, 8008204 <create_chain+0x34>
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	42ab      	cmp	r3, r5
 80081e4:	bf98      	it	ls
 80081e6:	2501      	movls	r5, #1
 80081e8:	e00d      	b.n	8008206 <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80081ea:	f7ff ff32 	bl	8008052 <get_fat>
 80081ee:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80081f0:	2801      	cmp	r0, #1
 80081f2:	d946      	bls.n	8008282 <create_chain+0xb2>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80081f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081f8:	d048      	beq.n	800828c <create_chain+0xbc>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4282      	cmp	r2, r0
 80081fe:	d845      	bhi.n	800828c <create_chain+0xbc>
		scl = clst;
 8008200:	4645      	mov	r5, r8
 8008202:	e000      	b.n	8008206 <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008204:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 8008206:	462c      	mov	r4, r5
 8008208:	e00c      	b.n	8008224 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800820a:	4621      	mov	r1, r4
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff ff20 	bl	8008052 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8008212:	4603      	mov	r3, r0
 8008214:	b170      	cbz	r0, 8008234 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008216:	2801      	cmp	r0, #1
 8008218:	d038      	beq.n	800828c <create_chain+0xbc>
 800821a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800821e:	d035      	beq.n	800828c <create_chain+0xbc>
			if (ncl == scl) return 0;		/* No free cluster */
 8008220:	42ac      	cmp	r4, r5
 8008222:	d032      	beq.n	800828a <create_chain+0xba>
			ncl++;							/* Next cluster */
 8008224:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	42a3      	cmp	r3, r4
 800822a:	d8ee      	bhi.n	800820a <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 800822c:	2d01      	cmp	r5, #1
 800822e:	d92a      	bls.n	8008286 <create_chain+0xb6>
				ncl = 2;
 8008230:	2402      	movs	r4, #2
 8008232:	e7ea      	b.n	800820a <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	4621      	mov	r1, r4
 800823a:	4638      	mov	r0, r7
 800823c:	f7ff fe66 	bl	8007f0c <put_fat>
		if (res == FR_OK && clst != 0) {
 8008240:	4603      	mov	r3, r0
 8008242:	b910      	cbnz	r0, 800824a <create_chain+0x7a>
 8008244:	f1b8 0f00 	cmp.w	r8, #0
 8008248:	d10e      	bne.n	8008268 <create_chain+0x98>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800824a:	b9a3      	cbnz	r3, 8008276 <create_chain+0xa6>
		fs->last_clst = ncl;
 800824c:	60fc      	str	r4, [r7, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	3b02      	subs	r3, #2
 8008254:	429a      	cmp	r2, r3
 8008256:	d801      	bhi.n	800825c <create_chain+0x8c>
 8008258:	3a01      	subs	r2, #1
 800825a:	613a      	str	r2, [r7, #16]
		fs->fsi_flag |= 1;
 800825c:	793b      	ldrb	r3, [r7, #4]
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	713b      	strb	r3, [r7, #4]
 8008264:	4623      	mov	r3, r4
 8008266:	e011      	b.n	800828c <create_chain+0xbc>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008268:	4622      	mov	r2, r4
 800826a:	4641      	mov	r1, r8
 800826c:	4638      	mov	r0, r7
 800826e:	f7ff fe4d 	bl	8007f0c <put_fat>
 8008272:	4603      	mov	r3, r0
 8008274:	e7e9      	b.n	800824a <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008276:	2b01      	cmp	r3, #1
 8008278:	bf14      	ite	ne
 800827a:	2301      	movne	r3, #1
 800827c:	f04f 33ff 	moveq.w	r3, #4294967295
 8008280:	e004      	b.n	800828c <create_chain+0xbc>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008282:	2301      	movs	r3, #1
 8008284:	e002      	b.n	800828c <create_chain+0xbc>
				if (ncl > scl) return 0;	/* No free cluster */
 8008286:	2300      	movs	r3, #0
 8008288:	e000      	b.n	800828c <create_chain+0xbc>
			if (ncl == scl) return 0;		/* No free cluster */
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008292 <remove_chain>:
{
 8008292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8008298:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800829a:	2901      	cmp	r1, #1
 800829c:	d931      	bls.n	8008302 <remove_chain+0x70>
 800829e:	4606      	mov	r6, r0
 80082a0:	4611      	mov	r1, r2
 80082a2:	696b      	ldr	r3, [r5, #20]
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	d92f      	bls.n	8008308 <remove_chain+0x76>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80082a8:	b90a      	cbnz	r2, 80082ae <remove_chain+0x1c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80082aa:	2700      	movs	r7, #0
 80082ac:	e00a      	b.n	80082c4 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80082ae:	f04f 32ff 	mov.w	r2, #4294967295
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7ff fe2a 	bl	8007f0c <put_fat>
		if (res != FR_OK) return res;
 80082b8:	4684      	mov	ip, r0
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d0f5      	beq.n	80082aa <remove_chain+0x18>
 80082be:	e025      	b.n	800830c <remove_chain+0x7a>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80082c0:	42a2      	cmp	r2, r4
 80082c2:	d923      	bls.n	800830c <remove_chain+0x7a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80082c4:	46a0      	mov	r8, r4
 80082c6:	4621      	mov	r1, r4
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff fec2 	bl	8008052 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80082ce:	4604      	mov	r4, r0
 80082d0:	b1f8      	cbz	r0, 8008312 <remove_chain+0x80>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80082d2:	2801      	cmp	r0, #1
 80082d4:	d020      	beq.n	8008318 <remove_chain+0x86>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80082d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082da:	d020      	beq.n	800831e <remove_chain+0x8c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80082dc:	463a      	mov	r2, r7
 80082de:	4641      	mov	r1, r8
 80082e0:	4628      	mov	r0, r5
 80082e2:	f7ff fe13 	bl	8007f0c <put_fat>
			if (res != FR_OK) return res;
 80082e6:	4684      	mov	ip, r0
 80082e8:	b980      	cbnz	r0, 800830c <remove_chain+0x7a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80082ea:	692b      	ldr	r3, [r5, #16]
 80082ec:	696a      	ldr	r2, [r5, #20]
 80082ee:	1e91      	subs	r1, r2, #2
 80082f0:	428b      	cmp	r3, r1
 80082f2:	d2e5      	bcs.n	80082c0 <remove_chain+0x2e>
			fs->free_clst++;
 80082f4:	3301      	adds	r3, #1
 80082f6:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80082f8:	792b      	ldrb	r3, [r5, #4]
 80082fa:	f043 0301 	orr.w	r3, r3, #1
 80082fe:	712b      	strb	r3, [r5, #4]
 8008300:	e7de      	b.n	80082c0 <remove_chain+0x2e>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008302:	f04f 0c02 	mov.w	ip, #2
 8008306:	e001      	b.n	800830c <remove_chain+0x7a>
 8008308:	f04f 0c02 	mov.w	ip, #2
}
 800830c:	4660      	mov	r0, ip
 800830e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FR_OK;
 8008312:	f04f 0c00 	mov.w	ip, #0
 8008316:	e7f9      	b.n	800830c <remove_chain+0x7a>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008318:	f04f 0c02 	mov.w	ip, #2
 800831c:	e7f6      	b.n	800830c <remove_chain+0x7a>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800831e:	f04f 0c01 	mov.w	ip, #1
 8008322:	e7f3      	b.n	800830c <remove_chain+0x7a>

08008324 <dir_next>:
{
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008328:	6945      	ldr	r5, [r0, #20]
 800832a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800832c:	69c3      	ldr	r3, [r0, #28]
 800832e:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 8008332:	d26b      	bcs.n	800840c <dir_next+0xe8>
 8008334:	4604      	mov	r4, r0
 8008336:	460f      	mov	r7, r1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d067      	beq.n	800840c <dir_next+0xe8>
	FATFS *fs = dp->obj.fs;
 800833c:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800833e:	f3c5 0808 	ubfx	r8, r5, #0, #9
 8008342:	f1b8 0f00 	cmp.w	r8, #0
 8008346:	d107      	bne.n	8008358 <dir_next+0x34>
		dp->sect++;				/* Next sector */
 8008348:	3301      	adds	r3, #1
 800834a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800834c:	6981      	ldr	r1, [r0, #24]
 800834e:	b971      	cbnz	r1, 800836e <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008350:	8933      	ldrh	r3, [r6, #8]
 8008352:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8008356:	d906      	bls.n	8008366 <dir_next+0x42>
	dp->dptr = ofs;						/* Current entry */
 8008358:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800835a:	3630      	adds	r6, #48	@ 0x30
 800835c:	4446      	add	r6, r8
 800835e:	6226      	str	r6, [r4, #32]
	return FR_OK;
 8008360:	2000      	movs	r0, #0
}
 8008362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8008366:	2300      	movs	r3, #0
 8008368:	61c3      	str	r3, [r0, #28]
 800836a:	2004      	movs	r0, #4
 800836c:	e7f9      	b.n	8008362 <dir_next+0x3e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800836e:	8973      	ldrh	r3, [r6, #10]
 8008370:	3b01      	subs	r3, #1
 8008372:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8008376:	d1ef      	bne.n	8008358 <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008378:	f7ff fe6b 	bl	8008052 <get_fat>
 800837c:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800837e:	2801      	cmp	r0, #1
 8008380:	d946      	bls.n	8008410 <dir_next+0xec>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008382:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008386:	d045      	beq.n	8008414 <dir_next+0xf0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008388:	6973      	ldr	r3, [r6, #20]
 800838a:	4283      	cmp	r3, r0
 800838c:	d836      	bhi.n	80083fc <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800838e:	b18f      	cbz	r7, 80083b4 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008390:	69a1      	ldr	r1, [r4, #24]
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff ff1c 	bl	80081d0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008398:	4682      	mov	sl, r0
 800839a:	2800      	cmp	r0, #0
 800839c:	d03c      	beq.n	8008418 <dir_next+0xf4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800839e:	2801      	cmp	r0, #1
 80083a0:	d03c      	beq.n	800841c <dir_next+0xf8>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083a6:	d03b      	beq.n	8008420 <dir_next+0xfc>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff fd24 	bl	8007df6 <sync_window>
 80083ae:	b128      	cbz	r0, 80083bc <dir_next+0x98>
 80083b0:	2001      	movs	r0, #1
 80083b2:	e7d6      	b.n	8008362 <dir_next+0x3e>
						dp->sect = 0; return FR_NO_FILE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61e3      	str	r3, [r4, #28]
 80083b8:	2004      	movs	r0, #4
 80083ba:	e7d2      	b.n	8008362 <dir_next+0x3e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80083bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c0:	2100      	movs	r1, #0
 80083c2:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 80083c6:	f7ff fbca 	bl	8007b5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083ca:	4651      	mov	r1, sl
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff fca7 	bl	8007d20 <clust2sect>
 80083d2:	62f0      	str	r0, [r6, #44]	@ 0x2c
 80083d4:	8973      	ldrh	r3, [r6, #10]
 80083d6:	b16b      	cbz	r3, 80083f4 <dir_next+0xd0>
						fs->wflag = 1;
 80083d8:	2701      	movs	r7, #1
 80083da:	70f7      	strb	r7, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff fd0a 	bl	8007df6 <sync_window>
 80083e2:	b9f8      	cbnz	r0, 8008424 <dir_next+0x100>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083e4:	f109 0901 	add.w	r9, r9, #1
 80083e8:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80083ea:	3301      	adds	r3, #1
 80083ec:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80083ee:	8973      	ldrh	r3, [r6, #10]
 80083f0:	454b      	cmp	r3, r9
 80083f2:	d8f2      	bhi.n	80083da <dir_next+0xb6>
					fs->winsect -= n;							/* Restore window offset */
 80083f4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80083f6:	eba3 0309 	sub.w	r3, r3, r9
 80083fa:	62f3      	str	r3, [r6, #44]	@ 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80083fc:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8008400:	4651      	mov	r1, sl
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff fc8c 	bl	8007d20 <clust2sect>
 8008408:	61e0      	str	r0, [r4, #28]
 800840a:	e7a5      	b.n	8008358 <dir_next+0x34>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800840c:	2004      	movs	r0, #4
 800840e:	e7a8      	b.n	8008362 <dir_next+0x3e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008410:	2002      	movs	r0, #2
 8008412:	e7a6      	b.n	8008362 <dir_next+0x3e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008414:	2001      	movs	r0, #1
 8008416:	e7a4      	b.n	8008362 <dir_next+0x3e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008418:	2007      	movs	r0, #7
 800841a:	e7a2      	b.n	8008362 <dir_next+0x3e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800841c:	2002      	movs	r0, #2
 800841e:	e7a0      	b.n	8008362 <dir_next+0x3e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008420:	2001      	movs	r0, #1
 8008422:	e79e      	b.n	8008362 <dir_next+0x3e>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008424:	2001      	movs	r0, #1
 8008426:	e79c      	b.n	8008362 <dir_next+0x3e>

08008428 <dir_register>:
{
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800842c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800842e:	2100      	movs	r1, #0
 8008430:	f7ff fe77 	bl	8008122 <dir_sdi>
	if (res == FR_OK) {
 8008434:	4605      	mov	r5, r0
 8008436:	bb38      	cbnz	r0, 8008488 <dir_register+0x60>
			res = dir_next(dp, 1);
 8008438:	2701      	movs	r7, #1
 800843a:	e005      	b.n	8008448 <dir_register+0x20>
 800843c:	4639      	mov	r1, r7
 800843e:	4620      	mov	r0, r4
 8008440:	f7ff ff70 	bl	8008324 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008444:	4605      	mov	r5, r0
 8008446:	b9f8      	cbnz	r0, 8008488 <dir_register+0x60>
			res = move_window(fs, dp->sect);
 8008448:	69e1      	ldr	r1, [r4, #28]
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff fd00 	bl	8007e50 <move_window>
			if (res != FR_OK) break;
 8008450:	4605      	mov	r5, r0
 8008452:	b9c8      	cbnz	r0, 8008488 <dir_register+0x60>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008454:	6a23      	ldr	r3, [r4, #32]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2be5      	cmp	r3, #229	@ 0xe5
 800845a:	d001      	beq.n	8008460 <dir_register+0x38>
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1ed      	bne.n	800843c <dir_register+0x14>
		res = move_window(fs, dp->sect);
 8008460:	69e1      	ldr	r1, [r4, #28]
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff fcf4 	bl	8007e50 <move_window>
		if (res == FR_OK) {
 8008468:	4605      	mov	r5, r0
 800846a:	b988      	cbnz	r0, 8008490 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800846c:	2220      	movs	r2, #32
 800846e:	2100      	movs	r1, #0
 8008470:	6a20      	ldr	r0, [r4, #32]
 8008472:	f7ff fb74 	bl	8007b5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008476:	220b      	movs	r2, #11
 8008478:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 800847c:	6a20      	ldr	r0, [r4, #32]
 800847e:	f7ff fb64 	bl	8007b4a <mem_cpy>
			fs->wflag = 1;
 8008482:	2301      	movs	r3, #1
 8008484:	70f3      	strb	r3, [r6, #3]
 8008486:	e003      	b.n	8008490 <dir_register+0x68>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008488:	2d04      	cmp	r5, #4
 800848a:	d003      	beq.n	8008494 <dir_register+0x6c>
	if (res == FR_OK) {
 800848c:	2d00      	cmp	r5, #0
 800848e:	d0e7      	beq.n	8008460 <dir_register+0x38>
}
 8008490:	4628      	mov	r0, r5
 8008492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008494:	2507      	movs	r5, #7
 8008496:	e7fb      	b.n	8008490 <dir_register+0x68>

08008498 <check_fs>:
{
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800849c:	2300      	movs	r3, #0
 800849e:	70c3      	strb	r3, [r0, #3]
 80084a0:	f04f 33ff 	mov.w	r3, #4294967295
 80084a4:	62c3      	str	r3, [r0, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80084a6:	f7ff fcd3 	bl	8007e50 <move_window>
 80084aa:	bb48      	cbnz	r0, 8008500 <check_fs+0x68>
 80084ac:	4605      	mov	r5, r0
	rv = rv << 8 | ptr[0];
 80084ae:	f894 222f 	ldrb.w	r2, [r4, #559]	@ 0x22f
 80084b2:	f894 322e 	ldrb.w	r3, [r4, #558]	@ 0x22e
 80084b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80084ba:	b21b      	sxth	r3, r3
 80084bc:	4a13      	ldr	r2, [pc, #76]	@ (800850c <check_fs+0x74>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d120      	bne.n	8008504 <check_fs+0x6c>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80084c2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80084c6:	2be9      	cmp	r3, #233	@ 0xe9
 80084c8:	d007      	beq.n	80084da <check_fs+0x42>
 80084ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80084cc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80084d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008510 <check_fs+0x78>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d001      	beq.n	80084da <check_fs+0x42>
	return 2;
 80084d6:	2502      	movs	r5, #2
 80084d8:	e015      	b.n	8008506 <check_fs+0x6e>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80084da:	f104 0066 	add.w	r0, r4, #102	@ 0x66
 80084de:	f7ff fb21 	bl	8007b24 <ld_dword>
 80084e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80084e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <check_fs+0x7c>)
 80084e8:	4298      	cmp	r0, r3
 80084ea:	d00c      	beq.n	8008506 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80084ec:	f104 0082 	add.w	r0, r4, #130	@ 0x82
 80084f0:	f7ff fb18 	bl	8007b24 <ld_dword>
 80084f4:	4d08      	ldr	r5, [pc, #32]	@ (8008518 <check_fs+0x80>)
 80084f6:	1b45      	subs	r5, r0, r5
 80084f8:	bf18      	it	ne
 80084fa:	2501      	movne	r5, #1
 80084fc:	006d      	lsls	r5, r5, #1
 80084fe:	e002      	b.n	8008506 <check_fs+0x6e>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008500:	2504      	movs	r5, #4
 8008502:	e000      	b.n	8008506 <check_fs+0x6e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008504:	2503      	movs	r5, #3
}
 8008506:	4628      	mov	r0, r5
 8008508:	bd38      	pop	{r3, r4, r5, pc}
 800850a:	bf00      	nop
 800850c:	ffffaa55 	.word	0xffffaa55
 8008510:	009000eb 	.word	0x009000eb
 8008514:	00544146 	.word	0x00544146
 8008518:	33544146 	.word	0x33544146

0800851c <find_volume>:
{
 800851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	b085      	sub	sp, #20
 8008522:	460e      	mov	r6, r1
 8008524:	4615      	mov	r5, r2
	*rfs = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800852a:	f7ff fc19 	bl	8007d60 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800852e:	1e07      	subs	r7, r0, #0
 8008530:	f2c0 810a 	blt.w	8008748 <find_volume+0x22c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008534:	4bb0      	ldr	r3, [pc, #704]	@ (80087f8 <find_volume+0x2dc>)
 8008536:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800853a:	2c00      	cmp	r4, #0
 800853c:	f000 8109 	beq.w	8008752 <find_volume+0x236>
	*rfs = fs;							/* Return pointer to the file system object */
 8008540:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008542:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008546:	7823      	ldrb	r3, [r4, #0]
 8008548:	b16b      	cbz	r3, 8008566 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800854a:	7860      	ldrb	r0, [r4, #1]
 800854c:	f7ff fa9e 	bl	8007a8c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008550:	f010 0f01 	tst.w	r0, #1
 8008554:	d107      	bne.n	8008566 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008556:	2d00      	cmp	r5, #0
 8008558:	f000 80f7 	beq.w	800874a <find_volume+0x22e>
				return FR_WRITE_PROTECTED;
 800855c:	f010 0504 	ands.w	r5, r0, #4
 8008560:	bf18      	it	ne
 8008562:	250a      	movne	r5, #10
 8008564:	e0f1      	b.n	800874a <find_volume+0x22e>
	fs->fs_type = 0;					/* Clear the file system object */
 8008566:	2300      	movs	r3, #0
 8008568:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800856a:	b2f8      	uxtb	r0, r7
 800856c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800856e:	f7ff fa99 	bl	8007aa4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008572:	f010 0601 	ands.w	r6, r0, #1
 8008576:	f040 80ee 	bne.w	8008756 <find_volume+0x23a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800857a:	b11d      	cbz	r5, 8008584 <find_volume+0x68>
 800857c:	f010 0f04 	tst.w	r0, #4
 8008580:	f040 80eb 	bne.w	800875a <find_volume+0x23e>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008584:	2100      	movs	r1, #0
 8008586:	4620      	mov	r0, r4
 8008588:	f7ff ff86 	bl	8008498 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800858c:	2802      	cmp	r0, #2
 800858e:	d07c      	beq.n	800868a <find_volume+0x16e>
	bsect = 0;
 8008590:	2500      	movs	r5, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008592:	2804      	cmp	r0, #4
 8008594:	f000 80e3 	beq.w	800875e <find_volume+0x242>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008598:	2801      	cmp	r0, #1
 800859a:	f200 80e2 	bhi.w	8008762 <find_volume+0x246>
	rv = rv << 8 | ptr[0];
 800859e:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
 80085a2:	f894 303b 	ldrb.w	r3, [r4, #59]	@ 0x3b
 80085a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80085aa:	b21b      	sxth	r3, r3
 80085ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085b0:	f040 80d9 	bne.w	8008766 <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 80085b4:	f894 2047 	ldrb.w	r2, [r4, #71]	@ 0x47
 80085b8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80085bc:	ea53 2802 	orrs.w	r8, r3, r2, lsl #8
 80085c0:	d104      	bne.n	80085cc <find_volume+0xb0>
 80085c2:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80085c6:	f7ff faad 	bl	8007b24 <ld_dword>
 80085ca:	4680      	mov	r8, r0
		fs->fsize = fasize;
 80085cc:	f8c4 8018 	str.w	r8, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80085d0:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 80085d4:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80085d8:	f109 33ff 	add.w	r3, r9, #4294967295
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b01      	cmp	r3, #1
 80085e0:	f200 80c3 	bhi.w	800876a <find_volume+0x24e>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80085e4:	f894 703d 	ldrb.w	r7, [r4, #61]	@ 0x3d
 80085e8:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80085ea:	2f00      	cmp	r7, #0
 80085ec:	f000 80bf 	beq.w	800876e <find_volume+0x252>
 80085f0:	1e7b      	subs	r3, r7, #1
 80085f2:	423b      	tst	r3, r7
 80085f4:	f040 80bd 	bne.w	8008772 <find_volume+0x256>
	rv = rv << 8 | ptr[0];
 80085f8:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80085fc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008600:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008604:	fa0f fb83 	sxth.w	fp, r3
 8008608:	469a      	mov	sl, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800860a:	8123      	strh	r3, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800860c:	f013 0f0f 	tst.w	r3, #15
 8008610:	f040 80b1 	bne.w	8008776 <find_volume+0x25a>
	rv = rv << 8 | ptr[0];
 8008614:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008618:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800861c:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8008620:	d103      	bne.n	800862a <find_volume+0x10e>
 8008622:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008626:	f7ff fa7d 	bl	8007b24 <ld_dword>
	rv = rv << 8 | ptr[0];
 800862a:	f894 203f 	ldrb.w	r2, [r4, #63]	@ 0x3f
 800862e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008632:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8008636:	f000 80a0 	beq.w	800877a <find_volume+0x25e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800863a:	fb08 f909 	mul.w	r9, r8, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800863e:	eb03 121a 	add.w	r2, r3, sl, lsr #4
 8008642:	444a      	add	r2, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008644:	4290      	cmp	r0, r2
 8008646:	f0c0 809a 	bcc.w	800877e <find_volume+0x262>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800864a:	1a80      	subs	r0, r0, r2
 800864c:	fbb0 f1f7 	udiv	r1, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008650:	42b8      	cmp	r0, r7
 8008652:	f0c0 8096 	bcc.w	8008782 <find_volume+0x266>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008656:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 800865a:	4281      	cmp	r1, r0
 800865c:	f200 809d 	bhi.w	800879a <find_volume+0x27e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008660:	f640 70f5 	movw	r0, #4085	@ 0xff5
 8008664:	4281      	cmp	r1, r0
 8008666:	f240 80cf 	bls.w	8008808 <find_volume+0x2ec>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800866a:	3102      	adds	r1, #2
 800866c:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800866e:	61e5      	str	r5, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008670:	442b      	add	r3, r5
 8008672:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008674:	442a      	add	r2, r5
 8008676:	62a2      	str	r2, [r4, #40]	@ 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008678:	f1ba 0f00 	cmp.w	sl, #0
 800867c:	f000 8089 	beq.w	8008792 <find_volume+0x276>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008680:	eb03 0209 	add.w	r2, r3, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008684:	004b      	lsls	r3, r1, #1
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008686:	2102      	movs	r1, #2
 8008688:	e0d1      	b.n	800882e <find_volume+0x312>
 800868a:	466f      	mov	r7, sp
 800868c:	f504 75fb 	add.w	r5, r4, #502	@ 0x1f6
 8008690:	f204 2936 	addw	r9, r4, #566	@ 0x236
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008694:	46b8      	mov	r8, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008696:	f04f 0a00 	mov.w	sl, #0
 800869a:	e005      	b.n	80086a8 <find_volume+0x18c>
 800869c:	4650      	mov	r0, sl
 800869e:	f848 0b04 	str.w	r0, [r8], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80086a2:	3510      	adds	r5, #16
 80086a4:	454d      	cmp	r5, r9
 80086a6:	d007      	beq.n	80086b8 <find_volume+0x19c>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80086a8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0f5      	beq.n	800869c <find_volume+0x180>
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7ff fa37 	bl	8007b24 <ld_dword>
 80086b6:	e7f2      	b.n	800869e <find_volume+0x182>
 80086b8:	f107 0810 	add.w	r8, r7, #16
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086bc:	f04f 0903 	mov.w	r9, #3
 80086c0:	e009      	b.n	80086d6 <find_volume+0x1ba>
 80086c2:	4629      	mov	r1, r5
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7ff fee7 	bl	8008498 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086ca:	2801      	cmp	r0, #1
 80086cc:	f240 80c7 	bls.w	800885e <find_volume+0x342>
 80086d0:	45b8      	cmp	r8, r7
 80086d2:	f43f af5e 	beq.w	8008592 <find_volume+0x76>
			bsect = br[i];
 80086d6:	f857 5b04 	ldr.w	r5, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80086da:	2d00      	cmp	r5, #0
 80086dc:	d1f1      	bne.n	80086c2 <find_volume+0x1a6>
 80086de:	4648      	mov	r0, r9
 80086e0:	e7f6      	b.n	80086d0 <find_volume+0x1b4>
			&& move_window(fs, bsect + 1) == FR_OK)
 80086e2:	1c69      	adds	r1, r5, #1
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff fbb3 	bl	8007e50 <move_window>
 80086ea:	bb58      	cbnz	r0, 8008744 <find_volume+0x228>
			fs->fsi_flag = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 80086f0:	f894 222f 	ldrb.w	r2, [r4, #559]	@ 0x22f
 80086f4:	f894 322e 	ldrb.w	r3, [r4, #558]	@ 0x22e
 80086f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80086fc:	b21b      	sxth	r3, r3
 80086fe:	4a3f      	ldr	r2, [pc, #252]	@ (80087fc <find_volume+0x2e0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d001      	beq.n	8008708 <find_volume+0x1ec>
		fmt = FS_FAT32;
 8008704:	2103      	movs	r1, #3
 8008706:	e09e      	b.n	8008846 <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008708:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800870c:	f7ff fa0a 	bl	8007b24 <ld_dword>
 8008710:	4b3b      	ldr	r3, [pc, #236]	@ (8008800 <find_volume+0x2e4>)
 8008712:	4298      	cmp	r0, r3
 8008714:	d001      	beq.n	800871a <find_volume+0x1fe>
		fmt = FS_FAT32;
 8008716:	2103      	movs	r1, #3
 8008718:	e095      	b.n	8008846 <find_volume+0x32a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800871a:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 800871e:	f7ff fa01 	bl	8007b24 <ld_dword>
 8008722:	4b38      	ldr	r3, [pc, #224]	@ (8008804 <find_volume+0x2e8>)
 8008724:	4298      	cmp	r0, r3
 8008726:	d001      	beq.n	800872c <find_volume+0x210>
		fmt = FS_FAT32;
 8008728:	2103      	movs	r1, #3
 800872a:	e08c      	b.n	8008846 <find_volume+0x32a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800872c:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8008730:	f7ff f9f8 	bl	8007b24 <ld_dword>
 8008734:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008736:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800873a:	f7ff f9f3 	bl	8007b24 <ld_dword>
 800873e:	60e0      	str	r0, [r4, #12]
		fmt = FS_FAT32;
 8008740:	2103      	movs	r1, #3
 8008742:	e080      	b.n	8008846 <find_volume+0x32a>
 8008744:	2103      	movs	r1, #3
 8008746:	e07e      	b.n	8008846 <find_volume+0x32a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008748:	250b      	movs	r5, #11
}
 800874a:	4628      	mov	r0, r5
 800874c:	b005      	add	sp, #20
 800874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008752:	250c      	movs	r5, #12
 8008754:	e7f9      	b.n	800874a <find_volume+0x22e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008756:	2503      	movs	r5, #3
 8008758:	e7f7      	b.n	800874a <find_volume+0x22e>
		return FR_WRITE_PROTECTED;
 800875a:	250a      	movs	r5, #10
 800875c:	e7f5      	b.n	800874a <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800875e:	2501      	movs	r5, #1
 8008760:	e7f3      	b.n	800874a <find_volume+0x22e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008762:	250d      	movs	r5, #13
 8008764:	e7f1      	b.n	800874a <find_volume+0x22e>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008766:	250d      	movs	r5, #13
 8008768:	e7ef      	b.n	800874a <find_volume+0x22e>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800876a:	250d      	movs	r5, #13
 800876c:	e7ed      	b.n	800874a <find_volume+0x22e>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800876e:	250d      	movs	r5, #13
 8008770:	e7eb      	b.n	800874a <find_volume+0x22e>
 8008772:	250d      	movs	r5, #13
 8008774:	e7e9      	b.n	800874a <find_volume+0x22e>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008776:	250d      	movs	r5, #13
 8008778:	e7e7      	b.n	800874a <find_volume+0x22e>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800877a:	250d      	movs	r5, #13
 800877c:	e7e5      	b.n	800874a <find_volume+0x22e>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800877e:	250d      	movs	r5, #13
 8008780:	e7e3      	b.n	800874a <find_volume+0x22e>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008782:	250d      	movs	r5, #13
 8008784:	e7e1      	b.n	800874a <find_volume+0x22e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008786:	250d      	movs	r5, #13
 8008788:	e7df      	b.n	800874a <find_volume+0x22e>
 800878a:	250d      	movs	r5, #13
 800878c:	e7dd      	b.n	800874a <find_volume+0x22e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800878e:	250d      	movs	r5, #13
 8008790:	e7db      	b.n	800874a <find_volume+0x22e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008792:	250d      	movs	r5, #13
 8008794:	e7d9      	b.n	800874a <find_volume+0x22e>
 8008796:	250d      	movs	r5, #13
 8008798:	e7d7      	b.n	800874a <find_volume+0x22e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800879a:	1c8f      	adds	r7, r1, #2
 800879c:	6167      	str	r7, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800879e:	61e5      	str	r5, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80087a0:	442b      	add	r3, r5
 80087a2:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80087a4:	442a      	add	r2, r5
 80087a6:	62a2      	str	r2, [r4, #40]	@ 0x28
	rv = rv << 8 | ptr[0];
 80087a8:	f894 205b 	ldrb.w	r2, [r4, #91]	@ 0x5b
 80087ac:	f894 305a 	ldrb.w	r3, [r4, #90]	@ 0x5a
 80087b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80087b4:	fa1f fb8b 	uxth.w	fp, fp
 80087b8:	ea5b 0b03 	orrs.w	fp, fp, r3
 80087bc:	d1e7      	bne.n	800878e <find_volume+0x272>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80087be:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80087c2:	f7ff f9af 	bl	8007b24 <ld_dword>
 80087c6:	6260      	str	r0, [r4, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80087c8:	00bb      	lsls	r3, r7, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80087ca:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80087ce:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 80087d2:	d3d8      	bcc.n	8008786 <find_volume+0x26a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80087d4:	f04f 33ff 	mov.w	r3, #4294967295
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 80087dc:	2380      	movs	r3, #128	@ 0x80
 80087de:	7123      	strb	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 80087e0:	f894 2061 	ldrb.w	r2, [r4, #97]	@ 0x61
 80087e4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80087e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80087ec:	b21b      	sxth	r3, r3
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	f43f af77 	beq.w	80086e2 <find_volume+0x1c6>
		fmt = FS_FAT32;
 80087f4:	2103      	movs	r1, #3
 80087f6:	e026      	b.n	8008846 <find_volume+0x32a>
 80087f8:	2408a068 	.word	0x2408a068
 80087fc:	ffffaa55 	.word	0xffffaa55
 8008800:	41615252 	.word	0x41615252
 8008804:	61417272 	.word	0x61417272
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008808:	3102      	adds	r1, #2
 800880a:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800880c:	61e5      	str	r5, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800880e:	442b      	add	r3, r5
 8008810:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008812:	442a      	add	r2, r5
 8008814:	62a2      	str	r2, [r4, #40]	@ 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008816:	f1ba 0f00 	cmp.w	sl, #0
 800881a:	d0bc      	beq.n	8008796 <find_volume+0x27a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800881c:	eb09 0203 	add.w	r2, r9, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008820:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8008824:	f001 0101 	and.w	r1, r1, #1
 8008828:	eb01 0353 	add.w	r3, r1, r3, lsr #1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800882c:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800882e:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008830:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008834:	ebb8 2f53 	cmp.w	r8, r3, lsr #9
 8008838:	d3a7      	bcc.n	800878a <find_volume+0x26e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	6123      	str	r3, [r4, #16]
 8008840:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8008842:	2380      	movs	r3, #128	@ 0x80
 8008844:	7123      	strb	r3, [r4, #4]
	fs->fs_type = fmt;		/* FAT sub-type */
 8008846:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008848:	4a07      	ldr	r2, [pc, #28]	@ (8008868 <find_volume+0x34c>)
 800884a:	8813      	ldrh	r3, [r2, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	b29b      	uxth	r3, r3
 8008850:	8013      	strh	r3, [r2, #0]
 8008852:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8008854:	4620      	mov	r0, r4
 8008856:	f7ff fa4f 	bl	8007cf8 <clear_lock>
	return FR_OK;
 800885a:	4635      	mov	r5, r6
 800885c:	e775      	b.n	800874a <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800885e:	2804      	cmp	r0, #4
 8008860:	f47f ae9d 	bne.w	800859e <find_volume+0x82>
 8008864:	2501      	movs	r5, #1
 8008866:	e770      	b.n	800874a <find_volume+0x22e>
 8008868:	2408a064 	.word	0x2408a064

0800886c <ld_clust>:
{
 800886c:	4602      	mov	r2, r0
	rv = rv << 8 | ptr[0];
 800886e:	7ec8      	ldrb	r0, [r1, #27]
 8008870:	7e8b      	ldrb	r3, [r1, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8008872:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8008876:	7813      	ldrb	r3, [r2, #0]
 8008878:	2b03      	cmp	r3, #3
 800887a:	d000      	beq.n	800887e <ld_clust+0x12>
}
 800887c:	4770      	bx	lr
	rv = rv << 8 | ptr[0];
 800887e:	7d4a      	ldrb	r2, [r1, #21]
 8008880:	7d0b      	ldrb	r3, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008882:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008886:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	return cl;
 800888a:	e7f7      	b.n	800887c <ld_clust+0x10>

0800888c <follow_path>:
{
 800888c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008890:	b083      	sub	sp, #12
 8008892:	4604      	mov	r4, r0
 8008894:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 8008896:	f8d0 a000 	ldr.w	sl, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800889a:	780b      	ldrb	r3, [r1, #0]
 800889c:	2b2f      	cmp	r3, #47	@ 0x2f
 800889e:	d001      	beq.n	80088a4 <follow_path+0x18>
 80088a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80088a2:	d105      	bne.n	80088b0 <follow_path+0x24>
 80088a4:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 80088a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80088aa:	d0fb      	beq.n	80088a4 <follow_path+0x18>
 80088ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80088ae:	d0f9      	beq.n	80088a4 <follow_path+0x18>
		obj->sclust = 0;					/* Start from root directory */
 80088b0:	2300      	movs	r3, #0
 80088b2:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80088b4:	f899 3000 	ldrb.w	r3, [r9]
 80088b8:	2b1f      	cmp	r3, #31
 80088ba:	d902      	bls.n	80088c2 <follow_path+0x36>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80088bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 8008a70 <follow_path+0x1e4>
 80088c0:	e0bb      	b.n	8008a3a <follow_path+0x1ae>
		dp->fn[NSFLAG] = NS_NONAME;
 80088c2:	2380      	movs	r3, #128	@ 0x80
 80088c4:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80088c8:	2100      	movs	r1, #0
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fc29 	bl	8008122 <dir_sdi>
 80088d0:	4683      	mov	fp, r0
}
 80088d2:	4658      	mov	r0, fp
 80088d4:	b003      	add	sp, #12
 80088d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80088da:	eb09 0106 	add.w	r1, r9, r6
 80088de:	f819 7006 	ldrb.w	r7, [r9, r6]
 80088e2:	2f2f      	cmp	r7, #47	@ 0x2f
 80088e4:	d001      	beq.n	80088ea <follow_path+0x5e>
 80088e6:	2f5c      	cmp	r7, #92	@ 0x5c
 80088e8:	d109      	bne.n	80088fe <follow_path+0x72>
 80088ea:	460e      	mov	r6, r1
 80088ec:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 80088f0:	2f2f      	cmp	r7, #47	@ 0x2f
 80088f2:	d0fa      	beq.n	80088ea <follow_path+0x5e>
 80088f4:	2f5c      	cmp	r7, #92	@ 0x5c
 80088f6:	d0f8      	beq.n	80088ea <follow_path+0x5e>
 80088f8:	f1c2 0201 	rsb	r2, r2, #1
 80088fc:	4416      	add	r6, r2
	*path = p + si;						/* Return pointer to the next segment */
 80088fe:	44b1      	add	r9, r6
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008900:	2800      	cmp	r0, #0
 8008902:	f000 8083 	beq.w	8008a0c <follow_path+0x180>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008906:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800890a:	2ae5      	cmp	r2, #229	@ 0xe5
 800890c:	d042      	beq.n	8008994 <follow_path+0x108>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800890e:	2b20      	cmp	r3, #32
 8008910:	bf8c      	ite	hi
 8008912:	2300      	movhi	r3, #0
 8008914:	2301      	movls	r3, #1
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	FATFS *fs = dp->obj.fs;
 800891c:	6826      	ldr	r6, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800891e:	2100      	movs	r1, #0
 8008920:	4620      	mov	r0, r4
 8008922:	f7ff fbfe 	bl	8008122 <dir_sdi>
	if (res != FR_OK) return res;
 8008926:	4683      	mov	fp, r0
 8008928:	2800      	cmp	r0, #0
 800892a:	d163      	bne.n	80089f4 <follow_path+0x168>
		res = dir_next(dp, 0);	/* Next entry */
 800892c:	2700      	movs	r7, #0
 800892e:	9501      	str	r5, [sp, #4]
 8008930:	e03c      	b.n	80089ac <follow_path+0x120>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008932:	f1bc 0f0b 	cmp.w	ip, #11
 8008936:	d069      	beq.n	8008a0c <follow_path+0x180>
 8008938:	2b2e      	cmp	r3, #46	@ 0x2e
 800893a:	d167      	bne.n	8008a0c <follow_path+0x180>
			i = 8; ni = 11;				/* Goto extension */
 800893c:	2008      	movs	r0, #8
 800893e:	46f4      	mov	ip, lr
 8008940:	e00e      	b.n	8008960 <follow_path+0xd4>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008942:	3b80      	subs	r3, #128	@ 0x80
 8008944:	f818 3003 	ldrb.w	r3, [r8, r3]
 8008948:	e01a      	b.n	8008980 <follow_path+0xf4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800894a:	2900      	cmp	r1, #0
 800894c:	d15e      	bne.n	8008a0c <follow_path+0x180>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800894e:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8008952:	b2c9      	uxtb	r1, r1
 8008954:	2919      	cmp	r1, #25
 8008956:	d801      	bhi.n	800895c <follow_path+0xd0>
 8008958:	3b20      	subs	r3, #32
 800895a:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800895c:	542b      	strb	r3, [r5, r0]
 800895e:	3001      	adds	r0, #1
		c = (BYTE)p[si++];
 8008960:	3601      	adds	r6, #1
 8008962:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008966:	2b20      	cmp	r3, #32
 8008968:	d9c9      	bls.n	80088fe <follow_path+0x72>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800896a:	2b2f      	cmp	r3, #47	@ 0x2f
 800896c:	d0b5      	beq.n	80088da <follow_path+0x4e>
 800896e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008970:	d0b3      	beq.n	80088da <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008972:	2b2e      	cmp	r3, #46	@ 0x2e
 8008974:	d0dd      	beq.n	8008932 <follow_path+0xa6>
 8008976:	4584      	cmp	ip, r0
 8008978:	d9db      	bls.n	8008932 <follow_path+0xa6>
		if (c >= 0x80) {				/* Extended character? */
 800897a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800897e:	d1e0      	bne.n	8008942 <follow_path+0xb6>
	while (*str && *str != chr) str++;
 8008980:	2b22      	cmp	r3, #34	@ 0x22
 8008982:	d043      	beq.n	8008a0c <follow_path+0x180>
 8008984:	4f39      	ldr	r7, [pc, #228]	@ (8008a6c <follow_path+0x1e0>)
 8008986:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800898a:	2900      	cmp	r1, #0
 800898c:	d0dd      	beq.n	800894a <follow_path+0xbe>
 800898e:	428b      	cmp	r3, r1
 8008990:	d1f9      	bne.n	8008986 <follow_path+0xfa>
 8008992:	e7da      	b.n	800894a <follow_path+0xbe>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008994:	2205      	movs	r2, #5
 8008996:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
 800899a:	e7b8      	b.n	800890e <follow_path+0x82>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800899c:	4288      	cmp	r0, r1
 800899e:	d038      	beq.n	8008a12 <follow_path+0x186>
		res = dir_next(dp, 0);	/* Next entry */
 80089a0:	4639      	mov	r1, r7
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7ff fcbe 	bl	8008324 <dir_next>
	} while (res == FR_OK);
 80089a8:	4683      	mov	fp, r0
 80089aa:	bb18      	cbnz	r0, 80089f4 <follow_path+0x168>
		res = move_window(fs, dp->sect);
 80089ac:	69e1      	ldr	r1, [r4, #28]
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff fa4e 	bl	8007e50 <move_window>
		if (res != FR_OK) break;
 80089b4:	4683      	mov	fp, r0
 80089b6:	b9e8      	cbnz	r0, 80089f4 <follow_path+0x168>
		c = dp->dir[DIR_Name];
 80089b8:	6a25      	ldr	r5, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80089ba:	782b      	ldrb	r3, [r5, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d050      	beq.n	8008a62 <follow_path+0x1d6>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80089c0:	7aeb      	ldrb	r3, [r5, #11]
 80089c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089c6:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80089c8:	f895 b00b 	ldrb.w	fp, [r5, #11]
 80089cc:	f01b 0b08 	ands.w	fp, fp, #8
 80089d0:	d1e6      	bne.n	80089a0 <follow_path+0x114>
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80089d2:	9a01      	ldr	r2, [sp, #4]
 80089d4:	462b      	mov	r3, r5
		r = *d++ - *s++;
 80089d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089da:	f812 1b01 	ldrb.w	r1, [r2], #1
	} while (--cnt && r == 0);
 80089de:	f1c3 0c0b 	rsb	ip, r3, #11
 80089e2:	eb15 0f0c 	cmn.w	r5, ip
 80089e6:	d0d9      	beq.n	800899c <follow_path+0x110>
 80089e8:	4288      	cmp	r0, r1
 80089ea:	d0f4      	beq.n	80089d6 <follow_path+0x14a>
 80089ec:	e7d6      	b.n	800899c <follow_path+0x110>
				res = FR_NO_PATH; break;
 80089ee:	f04f 0b05 	mov.w	fp, #5
 80089f2:	e76e      	b.n	80088d2 <follow_path+0x46>
			ns = dp->fn[NSFLAG];
 80089f4:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 80089f8:	f1bb 0f04 	cmp.w	fp, #4
 80089fc:	f47f af69 	bne.w	80088d2 <follow_path+0x46>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a00:	f013 0f04 	tst.w	r3, #4
 8008a04:	bf08      	it	eq
 8008a06:	f04f 0b05 	moveq.w	fp, #5
 8008a0a:	e762      	b.n	80088d2 <follow_path+0x46>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a0c:	f04f 0b06 	mov.w	fp, #6
 8008a10:	e75f      	b.n	80088d2 <follow_path+0x46>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a12:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8008a16:	f013 0f04 	tst.w	r3, #4
 8008a1a:	f47f af5a 	bne.w	80088d2 <follow_path+0x46>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008a1e:	79a3      	ldrb	r3, [r4, #6]
 8008a20:	f013 0f10 	tst.w	r3, #16
 8008a24:	d0e3      	beq.n	80089ee <follow_path+0x162>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a26:	f10a 0130 	add.w	r1, sl, #48	@ 0x30
 8008a2a:	6963      	ldr	r3, [r4, #20]
 8008a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a30:	4419      	add	r1, r3
 8008a32:	4650      	mov	r0, sl
 8008a34:	f7ff ff1a 	bl	800886c <ld_clust>
 8008a38:	60a0      	str	r0, [r4, #8]
	p = *path; sfn = dp->fn;
 8008a3a:	f104 0524 	add.w	r5, r4, #36	@ 0x24
	mem_set(sfn, ' ', 11);
 8008a3e:	220b      	movs	r2, #11
 8008a40:	2120      	movs	r1, #32
 8008a42:	4628      	mov	r0, r5
 8008a44:	f7ff f88b 	bl	8007b5e <mem_set>
		c = (BYTE)p[si++];
 8008a48:	f899 3000 	ldrb.w	r3, [r9]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008a4c:	2b20      	cmp	r3, #32
 8008a4e:	d9dd      	bls.n	8008a0c <follow_path+0x180>
 8008a50:	464a      	mov	r2, r9
	si = i = 0; ni = 8;
 8008a52:	2000      	movs	r0, #0
 8008a54:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 8008a58:	2601      	movs	r6, #1
			i = 8; ni = 11;				/* Goto extension */
 8008a5a:	f04f 0e0b 	mov.w	lr, #11
 8008a5e:	46cb      	mov	fp, r9
 8008a60:	e783      	b.n	800896a <follow_path+0xde>
			ns = dp->fn[NSFLAG];
 8008a62:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a66:	f04f 0b04 	mov.w	fp, #4
 8008a6a:	e7c5      	b.n	80089f8 <follow_path+0x16c>
 8008a6c:	08009ecc 	.word	0x08009ecc
 8008a70:	08009edc 	.word	0x08009edc

08008a74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	9001      	str	r0, [sp, #4]
 8008a7a:	9100      	str	r1, [sp, #0]
 8008a7c:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a7e:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a80:	a803      	add	r0, sp, #12
 8008a82:	f7ff f96d 	bl	8007d60 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a86:	1e04      	subs	r4, r0, #0
 8008a88:	db18      	blt.n	8008abc <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a8a:	4b11      	ldr	r3, [pc, #68]	@ (8008ad0 <f_mount+0x5c>)
 8008a8c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 8008a90:	b125      	cbz	r5, 8008a9c <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7ff f930 	bl	8007cf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a98:	2300      	movs	r3, #0
 8008a9a:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 8008a9c:	9b01      	ldr	r3, [sp, #4]
 8008a9e:	b18b      	cbz	r3, 8008ac4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad0 <f_mount+0x5c>)
 8008aa6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008aaa:	2e01      	cmp	r6, #1
 8008aac:	d108      	bne.n	8008ac0 <f_mount+0x4c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008aae:	2200      	movs	r2, #0
 8008ab0:	a901      	add	r1, sp, #4
 8008ab2:	4668      	mov	r0, sp
 8008ab4:	f7ff fd32 	bl	800851c <find_volume>
	LEAVE_FF(fs, res);
}
 8008ab8:	b004      	add	sp, #16
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8008abc:	200b      	movs	r0, #11
 8008abe:	e7fb      	b.n	8008ab8 <f_mount+0x44>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e7f9      	b.n	8008ab8 <f_mount+0x44>
	FatFs[vol] = fs;					/* Register new fs object */
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	4b02      	ldr	r3, [pc, #8]	@ (8008ad0 <f_mount+0x5c>)
 8008ac8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008acc:	e7f4      	b.n	8008ab8 <f_mount+0x44>
 8008ace:	bf00      	nop
 8008ad0:	2408a068 	.word	0x2408a068

08008ad4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	b091      	sub	sp, #68	@ 0x44
 8008ada:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f000 8113 	beq.w	8008d08 <f_open+0x234>
 8008ae2:	4614      	mov	r4, r2
 8008ae4:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ae6:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8008aea:	463a      	mov	r2, r7
 8008aec:	a903      	add	r1, sp, #12
 8008aee:	a801      	add	r0, sp, #4
 8008af0:	f7ff fd14 	bl	800851c <find_volume>
	if (res == FR_OK) {
 8008af4:	4605      	mov	r5, r0
 8008af6:	b128      	cbz	r0, 8008b04 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008af8:	2300      	movs	r3, #0
 8008afa:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8008afc:	4628      	mov	r0, r5
 8008afe:	b011      	add	sp, #68	@ 0x44
 8008b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8008b04:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b08:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b0c:	9901      	ldr	r1, [sp, #4]
 8008b0e:	a804      	add	r0, sp, #16
 8008b10:	f7ff febc 	bl	800888c <follow_path>
		if (res == FR_OK) {
 8008b14:	4603      	mov	r3, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f040 80fb 	bne.w	8008d12 <f_open+0x23e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b1c:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f2c0 80fc 	blt.w	8008d1e <f_open+0x24a>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b26:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 8008b2a:	bf14      	ite	ne
 8008b2c:	2101      	movne	r1, #1
 8008b2e:	2100      	moveq	r1, #0
 8008b30:	a804      	add	r0, sp, #16
 8008b32:	f7ff f81b 	bl	8007b6c <chk_lock>
 8008b36:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008b38:	f014 0f1c 	tst.w	r4, #28
 8008b3c:	d115      	bne.n	8008b6a <f_open+0x96>
			if (res == FR_OK) {					/* Following succeeded */
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f040 80dc 	bne.w	8008cfc <f_open+0x228>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008b44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008b48:	f013 0f10 	tst.w	r3, #16
 8008b4c:	f040 80d8 	bne.w	8008d00 <f_open+0x22c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008b50:	f014 0f02 	tst.w	r4, #2
 8008b54:	d003      	beq.n	8008b5e <f_open+0x8a>
 8008b56:	f013 0f01 	tst.w	r3, #1
 8008b5a:	f040 80d3 	bne.w	8008d04 <f_open+0x230>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008b5e:	f014 0f08 	tst.w	r4, #8
 8008b62:	d024      	beq.n	8008bae <f_open+0xda>
				mode |= FA_MODIFIED;
 8008b64:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
 8008b68:	e021      	b.n	8008bae <f_open+0xda>
			if (res != FR_OK) {					/* No file, create new */
 8008b6a:	b950      	cbnz	r0, 8008b82 <f_open+0xae>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008b6c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008b70:	f013 0f11 	tst.w	r3, #17
 8008b74:	f040 80c0 	bne.w	8008cf8 <f_open+0x224>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008b78:	f014 0f04 	tst.w	r4, #4
 8008b7c:	d014      	beq.n	8008ba8 <f_open+0xd4>
 8008b7e:	2508      	movs	r5, #8
 8008b80:	e7ba      	b.n	8008af8 <f_open+0x24>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	f040 80cd 	bne.w	8008d22 <f_open+0x24e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b88:	4b67      	ldr	r3, [pc, #412]	@ (8008d28 <f_open+0x254>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	b123      	cbz	r3, 8008b98 <f_open+0xc4>
 8008b8e:	4b66      	ldr	r3, [pc, #408]	@ (8008d28 <f_open+0x254>)
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	b10b      	cbz	r3, 8008b98 <f_open+0xc4>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b94:	2512      	movs	r5, #18
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b96:	e7af      	b.n	8008af8 <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b98:	a804      	add	r0, sp, #16
 8008b9a:	f7ff fc45 	bl	8008428 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f040 80a8 	bne.w	8008cf4 <f_open+0x220>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008ba4:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008ba8:	f017 0f08 	tst.w	r7, #8
 8008bac:	d110      	bne.n	8008bd0 <f_open+0xfc>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008bae:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8008bb2:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008bb4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008bb6:	62b4      	str	r4, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008bb8:	2f01      	cmp	r7, #1
 8008bba:	bf94      	ite	ls
 8008bbc:	2100      	movls	r1, #0
 8008bbe:	2101      	movhi	r1, #1
 8008bc0:	a804      	add	r0, sp, #16
 8008bc2:	f7ff f819 	bl	8007bf8 <inc_lock>
 8008bc6:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d13c      	bne.n	8008c46 <f_open+0x172>
 8008bcc:	2502      	movs	r5, #2
 8008bce:	e793      	b.n	8008af8 <f_open+0x24>
				dw = GET_FATTIME();
 8008bd0:	f7fe fe72 	bl	80078b8 <get_fattime>
 8008bd4:	4681      	mov	r9, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008bd6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008bd8:	4601      	mov	r1, r0
 8008bda:	f104 000e 	add.w	r0, r4, #14
 8008bde:	f7fe ffac 	bl	8007b3a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008be2:	4649      	mov	r1, r9
 8008be4:	f104 0016 	add.w	r0, r4, #22
 8008be8:	f7fe ffa7 	bl	8007b3a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008bec:	2320      	movs	r3, #32
 8008bee:	72e3      	strb	r3, [r4, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f7ff fe3a 	bl	800886c <ld_clust>
 8008bf8:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	4640      	mov	r0, r8
 8008c00:	f7ff fa1a 	bl	8008038 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c04:	2100      	movs	r1, #0
 8008c06:	f104 001c 	add.w	r0, r4, #28
 8008c0a:	f7fe ff96 	bl	8007b3a <st_dword>
					fs->wflag = 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8008c14:	f1b9 0f00 	cmp.w	r9, #0
 8008c18:	d0a4      	beq.n	8008b64 <f_open+0x90>
						dw = fs->winsect;
 8008c1a:	f8d8 402c 	ldr.w	r4, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4649      	mov	r1, r9
 8008c22:	a804      	add	r0, sp, #16
 8008c24:	f7ff fb35 	bl	8008292 <remove_chain>
						if (res == FR_OK) {
 8008c28:	b108      	cbz	r0, 8008c2e <f_open+0x15a>
						res = remove_chain(&dj.obj, cl, 0);
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	e764      	b.n	8008af8 <f_open+0x24>
							res = move_window(fs, dw);
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4640      	mov	r0, r8
 8008c32:	f7ff f90d 	bl	8007e50 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008c36:	f109 33ff 	add.w	r3, r9, #4294967295
 8008c3a:	f8c8 300c 	str.w	r3, [r8, #12]
		if (res == FR_OK) {
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d090      	beq.n	8008b64 <f_open+0x90>
							res = move_window(fs, dw);
 8008c42:	4605      	mov	r5, r0
 8008c44:	e758      	b.n	8008af8 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008c46:	4621      	mov	r1, r4
 8008c48:	4640      	mov	r0, r8
 8008c4a:	f7ff fe0f 	bl	800886c <ld_clust>
 8008c4e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008c50:	f104 001c 	add.w	r0, r4, #28
 8008c54:	f7fe ff66 	bl	8007b24 <ld_dword>
 8008c58:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008c5e:	f8c6 8000 	str.w	r8, [r6]
			fp->obj.id = fs->id;
 8008c62:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8008c66:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8008c68:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8008c6a:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008c6c:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008c6e:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008c70:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 8008c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c78:	4648      	mov	r0, r9
 8008c7a:	f7fe ff70 	bl	8007b5e <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008c7e:	f017 0f20 	tst.w	r7, #32
 8008c82:	f43f af3b 	beq.w	8008afc <f_open+0x28>
 8008c86:	68f4      	ldr	r4, [r6, #12]
 8008c88:	2c00      	cmp	r4, #0
 8008c8a:	f43f af37 	beq.w	8008afc <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008c8e:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008c90:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8008c94:	025f      	lsls	r7, r3, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008c96:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c98:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
 8008c9c:	d80f      	bhi.n	8008cbe <f_open+0x1ea>
 8008c9e:	460b      	mov	r3, r1
				fp->clust = clst;
 8008ca0:	61f3      	str	r3, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008ca2:	f3c4 0308 	ubfx	r3, r4, #0, #9
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f43f af28 	beq.w	8008afc <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008cac:	4640      	mov	r0, r8
 8008cae:	f7ff f837 	bl	8007d20 <clust2sect>
 8008cb2:	b988      	cbnz	r0, 8008cd8 <f_open+0x204>
						res = FR_INT_ERR;
 8008cb4:	2502      	movs	r5, #2
 8008cb6:	e71f      	b.n	8008af8 <f_open+0x24>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008cb8:	1be4      	subs	r4, r4, r7
 8008cba:	42a7      	cmp	r7, r4
 8008cbc:	d20a      	bcs.n	8008cd4 <f_open+0x200>
					clst = get_fat(&fp->obj, clst);
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff f9c7 	bl	8008052 <get_fat>
 8008cc4:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8008cc6:	2801      	cmp	r0, #1
 8008cc8:	d920      	bls.n	8008d0c <f_open+0x238>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008cca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cce:	d1f3      	bne.n	8008cb8 <f_open+0x1e4>
 8008cd0:	2501      	movs	r5, #1
 8008cd2:	e01c      	b.n	8008d0e <f_open+0x23a>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	e7e3      	b.n	8008ca0 <f_open+0x1cc>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008cd8:	eb00 2254 	add.w	r2, r0, r4, lsr #9
 8008cdc:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008ce6:	f7fe fef3 	bl	8007ad0 <disk_read>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f43f af06 	beq.w	8008afc <f_open+0x28>
 8008cf0:	2501      	movs	r5, #1
 8008cf2:	e701      	b.n	8008af8 <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	e6ff      	b.n	8008af8 <f_open+0x24>
					res = FR_DENIED;
 8008cf8:	2507      	movs	r5, #7
 8008cfa:	e6fd      	b.n	8008af8 <f_open+0x24>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	e6fb      	b.n	8008af8 <f_open+0x24>
					res = FR_NO_FILE;
 8008d00:	2504      	movs	r5, #4
 8008d02:	e6f9      	b.n	8008af8 <f_open+0x24>
						res = FR_DENIED;
 8008d04:	2507      	movs	r5, #7
 8008d06:	e6f7      	b.n	8008af8 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008d08:	2509      	movs	r5, #9
 8008d0a:	e6f7      	b.n	8008afc <f_open+0x28>
					if (clst <= 1) res = FR_INT_ERR;
 8008d0c:	2502      	movs	r5, #2
				fp->clust = clst;
 8008d0e:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d10:	e6f2      	b.n	8008af8 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d12:	f014 0f1c 	tst.w	r4, #28
 8008d16:	f47f af34 	bne.w	8008b82 <f_open+0xae>
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	e6ec      	b.n	8008af8 <f_open+0x24>
				res = FR_INVALID_NAME;
 8008d1e:	2506      	movs	r5, #6
 8008d20:	e6ea      	b.n	8008af8 <f_open+0x24>
 8008d22:	461d      	mov	r5, r3
 8008d24:	e6e8      	b.n	8008af8 <f_open+0x24>
 8008d26:	bf00      	nop
 8008d28:	2408a044 	.word	0x2408a044

08008d2c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	b087      	sub	sp, #28
 8008d32:	4604      	mov	r4, r0
 8008d34:	460f      	mov	r7, r1
 8008d36:	4693      	mov	fp, r2
 8008d38:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008d40:	a905      	add	r1, sp, #20
 8008d42:	f7ff f835 	bl	8007db0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008d46:	4606      	mov	r6, r0
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	f040 80a9 	bne.w	8008ea0 <f_read+0x174>
 8008d4e:	7d66      	ldrb	r6, [r4, #21]
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	f040 80a5 	bne.w	8008ea0 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008d56:	7d23      	ldrb	r3, [r4, #20]
 8008d58:	f013 0901 	ands.w	r9, r3, #1
 8008d5c:	f000 80bf 	beq.w	8008ede <f_read+0x1b2>
	remain = fp->obj.objsize - fp->fptr;
 8008d60:	68e3      	ldr	r3, [r4, #12]
 8008d62:	69a2      	ldr	r2, [r4, #24]
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	459b      	cmp	fp, r3
 8008d68:	bf28      	it	cs
 8008d6a:	469b      	movcs	fp, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8008d6c:	f1bb 0f00 	cmp.w	fp, #0
 8008d70:	f000 8096 	beq.w	8008ea0 <f_read+0x174>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008d74:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d7e:	9603      	str	r6, [sp, #12]
 8008d80:	46ba      	mov	sl, r7
 8008d82:	e055      	b.n	8008e30 <f_read+0x104>
					if (fp->cltbl) {
 8008d84:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008d86:	b11b      	cbz	r3, 8008d90 <f_read+0x64>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7fe ffd5 	bl	8007d38 <clmt_clust>
 8008d8e:	e05f      	b.n	8008e50 <f_read+0x124>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008d90:	69e1      	ldr	r1, [r4, #28]
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7ff f95d 	bl	8008052 <get_fat>
 8008d98:	e05a      	b.n	8008e50 <f_read+0x124>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008d9a:	2602      	movs	r6, #2
 8008d9c:	7566      	strb	r6, [r4, #21]
 8008d9e:	e07f      	b.n	8008ea0 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008da0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008da4:	2301      	movs	r3, #1
 8008da6:	7563      	strb	r3, [r4, #21]
 8008da8:	464e      	mov	r6, r9
 8008daa:	e079      	b.n	8008ea0 <f_read+0x174>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008dac:	2602      	movs	r6, #2
 8008dae:	7566      	strb	r6, [r4, #21]
 8008db0:	e076      	b.n	8008ea0 <f_read+0x174>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008db2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	db01      	blt.n	8008dbe <f_read+0x92>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008dba:	026d      	lsls	r5, r5, #9
				continue;
 8008dbc:	e02c      	b.n	8008e18 <f_read+0xec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008dbe:	6a20      	ldr	r0, [r4, #32]
 8008dc0:	1bc0      	subs	r0, r0, r7
 8008dc2:	42a8      	cmp	r0, r5
 8008dc4:	d2f9      	bcs.n	8008dba <f_read+0x8e>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dca:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8008dce:	eb0a 2040 	add.w	r0, sl, r0, lsl #9
 8008dd2:	f7fe feba 	bl	8007b4a <mem_cpy>
 8008dd6:	e7f0      	b.n	8008dba <f_read+0x8e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008dd8:	6a22      	ldr	r2, [r4, #32]
 8008dda:	42ba      	cmp	r2, r7
 8008ddc:	d00d      	beq.n	8008dfa <f_read+0xce>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008dde:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	db60      	blt.n	8008ea8 <f_read+0x17c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008de6:	2301      	movs	r3, #1
 8008de8:	463a      	mov	r2, r7
 8008dea:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8008dee:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008df2:	f7fe fe6d 	bl	8007ad0 <disk_read>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d169      	bne.n	8008ece <f_read+0x1a2>
			fp->sect = sect;
 8008dfa:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008dfc:	69a1      	ldr	r1, [r4, #24]
 8008dfe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008e02:	f5c1 7500 	rsb	r5, r1, #512	@ 0x200
 8008e06:	455d      	cmp	r5, fp
 8008e08:	bf28      	it	cs
 8008e0a:	465d      	movcs	r5, fp
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	4419      	add	r1, r3
 8008e12:	4650      	mov	r0, sl
 8008e14:	f7fe fe99 	bl	8007b4a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008e18:	44aa      	add	sl, r5
 8008e1a:	69a3      	ldr	r3, [r4, #24]
 8008e1c:	442b      	add	r3, r5
 8008e1e:	61a3      	str	r3, [r4, #24]
 8008e20:	f8d8 3000 	ldr.w	r3, [r8]
 8008e24:	442b      	add	r3, r5
 8008e26:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
 8008e2a:	ebbb 0b05 	subs.w	fp, fp, r5
 8008e2e:	d054      	beq.n	8008eda <f_read+0x1ae>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008e30:	69a1      	ldr	r1, [r4, #24]
 8008e32:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1e0      	bne.n	8008dfc <f_read+0xd0>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008e3a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008e3e:	f8b9 600a 	ldrh.w	r6, [r9, #10]
 8008e42:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8008e44:	ea16 2651 	ands.w	r6, r6, r1, lsr #9
 8008e48:	d108      	bne.n	8008e5c <f_read+0x130>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	d19a      	bne.n	8008d84 <f_read+0x58>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008e4e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008e50:	2801      	cmp	r0, #1
 8008e52:	d9a2      	bls.n	8008d9a <f_read+0x6e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e58:	d0a2      	beq.n	8008da0 <f_read+0x74>
				fp->clust = clst;				/* Update current cluster */
 8008e5a:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008e5c:	69e1      	ldr	r1, [r4, #28]
 8008e5e:	4648      	mov	r0, r9
 8008e60:	f7fe ff5e 	bl	8007d20 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008e64:	4607      	mov	r7, r0
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d0a0      	beq.n	8008dac <f_read+0x80>
			sect += csect;
 8008e6a:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008e6c:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
 8008e70:	d3b2      	bcc.n	8008dd8 <f_read+0xac>
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008e72:	ea4f 255b 	mov.w	r5, fp, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008e76:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8008e7a:	eb06 225b 	add.w	r2, r6, fp, lsr #9
 8008e7e:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8008e80:	bf88      	it	hi
 8008e82:	1b9d      	subhi	r5, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e84:	462b      	mov	r3, r5
 8008e86:	463a      	mov	r2, r7
 8008e88:	4651      	mov	r1, sl
 8008e8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e8e:	f7fe fe1f 	bl	8007ad0 <disk_read>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d08d      	beq.n	8008db2 <f_read+0x86>
 8008e96:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	7563      	strb	r3, [r4, #21]
 8008e9e:	464e      	mov	r6, r9
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	b007      	add	sp, #28
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8008eae:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008eb2:	f7fe fe1b 	bl	8007aec <disk_write>
 8008eb6:	b920      	cbnz	r0, 8008ec2 <f_read+0x196>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008eb8:	7d23      	ldrb	r3, [r4, #20]
 8008eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ebe:	7523      	strb	r3, [r4, #20]
 8008ec0:	e791      	b.n	8008de6 <f_read+0xba>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ec2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	7563      	strb	r3, [r4, #21]
 8008eca:	464e      	mov	r6, r9
 8008ecc:	e7e8      	b.n	8008ea0 <f_read+0x174>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008ece:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	7563      	strb	r3, [r4, #21]
 8008ed6:	464e      	mov	r6, r9
 8008ed8:	e7e2      	b.n	8008ea0 <f_read+0x174>
 8008eda:	9e03      	ldr	r6, [sp, #12]
 8008edc:	e7e0      	b.n	8008ea0 <f_read+0x174>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008ede:	2607      	movs	r6, #7
 8008ee0:	e7de      	b.n	8008ea0 <f_read+0x174>

08008ee2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008ee8:	a901      	add	r1, sp, #4
 8008eea:	f7fe ff61 	bl	8007db0 <validate>
	if (res == FR_OK) {
 8008eee:	b978      	cbnz	r0, 8008f10 <f_sync+0x2e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008ef0:	7d23      	ldrb	r3, [r4, #20]
 8008ef2:	f013 0040 	ands.w	r0, r3, #64	@ 0x40
 8008ef6:	d00b      	beq.n	8008f10 <f_sync+0x2e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008efc:	d10a      	bne.n	8008f14 <f_sync+0x32>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008efe:	f7fe fcdb 	bl	80078b8 <get_fattime>
 8008f02:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f04:	9e01      	ldr	r6, [sp, #4]
 8008f06:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f7fe ffa1 	bl	8007e50 <move_window>
				if (res == FR_OK) {
 8008f0e:	b178      	cbz	r0, 8008f30 <f_sync+0x4e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8008f10:	b003      	add	sp, #12
 8008f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f14:	2301      	movs	r3, #1
 8008f16:	6a22      	ldr	r2, [r4, #32]
 8008f18:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8008f1c:	9801      	ldr	r0, [sp, #4]
 8008f1e:	7840      	ldrb	r0, [r0, #1]
 8008f20:	f7fe fde4 	bl	8007aec <disk_write>
 8008f24:	bb28      	cbnz	r0, 8008f72 <f_sync+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f26:	7d23      	ldrb	r3, [r4, #20]
 8008f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f2c:	7523      	strb	r3, [r4, #20]
 8008f2e:	e7e6      	b.n	8008efe <f_sync+0x1c>
					dir = fp->dir_ptr;
 8008f30:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f32:	7afb      	ldrb	r3, [r7, #11]
 8008f34:	f043 0320 	orr.w	r3, r3, #32
 8008f38:	72fb      	strb	r3, [r7, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f3a:	68a2      	ldr	r2, [r4, #8]
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	6820      	ldr	r0, [r4, #0]
 8008f40:	f7ff f87a 	bl	8008038 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f44:	68e1      	ldr	r1, [r4, #12]
 8008f46:	f107 001c 	add.w	r0, r7, #28
 8008f4a:	f7fe fdf6 	bl	8007b3a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f4e:	4629      	mov	r1, r5
 8008f50:	f107 0016 	add.w	r0, r7, #22
 8008f54:	f7fe fdf1 	bl	8007b3a <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	74bb      	strb	r3, [r7, #18]
	*ptr++ = (BYTE)val;
 8008f5c:	74fb      	strb	r3, [r7, #19]
					fs->wflag = 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	70f3      	strb	r3, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7fe ff8e 	bl	8007e84 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f68:	7d23      	ldrb	r3, [r4, #20]
 8008f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f6e:	7523      	strb	r3, [r4, #20]
 8008f70:	e7ce      	b.n	8008f10 <f_sync+0x2e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f72:	2001      	movs	r0, #1
 8008f74:	e7cc      	b.n	8008f10 <f_sync+0x2e>

08008f76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f76:	b510      	push	{r4, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f7c:	f7ff ffb1 	bl	8008ee2 <f_sync>
	if (res == FR_OK)
 8008f80:	b108      	cbz	r0, 8008f86 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8008f82:	b002      	add	sp, #8
 8008f84:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f86:	a901      	add	r1, sp, #4
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7fe ff11 	bl	8007db0 <validate>
		if (res == FR_OK) {
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1f7      	bne.n	8008f82 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f92:	6920      	ldr	r0, [r4, #16]
 8008f94:	f7fe fe8e 	bl	8007cb4 <dec_lock>
			if (res == FR_OK)
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d1f2      	bne.n	8008f82 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f9c:	6020      	str	r0, [r4, #0]
 8008f9e:	e7f0      	b.n	8008f82 <f_close+0xc>

08008fa0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008faa:	a901      	add	r1, sp, #4
 8008fac:	f7fe ff00 	bl	8007db0 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	b978      	cbnz	r0, 8008fd4 <f_lseek+0x34>
 8008fb4:	7d65      	ldrb	r5, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008fb6:	b96d      	cbnz	r5, 8008fd4 <f_lseek+0x34>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008fb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 8087 	beq.w	80090ce <f_lseek+0x12e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008fc0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008fc4:	d00a      	beq.n	8008fdc <f_lseek+0x3c>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008fc6:	68e3      	ldr	r3, [r4, #12]
 8008fc8:	429e      	cmp	r6, r3
 8008fca:	bf28      	it	cs
 8008fcc:	461e      	movcs	r6, r3
			fp->fptr = ofs;				/* Set file pointer */
 8008fce:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	d13f      	bne.n	8009054 <f_lseek+0xb4>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	b003      	add	sp, #12
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008fdc:	4698      	mov	r8, r3
 8008fde:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008fe2:	f8d4 9008 	ldr.w	r9, [r4, #8]
			if (cl) {
 8008fe6:	f1b9 0f00 	cmp.w	r9, #0
 8008fea:	d027      	beq.n	800903c <f_lseek+0x9c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008fec:	f04f 0a02 	mov.w	sl, #2
						cl = get_fat(&fp->obj, cl);
 8008ff0:	4649      	mov	r1, r9
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008ff2:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 8008ff4:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 8008ff6:	460e      	mov	r6, r1
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7ff f82a 	bl	8008052 <get_fat>
 8008ffe:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009000:	2801      	cmp	r0, #1
 8009002:	d915      	bls.n	8009030 <f_lseek+0x90>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009004:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009008:	d015      	beq.n	8009036 <f_lseek+0x96>
					} while (cl == pcl + 1);
 800900a:	3601      	adds	r6, #1
 800900c:	4286      	cmp	r6, r0
 800900e:	d0f1      	beq.n	8008ff4 <f_lseek+0x54>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009010:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009014:	45d3      	cmp	fp, sl
 8009016:	d305      	bcc.n	8009024 <f_lseek+0x84>
						*tbl++ = ncl; *tbl++ = tcl;
 8009018:	4643      	mov	r3, r8
 800901a:	f843 7b08 	str.w	r7, [r3], #8
 800901e:	f8c8 9004 	str.w	r9, [r8, #4]
 8009022:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	428b      	cmp	r3, r1
 800902a:	d909      	bls.n	8009040 <f_lseek+0xa0>
						cl = get_fat(&fp->obj, cl);
 800902c:	4689      	mov	r9, r1
 800902e:	e7df      	b.n	8008ff0 <f_lseek+0x50>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009030:	2502      	movs	r5, #2
 8009032:	7565      	strb	r5, [r4, #21]
 8009034:	e7ce      	b.n	8008fd4 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009036:	2501      	movs	r5, #1
 8009038:	7565      	strb	r5, [r4, #21]
 800903a:	e7cb      	b.n	8008fd4 <f_lseek+0x34>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800903c:	f04f 0a02 	mov.w	sl, #2
			*fp->cltbl = ulen;	/* Number of items used */
 8009040:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009042:	f8c3 a000 	str.w	sl, [r3]
			if (ulen <= tlen) {
 8009046:	45da      	cmp	sl, fp
 8009048:	f200 80f0 	bhi.w	800922c <f_lseek+0x28c>
				*tbl = 0;		/* Terminate table */
 800904c:	2300      	movs	r3, #0
 800904e:	f8c8 3000 	str.w	r3, [r8]
 8009052:	e7bf      	b.n	8008fd4 <f_lseek+0x34>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009054:	f106 38ff 	add.w	r8, r6, #4294967295
 8009058:	4641      	mov	r1, r8
 800905a:	4620      	mov	r0, r4
 800905c:	f7fe fe6c 	bl	8007d38 <clmt_clust>
 8009060:	4601      	mov	r1, r0
 8009062:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 8009064:	9f01      	ldr	r7, [sp, #4]
 8009066:	4638      	mov	r0, r7
 8009068:	f7fe fe5a 	bl	8007d20 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800906c:	b1d0      	cbz	r0, 80090a4 <f_lseek+0x104>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800906e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8009072:	2e00      	cmp	r6, #0
 8009074:	d0ae      	beq.n	8008fd4 <f_lseek+0x34>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009076:	897e      	ldrh	r6, [r7, #10]
 8009078:	3e01      	subs	r6, #1
 800907a:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 800907e:	4406      	add	r6, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009080:	6a22      	ldr	r2, [r4, #32]
 8009082:	42b2      	cmp	r2, r6
 8009084:	d0a6      	beq.n	8008fd4 <f_lseek+0x34>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009086:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	db0d      	blt.n	80090aa <f_lseek+0x10a>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800908e:	2301      	movs	r3, #1
 8009090:	4632      	mov	r2, r6
 8009092:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8009096:	7878      	ldrb	r0, [r7, #1]
 8009098:	f7fe fd1a 	bl	8007ad0 <disk_read>
 800909c:	4605      	mov	r5, r0
 800909e:	b998      	cbnz	r0, 80090c8 <f_lseek+0x128>
					fp->sect = dsc;
 80090a0:	6226      	str	r6, [r4, #32]
 80090a2:	e797      	b.n	8008fd4 <f_lseek+0x34>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80090a4:	2502      	movs	r5, #2
 80090a6:	7565      	strb	r5, [r4, #21]
 80090a8:	e794      	b.n	8008fd4 <f_lseek+0x34>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80090aa:	2301      	movs	r3, #1
 80090ac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80090b0:	7878      	ldrb	r0, [r7, #1]
 80090b2:	f7fe fd1b 	bl	8007aec <disk_write>
 80090b6:	b920      	cbnz	r0, 80090c2 <f_lseek+0x122>
						fp->flag &= (BYTE)~FA_DIRTY;
 80090b8:	7d23      	ldrb	r3, [r4, #20]
 80090ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090be:	7523      	strb	r3, [r4, #20]
 80090c0:	e7e5      	b.n	800908e <f_lseek+0xee>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80090c2:	2501      	movs	r5, #1
 80090c4:	7565      	strb	r5, [r4, #21]
 80090c6:	e785      	b.n	8008fd4 <f_lseek+0x34>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80090c8:	2501      	movs	r5, #1
 80090ca:	7565      	strb	r5, [r4, #21]
 80090cc:	e782      	b.n	8008fd4 <f_lseek+0x34>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80090ce:	68e3      	ldr	r3, [r4, #12]
 80090d0:	42b3      	cmp	r3, r6
 80090d2:	d204      	bcs.n	80090de <f_lseek+0x13e>
 80090d4:	7d22      	ldrb	r2, [r4, #20]
			ofs = fp->obj.objsize;
 80090d6:	f012 0f02 	tst.w	r2, #2
 80090da:	bf08      	it	eq
 80090dc:	461e      	moveq	r6, r3
		ifptr = fp->fptr;
 80090de:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 80090e0:	2200      	movs	r2, #0
 80090e2:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 80090e4:	2e00      	cmp	r6, #0
 80090e6:	f43f af75 	beq.w	8008fd4 <f_lseek+0x34>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80090ea:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090ee:	f8b9 800a 	ldrh.w	r8, [r9, #10]
 80090f2:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 80090f6:	b173      	cbz	r3, 8009116 <f_lseek+0x176>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80090f8:	3b01      	subs	r3, #1
 80090fa:	1e72      	subs	r2, r6, #1
 80090fc:	fbb2 f2f8 	udiv	r2, r2, r8
 8009100:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 8009104:	428a      	cmp	r2, r1
 8009106:	d306      	bcc.n	8009116 <f_lseek+0x176>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009108:	f1c8 0200 	rsb	r2, r8, #0
 800910c:	4013      	ands	r3, r2
 800910e:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8009110:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
 8009112:	69e7      	ldr	r7, [r4, #28]
 8009114:	e003      	b.n	800911e <f_lseek+0x17e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009116:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009118:	2f00      	cmp	r7, #0
 800911a:	d035      	beq.n	8009188 <f_lseek+0x1e8>
				fp->clust = clst;
 800911c:	61e7      	str	r7, [r4, #28]
			if (clst != 0) {
 800911e:	b187      	cbz	r7, 8009142 <f_lseek+0x1a2>
				while (ofs > bcs) {						/* Cluster following loop */
 8009120:	4546      	cmp	r6, r8
 8009122:	d854      	bhi.n	80091ce <f_lseek+0x22e>
				fp->fptr += ofs;
 8009124:	69a3      	ldr	r3, [r4, #24]
 8009126:	4433      	add	r3, r6
 8009128:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800912a:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800912e:	2b00      	cmp	r3, #0
 8009130:	d067      	beq.n	8009202 <f_lseek+0x262>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009132:	4639      	mov	r1, r7
 8009134:	4648      	mov	r0, r9
 8009136:	f7fe fdf3 	bl	8007d20 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800913a:	2800      	cmp	r0, #0
 800913c:	d05e      	beq.n	80091fc <f_lseek+0x25c>
					nsect += (DWORD)(ofs / SS(fs));
 800913e:	eb00 2756 	add.w	r7, r0, r6, lsr #9
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009142:	69a3      	ldr	r3, [r4, #24]
 8009144:	68e2      	ldr	r2, [r4, #12]
 8009146:	4293      	cmp	r3, r2
 8009148:	d904      	bls.n	8009154 <f_lseek+0x1b4>
			fp->obj.objsize = fp->fptr;
 800914a:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800914c:	7d22      	ldrb	r2, [r4, #20]
 800914e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009152:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009158:	2b00      	cmp	r3, #0
 800915a:	f43f af3b 	beq.w	8008fd4 <f_lseek+0x34>
 800915e:	6a22      	ldr	r2, [r4, #32]
 8009160:	42ba      	cmp	r2, r7
 8009162:	f43f af37 	beq.w	8008fd4 <f_lseek+0x34>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009166:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	db4b      	blt.n	8009206 <f_lseek+0x266>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800916e:	2301      	movs	r3, #1
 8009170:	463a      	mov	r2, r7
 8009172:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8009176:	9801      	ldr	r0, [sp, #4]
 8009178:	7840      	ldrb	r0, [r0, #1]
 800917a:	f7fe fca9 	bl	8007ad0 <disk_read>
 800917e:	4605      	mov	r5, r0
 8009180:	2800      	cmp	r0, #0
 8009182:	d150      	bne.n	8009226 <f_lseek+0x286>
			fp->sect = nsect;
 8009184:	6227      	str	r7, [r4, #32]
 8009186:	e725      	b.n	8008fd4 <f_lseek+0x34>
					clst = create_chain(&fp->obj, 0);
 8009188:	2100      	movs	r1, #0
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff f820 	bl	80081d0 <create_chain>
 8009190:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009192:	2801      	cmp	r0, #1
 8009194:	d004      	beq.n	80091a0 <f_lseek+0x200>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009196:	f1b0 3fff 	cmp.w	r0, #4294967295
 800919a:	d004      	beq.n	80091a6 <f_lseek+0x206>
					fp->obj.sclust = clst;
 800919c:	60a0      	str	r0, [r4, #8]
 800919e:	e7bd      	b.n	800911c <f_lseek+0x17c>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80091a0:	2502      	movs	r5, #2
 80091a2:	7565      	strb	r5, [r4, #21]
 80091a4:	e716      	b.n	8008fd4 <f_lseek+0x34>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091a6:	2501      	movs	r5, #1
 80091a8:	7565      	strb	r5, [r4, #21]
 80091aa:	e713      	b.n	8008fd4 <f_lseek+0x34>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80091ac:	4639      	mov	r1, r7
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7fe ff4f 	bl	8008052 <get_fat>
 80091b4:	4607      	mov	r7, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091b6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80091ba:	d019      	beq.n	80091f0 <f_lseek+0x250>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80091bc:	2f01      	cmp	r7, #1
 80091be:	d91a      	bls.n	80091f6 <f_lseek+0x256>
 80091c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80091c4:	42bb      	cmp	r3, r7
 80091c6:	d916      	bls.n	80091f6 <f_lseek+0x256>
					fp->clust = clst;
 80091c8:	61e7      	str	r7, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80091ca:	45b0      	cmp	r8, r6
 80091cc:	d2aa      	bcs.n	8009124 <f_lseek+0x184>
					ofs -= bcs; fp->fptr += bcs;
 80091ce:	eba6 0608 	sub.w	r6, r6, r8
 80091d2:	69a3      	ldr	r3, [r4, #24]
 80091d4:	4443      	add	r3, r8
 80091d6:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80091d8:	7d23      	ldrb	r3, [r4, #20]
 80091da:	f013 0f02 	tst.w	r3, #2
 80091de:	d0e5      	beq.n	80091ac <f_lseek+0x20c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80091e0:	4639      	mov	r1, r7
 80091e2:	4620      	mov	r0, r4
 80091e4:	f7fe fff4 	bl	80081d0 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80091e8:	4607      	mov	r7, r0
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d1e3      	bne.n	80091b6 <f_lseek+0x216>
 80091ee:	e7a8      	b.n	8009142 <f_lseek+0x1a2>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091f0:	2501      	movs	r5, #1
 80091f2:	7565      	strb	r5, [r4, #21]
 80091f4:	e6ee      	b.n	8008fd4 <f_lseek+0x34>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80091f6:	2502      	movs	r5, #2
 80091f8:	7565      	strb	r5, [r4, #21]
 80091fa:	e6eb      	b.n	8008fd4 <f_lseek+0x34>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80091fc:	2502      	movs	r5, #2
 80091fe:	7565      	strb	r5, [r4, #21]
 8009200:	e6e8      	b.n	8008fd4 <f_lseek+0x34>
		fp->fptr = nsect = 0;
 8009202:	461f      	mov	r7, r3
 8009204:	e79d      	b.n	8009142 <f_lseek+0x1a2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009206:	2301      	movs	r3, #1
 8009208:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800920c:	9801      	ldr	r0, [sp, #4]
 800920e:	7840      	ldrb	r0, [r0, #1]
 8009210:	f7fe fc6c 	bl	8007aec <disk_write>
 8009214:	b920      	cbnz	r0, 8009220 <f_lseek+0x280>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009216:	7d23      	ldrb	r3, [r4, #20]
 8009218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800921c:	7523      	strb	r3, [r4, #20]
 800921e:	e7a6      	b.n	800916e <f_lseek+0x1ce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009220:	2501      	movs	r5, #1
 8009222:	7565      	strb	r5, [r4, #21]
 8009224:	e6d6      	b.n	8008fd4 <f_lseek+0x34>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009226:	2501      	movs	r5, #1
 8009228:	7565      	strb	r5, [r4, #21]
 800922a:	e6d3      	b.n	8008fd4 <f_lseek+0x34>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800922c:	2511      	movs	r5, #17
 800922e:	e6d1      	b.n	8008fd4 <f_lseek+0x34>

08009230 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009230:	4b13      	ldr	r3, [pc, #76]	@ (8009280 <FATFS_LinkDriverEx+0x50>)
 8009232:	7a5b      	ldrb	r3, [r3, #9]
 8009234:	bb13      	cbnz	r3, 800927c <FATFS_LinkDriverEx+0x4c>
{
 8009236:	b510      	push	{r4, lr}
 8009238:	4604      	mov	r4, r0
 800923a:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800923e:	4b10      	ldr	r3, [pc, #64]	@ (8009280 <FATFS_LinkDriverEx+0x50>)
 8009240:	f893 c009 	ldrb.w	ip, [r3, #9]
 8009244:	fa5f fc8c 	uxtb.w	ip, ip
 8009248:	f04f 0e00 	mov.w	lr, #0
 800924c:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8009250:	f893 c009 	ldrb.w	ip, [r3, #9]
 8009254:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8009258:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800925c:	7a5c      	ldrb	r4, [r3, #9]
 800925e:	441c      	add	r4, r3
 8009260:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8009262:	7a5a      	ldrb	r2, [r3, #9]
 8009264:	1c54      	adds	r4, r2, #1
 8009266:	b2e4      	uxtb	r4, r4
 8009268:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800926a:	3230      	adds	r2, #48	@ 0x30
 800926c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800926e:	233a      	movs	r3, #58	@ 0x3a
 8009270:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009272:	232f      	movs	r3, #47	@ 0x2f
 8009274:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009276:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800927a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800927c:	2001      	movs	r0, #1
}
 800927e:	4770      	bx	lr
 8009280:	2408a06c 	.word	0x2408a06c

08009284 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009284:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8009286:	2200      	movs	r2, #0
 8009288:	f7ff ffd2 	bl	8009230 <FATFS_LinkDriverEx>
}
 800928c:	bd08      	pop	{r3, pc}
	...

08009290 <sniprintf>:
 8009290:	b40c      	push	{r2, r3}
 8009292:	b530      	push	{r4, r5, lr}
 8009294:	4b17      	ldr	r3, [pc, #92]	@ (80092f4 <sniprintf+0x64>)
 8009296:	1e0c      	subs	r4, r1, #0
 8009298:	681d      	ldr	r5, [r3, #0]
 800929a:	b09d      	sub	sp, #116	@ 0x74
 800929c:	da08      	bge.n	80092b0 <sniprintf+0x20>
 800929e:	238b      	movs	r3, #139	@ 0x8b
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	f04f 30ff 	mov.w	r0, #4294967295
 80092a6:	b01d      	add	sp, #116	@ 0x74
 80092a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092ac:	b002      	add	sp, #8
 80092ae:	4770      	bx	lr
 80092b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80092b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092b8:	bf14      	ite	ne
 80092ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092be:	4623      	moveq	r3, r4
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	9307      	str	r3, [sp, #28]
 80092c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092c8:	9002      	str	r0, [sp, #8]
 80092ca:	9006      	str	r0, [sp, #24]
 80092cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092d2:	ab21      	add	r3, sp, #132	@ 0x84
 80092d4:	a902      	add	r1, sp, #8
 80092d6:	4628      	mov	r0, r5
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	f000 f995 	bl	8009608 <_svfiprintf_r>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	bfbc      	itt	lt
 80092e2:	238b      	movlt	r3, #139	@ 0x8b
 80092e4:	602b      	strlt	r3, [r5, #0]
 80092e6:	2c00      	cmp	r4, #0
 80092e8:	d0dd      	beq.n	80092a6 <sniprintf+0x16>
 80092ea:	9b02      	ldr	r3, [sp, #8]
 80092ec:	2200      	movs	r2, #0
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	e7d9      	b.n	80092a6 <sniprintf+0x16>
 80092f2:	bf00      	nop
 80092f4:	24000018 	.word	0x24000018

080092f8 <memset>:
 80092f8:	4402      	add	r2, r0
 80092fa:	4603      	mov	r3, r0
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d100      	bne.n	8009302 <memset+0xa>
 8009300:	4770      	bx	lr
 8009302:	f803 1b01 	strb.w	r1, [r3], #1
 8009306:	e7f9      	b.n	80092fc <memset+0x4>

08009308 <__errno>:
 8009308:	4b01      	ldr	r3, [pc, #4]	@ (8009310 <__errno+0x8>)
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	24000018 	.word	0x24000018

08009314 <__libc_init_array>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4d0d      	ldr	r5, [pc, #52]	@ (800934c <__libc_init_array+0x38>)
 8009318:	4c0d      	ldr	r4, [pc, #52]	@ (8009350 <__libc_init_array+0x3c>)
 800931a:	1b64      	subs	r4, r4, r5
 800931c:	10a4      	asrs	r4, r4, #2
 800931e:	2600      	movs	r6, #0
 8009320:	42a6      	cmp	r6, r4
 8009322:	d109      	bne.n	8009338 <__libc_init_array+0x24>
 8009324:	4d0b      	ldr	r5, [pc, #44]	@ (8009354 <__libc_init_array+0x40>)
 8009326:	4c0c      	ldr	r4, [pc, #48]	@ (8009358 <__libc_init_array+0x44>)
 8009328:	f000 fc66 	bl	8009bf8 <_init>
 800932c:	1b64      	subs	r4, r4, r5
 800932e:	10a4      	asrs	r4, r4, #2
 8009330:	2600      	movs	r6, #0
 8009332:	42a6      	cmp	r6, r4
 8009334:	d105      	bne.n	8009342 <__libc_init_array+0x2e>
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	f855 3b04 	ldr.w	r3, [r5], #4
 800933c:	4798      	blx	r3
 800933e:	3601      	adds	r6, #1
 8009340:	e7ee      	b.n	8009320 <__libc_init_array+0xc>
 8009342:	f855 3b04 	ldr.w	r3, [r5], #4
 8009346:	4798      	blx	r3
 8009348:	3601      	adds	r6, #1
 800934a:	e7f2      	b.n	8009332 <__libc_init_array+0x1e>
 800934c:	08009f98 	.word	0x08009f98
 8009350:	08009f98 	.word	0x08009f98
 8009354:	08009f98 	.word	0x08009f98
 8009358:	08009f9c 	.word	0x08009f9c

0800935c <__retarget_lock_acquire_recursive>:
 800935c:	4770      	bx	lr

0800935e <__retarget_lock_release_recursive>:
 800935e:	4770      	bx	lr

08009360 <_free_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4605      	mov	r5, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	d041      	beq.n	80093ec <_free_r+0x8c>
 8009368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936c:	1f0c      	subs	r4, r1, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfb8      	it	lt
 8009372:	18e4      	addlt	r4, r4, r3
 8009374:	f000 f8e0 	bl	8009538 <__malloc_lock>
 8009378:	4a1d      	ldr	r2, [pc, #116]	@ (80093f0 <_free_r+0x90>)
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	b933      	cbnz	r3, 800938c <_free_r+0x2c>
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	6014      	str	r4, [r2, #0]
 8009382:	4628      	mov	r0, r5
 8009384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009388:	f000 b8dc 	b.w	8009544 <__malloc_unlock>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d908      	bls.n	80093a2 <_free_r+0x42>
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	1821      	adds	r1, r4, r0
 8009394:	428b      	cmp	r3, r1
 8009396:	bf01      	itttt	eq
 8009398:	6819      	ldreq	r1, [r3, #0]
 800939a:	685b      	ldreq	r3, [r3, #4]
 800939c:	1809      	addeq	r1, r1, r0
 800939e:	6021      	streq	r1, [r4, #0]
 80093a0:	e7ed      	b.n	800937e <_free_r+0x1e>
 80093a2:	461a      	mov	r2, r3
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	b10b      	cbz	r3, 80093ac <_free_r+0x4c>
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d9fa      	bls.n	80093a2 <_free_r+0x42>
 80093ac:	6811      	ldr	r1, [r2, #0]
 80093ae:	1850      	adds	r0, r2, r1
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d10b      	bne.n	80093cc <_free_r+0x6c>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	4401      	add	r1, r0
 80093b8:	1850      	adds	r0, r2, r1
 80093ba:	4283      	cmp	r3, r0
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	d1e0      	bne.n	8009382 <_free_r+0x22>
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	6053      	str	r3, [r2, #4]
 80093c6:	4408      	add	r0, r1
 80093c8:	6010      	str	r0, [r2, #0]
 80093ca:	e7da      	b.n	8009382 <_free_r+0x22>
 80093cc:	d902      	bls.n	80093d4 <_free_r+0x74>
 80093ce:	230c      	movs	r3, #12
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	e7d6      	b.n	8009382 <_free_r+0x22>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	1821      	adds	r1, r4, r0
 80093d8:	428b      	cmp	r3, r1
 80093da:	bf04      	itt	eq
 80093dc:	6819      	ldreq	r1, [r3, #0]
 80093de:	685b      	ldreq	r3, [r3, #4]
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	bf04      	itt	eq
 80093e4:	1809      	addeq	r1, r1, r0
 80093e6:	6021      	streq	r1, [r4, #0]
 80093e8:	6054      	str	r4, [r2, #4]
 80093ea:	e7ca      	b.n	8009382 <_free_r+0x22>
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	2408a1bc 	.word	0x2408a1bc

080093f4 <sbrk_aligned>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009434 <sbrk_aligned+0x40>)
 80093f8:	460c      	mov	r4, r1
 80093fa:	6831      	ldr	r1, [r6, #0]
 80093fc:	4605      	mov	r5, r0
 80093fe:	b911      	cbnz	r1, 8009406 <sbrk_aligned+0x12>
 8009400:	f000 fba6 	bl	8009b50 <_sbrk_r>
 8009404:	6030      	str	r0, [r6, #0]
 8009406:	4621      	mov	r1, r4
 8009408:	4628      	mov	r0, r5
 800940a:	f000 fba1 	bl	8009b50 <_sbrk_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d103      	bne.n	800941a <sbrk_aligned+0x26>
 8009412:	f04f 34ff 	mov.w	r4, #4294967295
 8009416:	4620      	mov	r0, r4
 8009418:	bd70      	pop	{r4, r5, r6, pc}
 800941a:	1cc4      	adds	r4, r0, #3
 800941c:	f024 0403 	bic.w	r4, r4, #3
 8009420:	42a0      	cmp	r0, r4
 8009422:	d0f8      	beq.n	8009416 <sbrk_aligned+0x22>
 8009424:	1a21      	subs	r1, r4, r0
 8009426:	4628      	mov	r0, r5
 8009428:	f000 fb92 	bl	8009b50 <_sbrk_r>
 800942c:	3001      	adds	r0, #1
 800942e:	d1f2      	bne.n	8009416 <sbrk_aligned+0x22>
 8009430:	e7ef      	b.n	8009412 <sbrk_aligned+0x1e>
 8009432:	bf00      	nop
 8009434:	2408a1b8 	.word	0x2408a1b8

08009438 <_malloc_r>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	1ccd      	adds	r5, r1, #3
 800943e:	f025 0503 	bic.w	r5, r5, #3
 8009442:	3508      	adds	r5, #8
 8009444:	2d0c      	cmp	r5, #12
 8009446:	bf38      	it	cc
 8009448:	250c      	movcc	r5, #12
 800944a:	2d00      	cmp	r5, #0
 800944c:	4606      	mov	r6, r0
 800944e:	db01      	blt.n	8009454 <_malloc_r+0x1c>
 8009450:	42a9      	cmp	r1, r5
 8009452:	d904      	bls.n	800945e <_malloc_r+0x26>
 8009454:	230c      	movs	r3, #12
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	2000      	movs	r0, #0
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009534 <_malloc_r+0xfc>
 8009462:	f000 f869 	bl	8009538 <__malloc_lock>
 8009466:	f8d8 3000 	ldr.w	r3, [r8]
 800946a:	461c      	mov	r4, r3
 800946c:	bb44      	cbnz	r4, 80094c0 <_malloc_r+0x88>
 800946e:	4629      	mov	r1, r5
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ffbf 	bl	80093f4 <sbrk_aligned>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	4604      	mov	r4, r0
 800947a:	d158      	bne.n	800952e <_malloc_r+0xf6>
 800947c:	f8d8 4000 	ldr.w	r4, [r8]
 8009480:	4627      	mov	r7, r4
 8009482:	2f00      	cmp	r7, #0
 8009484:	d143      	bne.n	800950e <_malloc_r+0xd6>
 8009486:	2c00      	cmp	r4, #0
 8009488:	d04b      	beq.n	8009522 <_malloc_r+0xea>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	4639      	mov	r1, r7
 800948e:	4630      	mov	r0, r6
 8009490:	eb04 0903 	add.w	r9, r4, r3
 8009494:	f000 fb5c 	bl	8009b50 <_sbrk_r>
 8009498:	4581      	cmp	r9, r0
 800949a:	d142      	bne.n	8009522 <_malloc_r+0xea>
 800949c:	6821      	ldr	r1, [r4, #0]
 800949e:	1a6d      	subs	r5, r5, r1
 80094a0:	4629      	mov	r1, r5
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ffa6 	bl	80093f4 <sbrk_aligned>
 80094a8:	3001      	adds	r0, #1
 80094aa:	d03a      	beq.n	8009522 <_malloc_r+0xea>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	442b      	add	r3, r5
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	f8d8 3000 	ldr.w	r3, [r8]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	bb62      	cbnz	r2, 8009514 <_malloc_r+0xdc>
 80094ba:	f8c8 7000 	str.w	r7, [r8]
 80094be:	e00f      	b.n	80094e0 <_malloc_r+0xa8>
 80094c0:	6822      	ldr	r2, [r4, #0]
 80094c2:	1b52      	subs	r2, r2, r5
 80094c4:	d420      	bmi.n	8009508 <_malloc_r+0xd0>
 80094c6:	2a0b      	cmp	r2, #11
 80094c8:	d917      	bls.n	80094fa <_malloc_r+0xc2>
 80094ca:	1961      	adds	r1, r4, r5
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	6025      	str	r5, [r4, #0]
 80094d0:	bf18      	it	ne
 80094d2:	6059      	strne	r1, [r3, #4]
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	bf08      	it	eq
 80094d8:	f8c8 1000 	streq.w	r1, [r8]
 80094dc:	5162      	str	r2, [r4, r5]
 80094de:	604b      	str	r3, [r1, #4]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f82f 	bl	8009544 <__malloc_unlock>
 80094e6:	f104 000b 	add.w	r0, r4, #11
 80094ea:	1d23      	adds	r3, r4, #4
 80094ec:	f020 0007 	bic.w	r0, r0, #7
 80094f0:	1ac2      	subs	r2, r0, r3
 80094f2:	bf1c      	itt	ne
 80094f4:	1a1b      	subne	r3, r3, r0
 80094f6:	50a3      	strne	r3, [r4, r2]
 80094f8:	e7af      	b.n	800945a <_malloc_r+0x22>
 80094fa:	6862      	ldr	r2, [r4, #4]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	bf0c      	ite	eq
 8009500:	f8c8 2000 	streq.w	r2, [r8]
 8009504:	605a      	strne	r2, [r3, #4]
 8009506:	e7eb      	b.n	80094e0 <_malloc_r+0xa8>
 8009508:	4623      	mov	r3, r4
 800950a:	6864      	ldr	r4, [r4, #4]
 800950c:	e7ae      	b.n	800946c <_malloc_r+0x34>
 800950e:	463c      	mov	r4, r7
 8009510:	687f      	ldr	r7, [r7, #4]
 8009512:	e7b6      	b.n	8009482 <_malloc_r+0x4a>
 8009514:	461a      	mov	r2, r3
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	42a3      	cmp	r3, r4
 800951a:	d1fb      	bne.n	8009514 <_malloc_r+0xdc>
 800951c:	2300      	movs	r3, #0
 800951e:	6053      	str	r3, [r2, #4]
 8009520:	e7de      	b.n	80094e0 <_malloc_r+0xa8>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	4630      	mov	r0, r6
 8009528:	f000 f80c 	bl	8009544 <__malloc_unlock>
 800952c:	e794      	b.n	8009458 <_malloc_r+0x20>
 800952e:	6005      	str	r5, [r0, #0]
 8009530:	e7d6      	b.n	80094e0 <_malloc_r+0xa8>
 8009532:	bf00      	nop
 8009534:	2408a1bc 	.word	0x2408a1bc

08009538 <__malloc_lock>:
 8009538:	4801      	ldr	r0, [pc, #4]	@ (8009540 <__malloc_lock+0x8>)
 800953a:	f7ff bf0f 	b.w	800935c <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	2408a1b4 	.word	0x2408a1b4

08009544 <__malloc_unlock>:
 8009544:	4801      	ldr	r0, [pc, #4]	@ (800954c <__malloc_unlock+0x8>)
 8009546:	f7ff bf0a 	b.w	800935e <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	2408a1b4 	.word	0x2408a1b4

08009550 <__ssputs_r>:
 8009550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	688e      	ldr	r6, [r1, #8]
 8009556:	461f      	mov	r7, r3
 8009558:	42be      	cmp	r6, r7
 800955a:	680b      	ldr	r3, [r1, #0]
 800955c:	4682      	mov	sl, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4690      	mov	r8, r2
 8009562:	d82d      	bhi.n	80095c0 <__ssputs_r+0x70>
 8009564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009568:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800956c:	d026      	beq.n	80095bc <__ssputs_r+0x6c>
 800956e:	6965      	ldr	r5, [r4, #20]
 8009570:	6909      	ldr	r1, [r1, #16]
 8009572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009576:	eba3 0901 	sub.w	r9, r3, r1
 800957a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800957e:	1c7b      	adds	r3, r7, #1
 8009580:	444b      	add	r3, r9
 8009582:	106d      	asrs	r5, r5, #1
 8009584:	429d      	cmp	r5, r3
 8009586:	bf38      	it	cc
 8009588:	461d      	movcc	r5, r3
 800958a:	0553      	lsls	r3, r2, #21
 800958c:	d527      	bpl.n	80095de <__ssputs_r+0x8e>
 800958e:	4629      	mov	r1, r5
 8009590:	f7ff ff52 	bl	8009438 <_malloc_r>
 8009594:	4606      	mov	r6, r0
 8009596:	b360      	cbz	r0, 80095f2 <__ssputs_r+0xa2>
 8009598:	6921      	ldr	r1, [r4, #16]
 800959a:	464a      	mov	r2, r9
 800959c:	f000 fae8 	bl	8009b70 <memcpy>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095aa:	81a3      	strh	r3, [r4, #12]
 80095ac:	6126      	str	r6, [r4, #16]
 80095ae:	6165      	str	r5, [r4, #20]
 80095b0:	444e      	add	r6, r9
 80095b2:	eba5 0509 	sub.w	r5, r5, r9
 80095b6:	6026      	str	r6, [r4, #0]
 80095b8:	60a5      	str	r5, [r4, #8]
 80095ba:	463e      	mov	r6, r7
 80095bc:	42be      	cmp	r6, r7
 80095be:	d900      	bls.n	80095c2 <__ssputs_r+0x72>
 80095c0:	463e      	mov	r6, r7
 80095c2:	6820      	ldr	r0, [r4, #0]
 80095c4:	4632      	mov	r2, r6
 80095c6:	4641      	mov	r1, r8
 80095c8:	f000 faa8 	bl	8009b1c <memmove>
 80095cc:	68a3      	ldr	r3, [r4, #8]
 80095ce:	1b9b      	subs	r3, r3, r6
 80095d0:	60a3      	str	r3, [r4, #8]
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	4433      	add	r3, r6
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	2000      	movs	r0, #0
 80095da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095de:	462a      	mov	r2, r5
 80095e0:	f000 fad4 	bl	8009b8c <_realloc_r>
 80095e4:	4606      	mov	r6, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d1e0      	bne.n	80095ac <__ssputs_r+0x5c>
 80095ea:	6921      	ldr	r1, [r4, #16]
 80095ec:	4650      	mov	r0, sl
 80095ee:	f7ff feb7 	bl	8009360 <_free_r>
 80095f2:	230c      	movs	r3, #12
 80095f4:	f8ca 3000 	str.w	r3, [sl]
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	e7e9      	b.n	80095da <__ssputs_r+0x8a>
	...

08009608 <_svfiprintf_r>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	4698      	mov	r8, r3
 800960e:	898b      	ldrh	r3, [r1, #12]
 8009610:	061b      	lsls	r3, r3, #24
 8009612:	b09d      	sub	sp, #116	@ 0x74
 8009614:	4607      	mov	r7, r0
 8009616:	460d      	mov	r5, r1
 8009618:	4614      	mov	r4, r2
 800961a:	d510      	bpl.n	800963e <_svfiprintf_r+0x36>
 800961c:	690b      	ldr	r3, [r1, #16]
 800961e:	b973      	cbnz	r3, 800963e <_svfiprintf_r+0x36>
 8009620:	2140      	movs	r1, #64	@ 0x40
 8009622:	f7ff ff09 	bl	8009438 <_malloc_r>
 8009626:	6028      	str	r0, [r5, #0]
 8009628:	6128      	str	r0, [r5, #16]
 800962a:	b930      	cbnz	r0, 800963a <_svfiprintf_r+0x32>
 800962c:	230c      	movs	r3, #12
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	b01d      	add	sp, #116	@ 0x74
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	2340      	movs	r3, #64	@ 0x40
 800963c:	616b      	str	r3, [r5, #20]
 800963e:	2300      	movs	r3, #0
 8009640:	9309      	str	r3, [sp, #36]	@ 0x24
 8009642:	2320      	movs	r3, #32
 8009644:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009648:	f8cd 800c 	str.w	r8, [sp, #12]
 800964c:	2330      	movs	r3, #48	@ 0x30
 800964e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097ec <_svfiprintf_r+0x1e4>
 8009652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009656:	f04f 0901 	mov.w	r9, #1
 800965a:	4623      	mov	r3, r4
 800965c:	469a      	mov	sl, r3
 800965e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009662:	b10a      	cbz	r2, 8009668 <_svfiprintf_r+0x60>
 8009664:	2a25      	cmp	r2, #37	@ 0x25
 8009666:	d1f9      	bne.n	800965c <_svfiprintf_r+0x54>
 8009668:	ebba 0b04 	subs.w	fp, sl, r4
 800966c:	d00b      	beq.n	8009686 <_svfiprintf_r+0x7e>
 800966e:	465b      	mov	r3, fp
 8009670:	4622      	mov	r2, r4
 8009672:	4629      	mov	r1, r5
 8009674:	4638      	mov	r0, r7
 8009676:	f7ff ff6b 	bl	8009550 <__ssputs_r>
 800967a:	3001      	adds	r0, #1
 800967c:	f000 80a7 	beq.w	80097ce <_svfiprintf_r+0x1c6>
 8009680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009682:	445a      	add	r2, fp
 8009684:	9209      	str	r2, [sp, #36]	@ 0x24
 8009686:	f89a 3000 	ldrb.w	r3, [sl]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 809f 	beq.w	80097ce <_svfiprintf_r+0x1c6>
 8009690:	2300      	movs	r3, #0
 8009692:	f04f 32ff 	mov.w	r2, #4294967295
 8009696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800969a:	f10a 0a01 	add.w	sl, sl, #1
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	9307      	str	r3, [sp, #28]
 80096a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096a8:	4654      	mov	r4, sl
 80096aa:	2205      	movs	r2, #5
 80096ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b0:	484e      	ldr	r0, [pc, #312]	@ (80097ec <_svfiprintf_r+0x1e4>)
 80096b2:	f7f6 fe1d 	bl	80002f0 <memchr>
 80096b6:	9a04      	ldr	r2, [sp, #16]
 80096b8:	b9d8      	cbnz	r0, 80096f2 <_svfiprintf_r+0xea>
 80096ba:	06d0      	lsls	r0, r2, #27
 80096bc:	bf44      	itt	mi
 80096be:	2320      	movmi	r3, #32
 80096c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096c4:	0711      	lsls	r1, r2, #28
 80096c6:	bf44      	itt	mi
 80096c8:	232b      	movmi	r3, #43	@ 0x2b
 80096ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ce:	f89a 3000 	ldrb.w	r3, [sl]
 80096d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096d4:	d015      	beq.n	8009702 <_svfiprintf_r+0xfa>
 80096d6:	9a07      	ldr	r2, [sp, #28]
 80096d8:	4654      	mov	r4, sl
 80096da:	2000      	movs	r0, #0
 80096dc:	f04f 0c0a 	mov.w	ip, #10
 80096e0:	4621      	mov	r1, r4
 80096e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e6:	3b30      	subs	r3, #48	@ 0x30
 80096e8:	2b09      	cmp	r3, #9
 80096ea:	d94b      	bls.n	8009784 <_svfiprintf_r+0x17c>
 80096ec:	b1b0      	cbz	r0, 800971c <_svfiprintf_r+0x114>
 80096ee:	9207      	str	r2, [sp, #28]
 80096f0:	e014      	b.n	800971c <_svfiprintf_r+0x114>
 80096f2:	eba0 0308 	sub.w	r3, r0, r8
 80096f6:	fa09 f303 	lsl.w	r3, r9, r3
 80096fa:	4313      	orrs	r3, r2
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	46a2      	mov	sl, r4
 8009700:	e7d2      	b.n	80096a8 <_svfiprintf_r+0xa0>
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	1d19      	adds	r1, r3, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	9103      	str	r1, [sp, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfbb      	ittet	lt
 800970e:	425b      	neglt	r3, r3
 8009710:	f042 0202 	orrlt.w	r2, r2, #2
 8009714:	9307      	strge	r3, [sp, #28]
 8009716:	9307      	strlt	r3, [sp, #28]
 8009718:	bfb8      	it	lt
 800971a:	9204      	strlt	r2, [sp, #16]
 800971c:	7823      	ldrb	r3, [r4, #0]
 800971e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009720:	d10a      	bne.n	8009738 <_svfiprintf_r+0x130>
 8009722:	7863      	ldrb	r3, [r4, #1]
 8009724:	2b2a      	cmp	r3, #42	@ 0x2a
 8009726:	d132      	bne.n	800978e <_svfiprintf_r+0x186>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	9203      	str	r2, [sp, #12]
 8009730:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009734:	3402      	adds	r4, #2
 8009736:	9305      	str	r3, [sp, #20]
 8009738:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097fc <_svfiprintf_r+0x1f4>
 800973c:	7821      	ldrb	r1, [r4, #0]
 800973e:	2203      	movs	r2, #3
 8009740:	4650      	mov	r0, sl
 8009742:	f7f6 fdd5 	bl	80002f0 <memchr>
 8009746:	b138      	cbz	r0, 8009758 <_svfiprintf_r+0x150>
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	eba0 000a 	sub.w	r0, r0, sl
 800974e:	2240      	movs	r2, #64	@ 0x40
 8009750:	4082      	lsls	r2, r0
 8009752:	4313      	orrs	r3, r2
 8009754:	3401      	adds	r4, #1
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975c:	4824      	ldr	r0, [pc, #144]	@ (80097f0 <_svfiprintf_r+0x1e8>)
 800975e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009762:	2206      	movs	r2, #6
 8009764:	f7f6 fdc4 	bl	80002f0 <memchr>
 8009768:	2800      	cmp	r0, #0
 800976a:	d036      	beq.n	80097da <_svfiprintf_r+0x1d2>
 800976c:	4b21      	ldr	r3, [pc, #132]	@ (80097f4 <_svfiprintf_r+0x1ec>)
 800976e:	bb1b      	cbnz	r3, 80097b8 <_svfiprintf_r+0x1b0>
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	3307      	adds	r3, #7
 8009774:	f023 0307 	bic.w	r3, r3, #7
 8009778:	3308      	adds	r3, #8
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977e:	4433      	add	r3, r6
 8009780:	9309      	str	r3, [sp, #36]	@ 0x24
 8009782:	e76a      	b.n	800965a <_svfiprintf_r+0x52>
 8009784:	fb0c 3202 	mla	r2, ip, r2, r3
 8009788:	460c      	mov	r4, r1
 800978a:	2001      	movs	r0, #1
 800978c:	e7a8      	b.n	80096e0 <_svfiprintf_r+0xd8>
 800978e:	2300      	movs	r3, #0
 8009790:	3401      	adds	r4, #1
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	4619      	mov	r1, r3
 8009796:	f04f 0c0a 	mov.w	ip, #10
 800979a:	4620      	mov	r0, r4
 800979c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a0:	3a30      	subs	r2, #48	@ 0x30
 80097a2:	2a09      	cmp	r2, #9
 80097a4:	d903      	bls.n	80097ae <_svfiprintf_r+0x1a6>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0c6      	beq.n	8009738 <_svfiprintf_r+0x130>
 80097aa:	9105      	str	r1, [sp, #20]
 80097ac:	e7c4      	b.n	8009738 <_svfiprintf_r+0x130>
 80097ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b2:	4604      	mov	r4, r0
 80097b4:	2301      	movs	r3, #1
 80097b6:	e7f0      	b.n	800979a <_svfiprintf_r+0x192>
 80097b8:	ab03      	add	r3, sp, #12
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	462a      	mov	r2, r5
 80097be:	4b0e      	ldr	r3, [pc, #56]	@ (80097f8 <_svfiprintf_r+0x1f0>)
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	4638      	mov	r0, r7
 80097c4:	f3af 8000 	nop.w
 80097c8:	1c42      	adds	r2, r0, #1
 80097ca:	4606      	mov	r6, r0
 80097cc:	d1d6      	bne.n	800977c <_svfiprintf_r+0x174>
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	065b      	lsls	r3, r3, #25
 80097d2:	f53f af2d 	bmi.w	8009630 <_svfiprintf_r+0x28>
 80097d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097d8:	e72c      	b.n	8009634 <_svfiprintf_r+0x2c>
 80097da:	ab03      	add	r3, sp, #12
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	462a      	mov	r2, r5
 80097e0:	4b05      	ldr	r3, [pc, #20]	@ (80097f8 <_svfiprintf_r+0x1f0>)
 80097e2:	a904      	add	r1, sp, #16
 80097e4:	4638      	mov	r0, r7
 80097e6:	f000 f879 	bl	80098dc <_printf_i>
 80097ea:	e7ed      	b.n	80097c8 <_svfiprintf_r+0x1c0>
 80097ec:	08009f5c 	.word	0x08009f5c
 80097f0:	08009f66 	.word	0x08009f66
 80097f4:	00000000 	.word	0x00000000
 80097f8:	08009551 	.word	0x08009551
 80097fc:	08009f62 	.word	0x08009f62

08009800 <_printf_common>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	4616      	mov	r6, r2
 8009806:	4698      	mov	r8, r3
 8009808:	688a      	ldr	r2, [r1, #8]
 800980a:	690b      	ldr	r3, [r1, #16]
 800980c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009810:	4293      	cmp	r3, r2
 8009812:	bfb8      	it	lt
 8009814:	4613      	movlt	r3, r2
 8009816:	6033      	str	r3, [r6, #0]
 8009818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800981c:	4607      	mov	r7, r0
 800981e:	460c      	mov	r4, r1
 8009820:	b10a      	cbz	r2, 8009826 <_printf_common+0x26>
 8009822:	3301      	adds	r3, #1
 8009824:	6033      	str	r3, [r6, #0]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	0699      	lsls	r1, r3, #26
 800982a:	bf42      	ittt	mi
 800982c:	6833      	ldrmi	r3, [r6, #0]
 800982e:	3302      	addmi	r3, #2
 8009830:	6033      	strmi	r3, [r6, #0]
 8009832:	6825      	ldr	r5, [r4, #0]
 8009834:	f015 0506 	ands.w	r5, r5, #6
 8009838:	d106      	bne.n	8009848 <_printf_common+0x48>
 800983a:	f104 0a19 	add.w	sl, r4, #25
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	6832      	ldr	r2, [r6, #0]
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	42ab      	cmp	r3, r5
 8009846:	dc26      	bgt.n	8009896 <_printf_common+0x96>
 8009848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800984c:	6822      	ldr	r2, [r4, #0]
 800984e:	3b00      	subs	r3, #0
 8009850:	bf18      	it	ne
 8009852:	2301      	movne	r3, #1
 8009854:	0692      	lsls	r2, r2, #26
 8009856:	d42b      	bmi.n	80098b0 <_printf_common+0xb0>
 8009858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800985c:	4641      	mov	r1, r8
 800985e:	4638      	mov	r0, r7
 8009860:	47c8      	blx	r9
 8009862:	3001      	adds	r0, #1
 8009864:	d01e      	beq.n	80098a4 <_printf_common+0xa4>
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	6922      	ldr	r2, [r4, #16]
 800986a:	f003 0306 	and.w	r3, r3, #6
 800986e:	2b04      	cmp	r3, #4
 8009870:	bf02      	ittt	eq
 8009872:	68e5      	ldreq	r5, [r4, #12]
 8009874:	6833      	ldreq	r3, [r6, #0]
 8009876:	1aed      	subeq	r5, r5, r3
 8009878:	68a3      	ldr	r3, [r4, #8]
 800987a:	bf0c      	ite	eq
 800987c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009880:	2500      	movne	r5, #0
 8009882:	4293      	cmp	r3, r2
 8009884:	bfc4      	itt	gt
 8009886:	1a9b      	subgt	r3, r3, r2
 8009888:	18ed      	addgt	r5, r5, r3
 800988a:	2600      	movs	r6, #0
 800988c:	341a      	adds	r4, #26
 800988e:	42b5      	cmp	r5, r6
 8009890:	d11a      	bne.n	80098c8 <_printf_common+0xc8>
 8009892:	2000      	movs	r0, #0
 8009894:	e008      	b.n	80098a8 <_printf_common+0xa8>
 8009896:	2301      	movs	r3, #1
 8009898:	4652      	mov	r2, sl
 800989a:	4641      	mov	r1, r8
 800989c:	4638      	mov	r0, r7
 800989e:	47c8      	blx	r9
 80098a0:	3001      	adds	r0, #1
 80098a2:	d103      	bne.n	80098ac <_printf_common+0xac>
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ac:	3501      	adds	r5, #1
 80098ae:	e7c6      	b.n	800983e <_printf_common+0x3e>
 80098b0:	18e1      	adds	r1, r4, r3
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	2030      	movs	r0, #48	@ 0x30
 80098b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80098ba:	4422      	add	r2, r4
 80098bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098c4:	3302      	adds	r3, #2
 80098c6:	e7c7      	b.n	8009858 <_printf_common+0x58>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4622      	mov	r2, r4
 80098cc:	4641      	mov	r1, r8
 80098ce:	4638      	mov	r0, r7
 80098d0:	47c8      	blx	r9
 80098d2:	3001      	adds	r0, #1
 80098d4:	d0e6      	beq.n	80098a4 <_printf_common+0xa4>
 80098d6:	3601      	adds	r6, #1
 80098d8:	e7d9      	b.n	800988e <_printf_common+0x8e>
	...

080098dc <_printf_i>:
 80098dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	7e0f      	ldrb	r7, [r1, #24]
 80098e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098e4:	2f78      	cmp	r7, #120	@ 0x78
 80098e6:	4691      	mov	r9, r2
 80098e8:	4680      	mov	r8, r0
 80098ea:	460c      	mov	r4, r1
 80098ec:	469a      	mov	sl, r3
 80098ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098f2:	d807      	bhi.n	8009904 <_printf_i+0x28>
 80098f4:	2f62      	cmp	r7, #98	@ 0x62
 80098f6:	d80a      	bhi.n	800990e <_printf_i+0x32>
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	f000 80d2 	beq.w	8009aa2 <_printf_i+0x1c6>
 80098fe:	2f58      	cmp	r7, #88	@ 0x58
 8009900:	f000 80b9 	beq.w	8009a76 <_printf_i+0x19a>
 8009904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800990c:	e03a      	b.n	8009984 <_printf_i+0xa8>
 800990e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009912:	2b15      	cmp	r3, #21
 8009914:	d8f6      	bhi.n	8009904 <_printf_i+0x28>
 8009916:	a101      	add	r1, pc, #4	@ (adr r1, 800991c <_printf_i+0x40>)
 8009918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800991c:	08009975 	.word	0x08009975
 8009920:	08009989 	.word	0x08009989
 8009924:	08009905 	.word	0x08009905
 8009928:	08009905 	.word	0x08009905
 800992c:	08009905 	.word	0x08009905
 8009930:	08009905 	.word	0x08009905
 8009934:	08009989 	.word	0x08009989
 8009938:	08009905 	.word	0x08009905
 800993c:	08009905 	.word	0x08009905
 8009940:	08009905 	.word	0x08009905
 8009944:	08009905 	.word	0x08009905
 8009948:	08009a89 	.word	0x08009a89
 800994c:	080099b3 	.word	0x080099b3
 8009950:	08009a43 	.word	0x08009a43
 8009954:	08009905 	.word	0x08009905
 8009958:	08009905 	.word	0x08009905
 800995c:	08009aab 	.word	0x08009aab
 8009960:	08009905 	.word	0x08009905
 8009964:	080099b3 	.word	0x080099b3
 8009968:	08009905 	.word	0x08009905
 800996c:	08009905 	.word	0x08009905
 8009970:	08009a4b 	.word	0x08009a4b
 8009974:	6833      	ldr	r3, [r6, #0]
 8009976:	1d1a      	adds	r2, r3, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6032      	str	r2, [r6, #0]
 800997c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009984:	2301      	movs	r3, #1
 8009986:	e09d      	b.n	8009ac4 <_printf_i+0x1e8>
 8009988:	6833      	ldr	r3, [r6, #0]
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	1d19      	adds	r1, r3, #4
 800998e:	6031      	str	r1, [r6, #0]
 8009990:	0606      	lsls	r6, r0, #24
 8009992:	d501      	bpl.n	8009998 <_printf_i+0xbc>
 8009994:	681d      	ldr	r5, [r3, #0]
 8009996:	e003      	b.n	80099a0 <_printf_i+0xc4>
 8009998:	0645      	lsls	r5, r0, #25
 800999a:	d5fb      	bpl.n	8009994 <_printf_i+0xb8>
 800999c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	da03      	bge.n	80099ac <_printf_i+0xd0>
 80099a4:	232d      	movs	r3, #45	@ 0x2d
 80099a6:	426d      	negs	r5, r5
 80099a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099ac:	4859      	ldr	r0, [pc, #356]	@ (8009b14 <_printf_i+0x238>)
 80099ae:	230a      	movs	r3, #10
 80099b0:	e011      	b.n	80099d6 <_printf_i+0xfa>
 80099b2:	6821      	ldr	r1, [r4, #0]
 80099b4:	6833      	ldr	r3, [r6, #0]
 80099b6:	0608      	lsls	r0, r1, #24
 80099b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80099bc:	d402      	bmi.n	80099c4 <_printf_i+0xe8>
 80099be:	0649      	lsls	r1, r1, #25
 80099c0:	bf48      	it	mi
 80099c2:	b2ad      	uxthmi	r5, r5
 80099c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80099c6:	4853      	ldr	r0, [pc, #332]	@ (8009b14 <_printf_i+0x238>)
 80099c8:	6033      	str	r3, [r6, #0]
 80099ca:	bf14      	ite	ne
 80099cc:	230a      	movne	r3, #10
 80099ce:	2308      	moveq	r3, #8
 80099d0:	2100      	movs	r1, #0
 80099d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099d6:	6866      	ldr	r6, [r4, #4]
 80099d8:	60a6      	str	r6, [r4, #8]
 80099da:	2e00      	cmp	r6, #0
 80099dc:	bfa2      	ittt	ge
 80099de:	6821      	ldrge	r1, [r4, #0]
 80099e0:	f021 0104 	bicge.w	r1, r1, #4
 80099e4:	6021      	strge	r1, [r4, #0]
 80099e6:	b90d      	cbnz	r5, 80099ec <_printf_i+0x110>
 80099e8:	2e00      	cmp	r6, #0
 80099ea:	d04b      	beq.n	8009a84 <_printf_i+0x1a8>
 80099ec:	4616      	mov	r6, r2
 80099ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80099f2:	fb03 5711 	mls	r7, r3, r1, r5
 80099f6:	5dc7      	ldrb	r7, [r0, r7]
 80099f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099fc:	462f      	mov	r7, r5
 80099fe:	42bb      	cmp	r3, r7
 8009a00:	460d      	mov	r5, r1
 8009a02:	d9f4      	bls.n	80099ee <_printf_i+0x112>
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d10b      	bne.n	8009a20 <_printf_i+0x144>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	07df      	lsls	r7, r3, #31
 8009a0c:	d508      	bpl.n	8009a20 <_printf_i+0x144>
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	6861      	ldr	r1, [r4, #4]
 8009a12:	4299      	cmp	r1, r3
 8009a14:	bfde      	ittt	le
 8009a16:	2330      	movle	r3, #48	@ 0x30
 8009a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a20:	1b92      	subs	r2, r2, r6
 8009a22:	6122      	str	r2, [r4, #16]
 8009a24:	f8cd a000 	str.w	sl, [sp]
 8009a28:	464b      	mov	r3, r9
 8009a2a:	aa03      	add	r2, sp, #12
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4640      	mov	r0, r8
 8009a30:	f7ff fee6 	bl	8009800 <_printf_common>
 8009a34:	3001      	adds	r0, #1
 8009a36:	d14a      	bne.n	8009ace <_printf_i+0x1f2>
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	b004      	add	sp, #16
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	f043 0320 	orr.w	r3, r3, #32
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	4833      	ldr	r0, [pc, #204]	@ (8009b18 <_printf_i+0x23c>)
 8009a4c:	2778      	movs	r7, #120	@ 0x78
 8009a4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	6831      	ldr	r1, [r6, #0]
 8009a56:	061f      	lsls	r7, r3, #24
 8009a58:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a5c:	d402      	bmi.n	8009a64 <_printf_i+0x188>
 8009a5e:	065f      	lsls	r7, r3, #25
 8009a60:	bf48      	it	mi
 8009a62:	b2ad      	uxthmi	r5, r5
 8009a64:	6031      	str	r1, [r6, #0]
 8009a66:	07d9      	lsls	r1, r3, #31
 8009a68:	bf44      	itt	mi
 8009a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a6e:	6023      	strmi	r3, [r4, #0]
 8009a70:	b11d      	cbz	r5, 8009a7a <_printf_i+0x19e>
 8009a72:	2310      	movs	r3, #16
 8009a74:	e7ac      	b.n	80099d0 <_printf_i+0xf4>
 8009a76:	4827      	ldr	r0, [pc, #156]	@ (8009b14 <_printf_i+0x238>)
 8009a78:	e7e9      	b.n	8009a4e <_printf_i+0x172>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	f023 0320 	bic.w	r3, r3, #32
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	e7f6      	b.n	8009a72 <_printf_i+0x196>
 8009a84:	4616      	mov	r6, r2
 8009a86:	e7bd      	b.n	8009a04 <_printf_i+0x128>
 8009a88:	6833      	ldr	r3, [r6, #0]
 8009a8a:	6825      	ldr	r5, [r4, #0]
 8009a8c:	6961      	ldr	r1, [r4, #20]
 8009a8e:	1d18      	adds	r0, r3, #4
 8009a90:	6030      	str	r0, [r6, #0]
 8009a92:	062e      	lsls	r6, r5, #24
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	d501      	bpl.n	8009a9c <_printf_i+0x1c0>
 8009a98:	6019      	str	r1, [r3, #0]
 8009a9a:	e002      	b.n	8009aa2 <_printf_i+0x1c6>
 8009a9c:	0668      	lsls	r0, r5, #25
 8009a9e:	d5fb      	bpl.n	8009a98 <_printf_i+0x1bc>
 8009aa0:	8019      	strh	r1, [r3, #0]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	4616      	mov	r6, r2
 8009aa8:	e7bc      	b.n	8009a24 <_printf_i+0x148>
 8009aaa:	6833      	ldr	r3, [r6, #0]
 8009aac:	1d1a      	adds	r2, r3, #4
 8009aae:	6032      	str	r2, [r6, #0]
 8009ab0:	681e      	ldr	r6, [r3, #0]
 8009ab2:	6862      	ldr	r2, [r4, #4]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7f6 fc1a 	bl	80002f0 <memchr>
 8009abc:	b108      	cbz	r0, 8009ac2 <_printf_i+0x1e6>
 8009abe:	1b80      	subs	r0, r0, r6
 8009ac0:	6060      	str	r0, [r4, #4]
 8009ac2:	6863      	ldr	r3, [r4, #4]
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009acc:	e7aa      	b.n	8009a24 <_printf_i+0x148>
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	47d0      	blx	sl
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d0ad      	beq.n	8009a38 <_printf_i+0x15c>
 8009adc:	6823      	ldr	r3, [r4, #0]
 8009ade:	079b      	lsls	r3, r3, #30
 8009ae0:	d413      	bmi.n	8009b0a <_printf_i+0x22e>
 8009ae2:	68e0      	ldr	r0, [r4, #12]
 8009ae4:	9b03      	ldr	r3, [sp, #12]
 8009ae6:	4298      	cmp	r0, r3
 8009ae8:	bfb8      	it	lt
 8009aea:	4618      	movlt	r0, r3
 8009aec:	e7a6      	b.n	8009a3c <_printf_i+0x160>
 8009aee:	2301      	movs	r3, #1
 8009af0:	4632      	mov	r2, r6
 8009af2:	4649      	mov	r1, r9
 8009af4:	4640      	mov	r0, r8
 8009af6:	47d0      	blx	sl
 8009af8:	3001      	adds	r0, #1
 8009afa:	d09d      	beq.n	8009a38 <_printf_i+0x15c>
 8009afc:	3501      	adds	r5, #1
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	9903      	ldr	r1, [sp, #12]
 8009b02:	1a5b      	subs	r3, r3, r1
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	dcf2      	bgt.n	8009aee <_printf_i+0x212>
 8009b08:	e7eb      	b.n	8009ae2 <_printf_i+0x206>
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	f104 0619 	add.w	r6, r4, #25
 8009b10:	e7f5      	b.n	8009afe <_printf_i+0x222>
 8009b12:	bf00      	nop
 8009b14:	08009f6d 	.word	0x08009f6d
 8009b18:	08009f7e 	.word	0x08009f7e

08009b1c <memmove>:
 8009b1c:	4288      	cmp	r0, r1
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	eb01 0402 	add.w	r4, r1, r2
 8009b24:	d902      	bls.n	8009b2c <memmove+0x10>
 8009b26:	4284      	cmp	r4, r0
 8009b28:	4623      	mov	r3, r4
 8009b2a:	d807      	bhi.n	8009b3c <memmove+0x20>
 8009b2c:	1e43      	subs	r3, r0, #1
 8009b2e:	42a1      	cmp	r1, r4
 8009b30:	d008      	beq.n	8009b44 <memmove+0x28>
 8009b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b3a:	e7f8      	b.n	8009b2e <memmove+0x12>
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4601      	mov	r1, r0
 8009b40:	428a      	cmp	r2, r1
 8009b42:	d100      	bne.n	8009b46 <memmove+0x2a>
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b4e:	e7f7      	b.n	8009b40 <memmove+0x24>

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	@ (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f8 f914 	bl	8001d88 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	2408a1b0 	.word	0x2408a1b0

08009b70 <memcpy>:
 8009b70:	440a      	add	r2, r1
 8009b72:	4291      	cmp	r1, r2
 8009b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b78:	d100      	bne.n	8009b7c <memcpy+0xc>
 8009b7a:	4770      	bx	lr
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b86:	4291      	cmp	r1, r2
 8009b88:	d1f9      	bne.n	8009b7e <memcpy+0xe>
 8009b8a:	bd10      	pop	{r4, pc}

08009b8c <_realloc_r>:
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	4680      	mov	r8, r0
 8009b92:	4615      	mov	r5, r2
 8009b94:	460c      	mov	r4, r1
 8009b96:	b921      	cbnz	r1, 8009ba2 <_realloc_r+0x16>
 8009b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	f7ff bc4b 	b.w	8009438 <_malloc_r>
 8009ba2:	b92a      	cbnz	r2, 8009bb0 <_realloc_r+0x24>
 8009ba4:	f7ff fbdc 	bl	8009360 <_free_r>
 8009ba8:	2400      	movs	r4, #0
 8009baa:	4620      	mov	r0, r4
 8009bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb0:	f000 f81a 	bl	8009be8 <_malloc_usable_size_r>
 8009bb4:	4285      	cmp	r5, r0
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	d802      	bhi.n	8009bc0 <_realloc_r+0x34>
 8009bba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009bbe:	d8f4      	bhi.n	8009baa <_realloc_r+0x1e>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7ff fc38 	bl	8009438 <_malloc_r>
 8009bc8:	4607      	mov	r7, r0
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d0ec      	beq.n	8009ba8 <_realloc_r+0x1c>
 8009bce:	42b5      	cmp	r5, r6
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	bf28      	it	cs
 8009bd6:	4632      	movcs	r2, r6
 8009bd8:	f7ff ffca 	bl	8009b70 <memcpy>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4640      	mov	r0, r8
 8009be0:	f7ff fbbe 	bl	8009360 <_free_r>
 8009be4:	463c      	mov	r4, r7
 8009be6:	e7e0      	b.n	8009baa <_realloc_r+0x1e>

08009be8 <_malloc_usable_size_r>:
 8009be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bec:	1f18      	subs	r0, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bfbc      	itt	lt
 8009bf2:	580b      	ldrlt	r3, [r1, r0]
 8009bf4:	18c0      	addlt	r0, r0, r3
 8009bf6:	4770      	bx	lr

08009bf8 <_init>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	bf00      	nop
 8009bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfe:	bc08      	pop	{r3}
 8009c00:	469e      	mov	lr, r3
 8009c02:	4770      	bx	lr

08009c04 <_fini>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	bf00      	nop
 8009c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0a:	bc08      	pop	{r3}
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	4770      	bx	lr
