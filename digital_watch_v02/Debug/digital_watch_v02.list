
digital_watch_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d218  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800d4c8  0800d4c8  0000e4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d840  0800d840  0000e840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d848  0800d848  0000e848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d84c  0800d84c  0000e84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800d850  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000b6aec  24000070  0800d8bc  0000f070  2**3
                  ALLOC
  8 ._user_heap_stack 00000c04  240b6b5c  0800d8bc  0000fb5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003bced  00000000  00000000  0000f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000558b  00000000  00000000  0004ad87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0002341a  00000000  00000000  00050312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001490  00000000  00000000  00073730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00004c3d  00000000  00000000  00074bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035a48  00000000  00000000  000797fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003756c  00000000  00000000  000af245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00147332  00000000  00000000  000e67b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0022dae3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004290  00000000  00000000  0022db28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006c  00000000  00000000  00231db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d4b0 	.word	0x0800d4b0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0800d4b0 	.word	0x0800d4b0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 8000390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	461d      	mov	r5, r3
 8000398:	460e      	mov	r6, r1
 800039a:	4604      	mov	r4, r0
 800039c:	9b08      	ldr	r3, [sp, #32]
  uint32_t readSize= 0;
 800039e:	2100      	movs	r1, #0
  
  pavi->pVideoBuffer = pVideoBuffer;
 80003a0:	6342      	str	r2, [r0, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;

  pavi->pAudioBuffer = pAudioBuffer;
 80003a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
{
 80003a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  pavi->VideoBufferSize = VideoBufferSize;
 80003a6:	6385      	str	r5, [r0, #56]	@ 0x38
  pavi->AudioBufferSize = AudioBufferSize;
 80003a8:	6403      	str	r3, [r0, #64]	@ 0x40
  
  f_lseek(file, 0 );
 80003aa:	4630      	mov	r0, r6
  uint32_t readSize= 0;
 80003ac:	9101      	str	r1, [sp, #4]
  f_lseek(file, 0 );
 80003ae:	f00c f9ed 	bl	800c78c <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 80003b2:	ab01      	add	r3, sp, #4
 80003b4:	462a      	mov	r2, r5
 80003b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80003b8:	4630      	mov	r0, r6
 80003ba:	f00c f82d 	bl	800c418 <f_read>
  if(readSize != VideoBufferSize)
 80003be:	9b01      	ldr	r3, [sp, #4]
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d104      	bne.n	80003ce <AVI_ParserInit+0x3e>
  {
    return 1;
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 80003c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  if(aviheader->RiffID != AVI_RIFF_ID)
 80003c6:	4a86      	ldr	r2, [pc, #536]	@ (80005e0 <AVI_ParserInit+0x250>)
 80003c8:	6819      	ldr	r1, [r3, #0]
 80003ca:	4291      	cmp	r1, r2
 80003cc:	d003      	beq.n	80003d6 <AVI_ParserInit+0x46>
    return 1;
 80003ce:	2001      	movs	r0, #1

  pavi->FileSize= f_size(file);
  pavi->CurrentImage=0;
  
  return  0;
}
 80003d0:	b002      	add	sp, #8
 80003d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(aviheader->AviID != AVI_AVI_ID)
 80003d6:	4a83      	ldr	r2, [pc, #524]	@ (80005e4 <AVI_ParserInit+0x254>)
 80003d8:	6899      	ldr	r1, [r3, #8]
 80003da:	4291      	cmp	r1, r2
 80003dc:	d1f7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListID != AVI_LIST_ID)
 80003de:	4982      	ldr	r1, [pc, #520]	@ (80005e8 <AVI_ParserInit+0x258>)
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	428a      	cmp	r2, r1
 80003e4:	d1f3      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_HDRL_ID)
 80003e6:	4981      	ldr	r1, [pc, #516]	@ (80005ec <AVI_ParserInit+0x25c>)
 80003e8:	6958      	ldr	r0, [r3, #20]
 80003ea:	4288      	cmp	r0, r1
 80003ec:	d1ef      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(avihheader->BlockID != AVI_AVIH_ID)
 80003ee:	f1a1 6181 	sub.w	r1, r1, #67633152	@ 0x4080000
 80003f2:	6998      	ldr	r0, [r3, #24]
 80003f4:	f5a1 416e 	sub.w	r1, r1, #60928	@ 0xee00
 80003f8:	3907      	subs	r1, #7
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d1e7      	bne.n	80003ce <AVI_ParserInit+0x3e>
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 80003fe:	6a18      	ldr	r0, [r3, #32]
 8000400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000402:	e9c4 0100 	strd	r0, r1, [r4]
  buf+=avihheader->BlockSize+8;            
 8000406:	69d9      	ldr	r1, [r3, #28]
 8000408:	3120      	adds	r1, #32
  if(listheader->ListID != AVI_LIST_ID)
 800040a:	5858      	ldr	r0, [r3, r1]
  buf+=avihheader->BlockSize+8;            
 800040c:	4419      	add	r1, r3
  if(listheader->ListID != AVI_LIST_ID)
 800040e:	4290      	cmp	r0, r2
 8000410:	d1dd      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(listheader->ListType != AVI_STRL_ID)
 8000412:	4a77      	ldr	r2, [pc, #476]	@ (80005f0 <AVI_ParserInit+0x260>)
 8000414:	6888      	ldr	r0, [r1, #8]
 8000416:	4290      	cmp	r0, r2
 8000418:	d1d9      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->BlockID != AVI_STRH_ID)
 800041a:	f102 427c 	add.w	r2, r2, #4227858432	@ 0xfc000000
 800041e:	68c8      	ldr	r0, [r1, #12]
 8000420:	4290      	cmp	r0, r2
 8000422:	d1d4      	bne.n	80003ce <AVI_ParserInit+0x3e>
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 8000424:	694a      	ldr	r2, [r1, #20]
 8000426:	4873      	ldr	r0, [pc, #460]	@ (80005f4 <AVI_ParserInit+0x264>)
 8000428:	4282      	cmp	r2, r0
 800042a:	d02a      	beq.n	8000482 <AVI_ParserInit+0xf2>
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800042c:	4872      	ldr	r0, [pc, #456]	@ (80005f8 <AVI_ParserInit+0x268>)
 800042e:	4282      	cmp	r2, r0
 8000430:	d047      	beq.n	80004c2 <AVI_ParserInit+0x132>
  for(i=0;i<size;i++)
 8000432:	3d04      	subs	r5, #4
 8000434:	d0cb      	beq.n	80003ce <AVI_ParserInit+0x3e>
 8000436:	2200      	movs	r2, #0
 8000438:	4611      	mov	r1, r2
 800043a:	e002      	b.n	8000442 <AVI_ParserInit+0xb2>
 800043c:	4295      	cmp	r5, r2
 800043e:	4611      	mov	r1, r2
 8000440:	d9c5      	bls.n	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 8000442:	5c58      	ldrb	r0, [r3, r1]
  for(i=0;i<size;i++)
 8000444:	3201      	adds	r2, #1
    if(buf[i] == id[0])
 8000446:	eb03 0c01 	add.w	ip, r3, r1
 800044a:	286d      	cmp	r0, #109	@ 0x6d
  for(i=0;i<size;i++)
 800044c:	b292      	uxth	r2, r2
    if(buf[i] == id[0])
 800044e:	d1f5      	bne.n	800043c <AVI_ParserInit+0xac>
      if(buf[i+1] == id[1])
 8000450:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8000454:	286f      	cmp	r0, #111	@ 0x6f
 8000456:	d1f1      	bne.n	800043c <AVI_ParserInit+0xac>
        if(buf[i+2] == id[2])  
 8000458:	f89c 0002 	ldrb.w	r0, [ip, #2]
 800045c:	2876      	cmp	r0, #118	@ 0x76
 800045e:	d1ed      	bne.n	800043c <AVI_ParserInit+0xac>
          if(buf[i+3] == id[3])
 8000460:	f89c 0003 	ldrb.w	r0, [ip, #3]
 8000464:	2869      	cmp	r0, #105	@ 0x69
 8000466:	d1e9      	bne.n	800043c <AVI_ParserInit+0xac>
  if(offset == 0)
 8000468:	2900      	cmp	r1, #0
 800046a:	d0b0      	beq.n	80003ce <AVI_ParserInit+0x3e>
  if(pavi->aviInfo.SampleRate)
 800046c:	6963      	ldr	r3, [r4, #20]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d169      	bne.n	8000546 <AVI_ParserInit+0x1b6>
  pavi->CurrentImage=0;
 8000472:	2300      	movs	r3, #0
  pavi->FileSize= f_size(file);
 8000474:	68f2      	ldr	r2, [r6, #12]
  return  0;
 8000476:	4618      	mov	r0, r3
  pavi->FileSize= f_size(file);
 8000478:	6462      	str	r2, [r4, #68]	@ 0x44
  pavi->CurrentImage=0;
 800047a:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800047c:	b002      	add	sp, #8
 800047e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 8000482:	4a5e      	ldr	r2, [pc, #376]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000484:	6988      	ldr	r0, [r1, #24]
 8000486:	4290      	cmp	r0, r2
 8000488:	d1a1      	bne.n	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048a:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800048c:	485c      	ldr	r0, [pc, #368]	@ (8000600 <AVI_ParserInit+0x270>)
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800048e:	3214      	adds	r2, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000490:	4f5c      	ldr	r7, [pc, #368]	@ (8000604 <AVI_ParserInit+0x274>)
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 8000492:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 8000494:	485c      	ldr	r0, [pc, #368]	@ (8000608 <AVI_ParserInit+0x278>)
 8000496:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000498:	5888      	ldr	r0, [r1, r2]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800049a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800049c:	42b8      	cmp	r0, r7
 800049e:	d196      	bne.n	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 80004a0:	e9d2 7203 	ldrd	r7, r2, [r2, #12]
 80004a4:	e9c4 7203 	strd	r7, r2, [r4, #12]
    buf+=listheader->BlockSize+8;          
 80004a8:	684a      	ldr	r2, [r1, #4]
    if(listheader->ListID != AVI_LIST_ID)
 80004aa:	4f4f      	ldr	r7, [pc, #316]	@ (80005e8 <AVI_ParserInit+0x258>)
    buf+=listheader->BlockSize+8;          
 80004ac:	3208      	adds	r2, #8
    if(listheader->ListID != AVI_LIST_ID)
 80004ae:	f851 c002 	ldr.w	ip, [r1, r2]
    buf+=listheader->BlockSize+8;          
 80004b2:	440a      	add	r2, r1
    if(listheader->ListID != AVI_LIST_ID)
 80004b4:	45bc      	cmp	ip, r7
 80004b6:	d070      	beq.n	800059a <AVI_ParserInit+0x20a>
      pavi->aviInfo.SampleRate=0;          
 80004b8:	2200      	movs	r2, #0
 80004ba:	6162      	str	r2, [r4, #20]
      pavi->aviInfo.Channels=0;          
 80004bc:	8322      	strh	r2, [r4, #24]
      pavi->aviInfo.AudioType=0;          
 80004be:	83a2      	strh	r2, [r4, #28]
 80004c0:	e7b7      	b.n	8000432 <AVI_ParserInit+0xa2>
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c2:	690a      	ldr	r2, [r1, #16]
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c4:	4851      	ldr	r0, [pc, #324]	@ (800060c <AVI_ParserInit+0x27c>)
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004c6:	3214      	adds	r2, #20
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 80004c8:	6260      	str	r0, [r4, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004ca:	4851      	ldr	r0, [pc, #324]	@ (8000610 <AVI_ParserInit+0x280>)
    if(wavheader->BlockID != AVI_STRF_ID)
 80004cc:	f851 c002 	ldr.w	ip, [r1, r2]
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80004d0:	440a      	add	r2, r1
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 80004d2:	62a0      	str	r0, [r4, #40]	@ 0x28
    if(wavheader->BlockID != AVI_STRF_ID)
 80004d4:	484b      	ldr	r0, [pc, #300]	@ (8000604 <AVI_ParserInit+0x274>)
 80004d6:	4584      	cmp	ip, r0
 80004d8:	f47f af79 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004dc:	68d7      	ldr	r7, [r2, #12]
    buf+=listheader->BlockSize+8;          
 80004de:	6848      	ldr	r0, [r1, #4]
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 80004e0:	6167      	str	r7, [r4, #20]
    buf+=listheader->BlockSize+8;          
 80004e2:	3008      	adds	r0, #8
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004e4:	8957      	ldrh	r7, [r2, #10]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004e6:	8912      	ldrh	r2, [r2, #8]
    if(listheader->ListID != AVI_LIST_ID)
 80004e8:	f851 e000 	ldr.w	lr, [r1, r0]
    pavi->aviInfo.Channels=wavheader->Channels;        
 80004ec:	8327      	strh	r7, [r4, #24]
    if(listheader->ListID != AVI_LIST_ID)
 80004ee:	4f3e      	ldr	r7, [pc, #248]	@ (80005e8 <AVI_ParserInit+0x258>)
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 80004f0:	83a2      	strh	r2, [r4, #28]
    buf+=listheader->BlockSize+8;          
 80004f2:	180a      	adds	r2, r1, r0
    if(listheader->ListID != AVI_LIST_ID)
 80004f4:	45be      	cmp	lr, r7
 80004f6:	f47f af6a 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(listheader->ListType != AVI_STRL_ID)
 80004fa:	493d      	ldr	r1, [pc, #244]	@ (80005f0 <AVI_ParserInit+0x260>)
 80004fc:	6890      	ldr	r0, [r2, #8]
 80004fe:	4288      	cmp	r0, r1
 8000500:	f47f af65 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->BlockID != AVI_STRH_ID)
 8000504:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 8000508:	68d0      	ldr	r0, [r2, #12]
 800050a:	4288      	cmp	r0, r1
 800050c:	f47f af5f 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 8000510:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 8000514:	6950      	ldr	r0, [r2, #20]
 8000516:	f501 31fa 	add.w	r1, r1, #128000	@ 0x1f400
 800051a:	f201 1103 	addw	r1, r1, #259	@ 0x103
 800051e:	4288      	cmp	r0, r1
 8000520:	f47f af55 	bne.w	80003ce <AVI_ParserInit+0x3e>
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 8000524:	6911      	ldr	r1, [r2, #16]
 8000526:	3114      	adds	r1, #20
    if(bmpheader->BlockID != AVI_STRF_ID)
 8000528:	5850      	ldr	r0, [r2, r1]
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800052a:	440a      	add	r2, r1
    if(bmpheader->BlockID != AVI_STRF_ID)
 800052c:	4560      	cmp	r0, ip
 800052e:	f47f af4e 	bne.w	80003ce <AVI_ParserInit+0x3e>
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 8000532:	4932      	ldr	r1, [pc, #200]	@ (80005fc <AVI_ParserInit+0x26c>)
 8000534:	6990      	ldr	r0, [r2, #24]
 8000536:	4288      	cmp	r0, r1
 8000538:	f47f af49 	bne.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800053c:	e9d2 1203 	ldrd	r1, r2, [r2, #12]
 8000540:	e9c4 1203 	strd	r1, r2, [r4, #12]
 8000544:	e775      	b.n	8000432 <AVI_ParserInit+0xa2>
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 8000546:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
  for(i=0;i<size;i++)
 800054a:	2300      	movs	r3, #0
    if(buf[i] == id[0])
 800054c:	f898 0000 	ldrb.w	r0, [r8]
  for(i=0;i<size;i++)
 8000550:	4619      	mov	r1, r3
 8000552:	e003      	b.n	800055c <AVI_ParserInit+0x1cc>
 8000554:	429d      	cmp	r5, r3
 8000556:	4619      	mov	r1, r3
 8000558:	f67f af39 	bls.w	80003ce <AVI_ParserInit+0x3e>
    if(buf[i] == id[0])
 800055c:	f81c 2001 	ldrb.w	r2, [ip, r1]
  for(i=0;i<size;i++)
 8000560:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 8000562:	4282      	cmp	r2, r0
  for(i=0;i<size;i++)
 8000564:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000566:	d1f5      	bne.n	8000554 <AVI_ParserInit+0x1c4>
      if(buf[i+1] == id[1])
 8000568:	eb0c 0201 	add.w	r2, ip, r1
 800056c:	f898 e001 	ldrb.w	lr, [r8, #1]
 8000570:	7857      	ldrb	r7, [r2, #1]
 8000572:	4577      	cmp	r7, lr
 8000574:	d1ee      	bne.n	8000554 <AVI_ParserInit+0x1c4>
        if(buf[i+2] == id[2])  
 8000576:	f892 e002 	ldrb.w	lr, [r2, #2]
 800057a:	f898 7002 	ldrb.w	r7, [r8, #2]
 800057e:	45be      	cmp	lr, r7
 8000580:	d1e8      	bne.n	8000554 <AVI_ParserInit+0x1c4>
          if(buf[i+3] == id[3])
 8000582:	f892 e003 	ldrb.w	lr, [r2, #3]
 8000586:	f898 7003 	ldrb.w	r7, [r8, #3]
 800058a:	45be      	cmp	lr, r7
 800058c:	d1e2      	bne.n	8000554 <AVI_ParserInit+0x1c4>
    if(offset == 0)
 800058e:	2900      	cmp	r1, #0
 8000590:	f43f af1d 	beq.w	80003ce <AVI_ParserInit+0x3e>
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 8000594:	8893      	ldrh	r3, [r2, #4]
 8000596:	8363      	strh	r3, [r4, #26]
 8000598:	e76b      	b.n	8000472 <AVI_ParserInit+0xe2>
      if(listheader->ListType != AVI_STRL_ID)
 800059a:	4915      	ldr	r1, [pc, #84]	@ (80005f0 <AVI_ParserInit+0x260>)
 800059c:	6897      	ldr	r7, [r2, #8]
 800059e:	428f      	cmp	r7, r1
 80005a0:	f47f af15 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->BlockID != AVI_STRH_ID)
 80005a4:	f101 417c 	add.w	r1, r1, #4227858432	@ 0xfc000000
 80005a8:	68d7      	ldr	r7, [r2, #12]
 80005aa:	428f      	cmp	r7, r1
 80005ac:	f47f af0f 	bne.w	80003ce <AVI_ParserInit+0x3e>
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 80005b0:	f101 612f 	add.w	r1, r1, #183500800	@ 0xaf00000
 80005b4:	6957      	ldr	r7, [r2, #20]
 80005b6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 80005ba:	31ee      	adds	r1, #238	@ 0xee
 80005bc:	428f      	cmp	r7, r1
 80005be:	f47f af06 	bne.w	80003ce <AVI_ParserInit+0x3e>
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c2:	6911      	ldr	r1, [r2, #16]
 80005c4:	3114      	adds	r1, #20
      if(wavheader->BlockID != AVI_STRF_ID)
 80005c6:	5857      	ldr	r7, [r2, r1]
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 80005c8:	440a      	add	r2, r1
      if(wavheader->BlockID != AVI_STRF_ID)
 80005ca:	4287      	cmp	r7, r0
 80005cc:	f47f aeff 	bne.w	80003ce <AVI_ParserInit+0x3e>
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 80005d0:	68d1      	ldr	r1, [r2, #12]
 80005d2:	6161      	str	r1, [r4, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d4:	8951      	ldrh	r1, [r2, #10]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005d6:	8912      	ldrh	r2, [r2, #8]
      pavi->aviInfo.Channels=wavheader->Channels;  
 80005d8:	8321      	strh	r1, [r4, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 80005da:	83a2      	strh	r2, [r4, #28]
 80005dc:	e729      	b.n	8000432 <AVI_ParserInit+0xa2>
 80005de:	bf00      	nop
 80005e0:	46464952 	.word	0x46464952
 80005e4:	20495641 	.word	0x20495641
 80005e8:	5453494c 	.word	0x5453494c
 80005ec:	6c726468 	.word	0x6c726468
 80005f0:	6c727473 	.word	0x6c727473
 80005f4:	73646976 	.word	0x73646976
 80005f8:	73647561 	.word	0x73647561
 80005fc:	47504a4d 	.word	0x47504a4d
 8000600:	0800d4c8 	.word	0x0800d4c8
 8000604:	66727473 	.word	0x66727473
 8000608:	0800d4d0 	.word	0x0800d4d0
 800060c:	0800d4d8 	.word	0x0800d4d8
 8000610:	0800d4e0 	.word	0x0800d4e0

08000614 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t  offset ;
  uint32_t readSize = 0;
 8000616:	2300      	movs	r3, #0
{
 8000618:	b083      	sub	sp, #12
  
  if(pavi->CurrentImage== 0 )
 800061a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
{
 800061c:	4605      	mov	r5, r0
 800061e:	460e      	mov	r6, r1
 8000620:	4617      	mov	r7, r2
  uint32_t readSize = 0;
 8000622:	9301      	str	r3, [sp, #4]
  if(pavi->CurrentImage== 0 )
 8000624:	b164      	cbz	r4, 8000640 <AVI_GetFrame+0x2c>
    f_lseek(file, offset + 12 );
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 8000626:	8beb      	ldrh	r3, [r5, #30]
 8000628:	f246 4263 	movw	r2, #25699	@ 0x6463
 800062c:	4293      	cmp	r3, r2
 800062e:	d046      	beq.n	80006be <AVI_GetFrame+0xaa>

	}
    
    return AVI_VIDEO_FRAME;
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 8000630:	f247 7262 	movw	r2, #30562	@ 0x7762
 8000634:	4293      	cmp	r3, r2
 8000636:	f000 808c 	beq.w	8000752 <AVI_GetFrame+0x13e>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
    
  }
  
  return 0;
 800063a:	2000      	movs	r0, #0
}
 800063c:	b003      	add	sp, #12
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f_lseek(file, 0 ); /* Go to the file start */
 8000640:	4621      	mov	r1, r4
 8000642:	4630      	mov	r0, r6
 8000644:	f00c f8a2 	bl	800c78c <f_lseek>
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 8000648:	ab01      	add	r3, sp, #4
 800064a:	4630      	mov	r0, r6
 800064c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	@ 0x34
 8000650:	f00b fee2 	bl	800c418 <f_read>
  size-=4;
 8000654:	e9d5 210d 	ldrd	r2, r1, [r5, #52]	@ 0x34
  for(i=0;i<size;i++)
 8000658:	3904      	subs	r1, #4
 800065a:	d01d      	beq.n	8000698 <AVI_GetFrame+0x84>
 800065c:	4623      	mov	r3, r4
 800065e:	e002      	b.n	8000666 <AVI_GetFrame+0x52>
 8000660:	4299      	cmp	r1, r3
 8000662:	461c      	mov	r4, r3
 8000664:	d918      	bls.n	8000698 <AVI_GetFrame+0x84>
    if(buf[i] == id[0])
 8000666:	f812 c004 	ldrb.w	ip, [r2, r4]
  for(i=0;i<size;i++)
 800066a:	3301      	adds	r3, #1
    if(buf[i] == id[0])
 800066c:	f1bc 0f6d 	cmp.w	ip, #109	@ 0x6d
  for(i=0;i<size;i++)
 8000670:	b29b      	uxth	r3, r3
    if(buf[i] == id[0])
 8000672:	d1f5      	bne.n	8000660 <AVI_GetFrame+0x4c>
      if(buf[i+1] == id[1])
 8000674:	1910      	adds	r0, r2, r4
 8000676:	f890 c001 	ldrb.w	ip, [r0, #1]
 800067a:	f1bc 0f6f 	cmp.w	ip, #111	@ 0x6f
 800067e:	d1ef      	bne.n	8000660 <AVI_GetFrame+0x4c>
        if(buf[i+2] == id[2])  
 8000680:	f890 c002 	ldrb.w	ip, [r0, #2]
 8000684:	f1bc 0f76 	cmp.w	ip, #118	@ 0x76
 8000688:	d1ea      	bne.n	8000660 <AVI_GetFrame+0x4c>
          if(buf[i+3] == id[3])
 800068a:	78c0      	ldrb	r0, [r0, #3]
 800068c:	2869      	cmp	r0, #105	@ 0x69
 800068e:	d1e7      	bne.n	8000660 <AVI_GetFrame+0x4c>
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 8000690:	1d23      	adds	r3, r4, #4
    f_lseek(file, offset + 12 );
 8000692:	f104 010c 	add.w	r1, r4, #12
 8000696:	e001      	b.n	800069c <AVI_GetFrame+0x88>
  for(i=0;i<size;i++)
 8000698:	210c      	movs	r1, #12
 800069a:	2304      	movs	r3, #4
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800069c:	441a      	add	r2, r3
    f_lseek(file, offset + 12 );
 800069e:	4630      	mov	r0, r6
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006a0:	8853      	ldrh	r3, [r2, #2]
 80006a2:	ba5b      	rev16	r3, r3
 80006a4:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006a6:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006a8:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 80006aa:	bf48      	it	mi
 80006ac:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006ae:	622b      	str	r3, [r5, #32]
    f_lseek(file, offset + 12 );
 80006b0:	f00c f86c 	bl	800c78c <f_lseek>
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 80006b4:	8beb      	ldrh	r3, [r5, #30]
 80006b6:	f246 4263 	movw	r2, #25699	@ 0x6463
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d1b8      	bne.n	8000630 <AVI_GetFrame+0x1c>
	if(skipFlag == 1)
 80006be:	2f01      	cmp	r7, #1
 80006c0:	d018      	beq.n	80006f4 <AVI_GetFrame+0xe0>
	else if(skipFlag == 2)
 80006c2:	2f02      	cmp	r7, #2
 80006c4:	d02d      	beq.n	8000722 <AVI_GetFrame+0x10e>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006c6:	6a29      	ldr	r1, [r5, #32]
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006c8:	ab01      	add	r3, sp, #4
 80006ca:	4630      	mov	r0, r6
 80006cc:	f101 0208 	add.w	r2, r1, #8
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006d0:	6329      	str	r1, [r5, #48]	@ 0x30
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 80006d2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80006d4:	f00b fea0 	bl	800c418 <f_read>
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 80006d8:	6a2a      	ldr	r2, [r5, #32]
 80006da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80006dc:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 80006de:	885a      	ldrh	r2, [r3, #2]
 80006e0:	ba52      	rev16	r2, r2
 80006e2:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 80006e4:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 80006e6:	07d9      	lsls	r1, r3, #31
 80006e8:	461a      	mov	r2, r3
 80006ea:	d518      	bpl.n	800071e <AVI_GetFrame+0x10a>
    pavi->aviInfo.StreamSize++;
 80006ec:	3301      	adds	r3, #1
 80006ee:	622b      	str	r3, [r5, #32]
    return AVI_VIDEO_FRAME;
 80006f0:	2001      	movs	r0, #1
 80006f2:	e7a3      	b.n	800063c <AVI_GetFrame+0x28>
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006f4:	6a2b      	ldr	r3, [r5, #32]
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006f6:	4630      	mov	r0, r6
 80006f8:	69b1      	ldr	r1, [r6, #24]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 80006fa:	632b      	str	r3, [r5, #48]	@ 0x30
		f_lseek(file, f_tell(file) + pavi->FrameSize);
 80006fc:	4419      	add	r1, r3
 80006fe:	f00c f845 	bl	800c78c <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000702:	ab01      	add	r3, sp, #4
 8000704:	2208      	movs	r2, #8
 8000706:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000708:	4630      	mov	r0, r6
 800070a:	f00b fe85 	bl	800c418 <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800070e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000710:	8853      	ldrh	r3, [r2, #2]
 8000712:	ba5b      	rev16	r3, r3
 8000714:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000716:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000718:	07dc      	lsls	r4, r3, #31
 800071a:	461a      	mov	r2, r3
 800071c:	d4e6      	bmi.n	80006ec <AVI_GetFrame+0xd8>
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800071e:	622a      	str	r2, [r5, #32]
 8000720:	e7e6      	b.n	80006f0 <AVI_GetFrame+0xdc>
		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 8000722:	69b3      	ldr	r3, [r6, #24]
 8000724:	4630      	mov	r0, r6
 8000726:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8000728:	3b10      	subs	r3, #16
 800072a:	1a59      	subs	r1, r3, r1
 800072c:	f00c f82e 	bl	800c78c <f_lseek>
	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 8000730:	ab01      	add	r3, sp, #4
 8000732:	2208      	movs	r2, #8
 8000734:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8000736:	4630      	mov	r0, r6
 8000738:	f00b fe6e 	bl	800c418 <f_read>
	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800073c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800073e:	8853      	ldrh	r3, [r2, #2]
 8000740:	ba5b      	rev16	r3, r3
 8000742:	83eb      	strh	r3, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 8000744:	6853      	ldr	r3, [r2, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000746:	07d8      	lsls	r0, r3, #31
    pavi->aviInfo.StreamSize++;
 8000748:	bf48      	it	mi
 800074a:	3301      	addmi	r3, #1
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800074c:	622b      	str	r3, [r5, #32]
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800074e:	632b      	str	r3, [r5, #48]	@ 0x30
 8000750:	e7ce      	b.n	80006f0 <AVI_GetFrame+0xdc>
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 8000752:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000754:	ab01      	add	r3, sp, #4
 8000756:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8000758:	4630      	mov	r0, r6
 800075a:	3208      	adds	r2, #8
 800075c:	f00b fe5c 	bl	800c418 <f_read>
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000760:	6a2a      	ldr	r2, [r5, #32]
 8000762:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return AVI_AUDIO_FRAME;
 8000764:	2002      	movs	r0, #2
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 8000766:	4413      	add	r3, r2
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 8000768:	885a      	ldrh	r2, [r3, #2]
 800076a:	ba52      	rev16	r2, r2
 800076c:	83ea      	strh	r2, [r5, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800076e:	685b      	ldr	r3, [r3, #4]
  if(pavi->aviInfo.StreamSize%2)
 8000770:	07da      	lsls	r2, r3, #31
    pavi->aviInfo.StreamSize++;
 8000772:	bf48      	it	mi
 8000774:	3301      	addmi	r3, #1
 8000776:	622b      	str	r3, [r5, #32]
 8000778:	e760      	b.n	800063c <AVI_GetFrame+0x28>
 800077a:	bf00      	nop

0800077c <GC9A01_write_data.constprop.0>:
    GC9A01_set_chip_select(OFF);
    GC9A01_spi_tx(&cmd, sizeof(cmd));
    GC9A01_set_chip_select(ON);
}

void GC9A01_write_data(uint8_t *data, size_t len) {
 800077c:	b538      	push	{r3, r4, r5, lr}
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800077e:	4c0e      	ldr	r4, [pc, #56]	@ (80007b8 <GC9A01_write_data.constprop.0+0x3c>)
void GC9A01_write_data(uint8_t *data, size_t len) {
 8000780:	4605      	mov	r5, r0
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	4620      	mov	r0, r4
 8000788:	f003 ff38 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800078c:	4620      	mov	r0, r4
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	f003 ff33 	bl	80045fc <HAL_GPIO_WritePin>
HAL_StatusTypeDef ret;
int GC9A01_spi_tx(uint8_t *data, uint16_t size)
{


	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000796:	4629      	mov	r1, r5
 8000798:	2201      	movs	r2, #1
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <GC9A01_write_data.constprop.0+0x40>)
 80007a0:	f008 fef8 	bl	8009594 <HAL_SPI_Transmit>
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <GC9A01_write_data.constprop.0+0x44>)
 80007a6:	4605      	mov	r5, r0
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	4620      	mov	r0, r4
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80007ac:	701d      	strb	r5, [r3, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007ae:	4611      	mov	r1, r2
}
 80007b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007b4:	f003 bf22 	b.w	80045fc <HAL_GPIO_WritePin>
 80007b8:	58020400 	.word	0x58020400
 80007bc:	240001a0 	.word	0x240001a0
 80007c0:	2400008c 	.word	0x2400008c

080007c4 <GC9A01_set_data_command>:
    if (val==0) {
 80007c4:	4602      	mov	r2, r0
 80007c6:	b100      	cbz	r0, 80007ca <GC9A01_set_data_command+0x6>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4801      	ldr	r0, [pc, #4]	@ (80007d4 <GC9A01_set_data_command+0x10>)
 80007ce:	f003 bf15 	b.w	80045fc <HAL_GPIO_WritePin>
 80007d2:	bf00      	nop
 80007d4:	58020400 	.word	0x58020400

080007d8 <GC9A01_set_chip_select>:
    if (val==0) {
 80007d8:	4602      	mov	r2, r0
 80007da:	b918      	cbnz	r0, 80007e4 <GC9A01_set_chip_select+0xc>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80007dc:	2101      	movs	r1, #1
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <GC9A01_set_chip_select+0x18>)
 80007e0:	f003 bf0c 	b.w	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <GC9A01_set_chip_select+0x18>)
 80007e8:	4611      	mov	r1, r2
 80007ea:	f003 bf07 	b.w	80045fc <HAL_GPIO_WritePin>
 80007ee:	bf00      	nop
 80007f0:	58020400 	.word	0x58020400

080007f4 <GC9A01_write_command>:
void GC9A01_write_command(uint8_t cmd) {
 80007f4:	b510      	push	{r4, lr}
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80007f6:	4c11      	ldr	r4, [pc, #68]	@ (800083c <GC9A01_write_command+0x48>)
void GC9A01_write_command(uint8_t cmd) {
 80007f8:	b082      	sub	sp, #8
 80007fa:	4603      	mov	r3, r0
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	4620      	mov	r0, r4
 8000800:	2102      	movs	r1, #2
void GC9A01_write_command(uint8_t cmd) {
 8000802:	f88d 3007 	strb.w	r3, [sp, #7]
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 8000806:	f003 fef9 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800080a:	4620      	mov	r0, r4
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	f003 fef4 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000814:	f10d 0107 	add.w	r1, sp, #7
 8000818:	2201      	movs	r2, #1
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	4808      	ldr	r0, [pc, #32]	@ (8000840 <GC9A01_write_command+0x4c>)
 8000820:	f008 feb8 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000824:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000826:	4684      	mov	ip, r0
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <GC9A01_write_command+0x50>)
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800082a:	4620      	mov	r0, r4
 800082c:	4611      	mov	r1, r2
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800082e:	f883 c000 	strb.w	ip, [r3]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000832:	f003 fee3 	bl	80045fc <HAL_GPIO_WritePin>
}
 8000836:	b002      	add	sp, #8
 8000838:	bd10      	pop	{r4, pc}
 800083a:	bf00      	nop
 800083c:	58020400 	.word	0x58020400
 8000840:	240001a0 	.word	0x240001a0
 8000844:	2400008c 	.word	0x2400008c

08000848 <GC9A01_init>:
void GC9A01_init(void) {
 8000848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	4cfc      	ldr	r4, [pc, #1008]	@ (8000c40 <GC9A01_init+0x3f8>)
void GC9A01_init(void) {
 8000850:	b083      	sub	sp, #12
 8000852:	2514      	movs	r5, #20
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000854:	4611      	mov	r1, r2
 8000856:	4620      	mov	r0, r4
 8000858:	f003 fed0 	bl	80045fc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800085c:	2005      	movs	r0, #5
 800085e:	f003 fb33 	bl	8003ec8 <HAL_Delay>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2104      	movs	r1, #4
 8000866:	4620      	mov	r0, r4
 8000868:	f003 fec8 	bl	80045fc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f003 fb2b 	bl	8003ec8 <HAL_Delay>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2104      	movs	r1, #4
 8000876:	4620      	mov	r0, r4
 8000878:	f003 fec0 	bl	80045fc <HAL_GPIO_WritePin>
    HAL_Delay(120);
 800087c:	2078      	movs	r0, #120	@ 0x78
 800087e:	f003 fb23 	bl	8003ec8 <HAL_Delay>
    GC9A01_write_command(0xEF);
 8000882:	20ef      	movs	r0, #239	@ 0xef
 8000884:	f7ff ffb6 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 8000888:	20eb      	movs	r0, #235	@ 0xeb
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800088a:	4eee      	ldr	r6, [pc, #952]	@ (8000c44 <GC9A01_init+0x3fc>)
    GC9A01_write_command(0xEB);
 800088c:	f7ff ffb2 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000890:	4620      	mov	r0, r4
 8000892:	2201      	movs	r2, #1
 8000894:	2102      	movs	r1, #2
 8000896:	f88d 5007 	strb.w	r5, [sp, #7]
 800089a:	f003 feaf 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800089e:	4620      	mov	r0, r4
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	f003 feaa 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	f10d 0107 	add.w	r1, sp, #7
 80008b0:	2201      	movs	r2, #1
 80008b2:	4630      	mov	r0, r6
 80008b4:	4fe4      	ldr	r7, [pc, #912]	@ (8000c48 <GC9A01_init+0x400>)
 80008b6:	f008 fe6d 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80008ba:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80008bc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80008be:	4620      	mov	r0, r4
 80008c0:	4611      	mov	r1, r2
 80008c2:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 80008c6:	f003 fe99 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xFE);
 80008ca:	20fe      	movs	r0, #254	@ 0xfe
 80008cc:	f7ff ff92 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 80008d0:	20ef      	movs	r0, #239	@ 0xef
 80008d2:	f7ff ff8f 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0xEB);
 80008d6:	20eb      	movs	r0, #235	@ 0xeb
 80008d8:	f7ff ff8c 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80008dc:	4620      	mov	r0, r4
 80008de:	2201      	movs	r2, #1
 80008e0:	2102      	movs	r1, #2
 80008e2:	f88d 5007 	strb.w	r5, [sp, #7]
 80008e6:	f003 fe89 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80008ea:	4620      	mov	r0, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	f04f 0900 	mov.w	r9, #0
 80008f4:	f003 fe82 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	f10d 0107 	add.w	r1, sp, #7
 8000900:	2201      	movs	r2, #1
 8000902:	4630      	mov	r0, r6
 8000904:	f04f 0802 	mov.w	r8, #2
 8000908:	f008 fe44 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800090c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800090e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000910:	4620      	mov	r0, r4
 8000912:	4611      	mov	r1, r2
 8000914:	f04f 0a08 	mov.w	sl, #8
 8000918:	f003 fe70 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x84);
 800091c:	2084      	movs	r0, #132	@ 0x84
 800091e:	f7ff ff69 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 8000922:	2340      	movs	r3, #64	@ 0x40
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000924:	4620      	mov	r0, r4
 8000926:	2201      	movs	r2, #1
 8000928:	2102      	movs	r1, #2
 800092a:	f88d 3007 	strb.w	r3, [sp, #7]
 800092e:	f003 fe65 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000932:	4620      	mov	r0, r4
 8000934:	2200      	movs	r2, #0
 8000936:	2101      	movs	r1, #1
 8000938:	f003 fe60 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	f10d 0107 	add.w	r1, sp, #7
 8000944:	2201      	movs	r2, #1
 8000946:	4630      	mov	r0, r6
 8000948:	f008 fe24 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800094c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800094e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000950:	4620      	mov	r0, r4
 8000952:	4611      	mov	r1, r2
 8000954:	f003 fe52 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x85);
 8000958:	2085      	movs	r0, #133	@ 0x85
 800095a:	f7ff ff4b 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800095e:	4620      	mov	r0, r4
 8000960:	2201      	movs	r2, #1
 8000962:	2102      	movs	r1, #2
 8000964:	f88d b007 	strb.w	fp, [sp, #7]
 8000968:	f003 fe48 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800096c:	4620      	mov	r0, r4
 800096e:	2200      	movs	r2, #0
 8000970:	2101      	movs	r1, #1
 8000972:	f003 fe43 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	f10d 0107 	add.w	r1, sp, #7
 800097e:	2201      	movs	r2, #1
 8000980:	4630      	mov	r0, r6
 8000982:	f008 fe07 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000986:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000988:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800098a:	4620      	mov	r0, r4
 800098c:	4611      	mov	r1, r2
 800098e:	f003 fe35 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x86);
 8000992:	2086      	movs	r0, #134	@ 0x86
 8000994:	f7ff ff2e 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000998:	4620      	mov	r0, r4
 800099a:	2201      	movs	r2, #1
 800099c:	2102      	movs	r1, #2
 800099e:	f88d b007 	strb.w	fp, [sp, #7]
 80009a2:	f003 fe2b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80009a6:	464a      	mov	r2, r9
 80009a8:	4620      	mov	r0, r4
 80009aa:	2101      	movs	r1, #1
 80009ac:	f003 fe26 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	f10d 0107 	add.w	r1, sp, #7
 80009b8:	2201      	movs	r2, #1
 80009ba:	4630      	mov	r0, r6
 80009bc:	f008 fdea 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009c0:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80009c2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009c4:	4620      	mov	r0, r4
 80009c6:	4615      	mov	r5, r2
 80009c8:	4611      	mov	r1, r2
 80009ca:	f003 fe17 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x87);
 80009ce:	2087      	movs	r0, #135	@ 0x87
 80009d0:	f7ff ff10 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80009d4:	462a      	mov	r2, r5
 80009d6:	4620      	mov	r0, r4
 80009d8:	2102      	movs	r1, #2
 80009da:	f88d b007 	strb.w	fp, [sp, #7]
 80009de:	f003 fe0d 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80009e2:	464a      	mov	r2, r9
 80009e4:	4629      	mov	r1, r5
 80009e6:	4620      	mov	r0, r4
 80009e8:	f003 fe08 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	462a      	mov	r2, r5
 80009f2:	f10d 0107 	add.w	r1, sp, #7
 80009f6:	4630      	mov	r0, r6
 80009f8:	f008 fdcc 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80009fc:	462a      	mov	r2, r5
 80009fe:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a00:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a02:	4620      	mov	r0, r4
 8000a04:	f003 fdfa 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x88);
 8000a08:	2088      	movs	r0, #136	@ 0x88
 8000a0a:	f7ff fef3 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 8000a0e:	230a      	movs	r3, #10
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a10:	462a      	mov	r2, r5
 8000a12:	4620      	mov	r0, r4
 8000a14:	2102      	movs	r1, #2
 8000a16:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a1a:	f003 fdef 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a1e:	464a      	mov	r2, r9
 8000a20:	4629      	mov	r1, r5
 8000a22:	4620      	mov	r0, r4
 8000a24:	f003 fdea 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	462a      	mov	r2, r5
 8000a2e:	f10d 0107 	add.w	r1, sp, #7
 8000a32:	4630      	mov	r0, r6
 8000a34:	f008 fdae 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a38:	462a      	mov	r2, r5
 8000a3a:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a3c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f003 fddc 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x89);
 8000a44:	2089      	movs	r0, #137	@ 0x89
 8000a46:	f7ff fed5 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 8000a4a:	f04f 0321 	mov.w	r3, #33	@ 0x21
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a4e:	462a      	mov	r2, r5
 8000a50:	4620      	mov	r0, r4
 8000a52:	2102      	movs	r1, #2
 8000a54:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a58:	f003 fdd0 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	4629      	mov	r1, r5
 8000a60:	4620      	mov	r0, r4
 8000a62:	f003 fdcb 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	462a      	mov	r2, r5
 8000a6c:	f10d 0107 	add.w	r1, sp, #7
 8000a70:	4630      	mov	r0, r6
 8000a72:	f008 fd8f 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a76:	462a      	mov	r2, r5
 8000a78:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000a7a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	f003 fdbd 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8A);
 8000a82:	208a      	movs	r0, #138	@ 0x8a
 8000a84:	f7ff feb6 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000a88:	4641      	mov	r1, r8
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	f88d 9007 	strb.w	r9, [sp, #7]
 8000a92:	f003 fdb3 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000a96:	464a      	mov	r2, r9
 8000a98:	4629      	mov	r1, r5
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f003 fdae 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	462a      	mov	r2, r5
 8000aa6:	f10d 0107 	add.w	r1, sp, #7
 8000aaa:	4630      	mov	r0, r6
 8000aac:	f008 fd72 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ab0:	462a      	mov	r2, r5
 8000ab2:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ab4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f003 fda0 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8B);
 8000abc:	208b      	movs	r0, #139	@ 0x8b
 8000abe:	f7ff fe99 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 8000ac2:	2380      	movs	r3, #128	@ 0x80
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ac4:	4641      	mov	r1, r8
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	462a      	mov	r2, r5
 8000aca:	f88d 3007 	strb.w	r3, [sp, #7]
 8000ace:	f003 fd95 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000ad2:	464a      	mov	r2, r9
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f003 fd90 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	462a      	mov	r2, r5
 8000ae2:	f10d 0107 	add.w	r1, sp, #7
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	f008 fd54 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000aec:	462a      	mov	r2, r5
 8000aee:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000af0:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000af2:	4620      	mov	r0, r4
 8000af4:	f003 fd82 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8C);
 8000af8:	208c      	movs	r0, #140	@ 0x8c
 8000afa:	f7ff fe7b 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000afe:	462a      	mov	r2, r5
 8000b00:	4641      	mov	r1, r8
 8000b02:	4620      	mov	r0, r4
 8000b04:	f88d 5007 	strb.w	r5, [sp, #7]
 8000b08:	f003 fd78 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	4629      	mov	r1, r5
 8000b10:	4620      	mov	r0, r4
 8000b12:	f003 fd73 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	462a      	mov	r2, r5
 8000b1c:	f10d 0107 	add.w	r1, sp, #7
 8000b20:	4630      	mov	r0, r6
 8000b22:	f008 fd37 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b26:	462a      	mov	r2, r5
 8000b28:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b2a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f003 fd65 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8D);
 8000b32:	208d      	movs	r0, #141	@ 0x8d
 8000b34:	f7ff fe5e 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b38:	462a      	mov	r2, r5
 8000b3a:	4641      	mov	r1, r8
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f88d 5007 	strb.w	r5, [sp, #7]
 8000b42:	f003 fd5b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b46:	464a      	mov	r2, r9
 8000b48:	4629      	mov	r1, r5
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f003 fd56 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	462a      	mov	r2, r5
 8000b56:	f10d 0107 	add.w	r1, sp, #7
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	f008 fd1a 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b60:	462a      	mov	r2, r5
 8000b62:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b64:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b66:	4620      	mov	r0, r4
 8000b68:	f003 fd48 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8E);
 8000b6c:	208e      	movs	r0, #142	@ 0x8e
 8000b6e:	f7ff fe41 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000b72:	462a      	mov	r2, r5
 8000b74:	4641      	mov	r1, r8
 8000b76:	4620      	mov	r0, r4
 8000b78:	f88d b007 	strb.w	fp, [sp, #7]
 8000b7c:	f003 fd3e 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000b80:	464a      	mov	r2, r9
 8000b82:	4629      	mov	r1, r5
 8000b84:	4620      	mov	r0, r4
 8000b86:	f003 fd39 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	462a      	mov	r2, r5
 8000b90:	f10d 0107 	add.w	r1, sp, #7
 8000b94:	4630      	mov	r0, r6
 8000b96:	f008 fcfd 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000b9a:	462a      	mov	r2, r5
 8000b9c:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000b9e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f003 fd2b 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x8F);
 8000ba6:	208f      	movs	r0, #143	@ 0x8f
 8000ba8:	f7ff fe24 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000bac:	462a      	mov	r2, r5
 8000bae:	4641      	mov	r1, r8
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f88d b007 	strb.w	fp, [sp, #7]
 8000bb6:	f003 fd21 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000bba:	464a      	mov	r2, r9
 8000bbc:	4629      	mov	r1, r5
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f003 fd1c 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	462a      	mov	r2, r5
 8000bca:	f10d 0107 	add.w	r1, sp, #7
 8000bce:	4630      	mov	r0, r6
 8000bd0:	f008 fce0 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bd8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f003 fd0e 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xB6);
 8000be0:	20b6      	movs	r0, #182	@ 0xb6
 8000be2:	f7ff fe07 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000be6:	462a      	mov	r2, r5
 8000be8:	4641      	mov	r1, r8
 8000bea:	4620      	mov	r0, r4
 8000bec:	f88d 9007 	strb.w	r9, [sp, #7]
 8000bf0:	f003 fd04 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000bf4:	464a      	mov	r2, r9
 8000bf6:	4629      	mov	r1, r5
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f003 fcff 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	462a      	mov	r2, r5
 8000c04:	f10d 0107 	add.w	r1, sp, #7
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f008 fcc3 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c0e:	462a      	mov	r2, r5
 8000c10:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c12:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c14:	4620      	mov	r0, r4
 8000c16:	f003 fcf1 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000c1a:	462a      	mov	r2, r5
 8000c1c:	4641      	mov	r1, r8
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f88d 9007 	strb.w	r9, [sp, #7]
 8000c24:	f003 fcea 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c28:	464a      	mov	r2, r9
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f003 fce5 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	462a      	mov	r2, r5
 8000c38:	f10d 0107 	add.w	r1, sp, #7
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	e005      	b.n	8000c4c <GC9A01_init+0x404>
 8000c40:	58020400 	.word	0x58020400
 8000c44:	240001a0 	.word	0x240001a0
 8000c48:	2400008c 	.word	0x2400008c
 8000c4c:	f008 fca2 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c50:	462a      	mov	r2, r5
 8000c52:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c54:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c56:	4620      	mov	r0, r4
 8000c58:	f003 fcd0 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x36);
 8000c5c:	2036      	movs	r0, #54	@ 0x36
 8000c5e:	f7ff fdc9 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8000c62:	2318      	movs	r3, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000c64:	462a      	mov	r2, r5
 8000c66:	4641      	mov	r1, r8
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c6e:	f003 fcc5 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000c72:	464a      	mov	r2, r9
 8000c74:	4629      	mov	r1, r5
 8000c76:	4620      	mov	r0, r4
 8000c78:	f003 fcc0 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	462a      	mov	r2, r5
 8000c82:	f10d 0107 	add.w	r1, sp, #7
 8000c86:	4630      	mov	r0, r6
 8000c88:	f008 fc84 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c8c:	462a      	mov	r2, r5
 8000c8e:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c90:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f003 fcb2 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(COLOR_MODE);
 8000c98:	203a      	movs	r0, #58	@ 0x3a
 8000c9a:	f7ff fdab 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 8000c9e:	2305      	movs	r3, #5
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f88d 3007 	strb.w	r3, [sp, #7]
 8000caa:	f003 fca7 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000cae:	464a      	mov	r2, r9
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f003 fca2 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbc:	462a      	mov	r2, r5
 8000cbe:	f10d 0107 	add.w	r1, sp, #7
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f008 fc66 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000cc8:	462a      	mov	r2, r5
 8000cca:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ccc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f003 fc94 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x90);
 8000cd4:	2090      	movs	r0, #144	@ 0x90
 8000cd6:	f7ff fd8d 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000cda:	462a      	mov	r2, r5
 8000cdc:	4641      	mov	r1, r8
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f88d a007 	strb.w	sl, [sp, #7]
 8000ce4:	f003 fc8a 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000ce8:	464a      	mov	r2, r9
 8000cea:	4629      	mov	r1, r5
 8000cec:	4620      	mov	r0, r4
 8000cee:	f003 fc85 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	462a      	mov	r2, r5
 8000cf8:	f10d 0107 	add.w	r1, sp, #7
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	f008 fc49 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d02:	462a      	mov	r2, r5
 8000d04:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d06:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f003 fc77 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d0e:	462a      	mov	r2, r5
 8000d10:	4641      	mov	r1, r8
 8000d12:	4620      	mov	r0, r4
 8000d14:	f88d a007 	strb.w	sl, [sp, #7]
 8000d18:	f003 fc70 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	4629      	mov	r1, r5
 8000d20:	4620      	mov	r0, r4
 8000d22:	f003 fc6b 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	462a      	mov	r2, r5
 8000d2c:	f10d 0107 	add.w	r1, sp, #7
 8000d30:	4630      	mov	r0, r6
 8000d32:	f008 fc2f 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d36:	462a      	mov	r2, r5
 8000d38:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d3a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f003 fc5d 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d42:	462a      	mov	r2, r5
 8000d44:	4641      	mov	r1, r8
 8000d46:	4620      	mov	r0, r4
 8000d48:	f88d a007 	strb.w	sl, [sp, #7]
 8000d4c:	f003 fc56 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d50:	464a      	mov	r2, r9
 8000d52:	4629      	mov	r1, r5
 8000d54:	4620      	mov	r0, r4
 8000d56:	f003 fc51 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	462a      	mov	r2, r5
 8000d60:	f10d 0107 	add.w	r1, sp, #7
 8000d64:	4630      	mov	r0, r6
 8000d66:	f008 fc15 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d6a:	462a      	mov	r2, r5
 8000d6c:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d6e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d70:	4620      	mov	r0, r4
 8000d72:	f003 fc43 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000d76:	462a      	mov	r2, r5
 8000d78:	4641      	mov	r1, r8
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f88d a007 	strb.w	sl, [sp, #7]
 8000d80:	f003 fc3c 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000d84:	464a      	mov	r2, r9
 8000d86:	4629      	mov	r1, r5
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f003 fc37 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	462a      	mov	r2, r5
 8000d94:	f10d 0107 	add.w	r1, sp, #7
 8000d98:	4630      	mov	r0, r6
 8000d9a:	f008 fbfb 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000d9e:	462a      	mov	r2, r5
 8000da0:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000da2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000da4:	4620      	mov	r0, r4
 8000da6:	f003 fc29 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xBD);
 8000daa:	20bd      	movs	r0, #189	@ 0xbd
 8000dac:	f7ff fd22 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 8000db0:	2306      	movs	r3, #6
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000db2:	462a      	mov	r2, r5
 8000db4:	4641      	mov	r1, r8
 8000db6:	4620      	mov	r0, r4
 8000db8:	f88d 3007 	strb.w	r3, [sp, #7]
 8000dbc:	f003 fc1e 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000dc0:	464a      	mov	r2, r9
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f003 fc19 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	462a      	mov	r2, r5
 8000dd0:	f10d 0107 	add.w	r1, sp, #7
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f008 fbdd 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000dda:	462a      	mov	r2, r5
 8000ddc:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000dde:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000de0:	4620      	mov	r0, r4
 8000de2:	f003 fc0b 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xBC);
 8000de6:	20bc      	movs	r0, #188	@ 0xbc
 8000de8:	f7ff fd04 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000dec:	462a      	mov	r2, r5
 8000dee:	4641      	mov	r1, r8
 8000df0:	4620      	mov	r0, r4
 8000df2:	f88d 9007 	strb.w	r9, [sp, #7]
 8000df6:	f003 fc01 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000dfa:	464a      	mov	r2, r9
 8000dfc:	4629      	mov	r1, r5
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f003 fbfc 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	462a      	mov	r2, r5
 8000e0a:	f10d 0107 	add.w	r1, sp, #7
 8000e0e:	4630      	mov	r0, r6
 8000e10:	f008 fbc0 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e14:	462a      	mov	r2, r5
 8000e16:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e18:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f003 fbee 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xFF);
 8000e20:	4658      	mov	r0, fp
 8000e22:	f7ff fce7 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 8000e26:	2360      	movs	r3, #96	@ 0x60
    GC9A01_write_data(&val, sizeof(val));
 8000e28:	f10d 0007 	add.w	r0, sp, #7
 8000e2c:	f04f 0b13 	mov.w	fp, #19
 8000e30:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e34:	f7ff fca2 	bl	800077c <GC9A01_write_data.constprop.0>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000e38:	462a      	mov	r2, r5
 8000e3a:	4641      	mov	r1, r8
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f88d 5007 	strb.w	r5, [sp, #7]
 8000e42:	f003 fbdb 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000e46:	464a      	mov	r2, r9
 8000e48:	4629      	mov	r1, r5
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f003 fbd6 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	462a      	mov	r2, r5
 8000e56:	f10d 0107 	add.w	r1, sp, #7
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	f008 fb9a 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e60:	462a      	mov	r2, r5
 8000e62:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e64:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e66:	4620      	mov	r0, r4
 8000e68:	f003 fbc8 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x04);
 8000e6c:	2304      	movs	r3, #4
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000e6e:	462a      	mov	r2, r5
 8000e70:	4641      	mov	r1, r8
 8000e72:	4620      	mov	r0, r4
 8000e74:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e78:	f003 fbc0 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	4629      	mov	r1, r5
 8000e80:	4620      	mov	r0, r4
 8000e82:	f003 fbbb 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	462a      	mov	r2, r5
 8000e8c:	f10d 0107 	add.w	r1, sp, #7
 8000e90:	4630      	mov	r0, r6
 8000e92:	f008 fb7f 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e96:	462a      	mov	r2, r5
 8000e98:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e9a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f003 fbad 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC3);
 8000ea2:	20c3      	movs	r0, #195	@ 0xc3
 8000ea4:	f7ff fca6 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ea8:	462a      	mov	r2, r5
 8000eaa:	4641      	mov	r1, r8
 8000eac:	4620      	mov	r0, r4
 8000eae:	f88d b007 	strb.w	fp, [sp, #7]
 8000eb2:	f003 fba3 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000eb6:	464a      	mov	r2, r9
 8000eb8:	4629      	mov	r1, r5
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f003 fb9e 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	462a      	mov	r2, r5
 8000ec6:	f10d 0107 	add.w	r1, sp, #7
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f008 fb62 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ed0:	462a      	mov	r2, r5
 8000ed2:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ed4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f003 fb90 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC4);
 8000edc:	20c4      	movs	r0, #196	@ 0xc4
 8000ede:	f7ff fc89 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000ee2:	462a      	mov	r2, r5
 8000ee4:	4641      	mov	r1, r8
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f88d b007 	strb.w	fp, [sp, #7]
 8000eec:	f003 fb86 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f04f 0b26 	mov.w	fp, #38	@ 0x26
 8000efa:	f003 fb7f 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	462a      	mov	r2, r5
 8000f04:	f10d 0107 	add.w	r1, sp, #7
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f008 fb43 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f0e:	462a      	mov	r2, r5
 8000f10:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f12:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f14:	4620      	mov	r0, r4
 8000f16:	f003 fb71 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xC9);
 8000f1a:	20c9      	movs	r0, #201	@ 0xc9
 8000f1c:	f7ff fc6a 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 8000f20:	2322      	movs	r3, #34	@ 0x22
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000f22:	462a      	mov	r2, r5
 8000f24:	4641      	mov	r1, r8
 8000f26:	4620      	mov	r0, r4
 8000f28:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f2c:	f003 fb66 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000f30:	464a      	mov	r2, r9
 8000f32:	4629      	mov	r1, r5
 8000f34:	4620      	mov	r0, r4
 8000f36:	f003 fb61 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	462a      	mov	r2, r5
 8000f40:	f10d 0107 	add.w	r1, sp, #7
 8000f44:	4630      	mov	r0, r6
 8000f46:	f008 fb25 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f4a:	462a      	mov	r2, r5
 8000f4c:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f4e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f50:	4620      	mov	r0, r4
 8000f52:	f003 fb53 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xBE);
 8000f56:	20be      	movs	r0, #190	@ 0xbe
 8000f58:	f7ff fc4c 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 8000f5c:	2311      	movs	r3, #17
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000f5e:	462a      	mov	r2, r5
 8000f60:	4641      	mov	r1, r8
 8000f62:	4620      	mov	r0, r4
 8000f64:	f88d 3007 	strb.w	r3, [sp, #7]
 8000f68:	f003 fb48 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	4629      	mov	r1, r5
 8000f70:	4620      	mov	r0, r4
 8000f72:	f003 fb43 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	462a      	mov	r2, r5
 8000f7c:	f10d 0107 	add.w	r1, sp, #7
 8000f80:	4630      	mov	r0, r6
 8000f82:	f008 fb07 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f86:	462a      	mov	r2, r5
 8000f88:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000f8a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f003 fb35 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xE1);
 8000f92:	20e1      	movs	r0, #225	@ 0xe1
 8000f94:	f7ff fc2e 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 8000f98:	2310      	movs	r3, #16
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000f9a:	462a      	mov	r2, r5
 8000f9c:	4641      	mov	r1, r8
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fa4:	f003 fb2a 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000fa8:	464a      	mov	r2, r9
 8000faa:	4629      	mov	r1, r5
 8000fac:	4620      	mov	r0, r4
 8000fae:	f003 fb25 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	462a      	mov	r2, r5
 8000fb8:	f10d 0107 	add.w	r1, sp, #7
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	f008 fae9 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000fc2:	462a      	mov	r2, r5
 8000fc4:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000fc6:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f003 fb17 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0E);
 8000fce:	230e      	movs	r3, #14
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8000fd0:	462a      	mov	r2, r5
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f88d 3007 	strb.w	r3, [sp, #7]
 8000fda:	f003 fb0f 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8000fde:	464a      	mov	r2, r9
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f003 fb0a 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	462a      	mov	r2, r5
 8000fee:	f10d 0107 	add.w	r1, sp, #7
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f008 face 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ff8:	462a      	mov	r2, r5
 8000ffa:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000ffc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8000ffe:	4620      	mov	r0, r4
 8001000:	f003 fafc 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xDF);
 8001004:	20df      	movs	r0, #223	@ 0xdf
 8001006:	f7ff fbf5 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800100a:	f04f 0321 	mov.w	r3, #33	@ 0x21
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800100e:	462a      	mov	r2, r5
 8001010:	4641      	mov	r1, r8
 8001012:	4620      	mov	r0, r4
 8001014:	f88d 3007 	strb.w	r3, [sp, #7]
 8001018:	f003 faf0 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800101c:	464a      	mov	r2, r9
 800101e:	4629      	mov	r1, r5
 8001020:	4620      	mov	r0, r4
 8001022:	f003 faeb 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	462a      	mov	r2, r5
 800102c:	f10d 0107 	add.w	r1, sp, #7
 8001030:	4630      	mov	r0, r6
 8001032:	f008 faaf 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001036:	462a      	mov	r2, r5
 8001038:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800103a:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800103c:	4620      	mov	r0, r4
 800103e:	f003 fadd 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0c);
 8001042:	230c      	movs	r3, #12
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001044:	462a      	mov	r2, r5
 8001046:	4641      	mov	r1, r8
 8001048:	4620      	mov	r0, r4
 800104a:	f88d 3007 	strb.w	r3, [sp, #7]
 800104e:	f003 fad5 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001052:	464a      	mov	r2, r9
 8001054:	4629      	mov	r1, r5
 8001056:	4620      	mov	r0, r4
 8001058:	f003 fad0 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	462a      	mov	r2, r5
 8001062:	f10d 0107 	add.w	r1, sp, #7
 8001066:	4630      	mov	r0, r6
 8001068:	f008 fa94 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800106c:	462a      	mov	r2, r5
 800106e:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001070:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001072:	4620      	mov	r0, r4
 8001074:	f003 fac2 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001078:	462a      	mov	r2, r5
 800107a:	4641      	mov	r1, r8
 800107c:	4620      	mov	r0, r4
 800107e:	f88d 8007 	strb.w	r8, [sp, #7]
 8001082:	f003 fabb 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001086:	464a      	mov	r2, r9
 8001088:	4629      	mov	r1, r5
 800108a:	4620      	mov	r0, r4
 800108c:	f003 fab6 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	462a      	mov	r2, r5
 8001096:	f10d 0107 	add.w	r1, sp, #7
 800109a:	4630      	mov	r0, r6
 800109c:	f008 fa7a 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010a0:	462a      	mov	r2, r5
 80010a2:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80010a4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f003 faa8 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF0);
 80010ac:	20f0      	movs	r0, #240	@ 0xf0
 80010ae:	f7ff fba1 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 80010b2:	f04f 0345 	mov.w	r3, #69	@ 0x45
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80010b6:	462a      	mov	r2, r5
 80010b8:	4641      	mov	r1, r8
 80010ba:	4620      	mov	r0, r4
 80010bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80010c0:	f003 fa9c 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80010c4:	464a      	mov	r2, r9
 80010c6:	4629      	mov	r1, r5
 80010c8:	4620      	mov	r0, r4
 80010ca:	f003 fa97 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	462a      	mov	r2, r5
 80010d4:	f10d 0107 	add.w	r1, sp, #7
 80010d8:	4630      	mov	r0, r6
 80010da:	f008 fa5b 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010de:	462a      	mov	r2, r5
 80010e0:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80010e2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80010e4:	4620      	mov	r0, r4
 80010e6:	f003 fa89 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 80010ea:	f04f 0109 	mov.w	r1, #9
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80010ee:	462a      	mov	r2, r5
 80010f0:	4620      	mov	r0, r4
 80010f2:	f88d 1007 	strb.w	r1, [sp, #7]
 80010f6:	4641      	mov	r1, r8
 80010f8:	f003 fa80 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80010fc:	464a      	mov	r2, r9
 80010fe:	4629      	mov	r1, r5
 8001100:	4620      	mov	r0, r4
 8001102:	f003 fa7b 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001106:	f10d 0007 	add.w	r0, sp, #7
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	462a      	mov	r2, r5
 8001110:	4601      	mov	r1, r0
 8001112:	4630      	mov	r0, r6
 8001114:	f008 fa3e 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001118:	462a      	mov	r2, r5
 800111a:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800111c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800111e:	4620      	mov	r0, r4
 8001120:	f003 fa6c 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001124:	462a      	mov	r2, r5
 8001126:	4641      	mov	r1, r8
 8001128:	4620      	mov	r0, r4
 800112a:	f88d a007 	strb.w	sl, [sp, #7]
 800112e:	f003 fa65 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001132:	464a      	mov	r2, r9
 8001134:	4629      	mov	r1, r5
 8001136:	4620      	mov	r0, r4
 8001138:	f003 fa60 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800113c:	f10d 0007 	add.w	r0, sp, #7
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	462a      	mov	r2, r5
 8001146:	4601      	mov	r1, r0
 8001148:	4630      	mov	r0, r6
 800114a:	f008 fa23 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800114e:	462a      	mov	r2, r5
 8001150:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001152:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001154:	4620      	mov	r0, r4
 8001156:	f003 fa51 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800115a:	462a      	mov	r2, r5
 800115c:	4641      	mov	r1, r8
 800115e:	4620      	mov	r0, r4
 8001160:	f88d a007 	strb.w	sl, [sp, #7]
 8001164:	f003 fa4a 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001168:	464a      	mov	r2, r9
 800116a:	4629      	mov	r1, r5
 800116c:	4620      	mov	r0, r4
 800116e:	f003 fa45 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001172:	f10d 0007 	add.w	r0, sp, #7
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	462a      	mov	r2, r5
 800117c:	4601      	mov	r1, r0
 800117e:	4630      	mov	r0, r6
 8001180:	f008 fa08 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001184:	462a      	mov	r2, r5
 8001186:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001188:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800118a:	4620      	mov	r0, r4
 800118c:	f003 fa36 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001190:	462a      	mov	r2, r5
 8001192:	4641      	mov	r1, r8
 8001194:	4620      	mov	r0, r4
 8001196:	f88d b007 	strb.w	fp, [sp, #7]
 800119a:	f003 fa2f 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800119e:	464a      	mov	r2, r9
 80011a0:	4629      	mov	r1, r5
 80011a2:	4620      	mov	r0, r4
 80011a4:	f003 fa2a 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011a8:	f10d 0007 	add.w	r0, sp, #7
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	462a      	mov	r2, r5
 80011b2:	4601      	mov	r1, r0
 80011b4:	4630      	mov	r0, r6
 80011b6:	f008 f9ed 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011ba:	462a      	mov	r2, r5
 80011bc:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011be:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f003 fa1b 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x2A);
 80011c6:	f04f 002a 	mov.w	r0, #42	@ 0x2a
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80011ca:	462a      	mov	r2, r5
 80011cc:	4641      	mov	r1, r8
 80011ce:	f88d 0007 	strb.w	r0, [sp, #7]
 80011d2:	4620      	mov	r0, r4
 80011d4:	f003 fa12 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80011d8:	464a      	mov	r2, r9
 80011da:	4629      	mov	r1, r5
 80011dc:	4620      	mov	r0, r4
 80011de:	f003 fa0d 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011e2:	f10d 0c07 	add.w	ip, sp, #7
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	462a      	mov	r2, r5
 80011ec:	4661      	mov	r1, ip
 80011ee:	4630      	mov	r0, r6
 80011f0:	f008 f9d0 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011f4:	462a      	mov	r2, r5
 80011f6:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80011f8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f003 f9fe 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF1);
 8001200:	20f1      	movs	r0, #241	@ 0xf1
 8001202:	f7ff faf7 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 8001206:	f04f 0c43 	mov.w	ip, #67	@ 0x43
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800120a:	462a      	mov	r2, r5
 800120c:	4641      	mov	r1, r8
 800120e:	4620      	mov	r0, r4
 8001210:	f88d c007 	strb.w	ip, [sp, #7]
 8001214:	f003 f9f2 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001218:	464a      	mov	r2, r9
 800121a:	4629      	mov	r1, r5
 800121c:	4620      	mov	r0, r4
 800121e:	f003 f9ed 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001222:	f10d 0e07 	add.w	lr, sp, #7
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	462a      	mov	r2, r5
 800122c:	4671      	mov	r1, lr
 800122e:	4630      	mov	r0, r6
 8001230:	f008 f9b0 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001234:	462a      	mov	r2, r5
 8001236:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001238:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800123a:	4620      	mov	r0, r4
 800123c:	f003 f9de 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001240:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001244:	462a      	mov	r2, r5
 8001246:	4641      	mov	r1, r8
 8001248:	4620      	mov	r0, r4
 800124a:	f88d 3007 	strb.w	r3, [sp, #7]
 800124e:	f003 f9d5 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001252:	464a      	mov	r2, r9
 8001254:	4629      	mov	r1, r5
 8001256:	4620      	mov	r0, r4
 8001258:	f003 f9d0 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800125c:	f10d 0e07 	add.w	lr, sp, #7
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	462a      	mov	r2, r5
 8001266:	4671      	mov	r1, lr
 8001268:	4630      	mov	r0, r6
 800126a:	f008 f993 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800126e:	462a      	mov	r2, r5
 8001270:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001272:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001274:	4620      	mov	r0, r4
 8001276:	f003 f9c1 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x72);
 800127a:	f04f 0e72 	mov.w	lr, #114	@ 0x72
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800127e:	462a      	mov	r2, r5
 8001280:	4641      	mov	r1, r8
 8001282:	4620      	mov	r0, r4
 8001284:	f88d e007 	strb.w	lr, [sp, #7]
 8001288:	f003 f9b8 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800128c:	464a      	mov	r2, r9
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800128e:	f10d 0907 	add.w	r9, sp, #7
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001292:	4629      	mov	r1, r5
 8001294:	4620      	mov	r0, r4
 8001296:	f003 f9b1 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	462a      	mov	r2, r5
 80012a0:	4649      	mov	r1, r9
 80012a2:	4630      	mov	r0, r6
 80012a4:	f04f 0936 	mov.w	r9, #54	@ 0x36
 80012a8:	f008 f974 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012ac:	462a      	mov	r2, r5
 80012ae:	4629      	mov	r1, r5
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012b0:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012b2:	4620      	mov	r0, r4
 80012b4:	f003 f9a2 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80012b8:	462a      	mov	r2, r5
 80012ba:	4641      	mov	r1, r8
 80012bc:	4620      	mov	r0, r4
 80012be:	f88d 9007 	strb.w	r9, [sp, #7]
 80012c2:	f003 f99b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80012c6:	4629      	mov	r1, r5
 80012c8:	4620      	mov	r0, r4
 80012ca:	2200      	movs	r2, #0
 80012cc:	f003 f996 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012d0:	462a      	mov	r2, r5
 80012d2:	f10d 0507 	add.w	r5, sp, #7
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	4630      	mov	r0, r6
 80012dc:	4629      	mov	r1, r5
 80012de:	f04f 0537 	mov.w	r5, #55	@ 0x37
 80012e2:	f008 f957 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012e6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012e8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80012ea:	4620      	mov	r0, r4
 80012ec:	4611      	mov	r1, r2
 80012ee:	f003 f985 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80012f2:	4641      	mov	r1, r8
 80012f4:	4620      	mov	r0, r4
 80012f6:	f88d 5007 	strb.w	r5, [sp, #7]
 80012fa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80012fc:	f10d 0507 	add.w	r5, sp, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001300:	f003 f97c 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001304:	4620      	mov	r0, r4
 8001306:	2200      	movs	r2, #0
 8001308:	2101      	movs	r1, #1
 800130a:	f003 f977 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	4629      	mov	r1, r5
 8001314:	2201      	movs	r2, #1
 8001316:	4630      	mov	r0, r6
 8001318:	f008 f93c 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800131c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800131e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001320:	4620      	mov	r0, r4
 8001322:	4611      	mov	r1, r2
 8001324:	f003 f96a 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x6F);
 8001328:	f04f 026f 	mov.w	r2, #111	@ 0x6f
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800132c:	4641      	mov	r1, r8
 800132e:	4620      	mov	r0, r4
 8001330:	f88d 2007 	strb.w	r2, [sp, #7]
 8001334:	2201      	movs	r2, #1
 8001336:	f003 f961 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800133a:	4620      	mov	r0, r4
 800133c:	2200      	movs	r2, #0
 800133e:	2101      	movs	r1, #1
 8001340:	f003 f95c 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	4629      	mov	r1, r5
 800134a:	2201      	movs	r2, #1
 800134c:	4630      	mov	r0, r6
 800134e:	f008 f921 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001352:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001354:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001356:	4620      	mov	r0, r4
 8001358:	4611      	mov	r1, r2
 800135a:	f003 f94f 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF2);
 800135e:	20f2      	movs	r0, #242	@ 0xf2
 8001360:	f7ff fa48 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 8001364:	f04f 0245 	mov.w	r2, #69	@ 0x45
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001368:	4641      	mov	r1, r8
 800136a:	4620      	mov	r0, r4
 800136c:	f88d 2007 	strb.w	r2, [sp, #7]
 8001370:	2201      	movs	r2, #1
 8001372:	f003 f943 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001376:	4620      	mov	r0, r4
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	f003 f93e 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	4629      	mov	r1, r5
 8001386:	2201      	movs	r2, #1
 8001388:	4630      	mov	r0, r6
 800138a:	f008 f903 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800138e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001390:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001392:	4620      	mov	r0, r4
 8001394:	4611      	mov	r1, r2
 8001396:	f003 f931 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 800139a:	f04f 0109 	mov.w	r1, #9
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800139e:	4620      	mov	r0, r4
 80013a0:	2201      	movs	r2, #1
 80013a2:	f88d 1007 	strb.w	r1, [sp, #7]
 80013a6:	4641      	mov	r1, r8
 80013a8:	f003 f928 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80013ac:	4620      	mov	r0, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	2101      	movs	r1, #1
 80013b2:	f003 f923 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	4629      	mov	r1, r5
 80013bc:	2201      	movs	r2, #1
 80013be:	4630      	mov	r0, r6
 80013c0:	463d      	mov	r5, r7
 80013c2:	f008 f8e7 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013c6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013c8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013ca:	4620      	mov	r0, r4
 80013cc:	4611      	mov	r1, r2
 80013ce:	f003 f915 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80013d2:	4641      	mov	r1, r8
 80013d4:	4620      	mov	r0, r4
 80013d6:	2201      	movs	r2, #1
 80013d8:	f88d a007 	strb.w	sl, [sp, #7]
 80013dc:	f003 f90e 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80013e0:	4620      	mov	r0, r4
 80013e2:	2200      	movs	r2, #0
 80013e4:	2101      	movs	r1, #1
 80013e6:	f003 f909 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	f10d 0107 	add.w	r1, sp, #7
 80013f2:	2201      	movs	r2, #1
 80013f4:	4630      	mov	r0, r6
 80013f6:	f008 f8cd 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013fa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80013fc:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80013fe:	4620      	mov	r0, r4
 8001400:	4611      	mov	r1, r2
 8001402:	f003 f8fb 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001406:	4641      	mov	r1, r8
 8001408:	4620      	mov	r0, r4
 800140a:	f88d a007 	strb.w	sl, [sp, #7]
 800140e:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001410:	f10d 0a07 	add.w	sl, sp, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001414:	f003 f8f2 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001418:	4620      	mov	r0, r4
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	f003 f8ed 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4651      	mov	r1, sl
 8001428:	2201      	movs	r2, #1
 800142a:	4630      	mov	r0, r6
 800142c:	f008 f8b2 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001430:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001432:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001434:	4620      	mov	r0, r4
 8001436:	4611      	mov	r1, r2
 8001438:	f003 f8e0 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800143c:	4641      	mov	r1, r8
 800143e:	4620      	mov	r0, r4
 8001440:	2201      	movs	r2, #1
 8001442:	f88d b007 	strb.w	fp, [sp, #7]
 8001446:	f003 f8d9 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800144a:	4620      	mov	r0, r4
 800144c:	2200      	movs	r2, #0
 800144e:	2101      	movs	r1, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001450:	46bb      	mov	fp, r7
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001452:	f003 f8d3 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	4651      	mov	r1, sl
 800145c:	2201      	movs	r2, #1
 800145e:	4630      	mov	r0, r6
 8001460:	f008 f898 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001464:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001466:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001468:	4620      	mov	r0, r4
 800146a:	4611      	mov	r1, r2
 800146c:	f003 f8c6 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x2A);
 8001470:	f04f 002a 	mov.w	r0, #42	@ 0x2a
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001474:	4641      	mov	r1, r8
 8001476:	2201      	movs	r2, #1
 8001478:	f88d 0007 	strb.w	r0, [sp, #7]
 800147c:	4620      	mov	r0, r4
 800147e:	f003 f8bd 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001482:	4620      	mov	r0, r4
 8001484:	2200      	movs	r2, #0
 8001486:	2101      	movs	r1, #1
 8001488:	f003 f8b8 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	4651      	mov	r1, sl
 8001492:	2201      	movs	r2, #1
 8001494:	4630      	mov	r0, r6
 8001496:	f008 f87d 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800149a:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800149c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800149e:	4620      	mov	r0, r4
 80014a0:	4611      	mov	r1, r2
 80014a2:	f003 f8ab 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xF3);
 80014a6:	20f3      	movs	r0, #243	@ 0xf3
 80014a8:	f7ff f9a4 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 80014ac:	f04f 0c43 	mov.w	ip, #67	@ 0x43
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80014b0:	4641      	mov	r1, r8
 80014b2:	4620      	mov	r0, r4
 80014b4:	2201      	movs	r2, #1
 80014b6:	f88d c007 	strb.w	ip, [sp, #7]
 80014ba:	f003 f89f 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80014be:	4620      	mov	r0, r4
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	f003 f89a 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	4651      	mov	r1, sl
 80014ce:	2201      	movs	r2, #1
 80014d0:	4630      	mov	r0, r6
 80014d2:	f008 f85f 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80014d6:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80014d8:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80014da:	4620      	mov	r0, r4
 80014dc:	4611      	mov	r1, r2
 80014de:	f003 f88d 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 80014e2:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80014e6:	4641      	mov	r1, r8
 80014e8:	4620      	mov	r0, r4
 80014ea:	2201      	movs	r2, #1
 80014ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80014f0:	f003 f884 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80014f4:	4620      	mov	r0, r4
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	f003 f87f 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	4651      	mov	r1, sl
 8001504:	2201      	movs	r2, #1
 8001506:	4630      	mov	r0, r6
 8001508:	f008 f844 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800150c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800150e:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001510:	4620      	mov	r0, r4
 8001512:	4692      	mov	sl, r2
 8001514:	4611      	mov	r1, r2
 8001516:	f003 f871 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x72);
 800151a:	f04f 0e72 	mov.w	lr, #114	@ 0x72
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800151e:	4652      	mov	r2, sl
 8001520:	4641      	mov	r1, r8
 8001522:	4620      	mov	r0, r4
 8001524:	f88d e007 	strb.w	lr, [sp, #7]
 8001528:	f003 f868 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800152c:	4651      	mov	r1, sl
 800152e:	4620      	mov	r0, r4
 8001530:	2200      	movs	r2, #0
 8001532:	f003 f863 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001536:	f10d 0007 	add.w	r0, sp, #7
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	4652      	mov	r2, sl
 8001540:	4601      	mov	r1, r0
 8001542:	4630      	mov	r0, r6
 8001544:	f008 f826 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001548:	4652      	mov	r2, sl
 800154a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800154c:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800154e:	4620      	mov	r0, r4
 8001550:	f003 f854 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001554:	4652      	mov	r2, sl
 8001556:	4641      	mov	r1, r8
 8001558:	4620      	mov	r0, r4
 800155a:	f88d 9007 	strb.w	r9, [sp, #7]
 800155e:	f003 f84d 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001562:	4651      	mov	r1, sl
 8001564:	4620      	mov	r0, r4
 8001566:	2200      	movs	r2, #0
 8001568:	f04f 0900 	mov.w	r9, #0
 800156c:	f003 f846 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001570:	f10d 0007 	add.w	r0, sp, #7
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	4652      	mov	r2, sl
 800157a:	4601      	mov	r1, r0
 800157c:	4630      	mov	r0, r6
 800157e:	f008 f809 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001582:	4652      	mov	r2, sl
 8001584:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001586:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001588:	4620      	mov	r0, r4
 800158a:	f003 f837 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x37);
 800158e:	f04f 0137 	mov.w	r1, #55	@ 0x37
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001592:	4652      	mov	r2, sl
 8001594:	4620      	mov	r0, r4
 8001596:	f88d 1007 	strb.w	r1, [sp, #7]
 800159a:	4641      	mov	r1, r8
 800159c:	f003 f82e 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80015a0:	464a      	mov	r2, r9
 80015a2:	4651      	mov	r1, sl
 80015a4:	4620      	mov	r0, r4
 80015a6:	f003 f829 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	4652      	mov	r2, sl
 80015b0:	f10d 0107 	add.w	r1, sp, #7
 80015b4:	4630      	mov	r0, r6
 80015b6:	f007 ffed 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015ba:	4652      	mov	r2, sl
 80015bc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015be:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015c0:	4620      	mov	r0, r4
 80015c2:	f003 f81b 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x6F);
 80015c6:	f04f 016f 	mov.w	r1, #111	@ 0x6f
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80015ca:	4652      	mov	r2, sl
 80015cc:	4620      	mov	r0, r4
 80015ce:	f88d 1007 	strb.w	r1, [sp, #7]
 80015d2:	4641      	mov	r1, r8
 80015d4:	f003 f812 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80015d8:	464a      	mov	r2, r9
 80015da:	4651      	mov	r1, sl
 80015dc:	4620      	mov	r0, r4
 80015de:	f003 f80d 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	4652      	mov	r2, sl
 80015e8:	f10d 0107 	add.w	r1, sp, #7
 80015ec:	4630      	mov	r0, r6
 80015ee:	f007 ffd1 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015f2:	4652      	mov	r2, sl
 80015f4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015f6:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80015f8:	4620      	mov	r0, r4
 80015fa:	f002 ffff 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xED);
 80015fe:	20ed      	movs	r0, #237	@ 0xed
 8001600:	f7ff f8f8 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 8001604:	231b      	movs	r3, #27
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001606:	4652      	mov	r2, sl
 8001608:	4641      	mov	r1, r8
 800160a:	4620      	mov	r0, r4
 800160c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001610:	f002 fff4 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001614:	464a      	mov	r2, r9
 8001616:	4651      	mov	r1, sl
 8001618:	4620      	mov	r0, r4
 800161a:	f002 ffef 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	4652      	mov	r2, sl
 8001624:	f10d 0107 	add.w	r1, sp, #7
 8001628:	4630      	mov	r0, r6
 800162a:	f007 ffb3 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800162e:	4652      	mov	r2, sl
 8001630:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001632:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001634:	4620      	mov	r0, r4
 8001636:	f002 ffe1 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0B);
 800163a:	230b      	movs	r3, #11
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800163c:	4652      	mov	r2, sl
 800163e:	4641      	mov	r1, r8
 8001640:	4620      	mov	r0, r4
 8001642:	f88d 3007 	strb.w	r3, [sp, #7]
 8001646:	f002 ffd9 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800164a:	464a      	mov	r2, r9
 800164c:	4651      	mov	r1, sl
 800164e:	4620      	mov	r0, r4
 8001650:	f002 ffd4 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001654:	f04f 33ff 	mov.w	r3, #4294967295
 8001658:	4652      	mov	r2, sl
 800165a:	f10d 0107 	add.w	r1, sp, #7
 800165e:	4630      	mov	r0, r6
 8001660:	f007 ff98 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001664:	4652      	mov	r2, sl
 8001666:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001668:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800166a:	4620      	mov	r0, r4
 800166c:	f002 ffc6 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xAE);
 8001670:	20ae      	movs	r0, #174	@ 0xae
 8001672:	f7ff f8bf 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 8001676:	2377      	movs	r3, #119	@ 0x77
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001678:	4652      	mov	r2, sl
 800167a:	4641      	mov	r1, r8
 800167c:	4620      	mov	r0, r4
 800167e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001682:	f002 ffbb 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001686:	464a      	mov	r2, r9
 8001688:	4651      	mov	r1, sl
 800168a:	4620      	mov	r0, r4
 800168c:	f002 ffb6 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	4652      	mov	r2, sl
 8001696:	f10d 0107 	add.w	r1, sp, #7
 800169a:	4630      	mov	r0, r6
 800169c:	f007 ff7a 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016a0:	4652      	mov	r2, sl
 80016a2:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80016a4:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f002 ffa8 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xCD);
 80016ac:	20cd      	movs	r0, #205	@ 0xcd
 80016ae:	f7ff f8a1 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 80016b2:	f04f 0163 	mov.w	r1, #99	@ 0x63
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80016b6:	4652      	mov	r2, sl
 80016b8:	4620      	mov	r0, r4
 80016ba:	f88d 1007 	strb.w	r1, [sp, #7]
 80016be:	4641      	mov	r1, r8
 80016c0:	f002 ff9c 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80016c4:	464a      	mov	r2, r9
 80016c6:	4651      	mov	r1, sl
 80016c8:	4620      	mov	r0, r4
 80016ca:	f002 ff97 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	4652      	mov	r2, sl
 80016d4:	f10d 0107 	add.w	r1, sp, #7
 80016d8:	4630      	mov	r0, r6
 80016da:	f007 ff5b 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016de:	4652      	mov	r2, sl
 80016e0:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80016e2:	7038      	strb	r0, [r7, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80016e4:	4620      	mov	r0, r4
 80016e6:	2798      	movs	r7, #152	@ 0x98
 80016e8:	f002 ff88 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x70);
 80016ec:	2070      	movs	r0, #112	@ 0x70
 80016ee:	f7ff f881 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 80016f2:	f04f 0207 	mov.w	r2, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80016f6:	4641      	mov	r1, r8
 80016f8:	4620      	mov	r0, r4
 80016fa:	f88d 2007 	strb.w	r2, [sp, #7]
 80016fe:	4652      	mov	r2, sl
 8001700:	f002 ff7c 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001704:	464a      	mov	r2, r9
 8001706:	4651      	mov	r1, sl
 8001708:	4620      	mov	r0, r4
 800170a:	f002 ff77 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	4652      	mov	r2, sl
 8001714:	f10d 0107 	add.w	r1, sp, #7
 8001718:	4630      	mov	r0, r6
 800171a:	f007 ff3b 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800171e:	4652      	mov	r2, sl
 8001720:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001722:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001724:	4620      	mov	r0, r4
 8001726:	f002 ff69 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x07);
 800172a:	f04f 0207 	mov.w	r2, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800172e:	4641      	mov	r1, r8
 8001730:	4620      	mov	r0, r4
 8001732:	f88d 2007 	strb.w	r2, [sp, #7]
 8001736:	4652      	mov	r2, sl
 8001738:	f002 ff60 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800173c:	464a      	mov	r2, r9
 800173e:	4651      	mov	r1, sl
 8001740:	4620      	mov	r0, r4
 8001742:	f002 ff5b 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	4652      	mov	r2, sl
 800174c:	f10d 0107 	add.w	r1, sp, #7
 8001750:	4630      	mov	r0, r6
 8001752:	f007 ff1f 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001756:	4652      	mov	r2, sl
 8001758:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800175a:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800175c:	4620      	mov	r0, r4
 800175e:	f002 ff4d 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x04);
 8001762:	2304      	movs	r3, #4
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001764:	4652      	mov	r2, sl
 8001766:	4641      	mov	r1, r8
 8001768:	4620      	mov	r0, r4
 800176a:	f88d 3007 	strb.w	r3, [sp, #7]
 800176e:	f002 ff45 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001772:	464a      	mov	r2, r9
 8001774:	4651      	mov	r1, sl
 8001776:	4620      	mov	r0, r4
 8001778:	f002 ff40 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	4652      	mov	r2, sl
 8001782:	f10d 0107 	add.w	r1, sp, #7
 8001786:	4630      	mov	r0, r6
 8001788:	f007 ff04 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800178c:	4652      	mov	r2, sl
 800178e:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001790:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001792:	4620      	mov	r0, r4
 8001794:	f002 ff32 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0E);
 8001798:	230e      	movs	r3, #14
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800179a:	4652      	mov	r2, sl
 800179c:	4641      	mov	r1, r8
 800179e:	4620      	mov	r0, r4
 80017a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80017a4:	f002 ff2a 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80017a8:	464a      	mov	r2, r9
 80017aa:	4651      	mov	r1, sl
 80017ac:	4620      	mov	r0, r4
 80017ae:	f002 ff25 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	4652      	mov	r2, sl
 80017b8:	f10d 0107 	add.w	r1, sp, #7
 80017bc:	4630      	mov	r0, r6
 80017be:	f007 fee9 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80017c2:	4652      	mov	r2, sl
 80017c4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017c6:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80017c8:	4620      	mov	r0, r4
 80017ca:	f002 ff17 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0F);
 80017ce:	f04f 010f 	mov.w	r1, #15
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80017d2:	4652      	mov	r2, sl
 80017d4:	4620      	mov	r0, r4
 80017d6:	f88d 1007 	strb.w	r1, [sp, #7]
 80017da:	4641      	mov	r1, r8
 80017dc:	f002 ff0e 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80017e0:	464a      	mov	r2, r9
 80017e2:	4651      	mov	r1, sl
 80017e4:	4620      	mov	r0, r4
 80017e6:	f002 ff09 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	4652      	mov	r2, sl
 80017f0:	f10d 0107 	add.w	r1, sp, #7
 80017f4:	4630      	mov	r0, r6
 80017f6:	f007 fecd 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80017fa:	4652      	mov	r2, sl
 80017fc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80017fe:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001800:	4620      	mov	r0, r4
 8001802:	f002 fefb 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x09);
 8001806:	2309      	movs	r3, #9
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001808:	4652      	mov	r2, sl
 800180a:	4641      	mov	r1, r8
 800180c:	4620      	mov	r0, r4
 800180e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001812:	f002 fef3 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001816:	464a      	mov	r2, r9
 8001818:	4651      	mov	r1, sl
 800181a:	4620      	mov	r0, r4
 800181c:	f002 feee 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	4652      	mov	r2, sl
 8001826:	f10d 0107 	add.w	r1, sp, #7
 800182a:	4630      	mov	r0, r6
 800182c:	f007 feb2 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001830:	4652      	mov	r2, sl
 8001832:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001834:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001836:	4620      	mov	r0, r4
 8001838:	f002 fee0 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x07);
 800183c:	f04f 0207 	mov.w	r2, #7
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001840:	4641      	mov	r1, r8
 8001842:	4620      	mov	r0, r4
 8001844:	f88d 2007 	strb.w	r2, [sp, #7]
 8001848:	4652      	mov	r2, sl
 800184a:	f002 fed7 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800184e:	464a      	mov	r2, r9
 8001850:	4651      	mov	r1, sl
 8001852:	4620      	mov	r0, r4
 8001854:	f002 fed2 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	4652      	mov	r2, sl
 800185e:	f10d 0107 	add.w	r1, sp, #7
 8001862:	4630      	mov	r0, r6
 8001864:	f007 fe96 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001868:	4652      	mov	r2, sl
 800186a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800186c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800186e:	4620      	mov	r0, r4
 8001870:	f002 fec4 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x08);
 8001874:	2308      	movs	r3, #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001876:	4652      	mov	r2, sl
 8001878:	4641      	mov	r1, r8
 800187a:	4620      	mov	r0, r4
 800187c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001880:	f002 febc 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001884:	464a      	mov	r2, r9
 8001886:	4651      	mov	r1, sl
 8001888:	4620      	mov	r0, r4
 800188a:	f002 feb7 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	4652      	mov	r2, sl
 8001894:	f10d 0107 	add.w	r1, sp, #7
 8001898:	4630      	mov	r0, r6
 800189a:	f007 fe7b 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800189e:	4652      	mov	r2, sl
 80018a0:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80018a2:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f002 fea9 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x03);
 80018aa:	2303      	movs	r3, #3
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80018ac:	4652      	mov	r2, sl
 80018ae:	4641      	mov	r1, r8
 80018b0:	4620      	mov	r0, r4
 80018b2:	f88d 3007 	strb.w	r3, [sp, #7]
 80018b6:	f002 fea1 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80018ba:	464a      	mov	r2, r9
 80018bc:	4651      	mov	r1, sl
 80018be:	4620      	mov	r0, r4
 80018c0:	f002 fe9c 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	4652      	mov	r2, sl
 80018ca:	f10d 0107 	add.w	r1, sp, #7
 80018ce:	4630      	mov	r0, r6
 80018d0:	f007 fe60 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80018d4:	4652      	mov	r2, sl
 80018d6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80018d8:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80018da:	4620      	mov	r0, r4
 80018dc:	f002 fe8e 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0xE8);
 80018e0:	20e8      	movs	r0, #232	@ 0xe8
 80018e2:	f7fe ff87 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 80018e6:	2334      	movs	r3, #52	@ 0x34
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80018e8:	4652      	mov	r2, sl
 80018ea:	4641      	mov	r1, r8
 80018ec:	4620      	mov	r0, r4
 80018ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80018f2:	f002 fe83 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80018f6:	464a      	mov	r2, r9
 80018f8:	4651      	mov	r1, sl
 80018fa:	4620      	mov	r0, r4
 80018fc:	f002 fe7e 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	4652      	mov	r2, sl
 8001906:	f10d 0107 	add.w	r1, sp, #7
 800190a:	4630      	mov	r0, r6
 800190c:	f007 fe42 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001910:	4652      	mov	r2, sl
 8001912:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001914:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001916:	4620      	mov	r0, r4
 8001918:	f002 fe70 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x62);
 800191c:	2062      	movs	r0, #98	@ 0x62
 800191e:	f7fe ff69 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8001922:	f04f 0118 	mov.w	r1, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001926:	4652      	mov	r2, sl
 8001928:	4620      	mov	r0, r4
 800192a:	f88d 1007 	strb.w	r1, [sp, #7]
 800192e:	4641      	mov	r1, r8
 8001930:	f002 fe64 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001934:	464a      	mov	r2, r9
 8001936:	4651      	mov	r1, sl
 8001938:	4620      	mov	r0, r4
 800193a:	f002 fe5f 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800193e:	f10d 0007 	add.w	r0, sp, #7
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	4652      	mov	r2, sl
 8001948:	4601      	mov	r1, r0
 800194a:	4630      	mov	r0, r6
 800194c:	f007 fe22 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001950:	4652      	mov	r2, sl
 8001952:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001954:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001956:	4620      	mov	r0, r4
 8001958:	f002 fe50 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0D);
 800195c:	230d      	movs	r3, #13
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800195e:	4652      	mov	r2, sl
 8001960:	4641      	mov	r1, r8
 8001962:	4620      	mov	r0, r4
 8001964:	f88d 3007 	strb.w	r3, [sp, #7]
 8001968:	f002 fe48 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800196c:	464a      	mov	r2, r9
 800196e:	4651      	mov	r1, sl
 8001970:	4620      	mov	r0, r4
 8001972:	f002 fe43 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001976:	f10d 0007 	add.w	r0, sp, #7
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	4652      	mov	r2, sl
 8001980:	4601      	mov	r1, r0
 8001982:	4630      	mov	r0, r6
 8001984:	f007 fe06 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001988:	4652      	mov	r2, sl
 800198a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800198c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800198e:	4620      	mov	r0, r4
 8001990:	f002 fe34 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001994:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001998:	4652      	mov	r2, sl
 800199a:	4641      	mov	r1, r8
 800199c:	f88d 0007 	strb.w	r0, [sp, #7]
 80019a0:	4620      	mov	r0, r4
 80019a2:	f002 fe2b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80019a6:	464a      	mov	r2, r9
 80019a8:	4651      	mov	r1, sl
 80019aa:	4620      	mov	r0, r4
 80019ac:	f002 fe26 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019b0:	f10d 0e07 	add.w	lr, sp, #7
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	4652      	mov	r2, sl
 80019ba:	4671      	mov	r1, lr
 80019bc:	4630      	mov	r0, r6
 80019be:	f007 fde9 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80019c2:	4652      	mov	r2, sl
 80019c4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019c6:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f002 fe17 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xED);
 80019ce:	23ed      	movs	r3, #237	@ 0xed
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80019d0:	4652      	mov	r2, sl
 80019d2:	4641      	mov	r1, r8
 80019d4:	4620      	mov	r0, r4
 80019d6:	f88d 3007 	strb.w	r3, [sp, #7]
 80019da:	f002 fe0f 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80019de:	464a      	mov	r2, r9
 80019e0:	4651      	mov	r1, sl
 80019e2:	4620      	mov	r0, r4
 80019e4:	f002 fe0a 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019e8:	f10d 0e07 	add.w	lr, sp, #7
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	4652      	mov	r2, sl
 80019f2:	4671      	mov	r1, lr
 80019f4:	4630      	mov	r0, r6
 80019f6:	f007 fdcd 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80019fa:	4652      	mov	r2, sl
 80019fc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80019fe:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a00:	4620      	mov	r0, r4
 8001a02:	f002 fdfb 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001a06:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f88d 3007 	strb.w	r3, [sp, #7]
 8001a14:	f002 fdf2 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a18:	464a      	mov	r2, r9
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f002 fded 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a22:	f10d 0e07 	add.w	lr, sp, #7
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	4652      	mov	r2, sl
 8001a2c:	4671      	mov	r1, lr
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f007 fdb0 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a34:	4652      	mov	r2, sl
 8001a36:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a38:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f002 fdde 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001a40:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a44:	4652      	mov	r2, sl
 8001a46:	4641      	mov	r1, r8
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001a4e:	f002 fdd5 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a52:	464a      	mov	r2, r9
 8001a54:	4651      	mov	r1, sl
 8001a56:	4620      	mov	r0, r4
 8001a58:	f002 fdd0 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a5c:	f10d 0e07 	add.w	lr, sp, #7
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	4652      	mov	r2, sl
 8001a66:	4671      	mov	r1, lr
 8001a68:	4630      	mov	r0, r6
 8001a6a:	f007 fd93 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a6e:	4652      	mov	r2, sl
 8001a70:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a72:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001a74:	4620      	mov	r0, r4
 8001a76:	f002 fdc1 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x18);
 8001a7a:	f04f 0118 	mov.w	r1, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001a7e:	4652      	mov	r2, sl
 8001a80:	4620      	mov	r0, r4
 8001a82:	f88d 1007 	strb.w	r1, [sp, #7]
 8001a86:	4641      	mov	r1, r8
 8001a88:	f002 fdb8 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001a8c:	464a      	mov	r2, r9
 8001a8e:	4651      	mov	r1, sl
 8001a90:	4620      	mov	r0, r4
 8001a92:	f002 fdb3 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001a96:	f10d 0e07 	add.w	lr, sp, #7
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	4652      	mov	r2, sl
 8001aa0:	4671      	mov	r1, lr
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	f007 fd76 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001aac:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f002 fda4 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x0F);
 8001ab4:	f04f 0c0f 	mov.w	ip, #15
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001ab8:	4652      	mov	r2, sl
 8001aba:	4641      	mov	r1, r8
 8001abc:	4620      	mov	r0, r4
 8001abe:	f88d c007 	strb.w	ip, [sp, #7]
 8001ac2:	f002 fd9b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ac6:	464a      	mov	r2, r9
 8001ac8:	4651      	mov	r1, sl
 8001aca:	4620      	mov	r0, r4
 8001acc:	f002 fd96 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ad0:	f10d 0c07 	add.w	ip, sp, #7
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	4652      	mov	r2, sl
 8001ada:	4661      	mov	r1, ip
 8001adc:	4630      	mov	r0, r6
 8001ade:	f007 fd59 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ae2:	4652      	mov	r2, sl
 8001ae4:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ae6:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f002 fd87 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001aee:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001af2:	4652      	mov	r2, sl
 8001af4:	4641      	mov	r1, r8
 8001af6:	f88d 0007 	strb.w	r0, [sp, #7]
 8001afa:	4620      	mov	r0, r4
 8001afc:	f002 fd7e 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b00:	464a      	mov	r2, r9
 8001b02:	4651      	mov	r1, sl
 8001b04:	4620      	mov	r0, r4
 8001b06:	f002 fd79 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b0a:	f10d 0c07 	add.w	ip, sp, #7
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	4652      	mov	r2, sl
 8001b14:	4661      	mov	r1, ip
 8001b16:	4630      	mov	r0, r6
 8001b18:	f007 fd3c 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b1c:	4652      	mov	r2, sl
 8001b1e:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b20:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b22:	4620      	mov	r0, r4
 8001b24:	f002 fd6a 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xEF);
 8001b28:	23ef      	movs	r3, #239	@ 0xef
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b2a:	4652      	mov	r2, sl
 8001b2c:	4641      	mov	r1, r8
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f88d 3007 	strb.w	r3, [sp, #7]
 8001b34:	f002 fd62 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b38:	464a      	mov	r2, r9
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f002 fd5d 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b42:	f10d 0c07 	add.w	ip, sp, #7
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	4661      	mov	r1, ip
 8001b4e:	4630      	mov	r0, r6
 8001b50:	f007 fd20 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b54:	4652      	mov	r2, sl
 8001b56:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b58:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f002 fd4e 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001b60:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b64:	4652      	mov	r2, sl
 8001b66:	4641      	mov	r1, r8
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001b6e:	f002 fd45 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001b72:	464a      	mov	r2, r9
 8001b74:	4651      	mov	r1, sl
 8001b76:	4620      	mov	r0, r4
 8001b78:	f002 fd40 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b7c:	f10d 0c07 	add.w	ip, sp, #7
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	4652      	mov	r2, sl
 8001b86:	4661      	mov	r1, ip
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f007 fd03 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b8e:	4652      	mov	r2, sl
 8001b90:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001b92:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001b94:	4620      	mov	r0, r4
 8001b96:	f002 fd31 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x70);
 8001b9a:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	4641      	mov	r1, r8
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ba8:	f002 fd28 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001bac:	464a      	mov	r2, r9
 8001bae:	4651      	mov	r1, sl
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f002 fd23 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001bb6:	f10d 0c07 	add.w	ip, sp, #7
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	4652      	mov	r2, sl
 8001bc0:	4661      	mov	r1, ip
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f007 fce6 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001bc8:	4652      	mov	r2, sl
 8001bca:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001bcc:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f002 fd14 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x63);
 8001bd4:	2063      	movs	r0, #99	@ 0x63
 8001bd6:	f7fe fe0d 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 8001bda:	f04f 0118 	mov.w	r1, #24
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001bde:	4652      	mov	r2, sl
 8001be0:	4620      	mov	r0, r4
 8001be2:	f88d 1007 	strb.w	r1, [sp, #7]
 8001be6:	4641      	mov	r1, r8
 8001be8:	f002 fd08 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001bec:	464a      	mov	r2, r9
 8001bee:	4651      	mov	r1, sl
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f002 fd03 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001bf6:	f10d 0c07 	add.w	ip, sp, #7
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	4652      	mov	r2, sl
 8001c00:	4661      	mov	r1, ip
 8001c02:	4630      	mov	r0, r6
 8001c04:	f007 fcc6 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c08:	4652      	mov	r2, sl
 8001c0a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c0c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f002 fcf4 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x11);
 8001c14:	2311      	movs	r3, #17
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c16:	4652      	mov	r2, sl
 8001c18:	4641      	mov	r1, r8
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001c20:	f002 fcec 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001c24:	464a      	mov	r2, r9
 8001c26:	4651      	mov	r1, sl
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f002 fce7 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c2e:	f10d 0c07 	add.w	ip, sp, #7
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	4652      	mov	r2, sl
 8001c38:	4661      	mov	r1, ip
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f007 fcaa 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c40:	4652      	mov	r2, sl
 8001c42:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c44:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c46:	4620      	mov	r0, r4
 8001c48:	f002 fcd8 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001c4c:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c50:	4652      	mov	r2, sl
 8001c52:	4641      	mov	r1, r8
 8001c54:	f88d 0007 	strb.w	r0, [sp, #7]
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f002 fccf 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001c5e:	464a      	mov	r2, r9
 8001c60:	4651      	mov	r1, sl
 8001c62:	4620      	mov	r0, r4
 8001c64:	f002 fcca 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c68:	f10d 0c07 	add.w	ip, sp, #7
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	4652      	mov	r2, sl
 8001c72:	4661      	mov	r1, ip
 8001c74:	4630      	mov	r0, r6
 8001c76:	f007 fc8d 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c7a:	4652      	mov	r2, sl
 8001c7c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001c7e:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f002 fcbb 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001c86:	f10d 0c07 	add.w	ip, sp, #7
 8001c8a:	23f1      	movs	r3, #241	@ 0xf1
 8001c8c:	4660      	mov	r0, ip
 8001c8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001c92:	f7fe fd73 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x70);
 8001c96:	f04f 0370 	mov.w	r3, #112	@ 0x70
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001c9a:	4652      	mov	r2, sl
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ca4:	f002 fcaa 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ca8:	464a      	mov	r2, r9
 8001caa:	4651      	mov	r1, sl
 8001cac:	4620      	mov	r0, r4
 8001cae:	f002 fca5 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001cb2:	f10d 0c07 	add.w	ip, sp, #7
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	4652      	mov	r2, sl
 8001cbc:	4661      	mov	r1, ip
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f007 fc68 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001cc8:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f002 fc96 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001cd0:	f10d 0c07 	add.w	ip, sp, #7
 8001cd4:	f04f 0370 	mov.w	r3, #112	@ 0x70
 8001cd8:	4660      	mov	r0, ip
 8001cda:	f88d 3007 	strb.w	r3, [sp, #7]
 8001cde:	f7fe fd4d 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x18);
 8001ce2:	f04f 0118 	mov.w	r1, #24
 8001ce6:	f88d 1007 	strb.w	r1, [sp, #7]
    GC9A01_write_data(&val, sizeof(val));
 8001cea:	f10d 0107 	add.w	r1, sp, #7
 8001cee:	4608      	mov	r0, r1
 8001cf0:	f7fe fd44 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x13);
 8001cf4:	2313      	movs	r3, #19
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d00:	f002 fc7c 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d04:	464a      	mov	r2, r9
 8001d06:	4651      	mov	r1, sl
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f002 fc77 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	4652      	mov	r2, sl
 8001d14:	f10d 0107 	add.w	r1, sp, #7
 8001d18:	4630      	mov	r0, r6
 8001d1a:	f007 fc3b 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d1e:	4652      	mov	r2, sl
 8001d20:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d22:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d24:	4620      	mov	r0, r4
 8001d26:	f002 fc69 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x71);
 8001d2a:	f04f 0071 	mov.w	r0, #113	@ 0x71
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d2e:	4652      	mov	r2, sl
 8001d30:	4641      	mov	r1, r8
 8001d32:	f88d 0007 	strb.w	r0, [sp, #7]
 8001d36:	4620      	mov	r0, r4
 8001d38:	f002 fc60 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	4651      	mov	r1, sl
 8001d40:	4620      	mov	r0, r4
 8001d42:	f002 fc5b 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	4652      	mov	r2, sl
 8001d4c:	f10d 0107 	add.w	r1, sp, #7
 8001d50:	4630      	mov	r0, r6
 8001d52:	f007 fc1f 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d56:	4652      	mov	r2, sl
 8001d58:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d5a:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f002 fc4d 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xF3);
 8001d62:	23f3      	movs	r3, #243	@ 0xf3
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d64:	4641      	mov	r1, r8
 8001d66:	4652      	mov	r2, sl
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f88d 3007 	strb.w	r3, [sp, #7]
 8001d6e:	f002 fc45 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001d72:	464a      	mov	r2, r9
 8001d74:	4651      	mov	r1, sl
 8001d76:	4620      	mov	r0, r4
 8001d78:	f002 fc40 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	4652      	mov	r2, sl
 8001d82:	f10d 0107 	add.w	r1, sp, #7
 8001d86:	4630      	mov	r0, r6
 8001d88:	f04f 0870 	mov.w	r8, #112	@ 0x70
 8001d8c:	f007 fc02 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d90:	4652      	mov	r2, sl
 8001d92:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001d94:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001d96:	4620      	mov	r0, r4
 8001d98:	f002 fc30 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001d9c:	4652      	mov	r2, sl
 8001d9e:	4620      	mov	r0, r4
 8001da0:	2102      	movs	r1, #2
 8001da2:	f88d 8007 	strb.w	r8, [sp, #7]
 8001da6:	f002 fc29 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001daa:	464a      	mov	r2, r9
 8001dac:	4651      	mov	r1, sl
 8001dae:	4620      	mov	r0, r4
 8001db0:	f002 fc24 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	4652      	mov	r2, sl
 8001dba:	f10d 0107 	add.w	r1, sp, #7
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f007 fbe8 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001dc4:	4652      	mov	r2, sl
 8001dc6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001dc8:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f002 fc16 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001dd0:	4652      	mov	r2, sl
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	f88d 8007 	strb.w	r8, [sp, #7]
 8001dda:	f002 fc0f 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001dde:	464a      	mov	r2, r9
 8001de0:	4651      	mov	r1, sl
 8001de2:	4620      	mov	r0, r4
 8001de4:	f04f 0845 	mov.w	r8, #69	@ 0x45
 8001de8:	f002 fc08 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	4652      	mov	r2, sl
 8001df2:	f10d 0107 	add.w	r1, sp, #7
 8001df6:	4630      	mov	r0, r6
 8001df8:	f007 fbcc 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001dfc:	4652      	mov	r2, sl
 8001dfe:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e00:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e02:	4620      	mov	r0, r4
 8001e04:	f002 fbfa 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x64);
 8001e08:	2064      	movs	r0, #100	@ 0x64
 8001e0a:	f7fe fcf3 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 8001e0e:	2328      	movs	r3, #40	@ 0x28
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e10:	4652      	mov	r2, sl
 8001e12:	4620      	mov	r0, r4
 8001e14:	2102      	movs	r1, #2
 8001e16:	f88d 3007 	strb.w	r3, [sp, #7]
 8001e1a:	f002 fbef 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e1e:	464a      	mov	r2, r9
 8001e20:	4651      	mov	r1, sl
 8001e22:	4620      	mov	r0, r4
 8001e24:	f002 fbea 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	4652      	mov	r2, sl
 8001e2e:	f10d 0107 	add.w	r1, sp, #7
 8001e32:	4630      	mov	r0, r6
 8001e34:	f007 fbae 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e38:	4652      	mov	r2, sl
 8001e3a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e3c:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f002 fbdc 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x29);
 8001e44:	f04f 0329 	mov.w	r3, #41	@ 0x29
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e48:	4652      	mov	r2, sl
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001e52:	f002 fbd3 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e56:	464a      	mov	r2, r9
 8001e58:	4651      	mov	r1, sl
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f002 fbce 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	4652      	mov	r2, sl
 8001e66:	f10d 0107 	add.w	r1, sp, #7
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	f007 fb92 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e70:	4652      	mov	r2, sl
 8001e72:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e74:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001e76:	4620      	mov	r0, r4
 8001e78:	f002 fbc0 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0xF1);
 8001e7c:	f06f 030e 	mvn.w	r3, #14
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001e80:	4652      	mov	r2, sl
 8001e82:	4620      	mov	r0, r4
 8001e84:	2102      	movs	r1, #2
 8001e86:	461d      	mov	r5, r3
 8001e88:	f88d 3007 	strb.w	r3, [sp, #7]
 8001e8c:	f002 fbb6 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001e90:	464a      	mov	r2, r9
 8001e92:	4651      	mov	r1, sl
 8001e94:	4620      	mov	r0, r4
 8001e96:	f002 fbb1 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	f10d 0107 	add.w	r1, sp, #7
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f007 fb75 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001eaa:	4652      	mov	r2, sl
 8001eac:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001eae:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f002 fba2 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001eb8:	4652      	mov	r2, sl
 8001eba:	4620      	mov	r0, r4
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	f88d a007 	strb.w	sl, [sp, #7]
 8001ec2:	f002 fb9b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ec6:	464a      	mov	r2, r9
 8001ec8:	4651      	mov	r1, sl
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f002 fb96 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	4652      	mov	r2, sl
 8001ed6:	f10d 0107 	add.w	r1, sp, #7
 8001eda:	4630      	mov	r0, r6
 8001edc:	f007 fb5a 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ee0:	4652      	mov	r2, sl
 8001ee2:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ee4:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f002 fb87 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001eee:	4652      	mov	r2, sl
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	f88d 5007 	strb.w	r5, [sp, #7]
 8001ef8:	f002 fb80 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001efc:	464a      	mov	r2, r9
 8001efe:	4651      	mov	r1, sl
 8001f00:	4620      	mov	r0, r4
 8001f02:	f04f 0507 	mov.w	r5, #7
 8001f06:	f002 fb79 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	4652      	mov	r2, sl
 8001f10:	f10d 0107 	add.w	r1, sp, #7
 8001f14:	4630      	mov	r0, r6
 8001f16:	f007 fb3d 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f1e:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f22:	4620      	mov	r0, r4
 8001f24:	f002 fb6a 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001f28:	4652      	mov	r2, sl
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	f88d 9007 	strb.w	r9, [sp, #7]
 8001f32:	f002 fb63 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001f36:	464a      	mov	r2, r9
 8001f38:	4651      	mov	r1, sl
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f002 fb5e 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	4652      	mov	r2, sl
 8001f46:	f10d 0107 	add.w	r1, sp, #7
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	f007 fb22 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f50:	4652      	mov	r2, sl
 8001f52:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f54:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f002 fb4f 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001f5e:	4652      	mov	r2, sl
 8001f60:	4620      	mov	r0, r4
 8001f62:	2102      	movs	r1, #2
 8001f64:	f88d 5007 	strb.w	r5, [sp, #7]
 8001f68:	f002 fb48 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001f6c:	464a      	mov	r2, r9
 8001f6e:	4651      	mov	r1, sl
 8001f70:	4620      	mov	r0, r4
 8001f72:	f002 fb43 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	4652      	mov	r2, sl
 8001f7c:	f10d 0107 	add.w	r1, sp, #7
 8001f80:	4630      	mov	r0, r6
 8001f82:	f007 fb07 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f86:	4652      	mov	r2, sl
 8001f88:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001f8a:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f002 fb34 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x66);
 8001f94:	2066      	movs	r0, #102	@ 0x66
 8001f96:	f7fe fc2d 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 8001f9a:	f04f 033c 	mov.w	r3, #60	@ 0x3c
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001f9e:	4652      	mov	r2, sl
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	f88d 3007 	strb.w	r3, [sp, #7]
 8001fa8:	f002 fb28 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001fac:	464a      	mov	r2, r9
 8001fae:	4651      	mov	r1, sl
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f002 fb23 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	4652      	mov	r2, sl
 8001fbc:	f10d 0107 	add.w	r1, sp, #7
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f007 fae7 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001fc6:	4652      	mov	r2, sl
 8001fc8:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001fca:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f002 fb14 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_data(&val, sizeof(val));
 8001fd4:	f10d 0007 	add.w	r0, sp, #7
 8001fd8:	f88d 9007 	strb.w	r9, [sp, #7]
 8001fdc:	f7fe fbce 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0xCD);
 8001fe0:	23cd      	movs	r3, #205	@ 0xcd
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8001fe2:	4652      	mov	r2, sl
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	f88d 3007 	strb.w	r3, [sp, #7]
 8001fec:	f002 fb06 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	4651      	mov	r1, sl
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f002 fb01 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	4652      	mov	r2, sl
 8002000:	f10d 0107 	add.w	r1, sp, #7
 8002004:	4630      	mov	r0, r6
 8002006:	f007 fac5 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800200a:	4652      	mov	r2, sl
 800200c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800200e:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002012:	4620      	mov	r0, r4
 8002014:	f002 faf2 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x67);
 8002018:	f04f 0167 	mov.w	r1, #103	@ 0x67
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800201c:	4652      	mov	r2, sl
 800201e:	4620      	mov	r0, r4
 8002020:	f88d 1007 	strb.w	r1, [sp, #7]
 8002024:	2102      	movs	r1, #2
 8002026:	f002 fae9 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800202a:	464a      	mov	r2, r9
 800202c:	4651      	mov	r1, sl
 800202e:	4620      	mov	r0, r4
 8002030:	f002 fae4 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	4652      	mov	r2, sl
 800203a:	f10d 0107 	add.w	r1, sp, #7
 800203e:	4630      	mov	r0, r6
 8002040:	f007 faa8 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002044:	4652      	mov	r2, sl
 8002046:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002048:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800204c:	4620      	mov	r0, r4
 800204e:	f002 fad5 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002052:	4652      	mov	r2, sl
 8002054:	4620      	mov	r0, r4
 8002056:	2102      	movs	r1, #2
 8002058:	f88d 8007 	strb.w	r8, [sp, #7]
 800205c:	f002 face 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002060:	464a      	mov	r2, r9
 8002062:	4651      	mov	r1, sl
 8002064:	4620      	mov	r0, r4
 8002066:	f002 fac9 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	4652      	mov	r2, sl
 8002070:	f10d 0107 	add.w	r1, sp, #7
 8002074:	4630      	mov	r0, r6
 8002076:	f007 fa8d 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800207a:	4652      	mov	r2, sl
 800207c:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800207e:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002082:	4620      	mov	r0, r4
 8002084:	f002 faba 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002088:	4652      	mov	r2, sl
 800208a:	4620      	mov	r0, r4
 800208c:	2102      	movs	r1, #2
 800208e:	f88d 8007 	strb.w	r8, [sp, #7]
 8002092:	f002 fab3 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002096:	464a      	mov	r2, r9
 8002098:	4651      	mov	r1, sl
 800209a:	4620      	mov	r0, r4
 800209c:	f04f 0810 	mov.w	r8, #16
 80020a0:	f002 faac 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	4652      	mov	r2, sl
 80020aa:	f10d 0107 	add.w	r1, sp, #7
 80020ae:	4630      	mov	r0, r6
 80020b0:	f007 fa70 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020b4:	4652      	mov	r2, sl
 80020b6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020b8:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020bc:	4620      	mov	r0, r4
 80020be:	f002 fa9d 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80020c2:	4652      	mov	r2, sl
 80020c4:	4620      	mov	r0, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	f88d 8007 	strb.w	r8, [sp, #7]
 80020cc:	f002 fa96 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80020d0:	464a      	mov	r2, r9
 80020d2:	4651      	mov	r1, sl
 80020d4:	4620      	mov	r0, r4
 80020d6:	f002 fa91 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	4652      	mov	r2, sl
 80020e0:	f10d 0107 	add.w	r1, sp, #7
 80020e4:	4630      	mov	r0, r6
 80020e6:	f007 fa55 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020ea:	4652      	mov	r2, sl
 80020ec:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80020ee:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80020f2:	4620      	mov	r0, r4
 80020f4:	f002 fa82 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80020f8:	4652      	mov	r2, sl
 80020fa:	4620      	mov	r0, r4
 80020fc:	2102      	movs	r1, #2
 80020fe:	f88d 9007 	strb.w	r9, [sp, #7]
 8002102:	f002 fa7b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002106:	464a      	mov	r2, r9
 8002108:	4651      	mov	r1, sl
 800210a:	4620      	mov	r0, r4
 800210c:	f002 fa76 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
 8002114:	4652      	mov	r2, sl
 8002116:	f10d 0107 	add.w	r1, sp, #7
 800211a:	4630      	mov	r0, r6
 800211c:	f007 fa3a 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002120:	4652      	mov	r2, sl
 8002122:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002124:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002128:	4620      	mov	r0, r4
 800212a:	f002 fa67 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800212e:	4652      	mov	r2, sl
 8002130:	4620      	mov	r0, r4
 8002132:	2102      	movs	r1, #2
 8002134:	f88d 9007 	strb.w	r9, [sp, #7]
 8002138:	f002 fa60 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800213c:	464a      	mov	r2, r9
 800213e:	4651      	mov	r1, sl
 8002140:	4620      	mov	r0, r4
 8002142:	f002 fa5b 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	4652      	mov	r2, sl
 800214c:	f10d 0107 	add.w	r1, sp, #7
 8002150:	4630      	mov	r0, r6
 8002152:	f007 fa1f 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002156:	4652      	mov	r2, sl
 8002158:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800215a:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800215e:	4620      	mov	r0, r4
 8002160:	f002 fa4c 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002164:	4652      	mov	r2, sl
 8002166:	4620      	mov	r0, r4
 8002168:	2102      	movs	r1, #2
 800216a:	f88d 9007 	strb.w	r9, [sp, #7]
 800216e:	f002 fa45 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002172:	464a      	mov	r2, r9
 8002174:	4651      	mov	r1, sl
 8002176:	4620      	mov	r0, r4
 8002178:	f002 fa40 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	4652      	mov	r2, sl
 8002182:	f10d 0107 	add.w	r1, sp, #7
 8002186:	4630      	mov	r0, r6
 8002188:	f007 fa04 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800218c:	4652      	mov	r2, sl
 800218e:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002190:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002194:	4620      	mov	r0, r4
 8002196:	f002 fa31 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x67);
 800219a:	2067      	movs	r0, #103	@ 0x67
 800219c:	f7fe fb2a 	bl	80007f4 <GC9A01_write_command>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80021a0:	4652      	mov	r2, sl
 80021a2:	4620      	mov	r0, r4
 80021a4:	2102      	movs	r1, #2
 80021a6:	f88d 9007 	strb.w	r9, [sp, #7]
 80021aa:	f002 fa27 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80021ae:	464a      	mov	r2, r9
 80021b0:	4651      	mov	r1, sl
 80021b2:	4620      	mov	r0, r4
 80021b4:	f002 fa22 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
 80021bc:	4652      	mov	r2, sl
 80021be:	f10d 0107 	add.w	r1, sp, #7
 80021c2:	4630      	mov	r0, r6
 80021c4:	f007 f9e6 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80021c8:	4652      	mov	r2, sl
 80021ca:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80021cc:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80021d0:	4620      	mov	r0, r4
 80021d2:	f002 fa13 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x3C);
 80021d6:	f04f 033c 	mov.w	r3, #60	@ 0x3c
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80021da:	4652      	mov	r2, sl
 80021dc:	4620      	mov	r0, r4
 80021de:	2102      	movs	r1, #2
 80021e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80021e4:	f002 fa0a 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80021e8:	464a      	mov	r2, r9
 80021ea:	4651      	mov	r1, sl
 80021ec:	4620      	mov	r0, r4
 80021ee:	f002 fa05 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	4652      	mov	r2, sl
 80021f8:	f10d 0107 	add.w	r1, sp, #7
 80021fc:	4630      	mov	r0, r6
 80021fe:	f007 f9c9 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002202:	4652      	mov	r2, sl
 8002204:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002206:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800220a:	4620      	mov	r0, r4
 800220c:	f002 f9f6 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002210:	4652      	mov	r2, sl
 8002212:	4620      	mov	r0, r4
 8002214:	2102      	movs	r1, #2
 8002216:	f88d 9007 	strb.w	r9, [sp, #7]
 800221a:	f002 f9ef 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800221e:	464a      	mov	r2, r9
 8002220:	4651      	mov	r1, sl
 8002222:	4620      	mov	r0, r4
 8002224:	f002 f9ea 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	4652      	mov	r2, sl
 800222e:	f10d 0107 	add.w	r1, sp, #7
 8002232:	4630      	mov	r0, r6
 8002234:	f007 f9ae 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002238:	4652      	mov	r2, sl
 800223a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800223c:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002240:	4620      	mov	r0, r4
 8002242:	f002 f9db 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002246:	4652      	mov	r2, sl
 8002248:	4620      	mov	r0, r4
 800224a:	2102      	movs	r1, #2
 800224c:	f88d 9007 	strb.w	r9, [sp, #7]
 8002250:	f002 f9d4 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002254:	464a      	mov	r2, r9
 8002256:	4651      	mov	r1, sl
 8002258:	4620      	mov	r0, r4
 800225a:	f002 f9cf 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	4652      	mov	r2, sl
 8002264:	f10d 0107 	add.w	r1, sp, #7
 8002268:	4630      	mov	r0, r6
 800226a:	f007 f993 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800226e:	4652      	mov	r2, sl
 8002270:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002272:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002276:	4620      	mov	r0, r4
 8002278:	f002 f9c0 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800227c:	4652      	mov	r2, sl
 800227e:	4620      	mov	r0, r4
 8002280:	2102      	movs	r1, #2
 8002282:	f88d 9007 	strb.w	r9, [sp, #7]
 8002286:	f002 f9b9 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800228a:	464a      	mov	r2, r9
 800228c:	4651      	mov	r1, sl
 800228e:	4620      	mov	r0, r4
 8002290:	f002 f9b4 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
 8002298:	4652      	mov	r2, sl
 800229a:	f10d 0107 	add.w	r1, sp, #7
 800229e:	4630      	mov	r0, r6
 80022a0:	f007 f978 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022a4:	4652      	mov	r2, sl
 80022a6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80022a8:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022ac:	4620      	mov	r0, r4
 80022ae:	f002 f9a5 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80022b2:	4652      	mov	r2, sl
 80022b4:	4620      	mov	r0, r4
 80022b6:	2102      	movs	r1, #2
 80022b8:	f88d a007 	strb.w	sl, [sp, #7]
 80022bc:	f002 f99e 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80022c0:	464a      	mov	r2, r9
 80022c2:	4651      	mov	r1, sl
 80022c4:	4620      	mov	r0, r4
 80022c6:	f002 f999 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	4652      	mov	r2, sl
 80022d0:	f10d 0107 	add.w	r1, sp, #7
 80022d4:	4630      	mov	r0, r6
 80022d6:	f007 f95d 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022da:	4652      	mov	r2, sl
 80022dc:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80022de:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80022e2:	4620      	mov	r0, r4
 80022e4:	f002 f98a 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x54);
 80022e8:	2354      	movs	r3, #84	@ 0x54
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80022ea:	4652      	mov	r2, sl
 80022ec:	4620      	mov	r0, r4
 80022ee:	2102      	movs	r1, #2
 80022f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80022f4:	f002 f982 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80022f8:	464a      	mov	r2, r9
 80022fa:	4651      	mov	r1, sl
 80022fc:	4620      	mov	r0, r4
 80022fe:	f002 f97d 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	4652      	mov	r2, sl
 8002308:	f10d 0107 	add.w	r1, sp, #7
 800230c:	4630      	mov	r0, r6
 800230e:	f007 f941 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002312:	4652      	mov	r2, sl
 8002314:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002316:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800231a:	4620      	mov	r0, r4
 800231c:	f002 f96e 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002320:	4652      	mov	r2, sl
 8002322:	4620      	mov	r0, r4
 8002324:	2102      	movs	r1, #2
 8002326:	f88d 8007 	strb.w	r8, [sp, #7]
 800232a:	f002 f967 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800232e:	464a      	mov	r2, r9
 8002330:	4651      	mov	r1, sl
 8002332:	4620      	mov	r0, r4
 8002334:	f002 f962 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	4652      	mov	r2, sl
 800233e:	f10d 0107 	add.w	r1, sp, #7
 8002342:	4630      	mov	r0, r6
 8002344:	f007 f926 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002348:	4652      	mov	r2, sl
 800234a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800234c:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002350:	4620      	mov	r0, r4
 8002352:	f002 f953 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x32);
 8002356:	2332      	movs	r3, #50	@ 0x32
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002358:	4652      	mov	r2, sl
 800235a:	4620      	mov	r0, r4
 800235c:	2102      	movs	r1, #2
 800235e:	f88d 3007 	strb.w	r3, [sp, #7]
 8002362:	f002 f94b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002366:	464a      	mov	r2, r9
 8002368:	4651      	mov	r1, sl
 800236a:	4620      	mov	r0, r4
 800236c:	f002 f946 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	4652      	mov	r2, sl
 8002376:	f10d 0107 	add.w	r1, sp, #7
 800237a:	4630      	mov	r0, r6
 800237c:	f007 f90a 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002380:	4652      	mov	r2, sl
 8002382:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002384:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002388:	4620      	mov	r0, r4
 800238a:	f002 f937 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800238e:	4652      	mov	r2, sl
 8002390:	4620      	mov	r0, r4
 8002392:	2102      	movs	r1, #2
 8002394:	f88d 7007 	strb.w	r7, [sp, #7]
 8002398:	f002 f930 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800239c:	464a      	mov	r2, r9
 800239e:	4651      	mov	r1, sl
 80023a0:	4620      	mov	r0, r4
 80023a2:	f002 f92b 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	4652      	mov	r2, sl
 80023ac:	f10d 0107 	add.w	r1, sp, #7
 80023b0:	4630      	mov	r0, r6
 80023b2:	f007 f8ef 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80023b6:	4652      	mov	r2, sl
 80023b8:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80023ba:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80023be:	4620      	mov	r0, r4
 80023c0:	f002 f91c 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x74);
 80023c4:	2074      	movs	r0, #116	@ 0x74
 80023c6:	f7fe fa15 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_data(&val, sizeof(val));
 80023ca:	f10d 0007 	add.w	r0, sp, #7
 80023ce:	f88d 8007 	strb.w	r8, [sp, #7]
 80023d2:	f7fe f9d3 	bl	800077c <GC9A01_write_data.constprop.0>
    GC9A01_write_byte(0x85);
 80023d6:	2385      	movs	r3, #133	@ 0x85
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80023d8:	4652      	mov	r2, sl
 80023da:	4620      	mov	r0, r4
 80023dc:	2102      	movs	r1, #2
 80023de:	f88d 3007 	strb.w	r3, [sp, #7]
 80023e2:	f002 f90b 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80023e6:	464a      	mov	r2, r9
 80023e8:	4651      	mov	r1, sl
 80023ea:	4620      	mov	r0, r4
 80023ec:	f002 f906 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	4652      	mov	r2, sl
 80023f6:	f10d 0107 	add.w	r1, sp, #7
 80023fa:	4630      	mov	r0, r6
 80023fc:	f007 f8ca 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002400:	4652      	mov	r2, sl
 8002402:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002404:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002408:	4620      	mov	r0, r4
 800240a:	f002 f8f7 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x80);
 800240e:	2380      	movs	r3, #128	@ 0x80
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002410:	4652      	mov	r2, sl
 8002412:	4620      	mov	r0, r4
 8002414:	2102      	movs	r1, #2
 8002416:	f88d 3007 	strb.w	r3, [sp, #7]
 800241a:	f002 f8ef 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800241e:	464a      	mov	r2, r9
 8002420:	4651      	mov	r1, sl
 8002422:	4620      	mov	r0, r4
 8002424:	f002 f8ea 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002428:	f04f 33ff 	mov.w	r3, #4294967295
 800242c:	4652      	mov	r2, sl
 800242e:	f10d 0107 	add.w	r1, sp, #7
 8002432:	4630      	mov	r0, r6
 8002434:	f007 f8ae 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002438:	4652      	mov	r2, sl
 800243a:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800243c:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002440:	4620      	mov	r0, r4
 8002442:	f002 f8db 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002446:	4652      	mov	r2, sl
 8002448:	4620      	mov	r0, r4
 800244a:	2102      	movs	r1, #2
 800244c:	f88d 9007 	strb.w	r9, [sp, #7]
 8002450:	f002 f8d4 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002454:	464a      	mov	r2, r9
 8002456:	4651      	mov	r1, sl
 8002458:	4620      	mov	r0, r4
 800245a:	f002 f8cf 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	4652      	mov	r2, sl
 8002464:	f10d 0107 	add.w	r1, sp, #7
 8002468:	4630      	mov	r0, r6
 800246a:	f007 f893 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800246e:	4652      	mov	r2, sl
 8002470:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002472:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002476:	4620      	mov	r0, r4
 8002478:	f002 f8c0 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800247c:	4652      	mov	r2, sl
 800247e:	4620      	mov	r0, r4
 8002480:	2102      	movs	r1, #2
 8002482:	f88d 9007 	strb.w	r9, [sp, #7]
 8002486:	f002 f8b9 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800248a:	464a      	mov	r2, r9
 800248c:	4651      	mov	r1, sl
 800248e:	4620      	mov	r0, r4
 8002490:	f002 f8b4 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	4652      	mov	r2, sl
 800249a:	f10d 0107 	add.w	r1, sp, #7
 800249e:	4630      	mov	r0, r6
 80024a0:	f007 f878 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024a4:	4652      	mov	r2, sl
 80024a6:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80024a8:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f002 f8a5 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_byte(0x4E);
 80024b2:	234e      	movs	r3, #78	@ 0x4e
    GC9A01_write_data(&val, sizeof(val));
 80024b4:	f10d 0007 	add.w	r0, sp, #7
 80024b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80024bc:	f7fe f95e 	bl	800077c <GC9A01_write_data.constprop.0>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80024c0:	4652      	mov	r2, sl
 80024c2:	4620      	mov	r0, r4
 80024c4:	2102      	movs	r1, #2
 80024c6:	f88d 9007 	strb.w	r9, [sp, #7]
 80024ca:	f002 f897 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80024ce:	464a      	mov	r2, r9
 80024d0:	4651      	mov	r1, sl
 80024d2:	4620      	mov	r0, r4
 80024d4:	f002 f892 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	4652      	mov	r2, sl
 80024de:	f10d 0107 	add.w	r1, sp, #7
 80024e2:	4630      	mov	r0, r6
 80024e4:	f007 f856 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024e8:	4652      	mov	r2, sl
 80024ea:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80024ec:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80024f0:	4620      	mov	r0, r4
 80024f2:	f002 f883 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x98);
 80024f6:	4638      	mov	r0, r7
 80024f8:	f7fe f97c 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 80024fc:	233e      	movs	r3, #62	@ 0x3e
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80024fe:	4652      	mov	r2, sl
 8002500:	4620      	mov	r0, r4
 8002502:	2102      	movs	r1, #2
 8002504:	f88d 3007 	strb.w	r3, [sp, #7]
 8002508:	f002 f878 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800250c:	464a      	mov	r2, r9
 800250e:	4651      	mov	r1, sl
 8002510:	4620      	mov	r0, r4
 8002512:	f002 f873 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	4652      	mov	r2, sl
 800251c:	f10d 0107 	add.w	r1, sp, #7
 8002520:	4630      	mov	r0, r6
 8002522:	f007 f837 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002526:	4652      	mov	r2, sl
 8002528:	4651      	mov	r1, sl
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800252a:	f88b 0000 	strb.w	r0, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800252e:	4620      	mov	r0, r4
 8002530:	f002 f864 	bl	80045fc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002534:	4652      	mov	r2, sl
 8002536:	4620      	mov	r0, r4
 8002538:	2102      	movs	r1, #2
 800253a:	f88d 5007 	strb.w	r5, [sp, #7]
 800253e:	f002 f85d 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002542:	464a      	mov	r2, r9
 8002544:	4651      	mov	r1, sl
 8002546:	4620      	mov	r0, r4
 8002548:	f002 f858 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800254c:	f10d 0107 	add.w	r1, sp, #7
 8002550:	4652      	mov	r2, sl
 8002552:	4630      	mov	r0, r6
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	f007 f81c 	bl	8009594 <HAL_SPI_Transmit>
 800255c:	4603      	mov	r3, r0
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800255e:	4652      	mov	r2, sl
 8002560:	4651      	mov	r1, sl
 8002562:	4620      	mov	r0, r4
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002564:	f88b 3000 	strb.w	r3, [fp]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002568:	f002 f848 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(0x35);
 800256c:	2035      	movs	r0, #53	@ 0x35
 800256e:	f7fe f941 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 8002572:	2021      	movs	r0, #33	@ 0x21
 8002574:	f7fe f93e 	bl	80007f4 <GC9A01_write_command>
    GC9A01_write_command(0x11);
 8002578:	2011      	movs	r0, #17
 800257a:	f7fe f93b 	bl	80007f4 <GC9A01_write_command>
    HAL_Delay(120);
 800257e:	2078      	movs	r0, #120	@ 0x78
 8002580:	f001 fca2 	bl	8003ec8 <HAL_Delay>
    GC9A01_write_command(0x29);
 8002584:	2029      	movs	r0, #41	@ 0x29
 8002586:	f7fe f935 	bl	80007f4 <GC9A01_write_command>
    HAL_Delay(20);
 800258a:	2014      	movs	r0, #20
}
 800258c:	b003      	add	sp, #12
 800258e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(20);
 8002592:	f001 bc99 	b.w	8003ec8 <HAL_Delay>
 8002596:	bf00      	nop

08002598 <GC9A01_set_frame>:
void GC9A01_set_frame(struct GC9A01_frame frame) {
 8002598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	b084      	sub	sp, #16
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800259e:	4c48      	ldr	r4, [pc, #288]	@ (80026c0 <GC9A01_set_frame+0x128>)
 80025a0:	222a      	movs	r2, #42	@ 0x2a
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025a2:	4e48      	ldr	r6, [pc, #288]	@ (80026c4 <GC9A01_set_frame+0x12c>)
void GC9A01_set_frame(struct GC9A01_frame frame) {
 80025a4:	466b      	mov	r3, sp
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025a6:	4d48      	ldr	r5, [pc, #288]	@ (80026c8 <GC9A01_set_frame+0x130>)
 80025a8:	f88d 200c 	strb.w	r2, [sp, #12]
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80025ac:	2200      	movs	r2, #0
void GC9A01_set_frame(struct GC9A01_frame frame) {
 80025ae:	e883 0003 	stmia.w	r3, {r0, r1}
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80025b2:	4620      	mov	r0, r4
 80025b4:	2102      	movs	r1, #2
 80025b6:	f8bd a000 	ldrh.w	sl, [sp]
 80025ba:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80025be:	f8bd 9004 	ldrh.w	r9, [sp, #4]
 80025c2:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 80025c6:	f002 f819 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80025ca:	4620      	mov	r0, r4
 80025cc:	2200      	movs	r2, #0
 80025ce:	2101      	movs	r1, #1
 80025d0:	f002 f814 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	a903      	add	r1, sp, #12
 80025da:	2201      	movs	r2, #1
 80025dc:	4630      	mov	r0, r6
 80025de:	f006 ffd9 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80025e2:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80025e4:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80025e6:	4620      	mov	r0, r4
 80025e8:	4611      	mov	r1, r2
 80025ea:	f002 f807 	bl	80045fc <HAL_GPIO_WritePin>
    data[0] = (frame.start.X >> 8) & 0xFF;
 80025ee:	2300      	movs	r3, #0
 80025f0:	ea4f 221a 	mov.w	r2, sl, lsr #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 80025f4:	4620      	mov	r0, r4
 80025f6:	2102      	movs	r1, #2
    data[0] = (frame.start.X >> 8) & 0xFF;
 80025f8:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.X >> 8) & 0xFF;
 80025fc:	ea4f 2219 	mov.w	r2, r9, lsr #8
    data[0] = (frame.start.X >> 8) & 0xFF;
 8002600:	f36a 230f 	bfi	r3, sl, #8, #8
 8002604:	f362 4317 	bfi	r3, r2, #16, #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002608:	2201      	movs	r2, #1
    data[0] = (frame.start.X >> 8) & 0xFF;
 800260a:	f369 631f 	bfi	r3, r9, #24, #8
 800260e:	9303      	str	r3, [sp, #12]
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002610:	f001 fff4 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002614:	4620      	mov	r0, r4
 8002616:	2200      	movs	r2, #0
 8002618:	2101      	movs	r1, #1
 800261a:	f001 ffef 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	a903      	add	r1, sp, #12
 8002624:	2204      	movs	r2, #4
 8002626:	4630      	mov	r0, r6
 8002628:	f006 ffb4 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800262c:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800262e:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002630:	4620      	mov	r0, r4
 8002632:	4611      	mov	r1, r2
 8002634:	f001 ffe2 	bl	80045fc <HAL_GPIO_WritePin>
    GC9A01_write_command(ROW_ADDR_SET);
 8002638:	232b      	movs	r3, #43	@ 0x2b
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800263a:	4620      	mov	r0, r4
 800263c:	2200      	movs	r2, #0
 800263e:	2102      	movs	r1, #2
 8002640:	f88d 300b 	strb.w	r3, [sp, #11]
 8002644:	f001 ffda 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002648:	4620      	mov	r0, r4
 800264a:	2200      	movs	r2, #0
 800264c:	2101      	movs	r1, #1
 800264e:	f001 ffd5 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
 8002656:	f10d 010b 	add.w	r1, sp, #11
 800265a:	2201      	movs	r2, #1
 800265c:	4630      	mov	r0, r6
 800265e:	f006 ff99 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002662:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002664:	7028      	strb	r0, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002666:	4620      	mov	r0, r4
 8002668:	4611      	mov	r1, r2
 800266a:	f001 ffc7 	bl	80045fc <HAL_GPIO_WritePin>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800266e:	2300      	movs	r3, #0
 8002670:	ea4f 2218 	mov.w	r2, r8, lsr #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002674:	4620      	mov	r0, r4
 8002676:	2102      	movs	r1, #2
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8002678:	f362 0307 	bfi	r3, r2, #0, #8
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800267c:	0a3a      	lsrs	r2, r7, #8
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800267e:	f368 230f 	bfi	r3, r8, #8, #8
 8002682:	f362 4317 	bfi	r3, r2, #16, #8
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 8002686:	2201      	movs	r2, #1
    data[0] = (frame.start.Y >> 8) & 0xFF;
 8002688:	f367 631f 	bfi	r3, r7, #24, #8
 800268c:	9303      	str	r3, [sp, #12]
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800268e:	f001 ffb5 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 8002692:	4620      	mov	r0, r4
 8002694:	2200      	movs	r2, #0
 8002696:	2101      	movs	r1, #1
 8002698:	f001 ffb0 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800269c:	a903      	add	r1, sp, #12
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	4630      	mov	r0, r6
 80026a4:	2204      	movs	r2, #4
 80026a6:	f006 ff75 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026aa:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026ac:	4603      	mov	r3, r0
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026ae:	4620      	mov	r0, r4
 80026b0:	4611      	mov	r1, r2
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026b2:	702b      	strb	r3, [r5, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026b4:	f001 ffa2 	bl	80045fc <HAL_GPIO_WritePin>
}
 80026b8:	b004      	add	sp, #16
 80026ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026be:	bf00      	nop
 80026c0:	58020400 	.word	0x58020400
 80026c4:	240001a0 	.word	0x240001a0
 80026c8:	2400008c 	.word	0x2400008c

080026cc <GC9A01_sleep_mode>:
{
 80026cc:	b510      	push	{r4, lr}
 80026ce:	b082      	sub	sp, #8
	if(command)
 80026d0:	b310      	cbz	r0, 8002718 <GC9A01_sleep_mode+0x4c>
		GC9A01_write_command(SLEEP_MODE_ON);
 80026d2:	2310      	movs	r3, #16
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2102      	movs	r1, #2
 80026d8:	4819      	ldr	r0, [pc, #100]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 80026da:	f88d 3007 	strb.w	r3, [sp, #7]
 80026de:	f001 ff8d 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2101      	movs	r1, #1
 80026e6:	4816      	ldr	r0, [pc, #88]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 80026e8:	f001 ff88 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026ec:	f10d 0107 	add.w	r1, sp, #7
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	2201      	movs	r2, #1
 80026f6:	4813      	ldr	r0, [pc, #76]	@ (8002744 <GC9A01_sleep_mode+0x78>)
 80026f8:	f006 ff4c 	bl	8009594 <HAL_SPI_Transmit>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 80026fc:	2201      	movs	r2, #1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80026fe:	4604      	mov	r4, r0
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <GC9A01_sleep_mode+0x7c>)
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002702:	480f      	ldr	r0, [pc, #60]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 8002704:	4611      	mov	r1, r2
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002706:	701c      	strb	r4, [r3, #0]
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 8002708:	f001 ff78 	bl	80045fc <HAL_GPIO_WritePin>
	HAL_Delay(120);
 800270c:	2078      	movs	r0, #120	@ 0x78
}
 800270e:	b002      	add	sp, #8
 8002710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(120);
 8002714:	f001 bbd8 	b.w	8003ec8 <HAL_Delay>
		GC9A01_write_command(SLEEP_MODE_OFF);
 8002718:	4604      	mov	r4, r0
 800271a:	2311      	movs	r3, #17
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800271c:	2102      	movs	r1, #2
 800271e:	4808      	ldr	r0, [pc, #32]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 8002720:	4622      	mov	r2, r4
 8002722:	f88d 3007 	strb.w	r3, [sp, #7]
 8002726:	f001 ff69 	bl	80045fc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800272a:	4622      	mov	r2, r4
 800272c:	2101      	movs	r1, #1
 800272e:	4804      	ldr	r0, [pc, #16]	@ (8002740 <GC9A01_sleep_mode+0x74>)
 8002730:	f001 ff64 	bl	80045fc <HAL_GPIO_WritePin>
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002734:	2201      	movs	r2, #1
 8002736:	f10d 0107 	add.w	r1, sp, #7
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	e7da      	b.n	80026f6 <GC9A01_sleep_mode+0x2a>
 8002740:	58020400 	.word	0x58020400
 8002744:	240001a0 	.word	0x240001a0
 8002748:	2400008c 	.word	0x2400008c

0800274c <GC9A01_spi_tx>:
{
 800274c:	4684      	mov	ip, r0
 800274e:	460a      	mov	r2, r1
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002750:	4807      	ldr	r0, [pc, #28]	@ (8002770 <GC9A01_spi_tx+0x24>)
 8002752:	4661      	mov	r1, ip
{
 8002754:	b508      	push	{r3, lr}
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	f006 ff1b 	bl	8009594 <HAL_SPI_Transmit>
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <GC9A01_spi_tx+0x28>)

	if(ret != HAL_OK)
		return -1;

	return 1;
 8002760:	2800      	cmp	r0, #0
	ret = HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8002762:	7018      	strb	r0, [r3, #0]

}
 8002764:	bf14      	ite	ne
 8002766:	f04f 30ff 	movne.w	r0, #4294967295
 800276a:	2001      	moveq	r0, #1
 800276c:	bd08      	pop	{r3, pc}
 800276e:	bf00      	nop
 8002770:	240001a0 	.word	0x240001a0
 8002774:	2400008c 	.word	0x2400008c

08002778 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
int JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	4616      	mov	r6, r2
 800277c:	b082      	sub	sp, #8
  Input_frameSize = FrameSize;

  Jpeg_HWDecodingEnd = 0;
  
  /* Start JPEG decoding with DMA method */
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800277e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  JPEGSourceAddress =  FrameSourceAddress ;
 8002782:	4d0a      	ldr	r5, [pc, #40]	@ (80027ac <JPEG_Decode_DMA+0x34>)
  Input_frameIndex=0;
 8002784:	2400      	movs	r4, #0
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 8002786:	9200      	str	r2, [sp, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 8002788:	6029      	str	r1, [r5, #0]
  FrameBufferAddress = DestAddress;
 800278a:	4d09      	ldr	r5, [pc, #36]	@ (80027b0 <JPEG_Decode_DMA+0x38>)
 800278c:	602b      	str	r3, [r5, #0]
  Input_frameIndex=0;
 800278e:	4d09      	ldr	r5, [pc, #36]	@ (80027b4 <JPEG_Decode_DMA+0x3c>)
 8002790:	602c      	str	r4, [r5, #0]
  Input_frameSize = FrameSize;
 8002792:	4d09      	ldr	r5, [pc, #36]	@ (80027b8 <JPEG_Decode_DMA+0x40>)
 8002794:	602e      	str	r6, [r5, #0]
  Jpeg_HWDecodingEnd = 0;
 8002796:	4d09      	ldr	r5, [pc, #36]	@ (80027bc <JPEG_Decode_DMA+0x44>)
 8002798:	602c      	str	r4, [r5, #0]
  if(HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT) != HAL_OK)
 800279a:	f002 fb7d 	bl	8004e98 <HAL_JPEG_Decode_DMA>
	  return -1;
  
  
  return 1;
 800279e:	42a0      	cmp	r0, r4
  
}
 80027a0:	bf14      	ite	ne
 80027a2:	f04f 30ff 	movne.w	r0, #4294967295
 80027a6:	2001      	moveq	r0, #1
 80027a8:	b002      	add	sp, #8
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	24000098 	.word	0x24000098
 80027b0:	2400009c 	.word	0x2400009c
 80027b4:	24000090 	.word	0x24000090
 80027b8:	24000094 	.word	0x24000094
 80027bc:	240000a0 	.word	0x240000a0

080027c0 <HAL_JPEG_InfoReadyCallback>:
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80027c4:	b410      	push	{r4}
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 80027c6:	4c0e      	ldr	r4, [pc, #56]	@ (8002800 <HAL_JPEG_GetDataCallback+0x3c>)
{
 80027c8:	468c      	mov	ip, r1
  if( Input_frameIndex < Input_frameSize)
 80027ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002804 <HAL_JPEG_GetDataCallback+0x40>)
  Input_frameIndex += NbDecodedData;
 80027cc:	6823      	ldr	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80027ce:	6812      	ldr	r2, [r2, #0]
  Input_frameIndex += NbDecodedData;
 80027d0:	440b      	add	r3, r1
 80027d2:	6023      	str	r3, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80027d4:	4293      	cmp	r3, r2
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80027d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002808 <HAL_JPEG_GetDataCallback+0x44>)
 80027d8:	6821      	ldr	r1, [r4, #0]
  if( Input_frameIndex < Input_frameSize)
 80027da:	d20b      	bcs.n	80027f4 <HAL_JPEG_GetDataCallback+0x30>
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80027dc:	1ad2      	subs	r2, r2, r3
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80027de:	4461      	add	r1, ip
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80027e0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 80027e4:	6021      	str	r1, [r4, #0]
  {
    inDataLength = 0; 
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
  
}
 80027e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 80027ea:	bf28      	it	cs
 80027ec:	f44f 3280 	movcs.w	r2, #65536	@ 0x10000
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80027f0:	f002 bb90 	b.w	8004f14 <HAL_JPEG_ConfigInputBuffer>
    inDataLength = 0; 
 80027f4:	2200      	movs	r2, #0
}
 80027f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 80027fa:	f002 bb8b 	b.w	8004f14 <HAL_JPEG_ConfigInputBuffer>
 80027fe:	bf00      	nop
 8002800:	24000090 	.word	0x24000090
 8002804:	24000094 	.word	0x24000094
 8002808:	24000098 	.word	0x24000098

0800280c <HAL_JPEG_DataReadyCallback>:
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_JPEG_DataReadyCallback+0x18>)
{
 800280e:	4611      	mov	r1, r2

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8002810:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
{
 8002814:	b410      	push	{r4}
  FrameBufferAddress += OutDataLength;
 8002816:	681c      	ldr	r4, [r3, #0]
 8002818:	4421      	add	r1, r4
}
 800281a:	f85d 4b04 	ldr.w	r4, [sp], #4
  FrameBufferAddress += OutDataLength;
 800281e:	6019      	str	r1, [r3, #0]
  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 8002820:	f002 bb7c 	b.w	8004f1c <HAL_JPEG_ConfigOutputBuffer>
 8002824:	2400009c 	.word	0x2400009c

08002828 <HAL_JPEG_ErrorCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
  Error_Handler();
 8002828:	f000 b9ca 	b.w	8002bc0 <Error_Handler>

0800282c <HAL_JPEG_DecodeCpltCallback>:
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
  Jpeg_HWDecodingEnd = 1; 
 800282c:	4b01      	ldr	r3, [pc, #4]	@ (8002834 <HAL_JPEG_DecodeCpltCallback+0x8>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
}
 8002832:	4770      	bx	lr
 8002834:	240000a0 	.word	0x240000a0

08002838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002838:	b530      	push	{r4, r5, lr}
 800283a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800283c:	224c      	movs	r2, #76	@ 0x4c
 800283e:	2100      	movs	r1, #0
 8002840:	a80a      	add	r0, sp, #40	@ 0x28
 8002842:	f00a f9b5 	bl	800cbb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002846:	2220      	movs	r2, #32
 8002848:	2100      	movs	r1, #0
 800284a:	a802      	add	r0, sp, #8
 800284c:	f00a f9b0 	bl	800cbb0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002850:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <SystemClock_Config+0xb0>)
 8002852:	f04f 32ff 	mov.w	r2, #4294967295

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002856:	2002      	movs	r0, #2
  RCC->CKGAENR = 0xFFFFFFFF;
 8002858:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800285c:	f003 fb78 	bl	8005f50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002860:	4a22      	ldr	r2, [pc, #136]	@ (80028ec <SystemClock_Config+0xb4>)
 8002862:	2300      	movs	r3, #0
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	6993      	ldr	r3, [r2, #24]
 8002868:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800286c:	6193      	str	r3, [r2, #24]
 800286e:	6993      	ldr	r3, [r2, #24]
 8002870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002878:	6993      	ldr	r3, [r2, #24]
 800287a:	0499      	lsls	r1, r3, #18
 800287c:	d5fc      	bpl.n	8002878 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800287e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002880:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002882:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8002884:	2106      	movs	r1, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002886:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002888:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSI_ON;
 800288a:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800288e:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 23;
 8002890:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8002892:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002894:	9118      	str	r1, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002896:	9417      	str	r4, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002898:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 800289a:	9419      	str	r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800289c:	e9cd 4313 	strd	r4, r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028a0:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 23;
 80028a4:	2317      	movs	r3, #23
 80028a6:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80028aa:	230c      	movs	r3, #12
 80028ac:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ae:	f003 fbe5 	bl	800607c <HAL_RCC_OscConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	b108      	cbz	r0, 80028ba <SystemClock_Config+0x82>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <SystemClock_Config+0x80>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ba:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028bc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80028be:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028c0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c4:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028c6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028c8:	9509      	str	r5, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ca:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80028cc:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028d4:	e9cd 5307 	strd	r5, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028d8:	f003 ff42 	bl	8006760 <HAL_RCC_ClockConfig>
 80028dc:	b108      	cbz	r0, 80028e2 <SystemClock_Config+0xaa>
 80028de:	b672      	cpsid	i
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <SystemClock_Config+0xa8>
}
 80028e2:	b01f      	add	sp, #124	@ 0x7c
 80028e4:	bd30      	pop	{r4, r5, pc}
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	58024800 	.word	0x58024800

080028f0 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80028f0:	4aa3      	ldr	r2, [pc, #652]	@ (8002b80 <main+0x290>)
 80028f2:	6953      	ldr	r3, [r2, #20]
 80028f4:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	@ 0x30
 80028fc:	d111      	bne.n	8002922 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002902:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002906:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800290a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800290e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002912:	6953      	ldr	r3, [r2, #20]
 8002914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002918:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800291a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800291e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8002922:	f001 fa8f 	bl	8003e44 <HAL_Init>
  HAL_Delay(500);
 8002926:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800292a:	f001 facd 	bl	8003ec8 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292e:	2400      	movs	r4, #0
  SystemClock_Config();
 8002930:	f7ff ff82 	bl	8002838 <SystemClock_Config>
  HAL_Delay(500);
 8002934:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002938:	f001 fac6 	bl	8003ec8 <HAL_Delay>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800293c:	4b91      	ldr	r3, [pc, #580]	@ (8002b84 <main+0x294>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800293e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	4891      	ldr	r0, [pc, #580]	@ (8002b88 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002944:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 8002946:	2607      	movs	r6, #7
  DMA2D_Handle.Instance = DMA2D;
 8002948:	4d90      	ldr	r5, [pc, #576]	@ (8002b8c <main+0x29c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800294e:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002952:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002956:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800295a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800295e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002962:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002966:	9202      	str	r2, [sp, #8]
 8002968:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002976:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800297a:	f002 0201 	and.w	r2, r2, #1
 800297e:	9203      	str	r2, [sp, #12]
 8002980:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002986:	f042 0202 	orr.w	r2, r2, #2
 800298a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 800298e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8002992:	f002 0202 	and.w	r2, r2, #2
 8002996:	9204      	str	r2, [sp, #16]
 8002998:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800299e:	f042 0204 	orr.w	r2, r2, #4
 80029a2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80029a6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80029aa:	f002 0204 	and.w	r2, r2, #4
 80029ae:	9205      	str	r2, [sp, #20]
 80029b0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80029be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029c2:	9107      	str	r1, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	9306      	str	r3, [sp, #24]
 80029cc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f001 fccd 	bl	800436c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GC9A01_CS_Pin|GC9A01_DC_Pin, GPIO_PIN_RESET);
 80029d2:	4622      	mov	r2, r4
 80029d4:	2103      	movs	r1, #3
 80029d6:	486e      	ldr	r0, [pc, #440]	@ (8002b90 <main+0x2a0>)
 80029d8:	f001 fe10 	bl	80045fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GC9A01_RST_Pin|GC9A01_BL_Pin, GPIO_PIN_SET);
 80029dc:	2201      	movs	r2, #1
 80029de:	f240 4104 	movw	r1, #1028	@ 0x404
 80029e2:	486b      	ldr	r0, [pc, #428]	@ (8002b90 <main+0x2a0>)
 80029e4:	f001 fe0a 	bl	80045fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin, GPIO_PIN_SET);
 80029e8:	2201      	movs	r2, #1
 80029ea:	2107      	movs	r1, #7
 80029ec:	4869      	ldr	r0, [pc, #420]	@ (8002b94 <main+0x2a4>)
 80029ee:	f001 fe05 	bl	80045fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80029f2:	f240 4307 	movw	r3, #1031	@ 0x407
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f6:	a907      	add	r1, sp, #28
 80029f8:	4865      	ldr	r0, [pc, #404]	@ (8002b90 <main+0x2a0>)
  GPIO_InitStruct.Pin = GC9A01_CS_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin|GC9A01_BL_Pin;
 80029fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	e9cd 7408 	strd	r7, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a02:	f001 fcb3 	bl	800436c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0a:	4862      	ldr	r0, [pc, #392]	@ (8002b94 <main+0x2a4>)
 8002a0c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a0e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a10:	9709      	str	r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = PLUS_BTN_Pin|SET_BTN_Pin|MINUS_BTN_Pin;
 8002a12:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a14:	f001 fcaa 	bl	800436c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a18:	4622      	mov	r2, r4
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	2006      	movs	r0, #6
 8002a1e:	f001 fa87 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a22:	2006      	movs	r0, #6
 8002a24:	f001 fac0 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a28:	4622      	mov	r2, r4
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f001 fa7f 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a32:	4630      	mov	r0, r6
 8002a34:	f001 fab8 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	2008      	movs	r0, #8
 8002a3e:	f001 fa77 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a42:	2008      	movs	r0, #8
 8002a44:	f001 fab0 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
  DMA2D_Handle.Instance = DMA2D;
 8002a48:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <main+0x2a8>)
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8002a4a:	4628      	mov	r0, r5
  DMA2D_Handle.Init.OutputOffset = 0;
 8002a4c:	60ec      	str	r4, [r5, #12]
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8002a4e:	65ec      	str	r4, [r5, #92]	@ 0x5c
  DMA2D_Handle.Instance = DMA2D;
 8002a50:	602b      	str	r3, [r5, #0]
  DMA2D_Handle.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002a52:	e9c5 4401 	strd	r4, r4, [r5, #4]
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002a56:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0;
 8002a5a:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002a5e:	e9c5 4415 	strd	r4, r4, [r5, #84]	@ 0x54
  if (HAL_DMA2D_Init(&DMA2D_Handle) != HAL_OK)
 8002a62:	f001 fae5 	bl	8004030 <HAL_DMA2D_Init>
 8002a66:	b108      	cbz	r0, 8002a6c <main+0x17c>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
  while (1)
 8002a6a:	e7fe      	b.n	8002a6a <main+0x17a>
  if (HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1) != HAL_OK)
 8002a6c:	4639      	mov	r1, r7
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f001 fc12 	bl	8004298 <HAL_DMA2D_ConfigLayer>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d131      	bne.n	8002ade <main+0x1ee>
  hsd1.Instance = SDMMC1;
 8002a7a:	4a48      	ldr	r2, [pc, #288]	@ (8002b9c <main+0x2ac>)
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a7c:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
  hsd1.Instance = SDMMC1;
 8002a80:	4947      	ldr	r1, [pc, #284]	@ (8002ba0 <main+0x2b0>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002a82:	6090      	str	r0, [r2, #8]
  hsd1.Init.ClockDiv = 0;
 8002a84:	6150      	str	r0, [r2, #20]
  hsd1.Instance = SDMMC1;
 8002a86:	e9c2 1000 	strd	r1, r0, [r2]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  hspi1.Instance = SPI1;
 8002a8e:	4845      	ldr	r0, [pc, #276]	@ (8002ba4 <main+0x2b4>)
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a90:	60d1      	str	r1, [r2, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002a92:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  hspi1.Init.CRCPolynomial = 0x0;
 8002a96:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002a98:	6111      	str	r1, [r2, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
  hspi1.Instance = SPI1;
 8002a9e:	4a42      	ldr	r2, [pc, #264]	@ (8002ba8 <main+0x2b8>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa0:	60c6      	str	r6, [r0, #12]
  hspi1.Instance = SPI1;
 8002aa2:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aa4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aa8:	6181      	str	r1, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aaa:	6042      	str	r2, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002aac:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ab0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab8:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002abc:	e9c0 530d 	strd	r5, r3, [r0, #52]	@ 0x34
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac0:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ac4:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ac8:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002acc:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002ad0:	6082      	str	r2, [r0, #8]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ad2:	f006 fc87 	bl	80093e4 <HAL_SPI_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b118      	cbz	r0, 8002ae2 <main+0x1f2>
 8002ada:	b672      	cpsid	i
  while (1)
 8002adc:	e7fe      	b.n	8002adc <main+0x1ec>
 8002ade:	b672      	cpsid	i
 8002ae0:	e7fe      	b.n	8002ae0 <main+0x1f0>
  hrtc.Instance = RTC;
 8002ae2:	4c32      	ldr	r4, [pc, #200]	@ (8002bac <main+0x2bc>)
 8002ae4:	4a32      	ldr	r2, [pc, #200]	@ (8002bb0 <main+0x2c0>)
  RTC_TimeTypeDef sTime = {0};
 8002ae6:	900b      	str	r0, [sp, #44]	@ 0x2c
  hrtc.Instance = RTC;
 8002ae8:	6022      	str	r2, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002aea:	227f      	movs	r2, #127	@ 0x7f
  RTC_DateTypeDef sDate = {0};
 8002aec:	9001      	str	r0, [sp, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002aee:	60a2      	str	r2, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8002af0:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002af2:	6060      	str	r0, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002af4:	6120      	str	r0, [r4, #16]
  hrtc.Init.SynchPrediv = 255;
 8002af6:	60e2      	str	r2, [r4, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002af8:	6163      	str	r3, [r4, #20]
  RTC_TimeTypeDef sTime = {0};
 8002afa:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8002afe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b02:	e9c4 0506 	strd	r0, r5, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b06:	4620      	mov	r0, r4
 8002b08:	f005 fc0c 	bl	8008324 <HAL_RTC_Init>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	b108      	cbz	r0, 8002b14 <main+0x224>
 8002b10:	b672      	cpsid	i
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <main+0x222>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002b14:	a907      	add	r1, sp, #28
 8002b16:	4620      	mov	r0, r4
  sTime.Hours = 0;
 8002b18:	f8ad 201c 	strh.w	r2, [sp, #28]
  sTime.Seconds = 0;
 8002b1c:	f88d 201e 	strb.w	r2, [sp, #30]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b20:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002b24:	f005 fc72 	bl	800840c <HAL_RTC_SetTime>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	b108      	cbz	r0, 8002b30 <main+0x240>
 8002b2c:	b672      	cpsid	i
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <main+0x23e>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <main+0x2c4>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002b32:	a901      	add	r1, sp, #4
 8002b34:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b36:	9301      	str	r3, [sp, #4]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002b38:	f005 fd0a 	bl	8008550 <HAL_RTC_SetDate>
 8002b3c:	b108      	cbz	r0, 8002b42 <main+0x252>
 8002b3e:	b672      	cpsid	i
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <main+0x250>
  HAL_Delay(500);
 8002b42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b46:	f001 f9bf 	bl	8003ec8 <HAL_Delay>
  JPEG_Handle.Instance = JPEG;
 8002b4a:	481b      	ldr	r0, [pc, #108]	@ (8002bb8 <main+0x2c8>)
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <main+0x2cc>)
 8002b4e:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&JPEG_Handle) != HAL_OK)
 8002b50:	f002 f86a 	bl	8004c28 <HAL_JPEG_Init>
 8002b54:	b108      	cbz	r0, 8002b5a <main+0x26a>
 8002b56:	b672      	cpsid	i
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <main+0x268>
  HAL_Delay(500);
 8002b5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b5e:	f001 f9b3 	bl	8003ec8 <HAL_Delay>
  GC9A01_init();
 8002b62:	f7fd fe71 	bl	8000848 <GC9A01_init>
  HAL_Delay(500);
 8002b66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b6a:	f001 f9ad 	bl	8003ec8 <HAL_Delay>
  smart_watch_init();
 8002b6e:	f000 fa3d 	bl	8002fec <smart_watch_init>
  HAL_Delay(500);
 8002b72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b76:	f001 f9a7 	bl	8003ec8 <HAL_Delay>
	  smart_watch_process();
 8002b7a:	f000 fbc9 	bl	8003310 <smart_watch_process>
  while (1)
 8002b7e:	e7fe      	b.n	8002b7e <main+0x28e>
 8002b80:	e000ed00 	.word	0xe000ed00
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58020000 	.word	0x58020000
 8002b8c:	240000e0 	.word	0x240000e0
 8002b90:	58020400 	.word	0x58020400
 8002b94:	58020800 	.word	0x58020800
 8002b98:	52001000 	.word	0x52001000
 8002b9c:	24000228 	.word	0x24000228
 8002ba0:	52007000 	.word	0x52007000
 8002ba4:	240001a0 	.word	0x240001a0
 8002ba8:	40013000 	.word	0x40013000
 8002bac:	240000a4 	.word	0x240000a4
 8002bb0:	58004000 	.word	0x58004000
 8002bb4:	00010101 	.word	0x00010101
 8002bb8:	24000148 	.word	0x24000148
 8002bbc:	52003000 	.word	0x52003000

08002bc0 <Error_Handler>:
 8002bc0:	b672      	cpsid	i
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <Error_Handler+0x2>

08002bc4 <file_handler>:
	enable_btn_int();

}

static void file_handler(uint8_t openFile)
{
 8002bc4:	b530      	push	{r4, r5, lr}
   // Each file takes 1m

   static uint8_t  new_file_flag = 1;


   if(new_file_flag || openFile)
 8002bc6:	4c27      	ldr	r4, [pc, #156]	@ (8002c64 <file_handler+0xa0>)
{
 8002bc8:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8002bca:	7823      	ldrb	r3, [r4, #0]
 8002bcc:	b9cb      	cbnz	r3, 8002c02 <file_handler+0x3e>
 8002bce:	b340      	cbz	r0, 8002c22 <file_handler+0x5e>
   {

  	 if(openFile)
  		 f_close(&MJPEG_File);
 8002bd0:	4825      	ldr	r0, [pc, #148]	@ (8002c68 <file_handler+0xa4>)
 8002bd2:	f009 fd59 	bl	800c688 <f_close>

  	 new_file_flag = 0;
 8002bd6:	2100      	movs	r1, #0

  	 char file_idx_str[4];
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002bd8:	4d24      	ldr	r5, [pc, #144]	@ (8002c6c <file_handler+0xa8>)
 8002bda:	4a25      	ldr	r2, [pc, #148]	@ (8002c70 <file_handler+0xac>)
 8002bdc:	a803      	add	r0, sp, #12
 8002bde:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8002be0:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002be2:	2104      	movs	r1, #4
 8002be4:	f009 ffb0 	bl	800cb48 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8002be8:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <file_handler+0xb0>)
 8002bea:	210e      	movs	r1, #14
 8002bec:	ab03      	add	r3, sp, #12
 8002bee:	4822      	ldr	r0, [pc, #136]	@ (8002c78 <file_handler+0xb4>)
 8002bf0:	f009 ffaa 	bl	800cb48 <sniprintf>

  	 // Open the MJPEG avi file with read access
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4920      	ldr	r1, [pc, #128]	@ (8002c78 <file_handler+0xb4>)
 8002bf8:	481b      	ldr	r0, [pc, #108]	@ (8002c68 <file_handler+0xa4>)
 8002bfa:	f009 fa95 	bl	800c128 <f_open>
 8002bfe:	b118      	cbz	r0, 8002c08 <file_handler+0x44>

  	 }
  	 else
  	 {

  		 while(1);
 8002c00:	e7fe      	b.n	8002c00 <file_handler+0x3c>
  	 if(openFile)
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d0e7      	beq.n	8002bd6 <file_handler+0x12>
 8002c06:	e7e3      	b.n	8002bd0 <file_handler+0xc>
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002c08:	491c      	ldr	r1, [pc, #112]	@ (8002c7c <file_handler+0xb8>)
  		 video.isfirstFrame = 1;
 8002c0a:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002c0c:	9001      	str	r0, [sp, #4]
 8002c0e:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002c12:	9100      	str	r1, [sp, #0]
 8002c14:	481a      	ldr	r0, [pc, #104]	@ (8002c80 <file_handler+0xbc>)
  		 video.isfirstFrame = 1;
 8002c16:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002c18:	4913      	ldr	r1, [pc, #76]	@ (8002c68 <file_handler+0xa4>)
 8002c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c84 <file_handler+0xc0>)
 8002c1c:	f7fd fbb8 	bl	8000390 <AVI_ParserInit>
 8002c20:	b930      	cbnz	r0, 8002c30 <file_handler+0x6c>
  	 }

   }

   // Check for the end of the video
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8002c22:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <file_handler+0xbc>)
 8002c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d202      	bcs.n	8002c32 <file_handler+0x6e>

		 new_file_flag = 1;

   }

}
 8002c2c:	b005      	add	sp, #20
 8002c2e:	bd30      	pop	{r4, r5, pc}
  			 while(1);
 8002c30:	e7fe      	b.n	8002c30 <file_handler+0x6c>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c32:	4d0e      	ldr	r5, [pc, #56]	@ (8002c6c <file_handler+0xa8>)
 8002c34:	4914      	ldr	r1, [pc, #80]	@ (8002c88 <file_handler+0xc4>)
  	 video.file_idx++;
 8002c36:	8aab      	ldrh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c38:	4814      	ldr	r0, [pc, #80]	@ (8002c8c <file_handler+0xc8>)
  	 video.file_idx++;
 8002c3a:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c3c:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	fba1 1202 	umull	r1, r2, r1, r2
 8002c46:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8002c4a:	fb01 3312 	mls	r3, r1, r2, r3
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c4e:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002c50:	82ab      	strh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002c52:	f001 fa89 	bl	8004168 <HAL_DMA2D_PollForTransfer>
		 f_close(&MJPEG_File);
 8002c56:	4804      	ldr	r0, [pc, #16]	@ (8002c68 <file_handler+0xa4>)
 8002c58:	f009 fd16 	bl	800c688 <f_close>
		 new_file_flag = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	7023      	strb	r3, [r4, #0]
}
 8002c60:	b005      	add	sp, #20
 8002c62:	bd30      	pop	{r4, r5, pc}
 8002c64:	24000000 	.word	0x24000000
 8002c68:	240b6484 	.word	0x240b6484
 8002c6c:	240a9bf8 	.word	0x240a9bf8
 8002c70:	0800d4e8 	.word	0x0800d4e8
 8002c74:	0800d4f0 	.word	0x0800d4f0
 8002c78:	240b68e4 	.word	0x240b68e4
 8002c7c:	240a9c3c 	.word	0x240a9c3c
 8002c80:	240b643c 	.word	0x240b643c
 8002c84:	240a9c3c 	.word	0x240a9c3c
 8002c88:	05b05b06 	.word	0x05b05b06
 8002c8c:	240000e0 	.word	0x240000e0

08002c90 <DMA2D_Init.constprop.0>:
	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;

}

static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	460e      	mov	r6, r1
 8002c94:	4605      	mov	r5, r0
{

	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;


	HAL_DMA2D_MspInit(&DMA2D_Handle);
 8002c96:	4822      	ldr	r0, [pc, #136]	@ (8002d20 <DMA2D_Init.constprop.0+0x90>)
 8002c98:	f000 fe28 	bl	80038ec <HAL_DMA2D_MspInit>

	if(ChromaSampling == JPEG_420_SUBSAMPLING)
 8002c9c:	2e01      	cmp	r6, #1
 8002c9e:	d02b      	beq.n	8002cf8 <DMA2D_Init.constprop.0+0x68>
			inputLineOffset = 16 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 8002ca0:	b326      	cbz	r6, 8002cec <DMA2D_Init.constprop.0+0x5c>
			inputLineOffset = 8 - inputLineOffset;

		}

	}
	else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 8002ca2:	2e02      	cmp	r6, #2
 8002ca4:	d033      	beq.n	8002d0e <DMA2D_Init.constprop.0+0x7e>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2601      	movs	r6, #1
		}

	}

  	// Configure the DMA2D Mode, Color Mode and output offset
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002caa:	4c1d      	ldr	r4, [pc, #116]	@ (8002d20 <DMA2D_Init.constprop.0+0x90>)
 8002cac:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  	DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
  	DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 8002cb0:	2300      	movs	r3, #0
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002cb2:	f1c5 05f0 	rsb	r5, r5, #240	@ 0xf0
  	// Foreground Configuration
  	DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
  	DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 8002cb6:	6462      	str	r2, [r4, #68]	@ 0x44
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion

  	DMA2D_Handle.Instance = DMA2D;

  	// DMA2D Initialization
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8002cb8:	4620      	mov	r0, r4
  	DMA2D_Handle.Instance = DMA2D;
 8002cba:	4a1a      	ldr	r2, [pc, #104]	@ (8002d24 <DMA2D_Init.constprop.0+0x94>)
  	DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 8002cbc:	65e6      	str	r6, [r4, #92]	@ 0x5c
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002cbe:	2601      	movs	r6, #1
  	DMA2D_Handle.XferCpltCallback  = NULL;
 8002cc0:	6223      	str	r3, [r4, #32]
  	DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 8002cc2:	e9c4 2100 	strd	r2, r1, [r4]
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8002cc6:	21ff      	movs	r1, #255	@ 0xff
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8002cc8:	220b      	movs	r2, #11
  	DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 8002cca:	e9c4 6113 	strd	r6, r1, [r4, #76]	@ 0x4c
  	DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 8002cce:	e9c4 6502 	strd	r6, r5, [r4, #8]
  	DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 8002cd2:	e9c4 3304 	strd	r3, r3, [r4, #16]
  	DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 8002cd6:	64a2      	str	r2, [r4, #72]	@ 0x48
  	DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 8002cd8:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  	HAL_DMA2D_Init(&DMA2D_Handle);
 8002cdc:	f001 f9a8 	bl	8004030 <HAL_DMA2D_Init>
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002ce0:	4631      	mov	r1, r6
 8002ce2:	4620      	mov	r0, r4

}
 8002ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 8002ce8:	f001 bad6 	b.w	8004298 <HAL_DMA2D_ConfigLayer>
		if(inputLineOffset != 0)
 8002cec:	f015 0207 	ands.w	r2, r5, #7
 8002cf0:	d00b      	beq.n	8002d0a <DMA2D_Init.constprop.0+0x7a>
			inputLineOffset = 8 - inputLineOffset;
 8002cf2:	f1c2 0208 	rsb	r2, r2, #8
 8002cf6:	e7d8      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8002cf8:	f015 020f 	ands.w	r2, r5, #15
 8002cfc:	d003      	beq.n	8002d06 <DMA2D_Init.constprop.0+0x76>
			inputLineOffset = 16 - inputLineOffset;
 8002cfe:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_420;
 8002d02:	2602      	movs	r6, #2
 8002d04:	e7d1      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
 8002d06:	2602      	movs	r6, #2
 8002d08:	e7cf      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	e7cd      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
		if(inputLineOffset != 0)
 8002d0e:	f015 020f 	ands.w	r2, r5, #15
 8002d12:	d003      	beq.n	8002d1c <DMA2D_Init.constprop.0+0x8c>
			inputLineOffset = 16 - inputLineOffset;
 8002d14:	f1c2 0210 	rsb	r2, r2, #16
		cssMode = DMA2D_CSS_422;
 8002d18:	2601      	movs	r6, #1
 8002d1a:	e7c6      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
	uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 8002d1c:	2601      	movs	r6, #1
 8002d1e:	e7c4      	b.n	8002caa <DMA2D_Init.constprop.0+0x1a>
 8002d20:	240000e0 	.word	0x240000e0
 8002d24:	52001000 	.word	0x52001000

08002d28 <show_frame.constprop.0>:
static void show_frame(uint32_t frame_num)
 8002d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2c:	2502      	movs	r5, #2
 8002d2e:	b087      	sub	sp, #28
 8002d30:	4e71      	ldr	r6, [pc, #452]	@ (8002ef8 <show_frame.constprop.0+0x1d0>)
 8002d32:	4c72      	ldr	r4, [pc, #456]	@ (8002efc <show_frame.constprop.0+0x1d4>)
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002d34:	4f72      	ldr	r7, [pc, #456]	@ (8002f00 <show_frame.constprop.0+0x1d8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	4639      	mov	r1, r7
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7fd fc6a 	bl	8000614 <AVI_GetFrame>
 8002d40:	b2c0      	uxtb	r0, r0
		if(video.FrameType == AVI_VIDEO_FRAME)
 8002d42:	2801      	cmp	r0, #1
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8002d44:	75e0      	strb	r0, [r4, #23]
		if(video.FrameType == AVI_VIDEO_FRAME)
 8002d46:	d006      	beq.n	8002d56 <show_frame.constprop.0+0x2e>
	for(int i = 0 ; i < 2 ; i++)
 8002d48:	2d01      	cmp	r5, #1
 8002d4a:	d001      	beq.n	8002d50 <show_frame.constprop.0+0x28>
 8002d4c:	2501      	movs	r5, #1
 8002d4e:	e7f2      	b.n	8002d36 <show_frame.constprop.0+0xe>
}
 8002d50:	b007      	add	sp, #28
 8002d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AVI_Handel.CurrentImage++;
 8002d56:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002d58:	6b32      	ldr	r2, [r6, #48]	@ 0x30
			AVI_Handel.CurrentImage++;
 8002d5a:	3301      	adds	r3, #1
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002d5c:	4969      	ldr	r1, [pc, #420]	@ (8002f04 <show_frame.constprop.0+0x1dc>)
 8002d5e:	486a      	ldr	r0, [pc, #424]	@ (8002f08 <show_frame.constprop.0+0x1e0>)
			AVI_Handel.CurrentImage++;
 8002d60:	62f3      	str	r3, [r6, #44]	@ 0x2c
			video.frameCount++;
 8002d62:	6a23      	ldr	r3, [r4, #32]
 8002d64:	3301      	adds	r3, #1
 8002d66:	6223      	str	r3, [r4, #32]
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8002d68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d6a:	f7ff fd05 	bl	8002778 <JPEG_Decode_DMA>
			while(Jpeg_HWDecodingEnd == 0);
 8002d6e:	4a67      	ldr	r2, [pc, #412]	@ (8002f0c <show_frame.constprop.0+0x1e4>)
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0fc      	beq.n	8002d70 <show_frame.constprop.0+0x48>
			if(video.isfirstFrame == 1)
 8002d76:	7da3      	ldrb	r3, [r4, #22]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f000 808f 	beq.w	8002e9c <show_frame.constprop.0+0x174>
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002d7e:	4a64      	ldr	r2, [pc, #400]	@ (8002f10 <show_frame.constprop.0+0x1e8>)
 8002d80:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8002d84:	fa1f f983 	uxth.w	r9, r3
 8002d88:	fa1f fa82 	uxth.w	sl, r2
	uint32_t xPos, yPos, destination;


	// calculate the destination transfer address
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002d8c:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002d90:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002d94:	f8df 8188 	ldr.w	r8, [pc, #392]	@ 8002f20 <show_frame.constprop.0+0x1f8>

	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;

	// wait for the DMA2D transfer to ends
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8002d9c:	0852      	lsrs	r2, r2, #1
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8002d9e:	f8d4 b034 	ldr.w	fp, [r4, #52]	@ 0x34
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8002da2:	085b      	lsrs	r3, r3, #1
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002da4:	485b      	ldr	r0, [pc, #364]	@ (8002f14 <show_frame.constprop.0+0x1ec>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8002da6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002daa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002dae:	f8d8 2000 	ldr.w	r2, [r8]
 8002db2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002db6:	9203      	str	r2, [sp, #12]
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8002db8:	f001 f9d6 	bl	8004168 <HAL_DMA2D_PollForTransfer>
	// copy the new decoded frame to the LCD Frame buffer
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	f8cd a000 	str.w	sl, [sp]
 8002dc2:	9a03      	ldr	r2, [sp, #12]
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	4853      	ldr	r0, [pc, #332]	@ (8002f14 <show_frame.constprop.0+0x1ec>)
 8002dc8:	f001 f972 	bl	80040b0 <HAL_DMA2D_Start>
			depth24To16(&pOut, ( video.width * video.height ), 3);
 8002dcc:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8002dd0:	8b63      	ldrh	r3, [r4, #26]
			pOut.u8Arr = (uint8_t *)outputData;
 8002dd2:	f8d8 9000 	ldr.w	r9, [r8]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 8002dd6:	fb1a f003 	smulbb	r0, sl, r3
 8002dda:	b280      	uxth	r0, r0
	for( ; i < length ; i++)
 8002ddc:	b1e0      	cbz	r0, 8002e18 <show_frame.constprop.0+0xf0>
 8002dde:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 8002de2:	4649      	mov	r1, r9
 8002de4:	464a      	mov	r2, r9
		pxArr->u16Arr[i] = color565(r, g, b);
 8002de6:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8002f24 <show_frame.constprop.0+0x1fc>
 8002dea:	f892 e001 	ldrb.w	lr, [r2, #1]
 8002dee:	7893      	ldrb	r3, [r2, #2]
 8002df0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8002df4:	ea0c 2303 	and.w	r3, ip, r3, lsl #8
 8002df8:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8002dfc:	ea43 030e 	orr.w	r3, r3, lr
 8002e00:	f812 eb03 	ldrb.w	lr, [r2], #3
 8002e04:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8002e08:	ba5b      	rev16	r3, r3
 8002e0a:	f821 3b02 	strh.w	r3, [r1], #2
	for( ; i < length ; i++)
 8002e0e:	4281      	cmp	r1, r0
 8002e10:	d1eb      	bne.n	8002dea <show_frame.constprop.0+0xc2>
			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr, swap);
 8002e12:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8002e16:	8b63      	ldrh	r3, [r4, #26]
 8002e18:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8002f28 <show_frame.constprop.0+0x200>
	   if(swap)
 8002e1c:	f89b 2000 	ldrb.w	r2, [fp]
 8002e20:	2a00      	cmp	r2, #0
 8002e22:	d138      	bne.n	8002e96 <show_frame.constprop.0+0x16e>
		   data += ( 240 * 240 ) ;
 8002e24:	f509 4961 	add.w	r9, r9, #57600	@ 0xe100
 8002e28:	2178      	movs	r1, #120	@ 0x78
 8002e2a:	22ef      	movs	r2, #239	@ 0xef
	       frame.start.Y = 0;
 8002e2c:	f8ad 1012 	strh.w	r1, [sp, #18]
	       frame.end.X = 239;
 8002e30:	21ef      	movs	r1, #239	@ 0xef
	       frame.end.Y = 119;
 8002e32:	f8ad 2016 	strh.w	r2, [sp, #22]
	       frame.start.X = 0;
 8002e36:	2200      	movs	r2, #0
 8002e38:	9303      	str	r3, [sp, #12]
	   GC9A01_set_frame(frame);
 8002e3a:	ab06      	add	r3, sp, #24
	       frame.start.X = 0;
 8002e3c:	f8ad 2010 	strh.w	r2, [sp, #16]
	       frame.end.X = 239;
 8002e40:	f8ad 1014 	strh.w	r1, [sp, #20]
	   GC9A01_set_frame(frame);
 8002e44:	e913 0003 	ldmdb	r3, {r0, r1}
 8002e48:	f7ff fba6 	bl	8002598 <GC9A01_set_frame>
	   GC9A01_write_command(MEM_WR);
 8002e4c:	202c      	movs	r0, #44	@ 0x2c
 8002e4e:	f7fd fcd1 	bl	80007f4 <GC9A01_write_command>
	   GC9A01_set_data_command(ON);
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7fd fcb6 	bl	80007c4 <GC9A01_set_data_command>
	   GC9A01_set_chip_select(OFF);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7fd fcbc 	bl	80007d8 <GC9A01_set_chip_select>
	   uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 8002e60:	9b03      	ldr	r3, [sp, #12]
	   ret = GC9A01_spi_tx(data, total_bytes);
 8002e62:	4648      	mov	r0, r9
	   uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 8002e64:	fb03 f10a 	mul.w	r1, r3, sl
	   ret = GC9A01_spi_tx(data, total_bytes);
 8002e68:	b289      	uxth	r1, r1
 8002e6a:	f7ff fc6f 	bl	800274c <GC9A01_spi_tx>
	   GC9A01_set_chip_select(ON);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fd fcb2 	bl	80007d8 <GC9A01_set_chip_select>
			swap = ( ( swap ) ? 0 : 1 );
 8002e74:	f89b 3000 	ldrb.w	r3, [fp]
			outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002e78:	f8d8 1000 	ldr.w	r1, [r8]
			swap = ( ( swap ) ? 0 : 1 );
 8002e7c:	fab3 f383 	clz	r3, r3
			outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002e80:	4a25      	ldr	r2, [pc, #148]	@ (8002f18 <show_frame.constprop.0+0x1f0>)
			swap = ( ( swap ) ? 0 : 1 );
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	f88b 3000 	strb.w	r3, [fp]
			outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <show_frame.constprop.0+0x1f4>)
 8002e8a:	4291      	cmp	r1, r2
 8002e8c:	bf18      	it	ne
 8002e8e:	4613      	movne	r3, r2
 8002e90:	f8c8 3000 	str.w	r3, [r8]
 8002e94:	e758      	b.n	8002d48 <show_frame.constprop.0+0x20>
 8002e96:	2100      	movs	r1, #0
 8002e98:	2277      	movs	r2, #119	@ 0x77
 8002e9a:	e7c7      	b.n	8002e2c <show_frame.constprop.0+0x104>
				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002e9c:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8002f10 <show_frame.constprop.0+0x1e8>
				video.isfirstFrame = 0;
 8002ea0:	f04f 0800 	mov.w	r8, #0
				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002ea4:	4818      	ldr	r0, [pc, #96]	@ (8002f08 <show_frame.constprop.0+0x1e0>)
 8002ea6:	4649      	mov	r1, r9
				video.isfirstFrame = 0;
 8002ea8:	f884 8016 	strb.w	r8, [r4, #22]
				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 8002eac:	f001 ffee 	bl	8004e8c <HAL_JPEG_GetInfo>
				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 8002eb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002eb4:	f8b9 000c 	ldrh.w	r0, [r9, #12]
 8002eb8:	f7ff feea 	bl	8002c90 <DMA2D_Init.constprop.0>
				video.width = JPEG_Info.ImageWidth;
 8002ebc:	46c4      	mov	ip, r8
 8002ebe:	4641      	mov	r1, r8
				video.height = JPEG_Info.ImageHeight;
 8002ec0:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ec4:	fa1f f983 	uxth.w	r9, r3
				video.width = JPEG_Info.ImageWidth;
 8002ec8:	f363 010f 	bfi	r1, r3, #0, #16
 8002ecc:	fa1f fa82 	uxth.w	sl, r2
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ed0:	f1d9 00f0 	rsbs	r0, r9, #240	@ 0xf0
				video.width = JPEG_Info.ImageWidth;
 8002ed4:	f362 411f 	bfi	r1, r2, #16, #16
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ed8:	bf48      	it	mi
 8002eda:	3001      	addmi	r0, #1
				video.width = JPEG_Info.ImageWidth;
 8002edc:	61a1      	str	r1, [r4, #24]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 8002ede:	1040      	asrs	r0, r0, #1
				video.width = JPEG_Info.ImageWidth;
 8002ee0:	f360 0c0f 	bfi	ip, r0, #0, #16
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8002ee4:	f1da 00f0 	rsbs	r0, sl, #240	@ 0xf0
 8002ee8:	bf48      	it	mi
 8002eea:	3001      	addmi	r0, #1
 8002eec:	1040      	asrs	r0, r0, #1
				video.width = JPEG_Info.ImageWidth;
 8002eee:	f360 4c1f 	bfi	ip, r0, #16, #16
 8002ef2:	f8c4 c01c 	str.w	ip, [r4, #28]
 8002ef6:	e749      	b.n	8002d8c <show_frame.constprop.0+0x64>
 8002ef8:	240b643c 	.word	0x240b643c
 8002efc:	240a9bf8 	.word	0x240a9bf8
 8002f00:	240b6484 	.word	0x240b6484
 8002f04:	240a9c3c 	.word	0x240a9c3c
 8002f08:	24000148 	.word	0x24000148
 8002f0c:	240000a0 	.word	0x240000a0
 8002f10:	240000cc 	.word	0x240000cc
 8002f14:	240000e0 	.word	0x240000e0
 8002f18:	24034890 	.word	0x24034890
 8002f1c:	2400a52c 	.word	0x2400a52c
 8002f20:	24000004 	.word	0x24000004
 8002f24:	fffff800 	.word	0xfffff800
 8002f28:	240002a4 	.word	0x240002a4

08002f2c <file_handler.constprop.0>:
static void file_handler(uint8_t openFile)
 8002f2c:	b530      	push	{r4, r5, lr}
   if(new_file_flag || openFile)
 8002f2e:	4c24      	ldr	r4, [pc, #144]	@ (8002fc0 <file_handler.constprop.0+0x94>)
static void file_handler(uint8_t openFile)
 8002f30:	b085      	sub	sp, #20
   if(new_file_flag || openFile)
 8002f32:	7823      	ldrb	r3, [r4, #0]
 8002f34:	b933      	cbnz	r3, 8002f44 <file_handler.constprop.0+0x18>
   if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 8002f36:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <file_handler.constprop.0+0x98>)
 8002f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d226      	bcs.n	8002f8e <file_handler.constprop.0+0x62>
}
 8002f40:	b005      	add	sp, #20
 8002f42:	bd30      	pop	{r4, r5, pc}
  	 new_file_flag = 0;
 8002f44:	2100      	movs	r1, #0
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002f46:	4d20      	ldr	r5, [pc, #128]	@ (8002fc8 <file_handler.constprop.0+0x9c>)
 8002f48:	4a20      	ldr	r2, [pc, #128]	@ (8002fcc <file_handler.constprop.0+0xa0>)
 8002f4a:	a803      	add	r0, sp, #12
 8002f4c:	8aab      	ldrh	r3, [r5, #20]
  	 new_file_flag = 0;
 8002f4e:	7021      	strb	r1, [r4, #0]
  	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 8002f50:	2104      	movs	r1, #4
 8002f52:	f009 fdf9 	bl	800cb48 <sniprintf>
  	 snprintf(name, sizeof(name), "a%s.avi", file_idx_str);
 8002f56:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <file_handler.constprop.0+0xa4>)
 8002f58:	210e      	movs	r1, #14
 8002f5a:	ab03      	add	r3, sp, #12
 8002f5c:	481d      	ldr	r0, [pc, #116]	@ (8002fd4 <file_handler.constprop.0+0xa8>)
 8002f5e:	f009 fdf3 	bl	800cb48 <sniprintf>
  	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 8002f62:	2201      	movs	r2, #1
 8002f64:	491b      	ldr	r1, [pc, #108]	@ (8002fd4 <file_handler.constprop.0+0xa8>)
 8002f66:	481c      	ldr	r0, [pc, #112]	@ (8002fd8 <file_handler.constprop.0+0xac>)
 8002f68:	f009 f8de 	bl	800c128 <f_open>
 8002f6c:	b100      	cbz	r0, 8002f70 <file_handler.constprop.0+0x44>
  		 while(1);
 8002f6e:	e7fe      	b.n	8002f6e <file_handler.constprop.0+0x42>
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002f70:	491a      	ldr	r1, [pc, #104]	@ (8002fdc <file_handler.constprop.0+0xb0>)
  		 video.isfirstFrame = 1;
 8002f72:	2201      	movs	r2, #1
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002f74:	9001      	str	r0, [sp, #4]
 8002f76:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002f7a:	9100      	str	r1, [sp, #0]
 8002f7c:	4811      	ldr	r0, [pc, #68]	@ (8002fc4 <file_handler.constprop.0+0x98>)
  		 video.isfirstFrame = 1;
 8002f7e:	75aa      	strb	r2, [r5, #22]
  		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 8002f80:	4915      	ldr	r1, [pc, #84]	@ (8002fd8 <file_handler.constprop.0+0xac>)
 8002f82:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <file_handler.constprop.0+0xb4>)
 8002f84:	f7fd fa04 	bl	8000390 <AVI_ParserInit>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d0d4      	beq.n	8002f36 <file_handler.constprop.0+0xa>
  			 while(1);
 8002f8c:	e7fe      	b.n	8002f8c <file_handler.constprop.0+0x60>
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002f8e:	4d0e      	ldr	r5, [pc, #56]	@ (8002fc8 <file_handler.constprop.0+0x9c>)
 8002f90:	4914      	ldr	r1, [pc, #80]	@ (8002fe4 <file_handler.constprop.0+0xb8>)
  	 video.file_idx++;
 8002f92:	8aab      	ldrh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002f94:	4814      	ldr	r0, [pc, #80]	@ (8002fe8 <file_handler.constprop.0+0xbc>)
  	 video.file_idx++;
 8002f96:	3301      	adds	r3, #1
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002f98:	f3c3 120b 	ubfx	r2, r3, #4, #12
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	fba1 1202 	umull	r1, r2, r1, r2
 8002fa2:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8002fa6:	fb01 3312 	mls	r3, r1, r2, r3
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002faa:	2132      	movs	r1, #50	@ 0x32
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 8002fac:	82ab      	strh	r3, [r5, #20]
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 8002fae:	f001 f8db 	bl	8004168 <HAL_DMA2D_PollForTransfer>
		 f_close(&MJPEG_File);
 8002fb2:	4809      	ldr	r0, [pc, #36]	@ (8002fd8 <file_handler.constprop.0+0xac>)
 8002fb4:	f009 fb68 	bl	800c688 <f_close>
		 new_file_flag = 1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	7023      	strb	r3, [r4, #0]
}
 8002fbc:	b005      	add	sp, #20
 8002fbe:	bd30      	pop	{r4, r5, pc}
 8002fc0:	24000000 	.word	0x24000000
 8002fc4:	240b643c 	.word	0x240b643c
 8002fc8:	240a9bf8 	.word	0x240a9bf8
 8002fcc:	0800d4e8 	.word	0x0800d4e8
 8002fd0:	0800d4f0 	.word	0x0800d4f0
 8002fd4:	240b68e4 	.word	0x240b68e4
 8002fd8:	240b6484 	.word	0x240b6484
 8002fdc:	240a9c3c 	.word	0x240a9c3c
 8002fe0:	240a9c3c 	.word	0x240a9c3c
 8002fe4:	05b05b06 	.word	0x05b05b06
 8002fe8:	240000e0 	.word	0x240000e0

08002fec <smart_watch_init>:
{
 8002fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	video.width = 0;
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8df e1d8 	ldr.w	lr, [pc, #472]	@ 80031cc <smart_watch_init+0x1e0>
	video.frame_time = 0.0;
 8002ff6:	2000      	movs	r0, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <smart_watch_init+0x1c4>)
	video.display_status = DISPLAY_ON;
 8002ffa:	2101      	movs	r1, #1
	for(int i = 0 ; i < BLOCK_NUM ; i++)
 8002ffc:	4614      	mov	r4, r2
	video.frame_time = 0.0;
 8002ffe:	f8ce 0028 	str.w	r0, [lr, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 8003002:	f8ce 3034 	str.w	r3, [lr, #52]	@ 0x34
 8003006:	f8df c1c8 	ldr.w	ip, [pc, #456]	@ 80031d0 <smart_watch_init+0x1e4>
 800300a:	4b6a      	ldr	r3, [pc, #424]	@ (80031b4 <smart_watch_init+0x1c8>)
 800300c:	486a      	ldr	r0, [pc, #424]	@ (80031b8 <smart_watch_init+0x1cc>)
		uint32_t idx = ( i % BLOCKS_PER_RAW );
 800300e:	4d6b      	ldr	r5, [pc, #428]	@ (80031bc <smart_watch_init+0x1d0>)
	video.time.Hours = 0;
 8003010:	f8ae 2000 	strh.w	r2, [lr]
	video.time.Seconds = 0;
 8003014:	f88e 2002 	strb.w	r2, [lr, #2]
	video.file_idx = 0;
 8003018:	f8ae 2014 	strh.w	r2, [lr, #20]
	video.FrameType = 0;
 800301c:	f88e 2017 	strb.w	r2, [lr, #23]
	video.frameToSkip = 0;
 8003020:	f8ce 2024 	str.w	r2, [lr, #36]	@ 0x24
	video.display_ts = video.time.Seconds;
 8003024:	f8ce 203c 	str.w	r2, [lr, #60]	@ 0x3c
	video.display_status = DISPLAY_ON;
 8003028:	f88e 1040 	strb.w	r1, [lr, #64]	@ 0x40
	video.frameCount = 0;
 800302c:	f8ce 2020 	str.w	r2, [lr, #32]
	video.set = SET_IDLE;
 8003030:	f88e 2039 	strb.w	r2, [lr, #57]	@ 0x39
	video.width = 0;
 8003034:	e9ce 2206 	strd	r2, r2, [lr, #24]
	video.tick_offset = 0;
 8003038:	e9ce 220b 	strd	r2, r2, [lr, #44]	@ 0x2c
		uint32_t idx = ( i % BLOCKS_PER_RAW );
 800303c:	fba5 1204 	umull	r1, r2, r5, r4
	for(int i = 0 ; i < BLOCK_NUM ; i++)
 8003040:	3368      	adds	r3, #104	@ 0x68
		uint32_t idx = ( i % BLOCKS_PER_RAW );
 8003042:	0912      	lsrs	r2, r2, #4
 8003044:	4611      	mov	r1, r2
 8003046:	eb02 0282 	add.w	r2, r2, r2, lsl #2
		pixel_blocks[i].display_frame.start.Y = ( idy * BLOCK_SIDE_SIZE );
 800304a:	eb01 0741 	add.w	r7, r1, r1, lsl #1
		pixel_blocks[i].display_frame.end.Y = ( ( idy + 1 ) * BLOCK_SIDE_SIZE - 1 );
 800304e:	3101      	adds	r1, #1
		uint32_t idx = ( i % BLOCKS_PER_RAW );
 8003050:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
	for(int i = 0 ; i < BLOCK_NUM ; i++)
 8003054:	3401      	adds	r4, #1
		pixel_blocks[i].display_frame.start.Y = ( idy * BLOCK_SIDE_SIZE );
 8003056:	00bf      	lsls	r7, r7, #2
		pixel_blocks[i].display_frame.start.X = ( idx * BLOCK_SIDE_SIZE );
 8003058:	eb02 0842 	add.w	r8, r2, r2, lsl #1
		pixel_blocks[i].display_frame.end.X = ( ( idx + 1 ) * BLOCK_SIDE_SIZE - 1 );
 800305c:	3201      	adds	r2, #1
		pixel_blocks[i].display_frame.start.Y = ( idy * BLOCK_SIDE_SIZE );
 800305e:	b2bf      	uxth	r7, r7
	for(int i = 0 ; i < BLOCK_NUM ; i++)
 8003060:	f5b4 7fc8 	cmp.w	r4, #400	@ 0x190
		pixel_blocks[i].display_frame.end.Y = ( ( idy + 1 ) * BLOCK_SIDE_SIZE - 1 );
 8003064:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		pixel_blocks[i].display_frame.start.X = ( idx * BLOCK_SIDE_SIZE );
 8003068:	ea4f 0888 	mov.w	r8, r8, lsl #2
		pixel_blocks[i].display_frame.start.Y = ( idy * BLOCK_SIDE_SIZE );
 800306c:	f823 7c66 	strh.w	r7, [r3, #-102]
		pixel_blocks[i].display_frame.end.Y = ( ( idy + 1 ) * BLOCK_SIDE_SIZE - 1 );
 8003070:	ea4f 0681 	mov.w	r6, r1, lsl #2
		pixel_blocks[i].display_frame.end.X = ( ( idx + 1 ) * BLOCK_SIDE_SIZE - 1 );
 8003074:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		pixel_blocks[i].display_frame.start.X = ( idx * BLOCK_SIDE_SIZE );
 8003078:	fa1f f188 	uxth.w	r1, r8
		pixel_blocks[i].display_frame.end.Y = ( ( idy + 1 ) * BLOCK_SIDE_SIZE - 1 );
 800307c:	f106 36ff 	add.w	r6, r6, #4294967295
					   	   	   	( pixel_blocks[i].display_frame.start.Y * LCD_SIDE_SIZE ) );
 8003080:	ebc7 1807 	rsb	r8, r7, r7, lsl #4
		pixel_blocks[i].display_frame.end.X = ( ( idx + 1 ) * BLOCK_SIDE_SIZE - 1 );
 8003084:	ea4f 0282 	mov.w	r2, r2, lsl #2
		pixel_blocks[i].display_frame.start.X = ( idx * BLOCK_SIDE_SIZE );
 8003088:	f823 1c68 	strh.w	r1, [r3, #-104]
			uint32_t base_idx = ( pixel_blocks[i].display_frame.start.X +
 800308c:	eb01 1808 	add.w	r8, r1, r8, lsl #4
		pixel_blocks[i].display_frame.end.Y = ( ( idy + 1 ) * BLOCK_SIDE_SIZE - 1 );
 8003090:	f823 6c62 	strh.w	r6, [r3, #-98]
		pixel_blocks[i].display_frame.end.X = ( ( idx + 1 ) * BLOCK_SIDE_SIZE - 1 );
 8003094:	f102 32ff 	add.w	r2, r2, #4294967295
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003098:	ea4f 0148 	mov.w	r1, r8, lsl #1
		pixel_blocks[i].display_frame.end.X = ( ( idx + 1 ) * BLOCK_SIDE_SIZE - 1 );
 800309c:	f823 2c64 	strh.w	r2, [r3, #-100]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 80030a0:	eb0c 0a48 	add.w	sl, ip, r8, lsl #1
 80030a4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80030a8:	f501 7970 	add.w	r9, r1, #960	@ 0x3c0
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 80030ac:	eb00 0748 	add.w	r7, r0, r8, lsl #1
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 80030b0:	f501 66b4 	add.w	r6, r1, #1440	@ 0x5a0
 80030b4:	eb0c 0b02 	add.w	fp, ip, r2
 80030b8:	f501 68f0 	add.w	r8, r1, #1920	@ 0x780
 80030bc:	f843 ac60 	str.w	sl, [r3, #-96]
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 80030c0:	eb00 0a02 	add.w	sl, r0, r2
 80030c4:	f843 7c30 	str.w	r7, [r3, #-48]
 80030c8:	eb00 0709 	add.w	r7, r0, r9
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 80030cc:	f843 bc5c 	str.w	fp, [r3, #-92]
 80030d0:	eb0c 0b09 	add.w	fp, ip, r9
 80030d4:	f501 6216 	add.w	r2, r1, #2400	@ 0x960
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 80030d8:	eb00 0906 	add.w	r9, r0, r6
 80030dc:	f843 ac2c 	str.w	sl, [r3, #-44]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 80030e0:	f501 6a34 	add.w	sl, r1, #2880	@ 0xb40
 80030e4:	f843 bc58 	str.w	fp, [r3, #-88]
 80030e8:	eb0c 0b06 	add.w	fp, ip, r6
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 80030ec:	f843 7c28 	str.w	r7, [r3, #-40]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 80030f0:	eb0c 0708 	add.w	r7, ip, r8
 80030f4:	f501 6652 	add.w	r6, r1, #3360	@ 0xd20
 80030f8:	f843 bc54 	str.w	fp, [r3, #-84]
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 80030fc:	f843 9c24 	str.w	r9, [r3, #-36]
 8003100:	eb00 0b08 	add.w	fp, r0, r8
 8003104:	eb00 0902 	add.w	r9, r0, r2
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003108:	f501 6870 	add.w	r8, r1, #3840	@ 0xf00
 800310c:	f843 7c50 	str.w	r7, [r3, #-80]
 8003110:	eb0c 0702 	add.w	r7, ip, r2
 8003114:	eb0c 020a 	add.w	r2, ip, sl
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 8003118:	4482      	add	sl, r0
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 800311a:	f843 7c4c 	str.w	r7, [r3, #-76]
 800311e:	f501 5787 	add.w	r7, r1, #4320	@ 0x10e0
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 8003122:	f843 9c1c 	str.w	r9, [r3, #-28]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003126:	eb0c 0906 	add.w	r9, ip, r6
 800312a:	f843 2c48 	str.w	r2, [r3, #-72]
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 800312e:	4406      	add	r6, r0
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003130:	f501 5296 	add.w	r2, r1, #4800	@ 0x12c0
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 8003134:	f843 ac18 	str.w	sl, [r3, #-24]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003138:	f501 51a5 	add.w	r1, r1, #5280	@ 0x14a0
 800313c:	eb0c 0a08 	add.w	sl, ip, r8
 8003140:	f843 9c44 	str.w	r9, [r3, #-68]
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 8003144:	4480      	add	r8, r0
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003146:	eb0c 0907 	add.w	r9, ip, r7
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 800314a:	f843 6c14 	str.w	r6, [r3, #-20]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 800314e:	f843 ac40 	str.w	sl, [r3, #-64]
 8003152:	eb0c 0602 	add.w	r6, ip, r2
 8003156:	eb0c 0a01 	add.w	sl, ip, r1
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 800315a:	4407      	add	r7, r0
 800315c:	4402      	add	r2, r0
 800315e:	4401      	add	r1, r0
 8003160:	f843 bc20 	str.w	fp, [r3, #-32]
 8003164:	f843 8c10 	str.w	r8, [r3, #-16]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003168:	f843 9c3c 	str.w	r9, [r3, #-60]
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 800316c:	f843 7c0c 	str.w	r7, [r3, #-12]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003170:	f843 6c38 	str.w	r6, [r3, #-56]
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 8003174:	f843 2c08 	str.w	r2, [r3, #-8]
			pixel_blocks[i].buffer_frame1[j] = &output_data1[arr_idx*2];
 8003178:	f843 ac34 	str.w	sl, [r3, #-52]
			pixel_blocks[i].buffer_frame2[j] = &output_data2[arr_idx*2];
 800317c:	f843 1c04 	str.w	r1, [r3, #-4]
	for(int i = 0 ; i < BLOCK_NUM ; i++)
 8003180:	f47f af5c 	bne.w	800303c <smart_watch_init+0x50>
	video.video_mode = SETTING_MODE;
 8003184:	2300      	movs	r3, #0
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003186:	490e      	ldr	r1, [pc, #56]	@ (80031c0 <smart_watch_init+0x1d4>)
 8003188:	480e      	ldr	r0, [pc, #56]	@ (80031c4 <smart_watch_init+0x1d8>)
	video.video_mode = SETTING_MODE;
 800318a:	f88e 3038 	strb.w	r3, [lr, #56]	@ 0x38
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800318e:	f009 fcb7 	bl	800cb00 <FATFS_LinkDriver>
 8003192:	4604      	mov	r4, r0
 8003194:	b100      	cbz	r0, 8003198 <smart_watch_init+0x1ac>
		while(1);
 8003196:	e7fe      	b.n	8003196 <smart_watch_init+0x1aa>
}

static void SD_Initialize(void)
{

	BSP_SD_Init();
 8003198:	f007 fdaa 	bl	800acf0 <BSP_SD_Init>
	    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800319c:	4622      	mov	r2, r4
 800319e:	4908      	ldr	r1, [pc, #32]	@ (80031c0 <smart_watch_init+0x1d4>)
 80031a0:	4809      	ldr	r0, [pc, #36]	@ (80031c8 <smart_watch_init+0x1dc>)
 80031a2:	f008 ff75 	bl	800c090 <f_mount>
 80031a6:	b100      	cbz	r0, 80031aa <smart_watch_init+0x1be>
	    	while(1);
 80031a8:	e7fe      	b.n	80031a8 <smart_watch_init+0x1bc>
}
 80031aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	2405ebf4 	.word	0x2405ebf4
 80031b4:	240002ac 	.word	0x240002ac
 80031b8:	2400a52c 	.word	0x2400a52c
 80031bc:	cccccccd 	.word	0xcccccccd
 80031c0:	240b69dc 	.word	0x240b69dc
 80031c4:	0800d768 	.word	0x0800d768
 80031c8:	240b66b4 	.word	0x240b66b4
 80031cc:	240a9bf8 	.word	0x240a9bf8
 80031d0:	24034890 	.word	0x24034890

080031d4 <lcd_draw_opt3>:
{
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	4e4a      	ldr	r6, [pc, #296]	@ (8003304 <lcd_draw_opt3+0x130>)
 80031da:	b083      	sub	sp, #12
	for(int i = 0 ; i < BLOCK_NUM ; i++)
 80031dc:	f04f 0a00 	mov.w	sl, #0
			if(( r == 0 ) || ( r == ( most_rigth_pixel_idx ) ))
 80031e0:	f640 0401 	movw	r4, #2049	@ 0x801
{
 80031e4:	4607      	mov	r7, r0
 80031e6:	f106 0930 	add.w	r9, r6, #48	@ 0x30
		GC9A01_set_frame(pixel_blocks[i].display_frame);
 80031ea:	f1a6 0834 	sub.w	r8, r6, #52	@ 0x34
		if(data->u8Arr == output_data1)
 80031ee:	f8df b118 	ldr.w	fp, [pc, #280]	@ 8003308 <lcd_draw_opt3+0x134>
		for(int r = 0 ; r < BLOCK_SIDE_SIZE ; r++)
 80031f2:	f1a9 0560 	sub.w	r5, r9, #96	@ 0x60
 80031f6:	2200      	movs	r2, #0
 80031f8:	9601      	str	r6, [sp, #4]
{
 80031fa:	46ac      	mov	ip, r5
		equals = 0;
 80031fc:	4613      	mov	r3, r2
 80031fe:	46ae      	mov	lr, r5
			if(( r == 0 ) || ( r == ( most_rigth_pixel_idx ) ))
 8003200:	fa24 f102 	lsr.w	r1, r4, r2
			buff1 = (uint16_t *)pixel_blocks[i].buffer_frame1[r];
 8003204:	f85c 6f04 	ldr.w	r6, [ip, #4]!
			if(( r == 0 ) || ( r == ( most_rigth_pixel_idx ) ))
 8003208:	07c9      	lsls	r1, r1, #31
			buff2 = (uint16_t *)pixel_blocks[i].buffer_frame2[r];
 800320a:	f8dc 5030 	ldr.w	r5, [ip, #48]	@ 0x30
			if(( r == 0 ) || ( r == ( most_rigth_pixel_idx ) ))
 800320e:	d45d      	bmi.n	80032cc <lcd_draw_opt3+0xf8>
			if(PIXELS_COMP(buff1[0], buff2[0]))
 8003210:	8830      	ldrh	r0, [r6, #0]
 8003212:	8829      	ldrh	r1, [r5, #0]
 8003214:	4288      	cmp	r0, r1
 8003216:	d955      	bls.n	80032c4 <lcd_draw_opt3+0xf0>
 8003218:	1a40      	subs	r0, r0, r1
 800321a:	2804      	cmp	r0, #4
 800321c:	dc01      	bgt.n	8003222 <lcd_draw_opt3+0x4e>
				equals++;
 800321e:	3301      	adds	r3, #1
 8003220:	b2db      	uxtb	r3, r3
			if(PIXELS_COMP(buff1[most_rigth_pixel_idx], buff2[most_rigth_pixel_idx]))
 8003222:	8af0      	ldrh	r0, [r6, #22]
 8003224:	8ae9      	ldrh	r1, [r5, #22]
 8003226:	4288      	cmp	r0, r1
 8003228:	d946      	bls.n	80032b8 <lcd_draw_opt3+0xe4>
 800322a:	1a40      	subs	r0, r0, r1
 800322c:	2804      	cmp	r0, #4
 800322e:	bfcc      	ite	gt
 8003230:	2100      	movgt	r1, #0
 8003232:	2101      	movle	r1, #1
 8003234:	b109      	cbz	r1, 800323a <lcd_draw_opt3+0x66>
				equals++;
 8003236:	3301      	adds	r3, #1
 8003238:	b2db      	uxtb	r3, r3
		for(int r = 0 ; r < BLOCK_SIDE_SIZE ; r++)
 800323a:	3201      	adds	r2, #1
 800323c:	2a0c      	cmp	r2, #12
 800323e:	d1df      	bne.n	8003200 <lcd_draw_opt3+0x2c>
		if(equals >= 26)
 8003240:	2b19      	cmp	r3, #25
 8003242:	9e01      	ldr	r6, [sp, #4]
 8003244:	4675      	mov	r5, lr
 8003246:	d81d      	bhi.n	8003284 <lcd_draw_opt3+0xb0>
		GC9A01_set_frame(pixel_blocks[i].display_frame);
 8003248:	2368      	movs	r3, #104	@ 0x68
 800324a:	fb03 830a 	mla	r3, r3, sl, r8
 800324e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003252:	f7ff f9a1 	bl	8002598 <GC9A01_set_frame>
		GC9A01_write_command(MEM_WR);
 8003256:	202c      	movs	r0, #44	@ 0x2c
 8003258:	f7fd facc 	bl	80007f4 <GC9A01_write_command>
		GC9A01_set_data_command(ON);
 800325c:	2001      	movs	r0, #1
 800325e:	f7fd fab1 	bl	80007c4 <GC9A01_set_data_command>
		GC9A01_set_chip_select(OFF);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fd fab8 	bl	80007d8 <GC9A01_set_chip_select>
		if(data->u8Arr == output_data1)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	455b      	cmp	r3, fp
 800326c:	d015      	beq.n	800329a <lcd_draw_opt3+0xc6>
 800326e:	4635      	mov	r5, r6
				GC9A01_spi_tx(pixel_blocks[i].buffer_frame2[j], total_bytes);
 8003270:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8003274:	2118      	movs	r1, #24
 8003276:	f7ff fa69 	bl	800274c <GC9A01_spi_tx>
			for(int j = 0 ; j < BLOCK_SIDE_SIZE ; j++)
 800327a:	454d      	cmp	r5, r9
 800327c:	d1f8      	bne.n	8003270 <lcd_draw_opt3+0x9c>
		GC9A01_set_chip_select(ON);
 800327e:	2001      	movs	r0, #1
 8003280:	f7fd faaa 	bl	80007d8 <GC9A01_set_chip_select>
	for(int i = 0 ; i < BLOCK_NUM ; i++)
 8003284:	f10a 0a01 	add.w	sl, sl, #1
 8003288:	3668      	adds	r6, #104	@ 0x68
 800328a:	f109 0968 	add.w	r9, r9, #104	@ 0x68
 800328e:	f5ba 7fc8 	cmp.w	sl, #400	@ 0x190
 8003292:	d1ae      	bne.n	80031f2 <lcd_draw_opt3+0x1e>
}
 8003294:	b003      	add	sp, #12
 8003296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				GC9A01_spi_tx(pixel_blocks[i].buffer_frame1[j], total_bytes);
 800329a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800329e:	2118      	movs	r1, #24
 80032a0:	f7ff fa54 	bl	800274c <GC9A01_spi_tx>
			for(int j = 0 ; j < BLOCK_SIDE_SIZE ; j++)
 80032a4:	42ae      	cmp	r6, r5
 80032a6:	d0ea      	beq.n	800327e <lcd_draw_opt3+0xaa>
				GC9A01_spi_tx(pixel_blocks[i].buffer_frame1[j], total_bytes);
 80032a8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80032ac:	2118      	movs	r1, #24
 80032ae:	f7ff fa4d 	bl	800274c <GC9A01_spi_tx>
			for(int j = 0 ; j < BLOCK_SIDE_SIZE ; j++)
 80032b2:	42ae      	cmp	r6, r5
 80032b4:	d1f1      	bne.n	800329a <lcd_draw_opt3+0xc6>
 80032b6:	e7e2      	b.n	800327e <lcd_draw_opt3+0xaa>
			if(PIXELS_COMP(buff1[most_rigth_pixel_idx], buff2[most_rigth_pixel_idx]))
 80032b8:	1a09      	subs	r1, r1, r0
 80032ba:	2904      	cmp	r1, #4
 80032bc:	bfcc      	ite	gt
 80032be:	2100      	movgt	r1, #0
 80032c0:	2101      	movle	r1, #1
 80032c2:	e7b7      	b.n	8003234 <lcd_draw_opt3+0x60>
			if(PIXELS_COMP(buff1[0], buff2[0]))
 80032c4:	1a09      	subs	r1, r1, r0
 80032c6:	2904      	cmp	r1, #4
 80032c8:	dcab      	bgt.n	8003222 <lcd_draw_opt3+0x4e>
 80032ca:	e7a8      	b.n	800321e <lcd_draw_opt3+0x4a>
					if(PIXELS_COMP(buff1[c], buff2[c]))
 80032cc:	8931      	ldrh	r1, [r6, #8]
 80032ce:	8928      	ldrh	r0, [r5, #8]
 80032d0:	4281      	cmp	r1, r0
 80032d2:	bf94      	ite	ls
 80032d4:	1a41      	subls	r1, r0, r1
 80032d6:	1a09      	subhi	r1, r1, r0
 80032d8:	2904      	cmp	r1, #4
 80032da:	bfcc      	ite	gt
 80032dc:	2100      	movgt	r1, #0
 80032de:	2101      	movle	r1, #1
 80032e0:	b109      	cbz	r1, 80032e6 <lcd_draw_opt3+0x112>
						equals++;
 80032e2:	3301      	adds	r3, #1
 80032e4:	b2db      	uxtb	r3, r3
					if(PIXELS_COMP(buff1[c], buff2[c]))
 80032e6:	8a31      	ldrh	r1, [r6, #16]
 80032e8:	8a28      	ldrh	r0, [r5, #16]
 80032ea:	4281      	cmp	r1, r0
 80032ec:	bf94      	ite	ls
 80032ee:	1a41      	subls	r1, r0, r1
 80032f0:	1a09      	subhi	r1, r1, r0
 80032f2:	2904      	cmp	r1, #4
 80032f4:	bfcc      	ite	gt
 80032f6:	2100      	movgt	r1, #0
 80032f8:	2101      	movle	r1, #1
 80032fa:	2900      	cmp	r1, #0
 80032fc:	d088      	beq.n	8003210 <lcd_draw_opt3+0x3c>
						equals++;
 80032fe:	3301      	adds	r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e785      	b.n	8003210 <lcd_draw_opt3+0x3c>
 8003304:	240002e0 	.word	0x240002e0
 8003308:	24034890 	.word	0x24034890
 800330c:	00000000 	.word	0x00000000

08003310 <smart_watch_process>:
{
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	ed2d 8b04 	vpush	{d8-d9}
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8003318:	ed9f 9b81 	vldr	d9, [pc, #516]	@ 8003520 <smart_watch_process+0x210>
{
 800331c:	b089      	sub	sp, #36	@ 0x24
 800331e:	4c82      	ldr	r4, [pc, #520]	@ (8003528 <smart_watch_process+0x218>)
 8003320:	f8df 9224 	ldr.w	r9, [pc, #548]	@ 8003548 <smart_watch_process+0x238>
 8003324:	4f81      	ldr	r7, [pc, #516]	@ (800352c <smart_watch_process+0x21c>)
 8003326:	f8df 8224 	ldr.w	r8, [pc, #548]	@ 800354c <smart_watch_process+0x23c>
			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 800332a:	4e81      	ldr	r6, [pc, #516]	@ (8003530 <smart_watch_process+0x220>)
	video.frame_time = 0.0;
 800332c:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8003534 <smart_watch_process+0x224>
		uint32_t tempStart = HAL_GetTick();
 8003330:	f000 fdc4 	bl	8003ebc <HAL_GetTick>
 8003334:	4605      	mov	r5, r0
		file_handler(0);
 8003336:	f7ff fdf9 	bl	8002f2c <file_handler.constprop.0>
	switch(video.video_mode)
 800333a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800333e:	2b01      	cmp	r3, #1
 8003340:	f000 8086 	beq.w	8003450 <smart_watch_process+0x140>
	switch(video.set)
 8003344:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8003348:	2b02      	cmp	r3, #2
 800334a:	f000 8094 	beq.w	8003476 <smart_watch_process+0x166>
 800334e:	2b03      	cmp	r3, #3
 8003350:	f000 80de 	beq.w	8003510 <smart_watch_process+0x200>
 8003354:	2b01      	cmp	r3, #1
 8003356:	f000 80b8 	beq.w	80034ca <smart_watch_process+0x1ba>
			while(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin));
 800335a:	2102      	movs	r1, #2
 800335c:	4630      	mov	r0, r6
 800335e:	f001 f947 	bl	80045f0 <HAL_GPIO_ReadPin>
 8003362:	2800      	cmp	r0, #0
 8003364:	d0f9      	beq.n	800335a <smart_watch_process+0x4a>
			video.set = SET_HOURS;
 8003366:	2301      	movs	r3, #1
 8003368:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}

static void enable_btn_int(void)
{

	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800336c:	2006      	movs	r0, #6
 800336e:	f000 fe1b 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003372:	2007      	movs	r0, #7
 8003374:	f000 fe18 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003378:	2008      	movs	r0, #8
 800337a:	f000 fe15 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
	if(video.display_status == DISPLAY_ON)
 800337e:	f894 a040 	ldrb.w	sl, [r4, #64]	@ 0x40
 8003382:	f1ba 0f01 	cmp.w	sl, #1
 8003386:	d00d      	beq.n	80033a4 <smart_watch_process+0x94>
		long unsigned int tempStop = HAL_GetTick();
 8003388:	f000 fd98 	bl	8003ebc <HAL_GetTick>
		if(video.video_mode == NORMAL_MODE)
 800338c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
		volatile long unsigned int tempDiff = ( ( tempStop - tempStart ) );
 8003390:	1b40      	subs	r0, r0, r5
		if(video.video_mode == NORMAL_MODE)
 8003392:	2b01      	cmp	r3, #1
		volatile long unsigned int tempDiff = ( ( tempStop - tempStart ) );
 8003394:	9005      	str	r0, [sp, #20]
		if(video.video_mode == NORMAL_MODE)
 8003396:	d1cb      	bne.n	8003330 <smart_watch_process+0x20>
			count++;
 8003398:	f8d8 3000 	ldr.w	r3, [r8]
 800339c:	3301      	adds	r3, #1
 800339e:	f8c8 3000 	str.w	r3, [r8]
 80033a2:	e7c5      	b.n	8003330 <smart_watch_process+0x20>
		if(video.time.Seconds >= DISPLAY_STANDBY_TIMER)
 80033a4:	78a3      	ldrb	r3, [r4, #2]
 80033a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80033a8:	d9ee      	bls.n	8003388 <smart_watch_process+0x78>
	video.width = 0;
 80033aa:	f04f 0b00 	mov.w	fp, #0
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80033ae:	4b62      	ldr	r3, [pc, #392]	@ (8003538 <smart_watch_process+0x228>)
			GC9A01_sleep_mode(ON);
 80033b0:	4650      	mov	r0, sl
	video.frame_time = 0.0;
 80033b2:	ed84 8a0a 	vstr	s16, [r4, #40]	@ 0x28
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 80033b6:	6363      	str	r3, [r4, #52]	@ 0x34
	video.display_status = DISPLAY_ON;
 80033b8:	f884 a040 	strb.w	sl, [r4, #64]	@ 0x40
	video.time.Hours = 0;
 80033bc:	f8a4 b000 	strh.w	fp, [r4]
	video.time.Seconds = 0;
 80033c0:	f884 b002 	strb.w	fp, [r4, #2]
	video.file_idx = 0;
 80033c4:	f8a4 b014 	strh.w	fp, [r4, #20]
	video.FrameType = 0;
 80033c8:	f884 b017 	strb.w	fp, [r4, #23]
	video.frameToSkip = 0;
 80033cc:	f8c4 b024 	str.w	fp, [r4, #36]	@ 0x24
	video.display_ts = video.time.Seconds;
 80033d0:	f8c4 b03c 	str.w	fp, [r4, #60]	@ 0x3c
	video.frameCount = 0;
 80033d4:	f8c4 b020 	str.w	fp, [r4, #32]
	video.set = SET_IDLE;
 80033d8:	f884 b039 	strb.w	fp, [r4, #57]	@ 0x39
	video.width = 0;
 80033dc:	e9c4 bb06 	strd	fp, fp, [r4, #24]
	video.tick_offset = 0;
 80033e0:	e9c4 bb0b 	strd	fp, fp, [r4, #44]	@ 0x2c
			GC9A01_sleep_mode(ON);
 80033e4:	f7ff f972 	bl	80026cc <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 80033e8:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
			HAL_SuspendTick();
 80033ec:	f000 fd7e 	bl	8003eec <HAL_SuspendTick>
 80033f0:	b672      	cpsid	i
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80033f2:	4651      	mov	r1, sl
 80033f4:	4650      	mov	r0, sl
 80033f6:	f002 fd85 	bl	8005f04 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 80033fa:	b662      	cpsie	i
			HAL_ResumeTick();
 80033fc:	f000 fd7e 	bl	8003efc <HAL_ResumeTick>
			SystemClock_Config();
 8003400:	f7ff fa1a 	bl	8002838 <SystemClock_Config>
			GC9A01_init();
 8003404:	f7fd fa20 	bl	8000848 <GC9A01_init>
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003408:	465a      	mov	r2, fp
 800340a:	4947      	ldr	r1, [pc, #284]	@ (8003528 <smart_watch_process+0x218>)
 800340c:	484b      	ldr	r0, [pc, #300]	@ (800353c <smart_watch_process+0x22c>)
			video.display_status = DISPLAY_ON;
 800340e:	f884 a040 	strb.w	sl, [r4, #64]	@ 0x40
			RTC_DateTypeDef sDate = {0};
 8003412:	f8cd b01c 	str.w	fp, [sp, #28]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003416:	f004 fecd 	bl	80081b4 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800341a:	a907      	add	r1, sp, #28
 800341c:	465a      	mov	r2, fp
 800341e:	4847      	ldr	r0, [pc, #284]	@ (800353c <smart_watch_process+0x22c>)
 8003420:	f004 ff04 	bl	800822c <HAL_RTC_GetDate>
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 8003424:	7823      	ldrb	r3, [r4, #0]
 8003426:	4a46      	ldr	r2, [pc, #280]	@ (8003540 <smart_watch_process+0x230>)
			file_handler(1);
 8003428:	4650      	mov	r0, sl
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 800342a:	fba2 1203 	umull	r1, r2, r2, r3
 800342e:	08d2      	lsrs	r2, r2, #3
 8003430:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003434:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
			video.file_idx += video.time.Minutes;
 8003438:	7862      	ldrb	r2, [r4, #1]
			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 800343a:	b2db      	uxtb	r3, r3
 800343c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
			video.file_idx += video.time.Minutes;
 8003440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003444:	82a3      	strh	r3, [r4, #20]
			file_handler(1);
 8003446:	f7ff fbbd 	bl	8002bc4 <file_handler>
			video.display_ts = video.time.Seconds;
 800344a:	78a3      	ldrb	r3, [r4, #2]
 800344c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800344e:	e79b      	b.n	8003388 <smart_watch_process+0x78>
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	493c      	ldr	r1, [pc, #240]	@ (8003544 <smart_watch_process+0x234>)
 8003454:	4638      	mov	r0, r7
 8003456:	f7fd f8dd 	bl	8000614 <AVI_GetFrame>
	if(video.frameToSkip > 0)
 800345a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800345c:	b2c0      	uxtb	r0, r0
	if(video.frameToSkip > 0)
 800345e:	2b00      	cmp	r3, #0
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 8003460:	75e0      	strb	r0, [r4, #23]
	if(video.frameToSkip > 0)
 8003462:	dd75      	ble.n	8003550 <smart_watch_process+0x240>
		video.frameToSkip--;
 8003464:	3b01      	subs	r3, #1
 8003466:	6263      	str	r3, [r4, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	3301      	adds	r3, #1
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		video.frameCount++;
 800346e:	6a23      	ldr	r3, [r4, #32]
 8003470:	3301      	adds	r3, #1
 8003472:	6223      	str	r3, [r4, #32]
 8003474:	e783      	b.n	800337e <smart_watch_process+0x6e>
			show_frame(0);
 8003476:	f7ff fc57 	bl	8002d28 <show_frame.constprop.0>
			if(btn_status == BTN_PLUS)
 800347a:	f899 a000 	ldrb.w	sl, [r9]
 800347e:	f1ba 0f01 	cmp.w	sl, #1
 8003482:	f000 8143 	beq.w	800370c <smart_watch_process+0x3fc>
			if(btn_status == BTN_MINUS)
 8003486:	f1ba 0f03 	cmp.w	sl, #3
 800348a:	f000 80f9 	beq.w	8003680 <smart_watch_process+0x370>
			if(btn_status == BTN_SET)
 800348e:	f1ba 0f02 	cmp.w	sl, #2
 8003492:	f47f af6b 	bne.w	800336c <smart_watch_process+0x5c>
				btn_status = BTN_NONE;
 8003496:	2300      	movs	r3, #0
				HAL_Delay(300);
 8003498:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 800349c:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 80034a0:	f000 fd12 	bl	8003ec8 <HAL_Delay>
}

static void clear_btn_int(void)
{

	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80034a4:	2006      	movs	r0, #6
 80034a6:	f000 fdb5 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80034aa:	2007      	movs	r0, #7
 80034ac:	f000 fdb2 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80034b0:	2008      	movs	r0, #8
 80034b2:	f000 fdaf 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
				video.file_idx += video.time.Minutes;
 80034b6:	8aa2      	ldrh	r2, [r4, #20]
 80034b8:	7863      	ldrb	r3, [r4, #1]
 80034ba:	4413      	add	r3, r2
 80034bc:	82a3      	strh	r3, [r4, #20]
				video.isfirstFrame = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	75a3      	strb	r3, [r4, #22]
				video.set = SET_START;
 80034c2:	2303      	movs	r3, #3
 80034c4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80034c8:	e750      	b.n	800336c <smart_watch_process+0x5c>
			show_frame(0);
 80034ca:	f7ff fc2d 	bl	8002d28 <show_frame.constprop.0>
			if(btn_status == BTN_PLUS)
 80034ce:	f899 a000 	ldrb.w	sl, [r9]
 80034d2:	f1ba 0f01 	cmp.w	sl, #1
 80034d6:	f000 8143 	beq.w	8003760 <smart_watch_process+0x450>
			if(btn_status == BTN_MINUS)
 80034da:	f1ba 0f03 	cmp.w	sl, #3
 80034de:	f000 80f4 	beq.w	80036ca <smart_watch_process+0x3ba>
			if(btn_status == BTN_SET)
 80034e2:	f1ba 0f02 	cmp.w	sl, #2
 80034e6:	f47f af41 	bne.w	800336c <smart_watch_process+0x5c>
				btn_status = BTN_NONE;
 80034ea:	2300      	movs	r3, #0
				HAL_Delay(300);
 80034ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80034f0:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 80034f4:	f000 fce8 	bl	8003ec8 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80034f8:	2006      	movs	r0, #6
 80034fa:	f000 fd8b 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80034fe:	2007      	movs	r0, #7
 8003500:	f000 fd88 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8003504:	2008      	movs	r0, #8
 8003506:	f000 fd85 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
				video.set = SET_MINUTES;
 800350a:	f884 a039 	strb.w	sl, [r4, #57]	@ 0x39
 800350e:	e72d      	b.n	800336c <smart_watch_process+0x5c>
			file_handler(1);							// Start froma the first frame
 8003510:	2001      	movs	r0, #1
 8003512:	f7ff fb57 	bl	8002bc4 <file_handler>
			video.video_mode = NORMAL_MODE;
 8003516:	2301      	movs	r3, #1
 8003518:	8723      	strh	r3, [r4, #56]	@ 0x38
			break;
 800351a:	e727      	b.n	800336c <smart_watch_process+0x5c>
 800351c:	f3af 8000 	nop.w
 8003520:	00000000 	.word	0x00000000
 8003524:	408f4000 	.word	0x408f4000
 8003528:	240a9bf8 	.word	0x240a9bf8
 800352c:	240b643c 	.word	0x240b643c
 8003530:	58020800 	.word	0x58020800
 8003534:	00000000 	.word	0x00000000
 8003538:	2405ebf4 	.word	0x2405ebf4
 800353c:	240000a4 	.word	0x240000a4
 8003540:	aaaaaaab 	.word	0xaaaaaaab
 8003544:	240b6484 	.word	0x240b6484
 8003548:	240b68f2 	.word	0x240b68f2
 800354c:	240002a8 	.word	0x240002a8
	else if(video.FrameType == AVI_VIDEO_FRAME)
 8003550:	2801      	cmp	r0, #1
 8003552:	f47f af14 	bne.w	800337e <smart_watch_process+0x6e>
		AVI_Handel.CurrentImage++;
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8003558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
		AVI_Handel.CurrentImage++;
 800355a:	3301      	adds	r3, #1
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800355c:	49b4      	ldr	r1, [pc, #720]	@ (8003830 <smart_watch_process+0x520>)
 800355e:	48b5      	ldr	r0, [pc, #724]	@ (8003834 <smart_watch_process+0x524>)
		AVI_Handel.CurrentImage++;
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
		video.frameCount++;
 8003562:	6a23      	ldr	r3, [r4, #32]
 8003564:	3301      	adds	r3, #1
 8003566:	6223      	str	r3, [r4, #32]
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 8003568:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800356a:	f7ff f905 	bl	8002778 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 800356e:	4bb2      	ldr	r3, [pc, #712]	@ (8003838 <smart_watch_process+0x528>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0fb      	beq.n	800356e <smart_watch_process+0x25e>
		if(video.isfirstFrame == 1)
 8003576:	7da3      	ldrb	r3, [r4, #22]
 8003578:	2b01      	cmp	r3, #1
 800357a:	f000 8125 	beq.w	80037c8 <smart_watch_process+0x4b8>
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800357e:	4baf      	ldr	r3, [pc, #700]	@ (800383c <smart_watch_process+0x52c>)
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 8003580:	f04f 31ff 	mov.w	r1, #4294967295
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 8003584:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8003588:	4bad      	ldr	r3, [pc, #692]	@ (8003840 <smart_watch_process+0x530>)
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 800358a:	f1ca 00f0 	rsb	r0, sl, #240	@ 0xf0
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 800358e:	f1cb 0cf0 	rsb	ip, fp, #240	@ 0xf0
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 8003592:	681a      	ldr	r2, [r3, #0]
	yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 8003594:	0840      	lsrs	r0, r0, #1
	xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 8003596:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800359a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800359e:	eb0c 1000 	add.w	r0, ip, r0, lsl #4
 80035a2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80035a6:	48a7      	ldr	r0, [pc, #668]	@ (8003844 <smart_watch_process+0x534>)
	destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 80035a8:	9203      	str	r2, [sp, #12]
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)outputData, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 80035aa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80035ac:	9202      	str	r2, [sp, #8]
	HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 80035ae:	f000 fddb 	bl	8004168 <HAL_DMA2D_PollForTransfer>
	HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 80035b2:	fa1f f18a 	uxth.w	r1, sl
 80035b6:	48a3      	ldr	r0, [pc, #652]	@ (8003844 <smart_watch_process+0x534>)
 80035b8:	fa1f f38b 	uxth.w	r3, fp
 80035bc:	9100      	str	r1, [sp, #0]
 80035be:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80035c2:	f000 fd75 	bl	80040b0 <HAL_DMA2D_Start>
		depth24To16(&pOut, ( video.width * video.height ), 3);
 80035c6:	8b63      	ldrh	r3, [r4, #26]
 80035c8:	8b20      	ldrh	r0, [r4, #24]
 80035ca:	fb10 f003 	smulbb	r0, r0, r3
		pOut.u8Arr = (uint8_t *)outputData;
 80035ce:	4b9c      	ldr	r3, [pc, #624]	@ (8003840 <smart_watch_process+0x530>)
		depth24To16(&pOut, ( video.width * video.height ), 3);
 80035d0:	b280      	uxth	r0, r0
		pOut.u8Arr = (uint8_t *)outputData;
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	9106      	str	r1, [sp, #24]
	for( ; i < length ; i++)
 80035d6:	b1c0      	cbz	r0, 800360a <smart_watch_process+0x2fa>
 80035d8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80035dc:	460a      	mov	r2, r1
		pxArr->u16Arr[i] = color565(r, g, b);
 80035de:	f8df c280 	ldr.w	ip, [pc, #640]	@ 8003860 <smart_watch_process+0x550>
 80035e2:	f892 e001 	ldrb.w	lr, [r2, #1]
 80035e6:	7893      	ldrb	r3, [r2, #2]
 80035e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80035ec:	ea0c 2303 	and.w	r3, ip, r3, lsl #8
 80035f0:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80035f4:	ea43 030e 	orr.w	r3, r3, lr
 80035f8:	f812 eb03 	ldrb.w	lr, [r2], #3
 80035fc:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 8003600:	ba5b      	rev16	r3, r3
 8003602:	f821 3b02 	strh.w	r3, [r1], #2
	for( ; i < length ; i++)
 8003606:	4288      	cmp	r0, r1
 8003608:	d1eb      	bne.n	80035e2 <smart_watch_process+0x2d2>
		lcd_draw_opt3(&pOut);
 800360a:	a806      	add	r0, sp, #24
 800360c:	f7ff fde2 	bl	80031d4 <lcd_draw_opt3>
		outputData = ( outputData == output_data1 ) ? output_data2 : output_data1;
 8003610:	488b      	ldr	r0, [pc, #556]	@ (8003840 <smart_watch_process+0x530>)
 8003612:	4a8d      	ldr	r2, [pc, #564]	@ (8003848 <smart_watch_process+0x538>)
 8003614:	6801      	ldr	r1, [r0, #0]
 8003616:	4b8d      	ldr	r3, [pc, #564]	@ (800384c <smart_watch_process+0x53c>)
 8003618:	4889      	ldr	r0, [pc, #548]	@ (8003840 <smart_watch_process+0x530>)
 800361a:	4299      	cmp	r1, r3
 800361c:	bf08      	it	eq
 800361e:	4613      	moveq	r3, r2
 8003620:	6003      	str	r3, [r0, #0]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 8003622:	f000 fc4b 	bl	8003ebc <HAL_GetTick>
 8003626:	6b23      	ldr	r3, [r4, #48]	@ 0x30
		float watch_time = ( video.frameCount * video.frame_time );
 8003628:	ed94 7a08 	vldr	s14, [r4, #32]
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800362c:	1ac0      	subs	r0, r0, r3
		float watch_time = ( video.frameCount * video.frame_time );
 800362e:	edd4 6a0a 	vldr	s13, [r4, #40]	@ 0x28
 8003632:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		int time_diff = ( video.actual_time - watch_time );
 8003636:	ee07 0a90 	vmov	s15, r0
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800363a:	62e0      	str	r0, [r4, #44]	@ 0x2c
		int time_diff = ( video.actual_time - watch_time );
 800363c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003640:	eee7 7a66 	vfms.f32	s15, s14, s13
 8003644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		video.frameToSkip = ( time_diff / video.frame_time );
 8003648:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		if(time_diff < 0)
 800364c:	ee17 3a90 	vmov	r3, s15
 8003650:	2b00      	cmp	r3, #0
		video.frameToSkip = ( time_diff / video.frame_time );
 8003652:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8003656:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800365a:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
		if(time_diff < 0)
 800365e:	f2c0 80ad 	blt.w	80037bc <smart_watch_process+0x4ac>
		RTC_DateTypeDef sDate = {0};
 8003662:	f04f 0a00 	mov.w	sl, #0
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003666:	497a      	ldr	r1, [pc, #488]	@ (8003850 <smart_watch_process+0x540>)
 8003668:	487a      	ldr	r0, [pc, #488]	@ (8003854 <smart_watch_process+0x544>)
 800366a:	4652      	mov	r2, sl
		RTC_DateTypeDef sDate = {0};
 800366c:	f8cd a01c 	str.w	sl, [sp, #28]
		HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003670:	f004 fda0 	bl	80081b4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003674:	4652      	mov	r2, sl
 8003676:	a907      	add	r1, sp, #28
 8003678:	4876      	ldr	r0, [pc, #472]	@ (8003854 <smart_watch_process+0x544>)
 800367a:	f004 fdd7 	bl	800822c <HAL_RTC_GetDate>
 800367e:	e67e      	b.n	800337e <smart_watch_process+0x6e>
				btn_status = BTN_NONE;
 8003680:	2300      	movs	r3, #0
				HAL_Delay(300);
 8003682:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003686:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 800368a:	f000 fc1d 	bl	8003ec8 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800368e:	2006      	movs	r0, #6
 8003690:	f000 fcc0 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8003694:	2007      	movs	r0, #7
 8003696:	f000 fcbd 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800369a:	2008      	movs	r0, #8
 800369c:	f000 fcba 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Minutes > 0)
 80036a0:	7863      	ldrb	r3, [r4, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8083 	beq.w	80037ae <smart_watch_process+0x49e>
					video.time.Minutes--;
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
				video.file_idx += video.time.Minutes;
 80036ac:	461a      	mov	r2, r3
 80036ae:	7063      	strb	r3, [r4, #1]
				file_handler(1);
 80036b0:	2001      	movs	r0, #1
				video.file_idx += video.time.Minutes;
 80036b2:	8aa3      	ldrh	r3, [r4, #20]
 80036b4:	441a      	add	r2, r3
 80036b6:	82a2      	strh	r2, [r4, #20]
				file_handler(1);
 80036b8:	f7ff fa84 	bl	8002bc4 <file_handler>
				video.file_idx -= video.time.Minutes;
 80036bc:	8aa3      	ldrh	r3, [r4, #20]
 80036be:	7862      	ldrb	r2, [r4, #1]
			if(btn_status == BTN_SET)
 80036c0:	f899 a000 	ldrb.w	sl, [r9]
				video.file_idx -= video.time.Minutes;
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	82a3      	strh	r3, [r4, #20]
 80036c8:	e6e1      	b.n	800348e <smart_watch_process+0x17e>
				btn_status = BTN_NONE;
 80036ca:	2300      	movs	r3, #0
				HAL_Delay(300);
 80036cc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 80036d0:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 80036d4:	f000 fbf8 	bl	8003ec8 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80036d8:	2006      	movs	r0, #6
 80036da:	f000 fc9b 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80036de:	2007      	movs	r0, #7
 80036e0:	f000 fc98 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 80036e4:	2008      	movs	r0, #8
 80036e6:	f000 fc95 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
				if(video.time.Hours > 0)
 80036ea:	7823      	ldrb	r3, [r4, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d061      	beq.n	80037b4 <smart_watch_process+0x4a4>
					video.time.Hours--;
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b2db      	uxtb	r3, r3
				video.file_idx = ( video.time.Hours * 60 );
 80036f4:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	b292      	uxth	r2, r2
				file_handler(1);
 80036fc:	2001      	movs	r0, #1
 80036fe:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 8003700:	82a2      	strh	r2, [r4, #20]
				file_handler(1);
 8003702:	f7ff fa5f 	bl	8002bc4 <file_handler>
			if(btn_status == BTN_SET)
 8003706:	f899 a000 	ldrb.w	sl, [r9]
 800370a:	e6ea      	b.n	80034e2 <smart_watch_process+0x1d2>
				btn_status = BTN_NONE;
 800370c:	2300      	movs	r3, #0
				HAL_Delay(300);
 800370e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003712:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 8003716:	f000 fbd7 	bl	8003ec8 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800371a:	2006      	movs	r0, #6
 800371c:	f000 fc7a 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8003720:	2007      	movs	r0, #7
 8003722:	f000 fc77 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 8003726:	2008      	movs	r0, #8
 8003728:	f000 fc74 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
				video.time.Minutes++;
 800372c:	7863      	ldrb	r3, [r4, #1]
				video.time.Minutes %= 60;
 800372e:	4a4a      	ldr	r2, [pc, #296]	@ (8003858 <smart_watch_process+0x548>)
				file_handler(1);
 8003730:	4650      	mov	r0, sl
				video.time.Minutes++;
 8003732:	3301      	adds	r3, #1
				video.time.Minutes %= 60;
 8003734:	b2db      	uxtb	r3, r3
 8003736:	fba2 1203 	umull	r1, r2, r2, r3
 800373a:	0952      	lsrs	r2, r2, #5
 800373c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003740:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
				video.file_idx += video.time.Minutes;
 8003744:	8aa2      	ldrh	r2, [r4, #20]
				video.time.Minutes %= 60;
 8003746:	b2db      	uxtb	r3, r3
 8003748:	7063      	strb	r3, [r4, #1]
				video.file_idx += video.time.Minutes;
 800374a:	4413      	add	r3, r2
 800374c:	82a3      	strh	r3, [r4, #20]
				file_handler(1);
 800374e:	f7ff fa39 	bl	8002bc4 <file_handler>
				video.file_idx -= video.time.Minutes;
 8003752:	8aa3      	ldrh	r3, [r4, #20]
 8003754:	7862      	ldrb	r2, [r4, #1]
			if(btn_status == BTN_MINUS)
 8003756:	f899 a000 	ldrb.w	sl, [r9]
				video.file_idx -= video.time.Minutes;
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	82a3      	strh	r3, [r4, #20]
 800375e:	e692      	b.n	8003486 <smart_watch_process+0x176>
				btn_status = BTN_NONE;
 8003760:	2300      	movs	r3, #0
				HAL_Delay(300);
 8003762:	f44f 7096 	mov.w	r0, #300	@ 0x12c
				btn_status = BTN_NONE;
 8003766:	f889 3000 	strb.w	r3, [r9]
				HAL_Delay(300);
 800376a:	f000 fbad 	bl	8003ec8 <HAL_Delay>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800376e:	2006      	movs	r0, #6
 8003770:	f000 fc50 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8003774:	2007      	movs	r0, #7
 8003776:	f000 fc4d 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_IRQn);
 800377a:	2008      	movs	r0, #8
 800377c:	f000 fc4a 	bl	8004014 <HAL_NVIC_ClearPendingIRQ>
				video.time.Hours++;
 8003780:	7823      	ldrb	r3, [r4, #0]
				video.time.Hours %= 12;
 8003782:	4a36      	ldr	r2, [pc, #216]	@ (800385c <smart_watch_process+0x54c>)
				file_handler(1);
 8003784:	4650      	mov	r0, sl
				video.time.Hours++;
 8003786:	3301      	adds	r3, #1
				video.time.Hours %= 12;
 8003788:	b2db      	uxtb	r3, r3
 800378a:	fba2 1203 	umull	r1, r2, r2, r3
 800378e:	08d2      	lsrs	r2, r2, #3
 8003790:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003794:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	7023      	strb	r3, [r4, #0]
				video.file_idx = ( video.time.Hours * 60 );
 800379c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	82a3      	strh	r3, [r4, #20]
				file_handler(1);
 80037a4:	f7ff fa0e 	bl	8002bc4 <file_handler>
			if(btn_status == BTN_MINUS)
 80037a8:	f899 a000 	ldrb.w	sl, [r9]
 80037ac:	e695      	b.n	80034da <smart_watch_process+0x1ca>
 80037ae:	223b      	movs	r2, #59	@ 0x3b
					video.time.Minutes = 59;
 80037b0:	4613      	mov	r3, r2
 80037b2:	e77c      	b.n	80036ae <smart_watch_process+0x39e>
 80037b4:	f44f 7225 	mov.w	r2, #660	@ 0x294
					video.time.Hours = 11;
 80037b8:	230b      	movs	r3, #11
 80037ba:	e79f      	b.n	80036fc <smart_watch_process+0x3ec>
			HAL_Delay(-time_diff);
 80037bc:	4258      	negs	r0, r3
 80037be:	f000 fb83 	bl	8003ec8 <HAL_Delay>
			video.frameToSkip = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80037c6:	e74c      	b.n	8003662 <smart_watch_process+0x352>
			video.isfirstFrame = 0;
 80037c8:	2300      	movs	r3, #0
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 80037ca:	491c      	ldr	r1, [pc, #112]	@ (800383c <smart_watch_process+0x52c>)
 80037cc:	4819      	ldr	r0, [pc, #100]	@ (8003834 <smart_watch_process+0x524>)
			video.isfirstFrame = 0;
 80037ce:	75a3      	strb	r3, [r4, #22]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 80037d0:	f001 fb5c 	bl	8004e8c <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 80037d4:	4b19      	ldr	r3, [pc, #100]	@ (800383c <smart_watch_process+0x52c>)
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	8998      	ldrh	r0, [r3, #12]
 80037da:	f7ff fa59 	bl	8002c90 <DMA2D_Init.constprop.0>
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 80037de:	edd7 7a00 	vldr	s15, [r7]
			video.width = JPEG_Info.ImageWidth;
 80037e2:	4b16      	ldr	r3, [pc, #88]	@ (800383c <smart_watch_process+0x52c>)
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 80037e4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
			video.width = JPEG_Info.ImageWidth;
 80037e8:	68da      	ldr	r2, [r3, #12]
			video.height = JPEG_Info.ImageHeight;
 80037ea:	689b      	ldr	r3, [r3, #8]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 80037ec:	ee86 7b09 	vdiv.f64	d7, d6, d9
			video.width = JPEG_Info.ImageWidth;
 80037f0:	8322      	strh	r2, [r4, #24]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 80037f2:	b292      	uxth	r2, r2
			video.height = JPEG_Info.ImageHeight;
 80037f4:	8363      	strh	r3, [r4, #26]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 80037f6:	b29b      	uxth	r3, r3
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 80037f8:	f1d2 02f0 	rsbs	r2, r2, #240	@ 0xf0
 80037fc:	bf48      	it	mi
 80037fe:	3201      	addmi	r2, #1
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 8003800:	f1d3 03f0 	rsbs	r3, r3, #240	@ 0xf0
 8003804:	bf48      	it	mi
 8003806:	3301      	addmi	r3, #1
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 8003808:	1052      	asrs	r2, r2, #1
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800380a:	105b      	asrs	r3, r3, #1
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800380c:	83a2      	strh	r2, [r4, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800380e:	83e3      	strh	r3, [r4, #30]
			video.frame_time = ( AVI_Handel.aviInfo.SecPerFrame / 1000.0 );
 8003810:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003814:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 8003818:	f000 fb50 	bl	8003ebc <HAL_GetTick>
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 800381c:	2301      	movs	r3, #1
			video.tick_offset = HAL_GetTick();									// Tick offset from 0
 800381e:	6320      	str	r0, [r4, #48]	@ 0x30
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003820:	2200      	movs	r2, #0
 8003822:	490b      	ldr	r1, [pc, #44]	@ (8003850 <smart_watch_process+0x540>)
 8003824:	480b      	ldr	r0, [pc, #44]	@ (8003854 <smart_watch_process+0x544>)
			video.frameCount = 1;												// Reset the count here for every first frame of the minute chunk
 8003826:	6223      	str	r3, [r4, #32]
			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 8003828:	f004 fdf0 	bl	800840c <HAL_RTC_SetTime>
 800382c:	e6a7      	b.n	800357e <smart_watch_process+0x26e>
 800382e:	bf00      	nop
 8003830:	240a9c3c 	.word	0x240a9c3c
 8003834:	24000148 	.word	0x24000148
 8003838:	240000a0 	.word	0x240000a0
 800383c:	240000cc 	.word	0x240000cc
 8003840:	24000004 	.word	0x24000004
 8003844:	240000e0 	.word	0x240000e0
 8003848:	2400a52c 	.word	0x2400a52c
 800384c:	24034890 	.word	0x24034890
 8003850:	240a9bf8 	.word	0x240a9bf8
 8003854:	240000a4 	.word	0x240000a4
 8003858:	88888889 	.word	0x88888889
 800385c:	aaaaaaab 	.word	0xaaaaaaab
 8003860:	fffff800 	.word	0xfffff800

08003864 <HAL_GPIO_EXTI_Callback>:
}

/************************** CALLBACK FUNCTIONS **************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003864:	b508      	push	{r3, lr}

	if(video.video_mode == SETTING_MODE)
 8003866:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <HAL_GPIO_EXTI_Callback+0x58>)
 8003868:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800386c:	b103      	cbz	r3, 8003870 <HAL_GPIO_EXTI_Callback+0xc>

		disable_btn_int();

	}

}
 800386e:	bd08      	pop	{r3, pc}
		if(!HAL_GPIO_ReadPin(PLUS_BTN_GPIO_Port, PLUS_BTN_Pin))
 8003870:	2104      	movs	r1, #4
 8003872:	4813      	ldr	r0, [pc, #76]	@ (80038c0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003874:	f000 febc 	bl	80045f0 <HAL_GPIO_ReadPin>
 8003878:	b968      	cbnz	r0, 8003896 <HAL_GPIO_EXTI_Callback+0x32>
			btn_status = BTN_PLUS;
 800387a:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <HAL_GPIO_EXTI_Callback+0x60>)
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003880:	2006      	movs	r0, #6
 8003882:	f000 fb9f 	bl	8003fc4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8003886:	2007      	movs	r0, #7
 8003888:	f000 fb9c 	bl	8003fc4 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800388c:	2008      	movs	r0, #8
}
 800388e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8003892:	f000 bb97 	b.w	8003fc4 <HAL_NVIC_DisableIRQ>
		else if(!HAL_GPIO_ReadPin(SET_BTN_GPIO_Port, SET_BTN_Pin))
 8003896:	2102      	movs	r1, #2
 8003898:	4809      	ldr	r0, [pc, #36]	@ (80038c0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800389a:	f000 fea9 	bl	80045f0 <HAL_GPIO_ReadPin>
 800389e:	b918      	cbnz	r0, 80038a8 <HAL_GPIO_EXTI_Callback+0x44>
			btn_status = BTN_SET;
 80038a0:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <HAL_GPIO_EXTI_Callback+0x60>)
 80038a2:	2202      	movs	r2, #2
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e7eb      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x1c>
		else if(!HAL_GPIO_ReadPin(MINUS_BTN_GPIO_Port, MINUS_BTN_Pin))
 80038a8:	2101      	movs	r1, #1
 80038aa:	4805      	ldr	r0, [pc, #20]	@ (80038c0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80038ac:	f000 fea0 	bl	80045f0 <HAL_GPIO_ReadPin>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d1e5      	bne.n	8003880 <HAL_GPIO_EXTI_Callback+0x1c>
			btn_status = BTN_MINUS;
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <HAL_GPIO_EXTI_Callback+0x60>)
 80038b6:	2203      	movs	r2, #3
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e7e1      	b.n	8003880 <HAL_GPIO_EXTI_Callback+0x1c>
 80038bc:	240a9bf8 	.word	0x240a9bf8
 80038c0:	58020800 	.word	0x58020800
 80038c4:	240b68f2 	.word	0x240b68f2

080038c8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c8:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <HAL_MspInit+0x20>)
{
 80038ca:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038cc:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80038d0:	f042 0202 	orr.w	r2, r2, #2
 80038d4:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 80038d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e4:	b002      	add	sp, #8
 80038e6:	4770      	bx	lr
 80038e8:	58024400 	.word	0x58024400

080038ec <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <HAL_DMA2D_MspInit+0x2c>)
 80038ee:	6802      	ldr	r2, [r0, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d000      	beq.n	80038f6 <HAL_DMA2D_MspInit+0xa>
 80038f4:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80038f6:	4b09      	ldr	r3, [pc, #36]	@ (800391c <HAL_DMA2D_MspInit+0x30>)
{
 80038f8:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80038fa:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80038fe:	f042 0210 	orr.w	r2, r2, #16
 8003902:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8003906:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003912:	b002      	add	sp, #8
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	52001000 	.word	0x52001000
 800391c:	58024400 	.word	0x58024400

08003920 <HAL_JPEG_MspInit>:
{
	  static MDMA_HandleTypeDef   hmdmaIn;
	  static MDMA_HandleTypeDef   hmdmaOut;


	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003920:	4b3a      	ldr	r3, [pc, #232]	@ (8003a0c <HAL_JPEG_MspInit+0xec>)

	  __HAL_RCC_MDMA_CLK_ENABLE();

	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8003922:	2107      	movs	r1, #7
 8003924:	220f      	movs	r2, #15
{
 8003926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800392a:	f8d3 4134 	ldr.w	r4, [r3, #308]	@ 0x134
{
 800392e:	4606      	mov	r6, r0
 8003930:	b083      	sub	sp, #12
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);

	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003932:	2500      	movs	r5, #0
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003934:	f044 0420 	orr.w	r4, r4, #32
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
	  hmdmaIn.Init.DestBlockAddressOffset  = 0;

	  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
	  hmdmaIn.Init.BufferTransferLength = 32;
 8003938:	2720      	movs	r7, #32
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 800393a:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800393e:	f44f 48a0 	mov.w	r8, #20480	@ 0x5000
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 8003942:	f8c3 4134 	str.w	r4, [r3, #308]	@ 0x134
 8003946:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800394a:	4c31      	ldr	r4, [pc, #196]	@ (8003a10 <HAL_JPEG_MspInit+0xf0>)
	  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800394c:	f000 0020 	and.w	r0, r0, #32
 8003950:	9000      	str	r0, [sp, #0]
 8003952:	9800      	ldr	r0, [sp, #0]
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8003954:	f8d3 0134 	ldr.w	r0, [r3, #308]	@ 0x134
 8003958:	f040 0001 	orr.w	r0, r0, #1
 800395c:	f8c3 0134 	str.w	r0, [r3, #308]	@ 0x134
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 8003960:	2079      	movs	r0, #121	@ 0x79
	  __HAL_RCC_MDMA_CLK_ENABLE();
 8003962:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	9b01      	ldr	r3, [sp, #4]
	  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800396e:	f000 fadf 	bl	8003f30 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8003972:	2079      	movs	r0, #121	@ 0x79
 8003974:	f000 fb18 	bl	8003fa8 <HAL_NVIC_EnableIRQ>
	  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 8003978:	2380      	movs	r3, #128	@ 0x80
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800397a:	2202      	movs	r2, #2

	  hmdmaIn.Instance = MDMA_Channel1;

	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);

	  HAL_MDMA_DeInit(&hmdmaIn);
 800397c:	4620      	mov	r0, r4
	  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800397e:	6223      	str	r3, [r4, #32]
	  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 8003980:	6162      	str	r2, [r4, #20]
	  hmdmaIn.Instance = MDMA_Channel1;
 8003982:	2211      	movs	r2, #17
	  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;
 8003984:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8003988:	60a5      	str	r5, [r4, #8]
	  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800398a:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaIn.Init.BufferTransferLength = 32;
 800398e:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003990:	e9c4 3503 	strd	r3, r5, [r4, #12]
	  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS;
 8003994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003998:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaIn.Instance = MDMA_Channel1;
 800399a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <HAL_JPEG_MspInit+0xf4>)
	  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800399c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 80039a0:	6334      	str	r4, [r6, #48]	@ 0x30
 80039a2:	6426      	str	r6, [r4, #64]	@ 0x40
	  hmdmaIn.Instance = MDMA_Channel1;
 80039a4:	e9c4 3200 	strd	r3, r2, [r4]
	  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 80039a8:	e9c4 5506 	strd	r5, r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaIn);
 80039ac:	f002 f942 	bl	8005c34 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaIn);
 80039b0:	4620      	mov	r0, r4
 80039b2:	f002 f8c5 	bl	8005b40 <HAL_MDMA_Init>

	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 80039b6:	4c18      	ldr	r4, [pc, #96]	@ (8003a18 <HAL_JPEG_MspInit+0xf8>)
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
	  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 80039b8:	f44f 3320 	mov.w	r3, #163840	@ 0x28000

	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
	  hmdmaOut.Init.BufferTransferLength = 32;

	  hmdmaOut.Instance = MDMA_Channel0;
 80039bc:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <HAL_JPEG_MspInit+0xfc>)
	  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;
 80039be:	60a5      	str	r5, [r4, #8]

	  HAL_MDMA_DeInit(&hmdmaOut);
 80039c0:	4620      	mov	r0, r4
	  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;
 80039c2:	6323      	str	r3, [r4, #48]	@ 0x30
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80039c4:	2313      	movs	r3, #19
	  hmdmaOut.Instance = MDMA_Channel0;
 80039c6:	6022      	str	r2, [r4, #0]
	  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80039c8:	6063      	str	r3, [r4, #4]
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 80039ca:	23c0      	movs	r3, #192	@ 0xc0
	  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 80039cc:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
	  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 80039d0:	60e3      	str	r3, [r4, #12]
	  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 80039d2:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
	  hmdmaOut.Init.BufferTransferLength = 32;
 80039d6:	62a7      	str	r7, [r4, #40]	@ 0x28
	  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 80039d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 80039dc:	e9c4 7507 	strd	r7, r5, [r4, #28]
	  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 80039e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
	  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 80039e4:	2508      	movs	r5, #8
 80039e6:	61a5      	str	r5, [r4, #24]
	  HAL_MDMA_DeInit(&hmdmaOut);
 80039e8:	f002 f924 	bl	8005c34 <HAL_MDMA_DeInit>

	  HAL_MDMA_Init(&hmdmaOut);
 80039ec:	4620      	mov	r0, r4
 80039ee:	f002 f8a7 	bl	8005b40 <HAL_MDMA_Init>

	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 80039f2:	6374      	str	r4, [r6, #52]	@ 0x34


	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 80039f4:	220f      	movs	r2, #15
 80039f6:	4629      	mov	r1, r5
 80039f8:	207a      	movs	r0, #122	@ 0x7a
	  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 80039fa:	6426      	str	r6, [r4, #64]	@ 0x40
	  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 80039fc:	f000 fa98 	bl	8003f30 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8003a00:	207a      	movs	r0, #122	@ 0x7a
}
 8003a02:	b003      	add	sp, #12
 8003a04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8003a08:	f000 bace 	b.w	8003fa8 <HAL_NVIC_EnableIRQ>
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	240b6968 	.word	0x240b6968
 8003a14:	52000080 	.word	0x52000080
 8003a18:	240b68f8 	.word	0x240b68f8
 8003a1c:	52000040 	.word	0x52000040

08003a20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003a20:	b5d0      	push	{r4, r6, r7, lr}
 8003a22:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	2100      	movs	r1, #0
{
 8003a26:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a28:	22c0      	movs	r2, #192	@ 0xc0
 8003a2a:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	9108      	str	r1, [sp, #32]
 8003a2e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003a32:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a36:	f009 f8bb 	bl	800cbb0 <memset>
  if(hsd->Instance==SDMMC1)
 8003a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b30 <HAL_SD_MspInit+0x110>)
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d001      	beq.n	8003a46 <HAL_SD_MspInit+0x26>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003a42:	b03a      	add	sp, #232	@ 0xe8
 8003a44:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003a46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a4a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a4c:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003a4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a52:	f003 f91b 	bl	8006c8c <HAL_RCCEx_PeriphCLKConfig>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d166      	bne.n	8003b28 <HAL_SD_MspInit+0x108>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003a5a:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <HAL_SD_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003a60:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003a62:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003a64:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a68:	2601      	movs	r6, #1
 8003a6a:	2703      	movs	r7, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003a6c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a70:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8003a74:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8003a78:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8003a7c:	9200      	str	r2, [sp, #0]
 8003a7e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a80:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003a84:	f042 0202 	orr.w	r2, r2, #2
 8003a88:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003a8c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003a90:	f002 0202 	and.w	r2, r2, #2
 8003a94:	9201      	str	r2, [sp, #4]
 8003a96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a98:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003a9c:	f042 0204 	orr.w	r2, r2, #4
 8003aa0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003aa4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003aa8:	f002 0204 	and.w	r2, r2, #4
 8003aac:	9202      	str	r2, [sp, #8]
 8003aae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003ab4:	f042 0208 	orr.w	r2, r2, #8
 8003ab8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003ac0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac2:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aca:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003acc:	a904      	add	r1, sp, #16
 8003ace:	481a      	ldr	r0, [pc, #104]	@ (8003b38 <HAL_SD_MspInit+0x118>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ad0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad6:	f000 fc49 	bl	800436c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003ada:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 8003ade:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae0:	a904      	add	r1, sp, #16
 8003ae2:	4816      	ldr	r0, [pc, #88]	@ (8003b3c <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003ae4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003ae6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003aea:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aee:	f000 fc3d 	bl	800436c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003af2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003af6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af8:	a904      	add	r1, sp, #16
 8003afa:	4810      	ldr	r0, [pc, #64]	@ (8003b3c <HAL_SD_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003afc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003afe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b02:	2200      	movs	r2, #0
 8003b04:	2303      	movs	r3, #3
 8003b06:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0a:	f000 fc2f 	bl	800436c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b0e:	2204      	movs	r2, #4
 8003b10:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b12:	a904      	add	r1, sp, #16
 8003b14:	480a      	ldr	r0, [pc, #40]	@ (8003b40 <HAL_SD_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b16:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b18:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003b1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b20:	f000 fc24 	bl	800436c <HAL_GPIO_Init>
}
 8003b24:	b03a      	add	sp, #232	@ 0xe8
 8003b26:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003b28:	f7ff f84a 	bl	8002bc0 <Error_Handler>
 8003b2c:	e795      	b.n	8003a5a <HAL_SD_MspInit+0x3a>
 8003b2e:	bf00      	nop
 8003b30:	52007000 	.word	0x52007000
 8003b34:	58024400 	.word	0x58024400
 8003b38:	58020400 	.word	0x58020400
 8003b3c:	58020800 	.word	0x58020800
 8003b40:	58020c00 	.word	0x58020c00
 8003b44:	00000000 	.word	0x00000000

08003b48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	2100      	movs	r1, #0
{
 8003b4e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b50:	22c0      	movs	r2, #192	@ 0xc0
 8003b52:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	9106      	str	r1, [sp, #24]
 8003b56:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003b5a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b5e:	f009 f827 	bl	800cbb0 <memset>
  if(hspi->Instance==SPI1)
 8003b62:	4b21      	ldr	r3, [pc, #132]	@ (8003be8 <HAL_SPI_MspInit+0xa0>)
 8003b64:	6822      	ldr	r2, [r4, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d001      	beq.n	8003b6e <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b6a:	b038      	add	sp, #224	@ 0xe0
 8003b6c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003b6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b72:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b74:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003b76:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b7a:	f003 f887 	bl	8006c8c <HAL_RCCEx_PeriphCLKConfig>
 8003b7e:	bb40      	cbnz	r0, 8003bd2 <HAL_SPI_MspInit+0x8a>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b80:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b82:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b84:	a902      	add	r1, sp, #8
 8003b86:	481a      	ldr	r0, [pc, #104]	@ (8003bf0 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b88:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8003b8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b90:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 8003b94:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8003b98:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003b9c:	9200      	str	r2, [sp, #0]
 8003b9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8003bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bb0:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003bb6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8003bd8 <HAL_SPI_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003bbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003bc2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8003be0 <HAL_SPI_MspInit+0x98>
 8003bc6:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bca:	f000 fbcf 	bl	800436c <HAL_GPIO_Init>
}
 8003bce:	b038      	add	sp, #224	@ 0xe0
 8003bd0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003bd2:	f7fe fff5 	bl	8002bc0 <Error_Handler>
 8003bd6:	e7d3      	b.n	8003b80 <HAL_SPI_MspInit+0x38>
 8003bd8:	000000a0 	.word	0x000000a0
 8003bdc:	00000002 	.word	0x00000002
	...
 8003be8:	40013000 	.word	0x40013000
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	58020000 	.word	0x58020000
 8003bf4:	00000000 	.word	0x00000000

08003bf8 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	b0b0      	sub	sp, #192	@ 0xc0
 8003bfc:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bfe:	22c0      	movs	r2, #192	@ 0xc0
 8003c00:	2100      	movs	r1, #0
 8003c02:	4668      	mov	r0, sp
 8003c04:	f008 ffd4 	bl	800cbb0 <memset>
  if(hrtc->Instance==RTC)
 8003c08:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <HAL_RTC_MspInit+0x50>)
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RTC_MspInit+0x1c>

    __HAL_RCC_RTC_ENABLE();

  }

}
 8003c10:	b030      	add	sp, #192	@ 0xc0
 8003c12:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c14:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8003c40 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c1c:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c1e:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c22:	932d      	str	r3, [sp, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c24:	f003 f832 	bl	8006c8c <HAL_RCCEx_PeriphCLKConfig>
 8003c28:	b930      	cbnz	r0, 8003c38 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8003c2a:	4a08      	ldr	r2, [pc, #32]	@ (8003c4c <HAL_RTC_MspInit+0x54>)
 8003c2c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
}
 8003c34:	b030      	add	sp, #192	@ 0xc0
 8003c36:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003c38:	f7fe ffc2 	bl	8002bc0 <Error_Handler>
 8003c3c:	e7f5      	b.n	8003c2a <HAL_RTC_MspInit+0x32>
 8003c3e:	bf00      	nop
 8003c40:	00400000 	.word	0x00400000
 8003c44:	00000000 	.word	0x00000000
 8003c48:	58004000 	.word	0x58004000
 8003c4c:	58024400 	.word	0x58024400

08003c50 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c50:	e7fe      	b.n	8003c50 <NMI_Handler>
 8003c52:	bf00      	nop

08003c54 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c54:	e7fe      	b.n	8003c54 <HardFault_Handler>
 8003c56:	bf00      	nop

08003c58 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c58:	e7fe      	b.n	8003c58 <MemManage_Handler>
 8003c5a:	bf00      	nop

08003c5c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c5c:	e7fe      	b.n	8003c5c <BusFault_Handler>
 8003c5e:	bf00      	nop

08003c60 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <UsageFault_Handler>
 8003c62:	bf00      	nop

08003c64 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop

08003c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop

08003c6c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop

08003c70 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c70:	f000 b918 	b.w	8003ea4 <HAL_IncTick>

08003c74 <JPEG_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
void JPEG_IRQHandler(void)
{
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 8003c74:	4801      	ldr	r0, [pc, #4]	@ (8003c7c <JPEG_IRQHandler+0x8>)
 8003c76:	f001 bec7 	b.w	8005a08 <HAL_JPEG_IRQHandler>
 8003c7a:	bf00      	nop
 8003c7c:	24000148 	.word	0x24000148

08003c80 <MDMA_IRQHandler>:
}


void MDMA_IRQHandler()
{
 8003c80:	b510      	push	{r4, lr}
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 8003c82:	4c04      	ldr	r4, [pc, #16]	@ (8003c94 <MDMA_IRQHandler+0x14>)
 8003c84:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003c86:	f002 f87f 	bl	8005d88 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003c8a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8003c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);
 8003c90:	f002 b87a 	b.w	8005d88 <HAL_MDMA_IRQHandler>
 8003c94:	24000148 	.word	0x24000148

08003c98 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(MINUS_BTN_Pin);
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f000 bcb3 	b.w	8004604 <HAL_GPIO_EXTI_IRQHandler>
 8003c9e:	bf00      	nop

08003ca0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 8003ca0:	2002      	movs	r0, #2
 8003ca2:	f000 bcaf 	b.w	8004604 <HAL_GPIO_EXTI_IRQHandler>
 8003ca6:	bf00      	nop

08003ca8 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{

    HAL_GPIO_EXTI_IRQHandler(PLUS_BTN_Pin);
 8003ca8:	2004      	movs	r0, #4
 8003caa:	f000 bcab 	b.w	8004604 <HAL_GPIO_EXTI_IRQHandler>
 8003cae:	bf00      	nop

08003cb0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cb0:	490d      	ldr	r1, [pc, #52]	@ (8003ce8 <_sbrk+0x38>)
{
 8003cb2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003cb6:	6808      	ldr	r0, [r1, #0]
{
 8003cb8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cba:	4c0d      	ldr	r4, [pc, #52]	@ (8003cf0 <_sbrk+0x40>)
 8003cbc:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003cbe:	b120      	cbz	r0, 8003cca <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cc0:	4403      	add	r3, r0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d807      	bhi.n	8003cd6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003cc6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8003cc8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003cca:	4c0a      	ldr	r4, [pc, #40]	@ (8003cf4 <_sbrk+0x44>)
 8003ccc:	4620      	mov	r0, r4
 8003cce:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003cd0:	4403      	add	r3, r0
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d9f7      	bls.n	8003cc6 <_sbrk+0x16>
    errno = ENOMEM;
 8003cd6:	f008 ff73 	bl	800cbc0 <__errno>
 8003cda:	220c      	movs	r2, #12
 8003cdc:	4603      	mov	r3, r0
    return (void *)-1;
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	bd10      	pop	{r4, pc}
 8003ce6:	bf00      	nop
 8003ce8:	240b69d4 	.word	0x240b69d4
 8003cec:	24100000 	.word	0x24100000
 8003cf0:	00000800 	.word	0x00000800
 8003cf4:	240b6b60 	.word	0x240b6b60

08003cf8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cf8:	4922      	ldr	r1, [pc, #136]	@ (8003d84 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cfa:	4a23      	ldr	r2, [pc, #140]	@ (8003d88 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cfc:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8003d04:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d805      	bhi.n	8003d20 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	f023 030f 	bic.w	r3, r3, #15
 8003d1a:	f043 0303 	orr.w	r3, r3, #3
 8003d1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d22:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d24:	4a1a      	ldr	r2, [pc, #104]	@ (8003d90 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8003d26:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d28:	4817      	ldr	r0, [pc, #92]	@ (8003d88 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8003d2a:	f041 0101 	orr.w	r1, r1, #1
 8003d2e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003d30:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	400a      	ands	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d38:	6803      	ldr	r3, [r0, #0]
 8003d3a:	f013 0f0c 	tst.w	r3, #12
 8003d3e:	d005      	beq.n	8003d4c <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d40:	6803      	ldr	r3, [r0, #0]
 8003d42:	f023 030f 	bic.w	r3, r3, #15
 8003d46:	f043 0303 	orr.w	r3, r3, #3
 8003d4a:	6003      	str	r3, [r0, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d8c <SystemInit+0x94>)
 8003d4e:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d50:	4910      	ldr	r1, [pc, #64]	@ (8003d94 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8003d52:	4c11      	ldr	r4, [pc, #68]	@ (8003d98 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003d54:	4811      	ldr	r0, [pc, #68]	@ (8003d9c <SystemInit+0xa4>)
  RCC->CDCFGR1 = 0x00000000;
 8003d56:	619a      	str	r2, [r3, #24]
  RCC->CDCFGR2 = 0x00000000;
 8003d58:	61da      	str	r2, [r3, #28]
  RCC->SRDCFGR = 0x00000000;
 8003d5a:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003d5c:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d5e:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8003d62:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003d64:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003d66:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8003d68:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8003d6c:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8003d6e:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8003d70:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d72:	480b      	ldr	r0, [pc, #44]	@ (8003da0 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8003d74:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003d78:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8003d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d7c:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000ed00 	.word	0xe000ed00
 8003d88:	52002000 	.word	0x52002000
 8003d8c:	58024400 	.word	0x58024400
 8003d90:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d94:	01010280 	.word	0x01010280
 8003d98:	02020200 	.word	0x02020200
 8003d9c:	01ff0000 	.word	0x01ff0000
 8003da0:	52004000 	.word	0x52004000

08003da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ddc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003da8:	f7ff ffa6 	bl	8003cf8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dac:	480c      	ldr	r0, [pc, #48]	@ (8003de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dae:	490d      	ldr	r1, [pc, #52]	@ (8003de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003db0:	4a0d      	ldr	r2, [pc, #52]	@ (8003de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003db4:	e002      	b.n	8003dbc <LoopCopyDataInit>

08003db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dba:	3304      	adds	r3, #4

08003dbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dc0:	d3f9      	bcc.n	8003db6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc8:	e001      	b.n	8003dce <LoopFillZerobss>

08003dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dcc:	3204      	adds	r2, #4

08003dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dd0:	d3fb      	bcc.n	8003dca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003dd2:	f008 fefb 	bl	800cbcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dd6:	f7fe fd8b 	bl	80028f0 <main>
  bx  lr
 8003dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ddc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003de0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003de4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003de8:	0800d850 	.word	0x0800d850
  ldr r2, =_sbss
 8003dec:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003df0:	240b6b5c 	.word	0x240b6b5c

08003df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df4:	e7fe      	b.n	8003df4 <ADC_IRQHandler>
	...

08003df8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003df8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e38 <HAL_InitTick+0x40>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b90b      	cbnz	r3, 8003e02 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003dfe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003e00:	4770      	bx	lr
{
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e3c <HAL_InitTick+0x44>)
 8003e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e10:	6810      	ldr	r0, [r2, #0]
 8003e12:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e16:	f000 f8e7 	bl	8003fe8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1a:	b908      	cbnz	r0, 8003e20 <HAL_InitTick+0x28>
 8003e1c:	2c0f      	cmp	r4, #15
 8003e1e:	d901      	bls.n	8003e24 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003e20:	2001      	movs	r0, #1
}
 8003e22:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e24:	2200      	movs	r2, #0
 8003e26:	4621      	mov	r1, r4
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	f000 f880 	bl	8003f30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e30:	4b03      	ldr	r3, [pc, #12]	@ (8003e40 <HAL_InitTick+0x48>)
 8003e32:	2000      	movs	r0, #0
 8003e34:	601c      	str	r4, [r3, #0]
}
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	24000010 	.word	0x24000010
 8003e3c:	2400000c 	.word	0x2400000c
 8003e40:	24000014 	.word	0x24000014

08003e44 <HAL_Init>:
{
 8003e44:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e46:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e48:	4c12      	ldr	r4, [pc, #72]	@ (8003e94 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e4a:	f000 f85f 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003e4e:	f002 fbf9 	bl	8006644 <HAL_RCC_GetSysClockFreq>
 8003e52:	4b11      	ldr	r3, [pc, #68]	@ (8003e98 <HAL_Init+0x54>)
 8003e54:	4911      	ldr	r1, [pc, #68]	@ (8003e9c <HAL_Init+0x58>)
 8003e56:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e58:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003e5a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e5e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003e62:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e64:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003e66:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003e6a:	490d      	ldr	r1, [pc, #52]	@ (8003ea0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e6c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003e70:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e72:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003e76:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e78:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e7a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e7c:	f7ff ffbc 	bl	8003df8 <HAL_InitTick>
 8003e80:	b110      	cbz	r0, 8003e88 <HAL_Init+0x44>
    return HAL_ERROR;
 8003e82:	2401      	movs	r4, #1
}
 8003e84:	4620      	mov	r0, r4
 8003e86:	bd10      	pop	{r4, pc}
 8003e88:	4604      	mov	r4, r0
  HAL_MspInit();
 8003e8a:	f7ff fd1d 	bl	80038c8 <HAL_MspInit>
}
 8003e8e:	4620      	mov	r0, r4
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	bf00      	nop
 8003e94:	24000008 	.word	0x24000008
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	0800d4f8 	.word	0x0800d4f8
 8003ea0:	2400000c 	.word	0x2400000c

08003ea4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003ea4:	4a03      	ldr	r2, [pc, #12]	@ (8003eb4 <HAL_IncTick+0x10>)
 8003ea6:	4b04      	ldr	r3, [pc, #16]	@ (8003eb8 <HAL_IncTick+0x14>)
 8003ea8:	6811      	ldr	r1, [r2, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	440b      	add	r3, r1
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	240b69d8 	.word	0x240b69d8
 8003eb8:	24000010 	.word	0x24000010

08003ebc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ebc:	4b01      	ldr	r3, [pc, #4]	@ (8003ec4 <HAL_GetTick+0x8>)
 8003ebe:	6818      	ldr	r0, [r3, #0]
}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	240b69d8 	.word	0x240b69d8

08003ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7ff fff6 	bl	8003ebc <HAL_GetTick>
 8003ed0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ed2:	1c63      	adds	r3, r4, #1
 8003ed4:	d002      	beq.n	8003edc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed6:	4b04      	ldr	r3, [pc, #16]	@ (8003ee8 <HAL_Delay+0x20>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003edc:	f7ff ffee 	bl	8003ebc <HAL_GetTick>
 8003ee0:	1b40      	subs	r0, r0, r5
 8003ee2:	42a0      	cmp	r0, r4
 8003ee4:	d3fa      	bcc.n	8003edc <HAL_Delay+0x14>
  {
  }
}
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	24000010 	.word	0x24000010

08003eec <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003eec:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003ef0:	6913      	ldr	r3, [r2, #16]
 8003ef2:	f023 0302 	bic.w	r3, r3, #2
 8003ef6:	6113      	str	r3, [r2, #16]
}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop

08003efc <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003efc:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003f00:	6913      	ldr	r3, [r2, #16]
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	6113      	str	r3, [r2, #16]
}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop

08003f0c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4906      	ldr	r1, [pc, #24]	@ (8003f28 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0e:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f12:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003f14:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f16:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f18:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003f22:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003f24:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f26:	4770      	bx	lr
 8003f28:	e000ed00 	.word	0xe000ed00
 8003f2c:	05fa0000 	.word	0x05fa0000

08003f30 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <HAL_NVIC_SetPriority+0x6c>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f38:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f3e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f42:	f1be 0f04 	cmp.w	lr, #4
 8003f46:	bf28      	it	cs
 8003f48:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f4c:	f1bc 0f06 	cmp.w	ip, #6
 8003f50:	d91a      	bls.n	8003f88 <HAL_NVIC_SetPriority+0x58>
 8003f52:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f5e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003f66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	fa03 f30e 	lsl.w	r3, r3, lr
 8003f6c:	ea21 0303 	bic.w	r3, r1, r3
 8003f70:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f74:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003f7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003f7e:	db06      	blt.n	8003f8e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	4a07      	ldr	r2, [pc, #28]	@ (8003fa0 <HAL_NVIC_SetPriority+0x70>)
 8003f82:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f88:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8a:	4694      	mov	ip, r2
 8003f8c:	e7e9      	b.n	8003f62 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8e:	f000 000f 	and.w	r0, r0, #15
 8003f92:	4a04      	ldr	r2, [pc, #16]	@ (8003fa4 <HAL_NVIC_SetPriority+0x74>)
 8003f94:	5413      	strb	r3, [r2, r0]
 8003f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f9a:	bf00      	nop
 8003f9c:	e000ed00 	.word	0xe000ed00
 8003fa0:	e000e400 	.word	0xe000e400
 8003fa4:	e000ed14 	.word	0xe000ed14

08003fa8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	db07      	blt.n	8003fbc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fac:	2301      	movs	r3, #1
 8003fae:	f000 011f 	and.w	r1, r0, #31
 8003fb2:	4a03      	ldr	r2, [pc, #12]	@ (8003fc0 <HAL_NVIC_EnableIRQ+0x18>)
 8003fb4:	0940      	lsrs	r0, r0, #5
 8003fb6:	408b      	lsls	r3, r1
 8003fb8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000e100 	.word	0xe000e100

08003fc4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	db0c      	blt.n	8003fe2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc8:	0943      	lsrs	r3, r0, #5
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f000 001f 	and.w	r0, r0, #31
 8003fd0:	4904      	ldr	r1, [pc, #16]	@ (8003fe4 <HAL_NVIC_DisableIRQ+0x20>)
 8003fd2:	3320      	adds	r3, #32
 8003fd4:	4082      	lsls	r2, r0
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fde:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003fe2:	4770      	bx	lr
 8003fe4:	e000e100 	.word	0xe000e100

08003fe8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe8:	1e43      	subs	r3, r0, #1
 8003fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fee:	d301      	bcc.n	8003ff4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003ff2:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ff8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	4905      	ldr	r1, [pc, #20]	@ (8004010 <HAL_SYSTICK_Config+0x28>)
 8003ffc:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004000:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004004:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004008:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004014:	2800      	cmp	r0, #0
 8004016:	db08      	blt.n	800402a <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004018:	0943      	lsrs	r3, r0, #5
 800401a:	2201      	movs	r2, #1
 800401c:	f000 001f 	and.w	r0, r0, #31
 8004020:	4902      	ldr	r1, [pc, #8]	@ (800402c <HAL_NVIC_ClearPendingIRQ+0x18>)
 8004022:	3360      	adds	r3, #96	@ 0x60
 8004024:	4082      	lsls	r2, r0
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800402a:	4770      	bx	lr
 800402c:	e000e100 	.word	0xe000e100

08004030 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004030:	2800      	cmp	r0, #0
 8004032:	d035      	beq.n	80040a0 <HAL_DMA2D_Init+0x70>
{
 8004034:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004036:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800403a:	4604      	mov	r4, r0
 800403c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004040:	b34b      	cbz	r3, 8004096 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004042:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004044:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004046:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004048:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800404c:	69e1      	ldr	r1, [r4, #28]
 800404e:	681d      	ldr	r5, [r3, #0]
 8004050:	4814      	ldr	r0, [pc, #80]	@ (80040a4 <HAL_DMA2D_Init+0x74>)
 8004052:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004054:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004056:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004058:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800405a:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800405c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800405e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004060:	4302      	orrs	r2, r0
 8004062:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004064:	4810      	ldr	r0, [pc, #64]	@ (80040a8 <HAL_DMA2D_Init+0x78>)
 8004066:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004068:	4910      	ldr	r1, [pc, #64]	@ (80040ac <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800406a:	4302      	orrs	r2, r0
 800406c:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800406e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004070:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004072:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004076:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004078:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800407a:	6419      	str	r1, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800407c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800407e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004082:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004084:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8004088:	430a      	orrs	r2, r1
 800408a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800408c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800408e:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004090:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8004094:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8004096:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800409a:	f7ff fc27 	bl	80038ec <HAL_DMA2D_MspInit>
 800409e:	e7d0      	b.n	8004042 <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
 80040a0:	2001      	movs	r0, #1
}
 80040a2:	4770      	bx	lr
 80040a4:	fff8ffbf 	.word	0xfff8ffbf
 80040a8:	fffffef8 	.word	0xfffffef8
 80040ac:	ffff0000 	.word	0xffff0000

080040b0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80040b0:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040b2:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 80040b6:	2c01      	cmp	r4, #1
 80040b8:	d03a      	beq.n	8004130 <HAL_DMA2D_Start+0x80>
 80040ba:	2401      	movs	r4, #1
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80040bc:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 80040be:	f880 4060 	strb.w	r4, [r0, #96]	@ 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040c2:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80040c4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040c8:	f880 4061 	strb.w	r4, [r0, #97]	@ 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80040cc:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80040d0:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80040d2:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80040d6:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 80040da:	ea43 030c 	orr.w	r3, r3, ip
 80040de:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80040e0:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80040e2:	d00a      	beq.n	80040fa <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80040e4:	f5b6 2f80 	cmp.w	r6, #262144	@ 0x40000
 80040e8:	d025      	beq.n	8004136 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80040ea:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 80040ec:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80040ee:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6023      	str	r3, [r4, #0]
}
 80040f6:	bc70      	pop	{r4, r5, r6}
 80040f8:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80040fa:	6883      	ldr	r3, [r0, #8]
 80040fc:	b1b3      	cbz	r3, 800412c <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d026      	beq.n	8004150 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004102:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004104:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004108:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800410c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800410e:	d022      	beq.n	8004156 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004110:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004112:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004116:	d010      	beq.n	800413a <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 8004118:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 800411a:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800411c:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800411e:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004120:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8004124:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8004128:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800412c:	63a1      	str	r1, [r4, #56]	@ 0x38
 800412e:	e7dd      	b.n	80040ec <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 8004130:	2002      	movs	r0, #2
}
 8004132:	bc70      	pop	{r4, r5, r6}
 8004134:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8004136:	6161      	str	r1, [r4, #20]
 8004138:	e7d8      	b.n	80040ec <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800413a:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11U);
 800413c:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800413e:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8004140:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004142:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004146:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800414a:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800414e:	e7ed      	b.n	800412c <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 8004150:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004154:	e7ea      	b.n	800412c <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 8004156:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10U);
 8004158:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800415a:	02db      	lsls	r3, r3, #11
 800415c:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004160:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8004164:	e7e2      	b.n	800412c <HAL_DMA2D_Start+0x7c>
 8004166:	bf00      	nop

08004168 <HAL_DMA2D_PollForTransfer>:
{
 8004168:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800416a:	2300      	movs	r3, #0
{
 800416c:	b082      	sub	sp, #8
 800416e:	4604      	mov	r4, r0
 8004170:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 8004172:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004174:	6803      	ldr	r3, [r0, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	07d6      	lsls	r6, r2, #31
 800417a:	d40f      	bmi.n	800419c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800417c:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800417e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004180:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8004182:	0691      	lsls	r1, r2, #26
 8004184:	d432      	bmi.n	80041ec <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004186:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004188:	2201      	movs	r2, #1
  return HAL_OK;
 800418a:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800418c:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800418e:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
 8004192:	2300      	movs	r3, #0
 8004194:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8004198:	b002      	add	sp, #8
 800419a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800419c:	f7ff fe8e 	bl	8003ebc <HAL_GetTick>
 80041a0:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80041a2:	1c68      	adds	r0, r5, #1
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	d152      	bne.n	800424e <HAL_DMA2D_PollForTransfer+0xe6>
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	0796      	lsls	r6, r2, #30
 80041ac:	d4e6      	bmi.n	800417c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80041b2:	9a01      	ldr	r2, [sp, #4]
 80041b4:	f012 0f21 	tst.w	r2, #33	@ 0x21
 80041b8:	d0f6      	beq.n	80041a8 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041ba:	9a01      	ldr	r2, [sp, #4]
 80041bc:	0691      	lsls	r1, r2, #26
 80041be:	d503      	bpl.n	80041c8 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041c2:	f042 0202 	orr.w	r2, r2, #2
 80041c6:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041c8:	9a01      	ldr	r2, [sp, #4]
 80041ca:	07d2      	lsls	r2, r2, #31
 80041cc:	d503      	bpl.n	80041d6 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041d6:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041d8:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041da:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041dc:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 80041e2:	2300      	movs	r3, #0
 80041e4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 80041e8:	b002      	add	sp, #8
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80041ec:	f7ff fe66 	bl	8003ebc <HAL_GetTick>
 80041f0:	1c6a      	adds	r2, r5, #1
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80041f2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80041f4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80041f6:	d13b      	bne.n	8004270 <HAL_DMA2D_PollForTransfer+0x108>
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	06d1      	lsls	r1, r2, #27
 80041fc:	d4c3      	bmi.n	8004186 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004202:	9a01      	ldr	r2, [sp, #4]
 8004204:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8004208:	d0f6      	beq.n	80041f8 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800420a:	9a01      	ldr	r2, [sp, #4]
 800420c:	0716      	lsls	r6, r2, #28
 800420e:	d503      	bpl.n	8004218 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004210:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004212:	f042 0204 	orr.w	r2, r2, #4
 8004216:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004218:	9a01      	ldr	r2, [sp, #4]
 800421a:	0695      	lsls	r5, r2, #26
 800421c:	d503      	bpl.n	8004226 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800421e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004220:	f042 0202 	orr.w	r2, r2, #2
 8004224:	6662      	str	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004226:	9a01      	ldr	r2, [sp, #4]
 8004228:	07d0      	lsls	r0, r2, #31
 800422a:	d503      	bpl.n	8004234 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800422c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	6662      	str	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004234:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004236:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004238:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800423a:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
        return HAL_ERROR;
 800423e:	e7cf      	b.n	80041e0 <HAL_DMA2D_PollForTransfer+0x78>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004240:	f7ff fe3c 	bl	8003ebc <HAL_GetTick>
 8004244:	1b80      	subs	r0, r0, r6
 8004246:	42a8      	cmp	r0, r5
 8004248:	d81c      	bhi.n	8004284 <HAL_DMA2D_PollForTransfer+0x11c>
 800424a:	b1dd      	cbz	r5, 8004284 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	0790      	lsls	r0, r2, #30
 8004252:	d493      	bmi.n	800417c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004258:	9a01      	ldr	r2, [sp, #4]
 800425a:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800425e:	d0ef      	beq.n	8004240 <HAL_DMA2D_PollForTransfer+0xd8>
 8004260:	e7ab      	b.n	80041ba <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7ff fe2b 	bl	8003ebc <HAL_GetTick>
 8004266:	1b80      	subs	r0, r0, r6
 8004268:	42a8      	cmp	r0, r5
 800426a:	d80b      	bhi.n	8004284 <HAL_DMA2D_PollForTransfer+0x11c>
 800426c:	b155      	cbz	r5, 8004284 <HAL_DMA2D_PollForTransfer+0x11c>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	06d2      	lsls	r2, r2, #27
 8004274:	d487      	bmi.n	8004186 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800427a:	9a01      	ldr	r2, [sp, #4]
 800427c:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8004280:	d0ef      	beq.n	8004262 <HAL_DMA2D_PollForTransfer+0xfa>
 8004282:	e7c2      	b.n	800420a <HAL_DMA2D_PollForTransfer+0xa2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004284:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004286:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 8004288:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800428a:	f043 0320 	orr.w	r3, r3, #32
 800428e:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004290:	f884 2061 	strb.w	r2, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
 8004294:	e77d      	b.n	8004192 <HAL_DMA2D_PollForTransfer+0x2a>
 8004296:	bf00      	nop

08004298 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8004298:	f890 2060 	ldrb.w	r2, [r0, #96]	@ 0x60
 800429c:	2a01      	cmp	r2, #1
 800429e:	d05f      	beq.n	8004360 <HAL_DMA2D_ConfigLayer+0xc8>
 80042a0:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80042a2:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042a6:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80042a8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80042ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 80042b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80042b2:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
 80042b8:	f883 4060 	strb.w	r4, [r3, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80042bc:	6b82      	ldr	r2, [r0, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80042be:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80042c0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80042c2:	0512      	lsls	r2, r2, #20
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80042c4:	6b46      	ldr	r6, [r0, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80042c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042ca:	f1a5 0e09 	sub.w	lr, r5, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80042ce:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80042d0:	432a      	orrs	r2, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042d2:	f1be 0f01 	cmp.w	lr, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80042d6:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042da:	681c      	ldr	r4, [r3, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042dc:	d923      	bls.n	8004326 <HAL_DMA2D_ConfigLayer+0x8e>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80042de:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80042e2:	b971      	cbnz	r1, 8004302 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042e4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80042e6:	491f      	ldr	r1, [pc, #124]	@ (8004364 <HAL_DMA2D_ConfigLayer+0xcc>)
 80042e8:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80042ea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042ec:	4311      	orrs	r1, r2
 80042ee:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80042f0:	61a0      	str	r0, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 80042f2:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042f4:	2101      	movs	r1, #1
  return HAL_OK;
 80042f6:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042f8:	f883 1061 	strb.w	r1, [r3, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
 80042fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8004300:	bd70      	pop	{r4, r5, r6, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004302:	2d0b      	cmp	r5, #11
 8004304:	d12a      	bne.n	800435c <HAL_DMA2D_ConfigLayer+0xc4>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004306:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8004308:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
 800430c:	4816      	ldr	r0, [pc, #88]	@ (8004368 <HAL_DMA2D_ConfigLayer+0xd0>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800430e:	ebac 0c01 	sub.w	ip, ip, r1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004312:	69e1      	ldr	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004314:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004318:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800431a:	f8dc 5028 	ldr.w	r5, [ip, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800431e:	430a      	orrs	r2, r1
 8004320:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004322:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004324:	e7e5      	b.n	80042f2 <HAL_DMA2D_ConfigLayer+0x5a>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004326:	f006 457f 	and.w	r5, r6, #4278190080	@ 0xff000000
 800432a:	432a      	orrs	r2, r5
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800432c:	b959      	cbnz	r1, 8004346 <HAL_DMA2D_ConfigLayer+0xae>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800432e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004330:	490c      	ldr	r1, [pc, #48]	@ (8004364 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004332:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004334:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004336:	6b58      	ldr	r0, [r3, #52]	@ 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004338:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800433a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800433e:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004340:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004342:	62a0      	str	r0, [r4, #40]	@ 0x28
 8004344:	e7d5      	b.n	80042f2 <HAL_DMA2D_ConfigLayer+0x5a>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004346:	69e5      	ldr	r5, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004348:	f026 467f 	bic.w	r6, r6, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800434c:	4905      	ldr	r1, [pc, #20]	@ (8004364 <HAL_DMA2D_ConfigLayer+0xcc>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800434e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004350:	4029      	ands	r1, r5
 8004352:	4311      	orrs	r1, r2
 8004354:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004356:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004358:	6226      	str	r6, [r4, #32]
 800435a:	e7ca      	b.n	80042f2 <HAL_DMA2D_ConfigLayer+0x5a>
 800435c:	4801      	ldr	r0, [pc, #4]	@ (8004364 <HAL_DMA2D_ConfigLayer+0xcc>)
 800435e:	e7d6      	b.n	800430e <HAL_DMA2D_ConfigLayer+0x76>
  __HAL_LOCK(hdma2d);
 8004360:	2002      	movs	r0, #2
}
 8004362:	4770      	bx	lr
 8004364:	00ccfff0 	.word	0x00ccfff0
 8004368:	00c0fff0 	.word	0x00c0fff0

0800436c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004370:	680c      	ldr	r4, [r1, #0]
{
 8004372:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004374:	2c00      	cmp	r4, #0
 8004376:	f000 80a5 	beq.w	80044c4 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 800437a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800437c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004380:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004384:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004386:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800438a:	ea1c 0a04 	ands.w	sl, ip, r4
 800438e:	f000 8094 	beq.w	80044ba <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004392:	9900      	ldr	r1, [sp, #0]
 8004394:	005f      	lsls	r7, r3, #1
 8004396:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004398:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800439a:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800439e:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043a2:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043a6:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043a8:	f1b8 0f01 	cmp.w	r8, #1
 80043ac:	f240 808d 	bls.w	80044ca <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b0:	2a03      	cmp	r2, #3
 80043b2:	f040 80cb 	bne.w	800454c <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80043b8:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043ba:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043be:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c2:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 80043c6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043c8:	d077      	beq.n	80044ba <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ca:	4e7f      	ldr	r6, [pc, #508]	@ (80045c8 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043cc:	f003 0703 	and.w	r7, r3, #3
 80043d0:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043d6:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d8:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043dc:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043e0:	497a      	ldr	r1, [pc, #488]	@ (80045cc <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e2:	f8c6 2154 	str.w	r2, [r6, #340]	@ 0x154
 80043e6:	f8d6 2154 	ldr.w	r2, [r6, #340]	@ 0x154
 80043ea:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043ee:	4288      	cmp	r0, r1
 80043f0:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f4:	f002 0202 	and.w	r2, r2, #2
 80043f8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80043fc:	9203      	str	r2, [sp, #12]
 80043fe:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004400:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004402:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004406:	d031      	beq.n	800446c <HAL_GPIO_Init+0x100>
 8004408:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800440c:	4288      	cmp	r0, r1
 800440e:	f000 80b0 	beq.w	8004572 <HAL_GPIO_Init+0x206>
 8004412:	496f      	ldr	r1, [pc, #444]	@ (80045d0 <HAL_GPIO_Init+0x264>)
 8004414:	4288      	cmp	r0, r1
 8004416:	f000 80b2 	beq.w	800457e <HAL_GPIO_Init+0x212>
 800441a:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 80045d4 <HAL_GPIO_Init+0x268>
 800441e:	4560      	cmp	r0, ip
 8004420:	f000 80a1 	beq.w	8004566 <HAL_GPIO_Init+0x1fa>
 8004424:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 80045d8 <HAL_GPIO_Init+0x26c>
 8004428:	4560      	cmp	r0, ip
 800442a:	f000 80b4 	beq.w	8004596 <HAL_GPIO_Init+0x22a>
 800442e:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 80045dc <HAL_GPIO_Init+0x270>
 8004432:	4560      	cmp	r0, ip
 8004434:	f000 80b5 	beq.w	80045a2 <HAL_GPIO_Init+0x236>
 8004438:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 80045e0 <HAL_GPIO_Init+0x274>
 800443c:	4560      	cmp	r0, ip
 800443e:	f000 80a4 	beq.w	800458a <HAL_GPIO_Init+0x21e>
 8004442:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80045e4 <HAL_GPIO_Init+0x278>
 8004446:	4560      	cmp	r0, ip
 8004448:	f000 80b1 	beq.w	80045ae <HAL_GPIO_Init+0x242>
 800444c:	f8df c198 	ldr.w	ip, [pc, #408]	@ 80045e8 <HAL_GPIO_Init+0x27c>
 8004450:	4560      	cmp	r0, ip
 8004452:	f000 80b2 	beq.w	80045ba <HAL_GPIO_Init+0x24e>
 8004456:	f8df c194 	ldr.w	ip, [pc, #404]	@ 80045ec <HAL_GPIO_Init+0x280>
 800445a:	4560      	cmp	r0, ip
 800445c:	bf0c      	ite	eq
 800445e:	f04f 0c09 	moveq.w	ip, #9
 8004462:	f04f 0c0a 	movne.w	ip, #10
 8004466:	fa0c f707 	lsl.w	r7, ip, r7
 800446a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800446c:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446e:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8004470:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8004474:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8004478:	bf4c      	ite	mi
 800447a:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 800447e:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004480:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8004482:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8004486:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800448a:	bf54      	ite	pl
 800448c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800448e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004492:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8004494:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004498:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800449c:	bf54      	ite	pl
 800449e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80044a0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044a4:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80044a6:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80044aa:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80044ae:	bf54      	ite	pl
 80044b0:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80044b2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044b6:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 80044ba:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044bc:	fa34 f203 	lsrs.w	r2, r4, r3
 80044c0:	f47f af61 	bne.w	8004386 <HAL_GPIO_Init+0x1a>
  }
}
 80044c4:	b005      	add	sp, #20
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ca:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044cc:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 80044ce:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d2:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044d4:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d8:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044dc:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044de:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e2:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 80044e4:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e8:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 80044ec:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f0:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044f4:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f8:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 80044fc:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004500:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8004504:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004508:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8004510:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004514:	f47f af4f 	bne.w	80043b6 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004518:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800451c:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 800451e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004522:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004526:	6909      	ldr	r1, [r1, #16]
 8004528:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800452c:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8004530:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004534:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004536:	210f      	movs	r1, #15
 8004538:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800453c:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800453e:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004542:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8004546:	f8c8 c020 	str.w	ip, [r8, #32]
 800454a:	e734      	b.n	80043b6 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454c:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 800454e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004552:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004554:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004558:	fa01 fc07 	lsl.w	ip, r1, r7
 800455c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8004560:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004564:	e727      	b.n	80043b6 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004566:	f04f 0c03 	mov.w	ip, #3
 800456a:	fa0c f707 	lsl.w	r7, ip, r7
 800456e:	433a      	orrs	r2, r7
 8004570:	e77c      	b.n	800446c <HAL_GPIO_Init+0x100>
 8004572:	f04f 0c01 	mov.w	ip, #1
 8004576:	fa0c f707 	lsl.w	r7, ip, r7
 800457a:	433a      	orrs	r2, r7
 800457c:	e776      	b.n	800446c <HAL_GPIO_Init+0x100>
 800457e:	f04f 0c02 	mov.w	ip, #2
 8004582:	fa0c f707 	lsl.w	r7, ip, r7
 8004586:	433a      	orrs	r2, r7
 8004588:	e770      	b.n	800446c <HAL_GPIO_Init+0x100>
 800458a:	f04f 0c06 	mov.w	ip, #6
 800458e:	fa0c f707 	lsl.w	r7, ip, r7
 8004592:	433a      	orrs	r2, r7
 8004594:	e76a      	b.n	800446c <HAL_GPIO_Init+0x100>
 8004596:	f04f 0c04 	mov.w	ip, #4
 800459a:	fa0c f707 	lsl.w	r7, ip, r7
 800459e:	433a      	orrs	r2, r7
 80045a0:	e764      	b.n	800446c <HAL_GPIO_Init+0x100>
 80045a2:	f04f 0c05 	mov.w	ip, #5
 80045a6:	fa0c f707 	lsl.w	r7, ip, r7
 80045aa:	433a      	orrs	r2, r7
 80045ac:	e75e      	b.n	800446c <HAL_GPIO_Init+0x100>
 80045ae:	f04f 0c07 	mov.w	ip, #7
 80045b2:	fa0c f707 	lsl.w	r7, ip, r7
 80045b6:	433a      	orrs	r2, r7
 80045b8:	e758      	b.n	800446c <HAL_GPIO_Init+0x100>
 80045ba:	f04f 0c08 	mov.w	ip, #8
 80045be:	fa0c f707 	lsl.w	r7, ip, r7
 80045c2:	433a      	orrs	r2, r7
 80045c4:	e752      	b.n	800446c <HAL_GPIO_Init+0x100>
 80045c6:	bf00      	nop
 80045c8:	58024400 	.word	0x58024400
 80045cc:	58020000 	.word	0x58020000
 80045d0:	58020800 	.word	0x58020800
 80045d4:	58020c00 	.word	0x58020c00
 80045d8:	58021000 	.word	0x58021000
 80045dc:	58021400 	.word	0x58021400
 80045e0:	58021800 	.word	0x58021800
 80045e4:	58021c00 	.word	0x58021c00
 80045e8:	58022000 	.word	0x58022000
 80045ec:	58022400 	.word	0x58022400

080045f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80045f0:	6903      	ldr	r3, [r0, #16]
 80045f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80045f4:	bf14      	ite	ne
 80045f6:	2001      	movne	r0, #1
 80045f8:	2000      	moveq	r0, #0
 80045fa:	4770      	bx	lr

080045fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045fc:	b902      	cbnz	r2, 8004600 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045fe:	0409      	lsls	r1, r1, #16
 8004600:	6181      	str	r1, [r0, #24]
  }
}
 8004602:	4770      	bx	lr

08004604 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004608:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800460c:	4201      	tst	r1, r0
 800460e:	d100      	bne.n	8004612 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8004610:	4770      	bx	lr
{
 8004612:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004614:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004618:	f7ff f924 	bl	8003864 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800461c:	bd08      	pop	{r3, pc}
 800461e:	bf00      	nop

08004620 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004624:	4699      	mov	r9, r3
 8004626:	4680      	mov	r8, r0
 8004628:	460d      	mov	r5, r1
 800462a:	4614      	mov	r4, r2

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800462c:	7803      	ldrb	r3, [r0, #0]
 800462e:	2601      	movs	r6, #1
  p = 0;
 8004630:	2700      	movs	r7, #0
 8004632:	e005      	b.n	8004640 <JPEG_Bits_To_SizeCodes+0x20>
    i = (uint32_t)Bits[l];
 8004634:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    if ((p + i) > 256UL)
 8004638:	19da      	adds	r2, r3, r7
 800463a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800463e:	d83a      	bhi.n	80046b6 <JPEG_Bits_To_SizeCodes+0x96>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004640:	19e8      	adds	r0, r5, r7
 8004642:	461a      	mov	r2, r3
 8004644:	4631      	mov	r1, r6
    while (i != 0UL)
 8004646:	b113      	cbz	r3, 800464e <JPEG_Bits_To_SizeCodes+0x2e>
      p++;
 8004648:	441f      	add	r7, r3
      Huffsize[p] = (uint8_t) l + 1U;
 800464a:	f008 fab1 	bl	800cbb0 <memset>
  for (l = 0; l < 16UL; l++)
 800464e:	2e10      	cmp	r6, #16
    if ((p + i) > 256UL)
 8004650:	f106 0601 	add.w	r6, r6, #1
  for (l = 0; l < 16UL; l++)
 8004654:	d1ee      	bne.n	8004634 <JPEG_Bits_To_SizeCodes+0x14>
      i--;
    }
  }
  Huffsize[p] = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	55eb      	strb	r3, [r5, r7]
  *LastK = p;
 800465a:	f8c9 7000 	str.w	r7, [r9]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
 800465e:	7829      	ldrb	r1, [r5, #0]
 8004660:	460a      	mov	r2, r1
  p = 0;
  while (Huffsize[p] != 0U)
 8004662:	b329      	cbz	r1, 80046b0 <JPEG_Bits_To_SizeCodes+0x90>
  code = 0;
 8004664:	4699      	mov	r9, r3
 8004666:	f06f 4840 	mvn.w	r8, #3221225472	@ 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800466a:	2701      	movs	r7, #1
  p = 0;
 800466c:	461e      	mov	r6, r3
    while (((uint32_t) Huffsize[p]) == si)
 800466e:	4291      	cmp	r1, r2
 8004670:	d124      	bne.n	80046bc <JPEG_Bits_To_SizeCodes+0x9c>
 8004672:	eb06 0008 	add.w	r0, r6, r8
 8004676:	eb05 0c06 	add.w	ip, r5, r6
 800467a:	464b      	mov	r3, r9
 800467c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      Huffcode[p] = code;
 8004680:	f840 3f04 	str.w	r3, [r0, #4]!
      code++;
 8004684:	4619      	mov	r1, r3
    while (((uint32_t) Huffsize[p]) == si)
 8004686:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
 800468a:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800468c:	4596      	cmp	lr, r2
 800468e:	d0f7      	beq.n	8004680 <JPEG_Bits_To_SizeCodes+0x60>
 8004690:	3601      	adds	r6, #1
 8004692:	eba6 0609 	sub.w	r6, r6, r9
      p++;
 8004696:	440e      	add	r6, r1
    if(si > 31UL)
 8004698:	2a1f      	cmp	r2, #31
 800469a:	d80c      	bhi.n	80046b6 <JPEG_Bits_To_SizeCodes+0x96>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800469c:	fa07 f102 	lsl.w	r1, r7, r2
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d908      	bls.n	80046b6 <JPEG_Bits_To_SizeCodes+0x96>
  while (Huffsize[p] != 0U)
 80046a4:	5da9      	ldrb	r1, [r5, r6]
    {
      return HAL_ERROR;
    }
    code <<= 1;
 80046a6:	ea4f 0943 	mov.w	r9, r3, lsl #1
    si++;
 80046aa:	3201      	adds	r2, #1
  while (Huffsize[p] != 0U)
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d1de      	bne.n	800466e <JPEG_Bits_To_SizeCodes+0x4e>
  }
  /* Return function status */
  return HAL_OK;
 80046b0:	2000      	movs	r0, #0
}
 80046b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80046b6:	2001      	movs	r0, #1
}
 80046b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (((uint32_t) Huffsize[p]) == si)
 80046bc:	464b      	mov	r3, r9
 80046be:	e7eb      	b.n	8004698 <JPEG_Bits_To_SizeCodes+0x78>

080046c0 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 80046c6:	460d      	mov	r5, r1
 80046c8:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80046ca:	ab01      	add	r3, sp, #4
 80046cc:	aa43      	add	r2, sp, #268	@ 0x10c
 80046ce:	a902      	add	r1, sp, #8
 80046d0:	f7ff ffa6 	bl	8004620 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80046d4:	b9d0      	cbnz	r0, 800470c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 80046d6:	9f01      	ldr	r7, [sp, #4]
 80046d8:	b1c7      	cbz	r7, 800470c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
 80046da:	370f      	adds	r7, #15
 80046dc:	f50d 7e86 	add.w	lr, sp, #268	@ 0x10c
 80046e0:	a902      	add	r1, sp, #8
 80046e2:	f104 0c0f 	add.w	ip, r4, #15
 80046e6:	4427      	add	r7, r4
 80046e8:	e009      	b.n	80046fe <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80046ea:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
 80046ee:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80046f0:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80046f4:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80046f8:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80046fa:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
 80046fc:	d006      	beq.n	800470c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
 80046fe:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004702:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8004704:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8004708:	d9ef      	bls.n	80046ea <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800470a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800470c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8004710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004712:	bf00      	nop

08004714 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004718:	6804      	ldr	r4, [r0, #0]
{
 800471a:	b093      	sub	sp, #76	@ 0x4c
 800471c:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800471e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8004722:	429a      	cmp	r2, r3
 8004724:	f000 809d 	beq.w	8004862 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004728:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800472c:	429a      	cmp	r2, r3
 800472e:	d003      	beq.n	8004738 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8004730:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8004732:	b013      	add	sp, #76	@ 0x4c
 8004734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004738:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800473c:	a903      	add	r1, sp, #12
 800473e:	f7ff ffbf 	bl	80046c0 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8004742:	2800      	cmp	r0, #0
 8004744:	d1f5      	bne.n	8004732 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
 8004746:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800474a:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800474e:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
 8004752:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004754:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
 8004758:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800475a:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800475e:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004762:	f40a 6a70 	and.w	sl, sl, #3840	@ 0xf00
 8004766:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800476a:	f40e 6e70 	and.w	lr, lr, #3840	@ 0xf00
 800476e:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004770:	f89d 9015 	ldrb.w	r9, [sp, #21]
 8004774:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004778:	f89d c014 	ldrb.w	ip, [sp, #20]
 800477c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004780:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004784:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004788:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800478c:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800478e:	f409 6970 	and.w	r9, r9, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004792:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8004796:	f40c 6c70 	and.w	ip, ip, #3840	@ 0xf00
 800479a:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800479e:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047a2:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047a6:	f89d 7011 	ldrb.w	r7, [sp, #17]
 80047aa:	f408 6870 	and.w	r8, r8, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047ae:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
 80047b0:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047b4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80047b8:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047bc:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
 80047be:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047c2:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047c4:	f89d e03c 	ldrb.w	lr, [sp, #60]	@ 0x3c
 80047c8:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047cc:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047d0:	f89d 600f 	ldrb.w	r6, [sp, #15]
 80047d4:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047d8:	f89d e038 	ldrb.w	lr, [sp, #56]	@ 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047dc:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047e4:	f89d 500d 	ldrb.w	r5, [sp, #13]
 80047e8:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047ec:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
 80047f0:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047f4:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
 80047f6:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047fa:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80047fe:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 8004802:	f405 6570 	and.w	r5, r5, #3840	@ 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004806:	f40b 6b70 	and.w	fp, fp, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800480a:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800480e:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 8004812:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
 8004816:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800481a:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800481e:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8004822:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004824:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8004828:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
 800482a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800482e:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004832:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8004836:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004838:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800483c:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
 800483e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004842:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004846:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800484a:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800484c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004850:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
 8004854:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004858:	f844 3c18 	str.w	r3, [r4, #-24]
}
 800485c:	b013      	add	sp, #76	@ 0x4c
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004862:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
  if (HuffTableDC != NULL)
 8004866:	e769      	b.n	800473c <JPEG_Set_HuffDC_Mem+0x28>

08004868 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800486c:	6804      	ldr	r4, [r0, #0]
{
 800486e:	f6ad 0d3c 	subw	sp, sp, #2108	@ 0x83c
 8004872:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004874:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8004878:	429a      	cmp	r2, r3
 800487a:	d041      	beq.n	8004900 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800487c:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8004880:	429a      	cmp	r2, r3
 8004882:	d004      	beq.n	800488e <JPEG_Set_HuffAC_Mem+0x26>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
 8004884:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8004886:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 800488a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800488e:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004892:	4628      	mov	r0, r5
 8004894:	466b      	mov	r3, sp
 8004896:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800489a:	a901      	add	r1, sp, #4
 800489c:	f7ff fec0 	bl	8004620 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d1f0      	bne.n	8004886 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
 80048a4:	9b00      	ldr	r3, [sp, #0]
 80048a6:	b373      	cbz	r3, 8004906 <JPEG_Set_HuffAC_Mem+0x9e>
 80048a8:	330f      	adds	r3, #15
 80048aa:	f20d 4c34 	addw	ip, sp, #1076	@ 0x434
 80048ae:	af01      	add	r7, sp, #4
 80048b0:	f105 020f 	add.w	r2, r5, #15
 80048b4:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80048b8:	ae42      	add	r6, sp, #264	@ 0x108
 80048ba:	e011      	b.n	80048e0 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
 80048bc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80048c0:	2ba1      	cmp	r3, #161	@ 0xa1
 80048c2:	d8df      	bhi.n	8004884 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80048c4:	f817 5b01 	ldrb.w	r5, [r7], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80048c8:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 80048cc:	f85c 1b04 	ldr.w	r1, [ip], #4
  while (k < lastK)
 80048d0:	4572      	cmp	r2, lr
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80048d2:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80048d6:	46b1      	mov	r9, r6
 80048d8:	f8c8 10a4 	str.w	r1, [r8, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80048dc:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
 80048de:	d014      	beq.n	800490a <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
 80048e0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
 80048e4:	23a0      	movs	r3, #160	@ 0xa0
    if (l == 0UL)
 80048e6:	2900      	cmp	r1, #0
 80048e8:	d0ec      	beq.n	80048c4 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
 80048ea:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
 80048ec:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80048f0:	29f0      	cmp	r1, #240	@ 0xf0
      l = (msb * 10UL) + lsb - 1UL;
 80048f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80048f6:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80048fa:	d1df      	bne.n	80048bc <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
 80048fc:	23a1      	movs	r3, #161	@ 0xa1
 80048fe:	e7e1      	b.n	80048c4 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004900:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  if (HuffTableAC != NULL)
 8004904:	e7c5      	b.n	8004892 <JPEG_Set_HuffAC_Mem+0x2a>
 8004906:	f50d 7984 	add.w	r9, sp, #264	@ 0x108
      *addressDef = 0x0FFF0FFF;
 800490a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
    *addressDef = 0x0FD10FD0;
 800490e:	4a1a      	ldr	r2, [pc, #104]	@ (8004978 <JPEG_Set_HuffAC_Mem+0x110>)
 8004910:	eba9 0c89 	sub.w	ip, r9, r9, lsl #2
 8004914:	4649      	mov	r1, r9
      *addressDef = 0x0FFF0FFF;
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	f10d 0566 	add.w	r5, sp, #102	@ 0x66
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	f50c 7e4a 	add.w	lr, ip, #808	@ 0x328
 8004922:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
 8004924:	f103 33d3 	add.w	r3, r3, #3553874899	@ 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
 8004928:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800492a:	f50c 7c49 	add.w	ip, ip, #804	@ 0x324
 800492e:	f103 232c 	add.w	r3, r3, #738208768	@ 0x2c002c00
 8004932:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8004934:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8004938:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800493a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800493e:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004940:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004944:	f891 30a0 	ldrb.w	r3, [r1, #160]	@ 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004948:	0212      	lsls	r2, r2, #8
 800494a:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004954:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    while (i > 1UL)
 8004958:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800495a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800495e:	433a      	orrs	r2, r7
    while (i > 1UL)
 8004960:	42a9      	cmp	r1, r5
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004962:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
 8004966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800496a:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800496e:	d1e7      	bne.n	8004940 <JPEG_Set_HuffAC_Mem+0xd8>
}
 8004970:	f60d 0d3c 	addw	sp, sp, #2108	@ 0x83c
 8004974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004978:	0fd10fd0 	.word	0x0fd10fd0

0800497c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800497c:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800497e:	6803      	ldr	r3, [r0, #0]
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8004980:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004984:	6542      	str	r2, [r0, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8004986:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8004988:	f002 0203 	and.w	r2, r2, #3
 800498c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	bf0c      	ite	eq
 8004992:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8004996:	f022 0208 	bicne.w	r2, r2, #8
 800499a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80049a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049a6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80049ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80049b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80049bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049be:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80049c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80049cc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80049ce:	f002 020c 	and.w	r2, r2, #12
 80049d2:	2a08      	cmp	r2, #8
 80049d4:	d00a      	beq.n	80049ec <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80049d6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80049d8:	f002 020c 	and.w	r2, r2, #12
 80049dc:	2a0c      	cmp	r2, #12
 80049de:	d000      	beq.n	80049e2 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049e0:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80049e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049ea:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80049ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ee:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop

080049f8 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80049f8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80049fa:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80049fe:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
{
 8004a00:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8004a02:	42aa      	cmp	r2, r5
 8004a04:	d32a      	bcc.n	8004a5c <JPEG_DMA_StartProcess+0x64>
 8004a06:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8004a08:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8004a0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8004a0c:	6a86      	ldr	r6, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8004a0e:	42b3      	cmp	r3, r6
 8004a10:	d324      	bcc.n	8004a5c <JPEG_DMA_StartProcess+0x64>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8004a12:	4f19      	ldr	r7, [pc, #100]	@ (8004a78 <JPEG_DMA_StartProcess+0x80>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8004a14:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8004a84 <JPEG_DMA_StartProcess+0x8c>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8004a18:	654f      	str	r7, [r1, #84]	@ 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8004a1a:	f8c1 c044 	str.w	ip, [r1, #68]	@ 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8004a1e:	4917      	ldr	r1, [pc, #92]	@ (8004a7c <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8004a20:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8004a22:	6441      	str	r1, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8004a24:	4916      	ldr	r1, [pc, #88]	@ (8004a80 <JPEG_DMA_StartProcess+0x88>)
 8004a26:	6581      	str	r1, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8004a28:	b1a5      	cbz	r5, 8004a54 <JPEG_DMA_StartProcess+0x5c>
 8004a2a:	b19e      	cbz	r6, 8004a54 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004a2c:	fbb2 f1f5 	udiv	r1, r2, r5
 8004a30:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004a34:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004a36:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004a38:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004a3a:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004a3c:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8004a3e:	fbb3 f2f6 	udiv	r2, r3, r6
 8004a42:	fb06 3212 	mls	r2, r6, r2, r3
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004a4a:	9500      	str	r5, [sp, #0]
 8004a4c:	69e2      	ldr	r2, [r4, #28]
 8004a4e:	f001 f915 	bl	8005c7c <HAL_MDMA_Start_IT>
 8004a52:	b130      	cbz	r0, 8004a62 <JPEG_DMA_StartProcess+0x6a>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004a54:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004a56:	f043 0304 	orr.w	r3, r3, #4
 8004a5a:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8004a5c:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004a5e:	b003      	add	sp, #12
 8004a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004a62:	6822      	ldr	r2, [r4, #0]
 8004a64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a66:	69a1      	ldr	r1, [r4, #24]
 8004a68:	3240      	adds	r2, #64	@ 0x40
 8004a6a:	9500      	str	r5, [sp, #0]
 8004a6c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004a6e:	f001 f905 	bl	8005c7c <HAL_MDMA_Start_IT>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d0f3      	beq.n	8004a5e <JPEG_DMA_StartProcess+0x66>
 8004a76:	e7ed      	b.n	8004a54 <JPEG_DMA_StartProcess+0x5c>
 8004a78:	08004f29 	.word	0x08004f29
 8004a7c:	080050b1 	.word	0x080050b1
 8004a80:	08005131 	.word	0x08005131
 8004a84:	08004f55 	.word	0x08004f55

08004a88 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8004a88:	6803      	ldr	r3, [r0, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	f002 0203 	and.w	r2, r2, #3
 8004a90:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
 8004a92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a96:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8004a98:	d018      	beq.n	8004acc <HAL_JPEG_GetInfo.part.0+0x44>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	f012 0203 	ands.w	r2, r2, #3
 8004aa0:	d10b      	bne.n	8004aba <HAL_JPEG_GetInfo.part.0+0x32>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004aa2:	6859      	ldr	r1, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004aa4:	f8c9 2000 	str.w	r2, [r9]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004aa8:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004aaa:	0c09      	lsrs	r1, r1, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004aac:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004aae:	f8c9 1008 	str.w	r1, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004ab2:	f8c9 200c 	str.w	r2, [r9, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	e02f      	b.n	8004b1a <HAL_JPEG_GetInfo.part.0+0x92>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	f002 0203 	and.w	r2, r2, #3
 8004ac0:	2a03      	cmp	r2, #3
 8004ac2:	f000 8097 	beq.w	8004bf4 <HAL_JPEG_GetInfo.part.0+0x16c>
    return HAL_ERROR;
 8004ac6:	2001      	movs	r0, #1
}
 8004ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004acc:	2110      	movs	r1, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004ace:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8004ad0:	f8c9 1000 	str.w	r1, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004ad4:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004ad6:	68d9      	ldr	r1, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8004ad8:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004adc:	0c09      	lsrs	r1, r1, #16
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004ade:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004ae0:	695c      	ldr	r4, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8004ae2:	f8c9 100c 	str.w	r1, [r9, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004ae6:	0916      	lsrs	r6, r2, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004ae8:	6999      	ldr	r1, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004aea:	f014 0ff0 	tst.w	r4, #240	@ 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8004aee:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8004af2:	ea4f 1714 	mov.w	r7, r4, lsr #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8004af6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004afa:	d105      	bne.n	8004b08 <HAL_JPEG_GetInfo.part.0+0x80>
 8004afc:	2a01      	cmp	r2, #1
 8004afe:	d103      	bne.n	8004b08 <HAL_JPEG_GetInfo.part.0+0x80>
 8004b00:	070d      	lsls	r5, r1, #28
 8004b02:	d1d8      	bne.n	8004ab6 <HAL_JPEG_GetInfo.part.0+0x2e>
 8004b04:	2102      	movs	r1, #2
 8004b06:	e008      	b.n	8004b1a <HAL_JPEG_GetInfo.part.0+0x92>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004b08:	433e      	orrs	r6, r7
 8004b0a:	0734      	lsls	r4, r6, #28
 8004b0c:	d0d3      	beq.n	8004ab6 <HAL_JPEG_GetInfo.part.0+0x2e>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8004b0e:	430f      	orrs	r7, r1
 8004b10:	0739      	lsls	r1, r7, #28
 8004b12:	d1d0      	bne.n	8004ab6 <HAL_JPEG_GetInfo.part.0+0x2e>
 8004b14:	2a03      	cmp	r2, #3
 8004b16:	d1ce      	bne.n	8004ab6 <HAL_JPEG_GetInfo.part.0+0x2e>
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4a42      	ldr	r2, [pc, #264]	@ (8004c24 <HAL_JPEG_GetInfo.part.0+0x19c>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004b1c:	f103 0c50 	add.w	ip, r3, #80	@ 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8004b20:	f8c9 1004 	str.w	r1, [r9, #4]
  uint32_t quality = 0;
 8004b24:	2600      	movs	r6, #0
 8004b26:	f102 0440 	add.w	r4, r2, #64	@ 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004b2a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8004b2e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004b32:	e033      	b.n	8004b9c <HAL_JPEG_GetInfo.part.0+0x114>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004b34:	f892 8001 	ldrb.w	r8, [r2, #1]
 8004b38:	fb0e f707 	mul.w	r7, lr, r7
 8004b3c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004b3e:	f815 8008 	ldrb.w	r8, [r5, r8]
 8004b42:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8004b46:	2f64      	cmp	r7, #100	@ 0x64
 8004b48:	d958      	bls.n	8004bfc <HAL_JPEG_GetInfo.part.0+0x174>
          quality += 5000UL / scale;
 8004b4a:	fbb1 f7f7 	udiv	r7, r1, r7
 8004b4e:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004b50:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
 8004b54:	2f01      	cmp	r7, #1
 8004b56:	d03d      	beq.n	8004bd4 <HAL_JPEG_GetInfo.part.0+0x14c>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004b58:	f892 8002 	ldrb.w	r8, [r2, #2]
 8004b5c:	fb0e f707 	mul.w	r7, lr, r7
 8004b60:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004b62:	f815 8008 	ldrb.w	r8, [r5, r8]
 8004b66:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8004b6a:	2f64      	cmp	r7, #100	@ 0x64
 8004b6c:	d955      	bls.n	8004c1a <HAL_JPEG_GetInfo.part.0+0x192>
          quality += 5000UL / scale;
 8004b6e:	fbb1 f7f7 	udiv	r7, r1, r7
 8004b72:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004b74:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d030      	beq.n	8004bdc <HAL_JPEG_GetInfo.part.0+0x154>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004b7a:	78d7      	ldrb	r7, [r2, #3]
 8004b7c:	fb0e f303 	mul.w	r3, lr, r3
 8004b80:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004b82:	5def      	ldrb	r7, [r5, r7]
 8004b84:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
 8004b88:	2b64      	cmp	r3, #100	@ 0x64
 8004b8a:	d93c      	bls.n	8004c06 <HAL_JPEG_GetInfo.part.0+0x17e>
          quality += 5000UL / scale;
 8004b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b90:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004b92:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
 8004b94:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004b98:	4294      	cmp	r4, r2
 8004b9a:	d025      	beq.n	8004be8 <HAL_JPEG_GetInfo.part.0+0x160>
    quantRow = *tableAddress;
 8004b9c:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004ba0:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
 8004ba2:	2f01      	cmp	r7, #1
 8004ba4:	d028      	beq.n	8004bf8 <HAL_JPEG_GetInfo.part.0+0x170>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004ba6:	f892 8000 	ldrb.w	r8, [r2]
 8004baa:	fb0e f707 	mul.w	r7, lr, r7
 8004bae:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8004bb0:	f815 8008 	ldrb.w	r8, [r5, r8]
 8004bb4:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
 8004bb8:	2f64      	cmp	r7, #100	@ 0x64
 8004bba:	d929      	bls.n	8004c10 <HAL_JPEG_GetInfo.part.0+0x188>
          quality += 5000UL / scale;
 8004bbc:	fbb1 f7f7 	udiv	r7, r1, r7
 8004bc0:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004bc2:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
 8004bc6:	2f01      	cmp	r7, #1
 8004bc8:	d1b4      	bne.n	8004b34 <HAL_JPEG_GetInfo.part.0+0xac>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004bca:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
 8004bce:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8004bd0:	2f01      	cmp	r7, #1
 8004bd2:	d1c1      	bne.n	8004b58 <HAL_JPEG_GetInfo.part.0+0xd0>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8004bd4:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
 8004bd6:	3664      	adds	r6, #100	@ 0x64
      if (quantVal == 1UL)
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d1ce      	bne.n	8004b7a <HAL_JPEG_GetInfo.part.0+0xf2>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004bdc:	3204      	adds	r2, #4
        quality += 100UL;
 8004bde:	3664      	adds	r6, #100	@ 0x64
    tableAddress ++;
 8004be0:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8004be4:	4294      	cmp	r4, r2
 8004be6:	d1d9      	bne.n	8004b9c <HAL_JPEG_GetInfo.part.0+0x114>
  }

  return (quality / 64UL);
 8004be8:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
 8004bea:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8004bec:	f8c9 6010 	str.w	r6, [r9, #16]
}
 8004bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bf4:	2130      	movs	r1, #48	@ 0x30
 8004bf6:	e76a      	b.n	8004ace <HAL_JPEG_GetInfo.part.0+0x46>
        quality += 100UL;
 8004bf8:	3664      	adds	r6, #100	@ 0x64
 8004bfa:	e7e2      	b.n	8004bc2 <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += (200UL - scale) / 2UL;
 8004bfc:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004c00:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004c04:	e7a4      	b.n	8004b50 <HAL_JPEG_GetInfo.part.0+0xc8>
 8004c06:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8004c0a:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 8004c0e:	e7c0      	b.n	8004b92 <HAL_JPEG_GetInfo.part.0+0x10a>
 8004c10:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004c14:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004c18:	e7d3      	b.n	8004bc2 <HAL_JPEG_GetInfo.part.0+0x13a>
 8004c1a:	f1c7 07c8 	rsb	r7, r7, #200	@ 0xc8
 8004c1e:	eb06 0657 	add.w	r6, r6, r7, lsr #1
 8004c22:	e7a7      	b.n	8004b74 <HAL_JPEG_GetInfo.part.0+0xec>
 8004c24:	0800d588 	.word	0x0800d588

08004c28 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 8107 	beq.w	8004e3c <HAL_JPEG_Init+0x214>
{
 8004c2e:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004c30:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8004c34:	4605      	mov	r5, r0
 8004c36:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80f9 	beq.w	8004e32 <HAL_JPEG_Init+0x20a>
  __HAL_JPEG_ENABLE(hjpeg);
 8004c40:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004c42:	2202      	movs	r2, #2
  hjpeg->QuantTable2 = NULL;
 8004c44:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004c46:	497e      	ldr	r1, [pc, #504]	@ (8004e40 <HAL_JPEG_Init+0x218>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004c48:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
 8004c4c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	6022      	str	r2, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004c5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004c5e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004c62:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004c64:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004c66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c6a:	6322      	str	r2, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004c6c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004c6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c72:	6322      	str	r2, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004c74:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004c76:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004c7a:	63a2      	str	r2, [r4, #56]	@ 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004c7c:	4a71      	ldr	r2, [pc, #452]	@ (8004e44 <HAL_JPEG_Init+0x21c>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004c7e:	63e9      	str	r1, [r5, #60]	@ 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004c80:	2101      	movs	r1, #1
  hjpeg->QuantTable2 = NULL;
 8004c82:	64ab      	str	r3, [r5, #72]	@ 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004c84:	e9c5 2310 	strd	r2, r3, [r5, #64]	@ 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004c88:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
 8004c8c:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8004c90:	4b6d      	ldr	r3, [pc, #436]	@ (8004e48 <HAL_JPEG_Init+0x220>)
 8004c92:	f8c4 1368 	str.w	r1, [r4, #872]	@ 0x368
 8004c96:	f8c4 2364 	str.w	r2, [r4, #868]	@ 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004c9a:	496c      	ldr	r1, [pc, #432]	@ (8004e4c <HAL_JPEG_Init+0x224>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004c9c:	f8c4 3360 	str.w	r3, [r4, #864]	@ 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e50 <HAL_JPEG_Init+0x228>)
 8004ca2:	f8c4 1378 	str.w	r1, [r4, #888]	@ 0x378
 8004ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8004e54 <HAL_JPEG_Init+0x22c>)
 8004ca8:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004cac:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <HAL_JPEG_Init+0x230>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004cae:	f8c4 2370 	str.w	r2, [r4, #880]	@ 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004cb2:	496a      	ldr	r1, [pc, #424]	@ (8004e5c <HAL_JPEG_Init+0x234>)
 8004cb4:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
 8004cb8:	4a69      	ldr	r2, [pc, #420]	@ (8004e60 <HAL_JPEG_Init+0x238>)
 8004cba:	4b6a      	ldr	r3, [pc, #424]	@ (8004e64 <HAL_JPEG_Init+0x23c>)
 8004cbc:	f8c4 1384 	str.w	r1, [r4, #900]	@ 0x384
 8004cc0:	f8c4 2380 	str.w	r2, [r4, #896]	@ 0x380
 8004cc4:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004cc8:	f64f 23f9 	movw	r3, #64249	@ 0xfaf9
  value = *address & 0xFFFF0000U;
 8004ccc:	f8d4 142c 	ldr.w	r1, [r4, #1068]	@ 0x42c
 8004cd0:	4a65      	ldr	r2, [pc, #404]	@ (8004e68 <HAL_JPEG_Init+0x240>)
 8004cd2:	400a      	ands	r2, r1
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004cd4:	f504 6185 	add.w	r1, r4, #1064	@ 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004cd8:	4313      	orrs	r3, r2
  *address = value;
 8004cda:	4a64      	ldr	r2, [pc, #400]	@ (8004e6c <HAL_JPEG_Init+0x244>)
 8004cdc:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
 8004ce0:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004ce4:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8004ce8:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004cea:	f892 e0b3 	ldrb.w	lr, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004cee:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004cf0:	f892 c0b0 	ldrb.w	ip, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004cf4:	f892 00b1 	ldrb.w	r0, [r2, #177]	@ 0xb1
  while (index > 3UL)
 8004cf8:	4296      	cmp	r6, r2
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004cfa:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004cfe:	ea43 030c 	orr.w	r3, r3, ip
 8004d02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004d06:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8004d0a:	d1eb      	bne.n	8004ce4 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
 8004d0c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d10:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
  value = *address & 0xFFFF0000U;
 8004d14:	4954      	ldr	r1, [pc, #336]	@ (8004e68 <HAL_JPEG_Init+0x240>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d16:	2001      	movs	r0, #1
  value = *address & 0x0000FFFFU;
 8004d18:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004d1a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8004d1e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8004d22:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8004d26:	400b      	ands	r3, r1
  *address = value;
 8004d28:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d2c:	f8c4 0438 	str.w	r0, [r4, #1080]	@ 0x438
 8004d30:	f8c4 2434 	str.w	r2, [r4, #1076]	@ 0x434
 8004d34:	f8c4 2430 	str.w	r2, [r4, #1072]	@ 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004d38:	f640 320a 	movw	r2, #2826	@ 0xb0a
  value = *address & 0x0000FFFFUL;
 8004d3c:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8004d40:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8004d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8004d46:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8004d4a:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8004d4e:	400b      	ands	r3, r1
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8004d50:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d52:	4b47      	ldr	r3, [pc, #284]	@ (8004e70 <HAL_JPEG_Init+0x248>)
  *address = value;
 8004d54:	f8c4 2448 	str.w	r2, [r4, #1096]	@ 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004d58:	f247 7202 	movw	r2, #30466	@ 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004d5c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8004d60:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8004d64:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8004d68:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8004d6c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8004d6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8004d72:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8004d76:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8004d7a:	400b      	ands	r3, r1
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d7c:	493d      	ldr	r1, [pc, #244]	@ (8004e74 <HAL_JPEG_Init+0x24c>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8004d7e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d80:	4b3d      	ldr	r3, [pc, #244]	@ (8004e78 <HAL_JPEG_Init+0x250>)
  *address = value;
 8004d82:	f8c4 2458 	str.w	r2, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d86:	4a3d      	ldr	r2, [pc, #244]	@ (8004e7c <HAL_JPEG_Init+0x254>)
 8004d88:	f8c4 1454 	str.w	r1, [r4, #1108]	@ 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
 8004d8c:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8004d90:	f8c4 2450 	str.w	r2, [r4, #1104]	@ 0x450
 8004d94:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8004d98:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004d9c:	4a38      	ldr	r2, [pc, #224]	@ (8004e80 <HAL_JPEG_Init+0x258>)
  value = *address & 0x0000FFFFUL;
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f1a2 06a0 	sub.w	r6, r2, #160	@ 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8004da4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8004da8:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004dac:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8004db0:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004db2:	f892 e0b5 	ldrb.w	lr, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8004db6:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8004db8:	f892 c0b2 	ldrb.w	ip, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004dbc:	f892 00b3 	ldrb.w	r0, [r2, #179]	@ 0xb3
  while (index > 3UL)
 8004dc0:	4296      	cmp	r6, r2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8004dc2:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8004dc6:	ea43 030c 	orr.w	r3, r3, ip
 8004dca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8004dce:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8004dd2:	d1eb      	bne.n	8004dac <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004dd4:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8004dd8:	4924      	ldr	r1, [pc, #144]	@ (8004e6c <HAL_JPEG_Init+0x244>)
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f7ff fd44 	bl	8004868 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8004de0:	b118      	cbz	r0, 8004dea <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004de2:	2301      	movs	r3, #1
    return HAL_ERROR;
 8004de4:	2001      	movs	r0, #1
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004de6:	652b      	str	r3, [r5, #80]	@ 0x50
}
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004dea:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8004dee:	4924      	ldr	r1, [pc, #144]	@ (8004e80 <HAL_JPEG_Init+0x258>)
 8004df0:	4628      	mov	r0, r5
 8004df2:	f7ff fd39 	bl	8004868 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d1f3      	bne.n	8004de2 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004dfa:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8004dfe:	4921      	ldr	r1, [pc, #132]	@ (8004e84 <HAL_JPEG_Init+0x25c>)
 8004e00:	4628      	mov	r0, r5
 8004e02:	f7ff fc87 	bl	8004714 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d1eb      	bne.n	8004de2 <HAL_JPEG_Init+0x1ba>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004e0a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8004e0e:	491e      	ldr	r1, [pc, #120]	@ (8004e88 <HAL_JPEG_Init+0x260>)
 8004e10:	4628      	mov	r0, r5
 8004e12:	f7ff fc7f 	bl	8004714 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d1e3      	bne.n	8004de2 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004e1a:	6863      	ldr	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004e1c:	2201      	movs	r2, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e22:	6063      	str	r3, [r4, #4]
  hjpeg->JpegInCount = 0;
 8004e24:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8004e26:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004e28:	f885 204d 	strb.w	r2, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004e2c:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8004e2e:	6568      	str	r0, [r5, #84]	@ 0x54
}
 8004e30:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
 8004e32:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8004e36:	f7fe fd73 	bl	8003920 <HAL_JPEG_MspInit>
 8004e3a:	e701      	b.n	8004c40 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
 8004e3c:	2001      	movs	r0, #1
}
 8004e3e:	4770      	bx	lr
 8004e40:	0800d548 	.word	0x0800d548
 8004e44:	0800d508 	.word	0x0800d508
 8004e48:	01050100 	.word	0x01050100
 8004e4c:	0b0a0908 	.word	0x0b0a0908
 8004e50:	07060504 	.word	0x07060504
 8004e54:	03020100 	.word	0x03020100
 8004e58:	7d010000 	.word	0x7d010000
 8004e5c:	04040505 	.word	0x04040505
 8004e60:	03040203 	.word	0x03040203
 8004e64:	03010200 	.word	0x03010200
 8004e68:	ffff0000 	.word	0xffff0000
 8004e6c:	0800d67c 	.word	0x0800d67c
 8004e70:	09080706 	.word	0x09080706
 8004e74:	01000404 	.word	0x01000404
 8004e78:	04040201 	.word	0x04040201
 8004e7c:	05070403 	.word	0x05070403
 8004e80:	0800d5c8 	.word	0x0800d5c8
 8004e84:	0800d74c 	.word	0x0800d74c
 8004e88:	0800d730 	.word	0x0800d730

08004e8c <HAL_JPEG_GetInfo>:
  if ((hjpeg == NULL) || (pInfo == NULL))
 8004e8c:	b110      	cbz	r0, 8004e94 <HAL_JPEG_GetInfo+0x8>
 8004e8e:	b109      	cbz	r1, 8004e94 <HAL_JPEG_GetInfo+0x8>
 8004e90:	f7ff bdfa 	b.w	8004a88 <HAL_JPEG_GetInfo.part.0>
}
 8004e94:	2001      	movs	r0, #1
 8004e96:	4770      	bx	lr

08004e98 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf18      	it	ne
 8004e9c:	2900      	cmpne	r1, #0
 8004e9e:	d036      	beq.n	8004f0e <HAL_JPEG_Decode_DMA+0x76>
{
 8004ea0:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004ea2:	fab0 f580 	clz	r5, r0
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	096d      	lsrs	r5, r5, #5
 8004eaa:	b370      	cbz	r0, 8004f0a <HAL_JPEG_Decode_DMA+0x72>
  __HAL_LOCK(hjpeg);
 8004eac:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 8004eb0:	f1bc 0f01 	cmp.w	ip, #1
 8004eb4:	d022      	beq.n	8004efc <HAL_JPEG_Decode_DMA+0x64>
 8004eb6:	f04f 0c01 	mov.w	ip, #1
 8004eba:	f880 c04c 	strb.w	ip, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8004ebe:	f890 c04d 	ldrb.w	ip, [r0, #77]	@ 0x4d
 8004ec2:	f1bc 0f01 	cmp.w	ip, #1
 8004ec6:	d117      	bne.n	8004ef8 <HAL_JPEG_Decode_DMA+0x60>
    hjpeg->InDataLength = InDataLength;
 8004ec8:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8004eca:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
 8004ece:	9b04      	ldr	r3, [sp, #16]
 8004ed0:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8004ed8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004eda:	f023 030f 	bic.w	r3, r3, #15
 8004ede:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8004ee0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004ee2:	f043 030e 	orr.w	r3, r3, #14
 8004ee6:	6543      	str	r3, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8004ee8:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
 8004eea:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8004eec:	f7ff fd46 	bl	800497c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8004ef0:	f7ff fd82 	bl	80049f8 <JPEG_DMA_StartProcess>
 8004ef4:	b920      	cbnz	r0, 8004f00 <HAL_JPEG_Decode_DMA+0x68>
}
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8004ef8:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8004efc:	2002      	movs	r0, #2
}
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004f00:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8004f02:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004f06:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8004f0a:	2001      	movs	r0, #1
}
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004f0e:	2001      	movs	r0, #1
}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop

08004f14 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8004f14:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8004f16:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop

08004f1c <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8004f1c:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8004f1e:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop

08004f24 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8004f28:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004f2a:	2101      	movs	r1, #1
{
 8004f2c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004f2e:	6803      	ldr	r3, [r0, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f3a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8004f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004f40:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004f44:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8004f4c:	f7fd fc6c 	bl	8002828 <HAL_JPEG_ErrorCallback>
}
 8004f50:	bd08      	pop	{r3, pc}
 8004f52:	bf00      	nop

08004f54 <JPEG_MDMAInCpltCallback>:
{
 8004f54:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8004f56:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8004f58:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 8004f5c:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f62:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8004f66:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8004f68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	d001      	beq.n	8004f74 <JPEG_MDMAInCpltCallback+0x20>
}
 8004f70:	b003      	add	sp, #12
 8004f72:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f74:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8004f76:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004f7a:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8004f7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f7e:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8004f82:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8004f88:	6a21      	ldr	r1, [r4, #32]
 8004f8a:	f7fd fc1b 	bl	80027c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8004f8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	d311      	bcc.n	8004fb8 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
 8004f94:	b305      	cbz	r5, 8004fd8 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004f96:	fbb3 f2f5 	udiv	r2, r3, r5
 8004f9a:	fb05 3212 	mls	r2, r5, r2, r3
 8004f9e:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8004fa2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004fa4:	04d1      	lsls	r1, r2, #19
 8004fa6:	d400      	bmi.n	8004faa <JPEG_MDMAInCpltCallback+0x56>
 8004fa8:	b963      	cbnz	r3, 8004fc4 <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004faa:	6822      	ldr	r2, [r4, #0]
 8004fac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004fae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004fb2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004fb4:	b003      	add	sp, #12
 8004fb6:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
 8004fb8:	b1cb      	cbz	r3, 8004fee <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8004fba:	0798      	lsls	r0, r3, #30
 8004fbc:	d119      	bne.n	8004ff2 <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004fbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fc0:	04d2      	lsls	r2, r2, #19
 8004fc2:	d4f2      	bmi.n	8004faa <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	2501      	movs	r5, #1
 8004fc8:	69a1      	ldr	r1, [r4, #24]
 8004fca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004fcc:	3240      	adds	r2, #64	@ 0x40
 8004fce:	9500      	str	r5, [sp, #0]
 8004fd0:	f000 fe54 	bl	8005c7c <HAL_MDMA_Start_IT>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d0e8      	beq.n	8004faa <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004fd8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004fda:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
 8004fdc:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004fde:	f043 0304 	orr.w	r3, r3, #4
 8004fe2:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004fe4:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8004fe8:	f7fd fc1e 	bl	8002828 <HAL_JPEG_ErrorCallback>
        return;
 8004fec:	e7c0      	b.n	8004f70 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8004fee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ff0:	e7db      	b.n	8004faa <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	e7d2      	b.n	8004fa0 <JPEG_MDMAInCpltCallback+0x4c>
 8004ffa:	bf00      	nop

08004ffc <JPEG_DMA_PollResidualData>:
{
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8004ffe:	6802      	ldr	r2, [r0, #0]
 8005000:	2610      	movs	r6, #16
{
 8005002:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005004:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8005006:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800500a:	d11d      	bne.n	8005048 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800500c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800500e:	06df      	lsls	r7, r3, #27
 8005010:	d51a      	bpl.n	8005048 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
 8005012:	6c53      	ldr	r3, [r2, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8005014:	69e7      	ldr	r7, [r4, #28]
 8005016:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005018:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800501a:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800501c:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800501e:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005020:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8005022:	69e2      	ldr	r2, [r4, #28]
 8005024:	443a      	add	r2, r7
 8005026:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8005028:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800502a:	69e2      	ldr	r2, [r4, #28]
 800502c:	4402      	add	r2, r0
 800502e:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8005030:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005032:	69e2      	ldr	r2, [r4, #28]
 8005034:	440a      	add	r2, r1
 8005036:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8005038:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800503a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        hjpeg->JpegOutCount += 4UL;
 800503c:	3304      	adds	r3, #4
 800503e:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005040:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005042:	4293      	cmp	r3, r2
 8005044:	d021      	beq.n	800508a <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8005046:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005048:	3e01      	subs	r6, #1
 800504a:	d1db      	bne.n	8005004 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
 800504c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800504e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8005050:	06d8      	lsls	r0, r3, #27
 8005052:	d501      	bpl.n	8005058 <JPEG_DMA_PollResidualData+0x5c>
 8005054:	048b      	lsls	r3, r1, #18
 8005056:	d417      	bmi.n	8005088 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005058:	6813      	ldr	r3, [r2, #0]
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8005060:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005062:	b9eb      	cbnz	r3, 80050a0 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
 8005064:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8005066:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800506a:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800506c:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8005070:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005074:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005078:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800507a:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800507c:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800507e:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005082:	d00a      	beq.n	800509a <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005084:	f7ff ff4e 	bl	8004f24 <HAL_JPEG_EncodeCpltCallback>
}
 8005088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800508a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800508c:	4620      	mov	r0, r4
 800508e:	69e1      	ldr	r1, [r4, #28]
 8005090:	f7fd fbbc 	bl	800280c <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8005094:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
 8005096:	6265      	str	r5, [r4, #36]	@ 0x24
 8005098:	e7d6      	b.n	8005048 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800509a:	f7fd fbc7 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
}
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80050a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80050a2:	4620      	mov	r0, r4
 80050a4:	69e1      	ldr	r1, [r4, #28]
 80050a6:	f7fd fbb1 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80050ae:	e7d9      	b.n	8005064 <JPEG_DMA_PollResidualData+0x68>

080050b0 <JPEG_MDMAOutCpltCallback>:
{
 80050b0:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80050b2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80050b4:	f248 010c 	movw	r1, #32780	@ 0x800c
{
 80050b8:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050be:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80050c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050c6:	400a      	ands	r2, r1
 80050c8:	2a0c      	cmp	r2, #12
 80050ca:	d001      	beq.n	80050d0 <JPEG_MDMAOutCpltCallback+0x20>
}
 80050cc:	b003      	add	sp, #12
 80050ce:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80050d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050d2:	0692      	lsls	r2, r2, #26
 80050d4:	d505      	bpl.n	80050e2 <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80050d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050d8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050de:	b003      	add	sp, #12
 80050e0:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80050e2:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80050e4:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80050e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80050e8:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80050ea:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80050ec:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80050f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80050f6:	f7fd fb89 	bl	800280c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80050fa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80050fc:	049b      	lsls	r3, r3, #18
 80050fe:	d501      	bpl.n	8005104 <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	e7e8      	b.n	80050d6 <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005104:	6821      	ldr	r1, [r4, #0]
 8005106:	2501      	movs	r5, #1
 8005108:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800510a:	69e2      	ldr	r2, [r4, #28]
 800510c:	3144      	adds	r1, #68	@ 0x44
 800510e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005110:	9500      	str	r5, [sp, #0]
 8005112:	f000 fdb3 	bl	8005c7c <HAL_MDMA_Start_IT>
 8005116:	2800      	cmp	r0, #0
 8005118:	d0f2      	beq.n	8005100 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800511a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800511c:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
 800511e:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005120:	f043 0304 	orr.w	r3, r3, #4
 8005124:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005126:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800512a:	f7fd fb7d 	bl	8002828 <HAL_JPEG_ErrorCallback>
          return;
 800512e:	e7cd      	b.n	80050cc <JPEG_MDMAOutCpltCallback+0x1c>

08005130 <JPEG_MDMAOutAbortCallback>:
{
 8005130:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8005132:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8005134:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005136:	041a      	lsls	r2, r3, #16
 8005138:	d400      	bmi.n	800513c <JPEG_MDMAOutAbortCallback+0xc>
}
 800513a:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800513c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800513e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800514c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800514e:	429a      	cmp	r2, r3
 8005150:	d025      	beq.n	800519e <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8005156:	f015 0510 	ands.w	r5, r5, #16
 800515a:	d118      	bne.n	800518e <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
 800515c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800515e:	bb4b      	cbnz	r3, 80051b4 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005160:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8005162:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005164:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800516c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800516e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005170:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8005174:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005178:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800517c:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800517e:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005180:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005182:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005186:	d012      	beq.n	80051ae <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005188:	f7ff fecc 	bl	8004f24 <HAL_JPEG_EncodeCpltCallback>
}
 800518c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800518e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005190:	049b      	lsls	r3, r3, #18
 8005192:	d4d2      	bmi.n	800513a <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
 8005194:	4620      	mov	r0, r4
}
 8005196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800519a:	f7ff bf2f 	b.w	8004ffc <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800519e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80051a0:	4620      	mov	r0, r4
 80051a2:	69e1      	ldr	r1, [r4, #28]
 80051a4:	f7fd fb32 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80051ac:	e7d1      	b.n	8005152 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80051ae:	f7fd fb3d 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
}
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80051b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80051b6:	4620      	mov	r0, r4
 80051b8:	69e1      	ldr	r1, [r4, #28]
 80051ba:	f7fd fb27 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80051be:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80051c0:	6265      	str	r5, [r4, #36]	@ 0x24
 80051c2:	e7cd      	b.n	8005160 <JPEG_MDMAOutAbortCallback+0x30>

080051c4 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80051c4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80051c6:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80051c8:	f002 0203 	and.w	r2, r2, #3
 80051cc:	2a02      	cmp	r2, #2
{
 80051ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d2:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80051d4:	d01e      	beq.n	8005214 <JPEG_Process+0x50>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80051d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051d8:	04d7      	lsls	r7, r2, #19
 80051da:	d407      	bmi.n	80051ec <JPEG_Process+0x28>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80051dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051de:	0796      	lsls	r6, r2, #30
 80051e0:	f100 811b 	bmi.w	800541a <JPEG_Process+0x256>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80051e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e6:	0750      	lsls	r0, r2, #29
 80051e8:	f100 81cc 	bmi.w	8005584 <JPEG_Process+0x3c0>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80051ec:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 80051ee:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80051f2:	d107      	bne.n	8005204 <JPEG_Process+0x40>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80051f4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80051f6:	f016 0608 	ands.w	r6, r6, #8
 80051fa:	d14a      	bne.n	8005292 <JPEG_Process+0xce>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80051fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051fe:	06d2      	lsls	r2, r2, #27
 8005200:	f100 81fe 	bmi.w	8005600 <JPEG_Process+0x43c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005206:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800520a:	2a20      	cmp	r2, #32
 800520c:	d019      	beq.n	8005242 <JPEG_Process+0x7e>
  return JPEG_PROCESS_ONGOING;
 800520e:	2000      	movs	r0, #0
}
 8005210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005216:	0652      	lsls	r2, r2, #25
 8005218:	d5dd      	bpl.n	80051d6 <JPEG_Process+0x12>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800521a:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 800521c:	4629      	mov	r1, r5
 800521e:	f7ff fc33 	bl	8004a88 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 8005222:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005224:	4629      	mov	r1, r5
 8005226:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8005228:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800522a:	f7fd fac9 	bl	80027c0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8005238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800523a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800523e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005240:	e7c9      	b.n	80051d6 <JPEG_Process+0x12>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800524a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800524c:	f002 020c 	and.w	r2, r2, #12
 8005250:	2a08      	cmp	r2, #8
 8005252:	f000 8201 	beq.w	8005658 <JPEG_Process+0x494>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005258:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800525c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800525e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	f040 81fe 	bne.w	8005662 <JPEG_Process+0x49e>
    tmpContext = hjpeg->Context;
 8005266:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8005268:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800526a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 800526c:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800526e:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8005272:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005276:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800527a:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800527c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800527e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005280:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005284:	f000 81e5 	beq.w	8005652 <JPEG_Process+0x48e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005288:	f7ff fe4c 	bl	8004f24 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800528c:	2001      	movs	r0, #1
}
 800528e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8005292:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005296:	3220      	adds	r2, #32
 8005298:	4296      	cmp	r6, r2
 800529a:	f0c0 8200 	bcc.w	800569e <JPEG_Process+0x4da>
      dataword = hjpeg->Instance->DOR;
 800529e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80052a0:	69e1      	ldr	r1, [r4, #28]
 80052a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052a4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80052a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052a8:	69e2      	ldr	r2, [r4, #28]
 80052aa:	440a      	add	r2, r1
 80052ac:	0a19      	lsrs	r1, r3, #8
 80052ae:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80052b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052b2:	69e2      	ldr	r2, [r4, #28]
 80052b4:	440a      	add	r2, r1
 80052b6:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80052b8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80052ba:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80052bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052be:	69e2      	ldr	r2, [r4, #28]
 80052c0:	440a      	add	r2, r1
 80052c2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80052c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80052c6:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80052c8:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80052ca:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80052cc:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80052ce:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80052d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052d2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80052d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052d6:	69e2      	ldr	r2, [r4, #28]
 80052d8:	440a      	add	r2, r1
 80052da:	0a19      	lsrs	r1, r3, #8
 80052dc:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80052de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052e0:	69e2      	ldr	r2, [r4, #28]
 80052e2:	440a      	add	r2, r1
 80052e4:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80052e6:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80052e8:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80052ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052ec:	69e2      	ldr	r2, [r4, #28]
 80052ee:	440a      	add	r2, r1
 80052f0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80052f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80052f4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80052f6:	3304      	adds	r3, #4
 80052f8:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80052fa:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80052fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052fe:	69e1      	ldr	r1, [r4, #28]
 8005300:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005302:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005304:	69e2      	ldr	r2, [r4, #28]
 8005306:	440a      	add	r2, r1
 8005308:	0a19      	lsrs	r1, r3, #8
 800530a:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800530c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800530e:	69e2      	ldr	r2, [r4, #28]
 8005310:	440a      	add	r2, r1
 8005312:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005314:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005316:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005318:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800531a:	69e2      	ldr	r2, [r4, #28]
 800531c:	440a      	add	r2, r1
 800531e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005320:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005322:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005324:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005326:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8005328:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 800532a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800532c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800532e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005330:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005332:	69e2      	ldr	r2, [r4, #28]
 8005334:	440a      	add	r2, r1
 8005336:	0a19      	lsrs	r1, r3, #8
 8005338:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800533a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800533c:	69e2      	ldr	r2, [r4, #28]
 800533e:	440a      	add	r2, r1
 8005340:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005342:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005344:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005346:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005348:	69e2      	ldr	r2, [r4, #28]
 800534a:	440a      	add	r2, r1
 800534c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800534e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005350:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005352:	3304      	adds	r3, #4
 8005354:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8005356:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005358:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800535a:	69e1      	ldr	r1, [r4, #28]
 800535c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800535e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005360:	69e2      	ldr	r2, [r4, #28]
 8005362:	440a      	add	r2, r1
 8005364:	0a19      	lsrs	r1, r3, #8
 8005366:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005368:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800536a:	69e2      	ldr	r2, [r4, #28]
 800536c:	440a      	add	r2, r1
 800536e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005370:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005372:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005374:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005376:	69e2      	ldr	r2, [r4, #28]
 8005378:	440a      	add	r2, r1
 800537a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 800537c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800537e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 8005380:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005382:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 8005384:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8005386:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8005388:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800538a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800538c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800538e:	69e2      	ldr	r2, [r4, #28]
 8005390:	440a      	add	r2, r1
 8005392:	0a19      	lsrs	r1, r3, #8
 8005394:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005396:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005398:	69e2      	ldr	r2, [r4, #28]
 800539a:	440a      	add	r2, r1
 800539c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800539e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80053a0:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80053a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80053a4:	69e2      	ldr	r2, [r4, #28]
 80053a6:	440a      	add	r2, r1
 80053a8:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80053aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80053ac:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80053ae:	3304      	adds	r3, #4
 80053b0:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80053b2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80053b4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80053b6:	69e1      	ldr	r1, [r4, #28]
 80053b8:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80053ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80053bc:	69e2      	ldr	r2, [r4, #28]
 80053be:	440a      	add	r2, r1
 80053c0:	0a19      	lsrs	r1, r3, #8
 80053c2:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80053c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80053c6:	69e2      	ldr	r2, [r4, #28]
 80053c8:	440a      	add	r2, r1
 80053ca:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80053cc:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80053ce:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80053d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80053d2:	69e2      	ldr	r2, [r4, #28]
 80053d4:	440a      	add	r2, r1
 80053d6:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80053d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80053da:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
 80053dc:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80053de:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
 80053e0:	6263      	str	r3, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80053e2:	6c53      	ldr	r3, [r2, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80053e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80053e6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80053e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80053ea:	69e2      	ldr	r2, [r4, #28]
 80053ec:	440a      	add	r2, r1
 80053ee:	0a19      	lsrs	r1, r3, #8
 80053f0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80053f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80053f4:	69e2      	ldr	r2, [r4, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80053fa:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80053fc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80053fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005400:	69e2      	ldr	r2, [r4, #28]
 8005402:	440a      	add	r2, r1
 8005404:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005406:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005408:	3304      	adds	r3, #4
 800540a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800540c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800540e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005410:	429a      	cmp	r2, r3
 8005412:	f000 8258 	beq.w	80058c6 <JPEG_Process+0x702>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	e6f4      	b.n	8005204 <JPEG_Process+0x40>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800541a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800541c:	2a00      	cmp	r2, #0
 800541e:	f000 8128 	beq.w	8005672 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005422:	6a21      	ldr	r1, [r4, #32]
 8005424:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005426:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005428:	f240 81b9 	bls.w	800579e <JPEG_Process+0x5da>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800542c:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800542e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8005430:	04cd      	lsls	r5, r1, #19
 8005432:	f53f aedb 	bmi.w	80051ec <JPEG_Process+0x28>
 8005436:	2a00      	cmp	r2, #0
 8005438:	f43f aed8 	beq.w	80051ec <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 800543c:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
 800543e:	ea4f 0092 	mov.w	r0, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8005442:	f200 8248 	bhi.w	80058d6 <JPEG_Process+0x712>
      if (nb_words > 0UL)
 8005446:	2a03      	cmp	r2, #3
 8005448:	f240 82c0 	bls.w	80059cc <JPEG_Process+0x808>
          input_count = hjpeg->JpegInCount;
 800544c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800544e:	2801      	cmp	r0, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005450:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005452:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005456:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005458:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800545a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800545c:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005460:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005462:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005466:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800546a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800546e:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005470:	6a21      	ldr	r1, [r4, #32]
 8005472:	f101 0104 	add.w	r1, r1, #4
 8005476:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005478:	f43f aeb8 	beq.w	80051ec <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 800547c:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800547e:	2802      	cmp	r0, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005480:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005484:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005486:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005488:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800548a:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800548e:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005490:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005494:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005498:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800549c:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800549e:	6a21      	ldr	r1, [r4, #32]
 80054a0:	f101 0104 	add.w	r1, r1, #4
 80054a4:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80054a6:	f43f aea1 	beq.w	80051ec <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80054aa:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80054ac:	2803      	cmp	r0, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80054ae:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80054b2:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80054b4:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80054b6:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80054b8:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80054bc:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80054be:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80054c2:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80054c6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80054ca:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80054cc:	6a21      	ldr	r1, [r4, #32]
 80054ce:	f101 0104 	add.w	r1, r1, #4
 80054d2:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80054d4:	f43f ae8a 	beq.w	80051ec <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 80054d8:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80054da:	2804      	cmp	r0, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80054dc:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80054e0:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80054e2:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80054e4:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80054e6:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80054ea:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80054ec:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80054f0:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80054f4:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80054f8:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80054fa:	6a21      	ldr	r1, [r4, #32]
 80054fc:	f101 0104 	add.w	r1, r1, #4
 8005500:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005502:	f43f ae73 	beq.w	80051ec <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005506:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005508:	2805      	cmp	r0, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800550a:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800550e:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005510:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005512:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005514:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005518:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800551a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800551e:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005522:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005526:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005528:	6a21      	ldr	r1, [r4, #32]
 800552a:	f101 0104 	add.w	r1, r1, #4
 800552e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005530:	f43f ae5c 	beq.w	80051ec <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005534:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8005536:	2807      	cmp	r0, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005538:	eb02 0501 	add.w	r5, r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800553c:	5c56      	ldrb	r6, [r2, r1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800553e:	78a9      	ldrb	r1, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005540:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005542:	ea4f 4101 	mov.w	r1, r1, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005546:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005548:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800554c:	ea41 0106 	orr.w	r1, r1, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005550:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005554:	6419      	str	r1, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8005556:	6a21      	ldr	r1, [r4, #32]
 8005558:	f101 0104 	add.w	r1, r1, #4
 800555c:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800555e:	f47f ae45 	bne.w	80051ec <JPEG_Process+0x28>
          input_count = hjpeg->JpegInCount;
 8005562:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005564:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005566:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005568:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800556a:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800556c:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800556e:	7849      	ldrb	r1, [r1, #1]
 8005570:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005574:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005576:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800557c:	6a22      	ldr	r2, [r4, #32]
 800557e:	3204      	adds	r2, #4
 8005580:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8005582:	e633      	b.n	80051ec <JPEG_Process+0x28>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8005584:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005586:	2a00      	cmp	r2, #0
 8005588:	d073      	beq.n	8005672 <JPEG_Process+0x4ae>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800558a:	6a21      	ldr	r1, [r4, #32]
 800558c:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800558e:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8005590:	f200 8182 	bhi.w	8005898 <JPEG_Process+0x6d4>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8005594:	428a      	cmp	r2, r1
 8005596:	f040 8104 	bne.w	80057a2 <JPEG_Process+0x5de>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800559a:	6a21      	ldr	r1, [r4, #32]
 800559c:	4620      	mov	r0, r4
 800559e:	f7fd f911 	bl	80027c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80055a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80055a4:	2a04      	cmp	r2, #4
 80055a6:	d902      	bls.n	80055ae <JPEG_Process+0x3ea>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80055a8:	f022 0203 	bic.w	r2, r2, #3
 80055ac:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80055ae:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80055b0:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 80055b2:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80055b4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80055b6:	04c9      	lsls	r1, r1, #19
 80055b8:	f53f ae18 	bmi.w	80051ec <JPEG_Process+0x28>
 80055bc:	2a00      	cmp	r2, #0
 80055be:	f43f ae15 	beq.w	80051ec <JPEG_Process+0x28>
    if (nb_words >= nbRequestWords)
 80055c2:	0891      	lsrs	r1, r2, #2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80055c4:	69a0      	ldr	r0, [r4, #24]
    if (nb_words >= nbRequestWords)
 80055c6:	f040 8177 	bne.w	80058b8 <JPEG_Process+0x6f4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80055ca:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80055cc:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 80055ce:	6a25      	ldr	r5, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80055d0:	5c41      	ldrb	r1, [r0, r1]
          hjpeg->JpegInCount++;
 80055d2:	f105 0501 	add.w	r5, r5, #1
 80055d6:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80055d8:	d010      	beq.n	80055fc <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80055da:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80055dc:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80055de:	5d45      	ldrb	r5, [r0, r5]
 80055e0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
          hjpeg->JpegInCount++;
 80055e4:	6a25      	ldr	r5, [r4, #32]
 80055e6:	f105 0501 	add.w	r5, r5, #1
 80055ea:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80055ec:	d106      	bne.n	80055fc <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80055ee:	6a22      	ldr	r2, [r4, #32]
 80055f0:	5c80      	ldrb	r0, [r0, r2]
          hjpeg->JpegInCount++;
 80055f2:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80055f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 80055f8:	3201      	adds	r2, #1
 80055fa:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 80055fc:	6419      	str	r1, [r3, #64]	@ 0x40
 80055fe:	e5f5      	b.n	80051ec <JPEG_Process+0x28>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8005600:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005602:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005604:	3204      	adds	r2, #4
 8005606:	4295      	cmp	r5, r2
 8005608:	f0c0 80cd 	bcc.w	80057a6 <JPEG_Process+0x5e2>
      dataword = hjpeg->Instance->DOR;
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800560e:	69e1      	ldr	r1, [r4, #28]
 8005610:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005612:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8005614:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005616:	69e2      	ldr	r2, [r4, #28]
 8005618:	440a      	add	r2, r1
 800561a:	0a19      	lsrs	r1, r3, #8
 800561c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800561e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005620:	69e2      	ldr	r2, [r4, #28]
 8005622:	440a      	add	r2, r1
 8005624:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8005626:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8005628:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800562a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800562c:	69e2      	ldr	r2, [r4, #28]
 800562e:	440a      	add	r2, r1
 8005630:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 8005632:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8005634:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      hjpeg->JpegOutCount += 4UL;
 8005636:	3304      	adds	r3, #4
 8005638:	6263      	str	r3, [r4, #36]	@ 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800563a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800563c:	429a      	cmp	r2, r3
 800563e:	f47f aeea 	bne.w	8005416 <JPEG_Process+0x252>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005642:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005644:	4620      	mov	r0, r4
 8005646:	69e1      	ldr	r1, [r4, #28]
 8005648:	f7fd f8e0 	bl	800280c <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800564c:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 800564e:	6266      	str	r6, [r4, #36]	@ 0x24
 8005650:	e5d8      	b.n	8005204 <JPEG_Process+0x40>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005652:	f7fd f8eb 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
 8005656:	e619      	b.n	800528c <JPEG_Process+0xc8>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800565a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005660:	e5f9      	b.n	8005256 <JPEG_Process+0x92>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005662:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005664:	4620      	mov	r0, r4
 8005666:	69e1      	ldr	r1, [r4, #28]
 8005668:	f7fd f8d0 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005670:	e5f9      	b.n	8005266 <JPEG_Process+0xa2>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005672:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005674:	f002 020c 	and.w	r2, r2, #12
 8005678:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800567a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800567c:	f000 811e 	beq.w	80058bc <JPEG_Process+0x6f8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005680:	f002 020c 	and.w	r2, r2, #12
 8005684:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005686:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005688:	f47f adb0 	bne.w	80051ec <JPEG_Process+0x28>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800568c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005690:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8005692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005694:	f022 0206 	bic.w	r2, r2, #6
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800569a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800569c:	e5a6      	b.n	80051ec <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800569e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80056a0:	4296      	cmp	r6, r2
 80056a2:	f67f adaf 	bls.w	8005204 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80056a6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80056a8:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
 80056aa:	0880      	lsrs	r0, r0, #2
 80056ac:	d020      	beq.n	80056f0 <JPEG_Process+0x52c>
 80056ae:	4629      	mov	r1, r5
 80056b0:	e000      	b.n	80056b4 <JPEG_Process+0x4f0>
      dataword = hjpeg->Instance->DOR;
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 80056b6:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80056b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80056ba:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
 80056bc:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80056be:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80056c0:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80056c2:	69e2      	ldr	r2, [r4, #28]
 80056c4:	4432      	add	r2, r6
 80056c6:	ea4f 2613 	mov.w	r6, r3, lsr #8
 80056ca:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80056cc:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80056ce:	69e2      	ldr	r2, [r4, #28]
 80056d0:	4432      	add	r2, r6
 80056d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80056d6:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80056da:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80056dc:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80056de:	69e2      	ldr	r2, [r4, #28]
 80056e0:	4432      	add	r2, r6
 80056e2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80056e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056e6:	f103 0304 	add.w	r3, r3, #4
 80056ea:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80056ec:	d1e1      	bne.n	80056b2 <JPEG_Process+0x4ee>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80056ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80056f2:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80056f4:	429e      	cmp	r6, r3
 80056f6:	f000 8161 	beq.w	80059bc <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80056fa:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 80056fe:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8005700:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
 8005704:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8005706:	d00e      	beq.n	8005726 <JPEG_Process+0x562>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005708:	f005 0303 	and.w	r3, r5, #3
 800570c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800570e:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005710:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 8005712:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005714:	fa27 f303 	lsr.w	r3, r7, r3
 8005718:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 800571a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800571c:	69e1      	ldr	r1, [r4, #28]
 800571e:	f103 0301 	add.w	r3, r3, #1
 8005722:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8005724:	d1f0      	bne.n	8005708 <JPEG_Process+0x544>
      nb_bytes = 4UL - nb_bytes;
 8005726:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800572a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800572c:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
 800572e:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005732:	f7fd f86b 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8005736:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 8005738:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
 800573a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800573c:	f63f ae6b 	bhi.w	8005416 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005740:	ea4f 02c6 	mov.w	r2, r6, lsl #3
 8005744:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005746:	69e0      	ldr	r0, [r4, #28]
 8005748:	fa27 f502 	lsr.w	r5, r7, r2
 800574c:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 800574e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005750:	f101 0101 	add.w	r1, r1, #1
 8005754:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005756:	f43f ae5e 	beq.w	8005416 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800575a:	f102 0108 	add.w	r1, r2, #8
 800575e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005760:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8005762:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005764:	fa27 f101 	lsr.w	r1, r7, r1
 8005768:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 800576a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800576c:	f101 0101 	add.w	r1, r1, #1
 8005770:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005772:	f43f ae50 	beq.w	8005416 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005776:	3210      	adds	r2, #16
 8005778:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800577a:	69e0      	ldr	r0, [r4, #28]
 800577c:	fa27 f202 	lsr.w	r2, r7, r2
 8005780:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8005782:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005784:	3201      	adds	r2, #1
 8005786:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005788:	2e00      	cmp	r6, #0
 800578a:	f47f ae44 	bne.w	8005416 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800578e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005790:	0e3f      	lsrs	r7, r7, #24
 8005792:	69e2      	ldr	r2, [r4, #28]
 8005794:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
 8005796:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005798:	3301      	adds	r3, #1
 800579a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800579c:	e63b      	b.n	8005416 <JPEG_Process+0x252>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800579e:	428a      	cmp	r2, r1
 80057a0:	d07c      	beq.n	800589c <JPEG_Process+0x6d8>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80057a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80057a4:	e522      	b.n	80051ec <JPEG_Process+0x28>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80057a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80057a8:	4295      	cmp	r5, r2
 80057aa:	f67f ad2b 	bls.w	8005204 <JPEG_Process+0x40>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80057ae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80057b0:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
 80057b2:	0880      	lsrs	r0, r0, #2
 80057b4:	d020      	beq.n	80057f8 <JPEG_Process+0x634>
 80057b6:	4631      	mov	r1, r6
 80057b8:	e000      	b.n	80057bc <JPEG_Process+0x5f8>
      dataword = hjpeg->Instance->DOR;
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nb_words; index++)
 80057be:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80057c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80057c2:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
 80057c4:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80057c6:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80057c8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80057ca:	69e2      	ldr	r2, [r4, #28]
 80057cc:	442a      	add	r2, r5
 80057ce:	ea4f 2513 	mov.w	r5, r3, lsr #8
 80057d2:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80057d4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80057d6:	69e2      	ldr	r2, [r4, #28]
 80057d8:	442a      	add	r2, r5
 80057da:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80057de:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80057e2:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80057e4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80057e6:	69e2      	ldr	r2, [r4, #28]
 80057e8:	442a      	add	r2, r5
 80057ea:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
 80057ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80057ee:	f103 0304 	add.w	r3, r3, #4
 80057f2:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80057f4:	d1e1      	bne.n	80057ba <JPEG_Process+0x5f6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80057f6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80057f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80057fa:	69e1      	ldr	r1, [r4, #28]
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80057fc:	429d      	cmp	r5, r3
 80057fe:	f000 80dd 	beq.w	80059bc <JPEG_Process+0x7f8>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8005802:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
      dataword = hjpeg->Instance->DOR;
 8005806:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
 8005808:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
 800580c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800580e:	d00e      	beq.n	800582e <JPEG_Process+0x66a>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005810:	f006 0303 	and.w	r3, r6, #3
 8005814:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8005816:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8005818:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
 800581a:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800581c:	fa27 f303 	lsr.w	r3, r7, r3
 8005820:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
 8005822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005824:	69e1      	ldr	r1, [r4, #28]
 8005826:	f103 0301 	add.w	r3, r3, #1
 800582a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800582c:	d1f0      	bne.n	8005810 <JPEG_Process+0x64c>
      nb_bytes = 4UL - nb_bytes;
 800582e:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005832:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005834:	4620      	mov	r0, r4
 8005836:	f7fc ffe9 	bl	800280c <HAL_JPEG_DataReadyCallback>
      nb_bytes = 4UL - nb_bytes;
 800583a:	eba8 0305 	sub.w	r3, r8, r5
      hjpeg->JpegOutCount = 0;
 800583e:	2200      	movs	r2, #0
      for (index = nb_bytes; index < 4UL; index++)
 8005840:	2b03      	cmp	r3, #3
      hjpeg->JpegOutCount = 0;
 8005842:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005844:	f63f ade7 	bhi.w	8005416 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005848:	ea4f 02c3 	mov.w	r2, r3, lsl #3
 800584c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800584e:	69e0      	ldr	r0, [r4, #28]
 8005850:	fa27 f502 	lsr.w	r5, r7, r2
 8005854:	5445      	strb	r5, [r0, r1]
        hjpeg->JpegOutCount++;
 8005856:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005858:	f101 0101 	add.w	r1, r1, #1
 800585c:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800585e:	f43f adda 	beq.w	8005416 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8005862:	f102 0108 	add.w	r1, r2, #8
 8005866:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005868:	69e5      	ldr	r5, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800586a:	2b02      	cmp	r3, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800586c:	fa27 f101 	lsr.w	r1, r7, r1
 8005870:	5429      	strb	r1, [r5, r0]
        hjpeg->JpegOutCount++;
 8005872:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005874:	f101 0101 	add.w	r1, r1, #1
 8005878:	6261      	str	r1, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800587a:	f43f adcc 	beq.w	8005416 <JPEG_Process+0x252>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800587e:	3210      	adds	r2, #16
 8005880:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005882:	69e0      	ldr	r0, [r4, #28]
 8005884:	fa27 f202 	lsr.w	r2, r7, r2
 8005888:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800588a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800588c:	3201      	adds	r2, #1
 800588e:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8005890:	2b00      	cmp	r3, #0
 8005892:	f43f af7c 	beq.w	800578e <JPEG_Process+0x5ca>
 8005896:	e5be      	b.n	8005416 <JPEG_Process+0x252>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8005898:	1a52      	subs	r2, r2, r1
 800589a:	e68b      	b.n	80055b4 <JPEG_Process+0x3f0>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800589c:	6a21      	ldr	r1, [r4, #32]
 800589e:	4620      	mov	r0, r4
 80058a0:	f7fc ff90 	bl	80027c4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80058a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80058a6:	2a04      	cmp	r2, #4
 80058a8:	d902      	bls.n	80058b0 <JPEG_Process+0x6ec>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80058aa:	f022 0203 	bic.w	r2, r2, #3
 80058ae:	62a2      	str	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80058b0:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80058b2:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
 80058b4:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80058b6:	e5ba      	b.n	800542e <JPEG_Process+0x26a>
        input_count = hjpeg->JpegInCount;
 80058b8:	6a22      	ldr	r2, [r4, #32]
 80058ba:	e653      	b.n	8005564 <JPEG_Process+0x3a0>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80058bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058c0:	6562      	str	r2, [r4, #84]	@ 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80058c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058c4:	e492      	b.n	80051ec <JPEG_Process+0x28>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80058c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80058c8:	4620      	mov	r0, r4
 80058ca:	69e1      	ldr	r1, [r4, #28]
 80058cc:	f7fc ff9e 	bl	800280c <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80058d0:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80058d2:	6265      	str	r5, [r4, #36]	@ 0x24
 80058d4:	e496      	b.n	8005204 <JPEG_Process+0x40>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80058d6:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
 80058d8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80058da:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80058dc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80058de:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80058e0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80058e2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80058e4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80058e6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80058ea:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80058ec:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80058f0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80058f2:	6a21      	ldr	r1, [r4, #32]
 80058f4:	3104      	adds	r1, #4
 80058f6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80058f8:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80058fa:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80058fc:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80058fe:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005900:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005902:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005904:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005906:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800590a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800590c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005910:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005912:	6a21      	ldr	r1, [r4, #32]
 8005914:	3104      	adds	r1, #4
 8005916:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005918:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800591a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800591c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800591e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005920:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005922:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005924:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005926:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800592a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800592c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005930:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005932:	6a21      	ldr	r1, [r4, #32]
 8005934:	3104      	adds	r1, #4
 8005936:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005938:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800593a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800593c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800593e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005940:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005942:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005944:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005946:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800594a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800594c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005950:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005952:	6a21      	ldr	r1, [r4, #32]
 8005954:	3104      	adds	r1, #4
 8005956:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005958:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800595a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800595c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800595e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005960:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005962:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005964:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005966:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800596a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800596c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005970:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005972:	6a21      	ldr	r1, [r4, #32]
 8005974:	3104      	adds	r1, #4
 8005976:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005978:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800597a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800597c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800597e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005980:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8005982:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8005984:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8005986:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800598a:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800598c:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8005990:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8005992:	6a21      	ldr	r1, [r4, #32]
 8005994:	3104      	adds	r1, #4
 8005996:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 8005998:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800599a:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800599c:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800599e:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80059a0:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80059a2:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80059a4:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80059a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80059aa:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80059ac:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80059b0:	6419      	str	r1, [r3, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80059b2:	6a21      	ldr	r1, [r4, #32]
 80059b4:	3104      	adds	r1, #4
 80059b6:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
 80059b8:	6a20      	ldr	r0, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80059ba:	e5d3      	b.n	8005564 <JPEG_Process+0x3a0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80059bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80059be:	4620      	mov	r0, r4
 80059c0:	f7fc ff24 	bl	800280c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80059c4:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80059c6:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
 80059c8:	6262      	str	r2, [r4, #36]	@ 0x24
 80059ca:	e41b      	b.n	8005204 <JPEG_Process+0x40>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059cc:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80059ce:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
 80059d0:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059d2:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
 80059d4:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059d8:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
 80059da:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80059dc:	f43f ae0e 	beq.w	80055fc <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059e0:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80059e2:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059e4:	5c28      	ldrb	r0, [r5, r0]
 80059e6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
 80059ea:	6a20      	ldr	r0, [r4, #32]
 80059ec:	f100 0001 	add.w	r0, r0, #1
 80059f0:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80059f2:	f47f ae03 	bne.w	80055fc <JPEG_Process+0x438>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059f6:	6a22      	ldr	r2, [r4, #32]
 80059f8:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
 80059fa:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80059fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
 8005a00:	3201      	adds	r2, #1
 8005a02:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
 8005a04:	e5fa      	b.n	80055fc <JPEG_Process+0x438>
 8005a06:	bf00      	nop

08005a08 <HAL_JPEG_IRQHandler>:
{
 8005a08:	b538      	push	{r3, r4, r5, lr}
  switch (hjpeg->State)
 8005a0a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8005a0e:	3b03      	subs	r3, #3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d900      	bls.n	8005a16 <HAL_JPEG_IRQHandler+0xe>
}
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005a16:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005a18:	4604      	mov	r4, r0
 8005a1a:	f003 030c 	and.w	r3, r3, #12
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d050      	beq.n	8005ac4 <HAL_JPEG_IRQHandler+0xbc>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005a22:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005a24:	f003 030c 	and.w	r3, r3, #12
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d1f3      	bne.n	8005a14 <HAL_JPEG_IRQHandler+0xc>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005a2c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005a2e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005a30:	f002 0203 	and.w	r2, r2, #3
 8005a34:	2a02      	cmp	r2, #2
 8005a36:	d049      	beq.n	8005acc <HAL_JPEG_IRQHandler+0xc4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8005a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a3a:	0692      	lsls	r2, r2, #26
 8005a3c:	d5ea      	bpl.n	8005a14 <HAL_JPEG_IRQHandler+0xc>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8005a3e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8005a40:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8005a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a46:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a52:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a5a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8005a60:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d054      	beq.n	8005b12 <HAL_JPEG_IRQHandler+0x10a>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8005a68:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005a6a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d043      	beq.n	8005afa <HAL_JPEG_IRQHandler+0xf2>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8005a72:	6803      	ldr	r3, [r0, #0]
 8005a74:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	6263      	str	r3, [r4, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005a80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d048      	beq.n	8005b18 <HAL_JPEG_IRQHandler+0x110>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8005a8a:	f015 0510 	ands.w	r5, r5, #16
 8005a8e:	d138      	bne.n	8005b02 <HAL_JPEG_IRQHandler+0xfa>
    if (hjpeg->JpegOutCount > 0UL)
 8005a90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d14b      	bne.n	8005b2e <HAL_JPEG_IRQHandler+0x126>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005a96:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
 8005a98:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005a9a:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8005aa2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005aa6:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
 8005aaa:	f884 004c 	strb.w	r0, [r4, #76]	@ 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005aae:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005ab2:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005ab4:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005ab6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005ab8:	f884 104d 	strb.w	r1, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005abc:	d034      	beq.n	8005b28 <HAL_JPEG_IRQHandler+0x120>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005abe:	f7ff fa31 	bl	8004f24 <HAL_JPEG_EncodeCpltCallback>
}
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (void) JPEG_Process(hjpeg);
 8005ac8:	f7ff bb7c 	b.w	80051c4 <JPEG_Process>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8005acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ace:	0651      	lsls	r1, r2, #25
 8005ad0:	d5b2      	bpl.n	8005a38 <HAL_JPEG_IRQHandler+0x30>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8005ad2:	1d05      	adds	r5, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fe ffd7 	bl	8004a88 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
 8005ada:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005adc:	4629      	mov	r1, r5
 8005ade:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8005ae0:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8005ae2:	f7fc fe6d 	bl	80027c0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aee:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8005af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005af8:	e79e      	b.n	8005a38 <HAL_JPEG_IRQHandler+0x30>
}
 8005afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8005afe:	f000 b92f 	b.w	8005d60 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005b02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005b04:	049b      	lsls	r3, r3, #18
 8005b06:	d485      	bmi.n	8005a14 <HAL_JPEG_IRQHandler+0xc>
    JPEG_DMA_PollResidualData(hjpeg);
 8005b08:	4620      	mov	r0, r4
}
 8005b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8005b0e:	f7ff ba75 	b.w	8004ffc <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8005b12:	f000 f925 	bl	8005d60 <HAL_MDMA_Abort_IT>
 8005b16:	e7a7      	b.n	8005a68 <HAL_JPEG_IRQHandler+0x60>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005b18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	69e1      	ldr	r1, [r4, #28]
 8005b1e:	f7fc fe75 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b26:	e7ae      	b.n	8005a86 <HAL_JPEG_IRQHandler+0x7e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005b28:	f7fc fe80 	bl	800282c <HAL_JPEG_DecodeCpltCallback>
}
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005b2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005b30:	4620      	mov	r0, r4
 8005b32:	69e1      	ldr	r1, [r4, #28]
 8005b34:	f7fc fe6a 	bl	800280c <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005b38:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
 8005b3a:	6265      	str	r5, [r4, #36]	@ 0x24
 8005b3c:	e7ab      	b.n	8005a96 <HAL_JPEG_IRQHandler+0x8e>
 8005b3e:	bf00      	nop

08005b40 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005b44:	f7fe f9ba 	bl	8003ebc <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	d058      	beq.n	8005bfe <HAL_MDMA_Init+0xbe>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005b4c:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005b4e:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 8005b50:	2100      	movs	r1, #0
 8005b52:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005b54:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8005b58:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005b64:	e005      	b.n	8005b72 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005b66:	f7fe f9a9 	bl	8003ebc <HAL_GetTick>
 8005b6a:	1b43      	subs	r3, r0, r5
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d841      	bhi.n	8005bf4 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	07d2      	lsls	r2, r2, #31
 8005b76:	d4f6      	bmi.n	8005b66 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005b78:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 8005b7c:	69e0      	ldr	r0, [r4, #28]
 8005b7e:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005b80:	68e1      	ldr	r1, [r4, #12]
 8005b82:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005b84:	4302      	orrs	r2, r0
 8005b86:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005b88:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005b8a:	4302      	orrs	r2, r0
 8005b8c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005b8e:	4302      	orrs	r2, r0
 8005b90:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005b92:	4302      	orrs	r2, r0
 8005b94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005b96:	4302      	orrs	r2, r0
 8005b98:	68a0      	ldr	r0, [r4, #8]
 8005b9a:	4302      	orrs	r2, r0
 8005b9c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005b9e:	3801      	subs	r0, #1
 8005ba0:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005ba4:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8005ba6:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005ba8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005bac:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005bae:	d103      	bne.n	8005bb8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8005bb6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8005bb8:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005bba:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005bbc:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 8005bbe:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8005bc0:	db1f      	blt.n	8005c02 <HAL_MDMA_Init+0xc2>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8005bc6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	db24      	blt.n	8005c16 <HAL_MDMA_Init+0xd6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005bcc:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005bce:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005bd2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005bd6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005bd8:	d029      	beq.n	8005c2e <HAL_MDMA_Init+0xee>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8005bda:	b2c0      	uxtb	r0, r0
 8005bdc:	6298      	str	r0, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8005bde:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8005be0:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8005be2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 8005be4:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005be6:	66a2      	str	r2, [r4, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8005be8:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8005bea:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005bee:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
}
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005bf4:	2240      	movs	r2, #64	@ 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005bf6:	2303      	movs	r3, #3
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005bf8:	66a2      	str	r2, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005bfa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8005bfe:	2001      	movs	r0, #1
}
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005c02:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8005c04:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005c06:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8005c0a:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005c0c:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8005c0e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8005c10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	dada      	bge.n	8005bcc <HAL_MDMA_Init+0x8c>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005c16:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8005c18:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005c1a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8005c1e:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 8005c22:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8005c24:	6a19      	ldr	r1, [r3, #32]
 8005c26:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005c2a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005c2c:	d1d5      	bne.n	8005bda <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 8005c2e:	2200      	movs	r2, #0
 8005c30:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c32:	e7d4      	b.n	8005bde <HAL_MDMA_Init+0x9e>

08005c34 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8005c34:	b1f8      	cbz	r0, 8005c76 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
 8005c36:	6802      	ldr	r2, [r0, #0]
 8005c38:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
 8005c3a:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8005c3c:	68d0      	ldr	r0, [r2, #12]
{
 8005c3e:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
 8005c40:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8005c44:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
 8005c46:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
 8005c48:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
 8005c4a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8005c4c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8005c4e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8005c50:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8005c52:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8005c54:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8005c56:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8005c58:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8005c5a:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8005c5c:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8005c5e:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005c60:	668b      	str	r3, [r1, #104]	@ 0x68
  __HAL_UNLOCK(hmdma);
 8005c62:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
 8005c66:	f881 303d 	strb.w	r3, [r1, #61]	@ 0x3d
}
 8005c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
 8005c6e:	664b      	str	r3, [r1, #100]	@ 0x64
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005c70:	e9c1 3317 	strd	r3, r3, [r1, #92]	@ 0x5c
}
 8005c74:	4770      	bx	lr
    return HAL_ERROR;
 8005c76:	2001      	movs	r0, #1
}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d06b      	beq.n	8005d58 <HAL_MDMA_Start_IT+0xdc>
{
 8005c80:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hmdma);
 8005c82:	f890 403c 	ldrb.w	r4, [r0, #60]	@ 0x3c
 8005c86:	2c01      	cmp	r4, #1
 8005c88:	d009      	beq.n	8005c9e <HAL_MDMA_Start_IT+0x22>
 8005c8a:	2401      	movs	r4, #1
 8005c8c:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005c90:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 8005c94:	2c01      	cmp	r4, #1
 8005c96:	d005      	beq.n	8005ca4 <HAL_MDMA_Start_IT+0x28>
    __HAL_UNLOCK(hmdma);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8005c9e:	2002      	movs	r0, #2
}
 8005ca0:	bc70      	pop	{r4, r5, r6}
 8005ca2:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8005ca4:	2402      	movs	r4, #2
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8005ca6:	9e03      	ldr	r6, [sp, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8005ca8:	4d2c      	ldr	r5, [pc, #176]	@ (8005d5c <HAL_MDMA_Start_IT+0xe0>)
 8005caa:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8005cae:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005cb2:	2400      	movs	r4, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8005cb4:	f106 3cff 	add.w	ip, r6, #4294967295
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8005cb8:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005cbc:	6684      	str	r4, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8005cbe:	6804      	ldr	r4, [r0, #0]
 8005cc0:	68e6      	ldr	r6, [r4, #12]
 8005cc2:	f026 0601 	bic.w	r6, r6, #1
 8005cc6:	60e6      	str	r6, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8005cc8:	6966      	ldr	r6, [r4, #20]
 8005cca:	ea05 0506 	and.w	r5, r5, r6
 8005cce:	ea45 0503 	orr.w	r5, r5, r3
 8005cd2:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8005cd4:	6963      	ldr	r3, [r4, #20]
 8005cd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cda:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8005cde:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8005ce0:	f04f 031f 	mov.w	r3, #31
 8005ce4:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8005ce6:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8005ce8:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8005cea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005cec:	bf0c      	ite	eq
 8005cee:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8005cf2:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8005cf6:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 8005cfa:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8005cfc:	62a3      	str	r3, [r4, #40]	@ 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8005cfe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005d00:	bf0c      	ite	eq
 8005d02:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8005d06:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8005d0a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8005d0c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8005d0e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8005d10:	68e3      	ldr	r3, [r4, #12]
 8005d12:	f043 0306 	orr.w	r3, r3, #6
 8005d16:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8005d18:	b11a      	cbz	r2, 8005d22 <HAL_MDMA_Start_IT+0xa6>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	f043 0310 	orr.w	r3, r3, #16
 8005d20:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005d22:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8005d24:	b11b      	cbz	r3, 8005d2e <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	f043 0308 	orr.w	r3, r3, #8
 8005d2c:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8005d2e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8005d30:	b11b      	cbz	r3, 8005d3a <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8005d32:	68e3      	ldr	r3, [r4, #12]
 8005d34:	f043 0320 	orr.w	r3, r3, #32
 8005d38:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8005d3a:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005d3c:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005d42:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 8005d46:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8005d48:	d103      	bne.n	8005d52 <HAL_MDMA_Start_IT+0xd6>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d50:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8005d52:	2000      	movs	r0, #0
}
 8005d54:	bc70      	pop	{r4, r5, r6}
 8005d56:	4770      	bx	lr
    return HAL_ERROR;
 8005d58:	2001      	movs	r0, #1
}
 8005d5a:	4770      	bx	lr
 8005d5c:	fffe0000 	.word	0xfffe0000

08005d60 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8005d60:	4603      	mov	r3, r0
 8005d62:	b128      	cbz	r0, 8005d70 <HAL_MDMA_Abort_IT+0x10>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8005d64:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8005d68:	2a02      	cmp	r2, #2
 8005d6a:	d003      	beq.n	8005d74 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005d6c:	2280      	movs	r2, #128	@ 0x80
 8005d6e:	6682      	str	r2, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8005d70:	2001      	movs	r0, #1
 8005d72:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8005d74:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005d76:	2104      	movs	r1, #4
  return HAL_OK;
 8005d78:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005d7a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8005d7e:	68d3      	ldr	r3, [r2, #12]
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	60d3      	str	r3, [r2, #12]
}
 8005d86:	4770      	bx	lr

08005d88 <HAL_MDMA_IRQHandler>:
{
 8005d88:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
 8005d8a:	2300      	movs	r3, #0
{
 8005d8c:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005d8e:	f04f 45a4 	mov.w	r5, #1375731712	@ 0x52000000
{
 8005d92:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8005d94:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005d96:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d98:	4b57      	ldr	r3, [pc, #348]	@ (8005ef8 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005d9a:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005d9c:	4a57      	ldr	r2, [pc, #348]	@ (8005efc <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d9e:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	441a      	add	r2, r3
 8005da4:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8005da8:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005dac:	4202      	tst	r2, r0
 8005dae:	f000 80a0 	beq.w	8005ef2 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	07d1      	lsls	r1, r2, #31
 8005db6:	d529      	bpl.n	8005e0c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	0792      	lsls	r2, r2, #30
 8005dbc:	d526      	bpl.n	8005e0c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	f022 0202 	bic.w	r2, r2, #2
 8005dc4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8005dc6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005dc8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8005dca:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005dcc:	bf54      	ite	pl
 8005dce:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005dd2:	f041 0102 	orrmi.w	r1, r1, #2
 8005dd6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8005dd8:	0591      	lsls	r1, r2, #22
 8005dda:	d503      	bpl.n	8005de4 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005ddc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005dde:	f041 0104 	orr.w	r1, r1, #4
 8005de2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005de4:	05d0      	lsls	r0, r2, #23
 8005de6:	d503      	bpl.n	8005df0 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8005de8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005dea:	f041 0108 	orr.w	r1, r1, #8
 8005dee:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8005df0:	0551      	lsls	r1, r2, #21
 8005df2:	d503      	bpl.n	8005dfc <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8005df4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005df6:	f041 0110 	orr.w	r1, r1, #16
 8005dfa:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8005dfc:	0510      	lsls	r0, r2, #20
 8005dfe:	d503      	bpl.n	8005e08 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8005e00:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005e02:	f042 0220 	orr.w	r2, r2, #32
 8005e06:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8005e08:	2201      	movs	r2, #1
 8005e0a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	06d1      	lsls	r1, r2, #27
 8005e10:	d509      	bpl.n	8005e26 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	0692      	lsls	r2, r2, #26
 8005e16:	d506      	bpl.n	8005e26 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005e18:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 8005e1a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005e1c:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8005e1e:	b112      	cbz	r2, 8005e26 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 8005e20:	4620      	mov	r0, r4
 8005e22:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	0710      	lsls	r0, r2, #28
 8005e2a:	d509      	bpl.n	8005e40 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	06d1      	lsls	r1, r2, #27
 8005e30:	d506      	bpl.n	8005e40 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005e32:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 8005e34:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8005e36:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8005e38:	b112      	cbz	r2, 8005e40 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	0752      	lsls	r2, r2, #29
 8005e44:	d509      	bpl.n	8005e5a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	0710      	lsls	r0, r2, #28
 8005e4a:	d506      	bpl.n	8005e5a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005e4c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005e4e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8005e50:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8005e52:	b112      	cbz	r2, 8005e5a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8005e54:	4620      	mov	r0, r4
 8005e56:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	0791      	lsls	r1, r2, #30
 8005e5e:	d516      	bpl.n	8005e8e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	0752      	lsls	r2, r2, #29
 8005e64:	d513      	bpl.n	8005e8e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8005e6c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8005e6e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8005e72:	2a04      	cmp	r2, #4
 8005e74:	d034      	beq.n	8005ee0 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005e76:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 8005e78:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8005e7a:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8005e7c:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 8005e7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hmdma);
 8005e80:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8005e84:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8005e88:	b10b      	cbz	r3, 8005e8e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8005e8e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02e      	beq.n	8005ef2 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 8005e94:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005e96:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e98:	4b19      	ldr	r3, [pc, #100]	@ (8005f00 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8005e9a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e9e:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
 8005ea2:	68cb      	ldr	r3, [r1, #12]
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ea8:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 8005eaa:	60cb      	str	r3, [r1, #12]
 8005eac:	e002      	b.n	8005eb4 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8005eae:	68cb      	ldr	r3, [r1, #12]
 8005eb0:	07d8      	lsls	r0, r3, #31
 8005eb2:	d504      	bpl.n	8005ebe <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 8005eb4:	9b01      	ldr	r3, [sp, #4]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	d9f7      	bls.n	8005eae <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005ec4:	68cb      	ldr	r3, [r1, #12]
 8005ec6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005ec8:	bf4c      	ite	mi
 8005eca:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8005ecc:	2301      	movpl	r3, #1
 8005ece:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8005ed2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005ed4:	b16b      	cbz	r3, 8005ef2 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 8005ed6:	4620      	mov	r0, r4
}
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8005ede:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 8005ee0:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 8005ee2:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 8005ee4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hmdma);
 8005ee6:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8005eea:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f1      	bne.n	8005ed6 <HAL_MDMA_IRQHandler+0x14e>
}
 8005ef2:	b003      	add	sp, #12
 8005ef4:	bd30      	pop	{r4, r5, pc}
 8005ef6:	bf00      	nop
 8005ef8:	2400000c 	.word	0x2400000c
 8005efc:	adffffc0 	.word	0xadffffc0
 8005f00:	1b4e81b5 	.word	0x1b4e81b5

08005f04 <HAL_PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005f04:	4a10      	ldr	r2, [pc, #64]	@ (8005f48 <HAL_PWR_EnterSTOPMode+0x44>)
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	4303      	orrs	r3, r0
{
 8005f0e:	b410      	push	{r4}
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005f10:	6013      	str	r3, [r2, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005f12:	6913      	ldr	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f14:	4c0d      	ldr	r4, [pc, #52]	@ (8005f4c <HAL_PWR_EnterSTOPMode+0x48>)
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005f16:	f023 0305 	bic.w	r3, r3, #5
 8005f1a:	6113      	str	r3, [r2, #16]
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	6123      	str	r3, [r4, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f28:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005f2c:	2901      	cmp	r1, #1
 8005f2e:	d008      	beq.n	8005f42 <HAL_PWR_EnterSTOPMode+0x3e>
    __WFI ();
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8005f30:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f32:	4a06      	ldr	r2, [pc, #24]	@ (8005f4c <HAL_PWR_EnterSTOPMode+0x48>)
}
 8005f34:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f38:	6913      	ldr	r3, [r2, #16]
 8005f3a:	f023 0304 	bic.w	r3, r3, #4
 8005f3e:	6113      	str	r3, [r2, #16]
}
 8005f40:	4770      	bx	lr
    __WFI ();
 8005f42:	bf30      	wfi
 8005f44:	e7f5      	b.n	8005f32 <HAL_PWR_EnterSTOPMode+0x2e>
 8005f46:	bf00      	nop
 8005f48:	58024800 	.word	0x58024800
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f50:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f52:	4c10      	ldr	r4, [pc, #64]	@ (8005f94 <HAL_PWREx_ConfigSupply+0x44>)
 8005f54:	68e3      	ldr	r3, [r4, #12]
 8005f56:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f5a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f5c:	d105      	bne.n	8005f6a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	1a18      	subs	r0, r3, r0
 8005f64:	bf18      	it	ne
 8005f66:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005f68:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f6a:	f023 0307 	bic.w	r3, r3, #7
 8005f6e:	4303      	orrs	r3, r0
 8005f70:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8005f72:	f7fd ffa3 	bl	8003ebc <HAL_GetTick>
 8005f76:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f78:	e005      	b.n	8005f86 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f7a:	f7fd ff9f 	bl	8003ebc <HAL_GetTick>
 8005f7e:	1b40      	subs	r0, r0, r5
 8005f80:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005f84:	d804      	bhi.n	8005f90 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f86:	6863      	ldr	r3, [r4, #4]
 8005f88:	049b      	lsls	r3, r3, #18
 8005f8a:	d5f6      	bpl.n	8005f7a <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8005f8c:	2000      	movs	r0, #0
}
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005f90:	2001      	movs	r0, #1
}
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	58024800 	.word	0x58024800

08005f98 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f98:	4b33      	ldr	r3, [pc, #204]	@ (8006068 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8005f9a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f9c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f9e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fa0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8005fa2:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005fa8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005fac:	d036      	beq.n	800601c <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005fae:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fb2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fb6:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fba:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005fbe:	fb05 f202 	mul.w	r2, r5, r2
 8005fc2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fc8:	ee06 2a90 	vmov	s13, r2
 8005fcc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005fd0:	d002      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8005fd2:	2902      	cmp	r1, #2
 8005fd4:	d042      	beq.n	800605c <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8005fd6:	b319      	cbz	r1, 8006020 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800606c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8005fdc:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005ffa:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8006068 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006006:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006008:	ee07 3a10 	vmov	s14, r3
 800600c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006010:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006014:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006018:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800601c:	bc30      	pop	{r4, r5}
 800601e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	0692      	lsls	r2, r2, #26
 8006024:	d51d      	bpl.n	8006062 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006026:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006028:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800602c:	4a10      	ldr	r2, [pc, #64]	@ (8006070 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800602e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006030:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006034:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006038:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	ee06 2a10 	vmov	s12, r2
 8006042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006046:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800604a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800604e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8006052:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8006056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800605a:	e7d0      	b.n	8005ffe <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800605c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006074 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8006060:	e7bc      	b.n	8005fdc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006062:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006078 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8006066:	e7b9      	b.n	8005fdc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8006068:	58024400 	.word	0x58024400
 800606c:	4a742400 	.word	0x4a742400
 8006070:	03d09000 	.word	0x03d09000
 8006074:	4bbebc20 	.word	0x4bbebc20
 8006078:	4c742400 	.word	0x4c742400

0800607c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800607c:	2800      	cmp	r0, #0
 800607e:	f000 82dc 	beq.w	800663a <HAL_RCC_OscConfig+0x5be>
{
 8006082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006084:	6803      	ldr	r3, [r0, #0]
 8006086:	4604      	mov	r4, r0
 8006088:	07d9      	lsls	r1, r3, #31
 800608a:	d53b      	bpl.n	8006104 <HAL_RCC_OscConfig+0x88>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608c:	499e      	ldr	r1, [pc, #632]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 800608e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006090:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006092:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006096:	2a10      	cmp	r2, #16
 8006098:	f000 80e4 	beq.w	8006264 <HAL_RCC_OscConfig+0x1e8>
 800609c:	2a18      	cmp	r2, #24
 800609e:	f000 80dc 	beq.w	800625a <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a2:	6863      	ldr	r3, [r4, #4]
 80060a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a8:	d018      	beq.n	80060dc <HAL_RCC_OscConfig+0x60>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8154 	beq.w	8006358 <HAL_RCC_OscConfig+0x2dc>
 80060b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060b4:	f000 8270 	beq.w	8006598 <HAL_RCC_OscConfig+0x51c>
 80060b8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80060bc:	4b92      	ldr	r3, [pc, #584]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	f000 8211 	beq.w	80064e6 <HAL_RCC_OscConfig+0x46a>
 80060c4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80060d8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060da:	e004      	b.n	80060e6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060dc:	4a8a      	ldr	r2, [pc, #552]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80060e6:	f7fd fee9 	bl	8003ebc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060ea:	4e87      	ldr	r6, [pc, #540]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80060ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060ee:	e005      	b.n	80060fc <HAL_RCC_OscConfig+0x80>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060f0:	f7fd fee4 	bl	8003ebc <HAL_GetTick>
 80060f4:	1b40      	subs	r0, r0, r5
 80060f6:	2864      	cmp	r0, #100	@ 0x64
 80060f8:	f200 812c 	bhi.w	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060fc:	6833      	ldr	r3, [r6, #0]
 80060fe:	039b      	lsls	r3, r3, #14
 8006100:	d5f6      	bpl.n	80060f0 <HAL_RCC_OscConfig+0x74>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	079d      	lsls	r5, r3, #30
 8006106:	d464      	bmi.n	80061d2 <HAL_RCC_OscConfig+0x156>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006108:	06d9      	lsls	r1, r3, #27
 800610a:	d528      	bpl.n	800615e <HAL_RCC_OscConfig+0xe2>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800610c:	497e      	ldr	r1, [pc, #504]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 800610e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006110:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006112:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006116:	2a08      	cmp	r2, #8
 8006118:	f000 80b4 	beq.w	8006284 <HAL_RCC_OscConfig+0x208>
 800611c:	2a18      	cmp	r2, #24
 800611e:	f000 80ac 	beq.w	800627a <HAL_RCC_OscConfig+0x1fe>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006122:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8006124:	4d78      	ldr	r5, [pc, #480]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8152 	beq.w	80063d0 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_CSI_ENABLE();
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006132:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006134:	f7fd fec2 	bl	8003ebc <HAL_GetTick>
 8006138:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800613a:	e005      	b.n	8006148 <HAL_RCC_OscConfig+0xcc>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800613c:	f7fd febe 	bl	8003ebc <HAL_GetTick>
 8006140:	1b80      	subs	r0, r0, r6
 8006142:	2802      	cmp	r0, #2
 8006144:	f200 8106 	bhi.w	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	05db      	lsls	r3, r3, #23
 800614c:	d5f6      	bpl.n	800613c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800614e:	68eb      	ldr	r3, [r5, #12]
 8006150:	6a22      	ldr	r2, [r4, #32]
 8006152:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006156:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800615a:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	071d      	lsls	r5, r3, #28
 8006160:	d516      	bpl.n	8006190 <HAL_RCC_OscConfig+0x114>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006162:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8006164:	4d68      	ldr	r5, [pc, #416]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8110 	beq.w	800638c <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 800616c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8006174:	f7fd fea2 	bl	8003ebc <HAL_GetTick>
 8006178:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800617a:	e005      	b.n	8006188 <HAL_RCC_OscConfig+0x10c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800617c:	f7fd fe9e 	bl	8003ebc <HAL_GetTick>
 8006180:	1b80      	subs	r0, r0, r6
 8006182:	2802      	cmp	r0, #2
 8006184:	f200 80e6 	bhi.w	8006354 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006188:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800618a:	0798      	lsls	r0, r3, #30
 800618c:	d5f6      	bpl.n	800617c <HAL_RCC_OscConfig+0x100>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	069a      	lsls	r2, r3, #26
 8006192:	d516      	bpl.n	80061c2 <HAL_RCC_OscConfig+0x146>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006194:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8006196:	4d5c      	ldr	r5, [pc, #368]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8108 	beq.w	80063ae <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_HSI48_ENABLE();
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80061a6:	f7fd fe89 	bl	8003ebc <HAL_GetTick>
 80061aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ac:	e005      	b.n	80061ba <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061ae:	f7fd fe85 	bl	8003ebc <HAL_GetTick>
 80061b2:	1b80      	subs	r0, r0, r6
 80061b4:	2802      	cmp	r0, #2
 80061b6:	f200 80cd 	bhi.w	8006354 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	049f      	lsls	r7, r3, #18
 80061be:	d5f6      	bpl.n	80061ae <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	0759      	lsls	r1, r3, #29
 80061c4:	d46e      	bmi.n	80062a4 <HAL_RCC_OscConfig+0x228>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 80aa 	bne.w	8006322 <HAL_RCC_OscConfig+0x2a6>
  return HAL_OK;
 80061ce:	2000      	movs	r0, #0
}
 80061d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d2:	4a4d      	ldr	r2, [pc, #308]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 80061d4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061d6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061d8:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80061dc:	d122      	bne.n	8006224 <HAL_RCC_OscConfig+0x1a8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061de:	4b4a      	ldr	r3, [pc, #296]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061e0:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	0759      	lsls	r1, r3, #29
 80061e6:	d501      	bpl.n	80061ec <HAL_RCC_OscConfig+0x170>
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	d044      	beq.n	8006276 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061ec:	4d46      	ldr	r5, [pc, #280]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	f023 0319 	bic.w	r3, r3, #25
 80061f4:	4313      	orrs	r3, r2
 80061f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80061f8:	f7fd fe60 	bl	8003ebc <HAL_GetTick>
 80061fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061fe:	e005      	b.n	800620c <HAL_RCC_OscConfig+0x190>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006200:	f7fd fe5c 	bl	8003ebc <HAL_GetTick>
 8006204:	1b80      	subs	r0, r0, r6
 8006206:	2802      	cmp	r0, #2
 8006208:	f200 80a4 	bhi.w	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	075b      	lsls	r3, r3, #29
 8006210:	d5f6      	bpl.n	8006200 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006212:	686b      	ldr	r3, [r5, #4]
 8006214:	6922      	ldr	r2, [r4, #16]
 8006216:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800621a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800621e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	e771      	b.n	8006108 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006224:	2b18      	cmp	r3, #24
 8006226:	f000 80f6 	beq.w	8006416 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800622a:	4d37      	ldr	r5, [pc, #220]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800622c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800622e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006230:	2a00      	cmp	r2, #0
 8006232:	f000 80df 	beq.w	80063f4 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006236:	f023 0319 	bic.w	r3, r3, #25
 800623a:	4313      	orrs	r3, r2
 800623c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800623e:	f7fd fe3d 	bl	8003ebc <HAL_GetTick>
 8006242:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006244:	e005      	b.n	8006252 <HAL_RCC_OscConfig+0x1d6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006246:	f7fd fe39 	bl	8003ebc <HAL_GetTick>
 800624a:	1b80      	subs	r0, r0, r6
 800624c:	2802      	cmp	r0, #2
 800624e:	f200 8081 	bhi.w	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006252:	682b      	ldr	r3, [r5, #0]
 8006254:	075f      	lsls	r7, r3, #29
 8006256:	d5f6      	bpl.n	8006246 <HAL_RCC_OscConfig+0x1ca>
 8006258:	e7db      	b.n	8006212 <HAL_RCC_OscConfig+0x196>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800625a:	f001 0103 	and.w	r1, r1, #3
 800625e:	2902      	cmp	r1, #2
 8006260:	f47f af1f 	bne.w	80060a2 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006264:	4a28      	ldr	r2, [pc, #160]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	0392      	lsls	r2, r2, #14
 800626a:	f57f af4b 	bpl.w	8006104 <HAL_RCC_OscConfig+0x88>
 800626e:	6862      	ldr	r2, [r4, #4]
 8006270:	2a00      	cmp	r2, #0
 8006272:	f47f af47 	bne.w	8006104 <HAL_RCC_OscConfig+0x88>
    return HAL_ERROR;
 8006276:	2001      	movs	r0, #1
}
 8006278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800627a:	f001 0103 	and.w	r1, r1, #3
 800627e:	2901      	cmp	r1, #1
 8006280:	f47f af4f 	bne.w	8006122 <HAL_RCC_OscConfig+0xa6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006284:	4a20      	ldr	r2, [pc, #128]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	05d2      	lsls	r2, r2, #23
 800628a:	d502      	bpl.n	8006292 <HAL_RCC_OscConfig+0x216>
 800628c:	69e2      	ldr	r2, [r4, #28]
 800628e:	2a80      	cmp	r2, #128	@ 0x80
 8006290:	d1f1      	bne.n	8006276 <HAL_RCC_OscConfig+0x1fa>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006292:	491d      	ldr	r1, [pc, #116]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 8006294:	6a20      	ldr	r0, [r4, #32]
 8006296:	68ca      	ldr	r2, [r1, #12]
 8006298:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800629c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80062a0:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062a2:	e75c      	b.n	800615e <HAL_RCC_OscConfig+0xe2>
    PWR->CR1 |= PWR_CR1_DBP;
 80062a4:	4d19      	ldr	r5, [pc, #100]	@ (800630c <HAL_RCC_OscConfig+0x290>)
 80062a6:	682b      	ldr	r3, [r5, #0]
 80062a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ac:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80062ae:	f7fd fe05 	bl	8003ebc <HAL_GetTick>
 80062b2:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062b4:	e004      	b.n	80062c0 <HAL_RCC_OscConfig+0x244>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b6:	f7fd fe01 	bl	8003ebc <HAL_GetTick>
 80062ba:	1b80      	subs	r0, r0, r6
 80062bc:	2864      	cmp	r0, #100	@ 0x64
 80062be:	d849      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	05da      	lsls	r2, r3, #23
 80062c4:	d5f7      	bpl.n	80062b6 <HAL_RCC_OscConfig+0x23a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	f000 8196 	beq.w	80065fa <HAL_RCC_OscConfig+0x57e>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8176 	beq.w	80065c0 <HAL_RCC_OscConfig+0x544>
 80062d4:	2b05      	cmp	r3, #5
 80062d6:	f000 8196 	beq.w	8006606 <HAL_RCC_OscConfig+0x58a>
 80062da:	2b85      	cmp	r3, #133	@ 0x85
 80062dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
 80062de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062e0:	f000 819f 	beq.w	8006622 <HAL_RCC_OscConfig+0x5a6>
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80062ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062ec:	f022 0204 	bic.w	r2, r2, #4
 80062f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80062f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062f8:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80062fa:	f7fd fddf 	bl	8003ebc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062fe:	4e02      	ldr	r6, [pc, #8]	@ (8006308 <HAL_RCC_OscConfig+0x28c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006304:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x29e>
 8006308:	58024400 	.word	0x58024400
 800630c:	58024800 	.word	0x58024800
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006310:	f7fd fdd4 	bl	8003ebc <HAL_GetTick>
 8006314:	1b40      	subs	r0, r0, r5
 8006316:	42b8      	cmp	r0, r7
 8006318:	d81c      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800631a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800631c:	079b      	lsls	r3, r3, #30
 800631e:	d5f7      	bpl.n	8006310 <HAL_RCC_OscConfig+0x294>
 8006320:	e751      	b.n	80061c6 <HAL_RCC_OscConfig+0x14a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006322:	4da4      	ldr	r5, [pc, #656]	@ (80065b4 <HAL_RCC_OscConfig+0x538>)
 8006324:	692a      	ldr	r2, [r5, #16]
 8006326:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800632a:	2a18      	cmp	r2, #24
 800632c:	f000 80e7 	beq.w	80064fe <HAL_RCC_OscConfig+0x482>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006330:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006338:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633a:	d070      	beq.n	800641e <HAL_RCC_OscConfig+0x3a2>
        tickstart = HAL_GetTick();
 800633c:	f7fd fdbe 	bl	8003ebc <HAL_GetTick>
 8006340:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	019b      	lsls	r3, r3, #6
 8006346:	f57f af42 	bpl.w	80061ce <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634a:	f7fd fdb7 	bl	8003ebc <HAL_GetTick>
 800634e:	1b00      	subs	r0, r0, r4
 8006350:	2802      	cmp	r0, #2
 8006352:	d9f6      	bls.n	8006342 <HAL_RCC_OscConfig+0x2c6>
            return HAL_TIMEOUT;
 8006354:	2003      	movs	r0, #3
}
 8006356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006358:	4d96      	ldr	r5, [pc, #600]	@ (80065b4 <HAL_RCC_OscConfig+0x538>)
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006368:	602b      	str	r3, [r5, #0]
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006370:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006372:	f7fd fda3 	bl	8003ebc <HAL_GetTick>
 8006376:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006378:	e004      	b.n	8006384 <HAL_RCC_OscConfig+0x308>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800637a:	f7fd fd9f 	bl	8003ebc <HAL_GetTick>
 800637e:	1b80      	subs	r0, r0, r6
 8006380:	2864      	cmp	r0, #100	@ 0x64
 8006382:	d8e7      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	039f      	lsls	r7, r3, #14
 8006388:	d4f7      	bmi.n	800637a <HAL_RCC_OscConfig+0x2fe>
 800638a:	e6ba      	b.n	8006102 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800638c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800638e:	f023 0301 	bic.w	r3, r3, #1
 8006392:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8006394:	f7fd fd92 	bl	8003ebc <HAL_GetTick>
 8006398:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800639a:	e004      	b.n	80063a6 <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800639c:	f7fd fd8e 	bl	8003ebc <HAL_GetTick>
 80063a0:	1b80      	subs	r0, r0, r6
 80063a2:	2802      	cmp	r0, #2
 80063a4:	d8d6      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063a6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80063a8:	0799      	lsls	r1, r3, #30
 80063aa:	d4f7      	bmi.n	800639c <HAL_RCC_OscConfig+0x320>
 80063ac:	e6ef      	b.n	800618e <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSI48_DISABLE();
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063b4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80063b6:	f7fd fd81 	bl	8003ebc <HAL_GetTick>
 80063ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063bc:	e004      	b.n	80063c8 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063be:	f7fd fd7d 	bl	8003ebc <HAL_GetTick>
 80063c2:	1b80      	subs	r0, r0, r6
 80063c4:	2802      	cmp	r0, #2
 80063c6:	d8c5      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	0498      	lsls	r0, r3, #18
 80063cc:	d4f7      	bmi.n	80063be <HAL_RCC_OscConfig+0x342>
 80063ce:	e6f7      	b.n	80061c0 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_CSI_DISABLE();
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80063d8:	f7fd fd70 	bl	8003ebc <HAL_GetTick>
 80063dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063de:	e004      	b.n	80063ea <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063e0:	f7fd fd6c 	bl	8003ebc <HAL_GetTick>
 80063e4:	1b80      	subs	r0, r0, r6
 80063e6:	2802      	cmp	r0, #2
 80063e8:	d8b4      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	05df      	lsls	r7, r3, #23
 80063ee:	d4f7      	bmi.n	80063e0 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	e6b4      	b.n	800615e <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80063fa:	f7fd fd5f 	bl	8003ebc <HAL_GetTick>
 80063fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006400:	e004      	b.n	800640c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006402:	f7fd fd5b 	bl	8003ebc <HAL_GetTick>
 8006406:	1b80      	subs	r0, r0, r6
 8006408:	2802      	cmp	r0, #2
 800640a:	d8a3      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	0758      	lsls	r0, r3, #29
 8006410:	d4f7      	bmi.n	8006402 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	e678      	b.n	8006108 <HAL_RCC_OscConfig+0x8c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006416:	0790      	lsls	r0, r2, #30
 8006418:	f47f af07 	bne.w	800622a <HAL_RCC_OscConfig+0x1ae>
 800641c:	e6df      	b.n	80061de <HAL_RCC_OscConfig+0x162>
        tickstart = HAL_GetTick();
 800641e:	f7fd fd4d 	bl	8003ebc <HAL_GetTick>
 8006422:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006424:	e004      	b.n	8006430 <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fd fd49 	bl	8003ebc <HAL_GetTick>
 800642a:	1b80      	subs	r0, r0, r6
 800642c:	2802      	cmp	r0, #2
 800642e:	d891      	bhi.n	8006354 <HAL_RCC_OscConfig+0x2d8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	0199      	lsls	r1, r3, #6
 8006434:	d4f7      	bmi.n	8006426 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006436:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8006438:	4b5f      	ldr	r3, [pc, #380]	@ (80065b8 <HAL_RCC_OscConfig+0x53c>)
 800643a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800643c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800643e:	495f      	ldr	r1, [pc, #380]	@ (80065bc <HAL_RCC_OscConfig+0x540>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006440:	4e5c      	ldr	r6, [pc, #368]	@ (80065b4 <HAL_RCC_OscConfig+0x538>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006442:	4313      	orrs	r3, r2
 8006444:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006446:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800644a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800644c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8006450:	3b01      	subs	r3, #1
 8006452:	3a01      	subs	r2, #1
 8006454:	025b      	lsls	r3, r3, #9
 8006456:	0412      	lsls	r2, r2, #16
 8006458:	b29b      	uxth	r3, r3
 800645a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800645e:	4313      	orrs	r3, r2
 8006460:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006462:	3a01      	subs	r2, #1
 8006464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006468:	4313      	orrs	r3, r2
 800646a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800646c:	3a01      	subs	r2, #1
 800646e:	0612      	lsls	r2, r2, #24
 8006470:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006474:	4313      	orrs	r3, r2
 8006476:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8006478:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006480:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8006482:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006484:	4011      	ands	r1, r2
 8006486:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800648a:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800648c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800648e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006490:	f023 030c 	bic.w	r3, r3, #12
 8006494:	4313      	orrs	r3, r2
 8006496:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006498:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800649a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800649c:	f023 0302 	bic.w	r3, r3, #2
 80064a0:	4313      	orrs	r3, r2
 80064a2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064a4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80064a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064aa:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ac:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80064ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064b4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80064b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064ba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80064bc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80064cc:	f7fd fcf6 	bl	8003ebc <HAL_GetTick>
 80064d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064d2:	6833      	ldr	r3, [r6, #0]
 80064d4:	019a      	lsls	r2, r3, #6
 80064d6:	f53f ae7a 	bmi.w	80061ce <HAL_RCC_OscConfig+0x152>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064da:	f7fd fcef 	bl	8003ebc <HAL_GetTick>
 80064de:	1b00      	subs	r0, r0, r4
 80064e0:	2802      	cmp	r0, #2
 80064e2:	d9f6      	bls.n	80064d2 <HAL_RCC_OscConfig+0x456>
 80064e4:	e736      	b.n	8006354 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064e6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80064fa:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064fc:	e5f3      	b.n	80060e6 <HAL_RCC_OscConfig+0x6a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064fe:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006500:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006502:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006504:	f43f aeb7 	beq.w	8006276 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006508:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800650c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800650e:	428b      	cmp	r3, r1
 8006510:	f47f aeb1 	bne.w	8006276 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006514:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006518:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800651a:	429a      	cmp	r2, r3
 800651c:	f47f aeab 	bne.w	8006276 <HAL_RCC_OscConfig+0x1fa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006520:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006522:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8006526:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006528:	429a      	cmp	r2, r3
 800652a:	f47f aea4 	bne.w	8006276 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800652e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006530:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8006534:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006536:	429a      	cmp	r2, r3
 8006538:	f47f ae9d 	bne.w	8006276 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800653c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800653e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8006542:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006544:	429a      	cmp	r2, r3
 8006546:	f47f ae96 	bne.w	8006276 <HAL_RCC_OscConfig+0x1fa>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800654a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800654c:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8006550:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006552:	4298      	cmp	r0, r3
 8006554:	f47f ae8f 	bne.w	8006276 <HAL_RCC_OscConfig+0x1fa>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006558:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800655a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800655c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006560:	429a      	cmp	r2, r3
 8006562:	f43f ae34 	beq.w	80061ce <HAL_RCC_OscConfig+0x152>
          __HAL_RCC_PLLFRACN_DISABLE();
 8006566:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <HAL_RCC_OscConfig+0x538>)
 8006568:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8006570:	f7fd fca4 	bl	8003ebc <HAL_GetTick>
 8006574:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006576:	f7fd fca1 	bl	8003ebc <HAL_GetTick>
 800657a:	42a8      	cmp	r0, r5
 800657c:	d0fb      	beq.n	8006576 <HAL_RCC_OscConfig+0x4fa>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800657e:	4a0d      	ldr	r2, [pc, #52]	@ (80065b4 <HAL_RCC_OscConfig+0x538>)
 8006580:	4b0e      	ldr	r3, [pc, #56]	@ (80065bc <HAL_RCC_OscConfig+0x540>)
 8006582:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8006584:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006586:	4003      	ands	r3, r0
 8006588:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800658c:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800658e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006596:	e61a      	b.n	80061ce <HAL_RCC_OscConfig+0x152>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006598:	4b06      	ldr	r3, [pc, #24]	@ (80065b4 <HAL_RCC_OscConfig+0x538>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80065b0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065b2:	e598      	b.n	80060e6 <HAL_RCC_OscConfig+0x6a>
 80065b4:	58024400 	.word	0x58024400
 80065b8:	fffffc0c 	.word	0xfffffc0c
 80065bc:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065c0:	4d1f      	ldr	r5, [pc, #124]	@ (8006640 <HAL_RCC_OscConfig+0x5c4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065c6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	672b      	str	r3, [r5, #112]	@ 0x70
 80065ce:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80065d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d4:	672b      	str	r3, [r5, #112]	@ 0x70
 80065d6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80065d8:	f023 0304 	bic.w	r3, r3, #4
 80065dc:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80065de:	f7fd fc6d 	bl	8003ebc <HAL_GetTick>
 80065e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065e4:	e005      	b.n	80065f2 <HAL_RCC_OscConfig+0x576>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e6:	f7fd fc69 	bl	8003ebc <HAL_GetTick>
 80065ea:	1b80      	subs	r0, r0, r6
 80065ec:	42b8      	cmp	r0, r7
 80065ee:	f63f aeb1 	bhi.w	8006354 <HAL_RCC_OscConfig+0x2d8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065f2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80065f4:	0798      	lsls	r0, r3, #30
 80065f6:	d4f6      	bmi.n	80065e6 <HAL_RCC_OscConfig+0x56a>
 80065f8:	e5e5      	b.n	80061c6 <HAL_RCC_OscConfig+0x14a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065fa:	4a11      	ldr	r2, [pc, #68]	@ (8006640 <HAL_RCC_OscConfig+0x5c4>)
 80065fc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006604:	e679      	b.n	80062fa <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006606:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <HAL_RCC_OscConfig+0x5c4>)
 8006608:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800660a:	f042 0204 	orr.w	r2, r2, #4
 800660e:	671a      	str	r2, [r3, #112]	@ 0x70
 8006610:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006616:	671a      	str	r2, [r3, #112]	@ 0x70
 8006618:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006620:	e66b      	b.n	80062fa <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006622:	f042 0204 	orr.w	r2, r2, #4
 8006626:	671a      	str	r2, [r3, #112]	@ 0x70
 8006628:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800662a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800662e:	671a      	str	r2, [r3, #112]	@ 0x70
 8006630:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006638:	e65f      	b.n	80062fa <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 800663a:	2001      	movs	r0, #1
}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	58024400 	.word	0x58024400

08006644 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006644:	4a3f      	ldr	r2, [pc, #252]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x100>)
 8006646:	6913      	ldr	r3, [r2, #16]
 8006648:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800664c:	2b10      	cmp	r3, #16
 800664e:	d004      	beq.n	800665a <HAL_RCC_GetSysClockFreq+0x16>
 8006650:	2b18      	cmp	r3, #24
 8006652:	d00d      	beq.n	8006670 <HAL_RCC_GetSysClockFreq+0x2c>
 8006654:	b11b      	cbz	r3, 800665e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8006656:	483c      	ldr	r0, [pc, #240]	@ (8006748 <HAL_RCC_GetSysClockFreq+0x104>)
 8006658:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800665a:	483c      	ldr	r0, [pc, #240]	@ (800674c <HAL_RCC_GetSysClockFreq+0x108>)
 800665c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800665e:	6813      	ldr	r3, [r2, #0]
 8006660:	0699      	lsls	r1, r3, #26
 8006662:	d548      	bpl.n	80066f6 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006664:	6813      	ldr	r3, [r2, #0]
 8006666:	483a      	ldr	r0, [pc, #232]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006668:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800666c:	40d8      	lsrs	r0, r3
 800666e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006670:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8006672:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006674:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006676:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8006678:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800667c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800667e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006682:	d036      	beq.n	80066f2 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006684:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006688:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800668c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006690:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006694:	fb05 f303 	mul.w	r3, r5, r3
 8006698:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800669a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800669e:	ee06 3a90 	vmov	s13, r3
 80066a2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80066a6:	d002      	beq.n	80066ae <HAL_RCC_GetSysClockFreq+0x6a>
 80066a8:	2902      	cmp	r1, #2
 80066aa:	d026      	beq.n	80066fa <HAL_RCC_GetSysClockFreq+0xb6>
 80066ac:	b341      	cbz	r1, 8006700 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ae:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006754 <HAL_RCC_GetSysClockFreq+0x110>
 80066b2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80066b6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80066b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066bc:	ee07 3a10 	vmov	s14, r3
 80066c0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80066c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80066c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80066cc:	ee37 7a25 	vadd.f32	s14, s14, s11
 80066d0:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80066d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006744 <HAL_RCC_GetSysClockFreq+0x100>)
 80066d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80066dc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80066e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ee:	ee17 0a90 	vmov	r0, s15
}
 80066f2:	bc30      	pop	{r4, r5}
 80066f4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066f6:	4816      	ldr	r0, [pc, #88]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 80066f8:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066fa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006758 <HAL_RCC_GetSysClockFreq+0x114>
 80066fe:	e7d8      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006700:	6813      	ldr	r3, [r2, #0]
 8006702:	069b      	lsls	r3, r3, #26
 8006704:	d51a      	bpl.n	800673c <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006706:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006708:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800670c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800670e:	4910      	ldr	r1, [pc, #64]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006710:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006718:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800671a:	ee07 3a10 	vmov	s14, r3
 800671e:	ee06 1a10 	vmov	s12, r1
 8006722:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006726:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800672a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800672e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8006732:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8006736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800673a:	e7cb      	b.n	80066d4 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800673c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800675c <HAL_RCC_GetSysClockFreq+0x118>
 8006740:	e7b7      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x6e>
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
 8006748:	003d0900 	.word	0x003d0900
 800674c:	017d7840 	.word	0x017d7840
 8006750:	03d09000 	.word	0x03d09000
 8006754:	4a742400 	.word	0x4a742400
 8006758:	4bbebc20 	.word	0x4bbebc20
 800675c:	4c742400 	.word	0x4c742400

08006760 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006760:	2800      	cmp	r0, #0
 8006762:	f000 810e 	beq.w	8006982 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006766:	4a8d      	ldr	r2, [pc, #564]	@ (800699c <HAL_RCC_ClockConfig+0x23c>)
 8006768:	6813      	ldr	r3, [r2, #0]
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	428b      	cmp	r3, r1
{
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006778:	d20c      	bcs.n	8006794 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	f023 030f 	bic.w	r3, r3, #15
 8006780:	430b      	orrs	r3, r1
 8006782:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006784:	6813      	ldr	r3, [r2, #0]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	428b      	cmp	r3, r1
 800678c:	d002      	beq.n	8006794 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800678e:	2001      	movs	r0, #1
}
 8006790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	0758      	lsls	r0, r3, #29
 8006798:	d50b      	bpl.n	80067b2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800679a:	4981      	ldr	r1, [pc, #516]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 800679c:	6920      	ldr	r0, [r4, #16]
 800679e:	698a      	ldr	r2, [r1, #24]
 80067a0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80067a4:	4290      	cmp	r0, r2
 80067a6:	d904      	bls.n	80067b2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a8:	698a      	ldr	r2, [r1, #24]
 80067aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80067ae:	4302      	orrs	r2, r0
 80067b0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b2:	0719      	lsls	r1, r3, #28
 80067b4:	d50b      	bpl.n	80067ce <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80067b6:	497a      	ldr	r1, [pc, #488]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 80067b8:	6960      	ldr	r0, [r4, #20]
 80067ba:	69ca      	ldr	r2, [r1, #28]
 80067bc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80067c0:	4290      	cmp	r0, r2
 80067c2:	d904      	bls.n	80067ce <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067c4:	69ca      	ldr	r2, [r1, #28]
 80067c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80067ca:	4302      	orrs	r2, r0
 80067cc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ce:	06da      	lsls	r2, r3, #27
 80067d0:	d50b      	bpl.n	80067ea <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80067d2:	4973      	ldr	r1, [pc, #460]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 80067d4:	69a0      	ldr	r0, [r4, #24]
 80067d6:	69ca      	ldr	r2, [r1, #28]
 80067d8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80067dc:	4290      	cmp	r0, r2
 80067de:	d904      	bls.n	80067ea <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067e0:	69ca      	ldr	r2, [r1, #28]
 80067e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80067e6:	4302      	orrs	r2, r0
 80067e8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ea:	069f      	lsls	r7, r3, #26
 80067ec:	d50b      	bpl.n	8006806 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80067ee:	496c      	ldr	r1, [pc, #432]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 80067f0:	69e0      	ldr	r0, [r4, #28]
 80067f2:	6a0a      	ldr	r2, [r1, #32]
 80067f4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80067f8:	4290      	cmp	r0, r2
 80067fa:	d904      	bls.n	8006806 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067fc:	6a0a      	ldr	r2, [r1, #32]
 80067fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006802:	4302      	orrs	r2, r0
 8006804:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006806:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006808:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680c:	f140 80ab 	bpl.w	8006966 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006810:	4e63      	ldr	r6, [pc, #396]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006812:	68e0      	ldr	r0, [r4, #12]
 8006814:	69b1      	ldr	r1, [r6, #24]
 8006816:	f001 010f 	and.w	r1, r1, #15
 800681a:	4288      	cmp	r0, r1
 800681c:	d904      	bls.n	8006828 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800681e:	69b1      	ldr	r1, [r6, #24]
 8006820:	f021 010f 	bic.w	r1, r1, #15
 8006824:	4301      	orrs	r1, r0
 8006826:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006828:	2a00      	cmp	r2, #0
 800682a:	d030      	beq.n	800688e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800682c:	4a5c      	ldr	r2, [pc, #368]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 800682e:	68a1      	ldr	r1, [r4, #8]
 8006830:	6993      	ldr	r3, [r2, #24]
 8006832:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006836:	430b      	orrs	r3, r1
 8006838:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800683c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683e:	2902      	cmp	r1, #2
 8006840:	f000 80a1 	beq.w	8006986 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006844:	2903      	cmp	r1, #3
 8006846:	f000 8098 	beq.w	800697a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800684a:	2901      	cmp	r1, #1
 800684c:	f000 80a1 	beq.w	8006992 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006850:	075f      	lsls	r7, r3, #29
 8006852:	d59c      	bpl.n	800678e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006854:	4e52      	ldr	r6, [pc, #328]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006856:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800685a:	6933      	ldr	r3, [r6, #16]
 800685c:	f023 0307 	bic.w	r3, r3, #7
 8006860:	430b      	orrs	r3, r1
 8006862:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8006864:	f7fd fb2a 	bl	8003ebc <HAL_GetTick>
 8006868:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	e005      	b.n	8006878 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686c:	f7fd fb26 	bl	8003ebc <HAL_GetTick>
 8006870:	1bc0      	subs	r0, r0, r7
 8006872:	4540      	cmp	r0, r8
 8006874:	f200 808b 	bhi.w	800698e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006878:	6933      	ldr	r3, [r6, #16]
 800687a:	6862      	ldr	r2, [r4, #4]
 800687c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006880:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006884:	d1f2      	bne.n	800686c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	079e      	lsls	r6, r3, #30
 800688a:	d506      	bpl.n	800689a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800688c:	68e0      	ldr	r0, [r4, #12]
 800688e:	4944      	ldr	r1, [pc, #272]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006890:	698a      	ldr	r2, [r1, #24]
 8006892:	f002 020f 	and.w	r2, r2, #15
 8006896:	4282      	cmp	r2, r0
 8006898:	d869      	bhi.n	800696e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800689a:	4940      	ldr	r1, [pc, #256]	@ (800699c <HAL_RCC_ClockConfig+0x23c>)
 800689c:	680a      	ldr	r2, [r1, #0]
 800689e:	f002 020f 	and.w	r2, r2, #15
 80068a2:	42aa      	cmp	r2, r5
 80068a4:	d90a      	bls.n	80068bc <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a6:	680a      	ldr	r2, [r1, #0]
 80068a8:	f022 020f 	bic.w	r2, r2, #15
 80068ac:	432a      	orrs	r2, r5
 80068ae:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b0:	680a      	ldr	r2, [r1, #0]
 80068b2:	f002 020f 	and.w	r2, r2, #15
 80068b6:	42aa      	cmp	r2, r5
 80068b8:	f47f af69 	bne.w	800678e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068bc:	0758      	lsls	r0, r3, #29
 80068be:	d50b      	bpl.n	80068d8 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80068c0:	4937      	ldr	r1, [pc, #220]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 80068c2:	6920      	ldr	r0, [r4, #16]
 80068c4:	698a      	ldr	r2, [r1, #24]
 80068c6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80068ca:	4290      	cmp	r0, r2
 80068cc:	d204      	bcs.n	80068d8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068ce:	698a      	ldr	r2, [r1, #24]
 80068d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80068d4:	4302      	orrs	r2, r0
 80068d6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d8:	0719      	lsls	r1, r3, #28
 80068da:	d50b      	bpl.n	80068f4 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80068dc:	4930      	ldr	r1, [pc, #192]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 80068de:	6960      	ldr	r0, [r4, #20]
 80068e0:	69ca      	ldr	r2, [r1, #28]
 80068e2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80068e6:	4290      	cmp	r0, r2
 80068e8:	d204      	bcs.n	80068f4 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068ea:	69ca      	ldr	r2, [r1, #28]
 80068ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80068f0:	4302      	orrs	r2, r0
 80068f2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f4:	06da      	lsls	r2, r3, #27
 80068f6:	d50b      	bpl.n	8006910 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80068f8:	4929      	ldr	r1, [pc, #164]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 80068fa:	69a0      	ldr	r0, [r4, #24]
 80068fc:	69ca      	ldr	r2, [r1, #28]
 80068fe:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006902:	4290      	cmp	r0, r2
 8006904:	d204      	bcs.n	8006910 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006906:	69ca      	ldr	r2, [r1, #28]
 8006908:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800690c:	4302      	orrs	r2, r0
 800690e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006910:	069b      	lsls	r3, r3, #26
 8006912:	d50b      	bpl.n	800692c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006914:	4a22      	ldr	r2, [pc, #136]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006916:	69e1      	ldr	r1, [r4, #28]
 8006918:	6a13      	ldr	r3, [r2, #32]
 800691a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800691e:	4299      	cmp	r1, r3
 8006920:	d204      	bcs.n	800692c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006922:	6a13      	ldr	r3, [r2, #32]
 8006924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006928:	430b      	orrs	r3, r1
 800692a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800692c:	f7ff fe8a 	bl	8006644 <HAL_RCC_GetSysClockFreq>
 8006930:	4a1b      	ldr	r2, [pc, #108]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006932:	4603      	mov	r3, r0
 8006934:	481b      	ldr	r0, [pc, #108]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006936:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006938:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800693a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800693e:	4d1a      	ldr	r5, [pc, #104]	@ (80069a8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006940:	f002 020f 	and.w	r2, r2, #15
 8006944:	4c19      	ldr	r4, [pc, #100]	@ (80069ac <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006946:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006948:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800694a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800694e:	4818      	ldr	r0, [pc, #96]	@ (80069b0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006950:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006954:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8006956:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8006958:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800695a:	40d3      	lsrs	r3, r2
 800695c:	6023      	str	r3, [r4, #0]
}
 800695e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8006962:	f7fd ba49 	b.w	8003df8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006966:	2a00      	cmp	r2, #0
 8006968:	f47f af60 	bne.w	800682c <HAL_RCC_ClockConfig+0xcc>
 800696c:	e795      	b.n	800689a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800696e:	698a      	ldr	r2, [r1, #24]
 8006970:	f022 020f 	bic.w	r2, r2, #15
 8006974:	4302      	orrs	r2, r0
 8006976:	618a      	str	r2, [r1, #24]
 8006978:	e78f      	b.n	800689a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800697a:	019a      	lsls	r2, r3, #6
 800697c:	f53f af6a 	bmi.w	8006854 <HAL_RCC_ClockConfig+0xf4>
 8006980:	e705      	b.n	800678e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006982:	2001      	movs	r0, #1
}
 8006984:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006986:	0398      	lsls	r0, r3, #14
 8006988:	f53f af64 	bmi.w	8006854 <HAL_RCC_ClockConfig+0xf4>
 800698c:	e6ff      	b.n	800678e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800698e:	2003      	movs	r0, #3
 8006990:	e6fe      	b.n	8006790 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	f53f af5e 	bmi.w	8006854 <HAL_RCC_ClockConfig+0xf4>
 8006998:	e6f9      	b.n	800678e <HAL_RCC_ClockConfig+0x2e>
 800699a:	bf00      	nop
 800699c:	52002000 	.word	0x52002000
 80069a0:	58024400 	.word	0x58024400
 80069a4:	0800d4f8 	.word	0x0800d4f8
 80069a8:	2400000c 	.word	0x2400000c
 80069ac:	24000008 	.word	0x24000008
 80069b0:	24000014 	.word	0x24000014

080069b4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069b4:	4a18      	ldr	r2, [pc, #96]	@ (8006a18 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069b8:	6913      	ldr	r3, [r2, #16]
 80069ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069be:	2b10      	cmp	r3, #16
 80069c0:	d019      	beq.n	80069f6 <HAL_RCC_GetHCLKFreq+0x42>
 80069c2:	2b18      	cmp	r3, #24
 80069c4:	d022      	beq.n	8006a0c <HAL_RCC_GetHCLKFreq+0x58>
 80069c6:	b1c3      	cbz	r3, 80069fa <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 80069c8:	4b14      	ldr	r3, [pc, #80]	@ (8006a1c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80069ca:	4913      	ldr	r1, [pc, #76]	@ (8006a18 <HAL_RCC_GetHCLKFreq+0x64>)
 80069cc:	4814      	ldr	r0, [pc, #80]	@ (8006a20 <HAL_RCC_GetHCLKFreq+0x6c>)
 80069ce:	698a      	ldr	r2, [r1, #24]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069d0:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80069d2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069d6:	4c13      	ldr	r4, [pc, #76]	@ (8006a24 <HAL_RCC_GetHCLKFreq+0x70>)
 80069d8:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069dc:	4d12      	ldr	r5, [pc, #72]	@ (8006a28 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80069de:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069e0:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80069e2:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069e6:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80069ea:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069ec:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80069f0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80069f2:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80069f4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069f6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <HAL_RCC_GetHCLKFreq+0x78>)
 80069f8:	e7e7      	b.n	80069ca <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	069b      	lsls	r3, r3, #26
 80069fe:	d509      	bpl.n	8006a14 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	4b0b      	ldr	r3, [pc, #44]	@ (8006a30 <HAL_RCC_GetHCLKFreq+0x7c>)
 8006a04:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006a08:	40d3      	lsrs	r3, r2
 8006a0a:	e7de      	b.n	80069ca <HAL_RCC_GetHCLKFreq+0x16>
 8006a0c:	f7ff fac4 	bl	8005f98 <HAL_RCC_GetSysClockFreq.part.0>
 8006a10:	4603      	mov	r3, r0
 8006a12:	e7da      	b.n	80069ca <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a14:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <HAL_RCC_GetHCLKFreq+0x7c>)
 8006a16:	e7d8      	b.n	80069ca <HAL_RCC_GetHCLKFreq+0x16>
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	003d0900 	.word	0x003d0900
 8006a20:	0800d4f8 	.word	0x0800d4f8
 8006a24:	24000008 	.word	0x24000008
 8006a28:	2400000c 	.word	0x2400000c
 8006a2c:	017d7840 	.word	0x017d7840
 8006a30:	03d09000 	.word	0x03d09000

08006a34 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a36:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a38:	6913      	ldr	r3, [r2, #16]
 8006a3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	d020      	beq.n	8006a84 <HAL_RCC_GetPCLK1Freq+0x50>
 8006a42:	2b18      	cmp	r3, #24
 8006a44:	d029      	beq.n	8006a9a <HAL_RCC_GetPCLK1Freq+0x66>
 8006a46:	b1fb      	cbz	r3, 8006a88 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8006a48:	4b18      	ldr	r3, [pc, #96]	@ (8006aac <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006a4a:	4a17      	ldr	r2, [pc, #92]	@ (8006aa8 <HAL_RCC_GetPCLK1Freq+0x74>)
 8006a4c:	4918      	ldr	r1, [pc, #96]	@ (8006ab0 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8006a4e:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8006a50:	4d18      	ldr	r5, [pc, #96]	@ (8006ab4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006a52:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a56:	4c18      	ldr	r4, [pc, #96]	@ (8006ab8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006a58:	5c08      	ldrb	r0, [r1, r0]
 8006a5a:	f000 001f 	and.w	r0, r0, #31
 8006a5e:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a60:	6990      	ldr	r0, [r2, #24]
 8006a62:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8006a66:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a68:	5c08      	ldrb	r0, [r1, r0]
 8006a6a:	f000 001f 	and.w	r0, r0, #31
 8006a6e:	40c3      	lsrs	r3, r0
 8006a70:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006a72:	69d2      	ldr	r2, [r2, #28]
 8006a74:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006a78:	5c88      	ldrb	r0, [r1, r2]
 8006a7a:	f000 001f 	and.w	r0, r0, #31
#endif
}
 8006a7e:	fa23 f000 	lsr.w	r0, r3, r0
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a84:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <HAL_RCC_GetPCLK1Freq+0x88>)
 8006a86:	e7e0      	b.n	8006a4a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a88:	6813      	ldr	r3, [r2, #0]
 8006a8a:	069b      	lsls	r3, r3, #26
 8006a8c:	d509      	bpl.n	8006aa2 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a8e:	6812      	ldr	r2, [r2, #0]
 8006a90:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8006a92:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006a96:	40d3      	lsrs	r3, r2
 8006a98:	e7d7      	b.n	8006a4a <HAL_RCC_GetPCLK1Freq+0x16>
 8006a9a:	f7ff fa7d 	bl	8005f98 <HAL_RCC_GetSysClockFreq.part.0>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	e7d3      	b.n	8006a4a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006aa2:	4b07      	ldr	r3, [pc, #28]	@ (8006ac0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8006aa4:	e7d1      	b.n	8006a4a <HAL_RCC_GetPCLK1Freq+0x16>
 8006aa6:	bf00      	nop
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	003d0900 	.word	0x003d0900
 8006ab0:	0800d4f8 	.word	0x0800d4f8
 8006ab4:	2400000c 	.word	0x2400000c
 8006ab8:	24000008 	.word	0x24000008
 8006abc:	017d7840 	.word	0x017d7840
 8006ac0:	03d09000 	.word	0x03d09000

08006ac4 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ac6:	4c36      	ldr	r4, [pc, #216]	@ (8006ba0 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ad2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad4:	f7fd f9f2 	bl	8003ebc <HAL_GetTick>
 8006ad8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ada:	e004      	b.n	8006ae6 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006adc:	f7fd f9ee 	bl	8003ebc <HAL_GetTick>
 8006ae0:	1b40      	subs	r0, r0, r5
 8006ae2:	2802      	cmp	r0, #2
 8006ae4:	d856      	bhi.n	8006b94 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	011a      	lsls	r2, r3, #4
 8006aea:	d4f7      	bmi.n	8006adc <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006aec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006aee:	6832      	ldr	r2, [r6, #0]
 8006af0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006af4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006af8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006afa:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	3a01      	subs	r2, #1
 8006b02:	025b      	lsls	r3, r3, #9
 8006b04:	0412      	lsls	r2, r2, #16
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	6872      	ldr	r2, [r6, #4]
 8006b10:	3a01      	subs	r2, #1
 8006b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b16:	4313      	orrs	r3, r2
 8006b18:	6932      	ldr	r2, [r6, #16]
 8006b1a:	3a01      	subs	r2, #1
 8006b1c:	0612      	lsls	r2, r2, #24
 8006b1e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006b22:	4313      	orrs	r3, r2
 8006b24:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006b28:	6972      	ldr	r2, [r6, #20]
 8006b2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006b34:	69b3      	ldr	r3, [r6, #24]
 8006b36:	f022 0220 	bic.w	r2, r2, #32
 8006b3a:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ba4 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b3e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b40:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006b42:	f022 0210 	bic.w	r2, r2, #16
 8006b46:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b48:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006b4a:	69f2      	ldr	r2, [r6, #28]
 8006b4c:	400b      	ands	r3, r1
 8006b4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006b52:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006b56:	f043 0310 	orr.w	r3, r3, #16
 8006b5a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b5c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006b5e:	b1df      	cbz	r7, 8006b98 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b60:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b62:	bf0c      	ite	eq
 8006b64:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b68:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8006b6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ba0 <RCCEx_PLL2_Config.part.0+0xdc>)
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b76:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b78:	f7fd f9a0 	bl	8003ebc <HAL_GetTick>
 8006b7c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b7e:	e004      	b.n	8006b8a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b80:	f7fd f99c 	bl	8003ebc <HAL_GetTick>
 8006b84:	1b40      	subs	r0, r0, r5
 8006b86:	2802      	cmp	r0, #2
 8006b88:	d804      	bhi.n	8006b94 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	d5f7      	bpl.n	8006b80 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8006b90:	2000      	movs	r0, #0
}
 8006b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006b94:	2003      	movs	r0, #3
}
 8006b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b9e:	e7e6      	b.n	8006b6e <RCCEx_PLL2_Config.part.0+0xaa>
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	ffff0007 	.word	0xffff0007

08006ba8 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006baa:	4c36      	ldr	r4, [pc, #216]	@ (8006c84 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006bac:	4606      	mov	r6, r0
 8006bae:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bb6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb8:	f7fd f980 	bl	8003ebc <HAL_GetTick>
 8006bbc:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bbe:	e004      	b.n	8006bca <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bc0:	f7fd f97c 	bl	8003ebc <HAL_GetTick>
 8006bc4:	1b40      	subs	r0, r0, r5
 8006bc6:	2802      	cmp	r0, #2
 8006bc8:	d856      	bhi.n	8006c78 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	009a      	lsls	r2, r3, #2
 8006bce:	d4f7      	bmi.n	8006bc0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006bd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006bd2:	6832      	ldr	r2, [r6, #0]
 8006bd4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006bd8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006bdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bde:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	3a01      	subs	r2, #1
 8006be6:	025b      	lsls	r3, r3, #9
 8006be8:	0412      	lsls	r2, r2, #16
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	6872      	ldr	r2, [r6, #4]
 8006bf4:	3a01      	subs	r2, #1
 8006bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	6932      	ldr	r2, [r6, #16]
 8006bfe:	3a01      	subs	r2, #1
 8006c00:	0612      	lsls	r2, r2, #24
 8006c02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006c06:	4313      	orrs	r3, r2
 8006c08:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006c0c:	6972      	ldr	r2, [r6, #20]
 8006c0e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006c12:	4313      	orrs	r3, r2
 8006c14:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006c18:	69b3      	ldr	r3, [r6, #24]
 8006c1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c1e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c20:	4b19      	ldr	r3, [pc, #100]	@ (8006c88 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c22:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006c26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c2a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006c2e:	69f2      	ldr	r2, [r6, #28]
 8006c30:	400b      	ands	r3, r1
 8006c32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006c36:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006c42:	b1df      	cbz	r7, 8006c7c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c44:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c46:	bf0c      	ite	eq
 8006c48:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c4c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8006c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c52:	4c0c      	ldr	r4, [pc, #48]	@ (8006c84 <RCCEx_PLL3_Config.part.0+0xdc>)
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c5c:	f7fd f92e 	bl	8003ebc <HAL_GetTick>
 8006c60:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c62:	e004      	b.n	8006c6e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c64:	f7fd f92a 	bl	8003ebc <HAL_GetTick>
 8006c68:	1b40      	subs	r0, r0, r5
 8006c6a:	2802      	cmp	r0, #2
 8006c6c:	d804      	bhi.n	8006c78 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	d5f7      	bpl.n	8006c64 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8006c74:	2000      	movs	r0, #0
}
 8006c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006c78:	2003      	movs	r0, #3
}
 8006c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006c80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c82:	e7e6      	b.n	8006c52 <RCCEx_PLL3_Config.part.0+0xaa>
 8006c84:	58024400 	.word	0x58024400
 8006c88:	ffff0007 	.word	0xffff0007

08006c8c <HAL_RCCEx_PeriphCLKConfig>:
{
 8006c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c90:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8006c94:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c96:	0118      	lsls	r0, r3, #4
 8006c98:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8006c9c:	d526      	bpl.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c9e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8006ca0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006ca4:	f000 8671 	beq.w	800798a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006ca8:	d815      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006caa:	2900      	cmp	r1, #0
 8006cac:	f000 8490 	beq.w	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006cb0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006cb4:	f040 846b 	bne.w	800758e <HAL_RCCEx_PeriphCLKConfig+0x902>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cb8:	49a4      	ldr	r1, [pc, #656]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006cba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006cbc:	f001 0103 	and.w	r1, r1, #3
 8006cc0:	2903      	cmp	r1, #3
 8006cc2:	f000 8464 	beq.w	800758e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	f104 0008 	add.w	r0, r4, #8
 8006ccc:	f7ff fefa 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8006cd0:	4606      	mov	r6, r0
        break;
 8006cd2:	f000 be67 	b.w	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006cd6:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8006cda:	f040 8458 	bne.w	800758e <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cde:	4d9b      	ldr	r5, [pc, #620]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ce0:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ce2:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8006ce4:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8006ce8:	4301      	orrs	r1, r0
 8006cea:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cec:	05d9      	lsls	r1, r3, #23
 8006cee:	d50a      	bpl.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006cf0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006cf2:	2904      	cmp	r1, #4
 8006cf4:	d806      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006cf6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006cfa:	0495      	.short	0x0495
 8006cfc:	06380623 	.word	0x06380623
 8006d00:	049a049a 	.word	0x049a049a
 8006d04:	2601      	movs	r6, #1
 8006d06:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006d08:	059f      	lsls	r7, r3, #22
 8006d0a:	d524      	bpl.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2AClockSelection)
 8006d0c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8006d0e:	2980      	cmp	r1, #128	@ 0x80
 8006d10:	f000 85d7 	beq.w	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8006d14:	f200 80e4 	bhi.w	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	f000 8460 	beq.w	80075de <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006d1e:	2940      	cmp	r1, #64	@ 0x40
 8006d20:	f040 80e7 	bne.w	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d24:	4989      	ldr	r1, [pc, #548]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006d26:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d28:	f001 0103 	and.w	r1, r1, #3
 8006d2c:	2903      	cmp	r1, #3
 8006d2e:	f000 80e0 	beq.w	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006d32:	2100      	movs	r1, #0
 8006d34:	f104 0008 	add.w	r0, r4, #8
 8006d38:	f7ff fec4 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8006d3c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006d3e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	f040 84f7 	bne.w	8007736 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006d48:	4f80      	ldr	r7, [pc, #512]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006d4a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8006d4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d4e:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8006d52:	4301      	orrs	r1, r0
 8006d54:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006d56:	0558      	lsls	r0, r3, #21
 8006d58:	d526      	bpl.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai2BClockSelection)
 8006d5a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8006d5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006d60:	f000 85da 	beq.w	8007918 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 8006d64:	f200 80c8 	bhi.w	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	f000 8442 	beq.w	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006d6e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006d72:	f040 80cb 	bne.w	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d76:	4975      	ldr	r1, [pc, #468]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006d78:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d7a:	f001 0103 	and.w	r1, r1, #3
 8006d7e:	2903      	cmp	r1, #3
 8006d80:	f000 80c4 	beq.w	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006d84:	2100      	movs	r1, #0
 8006d86:	f104 0008 	add.w	r0, r4, #8
 8006d8a:	f7ff fe9b 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8006d8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	f040 84d1 	bne.w	800773c <HAL_RCCEx_PeriphCLKConfig+0xab0>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006d9a:	4f6c      	ldr	r7, [pc, #432]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006d9c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8006d9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006da0:	f421 6160 	bic.w	r1, r1, #3584	@ 0xe00
 8006da4:	4301      	orrs	r1, r0
 8006da6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006da8:	0199      	lsls	r1, r3, #6
 8006daa:	d518      	bpl.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->OspiClockSelection)
 8006dac:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8006dae:	2920      	cmp	r1, #32
 8006db0:	f000 8527 	beq.w	8007802 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8006db4:	f200 80ad 	bhi.w	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006db8:	b139      	cbz	r1, 8006dca <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006dba:	2910      	cmp	r1, #16
 8006dbc:	f040 80ac 	bne.w	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc0:	4862      	ldr	r0, [pc, #392]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006dc2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006dc4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006dc8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	f040 84ab 	bne.w	8007726 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006dd0:	4f5e      	ldr	r7, [pc, #376]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006dd2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006dd4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006dd6:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006dda:	4301      	orrs	r1, r0
 8006ddc:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dde:	04df      	lsls	r7, r3, #19
 8006de0:	d526      	bpl.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006de2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006de4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006de8:	f000 857f 	beq.w	80078ea <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8006dec:	f200 8097 	bhi.w	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006df0:	2900      	cmp	r1, #0
 8006df2:	f000 840d 	beq.w	8007610 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006df6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006dfa:	f040 8098 	bne.w	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dfe:	4953      	ldr	r1, [pc, #332]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e00:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e02:	f001 0103 	and.w	r1, r1, #3
 8006e06:	2903      	cmp	r1, #3
 8006e08:	f000 8091 	beq.w	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f104 0008 	add.w	r0, r4, #8
 8006e12:	f7ff fe57 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8006e16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e1c:	2d00      	cmp	r5, #0
 8006e1e:	f040 8487 	bne.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e22:	4f4a      	ldr	r7, [pc, #296]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e24:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8006e26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e28:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006e2c:	4301      	orrs	r1, r0
 8006e2e:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e30:	0498      	lsls	r0, r3, #18
 8006e32:	d521      	bpl.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006e34:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8006e36:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8006e3a:	f000 852e 	beq.w	800789a <HAL_RCCEx_PeriphCLKConfig+0xc0e>
 8006e3e:	d879      	bhi.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e40:	b181      	cbz	r1, 8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006e42:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006e46:	d17d      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e48:	4940      	ldr	r1, [pc, #256]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e4a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e4c:	f001 0103 	and.w	r1, r1, #3
 8006e50:	2903      	cmp	r1, #3
 8006e52:	d077      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006e54:	2101      	movs	r1, #1
 8006e56:	f104 0008 	add.w	r0, r4, #8
 8006e5a:	f7ff fe33 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8006e5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	f040 847a 	bne.w	800775e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e6a:	4f38      	ldr	r7, [pc, #224]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e6c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8006e6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e70:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006e74:	4301      	orrs	r1, r0
 8006e76:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e78:	0459      	lsls	r1, r3, #17
 8006e7a:	d572      	bpl.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e7c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8006e80:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006e84:	f000 84d0 	beq.w	8007828 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006e88:	d862      	bhi.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8006e8a:	b181      	cbz	r1, 8006eae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006e8c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006e90:	d165      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e92:	492e      	ldr	r1, [pc, #184]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e94:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e96:	f001 0103 	and.w	r1, r1, #3
 8006e9a:	2903      	cmp	r1, #3
 8006e9c:	d05f      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	f104 0008 	add.w	r0, r4, #8
 8006ea4:	f7ff fe0e 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8006ea8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006eaa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	f040 8463 	bne.w	800777a <HAL_RCCEx_PeriphCLKConfig+0xaee>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006eb4:	4f25      	ldr	r7, [pc, #148]	@ (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006eb6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8006eba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ebc:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8006ec0:	4301      	orrs	r1, r0
 8006ec2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ec4:	041f      	lsls	r7, r3, #16
 8006ec6:	d44e      	bmi.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ec8:	01d8      	lsls	r0, r3, #7
 8006eca:	d55c      	bpl.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    switch (PeriphClkInit->FmcClockSelection)
 8006ecc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ece:	2903      	cmp	r1, #3
 8006ed0:	f200 85c8 	bhi.w	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8006ed4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006ed8:	02c802cd 	.word	0x02c802cd
 8006edc:	02cd04ce 	.word	0x02cd04ce
    switch (PeriphClkInit->Sai2AClockSelection)
 8006ee0:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8006ee4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006ee8:	f43f af2b 	beq.w	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8006eec:	29c0      	cmp	r1, #192	@ 0xc0
 8006eee:	f43f af28 	beq.w	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8006ef2:	2601      	movs	r6, #1
 8006ef4:	4635      	mov	r5, r6
 8006ef6:	e72e      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai2BClockSelection)
 8006ef8:	f421 7000 	bic.w	r0, r1, #512	@ 0x200
 8006efc:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8006f00:	f43f af48 	beq.w	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8006f04:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 8006f08:	f43f af44 	beq.w	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8006f0c:	2601      	movs	r6, #1
 8006f0e:	4635      	mov	r5, r6
 8006f10:	e74a      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->OspiClockSelection)
 8006f12:	2930      	cmp	r1, #48	@ 0x30
 8006f14:	f43f af59 	beq.w	8006dca <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006f18:	2601      	movs	r6, #1
 8006f1a:	4635      	mov	r5, r6
 8006f1c:	e75f      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006f1e:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8006f22:	f43f af7b 	beq.w	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006f26:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006f2a:	f43f af77 	beq.w	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006f2e:	2601      	movs	r6, #1
 8006f30:	4635      	mov	r5, r6
 8006f32:	e77d      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f34:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8006f38:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8006f3c:	d092      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006f3e:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8006f42:	d08f      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006f44:	2601      	movs	r6, #1
 8006f46:	4635      	mov	r5, r6
 8006f48:	e796      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8006f4a:	bf00      	nop
 8006f4c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f50:	f1b1 4fa0 	cmp.w	r1, #1342177280	@ 0x50000000
 8006f54:	d0ab      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006f56:	d94a      	bls.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006f58:	f1b1 4fc0 	cmp.w	r1, #1610612736	@ 0x60000000
 8006f5c:	d0a7      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006f5e:	2601      	movs	r6, #1
 8006f60:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f62:	041f      	lsls	r7, r3, #16
 8006f64:	d5b0      	bpl.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    switch (PeriphClkInit->FdcanClockSelection)
 8006f66:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8006f68:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006f6c:	f000 82e4 	beq.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8006f70:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006f74:	f000 83c0 	beq.w	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	f000 82e2 	beq.w	8007542 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8006f7e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f80:	01d8      	lsls	r0, r3, #7
 8006f82:	4635      	mov	r5, r6
 8006f84:	d4a2      	bmi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x240>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f86:	0259      	lsls	r1, r3, #9
 8006f88:	f100 8280 	bmi.w	800748c <HAL_RCCEx_PeriphCLKConfig+0x800>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f8c:	07df      	lsls	r7, r3, #31
 8006f8e:	d53b      	bpl.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8006f90:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8006f94:	2928      	cmp	r1, #40	@ 0x28
 8006f96:	d835      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006f98:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006f9c:	0034030e 	.word	0x0034030e
 8006fa0:	00340034 	.word	0x00340034
 8006fa4:	00340034 	.word	0x00340034
 8006fa8:	00340034 	.word	0x00340034
 8006fac:	003402ff 	.word	0x003402ff
 8006fb0:	00340034 	.word	0x00340034
 8006fb4:	00340034 	.word	0x00340034
 8006fb8:	00340034 	.word	0x00340034
 8006fbc:	00340530 	.word	0x00340530
 8006fc0:	00340034 	.word	0x00340034
 8006fc4:	00340034 	.word	0x00340034
 8006fc8:	00340034 	.word	0x00340034
 8006fcc:	0034030e 	.word	0x0034030e
 8006fd0:	00340034 	.word	0x00340034
 8006fd4:	00340034 	.word	0x00340034
 8006fd8:	00340034 	.word	0x00340034
 8006fdc:	0034030e 	.word	0x0034030e
 8006fe0:	00340034 	.word	0x00340034
 8006fe4:	00340034 	.word	0x00340034
 8006fe8:	00340034 	.word	0x00340034
 8006fec:	030e      	.short	0x030e
    switch (PeriphClkInit->Spi6ClockSelection)
 8006fee:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8006ff2:	f43f af5c 	beq.w	8006eae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006ff6:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8006ffa:	d1b0      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    if (ret == HAL_OK)
 8006ffc:	2d00      	cmp	r5, #0
 8006ffe:	f040 83bc 	bne.w	800777a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8007002:	e757      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007004:	2601      	movs	r6, #1
 8007006:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007008:	0798      	lsls	r0, r3, #30
 800700a:	d51f      	bpl.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800700c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8007010:	2905      	cmp	r1, #5
 8007012:	f200 850c 	bhi.w	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8007016:	e8df f011 	tbh	[pc, r1, lsl #1]
 800701a:	0015      	.short	0x0015
 800701c:	04df0006 	.word	0x04df0006
 8007020:	00150015 	.word	0x00150015
 8007024:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007026:	4911      	ldr	r1, [pc, #68]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007028:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800702a:	f001 0103 	and.w	r1, r1, #3
 800702e:	2903      	cmp	r1, #3
 8007030:	f000 84fd 	beq.w	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8007034:	2101      	movs	r1, #1
 8007036:	f104 0008 	add.w	r0, r4, #8
 800703a:	f7ff fd43 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 800703e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007040:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007044:	2d00      	cmp	r5, #0
 8007046:	f000 839b 	beq.w	8007780 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 800704a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800704c:	0759      	lsls	r1, r3, #29
 800704e:	d522      	bpl.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007050:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8007054:	2905      	cmp	r1, #5
 8007056:	f200 84ee 	bhi.w	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800705a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800705e:	0018      	.short	0x0018
 8007060:	04ab0009 	.word	0x04ab0009
 8007064:	00180018 	.word	0x00180018
 8007068:	0018      	.short	0x0018
 800706a:	bf00      	nop
 800706c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007070:	49af      	ldr	r1, [pc, #700]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007072:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007074:	f001 0103 	and.w	r1, r1, #3
 8007078:	2903      	cmp	r1, #3
 800707a:	f000 84dc 	beq.w	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 800707e:	2101      	movs	r1, #1
 8007080:	f104 0008 	add.w	r0, r4, #8
 8007084:	f7ff fd1e 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8007088:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800708a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800708e:	2d00      	cmp	r5, #0
 8007090:	f000 8368 	beq.w	8007764 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007094:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007096:	069f      	lsls	r7, r3, #26
 8007098:	d526      	bpl.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800709a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800709e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80070a2:	f000 8378 	beq.w	8007796 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80070a6:	f200 8192 	bhi.w	80073ce <HAL_RCCEx_PeriphCLKConfig+0x742>
 80070aa:	b191      	cbz	r1, 80070d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80070ac:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80070b0:	f040 8197 	bne.w	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070b4:	499e      	ldr	r1, [pc, #632]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80070b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80070b8:	f001 0103 	and.w	r1, r1, #3
 80070bc:	2903      	cmp	r1, #3
 80070be:	f000 8190 	beq.w	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
 80070c2:	2100      	movs	r1, #0
 80070c4:	f104 0008 	add.w	r0, r4, #8
 80070c8:	f7ff fcfc 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 80070cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	f040 834f 	bne.w	8007776 <HAL_RCCEx_PeriphCLKConfig+0xaea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070d8:	4f95      	ldr	r7, [pc, #596]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80070da:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80070de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070e0:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80070e4:	4301      	orrs	r1, r0
 80070e6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070e8:	0658      	lsls	r0, r3, #25
 80070ea:	d526      	bpl.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80070ec:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80070f0:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80070f4:	f000 8373 	beq.w	80077de <HAL_RCCEx_PeriphCLKConfig+0xb52>
 80070f8:	f200 8176 	bhi.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80070fc:	b191      	cbz	r1, 8007124 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80070fe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007102:	f040 817b 	bne.w	80073fc <HAL_RCCEx_PeriphCLKConfig+0x770>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007106:	498a      	ldr	r1, [pc, #552]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007108:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800710a:	f001 0103 	and.w	r1, r1, #3
 800710e:	2903      	cmp	r1, #3
 8007110:	f000 8174 	beq.w	80073fc <HAL_RCCEx_PeriphCLKConfig+0x770>
 8007114:	2100      	movs	r1, #0
 8007116:	f104 0008 	add.w	r0, r4, #8
 800711a:	f7ff fcd3 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 800711e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007120:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007124:	2d00      	cmp	r5, #0
 8007126:	f040 8314 	bne.w	8007752 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800712a:	4f81      	ldr	r7, [pc, #516]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800712c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8007130:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007132:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8007136:	4301      	orrs	r1, r0
 8007138:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800713a:	0619      	lsls	r1, r3, #24
 800713c:	d526      	bpl.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800713e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8007142:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8007146:	f000 8338 	beq.w	80077ba <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800714a:	f200 815a 	bhi.w	8007402 <HAL_RCCEx_PeriphCLKConfig+0x776>
 800714e:	b191      	cbz	r1, 8007176 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007150:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8007154:	f040 815f 	bne.w	8007416 <HAL_RCCEx_PeriphCLKConfig+0x78a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007158:	4975      	ldr	r1, [pc, #468]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800715a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800715c:	f001 0103 	and.w	r1, r1, #3
 8007160:	2903      	cmp	r1, #3
 8007162:	f000 8158 	beq.w	8007416 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8007166:	2100      	movs	r1, #0
 8007168:	f104 0008 	add.w	r0, r4, #8
 800716c:	f7ff fcaa 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8007170:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007172:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007176:	2d00      	cmp	r5, #0
 8007178:	f040 82ef 	bne.w	800775a <HAL_RCCEx_PeriphCLKConfig+0xace>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800717c:	4f6c      	ldr	r7, [pc, #432]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800717e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8007182:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007184:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8007188:	4301      	orrs	r1, r0
 800718a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800718c:	071f      	lsls	r7, r3, #28
 800718e:	d50b      	bpl.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007190:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8007194:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8007198:	f000 8262 	beq.w	8007660 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800719c:	4f64      	ldr	r7, [pc, #400]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800719e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071a0:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80071a4:	4301      	orrs	r1, r0
 80071a6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071a8:	06d8      	lsls	r0, r3, #27
 80071aa:	d50b      	bpl.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80071ac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80071b0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80071b4:	f000 8268 	beq.w	8007688 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071b8:	4f5d      	ldr	r7, [pc, #372]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80071ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80071bc:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80071c0:	4301      	orrs	r1, r0
 80071c2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071c4:	0319      	lsls	r1, r3, #12
 80071c6:	d50e      	bpl.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 80071c8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80071cc:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80071d0:	f000 81c2 	beq.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80071d4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80071d8:	f000 81cd 	beq.w	8007576 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 80071dc:	2900      	cmp	r1, #0
 80071de:	f000 827b 	beq.w	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80071e2:	2601      	movs	r6, #1
 80071e4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071e6:	035f      	lsls	r7, r3, #13
 80071e8:	d50f      	bpl.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 80071ea:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80071ee:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80071f2:	f000 832c 	beq.w	800784e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80071f6:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80071fa:	f000 8191 	beq.w	8007520 <HAL_RCCEx_PeriphCLKConfig+0x894>
 80071fe:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007202:	f000 8188 	beq.w	8007516 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8007206:	2601      	movs	r6, #1
 8007208:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800720a:	03d8      	lsls	r0, r3, #15
 800720c:	d520      	bpl.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 800720e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007210:	2900      	cmp	r1, #0
 8007212:	f000 824e 	beq.w	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8007216:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800721a:	f040 8179 	bne.w	8007510 <HAL_RCCEx_PeriphCLKConfig+0x884>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800721e:	4944      	ldr	r1, [pc, #272]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007220:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007222:	f001 0103 	and.w	r1, r1, #3
 8007226:	2903      	cmp	r1, #3
 8007228:	f000 8172 	beq.w	8007510 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800722c:	2102      	movs	r1, #2
 800722e:	f104 0008 	add.w	r0, r4, #8
 8007232:	f7ff fc47 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8007236:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007238:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800723c:	2d00      	cmp	r5, #0
 800723e:	f040 8240 	bne.w	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007242:	4f3b      	ldr	r7, [pc, #236]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007244:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8007246:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007248:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800724c:	4301      	orrs	r1, r0
 800724e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007250:	0099      	lsls	r1, r3, #2
 8007252:	d50e      	bpl.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007254:	4936      	ldr	r1, [pc, #216]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007256:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007258:	f001 0103 	and.w	r1, r1, #3
 800725c:	2903      	cmp	r1, #3
 800725e:	d007      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8007260:	2102      	movs	r1, #2
 8007262:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007266:	f7ff fc9f 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800726a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800726e:	b100      	cbz	r0, 8007272 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8007270:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007272:	039f      	lsls	r7, r3, #14
 8007274:	f140 80de 	bpl.w	8007434 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
    switch (PeriphClkInit->RngClockSelection)
 8007278:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800727c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007280:	f000 8221 	beq.w	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8007284:	f240 80ca 	bls.w	800741c <HAL_RCCEx_PeriphCLKConfig+0x790>
 8007288:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 800728c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007290:	f000 80c7 	beq.w	8007422 <HAL_RCCEx_PeriphCLKConfig+0x796>
 8007294:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007296:	02d8      	lsls	r0, r3, #11
 8007298:	d506      	bpl.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800729a:	4825      	ldr	r0, [pc, #148]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 800729c:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 800729e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80072a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80072a4:	4331      	orrs	r1, r6
 80072a6:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072a8:	0299      	lsls	r1, r3, #10
 80072aa:	d506      	bpl.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072ac:	4820      	ldr	r0, [pc, #128]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80072ae:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 80072b0:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80072b2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80072b6:	4331      	orrs	r1, r6
 80072b8:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80072ba:	051f      	lsls	r7, r3, #20
 80072bc:	d506      	bpl.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x640>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80072be:	481c      	ldr	r0, [pc, #112]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80072c0:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 80072c2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80072c4:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 80072c8:	4331      	orrs	r1, r6
 80072ca:	6581      	str	r1, [r0, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80072cc:	005e      	lsls	r6, r3, #1
 80072ce:	d509      	bpl.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072d0:	4917      	ldr	r1, [pc, #92]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80072d2:	6908      	ldr	r0, [r1, #16]
 80072d4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80072d8:	6108      	str	r0, [r1, #16]
 80072da:	6908      	ldr	r0, [r1, #16]
 80072dc:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 80072e0:	4330      	orrs	r0, r6
 80072e2:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da06      	bge.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072e8:	4811      	ldr	r0, [pc, #68]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80072ea:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80072ec:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80072ee:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80072f2:	4331      	orrs	r1, r6
 80072f4:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072f6:	0218      	lsls	r0, r3, #8
 80072f8:	d507      	bpl.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072fa:	490d      	ldr	r1, [pc, #52]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 80072fc:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8007300:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8007302:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007306:	4303      	orrs	r3, r0
 8007308:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800730a:	07d1      	lsls	r1, r2, #31
 800730c:	d512      	bpl.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800730e:	4b08      	ldr	r3, [pc, #32]	@ (8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b03      	cmp	r3, #3
 8007318:	f000 8198 	beq.w	800764c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800731c:	2100      	movs	r1, #0
 800731e:	f104 0008 	add.w	r0, r4, #8
 8007322:	f7ff fbcf 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007326:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007328:	2800      	cmp	r0, #0
 800732a:	f040 820e 	bne.w	800774a <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800732e:	e001      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007330:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007334:	0793      	lsls	r3, r2, #30
 8007336:	d50f      	bpl.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007338:	4bb3      	ldr	r3, [pc, #716]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800733a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	2b03      	cmp	r3, #3
 8007342:	f000 8185 	beq.w	8007650 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
 8007346:	2101      	movs	r1, #1
 8007348:	f104 0008 	add.w	r0, r4, #8
 800734c:	f7ff fbba 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007350:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007352:	2800      	cmp	r0, #0
 8007354:	f040 81f5 	bne.w	8007742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007358:	0757      	lsls	r7, r2, #29
 800735a:	d50f      	bpl.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800735c:	4baa      	ldr	r3, [pc, #680]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800735e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	2b03      	cmp	r3, #3
 8007366:	f000 816f 	beq.w	8007648 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800736a:	2102      	movs	r1, #2
 800736c:	f104 0008 	add.w	r0, r4, #8
 8007370:	f7ff fba8 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007374:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007376:	2800      	cmp	r0, #0
 8007378:	f040 81e5 	bne.w	8007746 <HAL_RCCEx_PeriphCLKConfig+0xaba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800737c:	0716      	lsls	r6, r2, #28
 800737e:	d50f      	bpl.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007380:	4ba1      	ldr	r3, [pc, #644]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	f003 0303 	and.w	r3, r3, #3
 8007388:	2b03      	cmp	r3, #3
 800738a:	f000 8167 	beq.w	800765c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800738e:	2100      	movs	r1, #0
 8007390:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007394:	f7ff fc08 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007398:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800739a:	2800      	cmp	r0, #0
 800739c:	f040 81d7 	bne.w	800774e <HAL_RCCEx_PeriphCLKConfig+0xac2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80073a0:	06d0      	lsls	r0, r2, #27
 80073a2:	d54a      	bpl.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073a4:	4b98      	ldr	r3, [pc, #608]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	f000 814f 	beq.w	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 80073b6:	2101      	movs	r1, #1
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff fbf5 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80073be:	2800      	cmp	r0, #0
 80073c0:	d03a      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073c2:	6863      	ldr	r3, [r4, #4]
 80073c4:	069a      	lsls	r2, r3, #26
 80073c6:	f140 80e5 	bpl.w	8007594 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80073ca:	4605      	mov	r5, r0
 80073cc:	e039      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80073ce:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80073d2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80073d6:	f43f ae7c 	beq.w	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80073da:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80073de:	f43f ae78 	beq.w	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80073e2:	2601      	movs	r6, #1
 80073e4:	4635      	mov	r5, r6
 80073e6:	e67f      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073e8:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 80073ec:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80073f0:	f43f ae98 	beq.w	8007124 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80073f4:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 80073f8:	f43f ae94 	beq.w	8007124 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80073fc:	2601      	movs	r6, #1
 80073fe:	4635      	mov	r5, r6
 8007400:	e69b      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007402:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8007406:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800740a:	f43f aeb4 	beq.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800740e:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8007412:	f43f aeb0 	beq.w	8007176 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007416:	2601      	movs	r6, #1
 8007418:	4635      	mov	r5, r6
 800741a:	e6b7      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->RngClockSelection)
 800741c:	2900      	cmp	r1, #0
 800741e:	f47f af39 	bne.w	8007294 <HAL_RCCEx_PeriphCLKConfig+0x608>
    if (ret == HAL_OK)
 8007422:	2d00      	cmp	r5, #0
 8007424:	f47f af37 	bne.w	8007296 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007428:	4d77      	ldr	r5, [pc, #476]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800742a:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800742c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8007430:	4301      	orrs	r1, r0
 8007432:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8007434:	4635      	mov	r5, r6
 8007436:	e72e      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007438:	6862      	ldr	r2, [r4, #4]
 800743a:	0693      	lsls	r3, r2, #26
 800743c:	d50f      	bpl.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800743e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007442:	4b71      	ldr	r3, [pc, #452]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b03      	cmp	r3, #3
 800744c:	f000 80a2 	beq.w	8007594 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8007450:	2102      	movs	r1, #2
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff fba8 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8007458:	2800      	cmp	r0, #0
 800745a:	f040 809b 	bne.w	8007594 <HAL_RCCEx_PeriphCLKConfig+0x908>
  if (status == HAL_OK)
 800745e:	1e28      	subs	r0, r5, #0
 8007460:	bf18      	it	ne
 8007462:	2001      	movne	r0, #1
}
 8007464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007468:	4867      	ldr	r0, [pc, #412]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800746a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800746c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007470:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007472:	2d00      	cmp	r5, #0
 8007474:	f040 815a 	bne.w	800772c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007478:	4f63      	ldr	r7, [pc, #396]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800747a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800747c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800747e:	f021 0103 	bic.w	r1, r1, #3
 8007482:	4301      	orrs	r1, r0
 8007484:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007486:	0259      	lsls	r1, r3, #9
 8007488:	f57f ad80 	bpl.w	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800748c:	4f5f      	ldr	r7, [pc, #380]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x980>)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007494:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8007496:	f7fc fd11 	bl	8003ebc <HAL_GetTick>
 800749a:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800749c:	e006      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749e:	f7fc fd0d 	bl	8003ebc <HAL_GetTick>
 80074a2:	eba0 0008 	sub.w	r0, r0, r8
 80074a6:	2864      	cmp	r0, #100	@ 0x64
 80074a8:	f200 82bb 	bhi.w	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xd96>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	05da      	lsls	r2, r3, #23
 80074b0:	d5f5      	bpl.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (ret == HAL_OK)
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	f040 82b6 	bne.w	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074b8:	4a53      	ldr	r2, [pc, #332]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80074ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80074be:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80074c0:	4059      	eors	r1, r3
 80074c2:	f411 7f40 	tst.w	r1, #768	@ 0x300
 80074c6:	d00b      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x854>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074c8:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80074ca:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074cc:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80074d0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80074d4:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074d6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80074d8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80074dc:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80074de:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80074e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074e4:	f000 82c2 	beq.w	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xde0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074e8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80074ec:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80074f0:	f000 82d0 	beq.w	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80074f4:	4944      	ldr	r1, [pc, #272]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80074f6:	690a      	ldr	r2, [r1, #16]
 80074f8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80074fc:	610a      	str	r2, [r1, #16]
 80074fe:	4842      	ldr	r0, [pc, #264]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007500:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8007504:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8007506:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007508:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800750c:	6701      	str	r1, [r0, #112]	@ 0x70
 800750e:	e53d      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007510:	2601      	movs	r6, #1
 8007512:	4635      	mov	r5, r6
 8007514:	e69c      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007516:	483c      	ldr	r0, [pc, #240]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007518:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800751a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800751e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007520:	2d00      	cmp	r5, #0
 8007522:	f040 80fe 	bne.w	8007722 <HAL_RCCEx_PeriphCLKConfig+0xa96>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007526:	4f38      	ldr	r7, [pc, #224]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007528:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800752c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800752e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007532:	4301      	orrs	r1, r0
 8007534:	6579      	str	r1, [r7, #84]	@ 0x54
 8007536:	e668      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007538:	4833      	ldr	r0, [pc, #204]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800753a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800753c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007540:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007542:	2d00      	cmp	r5, #0
 8007544:	f040 80ea 	bne.w	800771c <HAL_RCCEx_PeriphCLKConfig+0xa90>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007548:	4f2f      	ldr	r7, [pc, #188]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800754a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800754c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800754e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8007552:	4301      	orrs	r1, r0
 8007554:	6539      	str	r1, [r7, #80]	@ 0x50
 8007556:	e4b7      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007558:	492b      	ldr	r1, [pc, #172]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800755a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800755c:	f001 0103 	and.w	r1, r1, #3
 8007560:	2903      	cmp	r1, #3
 8007562:	f43f ae3e 	beq.w	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8007566:	2102      	movs	r1, #2
 8007568:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800756c:	f7ff fb1c 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 8007570:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007572:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007576:	2d00      	cmp	r5, #0
 8007578:	f040 80ed 	bne.w	8007756 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800757c:	4f22      	ldr	r7, [pc, #136]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800757e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8007582:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007584:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8007588:	4301      	orrs	r1, r0
 800758a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800758c:	e62b      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800758e:	2601      	movs	r6, #1
 8007590:	f7ff bbac 	b.w	8006cec <HAL_RCCEx_PeriphCLKConfig+0x60>
  return HAL_ERROR;
 8007594:	2001      	movs	r0, #1
}
 8007596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800759a:	491b      	ldr	r1, [pc, #108]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 800759c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800759e:	f001 0103 	and.w	r1, r1, #3
 80075a2:	2903      	cmp	r1, #3
 80075a4:	f43f ad2e 	beq.w	8007004 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80075a8:	2101      	movs	r1, #1
 80075aa:	f104 0008 	add.w	r0, r4, #8
 80075ae:	f7ff fa89 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 80075b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80075b8:	2d00      	cmp	r5, #0
 80075ba:	f040 80ea 	bne.w	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb06>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80075be:	4f12      	ldr	r7, [pc, #72]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80075c0:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80075c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075c6:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 80075ca:	4301      	orrs	r1, r0
 80075cc:	6579      	str	r1, [r7, #84]	@ 0x54
 80075ce:	e51b      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x37c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d0:	4d0d      	ldr	r5, [pc, #52]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80075d2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80075d4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80075d8:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 80075da:	f7ff bb80 	b.w	8006cde <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075de:	480a      	ldr	r0, [pc, #40]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80075e0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80075e2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80075e6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	f040 80a4 	bne.w	8007736 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80075ee:	f7ff bbab 	b.w	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f2:	4805      	ldr	r0, [pc, #20]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80075f4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80075f6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80075fa:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80075fc:	2d00      	cmp	r5, #0
 80075fe:	f040 809d 	bne.w	800773c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007602:	f7ff bbca 	b.w	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007606:	bf00      	nop
 8007608:	58024400 	.word	0x58024400
 800760c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	48c0      	ldr	r0, [pc, #768]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007612:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007614:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007618:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800761a:	2d00      	cmp	r5, #0
 800761c:	f040 8088 	bne.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007620:	f7ff bbff 	b.w	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007624:	48bb      	ldr	r0, [pc, #748]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007626:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007628:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800762c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800762e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8007630:	2d00      	cmp	r5, #0
 8007632:	f040 8197 	bne.w	8007964 <HAL_RCCEx_PeriphCLKConfig+0xcd8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007636:	4fb7      	ldr	r7, [pc, #732]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800763a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800763c:	f021 0107 	bic.w	r1, r1, #7
 8007640:	4301      	orrs	r1, r0
 8007642:	6539      	str	r1, [r7, #80]	@ 0x50
 8007644:	f7ff bb60 	b.w	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    return HAL_ERROR;
 8007648:	2501      	movs	r5, #1
 800764a:	e697      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800764c:	2501      	movs	r5, #1
 800764e:	e671      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007650:	2501      	movs	r5, #1
 8007652:	e681      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007654:	0691      	lsls	r1, r2, #26
 8007656:	d59d      	bpl.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x908>
    return HAL_ERROR;
 8007658:	2501      	movs	r5, #1
 800765a:	e6f2      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 800765c:	2501      	movs	r5, #1
 800765e:	e69f      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x714>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007660:	49ac      	ldr	r1, [pc, #688]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007662:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007664:	f001 0103 	and.w	r1, r1, #3
 8007668:	2903      	cmp	r1, #3
 800766a:	f000 81e8 	beq.w	8007a3e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 800766e:	2102      	movs	r1, #2
 8007670:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007674:	f7ff fa98 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007678:	2800      	cmp	r0, #0
 800767a:	f040 81ec 	bne.w	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800767e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007682:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007686:	e589      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x510>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007688:	49a2      	ldr	r1, [pc, #648]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800768a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800768c:	f001 0103 	and.w	r1, r1, #3
 8007690:	2903      	cmp	r1, #3
 8007692:	f000 81d7 	beq.w	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8007696:	2102      	movs	r1, #2
 8007698:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800769c:	f7ff fa84 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076a0:	2800      	cmp	r0, #0
 80076a2:	f000 81d2 	beq.w	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076a6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
        status = HAL_ERROR;
 80076aa:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076ac:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076b0:	e582      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b2:	4898      	ldr	r0, [pc, #608]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80076b4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80076b6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80076ba:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80076bc:	2d00      	cmp	r5, #0
 80076be:	f43f adc0 	beq.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 80076c2:	462e      	mov	r6, r5
 80076c4:	e5c4      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c6:	4f93      	ldr	r7, [pc, #588]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80076c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80076ca:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80076ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	f47f ade0 	bne.w	8007296 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 80076d6:	e6a7      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076d8:	488e      	ldr	r0, [pc, #568]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80076da:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80076dc:	f000 0003 	and.w	r0, r0, #3
 80076e0:	2803      	cmp	r0, #3
 80076e2:	f43f ad7e 	beq.w	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x556>
 80076e6:	f104 0008 	add.w	r0, r4, #8
 80076ea:	f7ff f9eb 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 80076ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80076f4:	bb7d      	cbnz	r5, 8007756 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80076f6:	e741      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076f8:	4986      	ldr	r1, [pc, #536]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80076fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076fc:	f001 0103 	and.w	r1, r1, #3
 8007700:	2903      	cmp	r1, #3
 8007702:	f43f ac3c 	beq.w	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8007706:	2101      	movs	r1, #1
 8007708:	f104 0008 	add.w	r0, r4, #8
 800770c:	f7ff f9da 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8007710:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007712:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007716:	2d00      	cmp	r5, #0
 8007718:	f43f af16 	beq.w	8007548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800771c:	462e      	mov	r6, r5
 800771e:	f7ff bbd3 	b.w	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8007722:	462e      	mov	r6, r5
 8007724:	e571      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007726:	462e      	mov	r6, r5
 8007728:	f7ff bb59 	b.w	8006dde <HAL_RCCEx_PeriphCLKConfig+0x152>
 800772c:	462e      	mov	r6, r5
 800772e:	e42a      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8007730:	462e      	mov	r6, r5
 8007732:	f7ff bb7d 	b.w	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007736:	462e      	mov	r6, r5
 8007738:	f7ff bb0d 	b.w	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800773c:	462e      	mov	r6, r5
 800773e:	f7ff bb33 	b.w	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007742:	4605      	mov	r5, r0
 8007744:	e608      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007746:	4605      	mov	r5, r0
 8007748:	e618      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800774a:	4605      	mov	r5, r0
 800774c:	e5f2      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800774e:	4605      	mov	r5, r0
 8007750:	e626      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8007752:	462e      	mov	r6, r5
 8007754:	e4f1      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007756:	462e      	mov	r6, r5
 8007758:	e545      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800775a:	462e      	mov	r6, r5
 800775c:	e516      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x500>
 800775e:	462e      	mov	r6, r5
 8007760:	f7ff bb8a 	b.w	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007764:	4f6b      	ldr	r7, [pc, #428]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007766:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800776a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800776c:	f021 0107 	bic.w	r1, r1, #7
 8007770:	4301      	orrs	r1, r0
 8007772:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007774:	e48f      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007776:	462e      	mov	r6, r5
 8007778:	e4b6      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800777a:	462e      	mov	r6, r5
 800777c:	f7ff bbf1 	b.w	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007780:	4f64      	ldr	r7, [pc, #400]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007782:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007786:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007788:	f021 0107 	bic.w	r1, r1, #7
 800778c:	4301      	orrs	r1, r0
 800778e:	6579      	str	r1, [r7, #84]	@ 0x54
 8007790:	e45c      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007792:	462e      	mov	r6, r5
 8007794:	e438      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007796:	495f      	ldr	r1, [pc, #380]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007798:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800779a:	f001 0103 	and.w	r1, r1, #3
 800779e:	2903      	cmp	r1, #3
 80077a0:	f43f ae1f 	beq.w	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
 80077a4:	2102      	movs	r1, #2
 80077a6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80077aa:	f7ff f9fd 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80077ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80077b4:	2d00      	cmp	r5, #0
 80077b6:	d1de      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80077b8:	e48e      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ba:	4956      	ldr	r1, [pc, #344]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80077bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80077be:	f001 0103 	and.w	r1, r1, #3
 80077c2:	2903      	cmp	r1, #3
 80077c4:	f43f ae27 	beq.w	8007416 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80077c8:	2102      	movs	r1, #2
 80077ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80077ce:	f7ff f9eb 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80077d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80077d8:	2d00      	cmp	r5, #0
 80077da:	d1be      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xace>
 80077dc:	e4ce      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077de:	494d      	ldr	r1, [pc, #308]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80077e0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80077e2:	f001 0103 	and.w	r1, r1, #3
 80077e6:	2903      	cmp	r1, #3
 80077e8:	f43f ae08 	beq.w	80073fc <HAL_RCCEx_PeriphCLKConfig+0x770>
 80077ec:	2102      	movs	r1, #2
 80077ee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80077f2:	f7ff f9d9 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80077f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80077f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	d1a8      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8007800:	e493      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x49e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007802:	4944      	ldr	r1, [pc, #272]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007804:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007806:	f001 0103 	and.w	r1, r1, #3
 800780a:	2903      	cmp	r1, #3
 800780c:	f43f ab84 	beq.w	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8007810:	2102      	movs	r1, #2
 8007812:	f104 0008 	add.w	r0, r4, #8
 8007816:	f7ff f955 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 800781a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800781c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007820:	2d00      	cmp	r5, #0
 8007822:	d180      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8007824:	f7ff bad4 	b.w	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007828:	493a      	ldr	r1, [pc, #232]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800782a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800782c:	f001 0103 	and.w	r1, r1, #3
 8007830:	2903      	cmp	r1, #3
 8007832:	f43f ab94 	beq.w	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007836:	2101      	movs	r1, #1
 8007838:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800783c:	f7ff f9b4 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 8007840:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007842:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007846:	2d00      	cmp	r5, #0
 8007848:	d197      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800784a:	f7ff bb33 	b.w	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800784e:	4931      	ldr	r1, [pc, #196]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007850:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007852:	f001 0103 	and.w	r1, r1, #3
 8007856:	2903      	cmp	r1, #3
 8007858:	f43f acd5 	beq.w	8007206 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800785c:	2101      	movs	r1, #1
 800785e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007862:	f7ff f9a1 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 8007866:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007868:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800786c:	2d00      	cmp	r5, #0
 800786e:	f47f af58 	bne.w	8007722 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007872:	e658      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x89a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007874:	4927      	ldr	r1, [pc, #156]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 8007876:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007878:	f001 0103 	and.w	r1, r1, #3
 800787c:	2903      	cmp	r1, #3
 800787e:	f000 80f1 	beq.w	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8007882:	2102      	movs	r1, #2
 8007884:	f104 0008 	add.w	r0, r4, #8
 8007888:	f7ff f91c 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 800788c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800788e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007892:	2d00      	cmp	r5, #0
 8007894:	f47f af4a 	bne.w	800772c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8007898:	e5ee      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800789a:	491e      	ldr	r1, [pc, #120]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 800789c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800789e:	f001 0103 	and.w	r1, r1, #3
 80078a2:	2903      	cmp	r1, #3
 80078a4:	f43f ab4e 	beq.w	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80078a8:	2101      	movs	r1, #1
 80078aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80078ae:	f7ff f97b 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80078b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	f47f af50 	bne.w	800775e <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80078be:	f7ff bad4 	b.w	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078c2:	4914      	ldr	r1, [pc, #80]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80078c4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80078c6:	f001 0103 	and.w	r1, r1, #3
 80078ca:	2903      	cmp	r1, #3
 80078cc:	f43f ab11 	beq.w	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80078d0:	2100      	movs	r1, #0
 80078d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80078d6:	f7ff f967 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80078da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80078dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80078e0:	2d00      	cmp	r5, #0
 80078e2:	f47f af28 	bne.w	8007736 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80078e6:	f7ff ba2f 	b.w	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078ea:	490a      	ldr	r1, [pc, #40]	@ (8007914 <HAL_RCCEx_PeriphCLKConfig+0xc88>)
 80078ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80078ee:	f001 0103 	and.w	r1, r1, #3
 80078f2:	2903      	cmp	r1, #3
 80078f4:	f43f ab1b 	beq.w	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 80078f8:	2100      	movs	r1, #0
 80078fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80078fe:	f7ff f953 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 8007902:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007904:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007908:	2d00      	cmp	r5, #0
 800790a:	f47f af11 	bne.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800790e:	f7ff ba88 	b.w	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007918:	4966      	ldr	r1, [pc, #408]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800791a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800791c:	f001 0103 	and.w	r1, r1, #3
 8007920:	2903      	cmp	r1, #3
 8007922:	f43f aaf3 	beq.w	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007926:	2100      	movs	r1, #0
 8007928:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800792c:	f7ff f93c 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 8007930:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007932:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007936:	2d00      	cmp	r5, #0
 8007938:	f47f af00 	bne.w	800773c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800793c:	f7ff ba2d 	b.w	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007940:	495c      	ldr	r1, [pc, #368]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8007942:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007944:	f001 0103 	and.w	r1, r1, #3
 8007948:	2903      	cmp	r1, #3
 800794a:	f43f a9db 	beq.w	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800794e:	2100      	movs	r1, #0
 8007950:	f104 0008 	add.w	r0, r4, #8
 8007954:	f7ff f8b6 	bl	8006ac4 <RCCEx_PLL2_Config.part.0>
 8007958:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800795a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800795e:	2d00      	cmp	r5, #0
 8007960:	f43f ae69 	beq.w	8007636 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8007964:	462e      	mov	r6, r5
 8007966:	f7ff b9cf 	b.w	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800796a:	4952      	ldr	r1, [pc, #328]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800796c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800796e:	f001 0103 	and.w	r1, r1, #3
 8007972:	2903      	cmp	r1, #3
 8007974:	f43f a9c6 	beq.w	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007978:	2100      	movs	r1, #0
 800797a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800797e:	f7ff f913 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 8007982:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007984:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007988:	e652      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800798a:	494a      	ldr	r1, [pc, #296]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 800798c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800798e:	f001 0103 	and.w	r1, r1, #3
 8007992:	2903      	cmp	r1, #3
 8007994:	f43f adfb 	beq.w	800758e <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007998:	2102      	movs	r1, #2
 800799a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800799e:	f7ff f903 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80079a2:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80079a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80079a8:	2e00      	cmp	r6, #0
 80079aa:	f47f a99f 	bne.w	8006cec <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80079ae:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80079b0:	f7ff b995 	b.w	8006cde <HAL_RCCEx_PeriphCLKConfig+0x52>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079b4:	493f      	ldr	r1, [pc, #252]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80079b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80079b8:	f001 0103 	and.w	r1, r1, #3
 80079bc:	2903      	cmp	r1, #3
 80079be:	d03a      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 80079c0:	2101      	movs	r1, #1
 80079c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80079c6:	f7ff f8ef 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80079ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80079cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	f47f ab5f 	bne.w	8007094 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80079d6:	e6c5      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079d8:	4936      	ldr	r1, [pc, #216]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80079da:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80079dc:	f001 0103 	and.w	r1, r1, #3
 80079e0:	2903      	cmp	r1, #3
 80079e2:	d024      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80079e4:	2101      	movs	r1, #1
 80079e6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80079ea:	f7ff f8dd 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 80079ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80079f4:	2d00      	cmp	r5, #0
 80079f6:	f47f ab28 	bne.w	800704a <HAL_RCCEx_PeriphCLKConfig+0x3be>
 80079fa:	e6c1      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079fc:	492d      	ldr	r1, [pc, #180]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 80079fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007a00:	f001 0103 	and.w	r1, r1, #3
 8007a04:	2903      	cmp	r1, #3
 8007a06:	f43f aafd 	beq.w	8007004 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007a10:	f7ff f8ca 	bl	8006ba8 <RCCEx_PLL3_Config.part.0>
 8007a14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007a1a:	2d00      	cmp	r5, #0
 8007a1c:	f47f aeb9 	bne.w	8007792 <HAL_RCCEx_PeriphCLKConfig+0xb06>
 8007a20:	e5cd      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = HAL_TIMEOUT;
 8007a22:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a24:	462e      	mov	r6, r5
 8007a26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a2a:	f7ff baaf 	b.w	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007a2e:	2601      	movs	r6, #1
 8007a30:	4635      	mov	r5, r6
 8007a32:	f7ff bb0b 	b.w	800704c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007a36:	2601      	movs	r6, #1
 8007a38:	4635      	mov	r5, r6
 8007a3a:	f7ff bb2c 	b.w	8007096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
        status = HAL_ERROR;
 8007a3e:	2601      	movs	r6, #1
 8007a40:	f7ff bbac 	b.w	800719c <HAL_RCCEx_PeriphCLKConfig+0x510>
        status = HAL_ERROR;
 8007a44:	2601      	movs	r6, #1
 8007a46:	f7ff bbb7 	b.w	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a4a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a4e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a52:	f7ff bbb1 	b.w	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a56:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
        status = HAL_ERROR;
 8007a5a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a5c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a60:	f7ff bb9c 	b.w	800719c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007a64:	2601      	movs	r6, #1
 8007a66:	4635      	mov	r5, r6
 8007a68:	f7ff ba8d 	b.w	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        tickstart = HAL_GetTick();
 8007a6c:	f7fc fa26 	bl	8003ebc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a70:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        tickstart = HAL_GetTick();
 8007a74:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a76:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a7a:	e004      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7c:	f7fc fa1e 	bl	8003ebc <HAL_GetTick>
 8007a80:	1bc0      	subs	r0, r0, r7
 8007a82:	4548      	cmp	r0, r9
 8007a84:	d810      	bhi.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xe1c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a86:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8007a8a:	079b      	lsls	r3, r3, #30
 8007a8c:	d5f6      	bpl.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xdf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a8e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8007a92:	e529      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8007a94:	4807      	ldr	r0, [pc, #28]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xe28>)
 8007a96:	4a08      	ldr	r2, [pc, #32]	@ (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xe2c>)
 8007a98:	6901      	ldr	r1, [r0, #16]
 8007a9a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007a9e:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	6102      	str	r2, [r0, #16]
 8007aa6:	e52a      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x872>
        status = ret;
 8007aa8:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007aaa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007aae:	4635      	mov	r5, r6
 8007ab0:	f7ff ba6c 	b.w	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007ab4:	58024400 	.word	0x58024400
 8007ab8:	00ffffcf 	.word	0x00ffffcf

08007abc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007abc:	4a47      	ldr	r2, [pc, #284]	@ (8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8007abe:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ac0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007ac2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ac4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8007ac6:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007aca:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007ace:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8007ad0:	d05b      	beq.n	8007b8a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007ad2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ad6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ada:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ade:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007ae2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007ae6:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007aec:	ee06 1a90 	vmov	s13, r1
 8007af0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007af4:	d003      	beq.n	8007afe <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8007af6:	2c02      	cmp	r4, #2
 8007af8:	d06a      	beq.n	8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	d04a      	beq.n	8007b94 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007afe:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8007b02:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007b06:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007b20:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b24:	4a2d      	ldr	r2, [pc, #180]	@ (8007bdc <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8007b26:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007b2a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007b2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007b30:	ee07 3a10 	vmov	s14, r3
 8007b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007b38:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b42:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007b46:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b4a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007b4c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007b50:	ee07 3a10 	vmov	s14, r3
 8007b54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b60:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007b64:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b68:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007b6a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007b6e:	ee06 3a90 	vmov	s13, r3
 8007b72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007b76:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007b7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007b7e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007b82:	ee17 3a90 	vmov	r3, s15
 8007b86:	6083      	str	r3, [r0, #8]
}
 8007b88:	4770      	bx	lr
 8007b8a:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b8c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b90:	6083      	str	r3, [r0, #8]
}
 8007b92:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b94:	6813      	ldr	r3, [r2, #0]
 8007b96:	069b      	lsls	r3, r3, #26
 8007b98:	d51d      	bpl.n	8007bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b9a:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b9c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007ba0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ba2:	4910      	ldr	r1, [pc, #64]	@ (8007be4 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8007ba4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bac:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	ee06 1a10 	vmov	s12, r1
 8007bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007bbe:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007bc2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007bc6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bce:	e7a9      	b.n	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bd0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007be8 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8007bd4:	e795      	b.n	8007b02 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bd6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007bec <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8007bda:	e792      	b.n	8007b02 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	4a742400 	.word	0x4a742400
 8007be4:	03d09000 	.word	0x03d09000
 8007be8:	4bbebc20 	.word	0x4bbebc20
 8007bec:	4c742400 	.word	0x4c742400

08007bf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bf0:	4a47      	ldr	r2, [pc, #284]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8007bf2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bf4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bf6:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bf8:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8007bfa:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bfe:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c02:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8007c04:	d05b      	beq.n	8007cbe <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c06:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c0a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c0e:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c12:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c16:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007c1a:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c20:	ee06 1a90 	vmov	s13, r1
 8007c24:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007c28:	d003      	beq.n	8007c32 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8007c2a:	2c02      	cmp	r4, #2
 8007c2c:	d06a      	beq.n	8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d04a      	beq.n	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c32:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8007c36:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007c3a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c50:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007c54:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c58:	4a2d      	ldr	r2, [pc, #180]	@ (8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8007c5a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007c5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007c60:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007c64:	ee07 3a10 	vmov	s14, r3
 8007c68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007c6c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007c72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c76:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007c7a:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007c80:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007c84:	ee07 3a10 	vmov	s14, r3
 8007c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007c90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c94:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007c98:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007c9e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007ca2:	ee06 3a90 	vmov	s13, r3
 8007ca6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007caa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007cae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007cb2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007cb6:	ee17 3a90 	vmov	r3, s15
 8007cba:	6083      	str	r3, [r0, #8]
}
 8007cbc:	4770      	bx	lr
 8007cbe:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cc0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007cc4:	6083      	str	r3, [r0, #8]
}
 8007cc6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc8:	6813      	ldr	r3, [r2, #0]
 8007cca:	069b      	lsls	r3, r3, #26
 8007ccc:	d51d      	bpl.n	8007d0a <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cce:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cd0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007cd4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cd6:	4910      	ldr	r1, [pc, #64]	@ (8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8007cd8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ce0:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	ee06 1a10 	vmov	s12, r1
 8007cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007cf2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007cf6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007cfa:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d02:	e7a9      	b.n	8007c58 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d04:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8007d08:	e795      	b.n	8007c36 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d0a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8007d0e:	e792      	b.n	8007c36 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8007d10:	58024400 	.word	0x58024400
 8007d14:	4a742400 	.word	0x4a742400
 8007d18:	03d09000 	.word	0x03d09000
 8007d1c:	4bbebc20 	.word	0x4bbebc20
 8007d20:	4c742400 	.word	0x4c742400

08007d24 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d24:	4a47      	ldr	r2, [pc, #284]	@ (8007e44 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8007d26:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d28:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007d2a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d2c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8007d2e:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007d32:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d36:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8007d38:	d05b      	beq.n	8007df2 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d3a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d3e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d42:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d46:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d4a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007d4e:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d54:	ee06 1a90 	vmov	s13, r1
 8007d58:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007d5c:	d06f      	beq.n	8007e3e <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8007d5e:	2c02      	cmp	r4, #2
 8007d60:	d06a      	beq.n	8007e38 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 8007d62:	2c00      	cmp	r4, #0
 8007d64:	d04a      	beq.n	8007dfc <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d66:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007e48 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8007d6a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007d6e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d84:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007d88:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8007e44 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8007d8e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007d92:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007d94:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007d98:	ee07 3a10 	vmov	s14, r3
 8007d9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007da0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007da2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007da6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007daa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007dae:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007db2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007db4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007db8:	ee07 3a10 	vmov	s14, r3
 8007dbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007dc0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007dc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007dc8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007dcc:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007dd0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007dd2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007dd6:	ee06 3a90 	vmov	s13, r3
 8007dda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007dde:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007de2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007de6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007dea:	ee17 3a90 	vmov	r3, s15
 8007dee:	6083      	str	r3, [r0, #8]
}
 8007df0:	4770      	bx	lr
 8007df2:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007df4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007df8:	6083      	str	r3, [r0, #8]
}
 8007dfa:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dfc:	6813      	ldr	r3, [r2, #0]
 8007dfe:	069b      	lsls	r3, r3, #26
 8007e00:	d5b1      	bpl.n	8007d66 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e02:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e04:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007e08:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e0a:	4910      	ldr	r1, [pc, #64]	@ (8007e4c <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8007e0c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e14:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	ee06 1a10 	vmov	s12, r1
 8007e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e22:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007e26:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007e2a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8007e2e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e36:	e7a9      	b.n	8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e38:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007e50 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007e3c:	e795      	b.n	8007d6a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e3e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007e54 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8007e42:	e792      	b.n	8007d6a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8007e44:	58024400 	.word	0x58024400
 8007e48:	4c742400 	.word	0x4c742400
 8007e4c:	03d09000 	.word	0x03d09000
 8007e50:	4bbebc20 	.word	0x4bbebc20
 8007e54:	4a742400 	.word	0x4a742400

08007e58 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e58:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8007e5c:	430b      	orrs	r3, r1
{
 8007e5e:	b500      	push	{lr}
 8007e60:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e62:	d071      	beq.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007e64:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	d033      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007e6c:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8007e70:	430b      	orrs	r3, r1
 8007e72:	f000 80c6 	beq.w	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e76:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8007e7a:	430b      	orrs	r3, r1
 8007e7c:	d078      	beq.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007e7e:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8007e82:	430b      	orrs	r3, r1
 8007e84:	f000 80d3 	beq.w	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e88:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	f000 812c 	beq.w	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e92:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8007e96:	430b      	orrs	r3, r1
 8007e98:	f000 8140 	beq.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e9c:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	f000 8103 	beq.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x254>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007ea6:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8007eaa:	4308      	orrs	r0, r1
 8007eac:	d137      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007eae:	4b96      	ldr	r3, [pc, #600]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8007eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eba:	d07f      	beq.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8007ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ec0:	f000 8167 	beq.w	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8007ec4:	bb5b      	cbnz	r3, 8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ec6:	4b90      	ldr	r3, [pc, #576]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007ece:	d038      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = HSE_VALUE;
 8007ed0:	488e      	ldr	r0, [pc, #568]	@ (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ed2:	e036      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007ed4:	4a8c      	ldr	r2, [pc, #560]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007ed6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007ed8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8007edc:	2b80      	cmp	r3, #128	@ 0x80
 8007ede:	f000 808b 	beq.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007ee2:	d920      	bls.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8007ee4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee6:	d02b      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eec:	d117      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eee:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ef0:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ef6:	0749      	lsls	r1, r1, #29
 8007ef8:	d502      	bpl.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80c9 	beq.w	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f00:	4a81      	ldr	r2, [pc, #516]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	05d0      	lsls	r0, r2, #23
 8007f06:	d503      	bpl.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f0c:	f000 80cc 	beq.w	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f10:	4a7d      	ldr	r2, [pc, #500]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	0391      	lsls	r1, r2, #14
 8007f16:	d502      	bpl.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f1c:	d0d8      	beq.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 8007f1e:	2000      	movs	r0, #0
}
 8007f20:	b005      	add	sp, #20
 8007f22:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d03f      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007f2a:	2b40      	cmp	r3, #64	@ 0x40
 8007f2c:	d1f7      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f2e:	6810      	ldr	r0, [r2, #0]
 8007f30:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007f34:	d005      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f36:	a801      	add	r0, sp, #4
 8007f38:	f7ff fdc0 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f3c:	9801      	ldr	r0, [sp, #4]
 8007f3e:	e000      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f40:	4873      	ldr	r0, [pc, #460]	@ (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
}
 8007f42:	b005      	add	sp, #20
 8007f44:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f48:	4b6f      	ldr	r3, [pc, #444]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f4c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d8e4      	bhi.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8007f54:	a201      	add	r2, pc, #4	@ (adr r2, 8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007fbd 	.word	0x08007fbd
 8007f60:	08007fc9 	.word	0x08007fc9
 8007f64:	08007fd9 	.word	0x08007fd9
 8007f68:	08007f41 	.word	0x08007f41
 8007f6c:	08007fd5 	.word	0x08007fd5
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007f70:	4a65      	ldr	r2, [pc, #404]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f72:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007f74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8007f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f7c:	d03c      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8007f7e:	d935      	bls.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007f80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f84:	d0dc      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007f86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f8a:	d1c8      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f8c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f8e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f94:	0752      	lsls	r2, r2, #29
 8007f96:	d5b3      	bpl.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1b1      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007f9e:	485d      	ldr	r0, [pc, #372]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007fa6:	40d8      	lsrs	r0, r3
 8007fa8:	e7cb      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007faa:	6810      	ldr	r0, [r2, #0]
 8007fac:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8007fb0:	d0c7      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fb2:	a801      	add	r0, sp, #4
 8007fb4:	f7ff feb6 	bl	8007d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fb8:	9802      	ldr	r0, [sp, #8]
 8007fba:	e7c2      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fbc:	4b52      	ldr	r3, [pc, #328]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8007fc4:	d0bd      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007fc6:	e7f4      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007fd0:	d0b7      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8007fd2:	e7b0      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007fd6:	e78a      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007fe0:	d0af      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe2:	a801      	add	r0, sp, #4
 8007fe4:	f7ff fe04 	bl	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fe8:	9801      	ldr	r0, [sp, #4]
 8007fea:	e7aa      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0dc      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff4:	d09b      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007ff6:	e792      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ff8:	6810      	ldr	r0, [r2, #0]
 8007ffa:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007ffe:	d0a0      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8008000:	e7ef      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008002:	4a41      	ldr	r2, [pc, #260]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8008004:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008006:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
    switch (saiclocksource)
 800800a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800800e:	d0f3      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8008010:	d805      	bhi.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0c9      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800801a:	d088      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800801c:	e77f      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800801e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008022:	d08d      	beq.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008028:	f43f af61 	beq.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800802c:	e777      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800802e:	4a36      	ldr	r2, [pc, #216]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8008030:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008032:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8008036:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800803a:	d025      	beq.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800803c:	d80f      	bhi.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 800803e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008042:	d048      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8008044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008048:	d116      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800804a:	6810      	ldr	r0, [r2, #0]
 800804c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008050:	f43f af77 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008054:	a801      	add	r0, sp, #4
 8008056:	f7ff fdcb 	bl	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800805a:	9802      	ldr	r0, [sp, #8]
 800805c:	e771      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800805e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008062:	d01c      	beq.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8008064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008068:	f47f af59 	bne.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800806c:	6810      	ldr	r0, [r2, #0]
 800806e:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008072:	f43f af66 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8008076:	e72b      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8008078:	2b00      	cmp	r3, #0
 800807a:	f47f af50 	bne.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
}
 800807e:	b005      	add	sp, #20
 8008080:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8008084:	f7fe bcd6 	b.w	8006a34 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008088:	6810      	ldr	r0, [r2, #0]
 800808a:	f010 0004 	ands.w	r0, r0, #4
 800808e:	f43f af58 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	481f      	ldr	r0, [pc, #124]	@ (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008096:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800809a:	40d8      	lsrs	r0, r3
 800809c:	e751      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800809e:	6810      	ldr	r0, [r2, #0]
 80080a0:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80080a4:	f43f af4d 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          frequency = CSI_VALUE;
 80080a8:	481b      	ldr	r0, [pc, #108]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80080aa:	e74a      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80080ac:	4a16      	ldr	r2, [pc, #88]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80080ae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80080b0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 80080b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080b8:	d072      	beq.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 80080ba:	d83e      	bhi.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 80080bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080c0:	d067      	beq.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80080c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080c6:	d14b      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80080d0:	f43f af37 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 80080d4:	e7be      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080d6:	6810      	ldr	r0, [r2, #0]
 80080d8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80080dc:	f43f af31 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e0:	a801      	add	r0, sp, #4
 80080e2:	f7ff fceb 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080e6:	9802      	ldr	r0, [sp, #8]
 80080e8:	e72b      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80080ea:	4a07      	ldr	r2, [pc, #28]	@ (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80080ec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80080ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80080f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f6:	d042      	beq.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80080f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080fc:	f43f af46 	beq.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008100:	2b00      	cmp	r3, #0
 8008102:	f47f af0c 	bne.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8008106:	e712      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8008108:	58024400 	.word	0x58024400
 800810c:	017d7840 	.word	0x017d7840
 8008110:	00bb8000 	.word	0x00bb8000
 8008114:	03d09000 	.word	0x03d09000
 8008118:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800811c:	4b23      	ldr	r3, [pc, #140]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800811e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8008120:	03d2      	lsls	r2, r2, #15
 8008122:	f57f af4c 	bpl.w	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800812c:	f43f af09 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008130:	a801      	add	r0, sp, #4
 8008132:	f7ff fcc3 	bl	8007abc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008136:	9803      	ldr	r0, [sp, #12]
 8008138:	e703      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    switch (srcclk)
 800813a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800813e:	f43f aec2 	beq.w	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8008142:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008146:	f43f aefb 	beq.w	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800814a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800814e:	f47f aee6 	bne.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008152:	4b16      	ldr	r3, [pc, #88]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800815a:	f43f aef2 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800815e:	e7a3      	b.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    switch (srcclk)
 8008160:	2b00      	cmp	r3, #0
 8008162:	f47f aedc 	bne.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008166:	f7fe fc25 	bl	80069b4 <HAL_RCC_GetHCLKFreq>
 800816a:	4b10      	ldr	r3, [pc, #64]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800816c:	4a10      	ldr	r2, [pc, #64]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800816e:	6a1b      	ldr	r3, [r3, #32]
 8008170:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008174:	5cd3      	ldrb	r3, [r2, r3]
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	40d8      	lsrs	r0, r3
        break;
 800817c:	e6e1      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800817e:	6810      	ldr	r0, [r2, #0]
 8008180:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008184:	f43f aedd 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008188:	a801      	add	r0, sp, #4
 800818a:	f7ff fd31 	bl	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800818e:	9803      	ldr	r0, [sp, #12]
 8008190:	e6d7      	b.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008192:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800819a:	f43f aed2 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 800819e:	e79f      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081a0:	6810      	ldr	r0, [r2, #0]
 80081a2:	f010 0004 	ands.w	r0, r0, #4
 80081a6:	f43f aecc 	beq.w	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 80081aa:	e6f7      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80081ac:	58024400 	.word	0x58024400
 80081b0:	0800d4f8 	.word	0x0800d4f8

080081b4 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80081b4:	6803      	ldr	r3, [r0, #0]
{
 80081b6:	b530      	push	{r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80081b8:	689c      	ldr	r4, [r3, #8]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80081ba:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80081bc:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80081be:	f3c0 000e 	ubfx	r0, r0, #0, #15

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80081c2:	f3c3 2e06 	ubfx	lr, r3, #8, #7
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80081c6:	f003 0c7f 	and.w	ip, r3, #127	@ 0x7f
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80081ca:	f3c3 4506 	ubfx	r5, r3, #16, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80081ce:	e9c1 4001 	strd	r4, r0, [r1, #4]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80081d2:	f3c3 4405 	ubfx	r4, r3, #16, #6
 80081d6:	2000      	movs	r0, #0
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80081d8:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80081dc:	f364 0007 	bfi	r0, r4, #0, #8
 80081e0:	f36e 200f 	bfi	r0, lr, #8, #8
 80081e4:	f36c 4017 	bfi	r0, ip, #16, #8
 80081e8:	f363 601f 	bfi	r0, r3, #24, #8
 80081ec:	6008      	str	r0, [r1, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80081ee:	b9da      	cbnz	r2, 8008228 <HAL_RTC_GetTime+0x74>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80081f0:	ea4f 131e 	mov.w	r3, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 80081f4:	f00e 0e0f 	and.w	lr, lr, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80081f8:	0924      	lsrs	r4, r4, #4
  return (tmp + (Value & 0x0FU));
 80081fa:	f005 050f 	and.w	r5, r5, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80081fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008202:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & 0x0FU));
 8008206:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800820a:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 800820e:	f00c 0c0f 	and.w	ip, ip, #15
 8008212:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008216:	f881 e001 	strb.w	lr, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800821a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800821e:	700d      	strb	r5, [r1, #0]
  return (tmp + (Value & 0x0FU));
 8008220:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008224:	f881 c002 	strb.w	ip, [r1, #2]
}
 8008228:	2000      	movs	r0, #0
 800822a:	bd30      	pop	{r4, r5, pc}

0800822c <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800822c:	6803      	ldr	r3, [r0, #0]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800822e:	2000      	movs	r0, #0
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008230:	685b      	ldr	r3, [r3, #4]
{
 8008232:	b510      	push	{r4, lr}
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008234:	f3c3 3e42 	ubfx	lr, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008238:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800823c:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008240:	f36e 0007 	bfi	r0, lr, #0, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008244:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800824c:	f36e 200f 	bfi	r0, lr, #8, #8
 8008250:	f363 4017 	bfi	r0, r3, #16, #8
 8008254:	f36c 601f 	bfi	r0, ip, #24, #8
 8008258:	6008      	str	r0, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800825a:	b9d2      	cbnz	r2, 8008292 <HAL_RTC_GetDate+0x66>
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800825c:	091a      	lsrs	r2, r3, #4
  return (tmp + (Value & 0x0FU));
 800825e:	f003 030f 	and.w	r3, r3, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008262:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  return (tmp + (Value & 0x0FU));
 8008266:	f004 040f 	and.w	r4, r4, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800826a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800826e:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (Value & 0x0FU));
 8008272:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008276:	eb04 044e 	add.w	r4, r4, lr, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800827a:	708b      	strb	r3, [r1, #2]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800827c:	ea4f 131c 	mov.w	r3, ip, lsr #4
  return (tmp + (Value & 0x0FU));
 8008280:	f00c 0c0f 	and.w	ip, ip, #15
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008284:	704c      	strb	r4, [r1, #1]
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008286:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800828a:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800828e:	f881 c003 	strb.w	ip, [r1, #3]
}
 8008292:	2000      	movs	r0, #0
 8008294:	bd10      	pop	{r4, pc}
 8008296:	bf00      	nop

08008298 <RTC_ExitInitMode>:
{
 8008298:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800829a:	4b20      	ldr	r3, [pc, #128]	@ (800831c <RTC_ExitInitMode+0x84>)
{
 800829c:	4604      	mov	r4, r0
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800829e:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082a6:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	0690      	lsls	r0, r2, #26
 80082ac:	d411      	bmi.n	80082d2 <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80082ae:	4b1c      	ldr	r3, [pc, #112]	@ (8008320 <RTC_ExitInitMode+0x88>)
 80082b0:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 80082b2:	f7fb fe03 	bl	8003ebc <HAL_GetTick>
 80082b6:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80082b8:	e005      	b.n	80082c6 <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80082ba:	f7fb fdff 	bl	8003ebc <HAL_GetTick>
 80082be:	1b43      	subs	r3, r0, r5
 80082c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082c4:	d825      	bhi.n	8008312 <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	069a      	lsls	r2, r3, #26
 80082cc:	d5f5      	bpl.n	80082ba <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80082ce:	2000      	movs	r0, #0
}
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80082d2:	699a      	ldr	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80082d4:	4812      	ldr	r0, [pc, #72]	@ (8008320 <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80082d6:	f022 0220 	bic.w	r2, r2, #32
 80082da:	619a      	str	r2, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80082dc:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 80082de:	f7fb fded 	bl	8003ebc <HAL_GetTick>
 80082e2:	4605      	mov	r5, r0
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80082e4:	e005      	b.n	80082f2 <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80082e6:	f7fb fde9 	bl	8003ebc <HAL_GetTick>
 80082ea:	1b43      	subs	r3, r0, r5
 80082ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082f0:	d80a      	bhi.n	8008308 <RTC_ExitInitMode+0x70>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	069b      	lsls	r3, r3, #26
 80082f8:	d5f5      	bpl.n	80082e6 <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 80082fa:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80082fc:	4a07      	ldr	r2, [pc, #28]	@ (800831c <RTC_ExitInitMode+0x84>)
 80082fe:	6993      	ldr	r3, [r2, #24]
 8008300:	f043 0320 	orr.w	r3, r3, #32
 8008304:	6193      	str	r3, [r2, #24]
}
 8008306:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008308:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 800830a:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800830c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8008310:	e7f4      	b.n	80082fc <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008312:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8008314:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008316:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	58004000 	.word	0x58004000
 8008320:	0001005f 	.word	0x0001005f

08008324 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8008324:	2800      	cmp	r0, #0
 8008326:	d046      	beq.n	80083b6 <HAL_RTC_Init+0x92>
{
 8008328:	b570      	push	{r4, r5, r6, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800832a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800832e:	4604      	mov	r4, r0
 8008330:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008334:	2b00      	cmp	r3, #0
 8008336:	d039      	beq.n	80083ac <HAL_RTC_Init+0x88>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008338:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800833a:	6822      	ldr	r2, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800833c:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008340:	68d3      	ldr	r3, [r2, #12]
 8008342:	06db      	lsls	r3, r3, #27
 8008344:	d504      	bpl.n	8008350 <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 8008346:	2301      	movs	r3, #1
 8008348:	2000      	movs	r0, #0
 800834a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
}
 800834e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008350:	21ca      	movs	r1, #202	@ 0xca
 8008352:	2353      	movs	r3, #83	@ 0x53
 8008354:	6251      	str	r1, [r2, #36]	@ 0x24
 8008356:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008358:	68d5      	ldr	r5, [r2, #12]
 800835a:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 800835e:	d02c      	beq.n	80083ba <HAL_RTC_Init+0x96>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008360:	6990      	ldr	r0, [r2, #24]
 8008362:	4929      	ldr	r1, [pc, #164]	@ (8008408 <HAL_RTC_Init+0xe4>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008364:	6863      	ldr	r3, [r4, #4]
 8008366:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008368:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800836a:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800836c:	6191      	str	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800836e:	69a1      	ldr	r1, [r4, #24]
 8008370:	6990      	ldr	r0, [r2, #24]
 8008372:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008374:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008376:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 8008378:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800837a:	6193      	str	r3, [r2, #24]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800837c:	68e3      	ldr	r3, [r4, #12]
 800837e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008382:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8008384:	f7ff ff88 	bl	8008298 <RTC_ExitInitMode>
      if(status == HAL_OK)
 8008388:	2800      	cmp	r0, #0
 800838a:	d133      	bne.n	80083f4 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800838c:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800838e:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008390:	6991      	ldr	r1, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008392:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008396:	f021 4160 	bic.w	r1, r1, #3758096384	@ 0xe0000000
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800839a:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800839c:	6191      	str	r1, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800839e:	21ff      	movs	r1, #255	@ 0xff
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80083a0:	4303      	orrs	r3, r0
 80083a2:	6990      	ldr	r0, [r2, #24]
 80083a4:	4303      	orrs	r3, r0
 80083a6:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083a8:	6251      	str	r1, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 80083aa:	e7cc      	b.n	8008346 <HAL_RTC_Init+0x22>
      hrtc->Lock = HAL_UNLOCKED;
 80083ac:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
      HAL_RTC_MspInit(hrtc);
 80083b0:	f7fb fc22 	bl	8003bf8 <HAL_RTC_MspInit>
 80083b4:	e7c0      	b.n	8008338 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 80083b6:	2001      	movs	r0, #1
}
 80083b8:	4770      	bx	lr
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80083ba:	68d3      	ldr	r3, [r2, #12]
 80083bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80083c2:	f7fb fd7b 	bl	8003ebc <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 80083c6:	4629      	mov	r1, r5
    tickstart = HAL_GetTick();
 80083c8:	4606      	mov	r6, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80083ca:	e008      	b.n	80083de <HAL_RTC_Init+0xba>
 80083cc:	2903      	cmp	r1, #3
 80083ce:	d00d      	beq.n	80083ec <HAL_RTC_Init+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80083d0:	f7fb fd74 	bl	8003ebc <HAL_GetTick>
 80083d4:	1b80      	subs	r0, r0, r6
 80083d6:	4629      	mov	r1, r5
 80083d8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80083dc:	d80e      	bhi.n	80083fc <HAL_RTC_Init+0xd8>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	68d5      	ldr	r5, [r2, #12]
 80083e2:	f015 0540 	ands.w	r5, r5, #64	@ 0x40
 80083e6:	d0f1      	beq.n	80083cc <HAL_RTC_Init+0xa8>
      if (status == HAL_OK)
 80083e8:	2900      	cmp	r1, #0
 80083ea:	d0b9      	beq.n	8008360 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083ec:	23ff      	movs	r3, #255	@ 0xff
 80083ee:	2003      	movs	r0, #3
 80083f0:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	22ff      	movs	r2, #255	@ 0xff
 80083f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 80083fe:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008400:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 8008404:	e7eb      	b.n	80083de <HAL_RTC_Init+0xba>
 8008406:	bf00      	nop
 8008408:	fb8fffbf 	.word	0xfb8fffbf

0800840c <HAL_RTC_SetTime>:
{
 800840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hrtc);
 8008410:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008414:	2b01      	cmp	r3, #1
 8008416:	d065      	beq.n	80084e4 <HAL_RTC_SetTime+0xd8>
 8008418:	2301      	movs	r3, #1
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800841a:	6805      	ldr	r5, [r0, #0]
 800841c:	4681      	mov	r9, r0
 800841e:	460f      	mov	r7, r1
  __HAL_LOCK(hrtc);
 8008420:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008424:	2302      	movs	r3, #2
 8008426:	4616      	mov	r6, r2
 8008428:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800842c:	23ca      	movs	r3, #202	@ 0xca
 800842e:	626b      	str	r3, [r5, #36]	@ 0x24
 8008430:	2353      	movs	r3, #83	@ 0x53
 8008432:	626b      	str	r3, [r5, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008434:	68ec      	ldr	r4, [r5, #12]
 8008436:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 800843a:	d030      	beq.n	800849e <HAL_RTC_SetTime+0x92>
    if(Format == RTC_FORMAT_BIN)
 800843c:	2e00      	cmp	r6, #0
 800843e:	d154      	bne.n	80084ea <HAL_RTC_SetTime+0xde>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008440:	69a8      	ldr	r0, [r5, #24]
 8008442:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 8008446:	d07d      	beq.n	8008544 <HAL_RTC_SetTime+0x138>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008448:	78f8      	ldrb	r0, [r7, #3]
 800844a:	0580      	lsls	r0, r0, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800844c:	783b      	ldrb	r3, [r7, #0]
  while (bcdlow >= 10U)
 800844e:	2b09      	cmp	r3, #9
 8008450:	d908      	bls.n	8008464 <HAL_RTC_SetTime+0x58>
  uint32_t bcdhigh = 0U;
 8008452:	2200      	movs	r2, #0
    bcdlow -= 10U;
 8008454:	3b0a      	subs	r3, #10
    bcdhigh++;
 8008456:	3201      	adds	r2, #1
    bcdlow -= 10U;
 8008458:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 800845a:	2b09      	cmp	r3, #9
 800845c:	d8fa      	bhi.n	8008454 <HAL_RTC_SetTime+0x48>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800845e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008462:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008464:	787a      	ldrb	r2, [r7, #1]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008466:	041b      	lsls	r3, r3, #16
  while (bcdlow >= 10U)
 8008468:	2a09      	cmp	r2, #9
 800846a:	d908      	bls.n	800847e <HAL_RTC_SetTime+0x72>
  uint32_t bcdhigh = 0U;
 800846c:	2100      	movs	r1, #0
    bcdlow -= 10U;
 800846e:	3a0a      	subs	r2, #10
    bcdhigh++;
 8008470:	3101      	adds	r1, #1
    bcdlow -= 10U;
 8008472:	b2d2      	uxtb	r2, r2
  while (bcdlow >= 10U)
 8008474:	2a09      	cmp	r2, #9
 8008476:	d8fa      	bhi.n	800846e <HAL_RTC_SetTime+0x62>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008478:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800847c:	b2d2      	uxtb	r2, r2
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800847e:	78b9      	ldrb	r1, [r7, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008480:	0212      	lsls	r2, r2, #8
  while (bcdlow >= 10U)
 8008482:	2909      	cmp	r1, #9
 8008484:	d907      	bls.n	8008496 <HAL_RTC_SetTime+0x8a>
    bcdlow -= 10U;
 8008486:	390a      	subs	r1, #10
    bcdhigh++;
 8008488:	3601      	adds	r6, #1
    bcdlow -= 10U;
 800848a:	b2c9      	uxtb	r1, r1
  while (bcdlow >= 10U)
 800848c:	2909      	cmp	r1, #9
 800848e:	d8fa      	bhi.n	8008486 <HAL_RTC_SetTime+0x7a>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008490:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8008494:	b2c9      	uxtb	r1, r1
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008496:	4303      	orrs	r3, r0
 8008498:	4313      	orrs	r3, r2
 800849a:	430b      	orrs	r3, r1
 800849c:	e033      	b.n	8008506 <HAL_RTC_SetTime+0xfa>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800849e:	68eb      	ldr	r3, [r5, #12]
 80084a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084a4:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80084a6:	f7fb fd09 	bl	8003ebc <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 80084aa:	4622      	mov	r2, r4
    tickstart = HAL_GetTick();
 80084ac:	4680      	mov	r8, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084ae:	e009      	b.n	80084c4 <HAL_RTC_SetTime+0xb8>
 80084b0:	2a03      	cmp	r2, #3
 80084b2:	d00f      	beq.n	80084d4 <HAL_RTC_SetTime+0xc8>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80084b4:	f7fb fd02 	bl	8003ebc <HAL_GetTick>
 80084b8:	eba0 0308 	sub.w	r3, r0, r8
 80084bc:	4622      	mov	r2, r4
 80084be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084c2:	d83a      	bhi.n	800853a <HAL_RTC_SetTime+0x12e>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084c4:	f8d9 5000 	ldr.w	r5, [r9]
 80084c8:	68ec      	ldr	r4, [r5, #12]
 80084ca:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 80084ce:	d0ef      	beq.n	80084b0 <HAL_RTC_SetTime+0xa4>
  if (status == HAL_OK)
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	d0b3      	beq.n	800843c <HAL_RTC_SetTime+0x30>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d4:	23ff      	movs	r3, #255	@ 0xff
 80084d6:	2003      	movs	r0, #3
 80084d8:	626b      	str	r3, [r5, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80084da:	2300      	movs	r3, #0
 80084dc:	f889 3024 	strb.w	r3, [r9, #36]	@ 0x24
}
 80084e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hrtc);
 80084e4:	2002      	movs	r0, #2
}
 80084e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084ea:	69aa      	ldr	r2, [r5, #24]
 80084ec:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
 80084f0:	d02a      	beq.n	8008548 <HAL_RTC_SetTime+0x13c>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	0592      	lsls	r2, r2, #22
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084f6:	787b      	ldrb	r3, [r7, #1]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084f8:	7839      	ldrb	r1, [r7, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084fa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008500:	78b9      	ldrb	r1, [r7, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008502:	430b      	orrs	r3, r1
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008504:	4313      	orrs	r3, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008506:	4a11      	ldr	r2, [pc, #68]	@ (800854c <HAL_RTC_SetTime+0x140>)
    status = RTC_ExitInitMode(hrtc);
 8008508:	4648      	mov	r0, r9
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800850a:	401a      	ands	r2, r3
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800850c:	e9d7 3103 	ldrd	r3, r1, [r7, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008510:	602a      	str	r2, [r5, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008512:	69aa      	ldr	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008514:	430b      	orrs	r3, r1
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008516:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800851a:	61aa      	str	r2, [r5, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800851c:	69aa      	ldr	r2, [r5, #24]
 800851e:	4313      	orrs	r3, r2
 8008520:	61ab      	str	r3, [r5, #24]
    status = RTC_ExitInitMode(hrtc);
 8008522:	f7ff feb9 	bl	8008298 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008526:	f8d9 3000 	ldr.w	r3, [r9]
 800852a:	22ff      	movs	r2, #255	@ 0xff
 800852c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800852e:	2800      	cmp	r0, #0
 8008530:	d1d3      	bne.n	80084da <HAL_RTC_SetTime+0xce>
    hrtc->State = HAL_RTC_STATE_READY;
 8008532:	2301      	movs	r3, #1
 8008534:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 8008538:	e7cf      	b.n	80084da <HAL_RTC_SetTime+0xce>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800853a:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800853c:	461a      	mov	r2, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800853e:	f889 3025 	strb.w	r3, [r9, #37]	@ 0x25
 8008542:	e7bf      	b.n	80084c4 <HAL_RTC_SetTime+0xb8>
        sTime->TimeFormat = 0x00U;
 8008544:	70fe      	strb	r6, [r7, #3]
 8008546:	e781      	b.n	800844c <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 8008548:	70fa      	strb	r2, [r7, #3]
 800854a:	e7d4      	b.n	80084f6 <HAL_RTC_SetTime+0xea>
 800854c:	007f7f7f 	.word	0x007f7f7f

08008550 <HAL_RTC_SetDate>:
{
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8008552:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008556:	2b01      	cmp	r3, #1
 8008558:	f000 808b 	beq.w	8008672 <HAL_RTC_SetDate+0x122>
 800855c:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800855e:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8008560:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008562:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_LOCK(hrtc);
 8008566:	f885 0024 	strb.w	r0, [r5, #36]	@ 0x24
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800856a:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800856c:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800856e:	f891 c001 	ldrb.w	ip, [r1, #1]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008572:	0376      	lsls	r6, r6, #13
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008574:	7888      	ldrb	r0, [r1, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008576:	b1f2      	cbz	r2, 80085b6 <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008578:	ea46 4403 	orr.w	r4, r6, r3, lsl #16
 800857c:	4304      	orrs	r4, r0
 800857e:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008582:	682a      	ldr	r2, [r5, #0]
 8008584:	21ca      	movs	r1, #202	@ 0xca
 8008586:	2353      	movs	r3, #83	@ 0x53
 8008588:	6251      	str	r1, [r2, #36]	@ 0x24
 800858a:	6253      	str	r3, [r2, #36]	@ 0x24
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800858c:	68d6      	ldr	r6, [r2, #12]
 800858e:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 8008592:	d049      	beq.n	8008628 <HAL_RTC_SetDate+0xd8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008594:	4b39      	ldr	r3, [pc, #228]	@ (800867c <HAL_RTC_SetDate+0x12c>)
    status = RTC_ExitInitMode(hrtc);
 8008596:	4628      	mov	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008598:	4023      	ands	r3, r4
 800859a:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800859c:	f7ff fe7c 	bl	8008298 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	22ff      	movs	r2, #255	@ 0xff
 80085a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80085a6:	b910      	cbnz	r0, 80085ae <HAL_RTC_SetDate+0x5e>
    hrtc->State = HAL_RTC_STATE_READY;
 80085a8:	2301      	movs	r3, #1
 80085aa:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
  __HAL_UNLOCK(hrtc);
 80085ae:	2300      	movs	r3, #0
 80085b0:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
}
 80085b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80085b6:	f01c 0f10 	tst.w	ip, #16
 80085ba:	d052      	beq.n	8008662 <HAL_RTC_SetDate+0x112>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085bc:	f02c 0c10 	bic.w	ip, ip, #16
  while (bcdlow >= 10U)
 80085c0:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085c2:	f10c 0c0a 	add.w	ip, ip, #10
 80085c6:	fa5f fc8c 	uxtb.w	ip, ip
 80085ca:	f881 c001 	strb.w	ip, [r1, #1]
  while (bcdlow >= 10U)
 80085ce:	d952      	bls.n	8008676 <HAL_RTC_SetDate+0x126>
  uint32_t bcdhigh = 0U;
 80085d0:	2100      	movs	r1, #0
    bcdlow -= 10U;
 80085d2:	3b0a      	subs	r3, #10
    bcdhigh++;
 80085d4:	3101      	adds	r1, #1
    bcdlow -= 10U;
 80085d6:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 80085d8:	2b09      	cmp	r3, #9
 80085da:	d8fa      	bhi.n	80085d2 <HAL_RTC_SetDate+0x82>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80085dc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80085e0:	b2db      	uxtb	r3, r3
  while (bcdlow >= 10U)
 80085e2:	f1bc 0f09 	cmp.w	ip, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085e6:	ea4f 4403 	mov.w	r4, r3, lsl #16
  while (bcdlow >= 10U)
 80085ea:	d90c      	bls.n	8008606 <HAL_RTC_SetDate+0xb6>
  uint32_t bcdhigh = 0U;
 80085ec:	2300      	movs	r3, #0
    bcdlow -= 10U;
 80085ee:	f1ac 0c0a 	sub.w	ip, ip, #10
    bcdhigh++;
 80085f2:	3301      	adds	r3, #1
    bcdlow -= 10U;
 80085f4:	fa5f fc8c 	uxtb.w	ip, ip
  while (bcdlow >= 10U)
 80085f8:	f1bc 0f09 	cmp.w	ip, #9
 80085fc:	d8f7      	bhi.n	80085ee <HAL_RTC_SetDate+0x9e>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80085fe:	ea4c 1303 	orr.w	r3, ip, r3, lsl #4
 8008602:	fa5f fc83 	uxtb.w	ip, r3
  while (bcdlow >= 10U)
 8008606:	2809      	cmp	r0, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008608:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  while (bcdlow >= 10U)
 800860c:	d907      	bls.n	800861e <HAL_RTC_SetDate+0xce>
    bcdlow -= 10U;
 800860e:	380a      	subs	r0, #10
    bcdhigh++;
 8008610:	3201      	adds	r2, #1
    bcdlow -= 10U;
 8008612:	b2c0      	uxtb	r0, r0
  while (bcdlow >= 10U)
 8008614:	2809      	cmp	r0, #9
 8008616:	d8fa      	bhi.n	800860e <HAL_RTC_SetDate+0xbe>
  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8008618:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800861c:	b2d0      	uxtb	r0, r2
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800861e:	4334      	orrs	r4, r6
 8008620:	ea44 040c 	orr.w	r4, r4, ip
 8008624:	4304      	orrs	r4, r0
 8008626:	e7ac      	b.n	8008582 <HAL_RTC_SetDate+0x32>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008628:	68d3      	ldr	r3, [r2, #12]
 800862a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800862e:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8008630:	f7fb fc44 	bl	8003ebc <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 8008634:	4631      	mov	r1, r6
    tickstart = HAL_GetTick();
 8008636:	4607      	mov	r7, r0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008638:	e008      	b.n	800864c <HAL_RTC_SetDate+0xfc>
 800863a:	2903      	cmp	r1, #3
 800863c:	d00d      	beq.n	800865a <HAL_RTC_SetDate+0x10a>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800863e:	f7fb fc3d 	bl	8003ebc <HAL_GetTick>
 8008642:	1bc0      	subs	r0, r0, r7
 8008644:	4631      	mov	r1, r6
 8008646:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800864a:	d80d      	bhi.n	8008668 <HAL_RTC_SetDate+0x118>
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800864c:	682a      	ldr	r2, [r5, #0]
 800864e:	68d6      	ldr	r6, [r2, #12]
 8008650:	f016 0640 	ands.w	r6, r6, #64	@ 0x40
 8008654:	d0f1      	beq.n	800863a <HAL_RTC_SetDate+0xea>
  if (status == HAL_OK)
 8008656:	2900      	cmp	r1, #0
 8008658:	d09c      	beq.n	8008594 <HAL_RTC_SetDate+0x44>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800865a:	23ff      	movs	r3, #255	@ 0xff
 800865c:	2003      	movs	r0, #3
 800865e:	6253      	str	r3, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 8008660:	e7a5      	b.n	80085ae <HAL_RTC_SetDate+0x5e>
  while (bcdlow >= 10U)
 8008662:	2b09      	cmp	r3, #9
 8008664:	d8b4      	bhi.n	80085d0 <HAL_RTC_SetDate+0x80>
 8008666:	e7bc      	b.n	80085e2 <HAL_RTC_SetDate+0x92>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008668:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800866a:	4619      	mov	r1, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800866c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8008670:	e7ec      	b.n	800864c <HAL_RTC_SetDate+0xfc>
  __HAL_LOCK(hrtc);
 8008672:	2002      	movs	r0, #2
}
 8008674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008676:	041c      	lsls	r4, r3, #16
  while (bcdlow >= 10U)
 8008678:	e7b8      	b.n	80085ec <HAL_RTC_SetDate+0x9c>
 800867a:	bf00      	nop
 800867c:	00ffff3f 	.word	0x00ffff3f

08008680 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8008680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008684:	4605      	mov	r5, r0
 8008686:	b086      	sub	sp, #24
 8008688:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800868a:	f7fb fc17 	bl	8003ebc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800868e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8008690:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008692:	6828      	ldr	r0, [r5, #0]
 8008694:	f001 f904 	bl	80098a0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008698:	4604      	mov	r4, r0
 800869a:	b118      	cbz	r0, 80086a4 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800869c:	4620      	mov	r0, r4
 800869e:	b006      	add	sp, #24
 80086a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80086a4:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80086a6:	6828      	ldr	r0, [r5, #0]
 80086a8:	0409      	lsls	r1, r1, #16
 80086aa:	f001 fe71 	bl	800a390 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80086ae:	4604      	mov	r4, r0
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d1f3      	bne.n	800869c <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 80086b4:	f04f 32ff 	mov.w	r2, #4294967295
 80086b8:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086ba:	4669      	mov	r1, sp
 80086bc:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 80086be:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80086c2:	2230      	movs	r2, #48	@ 0x30
 80086c4:	2302      	movs	r3, #2
 80086c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086ca:	2200      	movs	r2, #0
 80086cc:	2301      	movs	r3, #1
 80086ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086d2:	f001 f8cf 	bl	8009874 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80086d6:	6828      	ldr	r0, [r5, #0]
 80086d8:	f001 ffee 	bl	800a6b8 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80086dc:	4604      	mov	r4, r0
 80086de:	2800      	cmp	r0, #0
 80086e0:	d1dc      	bne.n	800869c <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80086e2:	4682      	mov	sl, r0
 80086e4:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80086e6:	f240 582a 	movw	r8, #1322	@ 0x52a
 80086ea:	e004      	b.n	80086f6 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80086ec:	f7fb fbe6 	bl	8003ebc <HAL_GetTick>
 80086f0:	1b83      	subs	r3, r0, r6
 80086f2:	3301      	adds	r3, #1
 80086f4:	d024      	beq.n	8008740 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80086f6:	6828      	ldr	r0, [r5, #0]
 80086f8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80086fa:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80086fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008700:	d10c      	bne.n	800871c <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008702:	0319      	lsls	r1, r3, #12
 8008704:	d4f2      	bmi.n	80086ec <SD_FindSCR.constprop.0+0x6c>
 8008706:	2c00      	cmp	r4, #0
 8008708:	d1f0      	bne.n	80086ec <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800870a:	f001 f899 	bl	8009840 <SDMMC_ReadFIFO>
 800870e:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008710:	6828      	ldr	r0, [r5, #0]
      index++;
 8008712:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008714:	f001 f894 	bl	8009840 <SDMMC_ReadFIFO>
 8008718:	4682      	mov	sl, r0
      index++;
 800871a:	e7e7      	b.n	80086ec <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800871c:	071a      	lsls	r2, r3, #28
 800871e:	d416      	bmi.n	800874e <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008720:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008722:	079b      	lsls	r3, r3, #30
 8008724:	d40f      	bmi.n	8008746 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008726:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008728:	f014 0420 	ands.w	r4, r4, #32
 800872c:	d113      	bne.n	8008756 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800872e:	fa9a f28a 	rev.w	r2, sl
 8008732:	fa99 f389 	rev.w	r3, r9
 8008736:	490a      	ldr	r1, [pc, #40]	@ (8008760 <SD_FindSCR.constprop.0+0xe0>)
 8008738:	6381      	str	r1, [r0, #56]	@ 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800873a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800873e:	e7ad      	b.n	800869c <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8008740:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8008744:	e7aa      	b.n	800869c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008746:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008748:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800874a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800874c:	e7a6      	b.n	800869c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800874e:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008750:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008752:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008754:	e7a2      	b.n	800869c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008756:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8008758:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800875a:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800875c:	e79e      	b.n	800869c <SD_FindSCR.constprop.0+0x1c>
 800875e:	bf00      	nop
 8008760:	18000f3a 	.word	0x18000f3a

08008764 <HAL_SD_ReadBlocks>:
{
 8008764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	460d      	mov	r5, r1
 800876a:	b086      	sub	sp, #24
 800876c:	4604      	mov	r4, r0
 800876e:	4691      	mov	r9, r2
 8008770:	461f      	mov	r7, r3
 8008772:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 8008776:	f7fb fba1 	bl	8003ebc <HAL_GetTick>
  if (NULL == pData)
 800877a:	2d00      	cmp	r5, #0
 800877c:	d065      	beq.n	800884a <HAL_SD_ReadBlocks+0xe6>
  if (hsd->State == HAL_SD_STATE_READY)
 800877e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008782:	2b01      	cmp	r3, #1
 8008784:	d152      	bne.n	800882c <HAL_SD_ReadBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008786:	eb09 0307 	add.w	r3, r9, r7
 800878a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800878c:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800878e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008790:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008792:	d85f      	bhi.n	8008854 <HAL_SD_ReadBlocks+0xf0>
    hsd->State = HAL_SD_STATE_BUSY;
 8008794:	2303      	movs	r3, #3
 8008796:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8008798:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800879a:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 800879e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 80087a4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087a6:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087a8:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80087aa:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80087ae:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087b2:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 80087b6:	bf18      	it	ne
 80087b8:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087bc:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80087be:	027b      	lsls	r3, r7, #9
 80087c0:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80087c2:	2390      	movs	r3, #144	@ 0x90
 80087c4:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087c8:	f001 f854 	bl	8009874 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80087cc:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 80087ce:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80087d0:	68c3      	ldr	r3, [r0, #12]
 80087d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d6:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 80087d8:	d931      	bls.n	800883e <HAL_SD_ReadBlocks+0xda>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80087da:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80087dc:	f8c4 a02c 	str.w	sl, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80087e0:	f001 f9b6 	bl	8009b50 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e4:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d139      	bne.n	800885e <HAL_SD_ReadBlocks+0xfa>
    dataremaining = config.DataLength;
 80087ea:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80087ee:	e005      	b.n	80087fc <HAL_SD_ReadBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80087f0:	f7fb fb64 	bl	8003ebc <HAL_GetTick>
 80087f4:	1b82      	subs	r2, r0, r6
 80087f6:	4542      	cmp	r2, r8
 80087f8:	d25c      	bcs.n	80088b4 <HAL_SD_ReadBlocks+0x150>
 80087fa:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80087fc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80087fe:	4610      	mov	r0, r2
 8008800:	f413 7f95 	tst.w	r3, #298	@ 0x12a
 8008804:	d136      	bne.n	8008874 <HAL_SD_ReadBlocks+0x110>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008806:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008808:	041a      	lsls	r2, r3, #16
 800880a:	d5f1      	bpl.n	80087f0 <HAL_SD_ReadBlocks+0x8c>
 800880c:	f1b9 0f1f 	cmp.w	r9, #31
 8008810:	d9ee      	bls.n	80087f0 <HAL_SD_ReadBlocks+0x8c>
 8008812:	f105 0a20 	add.w	sl, r5, #32
 8008816:	e000      	b.n	800881a <HAL_SD_ReadBlocks+0xb6>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	f001 f811 	bl	8009840 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800881e:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8008822:	45aa      	cmp	sl, r5
 8008824:	d1f8      	bne.n	8008818 <HAL_SD_ReadBlocks+0xb4>
        dataremaining -= 32U;
 8008826:	f1a9 0920 	sub.w	r9, r9, #32
 800882a:	e7e1      	b.n	80087f0 <HAL_SD_ReadBlocks+0x8c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800882c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800882e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008832:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
}
 8008836:	4618      	mov	r0, r3
 8008838:	b006      	add	sp, #24
 800883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800883e:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008840:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008842:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008844:	f001 f8d8 	bl	80099f8 <SDMMC_CmdReadSingleBlock>
 8008848:	e7cc      	b.n	80087e4 <HAL_SD_ReadBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800884a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800884c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008850:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008852:	e7ef      	b.n	8008834 <HAL_SD_ReadBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008854:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008856:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800885a:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800885c:	e7ea      	b.n	8008834 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800885e:	4b31      	ldr	r3, [pc, #196]	@ (8008924 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 8008860:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008862:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008866:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 8008868:	4303      	orrs	r3, r0
 800886a:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800886c:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008870:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8008872:	e7df      	b.n	8008834 <HAL_SD_ReadBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008874:	68d3      	ldr	r3, [r2, #12]
 8008876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800887a:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800887c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800887e:	05db      	lsls	r3, r3, #23
 8008880:	d501      	bpl.n	8008886 <HAL_SD_ReadBlocks+0x122>
 8008882:	2f01      	cmp	r7, #1
 8008884:	d824      	bhi.n	80088d0 <HAL_SD_ReadBlocks+0x16c>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008886:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008888:	f013 0308 	ands.w	r3, r3, #8
 800888c:	d133      	bne.n	80088f6 <HAL_SD_ReadBlocks+0x192>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800888e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008890:	f012 0202 	ands.w	r2, r2, #2
 8008894:	d124      	bne.n	80088e0 <HAL_SD_ReadBlocks+0x17c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008896:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008898:	f013 0320 	ands.w	r3, r3, #32
 800889c:	d037      	beq.n	800890e <HAL_SD_ReadBlocks+0x1aa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800889e:	4b21      	ldr	r3, [pc, #132]	@ (8008924 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 80088a0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088a2:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80088a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088a6:	f043 0320 	orr.w	r3, r3, #32
 80088aa:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088ac:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088b0:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 80088b2:	e7bf      	b.n	8008834 <HAL_SD_ReadBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088b4:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80088b6:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088b8:	481a      	ldr	r0, [pc, #104]	@ (8008924 <HAL_SD_ReadBlocks+0x1c0>)
        hsd->Context = SD_CONTEXT_NONE;
 80088ba:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088bc:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80088be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088c4:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 80088c8:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80088cc:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80088ce:	e7b2      	b.n	8008836 <HAL_SD_ReadBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80088d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d0d7      	beq.n	8008886 <HAL_SD_ReadBlocks+0x122>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088d6:	f001 fb3f 	bl	8009f58 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80088da:	b9f0      	cbnz	r0, 800891a <HAL_SD_ReadBlocks+0x1b6>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	e7d2      	b.n	8008886 <HAL_SD_ReadBlocks+0x122>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088e0:	4a10      	ldr	r2, [pc, #64]	@ (8008924 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 80088e2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088e4:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80088e6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80088e8:	f042 0202 	orr.w	r2, r2, #2
 80088ec:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80088ee:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80088f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 80088f4:	e79e      	b.n	8008834 <HAL_SD_ReadBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <HAL_SD_ReadBlocks+0x1c0>)
      hsd->State = HAL_SD_STATE_READY;
 80088f8:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 80088fa:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088fc:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80088fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008900:	f043 0308 	orr.w	r3, r3, #8
 8008904:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008906:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800890a:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 800890c:	e792      	b.n	8008834 <HAL_SD_ReadBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800890e:	4906      	ldr	r1, [pc, #24]	@ (8008928 <HAL_SD_ReadBlocks+0x1c4>)
    hsd->State = HAL_SD_STATE_READY;
 8008910:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008912:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008914:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 8008918:	e78d      	b.n	8008836 <HAL_SD_ReadBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800891a:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 800891c:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800891e:	4a01      	ldr	r2, [pc, #4]	@ (8008924 <HAL_SD_ReadBlocks+0x1c0>)
 8008920:	639a      	str	r2, [r3, #56]	@ 0x38
 8008922:	e79f      	b.n	8008864 <HAL_SD_ReadBlocks+0x100>
 8008924:	1fe00fff 	.word	0x1fe00fff
 8008928:	18000f3a 	.word	0x18000f3a

0800892c <HAL_SD_WriteBlocks>:
{
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	460d      	mov	r5, r1
 8008932:	b088      	sub	sp, #32
 8008934:	4604      	mov	r4, r0
 8008936:	4691      	mov	r9, r2
 8008938:	461f      	mov	r7, r3
 800893a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800893e:	f7fb fabd 	bl	8003ebc <HAL_GetTick>
  if (NULL == pData)
 8008942:	2d00      	cmp	r5, #0
 8008944:	d064      	beq.n	8008a10 <HAL_SD_WriteBlocks+0xe4>
  if (hsd->State == HAL_SD_STATE_READY)
 8008946:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800894a:	2b01      	cmp	r3, #1
 800894c:	d152      	bne.n	80089f4 <HAL_SD_WriteBlocks+0xc8>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800894e:	eb09 0307 	add.w	r3, r9, r7
 8008952:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008954:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008956:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008958:	6361      	str	r1, [r4, #52]	@ 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800895a:	d85e      	bhi.n	8008a1a <HAL_SD_WriteBlocks+0xee>
    hsd->State = HAL_SD_STATE_BUSY;
 800895c:	2303      	movs	r3, #3
 800895e:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8008960:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8008962:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008966:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->Instance->DCTRL = 0U;
 8008968:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800896a:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800896c:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800896e:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008972:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008976:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008978:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 800897c:	bf18      	it	ne
 800897e:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008982:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008984:	027b      	lsls	r3, r7, #9
 8008986:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008988:	2390      	movs	r3, #144	@ 0x90
 800898a:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800898c:	f000 ff72 	bl	8009874 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008990:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 8008992:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008994:	4649      	mov	r1, r9
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008996:	68c3      	ldr	r3, [r0, #12]
 8008998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899c:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 800899e:	d932      	bls.n	8008a06 <HAL_SD_WriteBlocks+0xda>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80089a0:	2320      	movs	r3, #32
 80089a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80089a4:	f001 fa2c 	bl	8009e00 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089a8:	6822      	ldr	r2, [r4, #0]
    if (errorstate != HAL_SD_ERROR_NONE)
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d13a      	bne.n	8008a24 <HAL_SD_WriteBlocks+0xf8>
    dataremaining = config.DataLength;
 80089ae:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80089b2:	e005      	b.n	80089c0 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80089b4:	f7fb fa82 	bl	8003ebc <HAL_GetTick>
 80089b8:	1b82      	subs	r2, r0, r6
 80089ba:	4542      	cmp	r2, r8
 80089bc:	d25d      	bcs.n	8008a7a <HAL_SD_WriteBlocks+0x14e>
 80089be:	6822      	ldr	r2, [r4, #0]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80089c0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80089c2:	4610      	mov	r0, r2
 80089c4:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
 80089c8:	d137      	bne.n	8008a3a <HAL_SD_WriteBlocks+0x10e>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80089ca:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80089cc:	045a      	lsls	r2, r3, #17
 80089ce:	d5f1      	bpl.n	80089b4 <HAL_SD_WriteBlocks+0x88>
 80089d0:	f1b9 0f1f 	cmp.w	r9, #31
 80089d4:	d9ee      	bls.n	80089b4 <HAL_SD_WriteBlocks+0x88>
 80089d6:	f105 0a20 	add.w	sl, r5, #32
 80089da:	e000      	b.n	80089de <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80089dc:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80089de:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80089e2:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80089e4:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80089e6:	f000 ff2f 	bl	8009848 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80089ea:	4555      	cmp	r5, sl
 80089ec:	d1f6      	bne.n	80089dc <HAL_SD_WriteBlocks+0xb0>
        dataremaining -= 32U;
 80089ee:	f1a9 0920 	sub.w	r9, r9, #32
 80089f2:	e7df      	b.n	80089b4 <HAL_SD_WriteBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80089f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089fa:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	b008      	add	sp, #32
 8008a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008a06:	2310      	movs	r3, #16
 8008a08:	62e3      	str	r3, [r4, #44]	@ 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008a0a:	f001 f94d 	bl	8009ca8 <SDMMC_CmdWriteSingleBlock>
 8008a0e:	e7cb      	b.n	80089a8 <HAL_SD_WriteBlocks+0x7c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a16:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008a18:	e7f0      	b.n	80089fc <HAL_SD_WriteBlocks+0xd0>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008a20:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8008a22:	e7eb      	b.n	80089fc <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a24:	4b30      	ldr	r3, [pc, #192]	@ (8008ae8 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 8008a26:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a28:	6393      	str	r3, [r2, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008a2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008a2c:	2200      	movs	r2, #0
          hsd->ErrorCode |= errorstate;
 8008a2e:	4303      	orrs	r3, r0
 8008a30:	6363      	str	r3, [r4, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008a32:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008a36:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8008a38:	e7e0      	b.n	80089fc <HAL_SD_WriteBlocks+0xd0>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008a3a:	68d3      	ldr	r3, [r2, #12]
 8008a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a40:	60d3      	str	r3, [r2, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a42:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008a44:	05db      	lsls	r3, r3, #23
 8008a46:	d501      	bpl.n	8008a4c <HAL_SD_WriteBlocks+0x120>
 8008a48:	2f01      	cmp	r7, #1
 8008a4a:	d822      	bhi.n	8008a92 <HAL_SD_WriteBlocks+0x166>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a4c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008a4e:	f013 0308 	ands.w	r3, r3, #8
 8008a52:	d131      	bne.n	8008ab8 <HAL_SD_WriteBlocks+0x18c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a54:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8008a56:	f012 0202 	ands.w	r2, r2, #2
 8008a5a:	d122      	bne.n	8008aa2 <HAL_SD_WriteBlocks+0x176>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008a5c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008a5e:	f013 0310 	ands.w	r3, r3, #16
 8008a62:	d035      	beq.n	8008ad0 <HAL_SD_WriteBlocks+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a64:	4b20      	ldr	r3, [pc, #128]	@ (8008ae8 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 8008a66:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a68:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a6c:	f043 0310 	orr.w	r3, r3, #16
 8008a70:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a72:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008a76:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008a78:	e7c0      	b.n	80089fc <HAL_SD_WriteBlocks+0xd0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a7a:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8008a7c:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a7e:	481a      	ldr	r0, [pc, #104]	@ (8008ae8 <HAL_SD_WriteBlocks+0x1bc>)
        hsd->Context = SD_CONTEXT_NONE;
 8008a80:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a82:	6398      	str	r0, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a86:	6363      	str	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
        hsd->State = HAL_SD_STATE_READY;
 8008a8a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008a8e:	62e2      	str	r2, [r4, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008a90:	e7b5      	b.n	80089fe <HAL_SD_WriteBlocks+0xd2>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008a92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d0d9      	beq.n	8008a4c <HAL_SD_WriteBlocks+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a98:	f001 fa5e 	bl	8009f58 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8008a9c:	b9f0      	cbnz	r0, 8008adc <HAL_SD_WriteBlocks+0x1b0>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	e7d4      	b.n	8008a4c <HAL_SD_WriteBlocks+0x120>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aa2:	4a11      	ldr	r2, [pc, #68]	@ (8008ae8 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 8008aa4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aa6:	6382      	str	r2, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008aa8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008aaa:	f042 0202 	orr.w	r2, r2, #2
 8008aae:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ab0:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ab4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008ab6:	e7a1      	b.n	80089fc <HAL_SD_WriteBlocks+0xd0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae8 <HAL_SD_WriteBlocks+0x1bc>)
      hsd->State = HAL_SD_STATE_READY;
 8008aba:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8008abc:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008abe:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ac2:	f043 0308 	orr.w	r3, r3, #8
 8008ac6:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ac8:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008acc:	62e2      	str	r2, [r4, #44]	@ 0x2c
      return HAL_ERROR;
 8008ace:	e795      	b.n	80089fc <HAL_SD_WriteBlocks+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ad0:	4906      	ldr	r1, [pc, #24]	@ (8008aec <HAL_SD_WriteBlocks+0x1c0>)
    hsd->State = HAL_SD_STATE_READY;
 8008ad2:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ad4:	6381      	str	r1, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ad6:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_OK;
 8008ada:	e790      	b.n	80089fe <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008adc:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8008ade:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ae0:	4a01      	ldr	r2, [pc, #4]	@ (8008ae8 <HAL_SD_WriteBlocks+0x1bc>)
 8008ae2:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ae4:	e7a1      	b.n	8008a2a <HAL_SD_WriteBlocks+0xfe>
 8008ae6:	bf00      	nop
 8008ae8:	1fe00fff 	.word	0x1fe00fff
 8008aec:	18000f3a 	.word	0x18000f3a

08008af0 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008af0:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
{
 8008af2:	4603      	mov	r3, r0
 8008af4:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008af6:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008afa:	0f94      	lsrs	r4, r2, #30
 8008afc:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008afe:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b02:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b04:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b08:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b0a:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b0c:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b10:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b12:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008b14:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b16:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b1a:	0d14      	lsrs	r4, r2, #20
 8008b1c:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b1e:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8008b22:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b24:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8008b28:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b2a:	f3c2 3480 	ubfx	r4, r2, #14, #1
 8008b2e:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b30:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8008b34:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b36:	f3c2 3400 	ubfx	r4, r2, #12, #1
 8008b3a:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008b3c:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8008b3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d16f      	bne.n	8008c24 <HAL_SD_GetCardCSD+0x134>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008b44:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8008b48:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8008b4a:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b4e:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008b52:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8008b56:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b58:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b5c:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008b5e:	f3c0 6402 	ubfx	r4, r0, #24, #3
 8008b62:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b64:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b68:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b6a:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b6e:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b70:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b72:	690c      	ldr	r4, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b74:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b76:	3401      	adds	r4, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b78:	f002 0207 	and.w	r2, r2, #7
 8008b7c:	3202      	adds	r2, #2
 8008b7e:	4094      	lsls	r4, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b80:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b82:	649c      	str	r4, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b84:	f891 c008 	ldrb.w	ip, [r1, #8]
 8008b88:	f00c 0c0f 	and.w	ip, ip, #15
 8008b8c:	fa02 f20c 	lsl.w	r2, r2, ip
 8008b90:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b92:	0a52      	lsrs	r2, r2, #9
 8008b94:	fb04 f202 	mul.w	r2, r4, r2
 8008b98:	651a      	str	r2, [r3, #80]	@ 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b9a:	f3c0 3280 	ubfx	r2, r0, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8008b9e:	f44f 7400 	mov.w	r4, #512	@ 0x200
 8008ba2:	655c      	str	r4, [r3, #84]	@ 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ba4:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ba8:	764a      	strb	r2, [r1, #25]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008baa:	f000 027f 	and.w	r2, r0, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008bae:	768c      	strb	r4, [r1, #26]
  pCSD->Reserved3 = 0;
 8008bb0:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008bb2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bb6:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008bb8:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008bbc:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008bbe:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008bc2:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bc4:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008bc8:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bca:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bce:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008bd0:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bd4:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008bd8:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8008bdc:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008be0:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008be4:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008be8:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008bec:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008bf0:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008bf4:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008bf8:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008bfc:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c00:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c04:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c08:	f881 4027 	strb.w	r4, [r1, #39]	@ 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c0c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c10:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->Reserved4 = 1;
 8008c14:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c16:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8008c1a:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
}
 8008c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c22:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c24:	2801      	cmp	r0, #1
 8008c26:	d10f      	bne.n	8008c48 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c28:	0412      	lsls	r2, r2, #16
 8008c2a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
    hsd->SdCard.BlockSize = 512U;
 8008c2c:	f44f 7400 	mov.w	r4, #512	@ 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c30:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8008c34:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8008c38:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c3a:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8008c3c:	64dc      	str	r4, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c3e:	3201      	adds	r2, #1
 8008c40:	0292      	lsls	r2, r2, #10
 8008c42:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008c44:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008c46:	e7a8      	b.n	8008b9a <HAL_SD_GetCardCSD+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c48:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008c4a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c4c:	4805      	ldr	r0, [pc, #20]	@ (8008c64 <HAL_SD_GetCardCSD+0x174>)
 8008c4e:	6390      	str	r0, [r2, #56]	@ 0x38
    return HAL_ERROR;
 8008c50:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c54:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008c58:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c5a:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
}
 8008c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	1fe00fff 	.word	0x1fe00fff

08008c68 <HAL_SD_InitCard>:
{
 8008c68:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c6a:	2200      	movs	r2, #0
{
 8008c6c:	b095      	sub	sp, #84	@ 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c6e:	2300      	movs	r3, #0
{
 8008c70:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c72:	2100      	movs	r1, #0
 8008c74:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c80:	f7ff f8ea 	bl	8007e58 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8008c84:	b948      	cbnz	r0, 8008c9a <HAL_SD_InitCard+0x32>
    hsd->State = HAL_SD_STATE_READY;
 8008c86:	2201      	movs	r2, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008c88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8008c8c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008c90:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008c92:	2501      	movs	r5, #1
}
 8008c94:	4628      	mov	r0, r5
 8008c96:	b015      	add	sp, #84	@ 0x54
 8008c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008c9a:	0a06      	lsrs	r6, r0, #8
 8008c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8008ec8 <HAL_SD_InitCard+0x260>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8008c9e:	aa07      	add	r2, sp, #28
 8008ca0:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008ca2:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8008ca6:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008ca8:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 8008caa:	9608      	str	r6, [sp, #32]
 8008cac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cb0:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cb6:	6820      	ldr	r0, [r4, #0]
 8008cb8:	f000 fda6 	bl	8009808 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	f000 fdc9 	bl	8009854 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8008cc2:	4b82      	ldr	r3, [pc, #520]	@ (8008ecc <HAL_SD_InitCard+0x264>)
 8008cc4:	429d      	cmp	r5, r3
 8008cc6:	d902      	bls.n	8008cce <HAL_SD_InitCard+0x66>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008cc8:	0076      	lsls	r6, r6, #1
 8008cca:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008cce:	4880      	ldr	r0, [pc, #512]	@ (8008ed0 <HAL_SD_InitCard+0x268>)
 8008cd0:	fbb0 f0f5 	udiv	r0, r0, r5
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	f7fb f8f7 	bl	8003ec8 <HAL_Delay>
  __IO uint32_t count = 0U;
 8008cda:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cdc:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8008cde:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ce0:	f001 faea 	bl	800a2b8 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	bb70      	cbnz	r0, 8008d46 <HAL_SD_InitCard+0xde>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ce8:	6820      	ldr	r0, [r4, #0]
 8008cea:	f001 fb11 	bl	800a310 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008cee:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8008cf2:	f000 80ce 	beq.w	8008e92 <HAL_SD_InitCard+0x22a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	f001 fb47 	bl	800a390 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d02:	bb38      	cbnz	r0, 8008d54 <HAL_SD_InitCard+0xec>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
 8008d0a:	42b3      	cmp	r3, r6
 8008d0c:	f200 80d3 	bhi.w	8008eb6 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008d10:	4f70      	ldr	r7, [pc, #448]	@ (8008ed4 <HAL_SD_InitCard+0x26c>)
 8008d12:	e010      	b.n	8008d36 <HAL_SD_InitCard+0xce>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	f001 fbe7 	bl	800a4e8 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	b9d0      	cbnz	r0, 8008d54 <HAL_SD_InitCard+0xec>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	f000 fda4 	bl	800986c <SDMMC_GetResponse>
    count++;
 8008d24:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d26:	2800      	cmp	r0, #0
    count++;
 8008d28:	f103 0301 	add.w	r3, r3, #1
 8008d2c:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	db13      	blt.n	8008d5a <HAL_SD_InitCard+0xf2>
 8008d32:	42b3      	cmp	r3, r6
 8008d34:	d811      	bhi.n	8008d5a <HAL_SD_InitCard+0xf2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d36:	2100      	movs	r1, #0
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	f001 fb29 	bl	800a390 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008d3e:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d0e7      	beq.n	8008d14 <HAL_SD_InitCard+0xac>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d44:	4605      	mov	r5, r0
    hsd->State = HAL_SD_STATE_READY;
 8008d46:	2301      	movs	r3, #1
 8008d48:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d4e:	432b      	orrs	r3, r5
 8008d50:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008d52:	e79e      	b.n	8008c92 <HAL_SD_InitCard+0x2a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d54:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8008d58:	e7f5      	b.n	8008d46 <HAL_SD_InitCard+0xde>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008d5a:	9a03      	ldr	r2, [sp, #12]
 8008d5c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008d60:	429a      	cmp	r2, r3
 8008d62:	f200 80ac 	bhi.w	8008ebe <HAL_SD_InitCard+0x256>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d66:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8008d6a:	bf18      	it	ne
 8008d6c:	2501      	movne	r5, #1
  uint16_t sd_rca = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63a5      	str	r5, [r4, #56]	@ 0x38
 8008d72:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8008d76:	f7fb f8a1 	bl	8003ebc <HAL_GetTick>
 8008d7a:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008d7c:	6820      	ldr	r0, [r4, #0]
 8008d7e:	f000 fd71 	bl	8009864 <SDMMC_GetPowerState>
 8008d82:	b348      	cbz	r0, 8008dd8 <HAL_SD_InitCard+0x170>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d86:	6820      	ldr	r0, [r4, #0]
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d12e      	bne.n	8008dea <HAL_SD_InitCard+0x182>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d8c:	2104      	movs	r1, #4
 8008d8e:	f000 fd6d 	bl	800986c <SDMMC_GetResponse>
 8008d92:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d94:	a909      	add	r1, sp, #36	@ 0x24
 8008d96:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d98:	0d1b      	lsrs	r3, r3, #20
 8008d9a:	6423      	str	r3, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d9c:	f7ff fea8 	bl	8008af0 <HAL_SD_GetCardCSD>
 8008da0:	4605      	mov	r5, r0
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f040 8081 	bne.w	8008eaa <HAL_SD_InitCard+0x242>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008da8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008daa:	6820      	ldr	r0, [r4, #0]
 8008dac:	0409      	lsls	r1, r1, #16
 8008dae:	f001 f9d7 	bl	800a160 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008db2:	b998      	cbnz	r0, 8008ddc <HAL_SD_InitCard+0x174>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008db4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	f000 fd71 	bl	80098a0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f43f af68 	beq.w	8008c94 <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dc4:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008dc6:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dc8:	4943      	ldr	r1, [pc, #268]	@ (8008ed8 <HAL_SD_InitCard+0x270>)
 8008dca:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008dcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dce:	4303      	orrs	r3, r0
 8008dd0:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008dd2:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8008dd6:	e75c      	b.n	8008c92 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008dd8:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008de2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008de4:	4303      	orrs	r3, r0
 8008de6:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8008de8:	e753      	b.n	8008c92 <HAL_SD_InitCard+0x2a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008dea:	f001 fd0b 	bl	800a804 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d1f4      	bne.n	8008ddc <HAL_SD_InitCard+0x174>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008df2:	4601      	mov	r1, r0
 8008df4:	6820      	ldr	r0, [r4, #0]
 8008df6:	f000 fd39 	bl	800986c <SDMMC_GetResponse>
 8008dfa:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008dfc:	2104      	movs	r1, #4
 8008dfe:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e00:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e02:	f000 fd33 	bl	800986c <SDMMC_GetResponse>
 8008e06:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e08:	2108      	movs	r1, #8
 8008e0a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e0c:	6723      	str	r3, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e0e:	f000 fd2d 	bl	800986c <SDMMC_GetResponse>
 8008e12:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e14:	210c      	movs	r1, #12
 8008e16:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e18:	6763      	str	r3, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e1a:	f000 fd27 	bl	800986c <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e1e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e20:	67a0      	str	r0, [r4, #120]	@ 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d04e      	beq.n	8008ec4 <HAL_SD_InitCard+0x25c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008e26:	f241 3687 	movw	r6, #4999	@ 0x1387
 8008e2a:	e008      	b.n	8008e3e <HAL_SD_InitCard+0x1d6>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e2c:	f001 fd68 	bl	800a900 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d1d3      	bne.n	8008ddc <HAL_SD_InitCard+0x174>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008e34:	f7fb f842 	bl	8003ebc <HAL_GetTick>
 8008e38:	1b43      	subs	r3, r0, r5
 8008e3a:	42b3      	cmp	r3, r6
 8008e3c:	d838      	bhi.n	8008eb0 <HAL_SD_InitCard+0x248>
    while (sd_rca == 0U)
 8008e3e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e42:	f10d 010a 	add.w	r1, sp, #10
 8008e46:	6820      	ldr	r0, [r4, #0]
    while (sd_rca == 0U)
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0ef      	beq.n	8008e2c <HAL_SD_InitCard+0x1c4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008e4e:	2a03      	cmp	r2, #3
 8008e50:	d09c      	beq.n	8008d8c <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e52:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e54:	6463      	str	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e56:	f001 fd13 	bl	800a880 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1be      	bne.n	8008ddc <HAL_SD_InitCard+0x174>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e5e:	4601      	mov	r1, r0
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	f000 fd03 	bl	800986c <SDMMC_GetResponse>
 8008e66:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e68:	2104      	movs	r1, #4
 8008e6a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e6c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e6e:	f000 fcfd 	bl	800986c <SDMMC_GetResponse>
 8008e72:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e74:	2108      	movs	r1, #8
 8008e76:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e78:	6623      	str	r3, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e7a:	f000 fcf7 	bl	800986c <SDMMC_GetResponse>
 8008e7e:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e80:	210c      	movs	r1, #12
 8008e82:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e84:	6663      	str	r3, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e86:	f000 fcf1 	bl	800986c <SDMMC_GetResponse>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6820      	ldr	r0, [r4, #0]
 8008e8e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8008e90:	e77c      	b.n	8008d8c <HAL_SD_InitCard+0x124>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e92:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e94:	63e5      	str	r5, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e96:	f001 fa0f 	bl	800a2b8 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f47f af52 	bne.w	8008d44 <HAL_SD_InitCard+0xdc>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008ea0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	f47f af2e 	bne.w	8008d04 <HAL_SD_InitCard+0x9c>
 8008ea8:	e727      	b.n	8008cfa <HAL_SD_InitCard+0x92>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eaa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8008eae:	e795      	b.n	8008ddc <HAL_SD_InitCard+0x174>
        return HAL_SD_ERROR_TIMEOUT;
 8008eb0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8008eb4:	e792      	b.n	8008ddc <HAL_SD_InitCard+0x174>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	42b3      	cmp	r3, r6
 8008eba:	f67f af58 	bls.w	8008d6e <HAL_SD_InitCard+0x106>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ebe:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8008ec2:	e740      	b.n	8008d46 <HAL_SD_InitCard+0xde>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	e761      	b.n	8008d8c <HAL_SD_InitCard+0x124>
 8008ec8:	014f8b59 	.word	0x014f8b59
 8008ecc:	000c34ff 	.word	0x000c34ff
 8008ed0:	00012110 	.word	0x00012110
 8008ed4:	c1100000 	.word	0xc1100000
 8008ed8:	1fe00fff 	.word	0x1fe00fff

08008edc <HAL_SD_GetCardStatus>:
{
 8008edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (hsd->State == HAL_SD_STATE_BUSY)
 8008ee0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
{
 8008ee4:	b097      	sub	sp, #92	@ 0x5c
  if (hsd->State == HAL_SD_STATE_BUSY)
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d033      	beq.n	8008f52 <HAL_SD_GetCardStatus+0x76>
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008eea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008eec:	460d      	mov	r5, r1
 8008eee:	f7fa ffe5 	bl	8003ebc <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ef2:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8008ef4:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ef6:	6820      	ldr	r0, [r4, #0]
 8008ef8:	f000 fcb8 	bl	800986c <SDMMC_GetResponse>
 8008efc:	0182      	lsls	r2, r0, #6
 8008efe:	d410      	bmi.n	8008f22 <HAL_SD_GetCardStatus+0x46>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f00:	2140      	movs	r1, #64	@ 0x40
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	f000 fccc 	bl	80098a0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f08:	4603      	mov	r3, r0
 8008f0a:	b930      	cbnz	r0, 8008f1a <HAL_SD_GetCardStatus+0x3e>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008f0e:	6820      	ldr	r0, [r4, #0]
 8008f10:	0409      	lsls	r1, r1, #16
 8008f12:	f001 fa3d 	bl	800a390 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f16:	4603      	mov	r3, r0
 8008f18:	b300      	cbz	r0, 8008f5c <HAL_SD_GetCardStatus+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f1a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f1c:	6820      	ldr	r0, [r4, #0]
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f1e:	6362      	str	r2, [r4, #52]	@ 0x34
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f20:	e002      	b.n	8008f28 <HAL_SD_GetCardStatus+0x4c>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f22:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f28:	4a54      	ldr	r2, [pc, #336]	@ (800907c <HAL_SD_GetCardStatus+0x1a0>)
    hsd->State = HAL_SD_STATE_READY;
 8008f2a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f2c:	6382      	str	r2, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8008f2e:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 8008f30:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008f32:	4313      	orrs	r3, r2
 8008f34:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f36:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f3e:	f000 fcaf 	bl	80098a0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f42:	b138      	cbz	r0, 8008f54 <HAL_SD_GetCardStatus+0x78>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f44:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8008f46:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f48:	494c      	ldr	r1, [pc, #304]	@ (800907c <HAL_SD_GetCardStatus+0x1a0>)
 8008f4a:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008f4c:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f4e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8008f52:	2601      	movs	r6, #1
}
 8008f54:	4630      	mov	r0, r6
 8008f56:	b017      	add	sp, #92	@ 0x5c
 8008f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  config.DataLength    = 64U;
 8008f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f60:	2340      	movs	r3, #64	@ 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f62:	4669      	mov	r1, sp
 8008f64:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8008f66:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f6a:	2260      	movs	r2, #96	@ 0x60
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f72:	2301      	movs	r3, #1
 8008f74:	2200      	movs	r2, #0
 8008f76:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f7a:	f000 fc7b 	bl	8009874 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	f001 fdca 	bl	800ab18 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f84:	4603      	mov	r3, r0
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d1c7      	bne.n	8008f1a <HAL_SD_GetCardStatus+0x3e>
  uint32_t *pData = pSDstatus;
 8008f8a:	ae06      	add	r6, sp, #24
 8008f8c:	e004      	b.n	8008f98 <HAL_SD_GetCardStatus+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f8e:	f7fa ff95 	bl	8003ebc <HAL_GetTick>
 8008f92:	1bc0      	subs	r0, r0, r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	d012      	beq.n	8008fbe <HAL_SD_GetCardStatus+0xe2>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f98:	6820      	ldr	r0, [r4, #0]
 8008f9a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008f9c:	f413 7f95 	tst.w	r3, #298	@ 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fa0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fa2:	d110      	bne.n	8008fc6 <HAL_SD_GetCardStatus+0xea>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fa4:	041b      	lsls	r3, r3, #16
 8008fa6:	d5f2      	bpl.n	8008f8e <HAL_SD_GetCardStatus+0xb2>
 8008fa8:	f106 0820 	add.w	r8, r6, #32
 8008fac:	e000      	b.n	8008fb0 <HAL_SD_GetCardStatus+0xd4>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fae:	6820      	ldr	r0, [r4, #0]
 8008fb0:	f000 fc46 	bl	8009840 <SDMMC_ReadFIFO>
 8008fb4:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8008fb8:	4546      	cmp	r6, r8
 8008fba:	d1f8      	bne.n	8008fae <HAL_SD_GetCardStatus+0xd2>
 8008fbc:	e7e7      	b.n	8008f8e <HAL_SD_GetCardStatus+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fbe:	6820      	ldr	r0, [r4, #0]
 8008fc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008fc4:	e7b0      	b.n	8008f28 <HAL_SD_GetCardStatus+0x4c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fc6:	0719      	lsls	r1, r3, #28
 8008fc8:	d451      	bmi.n	800906e <HAL_SD_GetCardStatus+0x192>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fca:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008fcc:	079a      	lsls	r2, r3, #30
 8008fce:	d450      	bmi.n	8009072 <HAL_SD_GetCardStatus+0x196>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fd0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008fd2:	069b      	lsls	r3, r3, #26
 8008fd4:	d50a      	bpl.n	8008fec <HAL_SD_GetCardStatus+0x110>
 8008fd6:	e04e      	b.n	8009076 <HAL_SD_GetCardStatus+0x19a>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fd8:	f000 fc32 	bl	8009840 <SDMMC_ReadFIFO>
 8008fdc:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fe0:	f7fa ff6c 	bl	8003ebc <HAL_GetTick>
 8008fe4:	1bc0      	subs	r0, r0, r7
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d0e9      	beq.n	8008fbe <HAL_SD_GetCardStatus+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fea:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008fec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008fee:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008ff2:	d1f1      	bne.n	8008fd8 <HAL_SD_GetCardStatus+0xfc>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008ff4:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff6:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ff8:	4a21      	ldr	r2, [pc, #132]	@ (8009080 <HAL_SD_GetCardStatus+0x1a4>)
 8008ffa:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008ffc:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008ffe:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009002:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009006:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800900a:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800900e:	fa5f f883 	uxtb.w	r8, r3
 8009012:	f027 07ff 	bic.w	r7, r7, #255	@ 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009016:	fa1f f982 	uxth.w	r9, r2
 800901a:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800901c:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009020:	f3c1 1881 	ubfx	r8, r1, #6, #2
 8009024:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009028:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800902c:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009030:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009034:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009036:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800903a:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800903e:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009040:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8009044:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009046:	f3cc 5203 	ubfx	r2, ip, #20, #4
 800904a:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800904c:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009050:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009052:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009054:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8009058:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800905a:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800905e:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009062:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009064:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009066:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 800906a:	74ab      	strb	r3, [r5, #18]
 800906c:	e765      	b.n	8008f3a <HAL_SD_GetCardStatus+0x5e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800906e:	2308      	movs	r3, #8
 8009070:	e75a      	b.n	8008f28 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009072:	2302      	movs	r3, #2
 8009074:	e758      	b.n	8008f28 <HAL_SD_GetCardStatus+0x4c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8009076:	2320      	movs	r3, #32
 8009078:	e756      	b.n	8008f28 <HAL_SD_GetCardStatus+0x4c>
 800907a:	bf00      	nop
 800907c:	1fe00fff 	.word	0x1fe00fff
 8009080:	18000f3a 	.word	0x18000f3a

08009084 <HAL_SD_GetCardInfo>:
{
 8009084:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009086:	e9d0 e30e 	ldrd	lr, r3, [r0, #56]	@ 0x38
 800908a:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
 800908e:	e9d0 5412 	ldrd	r5, r4, [r0, #72]	@ 0x48
 8009092:	e9d0 2014 	ldrd	r2, r0, [r0, #80]	@ 0x50
 8009096:	e9c1 e300 	strd	lr, r3, [r1]
 800909a:	e9c1 2006 	strd	r2, r0, [r1, #24]
 800909e:	e9c1 7602 	strd	r7, r6, [r1, #8]
}
 80090a2:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80090a4:	e9c1 5404 	strd	r5, r4, [r1, #16]
}
 80090a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090aa:	bf00      	nop

080090ac <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 80090ac:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 80090ae:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80090b0:	4293      	cmp	r3, r2
{
 80090b2:	b530      	push	{r4, r5, lr}
 80090b4:	4604      	mov	r4, r0
 80090b6:	b089      	sub	sp, #36	@ 0x24
 80090b8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80090ba:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 80090be:	d041      	beq.n	8009144 <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80090c0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80090c4:	d03e      	beq.n	8009144 <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80090c6:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80090ca:	d07e      	beq.n	80091ca <HAL_SD_ConfigWideBusOperation+0x11e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d05d      	beq.n	800918c <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80090d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80090d6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80090d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d139      	bne.n	8009152 <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80090de:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80090e2:	2100      	movs	r1, #0
 80090e4:	f7fe feb8 	bl	8007e58 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d048      	beq.n	800917e <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80090ec:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80090ee:	4b50      	ldr	r3, [pc, #320]	@ (8009230 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80090f0:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 80090f2:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80090f4:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80090f6:	fba3 5300 	umull	r5, r3, r3, r0
 80090fa:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80090fc:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80090fe:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009102:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009104:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009108:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800910a:	d20e      	bcs.n	800912a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800910c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800910e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009112:	d00a      	beq.n	800912a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009114:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009118:	d079      	beq.n	800920e <HAL_SD_ConfigWideBusOperation+0x162>
        if (hsd->Init.ClockDiv == 0U)
 800911a:	b112      	cbz	r2, 8009122 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800911c:	0053      	lsls	r3, r2, #1
 800911e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009122:	4b44      	ldr	r3, [pc, #272]	@ (8009234 <HAL_SD_ConfigWideBusOperation+0x188>)
 8009124:	4298      	cmp	r0, r3
 8009126:	bf88      	it	hi
 8009128:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800912a:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800912c:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800912e:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8009130:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 8009132:	c903      	ldmia	r1, {r0, r1}
 8009134:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800913a:	6820      	ldr	r0, [r4, #0]
 800913c:	f000 fb64 	bl	8009808 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009140:	6820      	ldr	r0, [r4, #0]
 8009142:	e00a      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009144:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800914a:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800914c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0c5      	beq.n	80090de <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009152:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 8009154:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009156:	4b38      	ldr	r3, [pc, #224]	@ (8009238 <HAL_SD_ConfigWideBusOperation+0x18c>)
 8009158:	6383      	str	r3, [r0, #56]	@ 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800915a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800915e:	f000 fb9f 	bl	80098a0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009162:	b130      	cbz	r0, 8009172 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009164:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8009166:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009168:	4a33      	ldr	r2, [pc, #204]	@ (8009238 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800916a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800916c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800916e:	4303      	orrs	r3, r0
 8009170:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_READY;
 8009172:	2301      	movs	r3, #1
}
 8009174:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8009176:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 800917a:	b009      	add	sp, #36	@ 0x24
 800917c:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800917e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8009180:	2501      	movs	r5, #1
      (void)SDMMC_Init(hsd->Instance, Init);
 8009182:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009184:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009188:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 800918a:	e7e6      	b.n	800915a <HAL_SD_ConfigWideBusOperation+0xae>
  uint32_t scr[2U] = {0UL, 0UL};
 800918c:	2200      	movs	r2, #0
 800918e:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009190:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8009192:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009196:	f000 fb69 	bl	800986c <SDMMC_GetResponse>
 800919a:	0182      	lsls	r2, r0, #6
 800919c:	d434      	bmi.n	8009208 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 800919e:	a902      	add	r1, sp, #8
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7ff fa6d 	bl	8008680 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 80091a6:	b960      	cbnz	r0, 80091c2 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	03db      	lsls	r3, r3, #15
 80091ac:	d535      	bpl.n	800921a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091ae:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80091b0:	6820      	ldr	r0, [r4, #0]
 80091b2:	0409      	lsls	r1, r1, #16
 80091b4:	f001 f8ec 	bl	800a390 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091b8:	b918      	cbnz	r0, 80091c2 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091ba:	4601      	mov	r1, r0
 80091bc:	6820      	ldr	r0, [r4, #0]
 80091be:	f001 f9cf 	bl	800a560 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80091c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80091c4:	4303      	orrs	r3, r0
 80091c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80091c8:	e7c0      	b.n	800914c <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 80091ca:	2200      	movs	r2, #0
 80091cc:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80091ce:	2100      	movs	r1, #0
 80091d0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 80091d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80091d6:	f000 fb49 	bl	800986c <SDMMC_GetResponse>
 80091da:	0180      	lsls	r0, r0, #6
 80091dc:	d414      	bmi.n	8009208 <HAL_SD_ConfigWideBusOperation+0x15c>
  errorstate = SD_FindSCR(hsd, scr);
 80091de:	a902      	add	r1, sp, #8
 80091e0:	4620      	mov	r0, r4
 80091e2:	f7ff fa4d 	bl	8008680 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d1eb      	bne.n	80091c2 <HAL_SD_ConfigWideBusOperation+0x116>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	0359      	lsls	r1, r3, #13
 80091ee:	d514      	bpl.n	800921a <HAL_SD_ConfigWideBusOperation+0x16e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80091f2:	6820      	ldr	r0, [r4, #0]
 80091f4:	0409      	lsls	r1, r1, #16
 80091f6:	f001 f8cb 	bl	800a390 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d1e1      	bne.n	80091c2 <HAL_SD_ConfigWideBusOperation+0x116>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80091fe:	2102      	movs	r1, #2
 8009200:	6820      	ldr	r0, [r4, #0]
 8009202:	f001 f9ad 	bl	800a560 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009206:	e7dc      	b.n	80091c2 <HAL_SD_ConfigWideBusOperation+0x116>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009208:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800920c:	e7d9      	b.n	80091c2 <HAL_SD_ConfigWideBusOperation+0x116>
        if (hsd->Init.ClockDiv == 0U)
 800920e:	b93a      	cbnz	r2, 8009220 <HAL_SD_ConfigWideBusOperation+0x174>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009210:	490a      	ldr	r1, [pc, #40]	@ (800923c <HAL_SD_ConfigWideBusOperation+0x190>)
 8009212:	4288      	cmp	r0, r1
 8009214:	d989      	bls.n	800912a <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009216:	0e5a      	lsrs	r2, r3, #25
 8009218:	e787      	b.n	800912a <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800921a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800921e:	e7d0      	b.n	80091c2 <HAL_SD_ConfigWideBusOperation+0x116>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009220:	0051      	lsls	r1, r2, #1
 8009222:	fbb0 f1f1 	udiv	r1, r0, r1
 8009226:	4805      	ldr	r0, [pc, #20]	@ (800923c <HAL_SD_ConfigWideBusOperation+0x190>)
 8009228:	4281      	cmp	r1, r0
 800922a:	f67f af7e 	bls.w	800912a <HAL_SD_ConfigWideBusOperation+0x7e>
 800922e:	e7f2      	b.n	8009216 <HAL_SD_ConfigWideBusOperation+0x16a>
 8009230:	55e63b89 	.word	0x55e63b89
 8009234:	017d7840 	.word	0x017d7840
 8009238:	1fe00fff 	.word	0x1fe00fff
 800923c:	02faf080 	.word	0x02faf080

08009240 <HAL_SD_Init>:
{
 8009240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009242:	b087      	sub	sp, #28
  if (hsd == NULL)
 8009244:	b168      	cbz	r0, 8009262 <HAL_SD_Init+0x22>
  if (hsd->State == HAL_SD_STATE_RESET)
 8009246:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800924a:	4604      	mov	r4, r0
 800924c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009250:	2b00      	cmp	r3, #0
 8009252:	d044      	beq.n	80092de <HAL_SD_Init+0x9e>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009254:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009256:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009258:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800925c:	f7ff fd04 	bl	8008c68 <HAL_SD_InitCard>
 8009260:	b118      	cbz	r0, 800926a <HAL_SD_Init+0x2a>
    return HAL_ERROR;
 8009262:	2601      	movs	r6, #1
}
 8009264:	4630      	mov	r0, r6
 8009266:	b007      	add	sp, #28
 8009268:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800926a:	a901      	add	r1, sp, #4
 800926c:	4620      	mov	r0, r4
 800926e:	f7ff fe35 	bl	8008edc <HAL_SD_GetCardStatus>
 8009272:	2800      	cmp	r0, #0
 8009274:	d1f5      	bne.n	8009262 <HAL_SD_Init+0x22>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009276:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 8009278:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800927c:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800927e:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8009282:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009284:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009286:	d02e      	beq.n	80092e6 <HAL_SD_Init+0xa6>
 8009288:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800928a:	68e1      	ldr	r1, [r4, #12]
 800928c:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800928e:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009290:	f7ff ff0c 	bl	80090ac <HAL_SD_ConfigWideBusOperation>
 8009294:	4606      	mov	r6, r0
 8009296:	2800      	cmp	r0, #0
 8009298:	d1e3      	bne.n	8009262 <HAL_SD_Init+0x22>
  tickstart = HAL_GetTick();
 800929a:	f7fa fe0f 	bl	8003ebc <HAL_GetTick>
 800929e:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80092a0:	e007      	b.n	80092b2 <HAL_SD_Init+0x72>
    hsd->ErrorCode |= errorstate;
 80092a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092a4:	4303      	orrs	r3, r0
 80092a6:	6363      	str	r3, [r4, #52]	@ 0x34
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092a8:	f7fa fe08 	bl	8003ebc <HAL_GetTick>
 80092ac:	1bc3      	subs	r3, r0, r7
 80092ae:	3301      	adds	r3, #1
 80092b0:	d020      	beq.n	80092f4 <HAL_SD_Init+0xb4>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092b2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80092b4:	6820      	ldr	r0, [r4, #0]
 80092b6:	0409      	lsls	r1, r1, #16
 80092b8:	f001 fb82 	bl	800a9c0 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80092bc:	4605      	mov	r5, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d1ef      	bne.n	80092a2 <HAL_SD_Init+0x62>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092c2:	6820      	ldr	r0, [r4, #0]
 80092c4:	4629      	mov	r1, r5
 80092c6:	f000 fad1 	bl	800986c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80092ca:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80092ce:	2804      	cmp	r0, #4
 80092d0:	d1ea      	bne.n	80092a8 <HAL_SD_Init+0x68>
  hsd->State = HAL_SD_STATE_READY;
 80092d2:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092d4:	6365      	str	r5, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80092d6:	62e5      	str	r5, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 80092d8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 80092dc:	e7c2      	b.n	8009264 <HAL_SD_Init+0x24>
    hsd->Lock = HAL_UNLOCKED;
 80092de:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 80092e0:	f7fa fb9e 	bl	8003a20 <HAL_SD_MspInit>
 80092e4:	e7b6      	b.n	8009254 <HAL_SD_Init+0x14>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80092e6:	4313      	orrs	r3, r2
 80092e8:	bf14      	ite	ne
 80092ea:	f44f 7300 	movne.w	r3, #512	@ 0x200
 80092ee:	f44f 7380 	moveq.w	r3, #256	@ 0x100
 80092f2:	e7ca      	b.n	800928a <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80092f4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 80092f8:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80092fa:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80092fc:	6362      	str	r2, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80092fe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009302:	e7af      	b.n	8009264 <HAL_SD_Init+0x24>

08009304 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009304:	6c41      	ldr	r1, [r0, #68]	@ 0x44
{
 8009306:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009308:	0409      	lsls	r1, r1, #16
{
 800930a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800930c:	6800      	ldr	r0, [r0, #0]
 800930e:	f001 fb57 	bl	800a9c0 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009312:	4601      	mov	r1, r0
 8009314:	b120      	cbz	r0, 8009320 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8009316:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009318:	2000      	movs	r0, #0
 800931a:	430b      	orrs	r3, r1
 800931c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800931e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	f000 faa3 	bl	800986c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009326:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800932a:	bd10      	pop	{r4, pc}

0800932c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800932c:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800932e:	492c      	ldr	r1, [pc, #176]	@ (80093e0 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8009330:	695a      	ldr	r2, [r3, #20]
{
 8009332:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009334:	699c      	ldr	r4, [r3, #24]
 8009336:	f044 0408 	orr.w	r4, r4, #8
 800933a:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800933c:	699c      	ldr	r4, [r3, #24]
 800933e:	f044 0410 	orr.w	r4, r4, #16
 8009342:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8009344:	681c      	ldr	r4, [r3, #0]
 8009346:	f024 0401 	bic.w	r4, r4, #1
 800934a:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800934c:	691c      	ldr	r4, [r3, #16]
 800934e:	4021      	ands	r1, r4
 8009350:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009352:	6899      	ldr	r1, [r3, #8]
 8009354:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8009358:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800935a:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800935e:	2904      	cmp	r1, #4
 8009360:	d001      	beq.n	8009366 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009362:	0691      	lsls	r1, r2, #26
 8009364:	d430      	bmi.n	80093c8 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009366:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 800936a:	2903      	cmp	r1, #3
 800936c:	d001      	beq.n	8009372 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800936e:	0654      	lsls	r4, r2, #25
 8009370:	d41f      	bmi.n	80093b2 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009372:	0591      	lsls	r1, r2, #22
 8009374:	d509      	bpl.n	800938a <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009376:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 800937a:	f041 0101 	orr.w	r1, r1, #1
 800937e:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009382:	6999      	ldr	r1, [r3, #24]
 8009384:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8009388:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800938a:	05d2      	lsls	r2, r2, #23
 800938c:	d509      	bpl.n	80093a2 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800938e:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8009392:	f042 0208 	orr.w	r2, r2, #8
 8009396:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093a0:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80093a2:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 80093a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 80093a8:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80093ac:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 80093b0:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093b2:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 80093b6:	f041 0104 	orr.w	r1, r1, #4
 80093ba:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093be:	6999      	ldr	r1, [r3, #24]
 80093c0:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80093c4:	6199      	str	r1, [r3, #24]
 80093c6:	e7d4      	b.n	8009372 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80093c8:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 80093cc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80093d0:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80093d4:	6999      	ldr	r1, [r3, #24]
 80093d6:	f041 0120 	orr.w	r1, r1, #32
 80093da:	6199      	str	r1, [r3, #24]
 80093dc:	e7c3      	b.n	8009366 <SPI_CloseTransfer+0x3a>
 80093de:	bf00      	nop
 80093e0:	fffffc90 	.word	0xfffffc90

080093e4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f000 80c8 	beq.w	800957a <HAL_SPI_Init+0x196>
{
 80093ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ee:	4604      	mov	r4, r0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80093f0:	4b67      	ldr	r3, [pc, #412]	@ (8009590 <HAL_SPI_Init+0x1ac>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093f2:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80093f4:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80093f6:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80093f8:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093fa:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80093fc:	d016      	beq.n	800942c <HAL_SPI_Init+0x48>
 80093fe:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8009402:	429a      	cmp	r2, r3
 8009404:	d012      	beq.n	800942c <HAL_SPI_Init+0x48>
 8009406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800940a:	429a      	cmp	r2, r3
 800940c:	f000 80ad 	beq.w	800956a <HAL_SPI_Init+0x186>
 8009410:	290f      	cmp	r1, #15
 8009412:	d808      	bhi.n	8009426 <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009414:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009416:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800941a:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800941c:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800941e:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009422:	2b08      	cmp	r3, #8
 8009424:	d90a      	bls.n	800943c <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 8009426:	2001      	movs	r0, #1
}
 8009428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800942c:	4b58      	ldr	r3, [pc, #352]	@ (8009590 <HAL_SPI_Init+0x1ac>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800942e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009430:	429a      	cmp	r2, r3
 8009432:	d06d      	beq.n	8009510 <HAL_SPI_Init+0x12c>
 8009434:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8009438:	429a      	cmp	r2, r3
 800943a:	d069      	beq.n	8009510 <HAL_SPI_Init+0x12c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800943c:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8009440:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 8009444:	2b00      	cmp	r3, #0
 8009446:	d071      	beq.n	800952c <HAL_SPI_Init+0x148>
 8009448:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 800944c:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800944e:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009450:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8009454:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009458:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 800945c:	6813      	ldr	r3, [r2, #0]
 800945e:	f023 0301 	bic.w	r3, r3, #1
 8009462:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009464:	6893      	ldr	r3, [r2, #8]
 8009466:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800946a:	69a3      	ldr	r3, [r4, #24]
 800946c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009470:	d067      	beq.n	8009542 <HAL_SPI_Init+0x15e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009472:	f1b9 0f00 	cmp.w	r9, #0
 8009476:	d001      	beq.n	800947c <HAL_SPI_Init+0x98>
 8009478:	2906      	cmp	r1, #6
 800947a:	d86f      	bhi.n	800955c <HAL_SPI_Init+0x178>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800947c:	6817      	ldr	r7, [r2, #0]
 800947e:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8009482:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009484:	4303      	orrs	r3, r0
 8009486:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009488:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800948c:	ea43 030e 	orr.w	r3, r3, lr
 8009490:	433b      	orrs	r3, r7
 8009492:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8009494:	433b      	orrs	r3, r7
 8009496:	6927      	ldr	r7, [r4, #16]
 8009498:	433b      	orrs	r3, r7
 800949a:	6967      	ldr	r7, [r4, #20]
 800949c:	433b      	orrs	r3, r7
 800949e:	6a27      	ldr	r7, [r4, #32]
 80094a0:	433b      	orrs	r3, r7
 80094a2:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80094a4:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80094a6:	69e7      	ldr	r7, [r4, #28]
 80094a8:	4339      	orrs	r1, r7
 80094aa:	4329      	orrs	r1, r5
 80094ac:	ea41 010c 	orr.w	r1, r1, ip
 80094b0:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80094b2:	68a1      	ldr	r1, [r4, #8]
 80094b4:	430b      	orrs	r3, r1
 80094b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80094b8:	430b      	orrs	r3, r1
 80094ba:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80094bc:	430b      	orrs	r3, r1
 80094be:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80094c0:	b9c0      	cbnz	r0, 80094f4 <HAL_SPI_Init+0x110>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80094c2:	6893      	ldr	r3, [r2, #8]
 80094c4:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80094c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80094cc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80094ce:	6893      	ldr	r3, [r2, #8]
 80094d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80094d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80094d8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094da:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094e2:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80094e4:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094e6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 80094ea:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 80094ec:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 80094f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094f4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80094f6:	f023 0301 	bic.w	r3, r3, #1
 80094fa:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	d0ef      	beq.n	80094e2 <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009502:	68d3      	ldr	r3, [r2, #12]
 8009504:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009506:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800950a:	430b      	orrs	r3, r1
 800950c:	60d3      	str	r3, [r2, #12]
 800950e:	e7e8      	b.n	80094e2 <HAL_SPI_Init+0xfe>
  data_size = (data_size + 7UL) / 8UL;
 8009510:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009514:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8009516:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8009518:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800951c:	2b10      	cmp	r3, #16
 800951e:	d882      	bhi.n	8009426 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009520:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8009524:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 8009528:	2b00      	cmp	r3, #0
 800952a:	d18d      	bne.n	8009448 <HAL_SPI_Init+0x64>
    HAL_SPI_MspInit(hspi);
 800952c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800952e:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8009532:	f7fa fb09 	bl	8003b48 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8009536:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009538:	68e1      	ldr	r1, [r4, #12]
 800953a:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800953e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8009540:	e784      	b.n	800944c <HAL_SPI_Init+0x68>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009542:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8009546:	d01a      	beq.n	800957e <HAL_SPI_Init+0x19a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009548:	2800      	cmp	r0, #0
 800954a:	d192      	bne.n	8009472 <HAL_SPI_Init+0x8e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800954c:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 8009550:	d194      	bne.n	800947c <HAL_SPI_Init+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009552:	6817      	ldr	r7, [r2, #0]
 8009554:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8009558:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800955a:	e78f      	b.n	800947c <HAL_SPI_Init+0x98>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800955c:	6817      	ldr	r7, [r2, #0]
 800955e:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 8009560:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8009564:	4337      	orrs	r7, r6
 8009566:	6017      	str	r7, [r2, #0]
 8009568:	e78c      	b.n	8009484 <HAL_SPI_Init+0xa0>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800956a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800956c:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009570:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 8009572:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8009574:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009578:	e7d0      	b.n	800951c <HAL_SPI_Init+0x138>
    return HAL_ERROR;
 800957a:	2001      	movs	r0, #1
}
 800957c:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800957e:	f1be 0f00 	cmp.w	lr, #0
 8009582:	f47f af79 	bne.w	8009478 <HAL_SPI_Init+0x94>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009586:	6817      	ldr	r7, [r2, #0]
 8009588:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 800958c:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800958e:	e773      	b.n	8009478 <HAL_SPI_Init+0x94>
 8009590:	40013000 	.word	0x40013000

08009594 <HAL_SPI_Transmit>:
{
 8009594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009598:	4604      	mov	r4, r0
 800959a:	461d      	mov	r5, r3
 800959c:	4689      	mov	r9, r1
 800959e:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80095a0:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 80095a2:	f7fa fc8b 	bl	8003ebc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80095a6:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d172      	bne.n	8009694 <HAL_SPI_Transmit+0x100>
  if ((pData == NULL) || (Size == 0UL))
 80095ae:	4606      	mov	r6, r0
 80095b0:	b2d8      	uxtb	r0, r3
 80095b2:	f1b9 0f00 	cmp.w	r9, #0
 80095b6:	d06e      	beq.n	8009696 <HAL_SPI_Transmit+0x102>
 80095b8:	fab8 f388 	clz	r3, r8
 80095bc:	095b      	lsrs	r3, r3, #5
 80095be:	f1b8 0f00 	cmp.w	r8, #0
 80095c2:	d068      	beq.n	8009696 <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 80095c4:	f894 2080 	ldrb.w	r2, [r4, #128]	@ 0x80
 80095c8:	2a01      	cmp	r2, #1
 80095ca:	d063      	beq.n	8009694 <HAL_SPI_Transmit+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095cc:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 80095ce:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80095d0:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095d4:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095d8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->TxXferCount = Size;
 80095dc:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t) 0UL;
 80095e0:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    SPI_1LINE_TX(hspi);
 80095e4:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hspi);
 80095e6:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80095ea:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80095ee:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80095f2:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f6:	68a3      	ldr	r3, [r4, #8]
 80095f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80095fc:	f000 80eb 	beq.w	80097d6 <HAL_SPI_Transmit+0x242>
    SPI_2LINES_TX(hspi);
 8009600:	68cb      	ldr	r3, [r1, #12]
 8009602:	f423 23c0 	bic.w	r3, r3, #393216	@ 0x60000
 8009606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800960a:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800960c:	684a      	ldr	r2, [r1, #4]
 800960e:	4b7d      	ldr	r3, [pc, #500]	@ (8009804 <HAL_SPI_Transmit+0x270>)
 8009610:	4013      	ands	r3, r2
 8009612:	ea43 0308 	orr.w	r3, r3, r8
 8009616:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8009618:	680b      	ldr	r3, [r1, #0]
 800961a:	f043 0301 	orr.w	r3, r3, #1
 800961e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009620:	6863      	ldr	r3, [r4, #4]
 8009622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009626:	d103      	bne.n	8009630 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009628:	680b      	ldr	r3, [r1, #0]
 800962a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800962e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009630:	68e3      	ldr	r3, [r4, #12]
 8009632:	2b0f      	cmp	r3, #15
 8009634:	d84e      	bhi.n	80096d4 <HAL_SPI_Transmit+0x140>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009636:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0UL)
 8009638:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800963c:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800963e:	d92c      	bls.n	800969a <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0UL)
 8009640:	b9db      	cbnz	r3, 800967a <HAL_SPI_Transmit+0xe6>
 8009642:	e06b      	b.n	800971c <HAL_SPI_Transmit+0x188>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009644:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009648:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800964a:	b292      	uxth	r2, r2
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800964c:	4618      	mov	r0, r3
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800964e:	2a01      	cmp	r2, #1
 8009650:	f240 8093 	bls.w	800977a <HAL_SPI_Transmit+0x1e6>
 8009654:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009656:	2a00      	cmp	r2, #0
 8009658:	f000 808f 	beq.w	800977a <HAL_SPI_Transmit+0x1e6>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800965c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009660:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009662:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009664:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8009668:	3b02      	subs	r3, #2
 800966a:	b29b      	uxth	r3, r3
 800966c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8009670:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d050      	beq.n	800971c <HAL_SPI_Transmit+0x188>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800967a:	694b      	ldr	r3, [r1, #20]
 800967c:	0798      	lsls	r0, r3, #30
 800967e:	d4e1      	bmi.n	8009644 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009680:	f7fa fc1c 	bl	8003ebc <HAL_GetTick>
 8009684:	1b80      	subs	r0, r0, r6
 8009686:	42a8      	cmp	r0, r5
 8009688:	d302      	bcc.n	8009690 <HAL_SPI_Transmit+0xfc>
 800968a:	1c6a      	adds	r2, r5, #1
 800968c:	f040 80a8 	bne.w	80097e0 <HAL_SPI_Transmit+0x24c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009690:	6821      	ldr	r1, [r4, #0]
 8009692:	e7ed      	b.n	8009670 <HAL_SPI_Transmit+0xdc>
    return HAL_BUSY;
 8009694:	2002      	movs	r0, #2
}
 8009696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while (hspi->TxXferCount > 0UL)
 800969a:	2b00      	cmp	r3, #0
 800969c:	d03e      	beq.n	800971c <HAL_SPI_Transmit+0x188>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800969e:	694b      	ldr	r3, [r1, #20]
 80096a0:	079b      	lsls	r3, r3, #30
 80096a2:	f140 8083 	bpl.w	80097ac <HAL_SPI_Transmit+0x218>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80096a6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80096aa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d951      	bls.n	8009756 <HAL_SPI_Transmit+0x1c2>
 80096b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80096b4:	2b40      	cmp	r3, #64	@ 0x40
 80096b6:	d94e      	bls.n	8009756 <HAL_SPI_Transmit+0x1c2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80096b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80096bc:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 80096be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80096c2:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80096c4:	3b04      	subs	r3, #4
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 80096cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	e7e2      	b.n	800969a <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0UL)
 80096d4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80096d8:	b29b      	uxth	r3, r3
 80096da:	b97b      	cbnz	r3, 80096fc <HAL_SPI_Transmit+0x168>
 80096dc:	e01e      	b.n	800971c <HAL_SPI_Transmit+0x188>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80096de:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80096e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e4:	620a      	str	r2, [r1, #32]
        hspi->TxXferCount--;
 80096e6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80096ea:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 80096ec:	3a01      	subs	r2, #1
 80096ee:	b292      	uxth	r2, r2
 80096f0:	f8a4 2062 	strh.w	r2, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 80096f4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 80096f8:	b292      	uxth	r2, r2
 80096fa:	b17a      	cbz	r2, 800971c <HAL_SPI_Transmit+0x188>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80096fc:	694b      	ldr	r3, [r1, #20]
 80096fe:	079b      	lsls	r3, r3, #30
 8009700:	d4ed      	bmi.n	80096de <HAL_SPI_Transmit+0x14a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009702:	f7fa fbdb 	bl	8003ebc <HAL_GetTick>
 8009706:	1b80      	subs	r0, r0, r6
 8009708:	42a8      	cmp	r0, r5
 800970a:	d301      	bcc.n	8009710 <HAL_SPI_Transmit+0x17c>
 800970c:	1c6f      	adds	r7, r5, #1
 800970e:	d167      	bne.n	80097e0 <HAL_SPI_Transmit+0x24c>
    while (hspi->TxXferCount > 0UL)
 8009710:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009714:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8009716:	b292      	uxth	r2, r2
 8009718:	2a00      	cmp	r2, #0
 800971a:	d1ef      	bne.n	80096fc <HAL_SPI_Transmit+0x168>
 800971c:	b945      	cbnz	r5, 8009730 <HAL_SPI_Transmit+0x19c>
 800971e:	e04e      	b.n	80097be <HAL_SPI_Transmit+0x22a>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009720:	f7fa fbcc 	bl	8003ebc <HAL_GetTick>
 8009724:	1b80      	subs	r0, r0, r6
 8009726:	42a8      	cmp	r0, r5
 8009728:	d301      	bcc.n	800972e <HAL_SPI_Transmit+0x19a>
 800972a:	1c6a      	adds	r2, r5, #1
 800972c:	d14c      	bne.n	80097c8 <HAL_SPI_Transmit+0x234>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800972e:	6821      	ldr	r1, [r4, #0]
 8009730:	694b      	ldr	r3, [r1, #20]
 8009732:	0719      	lsls	r1, r3, #28
 8009734:	d5f4      	bpl.n	8009720 <HAL_SPI_Transmit+0x18c>
  SPI_CloseTransfer(hspi);
 8009736:	4620      	mov	r0, r4
 8009738:	f7ff fdf8 	bl	800932c <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800973c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800973e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8009740:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009744:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8009748:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800974c:	1ac0      	subs	r0, r0, r3
 800974e:	bf18      	it	ne
 8009750:	2001      	movne	r0, #1
}
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009756:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800975a:	b29b      	uxth	r3, r3
 800975c:	2b01      	cmp	r3, #1
 800975e:	d917      	bls.n	8009790 <HAL_SPI_Transmit+0x1fc>
 8009760:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009762:	b1ab      	cbz	r3, 8009790 <HAL_SPI_Transmit+0x1fc>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009764:	f832 3b02 	ldrh.w	r3, [r2], #2
 8009768:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 800976a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800976e:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009770:	3b02      	subs	r3, #2
 8009772:	b29b      	uxth	r3, r3
 8009774:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8009778:	e7a8      	b.n	80096cc <HAL_SPI_Transmit+0x138>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800977a:	f830 3b02 	ldrh.w	r3, [r0], #2
 800977e:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount--;
 8009780:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009784:	65e0      	str	r0, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009786:	3b01      	subs	r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800978e:	e76f      	b.n	8009670 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009790:	7813      	ldrb	r3, [r2, #0]
 8009792:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009796:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009798:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800979a:	3301      	adds	r3, #1
 800979c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800979e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 80097aa:	e78f      	b.n	80096cc <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097ac:	f7fa fb86 	bl	8003ebc <HAL_GetTick>
 80097b0:	1b80      	subs	r0, r0, r6
 80097b2:	42a8      	cmp	r0, r5
 80097b4:	d301      	bcc.n	80097ba <HAL_SPI_Transmit+0x226>
 80097b6:	1c68      	adds	r0, r5, #1
 80097b8:	d112      	bne.n	80097e0 <HAL_SPI_Transmit+0x24c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80097ba:	6821      	ldr	r1, [r4, #0]
 80097bc:	e786      	b.n	80096cc <HAL_SPI_Transmit+0x138>
 80097be:	694b      	ldr	r3, [r1, #20]
 80097c0:	071b      	lsls	r3, r3, #28
 80097c2:	d4b8      	bmi.n	8009736 <HAL_SPI_Transmit+0x1a2>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097c4:	f7fa fb7a 	bl	8003ebc <HAL_GetTick>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80097cc:	f043 0320 	orr.w	r3, r3, #32
 80097d0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80097d4:	e7af      	b.n	8009736 <HAL_SPI_Transmit+0x1a2>
    SPI_1LINE_TX(hspi);
 80097d6:	680b      	ldr	r3, [r1, #0]
 80097d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80097dc:	600b      	str	r3, [r1, #0]
 80097de:	e715      	b.n	800960c <HAL_SPI_Transmit+0x78>
          SPI_CloseTransfer(hspi);
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7ff fda3 	bl	800932c <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80097e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80097ea:	2201      	movs	r2, #1
          return HAL_TIMEOUT;
 80097ec:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80097ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097f2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(hspi);
 80097f6:	2300      	movs	r3, #0
          hspi->State = HAL_SPI_STATE_READY;
 80097f8:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 80097fc:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8009800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009804:	ffff0000 	.word	0xffff0000

08009808 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009808:	b084      	sub	sp, #16
 800980a:	b410      	push	{r4}
 800980c:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009810:	4614      	mov	r4, r2
{
 8009812:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 8009816:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 8009818:	9904      	ldr	r1, [sp, #16]
{
 800981a:	4602      	mov	r2, r0
             Init.BusWide             | \
 800981c:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800981e:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009820:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 8009822:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 8009824:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 8009826:	4303      	orrs	r3, r0

  return HAL_OK;
}
 8009828:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800982a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800982c:	4903      	ldr	r1, [pc, #12]	@ (800983c <SDMMC_Init+0x34>)
 800982e:	4021      	ands	r1, r4
}
 8009830:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009834:	430b      	orrs	r3, r1
}
 8009836:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009838:	6053      	str	r3, [r2, #4]
}
 800983a:	4770      	bx	lr
 800983c:	ffc02c00 	.word	0xffc02c00

08009840 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009840:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop

08009848 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009848:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800984a:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800984c:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800984e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8009852:	4770      	bx	lr

08009854 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009854:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 8009856:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	f042 0203 	orr.w	r2, r2, #3
 800985e:	601a      	str	r2, [r3, #0]
}
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop

08009864 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009864:	6800      	ldr	r0, [r0, #0]
}
 8009866:	f000 0003 	and.w	r0, r0, #3
 800986a:	4770      	bx	lr

0800986c <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800986c:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800986e:	5840      	ldr	r0, [r0, r1]
}
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop

08009874 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009874:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009876:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 800987a:	690d      	ldr	r5, [r1, #16]
{
 800987c:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800987e:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009880:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 8009882:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009884:	6250      	str	r0, [r2, #36]	@ 0x24
                       Data->TransferDir   | \
 8009886:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 8009888:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 800988a:	6294      	str	r4, [r2, #40]	@ 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800988c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
                       Data->TransferMode  | \
 800988e:	4303      	orrs	r3, r0

  return HAL_OK;

}
 8009890:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009892:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8009896:	430b      	orrs	r3, r1
}
 8009898:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800989a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop

080098a0 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098a0:	4a4f      	ldr	r2, [pc, #316]	@ (80099e0 <SDMMC_CmdBlockLength+0x140>)
{
 80098a2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098a4:	4b4f      	ldr	r3, [pc, #316]	@ (80099e4 <SDMMC_CmdBlockLength+0x144>)
 80098a6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80098a8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098ac:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098b0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80098b4:	484c      	ldr	r0, [pc, #304]	@ (80099e8 <SDMMC_CmdBlockLength+0x148>)
 80098b6:	f241 1310 	movw	r3, #4368	@ 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098ba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098bc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098be:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098c2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098c4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80098c8:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 80098cc:	1e53      	subs	r3, r2, #1
 80098ce:	b14a      	cbz	r2, 80098e4 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80098d0:	4946      	ldr	r1, [pc, #280]	@ (80099ec <SDMMC_CmdBlockLength+0x14c>)
    sta_reg = SDMMCx->STA;
 80098d2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 80098d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80098d8:	420a      	tst	r2, r1
 80098da:	d001      	beq.n	80098e0 <SDMMC_CmdBlockLength+0x40>
 80098dc:	0492      	lsls	r2, r2, #18
 80098de:	d504      	bpl.n	80098ea <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 80098e0:	1c58      	adds	r0, r3, #1
 80098e2:	d1f6      	bne.n	80098d2 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80098e4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80098e8:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098ea:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80098ee:	075b      	lsls	r3, r3, #29
 80098f0:	d443      	bmi.n	800997a <SDMMC_CmdBlockLength+0xda>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098f2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 80098f6:	07d8      	lsls	r0, r3, #31
 80098f8:	d409      	bmi.n	800990e <SDMMC_CmdBlockLength+0x6e>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80098fa:	4b3d      	ldr	r3, [pc, #244]	@ (80099f0 <SDMMC_CmdBlockLength+0x150>)
 80098fc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009900:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b10      	cmp	r3, #16
 8009908:	d005      	beq.n	8009916 <SDMMC_CmdBlockLength+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800990a:	2001      	movs	r0, #1
 800990c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800990e:	2301      	movs	r3, #1
 8009910:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009914:	e7f9      	b.n	800990a <SDMMC_CmdBlockLength+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009916:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800991a:	4836      	ldr	r0, [pc, #216]	@ (80099f4 <SDMMC_CmdBlockLength+0x154>)
 800991c:	4018      	ands	r0, r3
 800991e:	b358      	cbz	r0, 8009978 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009920:	2b00      	cmp	r3, #0
 8009922:	db2f      	blt.n	8009984 <SDMMC_CmdBlockLength+0xe4>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009924:	0059      	lsls	r1, r3, #1
 8009926:	d430      	bmi.n	800998a <SDMMC_CmdBlockLength+0xea>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009928:	009a      	lsls	r2, r3, #2
 800992a:	d430      	bmi.n	800998e <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800992c:	00d9      	lsls	r1, r3, #3
 800992e:	d430      	bmi.n	8009992 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009930:	011a      	lsls	r2, r3, #4
 8009932:	d431      	bmi.n	8009998 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009934:	0159      	lsls	r1, r3, #5
 8009936:	d432      	bmi.n	800999e <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009938:	01da      	lsls	r2, r3, #7
 800993a:	d433      	bmi.n	80099a4 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800993c:	0219      	lsls	r1, r3, #8
 800993e:	d434      	bmi.n	80099aa <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009940:	025a      	lsls	r2, r3, #9
 8009942:	d435      	bmi.n	80099b0 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009944:	0299      	lsls	r1, r3, #10
 8009946:	d43f      	bmi.n	80099c8 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009948:	02da      	lsls	r2, r3, #11
 800994a:	d43a      	bmi.n	80099c2 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800994c:	0359      	lsls	r1, r3, #13
 800994e:	d435      	bmi.n	80099bc <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009950:	039a      	lsls	r2, r3, #14
 8009952:	d430      	bmi.n	80099b6 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009954:	03d9      	lsls	r1, r3, #15
 8009956:	d440      	bmi.n	80099da <SDMMC_CmdBlockLength+0x13a>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009958:	041a      	lsls	r2, r3, #16
 800995a:	d43b      	bmi.n	80099d4 <SDMMC_CmdBlockLength+0x134>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800995c:	0459      	lsls	r1, r3, #17
 800995e:	d436      	bmi.n	80099ce <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009960:	049a      	lsls	r2, r3, #18
 8009962:	d407      	bmi.n	8009974 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009964:	f013 0f08 	tst.w	r3, #8
 8009968:	bf0c      	ite	eq
 800996a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800996e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009972:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009974:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009978:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800997a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800997c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800997e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009982:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009984:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009988:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800998a:	2040      	movs	r0, #64	@ 0x40
 800998c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800998e:	2080      	movs	r0, #128	@ 0x80
 8009990:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009992:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009996:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009998:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800999c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800999e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80099a2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80099a4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80099a8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099aa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80099ae:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80099b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80099b4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099b6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80099ba:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099bc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80099c0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80099c2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80099c6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80099c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80099cc:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099ce:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80099d2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099d4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80099d8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80099da:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80099de:	4770      	bx	lr
 80099e0:	2400000c 	.word	0x2400000c
 80099e4:	10624dd3 	.word	0x10624dd3
 80099e8:	fffee0c0 	.word	0xfffee0c0
 80099ec:	00200045 	.word	0x00200045
 80099f0:	002000c5 	.word	0x002000c5
 80099f4:	fdffe008 	.word	0xfdffe008

080099f8 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099f8:	4a4f      	ldr	r2, [pc, #316]	@ (8009b38 <SDMMC_CmdReadSingleBlock+0x140>)
{
 80099fa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099fc:	4b4f      	ldr	r3, [pc, #316]	@ (8009b3c <SDMMC_CmdReadSingleBlock+0x144>)
 80099fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009a00:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a04:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a08:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009a0c:	484c      	ldr	r0, [pc, #304]	@ (8009b40 <SDMMC_CmdReadSingleBlock+0x148>)
 8009a0e:	f241 1311 	movw	r3, #4369	@ 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a12:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a14:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a16:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a1a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009a1c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a20:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009a24:	1e53      	subs	r3, r2, #1
 8009a26:	b14a      	cbz	r2, 8009a3c <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009a28:	4946      	ldr	r1, [pc, #280]	@ (8009b44 <SDMMC_CmdReadSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009a2a:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009a2e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a30:	420a      	tst	r2, r1
 8009a32:	d001      	beq.n	8009a38 <SDMMC_CmdReadSingleBlock+0x40>
 8009a34:	0492      	lsls	r2, r2, #18
 8009a36:	d504      	bpl.n	8009a42 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 8009a38:	1c58      	adds	r0, r3, #1
 8009a3a:	d1f6      	bne.n	8009a2a <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009a3c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009a40:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a42:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009a46:	075b      	lsls	r3, r3, #29
 8009a48:	d443      	bmi.n	8009ad2 <SDMMC_CmdReadSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a4a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009a4e:	07d8      	lsls	r0, r3, #31
 8009a50:	d409      	bmi.n	8009a66 <SDMMC_CmdReadSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a52:	4b3d      	ldr	r3, [pc, #244]	@ (8009b48 <SDMMC_CmdReadSingleBlock+0x150>)
 8009a54:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a58:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b11      	cmp	r3, #17
 8009a60:	d005      	beq.n	8009a6e <SDMMC_CmdReadSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a62:	2001      	movs	r0, #1
 8009a64:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a66:	2301      	movs	r3, #1
 8009a68:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a6c:	e7f9      	b.n	8009a62 <SDMMC_CmdReadSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009a6e:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009a72:	4836      	ldr	r0, [pc, #216]	@ (8009b4c <SDMMC_CmdReadSingleBlock+0x154>)
 8009a74:	4018      	ands	r0, r3
 8009a76:	b358      	cbz	r0, 8009ad0 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db2f      	blt.n	8009adc <SDMMC_CmdReadSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009a7c:	0059      	lsls	r1, r3, #1
 8009a7e:	d430      	bmi.n	8009ae2 <SDMMC_CmdReadSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009a80:	009a      	lsls	r2, r3, #2
 8009a82:	d430      	bmi.n	8009ae6 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009a84:	00d9      	lsls	r1, r3, #3
 8009a86:	d430      	bmi.n	8009aea <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009a88:	011a      	lsls	r2, r3, #4
 8009a8a:	d431      	bmi.n	8009af0 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009a8c:	0159      	lsls	r1, r3, #5
 8009a8e:	d432      	bmi.n	8009af6 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009a90:	01da      	lsls	r2, r3, #7
 8009a92:	d433      	bmi.n	8009afc <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009a94:	0219      	lsls	r1, r3, #8
 8009a96:	d434      	bmi.n	8009b02 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009a98:	025a      	lsls	r2, r3, #9
 8009a9a:	d435      	bmi.n	8009b08 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009a9c:	0299      	lsls	r1, r3, #10
 8009a9e:	d43f      	bmi.n	8009b20 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009aa0:	02da      	lsls	r2, r3, #11
 8009aa2:	d43a      	bmi.n	8009b1a <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009aa4:	0359      	lsls	r1, r3, #13
 8009aa6:	d435      	bmi.n	8009b14 <SDMMC_CmdReadSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009aa8:	039a      	lsls	r2, r3, #14
 8009aaa:	d430      	bmi.n	8009b0e <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009aac:	03d9      	lsls	r1, r3, #15
 8009aae:	d440      	bmi.n	8009b32 <SDMMC_CmdReadSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009ab0:	041a      	lsls	r2, r3, #16
 8009ab2:	d43b      	bmi.n	8009b2c <SDMMC_CmdReadSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009ab4:	0459      	lsls	r1, r3, #17
 8009ab6:	d436      	bmi.n	8009b26 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009ab8:	049a      	lsls	r2, r3, #18
 8009aba:	d407      	bmi.n	8009acc <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009abc:	f013 0f08 	tst.w	r3, #8
 8009ac0:	bf0c      	ite	eq
 8009ac2:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009ac6:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009aca:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009acc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009ad0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ad2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ad4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ad6:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ada:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009adc:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009ae0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ae2:	2040      	movs	r0, #64	@ 0x40
 8009ae4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009ae6:	2080      	movs	r0, #128	@ 0x80
 8009ae8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009aea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009aee:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009af0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009af4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009af6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009afa:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009afc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009b00:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b02:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009b06:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009b0c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b0e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009b12:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009b14:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009b18:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009b1a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009b1e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009b20:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009b24:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b26:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009b2a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009b2c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009b30:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009b32:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009b36:	4770      	bx	lr
 8009b38:	2400000c 	.word	0x2400000c
 8009b3c:	10624dd3 	.word	0x10624dd3
 8009b40:	fffee0c0 	.word	0xfffee0c0
 8009b44:	00200045 	.word	0x00200045
 8009b48:	002000c5 	.word	0x002000c5
 8009b4c:	fdffe008 	.word	0xfdffe008

08009b50 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b50:	4a4f      	ldr	r2, [pc, #316]	@ (8009c90 <SDMMC_CmdReadMultiBlock+0x140>)
{
 8009b52:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b54:	4b4f      	ldr	r3, [pc, #316]	@ (8009c94 <SDMMC_CmdReadMultiBlock+0x144>)
 8009b56:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009b58:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b5c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b60:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009b64:	484c      	ldr	r0, [pc, #304]	@ (8009c98 <SDMMC_CmdReadMultiBlock+0x148>)
 8009b66:	f241 1312 	movw	r3, #4370	@ 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b6a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b6c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b6e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b72:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009b74:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b78:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009b7c:	1e53      	subs	r3, r2, #1
 8009b7e:	b14a      	cbz	r2, 8009b94 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009b80:	4946      	ldr	r1, [pc, #280]	@ (8009c9c <SDMMC_CmdReadMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009b82:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009b86:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b88:	420a      	tst	r2, r1
 8009b8a:	d001      	beq.n	8009b90 <SDMMC_CmdReadMultiBlock+0x40>
 8009b8c:	0492      	lsls	r2, r2, #18
 8009b8e:	d504      	bpl.n	8009b9a <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 8009b90:	1c58      	adds	r0, r3, #1
 8009b92:	d1f6      	bne.n	8009b82 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009b94:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009b98:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b9a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009b9e:	075b      	lsls	r3, r3, #29
 8009ba0:	d443      	bmi.n	8009c2a <SDMMC_CmdReadMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ba2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009ba6:	07d8      	lsls	r0, r3, #31
 8009ba8:	d409      	bmi.n	8009bbe <SDMMC_CmdReadMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009baa:	4b3d      	ldr	r3, [pc, #244]	@ (8009ca0 <SDMMC_CmdReadMultiBlock+0x150>)
 8009bac:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009bb0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b12      	cmp	r3, #18
 8009bb8:	d005      	beq.n	8009bc6 <SDMMC_CmdReadMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bba:	2001      	movs	r0, #1
 8009bbc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bc4:	e7f9      	b.n	8009bba <SDMMC_CmdReadMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009bc6:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bca:	4836      	ldr	r0, [pc, #216]	@ (8009ca4 <SDMMC_CmdReadMultiBlock+0x154>)
 8009bcc:	4018      	ands	r0, r3
 8009bce:	b358      	cbz	r0, 8009c28 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db2f      	blt.n	8009c34 <SDMMC_CmdReadMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bd4:	0059      	lsls	r1, r3, #1
 8009bd6:	d430      	bmi.n	8009c3a <SDMMC_CmdReadMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009bd8:	009a      	lsls	r2, r3, #2
 8009bda:	d430      	bmi.n	8009c3e <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bdc:	00d9      	lsls	r1, r3, #3
 8009bde:	d430      	bmi.n	8009c42 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009be0:	011a      	lsls	r2, r3, #4
 8009be2:	d431      	bmi.n	8009c48 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009be4:	0159      	lsls	r1, r3, #5
 8009be6:	d432      	bmi.n	8009c4e <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009be8:	01da      	lsls	r2, r3, #7
 8009bea:	d433      	bmi.n	8009c54 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009bec:	0219      	lsls	r1, r3, #8
 8009bee:	d434      	bmi.n	8009c5a <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009bf0:	025a      	lsls	r2, r3, #9
 8009bf2:	d435      	bmi.n	8009c60 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009bf4:	0299      	lsls	r1, r3, #10
 8009bf6:	d43f      	bmi.n	8009c78 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009bf8:	02da      	lsls	r2, r3, #11
 8009bfa:	d43a      	bmi.n	8009c72 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009bfc:	0359      	lsls	r1, r3, #13
 8009bfe:	d435      	bmi.n	8009c6c <SDMMC_CmdReadMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c00:	039a      	lsls	r2, r3, #14
 8009c02:	d430      	bmi.n	8009c66 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c04:	03d9      	lsls	r1, r3, #15
 8009c06:	d440      	bmi.n	8009c8a <SDMMC_CmdReadMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c08:	041a      	lsls	r2, r3, #16
 8009c0a:	d43b      	bmi.n	8009c84 <SDMMC_CmdReadMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c0c:	0459      	lsls	r1, r3, #17
 8009c0e:	d436      	bmi.n	8009c7e <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c10:	049a      	lsls	r2, r3, #18
 8009c12:	d407      	bmi.n	8009c24 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009c14:	f013 0f08 	tst.w	r3, #8
 8009c18:	bf0c      	ite	eq
 8009c1a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009c1e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009c22:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009c24:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009c28:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c2a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c2c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c2e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c32:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009c34:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009c38:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009c3a:	2040      	movs	r0, #64	@ 0x40
 8009c3c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c3e:	2080      	movs	r0, #128	@ 0x80
 8009c40:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c42:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009c46:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c48:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009c4c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c4e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009c52:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c54:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009c58:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009c5e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009c64:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c66:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009c6a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c6c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009c70:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009c72:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009c76:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c78:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009c7c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c7e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009c82:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c84:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009c88:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c8a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009c8e:	4770      	bx	lr
 8009c90:	2400000c 	.word	0x2400000c
 8009c94:	10624dd3 	.word	0x10624dd3
 8009c98:	fffee0c0 	.word	0xfffee0c0
 8009c9c:	00200045 	.word	0x00200045
 8009ca0:	002000c5 	.word	0x002000c5
 8009ca4:	fdffe008 	.word	0xfdffe008

08009ca8 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ca8:	4a4f      	ldr	r2, [pc, #316]	@ (8009de8 <SDMMC_CmdWriteSingleBlock+0x140>)
{
 8009caa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cac:	4b4f      	ldr	r3, [pc, #316]	@ (8009dec <SDMMC_CmdWriteSingleBlock+0x144>)
 8009cae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009cb0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cb4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cb8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009cbc:	484c      	ldr	r0, [pc, #304]	@ (8009df0 <SDMMC_CmdWriteSingleBlock+0x148>)
 8009cbe:	f241 1318 	movw	r3, #4376	@ 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cc2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cc4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cc6:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cca:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ccc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cd0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009cd4:	1e53      	subs	r3, r2, #1
 8009cd6:	b14a      	cbz	r2, 8009cec <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009cd8:	4946      	ldr	r1, [pc, #280]	@ (8009df4 <SDMMC_CmdWriteSingleBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009cda:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009cde:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ce0:	420a      	tst	r2, r1
 8009ce2:	d001      	beq.n	8009ce8 <SDMMC_CmdWriteSingleBlock+0x40>
 8009ce4:	0492      	lsls	r2, r2, #18
 8009ce6:	d504      	bpl.n	8009cf2 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 8009ce8:	1c58      	adds	r0, r3, #1
 8009cea:	d1f6      	bne.n	8009cda <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009cec:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009cf0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cf2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009cf6:	075b      	lsls	r3, r3, #29
 8009cf8:	d443      	bmi.n	8009d82 <SDMMC_CmdWriteSingleBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009cfa:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009cfe:	07d8      	lsls	r0, r3, #31
 8009d00:	d409      	bmi.n	8009d16 <SDMMC_CmdWriteSingleBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d02:	4b3d      	ldr	r3, [pc, #244]	@ (8009df8 <SDMMC_CmdWriteSingleBlock+0x150>)
 8009d04:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009d08:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b18      	cmp	r3, #24
 8009d10:	d005      	beq.n	8009d1e <SDMMC_CmdWriteSingleBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d12:	2001      	movs	r0, #1
 8009d14:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d16:	2301      	movs	r3, #1
 8009d18:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d1c:	e7f9      	b.n	8009d12 <SDMMC_CmdWriteSingleBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009d1e:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d22:	4836      	ldr	r0, [pc, #216]	@ (8009dfc <SDMMC_CmdWriteSingleBlock+0x154>)
 8009d24:	4018      	ands	r0, r3
 8009d26:	b358      	cbz	r0, 8009d80 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	db2f      	blt.n	8009d8c <SDMMC_CmdWriteSingleBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d2c:	0059      	lsls	r1, r3, #1
 8009d2e:	d430      	bmi.n	8009d92 <SDMMC_CmdWriteSingleBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d30:	009a      	lsls	r2, r3, #2
 8009d32:	d430      	bmi.n	8009d96 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d34:	00d9      	lsls	r1, r3, #3
 8009d36:	d430      	bmi.n	8009d9a <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d38:	011a      	lsls	r2, r3, #4
 8009d3a:	d431      	bmi.n	8009da0 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d3c:	0159      	lsls	r1, r3, #5
 8009d3e:	d432      	bmi.n	8009da6 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d40:	01da      	lsls	r2, r3, #7
 8009d42:	d433      	bmi.n	8009dac <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d44:	0219      	lsls	r1, r3, #8
 8009d46:	d434      	bmi.n	8009db2 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d48:	025a      	lsls	r2, r3, #9
 8009d4a:	d435      	bmi.n	8009db8 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d4c:	0299      	lsls	r1, r3, #10
 8009d4e:	d43f      	bmi.n	8009dd0 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d50:	02da      	lsls	r2, r3, #11
 8009d52:	d43a      	bmi.n	8009dca <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d54:	0359      	lsls	r1, r3, #13
 8009d56:	d435      	bmi.n	8009dc4 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d58:	039a      	lsls	r2, r3, #14
 8009d5a:	d430      	bmi.n	8009dbe <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d5c:	03d9      	lsls	r1, r3, #15
 8009d5e:	d440      	bmi.n	8009de2 <SDMMC_CmdWriteSingleBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d60:	041a      	lsls	r2, r3, #16
 8009d62:	d43b      	bmi.n	8009ddc <SDMMC_CmdWriteSingleBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d64:	0459      	lsls	r1, r3, #17
 8009d66:	d436      	bmi.n	8009dd6 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d68:	049a      	lsls	r2, r3, #18
 8009d6a:	d407      	bmi.n	8009d7c <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009d6c:	f013 0f08 	tst.w	r3, #8
 8009d70:	bf0c      	ite	eq
 8009d72:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009d76:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009d7a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009d7c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009d80:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d82:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d84:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d86:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d8a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d8c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009d90:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d92:	2040      	movs	r0, #64	@ 0x40
 8009d94:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d96:	2080      	movs	r0, #128	@ 0x80
 8009d98:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d9a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009d9e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009da0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009da4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009da6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009daa:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dac:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009db0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009db2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009db6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009db8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009dbc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009dbe:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009dc2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009dc4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009dc8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009dca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009dce:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009dd0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009dd4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009dd6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009dda:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009ddc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009de0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009de2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009de6:	4770      	bx	lr
 8009de8:	2400000c 	.word	0x2400000c
 8009dec:	10624dd3 	.word	0x10624dd3
 8009df0:	fffee0c0 	.word	0xfffee0c0
 8009df4:	00200045 	.word	0x00200045
 8009df8:	002000c5 	.word	0x002000c5
 8009dfc:	fdffe008 	.word	0xfdffe008

08009e00 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e00:	4a4f      	ldr	r2, [pc, #316]	@ (8009f40 <SDMMC_CmdWriteMultiBlock+0x140>)
{
 8009e02:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e04:	4b4f      	ldr	r3, [pc, #316]	@ (8009f44 <SDMMC_CmdWriteMultiBlock+0x144>)
 8009e06:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8009e08:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e0c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e10:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009e14:	484c      	ldr	r0, [pc, #304]	@ (8009f48 <SDMMC_CmdWriteMultiBlock+0x148>)
 8009e16:	f241 1319 	movw	r3, #4377	@ 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e1a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e1c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e1e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e22:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009e24:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e28:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8009e2c:	1e53      	subs	r3, r2, #1
 8009e2e:	b14a      	cbz	r2, 8009e44 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009e30:	4946      	ldr	r1, [pc, #280]	@ (8009f4c <SDMMC_CmdWriteMultiBlock+0x14c>)
    sta_reg = SDMMCx->STA;
 8009e32:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 8009e36:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009e38:	420a      	tst	r2, r1
 8009e3a:	d001      	beq.n	8009e40 <SDMMC_CmdWriteMultiBlock+0x40>
 8009e3c:	0492      	lsls	r2, r2, #18
 8009e3e:	d504      	bpl.n	8009e4a <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 8009e40:	1c58      	adds	r0, r3, #1
 8009e42:	d1f6      	bne.n	8009e32 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8009e44:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009e48:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009e4a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009e4e:	075b      	lsls	r3, r3, #29
 8009e50:	d443      	bmi.n	8009eda <SDMMC_CmdWriteMultiBlock+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e52:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8009e56:	07d8      	lsls	r0, r3, #31
 8009e58:	d409      	bmi.n	8009e6e <SDMMC_CmdWriteMultiBlock+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8009f50 <SDMMC_CmdWriteMultiBlock+0x150>)
 8009e5c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009e60:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b19      	cmp	r3, #25
 8009e68:	d005      	beq.n	8009e76 <SDMMC_CmdWriteMultiBlock+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e6a:	2001      	movs	r0, #1
 8009e6c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e74:	e7f9      	b.n	8009e6a <SDMMC_CmdWriteMultiBlock+0x6a>
  return (*(__IO uint32_t *) tmp);
 8009e76:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e7a:	4836      	ldr	r0, [pc, #216]	@ (8009f54 <SDMMC_CmdWriteMultiBlock+0x154>)
 8009e7c:	4018      	ands	r0, r3
 8009e7e:	b358      	cbz	r0, 8009ed8 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	db2f      	blt.n	8009ee4 <SDMMC_CmdWriteMultiBlock+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e84:	0059      	lsls	r1, r3, #1
 8009e86:	d430      	bmi.n	8009eea <SDMMC_CmdWriteMultiBlock+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e88:	009a      	lsls	r2, r3, #2
 8009e8a:	d430      	bmi.n	8009eee <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e8c:	00d9      	lsls	r1, r3, #3
 8009e8e:	d430      	bmi.n	8009ef2 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e90:	011a      	lsls	r2, r3, #4
 8009e92:	d431      	bmi.n	8009ef8 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e94:	0159      	lsls	r1, r3, #5
 8009e96:	d432      	bmi.n	8009efe <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e98:	01da      	lsls	r2, r3, #7
 8009e9a:	d433      	bmi.n	8009f04 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009e9c:	0219      	lsls	r1, r3, #8
 8009e9e:	d434      	bmi.n	8009f0a <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ea0:	025a      	lsls	r2, r3, #9
 8009ea2:	d435      	bmi.n	8009f10 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ea4:	0299      	lsls	r1, r3, #10
 8009ea6:	d43f      	bmi.n	8009f28 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ea8:	02da      	lsls	r2, r3, #11
 8009eaa:	d43a      	bmi.n	8009f22 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009eac:	0359      	lsls	r1, r3, #13
 8009eae:	d435      	bmi.n	8009f1c <SDMMC_CmdWriteMultiBlock+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009eb0:	039a      	lsls	r2, r3, #14
 8009eb2:	d430      	bmi.n	8009f16 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009eb4:	03d9      	lsls	r1, r3, #15
 8009eb6:	d440      	bmi.n	8009f3a <SDMMC_CmdWriteMultiBlock+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009eb8:	041a      	lsls	r2, r3, #16
 8009eba:	d43b      	bmi.n	8009f34 <SDMMC_CmdWriteMultiBlock+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009ebc:	0459      	lsls	r1, r3, #17
 8009ebe:	d436      	bmi.n	8009f2e <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009ec0:	049a      	lsls	r2, r3, #18
 8009ec2:	d407      	bmi.n	8009ed4 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009ec4:	f013 0f08 	tst.w	r3, #8
 8009ec8:	bf0c      	ite	eq
 8009eca:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8009ece:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8009ed2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8009ed4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 8009ed8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009eda:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009edc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ede:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ee2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ee4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8009ee8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009eea:	2040      	movs	r0, #64	@ 0x40
 8009eec:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009eee:	2080      	movs	r0, #128	@ 0x80
 8009ef0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009ef2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009ef6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ef8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009efc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009efe:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009f02:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009f04:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009f08:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009f0a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009f0e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009f10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009f14:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f16:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8009f1a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f1c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8009f20:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8009f22:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009f26:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009f28:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009f2c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f2e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009f32:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f34:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009f38:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f3a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009f3e:	4770      	bx	lr
 8009f40:	2400000c 	.word	0x2400000c
 8009f44:	10624dd3 	.word	0x10624dd3
 8009f48:	fffee0c0 	.word	0xfffee0c0
 8009f4c:	00200045 	.word	0x00200045
 8009f50:	002000c5 	.word	0x002000c5
 8009f54:	fdffe008 	.word	0xfdffe008

08009f58 <SDMMC_CmdStopTransfer>:
{
 8009f58:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f5a:	4b7a      	ldr	r3, [pc, #488]	@ (800a144 <SDMMC_CmdStopTransfer+0x1ec>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009f5c:	68c0      	ldr	r0, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f5e:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009f60:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f64:	4b78      	ldr	r3, [pc, #480]	@ (800a148 <SDMMC_CmdStopTransfer+0x1f0>)
{
 8009f66:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f68:	4c78      	ldr	r4, [pc, #480]	@ (800a14c <SDMMC_CmdStopTransfer+0x1f4>)
  SDMMCx->ARG = Command->Argument;
 8009f6a:	2500      	movs	r5, #0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009f6c:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f6e:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009f72:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f74:	4c76      	ldr	r4, [pc, #472]	@ (800a150 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009f76:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f7a:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009f7c:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f7e:	f241 100c 	movw	r0, #4364	@ 0x110c
  SDMMCx->ARG = Command->Argument;
 8009f82:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f84:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f88:	68cc      	ldr	r4, [r1, #12]
 8009f8a:	4023      	ands	r3, r4
 8009f8c:	4318      	orrs	r0, r3
 8009f8e:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8009f90:	b14a      	cbz	r2, 8009fa6 <SDMMC_CmdStopTransfer+0x4e>
 8009f92:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009f94:	486f      	ldr	r0, [pc, #444]	@ (800a154 <SDMMC_CmdStopTransfer+0x1fc>)
    sta_reg = SDMMCx->STA;
 8009f96:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 8009f98:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f9a:	4202      	tst	r2, r0
 8009f9c:	d001      	beq.n	8009fa2 <SDMMC_CmdStopTransfer+0x4a>
 8009f9e:	0492      	lsls	r2, r2, #18
 8009fa0:	d509      	bpl.n	8009fb6 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8009fa2:	1c5c      	adds	r4, r3, #1
 8009fa4:	d1f7      	bne.n	8009f96 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009fa6:	68cb      	ldr	r3, [r1, #12]
 8009fa8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009fac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fb0:	60cb      	str	r3, [r1, #12]
}
 8009fb2:	bc30      	pop	{r4, r5}
 8009fb4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fb6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009fb8:	075b      	lsls	r3, r3, #29
 8009fba:	d44d      	bmi.n	800a058 <SDMMC_CmdStopTransfer+0x100>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fbc:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8009fbe:	f010 0001 	ands.w	r0, r0, #1
 8009fc2:	d13a      	bne.n	800a03a <SDMMC_CmdStopTransfer+0xe2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009fc4:	4b64      	ldr	r3, [pc, #400]	@ (800a158 <SDMMC_CmdStopTransfer+0x200>)
 8009fc6:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009fc8:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b0c      	cmp	r3, #12
 8009fce:	d136      	bne.n	800a03e <SDMMC_CmdStopTransfer+0xe6>
  return (*(__IO uint32_t *) tmp);
 8009fd0:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009fd2:	4a62      	ldr	r2, [pc, #392]	@ (800a15c <SDMMC_CmdStopTransfer+0x204>)
 8009fd4:	401a      	ands	r2, r3
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	d038      	beq.n	800a04c <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	db36      	blt.n	800a04c <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009fde:	005d      	lsls	r5, r3, #1
 8009fe0:	d441      	bmi.n	800a066 <SDMMC_CmdStopTransfer+0x10e>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009fe2:	009c      	lsls	r4, r3, #2
 8009fe4:	d445      	bmi.n	800a072 <SDMMC_CmdStopTransfer+0x11a>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009fe6:	00d8      	lsls	r0, r3, #3
 8009fe8:	d449      	bmi.n	800a07e <SDMMC_CmdStopTransfer+0x126>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009fea:	011a      	lsls	r2, r3, #4
 8009fec:	d44e      	bmi.n	800a08c <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009fee:	015d      	lsls	r5, r3, #5
 8009ff0:	d453      	bmi.n	800a09a <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ff2:	01dc      	lsls	r4, r3, #7
 8009ff4:	d45f      	bmi.n	800a0b6 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ff6:	0218      	lsls	r0, r3, #8
 8009ff8:	d456      	bmi.n	800a0a8 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ffa:	025a      	lsls	r2, r3, #9
 8009ffc:	d469      	bmi.n	800a0d2 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ffe:	029d      	lsls	r5, r3, #10
 800a000:	d460      	bmi.n	800a0c4 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a002:	02dc      	lsls	r4, r3, #11
 800a004:	d47a      	bmi.n	800a0fc <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a006:	0358      	lsls	r0, r3, #13
 800a008:	d471      	bmi.n	800a0ee <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a00a:	039a      	lsls	r2, r3, #14
 800a00c:	d468      	bmi.n	800a0e0 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a00e:	03dd      	lsls	r5, r3, #15
 800a010:	f100 8090 	bmi.w	800a134 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a014:	041c      	lsls	r4, r3, #16
 800a016:	d47f      	bmi.n	800a118 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a018:	0458      	lsls	r0, r3, #17
 800a01a:	d476      	bmi.n	800a10a <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a01c:	049a      	lsls	r2, r3, #18
 800a01e:	f100 8082 	bmi.w	800a126 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a022:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a026:	68cb      	ldr	r3, [r1, #12]
 800a028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a02c:	bf14      	ite	ne
 800a02e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a032:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a036:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a038:	e7bb      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a03a:	2301      	movs	r3, #1
 800a03c:	638b      	str	r3, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a03e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a040:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800a046:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a048:	60cb      	str	r3, [r1, #12]
}
 800a04a:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a04c:	68cb      	ldr	r3, [r1, #12]
 800a04e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
}
 800a052:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a054:	60cb      	str	r3, [r1, #12]
}
 800a056:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a058:	2004      	movs	r0, #4
 800a05a:	6388      	str	r0, [r1, #56]	@ 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a05c:	68cb      	ldr	r3, [r1, #12]
 800a05e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a062:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a064:	e7a5      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a066:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a068:	2040      	movs	r0, #64	@ 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a06a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a06e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a070:	e79f      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a072:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a074:	2080      	movs	r0, #128	@ 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a07a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a07c:	e799      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a07e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a080:	f44f 7080 	mov.w	r0, #256	@ 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a084:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a088:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a08a:	e792      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a08c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a08e:	f44f 7000 	mov.w	r0, #512	@ 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a096:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a098:	e78b      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a09a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a09c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0a4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a0a6:	e784      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0a8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0aa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0b2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a0b4:	e77d      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0b6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0c0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a0c2:	e776      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0c4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0c6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ce:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a0d0:	e76f      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0d2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0dc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a0de:	e768      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0e0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a0e2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ea:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a0ec:	e761      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0ee:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a0f0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0f8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a0fa:	e75a      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a0fc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800a0fe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a106:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a108:	e753      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a10a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a10c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a114:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a116:	e74c      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a118:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a11a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a11e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a122:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a124:	e745      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a126:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800a128:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a12c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a130:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a132:	e73e      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a134:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a136:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a13a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a13e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a140:	e737      	b.n	8009fb2 <SDMMC_CmdStopTransfer+0x5a>
 800a142:	bf00      	nop
 800a144:	2400000c 	.word	0x2400000c
 800a148:	fffee0c0 	.word	0xfffee0c0
 800a14c:	10624dd3 	.word	0x10624dd3
 800a150:	05f5e100 	.word	0x05f5e100
 800a154:	00200045 	.word	0x00200045
 800a158:	002000c5 	.word	0x002000c5
 800a15c:	fdffe008 	.word	0xfdffe008

0800a160 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a160:	4a4f      	ldr	r2, [pc, #316]	@ (800a2a0 <SDMMC_CmdSelDesel+0x140>)
{
 800a162:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a164:	4b4f      	ldr	r3, [pc, #316]	@ (800a2a4 <SDMMC_CmdSelDesel+0x144>)
 800a166:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a168:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a16c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a170:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a174:	484c      	ldr	r0, [pc, #304]	@ (800a2a8 <SDMMC_CmdSelDesel+0x148>)
 800a176:	f241 1307 	movw	r3, #4359	@ 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a17a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a17c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a17e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a182:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a184:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a188:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a18c:	1e53      	subs	r3, r2, #1
 800a18e:	b14a      	cbz	r2, 800a1a4 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a190:	4946      	ldr	r1, [pc, #280]	@ (800a2ac <SDMMC_CmdSelDesel+0x14c>)
    sta_reg = SDMMCx->STA;
 800a192:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a196:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a198:	420a      	tst	r2, r1
 800a19a:	d001      	beq.n	800a1a0 <SDMMC_CmdSelDesel+0x40>
 800a19c:	0492      	lsls	r2, r2, #18
 800a19e:	d504      	bpl.n	800a1aa <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800a1a0:	1c58      	adds	r0, r3, #1
 800a1a2:	d1f6      	bne.n	800a192 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a1a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a1a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1aa:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a1ae:	075b      	lsls	r3, r3, #29
 800a1b0:	d443      	bmi.n	800a23a <SDMMC_CmdSelDesel+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1b2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a1b6:	07d8      	lsls	r0, r3, #31
 800a1b8:	d409      	bmi.n	800a1ce <SDMMC_CmdSelDesel+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1ba:	4b3d      	ldr	r3, [pc, #244]	@ (800a2b0 <SDMMC_CmdSelDesel+0x150>)
 800a1bc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a1c0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b07      	cmp	r3, #7
 800a1c8:	d005      	beq.n	800a1d6 <SDMMC_CmdSelDesel+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1d4:	e7f9      	b.n	800a1ca <SDMMC_CmdSelDesel+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a1d6:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a1da:	4836      	ldr	r0, [pc, #216]	@ (800a2b4 <SDMMC_CmdSelDesel+0x154>)
 800a1dc:	4018      	ands	r0, r3
 800a1de:	b358      	cbz	r0, 800a238 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	db2f      	blt.n	800a244 <SDMMC_CmdSelDesel+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a1e4:	0059      	lsls	r1, r3, #1
 800a1e6:	d430      	bmi.n	800a24a <SDMMC_CmdSelDesel+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a1e8:	009a      	lsls	r2, r3, #2
 800a1ea:	d430      	bmi.n	800a24e <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a1ec:	00d9      	lsls	r1, r3, #3
 800a1ee:	d430      	bmi.n	800a252 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a1f0:	011a      	lsls	r2, r3, #4
 800a1f2:	d431      	bmi.n	800a258 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a1f4:	0159      	lsls	r1, r3, #5
 800a1f6:	d432      	bmi.n	800a25e <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a1f8:	01da      	lsls	r2, r3, #7
 800a1fa:	d433      	bmi.n	800a264 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a1fc:	0219      	lsls	r1, r3, #8
 800a1fe:	d434      	bmi.n	800a26a <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a200:	025a      	lsls	r2, r3, #9
 800a202:	d435      	bmi.n	800a270 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a204:	0299      	lsls	r1, r3, #10
 800a206:	d43f      	bmi.n	800a288 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a208:	02da      	lsls	r2, r3, #11
 800a20a:	d43a      	bmi.n	800a282 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a20c:	0359      	lsls	r1, r3, #13
 800a20e:	d435      	bmi.n	800a27c <SDMMC_CmdSelDesel+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a210:	039a      	lsls	r2, r3, #14
 800a212:	d430      	bmi.n	800a276 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a214:	03d9      	lsls	r1, r3, #15
 800a216:	d440      	bmi.n	800a29a <SDMMC_CmdSelDesel+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a218:	041a      	lsls	r2, r3, #16
 800a21a:	d43b      	bmi.n	800a294 <SDMMC_CmdSelDesel+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a21c:	0459      	lsls	r1, r3, #17
 800a21e:	d436      	bmi.n	800a28e <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a220:	049a      	lsls	r2, r3, #18
 800a222:	d407      	bmi.n	800a234 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a224:	f013 0f08 	tst.w	r3, #8
 800a228:	bf0c      	ite	eq
 800a22a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a22e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a232:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a234:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a238:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a23a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a23c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a23e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a242:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a244:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a248:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a24a:	2040      	movs	r0, #64	@ 0x40
 800a24c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a24e:	2080      	movs	r0, #128	@ 0x80
 800a250:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a252:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a256:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a258:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a25c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a25e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a262:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a264:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a268:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a26a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a26e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a270:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a274:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a276:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a27a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a27c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a280:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a282:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a286:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a288:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a28c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a28e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a292:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a294:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a298:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a29a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a29e:	4770      	bx	lr
 800a2a0:	2400000c 	.word	0x2400000c
 800a2a4:	10624dd3 	.word	0x10624dd3
 800a2a8:	fffee0c0 	.word	0xfffee0c0
 800a2ac:	00200045 	.word	0x00200045
 800a2b0:	002000c5 	.word	0x002000c5
 800a2b4:	fdffe008 	.word	0xfdffe008

0800a2b8 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2b8:	4b11      	ldr	r3, [pc, #68]	@ (800a300 <SDMMC_CmdGoIdleState+0x48>)
{
 800a2ba:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a2bc:	4a11      	ldr	r2, [pc, #68]	@ (800a304 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2be:	681b      	ldr	r3, [r3, #0]
{
 800a2c0:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2c2:	4c11      	ldr	r4, [pc, #68]	@ (800a308 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800a2c4:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2c6:	fba4 4303 	umull	r4, r3, r4, r3
  SDMMCx->ARG = Command->Argument;
 800a2ca:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a2cc:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2ce:	0a5b      	lsrs	r3, r3, #9
 800a2d0:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a2d4:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2d6:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a2da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a2de:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2e0:	e002      	b.n	800a2e8 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a2e2:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800a2e4:	0612      	lsls	r2, r2, #24
 800a2e6:	d405      	bmi.n	800a2f4 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	d2fa      	bcs.n	800a2e2 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800a2ec:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a2f0:	bc30      	pop	{r4, r5}
 800a2f2:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800a2f6:	2000      	movs	r0, #0
}
 800a2f8:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2fa:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	2400000c 	.word	0x2400000c
 800a304:	fffee0c0 	.word	0xfffee0c0
 800a308:	10624dd3 	.word	0x10624dd3
 800a30c:	002000c5 	.word	0x002000c5

0800a310 <SDMMC_CmdOperCond>:
{
 800a310:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a312:	4a1c      	ldr	r2, [pc, #112]	@ (800a384 <SDMMC_CmdOperCond+0x74>)
 800a314:	4b1c      	ldr	r3, [pc, #112]	@ (800a388 <SDMMC_CmdOperCond+0x78>)
 800a316:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a318:	481c      	ldr	r0, [pc, #112]	@ (800a38c <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a31a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a31e:	f241 1308 	movw	r3, #4360	@ 0x1108
{
 800a322:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a324:	f44f 74d5 	mov.w	r4, #426	@ 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a328:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a32a:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a32c:	68cc      	ldr	r4, [r1, #12]
 800a32e:	4020      	ands	r0, r4
 800a330:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a332:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a336:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a33a:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a33c:	b14a      	cbz	r2, 800a352 <SDMMC_CmdOperCond+0x42>
 800a33e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a340:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a342:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a344:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a348:	d001      	beq.n	800a34e <SDMMC_CmdOperCond+0x3e>
 800a34a:	0490      	lsls	r0, r2, #18
 800a34c:	d506      	bpl.n	800a35c <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800a34e:	1c5c      	adds	r4, r3, #1
 800a350:	d1f6      	bne.n	800a340 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a352:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a35a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a35c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a35e:	075a      	lsls	r2, r3, #29
 800a360:	d40c      	bmi.n	800a37c <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a362:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800a364:	f010 0001 	ands.w	r0, r0, #1
 800a368:	d105      	bne.n	800a376 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a36a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a36c:	065b      	lsls	r3, r3, #25
 800a36e:	d5f2      	bpl.n	800a356 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a370:	2340      	movs	r3, #64	@ 0x40
 800a372:	638b      	str	r3, [r1, #56]	@ 0x38
 800a374:	e7ef      	b.n	800a356 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a376:	2301      	movs	r3, #1
 800a378:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a37a:	e7ec      	b.n	800a356 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a37c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a37e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a380:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a382:	e7e8      	b.n	800a356 <SDMMC_CmdOperCond+0x46>
 800a384:	2400000c 	.word	0x2400000c
 800a388:	10624dd3 	.word	0x10624dd3
 800a38c:	fffee0c0 	.word	0xfffee0c0

0800a390 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a390:	4a4f      	ldr	r2, [pc, #316]	@ (800a4d0 <SDMMC_CmdAppCommand+0x140>)
{
 800a392:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a394:	4b4f      	ldr	r3, [pc, #316]	@ (800a4d4 <SDMMC_CmdAppCommand+0x144>)
 800a396:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a398:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a39c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3a0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a3a4:	484c      	ldr	r0, [pc, #304]	@ (800a4d8 <SDMMC_CmdAppCommand+0x148>)
 800a3a6:	f241 1337 	movw	r3, #4407	@ 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3aa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3ac:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3ae:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3b2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a3b4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3b8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a3bc:	1e53      	subs	r3, r2, #1
 800a3be:	b14a      	cbz	r2, 800a3d4 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a3c0:	4946      	ldr	r1, [pc, #280]	@ (800a4dc <SDMMC_CmdAppCommand+0x14c>)
    sta_reg = SDMMCx->STA;
 800a3c2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a3c6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a3c8:	420a      	tst	r2, r1
 800a3ca:	d001      	beq.n	800a3d0 <SDMMC_CmdAppCommand+0x40>
 800a3cc:	0492      	lsls	r2, r2, #18
 800a3ce:	d504      	bpl.n	800a3da <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800a3d0:	1c58      	adds	r0, r3, #1
 800a3d2:	d1f6      	bne.n	800a3c2 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a3d4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a3d8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3da:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a3de:	075b      	lsls	r3, r3, #29
 800a3e0:	d443      	bmi.n	800a46a <SDMMC_CmdAppCommand+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3e2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a3e6:	07d8      	lsls	r0, r3, #31
 800a3e8:	d409      	bmi.n	800a3fe <SDMMC_CmdAppCommand+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3ea:	4b3d      	ldr	r3, [pc, #244]	@ (800a4e0 <SDMMC_CmdAppCommand+0x150>)
 800a3ec:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a3f0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b37      	cmp	r3, #55	@ 0x37
 800a3f8:	d005      	beq.n	800a406 <SDMMC_CmdAppCommand+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3fe:	2301      	movs	r3, #1
 800a400:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a404:	e7f9      	b.n	800a3fa <SDMMC_CmdAppCommand+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a406:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a40a:	4836      	ldr	r0, [pc, #216]	@ (800a4e4 <SDMMC_CmdAppCommand+0x154>)
 800a40c:	4018      	ands	r0, r3
 800a40e:	b358      	cbz	r0, 800a468 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a410:	2b00      	cmp	r3, #0
 800a412:	db2f      	blt.n	800a474 <SDMMC_CmdAppCommand+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a414:	0059      	lsls	r1, r3, #1
 800a416:	d430      	bmi.n	800a47a <SDMMC_CmdAppCommand+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a418:	009a      	lsls	r2, r3, #2
 800a41a:	d430      	bmi.n	800a47e <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a41c:	00d9      	lsls	r1, r3, #3
 800a41e:	d430      	bmi.n	800a482 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a420:	011a      	lsls	r2, r3, #4
 800a422:	d431      	bmi.n	800a488 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a424:	0159      	lsls	r1, r3, #5
 800a426:	d432      	bmi.n	800a48e <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a428:	01da      	lsls	r2, r3, #7
 800a42a:	d433      	bmi.n	800a494 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a42c:	0219      	lsls	r1, r3, #8
 800a42e:	d434      	bmi.n	800a49a <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a430:	025a      	lsls	r2, r3, #9
 800a432:	d435      	bmi.n	800a4a0 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a434:	0299      	lsls	r1, r3, #10
 800a436:	d43f      	bmi.n	800a4b8 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a438:	02da      	lsls	r2, r3, #11
 800a43a:	d43a      	bmi.n	800a4b2 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a43c:	0359      	lsls	r1, r3, #13
 800a43e:	d435      	bmi.n	800a4ac <SDMMC_CmdAppCommand+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a440:	039a      	lsls	r2, r3, #14
 800a442:	d430      	bmi.n	800a4a6 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a444:	03d9      	lsls	r1, r3, #15
 800a446:	d440      	bmi.n	800a4ca <SDMMC_CmdAppCommand+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a448:	041a      	lsls	r2, r3, #16
 800a44a:	d43b      	bmi.n	800a4c4 <SDMMC_CmdAppCommand+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a44c:	0459      	lsls	r1, r3, #17
 800a44e:	d436      	bmi.n	800a4be <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a450:	049a      	lsls	r2, r3, #18
 800a452:	d407      	bmi.n	800a464 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a454:	f013 0f08 	tst.w	r3, #8
 800a458:	bf0c      	ite	eq
 800a45a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a45e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a462:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a464:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a468:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a46a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a46c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a46e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a472:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a474:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a478:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a47a:	2040      	movs	r0, #64	@ 0x40
 800a47c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a47e:	2080      	movs	r0, #128	@ 0x80
 800a480:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a482:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a486:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a488:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a48c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a48e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a492:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a494:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a498:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a49a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a49e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a4a4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4a6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a4aa:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a4b0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a4b2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a4b6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a4bc:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4be:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a4c2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a4c8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4ca:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a4ce:	4770      	bx	lr
 800a4d0:	2400000c 	.word	0x2400000c
 800a4d4:	10624dd3 	.word	0x10624dd3
 800a4d8:	fffee0c0 	.word	0xfffee0c0
 800a4dc:	00200045 	.word	0x00200045
 800a4e0:	002000c5 	.word	0x002000c5
 800a4e4:	fdffe008 	.word	0xfdffe008

0800a4e8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4e8:	4a19      	ldr	r2, [pc, #100]	@ (800a550 <SDMMC_CmdAppOperCommand+0x68>)
{
 800a4ea:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4ec:	4b19      	ldr	r3, [pc, #100]	@ (800a554 <SDMMC_CmdAppOperCommand+0x6c>)
 800a4ee:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a4f0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4f4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a4f8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a4fc:	4816      	ldr	r0, [pc, #88]	@ (800a558 <SDMMC_CmdAppOperCommand+0x70>)
 800a4fe:	f241 1329 	movw	r3, #4393	@ 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a502:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a504:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a506:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a50a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a50c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a510:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a514:	1e53      	subs	r3, r2, #1
 800a516:	b14a      	cbz	r2, 800a52c <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800a518:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a51c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a51e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a522:	d001      	beq.n	800a528 <SDMMC_CmdAppOperCommand+0x40>
 800a524:	0492      	lsls	r2, r2, #18
 800a526:	d504      	bpl.n	800a532 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800a528:	1c59      	adds	r1, r3, #1
 800a52a:	d1f5      	bne.n	800a518 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a52c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a530:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a532:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800a536:	f010 0004 	ands.w	r0, r0, #4
 800a53a:	d103      	bne.n	800a544 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a53c:	4b07      	ldr	r3, [pc, #28]	@ (800a55c <SDMMC_CmdAppOperCommand+0x74>)
 800a53e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800a542:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a544:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a546:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a548:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	2400000c 	.word	0x2400000c
 800a554:	10624dd3 	.word	0x10624dd3
 800a558:	fffee0c0 	.word	0xfffee0c0
 800a55c:	002000c5 	.word	0x002000c5

0800a560 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a560:	4a4f      	ldr	r2, [pc, #316]	@ (800a6a0 <SDMMC_CmdBusWidth+0x140>)
{
 800a562:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a564:	4b4f      	ldr	r3, [pc, #316]	@ (800a6a4 <SDMMC_CmdBusWidth+0x144>)
 800a566:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a568:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a56c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a570:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a574:	484c      	ldr	r0, [pc, #304]	@ (800a6a8 <SDMMC_CmdBusWidth+0x148>)
 800a576:	f241 1306 	movw	r3, #4358	@ 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a57a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a57c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a57e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a582:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a584:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a588:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a58c:	1e53      	subs	r3, r2, #1
 800a58e:	b14a      	cbz	r2, 800a5a4 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a590:	4946      	ldr	r1, [pc, #280]	@ (800a6ac <SDMMC_CmdBusWidth+0x14c>)
    sta_reg = SDMMCx->STA;
 800a592:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a596:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a598:	420a      	tst	r2, r1
 800a59a:	d001      	beq.n	800a5a0 <SDMMC_CmdBusWidth+0x40>
 800a59c:	0492      	lsls	r2, r2, #18
 800a59e:	d504      	bpl.n	800a5aa <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800a5a0:	1c58      	adds	r0, r3, #1
 800a5a2:	d1f6      	bne.n	800a592 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800a5a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a5a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5aa:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a5ae:	075b      	lsls	r3, r3, #29
 800a5b0:	d443      	bmi.n	800a63a <SDMMC_CmdBusWidth+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5b2:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a5b6:	07d8      	lsls	r0, r3, #31
 800a5b8:	d409      	bmi.n	800a5ce <SDMMC_CmdBusWidth+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5ba:	4b3d      	ldr	r3, [pc, #244]	@ (800a6b0 <SDMMC_CmdBusWidth+0x150>)
 800a5bc:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5c0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b06      	cmp	r3, #6
 800a5c8:	d005      	beq.n	800a5d6 <SDMMC_CmdBusWidth+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5d4:	e7f9      	b.n	800a5ca <SDMMC_CmdBusWidth+0x6a>
  return (*(__IO uint32_t *) tmp);
 800a5d6:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a5da:	4836      	ldr	r0, [pc, #216]	@ (800a6b4 <SDMMC_CmdBusWidth+0x154>)
 800a5dc:	4018      	ands	r0, r3
 800a5de:	b358      	cbz	r0, 800a638 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	db2f      	blt.n	800a644 <SDMMC_CmdBusWidth+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a5e4:	0059      	lsls	r1, r3, #1
 800a5e6:	d430      	bmi.n	800a64a <SDMMC_CmdBusWidth+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a5e8:	009a      	lsls	r2, r3, #2
 800a5ea:	d430      	bmi.n	800a64e <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a5ec:	00d9      	lsls	r1, r3, #3
 800a5ee:	d430      	bmi.n	800a652 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a5f0:	011a      	lsls	r2, r3, #4
 800a5f2:	d431      	bmi.n	800a658 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a5f4:	0159      	lsls	r1, r3, #5
 800a5f6:	d432      	bmi.n	800a65e <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a5f8:	01da      	lsls	r2, r3, #7
 800a5fa:	d433      	bmi.n	800a664 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a5fc:	0219      	lsls	r1, r3, #8
 800a5fe:	d434      	bmi.n	800a66a <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a600:	025a      	lsls	r2, r3, #9
 800a602:	d435      	bmi.n	800a670 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a604:	0299      	lsls	r1, r3, #10
 800a606:	d43f      	bmi.n	800a688 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a608:	02da      	lsls	r2, r3, #11
 800a60a:	d43a      	bmi.n	800a682 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a60c:	0359      	lsls	r1, r3, #13
 800a60e:	d435      	bmi.n	800a67c <SDMMC_CmdBusWidth+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a610:	039a      	lsls	r2, r3, #14
 800a612:	d430      	bmi.n	800a676 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a614:	03d9      	lsls	r1, r3, #15
 800a616:	d440      	bmi.n	800a69a <SDMMC_CmdBusWidth+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a618:	041a      	lsls	r2, r3, #16
 800a61a:	d43b      	bmi.n	800a694 <SDMMC_CmdBusWidth+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a61c:	0459      	lsls	r1, r3, #17
 800a61e:	d436      	bmi.n	800a68e <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a620:	049a      	lsls	r2, r3, #18
 800a622:	d407      	bmi.n	800a634 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a624:	f013 0f08 	tst.w	r3, #8
 800a628:	bf0c      	ite	eq
 800a62a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a62e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a632:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800a634:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800a638:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a63a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a63c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a63e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a642:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a644:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a648:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a64a:	2040      	movs	r0, #64	@ 0x40
 800a64c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a64e:	2080      	movs	r0, #128	@ 0x80
 800a650:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a652:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a656:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a658:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a65c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a65e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a662:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a664:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a668:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a66a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a66e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a670:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a674:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a676:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a67a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a67c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a680:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800a682:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a686:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a688:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a68c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a68e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a692:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a694:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a698:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a69a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a69e:	4770      	bx	lr
 800a6a0:	2400000c 	.word	0x2400000c
 800a6a4:	10624dd3 	.word	0x10624dd3
 800a6a8:	fffee0c0 	.word	0xfffee0c0
 800a6ac:	00200045 	.word	0x00200045
 800a6b0:	002000c5 	.word	0x002000c5
 800a6b4:	fdffe008 	.word	0xfdffe008

0800a6b8 <SDMMC_CmdSendSCR>:
{
 800a6b8:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a6ba:	4a4c      	ldr	r2, [pc, #304]	@ (800a7ec <SDMMC_CmdSendSCR+0x134>)
 800a6bc:	4b4c      	ldr	r3, [pc, #304]	@ (800a7f0 <SDMMC_CmdSendSCR+0x138>)
 800a6be:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6c0:	484c      	ldr	r0, [pc, #304]	@ (800a7f4 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a6c2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6c6:	f241 1333 	movw	r3, #4403	@ 0x1133
{
 800a6ca:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a6cc:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a6ce:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a6d0:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6d2:	68cc      	ldr	r4, [r1, #12]
 800a6d4:	4020      	ands	r0, r4
 800a6d6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a6d8:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a6dc:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6e0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a6e2:	b14a      	cbz	r2, 800a6f8 <SDMMC_CmdSendSCR+0x40>
 800a6e4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a6e6:	4844      	ldr	r0, [pc, #272]	@ (800a7f8 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 800a6e8:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a6ea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a6ec:	4202      	tst	r2, r0
 800a6ee:	d001      	beq.n	800a6f4 <SDMMC_CmdSendSCR+0x3c>
 800a6f0:	0492      	lsls	r2, r2, #18
 800a6f2:	d506      	bpl.n	800a702 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800a6f4:	1c5c      	adds	r4, r3, #1
 800a6f6:	d1f7      	bne.n	800a6e8 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a6f8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a700:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a702:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a704:	075c      	lsls	r4, r3, #29
 800a706:	d43c      	bmi.n	800a782 <SDMMC_CmdSendSCR+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a708:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a70a:	07d8      	lsls	r0, r3, #31
 800a70c:	d407      	bmi.n	800a71e <SDMMC_CmdSendSCR+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a70e:	4b3b      	ldr	r3, [pc, #236]	@ (800a7fc <SDMMC_CmdSendSCR+0x144>)
 800a710:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a712:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b33      	cmp	r3, #51	@ 0x33
 800a718:	d004      	beq.n	800a724 <SDMMC_CmdSendSCR+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a71a:	2001      	movs	r0, #1
 800a71c:	e7ee      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a71e:	2301      	movs	r3, #1
 800a720:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a722:	e7fa      	b.n	800a71a <SDMMC_CmdSendSCR+0x62>
  return (*(__IO uint32_t *) tmp);
 800a724:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a726:	4836      	ldr	r0, [pc, #216]	@ (800a800 <SDMMC_CmdSendSCR+0x148>)
 800a728:	4018      	ands	r0, r3
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d0e6      	beq.n	800a6fc <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a72e:	2b00      	cmp	r3, #0
 800a730:	db2b      	blt.n	800a78a <SDMMC_CmdSendSCR+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a732:	005a      	lsls	r2, r3, #1
 800a734:	d42c      	bmi.n	800a790 <SDMMC_CmdSendSCR+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a736:	009c      	lsls	r4, r3, #2
 800a738:	d42c      	bmi.n	800a794 <SDMMC_CmdSendSCR+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a73a:	00d9      	lsls	r1, r3, #3
 800a73c:	d42c      	bmi.n	800a798 <SDMMC_CmdSendSCR+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a73e:	011a      	lsls	r2, r3, #4
 800a740:	d42d      	bmi.n	800a79e <SDMMC_CmdSendSCR+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a742:	015c      	lsls	r4, r3, #5
 800a744:	d42e      	bmi.n	800a7a4 <SDMMC_CmdSendSCR+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a746:	01d9      	lsls	r1, r3, #7
 800a748:	d42f      	bmi.n	800a7aa <SDMMC_CmdSendSCR+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a74a:	021a      	lsls	r2, r3, #8
 800a74c:	d430      	bmi.n	800a7b0 <SDMMC_CmdSendSCR+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a74e:	025c      	lsls	r4, r3, #9
 800a750:	d431      	bmi.n	800a7b6 <SDMMC_CmdSendSCR+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a752:	0299      	lsls	r1, r3, #10
 800a754:	d43b      	bmi.n	800a7ce <SDMMC_CmdSendSCR+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a756:	02da      	lsls	r2, r3, #11
 800a758:	d436      	bmi.n	800a7c8 <SDMMC_CmdSendSCR+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a75a:	035c      	lsls	r4, r3, #13
 800a75c:	d431      	bmi.n	800a7c2 <SDMMC_CmdSendSCR+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a75e:	0399      	lsls	r1, r3, #14
 800a760:	d42c      	bmi.n	800a7bc <SDMMC_CmdSendSCR+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a762:	03da      	lsls	r2, r3, #15
 800a764:	d43f      	bmi.n	800a7e6 <SDMMC_CmdSendSCR+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a766:	041c      	lsls	r4, r3, #16
 800a768:	d43a      	bmi.n	800a7e0 <SDMMC_CmdSendSCR+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a76a:	0459      	lsls	r1, r3, #17
 800a76c:	d435      	bmi.n	800a7da <SDMMC_CmdSendSCR+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a76e:	049a      	lsls	r2, r3, #18
 800a770:	d430      	bmi.n	800a7d4 <SDMMC_CmdSendSCR+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a772:	f013 0f08 	tst.w	r3, #8
 800a776:	bf0c      	ite	eq
 800a778:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a77c:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800a780:	e7bc      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a782:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a784:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a786:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a788:	e7b8      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a78a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800a78e:	e7b5      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a790:	2040      	movs	r0, #64	@ 0x40
 800a792:	e7b3      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a794:	2080      	movs	r0, #128	@ 0x80
 800a796:	e7b1      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a798:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a79c:	e7ae      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a79e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a7a2:	e7ab      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a7a4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a7a8:	e7a8      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a7aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a7ae:	e7a5      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a7b0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a7b4:	e7a2      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a7b6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a7ba:	e79f      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a7bc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a7c0:	e79c      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a7c2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a7c6:	e799      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800a7c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800a7cc:	e796      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a7ce:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a7d2:	e793      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800a7d4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800a7d8:	e790      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a7da:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a7de:	e78d      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a7e0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a7e4:	e78a      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a7e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a7ea:	e787      	b.n	800a6fc <SDMMC_CmdSendSCR+0x44>
 800a7ec:	2400000c 	.word	0x2400000c
 800a7f0:	10624dd3 	.word	0x10624dd3
 800a7f4:	fffee0c0 	.word	0xfffee0c0
 800a7f8:	00200045 	.word	0x00200045
 800a7fc:	002000c5 	.word	0x002000c5
 800a800:	fdffe008 	.word	0xfdffe008

0800a804 <SDMMC_CmdSendCID>:
{
 800a804:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a806:	4a1a      	ldr	r2, [pc, #104]	@ (800a870 <SDMMC_CmdSendCID+0x6c>)
 800a808:	4b1a      	ldr	r3, [pc, #104]	@ (800a874 <SDMMC_CmdSendCID+0x70>)
 800a80a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a80c:	481a      	ldr	r0, [pc, #104]	@ (800a878 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a80e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a812:	f241 3302 	movw	r3, #4866	@ 0x1302
{
 800a816:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a818:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a81a:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800a81c:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a81e:	68cc      	ldr	r4, [r1, #12]
 800a820:	4020      	ands	r0, r4
 800a822:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a824:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a828:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a82c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a82e:	b14a      	cbz	r2, 800a844 <SDMMC_CmdSendCID+0x40>
 800a830:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a832:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800a834:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a836:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a83a:	d001      	beq.n	800a840 <SDMMC_CmdSendCID+0x3c>
 800a83c:	0492      	lsls	r2, r2, #18
 800a83e:	d506      	bpl.n	800a84e <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800a840:	1c58      	adds	r0, r3, #1
 800a842:	d1f6      	bne.n	800a832 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a844:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a84c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a84e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800a850:	075b      	lsls	r3, r3, #29
 800a852:	d409      	bmi.n	800a868 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a854:	6b48      	ldr	r0, [r1, #52]	@ 0x34
}
 800a856:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a85a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a85e:	bf14      	ite	ne
 800a860:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a862:	4b06      	ldreq	r3, [pc, #24]	@ (800a87c <SDMMC_CmdSendCID+0x78>)
 800a864:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800a866:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a868:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a86a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a86c:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a86e:	e7eb      	b.n	800a848 <SDMMC_CmdSendCID+0x44>
 800a870:	2400000c 	.word	0x2400000c
 800a874:	10624dd3 	.word	0x10624dd3
 800a878:	fffee0c0 	.word	0xfffee0c0
 800a87c:	002000c5 	.word	0x002000c5

0800a880 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a880:	4a1b      	ldr	r2, [pc, #108]	@ (800a8f0 <SDMMC_CmdSendCSD+0x70>)
{
 800a882:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a884:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f4 <SDMMC_CmdSendCSD+0x74>)
 800a886:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a888:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a88c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a890:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a894:	4818      	ldr	r0, [pc, #96]	@ (800a8f8 <SDMMC_CmdSendCSD+0x78>)
 800a896:	f241 3309 	movw	r3, #4873	@ 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a89a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a89c:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a89e:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a8a2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a8a4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a8a8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a8ac:	1e53      	subs	r3, r2, #1
 800a8ae:	b14a      	cbz	r2, 800a8c4 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800a8b0:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a8b4:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a8b6:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a8ba:	d001      	beq.n	800a8c0 <SDMMC_CmdSendCSD+0x40>
 800a8bc:	0492      	lsls	r2, r2, #18
 800a8be:	d504      	bpl.n	800a8ca <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800a8c0:	1c59      	adds	r1, r3, #1
 800a8c2:	d1f5      	bne.n	800a8b0 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a8c4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a8c8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a8ca:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a8ce:	075b      	lsls	r3, r3, #29
 800a8d0:	d409      	bmi.n	800a8e6 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a8d2:	f8dc 0034 	ldr.w	r0, [ip, #52]	@ 0x34
 800a8d6:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a8da:	bf14      	ite	ne
 800a8dc:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a8de:	4b07      	ldreq	r3, [pc, #28]	@ (800a8fc <SDMMC_CmdSendCSD+0x7c>)
 800a8e0:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800a8e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a8e6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8e8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a8ea:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8ee:	4770      	bx	lr
 800a8f0:	2400000c 	.word	0x2400000c
 800a8f4:	10624dd3 	.word	0x10624dd3
 800a8f8:	fffee0c0 	.word	0xfffee0c0
 800a8fc:	002000c5 	.word	0x002000c5

0800a900 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800a900:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a902:	4a2b      	ldr	r2, [pc, #172]	@ (800a9b0 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800a904:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a906:	6812      	ldr	r2, [r2, #0]
{
 800a908:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a90a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a90c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a90e:	4829      	ldr	r0, [pc, #164]	@ (800a9b4 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a910:	4c29      	ldr	r4, [pc, #164]	@ (800a9b8 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a912:	fba0 0202 	umull	r0, r2, r0, r2
 800a916:	f241 3088 	movw	r0, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a91a:	401c      	ands	r4, r3
 800a91c:	f241 1303 	movw	r3, #4355	@ 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a920:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a922:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a924:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a928:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a92c:	b152      	cbz	r2, 800a944 <SDMMC_CmdSetRelAdd+0x44>
 800a92e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a930:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a934:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a936:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800a93a:	d001      	beq.n	800a940 <SDMMC_CmdSetRelAdd+0x40>
 800a93c:	0492      	lsls	r2, r2, #18
 800a93e:	d506      	bpl.n	800a94e <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800a940:	1c58      	adds	r0, r3, #1
 800a942:	d1f5      	bne.n	800a930 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a944:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800a948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a94e:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a952:	075c      	lsls	r4, r3, #29
 800a954:	d420      	bmi.n	800a998 <SDMMC_CmdSetRelAdd+0x98>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a956:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800a95a:	07d8      	lsls	r0, r3, #31
 800a95c:	d406      	bmi.n	800a96c <SDMMC_CmdSetRelAdd+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800a95e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b03      	cmp	r3, #3
 800a966:	d005      	beq.n	800a974 <SDMMC_CmdSetRelAdd+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a968:	2001      	movs	r0, #1
 800a96a:	e7ed      	b.n	800a948 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a96c:	2301      	movs	r3, #1
 800a96e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a972:	e7f9      	b.n	800a968 <SDMMC_CmdSetRelAdd+0x68>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a974:	4b11      	ldr	r3, [pc, #68]	@ (800a9bc <SDMMC_CmdSetRelAdd+0xbc>)
 800a976:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800a97a:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a97e:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 800a982:	d011      	beq.n	800a9a8 <SDMMC_CmdSetRelAdd+0xa8>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a984:	045a      	lsls	r2, r3, #17
 800a986:	d40c      	bmi.n	800a9a2 <SDMMC_CmdSetRelAdd+0xa2>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a988:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800a98c:	bf0c      	ite	eq
 800a98e:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800a992:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800a996:	e7d7      	b.n	800a948 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a998:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a99a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a99c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9a0:	e7d2      	b.n	800a948 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9a2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a9a6:	e7cf      	b.n	800a948 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a9a8:	0c1b      	lsrs	r3, r3, #16
 800a9aa:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800a9ac:	e7cc      	b.n	800a948 <SDMMC_CmdSetRelAdd+0x48>
 800a9ae:	bf00      	nop
 800a9b0:	2400000c 	.word	0x2400000c
 800a9b4:	10624dd3 	.word	0x10624dd3
 800a9b8:	fffee0c0 	.word	0xfffee0c0
 800a9bc:	002000c5 	.word	0x002000c5

0800a9c0 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a9c0:	4a4f      	ldr	r2, [pc, #316]	@ (800ab00 <SDMMC_CmdSendStatus+0x140>)
{
 800a9c2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a9c4:	4b4f      	ldr	r3, [pc, #316]	@ (800ab04 <SDMMC_CmdSendStatus+0x144>)
 800a9c6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a9c8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a9cc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a9d0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a9d4:	484c      	ldr	r0, [pc, #304]	@ (800ab08 <SDMMC_CmdSendStatus+0x148>)
 800a9d6:	f241 130d 	movw	r3, #4365	@ 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a9da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a9dc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a9de:	f241 3188 	movw	r1, #5000	@ 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a9e2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a9e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a9e8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a9ec:	1e53      	subs	r3, r2, #1
 800a9ee:	b14a      	cbz	r2, 800aa04 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a9f0:	4946      	ldr	r1, [pc, #280]	@ (800ab0c <SDMMC_CmdSendStatus+0x14c>)
    sta_reg = SDMMCx->STA;
 800a9f2:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
    if (count-- == 0U)
 800a9f6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a9f8:	420a      	tst	r2, r1
 800a9fa:	d001      	beq.n	800aa00 <SDMMC_CmdSendStatus+0x40>
 800a9fc:	0492      	lsls	r2, r2, #18
 800a9fe:	d504      	bpl.n	800aa0a <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800aa00:	1c58      	adds	r0, r3, #1
 800aa02:	d1f6      	bne.n	800a9f2 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800aa04:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800aa08:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa0a:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800aa0e:	075b      	lsls	r3, r3, #29
 800aa10:	d443      	bmi.n	800aa9a <SDMMC_CmdSendStatus+0xda>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa12:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 800aa16:	07d8      	lsls	r0, r3, #31
 800aa18:	d409      	bmi.n	800aa2e <SDMMC_CmdSendStatus+0x6e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa1a:	4b3d      	ldr	r3, [pc, #244]	@ (800ab10 <SDMMC_CmdSendStatus+0x150>)
 800aa1c:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa20:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b0d      	cmp	r3, #13
 800aa28:	d005      	beq.n	800aa36 <SDMMC_CmdSendStatus+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa2a:	2001      	movs	r0, #1
 800aa2c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa2e:	2301      	movs	r3, #1
 800aa30:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa34:	e7f9      	b.n	800aa2a <SDMMC_CmdSendStatus+0x6a>
  return (*(__IO uint32_t *) tmp);
 800aa36:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa3a:	4836      	ldr	r0, [pc, #216]	@ (800ab14 <SDMMC_CmdSendStatus+0x154>)
 800aa3c:	4018      	ands	r0, r3
 800aa3e:	b358      	cbz	r0, 800aa98 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	db2f      	blt.n	800aaa4 <SDMMC_CmdSendStatus+0xe4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa44:	0059      	lsls	r1, r3, #1
 800aa46:	d430      	bmi.n	800aaaa <SDMMC_CmdSendStatus+0xea>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa48:	009a      	lsls	r2, r3, #2
 800aa4a:	d430      	bmi.n	800aaae <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aa4c:	00d9      	lsls	r1, r3, #3
 800aa4e:	d430      	bmi.n	800aab2 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aa50:	011a      	lsls	r2, r3, #4
 800aa52:	d431      	bmi.n	800aab8 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aa54:	0159      	lsls	r1, r3, #5
 800aa56:	d432      	bmi.n	800aabe <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aa58:	01da      	lsls	r2, r3, #7
 800aa5a:	d433      	bmi.n	800aac4 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aa5c:	0219      	lsls	r1, r3, #8
 800aa5e:	d434      	bmi.n	800aaca <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa60:	025a      	lsls	r2, r3, #9
 800aa62:	d435      	bmi.n	800aad0 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa64:	0299      	lsls	r1, r3, #10
 800aa66:	d43f      	bmi.n	800aae8 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa68:	02da      	lsls	r2, r3, #11
 800aa6a:	d43a      	bmi.n	800aae2 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa6c:	0359      	lsls	r1, r3, #13
 800aa6e:	d435      	bmi.n	800aadc <SDMMC_CmdSendStatus+0x11c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa70:	039a      	lsls	r2, r3, #14
 800aa72:	d430      	bmi.n	800aad6 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa74:	03d9      	lsls	r1, r3, #15
 800aa76:	d440      	bmi.n	800aafa <SDMMC_CmdSendStatus+0x13a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa78:	041a      	lsls	r2, r3, #16
 800aa7a:	d43b      	bmi.n	800aaf4 <SDMMC_CmdSendStatus+0x134>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa7c:	0459      	lsls	r1, r3, #17
 800aa7e:	d436      	bmi.n	800aaee <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa80:	049a      	lsls	r2, r3, #18
 800aa82:	d407      	bmi.n	800aa94 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aa84:	f013 0f08 	tst.w	r3, #8
 800aa88:	bf0c      	ite	eq
 800aa8a:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800aa8e:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800aa92:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800aa94:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
}
 800aa98:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa9a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa9c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa9e:	f8cc 3038 	str.w	r3, [ip, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aaa2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aaa4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800aaa8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aaaa:	2040      	movs	r0, #64	@ 0x40
 800aaac:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aaae:	2080      	movs	r0, #128	@ 0x80
 800aab0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aab2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800aab6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aab8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800aabc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aabe:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800aac2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aac4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800aac8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aaca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800aace:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aad0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800aad4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aad6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800aada:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aadc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800aae0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800aae2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800aae6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aae8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800aaec:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aaee:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800aaf2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aaf4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800aaf8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aafa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800aafe:	4770      	bx	lr
 800ab00:	2400000c 	.word	0x2400000c
 800ab04:	10624dd3 	.word	0x10624dd3
 800ab08:	fffee0c0 	.word	0xfffee0c0
 800ab0c:	00200045 	.word	0x00200045
 800ab10:	002000c5 	.word	0x002000c5
 800ab14:	fdffe008 	.word	0xfdffe008

0800ab18 <SDMMC_CmdStatusRegister>:
{
 800ab18:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ab1a:	4a4c      	ldr	r2, [pc, #304]	@ (800ac4c <SDMMC_CmdStatusRegister+0x134>)
 800ab1c:	4b4c      	ldr	r3, [pc, #304]	@ (800ac50 <SDMMC_CmdStatusRegister+0x138>)
 800ab1e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab20:	484c      	ldr	r0, [pc, #304]	@ (800ac54 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ab22:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab26:	f241 130d 	movw	r3, #4365	@ 0x110d
{
 800ab2a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800ab2c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ab2e:	0a52      	lsrs	r2, r2, #9
  SDMMCx->ARG = Command->Argument;
 800ab30:	608c      	str	r4, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab32:	68cc      	ldr	r4, [r1, #12]
 800ab34:	4020      	ands	r0, r4
 800ab36:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ab38:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ab3c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab40:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800ab42:	b14a      	cbz	r2, 800ab58 <SDMMC_CmdStatusRegister+0x40>
 800ab44:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ab46:	4844      	ldr	r0, [pc, #272]	@ (800ac58 <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 800ab48:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
    if (count-- == 0U)
 800ab4a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ab4c:	4202      	tst	r2, r0
 800ab4e:	d001      	beq.n	800ab54 <SDMMC_CmdStatusRegister+0x3c>
 800ab50:	0492      	lsls	r2, r2, #18
 800ab52:	d506      	bpl.n	800ab62 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800ab54:	1c5c      	adds	r4, r3, #1
 800ab56:	d1f7      	bne.n	800ab48 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800ab58:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800ab5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab60:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab62:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800ab64:	075c      	lsls	r4, r3, #29
 800ab66:	d43c      	bmi.n	800abe2 <SDMMC_CmdStatusRegister+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab68:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800ab6a:	07d8      	lsls	r0, r3, #31
 800ab6c:	d407      	bmi.n	800ab7e <SDMMC_CmdStatusRegister+0x66>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab6e:	4b3b      	ldr	r3, [pc, #236]	@ (800ac5c <SDMMC_CmdStatusRegister+0x144>)
 800ab70:	638b      	str	r3, [r1, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab72:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b0d      	cmp	r3, #13
 800ab78:	d004      	beq.n	800ab84 <SDMMC_CmdStatusRegister+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	e7ee      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab7e:	2301      	movs	r3, #1
 800ab80:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab82:	e7fa      	b.n	800ab7a <SDMMC_CmdStatusRegister+0x62>
  return (*(__IO uint32_t *) tmp);
 800ab84:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab86:	4836      	ldr	r0, [pc, #216]	@ (800ac60 <SDMMC_CmdStatusRegister+0x148>)
 800ab88:	4018      	ands	r0, r3
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d0e6      	beq.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	db2b      	blt.n	800abea <SDMMC_CmdStatusRegister+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab92:	005a      	lsls	r2, r3, #1
 800ab94:	d42c      	bmi.n	800abf0 <SDMMC_CmdStatusRegister+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ab96:	009c      	lsls	r4, r3, #2
 800ab98:	d42c      	bmi.n	800abf4 <SDMMC_CmdStatusRegister+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ab9a:	00d9      	lsls	r1, r3, #3
 800ab9c:	d42c      	bmi.n	800abf8 <SDMMC_CmdStatusRegister+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab9e:	011a      	lsls	r2, r3, #4
 800aba0:	d42d      	bmi.n	800abfe <SDMMC_CmdStatusRegister+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aba2:	015c      	lsls	r4, r3, #5
 800aba4:	d42e      	bmi.n	800ac04 <SDMMC_CmdStatusRegister+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aba6:	01d9      	lsls	r1, r3, #7
 800aba8:	d42f      	bmi.n	800ac0a <SDMMC_CmdStatusRegister+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800abaa:	021a      	lsls	r2, r3, #8
 800abac:	d430      	bmi.n	800ac10 <SDMMC_CmdStatusRegister+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800abae:	025c      	lsls	r4, r3, #9
 800abb0:	d431      	bmi.n	800ac16 <SDMMC_CmdStatusRegister+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800abb2:	0299      	lsls	r1, r3, #10
 800abb4:	d43b      	bmi.n	800ac2e <SDMMC_CmdStatusRegister+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800abb6:	02da      	lsls	r2, r3, #11
 800abb8:	d436      	bmi.n	800ac28 <SDMMC_CmdStatusRegister+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800abba:	035c      	lsls	r4, r3, #13
 800abbc:	d431      	bmi.n	800ac22 <SDMMC_CmdStatusRegister+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800abbe:	0399      	lsls	r1, r3, #14
 800abc0:	d42c      	bmi.n	800ac1c <SDMMC_CmdStatusRegister+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800abc2:	03da      	lsls	r2, r3, #15
 800abc4:	d43f      	bmi.n	800ac46 <SDMMC_CmdStatusRegister+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800abc6:	041c      	lsls	r4, r3, #16
 800abc8:	d43a      	bmi.n	800ac40 <SDMMC_CmdStatusRegister+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800abca:	0459      	lsls	r1, r3, #17
 800abcc:	d435      	bmi.n	800ac3a <SDMMC_CmdStatusRegister+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800abce:	049a      	lsls	r2, r3, #18
 800abd0:	d430      	bmi.n	800ac34 <SDMMC_CmdStatusRegister+0x11c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abd2:	f013 0f08 	tst.w	r3, #8
 800abd6:	bf0c      	ite	eq
 800abd8:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 800abdc:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 800abe0:	e7bc      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abe2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abe4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abe6:	638b      	str	r3, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abe8:	e7b8      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800abea:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800abee:	e7b5      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800abf0:	2040      	movs	r0, #64	@ 0x40
 800abf2:	e7b3      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800abf4:	2080      	movs	r0, #128	@ 0x80
 800abf6:	e7b1      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800abf8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800abfc:	e7ae      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800abfe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ac02:	e7ab      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ac08:	e7a8      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac0a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ac0e:	e7a5      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac10:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ac14:	e7a2      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac16:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ac1a:	e79f      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac1c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800ac20:	e79c      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac22:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800ac26:	e799      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800ac28:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ac2c:	e796      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac2e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ac32:	e793      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800ac34:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800ac38:	e790      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac3a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ac3e:	e78d      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac40:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ac44:	e78a      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac46:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ac4a:	e787      	b.n	800ab5c <SDMMC_CmdStatusRegister+0x44>
 800ac4c:	2400000c 	.word	0x2400000c
 800ac50:	10624dd3 	.word	0x10624dd3
 800ac54:	fffee0c0 	.word	0xfffee0c0
 800ac58:	00200045 	.word	0x00200045
 800ac5c:	002000c5 	.word	0x002000c5
 800ac60:	fdffe008 	.word	0xfdffe008

0800ac64 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800ac64:	2000      	movs	r0, #0
 800ac66:	4770      	bx	lr

0800ac68 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	4694      	mov	ip, r2
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac70:	460a      	mov	r2, r1
 800ac72:	4663      	mov	r3, ip
 800ac74:	4601      	mov	r1, r0
 800ac76:	9400      	str	r4, [sp, #0]
 800ac78:	4803      	ldr	r0, [pc, #12]	@ (800ac88 <BSP_SD_ReadBlocks+0x20>)
 800ac7a:	f7fd fd73 	bl	8008764 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ac7e:	3800      	subs	r0, #0
 800ac80:	bf18      	it	ne
 800ac82:	2001      	movne	r0, #1
 800ac84:	b002      	add	sp, #8
 800ac86:	bd10      	pop	{r4, pc}
 800ac88:	24000228 	.word	0x24000228

0800ac8c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	4694      	mov	ip, r2
 800ac90:	b082      	sub	sp, #8
 800ac92:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ac94:	460a      	mov	r2, r1
 800ac96:	4663      	mov	r3, ip
 800ac98:	4601      	mov	r1, r0
 800ac9a:	9400      	str	r4, [sp, #0]
 800ac9c:	4803      	ldr	r0, [pc, #12]	@ (800acac <BSP_SD_WriteBlocks+0x20>)
 800ac9e:	f7fd fe45 	bl	800892c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800aca2:	3800      	subs	r0, #0
 800aca4:	bf18      	it	ne
 800aca6:	2001      	movne	r0, #1
 800aca8:	b002      	add	sp, #8
 800acaa:	bd10      	pop	{r4, pc}
 800acac:	24000228 	.word	0x24000228

0800acb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800acb0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800acb2:	4803      	ldr	r0, [pc, #12]	@ (800acc0 <BSP_SD_GetCardState+0x10>)
 800acb4:	f7fe fb26 	bl	8009304 <HAL_SD_GetCardState>
}
 800acb8:	3804      	subs	r0, #4
 800acba:	bf18      	it	ne
 800acbc:	2001      	movne	r0, #1
 800acbe:	bd08      	pop	{r3, pc}
 800acc0:	24000228 	.word	0x24000228

0800acc4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800acc4:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800acc6:	4801      	ldr	r0, [pc, #4]	@ (800accc <BSP_SD_GetCardInfo+0x8>)
 800acc8:	f7fe b9dc 	b.w	8009084 <HAL_SD_GetCardInfo>
 800accc:	24000228 	.word	0x24000228

0800acd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800acd0:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800acd2:	2301      	movs	r3, #1
{
 800acd4:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800acd6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800acda:	f000 f821 	bl	800ad20 <BSP_PlatformIsDetected>
 800acde:	b908      	cbnz	r0, 800ace4 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800ace0:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800ace4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800ace8:	b003      	add	sp, #12
 800acea:	f85d fb04 	ldr.w	pc, [sp], #4
 800acee:	bf00      	nop

0800acf0 <BSP_SD_Init>:
{
 800acf0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800acf2:	f7ff ffed 	bl	800acd0 <BSP_SD_IsDetected>
 800acf6:	2801      	cmp	r0, #1
 800acf8:	d001      	beq.n	800acfe <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800acfa:	2002      	movs	r0, #2
}
 800acfc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800acfe:	4807      	ldr	r0, [pc, #28]	@ (800ad1c <BSP_SD_Init+0x2c>)
 800ad00:	f7fe fa9e 	bl	8009240 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d1f9      	bne.n	800acfc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ad08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ad0c:	4803      	ldr	r0, [pc, #12]	@ (800ad1c <BSP_SD_Init+0x2c>)
 800ad0e:	f7fe f9cd 	bl	80090ac <HAL_SD_ConfigWideBusOperation>
 800ad12:	3800      	subs	r0, #0
 800ad14:	bf18      	it	ne
 800ad16:	2001      	movne	r0, #1
}
 800ad18:	bd08      	pop	{r3, pc}
 800ad1a:	bf00      	nop
 800ad1c:	24000228 	.word	0x24000228

0800ad20 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ad24:	4803      	ldr	r0, [pc, #12]	@ (800ad34 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800ad26:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad28:	f7f9 fc62 	bl	80045f0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800ad2c:	fab0 f080 	clz	r0, r0
 800ad30:	0940      	lsrs	r0, r0, #5
 800ad32:	bd08      	pop	{r3, pc}
 800ad34:	58020000 	.word	0x58020000

0800ad38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ad38:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800ad3a:	4c0a      	ldr	r4, [pc, #40]	@ (800ad64 <SD_initialize+0x2c>)
 800ad3c:	2501      	movs	r5, #1
 800ad3e:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ad40:	f7ff ffd6 	bl	800acf0 <BSP_SD_Init>
 800ad44:	b108      	cbz	r0, 800ad4a <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ad46:	7820      	ldrb	r0, [r4, #0]
}
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800ad4a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ad4c:	f7ff ffb0 	bl	800acb0 <BSP_SD_GetCardState>
 800ad50:	b918      	cbnz	r0, 800ad5a <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800ad52:	7823      	ldrb	r3, [r4, #0]
 800ad54:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ad58:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ad5a:	7823      	ldrb	r3, [r4, #0]
 800ad5c:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800ad5e:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ad60:	7820      	ldrb	r0, [r4, #0]
}
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	24000018 	.word	0x24000018

0800ad68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ad68:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4c05      	ldr	r4, [pc, #20]	@ (800ad84 <SD_status+0x1c>)
 800ad6e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ad70:	f7ff ff9e 	bl	800acb0 <BSP_SD_GetCardState>
 800ad74:	b918      	cbnz	r0, 800ad7e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800ad76:	7823      	ldrb	r3, [r4, #0]
 800ad78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ad7c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ad7e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	bf00      	nop
 800ad84:	24000018 	.word	0x24000018

0800ad88 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad88:	4b16      	ldr	r3, [pc, #88]	@ (800ade4 <SD_ioctl+0x5c>)
{
 800ad8a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad8c:	7818      	ldrb	r0, [r3, #0]
{
 800ad8e:	b08b      	sub	sp, #44	@ 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ad90:	f010 0401 	ands.w	r4, r0, #1
 800ad94:	d106      	bne.n	800ada4 <SD_ioctl+0x1c>
 800ad96:	4615      	mov	r5, r2

  switch (cmd)
 800ad98:	2903      	cmp	r1, #3
 800ad9a:	d820      	bhi.n	800adde <SD_ioctl+0x56>
 800ad9c:	e8df f001 	tbb	[pc, r1]
 800ada0:	06170f03 	.word	0x06170f03
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ada4:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ada6:	4620      	mov	r0, r4
 800ada8:	b00b      	add	sp, #44	@ 0x2c
 800adaa:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800adac:	a801      	add	r0, sp, #4
 800adae:	f7ff ff89 	bl	800acc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800adb2:	9b08      	ldr	r3, [sp, #32]
}
 800adb4:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800adb6:	0a5b      	lsrs	r3, r3, #9
 800adb8:	602b      	str	r3, [r5, #0]
}
 800adba:	b00b      	add	sp, #44	@ 0x2c
 800adbc:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800adbe:	a801      	add	r0, sp, #4
 800adc0:	f7ff ff80 	bl	800acc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800adc4:	9b07      	ldr	r3, [sp, #28]
}
 800adc6:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800adc8:	602b      	str	r3, [r5, #0]
}
 800adca:	b00b      	add	sp, #44	@ 0x2c
 800adcc:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800adce:	a801      	add	r0, sp, #4
 800add0:	f7ff ff78 	bl	800acc4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800add4:	9b08      	ldr	r3, [sp, #32]
}
 800add6:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800add8:	802b      	strh	r3, [r5, #0]
}
 800adda:	b00b      	add	sp, #44	@ 0x2c
 800addc:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800adde:	2404      	movs	r4, #4
 800ade0:	e7e1      	b.n	800ada6 <SD_ioctl+0x1e>
 800ade2:	bf00      	nop
 800ade4:	24000018 	.word	0x24000018

0800ade8 <SD_read>:
{
 800ade8:	b508      	push	{r3, lr}
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	f7ff ff38 	bl	800ac68 <BSP_SD_ReadBlocks>
 800adf8:	b108      	cbz	r0, 800adfe <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800adfa:	2001      	movs	r0, #1
}
 800adfc:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800adfe:	f7ff ff57 	bl	800acb0 <BSP_SD_GetCardState>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d0fa      	beq.n	800adfc <SD_read+0x14>
 800ae06:	f7ff ff53 	bl	800acb0 <BSP_SD_GetCardState>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d1f7      	bne.n	800adfe <SD_read+0x16>
 800ae0e:	e7f5      	b.n	800adfc <SD_read+0x14>

0800ae10 <SD_write>:
{
 800ae10:	b508      	push	{r3, lr}
 800ae12:	4608      	mov	r0, r1
 800ae14:	4611      	mov	r1, r2
 800ae16:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ae18:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1c:	f7ff ff36 	bl	800ac8c <BSP_SD_WriteBlocks>
 800ae20:	b108      	cbz	r0, 800ae26 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800ae22:	2001      	movs	r0, #1
}
 800ae24:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ae26:	f7ff ff43 	bl	800acb0 <BSP_SD_GetCardState>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d0fa      	beq.n	800ae24 <SD_write+0x14>
 800ae2e:	f7ff ff3f 	bl	800acb0 <BSP_SD_GetCardState>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1f7      	bne.n	800ae26 <SD_write+0x16>
 800ae36:	e7f5      	b.n	800ae24 <SD_write+0x14>

0800ae38 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae38:	4b03      	ldr	r3, [pc, #12]	@ (800ae48 <disk_status+0x10>)
 800ae3a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800ae3e:	4403      	add	r3, r0
 800ae40:	6852      	ldr	r2, [r2, #4]
 800ae42:	7a18      	ldrb	r0, [r3, #8]
 800ae44:	6853      	ldr	r3, [r2, #4]
 800ae46:	4718      	bx	r3
 800ae48:	240b6a08 	.word	0x240b6a08

0800ae4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ae4c:	b538      	push	{r3, r4, r5, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800ae4e:	4d09      	ldr	r5, [pc, #36]	@ (800ae74 <disk_initialize+0x28>)
 800ae50:	5c2b      	ldrb	r3, [r5, r0]
 800ae52:	b10b      	cbz	r3, 800ae58 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 800ae54:	2000      	movs	r0, #0
    {
      disk.is_initialized[pdrv] = 1;
    }
  }
  return stat;
}
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ae58:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800ae5c:	182b      	adds	r3, r5, r0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	6852      	ldr	r2, [r2, #4]
 800ae62:	7a18      	ldrb	r0, [r3, #8]
 800ae64:	6813      	ldr	r3, [r2, #0]
 800ae66:	4798      	blx	r3
    if(stat == RES_OK)
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d1f4      	bne.n	800ae56 <disk_initialize+0xa>
      disk.is_initialized[pdrv] = 1;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	552b      	strb	r3, [r5, r4]
 800ae70:	e7f0      	b.n	800ae54 <disk_initialize+0x8>
 800ae72:	bf00      	nop
 800ae74:	240b6a08 	.word	0x240b6a08

0800ae78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ae78:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ae7a:	4c05      	ldr	r4, [pc, #20]	@ (800ae90 <disk_read+0x18>)
 800ae7c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ae80:	4404      	add	r4, r0
 800ae82:	686d      	ldr	r5, [r5, #4]
 800ae84:	7a20      	ldrb	r0, [r4, #8]
 800ae86:	68ac      	ldr	r4, [r5, #8]
 800ae88:	46a4      	mov	ip, r4
  return res;
}
 800ae8a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ae8c:	4760      	bx	ip
 800ae8e:	bf00      	nop
 800ae90:	240b6a08 	.word	0x240b6a08

0800ae94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ae94:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ae96:	4c05      	ldr	r4, [pc, #20]	@ (800aeac <disk_write+0x18>)
 800ae98:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ae9c:	4404      	add	r4, r0
 800ae9e:	686d      	ldr	r5, [r5, #4]
 800aea0:	7a20      	ldrb	r0, [r4, #8]
 800aea2:	68ec      	ldr	r4, [r5, #12]
 800aea4:	46a4      	mov	ip, r4
  return res;
}
 800aea6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aea8:	4760      	bx	ip
 800aeaa:	bf00      	nop
 800aeac:	240b6a08 	.word	0x240b6a08

0800aeb0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aeb0:	4b04      	ldr	r3, [pc, #16]	@ (800aec4 <disk_ioctl+0x14>)
 800aeb2:	eb03 0c00 	add.w	ip, r3, r0
 800aeb6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	4718      	bx	r3
 800aec4:	240b6a08 	.word	0x240b6a08

0800aec8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aec8:	4602      	mov	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800aeca:	4b28      	ldr	r3, [pc, #160]	@ (800af6c <inc_lock+0xa4>)
{
 800aecc:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800aece:	6818      	ldr	r0, [r3, #0]
 800aed0:	6814      	ldr	r4, [r2, #0]
 800aed2:	4284      	cmp	r4, r0
 800aed4:	d022      	beq.n	800af1c <inc_lock+0x54>
 800aed6:	691d      	ldr	r5, [r3, #16]
 800aed8:	42a5      	cmp	r5, r4
 800aeda:	d005      	beq.n	800aee8 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aedc:	b370      	cbz	r0, 800af3c <inc_lock+0x74>
 800aede:	2d00      	cmp	r5, #0
 800aee0:	d040      	beq.n	800af64 <inc_lock+0x9c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aee2:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800aee4:	bcf0      	pop	{r4, r5, r6, r7}
 800aee6:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800aee8:	695e      	ldr	r6, [r3, #20]
 800aeea:	6897      	ldr	r7, [r2, #8]
 800aeec:	42be      	cmp	r6, r7
 800aeee:	d1f5      	bne.n	800aedc <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800aef0:	699e      	ldr	r6, [r3, #24]
 800aef2:	6957      	ldr	r7, [r2, #20]
 800aef4:	42be      	cmp	r6, r7
 800aef6:	d1f1      	bne.n	800aedc <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aef8:	f04f 0c01 	mov.w	ip, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aefc:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800af00:	ea4f 150c 	mov.w	r5, ip, lsl #4
 800af04:	8992      	ldrh	r2, [r2, #12]
 800af06:	b1a1      	cbz	r1, 800af32 <inc_lock+0x6a>
 800af08:	2a00      	cmp	r2, #0
 800af0a:	d1ea      	bne.n	800aee2 <inc_lock+0x1a>
	return i + 1;
 800af0c:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af14:	442b      	add	r3, r5
}
 800af16:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af18:	819a      	strh	r2, [r3, #12]
}
 800af1a:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800af1c:	6895      	ldr	r5, [r2, #8]
 800af1e:	685e      	ldr	r6, [r3, #4]
 800af20:	42ae      	cmp	r6, r5
 800af22:	d1d8      	bne.n	800aed6 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800af24:	6955      	ldr	r5, [r2, #20]
 800af26:	689e      	ldr	r6, [r3, #8]
 800af28:	42ae      	cmp	r6, r5
 800af2a:	d1d4      	bne.n	800aed6 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af2c:	f04f 0c00 	mov.w	ip, #0
 800af30:	e7e4      	b.n	800aefc <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af32:	3201      	adds	r2, #1
	return i + 1;
 800af34:	f10c 0001 	add.w	r0, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af38:	b292      	uxth	r2, r2
 800af3a:	e7eb      	b.n	800af14 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af3c:	4684      	mov	ip, r0
 800af3e:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800af40:	ea4f 150c 	mov.w	r5, ip, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af44:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800af46:	eb03 110c 	add.w	r1, r3, ip, lsl #4
 800af4a:	515c      	str	r4, [r3, r5]
		Files[i].clu = dp->obj.sclust;
 800af4c:	6894      	ldr	r4, [r2, #8]
 800af4e:	6952      	ldr	r2, [r2, #20]
 800af50:	e9c1 4201 	strd	r4, r2, [r1, #4]
		Files[i].ctr = 0;
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	818a      	strh	r2, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af5a:	bf14      	ite	ne
 800af5c:	f44f 7280 	movne.w	r2, #256	@ 0x100
 800af60:	2201      	moveq	r2, #1
 800af62:	e7d7      	b.n	800af14 <inc_lock+0x4c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af64:	2002      	movs	r0, #2
 800af66:	f04f 0c01 	mov.w	ip, #1
 800af6a:	e7e9      	b.n	800af40 <inc_lock+0x78>
 800af6c:	240b69e0 	.word	0x240b69e0

0800af70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af70:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af72:	f04f 36ff 	mov.w	r6, #4294967295
 800af76:	2300      	movs	r3, #0
{
 800af78:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800af7a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af7c:	70c3      	strb	r3, [r0, #3]
 800af7e:	62c6      	str	r6, [r0, #44]	@ 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800af80:	d122      	bne.n	800afc8 <check_fs+0x58>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af82:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800af86:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d11a      	bne.n	800afc4 <check_fs+0x54>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af8e:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800af92:	2be9      	cmp	r3, #233	@ 0xe9
 800af94:	d007      	beq.n	800afa6 <check_fs+0x36>
 800af96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800af98:	4a13      	ldr	r2, [pc, #76]	@ (800afe8 <check_fs+0x78>)
 800af9a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d001      	beq.n	800afa6 <check_fs+0x36>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800afa2:	2002      	movs	r0, #2
}
 800afa4:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800afa6:	f8d4 3066 	ldr.w	r3, [r4, #102]	@ 0x66
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afaa:	4a10      	ldr	r2, [pc, #64]	@ (800afec <check_fs+0x7c>)
 800afac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d017      	beq.n	800afe4 <check_fs+0x74>
	rv = rv << 8 | ptr[0];
 800afb4:	f8d4 0082 	ldr.w	r0, [r4, #130]	@ 0x82
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800afb8:	4b0d      	ldr	r3, [pc, #52]	@ (800aff0 <check_fs+0x80>)
 800afba:	1ac0      	subs	r0, r0, r3
 800afbc:	bf18      	it	ne
 800afbe:	2001      	movne	r0, #1
 800afc0:	0040      	lsls	r0, r0, #1
}
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800afc4:	2003      	movs	r0, #3
}
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800afc8:	460d      	mov	r5, r1
 800afca:	460a      	mov	r2, r1
 800afcc:	2301      	movs	r3, #1
 800afce:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 800afd2:	7840      	ldrb	r0, [r0, #1]
 800afd4:	f7ff ff50 	bl	800ae78 <disk_read>
 800afd8:	b110      	cbz	r0, 800afe0 <check_fs+0x70>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800afda:	2004      	movs	r0, #4
			fs->winsect = sector;
 800afdc:	62e6      	str	r6, [r4, #44]	@ 0x2c
}
 800afde:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800afe0:	62e5      	str	r5, [r4, #44]	@ 0x2c
	return res;
 800afe2:	e7ce      	b.n	800af82 <check_fs+0x12>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afe4:	2000      	movs	r0, #0
}
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	009000eb 	.word	0x009000eb
 800afec:	00544146 	.word	0x00544146
 800aff0:	33544146 	.word	0x33544146

0800aff4 <sync_fs>:
{
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aff6:	78c3      	ldrb	r3, [r0, #3]
{
 800aff8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800affa:	b95b      	cbnz	r3, 800b014 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800affc:	7823      	ldrb	r3, [r4, #0]
 800affe:	2b03      	cmp	r3, #3
 800b000:	d02a      	beq.n	800b058 <sync_fs+0x64>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b002:	2200      	movs	r2, #0
 800b004:	7860      	ldrb	r0, [r4, #1]
 800b006:	4611      	mov	r1, r2
 800b008:	f7ff ff52 	bl	800aeb0 <disk_ioctl>
 800b00c:	3800      	subs	r0, #0
 800b00e:	bf18      	it	ne
 800b010:	2001      	movne	r0, #1
}
 800b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800b014:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b016:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 800b01a:	2301      	movs	r3, #1
 800b01c:	7840      	ldrb	r0, [r0, #1]
 800b01e:	462a      	mov	r2, r5
 800b020:	4639      	mov	r1, r7
 800b022:	f7ff ff37 	bl	800ae94 <disk_write>
 800b026:	b9a8      	cbnz	r0, 800b054 <sync_fs+0x60>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b028:	6a22      	ldr	r2, [r4, #32]
 800b02a:	69a3      	ldr	r3, [r4, #24]
 800b02c:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800b02e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b030:	429a      	cmp	r2, r3
 800b032:	d2e3      	bcs.n	800affc <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b034:	78a6      	ldrb	r6, [r4, #2]
 800b036:	2e01      	cmp	r6, #1
 800b038:	d801      	bhi.n	800b03e <sync_fs+0x4a>
 800b03a:	e7df      	b.n	800affc <sync_fs+0x8>
					wsect += fs->fsize;
 800b03c:	69a3      	ldr	r3, [r4, #24]
 800b03e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b040:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800b042:	2301      	movs	r3, #1
 800b044:	4639      	mov	r1, r7
 800b046:	462a      	mov	r2, r5
 800b048:	7860      	ldrb	r0, [r4, #1]
 800b04a:	f7ff ff23 	bl	800ae94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b04e:	2e01      	cmp	r6, #1
 800b050:	d1f4      	bne.n	800b03c <sync_fs+0x48>
 800b052:	e7d3      	b.n	800affc <sync_fs+0x8>
			res = FR_DISK_ERR;
 800b054:	2001      	movs	r0, #1
}
 800b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b058:	7925      	ldrb	r5, [r4, #4]
 800b05a:	2d01      	cmp	r5, #1
 800b05c:	d1d1      	bne.n	800b002 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800b05e:	f104 0630 	add.w	r6, r4, #48	@ 0x30
		*d++ = (BYTE)val;
 800b062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b066:	2100      	movs	r1, #0
 800b068:	4630      	mov	r0, r6
 800b06a:	f001 fda1 	bl	800cbb0 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800b06e:	480f      	ldr	r0, [pc, #60]	@ (800b0ac <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800b070:	f64a 2355 	movw	r3, #43605	@ 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800b074:	6320      	str	r0, [r4, #48]	@ 0x30
 800b076:	f100 50ff 	add.w	r0, r0, #534773760	@ 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800b07a:	f8a4 322e 	strh.w	r3, [r4, #558]	@ 0x22e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b07e:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800b080:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 800b084:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b088:	3020      	adds	r0, #32
 800b08a:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
			fs->winsect = fs->volbase + 1;
 800b08e:	69e2      	ldr	r2, [r4, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800b090:	f8c4 121c 	str.w	r1, [r4, #540]	@ 0x21c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b094:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800b096:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800b098:	f8c4 0214 	str.w	r0, [r4, #532]	@ 0x214
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b09c:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800b09e:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b0a0:	f7ff fef8 	bl	800ae94 <disk_write>
			fs->fsi_flag = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	7123      	strb	r3, [r4, #4]
 800b0a8:	e7ab      	b.n	800b002 <sync_fs+0xe>
 800b0aa:	bf00      	nop
 800b0ac:	41615252 	.word	0x41615252

0800b0b0 <move_window>:
{
 800b0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0b4:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 800b0b6:	428e      	cmp	r6, r1
 800b0b8:	d102      	bne.n	800b0c0 <move_window+0x10>
	FRESULT res = FR_OK;
 800b0ba:	2000      	movs	r0, #0
}
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	460d      	mov	r5, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b0c4:	7840      	ldrb	r0, [r0, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b0c6:	78e3      	ldrb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b0c8:	f104 0730 	add.w	r7, r4, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b0cc:	b95b      	cbnz	r3, 800b0e6 <move_window+0x36>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	f7ff fed0 	bl	800ae78 <disk_read>
 800b0d8:	b110      	cbz	r0, 800b0e0 <move_window+0x30>
				res = FR_DISK_ERR;
 800b0da:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0dc:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800b0e0:	62e5      	str	r5, [r4, #44]	@ 0x2c
}
 800b0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7ff fed2 	bl	800ae94 <disk_write>
 800b0f0:	b9d0      	cbnz	r0, 800b128 <move_window+0x78>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b0f2:	6a22      	ldr	r2, [r4, #32]
 800b0f4:	69a3      	ldr	r3, [r4, #24]
 800b0f6:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800b0f8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d212      	bcs.n	800b124 <move_window+0x74>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0fe:	f894 8002 	ldrb.w	r8, [r4, #2]
 800b102:	f1b8 0f01 	cmp.w	r8, #1
 800b106:	d801      	bhi.n	800b10c <move_window+0x5c>
 800b108:	e00c      	b.n	800b124 <move_window+0x74>
					wsect += fs->fsize;
 800b10a:	69a3      	ldr	r3, [r4, #24]
 800b10c:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b10e:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800b112:	2301      	movs	r3, #1
 800b114:	4639      	mov	r1, r7
 800b116:	4632      	mov	r2, r6
 800b118:	7860      	ldrb	r0, [r4, #1]
 800b11a:	f7ff febb 	bl	800ae94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b11e:	f1b8 0f01 	cmp.w	r8, #1
 800b122:	d1f2      	bne.n	800b10a <move_window+0x5a>
 800b124:	7860      	ldrb	r0, [r4, #1]
 800b126:	e7d2      	b.n	800b0ce <move_window+0x1e>
			res = FR_DISK_ERR;
 800b128:	2001      	movs	r0, #1
 800b12a:	e7c7      	b.n	800b0bc <move_window+0xc>

0800b12c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b130:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 800b132:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800b134:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800b136:	b18c      	cbz	r4, 800b15c <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b138:	7825      	ldrb	r5, [r4, #0]
 800b13a:	2d20      	cmp	r5, #32
 800b13c:	d911      	bls.n	800b162 <find_volume+0x36>
 800b13e:	2d3a      	cmp	r5, #58	@ 0x3a
 800b140:	d00f      	beq.n	800b162 <find_volume+0x36>
 800b142:	46a4      	mov	ip, r4
 800b144:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800b148:	2b20      	cmp	r3, #32
 800b14a:	d90c      	bls.n	800b166 <find_volume+0x3a>
 800b14c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b14e:	d1f9      	bne.n	800b144 <find_volume+0x18>
			i = *tp++ - '0';
 800b150:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b152:	45a4      	cmp	ip, r4
 800b154:	d102      	bne.n	800b15c <find_volume+0x30>
 800b156:	2d30      	cmp	r5, #48	@ 0x30
 800b158:	f000 80e1 	beq.w	800b31e <find_volume+0x1f2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800b15c:	200b      	movs	r0, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800b15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b162:	462b      	mov	r3, r5
 800b164:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b166:	2b3a      	cmp	r3, #58	@ 0x3a
 800b168:	d0f2      	beq.n	800b150 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b16a:	4ba1      	ldr	r3, [pc, #644]	@ (800b3f0 <find_volume+0x2c4>)
 800b16c:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b16e:	2c00      	cmp	r4, #0
 800b170:	f000 80c6 	beq.w	800b300 <find_volume+0x1d4>
	*rfs = fs;							/* Return pointer to the file system object */
 800b174:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b176:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b17a:	7823      	ldrb	r3, [r4, #0]
 800b17c:	b153      	cbz	r3, 800b194 <find_volume+0x68>
		stat = disk_status(fs->drv);
 800b17e:	7860      	ldrb	r0, [r4, #1]
 800b180:	f7ff fe5a 	bl	800ae38 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b184:	07c3      	lsls	r3, r0, #31
 800b186:	d405      	bmi.n	800b194 <find_volume+0x68>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b188:	b115      	cbz	r5, 800b190 <find_volume+0x64>
 800b18a:	0747      	lsls	r7, r0, #29
 800b18c:	f100 80b5 	bmi.w	800b2fa <find_volume+0x1ce>
			return FR_OK;				/* The file system object is valid */
 800b190:	2000      	movs	r0, #0
 800b192:	e08d      	b.n	800b2b0 <find_volume+0x184>
	fs->fs_type = 0;					/* Clear the file system object */
 800b194:	2000      	movs	r0, #0
 800b196:	8020      	strh	r0, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b198:	f7ff fe58 	bl	800ae4c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b19c:	07c6      	lsls	r6, r0, #31
 800b19e:	f100 8089 	bmi.w	800b2b4 <find_volume+0x188>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b1a2:	b115      	cbz	r5, 800b1aa <find_volume+0x7e>
 800b1a4:	0745      	lsls	r5, r0, #29
 800b1a6:	f100 80a8 	bmi.w	800b2fa <find_volume+0x1ce>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7ff fedf 	bl	800af70 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b1b2:	2802      	cmp	r0, #2
 800b1b4:	f000 8081 	beq.w	800b2ba <find_volume+0x18e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1b8:	2804      	cmp	r0, #4
 800b1ba:	f000 80ac 	beq.w	800b316 <find_volume+0x1ea>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b1be:	2801      	cmp	r0, #1
 800b1c0:	d875      	bhi.n	800b2ae <find_volume+0x182>
 800b1c2:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b1c4:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 800b1c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1cc:	d16f      	bne.n	800b2ae <find_volume+0x182>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b1ce:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b1d2:	b901      	cbnz	r1, 800b1d6 <find_volume+0xaa>
	rv = rv << 8 | ptr[0];
 800b1d4:	6d61      	ldr	r1, [r4, #84]	@ 0x54
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b1d6:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 800b1da:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1dc:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b1de:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d864      	bhi.n	800b2ae <find_volume+0x182>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1e4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800b1e8:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d05f      	beq.n	800b2ae <find_volume+0x182>
 800b1ee:	1e58      	subs	r0, r3, #1
 800b1f0:	4218      	tst	r0, r3
 800b1f2:	d15c      	bne.n	800b2ae <find_volume+0x182>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b1f4:	f8b4 7041 	ldrh.w	r7, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b1f8:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b1fa:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b1fc:	d157      	bne.n	800b2ae <find_volume+0x182>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b1fe:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b202:	b900      	cbnz	r0, 800b206 <find_volume+0xda>
	rv = rv << 8 | ptr[0];
 800b204:	6d20      	ldr	r0, [r4, #80]	@ 0x50
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b206:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b20a:	f1bc 0f00 	cmp.w	ip, #0
 800b20e:	d04e      	beq.n	800b2ae <find_volume+0x182>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b210:	fb01 f202 	mul.w	r2, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b214:	eb0c 1617 	add.w	r6, ip, r7, lsr #4
 800b218:	4416      	add	r6, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b21a:	42b0      	cmp	r0, r6
 800b21c:	d347      	bcc.n	800b2ae <find_volume+0x182>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b21e:	1b80      	subs	r0, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b220:	4298      	cmp	r0, r3
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b222:	fbb0 fef3 	udiv	lr, r0, r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b226:	d342      	bcc.n	800b2ae <find_volume+0x182>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b228:	eb0c 0305 	add.w	r3, ip, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b22c:	f64f 7cf5 	movw	ip, #65525	@ 0xfff5
		fs->database = bsect + sysect;					/* Data start sector */
 800b230:	442e      	add	r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b232:	f10e 0002 	add.w	r0, lr, #2
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b236:	45e6      	cmp	lr, ip
 800b238:	f240 808f 	bls.w	800b35a <find_volume+0x22e>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b23c:	6223      	str	r3, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b23e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
		fs->database = bsect + sysect;					/* Data start sector */
 800b242:	62a6      	str	r6, [r4, #40]	@ 0x28
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b244:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b246:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b248:	61e5      	str	r5, [r4, #28]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b24a:	d130      	bne.n	800b2ae <find_volume+0x182>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b24c:	0083      	lsls	r3, r0, #2
	rv = rv << 8 | ptr[0];
 800b24e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b250:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b254:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b256:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800b25a:	d328      	bcc.n	800b2ae <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b25c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	@ 0x60
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b260:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800b264:	2180      	movs	r1, #128	@ 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b266:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800b268:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b26a:	e9c4 3303 	strd	r3, r3, [r4, #12]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b26e:	f000 809c 	beq.w	800b3aa <find_volume+0x27e>
		fmt = FS_FAT32;
 800b272:	2303      	movs	r3, #3
	fs->id = ++Fsid;		/* File system mount ID */
 800b274:	495f      	ldr	r1, [pc, #380]	@ (800b3f4 <find_volume+0x2c8>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800b276:	7023      	strb	r3, [r4, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b278:	4a5f      	ldr	r2, [pc, #380]	@ (800b3f8 <find_volume+0x2cc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800b27a:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b27c:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b27e:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b280:	42a0      	cmp	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 800b282:	b29b      	uxth	r3, r3
 800b284:	800b      	strh	r3, [r1, #0]
 800b286:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b288:	f000 808c 	beq.w	800b3a4 <find_volume+0x278>
 800b28c:	6913      	ldr	r3, [r2, #16]
 800b28e:	429c      	cmp	r4, r3
 800b290:	f47f af7e 	bne.w	800b190 <find_volume+0x64>
 800b294:	2300      	movs	r3, #0
 800b296:	6113      	str	r3, [r2, #16]
 800b298:	e77a      	b.n	800b190 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 800b29a:	f8d4 5226 	ldr.w	r5, [r4, #550]	@ 0x226
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b29e:	2e00      	cmp	r6, #0
 800b2a0:	d14a      	bne.n	800b338 <find_volume+0x20c>
 800b2a2:	2f00      	cmp	r7, #0
 800b2a4:	d151      	bne.n	800b34a <find_volume+0x21e>
 800b2a6:	f1b8 0f00 	cmp.w	r8, #0
 800b2aa:	d13c      	bne.n	800b326 <find_volume+0x1fa>
 800b2ac:	bb55      	cbnz	r5, 800b304 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b2ae:	200d      	movs	r0, #13
}
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b2b4:	2003      	movs	r0, #3
}
 800b2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2ba:	f894 61f2 	ldrb.w	r6, [r4, #498]	@ 0x1f2
 800b2be:	b10e      	cbz	r6, 800b2c4 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800b2c0:	f8d4 61f6 	ldr.w	r6, [r4, #502]	@ 0x1f6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2c4:	f894 7202 	ldrb.w	r7, [r4, #514]	@ 0x202
 800b2c8:	b10f      	cbz	r7, 800b2ce <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 800b2ca:	f8d4 7206 	ldr.w	r7, [r4, #518]	@ 0x206
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2ce:	f894 3212 	ldrb.w	r3, [r4, #530]	@ 0x212
 800b2d2:	b313      	cbz	r3, 800b31a <find_volume+0x1ee>
	rv = rv << 8 | ptr[0];
 800b2d4:	f8d4 8216 	ldr.w	r8, [r4, #534]	@ 0x216
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2d8:	f894 5222 	ldrb.w	r5, [r4, #546]	@ 0x222
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	d1dc      	bne.n	800b29a <find_volume+0x16e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b2e0:	bb56      	cbnz	r6, 800b338 <find_volume+0x20c>
 800b2e2:	bb8f      	cbnz	r7, 800b348 <find_volume+0x21c>
 800b2e4:	f1b8 0f00 	cmp.w	r8, #0
 800b2e8:	d0e1      	beq.n	800b2ae <find_volume+0x182>
 800b2ea:	4641      	mov	r1, r8
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f7ff fe3f 	bl	800af70 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b2f2:	2801      	cmp	r0, #1
 800b2f4:	d8db      	bhi.n	800b2ae <find_volume+0x182>
			bsect = br[i];
 800b2f6:	4645      	mov	r5, r8
 800b2f8:	e764      	b.n	800b1c4 <find_volume+0x98>
				return FR_WRITE_PROTECTED;
 800b2fa:	200a      	movs	r0, #10
}
 800b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b300:	200c      	movs	r0, #12
 800b302:	e7d5      	b.n	800b2b0 <find_volume+0x184>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b304:	4629      	mov	r1, r5
 800b306:	4620      	mov	r0, r4
 800b308:	f7ff fe32 	bl	800af70 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b30c:	2801      	cmp	r0, #1
 800b30e:	f67f af59 	bls.w	800b1c4 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b312:	2804      	cmp	r0, #4
 800b314:	d1cb      	bne.n	800b2ae <find_volume+0x182>
 800b316:	2001      	movs	r0, #1
 800b318:	e7ca      	b.n	800b2b0 <find_volume+0x184>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b31a:	4698      	mov	r8, r3
 800b31c:	e7dc      	b.n	800b2d8 <find_volume+0x1ac>
					*path = ++tt;
 800b31e:	f10c 0301 	add.w	r3, ip, #1
 800b322:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b324:	e721      	b.n	800b16a <find_volume+0x3e>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b326:	4641      	mov	r1, r8
 800b328:	4620      	mov	r0, r4
 800b32a:	f7ff fe21 	bl	800af70 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b32e:	2801      	cmp	r0, #1
 800b330:	d9e1      	bls.n	800b2f6 <find_volume+0x1ca>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b332:	2d00      	cmp	r5, #0
 800b334:	d1e6      	bne.n	800b304 <find_volume+0x1d8>
 800b336:	e7ba      	b.n	800b2ae <find_volume+0x182>
 800b338:	4631      	mov	r1, r6
 800b33a:	4620      	mov	r0, r4
 800b33c:	f7ff fe18 	bl	800af70 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b340:	2801      	cmp	r0, #1
 800b342:	d8ae      	bhi.n	800b2a2 <find_volume+0x176>
			bsect = br[i];
 800b344:	4635      	mov	r5, r6
 800b346:	e73d      	b.n	800b1c4 <find_volume+0x98>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b348:	4635      	mov	r5, r6
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b34a:	4639      	mov	r1, r7
 800b34c:	4620      	mov	r0, r4
 800b34e:	f7ff fe0f 	bl	800af70 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b352:	2801      	cmp	r0, #1
 800b354:	d8a7      	bhi.n	800b2a6 <find_volume+0x17a>
			bsect = br[i];
 800b356:	463d      	mov	r5, r7
 800b358:	e734      	b.n	800b1c4 <find_volume+0x98>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b35a:	f640 7cf5 	movw	ip, #4085	@ 0xff5
		fs->volbase = bsect;							/* Volume start sector */
 800b35e:	61e5      	str	r5, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
 800b360:	62a6      	str	r6, [r4, #40]	@ 0x28
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b362:	45e6      	cmp	lr, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b364:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b366:	6223      	str	r3, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b368:	d816      	bhi.n	800b398 <find_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b36a:	2f00      	cmp	r7, #0
 800b36c:	d09f      	beq.n	800b2ae <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b36e:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b370:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800b374:	f000 0001 	and.w	r0, r0, #1
 800b378:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b37c:	2301      	movs	r3, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b37e:	f200 10ff 	addw	r0, r0, #511	@ 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b382:	6262      	str	r2, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b384:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
 800b388:	d391      	bcc.n	800b2ae <find_volume+0x182>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b38a:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 800b38e:	2180      	movs	r1, #128	@ 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b390:	e9c4 2203 	strd	r2, r2, [r4, #12]
		fs->fsi_flag = 0x80;
 800b394:	7121      	strb	r1, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b396:	e76d      	b.n	800b274 <find_volume+0x148>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b398:	2f00      	cmp	r7, #0
 800b39a:	d088      	beq.n	800b2ae <find_volume+0x182>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b39c:	441a      	add	r2, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b39e:	0040      	lsls	r0, r0, #1
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e7ec      	b.n	800b37e <find_volume+0x252>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	e770      	b.n	800b28c <find_volume+0x160>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3aa:	1c69      	adds	r1, r5, #1
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f7ff fe7f 	bl	800b0b0 <move_window>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	f47f af5d 	bne.w	800b272 <find_volume+0x146>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3b8:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800b3bc:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
			fs->fsi_flag = 0;
 800b3c0:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3c2:	4291      	cmp	r1, r2
 800b3c4:	f47f af55 	bne.w	800b272 <find_volume+0x146>
	rv = rv << 8 | ptr[0];
 800b3c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b3fc <find_volume+0x2d0>)
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	f47f af50 	bne.w	800b272 <find_volume+0x146>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b3d2:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
	rv = rv << 8 | ptr[0];
 800b3d6:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b3da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b3de:	3320      	adds	r3, #32
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	f47f af46 	bne.w	800b272 <find_volume+0x146>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b3e6:	e9d4 2386 	ldrd	r2, r3, [r4, #536]	@ 0x218
 800b3ea:	e9c4 3203 	strd	r3, r2, [r4, #12]
 800b3ee:	e740      	b.n	800b272 <find_volume+0x146>
 800b3f0:	240b6a04 	.word	0x240b6a04
 800b3f4:	240b6a00 	.word	0x240b6a00
 800b3f8:	240b69e0 	.word	0x240b69e0
 800b3fc:	41615252 	.word	0x41615252

0800b400 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800b404:	f890 9000 	ldrb.w	r9, [r0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b408:	4605      	mov	r5, r0
 800b40a:	460e      	mov	r6, r1
 800b40c:	4614      	mov	r4, r2
		switch (fs->fs_type) {
 800b40e:	f1b9 0f02 	cmp.w	r9, #2
 800b412:	d008      	beq.n	800b426 <put_fat.part.0+0x26>
 800b414:	f1b9 0f03 	cmp.w	r9, #3
 800b418:	d042      	beq.n	800b4a0 <put_fat.part.0+0xa0>
 800b41a:	f1b9 0f01 	cmp.w	r9, #1
 800b41e:	d014      	beq.n	800b44a <put_fat.part.0+0x4a>
 800b420:	2002      	movs	r0, #2
}
 800b422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b426:	6a01      	ldr	r1, [r0, #32]
 800b428:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 800b42c:	f7ff fe40 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800b430:	2800      	cmp	r0, #0
 800b432:	d1f6      	bne.n	800b422 <put_fat.part.0+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b434:	0076      	lsls	r6, r6, #1
 800b436:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 800b43a:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800b43e:	559c      	strb	r4, [r3, r6]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b440:	199a      	adds	r2, r3, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800b442:	f3c4 2407 	ubfx	r4, r4, #8, #8
	*ptr++ = (BYTE)val;
 800b446:	7054      	strb	r4, [r2, #1]
			break;
 800b448:	e03d      	b.n	800b4c6 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b44a:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b44c:	eb06 0856 	add.w	r8, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b450:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b454:	f7ff fe2c 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800b458:	2800      	cmp	r0, #0
 800b45a:	d1e2      	bne.n	800b422 <put_fat.part.0+0x22>
			p = fs->win + bc++ % SS(fs);
 800b45c:	f108 0701 	add.w	r7, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b460:	07f2      	lsls	r2, r6, #31
			p = fs->win + bc++ % SS(fs);
 800b462:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800b466:	f105 0830 	add.w	r8, r5, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b46a:	ea4f 2157 	mov.w	r1, r7, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b46e:	d52f      	bpl.n	800b4d0 <put_fat.part.0+0xd0>
 800b470:	f818 2003 	ldrb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b474:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b476:	f002 020f 	and.w	r2, r2, #15
 800b47a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800b47e:	f808 2003 	strb.w	r2, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b482:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800b484:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b488:	4419      	add	r1, r3
 800b48a:	f7ff fe11 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800b48e:	2800      	cmp	r0, #0
 800b490:	d1c7      	bne.n	800b422 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800b492:	f3c7 0208 	ubfx	r2, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b496:	f3c4 1307 	ubfx	r3, r4, #4, #8
			p = fs->win + bc % SS(fs);
 800b49a:	4442      	add	r2, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b49c:	7013      	strb	r3, [r2, #0]
			break;
 800b49e:	e012      	b.n	800b4c6 <put_fat.part.0+0xc6>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4a0:	6a01      	ldr	r1, [r0, #32]
 800b4a2:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 800b4a6:	f7ff fe03 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d1b9      	bne.n	800b422 <put_fat.part.0+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4ae:	00b6      	lsls	r6, r6, #2
 800b4b0:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 800b4b4:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
 800b4b8:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b4bc:	5993      	ldr	r3, [r2, r6]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4be:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b4c2:	4323      	orrs	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800b4c4:	5193      	str	r3, [r2, r6]
			fs->wflag = 1;
 800b4c6:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4c8:	2000      	movs	r0, #0
			fs->wflag = 1;
 800b4ca:	70eb      	strb	r3, [r5, #3]
}
 800b4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b4d0:	f808 4003 	strb.w	r4, [r8, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	6a2b      	ldr	r3, [r5, #32]
			fs->wflag = 1;
 800b4d8:	f885 9003 	strb.w	r9, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4dc:	4419      	add	r1, r3
 800b4de:	f7ff fde7 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d19d      	bne.n	800b422 <put_fat.part.0+0x22>
			p = fs->win + bc % SS(fs);
 800b4e6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b4ea:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800b4ee:	f818 3007 	ldrb.w	r3, [r8, r7]
			p = fs->win + bc % SS(fs);
 800b4f2:	eb08 0207 	add.w	r2, r8, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b4f6:	f023 030f 	bic.w	r3, r3, #15
 800b4fa:	4323      	orrs	r3, r4
 800b4fc:	7013      	strb	r3, [r2, #0]
			break;
 800b4fe:	e7e2      	b.n	800b4c6 <put_fat.part.0+0xc6>

0800b500 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b500:	2901      	cmp	r1, #1
 800b502:	d90e      	bls.n	800b522 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b506:	6943      	ldr	r3, [r0, #20]
 800b508:	460c      	mov	r4, r1
 800b50a:	4605      	mov	r5, r0
 800b50c:	4299      	cmp	r1, r3
 800b50e:	d206      	bcs.n	800b51e <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800b510:	7803      	ldrb	r3, [r0, #0]
 800b512:	2b02      	cmp	r3, #2
 800b514:	d021      	beq.n	800b55a <get_fat.isra.0+0x5a>
 800b516:	2b03      	cmp	r3, #3
 800b518:	d010      	beq.n	800b53c <get_fat.isra.0+0x3c>
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d003      	beq.n	800b526 <get_fat.isra.0+0x26>
		val = 1;	/* Internal error */
 800b51e:	2001      	movs	r0, #1
}
 800b520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b522:	2001      	movs	r0, #1
}
 800b524:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b526:	6a01      	ldr	r1, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b528:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b52c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800b530:	f7ff fdbe 	bl	800b0b0 <move_window>
 800b534:	b1f0      	cbz	r0, 800b574 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b536:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b53c:	6a01      	ldr	r1, [r0, #32]
 800b53e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b542:	f7ff fdb5 	bl	800b0b0 <move_window>
 800b546:	2800      	cmp	r0, #0
 800b548:	d1f5      	bne.n	800b536 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b54a:	00a4      	lsls	r4, r4, #2
 800b54c:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b550:	4425      	add	r5, r4
 800b552:	6b28      	ldr	r0, [r5, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b554:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
}
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b55a:	6a01      	ldr	r1, [r0, #32]
 800b55c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b560:	f7ff fda6 	bl	800b0b0 <move_window>
 800b564:	2800      	cmp	r0, #0
 800b566:	d1e6      	bne.n	800b536 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b568:	0063      	lsls	r3, r4, #1
 800b56a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b56e:	442b      	add	r3, r5
 800b570:	8e18      	ldrh	r0, [r3, #48]	@ 0x30
}
 800b572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800b574:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b578:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b57a:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b57c:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b57e:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b580:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b584:	f893 6030 	ldrb.w	r6, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b588:	f7ff fd92 	bl	800b0b0 <move_window>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1d2      	bne.n	800b536 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b590:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800b594:	442f      	add	r7, r5
 800b596:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800b59a:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b59e:	07e3      	lsls	r3, r4, #31
 800b5a0:	bf4c      	ite	mi
 800b5a2:	0900      	lsrmi	r0, r0, #4
 800b5a4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5aa:	bf00      	nop

0800b5ac <create_chain>:
{
 800b5ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	4607      	mov	r7, r0
	if (clst == 0) {	/* Create a new chain */
 800b5b2:	4689      	mov	r9, r1
	FATFS *fs = obj->fs;
 800b5b4:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800b5b8:	2900      	cmp	r1, #0
 800b5ba:	f040 80a7 	bne.w	800b70c <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b5be:	f8d8 600c 	ldr.w	r6, [r8, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b5c2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b5c6:	b1c6      	cbz	r6, 800b5fa <create_chain+0x4e>
 800b5c8:	429e      	cmp	r6, r3
 800b5ca:	d216      	bcs.n	800b5fa <create_chain+0x4e>
			ncl++;							/* Next cluster */
 800b5cc:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b5ce:	42a3      	cmp	r3, r4
 800b5d0:	f200 80b4 	bhi.w	800b73c <create_chain+0x190>
				if (ncl > scl) return 0;	/* No free cluster */
 800b5d4:	2e01      	cmp	r6, #1
 800b5d6:	d013      	beq.n	800b600 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b5d8:	683d      	ldr	r5, [r7, #0]
				ncl = 2;
 800b5da:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b5dc:	696b      	ldr	r3, [r5, #20]
 800b5de:	42a3      	cmp	r3, r4
 800b5e0:	d907      	bls.n	800b5f2 <create_chain+0x46>
		switch (fs->fs_type) {
 800b5e2:	782b      	ldrb	r3, [r5, #0]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	f000 8083 	beq.w	800b6f0 <create_chain+0x144>
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d042      	beq.n	800b674 <create_chain+0xc8>
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d00a      	beq.n	800b608 <create_chain+0x5c>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b5f2:	2401      	movs	r4, #1
}
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	f200 809a 	bhi.w	800b734 <create_chain+0x188>
				if (ncl > scl) return 0;	/* No free cluster */
 800b600:	2400      	movs	r4, #0
}
 800b602:	4620      	mov	r0, r4
 800b604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b608:	6a29      	ldr	r1, [r5, #32]
			bc = (UINT)clst; bc += bc / 2;
 800b60a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b60e:	4628      	mov	r0, r5
 800b610:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800b614:	f7ff fd4c 	bl	800b0b0 <move_window>
 800b618:	bb38      	cbnz	r0, 800b66a <create_chain+0xbe>
			wc = fs->win[bc++ % SS(fs)];
 800b61a:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b61e:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b620:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b624:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b626:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b628:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b62c:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b630:	f7ff fd3e 	bl	800b0b0 <move_window>
 800b634:	b9c8      	cbnz	r0, 800b66a <create_chain+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b636:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b63a:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b63c:	44ab      	add	fp, r5
 800b63e:	f89b 3030 	ldrb.w	r3, [fp, #48]	@ 0x30
 800b642:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b646:	bf4c      	ite	mi
 800b648:	091b      	lsrmi	r3, r3, #4
 800b64a:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800b64e:	b313      	cbz	r3, 800b696 <create_chain+0xea>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b650:	2b01      	cmp	r3, #1
 800b652:	d0ce      	beq.n	800b5f2 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800b654:	42a6      	cmp	r6, r4
 800b656:	d0d3      	beq.n	800b600 <create_chain+0x54>
			ncl++;							/* Next cluster */
 800b658:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b65a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b65e:	429c      	cmp	r4, r3
 800b660:	d2b8      	bcs.n	800b5d4 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b662:	683d      	ldr	r5, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b664:	e7ba      	b.n	800b5dc <create_chain+0x30>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b666:	2801      	cmp	r0, #1
 800b668:	d1c3      	bne.n	800b5f2 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b66a:	f04f 34ff 	mov.w	r4, #4294967295
}
 800b66e:	4620      	mov	r0, r4
 800b670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b674:	6a29      	ldr	r1, [r5, #32]
 800b676:	4628      	mov	r0, r5
 800b678:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b67c:	f7ff fd18 	bl	800b0b0 <move_window>
 800b680:	2800      	cmp	r0, #0
 800b682:	d1f2      	bne.n	800b66a <create_chain+0xbe>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b684:	00a3      	lsls	r3, r4, #2
 800b686:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b68a:	442b      	add	r3, r5
 800b68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b68e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1dc      	bne.n	800b650 <create_chain+0xa4>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b696:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b69a:	42a3      	cmp	r3, r4
 800b69c:	d9a9      	bls.n	800b5f2 <create_chain+0x46>
 800b69e:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	f7ff feab 	bl	800b400 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800b6aa:	b970      	cbnz	r0, 800b6ca <create_chain+0x11e>
 800b6ac:	f1b9 0f00 	cmp.w	r9, #0
 800b6b0:	d00b      	beq.n	800b6ca <create_chain+0x11e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b6b2:	f1b9 0f01 	cmp.w	r9, #1
 800b6b6:	d09c      	beq.n	800b5f2 <create_chain+0x46>
 800b6b8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b6bc:	4599      	cmp	r9, r3
 800b6be:	d298      	bcs.n	800b5f2 <create_chain+0x46>
 800b6c0:	4622      	mov	r2, r4
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	f7ff fe9b 	bl	800b400 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d1cb      	bne.n	800b666 <create_chain+0xba>
		fs->last_clst = ncl;
 800b6ce:	f8c8 400c 	str.w	r4, [r8, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6d2:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800b6d6:	3b02      	subs	r3, #2
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d802      	bhi.n	800b6e2 <create_chain+0x136>
 800b6dc:	3a01      	subs	r2, #1
 800b6de:	f8c8 2010 	str.w	r2, [r8, #16]
		fs->fsi_flag |= 1;
 800b6e2:	f898 3004 	ldrb.w	r3, [r8, #4]
 800b6e6:	f043 0301 	orr.w	r3, r3, #1
 800b6ea:	f888 3004 	strb.w	r3, [r8, #4]
 800b6ee:	e781      	b.n	800b5f4 <create_chain+0x48>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6f0:	6a29      	ldr	r1, [r5, #32]
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b6f8:	f7ff fcda 	bl	800b0b0 <move_window>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d1b4      	bne.n	800b66a <create_chain+0xbe>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b700:	0063      	lsls	r3, r4, #1
 800b702:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b706:	442b      	add	r3, r5
 800b708:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
			break;
 800b70a:	e7a0      	b.n	800b64e <create_chain+0xa2>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b70c:	4640      	mov	r0, r8
 800b70e:	f7ff fef7 	bl	800b500 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b712:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b714:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b716:	f67f af6c 	bls.w	800b5f2 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b71a:	1c41      	adds	r1, r0, #1
 800b71c:	d0a5      	beq.n	800b66a <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b71e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b722:	4283      	cmp	r3, r0
 800b724:	f63f af66 	bhi.w	800b5f4 <create_chain+0x48>
			ncl++;							/* Next cluster */
 800b728:	f109 0401 	add.w	r4, r9, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	d807      	bhi.n	800b740 <create_chain+0x194>
 800b730:	464e      	mov	r6, r9
 800b732:	e74f      	b.n	800b5d4 <create_chain+0x28>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b734:	683d      	ldr	r5, [r7, #0]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b736:	2601      	movs	r6, #1
			ncl++;							/* Next cluster */
 800b738:	2402      	movs	r4, #2
 800b73a:	e74f      	b.n	800b5dc <create_chain+0x30>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b73c:	4645      	mov	r5, r8
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b73e:	e74d      	b.n	800b5dc <create_chain+0x30>
 800b740:	2c01      	cmp	r4, #1
 800b742:	683d      	ldr	r5, [r7, #0]
 800b744:	f67f af55 	bls.w	800b5f2 <create_chain+0x46>
 800b748:	464e      	mov	r6, r9
 800b74a:	e747      	b.n	800b5dc <create_chain+0x30>

0800b74c <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800b74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->dptr = ofs;				/* Set current offset */
 800b750:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b752:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800b754:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800b756:	6807      	ldr	r7, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800b758:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b75a:	b98c      	cbnz	r4, 800b780 <dir_sdi.constprop.0+0x34>
 800b75c:	783b      	ldrb	r3, [r7, #0]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d80a      	bhi.n	800b778 <dir_sdi.constprop.0+0x2c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b762:	893b      	ldrh	r3, [r7, #8]
 800b764:	b18b      	cbz	r3, 800b78a <dir_sdi.constprop.0+0x3e>
		dp->sect = fs->dirbase;
 800b766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	dp->clust = clst;					/* Current cluster# */
 800b768:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b76c:	b16b      	cbz	r3, 800b78a <dir_sdi.constprop.0+0x3e>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b76e:	3730      	adds	r7, #48	@ 0x30
	return FR_OK;
 800b770:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b772:	6237      	str	r7, [r6, #32]
}
 800b774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		clst = fs->dirbase;
 800b778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0f1      	beq.n	800b762 <dir_sdi.constprop.0+0x16>
 800b77e:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b780:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b782:	2b00      	cmp	r3, #0
 800b784:	d15c      	bne.n	800b840 <dir_sdi.constprop.0+0xf4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b786:	2c01      	cmp	r4, #1
 800b788:	d102      	bne.n	800b790 <dir_sdi.constprop.0+0x44>
		return FR_INT_ERR;
 800b78a:	2002      	movs	r0, #2
}
 800b78c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b790:	463d      	mov	r5, r7
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b792:	696b      	ldr	r3, [r5, #20]
 800b794:	42a3      	cmp	r3, r4
 800b796:	d9f8      	bls.n	800b78a <dir_sdi.constprop.0+0x3e>
		switch (fs->fs_type) {
 800b798:	782b      	ldrb	r3, [r5, #0]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d025      	beq.n	800b7ea <dir_sdi.constprop.0+0x9e>
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d00d      	beq.n	800b7be <dir_sdi.constprop.0+0x72>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d1f1      	bne.n	800b78a <dir_sdi.constprop.0+0x3e>
			bc = (UINT)clst; bc += bc / 2;
 800b7a6:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7aa:	6a29      	ldr	r1, [r5, #32]
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800b7b2:	f7ff fc7d 	bl	800b0b0 <move_window>
 800b7b6:	b330      	cbz	r0, 800b806 <dir_sdi.constprop.0+0xba>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b7b8:	2001      	movs	r0, #1
}
 800b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7be:	6a29      	ldr	r1, [r5, #32]
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b7c6:	f7ff fc73 	bl	800b0b0 <move_window>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d1f4      	bne.n	800b7b8 <dir_sdi.constprop.0+0x6c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b7ce:	00a3      	lsls	r3, r4, #2
 800b7d0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800b7d4:	442b      	add	r3, r5
 800b7d6:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b7d8:	f024 4470 	bic.w	r4, r4, #4026531840	@ 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b7dc:	2c01      	cmp	r4, #1
 800b7de:	d9d4      	bls.n	800b78a <dir_sdi.constprop.0+0x3e>
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	429c      	cmp	r4, r3
 800b7e4:	d2d1      	bcs.n	800b78a <dir_sdi.constprop.0+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b7e6:	6835      	ldr	r5, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b7e8:	e7d3      	b.n	800b792 <dir_sdi.constprop.0+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7ea:	6a29      	ldr	r1, [r5, #32]
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b7f2:	f7ff fc5d 	bl	800b0b0 <move_window>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d1de      	bne.n	800b7b8 <dir_sdi.constprop.0+0x6c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b7fa:	0063      	lsls	r3, r4, #1
 800b7fc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b800:	442b      	add	r3, r5
 800b802:	8e1c      	ldrh	r4, [r3, #48]	@ 0x30
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b804:	e7ea      	b.n	800b7dc <dir_sdi.constprop.0+0x90>
			wc = fs->win[bc++ % SS(fs)];
 800b806:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b80a:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 800b80c:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b810:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b812:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b814:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b818:	f893 9030 	ldrb.w	r9, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b81c:	f7ff fc48 	bl	800b0b0 <move_window>
 800b820:	2800      	cmp	r0, #0
 800b822:	d1c9      	bne.n	800b7b8 <dir_sdi.constprop.0+0x6c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b824:	f3c8 0808 	ubfx	r8, r8, #0, #9
 800b828:	44a8      	add	r8, r5
 800b82a:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800b82e:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b832:	07e3      	lsls	r3, r4, #31
 800b834:	bf4c      	ite	mi
 800b836:	ea4f 1419 	movmi.w	r4, r9, lsr #4
 800b83a:	f3c9 040b 	ubfxpl	r4, r9, #0, #12
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b83e:	e7cd      	b.n	800b7dc <dir_sdi.constprop.0+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b840:	697a      	ldr	r2, [r7, #20]
	clst -= 2;
 800b842:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b844:	3a02      	subs	r2, #2
 800b846:	4291      	cmp	r1, r2
 800b848:	d203      	bcs.n	800b852 <dir_sdi.constprop.0+0x106>
	return clst * fs->csize + fs->database;
 800b84a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b84c:	fb01 2303 	mla	r3, r1, r3, r2
 800b850:	e78a      	b.n	800b768 <dir_sdi.constprop.0+0x1c>
		dp->sect = fs->dirbase;
 800b852:	2300      	movs	r3, #0
 800b854:	e9c6 4306 	strd	r4, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b858:	e797      	b.n	800b78a <dir_sdi.constprop.0+0x3e>
 800b85a:	bf00      	nop

0800b85c <follow_path>:
{
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b860:	780a      	ldrb	r2, [r1, #0]
{
 800b862:	b085      	sub	sp, #20
 800b864:	468b      	mov	fp, r1
 800b866:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b868:	2a2f      	cmp	r2, #47	@ 0x2f
	FATFS *fs = obj->fs;
 800b86a:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b86c:	d001      	beq.n	800b872 <follow_path+0x16>
 800b86e:	2a5c      	cmp	r2, #92	@ 0x5c
 800b870:	d105      	bne.n	800b87e <follow_path+0x22>
 800b872:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 800b876:	2b2f      	cmp	r3, #47	@ 0x2f
 800b878:	d0fb      	beq.n	800b872 <follow_path+0x16>
 800b87a:	2b5c      	cmp	r3, #92	@ 0x5c
 800b87c:	d0f9      	beq.n	800b872 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b87e:	2200      	movs	r2, #0
 800b880:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b882:	f89b 2000 	ldrb.w	r2, [fp]
 800b886:	2a1f      	cmp	r2, #31
 800b888:	f240 816b 	bls.w	800bb62 <follow_path+0x306>
 800b88c:	465b      	mov	r3, fp
	p = *path; sfn = dp->fn;
 800b88e:	f104 0724 	add.w	r7, r4, #36	@ 0x24
 800b892:	46ab      	mov	fp, r5
		*d++ = (BYTE)val;
 800b894:	f04f 3a20 	mov.w	sl, #538976288	@ 0x20202020
 800b898:	463e      	mov	r6, r7
 800b89a:	461d      	mov	r5, r3
 800b89c:	2320      	movs	r3, #32
 800b89e:	f242 0220 	movw	r2, #8224	@ 0x2020
 800b8a2:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
 800b8a6:	f8c4 a028 	str.w	sl, [r4, #40]	@ 0x28
 800b8aa:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800b8ac:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
		c = (BYTE)p[si++];
 800b8b0:	782b      	ldrb	r3, [r5, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	d95f      	bls.n	800b976 <follow_path+0x11a>
 800b8b6:	46ae      	mov	lr, r5
	si = i = 0; ni = 8;
 800b8b8:	2700      	movs	r7, #0
 800b8ba:	f04f 0c08 	mov.w	ip, #8
		c = (BYTE)p[si++];
 800b8be:	2001      	movs	r0, #1
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b8c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8c2:	d066      	beq.n	800b992 <follow_path+0x136>
 800b8c4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b8c6:	d064      	beq.n	800b992 <follow_path+0x136>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ca:	d001      	beq.n	800b8d0 <follow_path+0x74>
 800b8cc:	4567      	cmp	r7, ip
 800b8ce:	d345      	bcc.n	800b95c <follow_path+0x100>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b8d0:	f1bc 0f0b 	cmp.w	ip, #11
 800b8d4:	d04f      	beq.n	800b976 <follow_path+0x11a>
 800b8d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8d8:	d14d      	bne.n	800b976 <follow_path+0x11a>
			i = 8; ni = 11;				/* Goto extension */
 800b8da:	2708      	movs	r7, #8
 800b8dc:	f04f 0c0b 	mov.w	ip, #11
		c = (BYTE)p[si++];
 800b8e0:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 800b8e4:	3001      	adds	r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d8ea      	bhi.n	800b8c0 <follow_path+0x64>
	*path = p + si;						/* Return pointer to the next segment */
 800b8ea:	4405      	add	r5, r0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b8ec:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800b8f0:	2ae5      	cmp	r2, #229	@ 0xe5
 800b8f2:	d102      	bne.n	800b8fa <follow_path+0x9e>
 800b8f4:	2205      	movs	r2, #5
 800b8f6:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b8fa:	2b20      	cmp	r3, #32
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8fc:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 800b8fe:	f8d4 8000 	ldr.w	r8, [r4]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b902:	bf8c      	ite	hi
 800b904:	2300      	movhi	r3, #0
 800b906:	2301      	movls	r3, #1
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b90e:	f7ff ff1d 	bl	800b74c <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 800b912:	4602      	mov	r2, r0
 800b914:	2800      	cmp	r0, #0
 800b916:	f040 80cc 	bne.w	800bab2 <follow_path+0x256>
		res = move_window(fs, dp->sect);
 800b91a:	69e7      	ldr	r7, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b91c:	f108 0930 	add.w	r9, r8, #48	@ 0x30
 800b920:	e9cd b600 	strd	fp, r6, [sp]
 800b924:	46ab      	mov	fp, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b926:	f8d8 602c 	ldr.w	r6, [r8, #44]	@ 0x2c
 800b92a:	42b7      	cmp	r7, r6
 800b92c:	d046      	beq.n	800b9bc <follow_path+0x160>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b92e:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b932:	f898 0001 	ldrb.w	r0, [r8, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 80c1 	bne.w	800babe <follow_path+0x262>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b93c:	2301      	movs	r3, #1
 800b93e:	463a      	mov	r2, r7
 800b940:	4649      	mov	r1, r9
 800b942:	f7ff fa99 	bl	800ae78 <disk_read>
 800b946:	2800      	cmp	r0, #0
 800b948:	d036      	beq.n	800b9b8 <follow_path+0x15c>
				res = FR_DISK_ERR;
 800b94a:	2201      	movs	r2, #1
			fs->winsect = sector;
 800b94c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b950:	4610      	mov	r0, r2
			fs->winsect = sector;
 800b952:	f8c8 302c 	str.w	r3, [r8, #44]	@ 0x2c
}
 800b956:	b005      	add	sp, #20
 800b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
 800b95c:	061a      	lsls	r2, r3, #24
 800b95e:	d502      	bpl.n	800b966 <follow_path+0x10a>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b960:	3b80      	subs	r3, #128	@ 0x80
 800b962:	4a89      	ldr	r2, [pc, #548]	@ (800bb88 <follow_path+0x32c>)
 800b964:	5cd3      	ldrb	r3, [r2, r3]
	while (*str && *str != chr) str++;
 800b966:	2222      	movs	r2, #34	@ 0x22
 800b968:	4988      	ldr	r1, [pc, #544]	@ (800bb8c <follow_path+0x330>)
 800b96a:	e002      	b.n	800b972 <follow_path+0x116>
 800b96c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b970:	b132      	cbz	r2, 800b980 <follow_path+0x124>
 800b972:	4293      	cmp	r3, r2
 800b974:	d1fa      	bne.n	800b96c <follow_path+0x110>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b976:	2206      	movs	r2, #6
}
 800b978:	4610      	mov	r0, r2
 800b97a:	b005      	add	sp, #20
 800b97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b980:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b984:	2a19      	cmp	r2, #25
 800b986:	d801      	bhi.n	800b98c <follow_path+0x130>
 800b988:	3b20      	subs	r3, #32
 800b98a:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800b98c:	55f3      	strb	r3, [r6, r7]
 800b98e:	3701      	adds	r7, #1
 800b990:	e7a6      	b.n	800b8e0 <follow_path+0x84>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b992:	5c2a      	ldrb	r2, [r5, r0]
 800b994:	1829      	adds	r1, r5, r0
 800b996:	2a2f      	cmp	r2, #47	@ 0x2f
 800b998:	d002      	beq.n	800b9a0 <follow_path+0x144>
 800b99a:	2a5c      	cmp	r2, #92	@ 0x5c
 800b99c:	f040 80ec 	bne.w	800bb78 <follow_path+0x31c>
 800b9a0:	1c42      	adds	r2, r0, #1
 800b9a2:	442a      	add	r2, r5
 800b9a4:	4615      	mov	r5, r2
 800b9a6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b9aa:	292f      	cmp	r1, #47	@ 0x2f
 800b9ac:	d0fa      	beq.n	800b9a4 <follow_path+0x148>
 800b9ae:	295c      	cmp	r1, #92	@ 0x5c
 800b9b0:	d0f8      	beq.n	800b9a4 <follow_path+0x148>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b9b2:	2f00      	cmp	r7, #0
 800b9b4:	d19a      	bne.n	800b8ec <follow_path+0x90>
 800b9b6:	e7de      	b.n	800b976 <follow_path+0x11a>
			fs->winsect = sector;
 800b9b8:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
		c = dp->dir[DIR_Name];
 800b9bc:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b9be:	781a      	ldrb	r2, [r3, #0]
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	d075      	beq.n	800bab0 <follow_path+0x254>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b9c4:	7ad9      	ldrb	r1, [r3, #11]
 800b9c6:	f001 023f 	and.w	r2, r1, #63	@ 0x3f
 800b9ca:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b9cc:	7ada      	ldrb	r2, [r3, #11]
 800b9ce:	f012 0208 	ands.w	r2, r2, #8
 800b9d2:	d01b      	beq.n	800ba0c <follow_path+0x1b0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9d4:	6966      	ldr	r6, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9d6:	69e7      	ldr	r7, [r4, #28]
	FATFS *fs = dp->obj.fs;
 800b9d8:	6825      	ldr	r5, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9da:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9dc:	2f00      	cmp	r7, #0
 800b9de:	d067      	beq.n	800bab0 <follow_path+0x254>
 800b9e0:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
 800b9e4:	d264      	bcs.n	800bab0 <follow_path+0x254>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9e6:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800b9ea:	b953      	cbnz	r3, 800ba02 <follow_path+0x1a6>
		dp->sect++;				/* Next sector */
 800b9ec:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 800b9ee:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800b9f0:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800b9f2:	2900      	cmp	r1, #0
 800b9f4:	f040 8087 	bne.w	800bb06 <follow_path+0x2aa>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b9f8:	892a      	ldrh	r2, [r5, #8]
 800b9fa:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 800b9fe:	f240 809f 	bls.w	800bb40 <follow_path+0x2e4>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba02:	3530      	adds	r5, #48	@ 0x30
	dp->dptr = ofs;						/* Current entry */
 800ba04:	6166      	str	r6, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba06:	441d      	add	r5, r3
 800ba08:	6225      	str	r5, [r4, #32]
	} while (res == FR_OK);
 800ba0a:	e78c      	b.n	800b926 <follow_path+0xca>
	} while (--cnt && r == 0);
 800ba0c:	f894 5024 	ldrb.w	r5, [r4, #36]	@ 0x24
 800ba10:	7818      	ldrb	r0, [r3, #0]
 800ba12:	4285      	cmp	r5, r0
 800ba14:	d1de      	bne.n	800b9d4 <follow_path+0x178>
 800ba16:	785d      	ldrb	r5, [r3, #1]
 800ba18:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 800ba1c:	4285      	cmp	r5, r0
 800ba1e:	d1d9      	bne.n	800b9d4 <follow_path+0x178>
 800ba20:	f894 5026 	ldrb.w	r5, [r4, #38]	@ 0x26
 800ba24:	7898      	ldrb	r0, [r3, #2]
 800ba26:	4285      	cmp	r5, r0
 800ba28:	d1d4      	bne.n	800b9d4 <follow_path+0x178>
 800ba2a:	f894 5027 	ldrb.w	r5, [r4, #39]	@ 0x27
 800ba2e:	78d8      	ldrb	r0, [r3, #3]
 800ba30:	4285      	cmp	r5, r0
 800ba32:	d1cf      	bne.n	800b9d4 <follow_path+0x178>
 800ba34:	791d      	ldrb	r5, [r3, #4]
 800ba36:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800ba3a:	4285      	cmp	r5, r0
 800ba3c:	d1ca      	bne.n	800b9d4 <follow_path+0x178>
 800ba3e:	795d      	ldrb	r5, [r3, #5]
 800ba40:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800ba44:	4285      	cmp	r5, r0
 800ba46:	d1c5      	bne.n	800b9d4 <follow_path+0x178>
 800ba48:	799d      	ldrb	r5, [r3, #6]
 800ba4a:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800ba4e:	4285      	cmp	r5, r0
 800ba50:	d1c0      	bne.n	800b9d4 <follow_path+0x178>
 800ba52:	79dd      	ldrb	r5, [r3, #7]
 800ba54:	f894 002b 	ldrb.w	r0, [r4, #43]	@ 0x2b
 800ba58:	4285      	cmp	r5, r0
 800ba5a:	d1bb      	bne.n	800b9d4 <follow_path+0x178>
 800ba5c:	7a1d      	ldrb	r5, [r3, #8]
 800ba5e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ba62:	4285      	cmp	r5, r0
 800ba64:	d1b6      	bne.n	800b9d4 <follow_path+0x178>
 800ba66:	7a5d      	ldrb	r5, [r3, #9]
 800ba68:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800ba6c:	4285      	cmp	r5, r0
 800ba6e:	d1b1      	bne.n	800b9d4 <follow_path+0x178>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba70:	7a98      	ldrb	r0, [r3, #10]
 800ba72:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ba76:	4298      	cmp	r0, r3
 800ba78:	d1ac      	bne.n	800b9d4 <follow_path+0x178>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba7a:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800ba7e:	465d      	mov	r5, fp
 800ba80:	9e01      	ldr	r6, [sp, #4]
 800ba82:	0758      	lsls	r0, r3, #29
 800ba84:	f8dd b000 	ldr.w	fp, [sp]
 800ba88:	f53f af76 	bmi.w	800b978 <follow_path+0x11c>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba8c:	06cb      	lsls	r3, r1, #27
 800ba8e:	d553      	bpl.n	800bb38 <follow_path+0x2dc>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ba90:	6962      	ldr	r2, [r4, #20]
 800ba92:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
	if (fs->fs_type == FS_FAT32) {
 800ba96:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ba9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800ba9e:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800baa0:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800baa2:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800baa4:	d102      	bne.n	800baac <follow_path+0x250>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800baa6:	8a9b      	ldrh	r3, [r3, #20]
 800baa8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800baac:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800baae:	e6f5      	b.n	800b89c <follow_path+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bab0:	2204      	movs	r2, #4
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bab2:	2a04      	cmp	r2, #4
			ns = dp->fn[NSFLAG];
 800bab4:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bab8:	f47f af5e 	bne.w	800b978 <follow_path+0x11c>
 800babc:	e03a      	b.n	800bb34 <follow_path+0x2d8>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800babe:	2301      	movs	r3, #1
 800bac0:	4632      	mov	r2, r6
 800bac2:	4649      	mov	r1, r9
 800bac4:	f7ff f9e6 	bl	800ae94 <disk_write>
 800bac8:	bbc0      	cbnz	r0, 800bb3c <follow_path+0x2e0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800baca:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800bace:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800bad2:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 800bad4:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bad8:	429a      	cmp	r2, r3
 800bada:	d211      	bcs.n	800bb00 <follow_path+0x2a4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800badc:	f898 5002 	ldrb.w	r5, [r8, #2]
 800bae0:	2d01      	cmp	r5, #1
 800bae2:	d802      	bhi.n	800baea <follow_path+0x28e>
 800bae4:	e00c      	b.n	800bb00 <follow_path+0x2a4>
					wsect += fs->fsize;
 800bae6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800baea:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800baec:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800baee:	2301      	movs	r3, #1
 800baf0:	4649      	mov	r1, r9
 800baf2:	4632      	mov	r2, r6
 800baf4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800baf8:	f7ff f9cc 	bl	800ae94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bafc:	2d01      	cmp	r5, #1
 800bafe:	d1f2      	bne.n	800bae6 <follow_path+0x28a>
 800bb00:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bb04:	e71a      	b.n	800b93c <follow_path+0xe0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bb06:	896a      	ldrh	r2, [r5, #10]
 800bb08:	3a01      	subs	r2, #1
 800bb0a:	ea12 2256 	ands.w	r2, r2, r6, lsr #9
 800bb0e:	f47f af78 	bne.w	800ba02 <follow_path+0x1a6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bb12:	4628      	mov	r0, r5
 800bb14:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bb18:	f7ff fcf2 	bl	800b500 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb1c:	2801      	cmp	r0, #1
 800bb1e:	d91e      	bls.n	800bb5e <follow_path+0x302>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb20:	1c47      	adds	r7, r0, #1
 800bb22:	d00b      	beq.n	800bb3c <follow_path+0x2e0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb24:	6969      	ldr	r1, [r5, #20]
 800bb26:	9b02      	ldr	r3, [sp, #8]
 800bb28:	4288      	cmp	r0, r1
 800bb2a:	d30d      	bcc.n	800bb48 <follow_path+0x2ec>
			ns = dp->fn[NSFLAG];
 800bb2c:	9a03      	ldr	r2, [sp, #12]
 800bb2e:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
						dp->sect = 0; return FR_NO_FILE;
 800bb32:	61e2      	str	r2, [r4, #28]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb34:	075a      	lsls	r2, r3, #29
 800bb36:	d424      	bmi.n	800bb82 <follow_path+0x326>
 800bb38:	2205      	movs	r2, #5
 800bb3a:	e71d      	b.n	800b978 <follow_path+0x11c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	e7b8      	b.n	800bab2 <follow_path+0x256>
			ns = dp->fn[NSFLAG];
 800bb40:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
				dp->sect = 0; return FR_NO_FILE;
 800bb44:	61e1      	str	r1, [r4, #28]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb46:	e7f5      	b.n	800bb34 <follow_path+0x2d8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb48:	3902      	subs	r1, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb4a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800bb4c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb4e:	4288      	cmp	r0, r1
 800bb50:	d210      	bcs.n	800bb74 <follow_path+0x318>
	return clst * fs->csize + fs->database;
 800bb52:	896a      	ldrh	r2, [r5, #10]
 800bb54:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800bb56:	fb00 7702 	mla	r7, r0, r2, r7
				dp->sect = clust2sect(fs, clst);
 800bb5a:	61e7      	str	r7, [r4, #28]
 800bb5c:	e751      	b.n	800ba02 <follow_path+0x1a6>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb5e:	2202      	movs	r2, #2
 800bb60:	e7a7      	b.n	800bab2 <follow_path+0x256>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb62:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 800bb64:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 800bb66:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
}
 800bb6a:	b005      	add	sp, #20
 800bb6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800bb70:	f7ff bdec 	b.w	800b74c <dir_sdi.constprop.0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb74:	461f      	mov	r7, r3
 800bb76:	e7f0      	b.n	800bb5a <follow_path+0x2fe>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bb78:	460d      	mov	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bb7a:	2f00      	cmp	r7, #0
 800bb7c:	f47f aeb6 	bne.w	800b8ec <follow_path+0x90>
 800bb80:	e6f9      	b.n	800b976 <follow_path+0x11a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb82:	2204      	movs	r2, #4
	return res;
 800bb84:	e6f8      	b.n	800b978 <follow_path+0x11c>
 800bb86:	bf00      	nop
 800bb88:	0800d78c 	.word	0x0800d78c
 800bb8c:	0800d77c 	.word	0x0800d77c

0800bb90 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb90:	2901      	cmp	r1, #1
{
 800bb92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb96:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800bb98:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb9a:	d909      	bls.n	800bbb0 <remove_chain+0x20>
 800bb9c:	6973      	ldr	r3, [r6, #20]
 800bb9e:	428b      	cmp	r3, r1
 800bba0:	d906      	bls.n	800bbb0 <remove_chain+0x20>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bba2:	4605      	mov	r5, r0
 800bba4:	4611      	mov	r1, r2
 800bba6:	b932      	cbnz	r2, 800bbb6 <remove_chain+0x26>
 800bba8:	46b1      	mov	r9, r6
			fs->wflag = 1;
 800bbaa:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bbac:	429c      	cmp	r4, r3
 800bbae:	d312      	bcc.n	800bbd6 <remove_chain+0x46>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bbb0:	2002      	movs	r0, #2
}
 800bbb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d9fa      	bls.n	800bbb0 <remove_chain+0x20>
 800bbba:	2a01      	cmp	r2, #1
 800bbbc:	d0f8      	beq.n	800bbb0 <remove_chain+0x20>
 800bbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7ff fc1c 	bl	800b400 <put_fat.part.0>
		if (res != FR_OK) return res;
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d1f2      	bne.n	800bbb2 <remove_chain+0x22>
 800bbcc:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bbd0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bbd4:	e7e9      	b.n	800bbaa <remove_chain+0x1a>
		switch (fs->fs_type) {
 800bbd6:	f899 3000 	ldrb.w	r3, [r9]
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	f000 8098 	beq.w	800bd10 <remove_chain+0x180>
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d010      	beq.n	800bc06 <remove_chain+0x76>
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d1e3      	bne.n	800bbb0 <remove_chain+0x20>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbe8:	f8d9 1020 	ldr.w	r1, [r9, #32]
			bc = (UINT)clst; bc += bc / 2;
 800bbec:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbf0:	4648      	mov	r0, r9
 800bbf2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800bbf6:	f7ff fa5b 	bl	800b0b0 <move_window>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f000 80b3 	beq.w	800bd66 <remove_chain+0x1d6>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bc00:	2001      	movs	r0, #1
}
 800bc02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc06:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800bc0a:	4648      	mov	r0, r9
 800bc0c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800bc10:	f7ff fa4e 	bl	800b0b0 <move_window>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1f3      	bne.n	800bc00 <remove_chain+0x70>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc18:	00a3      	lsls	r3, r4, #2
 800bc1a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800bc1e:	444b      	add	r3, r9
 800bc20:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800bc24:	f038 4870 	bics.w	r8, r8, #4026531840	@ 0xf0000000
 800bc28:	f000 80bb 	beq.w	800bda2 <remove_chain+0x212>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bc2c:	f1b8 0f01 	cmp.w	r8, #1
 800bc30:	d0be      	beq.n	800bbb0 <remove_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc32:	6973      	ldr	r3, [r6, #20]
 800bc34:	429c      	cmp	r4, r3
 800bc36:	d2bb      	bcs.n	800bbb0 <remove_chain+0x20>
		switch (fs->fs_type) {
 800bc38:	f896 9000 	ldrb.w	r9, [r6]
 800bc3c:	f1b9 0f02 	cmp.w	r9, #2
 800bc40:	d02e      	beq.n	800bca0 <remove_chain+0x110>
 800bc42:	f1b9 0f03 	cmp.w	r9, #3
 800bc46:	d04c      	beq.n	800bce2 <remove_chain+0x152>
 800bc48:	f1b9 0f01 	cmp.w	r9, #1
 800bc4c:	d1b0      	bne.n	800bbb0 <remove_chain+0x20>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc4e:	6a31      	ldr	r1, [r6, #32]
			bc = (UINT)clst; bc += bc / 2;
 800bc50:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc54:	4630      	mov	r0, r6
 800bc56:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800bc5a:	f7ff fa29 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d1a7      	bne.n	800bbb2 <remove_chain+0x22>
			p = fs->win + bc++ % SS(fs);
 800bc62:	f10a 0b01 	add.w	fp, sl, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc66:	07e1      	lsls	r1, r4, #31
			p = fs->win + bc++ % SS(fs);
 800bc68:	f3ca 0308 	ubfx	r3, sl, #0, #9
 800bc6c:	f106 0a30 	add.w	sl, r6, #48	@ 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc70:	ea4f 225b 	mov.w	r2, fp, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc74:	d561      	bpl.n	800bd3a <remove_chain+0x1aa>
 800bc76:	f81a 1003 	ldrb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc7a:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bc7c:	f001 010f 	and.w	r1, r1, #15
 800bc80:	f80a 1003 	strb.w	r1, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc84:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800bc86:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc8a:	4411      	add	r1, r2
 800bc8c:	f7ff fa10 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d18e      	bne.n	800bbb2 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800bc94:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800bc98:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bc9c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800bc9e:	e00c      	b.n	800bcba <remove_chain+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bca0:	6a31      	ldr	r1, [r6, #32]
 800bca2:	4630      	mov	r0, r6
 800bca4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800bca8:	f7ff fa02 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d180      	bne.n	800bbb2 <remove_chain+0x22>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bcb0:	0064      	lsls	r4, r4, #1
 800bcb2:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800bcb6:	4434      	add	r4, r6
 800bcb8:	8620      	strh	r0, [r4, #48]	@ 0x30
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bcba:	6972      	ldr	r2, [r6, #20]
 800bcbc:	6933      	ldr	r3, [r6, #16]
 800bcbe:	1e91      	subs	r1, r2, #2
			fs->wflag = 1;
 800bcc0:	70f7      	strb	r7, [r6, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bcc2:	428b      	cmp	r3, r1
 800bcc4:	d205      	bcs.n	800bcd2 <remove_chain+0x142>
			fs->free_clst++;
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	6133      	str	r3, [r6, #16]
			fs->fsi_flag |= 1;
 800bcca:	7933      	ldrb	r3, [r6, #4]
 800bccc:	f043 0301 	orr.w	r3, r3, #1
 800bcd0:	7133      	strb	r3, [r6, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bcd2:	4542      	cmp	r2, r8
 800bcd4:	d965      	bls.n	800bda2 <remove_chain+0x212>
 800bcd6:	f8d5 9000 	ldr.w	r9, [r5]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bcda:	4644      	mov	r4, r8
 800bcdc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bce0:	e764      	b.n	800bbac <remove_chain+0x1c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bce2:	6a31      	ldr	r1, [r6, #32]
 800bce4:	4630      	mov	r0, r6
 800bce6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800bcea:	f7ff f9e1 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	f47f af5f 	bne.w	800bbb2 <remove_chain+0x22>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bcf4:	00a4      	lsls	r4, r4, #2
 800bcf6:	f106 0230 	add.w	r2, r6, #48	@ 0x30
 800bcfa:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800bcfe:	5911      	ldr	r1, [r2, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd00:	5310      	strh	r0, [r2, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd02:	4422      	add	r2, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800bd04:	0e0b      	lsrs	r3, r1, #24
 800bd06:	7090      	strb	r0, [r2, #2]
 800bd08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
	*ptr++ = (BYTE)val;
 800bd0c:	70d3      	strb	r3, [r2, #3]
			if (res != FR_OK) return res;
 800bd0e:	e7d4      	b.n	800bcba <remove_chain+0x12a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd10:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800bd14:	4648      	mov	r0, r9
 800bd16:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800bd1a:	f7ff f9c9 	bl	800b0b0 <move_window>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f47f af6e 	bne.w	800bc00 <remove_chain+0x70>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bd24:	0063      	lsls	r3, r4, #1
 800bd26:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bd2a:	444b      	add	r3, r9
 800bd2c:	f8b3 8030 	ldrh.w	r8, [r3, #48]	@ 0x30
		if (nxt == 0) break;				/* Empty cluster? */
 800bd30:	f1b8 0f00 	cmp.w	r8, #0
 800bd34:	f47f af7a 	bne.w	800bc2c <remove_chain+0x9c>
 800bd38:	e033      	b.n	800bda2 <remove_chain+0x212>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd3a:	f80a 0003 	strb.w	r0, [sl, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd3e:	4630      	mov	r0, r6
 800bd40:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 800bd42:	f886 9003 	strb.w	r9, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd46:	4411      	add	r1, r2
 800bd48:	f7ff f9b2 	bl	800b0b0 <move_window>
			if (res != FR_OK) break;
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f47f af30 	bne.w	800bbb2 <remove_chain+0x22>
			p = fs->win + bc % SS(fs);
 800bd52:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800bd56:	f81a 000b 	ldrb.w	r0, [sl, fp]
 800bd5a:	eb0a 030b 	add.w	r3, sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd5e:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 800bd62:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800bd64:	e7a9      	b.n	800bcba <remove_chain+0x12a>
			wc = fs->win[bc++ % SS(fs)];
 800bd66:	f3c8 0308 	ubfx	r3, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd6a:	f8d9 1020 	ldr.w	r1, [r9, #32]
			wc = fs->win[bc++ % SS(fs)];
 800bd6e:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd72:	4648      	mov	r0, r9
			wc = fs->win[bc++ % SS(fs)];
 800bd74:	444b      	add	r3, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd76:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800bd7a:	f893 a030 	ldrb.w	sl, [r3, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd7e:	f7ff f997 	bl	800b0b0 <move_window>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f47f af3c 	bne.w	800bc00 <remove_chain+0x70>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd88:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd8c:	07e0      	lsls	r0, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd8e:	44c8      	add	r8, r9
 800bd90:	f898 3030 	ldrb.w	r3, [r8, #48]	@ 0x30
 800bd94:	ea4a 2803 	orr.w	r8, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd98:	d505      	bpl.n	800bda6 <remove_chain+0x216>
		if (nxt == 0) break;				/* Empty cluster? */
 800bd9a:	ea5f 1818 	movs.w	r8, r8, lsr #4
 800bd9e:	f47f af45 	bne.w	800bc2c <remove_chain+0x9c>
	return FR_OK;
 800bda2:	2000      	movs	r0, #0
 800bda4:	e705      	b.n	800bbb2 <remove_chain+0x22>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bda6:	f3c8 080b 	ubfx	r8, r8, #0, #12
		if (nxt == 0) break;				/* Empty cluster? */
 800bdaa:	f1b8 0f00 	cmp.w	r8, #0
 800bdae:	f47f af3d 	bne.w	800bc2c <remove_chain+0x9c>
 800bdb2:	e7f6      	b.n	800bda2 <remove_chain+0x212>

0800bdb4 <dir_register>:
{
 800bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	b085      	sub	sp, #20
 800bdba:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800bdbc:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800bdbe:	f7ff fcc5 	bl	800b74c <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	f040 80b2 	bne.w	800bf2c <dir_register+0x178>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bdc8:	f8d6 b02c 	ldr.w	fp, [r6, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdcc:	f106 0330 	add.w	r3, r6, #48	@ 0x30
			res = move_window(fs, dp->sect);
 800bdd0:	f8d4 a01c 	ldr.w	sl, [r4, #28]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	465b      	mov	r3, fp
 800bdd8:	46d3      	mov	fp, sl
 800bdda:	469a      	mov	sl, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bddc:	45d3      	cmp	fp, sl
 800bdde:	d014      	beq.n	800be0a <dir_register+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bde0:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bde2:	7870      	ldrb	r0, [r6, #1]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d15c      	bne.n	800bea2 <dir_register+0xee>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bde8:	2301      	movs	r3, #1
 800bdea:	465a      	mov	r2, fp
 800bdec:	9900      	ldr	r1, [sp, #0]
 800bdee:	f7ff f843 	bl	800ae78 <disk_read>
 800bdf2:	b138      	cbz	r0, 800be04 <dir_register+0x50>
			fs->winsect = sector;
 800bdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf8:	62f3      	str	r3, [r6, #44]	@ 0x2c
				res = FR_DISK_ERR;
 800bdfa:	2501      	movs	r5, #1
}
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	b005      	add	sp, #20
 800be00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800be04:	46da      	mov	sl, fp
 800be06:	f8c6 b02c 	str.w	fp, [r6, #44]	@ 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800be0a:	6a23      	ldr	r3, [r4, #32]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2be5      	cmp	r3, #229	@ 0xe5
 800be10:	d000      	beq.n	800be14 <dir_register+0x60>
 800be12:	bb2b      	cbnz	r3, 800be60 <dir_register+0xac>
		res = move_window(fs, dp->sect);
 800be14:	69e1      	ldr	r1, [r4, #28]
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff f94a 	bl	800b0b0 <move_window>
		if (res == FR_OK) {
 800be1c:	4605      	mov	r5, r0
 800be1e:	2800      	cmp	r0, #0
 800be20:	d1ec      	bne.n	800bdfc <dir_register+0x48>
		*d++ = (BYTE)val;
 800be22:	2220      	movs	r2, #32
 800be24:	4601      	mov	r1, r0
 800be26:	6a20      	ldr	r0, [r4, #32]
 800be28:	f000 fec2 	bl	800cbb0 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800be2c:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800be2e:	f104 0225 	add.w	r2, r4, #37	@ 0x25
 800be32:	1a9a      	subs	r2, r3, r2
 800be34:	2a02      	cmp	r2, #2
 800be36:	f240 80db 	bls.w	800bff0 <dir_register+0x23c>
			*d++ = *s++;
 800be3a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800be40:	605a      	str	r2, [r3, #4]
 800be42:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
}
 800be46:	4628      	mov	r0, r5
			*d++ = *s++;
 800be48:	721a      	strb	r2, [r3, #8]
 800be4a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800be4e:	725a      	strb	r2, [r3, #9]
			fs->wflag = 1;
 800be50:	2201      	movs	r2, #1
			*d++ = *s++;
 800be52:	f894 102e 	ldrb.w	r1, [r4, #46]	@ 0x2e
 800be56:	7299      	strb	r1, [r3, #10]
			fs->wflag = 1;
 800be58:	70f2      	strb	r2, [r6, #3]
}
 800be5a:	b005      	add	sp, #20
 800be5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800be60:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800be62:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800be64:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800be66:	f8d4 b01c 	ldr.w	fp, [r4, #28]
 800be6a:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 800be6e:	d265      	bcs.n	800bf3c <dir_register+0x188>
 800be70:	f1bb 0f00 	cmp.w	fp, #0
 800be74:	d062      	beq.n	800bf3c <dir_register+0x188>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800be76:	f3c5 0908 	ubfx	r9, r5, #0, #9
 800be7a:	f1b9 0f00 	cmp.w	r9, #0
 800be7e:	d109      	bne.n	800be94 <dir_register+0xe0>
		dp->sect++;				/* Next sector */
 800be80:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 800be84:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800be86:	f8c4 b01c 	str.w	fp, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800be8a:	bb51      	cbnz	r1, 800bee2 <dir_register+0x12e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800be8c:	893b      	ldrh	r3, [r7, #8]
 800be8e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800be92:	d952      	bls.n	800bf3a <dir_register+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be94:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800be98:	eb08 0309 	add.w	r3, r8, r9
	dp->dptr = ofs;						/* Current entry */
 800be9c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800be9e:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bea0:	e79c      	b.n	800bddc <dir_register+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bea2:	2301      	movs	r3, #1
 800bea4:	4652      	mov	r2, sl
 800bea6:	9900      	ldr	r1, [sp, #0]
 800bea8:	f7fe fff4 	bl	800ae94 <disk_write>
 800beac:	2800      	cmp	r0, #0
 800beae:	d1a4      	bne.n	800bdfa <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800beb0:	6a33      	ldr	r3, [r6, #32]
			fs->wflag = 0;
 800beb2:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800beb4:	ebaa 0103 	sub.w	r1, sl, r3
 800beb8:	69b3      	ldr	r3, [r6, #24]
 800beba:	4299      	cmp	r1, r3
 800bebc:	d20f      	bcs.n	800bede <dir_register+0x12a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bebe:	78b5      	ldrb	r5, [r6, #2]
 800bec0:	2d01      	cmp	r5, #1
 800bec2:	d90c      	bls.n	800bede <dir_register+0x12a>
 800bec4:	9f00      	ldr	r7, [sp, #0]
 800bec6:	e000      	b.n	800beca <dir_register+0x116>
					wsect += fs->fsize;
 800bec8:	69b3      	ldr	r3, [r6, #24]
 800beca:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800becc:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800bece:	2301      	movs	r3, #1
 800bed0:	4639      	mov	r1, r7
 800bed2:	4652      	mov	r2, sl
 800bed4:	7870      	ldrb	r0, [r6, #1]
 800bed6:	f7fe ffdd 	bl	800ae94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800beda:	2d01      	cmp	r5, #1
 800bedc:	d1f4      	bne.n	800bec8 <dir_register+0x114>
 800bede:	7870      	ldrb	r0, [r6, #1]
 800bee0:	e782      	b.n	800bde8 <dir_register+0x34>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bee2:	897b      	ldrh	r3, [r7, #10]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800beea:	d1d3      	bne.n	800be94 <dir_register+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800beec:	4638      	mov	r0, r7
 800beee:	f7ff fb07 	bl	800b500 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bef2:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bef4:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bef6:	d979      	bls.n	800bfec <dir_register+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800befc:	f43f af7d 	beq.w	800bdfa <dir_register+0x46>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	4298      	cmp	r0, r3
 800bf04:	d21c      	bcs.n	800bf40 <dir_register+0x18c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf06:	3b02      	subs	r3, #2
	clst -= 2;
 800bf08:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf0c:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf10:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 800bf12:	f8c4 a018 	str.w	sl, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf16:	f240 8084 	bls.w	800c022 <dir_register+0x26e>
	return clst * fs->csize + fs->database;
 800bf1a:	897a      	ldrh	r2, [r7, #10]
 800bf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1e:	fb0b 3b02 	mla	fp, fp, r2, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf22:	f8d6 a02c 	ldr.w	sl, [r6, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 800bf26:	f8c4 b01c 	str.w	fp, [r4, #28]
 800bf2a:	e7b5      	b.n	800be98 <dir_register+0xe4>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bf2c:	2804      	cmp	r0, #4
 800bf2e:	4605      	mov	r5, r0
 800bf30:	d004      	beq.n	800bf3c <dir_register+0x188>
}
 800bf32:	4628      	mov	r0, r5
 800bf34:	b005      	add	sp, #20
 800bf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 800bf3a:	61e1      	str	r1, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf3c:	2507      	movs	r5, #7
	return res;
 800bf3e:	e75d      	b.n	800bdfc <dir_register+0x48>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf40:	69a1      	ldr	r1, [r4, #24]
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff fb32 	bl	800b5ac <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf48:	4682      	mov	sl, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0f6      	beq.n	800bf3c <dir_register+0x188>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf4e:	2801      	cmp	r0, #1
 800bf50:	d04c      	beq.n	800bfec <dir_register+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf52:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf56:	f43f af50 	beq.w	800bdfa <dir_register+0x46>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bf5a:	78fb      	ldrb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf5c:	f107 0830 	add.w	r8, r7, #48	@ 0x30
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d16a      	bne.n	800c03a <dir_register+0x286>
		*d++ = (BYTE)val;
 800bf64:	2100      	movs	r1, #0
 800bf66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf6a:	4640      	mov	r0, r8
	clst -= 2;
 800bf6c:	f1aa 0b02 	sub.w	fp, sl, #2
		*d++ = (BYTE)val;
 800bf70:	f000 fe1e 	bl	800cbb0 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf74:	697b      	ldr	r3, [r7, #20]
	return clst * fs->csize + fs->database;
 800bf76:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bf78:	3b02      	subs	r3, #2
 800bf7a:	459b      	cmp	fp, r3
 800bf7c:	f080 8086 	bcs.w	800c08c <dir_register+0x2d8>
	return clst * fs->csize + fs->database;
 800bf80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf82:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf88:	2900      	cmp	r1, #0
 800bf8a:	d054      	beq.n	800c036 <dir_register+0x282>
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	9403      	str	r4, [sp, #12]
 800bf90:	4614      	mov	r4, r2
 800bf92:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800bf96:	460e      	mov	r6, r1
						fs->wflag = 1;
 800bf98:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	4641      	mov	r1, r8
 800bfa0:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800bfa2:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f7fe ff75 	bl	800ae94 <disk_write>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	f47f af25 	bne.w	800bdfa <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
			fs->wflag = 0;
 800bfb2:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bfb4:	1ae1      	subs	r1, r4, r3
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	d20e      	bcs.n	800bfda <dir_register+0x226>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfbc:	78bd      	ldrb	r5, [r7, #2]
 800bfbe:	2d01      	cmp	r5, #1
 800bfc0:	d801      	bhi.n	800bfc6 <dir_register+0x212>
 800bfc2:	e00a      	b.n	800bfda <dir_register+0x226>
					wsect += fs->fsize;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfc8:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4641      	mov	r1, r8
 800bfce:	4622      	mov	r2, r4
 800bfd0:	7878      	ldrb	r0, [r7, #1]
 800bfd2:	f7fe ff5f 	bl	800ae94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfd6:	2d01      	cmp	r5, #1
 800bfd8:	d1f4      	bne.n	800bfc4 <dir_register+0x210>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfdc:	1c73      	adds	r3, r6, #1
 800bfde:	8979      	ldrh	r1, [r7, #10]
 800bfe0:	1c44      	adds	r4, r0, #1
 800bfe2:	428b      	cmp	r3, r1
 800bfe4:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800bfe6:	d21f      	bcs.n	800c028 <dir_register+0x274>
 800bfe8:	461e      	mov	r6, r3
 800bfea:	e7d5      	b.n	800bf98 <dir_register+0x1e4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bfec:	2502      	movs	r5, #2
 800bfee:	e705      	b.n	800bdfc <dir_register+0x48>
			*d++ = *s++;
 800bff0:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 800bffa:	705a      	strb	r2, [r3, #1]
 800bffc:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
 800c000:	709a      	strb	r2, [r3, #2]
 800c002:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 800c006:	70da      	strb	r2, [r3, #3]
 800c008:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800c00c:	711a      	strb	r2, [r3, #4]
 800c00e:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 800c012:	715a      	strb	r2, [r3, #5]
 800c014:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800c018:	719a      	strb	r2, [r3, #6]
 800c01a:	f894 202b 	ldrb.w	r2, [r4, #43]	@ 0x2b
 800c01e:	71da      	strb	r2, [r3, #7]
 800c020:	e70f      	b.n	800be42 <dir_register+0x8e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c022:	f04f 0b00 	mov.w	fp, #0
 800c026:	e77c      	b.n	800bf22 <dir_register+0x16e>
					fs->winsect -= n;							/* Restore window offset */
 800c028:	4631      	mov	r1, r6
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c02a:	697b      	ldr	r3, [r7, #20]
					fs->winsect -= n;							/* Restore window offset */
 800c02c:	9d02      	ldr	r5, [sp, #8]
 800c02e:	9e01      	ldr	r6, [sp, #4]
 800c030:	1a42      	subs	r2, r0, r1
 800c032:	9c03      	ldr	r4, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c034:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800c036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c038:	e76a      	b.n	800bf10 <dir_register+0x15c>
		wsect = fs->winsect;	/* Current sector number */
 800c03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c03c:	2301      	movs	r3, #1
 800c03e:	4641      	mov	r1, r8
 800c040:	7878      	ldrb	r0, [r7, #1]
 800c042:	9201      	str	r2, [sp, #4]
 800c044:	f7fe ff26 	bl	800ae94 <disk_write>
 800c048:	2800      	cmp	r0, #0
 800c04a:	f47f aed6 	bne.w	800bdfa <dir_register+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	9a01      	ldr	r2, [sp, #4]
			fs->wflag = 0;
 800c052:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c054:	1ad1      	subs	r1, r2, r3
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	4299      	cmp	r1, r3
 800c05a:	d283      	bcs.n	800bf64 <dir_register+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c05c:	f897 b002 	ldrb.w	fp, [r7, #2]
 800c060:	f1bb 0f01 	cmp.w	fp, #1
 800c064:	f67f af7e 	bls.w	800bf64 <dir_register+0x1b0>
 800c068:	9401      	str	r4, [sp, #4]
 800c06a:	4614      	mov	r4, r2
 800c06c:	e000      	b.n	800c070 <dir_register+0x2bc>
					wsect += fs->fsize;
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c072:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800c076:	2301      	movs	r3, #1
 800c078:	4641      	mov	r1, r8
 800c07a:	4622      	mov	r2, r4
 800c07c:	7878      	ldrb	r0, [r7, #1]
 800c07e:	f7fe ff09 	bl	800ae94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c082:	f1bb 0f01 	cmp.w	fp, #1
 800c086:	d1f2      	bne.n	800c06e <dir_register+0x2ba>
 800c088:	9c01      	ldr	r4, [sp, #4]
 800c08a:	e76b      	b.n	800bf64 <dir_register+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c08c:	2200      	movs	r2, #0
 800c08e:	e77a      	b.n	800bf86 <dir_register+0x1d2>

0800c090 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c090:	b510      	push	{r4, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800c098:	b1a1      	cbz	r1, 800c0c4 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c09a:	f891 c000 	ldrb.w	ip, [r1]
 800c09e:	f1bc 0f20 	cmp.w	ip, #32
 800c0a2:	d912      	bls.n	800c0ca <f_mount+0x3a>
 800c0a4:	f1bc 0f3a 	cmp.w	ip, #58	@ 0x3a
 800c0a8:	d00f      	beq.n	800c0ca <f_mount+0x3a>
 800c0aa:	4608      	mov	r0, r1
 800c0ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c0b0:	2b20      	cmp	r3, #32
 800c0b2:	d90c      	bls.n	800c0ce <f_mount+0x3e>
 800c0b4:	2b3a      	cmp	r3, #58	@ 0x3a
 800c0b6:	d1f9      	bne.n	800c0ac <f_mount+0x1c>
			i = *tp++ - '0';
 800c0b8:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c0ba:	4288      	cmp	r0, r1
 800c0bc:	d102      	bne.n	800c0c4 <f_mount+0x34>
 800c0be:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c0c2:	d006      	beq.n	800c0d2 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0c4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800c0c6:	b002      	add	sp, #8
 800c0c8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c0ca:	4663      	mov	r3, ip
 800c0cc:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c0ce:	2b3a      	cmp	r3, #58	@ 0x3a
 800c0d0:	d0f2      	beq.n	800c0b8 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c0d2:	4913      	ldr	r1, [pc, #76]	@ (800c120 <f_mount+0x90>)
 800c0d4:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800c0d6:	b143      	cbz	r3, 800c0ea <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0d8:	4812      	ldr	r0, [pc, #72]	@ (800c124 <f_mount+0x94>)
 800c0da:	6804      	ldr	r4, [r0, #0]
 800c0dc:	42a3      	cmp	r3, r4
 800c0de:	d019      	beq.n	800c114 <f_mount+0x84>
 800c0e0:	6904      	ldr	r4, [r0, #16]
 800c0e2:	429c      	cmp	r4, r3
 800c0e4:	d013      	beq.n	800c10e <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	b15b      	cbz	r3, 800c106 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800c0ee:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c0f0:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800c0f2:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800c0f4:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c0f6:	d107      	bne.n	800c108 <f_mount+0x78>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	a901      	add	r1, sp, #4
 800c0fc:	4668      	mov	r0, sp
 800c0fe:	f7ff f815 	bl	800b12c <find_volume>
}
 800c102:	b002      	add	sp, #8
 800c104:	bd10      	pop	{r4, pc}
	FatFs[vol] = fs;					/* Register new fs object */
 800c106:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c108:	2000      	movs	r0, #0
}
 800c10a:	b002      	add	sp, #8
 800c10c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c10e:	2400      	movs	r4, #0
 800c110:	6104      	str	r4, [r0, #16]
 800c112:	e7e8      	b.n	800c0e6 <f_mount+0x56>
 800c114:	2400      	movs	r4, #0
 800c116:	6004      	str	r4, [r0, #0]
 800c118:	6904      	ldr	r4, [r0, #16]
 800c11a:	429c      	cmp	r4, r3
 800c11c:	d1e3      	bne.n	800c0e6 <f_mount+0x56>
 800c11e:	e7f6      	b.n	800c10e <f_mount+0x7e>
 800c120:	240b6a04 	.word	0x240b6a04
 800c124:	240b69e0 	.word	0x240b69e0

0800c128 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12c:	b090      	sub	sp, #64	@ 0x40
 800c12e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c130:	2800      	cmp	r0, #0
 800c132:	d036      	beq.n	800c1a2 <f_open+0x7a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c134:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 800c138:	4616      	mov	r6, r2
 800c13a:	4604      	mov	r4, r0
 800c13c:	a903      	add	r1, sp, #12
 800c13e:	a801      	add	r0, sp, #4
 800c140:	463a      	mov	r2, r7
 800c142:	f7fe fff3 	bl	800b12c <find_volume>
	if (res == FR_OK) {
 800c146:	4605      	mov	r5, r0
 800c148:	b128      	cbz	r0, 800c156 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c14a:	2300      	movs	r3, #0
 800c14c:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800c14e:	4628      	mov	r0, r5
 800c150:	b010      	add	sp, #64	@ 0x40
 800c152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800c156:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c15a:	a804      	add	r0, sp, #16
 800c15c:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800c15e:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c162:	f7ff fb7b 	bl	800b85c <follow_path>
		if (res == FR_OK) {
 800c166:	b9a8      	cbnz	r0, 800c194 <f_open+0x6c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c168:	f99d 303f 	ldrsb.w	r3, [sp, #63]	@ 0x3f
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	db1d      	blt.n	800c1ac <f_open+0x84>
		if (Files[i].fs) {	/* Existing entry */
 800c170:	4ba8      	ldr	r3, [pc, #672]	@ (800c414 <f_open+0x2ec>)
 800c172:	f006 0c3e 	and.w	ip, r6, #62	@ 0x3e
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c176:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f000 8109 	beq.w	800c392 <f_open+0x26a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c180:	4290      	cmp	r0, r2
 800c182:	d060      	beq.n	800c246 <f_open+0x11e>
		if (Files[i].fs) {	/* Existing entry */
 800c184:	6919      	ldr	r1, [r3, #16]
 800c186:	2900      	cmp	r1, #0
 800c188:	d06d      	beq.n	800c266 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c18a:	4291      	cmp	r1, r2
 800c18c:	f000 8116 	beq.w	800c3bc <f_open+0x294>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c190:	2512      	movs	r5, #18
 800c192:	e7da      	b.n	800c14a <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c194:	f016 0f1c 	tst.w	r6, #28
 800c198:	d001      	beq.n	800c19e <f_open+0x76>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c19a:	2804      	cmp	r0, #4
 800c19c:	d008      	beq.n	800c1b0 <f_open+0x88>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	e7d3      	b.n	800c14a <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800c1a2:	2509      	movs	r5, #9
}
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	b010      	add	sp, #64	@ 0x40
 800c1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800c1ac:	2506      	movs	r5, #6
 800c1ae:	e7cc      	b.n	800c14a <f_open+0x22>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1b0:	4b98      	ldr	r3, [pc, #608]	@ (800c414 <f_open+0x2ec>)
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	f000 80f9 	beq.w	800c3ac <f_open+0x284>
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1e7      	bne.n	800c190 <f_open+0x68>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c1c0:	a804      	add	r0, sp, #16
 800c1c2:	f7ff fdf7 	bl	800bdb4 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	f040 811c 	bne.w	800c406 <f_open+0x2de>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c1ce:	f047 0708 	orr.w	r7, r7, #8
				dw = GET_FATTIME();
 800c1d2:	f7fe fd47 	bl	800ac64 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c1d6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c1da:	2320      	movs	r3, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800c1dc:	f8c9 000e 	str.w	r0, [r9, #14]
 800c1e0:	f8c9 0016 	str.w	r0, [r9, #22]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c1e4:	f889 300b 	strb.w	r3, [r9, #11]
	if (fs->fs_type == FS_FAT32) {
 800c1e8:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800c1ec:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d103      	bne.n	800c1fc <f_open+0xd4>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c1f4:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800c1f8:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f8a9 301a 	strh.w	r3, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c202:	f898 2000 	ldrb.w	r2, [r8]
 800c206:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800c208:	f04f 0200 	mov.w	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800c20c:	bf08      	it	eq
 800c20e:	f8a9 3014 	strheq.w	r3, [r9, #20]
					fs->wflag = 1;
 800c212:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800c214:	f8c9 201c 	str.w	r2, [r9, #28]
					fs->wflag = 1;
 800c218:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800c21c:	2e00      	cmp	r6, #0
 800c21e:	f040 80de 	bne.w	800c3de <f_open+0x2b6>
				mode |= FA_MODIFIED;
 800c222:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c226:	2f01      	cmp	r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c228:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c22c:	a804      	add	r0, sp, #16
 800c22e:	bf94      	ite	ls
 800c230:	2100      	movls	r1, #0
 800c232:	2101      	movhi	r1, #1
			fp->dir_ptr = dj.dir;
 800c234:	e9c4 3909 	strd	r3, r9, [r4, #36]	@ 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c238:	f7fe fe46 	bl	800aec8 <inc_lock>
 800c23c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c23e:	2800      	cmp	r0, #0
 800c240:	d143      	bne.n	800c2ca <f_open+0x1a2>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c242:	2502      	movs	r5, #2
 800c244:	e781      	b.n	800c14a <f_open+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c24c:	4572      	cmp	r2, lr
 800c24e:	f000 80b9 	beq.w	800c3c4 <f_open+0x29c>
		if (Files[i].fs) {	/* Existing entry */
 800c252:	691a      	ldr	r2, [r3, #16]
 800c254:	b13a      	cbz	r2, 800c266 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c256:	4282      	cmp	r2, r0
 800c258:	d19a      	bne.n	800c190 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c25a:	4628      	mov	r0, r5
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c25c:	695a      	ldr	r2, [r3, #20]
 800c25e:	4572      	cmp	r2, lr
 800c260:	d00d      	beq.n	800c27e <f_open+0x156>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c262:	2800      	cmp	r0, #0
 800c264:	d094      	beq.n	800c190 <f_open+0x68>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c266:	f016 0f1c 	tst.w	r6, #28
 800c26a:	d018      	beq.n	800c29e <f_open+0x176>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c26c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c270:	f013 0f11 	tst.w	r3, #17
 800c274:	d120      	bne.n	800c2b8 <f_open+0x190>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c276:	0773      	lsls	r3, r6, #29
 800c278:	d520      	bpl.n	800c2bc <f_open+0x194>
 800c27a:	2508      	movs	r5, #8
 800c27c:	e765      	b.n	800c14a <f_open+0x22>
				Files[i].clu == dp->obj.sclust &&
 800c27e:	6999      	ldr	r1, [r3, #24]
 800c280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c282:	4291      	cmp	r1, r2
 800c284:	d1ed      	bne.n	800c262 <f_open+0x13a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c286:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c288:	f1bc 0f00 	cmp.w	ip, #0
 800c28c:	d105      	bne.n	800c29a <f_open+0x172>
 800c28e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800c292:	899b      	ldrh	r3, [r3, #12]
 800c294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c298:	d1e5      	bne.n	800c266 <f_open+0x13e>
 800c29a:	2510      	movs	r5, #16
 800c29c:	e755      	b.n	800c14a <f_open+0x22>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c29e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800c2a2:	06d8      	lsls	r0, r3, #27
 800c2a4:	d40f      	bmi.n	800c2c6 <f_open+0x19e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c2a6:	07b2      	lsls	r2, r6, #30
 800c2a8:	d501      	bpl.n	800c2ae <f_open+0x186>
 800c2aa:	07db      	lsls	r3, r3, #31
 800c2ac:	d404      	bmi.n	800c2b8 <f_open+0x190>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c2ae:	0730      	lsls	r0, r6, #28
			fp->dir_ptr = dj.dir;
 800c2b0:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c2b4:	d5b7      	bpl.n	800c226 <f_open+0xfe>
 800c2b6:	e7b4      	b.n	800c222 <f_open+0xfa>
					res = FR_DENIED;
 800c2b8:	2507      	movs	r5, #7
 800c2ba:	e746      	b.n	800c14a <f_open+0x22>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c2bc:	0736      	lsls	r6, r6, #28
			fp->dir_ptr = dj.dir;
 800c2be:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c2c2:	d5b0      	bpl.n	800c226 <f_open+0xfe>
 800c2c4:	e785      	b.n	800c1d2 <f_open+0xaa>
					res = FR_NO_FILE;
 800c2c6:	2504      	movs	r5, #4
 800c2c8:	e73f      	b.n	800c14a <f_open+0x22>
	if (fs->fs_type == FS_FAT32) {
 800c2ca:	f898 3000 	ldrb.w	r3, [r8]
	cl = ld_word(dir + DIR_FstClusLO);
 800c2ce:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32) {
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d103      	bne.n	800c2de <f_open+0x1b6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c2d6:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800c2da:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c2de:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 800c2e0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c2e4:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c2e6:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
	rv = rv << 8 | ptr[0];
 800c2ea:	f8d9 901c 	ldr.w	r9, [r9, #28]
		*d++ = (BYTE)val;
 800c2ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c2f2:	62e1      	str	r1, [r4, #44]	@ 0x2c
		*d++ = (BYTE)val;
 800c2f4:	4650      	mov	r0, sl
			fp->err = 0;			/* Clear error flag */
 800c2f6:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c2f8:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c2fa:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c2fc:	f8c4 8000 	str.w	r8, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c300:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->obj.id = fs->id;
 800c304:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800c306:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 800c308:	f000 fc52 	bl	800cbb0 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c30c:	06b9      	lsls	r1, r7, #26
 800c30e:	f57f af1e 	bpl.w	800c14e <f_open+0x26>
 800c312:	f1b9 0f00 	cmp.w	r9, #0
 800c316:	f43f af1a 	beq.w	800c14e <f_open+0x26>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c31a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c31e:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c322:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c326:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c32a:	d96e      	bls.n	800c40a <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800c32c:	4631      	mov	r1, r6
 800c32e:	6820      	ldr	r0, [r4, #0]
 800c330:	f7ff f8e6 	bl	800b500 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800c334:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c336:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800c33a:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800c33c:	d934      	bls.n	800c3a8 <f_open+0x280>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c33e:	1c42      	adds	r2, r0, #1
 800c340:	d001      	beq.n	800c346 <f_open+0x21e>
 800c342:	454f      	cmp	r7, r9
 800c344:	d3f2      	bcc.n	800c32c <f_open+0x204>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c346:	1c73      	adds	r3, r6, #1
				fp->clust = clst;
 800c348:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c34a:	d020      	beq.n	800c38e <f_open+0x266>
 800c34c:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800c350:	2b00      	cmp	r3, #0
 800c352:	f43f aefc 	beq.w	800c14e <f_open+0x26>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c356:	f8d8 3014 	ldr.w	r3, [r8, #20]
	clst -= 2;
 800c35a:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c35c:	3b02      	subs	r3, #2
 800c35e:	429e      	cmp	r6, r3
 800c360:	f4bf af6f 	bcs.w	800c242 <f_open+0x11a>
	return clst * fs->csize + fs->database;
 800c364:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c368:	f8d8 2028 	ldr.w	r2, [r8, #40]	@ 0x28
 800c36c:	fb06 2203 	mla	r2, r6, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c370:	2a00      	cmp	r2, #0
 800c372:	f43f af66 	beq.w	800c242 <f_open+0x11a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c376:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c37a:	4651      	mov	r1, sl
 800c37c:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c37e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c380:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c384:	f7fe fd78 	bl	800ae78 <disk_read>
 800c388:	2800      	cmp	r0, #0
 800c38a:	f43f aee0 	beq.w	800c14e <f_open+0x26>
 800c38e:	2501      	movs	r5, #1
 800c390:	e6db      	b.n	800c14a <f_open+0x22>
		if (Files[i].fs) {	/* Existing entry */
 800c392:	6919      	ldr	r1, [r3, #16]
 800c394:	2900      	cmp	r1, #0
 800c396:	f43f af66 	beq.w	800c266 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c39a:	4291      	cmp	r1, r2
 800c39c:	f47f af63 	bne.w	800c266 <f_open+0x13e>
			be = 1;
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c3a6:	e759      	b.n	800c25c <f_open+0x134>
				fp->clust = clst;
 800c3a8:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c3aa:	e74a      	b.n	800c242 <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3ac:	a804      	add	r0, sp, #16
 800c3ae:	f7ff fd01 	bl	800bdb4 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	f43f af0b 	beq.w	800c1ce <f_open+0xa6>
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	e6c6      	b.n	800c14a <f_open+0x22>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c3c2:	e74b      	b.n	800c25c <f_open+0x134>
				Files[i].clu == dp->obj.sclust &&
 800c3c4:	689a      	ldr	r2, [r3, #8]
 800c3c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3c8:	4291      	cmp	r1, r2
 800c3ca:	d020      	beq.n	800c40e <f_open+0x2e6>
		if (Files[i].fs) {	/* Existing entry */
 800c3cc:	691a      	ldr	r2, [r3, #16]
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	f43f af49 	beq.w	800c266 <f_open+0x13e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c3d4:	4290      	cmp	r0, r2
 800c3d6:	f47f aedb 	bne.w	800c190 <f_open+0x68>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e73e      	b.n	800c25c <f_open+0x134>
						res = remove_chain(&dj.obj, cl, 0);
 800c3de:	4631      	mov	r1, r6
 800c3e0:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800c3e2:	f8d8 a02c 	ldr.w	sl, [r8, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 800c3e6:	f7ff fbd3 	bl	800bb90 <remove_chain>
						if (res == FR_OK) {
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	f47f aed7 	bne.w	800c19e <f_open+0x76>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c3f0:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800c3f2:	4651      	mov	r1, sl
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	f7fe fe5b 	bl	800b0b0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c3fa:	f8c8 600c 	str.w	r6, [r8, #12]
		if (res == FR_OK) {
 800c3fe:	4603      	mov	r3, r0
 800c400:	2800      	cmp	r0, #0
 800c402:	f43f af0e 	beq.w	800c222 <f_open+0xfa>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c406:	461d      	mov	r5, r3
 800c408:	e69f      	b.n	800c14a <f_open+0x22>
				fp->clust = clst;
 800c40a:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c40c:	e79e      	b.n	800c34c <f_open+0x224>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c40e:	462a      	mov	r2, r5
 800c410:	e73a      	b.n	800c288 <f_open+0x160>
 800c412:	bf00      	nop
 800c414:	240b69e0 	.word	0x240b69e0

0800c418 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800c41e:	2300      	movs	r3, #0
{
 800c420:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800c422:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c424:	b150      	cbz	r0, 800c43c <f_read+0x24>
 800c426:	6803      	ldr	r3, [r0, #0]
 800c428:	4604      	mov	r4, r0
 800c42a:	b13b      	cbz	r3, 800c43c <f_read+0x24>
 800c42c:	4691      	mov	r9, r2
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	b122      	cbz	r2, 800c43c <f_read+0x24>
 800c432:	460e      	mov	r6, r1
 800c434:	88da      	ldrh	r2, [r3, #6]
 800c436:	8881      	ldrh	r1, [r0, #4]
 800c438:	4291      	cmp	r1, r2
 800c43a:	d004      	beq.n	800c446 <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 800c43c:	2509      	movs	r5, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800c43e:	4628      	mov	r0, r5
 800c440:	b003      	add	sp, #12
 800c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c446:	7858      	ldrb	r0, [r3, #1]
 800c448:	f7fe fcf6 	bl	800ae38 <disk_status>
 800c44c:	07c2      	lsls	r2, r0, #31
 800c44e:	d4f5      	bmi.n	800c43c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c450:	7d65      	ldrb	r5, [r4, #21]
 800c452:	2d00      	cmp	r5, #0
 800c454:	d1f3      	bne.n	800c43e <f_read+0x26>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c456:	7d23      	ldrb	r3, [r4, #20]
 800c458:	f013 0b01 	ands.w	fp, r3, #1
 800c45c:	f000 80d9 	beq.w	800c612 <f_read+0x1fa>
	remain = fp->obj.objsize - fp->fptr;
 800c460:	69a0      	ldr	r0, [r4, #24]
 800c462:	68e3      	ldr	r3, [r4, #12]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c464:	f8d4 a000 	ldr.w	sl, [r4]
	remain = fp->obj.objsize - fp->fptr;
 800c468:	eba3 0800 	sub.w	r8, r3, r0
 800c46c:	45c8      	cmp	r8, r9
 800c46e:	bf28      	it	cs
 800c470:	46c8      	movcs	r8, r9
	for ( ;  btr;								/* Repeat until all data read */
 800c472:	f1b8 0f00 	cmp.w	r8, #0
 800c476:	d0e2      	beq.n	800c43e <f_read+0x26>
 800c478:	9500      	str	r5, [sp, #0]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c47a:	f3c0 0c08 	ubfx	ip, r0, #0, #9
 800c47e:	f1bc 0f00 	cmp.w	ip, #0
 800c482:	d152      	bne.n	800c52a <f_read+0x112>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c484:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800c488:	0a43      	lsrs	r3, r0, #9
 800c48a:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800c48c:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 800c490:	d036      	beq.n	800c500 <f_read+0xe8>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c492:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c494:	f8da 3014 	ldr.w	r3, [sl, #20]
	clst -= 2;
 800c498:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c49a:	3b02      	subs	r3, #2
 800c49c:	4298      	cmp	r0, r3
 800c49e:	d23d      	bcs.n	800c51c <f_read+0x104>
	return clst * fs->csize + fs->database;
 800c4a0:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800c4a4:	f8da 3028 	ldr.w	r3, [sl, #40]	@ 0x28
 800c4a8:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d035      	beq.n	800c51c <f_read+0x104>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c4b0:	f5b8 7f00 	cmp.w	r8, #512	@ 0x200
			sect += csect;
 800c4b4:	eb02 0903 	add.w	r9, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c4b8:	d378      	bcc.n	800c5ac <f_read+0x194>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4ba:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c4be:	ea4f 2558 	mov.w	r5, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4c2:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4c4:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 800c4c8:	bf88      	it	hi
 800c4ca:	1a8d      	subhi	r5, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4cc:	464a      	mov	r2, r9
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	462b      	mov	r3, r5
 800c4d2:	f7fe fcd1 	bl	800ae78 <disk_read>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f040 8094 	bne.w	800c604 <f_read+0x1ec>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c4dc:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	f2c0 80ad 	blt.w	800c640 <f_read+0x228>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c4e6:	026a      	lsls	r2, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c4e8:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800c4ea:	ebb8 0802 	subs.w	r8, r8, r2
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	4416      	add	r6, r2
 800c4f2:	4410      	add	r0, r2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	61a0      	str	r0, [r4, #24]
 800c4f8:	603b      	str	r3, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800c4fa:	d1be      	bne.n	800c47a <f_read+0x62>
 800c4fc:	9d00      	ldr	r5, [sp, #0]
 800c4fe:	e79e      	b.n	800c43e <f_read+0x26>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c500:	2800      	cmp	r0, #0
 800c502:	d16b      	bne.n	800c5dc <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c504:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c506:	2801      	cmp	r0, #1
 800c508:	d908      	bls.n	800c51c <f_read+0x104>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d07a      	beq.n	800c604 <f_read+0x1ec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c50e:	f8da 3014 	ldr.w	r3, [sl, #20]
				fp->clust = clst;				/* Update current cluster */
 800c512:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800c514:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c516:	3b02      	subs	r3, #2
 800c518:	4298      	cmp	r0, r3
 800c51a:	d3c1      	bcc.n	800c4a0 <f_read+0x88>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c51c:	2302      	movs	r3, #2
 800c51e:	461d      	mov	r5, r3
 800c520:	7563      	strb	r3, [r4, #21]
}
 800c522:	4628      	mov	r0, r5
 800c524:	b003      	add	sp, #12
 800c526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c52a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c52e:	f5cc 7300 	rsb	r3, ip, #512	@ 0x200
 800c532:	4543      	cmp	r3, r8
 800c534:	bf28      	it	cs
 800c536:	4643      	movcs	r3, r8
 800c538:	461a      	mov	r2, r3
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c53a:	eb01 030c 	add.w	r3, r1, ip
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c53e:	1e50      	subs	r0, r2, #1
 800c540:	2805      	cmp	r0, #5
 800c542:	d905      	bls.n	800c550 <f_read+0x138>
 800c544:	f10c 0c01 	add.w	ip, ip, #1
 800c548:	4461      	add	r1, ip
 800c54a:	1a71      	subs	r1, r6, r1
 800c54c:	2902      	cmp	r1, #2
 800c54e:	d809      	bhi.n	800c564 <f_read+0x14c>
 800c550:	1e71      	subs	r1, r6, #1
 800c552:	eb03 0c02 	add.w	ip, r3, r2
			*d++ = *s++;
 800c556:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800c55a:	4563      	cmp	r3, ip
			*d++ = *s++;
 800c55c:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800c560:	d1f9      	bne.n	800c556 <f_read+0x13e>
 800c562:	e7c1      	b.n	800c4e8 <f_read+0xd0>
 800c564:	f022 0e03 	bic.w	lr, r2, #3
 800c568:	4619      	mov	r1, r3
 800c56a:	4630      	mov	r0, r6
 800c56c:	449e      	add	lr, r3
			*d++ = *s++;
 800c56e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c572:	4571      	cmp	r1, lr
 800c574:	f840 5b04 	str.w	r5, [r0], #4
		} while (--cnt);
 800c578:	d1f9      	bne.n	800c56e <f_read+0x156>
 800c57a:	f022 0103 	bic.w	r1, r2, #3
 800c57e:	0795      	lsls	r5, r2, #30
 800c580:	f002 0003 	and.w	r0, r2, #3
 800c584:	eb06 0c01 	add.w	ip, r6, r1
 800c588:	eb03 0e01 	add.w	lr, r3, r1
 800c58c:	d0ac      	beq.n	800c4e8 <f_read+0xd0>
			*d++ = *s++;
 800c58e:	5c5b      	ldrb	r3, [r3, r1]
		} while (--cnt);
 800c590:	2801      	cmp	r0, #1
			*d++ = *s++;
 800c592:	5473      	strb	r3, [r6, r1]
		} while (--cnt);
 800c594:	d0a8      	beq.n	800c4e8 <f_read+0xd0>
			*d++ = *s++;
 800c596:	f89e 3001 	ldrb.w	r3, [lr, #1]
		} while (--cnt);
 800c59a:	2802      	cmp	r0, #2
			*d++ = *s++;
 800c59c:	f88c 3001 	strb.w	r3, [ip, #1]
		} while (--cnt);
 800c5a0:	d0a2      	beq.n	800c4e8 <f_read+0xd0>
			*d++ = *s++;
 800c5a2:	f89e 3002 	ldrb.w	r3, [lr, #2]
 800c5a6:	f88c 3002 	strb.w	r3, [ip, #2]
		} while (--cnt);
 800c5aa:	e79d      	b.n	800c4e8 <f_read+0xd0>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c5ac:	6a22      	ldr	r2, [r4, #32]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c5ae:	f104 0130 	add.w	r1, r4, #48	@ 0x30
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c5b2:	454a      	cmp	r2, r9
 800c5b4:	d00c      	beq.n	800c5d0 <f_read+0x1b8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c5b6:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5ba:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	db30      	blt.n	800c624 <f_read+0x20c>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	464a      	mov	r2, r9
 800c5c6:	9101      	str	r1, [sp, #4]
 800c5c8:	f7fe fc56 	bl	800ae78 <disk_read>
 800c5cc:	9901      	ldr	r1, [sp, #4]
 800c5ce:	b9c8      	cbnz	r0, 800c604 <f_read+0x1ec>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c5d0:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800c5d2:	f8c4 9020 	str.w	r9, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c5d6:	f3c3 0c08 	ubfx	ip, r3, #0, #9
 800c5da:	e7a8      	b.n	800c52e <f_read+0x116>
					if (fp->cltbl) {
 800c5dc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	FATFS *fs = fp->obj.fs;
 800c5de:	6821      	ldr	r1, [r4, #0]
					if (fp->cltbl) {
 800c5e0:	b1c8      	cbz	r0, 800c616 <f_read+0x1fe>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c5e2:	8949      	ldrh	r1, [r1, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c5e4:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c5e6:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c5ea:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c5ec:	b929      	cbnz	r1, 800c5fa <f_read+0x1e2>
 800c5ee:	e795      	b.n	800c51c <f_read+0x104>
		cl -= ncl; tbl++;		/* Next fragment */
 800c5f0:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c5f2:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c5f6:	2900      	cmp	r1, #0
 800c5f8:	d090      	beq.n	800c51c <f_read+0x104>
		if (cl < ncl) break;	/* In this fragment? */
 800c5fa:	428b      	cmp	r3, r1
 800c5fc:	d2f8      	bcs.n	800c5f0 <f_read+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 800c5fe:	6840      	ldr	r0, [r0, #4]
 800c600:	4418      	add	r0, r3
 800c602:	e780      	b.n	800c506 <f_read+0xee>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c604:	465d      	mov	r5, fp
 800c606:	2301      	movs	r3, #1
}
 800c608:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c60a:	7563      	strb	r3, [r4, #21]
}
 800c60c:	b003      	add	sp, #12
 800c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c612:	2507      	movs	r5, #7
 800c614:	e713      	b.n	800c43e <f_read+0x26>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c616:	4608      	mov	r0, r1
 800c618:	69e1      	ldr	r1, [r4, #28]
 800c61a:	9201      	str	r2, [sp, #4]
 800c61c:	f7fe ff70 	bl	800b500 <get_fat.isra.0>
 800c620:	9a01      	ldr	r2, [sp, #4]
 800c622:	e770      	b.n	800c506 <f_read+0xee>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c624:	2301      	movs	r3, #1
 800c626:	9101      	str	r1, [sp, #4]
 800c628:	f7fe fc34 	bl	800ae94 <disk_write>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d1e9      	bne.n	800c604 <f_read+0x1ec>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c630:	7d23      	ldrb	r3, [r4, #20]
 800c632:	9901      	ldr	r1, [sp, #4]
 800c634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c638:	7523      	strb	r3, [r4, #20]
 800c63a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800c63e:	e7c0      	b.n	800c5c2 <f_read+0x1aa>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c640:	6a22      	ldr	r2, [r4, #32]
 800c642:	eba2 0209 	sub.w	r2, r2, r9
 800c646:	42aa      	cmp	r2, r5
 800c648:	f4bf af4d 	bcs.w	800c4e6 <f_read+0xce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c64c:	eb06 2242 	add.w	r2, r6, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c650:	f104 0131 	add.w	r1, r4, #49	@ 0x31
 800c654:	1a51      	subs	r1, r2, r1
 800c656:	2902      	cmp	r1, #2
 800c658:	d90a      	bls.n	800c670 <f_read+0x258>
 800c65a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c65e:	f502 7c00 	add.w	ip, r2, #512	@ 0x200
			*d++ = *s++;
 800c662:	f851 3b04 	ldr.w	r3, [r1], #4
 800c666:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800c66a:	4562      	cmp	r2, ip
 800c66c:	d1f9      	bne.n	800c662 <f_read+0x24a>
 800c66e:	e73a      	b.n	800c4e6 <f_read+0xce>
 800c670:	3a01      	subs	r2, #1
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c672:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c676:	f504 7c0c 	add.w	ip, r4, #560	@ 0x230
			*d++ = *s++;
 800c67a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800c67e:	458c      	cmp	ip, r1
			*d++ = *s++;
 800c680:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800c684:	d1f9      	bne.n	800c67a <f_read+0x262>
 800c686:	e72e      	b.n	800c4e6 <f_read+0xce>

0800c688 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c688:	b158      	cbz	r0, 800c6a2 <f_close+0x1a>
 800c68a:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c690:	b12b      	cbz	r3, 800c69e <f_close+0x16>
 800c692:	781a      	ldrb	r2, [r3, #0]
 800c694:	b11a      	cbz	r2, 800c69e <f_close+0x16>
 800c696:	8881      	ldrh	r1, [r0, #4]
 800c698:	88da      	ldrh	r2, [r3, #6]
 800c69a:	4291      	cmp	r1, r2
 800c69c:	d003      	beq.n	800c6a6 <f_close+0x1e>
{
 800c69e:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800c6a0:	bd70      	pop	{r4, r5, r6, pc}
{
 800c6a2:	2009      	movs	r0, #9
}
 800c6a4:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6a6:	7858      	ldrb	r0, [r3, #1]
 800c6a8:	f7fe fbc6 	bl	800ae38 <disk_status>
 800c6ac:	07c1      	lsls	r1, r0, #31
 800c6ae:	d4f6      	bmi.n	800c69e <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c6b0:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c6b2:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c6b4:	065a      	lsls	r2, r3, #25
 800c6b6:	d52e      	bpl.n	800c716 <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c6b8:	061b      	lsls	r3, r3, #24
 800c6ba:	d451      	bmi.n	800c760 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800c6bc:	f7fe fad2 	bl	800ac64 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800c6c0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 800c6c2:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f7fe fcf3 	bl	800b0b0 <move_window>
				if (res == FR_OK) {
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d1e8      	bne.n	800c6a0 <f_close+0x18>
					dir = fp->dir_ptr;
 800c6ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c6d0:	7ada      	ldrb	r2, [r3, #11]
 800c6d2:	f042 0220 	orr.w	r2, r2, #32
 800c6d6:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c6d8:	68a2      	ldr	r2, [r4, #8]
 800c6da:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6dc:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800c6e0:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800c6e2:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800c6e4:	7809      	ldrb	r1, [r1, #0]
 800c6e6:	2903      	cmp	r1, #3
 800c6e8:	d103      	bne.n	800c6f2 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c6ea:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800c6ec:	751a      	strb	r2, [r3, #20]
 800c6ee:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800c6f0:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6f2:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6f4:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800c6f6:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c6fa:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800c6fc:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6fe:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800c700:	2301      	movs	r3, #1
 800c702:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c704:	f7fe fc76 	bl	800aff4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c708:	7d23      	ldrb	r3, [r4, #20]
 800c70a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c70e:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800c710:	2800      	cmp	r0, #0
 800c712:	d1c5      	bne.n	800c6a0 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c714:	6825      	ldr	r5, [r4, #0]
 800c716:	2d00      	cmp	r5, #0
 800c718:	d0c1      	beq.n	800c69e <f_close+0x16>
 800c71a:	782b      	ldrb	r3, [r5, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d0be      	beq.n	800c69e <f_close+0x16>
 800c720:	88a2      	ldrh	r2, [r4, #4]
 800c722:	88eb      	ldrh	r3, [r5, #6]
 800c724:	429a      	cmp	r2, r3
 800c726:	d1ba      	bne.n	800c69e <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c728:	7868      	ldrb	r0, [r5, #1]
 800c72a:	f7fe fb85 	bl	800ae38 <disk_status>
 800c72e:	f010 0001 	ands.w	r0, r0, #1
 800c732:	d1b4      	bne.n	800c69e <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c734:	6923      	ldr	r3, [r4, #16]
 800c736:	3b01      	subs	r3, #1
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d81e      	bhi.n	800c77a <f_close+0xf2>
		n = Files[i].ctr;
 800c73c:	4912      	ldr	r1, [pc, #72]	@ (800c788 <f_close+0x100>)
 800c73e:	011d      	lsls	r5, r3, #4
 800c740:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800c744:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c746:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800c74a:	d01a      	beq.n	800c782 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800c74c:	b11a      	cbz	r2, 800c756 <f_close+0xce>
 800c74e:	3a01      	subs	r2, #1
 800c750:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800c752:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c754:	b90a      	cbnz	r2, 800c75a <f_close+0xd2>
 800c756:	2300      	movs	r3, #0
 800c758:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800c75a:	2300      	movs	r3, #0
 800c75c:	6023      	str	r3, [r4, #0]
}
 800c75e:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c760:	2301      	movs	r3, #1
 800c762:	6a22      	ldr	r2, [r4, #32]
 800c764:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800c768:	7868      	ldrb	r0, [r5, #1]
 800c76a:	f7fe fb93 	bl	800ae94 <disk_write>
 800c76e:	b930      	cbnz	r0, 800c77e <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c770:	7d23      	ldrb	r3, [r4, #20]
 800c772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c776:	7523      	strb	r3, [r4, #20]
 800c778:	e7a0      	b.n	800c6bc <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c77a:	2002      	movs	r0, #2
}
 800c77c:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c77e:	2001      	movs	r0, #1
}
 800c780:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800c782:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c784:	e7e7      	b.n	800c756 <f_close+0xce>
 800c786:	bf00      	nop
 800c788:	240b69e0 	.word	0x240b69e0

0800c78c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c790:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c792:	b148      	cbz	r0, 800c7a8 <f_lseek+0x1c>
 800c794:	6803      	ldr	r3, [r0, #0]
 800c796:	4604      	mov	r4, r0
 800c798:	b133      	cbz	r3, 800c7a8 <f_lseek+0x1c>
 800c79a:	781a      	ldrb	r2, [r3, #0]
 800c79c:	b122      	cbz	r2, 800c7a8 <f_lseek+0x1c>
 800c79e:	460e      	mov	r6, r1
 800c7a0:	88da      	ldrh	r2, [r3, #6]
 800c7a2:	8881      	ldrh	r1, [r0, #4]
 800c7a4:	4291      	cmp	r1, r2
 800c7a6:	d004      	beq.n	800c7b2 <f_lseek+0x26>
	FRESULT res = FR_INVALID_OBJECT;
 800c7a8:	2509      	movs	r5, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	b005      	add	sp, #20
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c7b2:	7858      	ldrb	r0, [r3, #1]
 800c7b4:	f7fe fb40 	bl	800ae38 <disk_status>
 800c7b8:	07c3      	lsls	r3, r0, #31
 800c7ba:	d4f5      	bmi.n	800c7a8 <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c7bc:	7d65      	ldrb	r5, [r4, #21]
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c7be:	2d00      	cmp	r5, #0
 800c7c0:	d1f3      	bne.n	800c7aa <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 800c7c2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c7c4:	f8d4 9000 	ldr.w	r9, [r4]
	if (fp->cltbl) {	/* Fast seek */
 800c7c8:	b1f8      	cbz	r0, 800c80a <f_lseek+0x7e>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c7ca:	1c77      	adds	r7, r6, #1
 800c7cc:	d05d      	beq.n	800c88a <f_lseek+0xfe>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	429e      	cmp	r6, r3
 800c7d2:	bf28      	it	cs
 800c7d4:	461e      	movcs	r6, r3
			fp->fptr = ofs;				/* Set file pointer */
 800c7d6:	61a6      	str	r6, [r4, #24]
			if (ofs) {
 800c7d8:	2e00      	cmp	r6, #0
 800c7da:	d0e6      	beq.n	800c7aa <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c7dc:	f106 3cff 	add.w	ip, r6, #4294967295
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c7e0:	f8b9 700a 	ldrh.w	r7, [r9, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c7e4:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c7e6:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c7e8:	ea4f 2c5c 	mov.w	ip, ip, lsr #9
 800c7ec:	fbbc f1f7 	udiv	r1, ip, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c7f0:	b92b      	cbnz	r3, 800c7fe <f_lseek+0x72>
 800c7f2:	e05f      	b.n	800c8b4 <f_lseek+0x128>
		cl -= ncl; tbl++;		/* Next fragment */
 800c7f4:	1ac9      	subs	r1, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c7f6:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d05a      	beq.n	800c8b4 <f_lseek+0x128>
		if (cl < ncl) break;	/* In this fragment? */
 800c7fe:	428b      	cmp	r3, r1
 800c800:	d9f8      	bls.n	800c7f4 <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 800c802:	6853      	ldr	r3, [r2, #4]
 800c804:	440b      	add	r3, r1
	clst -= 2;
 800c806:	1e99      	subs	r1, r3, #2
	return cl + *tbl;	/* Return the cluster number */
 800c808:	e056      	b.n	800c8b8 <f_lseek+0x12c>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c80a:	68e2      	ldr	r2, [r4, #12]
		ifptr = fp->fptr;
 800c80c:	69a3      	ldr	r3, [r4, #24]
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c80e:	42b2      	cmp	r2, r6
 800c810:	d204      	bcs.n	800c81c <f_lseek+0x90>
 800c812:	7d21      	ldrb	r1, [r4, #20]
 800c814:	0788      	lsls	r0, r1, #30
 800c816:	f100 809b 	bmi.w	800c950 <f_lseek+0x1c4>
 800c81a:	4616      	mov	r6, r2
		fp->fptr = nsect = 0;
 800c81c:	2200      	movs	r2, #0
 800c81e:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 800c820:	2e00      	cmp	r6, #0
 800c822:	d0c2      	beq.n	800c7aa <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c824:	f8b9 800a 	ldrh.w	r8, [r9, #10]
 800c828:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d16e      	bne.n	800c90e <f_lseek+0x182>
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c830:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c832:	2f00      	cmp	r7, #0
 800c834:	f000 811e 	beq.w	800ca74 <f_lseek+0x2e8>
				fp->clust = clst;
 800c838:	2300      	movs	r3, #0
 800c83a:	61e7      	str	r7, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c83c:	45b0      	cmp	r8, r6
 800c83e:	f080 8155 	bcs.w	800caec <f_lseek+0x360>
 800c842:	4639      	mov	r1, r7
 800c844:	e014      	b.n	800c870 <f_lseek+0xe4>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c846:	f7fe feb1 	bl	800b5ac <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c84a:	4601      	mov	r1, r0
 800c84c:	2800      	cmp	r0, #0
 800c84e:	f000 8148 	beq.w	800cae2 <f_lseek+0x356>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c852:	1c4b      	adds	r3, r1, #1
 800c854:	f000 80c7 	beq.w	800c9e6 <f_lseek+0x25a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c858:	2901      	cmp	r1, #1
 800c85a:	d91d      	bls.n	800c898 <f_lseek+0x10c>
 800c85c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c860:	428b      	cmp	r3, r1
 800c862:	d919      	bls.n	800c898 <f_lseek+0x10c>
				fp->fptr += ofs;
 800c864:	69a2      	ldr	r2, [r4, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 800c866:	45b0      	cmp	r8, r6
					fp->clust = clst;
 800c868:	61e1      	str	r1, [r4, #28]
				fp->fptr += ofs;
 800c86a:	4613      	mov	r3, r2
				while (ofs > bcs) {						/* Cluster following loop */
 800c86c:	f080 8120 	bcs.w	800cab0 <f_lseek+0x324>
					ofs -= bcs; fp->fptr += bcs;
 800c870:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c872:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 800c874:	eba6 0608 	sub.w	r6, r6, r8
 800c878:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c87a:	7d23      	ldrb	r3, [r4, #20]
 800c87c:	079a      	lsls	r2, r3, #30
 800c87e:	d4e2      	bmi.n	800c846 <f_lseek+0xba>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c880:	6820      	ldr	r0, [r4, #0]
 800c882:	f7fe fe3d 	bl	800b500 <get_fat.isra.0>
 800c886:	4601      	mov	r1, r0
 800c888:	e7e3      	b.n	800c852 <f_lseek+0xc6>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c88a:	4680      	mov	r8, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c88c:	68a2      	ldr	r2, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c88e:	f858 1b04 	ldr.w	r1, [r8], #4
			if (cl) {
 800c892:	b12a      	cbz	r2, 800c8a0 <f_lseek+0x114>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c894:	2a01      	cmp	r2, #1
 800c896:	d15f      	bne.n	800c958 <f_lseek+0x1cc>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c898:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c89a:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c89c:	7563      	strb	r3, [r4, #21]
 800c89e:	e784      	b.n	800c7aa <f_lseek+0x1e>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c8a0:	f04f 0a02 	mov.w	sl, #2
			if (ulen <= tlen) {
 800c8a4:	458a      	cmp	sl, r1
			*fp->cltbl = ulen;	/* Number of items used */
 800c8a6:	f8c0 a000 	str.w	sl, [r0]
			if (ulen <= tlen) {
 800c8aa:	d853      	bhi.n	800c954 <f_lseek+0x1c8>
				*tbl = 0;		/* Terminate table */
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f8c8 3000 	str.w	r3, [r8]
 800c8b2:	e77a      	b.n	800c7aa <f_lseek+0x1e>
 800c8b4:	f06f 0101 	mvn.w	r1, #1
				fp->clust = clmt_clust(fp, ofs - 1);
 800c8b8:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c8ba:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c8be:	3b02      	subs	r3, #2
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	d9e9      	bls.n	800c898 <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800c8c4:	f8d9 2028 	ldr.w	r2, [r9, #40]	@ 0x28
 800c8c8:	fb01 2207 	mla	r2, r1, r7, r2
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	d0e3      	beq.n	800c898 <f_lseek+0x10c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c8d0:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800c8d4:	2e00      	cmp	r6, #0
 800c8d6:	f43f af68 	beq.w	800c7aa <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c8da:	3f01      	subs	r7, #1
 800c8dc:	ea07 070c 	and.w	r7, r7, ip
 800c8e0:	4417      	add	r7, r2
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c8e2:	6a22      	ldr	r2, [r4, #32]
 800c8e4:	42ba      	cmp	r2, r7
 800c8e6:	f43f af60 	beq.w	800c7aa <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c8ea:	f994 3014 	ldrsb.w	r3, [r4, #20]
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8ee:	f104 0630 	add.w	r6, r4, #48	@ 0x30
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8f2:	f899 0001 	ldrb.w	r0, [r9, #1]
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f2c0 80af 	blt.w	800ca5a <f_lseek+0x2ce>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	2301      	movs	r3, #1
 800c900:	463a      	mov	r2, r7
 800c902:	f7fe fab9 	bl	800ae78 <disk_read>
 800c906:	2800      	cmp	r0, #0
 800c908:	d16d      	bne.n	800c9e6 <f_lseek+0x25a>
			fp->sect = nsect;
 800c90a:	6227      	str	r7, [r4, #32]
 800c90c:	e74d      	b.n	800c7aa <f_lseek+0x1e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c90e:	3b01      	subs	r3, #1
 800c910:	1e72      	subs	r2, r6, #1
 800c912:	fbb3 f1f8 	udiv	r1, r3, r8
 800c916:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 800c91a:	428a      	cmp	r2, r1
 800c91c:	d388      	bcc.n	800c830 <f_lseek+0xa4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c91e:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 800c922:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c924:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 800c926:	1af6      	subs	r6, r6, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c928:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 800c92a:	2f00      	cmp	r7, #0
 800c92c:	d186      	bne.n	800c83c <f_lseek+0xb0>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c92e:	68e2      	ldr	r2, [r4, #12]
 800c930:	429a      	cmp	r2, r3
 800c932:	d204      	bcs.n	800c93e <f_lseek+0x1b2>
			fp->flag |= FA_MODIFIED;
 800c934:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 800c936:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800c938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c93c:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c942:	2b00      	cmp	r3, #0
 800c944:	f43f af31 	beq.w	800c7aa <f_lseek+0x1e>
 800c948:	6a22      	ldr	r2, [r4, #32]
 800c94a:	42ba      	cmp	r2, r7
 800c94c:	d1cd      	bne.n	800c8ea <f_lseek+0x15e>
 800c94e:	e72c      	b.n	800c7aa <f_lseek+0x1e>
		fp->fptr = nsect = 0;
 800c950:	61a5      	str	r5, [r4, #24]
		if (ofs) {
 800c952:	e767      	b.n	800c824 <f_lseek+0x98>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c954:	2511      	movs	r5, #17
 800c956:	e728      	b.n	800c7aa <f_lseek+0x1e>
 800c958:	464f      	mov	r7, r9
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c95a:	f04f 0a02 	mov.w	sl, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c95e:	46c3      	mov	fp, r8
 800c960:	4616      	mov	r6, r2
 800c962:	9102      	str	r1, [sp, #8]
 800c964:	9503      	str	r5, [sp, #12]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c966:	4635      	mov	r5, r6
						pcl = cl; ncl++;
 800c968:	f04f 0801 	mov.w	r8, #1
 800c96c:	9600      	str	r6, [sp, #0]
 800c96e:	e033      	b.n	800c9d8 <f_lseek+0x24c>
		switch (fs->fs_type) {
 800c970:	783b      	ldrb	r3, [r7, #0]
 800c972:	2b02      	cmp	r3, #2
 800c974:	d04e      	beq.n	800ca14 <f_lseek+0x288>
 800c976:	2b03      	cmp	r3, #3
 800c978:	d039      	beq.n	800c9ee <f_lseek+0x262>
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d18c      	bne.n	800c898 <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c97e:	6a39      	ldr	r1, [r7, #32]
			bc = (UINT)clst; bc += bc / 2;
 800c980:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c984:	4638      	mov	r0, r7
 800c986:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800c98a:	f7fe fb91 	bl	800b0b0 <move_window>
 800c98e:	bb50      	cbnz	r0, 800c9e6 <f_lseek+0x25a>
			wc = fs->win[bc++ % SS(fs)];
 800c990:	f3c6 0208 	ubfx	r2, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c994:	6a39      	ldr	r1, [r7, #32]
			wc = fs->win[bc++ % SS(fs)];
 800c996:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c998:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800c99a:	443a      	add	r2, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c99c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800c9a0:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800c9a4:	9301      	str	r3, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c9a6:	f7fe fb83 	bl	800b0b0 <move_window>
 800c9aa:	b9e0      	cbnz	r0, 800c9e6 <f_lseek+0x25a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c9ac:	f3c6 0308 	ubfx	r3, r6, #0, #9
 800c9b0:	9a01      	ldr	r2, [sp, #4]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c9b2:	07ee      	lsls	r6, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800c9b4:	443b      	add	r3, r7
 800c9b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9ba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c9be:	d570      	bpl.n	800caa2 <f_lseek+0x316>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c9c0:	2a1f      	cmp	r2, #31
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c9c2:	ea4f 1312 	mov.w	r3, r2, lsr #4
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c9c6:	f67f af67 	bls.w	800c898 <f_lseek+0x10c>
					} while (cl == pcl + 1);
 800c9ca:	3501      	adds	r5, #1
 800c9cc:	429d      	cmp	r5, r3
 800c9ce:	d131      	bne.n	800ca34 <f_lseek+0x2a8>
						pcl = cl; ncl++;
 800c9d0:	f108 0801 	add.w	r8, r8, #1
 800c9d4:	461d      	mov	r5, r3
 800c9d6:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	42ab      	cmp	r3, r5
 800c9dc:	d8c8      	bhi.n	800c970 <f_lseek+0x1e4>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c9de:	2302      	movs	r3, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c9e0:	461d      	mov	r5, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c9e2:	7563      	strb	r3, [r4, #21]
 800c9e4:	e6e1      	b.n	800c7aa <f_lseek+0x1e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	461d      	mov	r5, r3
 800c9ea:	7563      	strb	r3, [r4, #21]
 800c9ec:	e6dd      	b.n	800c7aa <f_lseek+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c9ee:	6a39      	ldr	r1, [r7, #32]
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800c9f6:	f7fe fb5b 	bl	800b0b0 <move_window>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d1f3      	bne.n	800c9e6 <f_lseek+0x25a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c9fe:	00ab      	lsls	r3, r5, #2
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ca00:	493e      	ldr	r1, [pc, #248]	@ (800cafc <f_lseek+0x370>)
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
	rv = rv << 8 | ptr[0];
 800ca06:	443b      	add	r3, r7
 800ca08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ca0a:	420a      	tst	r2, r1
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca0c:	f022 4370 	bic.w	r3, r2, #4026531840	@ 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ca10:	d1db      	bne.n	800c9ca <f_lseek+0x23e>
 800ca12:	e741      	b.n	800c898 <f_lseek+0x10c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca14:	6a39      	ldr	r1, [r7, #32]
 800ca16:	4638      	mov	r0, r7
 800ca18:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800ca1c:	f7fe fb48 	bl	800b0b0 <move_window>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d1e0      	bne.n	800c9e6 <f_lseek+0x25a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ca24:	006b      	lsls	r3, r5, #1
 800ca26:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ca2a:	443b      	add	r3, r7
 800ca2c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d8cb      	bhi.n	800c9ca <f_lseek+0x23e>
 800ca32:	e731      	b.n	800c898 <f_lseek+0x10c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ca34:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ca38:	9a02      	ldr	r2, [sp, #8]
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ca3a:	9e00      	ldr	r6, [sp, #0]
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ca3c:	4552      	cmp	r2, sl
 800ca3e:	d327      	bcc.n	800ca90 <f_lseek+0x304>
						*tbl++ = ncl; *tbl++ = tcl;
 800ca40:	465a      	mov	r2, fp
 800ca42:	f842 8b08 	str.w	r8, [r2], #8
 800ca46:	f8cb 6004 	str.w	r6, [fp, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ca4a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800ca4e:	4299      	cmp	r1, r3
 800ca50:	d950      	bls.n	800caf4 <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 800ca52:	4693      	mov	fp, r2
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ca54:	461e      	mov	r6, r3
 800ca56:	6827      	ldr	r7, [r4, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca58:	e785      	b.n	800c966 <f_lseek+0x1da>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	f7fe fa19 	bl	800ae94 <disk_write>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	d1bf      	bne.n	800c9e6 <f_lseek+0x25a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca66:	7d23      	ldrb	r3, [r4, #20]
 800ca68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca6c:	7523      	strb	r3, [r4, #20]
 800ca6e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ca72:	e743      	b.n	800c8fc <f_lseek+0x170>
					clst = create_chain(&fp->obj, 0);
 800ca74:	4639      	mov	r1, r7
 800ca76:	4620      	mov	r0, r4
 800ca78:	f7fe fd98 	bl	800b5ac <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca7c:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800ca7e:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca80:	f43f af0a 	beq.w	800c898 <f_lseek+0x10c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca84:	1c41      	adds	r1, r0, #1
 800ca86:	d0ae      	beq.n	800c9e6 <f_lseek+0x25a>
				fp->fptr += ofs;
 800ca88:	69a3      	ldr	r3, [r4, #24]
					fp->obj.sclust = clst;
 800ca8a:	60a0      	str	r0, [r4, #8]
				fp->clust = clst;
 800ca8c:	61e0      	str	r0, [r4, #28]
 800ca8e:	e74c      	b.n	800c92a <f_lseek+0x19e>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ca90:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d8dd      	bhi.n	800ca54 <f_lseek+0x2c8>
 800ca98:	46d8      	mov	r8, fp
 800ca9a:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
			*fp->cltbl = ulen;	/* Number of items used */
 800ca9e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800caa0:	e700      	b.n	800c8a4 <f_lseek+0x118>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800caa2:	f640 71fe 	movw	r1, #4094	@ 0xffe
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800caa6:	f3c2 030b 	ubfx	r3, r2, #0, #12
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800caaa:	420a      	tst	r2, r1
 800caac:	d18d      	bne.n	800c9ca <f_lseek+0x23e>
 800caae:	e6f3      	b.n	800c898 <f_lseek+0x10c>
				if (ofs % SS(fs)) {
 800cab0:	460f      	mov	r7, r1
 800cab2:	f3c6 0108 	ubfx	r1, r6, #0, #9
				fp->fptr += ofs;
 800cab6:	18b3      	adds	r3, r6, r2
 800cab8:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800caba:	b1a9      	cbz	r1, 800cae8 <f_lseek+0x35c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cabc:	f8d9 2014 	ldr.w	r2, [r9, #20]
	clst -= 2;
 800cac0:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cac2:	3a02      	subs	r2, #2
 800cac4:	4291      	cmp	r1, r2
 800cac6:	f4bf aee7 	bcs.w	800c898 <f_lseek+0x10c>
	return clst * fs->csize + fs->database;
 800caca:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800cace:	f8d9 7028 	ldr.w	r7, [r9, #40]	@ 0x28
 800cad2:	fb01 7702 	mla	r7, r1, r2, r7
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cad6:	2f00      	cmp	r7, #0
 800cad8:	f43f aede 	beq.w	800c898 <f_lseek+0x10c>
					nsect += (DWORD)(ofs / SS(fs));
 800cadc:	eb07 2756 	add.w	r7, r7, r6, lsr #9
 800cae0:	e725      	b.n	800c92e <f_lseek+0x1a2>
 800cae2:	4607      	mov	r7, r0
				fp->fptr += ofs;
 800cae4:	69a3      	ldr	r3, [r4, #24]
				if (ofs % SS(fs)) {
 800cae6:	e722      	b.n	800c92e <f_lseek+0x1a2>
		fp->fptr = nsect = 0;
 800cae8:	460f      	mov	r7, r1
 800caea:	e720      	b.n	800c92e <f_lseek+0x1a2>
				if (ofs % SS(fs)) {
 800caec:	f3c6 0108 	ubfx	r1, r6, #0, #9
 800caf0:	69a2      	ldr	r2, [r4, #24]
 800caf2:	e7e0      	b.n	800cab6 <f_lseek+0x32a>
						*tbl++ = ncl; *tbl++ = tcl;
 800caf4:	9902      	ldr	r1, [sp, #8]
 800caf6:	4690      	mov	r8, r2
 800caf8:	9d03      	ldr	r5, [sp, #12]
 800cafa:	e7d0      	b.n	800ca9e <f_lseek+0x312>
 800cafc:	0ffffffe 	.word	0x0ffffffe

0800cb00 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800cb00:	4b10      	ldr	r3, [pc, #64]	@ (800cb44 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb02:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800cb04:	7a5c      	ldrb	r4, [r3, #9]
 800cb06:	b9cc      	cbnz	r4, 800cb3c <FATFS_LinkDriver+0x3c>
 800cb08:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800cb0a:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 800cb0e:	7a5c      	ldrb	r4, [r3, #9]
 800cb10:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800cb12:	7a5c      	ldrb	r4, [r3, #9]
 800cb14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb18:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800cb1a:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800cb1c:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800cb1e:	441c      	add	r4, r3
 800cb20:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800cb22:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800cb24:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 800cb26:	b2e4      	uxtb	r4, r4
 800cb28:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800cb2a:	243a      	movs	r4, #58	@ 0x3a
    path[2] = '/';
 800cb2c:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 800cb2e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800cb30:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 800cb32:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800cb34:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800cb38:	708b      	strb	r3, [r1, #2]
}
 800cb3a:	4770      	bx	lr
  uint8_t ret = 1;
 800cb3c:	2001      	movs	r0, #1
}
 800cb3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	240b6a08 	.word	0x240b6a08

0800cb48 <sniprintf>:
 800cb48:	b40c      	push	{r2, r3}
 800cb4a:	b530      	push	{r4, r5, lr}
 800cb4c:	4b17      	ldr	r3, [pc, #92]	@ (800cbac <sniprintf+0x64>)
 800cb4e:	1e0c      	subs	r4, r1, #0
 800cb50:	681d      	ldr	r5, [r3, #0]
 800cb52:	b09d      	sub	sp, #116	@ 0x74
 800cb54:	da08      	bge.n	800cb68 <sniprintf+0x20>
 800cb56:	238b      	movs	r3, #139	@ 0x8b
 800cb58:	602b      	str	r3, [r5, #0]
 800cb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5e:	b01d      	add	sp, #116	@ 0x74
 800cb60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb64:	b002      	add	sp, #8
 800cb66:	4770      	bx	lr
 800cb68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb70:	bf14      	ite	ne
 800cb72:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb76:	4623      	moveq	r3, r4
 800cb78:	9304      	str	r3, [sp, #16]
 800cb7a:	9307      	str	r3, [sp, #28]
 800cb7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb80:	9002      	str	r0, [sp, #8]
 800cb82:	9006      	str	r0, [sp, #24]
 800cb84:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb8a:	ab21      	add	r3, sp, #132	@ 0x84
 800cb8c:	a902      	add	r1, sp, #8
 800cb8e:	4628      	mov	r0, r5
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	f000 f995 	bl	800cec0 <_svfiprintf_r>
 800cb96:	1c43      	adds	r3, r0, #1
 800cb98:	bfbc      	itt	lt
 800cb9a:	238b      	movlt	r3, #139	@ 0x8b
 800cb9c:	602b      	strlt	r3, [r5, #0]
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	d0dd      	beq.n	800cb5e <sniprintf+0x16>
 800cba2:	9b02      	ldr	r3, [sp, #8]
 800cba4:	2200      	movs	r2, #0
 800cba6:	701a      	strb	r2, [r3, #0]
 800cba8:	e7d9      	b.n	800cb5e <sniprintf+0x16>
 800cbaa:	bf00      	nop
 800cbac:	2400001c 	.word	0x2400001c

0800cbb0 <memset>:
 800cbb0:	4402      	add	r2, r0
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d100      	bne.n	800cbba <memset+0xa>
 800cbb8:	4770      	bx	lr
 800cbba:	f803 1b01 	strb.w	r1, [r3], #1
 800cbbe:	e7f9      	b.n	800cbb4 <memset+0x4>

0800cbc0 <__errno>:
 800cbc0:	4b01      	ldr	r3, [pc, #4]	@ (800cbc8 <__errno+0x8>)
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	2400001c 	.word	0x2400001c

0800cbcc <__libc_init_array>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	4d0d      	ldr	r5, [pc, #52]	@ (800cc04 <__libc_init_array+0x38>)
 800cbd0:	4c0d      	ldr	r4, [pc, #52]	@ (800cc08 <__libc_init_array+0x3c>)
 800cbd2:	1b64      	subs	r4, r4, r5
 800cbd4:	10a4      	asrs	r4, r4, #2
 800cbd6:	2600      	movs	r6, #0
 800cbd8:	42a6      	cmp	r6, r4
 800cbda:	d109      	bne.n	800cbf0 <__libc_init_array+0x24>
 800cbdc:	4d0b      	ldr	r5, [pc, #44]	@ (800cc0c <__libc_init_array+0x40>)
 800cbde:	4c0c      	ldr	r4, [pc, #48]	@ (800cc10 <__libc_init_array+0x44>)
 800cbe0:	f000 fc66 	bl	800d4b0 <_init>
 800cbe4:	1b64      	subs	r4, r4, r5
 800cbe6:	10a4      	asrs	r4, r4, #2
 800cbe8:	2600      	movs	r6, #0
 800cbea:	42a6      	cmp	r6, r4
 800cbec:	d105      	bne.n	800cbfa <__libc_init_array+0x2e>
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbf4:	4798      	blx	r3
 800cbf6:	3601      	adds	r6, #1
 800cbf8:	e7ee      	b.n	800cbd8 <__libc_init_array+0xc>
 800cbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbfe:	4798      	blx	r3
 800cc00:	3601      	adds	r6, #1
 800cc02:	e7f2      	b.n	800cbea <__libc_init_array+0x1e>
 800cc04:	0800d848 	.word	0x0800d848
 800cc08:	0800d848 	.word	0x0800d848
 800cc0c:	0800d848 	.word	0x0800d848
 800cc10:	0800d84c 	.word	0x0800d84c

0800cc14 <__retarget_lock_acquire_recursive>:
 800cc14:	4770      	bx	lr

0800cc16 <__retarget_lock_release_recursive>:
 800cc16:	4770      	bx	lr

0800cc18 <_free_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	2900      	cmp	r1, #0
 800cc1e:	d041      	beq.n	800cca4 <_free_r+0x8c>
 800cc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc24:	1f0c      	subs	r4, r1, #4
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfb8      	it	lt
 800cc2a:	18e4      	addlt	r4, r4, r3
 800cc2c:	f000 f8e0 	bl	800cdf0 <__malloc_lock>
 800cc30:	4a1d      	ldr	r2, [pc, #116]	@ (800cca8 <_free_r+0x90>)
 800cc32:	6813      	ldr	r3, [r2, #0]
 800cc34:	b933      	cbnz	r3, 800cc44 <_free_r+0x2c>
 800cc36:	6063      	str	r3, [r4, #4]
 800cc38:	6014      	str	r4, [r2, #0]
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc40:	f000 b8dc 	b.w	800cdfc <__malloc_unlock>
 800cc44:	42a3      	cmp	r3, r4
 800cc46:	d908      	bls.n	800cc5a <_free_r+0x42>
 800cc48:	6820      	ldr	r0, [r4, #0]
 800cc4a:	1821      	adds	r1, r4, r0
 800cc4c:	428b      	cmp	r3, r1
 800cc4e:	bf01      	itttt	eq
 800cc50:	6819      	ldreq	r1, [r3, #0]
 800cc52:	685b      	ldreq	r3, [r3, #4]
 800cc54:	1809      	addeq	r1, r1, r0
 800cc56:	6021      	streq	r1, [r4, #0]
 800cc58:	e7ed      	b.n	800cc36 <_free_r+0x1e>
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	b10b      	cbz	r3, 800cc64 <_free_r+0x4c>
 800cc60:	42a3      	cmp	r3, r4
 800cc62:	d9fa      	bls.n	800cc5a <_free_r+0x42>
 800cc64:	6811      	ldr	r1, [r2, #0]
 800cc66:	1850      	adds	r0, r2, r1
 800cc68:	42a0      	cmp	r0, r4
 800cc6a:	d10b      	bne.n	800cc84 <_free_r+0x6c>
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	4401      	add	r1, r0
 800cc70:	1850      	adds	r0, r2, r1
 800cc72:	4283      	cmp	r3, r0
 800cc74:	6011      	str	r1, [r2, #0]
 800cc76:	d1e0      	bne.n	800cc3a <_free_r+0x22>
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	6053      	str	r3, [r2, #4]
 800cc7e:	4408      	add	r0, r1
 800cc80:	6010      	str	r0, [r2, #0]
 800cc82:	e7da      	b.n	800cc3a <_free_r+0x22>
 800cc84:	d902      	bls.n	800cc8c <_free_r+0x74>
 800cc86:	230c      	movs	r3, #12
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	e7d6      	b.n	800cc3a <_free_r+0x22>
 800cc8c:	6820      	ldr	r0, [r4, #0]
 800cc8e:	1821      	adds	r1, r4, r0
 800cc90:	428b      	cmp	r3, r1
 800cc92:	bf04      	itt	eq
 800cc94:	6819      	ldreq	r1, [r3, #0]
 800cc96:	685b      	ldreq	r3, [r3, #4]
 800cc98:	6063      	str	r3, [r4, #4]
 800cc9a:	bf04      	itt	eq
 800cc9c:	1809      	addeq	r1, r1, r0
 800cc9e:	6021      	streq	r1, [r4, #0]
 800cca0:	6054      	str	r4, [r2, #4]
 800cca2:	e7ca      	b.n	800cc3a <_free_r+0x22>
 800cca4:	bd38      	pop	{r3, r4, r5, pc}
 800cca6:	bf00      	nop
 800cca8:	240b6b58 	.word	0x240b6b58

0800ccac <sbrk_aligned>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	4e0f      	ldr	r6, [pc, #60]	@ (800ccec <sbrk_aligned+0x40>)
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	6831      	ldr	r1, [r6, #0]
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	b911      	cbnz	r1, 800ccbe <sbrk_aligned+0x12>
 800ccb8:	f000 fba6 	bl	800d408 <_sbrk_r>
 800ccbc:	6030      	str	r0, [r6, #0]
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f000 fba1 	bl	800d408 <_sbrk_r>
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	d103      	bne.n	800ccd2 <sbrk_aligned+0x26>
 800ccca:	f04f 34ff 	mov.w	r4, #4294967295
 800ccce:	4620      	mov	r0, r4
 800ccd0:	bd70      	pop	{r4, r5, r6, pc}
 800ccd2:	1cc4      	adds	r4, r0, #3
 800ccd4:	f024 0403 	bic.w	r4, r4, #3
 800ccd8:	42a0      	cmp	r0, r4
 800ccda:	d0f8      	beq.n	800ccce <sbrk_aligned+0x22>
 800ccdc:	1a21      	subs	r1, r4, r0
 800ccde:	4628      	mov	r0, r5
 800cce0:	f000 fb92 	bl	800d408 <_sbrk_r>
 800cce4:	3001      	adds	r0, #1
 800cce6:	d1f2      	bne.n	800ccce <sbrk_aligned+0x22>
 800cce8:	e7ef      	b.n	800ccca <sbrk_aligned+0x1e>
 800ccea:	bf00      	nop
 800ccec:	240b6b54 	.word	0x240b6b54

0800ccf0 <_malloc_r>:
 800ccf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf4:	1ccd      	adds	r5, r1, #3
 800ccf6:	f025 0503 	bic.w	r5, r5, #3
 800ccfa:	3508      	adds	r5, #8
 800ccfc:	2d0c      	cmp	r5, #12
 800ccfe:	bf38      	it	cc
 800cd00:	250c      	movcc	r5, #12
 800cd02:	2d00      	cmp	r5, #0
 800cd04:	4606      	mov	r6, r0
 800cd06:	db01      	blt.n	800cd0c <_malloc_r+0x1c>
 800cd08:	42a9      	cmp	r1, r5
 800cd0a:	d904      	bls.n	800cd16 <_malloc_r+0x26>
 800cd0c:	230c      	movs	r3, #12
 800cd0e:	6033      	str	r3, [r6, #0]
 800cd10:	2000      	movs	r0, #0
 800cd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cdec <_malloc_r+0xfc>
 800cd1a:	f000 f869 	bl	800cdf0 <__malloc_lock>
 800cd1e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd22:	461c      	mov	r4, r3
 800cd24:	bb44      	cbnz	r4, 800cd78 <_malloc_r+0x88>
 800cd26:	4629      	mov	r1, r5
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f7ff ffbf 	bl	800ccac <sbrk_aligned>
 800cd2e:	1c43      	adds	r3, r0, #1
 800cd30:	4604      	mov	r4, r0
 800cd32:	d158      	bne.n	800cde6 <_malloc_r+0xf6>
 800cd34:	f8d8 4000 	ldr.w	r4, [r8]
 800cd38:	4627      	mov	r7, r4
 800cd3a:	2f00      	cmp	r7, #0
 800cd3c:	d143      	bne.n	800cdc6 <_malloc_r+0xd6>
 800cd3e:	2c00      	cmp	r4, #0
 800cd40:	d04b      	beq.n	800cdda <_malloc_r+0xea>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	4639      	mov	r1, r7
 800cd46:	4630      	mov	r0, r6
 800cd48:	eb04 0903 	add.w	r9, r4, r3
 800cd4c:	f000 fb5c 	bl	800d408 <_sbrk_r>
 800cd50:	4581      	cmp	r9, r0
 800cd52:	d142      	bne.n	800cdda <_malloc_r+0xea>
 800cd54:	6821      	ldr	r1, [r4, #0]
 800cd56:	1a6d      	subs	r5, r5, r1
 800cd58:	4629      	mov	r1, r5
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7ff ffa6 	bl	800ccac <sbrk_aligned>
 800cd60:	3001      	adds	r0, #1
 800cd62:	d03a      	beq.n	800cdda <_malloc_r+0xea>
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	442b      	add	r3, r5
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6e:	685a      	ldr	r2, [r3, #4]
 800cd70:	bb62      	cbnz	r2, 800cdcc <_malloc_r+0xdc>
 800cd72:	f8c8 7000 	str.w	r7, [r8]
 800cd76:	e00f      	b.n	800cd98 <_malloc_r+0xa8>
 800cd78:	6822      	ldr	r2, [r4, #0]
 800cd7a:	1b52      	subs	r2, r2, r5
 800cd7c:	d420      	bmi.n	800cdc0 <_malloc_r+0xd0>
 800cd7e:	2a0b      	cmp	r2, #11
 800cd80:	d917      	bls.n	800cdb2 <_malloc_r+0xc2>
 800cd82:	1961      	adds	r1, r4, r5
 800cd84:	42a3      	cmp	r3, r4
 800cd86:	6025      	str	r5, [r4, #0]
 800cd88:	bf18      	it	ne
 800cd8a:	6059      	strne	r1, [r3, #4]
 800cd8c:	6863      	ldr	r3, [r4, #4]
 800cd8e:	bf08      	it	eq
 800cd90:	f8c8 1000 	streq.w	r1, [r8]
 800cd94:	5162      	str	r2, [r4, r5]
 800cd96:	604b      	str	r3, [r1, #4]
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f000 f82f 	bl	800cdfc <__malloc_unlock>
 800cd9e:	f104 000b 	add.w	r0, r4, #11
 800cda2:	1d23      	adds	r3, r4, #4
 800cda4:	f020 0007 	bic.w	r0, r0, #7
 800cda8:	1ac2      	subs	r2, r0, r3
 800cdaa:	bf1c      	itt	ne
 800cdac:	1a1b      	subne	r3, r3, r0
 800cdae:	50a3      	strne	r3, [r4, r2]
 800cdb0:	e7af      	b.n	800cd12 <_malloc_r+0x22>
 800cdb2:	6862      	ldr	r2, [r4, #4]
 800cdb4:	42a3      	cmp	r3, r4
 800cdb6:	bf0c      	ite	eq
 800cdb8:	f8c8 2000 	streq.w	r2, [r8]
 800cdbc:	605a      	strne	r2, [r3, #4]
 800cdbe:	e7eb      	b.n	800cd98 <_malloc_r+0xa8>
 800cdc0:	4623      	mov	r3, r4
 800cdc2:	6864      	ldr	r4, [r4, #4]
 800cdc4:	e7ae      	b.n	800cd24 <_malloc_r+0x34>
 800cdc6:	463c      	mov	r4, r7
 800cdc8:	687f      	ldr	r7, [r7, #4]
 800cdca:	e7b6      	b.n	800cd3a <_malloc_r+0x4a>
 800cdcc:	461a      	mov	r2, r3
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	42a3      	cmp	r3, r4
 800cdd2:	d1fb      	bne.n	800cdcc <_malloc_r+0xdc>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	6053      	str	r3, [r2, #4]
 800cdd8:	e7de      	b.n	800cd98 <_malloc_r+0xa8>
 800cdda:	230c      	movs	r3, #12
 800cddc:	6033      	str	r3, [r6, #0]
 800cdde:	4630      	mov	r0, r6
 800cde0:	f000 f80c 	bl	800cdfc <__malloc_unlock>
 800cde4:	e794      	b.n	800cd10 <_malloc_r+0x20>
 800cde6:	6005      	str	r5, [r0, #0]
 800cde8:	e7d6      	b.n	800cd98 <_malloc_r+0xa8>
 800cdea:	bf00      	nop
 800cdec:	240b6b58 	.word	0x240b6b58

0800cdf0 <__malloc_lock>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	@ (800cdf8 <__malloc_lock+0x8>)
 800cdf2:	f7ff bf0f 	b.w	800cc14 <__retarget_lock_acquire_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	240b6b50 	.word	0x240b6b50

0800cdfc <__malloc_unlock>:
 800cdfc:	4801      	ldr	r0, [pc, #4]	@ (800ce04 <__malloc_unlock+0x8>)
 800cdfe:	f7ff bf0a 	b.w	800cc16 <__retarget_lock_release_recursive>
 800ce02:	bf00      	nop
 800ce04:	240b6b50 	.word	0x240b6b50

0800ce08 <__ssputs_r>:
 800ce08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce0c:	688e      	ldr	r6, [r1, #8]
 800ce0e:	461f      	mov	r7, r3
 800ce10:	42be      	cmp	r6, r7
 800ce12:	680b      	ldr	r3, [r1, #0]
 800ce14:	4682      	mov	sl, r0
 800ce16:	460c      	mov	r4, r1
 800ce18:	4690      	mov	r8, r2
 800ce1a:	d82d      	bhi.n	800ce78 <__ssputs_r+0x70>
 800ce1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce24:	d026      	beq.n	800ce74 <__ssputs_r+0x6c>
 800ce26:	6965      	ldr	r5, [r4, #20]
 800ce28:	6909      	ldr	r1, [r1, #16]
 800ce2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce2e:	eba3 0901 	sub.w	r9, r3, r1
 800ce32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce36:	1c7b      	adds	r3, r7, #1
 800ce38:	444b      	add	r3, r9
 800ce3a:	106d      	asrs	r5, r5, #1
 800ce3c:	429d      	cmp	r5, r3
 800ce3e:	bf38      	it	cc
 800ce40:	461d      	movcc	r5, r3
 800ce42:	0553      	lsls	r3, r2, #21
 800ce44:	d527      	bpl.n	800ce96 <__ssputs_r+0x8e>
 800ce46:	4629      	mov	r1, r5
 800ce48:	f7ff ff52 	bl	800ccf0 <_malloc_r>
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	b360      	cbz	r0, 800ceaa <__ssputs_r+0xa2>
 800ce50:	6921      	ldr	r1, [r4, #16]
 800ce52:	464a      	mov	r2, r9
 800ce54:	f000 fae8 	bl	800d428 <memcpy>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	6126      	str	r6, [r4, #16]
 800ce66:	6165      	str	r5, [r4, #20]
 800ce68:	444e      	add	r6, r9
 800ce6a:	eba5 0509 	sub.w	r5, r5, r9
 800ce6e:	6026      	str	r6, [r4, #0]
 800ce70:	60a5      	str	r5, [r4, #8]
 800ce72:	463e      	mov	r6, r7
 800ce74:	42be      	cmp	r6, r7
 800ce76:	d900      	bls.n	800ce7a <__ssputs_r+0x72>
 800ce78:	463e      	mov	r6, r7
 800ce7a:	6820      	ldr	r0, [r4, #0]
 800ce7c:	4632      	mov	r2, r6
 800ce7e:	4641      	mov	r1, r8
 800ce80:	f000 faa8 	bl	800d3d4 <memmove>
 800ce84:	68a3      	ldr	r3, [r4, #8]
 800ce86:	1b9b      	subs	r3, r3, r6
 800ce88:	60a3      	str	r3, [r4, #8]
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	4433      	add	r3, r6
 800ce8e:	6023      	str	r3, [r4, #0]
 800ce90:	2000      	movs	r0, #0
 800ce92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce96:	462a      	mov	r2, r5
 800ce98:	f000 fad4 	bl	800d444 <_realloc_r>
 800ce9c:	4606      	mov	r6, r0
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d1e0      	bne.n	800ce64 <__ssputs_r+0x5c>
 800cea2:	6921      	ldr	r1, [r4, #16]
 800cea4:	4650      	mov	r0, sl
 800cea6:	f7ff feb7 	bl	800cc18 <_free_r>
 800ceaa:	230c      	movs	r3, #12
 800ceac:	f8ca 3000 	str.w	r3, [sl]
 800ceb0:	89a3      	ldrh	r3, [r4, #12]
 800ceb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cebc:	e7e9      	b.n	800ce92 <__ssputs_r+0x8a>
	...

0800cec0 <_svfiprintf_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	4698      	mov	r8, r3
 800cec6:	898b      	ldrh	r3, [r1, #12]
 800cec8:	061b      	lsls	r3, r3, #24
 800ceca:	b09d      	sub	sp, #116	@ 0x74
 800cecc:	4607      	mov	r7, r0
 800cece:	460d      	mov	r5, r1
 800ced0:	4614      	mov	r4, r2
 800ced2:	d510      	bpl.n	800cef6 <_svfiprintf_r+0x36>
 800ced4:	690b      	ldr	r3, [r1, #16]
 800ced6:	b973      	cbnz	r3, 800cef6 <_svfiprintf_r+0x36>
 800ced8:	2140      	movs	r1, #64	@ 0x40
 800ceda:	f7ff ff09 	bl	800ccf0 <_malloc_r>
 800cede:	6028      	str	r0, [r5, #0]
 800cee0:	6128      	str	r0, [r5, #16]
 800cee2:	b930      	cbnz	r0, 800cef2 <_svfiprintf_r+0x32>
 800cee4:	230c      	movs	r3, #12
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceec:	b01d      	add	sp, #116	@ 0x74
 800ceee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef2:	2340      	movs	r3, #64	@ 0x40
 800cef4:	616b      	str	r3, [r5, #20]
 800cef6:	2300      	movs	r3, #0
 800cef8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cefa:	2320      	movs	r3, #32
 800cefc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf00:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf04:	2330      	movs	r3, #48	@ 0x30
 800cf06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0a4 <_svfiprintf_r+0x1e4>
 800cf0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf0e:	f04f 0901 	mov.w	r9, #1
 800cf12:	4623      	mov	r3, r4
 800cf14:	469a      	mov	sl, r3
 800cf16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf1a:	b10a      	cbz	r2, 800cf20 <_svfiprintf_r+0x60>
 800cf1c:	2a25      	cmp	r2, #37	@ 0x25
 800cf1e:	d1f9      	bne.n	800cf14 <_svfiprintf_r+0x54>
 800cf20:	ebba 0b04 	subs.w	fp, sl, r4
 800cf24:	d00b      	beq.n	800cf3e <_svfiprintf_r+0x7e>
 800cf26:	465b      	mov	r3, fp
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4629      	mov	r1, r5
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	f7ff ff6b 	bl	800ce08 <__ssputs_r>
 800cf32:	3001      	adds	r0, #1
 800cf34:	f000 80a7 	beq.w	800d086 <_svfiprintf_r+0x1c6>
 800cf38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf3a:	445a      	add	r2, fp
 800cf3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf3e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 809f 	beq.w	800d086 <_svfiprintf_r+0x1c6>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf52:	f10a 0a01 	add.w	sl, sl, #1
 800cf56:	9304      	str	r3, [sp, #16]
 800cf58:	9307      	str	r3, [sp, #28]
 800cf5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf60:	4654      	mov	r4, sl
 800cf62:	2205      	movs	r2, #5
 800cf64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf68:	484e      	ldr	r0, [pc, #312]	@ (800d0a4 <_svfiprintf_r+0x1e4>)
 800cf6a:	f7f3 f9c1 	bl	80002f0 <memchr>
 800cf6e:	9a04      	ldr	r2, [sp, #16]
 800cf70:	b9d8      	cbnz	r0, 800cfaa <_svfiprintf_r+0xea>
 800cf72:	06d0      	lsls	r0, r2, #27
 800cf74:	bf44      	itt	mi
 800cf76:	2320      	movmi	r3, #32
 800cf78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf7c:	0711      	lsls	r1, r2, #28
 800cf7e:	bf44      	itt	mi
 800cf80:	232b      	movmi	r3, #43	@ 0x2b
 800cf82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf86:	f89a 3000 	ldrb.w	r3, [sl]
 800cf8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf8c:	d015      	beq.n	800cfba <_svfiprintf_r+0xfa>
 800cf8e:	9a07      	ldr	r2, [sp, #28]
 800cf90:	4654      	mov	r4, sl
 800cf92:	2000      	movs	r0, #0
 800cf94:	f04f 0c0a 	mov.w	ip, #10
 800cf98:	4621      	mov	r1, r4
 800cf9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9e:	3b30      	subs	r3, #48	@ 0x30
 800cfa0:	2b09      	cmp	r3, #9
 800cfa2:	d94b      	bls.n	800d03c <_svfiprintf_r+0x17c>
 800cfa4:	b1b0      	cbz	r0, 800cfd4 <_svfiprintf_r+0x114>
 800cfa6:	9207      	str	r2, [sp, #28]
 800cfa8:	e014      	b.n	800cfd4 <_svfiprintf_r+0x114>
 800cfaa:	eba0 0308 	sub.w	r3, r0, r8
 800cfae:	fa09 f303 	lsl.w	r3, r9, r3
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	9304      	str	r3, [sp, #16]
 800cfb6:	46a2      	mov	sl, r4
 800cfb8:	e7d2      	b.n	800cf60 <_svfiprintf_r+0xa0>
 800cfba:	9b03      	ldr	r3, [sp, #12]
 800cfbc:	1d19      	adds	r1, r3, #4
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	9103      	str	r1, [sp, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	bfbb      	ittet	lt
 800cfc6:	425b      	neglt	r3, r3
 800cfc8:	f042 0202 	orrlt.w	r2, r2, #2
 800cfcc:	9307      	strge	r3, [sp, #28]
 800cfce:	9307      	strlt	r3, [sp, #28]
 800cfd0:	bfb8      	it	lt
 800cfd2:	9204      	strlt	r2, [sp, #16]
 800cfd4:	7823      	ldrb	r3, [r4, #0]
 800cfd6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfd8:	d10a      	bne.n	800cff0 <_svfiprintf_r+0x130>
 800cfda:	7863      	ldrb	r3, [r4, #1]
 800cfdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfde:	d132      	bne.n	800d046 <_svfiprintf_r+0x186>
 800cfe0:	9b03      	ldr	r3, [sp, #12]
 800cfe2:	1d1a      	adds	r2, r3, #4
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	9203      	str	r2, [sp, #12]
 800cfe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfec:	3402      	adds	r4, #2
 800cfee:	9305      	str	r3, [sp, #20]
 800cff0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0b4 <_svfiprintf_r+0x1f4>
 800cff4:	7821      	ldrb	r1, [r4, #0]
 800cff6:	2203      	movs	r2, #3
 800cff8:	4650      	mov	r0, sl
 800cffa:	f7f3 f979 	bl	80002f0 <memchr>
 800cffe:	b138      	cbz	r0, 800d010 <_svfiprintf_r+0x150>
 800d000:	9b04      	ldr	r3, [sp, #16]
 800d002:	eba0 000a 	sub.w	r0, r0, sl
 800d006:	2240      	movs	r2, #64	@ 0x40
 800d008:	4082      	lsls	r2, r0
 800d00a:	4313      	orrs	r3, r2
 800d00c:	3401      	adds	r4, #1
 800d00e:	9304      	str	r3, [sp, #16]
 800d010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d014:	4824      	ldr	r0, [pc, #144]	@ (800d0a8 <_svfiprintf_r+0x1e8>)
 800d016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d01a:	2206      	movs	r2, #6
 800d01c:	f7f3 f968 	bl	80002f0 <memchr>
 800d020:	2800      	cmp	r0, #0
 800d022:	d036      	beq.n	800d092 <_svfiprintf_r+0x1d2>
 800d024:	4b21      	ldr	r3, [pc, #132]	@ (800d0ac <_svfiprintf_r+0x1ec>)
 800d026:	bb1b      	cbnz	r3, 800d070 <_svfiprintf_r+0x1b0>
 800d028:	9b03      	ldr	r3, [sp, #12]
 800d02a:	3307      	adds	r3, #7
 800d02c:	f023 0307 	bic.w	r3, r3, #7
 800d030:	3308      	adds	r3, #8
 800d032:	9303      	str	r3, [sp, #12]
 800d034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d036:	4433      	add	r3, r6
 800d038:	9309      	str	r3, [sp, #36]	@ 0x24
 800d03a:	e76a      	b.n	800cf12 <_svfiprintf_r+0x52>
 800d03c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d040:	460c      	mov	r4, r1
 800d042:	2001      	movs	r0, #1
 800d044:	e7a8      	b.n	800cf98 <_svfiprintf_r+0xd8>
 800d046:	2300      	movs	r3, #0
 800d048:	3401      	adds	r4, #1
 800d04a:	9305      	str	r3, [sp, #20]
 800d04c:	4619      	mov	r1, r3
 800d04e:	f04f 0c0a 	mov.w	ip, #10
 800d052:	4620      	mov	r0, r4
 800d054:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d058:	3a30      	subs	r2, #48	@ 0x30
 800d05a:	2a09      	cmp	r2, #9
 800d05c:	d903      	bls.n	800d066 <_svfiprintf_r+0x1a6>
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d0c6      	beq.n	800cff0 <_svfiprintf_r+0x130>
 800d062:	9105      	str	r1, [sp, #20]
 800d064:	e7c4      	b.n	800cff0 <_svfiprintf_r+0x130>
 800d066:	fb0c 2101 	mla	r1, ip, r1, r2
 800d06a:	4604      	mov	r4, r0
 800d06c:	2301      	movs	r3, #1
 800d06e:	e7f0      	b.n	800d052 <_svfiprintf_r+0x192>
 800d070:	ab03      	add	r3, sp, #12
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	462a      	mov	r2, r5
 800d076:	4b0e      	ldr	r3, [pc, #56]	@ (800d0b0 <_svfiprintf_r+0x1f0>)
 800d078:	a904      	add	r1, sp, #16
 800d07a:	4638      	mov	r0, r7
 800d07c:	f3af 8000 	nop.w
 800d080:	1c42      	adds	r2, r0, #1
 800d082:	4606      	mov	r6, r0
 800d084:	d1d6      	bne.n	800d034 <_svfiprintf_r+0x174>
 800d086:	89ab      	ldrh	r3, [r5, #12]
 800d088:	065b      	lsls	r3, r3, #25
 800d08a:	f53f af2d 	bmi.w	800cee8 <_svfiprintf_r+0x28>
 800d08e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d090:	e72c      	b.n	800ceec <_svfiprintf_r+0x2c>
 800d092:	ab03      	add	r3, sp, #12
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	462a      	mov	r2, r5
 800d098:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <_svfiprintf_r+0x1f0>)
 800d09a:	a904      	add	r1, sp, #16
 800d09c:	4638      	mov	r0, r7
 800d09e:	f000 f879 	bl	800d194 <_printf_i>
 800d0a2:	e7ed      	b.n	800d080 <_svfiprintf_r+0x1c0>
 800d0a4:	0800d80c 	.word	0x0800d80c
 800d0a8:	0800d816 	.word	0x0800d816
 800d0ac:	00000000 	.word	0x00000000
 800d0b0:	0800ce09 	.word	0x0800ce09
 800d0b4:	0800d812 	.word	0x0800d812

0800d0b8 <_printf_common>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	4616      	mov	r6, r2
 800d0be:	4698      	mov	r8, r3
 800d0c0:	688a      	ldr	r2, [r1, #8]
 800d0c2:	690b      	ldr	r3, [r1, #16]
 800d0c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	bfb8      	it	lt
 800d0cc:	4613      	movlt	r3, r2
 800d0ce:	6033      	str	r3, [r6, #0]
 800d0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	b10a      	cbz	r2, 800d0de <_printf_common+0x26>
 800d0da:	3301      	adds	r3, #1
 800d0dc:	6033      	str	r3, [r6, #0]
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	0699      	lsls	r1, r3, #26
 800d0e2:	bf42      	ittt	mi
 800d0e4:	6833      	ldrmi	r3, [r6, #0]
 800d0e6:	3302      	addmi	r3, #2
 800d0e8:	6033      	strmi	r3, [r6, #0]
 800d0ea:	6825      	ldr	r5, [r4, #0]
 800d0ec:	f015 0506 	ands.w	r5, r5, #6
 800d0f0:	d106      	bne.n	800d100 <_printf_common+0x48>
 800d0f2:	f104 0a19 	add.w	sl, r4, #25
 800d0f6:	68e3      	ldr	r3, [r4, #12]
 800d0f8:	6832      	ldr	r2, [r6, #0]
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	42ab      	cmp	r3, r5
 800d0fe:	dc26      	bgt.n	800d14e <_printf_common+0x96>
 800d100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d104:	6822      	ldr	r2, [r4, #0]
 800d106:	3b00      	subs	r3, #0
 800d108:	bf18      	it	ne
 800d10a:	2301      	movne	r3, #1
 800d10c:	0692      	lsls	r2, r2, #26
 800d10e:	d42b      	bmi.n	800d168 <_printf_common+0xb0>
 800d110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d114:	4641      	mov	r1, r8
 800d116:	4638      	mov	r0, r7
 800d118:	47c8      	blx	r9
 800d11a:	3001      	adds	r0, #1
 800d11c:	d01e      	beq.n	800d15c <_printf_common+0xa4>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	6922      	ldr	r2, [r4, #16]
 800d122:	f003 0306 	and.w	r3, r3, #6
 800d126:	2b04      	cmp	r3, #4
 800d128:	bf02      	ittt	eq
 800d12a:	68e5      	ldreq	r5, [r4, #12]
 800d12c:	6833      	ldreq	r3, [r6, #0]
 800d12e:	1aed      	subeq	r5, r5, r3
 800d130:	68a3      	ldr	r3, [r4, #8]
 800d132:	bf0c      	ite	eq
 800d134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d138:	2500      	movne	r5, #0
 800d13a:	4293      	cmp	r3, r2
 800d13c:	bfc4      	itt	gt
 800d13e:	1a9b      	subgt	r3, r3, r2
 800d140:	18ed      	addgt	r5, r5, r3
 800d142:	2600      	movs	r6, #0
 800d144:	341a      	adds	r4, #26
 800d146:	42b5      	cmp	r5, r6
 800d148:	d11a      	bne.n	800d180 <_printf_common+0xc8>
 800d14a:	2000      	movs	r0, #0
 800d14c:	e008      	b.n	800d160 <_printf_common+0xa8>
 800d14e:	2301      	movs	r3, #1
 800d150:	4652      	mov	r2, sl
 800d152:	4641      	mov	r1, r8
 800d154:	4638      	mov	r0, r7
 800d156:	47c8      	blx	r9
 800d158:	3001      	adds	r0, #1
 800d15a:	d103      	bne.n	800d164 <_printf_common+0xac>
 800d15c:	f04f 30ff 	mov.w	r0, #4294967295
 800d160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d164:	3501      	adds	r5, #1
 800d166:	e7c6      	b.n	800d0f6 <_printf_common+0x3e>
 800d168:	18e1      	adds	r1, r4, r3
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	2030      	movs	r0, #48	@ 0x30
 800d16e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d172:	4422      	add	r2, r4
 800d174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d17c:	3302      	adds	r3, #2
 800d17e:	e7c7      	b.n	800d110 <_printf_common+0x58>
 800d180:	2301      	movs	r3, #1
 800d182:	4622      	mov	r2, r4
 800d184:	4641      	mov	r1, r8
 800d186:	4638      	mov	r0, r7
 800d188:	47c8      	blx	r9
 800d18a:	3001      	adds	r0, #1
 800d18c:	d0e6      	beq.n	800d15c <_printf_common+0xa4>
 800d18e:	3601      	adds	r6, #1
 800d190:	e7d9      	b.n	800d146 <_printf_common+0x8e>
	...

0800d194 <_printf_i>:
 800d194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	7e0f      	ldrb	r7, [r1, #24]
 800d19a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d19c:	2f78      	cmp	r7, #120	@ 0x78
 800d19e:	4691      	mov	r9, r2
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	469a      	mov	sl, r3
 800d1a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d1aa:	d807      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ac:	2f62      	cmp	r7, #98	@ 0x62
 800d1ae:	d80a      	bhi.n	800d1c6 <_printf_i+0x32>
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	f000 80d2 	beq.w	800d35a <_printf_i+0x1c6>
 800d1b6:	2f58      	cmp	r7, #88	@ 0x58
 800d1b8:	f000 80b9 	beq.w	800d32e <_printf_i+0x19a>
 800d1bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d1c4:	e03a      	b.n	800d23c <_printf_i+0xa8>
 800d1c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1ca:	2b15      	cmp	r3, #21
 800d1cc:	d8f6      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ce:	a101      	add	r1, pc, #4	@ (adr r1, 800d1d4 <_printf_i+0x40>)
 800d1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1d4:	0800d22d 	.word	0x0800d22d
 800d1d8:	0800d241 	.word	0x0800d241
 800d1dc:	0800d1bd 	.word	0x0800d1bd
 800d1e0:	0800d1bd 	.word	0x0800d1bd
 800d1e4:	0800d1bd 	.word	0x0800d1bd
 800d1e8:	0800d1bd 	.word	0x0800d1bd
 800d1ec:	0800d241 	.word	0x0800d241
 800d1f0:	0800d1bd 	.word	0x0800d1bd
 800d1f4:	0800d1bd 	.word	0x0800d1bd
 800d1f8:	0800d1bd 	.word	0x0800d1bd
 800d1fc:	0800d1bd 	.word	0x0800d1bd
 800d200:	0800d341 	.word	0x0800d341
 800d204:	0800d26b 	.word	0x0800d26b
 800d208:	0800d2fb 	.word	0x0800d2fb
 800d20c:	0800d1bd 	.word	0x0800d1bd
 800d210:	0800d1bd 	.word	0x0800d1bd
 800d214:	0800d363 	.word	0x0800d363
 800d218:	0800d1bd 	.word	0x0800d1bd
 800d21c:	0800d26b 	.word	0x0800d26b
 800d220:	0800d1bd 	.word	0x0800d1bd
 800d224:	0800d1bd 	.word	0x0800d1bd
 800d228:	0800d303 	.word	0x0800d303
 800d22c:	6833      	ldr	r3, [r6, #0]
 800d22e:	1d1a      	adds	r2, r3, #4
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	6032      	str	r2, [r6, #0]
 800d234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d23c:	2301      	movs	r3, #1
 800d23e:	e09d      	b.n	800d37c <_printf_i+0x1e8>
 800d240:	6833      	ldr	r3, [r6, #0]
 800d242:	6820      	ldr	r0, [r4, #0]
 800d244:	1d19      	adds	r1, r3, #4
 800d246:	6031      	str	r1, [r6, #0]
 800d248:	0606      	lsls	r6, r0, #24
 800d24a:	d501      	bpl.n	800d250 <_printf_i+0xbc>
 800d24c:	681d      	ldr	r5, [r3, #0]
 800d24e:	e003      	b.n	800d258 <_printf_i+0xc4>
 800d250:	0645      	lsls	r5, r0, #25
 800d252:	d5fb      	bpl.n	800d24c <_printf_i+0xb8>
 800d254:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d258:	2d00      	cmp	r5, #0
 800d25a:	da03      	bge.n	800d264 <_printf_i+0xd0>
 800d25c:	232d      	movs	r3, #45	@ 0x2d
 800d25e:	426d      	negs	r5, r5
 800d260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d264:	4859      	ldr	r0, [pc, #356]	@ (800d3cc <_printf_i+0x238>)
 800d266:	230a      	movs	r3, #10
 800d268:	e011      	b.n	800d28e <_printf_i+0xfa>
 800d26a:	6821      	ldr	r1, [r4, #0]
 800d26c:	6833      	ldr	r3, [r6, #0]
 800d26e:	0608      	lsls	r0, r1, #24
 800d270:	f853 5b04 	ldr.w	r5, [r3], #4
 800d274:	d402      	bmi.n	800d27c <_printf_i+0xe8>
 800d276:	0649      	lsls	r1, r1, #25
 800d278:	bf48      	it	mi
 800d27a:	b2ad      	uxthmi	r5, r5
 800d27c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d27e:	4853      	ldr	r0, [pc, #332]	@ (800d3cc <_printf_i+0x238>)
 800d280:	6033      	str	r3, [r6, #0]
 800d282:	bf14      	ite	ne
 800d284:	230a      	movne	r3, #10
 800d286:	2308      	moveq	r3, #8
 800d288:	2100      	movs	r1, #0
 800d28a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d28e:	6866      	ldr	r6, [r4, #4]
 800d290:	60a6      	str	r6, [r4, #8]
 800d292:	2e00      	cmp	r6, #0
 800d294:	bfa2      	ittt	ge
 800d296:	6821      	ldrge	r1, [r4, #0]
 800d298:	f021 0104 	bicge.w	r1, r1, #4
 800d29c:	6021      	strge	r1, [r4, #0]
 800d29e:	b90d      	cbnz	r5, 800d2a4 <_printf_i+0x110>
 800d2a0:	2e00      	cmp	r6, #0
 800d2a2:	d04b      	beq.n	800d33c <_printf_i+0x1a8>
 800d2a4:	4616      	mov	r6, r2
 800d2a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2aa:	fb03 5711 	mls	r7, r3, r1, r5
 800d2ae:	5dc7      	ldrb	r7, [r0, r7]
 800d2b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2b4:	462f      	mov	r7, r5
 800d2b6:	42bb      	cmp	r3, r7
 800d2b8:	460d      	mov	r5, r1
 800d2ba:	d9f4      	bls.n	800d2a6 <_printf_i+0x112>
 800d2bc:	2b08      	cmp	r3, #8
 800d2be:	d10b      	bne.n	800d2d8 <_printf_i+0x144>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	07df      	lsls	r7, r3, #31
 800d2c4:	d508      	bpl.n	800d2d8 <_printf_i+0x144>
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	6861      	ldr	r1, [r4, #4]
 800d2ca:	4299      	cmp	r1, r3
 800d2cc:	bfde      	ittt	le
 800d2ce:	2330      	movle	r3, #48	@ 0x30
 800d2d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2d8:	1b92      	subs	r2, r2, r6
 800d2da:	6122      	str	r2, [r4, #16]
 800d2dc:	f8cd a000 	str.w	sl, [sp]
 800d2e0:	464b      	mov	r3, r9
 800d2e2:	aa03      	add	r2, sp, #12
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	f7ff fee6 	bl	800d0b8 <_printf_common>
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	d14a      	bne.n	800d386 <_printf_i+0x1f2>
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f4:	b004      	add	sp, #16
 800d2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	f043 0320 	orr.w	r3, r3, #32
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	4833      	ldr	r0, [pc, #204]	@ (800d3d0 <_printf_i+0x23c>)
 800d304:	2778      	movs	r7, #120	@ 0x78
 800d306:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	6831      	ldr	r1, [r6, #0]
 800d30e:	061f      	lsls	r7, r3, #24
 800d310:	f851 5b04 	ldr.w	r5, [r1], #4
 800d314:	d402      	bmi.n	800d31c <_printf_i+0x188>
 800d316:	065f      	lsls	r7, r3, #25
 800d318:	bf48      	it	mi
 800d31a:	b2ad      	uxthmi	r5, r5
 800d31c:	6031      	str	r1, [r6, #0]
 800d31e:	07d9      	lsls	r1, r3, #31
 800d320:	bf44      	itt	mi
 800d322:	f043 0320 	orrmi.w	r3, r3, #32
 800d326:	6023      	strmi	r3, [r4, #0]
 800d328:	b11d      	cbz	r5, 800d332 <_printf_i+0x19e>
 800d32a:	2310      	movs	r3, #16
 800d32c:	e7ac      	b.n	800d288 <_printf_i+0xf4>
 800d32e:	4827      	ldr	r0, [pc, #156]	@ (800d3cc <_printf_i+0x238>)
 800d330:	e7e9      	b.n	800d306 <_printf_i+0x172>
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	f023 0320 	bic.w	r3, r3, #32
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	e7f6      	b.n	800d32a <_printf_i+0x196>
 800d33c:	4616      	mov	r6, r2
 800d33e:	e7bd      	b.n	800d2bc <_printf_i+0x128>
 800d340:	6833      	ldr	r3, [r6, #0]
 800d342:	6825      	ldr	r5, [r4, #0]
 800d344:	6961      	ldr	r1, [r4, #20]
 800d346:	1d18      	adds	r0, r3, #4
 800d348:	6030      	str	r0, [r6, #0]
 800d34a:	062e      	lsls	r6, r5, #24
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	d501      	bpl.n	800d354 <_printf_i+0x1c0>
 800d350:	6019      	str	r1, [r3, #0]
 800d352:	e002      	b.n	800d35a <_printf_i+0x1c6>
 800d354:	0668      	lsls	r0, r5, #25
 800d356:	d5fb      	bpl.n	800d350 <_printf_i+0x1bc>
 800d358:	8019      	strh	r1, [r3, #0]
 800d35a:	2300      	movs	r3, #0
 800d35c:	6123      	str	r3, [r4, #16]
 800d35e:	4616      	mov	r6, r2
 800d360:	e7bc      	b.n	800d2dc <_printf_i+0x148>
 800d362:	6833      	ldr	r3, [r6, #0]
 800d364:	1d1a      	adds	r2, r3, #4
 800d366:	6032      	str	r2, [r6, #0]
 800d368:	681e      	ldr	r6, [r3, #0]
 800d36a:	6862      	ldr	r2, [r4, #4]
 800d36c:	2100      	movs	r1, #0
 800d36e:	4630      	mov	r0, r6
 800d370:	f7f2 ffbe 	bl	80002f0 <memchr>
 800d374:	b108      	cbz	r0, 800d37a <_printf_i+0x1e6>
 800d376:	1b80      	subs	r0, r0, r6
 800d378:	6060      	str	r0, [r4, #4]
 800d37a:	6863      	ldr	r3, [r4, #4]
 800d37c:	6123      	str	r3, [r4, #16]
 800d37e:	2300      	movs	r3, #0
 800d380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d384:	e7aa      	b.n	800d2dc <_printf_i+0x148>
 800d386:	6923      	ldr	r3, [r4, #16]
 800d388:	4632      	mov	r2, r6
 800d38a:	4649      	mov	r1, r9
 800d38c:	4640      	mov	r0, r8
 800d38e:	47d0      	blx	sl
 800d390:	3001      	adds	r0, #1
 800d392:	d0ad      	beq.n	800d2f0 <_printf_i+0x15c>
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	079b      	lsls	r3, r3, #30
 800d398:	d413      	bmi.n	800d3c2 <_printf_i+0x22e>
 800d39a:	68e0      	ldr	r0, [r4, #12]
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	4298      	cmp	r0, r3
 800d3a0:	bfb8      	it	lt
 800d3a2:	4618      	movlt	r0, r3
 800d3a4:	e7a6      	b.n	800d2f4 <_printf_i+0x160>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	4632      	mov	r2, r6
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	47d0      	blx	sl
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	d09d      	beq.n	800d2f0 <_printf_i+0x15c>
 800d3b4:	3501      	adds	r5, #1
 800d3b6:	68e3      	ldr	r3, [r4, #12]
 800d3b8:	9903      	ldr	r1, [sp, #12]
 800d3ba:	1a5b      	subs	r3, r3, r1
 800d3bc:	42ab      	cmp	r3, r5
 800d3be:	dcf2      	bgt.n	800d3a6 <_printf_i+0x212>
 800d3c0:	e7eb      	b.n	800d39a <_printf_i+0x206>
 800d3c2:	2500      	movs	r5, #0
 800d3c4:	f104 0619 	add.w	r6, r4, #25
 800d3c8:	e7f5      	b.n	800d3b6 <_printf_i+0x222>
 800d3ca:	bf00      	nop
 800d3cc:	0800d81d 	.word	0x0800d81d
 800d3d0:	0800d82e 	.word	0x0800d82e

0800d3d4 <memmove>:
 800d3d4:	4288      	cmp	r0, r1
 800d3d6:	b510      	push	{r4, lr}
 800d3d8:	eb01 0402 	add.w	r4, r1, r2
 800d3dc:	d902      	bls.n	800d3e4 <memmove+0x10>
 800d3de:	4284      	cmp	r4, r0
 800d3e0:	4623      	mov	r3, r4
 800d3e2:	d807      	bhi.n	800d3f4 <memmove+0x20>
 800d3e4:	1e43      	subs	r3, r0, #1
 800d3e6:	42a1      	cmp	r1, r4
 800d3e8:	d008      	beq.n	800d3fc <memmove+0x28>
 800d3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3f2:	e7f8      	b.n	800d3e6 <memmove+0x12>
 800d3f4:	4402      	add	r2, r0
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	428a      	cmp	r2, r1
 800d3fa:	d100      	bne.n	800d3fe <memmove+0x2a>
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d406:	e7f7      	b.n	800d3f8 <memmove+0x24>

0800d408 <_sbrk_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d06      	ldr	r5, [pc, #24]	@ (800d424 <_sbrk_r+0x1c>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	602b      	str	r3, [r5, #0]
 800d414:	f7f6 fc4c 	bl	8003cb0 <_sbrk>
 800d418:	1c43      	adds	r3, r0, #1
 800d41a:	d102      	bne.n	800d422 <_sbrk_r+0x1a>
 800d41c:	682b      	ldr	r3, [r5, #0]
 800d41e:	b103      	cbz	r3, 800d422 <_sbrk_r+0x1a>
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	240b6b4c 	.word	0x240b6b4c

0800d428 <memcpy>:
 800d428:	440a      	add	r2, r1
 800d42a:	4291      	cmp	r1, r2
 800d42c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d430:	d100      	bne.n	800d434 <memcpy+0xc>
 800d432:	4770      	bx	lr
 800d434:	b510      	push	{r4, lr}
 800d436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d43a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d43e:	4291      	cmp	r1, r2
 800d440:	d1f9      	bne.n	800d436 <memcpy+0xe>
 800d442:	bd10      	pop	{r4, pc}

0800d444 <_realloc_r>:
 800d444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d448:	4680      	mov	r8, r0
 800d44a:	4615      	mov	r5, r2
 800d44c:	460c      	mov	r4, r1
 800d44e:	b921      	cbnz	r1, 800d45a <_realloc_r+0x16>
 800d450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d454:	4611      	mov	r1, r2
 800d456:	f7ff bc4b 	b.w	800ccf0 <_malloc_r>
 800d45a:	b92a      	cbnz	r2, 800d468 <_realloc_r+0x24>
 800d45c:	f7ff fbdc 	bl	800cc18 <_free_r>
 800d460:	2400      	movs	r4, #0
 800d462:	4620      	mov	r0, r4
 800d464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d468:	f000 f81a 	bl	800d4a0 <_malloc_usable_size_r>
 800d46c:	4285      	cmp	r5, r0
 800d46e:	4606      	mov	r6, r0
 800d470:	d802      	bhi.n	800d478 <_realloc_r+0x34>
 800d472:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d476:	d8f4      	bhi.n	800d462 <_realloc_r+0x1e>
 800d478:	4629      	mov	r1, r5
 800d47a:	4640      	mov	r0, r8
 800d47c:	f7ff fc38 	bl	800ccf0 <_malloc_r>
 800d480:	4607      	mov	r7, r0
 800d482:	2800      	cmp	r0, #0
 800d484:	d0ec      	beq.n	800d460 <_realloc_r+0x1c>
 800d486:	42b5      	cmp	r5, r6
 800d488:	462a      	mov	r2, r5
 800d48a:	4621      	mov	r1, r4
 800d48c:	bf28      	it	cs
 800d48e:	4632      	movcs	r2, r6
 800d490:	f7ff ffca 	bl	800d428 <memcpy>
 800d494:	4621      	mov	r1, r4
 800d496:	4640      	mov	r0, r8
 800d498:	f7ff fbbe 	bl	800cc18 <_free_r>
 800d49c:	463c      	mov	r4, r7
 800d49e:	e7e0      	b.n	800d462 <_realloc_r+0x1e>

0800d4a0 <_malloc_usable_size_r>:
 800d4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a4:	1f18      	subs	r0, r3, #4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	bfbc      	itt	lt
 800d4aa:	580b      	ldrlt	r3, [r1, r0]
 800d4ac:	18c0      	addlt	r0, r0, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <_init>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr

0800d4bc <_fini>:
 800d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4be:	bf00      	nop
 800d4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4c2:	bc08      	pop	{r3}
 800d4c4:	469e      	mov	lr, r3
 800d4c6:	4770      	bx	lr
